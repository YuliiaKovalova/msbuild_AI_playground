{
  "number": 2706,
  "title": "Upgrade to .NET Core 2.0",
  "body": "This is in no way a complete list, but I thought I would get started on it. @dsplaisted can you keep this up to date please? You can probably just edit this Issue.\r\n- [x] Move `.csproj` to .NET Core SDK\r\n- [x] Enable all tests (including deploying required dependencies) [2 days]\r\n- [x] Enable \"bootstrap\" build for .NET Core, Full Framework [1 day]\r\n\r\n### Full Framework specific\r\n- [x] VS Insertion [.5 days]\r\n  - [x] `/p:Platform='x86'` (VS insertion)\r\n  - [x] `/p:Platform='amd64'` (VS insertion)\r\n  - [x] Update `.swr` VSIX layout https://github.com/Microsoft/msbuild/blob/master/setup/files.swr\r\n  - [x] What's the relationship between the different .vsix files produced, and why does `-pack` fail due to duplicates?\r\n- [ ] MicroBuild: `/p:SignType=[Real/Test]`, otherwise Roslyn publicsign [0 days]\r\n- [x] `EditBin` supported on x86 build: [0 days] https://github.com/Microsoft/msbuild/blob/e49204a31550c8a0a53a99013a23c765d02b4dfb/dir.targets#L168-L170\r\n- [x] `MSBuildTaskHost.exe` targets .NET 3.5 [.5 days]\r\n- [x] Package output for `MSBuild.Engine.Corext` and `VS.ExternalAPIs.MSBuild`\r\n  - [x] Is MSBuild.Engine.Corext.nuspec in sync with files.swr?  It has some additional DLLs listed\r\n  - [x] Is it OK to delete the NuGet targets from MsBuild.Engine.Corext now that VS 15.5 has shipped?\r\n\r\n- [x] `/p:LocalizedBuild=true` sync `xlf` files to `resx` for building satellite assemblies [.5 days]\r\n  - Ideally delete the `build/LocalizationTasks` folder and use repo toolset's functionality\r\n  - [x] Do we still need English satellite assemblies?\r\n  - [x] Do we need an equivalent to the `LocalizedTestBuild` functionality?\r\n- [x] GitVersioning support* [.5 days]\r\n_* Indicates nice to have building from .NET Core, required building from full framework_\r\n\r\n### .Net Core on !Windows\r\n- [x] Fix failing tests (#2884)\r\n\r\n### Common\r\n- [x] NuGet package output [.5 days]\r\n- [x] Satellite assemblies packaged [.5 days]\r\n- [x] Detect changed files after build\r\n\r\n```batch\r\n:: Only detect source control changes when running in the CI environment\r\n:: Detect if there are any changed files which should fail the build\r\nif DEFINED JENKINS_URL (\r\n    echo Detecting changed files...\r\n    git status\r\n    git --no-pager diff HEAD --word-diff=plain --exit-code\r\n    if ERRORLEVEL 1 (\r\n        echo.\r\n        echo [ERROR] After building, there are changed files.  Please build locally ^(cibuild.cmd --target All^) and include these changes in your pull request. 1>&2\r\n        goto :error\r\n    )\r\n    goto :EOF\r\n)\r\n```\r\n\r\n- [x] Linux / Mac build script support [.5 days]\r\n- [ ] Mono support\r\n- [ ] PublishToBlob.proj (orchestrated build)\r\n- [x] LegacyPackages (probably no changes needed)\r\n- [ ] MicrobuildTest.ps1\r\n- [x] GenAPI / Reference assembly production [.5 days]\r\n- [ ] PdbGit / SourceLink\r\n\r\n```xml\r\n  <!-- https://github.com/AArnott/PdbGit - stamps the .pdbs with URLs to sources on GitHub\r\n       so that the debugger can download the exact matching source files during debugging -->\r\n  <Import Project=\"$(PackagesDir)\\pdbgit\\3.0.41\\build\\PdbGit.targets\" Condition=\"'$(DebugType)' == 'full' And '$(IsTestProject)' != 'true' And Exists('$(PackagesDir)\\pdbgit\\3.0.41\\build\\PdbGit.targets')\" />\r\n\r\n  <!-- https://github.com/ctaggart/SourceLink - stamps portable or embedded .pdbs with URLs to sources on GitHub\r\n       so that debugger can download the exact matching source files during debugging -->\r\n  <Import Project=\"$(PackagesDir)\\sourcelink.create.commandline\\2.1.2\\build\\SourceLink.Create.CommandLine.targets\" Condition=\"'$(SourceLinkCreate)' == 'true' And '$(DebugType)' != 'full' And '$(IsTestProject)' != 'true' And Exists('$(PackagesDir)\\sourcelink.create.commandline\\2.1.2\\build\\SourceLink.Create.CommandLine.targets')\" />\r\n```\r\n - [x] Embed interop types for Microsoft.VisualStudio.Setup.Configuration.Interop\r\n\r\n```xml\r\n  <Target Name=\"LinkVSEmbeddableAssemblies\" DependsOnTargets=\"ResolveReferences\" AfterTargets=\"ResolveReferences\">\r\n    <ItemGroup>\r\n      <ReferencePath Condition=\"'%(FileName)' == 'Microsoft.VisualStudio.Setup.Configuration.Interop'\">\r\n        <EmbedInteropTypes>true</EmbedInteropTypes>\r\n      </ReferencePath>\r\n    </ItemGroup>\r\n  </Target>\r\n```\r\n\r\n- [ ] CI Setup\r\n- [x] Do \"Deprecated\" projects need to be migrated?\r\n- [x] Verify reference assembly changes are OK\r\n- [ ] Verify correct version numbers for official builds (NuGet packages, assembly versions)\r\n- [x] Produce XML API documentation, and include in NuGet packages\r\n- [ ] cibuild.cmd fails if the repo path has spaces in it. (https://github.com/dotnet/roslyn-tools/issues/148)\r\n- [ ] Update repo developer documentation\r\n  \r\n  \r\n  ",
  "state": "CLOSED",
  "createdAt": "2017-11-07T02:51:59Z",
  "updatedAt": "2024-02-21T17:15:47Z",
  "closedAt": "2018-03-27T16:17:02Z",
  "author": {
    "login": "AndyGerlicher"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "dsplaisted"
      }
    ]
  },
  "milestone": {
    "title": "Selfhost Sdks"
  },
  "comments": {
    "nodes": [
      {
        "body": "As outlined in #2738, I've discovered that it's no longer going to be possible to create \"portable\" tasks that use a single DLL that works on both .NET Core and .NET Framework MSBuild after these changes.  I'm not sure how much of an issue that is.  It would still be possible to reference the older versions of the MSBuild libraries that target .NET Standard 1.3, you just wouldn't be able to use any newer MSBuild APIs.",
        "createdAt": "2017-11-21T23:30:17Z",
        "updatedAt": "2017-11-21T23:30:17Z",
        "author": {
          "login": "dsplaisted"
        }
      },
      {
        "body": "Work in progress for this is in the [exp/update-toolset](https://github.com/microsoft/msbuild/tree/exp/update-toolset) branch.",
        "createdAt": "2017-11-29T07:12:43Z",
        "updatedAt": "2017-11-29T07:12:43Z",
        "author": {
          "login": "dsplaisted"
        }
      },
      {
        "body": "See https://github.com/Microsoft/msbuild/pull/2761 for WIP PR for this.",
        "createdAt": "2017-12-04T15:30:18Z",
        "updatedAt": "2017-12-04T15:30:18Z",
        "author": {
          "login": "dsplaisted"
        }
      },
      {
        "body": "To embed VS interop types, we can reference https://www.nuget.org/packages/Microsoft.VisualStudio.SDK.EmbedInteropTypes/",
        "createdAt": "2018-01-26T20:50:04Z",
        "updatedAt": "2018-01-26T20:50:04Z",
        "author": {
          "login": "dsplaisted"
        }
      },
      {
        "body": "Please update the build documentation (https://github.com/Microsoft/msbuild/blob/master/README.md, https://github.com/Microsoft/msbuild/wiki/Building-Testing-and-Debugging-on-.Net-Core-MSBuild). I believe the information is not up-to-date now that cibuild.cmd was removed.\r\n\r\nI'm still interested in how is the new system supposed to work for Mono builds. While I fully understand the work on that is not done yet I would appreciate at least a two sentence description of what is supposed to be the final state. Apparently, the `cibuild` script was replaced by `build/cibuild.sh`, but the `--host` and `--target` parameters are no longer valid. Am I supposed to just open MSBuild.sln and be able to build it in Visual Studio for Mac eventually?",
        "createdAt": "2018-01-31T09:29:15Z",
        "updatedAt": "2018-01-31T09:29:15Z",
        "author": {
          "login": "filipnavara"
        }
      },
      {
        "body": "@filipnavara \r\n\r\n> I'm still interested in how is the new system supposed to work for Mono builds. While I fully understand the work on that is not done yet I would appreciate at least a two sentence description of what is supposed to be the final state. Apparently, the cibuild script was replaced by build/cibuild.sh, but the --host and --target parameters are no longer valid.\r\n\r\n@radical is going to work on adding something similar to the new build scripts\r\n\r\n> Am I supposed to just open MSBuild.sln and be able to build it in Visual Studio for Mac eventually?\r\n\r\nYou will probably have to run the build script first (this is what you have to do on Windows currently)\r\n\r\n",
        "createdAt": "2018-01-31T23:27:18Z",
        "updatedAt": "2018-01-31T23:27:18Z",
        "author": {
          "login": "dsplaisted"
        }
      },
      {
        "body": "I was a bit confused by the `cibuild.sh` in the project root dir. I assume this is a leftover and `./build/build.sh` is to be used?",
        "createdAt": "2018-01-31T23:36:47Z",
        "updatedAt": "2018-01-31T23:36:47Z",
        "author": {
          "login": "dasMulli"
        }
      },
      {
        "body": "@dasMulli Yes, that's left over.  For Windows, we have a build.cmd in the root which invokes the `build\\build.ps1`.  We should probably do the same thing for the `.sh` script. @cdmihai ",
        "createdAt": "2018-01-31T23:43:13Z",
        "updatedAt": "2018-01-31T23:43:13Z",
        "author": {
          "login": "dsplaisted"
        }
      },
      {
        "body": ">- [ ] MicroBuild: /p:SignType=[Real/Test], otherwise Roslyn publicsign [0 days]\r\n\r\nIs this related to https://github.com/dotnet/roslyn/pull/23061? Now (starting with next, VS 15.6) roslyn supports strong named signing with .NET Core.",
        "createdAt": "2018-02-15T22:05:40Z",
        "updatedAt": "2018-02-15T22:06:09Z",
        "author": {
          "login": "ghost"
        }
      },
      {
        "body": "I think all the scripts have been cleaned up, and this is definitely overall done. Closing--if you know of specific things that aren't already tracked in other issues, please open new issues.",
        "createdAt": "2018-03-27T16:17:02Z",
        "updatedAt": "2018-03-27T16:17:02Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}