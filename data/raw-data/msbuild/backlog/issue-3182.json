{
  "number": 3182,
  "title": "Item metadata not being evaluated when passed to build task assemblies",
  "body": "### Steps to reproduce\r\nI have a C++ XAML project with custom build logic that more or less is like this:\r\n```xml\r\n<ItemGroup>\r\n  <Dependency Include=\u201dA\u201d>\r\n    <IncludeDirs>C:\\Path\\A</IncludeDirs>\r\n  </Dependency>\r\n  < Dependency Include=\u201dB\u201d>\r\n    <IncludeDirs>C:\\Path\\B</IncludeDirs>\r\n  </Dependency >\r\n</ItemGroup>\r\n\r\n<PropertyGroup>\r\n  <ExtraIncludeDirs>@(Dependency->'%(IncludeDirs)')</ ExtraIncludeDirs >\r\n</PropertyGroup>\r\n\r\n<ItemDefinitionGroup>\r\n  <ClCompile>\r\n    <AdditionalIncludeDirectories>%(ClCompile.AdditionalIncludeDirectories);$(ExtraIncludeDirs)</AdditionalIncludeDirectories>\r\n  </ClCompile>\r\n\r\n  <ResourceCompile>\r\n    <AdditionalIncludeDirectories>%(ResourceCompile.AdditionalIncludeDirectories);$(ExtraIncludeDirs)</AdditionalIncludeDirectories>\r\n  </ResourceCompile>\r\n</ItemDefinitionGroup>\r\n```\r\n\r\n### Expected  behavior\r\n\r\nThis should compile just fine with the extra include directories passed to the compiler.\r\n\r\n### Actual behavior\r\n\r\nThis worked fine for the most part in normal C++ projects, until I tried to use this in a C++ XAML project. Then it blew up trying to compile the XAML with an opaque \u201cPath has invalid characters\u201d error when invoking the XAML compiler MSBuild task. I debugged it and found out it was because the XamlCppIncludeDirectories property that gets passed to the task had a value of \u201c@(Dependency->'%(IncludeDirs)')\u201d rather than the actual evaluated value. For reference, here\u2019s how that task is invoked (from C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\MSBuild\\Microsoft\\WindowsXaml\\v15.0\\8.1\\Microsoft.Windows.UI.Xaml.Common.Targets):\r\n```xml\r\n<!-- In order for the XAML compiler to generated the correct relative paths for #includes in\r\n     the generated C++ code it needs to know the AdditionalIncludeDirectories of all the .cpp\r\n     files are DependentUpon XAML files.-->\r\n<Target Name=\"GetXamlCppIncludeDirectories\" Condition=\"'$(ManagedAssembly)'=='false' and '$(XamlCppIncludeDirectories)' == ''\">\r\n    <GetXamlCppIncludeDirectories ClCompile=\"@(ClCompile)\">\r\n        <Output PropertyName=\"XamlCppIncludeDirectories\" TaskParameter=\"ComputedIncludeDirectories\" />\r\n    </GetXamlCppIncludeDirectories>\r\n</Target>\r\n```\r\nNow, I expect the property value to be non-evaluated during the evaluation phase of the build per the MSBuild documentation, but that same documentation indicates that these transforms and expressions should be evaluated during the execution phase when this XAML target is executing. It seems to happen properly for the normal C++ CL task itself, which is invoked like:\r\n```xml\r\n<CL Condition=\"'%(ClCompile.PrecompiledHeader)' != 'Create' and '%(ClCompile.ExcludedFromBuild)'!='true' and '%(ClCompile.CompilerIteration)' == '' and @(ClCompile) != ''\"\r\n    BuildingInIDE                      =\"$(BuildingInsideVisualStudio)\"\r\n    Sources                            =\"@(ClCompile)\"\r\n\r\n    AdditionalIncludeDirectories       =\"%(ClCompile.AdditionalIncludeDirectories)\"\r\n    \u2026\r\n```\r\n\r\nNote the difference: CL is invoked by directly evaluating each metadata property and passing them each to the task. GetXamlCppIncludeDirectories is passed each whole item and the metadata is presumably processed programmatically within the task\u2019s assembly.\r\n\r\nI was able to work around the problem of the non-evaluation by forcing evaluation myself in a rather silly/hacky intermediate custom build target:\r\n```xml\r\n<Target Name=\"CreateMetadata\"\r\n  BeforeTargets=\u201dPrepareForBuild\u201d>\r\n  <ItemGroup>\r\n    <ClCompile>\r\n      <AdditionalIncludeDirectories>%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>\r\n    </ClCompile>\r\n  </ItemGroup>\r\n</Target>\r\n```\r\n\r\nTalking to an MSBuild developer, it seems that the problem is that there is an issue with the items not having their default metadata evaluated by the MSBuild engine before being passed to the XAML task, so the raw property value never gets recursively evaluated before being passed in. This is due to an internal implementation detail of how ItemDefinitionGroup entries are referenced/evaluated.\r\n\r\nIdeally properties like this would get evaluated in such cases before being passed to MSBuild task assemblies, this special condition could be more easily detectable by developers, or at minimum this limitation get documented.\r\n\r\n### Environment data\r\n`msbuild /version` output:\r\nMicrosoft (R) Build Engine version 15.6.85.37198 for .NET Framework\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n15.6.85.37198\r\n\r\nOS info:\r\nWindows 10 Version 1709 (OS Build 16299.309)\r\n\r\nIf applicable, version of the tool that invokes MSBuild (Visual Studio, dotnet CLI, etc):\r\nVisual Studio 2017 15.6.6",
  "state": "OPEN",
  "createdAt": "2018-04-10T23:46:24Z",
  "updatedAt": "2024-02-21T16:34:19Z",
  "closedAt": null,
  "author": {
    "login": "scramsby"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "I am facing this same issue. is there are resolution/workaround for this?\r\n",
        "createdAt": "2019-11-20T17:41:21Z",
        "updatedAt": "2019-11-20T17:41:21Z",
        "author": {
          "login": "juliosaenz"
        }
      }
    ]
  }
}