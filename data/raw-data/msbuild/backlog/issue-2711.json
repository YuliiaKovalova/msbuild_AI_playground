{
  "number": 2711,
  "title": "Log how properties are initially assigned",
  "body": "See request here:\r\nhttps://github.com/KirillOsenkov/MSBuildStructuredLog/issues/133\r\n\r\nWe log when properties are reassigned when they already had a value, but it would be useful to specify how a property was initially assigned - from an environment variable, from /p:, from evaluation (and which location exactly) or from building (which target, task etc).\r\n\r\nPropertyAssignmentSource or something.",
  "state": "CLOSED",
  "createdAt": "2017-11-09T18:55:58Z",
  "updatedAt": "2025-02-13T12:20:02Z",
  "closedAt": "2025-02-13T12:20:02Z",
  "author": {
    "login": "KirillOsenkov"
  },
  "milestone": null,
  "assignees": {
    "nodes": [
      {
        "login": "YuliiaKovalova"
      }
    ]
  },
  "labels": [
    "help wanted",
    "Area: Debuggability",
    "Feature Request",
    "Feature: Warning Waves",
    "Area: Logging",
    "Area: BuildCheck"
  ],
  "comments": {
    "nodes": [
      {
        "body": "Yes pretty please! Your log viewer is just an indispensable tool, thank you very much for it! But I lamented not once being unable to figure out where the initial value of a property is coming from.",
        "createdAt": "2017-12-10T00:31:33Z",
        "author": {
          "login": "kkm000"
        }
      },
      {
        "body": "Sounds reasonable. Until this is implemented, I usually use a preprocessed project, searching from the top for `<PropertyName` to see where it could have gotten assigned. ",
        "createdAt": "2018-02-15T23:17:12Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "This seems to be working now: `export MsBuildLogPropertyTracking=3`.",
        "createdAt": "2022-07-06T14:03:40Z",
        "author": {
          "login": "iii-i"
        }
      },
      {
        "body": "Implementing this is likely to cause a huge perf overhead (but needs to be measured to confirm). Like Rainer says, the workaround is to preprocess the project and search for the <PropertyName in the preprocessed text. Binlog viewer supports the Preprocess command on any project.\r\n\r\nHowever I think we could implement logging cheaply for some special cases (where we don't have it already):\r\n\r\n 1. property coming from a command-line argument (e.g. /p:)\r\n 2. property coming from environment (another PR already in progress that should solve this)\r\n 3. as an output of a target\r\n 4. as an output of a task\r\n 5. from a PropertyGroup inside a target\r\n\r\nbasically everything but evaluation. I'm worried that logging every property initial assignment for every evaluation will result in way too much new logging args and allocations and create a lot of noise too. I think preprocessor gives a reasonable alternative for those.",
        "createdAt": "2022-07-06T17:19:52Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "@JanKrivanek @AR-May @rokonec @rainersigwald not logging initial assignment for properties and items during evaluation continues to be a huge pain point. Normally binlogs are great, but not having this information often leaves us in the dark and guessing.\n\nI think there's some disabled code from at least two past attempts, as well as event args ready to use such as `PropertyInitialValueSetEventArgs`. I think it would be nice to build a prototype and see how much it slows the build down as well as how does this impact the binlog size. Maybe our fears are unfounded and the overhead will be negligible?\n\nChecklist for what would be nice:\n\n - [ ] `PropertyInitialValueSetEventArgs` for properties assigned during evaluation, contain location in the XML where the assignment happened (inside a `<PropertyGroup>` presumably)\n\n~`TaskParameterEventArgs` of type `TaskParameterMessageKind.AddItem`/`RemoveItem` - has the item list as well as metadata and the location in XML where it happened during initial evaluation.~ - this chuck of work is tracked separately ! https://github.com/dotnet/msbuild/issues/10103\n\nBoth of these would be logged during evaluation.",
        "createdAt": "2024-01-18T22:24:02Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "I suspect we'll also want these events for analyzers (rules like \"don't set property X in context Y\" or \"never set property Q to value Z\").",
        "createdAt": "2024-01-18T22:41:02Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Let's use some structured info (not a textual info in BuildMessageEventArgs etc.). We possibly might reuse `PropertyReassignmentEventArgs` (where previous value is `null`) - but probably not a good idea as Viewer and other things might already have some assumptions",
        "createdAt": "2024-02-19T12:32:30Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "we do have the (unused) structured events already, see my comment above",
        "createdAt": "2024-02-19T14:37:29Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "@KirillOsenkov , @rainersigwald , @JanKrivanek could you clarify these points?\r\nBefore reusing the unused structured events, should I measure the perf impact? Or are we ready to have it at any price? \r\nShould these events be an opt-in thing or emitted always? ",
        "createdAt": "2024-02-21T10:53:03Z",
        "author": {
          "login": "YuliiaKovalova"
        }
      },
      {
        "body": "I'd say let's build a prototype and gather some data on the impact to build perf and binlog size, for small and large builds",
        "createdAt": "2024-02-21T10:59:07Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "+1 on prototyping and then measuring on a reasonably sized project (OrchardCore e.g.)\r\n\r\nIf there is a measurable difference in overall build time and binlog size, then we can think about couple possible optimizations (e.g. the info can be probably be groupped into single message for a single project evaluation, it can possibly be opt-in only similar to requiring `MSBUILDLOGPROPERTIESANDITEMSAFTEREVALUATION` for props/items values in `ProjectEvaluationFinishedEventArgs` - though this particular one has very minimum impact when opted in)",
        "createdAt": "2024-02-21T11:54:02Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "As noted in one of the older messages above, this feature already exists and can be enabled by setting `MsBuildLogPropertyTracking`. Just wanted to point it out so it doesn't get lost. It looks like it just needs location info added to `PropertyInitialValueSetEventArgs`.",
        "createdAt": "2024-02-21T14:43:44Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "Right; there have been at least two attempts to do this, and both were either backed out or disabled. We need to do some archeology to understand what happened and dig through the old PRs.",
        "createdAt": "2024-02-21T16:04:13Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "> Right; there have been at least two attempts to do this, and both were either backed out or disabled. We need to do some archeology to understand what happened and dig through the old PRs.\r\n\r\nSounds good! I will approach it at the beginning of March .\r\nThank you for the details.",
        "createdAt": "2024-02-21T16:14:29Z",
        "author": {
          "login": "YuliiaKovalova"
        }
      },
      {
        "body": "I use `export MsBuildLogPropertyTracking=3` quite often in my daily work on dotnet/runtime, +1 on having this feature :)",
        "createdAt": "2024-06-26T11:24:19Z",
        "author": {
          "login": "ivanpovazan"
        }
      },
      {
        "body": "Not sure if this is the right place to report it, but when I create a log and enable tracking of initial property values (e.g., `export MsBuildLogPropertyTracking=15`) the log does not include the full source information in case the value comes from `.xml`. The example output:\r\n\r\n```\r\n...\r\nRead uninitialized property \"DirectorySolutionTargetsPath\"\r\nRead uninitialized property \"_DirectorySolutionTargetsFile\"\r\nProperty initial value: $(_DirectorySolutionTargetsFile)=\"Directory.Solution.targets\" Source: Xml\r\n...\r\n```\r\n\r\nIt is good that the log includes the information that the value comes from an `.xml` ie `Source: Xml` but it would be great if it could include the full path to the source. This would be particularly useful when debugging the order of imports where various `.props` and `.targets` files from our SDKs contribute to setting the initial value of the same property.",
        "createdAt": "2024-07-03T11:20:39Z",
        "author": {
          "login": "ivanpovazan"
        }
      },
      {
        "body": "I think this is really useful to speedup the investigations on binlogs!",
        "createdAt": "2024-10-08T16:02:32Z",
        "author": {
          "login": "MarcoRossignoli"
        }
      }
    ]
  }
}