{
  "number": 2707,
  "title": "SGen doesn't work with reference assemblies (?)",
  "body": "### Steps to reproduce\r\n\r\n1. Create a new Windows Classic Console App in VS 15.3 or newer\r\n2. Unload the project and add these package references to the .csproj:\r\n```\r\n  <ItemGroup>\r\n    <PackageReference Include=\"MassTransit.RabbitMQ\">\r\n      <Version>3.5.6</Version>\r\n    </PackageReference>\r\n    <PackageReference Include=\"Microsoft.Extensions.DependencyInjection\">\r\n      <Version>1.1.0</Version>\r\n    </PackageReference>\r\n  </ItemGroup>\r\n```\r\n3. Set this property:\r\n```\r\n    <GenerateSerializationAssemblies>On</GenerateSerializationAssemblies>\r\n```\r\n4. Reload the project and build.\r\n\r\n### Expected  behavior\r\nShould build.\r\n\r\n### Actual behavior\r\n```\r\nSeverity\tCode\tDescription\tProject\tFile\tLine\tSuppression State\r\nError\t\tAn attempt was made to load an assembly with an incorrect format: C:\\Users\\kirillo\\.nuget\\packages\\System.Net.Http\\4.3.0\\ref\\net46\\System.Net.Http.dll.\tDanTupRepro\tC:\\Users\\kirillo\\Documents\\Visual Studio 2017\\Projects\\DanTupRepro\\SGEN\t\t\r\n```\r\n\r\n### Environment data\r\n`msbuild /version` output:\r\n15.3.409.57025\r\n",
  "state": "CLOSED",
  "createdAt": "2017-11-07T21:06:31Z",
  "updatedAt": "2024-07-26T08:58:02Z",
  "closedAt": "2019-10-23T17:56:25Z",
  "author": {
    "login": "KirillOsenkov"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "The detailed error also contains a more specific explanation:\r\n\r\n> Reference assemblies should not be loaded for execution.  They can only be loaded in the Reflection-only loader context. (Exception from HRESULT: 0x80131058)\r\n\r\nWe've hit this after migrating to PackageReference - MSBuild now passes additional DLLs (including some ref assemblies) to sgen. This means in many cases, switching to PackageReference may require disabling generation of serialisation assemblies (which could be an extra risk, relying on them to be created at runtime, as well as a perf hit).\r\n\r\nTo add furtehr confusion, with GenerateSerializationAssemblies set to Auto (the default), this happens to us in Release builds but not Debug (both configs are set to Auto). I don't know if auto means \"on for release builds and off for debug builds\" but it seems to behave that way for our project at least!",
        "createdAt": "2017-11-08T08:50:22Z",
        "updatedAt": "2017-11-08T08:50:22Z",
        "author": {
          "login": "DanTup"
        }
      },
      {
        "body": "> I don't know if auto means \"on for release builds and off for debug builds\" \r\n\r\nIt does:\r\n\r\n```\r\n<_SGenGenerateSerializationAssembliesConfig>$(GenerateSerializationAssemblies)</_SGenGenerateSerializationAssembliesConfig>\r\n<_SGenGenerateSerializationAssembliesConfig Condition=\"'$(ConfigurationName)'=='Debug' and '$(_SGenGenerateSerializationAssembliesConfig)' == 'Auto'\">Off</_SGenGenerateSerializationAssembliesConfig>\r\n```\r\n\r\nhttps://github.com/microsoft/msbuild/blob/master/src/Tasks/Microsoft.Common.CurrentVersion.targets#L3429-L3431",
        "createdAt": "2017-11-08T15:56:49Z",
        "updatedAt": "2017-11-08T15:57:09Z",
        "author": {
          "login": "radical"
        }
      },
      {
        "body": "@radical Aha, thanks! I did Google for an answer but turned up nothing. Strange that if that's what it does that my csproj have separate elements for this setting in both Release and Debug both set to Auto by default - if the default is on-for-release and off-for-debug, putting the values in directly would remove some confusion over what Auto means (or indeed, why it means something different depending on whether the configuration name is the magic string \"Debug\"!).",
        "createdAt": "2017-11-08T18:29:10Z",
        "updatedAt": "2017-11-08T18:29:10Z",
        "author": {
          "login": "DanTup"
        }
      },
      {
        "body": "I've submitted a ticket in the SDK:\r\nhttps://github.com/dotnet/sdk/issues/1630\r\nand proposed a work around that we use in my company.",
        "createdAt": "2017-11-09T14:14:01Z",
        "updatedAt": "2017-11-09T14:14:01Z",
        "author": {
          "login": "emmanuelguerin"
        }
      },
      {
        "body": "My company just ran into this, but only if we add a package reference to [SourceLink.Embed.AllSourceFiles](https://www.nuget.org/packages/SourceLink.Embed.AllSourceFiles/). With that reference, msbuild gives this:\r\n\r\n> SGEN : error : An attempt was made to load an assembly with an incorrect format: `%userprofile%\\.nuget\\packages\\system.net.http\\4.3.0\\ref\\net46\\System.Net.Http.dll`\r\n\r\nI can't tell if this is entirely related? The project itself is targeting `net462` and that shouldn't change with this new package reference.",
        "createdAt": "2017-11-14T20:39:08Z",
        "updatedAt": "2017-11-14T20:41:30Z",
        "author": {
          "login": "jnm2"
        }
      },
      {
        "body": "Workaround for me is `ExcludeAssets=\"compile\"`:\r\n\r\n```xml\r\n<PackageReference Include=\"SourceLink.Embed.AllSourceFiles\" Version=\"2.5.0\" ExcludeAssets=\"compile\" />\r\n```\r\n\r\nIs that a bug in the package? It shouldn't be adding references to my project, only messing with build targets to pass <code>/embed:<i>bigfilelist</i></code> to csc.exe.",
        "createdAt": "2017-11-14T20:46:37Z",
        "updatedAt": "2017-11-14T20:46:37Z",
        "author": {
          "login": "jnm2"
        }
      },
      {
        "body": "This will only get more common as people move to new-style projects + NuGet. Pulling into 15.6, at least for triage so we don't forget it.",
        "createdAt": "2017-12-22T17:20:43Z",
        "updatedAt": "2017-12-22T17:20:43Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Just a \"me too\" comment, that we're migrating to new-style projects and we've hit this issue today - I figure we missed the 15.6 milestone for this issue. I'm going to explore disabling serialization assembly generation, but obviously I'd rather not. Cheers!",
        "createdAt": "2018-05-04T14:56:08Z",
        "updatedAt": "2018-05-04T14:56:08Z",
        "author": {
          "login": "AndrewGretton"
        }
      },
      {
        "body": "Another \"me too\" here. Is there any planned fix for this?",
        "createdAt": "2018-08-22T09:23:16Z",
        "updatedAt": "2018-08-22T09:23:16Z",
        "author": {
          "login": "mattwhetton"
        }
      },
      {
        "body": "Just another \u201cme too\u201d comment ",
        "createdAt": "2018-12-17T23:39:42Z",
        "updatedAt": "2018-12-17T23:39:42Z",
        "author": {
          "login": "theCorb1nator"
        }
      },
      {
        "body": "me too....",
        "createdAt": "2019-01-23T15:38:57Z",
        "updatedAt": "2019-01-23T15:38:57Z",
        "author": {
          "login": "rfcdejong"
        }
      },
      {
        "body": "This is still happening for certain projects here as well, is there any other workaround besides turning off that serialization?",
        "createdAt": "2019-02-12T11:54:30Z",
        "updatedAt": "2019-02-12T11:54:30Z",
        "author": {
          "login": "bdemolder"
        }
      },
      {
        "body": "me too. i also met the same issue in the vs 2019, .net framework 4.7.2.\r\nerror message as below:\r\n\r\nSeverity\tCode\tDescription\tProject\tFile\tLine\tSuppression State\r\nError\t\tAn attempt was made to load an assembly with an incorrect format: C:\\Users\\ey02\\.nuget\\packages\\system.memory\\4.5.1\\ref\\netstandard2.0\\System.Memory.dll.\tSapTalk.Scheduler\tC:\\Workspace\\SourceCode\\Phase5\\Ey.SapTalk\\SapTalk.Scheduler\\SGEN\t\t\r\n",
        "createdAt": "2019-06-17T09:31:34Z",
        "updatedAt": "2019-06-17T09:31:34Z",
        "author": {
          "login": "zeng16107"
        }
      },
      {
        "body": "Me too.\r\n\r\nsame error\r\n\r\nSeverity\tCode\tDescription\tProject\tFile\tLine\tSuppression State\r\nError\tAn attempt was made to load an assembly with an incorrect format: C:\\Users\\ey02.nuget\\packages\\system.memory\\4.5.1\\ref\\netstandard2.0\\System.Memory.dll. SapTalk.Scheduler\tC:\\Workspace\\SourceCode\\Phase5\\Ey.SapTalk\\SapTalk.Scheduler\\SGEN",
        "createdAt": "2019-06-17T10:23:09Z",
        "updatedAt": "2019-06-17T10:23:25Z",
        "author": {
          "login": "morrisond91"
        }
      },
      {
        "body": "Well, 'me too'. We are using .net 4.7.2 and both new and old format of .csproj files in different projects. Error occurred after referencing new package.",
        "createdAt": "2019-07-22T12:29:56Z",
        "updatedAt": "2019-07-22T12:29:56Z",
        "author": {
          "login": "Ujinjinjin"
        }
      },
      {
        "body": "Same issue with 4.8.",
        "createdAt": "2019-07-23T21:05:48Z",
        "updatedAt": "2019-07-23T21:05:48Z",
        "author": {
          "login": "dbeattie71"
        }
      },
      {
        "body": "In our implementation, I was able to exclude the reference from compile.\r\n```\r\n   <PackageReference Include=\"Unity.Interception\">\r\n     <ExcludeAssets>compile</ExcludeAssets>\r\n     <Version>5.11.1</Version>\r\n   </PackageReference>\r\n```\r\nhttps://docs.microsoft.com/en-us/nuget/consume-packages/package-references-in-project-files",
        "createdAt": "2019-09-23T14:07:39Z",
        "updatedAt": "2019-09-23T14:07:54Z",
        "author": {
          "login": "chadsmiley"
        }
      },
      {
        "body": "We have the problem with .net **4.7.2** in **Release** mode. Unfortunately we can **not** disable GenerateSerializationAssemblies as our assembly makes heavy use of xmlserializer + WCF. The (initial) performance drop at runtime would be too bad.\r\n\r\nWe added Stackexchange.Redis 2.0.601 to our project that is having a dependency on System.Buffers.dll and some other netstandard2.0 assemblies.\r\n\r\nCan you please fix this ASAP? \r\n\r\nMeanwhile, is there any other workaround?",
        "createdAt": "2019-10-08T11:08:29Z",
        "updatedAt": "2019-10-08T11:09:04Z",
        "author": {
          "login": "toebens"
        }
      },
      {
        "body": "@KirillOsenkov do you have any timeline when this problem will be solved?",
        "createdAt": "2019-10-14T07:40:16Z",
        "updatedAt": "2019-10-14T07:40:16Z",
        "author": {
          "login": "toebens"
        }
      },
      {
        "body": "@rainersigwald",
        "createdAt": "2019-10-14T15:11:43Z",
        "updatedAt": "2019-10-14T15:11:43Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "Having this problem as well.",
        "createdAt": "2019-10-23T10:36:49Z",
        "updatedAt": "2019-10-23T10:36:49Z",
        "author": {
          "login": "Jmales"
        }
      },
      {
        "body": "This issue was moved to dotnet/wcf#3991",
        "createdAt": "2019-10-23T17:56:24Z",
        "updatedAt": "2019-10-23T17:56:24Z",
        "author": {
          "login": "livarcocc"
        }
      },
      {
        "body": "I have been avoiding this by using https://stackoverflow.com/a/49253618 and blacklisting assemblies that fail in my `Directory.Build.targets` so that they are not passed to sgen. Added `System.Buffers` and `System.Runtime.CompilerServices.Unsafe` to my blacklist and that got me past the issue for now.\r\n\r\nOh, I see this was already stated in https://github.com/Microsoft/msbuild/issues/2707#issuecomment-343166372",
        "createdAt": "2019-11-02T03:37:03Z",
        "updatedAt": "2019-11-02T03:39:04Z",
        "author": {
          "login": "binki"
        }
      },
      {
        "body": "this ticket got closed here and was moved to https://github.com/dotnet/wcf/issues/3991  and/or https://github.com/dotnet/sdk/issues/1630 but isn't that only related to .net core or .net core client wcf library?\r\nshouldn't the problem/this ticket be kept open in here? as it is .net framework + msbuild related when a .net framework project makes use of any .netstandard2.0 assembly.",
        "createdAt": "2019-12-10T11:33:31Z",
        "updatedAt": "2019-12-10T11:40:12Z",
        "author": {
          "login": "toebens"
        }
      },
      {
        "body": "my bad workaround looks like this currently. i overwrote the target after the import of all usual targets like this in my .csproj file (you might want to change the regex):\r\n\r\n```\r\n<Import Project=\"$(MSBuildBinPath)\\Microsoft.CSharp.targets\" />  \r\n  <Target\r\n      Name=\"GenerateSerializationAssemblies\"\r\n      Condition=\"'$(_SGenGenerateSerializationAssembliesConfig)' == 'On' or ('@(WebReferenceUrl)'!='' and '$(_SGenGenerateSerializationAssembliesConfig)' == 'Auto')\"\r\n      DependsOnTargets=\"AssignTargetPaths;Compile;ResolveKeySource\"\r\n      Inputs=\"$(MSBuildAllProjects);@(IntermediateAssembly)\"\r\n      Outputs=\"$(IntermediateOutputPath)$(_SGenDllName)\">\r\n\r\n    <PropertyGroup>\r\n      <SGenMSBuildArchitecture Condition=\"'$(SGenMSBuildArchitecture)' == ''\">$(PlatformTargetAsMSBuildArchitecture)</SGenMSBuildArchitecture>\r\n    </PropertyGroup>\r\n    \r\n    <!-- START of sgen specific code -->\r\n    <ItemGroup>      \r\n      <SGenReference Include=\"@(ReferencePath)\" Condition=\"!$([System.Text.RegularExpressions.Regex]::IsMatch('%(Directory)', 'net461|netstandard1.3|.netstandard2.0'))\" />\r\n    </ItemGroup>\r\n    <!-- <Message Text=\"This is my list of SGenReference files: @(SGenReference)\"/> -->\r\n    <!-- SGen References is changed from @(ReferencePath) to @(SGenReference) in argument below too -->\r\n    <!-- END of sgen specific code -->\r\n\r\n    <SGen\r\n        BuildAssemblyName=\"$(TargetFileName)\"\r\n        BuildAssemblyPath=\"$(IntermediateOutputPath)\"\r\n        References=\"@(SGenReference)\"\r\n        ShouldGenerateSerializer=\"$(SGenShouldGenerateSerializer)\"\r\n        UseProxyTypes=\"$(SGenUseProxyTypes)\"\r\n        KeyContainer=\"$(KeyContainerName)\"\r\n        KeyFile=\"$(KeyOriginatorFile)\"\r\n        DelaySign=\"$(DelaySign)\"\r\n        ToolPath=\"$(SGenToolPath)\"\r\n        SdkToolsPath=\"$(TargetFrameworkSDKToolsDirectory)\"\r\n        EnvironmentVariables=\"$(SGenEnvironment)\"\r\n        MSBuildArchitecture=\"$(SGenMSBuildArchitecture)\"\r\n        SerializationAssembly=\"$(IntermediateOutputPath)$(_SGenDllName)\"\r\n        Platform=\"$(SGenPlatformTarget)\"\r\n        Types=\"$(SGenSerializationTypes)\">\r\n\r\n      <Output TaskParameter=\"SerializationAssembly\" ItemName=\"SerializationAssembly\"/>\r\n\r\n    </SGen>\r\n\r\n  </Target>  \r\n  ```\r\n\r\nhowever this is very bad. Microsoft please come up with a real fix ASAP",
        "createdAt": "2019-12-10T14:34:14Z",
        "updatedAt": "2019-12-10T14:37:58Z",
        "author": {
          "login": "toebens"
        }
      },
      {
        "body": "> this ticket got closed here and was moved to [dotnet/wcf#3991](https://github.com/dotnet/wcf/issues/3991) and/or [dotnet/sdk#1630](https://github.com/dotnet/sdk/issues/1630) but isn't that only related to .net core or .net core client wcf library?\r\n> shouldn't the problem/this ticket be kept open in here? as it is .net framework + msbuild related when a .net framework project makes use of any .netstandard2.0 assembly.\r\n\r\nThe program `sgen.exe` is owned by the WCF folks. They own both the .NET Framework version and any future .NET Core work. We talked to them internally and agreed to move the public bug to their repo (even though that's not where a fix would be checked in, it is at least the right people).",
        "createdAt": "2019-12-10T23:08:45Z",
        "updatedAt": "2019-12-10T23:08:45Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Hi folks, we still hit this issue in 2024 on our .net 4.8 project with errors like on a few packages: \r\n`SGEN : error : An attempt was made to load an assembly with an incorrect format: D:\\NuGet\\system.buffers\\4.5.1\\ref\\net45\\System.Buffers.dll`\r\n\r\nThe workaround using `ExcludeAssets=\"compile\"` only worked for some packages which we don't explicitly reference, but we do have some explicitly referenced packages required to compile our code. So this workaround didn't work for us.\r\n\r\n@toebens's [workaround](https://github.com/dotnet/msbuild/issues/2707#issuecomment-564060126) is a bit too heavy for us but shined a little light for us. Note that path of the reference assemblies all contain `\\ref\\***`, so we adopted a simpler way to exclude them from ReferencePath.\r\n\r\nOur way is to add this new target into the csproj file having issue when `GenerateSerializationAssemblies` is on:\r\n```\r\n  <Target Name=\"RemoveRefAssembliesBeforeSGen\" BeforeTargets=\"GenerateSerializationAssemblies\">\r\n    <ItemGroup>\r\n      <!-- SGen doesn't work with reference assemblies https://github.com/dotnet/msbuild/issues/2707-->\r\n      <_RefAssembliesPath Include=\"@(ReferencePath)\" Condition=\"$([System.Text.RegularExpressions.Regex]::IsMatch('%(Directory)', '\\\\ref\\\\net.*\\\\'))\" />\r\n      <ReferencePath Remove=\"@(_RefAssembliesPath)\"/>\r\n    </ItemGroup>\r\n    <Message Importance=\"normal\" Text=\"Removing reference assemblies from ReferencePath before running SGen.\" />\r\n  </Target>\r\n```\r\n \r\nSince both this bug and https://github.com/dotnet/wcf/issues/3991 were closed with no real fix. Hope this tip could help someone in future and save time.\r\n\r\n",
        "createdAt": "2024-01-17T02:30:14Z",
        "updatedAt": "2024-01-17T02:30:14Z",
        "author": {
          "login": "bigbearzhu"
        }
      },
      {
        "body": "Just hit this issue on an update to an old line of business application running .net Framework 4.8.  The web site will not build after upgrading to MailKit which drags in a reference to System.Buffers.  Can't turn generation of assemblies off because we rely on it.  So, I am here looking to one of these solutions to hope we can get a build done.\r\n\r\nSet the build to debug and it works great.  Destroys any ability to catch something in development before you merge to a production branch and attempt a build.\r\n\r\nUpdate: The above solution solved the issue.  Thanks to @bigbearzhu .  You saved me a bunch of work.",
        "createdAt": "2024-07-08T03:04:43Z",
        "updatedAt": "2024-07-08T03:17:20Z",
        "author": {
          "login": "Kressilac"
        }
      },
      {
        "body": "I also hit this issue after upgrading the NUGET package \"Microsoft.Web.WebView2\" from version 1.0.1418.22 to 1.0.2535.41.\r\n\r\n`   109>SGEN : error : An attempt was made to load an assembly with an incorrect format: C:\\Users\\exaiwitmx\\.nuget\\packages\\system.buffers\\4.5.1\\ref\\net45\\System.Buffers.dll. [C:\\Source\\Trunk\\SomeProject.csproj]\r\n           - Could not load file or assembly 'file:///C:\\Users\\exaiwitmx\\.nuget\\packages\\system.buffers\\4.5.1\\ref\\net45\\System.Buffers.dll' or one of its dependencies. Reference assemblies should not be loaded for execution.  They can only be loaded in the Reflection-only loader context. (Exception from HRESULT: 0x80131058)\r\n           - Cannot load a reference assembly for execution.\r\n`\r\n\r\nThe affected application targets .NET 4.8.\r\n\r\nThe [workaround given here](https://github.com/microsoft/dotnet/issues/1150#issuecomment-714192212) seems to help.\r\n\r\nEDIT:\r\nFor whatever reason, this error disappeared after enabling [NUGET Central Package Management](https://learn.microsoft.com/en-us/nuget/consume-packages/central-package-management). The log revealed that the reference assemblies which caused the error (as well as a few others) are not passed to SGEN as references any more.\r\n\r\nI should add that I've pinned the version numbers of a few transient dependencies in Directory.Packages.props which weren't pinned before. As one of the reasons why I enabled CPM was to have a convenient means to pin version numbers of transient dependencies (without adding any otherwise useless additional top-level references). ",
        "createdAt": "2024-07-24T17:54:06Z",
        "updatedAt": "2024-07-26T08:58:02Z",
        "author": {
          "login": "exaiwitmx"
        }
      }
    ]
  }
}