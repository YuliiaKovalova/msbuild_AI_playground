{
  "number": 3138,
  "title": "Publish projects during build",
  "body": "The rosyln project has a solution with ~160 projects in it of which ~5 need to be published. Today our work flow is to do the following:\r\n\r\n- Build Roslyn.sln\r\n- For Each project that needs to be published run `msbuild /t:Publish /p:TargetFramework=netcoreapp2.0 TheProject.csproj` \r\n\r\nInvoking MSBuild this many times is wasteful because every publish has to re-evaluate the state of our build before moving onto the publish step. It would be more efficient if during the build we could publish the set of projects that require publishing. \r\n\r\nChaining targets almost works by using this syntax:\r\n\r\n``` cmd\r\n>msbuild /t:Build /t:path\\to\\project1:Publish /t:path\\to\\project2:Publish \r\n```\r\n\r\nHowever Publish requires that a TargetFramework property also be set. How can that be combined with the target syntax above? \r\n",
  "state": "OPEN",
  "createdAt": "2018-03-27T17:10:01Z",
  "updatedAt": "2024-06-07T07:48:40Z",
  "closedAt": null,
  "author": {
    "login": "jaredpar"
  },
  "labels": [],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "I wanted to recommend using solution extensibility, so I documented that first (MicrosoftDocs/visualstudio-docs#816).\r\n\r\nYou can add a target to the solution build with `AfterTargets=\"Build\"` that calls `Publish` in the desired targets, something like `after.Roslyn.sln.targets`:\r\n\r\n```xml\r\n<Project>\r\n <Target Name=\"PublishRoslynExecutableProjects\"\r\n         AfterTargets=\"Build\">\r\n  <ItemGroup>\r\n   <ProjectsToPublish Include=\"src/Compilers/CSharp/csc/csc.csproj\" />\r\n   <ProjectsToPublish Include=\"src/Compilers/VisualBasic/vbc/vbc.csproj\" />\r\n   <ProjectsToPublish Include=\"src/Compilers/Server/VBCSCompiler/VBCSCompiler.csproj\" />\r\n   <ProjectsToPublish Include=\"src/Compilers/Core/MSBuildTask/MSBuildTask.csproj\" />\r\n  </ItemGroup>\r\n\r\n  <Message Importance=\"high\"\r\n           Text=\"Publishing .NET Core executables ...\" />\r\n\r\n  <MSBuild Projects=\"@(ProjectsToPublish)\"\r\n           Targets=\"PublishWithoutBuilding\"\r\n           BuildInParallel=\"true\"\r\n           Properties=\"TargetFramework=netcoreapp2.0\" />\r\n </Target>\r\n</Project>\r\n```\r\n\r\nOne thing that complicates this (rather a lot, unfortunately): when building individual projects, the solution passes configuration derived from solution configurations to the projects. That means that if you separately list projects and `<MSBuild>` into them, as I'm doing here, you'll get a **different instance** of the project, which might cause rebuilding. Here it won't be a race condition since the build happens after, but it could cause lost time (to rebuilding) or inaccurate builds (especially around things that are signed in place). Ensuring that the custom MSBuild invocation collapses into the default one is quite difficult--you have to set all the same properties that the solution does, plus all the right properties set when going from the \"outer\" multitargeted project to the TF-specific inner project. I've fought that a bit this afternoon but haven't been able to solve it.\r\n\r\nSince Roslyn already defined `PublishWithoutBuilding`, I used that to avoid this problem--this gives the same experience as separately calling publish on the individual projects on the command line after the build.",
        "createdAt": "2018-04-16T23:09:06Z",
        "updatedAt": "2018-04-16T23:09:06Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I'm also looking into running the publish step for a project during solution build time. Has there been any work in this area since the above? Intuitively, it would be nice if I could simply add a property to a `csproj` file to mark it as \"publish on build\".",
        "createdAt": "2021-06-03T21:42:20Z",
        "updatedAt": "2021-06-03T21:42:20Z",
        "author": {
          "login": "gitfool"
        }
      },
      {
        "body": "I agree that a  `<PublishOnBuild>true</PublishOnBuild>` which would be similar to `<GeneratePackageOnBuild>true</GeneratePackageOnBuild>` from a semantic point of view would be really really helpful. This would make it a lot simpler to work with published resources without need of dedicatet setup in the build.\r\n\r\nActually I wanted to look into `PublishWithoutBuilding` as @rainersigwald said that would be used in Roslyn. But I could not find this target definition in the repo. Has it disappeared? And how is it done right now? The project is really big, I could not quickly figure it out.\r\n",
        "createdAt": "2021-09-03T15:22:36Z",
        "updatedAt": "2021-09-03T15:22:36Z",
        "author": {
          "login": "sjoerd222888"
        }
      },
      {
        "body": "Are there any improvements on this :) ? Would love to see something like `PublishOnBuild>true</PublishOnBuild>`",
        "createdAt": "2024-02-18T17:22:28Z",
        "updatedAt": "2024-02-18T17:22:34Z",
        "author": {
          "login": "DomenPigeon"
        }
      },
      {
        "body": "Im also looking for a `PublishOnBuild` feature",
        "createdAt": "2024-02-21T19:53:02Z",
        "updatedAt": "2024-02-21T19:53:02Z",
        "author": {
          "login": "hknielsen"
        }
      },
      {
        "body": "My hack:\r\n```xml\r\n  <Target Name=\"PublishAsBuildAfterTarget\" AfterTargets=\"Build\" DependsOnTargets=\"Publish\">\r\n    <!-- placeholder task to force Publish to happen during build -->\r\n  </Target>\r\n```",
        "createdAt": "2024-06-07T07:48:40Z",
        "updatedAt": "2024-06-07T07:48:40Z",
        "author": {
          "login": "arsdragonfly"
        }
      }
    ]
  }
}