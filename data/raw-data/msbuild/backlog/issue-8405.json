{
  "number": 8405,
  "title": "Resolved project and package references in some cases are faulty",
  "body": "### Issue Description\r\nSuppose there is a `Main` project reference a multi-targeting `Lib` project, and to every `Lib` project's target framework, there are other different projects and packages referenced by `Lib`. The result is build success but run fail.\r\nThe dependencies that copy to local are faulty.\r\n\r\n### Steps to Reproduce\r\nI put a similar sample in [sanmuru/MSBuild-bug](/sanmuru/MSBuild-bug).\r\n* `Console`(Main) project reference `CoreLib`(Lib) project with `SetTargetFramework=\"TargetFramework=netstandard2.0\"`.\r\n* `CoreLib`(Lib) project reference `Net462UtilLib` project and `System.Text.Json` package when targeting `net462`.\r\n* `CoreLib`(Lib) project reference `NetStandard20UtilLib` project and `Newtonsoft.Json` package when targeting `netstandard2.0`.\r\n* Build result shows `Console`(Main) project do reference the correct output assembly (and its dependencies) which from `NetStandard20UtilLib` project, but as well copy output assembly from `Net462UtilLib` project and `System.Text.Json` package instead of `Newtonsoft.Json` package to local.\r\n\r\n### Expected Behavior\r\nNo idea whether it is a feature or a bug, if it is a bug then fix it, or crash build process if it is a feature.\r\n\r\n### Versions & Configurations\r\n.NET Runtime: 7.0.200-preview.22628.1\r\n",
  "state": "CLOSED",
  "createdAt": "2023-02-04T09:45:19Z",
  "updatedAt": "2023-03-07T15:02:44Z",
  "closedAt": "2023-03-07T15:02:27Z",
  "author": {
    "login": "sanmuru"
  },
  "labels": [
    "bug",
    "needs-triage",
    "Priority:2",
    "author-responded"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "JanKrivanek"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "May related:\r\n> It looks like this SetTargetFramework ignored if project references a multitarget project via another project.\r\n> _Originally posted by @AndirNotes in [dotnet/sdk#2280](https://github.com/dotnet/sdk/issues/2280#issuecomment-811093011)_\r\n\r\n> **PackageReference with condition not being referenced by child project when multi-targeting**\r\n> _Opened by @yiwwan in [dotnet/sdk#16611](https://github.com/dotnet/sdk/issues/16611)_\r\n\r\nIt is confusing to remain this bug/feature unsolved for years.",
        "createdAt": "2023-02-07T01:39:09Z",
        "updatedAt": "2023-02-07T01:58:36Z",
        "author": {
          "login": "sanmuru"
        }
      },
      {
        "body": "@sanmuru - Adding\r\n\r\n```\r\n<PropertyGroup>\r\n  <DisableTransitiveProjectReferences>true</DisableTransitiveProjectReferences>\r\n</PropertyGroup>\r\n```\r\n\r\nInto your `Console` project should help workaround the issue with the unwanted build of leaf projects (and placing of their outputs to the referencing project output).\r\n\r\nIssue here is that `ResolveProjectReferences` is trying to process all dependencies - including the transitive ones, one doesn't properly honor the `SetTargetFramework` in the process. Disabling the transitive processing should help here.\r\n\r\nAs for the nuget resolution issue - this falls into scope of nuget - I'm filing issue with them: https://github.com/NuGet/Home/issues/12436. \r\nI currently do not have better workaround for this other then adding the conditioned package references to the `Console` project as well.",
        "createdAt": "2023-02-14T20:06:13Z",
        "updatedAt": "2023-02-14T20:06:13Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "@sanmuru - is there a specific reason why you force the `netstandard2.0` lib reference instead of the `net462`?\r\n\r\nBy removing the `SetTargetFramework` altogether, the project and package reference will be properly resolved on copied (`net462` will be chosen in this case as better match).\r\n\r\nYou just need to adjust your implicit usings in this case (as the feature was tailored for net6 and onwards - see https://github.com/dotnet/sdk/issues/24146). So the root Console project would look like:\r\n\r\n<pre><code>\r\n&lt;Project Sdk=\"Microsoft.NET.Sdk\"&gt;\r\n  &lt;PropertyGroup&gt;\r\n    &lt;OutputType&gt;Exe&lt;/OutputType&gt;\r\n    &lt;TargetFrameworks&gt;net481;net462&lt;/TargetFrameworks&gt;\r\n    &lt;ImplicitUsings&gt;enable&lt;/ImplicitUsings&gt;\r\n    &lt;LangVersion&gt;latest&lt;/LangVersion&gt;\r\n  &lt;/PropertyGroup&gt;\r\n  \r\n  &lt;ItemGroup&gt;\r\n\t<b>&lt;Using Remove=\"System.Net.Http\" /&gt;</b>\r\n  &lt;/ItemGroup&gt;\r\n\r\n  &lt;ItemGroup&gt;\r\n    &lt;ProjectReference Include=\"..\\CoreLib\\CoreLib.csproj\" /&gt;\r\n  &lt;/ItemGroup&gt;\r\n&lt;/Project&gt;\r\n</pre></code>\r\n\r\n",
        "createdAt": "2023-02-15T08:30:13Z",
        "updatedAt": "2023-02-15T08:30:13Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "Well, in actual case, my `CoreLib` target `net35` and `netstandard2.0` (and more TFM but it does not matter here) and my `Console` target `net35` and `net462`. **What I want is `net35`->`net35` and `net462`->`netstandard2.0`.**\r\n\r\nI want to use asynchronous programming in `CoreLib` but as you know there is no [TAP](https://learn.microsoft.com/en-us/dotnet/csharp/asynchronous-programming/task-asynchronous-programming-model) in `net35`, so I install [TaskParallelLibrary](https://www.nuget.org/packages/TaskParallelLibrary) (official package provided by Microsoft, achived by community). Soon I find it difficult to use that there are no essential types which support async/await features for compiler. So I create a new TFM `netstandard2.0` and force all `Console`'s TFMs other than `net35` to reference `netstandard2.0`.\r\n\r\nThe IDE I use is Visual Studio latest preview. During code typing in `Console, Version=net462`, there are diagnostics show missing reference (`System.Threading.dll, Version=1.0.2856.102`) which is exactly the one in [TaskParallelLibrary](https://www.nuget.org/packages/TaskParallelLibrary) package. Then they disappear after I `SetTargetFramework=netstandard2.0`. So I believe that at lease Roslyn works correct.\r\n\r\nThen I find this issue: build success but run fail with a `System.IO.FileNotFoundException: Could not load file or \r\nassembly 'X' or one of its dependencies.`\r\n\r\nActualy I can do things in a better way, but the bug is still there right?",
        "createdAt": "2023-02-15T09:44:30Z",
        "updatedAt": "2023-02-15T09:44:30Z",
        "author": {
          "login": "sanmuru"
        }
      },
      {
        "body": "@sanmuru Yes - issue is still present - more precisely 2 issues (project references resolution and packages references resolution). \r\nTiming of fixing of those is subject to prioritization, right now I'm trying to propose viable workaround(s):\r\n\r\nThe MSBuild bug (transitive project reference resolution issue when restricting multitargeted references) has a workaround with setting `DisableTransitiveProjectReferences` which forces proper project references resolution in this case\r\n\r\nThe Nuget dependecies resolution behavior cannot be currently tweaked (as per https://github.com/NuGet/Home/issues/12436) - so the best option is to add the needed references (conditioned) to the root project as well.\r\n\r\nWould those options help mitigate the problem in your case?\r\n",
        "createdAt": "2023-02-16T09:42:01Z",
        "updatedAt": "2023-02-16T09:42:01Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "Team triage: msbuild and sdk are pulling the relevant information from NuGet, so https://github.com/NuGet/Home/issues/12436 is the correct issue to pursue for a fix.",
        "createdAt": "2023-03-07T15:02:27Z",
        "updatedAt": "2023-03-07T15:02:27Z",
        "author": {
          "login": "AR-May"
        }
      }
    ]
  }
}