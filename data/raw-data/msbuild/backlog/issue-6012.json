{
  "number": 6012,
  "title": "Calling Yield() without Reacquire() then returning from a task hangs MSBuild",
  "body": "Here's a simple, buggy task embedded in a project:\r\n\r\n```xml\r\n<Project>\r\n  <UsingTask\r\n    TaskName=\"YieldAndSleep\"\r\n    TaskFactory=\"RoslynCodeTaskFactory\"\r\n    AssemblyFile=\"$(MSBuildToolsPath)\\Microsoft.Build.Tasks.Core.dll\" >\r\n    <ParameterGroup />\r\n    <Task>\r\n      <Code Type=\"Fragment\" Language=\"cs\">\r\n<![CDATA[\r\nBuildEngine3.Yield();\r\nSystem.Threading.Thread.Sleep(1_000);\r\n// BuildEngine3.Reacquire();\r\n]]>\r\n      </Code>\r\n    </Task>\r\n  </UsingTask>\r\n\r\n  <Target Name=\"Entrypoint\">\r\n    <YieldAndSleep />\r\n  </Target>\r\n\r\n</Project>\r\n```\r\n\r\nNote that `Reacquire` is commented out--but the task completes successfully.\r\n\r\nMSBuild just hangs when this happens\r\n\r\n```sh-session\r\n\u276f msbuild .\\yield.proj\r\nMicrosoft (R) Build Engine version 16.9.0-preview-20630-02+a2c42ce9f for .NET Framework\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\nBuild started 1/5/2021 2:41:15 PM.\r\n```\r\n\r\nAnd if you ctrl-c,\r\n\r\n```\r\nAttempting to cancel the build...\r\n\r\nUnhandled Exception: Microsoft.Build.Shared.InternalErrorException: MSB0001: Internal MSBuild Error: One or more errors occurred.\r\n=============\r\nSystem.AggregateException: One or more errors occurred. ---> Microsoft.Build.Shared.InternalErrorException: MSB0001: Internal MSBuild Error: One or more errors occurred.\r\n=============\r\nSystem.AggregateException: One or more errors occurred. ---> Microsoft.Build.Shared.InternalErrorException: MSB0001: Internal MSBuild Error: MSB0001: Internal MSBuild Error: Entry must be active before it can be Completed successfully.  Config: 2 State: Waiting\r\n=============\r\nMicrosoft.Build.Shared.InternalErrorException: MSB0001: Internal MSBuild Error: Entry must be active before it can be Completed successfully.  Config: 2 State: Waiting\r\n   at Microsoft.Build.Shared.ErrorUtilities.ThrowInternalError(String message, Object[] args)\r\n   at Microsoft.Build.Shared.ErrorUtilities.VerifyThrow(Boolean condition, String unformattedMessage, Object arg0, Object arg1)\r\n   at Microsoft.Build.BackEnd.BuildRequestEntry.Complete(BuildResult result)\r\n   at Microsoft.Build.BackEnd.RequestBuilder.ReportResultAndCleanUp(BuildResult result)\r\n   at Microsoft.Build.BackEnd.RequestBuilder.<BuildAndReport>d__50.MoveNext()\r\n```\r\n\r\nThis is not catastrophic because it's a task-authoring error: you're supposed to `Yield()` and `Reacquire()` in matched sets. But it sure is awkward, when we could either\r\n\r\n1. Implicitly reacquire when `ITask.Execute()` returns, or\r\n2. Replace the manual yield/reacquire business with a `using`-compatible resource.",
  "state": "OPEN",
  "createdAt": "2021-01-05T20:48:37Z",
  "updatedAt": "2024-02-21T16:28:43Z",
  "closedAt": null,
  "author": {
    "login": "rainersigwald"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Backlog"
  },
  "comments": {
    "nodes": []
  }
}