{
  "number": 6844,
  "title": "RAR cracks open system files in empty incremental build",
  "body": "### Issue Description\r\n\r\nThe RAR on-disk cache appears to be missed for some subset of system dependencies. Even if the solution is built incrementally with no changes since the last successful build, I'm seeing a large number of calls to `AssemblyName.GetAssemblyName` for files like:\r\n\r\n```\r\nC:\\Users\\laprosek.EUROPE\\.nuget\\packages\\microsoft.identitymodel.protocols.openidconnect\\5.6.0\\lib\\netstandard2.0\\Microsoft.IdentityModel.Protocols.OpenIdConnect.dll\r\nC:\\Users\\laprosek.EUROPE\\.nuget\\packages\\microsoft.identitymodel.tokens\\5.6.0\\lib\\netstandard2.0\\Microsoft.IdentityModel.Tokens.dll\r\nC:\\Users\\laprosek.EUROPE\\.nuget\\packages\\system.identitymodel.tokens.jwt\\5.6.0\\lib\\netstandard2.0\\System.IdentityModel.Tokens.Jwt.dll\r\nC:\\Users\\laprosek.EUROPE\\.nuget\\packages\\cachemanager.core\\2.0.0-beta-1629\\lib\\netstandard2.0\\CacheManager.Core.dll\r\nC:\\Users\\laprosek.EUROPE\\.nuget\\packages\\cachemanager.microsoft.extensions.configuration\\2.0.0-beta-\r\nC:\\Users\\laprosek.EUROPE\\.nuget\\packages\\cachemanager.microsoft.extensions.logging\\2.0.0-beta-1629\\lib\\netstandard2.0\\CacheManager.Microsoft.Extensions.Logging.dll\r\nC:\\Users\\laprosek.EUROPE\\.nuget\\packages\\system.configuration.configurationmanager\\4.5.0\\ref\\netstandard2.0\\System.Configuration.ConfigurationManager.dll\r\n...\r\n```\r\n\r\n### Steps to Reproduce\r\n\r\nClone the [Ocelot repo](https://github.com/ThreeMammals/Ocelot/) and build it. Notice that this code is executed for many assemblies, suggesting that the cache does not work well:\r\n\r\nhttps://github.com/dotnet/msbuild/blob/ea1d6d99a376ac582216bba06b75f6bd9f3c7c64/src/Tasks/SystemState.cs#L449\r\n\r\n### Data\r\n\r\n~340 cache misses when building Ocelot, costing us ~2.5% of incremental build time.\r\n\r\n### Analysis\r\n\r\nNothing obvious. The cache entry is updated with the assembly name and the cache is marked dirty so it should be written to the cache file and read back in subsequent builds.\r\n\r\n### Versions & Configurations\r\n\r\nMicrosoft (R) Build Engine version 17.0.0-dev-21464-01+c82d55e9b for .NET Framework\r\n\r\n### Regression?\r\n\r\nN/A\r\n\r\n### Attach a binlog\r\n\r\nN/A",
  "state": "CLOSED",
  "createdAt": "2021-09-14T13:07:14Z",
  "updatedAt": "2024-02-21T14:11:39Z",
  "closedAt": "2021-10-13T19:12:36Z",
  "author": {
    "login": "ladipro"
  },
  "labels": [
    "Area: Performance",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "VS 17.1"
  },
  "comments": {
    "nodes": [
      {
        "body": "It might be related to way RAR optimized amount of data stored in RAR on-disk-cache.\r\nThe current implementation of this https://github.com/dotnet/msbuild/blob/c8d4b38e7a913601c8e13e39b614462383afb65d/src/Tasks/SystemState.cs#L366-L379\r\nis, IMHO, wrong (indeterministic, sub-optimal).\r\nMaybe with recent optimization of RAR on-disk-cache size and serialization perf, we can now afford to store all project dependencies, and allow cross-project redundancy.\r\n",
        "createdAt": "2021-09-20T12:38:27Z",
        "updatedAt": "2021-09-20T12:38:27Z",
        "author": {
          "login": "rokonec"
        }
      },
      {
        "body": "That was actually a problem I'd mentioned in my [RAR precaching document](https://microsoft-my.sharepoint.com/:w:/p/nmytelka/EfJOiPG6XPJMsDQ12Nk5-HIBm957qVk2DPB0R5XSpRx1RA?e=6bVaU6) but never followed up on. Wish I had!",
        "createdAt": "2021-09-26T15:59:32Z",
        "updatedAt": "2021-09-26T15:59:32Z",
        "author": {
          "login": "Forgind"
        }
      }
    ]
  }
}