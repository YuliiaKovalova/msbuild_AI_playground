{
  "number": 6831,
  "title": "No output from cross-target Build target",
  "body": "https://github.com/dotnet/msbuild/blob/c82d55e9bad188cee1d0ecfc696acab5cd5d02ca/src/Tasks/Microsoft.Common.CrossTargeting.targets#L122-L129\r\n\r\nAccording to the comment, the 'Build' target should return all output items produced by underlying builds. And this is expected behavior because the single-target build does return items.\r\n\r\nExpected: 'Build' target returns `@(InnerOutput)`.",
  "state": "CLOSED",
  "createdAt": "2021-09-08T22:11:45Z",
  "updatedAt": "2024-02-21T14:11:41Z",
  "closedAt": "2021-10-18T10:40:37Z",
  "author": {
    "login": "aguzev"
  },
  "labels": [
    "Area: Common Targets",
    "needs-more-info",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "That comment is wrong; MSBuild has never aggregated the inner-build outputs through the outer-build `Build` target.\r\n\r\nWe conceivably could but that could encourage bad behavior. What is your use case for the output?",
        "createdAt": "2021-09-09T16:38:06Z",
        "updatedAt": "2021-09-09T16:38:06Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I was hoping outputs of the cross-target and single-target builds could be used consistently. These targets should have the same contract as they are switched behind the scenes. Now we have to run MSBuild with additional targets to get build outputs. Could you tell me more about the bad behavior?\r\n\r\nTo keep things simple, the case is like creating a project that collects outputs from multiple child projects and creates a Nuget package.",
        "createdAt": "2021-09-09T17:05:35Z",
        "updatedAt": "2021-09-09T17:08:51Z",
        "author": {
          "login": "aguzev"
        }
      },
      {
        "body": "This issue is marked as stale because feedback has been requested for 30 days with no response. Please respond within 14 days or this issue will be closed due to inactivity.",
        "createdAt": "2021-10-10T00:00:54Z",
        "updatedAt": "2021-10-10T00:00:54Z",
        "author": {
          "login": "ghost"
        }
      },
      {
        "body": "Hi there,\r\nLooks like the feedback appeared here on the same day. Something is wrong.\r\n\r\n@rainersigwald ",
        "createdAt": "2021-10-10T10:47:27Z",
        "updatedAt": "2021-10-10T10:47:27Z",
        "author": {
          "login": "aguzev"
        }
      },
      {
        "body": "We've changed how the bot responds to feedback, this scenario should be improved \ud83d\ude42",
        "createdAt": "2021-10-14T16:51:10Z",
        "updatedAt": "2021-10-14T16:51:10Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "> Could you tell me more about the bad behavior?\r\n> \r\n> To keep things simple, the case is like creating a project that collects outputs from multiple child projects and creates a Nuget package.\r\n\r\nImagine that you have a `Foo.csproj` that targets `netcoreapp3.1;net5.0;net6.0`. The aggregate output would be three files named `Foo.dll`. You couldn't, for instance, copy `@(AggregatedOutput)` to a folder, because that would cause the files to overwrite each other. There is metadata that can distinguish between the outputs but it is nontrivial to deal with; having empty outputs may cause a consumer to take a step back and consider what their needs are and the best way to get the outputs.",
        "createdAt": "2021-10-14T17:14:12Z",
        "updatedAt": "2021-10-14T17:14:12Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}