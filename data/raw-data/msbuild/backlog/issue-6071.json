{
  "number": 6071,
  "title": "New command line argument for evaluating properties / items",
  "body": "*For a while we've been using the MsBuild lib to evaluate properties & items for C# and C++ projects. It's used in internal tools and  CI sripts to introspect the projects and do stuffs.*\r\n\r\n*We've been using the NuGet package lib but is has been problematic (SDK not resolved, assembly loading issues...).*\r\n\r\n*We recently try to use [locator](https://github.com/microsoft/MSBuildLocator/) but it didn't improve the situation.*\r\n\r\n*Also the switch to .NET Core seems like we're being in a dead end with the current solution. Indeed a .NET Core application is not able to parse projects with the current tool chain.*\r\n\r\n*I'm currently trying to use `preprocess` command line  but sadly it doesn't match exactly our needs.*\r\n\r\nSo I was wondering if adding **a new kind of preprocessor** could be considered?\r\n\r\nI made a small prototype to show case the idea: https://github.com/jairbubbles/MsBuildEvaluator\r\n\r\nThe idea is to dump an .xml with the evaluated values of the properties / items (and not the chains of import). The good thing about it is that it's really simple, the generated .xml does contain any variable at all and is super easy to parse.\r\n\r\nThe (simplified) output would look like that:  \r\n\r\n``` xml\r\n<Project>\r\n  <PropertyGroup>\r\n    <TargetFramework>net472</TargetFramework>\r\n    <Platform>AnyCPU</Platform>\r\n    <CopyDependencies>true</CopyDependencies>\r\n    <IsPackable>True</IsPackable>\r\n    <NoWarn>1570,1573,1574,1591,1712,NU1701</NoWarn>\r\n    <CopyLocalLockFileAssemblies>true</CopyLocalLockFileAssemblies>\r\n    <OutputType>winexe</OutputType>\r\n    <UseWindowsForms>true</UseWindowsForms>\r\n    <!-- and many more! -->\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n     <!-- Package references -->\r\n    <PackageReference Include=\"RestSharp\">\r\n      <Version>106.11.7</Version>\r\n    </PackageReference>\r\n     <!-- Project references -->\r\n    <ProjectReference Include=\"../test.csproj\">\r\n      <Targets></Targets>\r\n      <OutputItemType></OutputItemType>\r\n      <ReferenceSourceTarget>ProjectReference</ReferenceSourceTarget>\r\n      <Private>false</Private>\r\n      <ReferenceOutputAssembly>false</ReferenceOutputAssembly>\r\n    </ProjectReference>\r\n    <!-- Project files -->\r\n    <Compile Include=\"File.cs\"/>\r\n    <!-- and many more! -->\r\n</Project>\r\n```\r\n\r\nThanks!\r\n\r\n*Please note that some discussions happened with @rainersigwald [here](https://github.com/microsoft/MSBuildLocator/pull/105) prior to filling that issue.*",
  "state": "CLOSED",
  "createdAt": "2021-01-22T13:50:42Z",
  "updatedAt": "2024-02-21T14:15:17Z",
  "closedAt": "2021-10-10T19:00:48Z",
  "author": {
    "login": "jairbubbles"
  },
  "labels": [
    "needs-more-info",
    "stale",
    "closed-by-bot",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Team Triage: @cdmihai you recently added a feature for static graph and not building. @ladipro suggested that if you use that in conjunction with a binlog, you can see the evaluated project. Does this sound right? ",
        "createdAt": "2021-02-03T17:02:07Z",
        "updatedAt": "2021-02-03T17:02:07Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "Thx @BenVillalobos!\r\n\r\nAfter testing a bit more my POC it appeared clear that for performance reasons it's a nogo: evaluating one project at a time is too slow, bootstrapping MsBuild each time is a price too high to pay.\r\n\r\nSo binlog seems like a better approach and would allow to evaluate a .sln at once.\r\n\r\n@cdmihai Do you have more info about the \"feature for static graph\"?",
        "createdAt": "2021-02-12T18:59:21Z",
        "updatedAt": "2021-02-12T19:36:11Z",
        "author": {
          "login": "jairbubbles"
        }
      },
      {
        "body": "Nevermind, just found it! (https://github.com/dotnet/msbuild/pull/6016)\r\n\r\nI guess my main problem will be that it's not available on older versions... ",
        "createdAt": "2021-02-12T19:01:23Z",
        "updatedAt": "2021-02-12T19:01:23Z",
        "author": {
          "login": "jairbubbles"
        }
      },
      {
        "body": "@jairbubbles \r\nIs the information in the binlog sufficient for your purpose? If not, then there's a couple of options:\r\n- (my preference) build your own dotnet console app that uses the [ProjectGraph](https://github.com/dotnet/msbuild/blob/master/src/Build/Graph/ProjectGraph.cs) APIs to evaluate the entire dependency graph and then transform each ProjectInstance into your desired format. I like this option because every msbuild user might need a different output format for their specific use cases.\r\n- change msbuild to emit more events during evaluation to have them in the binlog and then use `/graph:noBuild`.\r\n- change msbuild to implement your desired preprocess output as a another /graph option, similar to `noBuild`.\r\n\r\n>evaluating one project at a time is too slow, bootstrapping MsBuild each time is a price too high to pay.\r\n\r\n[ProjectGraph](https://github.com/dotnet/msbuild/blob/master/src/Build/Graph/ProjectGraph.cs) evaluates in parallel.",
        "createdAt": "2021-02-16T22:34:46Z",
        "updatedAt": "2021-02-16T22:34:46Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "> build your own dotnet console app\r\n\r\nRight now we have a library that consumes MsBuild dynamically, We just switched it from using `Project` to `ProjectInstance` which is a lot more friendly. We don't use `ProjectGraph` though, just a `Parallel.ForEach` on all `.csproj` to load. I'll take a look, thanks!\r\n\r\nI could also create a CLI version and communicate with the lib but the idea being using MsBuild was to make sure we'll get the exact same results than when building. We had tons of problems with SDK resolving and assembly loading in the past.",
        "createdAt": "2021-02-18T06:56:39Z",
        "updatedAt": "2021-02-18T06:56:39Z",
        "author": {
          "login": "jairbubbles"
        }
      },
      {
        "body": "> We had tons of problems with SDK resolving and assembly loading in the past.\r\n\r\nIt would be interesting to find out why the locator didn't work, since that's the best solution for solving sdk import issues. Please open issues on the [locator repo](https://github.com/microsoft/MSBuildLocator/).",
        "createdAt": "2021-02-18T18:52:27Z",
        "updatedAt": "2021-02-18T18:52:27Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "We first started with locator but we indeed had a bunch of issues. Here are some thoughts:\r\n- we needed more control over how the msbuild version is discovered.\r\n- we load msbuild .dlls explicitly to make sure they are loaded all in the same place.\r\n- we needed the same behavior with .NET Core. So far it's working whilst @rainersigwald told us it wouldn't work. (Discussed [here](https://github.com/microsoft/MSBuildLocator/pull/105))",
        "createdAt": "2021-02-19T20:06:13Z",
        "updatedAt": "2021-02-19T20:06:13Z",
        "author": {
          "login": "jairbubbles"
        }
      },
      {
        "body": "> We first started with locator but we indeed had a bunch of issues. Here are some thoughts:\r\n> \r\n> * we needed more control over how the msbuild version is discovered.\r\n\r\nLocator has an option for choosing the exact path to MSBuild, so if you know where your MSBuild is, you can use Locator to bring in the relevant assemblies.\r\n\r\n> * we load msbuild .dlls explicitly to make sure they are loaded all in the same place.\r\n\r\nThat's similar to what Locator does. Is adds them to the assembly resolver for the current app domain.\r\n\r\n> * we needed the same behavior with .NET Core. So far it's working whilst @rainersigwald told us it wouldn't work. (Discussed [here](https://github.com/microsoft/MSBuildLocator/pull/105))\r\n\r\nThis is risky\u2014you're both right. It _can_ work. .NET Core MSBuild can run many of the tasks and targets used by Visual Studio. On the other hand, it can't run all of them, which means you may get into situations where you try to do something very reasonable that works on Framework, and it fails. If it's currently working, that sounds like it only uses APIs available on Core. Can you explain why you can't use Locator to locate a .NET Core version of MSBuild for your purposes?",
        "createdAt": "2021-08-26T16:37:15Z",
        "updatedAt": "2021-08-26T16:37:15Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "Hi @Forgind!\r\n\r\n> Can you explain why you can't use Locator to locate a .NET Core version of MSBuild for your purposes?\r\n\r\nI think it's resumed with https://github.com/microsoft/MSBuildLocator/pull/105. When using the .NET Core it won't list the MsBuild from VisualStudio which are the ones I want to use.\r\n\r\n> On the other hand, it can't run all of them, which means you may get into situations where you try to do something very reasonable that works on Framework, and it fails. \r\n\r\nI'm wondering how you envision the transition? At some point I imagine MsBuild will only be shipped as a .NET Core application.\r\n\r\nNB: I'll try to see to get the code for our internal tool open-sourced,  it will simplify a lot the discussion, it's called `VsProjReader` :-) (you can a look at the (outdated) [README.md](https://github.com/dotnet/msbuild/files/7061380/README.md))\r\n\r\n",
        "createdAt": "2021-08-26T16:48:17Z",
        "updatedAt": "2021-08-26T16:48:17Z",
        "author": {
          "login": "jairbubbles"
        }
      },
      {
        "body": "MSBuild from VS is .NET Framework MSBuild. We want MSBuildLocator to be \"safe\" meaning that if it recommends a particular version of MSBuild, we don't know of a reason it wouldn't work. That said, you can always use `RegisterMSBuildPath` instead to ignore what MSBuildLocator thinks is safe and just do what you want\u2014BUT that's an unsupported usage, so if you do something like that, it is very unlikely we will be able to help if things go wrong.\r\n\r\nSorry for being unclear earlier, but I was curious why you can't use .NET Core with locator to find a .NET Core (i.e., not from VS) version of MSBuild and use its APIs. Looking through the readme you sent, I don't _think_ any of the functionality you mentioned has to be framework-specific for any reason.\r\n\r\n> I'm wondering how you envision the transition? At some point I imagine MsBuild will only be shipped as a .NET Core application.\r\n\r\nGreat question! But I honestly have no idea. We've added some things that seem reasonable to Core even if they weren't there initially, so that might continue for a while, and if we provide reasonable alternatives, people can switch their projects to using those instead. I know there are at least some cases in which we intentionally decided not to include something because it was antiquated or a security hazard, but I'm sure there are cases that don't fit into any of the categories above...",
        "createdAt": "2021-08-26T17:14:19Z",
        "updatedAt": "2021-08-26T17:14:19Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "Also,\r\n> I'll try to see to get the code for our internal tool open-sourced\r\n\r\n\ud83d\udc97 open-sourced",
        "createdAt": "2021-08-26T17:15:04Z",
        "updatedAt": "2021-08-26T17:15:04Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "> That said, you can always use RegisterMSBuildPath instead to ignore what MSBuildLocator thinks is safe\r\n\r\nIf we locate MsBuid ourselves, we didn't see the point to use Locator anymore (as you can see the README still say we're using it). I think we also had issues with the Resolve callback. To be honest the code on our side was so simple that at some point we didn't think it was useful to use the lib anymore.\r\n\r\n> Sorry for being unclear earlier, but I was curious why you can't use .NET Core with locator to find a .NET Core (i.e., not from VS) version of MSBuild and use its APIs. \r\n\r\nWe need to introspect .vcxproj too so using the MsBuild from dotnet didn't seem to be a good idea. I'm working in a game company so some projects also use game console SDKs. Our goal when porting to .NET Core was to make sure to have all our unit tests pass and it was clearly failing with Locator.",
        "createdAt": "2021-08-26T17:22:24Z",
        "updatedAt": "2021-08-26T17:22:24Z",
        "author": {
          "login": "jairbubbles"
        }
      },
      {
        "body": "This issue is marked as stale because feedback has been requested for 30 days with no response. Please respond within 14 days or this issue will be closed due to inactivity.",
        "createdAt": "2021-09-26T00:00:51Z",
        "updatedAt": "2021-09-26T00:00:51Z",
        "author": {
          "login": "ghost"
        }
      },
      {
        "body": "This issue was closed due to inactivity. If you can still reproduce this bug, please comment with the requested information, detailed steps to reproduce the problem, or any other notes that might help in the investigation.",
        "createdAt": "2021-10-10T19:00:49Z",
        "updatedAt": "2021-10-10T19:00:49Z",
        "author": {
          "login": "ghost"
        }
      }
    ]
  }
}