{
  "number": 6467,
  "title": "[MSBuild Server] Create fully functional prototype and measure it",
  "body": "Since there is shift in perf priority from CLI towards VS, I believe we shall collecting and present data required to make informed decision about MSBuild Server v2 implementation. \r\nTo do so, lets craft dirty prototype fast.\r\n\r\nWork breakdown:\r\n- create prototype which will have most critical parts implemented\r\n- measure and compare perf of this prototype and our MSBuild Server MK1\r\n- document and publish MSBuild Server V2 design docs\r\n  - high level architecture\r\n  - performance results\r\n  - risks\r\n  - remaining effort estimation",
  "state": "CLOSED",
  "createdAt": "2021-05-20T08:55:45Z",
  "updatedAt": "2024-02-21T17:01:26Z",
  "closedAt": "2021-05-27T12:20:37Z",
  "author": {
    "login": "rokonec"
  },
  "labels": [
    "Area: Performance",
    "Postponed",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "rokonec"
      }
    ]
  },
  "milestone": {
    "title": "VS 17.0"
  },
  "comments": {
    "nodes": [
      {
        "body": "\r\nInformation in this chat is to make an informed decision of CLI MSBuild invocation strategy in the context of inner loop experience.\r\n\r\n\r\n\r\nOptions:\r\n\r\n1) out of proc (.NET 5.0 SDK behavior)\r\n\r\n\r\n\t\r\nevery MSBuild invocation run in child processed of SDK\r\n\tpros: no work, battle-tested, simple\r\n\tcons: creating and init process cost, no hot in-process caches\r\n\r\n\r\n2) in proc (Ladi optimization)\r\n\r\n\r\n\t\r\nMSBuild.dll is lazy loaded into CLI process and MSBuild entry point is executed\r\n\tpros: already implemented in SDK, still simple\r\n\tcons: MSBuild must be of the same version as hosted CLI SDK, for anyone using MSBUILD_EXE_PATH env it fallbacks to 'out of proc'\r\n\r\n\r\n3) server v1 (MSBUILDNOIPROCNODE)\r\n\r\n\r\n\t\r\nevery project is built in an external (non-entry) process\r\n\tpros: already supported by MSBuild, simple, low-risk changes, greatly improved cache-hit ratio for simple project builds, a hot run is 1000 ms faster than in-proc\r\n\tcons: long-running satellite process, creating and init entry process, the cold run is 500ms slower than in-proc\r\n\r\n\r\n4) in proc + server v1\r\n\r\n\r\n\t\r\ncombination of 2 and 3\r\n\tpros: already supported by MSBuild, simple, low-risk changes, greatly improved cache-hit ratio for simple project builds, hot run is 1100 ms faster than in-proc\r\n\tcons: long-running satellite process, loading MSBuild in proc still expensive, cold run is 300ms slower than in-proc \r\n\r\n\r\n5) server 2 (true MSBuild server)\r\n\r\n\r\n\t\r\nCLI connects to MSBuild Server (or start if not running) and sends build request by named-pipe\r\n\tCLI receives console sync events and builds results over named-pipe\r\n\tpros: once the entry process is hot it is 1400ms+ faster than in-proc\r\n\tcons: long-running satellite process, cold run is 100 ms slower than in-proc\r\n\r\n\r\nMeasured perf:\r\n![image](https://user-images.githubusercontent.com/25249058/119824446-3546d980-bef6-11eb-887f-6239ff948fb2.png)\r\n\r\nRemarks:\r\n\r\nmeasured at 'dotnet new console' csproj build: `dotnet build e:\\dev-sc\\console\\console.csproj` run 4 times\r\n\tneither CLI nor MSBuild was pre-jited !!! it is hard to precisely estimate how that would affect numbers, but I believe it would be:\r\n\t\r\n\r\n\t\t\r\n-500 ms out of proc\r\n\t\t-500 ms in proc\r\n\t\t-600 ms in proc + server v1\r\n\t\t-600 ms server v1 cold, -100 ms hot\r\n\t\t-500 ms server v2 cold only\r\n\t\r\n\t\r\ndotnet new will, for our type of projects, run build /t:restore which will start MSBuild server process, making 'dotnet new' pay most of the price, which I estimate to make 1st runs of build for 'server' kind builds at least 500ms faster than in table above\r\n\r\n\r\nRemaining work:\r\nserver v1 -> 2 days (few line changes)\r\nserver v2 -> need to be turned into production quality code (refactoring, UT, manual testing, code review) -> 3 weeks\r\n\r\n",
        "createdAt": "2021-05-27T12:17:31Z",
        "updatedAt": "2021-05-27T12:17:31Z",
        "author": {
          "login": "rokonec"
        }
      },
      {
        "body": "Parked into:\r\ndotnet/msbuild/feature/msbuild-server-v2--parked\r\ndotnet/msbuild/sdk/msbuild-server-v2--parked",
        "createdAt": "2021-05-27T12:18:22Z",
        "updatedAt": "2021-05-27T12:18:22Z",
        "author": {
          "login": "rokonec"
        }
      }
    ]
  }
}