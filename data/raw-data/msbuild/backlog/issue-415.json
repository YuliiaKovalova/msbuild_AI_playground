{
  "number": 415,
  "title": "\"virtual\" static libraries",
  "body": "A common trick with hand-rolled build systems - and available to various degrees in popular meta-build systems - is support for \"virtual\" static library targets.\n\nSuch targets are collections of source files that are compiled into object files but _not_ combined into a single archive library. This has several advantages, including a speed boost (less needless disk I/O) and provides a sort of portable version of MSBuild's \"Use Dependency Inputs\" option that would be implicit in the target's type rather than in the dependee's configuration. This ends up being handy as many \"organizational\" uses of static libraries are hampered by some of the archaic linker behavior present in C++, especially on Windows (static libraries linked into DLLs can't use `declspec(export)` and global variables with construction side-effects are often accidentally lost).\n\nThis request is to directly support such \"object collection\" libraries directly in MSBuild allowing us to build `.obj` files without generating a `.lib` file and with referencees automatically linking in the objects of the target.\n\nEssentially, this is a request for [CMake's OBJECT libraries](https://cmake.org/Wiki/CMake/Tutorials/Object_Library) (aka \"source sets\" in [Chromium's GN build tool](https://chromium.googlesource.com/chromium/src/+/master/tools/gn/docs/cookbook.md)) to be directly supported in MSBuild.\n",
  "state": "CLOSED",
  "createdAt": "2015-12-24T01:03:31Z",
  "updatedAt": "2024-02-21T17:29:28Z",
  "closedAt": "2017-02-22T17:30:52Z",
  "author": {
    "login": "seanmiddleditch"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Thanks for the suggestion.\n\nThis is a limitation of the C++ build system for Visual Studio that uses MSBuild, but isn't part of the open source MSBuild release. `Microsoft.Cpp.targets` and friends are owned by the Microsoft C++ team and ship with Visual Studio.\n\nI forwarded your request to the owners of C++ build internally. They pointed out that there is a property that controls whether a `.lib` file will be generated that you could set after importing the default (that sets it to true):\n\n``` xml\n<Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.props\" />\n\u2026\n\n  <PropertyGroup>\n    <LibCompiled>false</LibCompiled>\n  </PropertyGroup>\n```\n\nBut they warn that this might have side effects that cause problems elsewhere in your build, since it's not a mainstream scenario. I think you'd still have to (redundantly) specify the use-`.obj` property on the consuming side, but at least the time spent invoking the librarian wouldn't be wasted.\n",
        "createdAt": "2016-01-05T19:40:09Z",
        "updatedAt": "2016-01-05T19:40:09Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald  - thanks. Is there a public issue tracker to which the suggestion was forwarded?\n",
        "createdAt": "2016-04-08T07:05:00Z",
        "updatedAt": "2016-04-08T07:05:00Z",
        "author": {
          "login": "seanmiddleditch"
        }
      },
      {
        "body": "Not that I'm aware of, sorry.\n",
        "createdAt": "2016-04-08T15:02:09Z",
        "updatedAt": "2016-04-08T15:02:09Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Closing this since the issue is in C++ targets.",
        "createdAt": "2017-02-22T17:30:52Z",
        "updatedAt": "2017-02-22T17:30:52Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}