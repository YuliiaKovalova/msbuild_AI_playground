{
  "number": 5516,
  "title": "Lack of tooling or documentation on how to optimize build of 3000 F# projects, where cpu is not saturated",
  "body": "Creating this issue as i was not able to find answer or get response on StackOverflow.\r\nIm building 3000 F# projects in our CI, from scratch, on TeamCity. Perflog tab shows that during 2 hours it lasts, cpu is saturated only half of the time. This happens with VS2017 on windows server. \r\nIm not after optimizing cpu usage, but rather understanding what msbuild agents are waiting for and if i could optimize dependency chain or smth else.\r\nI tried enabling binlog, but msbuild hangs then and i cant access Build agents.\r\nI tried sorting projects by number of dependants, so we build core project first (i have not tried -graph option yet)\r\nF# is compiling files sequentially so may be more sensitive to thus problem than c# or cpp.\r\nHave i missed docs or tools that would allow to optimize my build?\r\nExpected: report and hints on what is causing delays in build.",
  "state": "OPEN",
  "createdAt": "2020-07-15T20:17:44Z",
  "updatedAt": "2024-02-21T16:29:06Z",
  "closedAt": null,
  "author": {
    "login": "michalmalecki"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Discussion"
  },
  "comments": {
    "nodes": [
      {
        "body": "This seems like an area where build logs would help the most. Here are some options off the top of my head.\r\n\r\nIf you have access to the machines running your CI, [examining the node communication traces](https://gist.github.com/BenVillalobos/85aa750daa7017791a3e3fdd6746934d) might help.\r\n\r\nFor getting the most CPU usage possible, set the `-m:<cpu_count>` flag. If no `cpu_count` is set but the `-m` switch is passed, MSBuild will use as many as possible. Perhaps this will allow you to complete a build and capture build logs?",
        "createdAt": "2020-07-21T20:43:39Z",
        "updatedAt": "2020-07-21T20:43:39Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "Another idea (which may be the most useful) is to take a look at the node utilization graph. It's part of the `diagnostic` output when building. Try passing `-detailedsummary` or `-ds` on the command line. https://docs.microsoft.com/en-us/visualstudio/msbuild/msbuild-command-line-reference?view=vs-2019#switches\r\n\r\nLook for long sections where many nodes are idle (marked with `x`).",
        "createdAt": "2020-07-22T16:28:05Z",
        "updatedAt": "2020-07-22T16:28:05Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "Thank you very much for answers.\r\nJust a little more context - we already run with /m, I have experimented with different loggers and settled on ConsoleLogger redirected to file, there was no measurable benefit from distributed file logger. \r\nFor -ds I would need a little help reading it. I see 32 columns (for available cores I guess) and average utilization of 83%. What I can do if I see particular time slot where most of nodes are idle (have Xs)? How is it actionable?\r\nI will try to access MSBUILDDEBUGPATH but it will take me some time. Looking at example log after compiling simple 3 projects, does it provide info on nodes waiting for their dependencies to build and idling?",
        "createdAt": "2020-07-22T18:28:38Z",
        "updatedAt": "2020-07-22T18:28:38Z",
        "author": {
          "login": "michalmalecki"
        }
      },
      {
        "body": "After talking with the team, it was made clear that looking at the node communication traces wouldn't actually be super useful here. Apologies for the red herring!\r\n\r\nI found an article that I had forgotten to link here: https://devblogs.microsoft.com/visualstudio/msbuild-4-detailed-build-summary/\r\n\r\nHere's what the article suggests doing with these findings.\r\n\r\n> If you look at your graph and you see one node doing work while no others are and the total duration of that period is long, then that is an indication you have serialization in your build and it may be worth looking at whether that request really should be that long \u2013 can it be split up into smaller chunks and have other requests refer to it piecemeal? Can the project itself be made to build faster using better tools? Is the request doing something unexpected? Another thing you can experiment with when trying to tune your builds is changing the multi-proc node count limit\r\n\r\nLet us know if this helps!",
        "createdAt": "2020-07-22T20:42:16Z",
        "updatedAt": "2020-07-22T20:42:16Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "Thanks a lot, i started looking at ds and found one project that is a bottleneck. Im experimenting if changing order of the projects that im providing to msbuild can hint it to prioritize hotpath over other projects. I would imagine graphbuild can do something like this in the future.",
        "createdAt": "2020-07-25T07:47:36Z",
        "updatedAt": "2020-07-25T07:47:36Z",
        "author": {
          "login": "michalmalecki"
        }
      },
      {
        "body": "I didnt have as much time as i wanted but already run one experiment that failed, could you or smb from product team validates its worth further investigation?\r\nI found out that one project, say \"S\" is blocking number of projects from building, and is itself built late in the process (around 36 minute, out of 40). It has around 12 dependencies, but if its built alone it completes much faster than in 36 minutes. My theory is that a lot of other projects, which may be leaf projects, built first, pushing\"S\" to the end of the queue.\r\nCan there be done anything to improve such situation?\r\nMy experiment:\r\nI sorted projects, that are passed to msbuild, by number of their dependants. This way leaf projects should be built last. However i didnt see any impact on time or cpu utilization. I need to still check what was actual order in which projects were built. Do you think such approach is worth pursuing?",
        "createdAt": "2020-08-02T18:58:00Z",
        "updatedAt": "2020-08-02T18:58:00Z",
        "author": {
          "login": "michalmalecki"
        }
      },
      {
        "body": "I am curious, how did you sort these projects such that they would be built in that order?\r\n\r\nYou're certainly on the right track. A logical next step would be to make sure your projects are actually building in the order you want. I believe our docs on [Project References](https://github.com/dotnet/msbuild/blob/master/documentation/ProjectReference-Protocol.md) and [extending the build process](https://docs.microsoft.com/en-us/visualstudio/msbuild/how-to-extend-the-visual-studio-build-process?view=vs-2019#example-aftertargets-and-beforetargets) are relevant here.",
        "createdAt": "2020-08-03T18:17:01Z",
        "updatedAt": "2020-08-03T18:17:01Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "Hi, I'm manipulating (sorting) list of projects that I'm passing to msbuild task, i.e.\r\n<MSBuild Projects=\"@(ProjectReference)\" Targets=\"Build\"/>\r\n\r\nSimple test at home (but with VS 2019 instead of 2017) shows that msbuild is building projects in the order that I'm passing in the Projects attribute. ",
        "createdAt": "2020-08-03T19:48:23Z",
        "updatedAt": "2020-08-03T19:48:23Z",
        "author": {
          "login": "michalmalecki"
        }
      }
    ]
  }
}