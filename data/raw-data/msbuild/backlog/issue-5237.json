{
  "number": 5237,
  "title": "GlobalProperties are not available in SDK-style projects (ProjectCollection.SetGlobalProperty)",
  "body": "### Context\r\nI am developing a Visual Studio extension [Package](https://docs.microsoft.com/en-us/dotnet/api/microsoft.visualstudio.shell.asyncpackage) with the objective of adding or overriding MSBuild properties in the solution's projects. These properties should be available in all of the projects' targets.\r\n\r\n### Expected behavior\r\nThe properties that are defined(<sup>1</sup>) in the VS extension should be available to the projects' MSBuild targets. E.g.\r\n\r\n```xml\r\n<Target BeforeTargets=\"Build\" Name=\"TestGlobalProperty\">\r\n  <Error Text=\"$(MyProperty)\" />\r\n</Target>\r\n```\r\n\r\n\u2139\ufe0f This functionality works correctly with the **old csproj** format.\r\n\r\n### Actual behavior\r\nWith the new **sdk-style** projects, these properties are not set in any of the targets.\r\n\r\nE.g., in the example line `<Error Text=\"$(MyProperty)\" />`, $(MyProperty) isn't defined and MSBuild outputs ` error : (No message specified)` instead of the value specified in the VS extension.\r\n\r\n### Steps to reproduce\r\n(<sup>1</sup>): I have tried several methods to make the properties available to the MSBuild targets. I have detailed them below.\r\n\r\nFor each of these methods I have attempted to operate the changes at several points of the build execution. I have also detailed them below (<sup>2</sup>).\r\n\r\n#### A - ProjectCollection.GlobalProjectCollection.SetGlobalProperty\r\nThe `GlobalProperties` Property of the `Microsoft.Build.Evaluation.ProjectCollection.GlobalProjectCollection`.\r\n\r\n```csharp\r\nvar projCol = ProjectCollection.GlobalProjectCollection;\r\n\r\nprojCol.SetGlobalProperty(\"MyProperty\", \"MyPropertyValue\");\r\n```\r\n\r\n- Program flow steps tested: 3 - 6\r\n- Result with **old csproj** format: Works\r\n- Result with **new sdk csproj** format: Doesn't work\r\n\r\n#### B - IEventSource.ProjectStarted\r\nThis method is a hack. I accessed `BuildManager.DefaultBuildManager.LoggingService` through reflection in order to register my own `ILogger` implementation.\r\n\r\nIn my `ILogger` implementation I registered a event handler for the `ProjectStarted` event.\r\n\r\n```csharp\r\nvar loggingSvc = BuildManager.DefaultBuildManager\r\n  .GetType()\r\n  .GetProperty(\"Microsoft.Build.BackEnd.IBuildComponentHost.LoggingService\",\r\n              BindingFlags.NonPublic | BindingFlags.Instance)\r\n  .GetValue(BuildManager.DefaultBuildManager);\r\n\r\nreturn (bool)loggingSvc\r\n  .GetType()\r\n  .GetMethod(\"RegisterLogger\", BindingFlags.Public | BindingFlags.Instance, null, new[] { typeof(ILogger) }, null)\r\n  .Invoke(loggingSvc, new object[] { new ReusableLogger(this) });\r\n```\r\n\r\nThe ILogger implementation:\r\n\r\n```csharp\r\npublic void Initialize(IEventSource eventSource)\r\n{\r\n  _eventSrc = (IEventSource3)eventSource;\r\n  _eventSrc.ProjectStarted += _eventSrc_ProjectStarted;\r\n}\r\n```\r\n\r\nThe `ProjectStarted` event handler's implementation:\r\n\r\n```csharp\r\nprivate void _eventSrc_ProjectStarted(object sender, ProjectStartedEventArgs e)\r\n{\r\n  try\r\n  {\r\n    e.GlobalProperties[\"MyProperty\"] = \"MyPropertyValue\";\r\n  }\r\n  catch (Exception ex)\r\n  {\r\n    JoinableTaskFactory.Run(() => this.WriteDebugAsync($\"[SMA] ProjectStarted exception {ex}\"));\r\n  }\r\n}\r\n```\r\n\r\n- Program flow steps tested: 1 - 2\r\n- Result with **old csproj** format: Doesn't work\r\n- Result with **new sdk csproj** format: Doesn't work\r\n\r\n#### C - EnvDTE.Project.Properties.Item\r\nAfter obtaining the `EnvDTE.Project` instance from `IVsHierarchy` using the `GetProperty` method, I tried to set the MSBuild properties using the `Properties.Item` object's property.\r\n\r\n```csharp\r\nvar props = project.Properties;\r\nvar prop = props.Item(\"MyProperty\");\r\n\r\nif (prop != null)\r\n  try\r\n  {\r\n    // None of these two methods worked:\r\n    prop.Value = (object)\"MyPropertyValue\";\r\n    prop.let_Value(\"MyPropertyValue\");\r\n  }\r\n  catch (Exception ex)\r\n  {\r\n    this.WriteDebug($\"SetProjectProperty '{project.Name}' exception:\\n{ex}\");\r\n  }\r\n\r\nproject.Save();\r\n```\r\n\r\n- Program flow steps tested: 3 - 6\r\n- Result with **old csproj** format: Doesn't work\r\n- Result with **new sdk csproj** format: Doesn't work\r\n\r\nI realize that this is the intended behaviour, I am outlining my experiments here for the sake of exhaustivity.\r\n\r\n#### D - Program flow steps\r\n(<sup>2</sup>): I have tried setting them at different stages, in case it had any influence:\r\n1 - [BuildEventsClass.OnBuildProjConfigBegin](https://docs.microsoft.com/en-us/dotnet/api/envdte.buildeventsclass.onbuildprojconfigbegin?view=visualstudiosdk-2017)\r\n2 - [BuildEventsClass.OnBuildBegin](https://docs.microsoft.com/en-us/dotnet/api/envdte.buildeventsclass.onbuildbegin)\r\n3 - [IVsUpdateSolutionEvents2.UpdateProjectCfg_Begin](https://docs.microsoft.com/en-us/dotnet/api/microsoft.visualstudio.shell.interop.ivsupdatesolutionevents2.updateprojectcfg_begin)\r\n4 - [IVsSolutionEvents.OnAfterOpenProject](https://docs.microsoft.com/en-us/dotnet/api/microsoft.visualstudio.shell.interop.ivssolutionevents.onafteropenproject)\r\n5 - [IVsSolutionEvents.OnAfterLoadProject](https://docs.microsoft.com/en-us/dotnet/api/microsoft.visualstudio.shell.interop.ivssolutionevents.onafterloadproject)\r\n6 - [OnAfterBackgroundSolutionLoadComplete](https://docs.microsoft.com/en-us/dotnet/api/microsoft.visualstudio.shell.interop.ivssolutionloadevents.onafterbackgroundsolutionloadcomplete)\r\n\r\n\r\n### Environment data\r\n`msbuild /version` output: `16.5.0.12403`\r\nOS info: `Windows 10 18362.657`\r\nIf applicable, version of the tool that invokes MSBuild: `Visual Studio 2019 16.5.2`",
  "state": "CLOSED",
  "createdAt": "2020-04-04T14:20:37Z",
  "updatedAt": "2024-02-21T17:04:21Z",
  "closedAt": "2020-04-22T18:43:17Z",
  "author": {
    "login": "alexis-"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "This issue was moved to dotnet/project-system#6116",
        "createdAt": "2020-04-22T18:43:12Z",
        "updatedAt": "2020-04-22T18:43:12Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "You might find this helpful:\r\nhttps://github.com/dotnet/project-system/issues/6116#issuecomment-618080568",
        "createdAt": "2020-04-23T02:00:59Z",
        "updatedAt": "2020-04-23T02:00:59Z",
        "author": {
          "login": "Forgind"
        }
      }
    ]
  }
}