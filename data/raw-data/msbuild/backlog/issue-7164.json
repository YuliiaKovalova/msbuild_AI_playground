{
  "number": 7164,
  "title": "mansign2 applies SHA-1 timestamps if TSS returns a non-HTTP-OK response",
  "body": "If `SignedCmiManifest2` is passed `useSha256=true` then mansign2 tries to apply a SHA-2 timestamp to the signature in `TimestampSignedLicenseDom`. However, if `ObtainRFC3161Timestamp` fails, it falls back to a non-RFC3161 timestamp and silently applies a SHA-1 timestamp without telling the outside world that it has done so.\r\n\r\nThis is a problem for us, as our TSS sometimes returns a non-200 return code due to rate limits (throttling). Instead of retrying or failing the signing operation, mansign2 silently applies a SHA-1 timestamp.\r\n\r\nThis is not following the principle of least surprise and should be mitigated. In an optimal world mansign2 could detect whether the TSS does not support RFC3161 or whether it returned a non-HTTP-OK response for a different reason. If that's not possible, it should at least inform the outside world that it has fallen back to SHA-1.\r\n\r\nBest regards,\r\nD.R.",
  "state": "CLOSED",
  "createdAt": "2021-12-21T14:49:30Z",
  "updatedAt": "2024-02-21T14:10:35Z",
  "closedAt": "2022-02-01T18:20:10Z",
  "author": {
    "login": "drauch"
  },
  "labels": [
    "bug",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Adding a message when it falls back to SHA-1 is minimal but definitely doable. Trying at least a few times should also be doable. I'm curious if we can disable the fallback entirely and just throw an exception\u2014I don't think SHA-1 is currently in support (as of earlier this year), but it may still be used in a variety of applications. Maybe we can do that under a changewave?",
        "createdAt": "2021-12-23T20:10:48Z",
        "updatedAt": "2021-12-23T20:10:48Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "The exception scenario would be best in our case, this would allow us to retry the whole operation.",
        "createdAt": "2021-12-24T09:17:19Z",
        "updatedAt": "2022-01-03T15:23:04Z",
        "author": {
          "login": "drauch"
        }
      },
      {
        "body": "@sujitnayak, how would you prefer to solve this?",
        "createdAt": "2022-01-06T17:20:54Z",
        "updatedAt": "2022-01-06T17:20:54Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "Just to be clear, is this issue referring to the fallback code in the exception handler of [TimestampSignedLicenseDom](https://referencesource.microsoft.com/#System.Windows.Forms/parent/parent/parent/public/Internal/NDP/Inc/mansign2.cs,1852)? \r\n\r\nWe call Win32.CertTimestampAuthenticodeLicense API in the fallback code when RFC3161 timestamping attempt fails in an attempt a generate a non-RFC3161 timestamp. I am not sure what algorithm it uses to calculate the timestamp but is the claim that this API is using SHA-1 to calculate the hash?\r\n\r\nThanks.",
        "createdAt": "2022-01-07T01:37:18Z",
        "updatedAt": "2022-01-07T02:02:32Z",
        "author": {
          "login": "sujitnayak"
        }
      },
      {
        "body": "Yes and yes, and that part seems to be true. It seems a little wrong to silently use a different timestamp to that requested.",
        "createdAt": "2022-01-07T02:44:52Z",
        "updatedAt": "2022-01-07T02:44:52Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "Manifest signing done via msbuild task and the [Mage](https://docs.microsoft.com/en-us/dotnet/framework/tools/mage-exe-manifest-generation-and-editing-tool) toolset for ClickOnce has to have identical behavior.\r\n\r\nI will reach out to the Mage owners in .NET team to see which of the proposed approach is feasible.\r\n",
        "createdAt": "2022-01-07T19:11:25Z",
        "updatedAt": "2022-01-07T19:11:25Z",
        "author": {
          "login": "sujitnayak"
        }
      },
      {
        "body": "@drauch The timestamp server URL that is provided to CertTimestampAuthenticodeLicense determines which hash algorithm to use. Can you clarify which timestamp server you are using.\r\nThanks.",
        "createdAt": "2022-01-11T21:42:47Z",
        "updatedAt": "2022-01-11T21:42:47Z",
        "author": {
          "login": "sujitnayak"
        }
      },
      {
        "body": "@sujitnayak : The problem is, that CertTimestampAuthenticodeLicense should never be called in the first place. We identified three reasons why ObtainRFC3161Timestamp can fail in our scenarios:\r\n\r\n* Throttling by the TSS (returns HTTP 429)\r\n* Temporarily unavailable (returns HTTP 503), e.g., due to an update\r\n* The generated nonce ends in 0x00 or 0xFF\r\n\r\nAll three scenarios are handled by the existing code as \"TSS does not understand RFC 3161 properly\", but at least for those three scenarios that's simply not true. In the contrary, most, if not all current TSS understand RFC 3161.\r\n\r\nThere should be a) better detection what caused the problem and not an immediate fallback to non-RFC-3161 and only afterwards there should be b) a check that the applied non-RFC-3161 timestamp has the same hash algorithm as originally requested with the useSha256 flag.\r\n\r\nTimestamp servers which return SHA1 hashes for non-RFC-3161 timestamps are, e.g., DigiCert: http://timestamp.digicert.com \r\n\r\nBest regards.\r\nD.R.",
        "createdAt": "2022-01-12T07:07:17Z",
        "updatedAt": "2022-01-12T07:08:30Z",
        "author": {
          "login": "drauch"
        }
      },
      {
        "body": "@drauch is it possible to use a TSS that does not use sha-1 hash? The Windows API used for RFC3161 timestamp does not return HTTP errors so we cannot make a distinction between the various HTTP errors. \r\nWe cannot remove the fallback at this point as there might be consumers that depend on the behavior. \r\nWe could add a build warning if msbuild has a way of doing that. ",
        "createdAt": "2022-01-14T00:05:39Z",
        "updatedAt": "2022-01-14T00:07:40Z",
        "author": {
          "login": "sujitnayak"
        }
      },
      {
        "body": "> We could add a build warning if msbuild has a way of doing that.\r\n\r\nWe do, and if you use a unique warning/error code, a project could opt into making it a hard error (even if it's just a warning in normal operation).\r\n\r\nWe _generally_ think of adding warnings as a breaking change, but it's a case-by-case thing; if this situation is both fairly rare and bad we could probably add a non-opt-in warning; if it's common or not too severe we'd probably prefer to add a new property `DisallowMansignTimestampFallback` (or something).",
        "createdAt": "2022-01-14T15:06:21Z",
        "updatedAt": "2022-01-14T15:06:21Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald : That sounds good enough for us. Even opt-in is good enough for our scenario.\r\n\r\nThank you both for your work!\r\n\r\nBest regards,\r\nD.R.",
        "createdAt": "2022-01-14T16:00:32Z",
        "updatedAt": "2022-01-14T16:00:32Z",
        "author": {
          "login": "drauch"
        }
      }
    ]
  }
}