{
  "number": 3634,
  "title": "InvalidProjectFileException after upgrading VS2017 to 15.8.0 with Microsoft.Build NuGet 15.6.82",
  "body": "### Steps to reproduce\r\n\r\nUsing Microsoft.Build package (from NuGet in version 15.6.82) added as NuGet reference to a project.\r\nCalling constructor of: Microsoft.Build.Evaluation.Project(projectFile) in one of methods.\r\nResults in throwing Microsoft.Build.Exceptions.InvalidProjectFileException\r\nStack Trace:\r\n\r\n```[ERROR] Microsoft.Build.Exceptions.InvalidProjectFileException\r\n[ERROR] Invalid static method invocation syntax: \"[Microsoft.Build.Utilities.ToolLocationHelper]::GetPathToStandardLibraries($(TargetFrameworkIdentifier), $(TargetFrameworkVersion), $(TargetFrameworkProfile), $(PlatformTarget), $(TargetFrameworkRootPath), $(TargetFrameworkFallbackSearchPaths))\". Method 'Microsoft.Build.Utilities.ToolLocationHelper.GetPathToStandardLibraries' not found. Static method invocation should be of the form: $([FullTypeName]::Method()), e.g. $([System.IO.Path]::Combine(`a`, `b`)).   C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Professional\\MSBuild\\15.0\\Bin\\Microsoft.Common.CurrentVersion.targets\r\n   at Microsoft.Build.Shared.ProjectErrorUtilities.ThrowInvalidProject(String errorSubCategoryResourceName, IElementLocation elementLocation, String resourceName, Object[] args)\r\n   at Microsoft.Build.Shared.ProjectErrorUtilities.ThrowInvalidProject[T1,T2](IElementLocation elementLocation, String resourceName, T1 arg0, T2 arg1)\r\n   at Microsoft.Build.Evaluation.Expander`2.Function`1.Execute(Object objectInstance, IPropertyProvider`1 properties, ExpanderOptions options, IElementLocation elementLocation)\r\n   at Microsoft.Build.Evaluation.Expander`2.PropertyExpander`1.ExpandPropertyBody(String propertyBody, Object propertyValue, IPropertyProvider`1 properties, ExpanderOptions options, IElementLocation elementLocation, UsedUninitializedProperties usedUninitializedProperties)\r\n   at Microsoft.Build.Evaluation.Expander`2.PropertyExpander`1.ExpandPropertiesLeaveTypedAndEscaped(String expression, IPropertyProvider`1 properties, ExpanderOptions options, IElementLocation elementLocation, UsedUninitializedProperties usedUninitializedProperties)\r\n   at Microsoft.Build.Evaluation.Expander`2.PropertyExpander`1.ExpandPropertiesLeaveEscaped(String expression, IPropertyProvider`1 properties, ExpanderOptions options, IElementLocation elementLocation, UsedUninitializedProperties usedUninitializedProperties)\r\n   at Microsoft.Build.Evaluation.Expander`2.ExpandIntoStringLeaveEscaped(String expression, ExpanderOptions options, IElementLocation elementLocation)\r\n   at Microsoft.Build.Evaluation.Evaluator`4.EvaluatePropertyElement(ProjectPropertyElement propertyElement)\r\n   at Microsoft.Build.Evaluation.Evaluator`4.EvaluatePropertyGroupElement(ProjectPropertyGroupElement propertyGroupElement)\r\n   at Microsoft.Build.Evaluation.Evaluator`4.PerformDepthFirstPass(ProjectRootElement currentProjectOrImport)\r\n   at Microsoft.Build.Evaluation.Evaluator`4.EvaluateImportElement(String directoryOfImportingFile, ProjectImportElement importElement)\r\n   at Microsoft.Build.Evaluation.Evaluator`4.PerformDepthFirstPass(ProjectRootElement currentProjectOrImport)\r\n   at Microsoft.Build.Evaluation.Evaluator`4.EvaluateImportElement(String directoryOfImportingFile, ProjectImportElement importElement)\r\n   at Microsoft.Build.Evaluation.Evaluator`4.PerformDepthFirstPass(ProjectRootElement currentProjectOrImport)\r\n   at Microsoft.Build.Evaluation.Evaluator`4.EvaluateImportElement(String directoryOfImportingFile, ProjectImportElement importElement)\r\n   at Microsoft.Build.Evaluation.Evaluator`4.PerformDepthFirstPass(ProjectRootElement currentProjectOrImport)\r\n   at Microsoft.Build.Evaluation.Evaluator`4.EvaluateImportElement(String directoryOfImportingFile, ProjectImportElement importElement)\r\n   at Microsoft.Build.Evaluation.Evaluator`4.PerformDepthFirstPass(ProjectRootElement currentProjectOrImport)\r\n   at Microsoft.Build.Evaluation.Evaluator`4.Evaluate(ILoggingService loggingService, BuildEventContext buildEventContext)\r\n   at Microsoft.Build.Evaluation.Project.Reevaluate(ILoggingService loggingServiceForEvaluation, ProjectLoadSettings loadSettings)\r\n   at Microsoft.Build.Evaluation.Project.ReevaluateIfNecessary(ILoggingService loggingServiceForEvaluation, ProjectLoadSettings loadSettings)\r\n   at Microsoft.Build.Evaluation.Project.Initialize(IDictionary`2 globalProperties, String toolsVersion, String subToolsetVersion, ProjectLoadSettings loadSettings)\r\n   at Microsoft.Build.Evaluation.Project..ctor(String projectFile, IDictionary`2 globalProperties, String toolsVersion, String subToolsetVersion, ProjectCollection projectCollection, ProjectLoadSettings loadSettings)\r\n   at Microsoft.Build.Evaluation.Project..ctor(String projectFile)\r\n```\r\n\r\nUnfortunately, because product is already released it's hard to fix existing issue. Users who updated their VS2017 to version 15.8.0+ will suffer from not being able to use product.\r\n\r\nIs there any workaround?\r\n\r\n### Expected  behavior\r\nUsing this constructor should be backward compatible even if user has Microsoft.Build in version older than 15.8.X\r\n\r\n### Actual behavior\r\nThrows an exception because usage of newly added method which was not present in older version.\r\n\r\n### Environment data\r\nMSBuild version:\r\nMicrosoft (R) Build Engine version 15.8.166+gd4e8d81a88 for .NET Framework\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n15.8.166.59604\r\n\r\nVS2017 version:\r\nVersion 15.8.1\r\n",
  "state": "OPEN",
  "createdAt": "2018-08-20T14:27:01Z",
  "updatedAt": "2024-02-21T16:33:18Z",
  "closedAt": null,
  "author": {
    "login": "jzielnik"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "We recommend that you use the `Microsoft.Build.Locator` package to avoid this and other mismatched-engine-and-targets problems. There is documentation available at https://docs.microsoft.com/en-us/visualstudio/msbuild/updating-an-existing-application.\r\n\r\nThe only workaround I can think of is to copy the higher version of MSBuild assemblies over the lower version redistributed with your application. That's a pain but has worked before.",
        "createdAt": "2018-08-20T14:57:34Z",
        "updatedAt": "2018-08-20T14:57:34Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I am experiencing the same issue. Isn't it a problem with versioning policy that minor releases are introducing breaking changes? It makes Microsoft.Build API not reliable. Currently, there are many updates for VS which are released really often, should I expect that each of them can break my integration with Microsoft.Build?\r\n\r\n@rainersigwald `Microsoft.Build.Locator` has limitations - strongest of them is lack of compability with Microsoft.Build.* assemblies (older version of them required by my solution which has some projects targeted to pre-4.6 .NET Framework). Also, to my best knowledge `Microsoft.Build.Locator` works properly only with VS/BuildTools 15.x. Requirement for me is version 11.0+.\r\nAlso, copying assemblies is not the case as well, because there are conflicts between dependant assemblies versions (e.g. System.Collections.Immutable is commonly used as a reference in my pre-4.6 projects).\r\n\r\nIs there any other solution?\r\nIs there at least a way to downgrade to 15.7 after 15.8 was installed?",
        "createdAt": "2018-08-20T16:09:45Z",
        "updatedAt": "2018-08-20T16:09:45Z",
        "author": {
          "login": "tobyash86"
        }
      },
      {
        "body": "@tobyash86: See https://docs.microsoft.com/en-us/visualstudio/productinfo/installing-an-earlier-release-of-vs2017. This does not cover the Express edition.",
        "createdAt": "2018-08-22T06:16:05Z",
        "updatedAt": "2018-08-22T06:16:05Z",
        "author": {
          "login": "chm-tm"
        }
      },
      {
        "body": "Thanks @chm-tm, although I had hope that there is an easier way to do this.",
        "createdAt": "2018-08-22T06:53:13Z",
        "updatedAt": "2018-08-22T06:53:13Z",
        "author": {
          "login": "tobyash86"
        }
      },
      {
        "body": "Since I only depend on Visual Studio 15.8, a.k.a latest-greatest, I could resolve the issue by updating the NuGet packages from from 15.6.82 to 15.8.166.\r\nThere is still a pit-fall here: We use Professional _and_ Express, which led to different binding redirects. In my case of a project targeting .NET 4.6.1, for `System.IO.Compression` and `System.Runtime.InteropServices.RuntimeInformation`.\r\nSo, this is clearly less robust than the recommended `Microsoft.Build.Locator` way.",
        "createdAt": "2018-08-22T08:44:58Z",
        "updatedAt": "2018-08-22T08:44:58Z",
        "author": {
          "login": "chm-tm"
        }
      },
      {
        "body": "So the lesson here is do not trust Visual Studio upgrades!?",
        "createdAt": "2018-11-26T12:40:37Z",
        "updatedAt": "2018-11-26T12:41:10Z",
        "author": {
          "login": "Vance-Smith"
        }
      }
    ]
  }
}