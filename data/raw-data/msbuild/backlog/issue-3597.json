{
  "number": 3597,
  "title": "Make WriteCodeFragment and WriteLinesToFile idempotent by default",
  "body": "Tasks that write text to a file, if that file exists, should first read the text, compare with what they're about to write, and avoid touching the file if the content is identical.\r\n\r\nThis would be good for incremental builds.",
  "state": "OPEN",
  "createdAt": "2018-08-09T20:43:19Z",
  "updatedAt": "2024-02-21T16:33:21Z",
  "closedAt": null,
  "author": {
    "login": "KirillOsenkov"
  },
  "labels": [
    "needs-design",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "`WriteLinesToFile` has a bool parameter `WriteOnlyWhenDifferent` that can be set for this purpose.\r\n\r\nWe should consider flipping the default on that for 16.0.",
        "createdAt": "2018-08-14T15:33:21Z",
        "updatedAt": "2018-08-14T15:33:21Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "This seems like a good idea to me. Note that it would not solve cases where `WriteCodeFragment` or `WriteLinesToFile` are naively writing e.g. a timestamp or an incrementing number, which was the motivation for https://github.com/dotnet/roslyn/issues/24053. ",
        "createdAt": "2018-09-20T15:52:34Z",
        "updatedAt": "2018-09-20T15:52:34Z",
        "author": {
          "login": "Adam-S-Daniel"
        }
      },
      {
        "body": "This weekend it occurred to me that there's a big potential problem here, because of MSBuild's use of timestamps.\r\n\r\nConsider:\r\n\r\n```xml\r\n<Target Name=\"WriteStuff\"\r\n        Inputs=\"in.txt\"\r\n        Outputs=\"out.txt\">\r\n  <IncrediblyExpensiveTask Input=\"in.txt\">\r\n    <Output TaskParameter=\"ExpensiveOutput\"\r\n            ItemName=\"ExpensiveOutput\" />\r\n  </IncrediblyExpensiveTask>\r\n\r\n  <WriteLinesToFile File=\"out.txt\"\r\n                    Lines=\"@(ExpensiveOutput)\" />\r\n</Target>\r\n```\r\n\r\nSuppose `in.txt` changes in a way that doesn't impact the output of the expensive task. That would mean that _this target would run completely in every build_ after the change.\r\n\r\nWe tackled a similar problem with reference assemblies, and it required a multi-step process: first (unconditionally) generate the file, then copy it around (only if different) for subsequent build steps.",
        "createdAt": "2019-02-04T22:42:57Z",
        "updatedAt": "2019-02-04T22:42:57Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Interesting point!\r\n\r\n1. We do need to have the option on both tasks\r\n2. We need to audit usages of these tasks across the targets we own and turn on where it's safe\r\n\r\nYour concern is valid, but shouldn't preclude us from doing the right thing in the majority of cases where it's safe. Otherwise we get the opposite case - builds that should be incremental, aren't.",
        "createdAt": "2019-02-04T23:30:59Z",
        "updatedAt": "2019-02-04T23:30:59Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "Is https://github.com/dotnet/msbuild/issues/701#issuecomment-870653874 a potential solution?",
        "createdAt": "2023-01-27T20:38:25Z",
        "updatedAt": "2023-01-27T20:38:25Z",
        "author": {
          "login": "stan-sz"
        }
      },
      {
        "body": "Turning `WriteOnlyWhenDifferent` may not take the desired effect immediately due to #8363.",
        "createdAt": "2023-01-27T21:06:43Z",
        "updatedAt": "2023-01-27T21:06:43Z",
        "author": {
          "login": "stan-sz"
        }
      }
    ]
  }
}