{
  "number": 523,
  "title": "xplat MSBuild task guidance",
  "body": "I was thinking of using MSBuild to build a fairly complex codebase on both Mac and Windows. The main issue I ran into when researching this is: what is the best way to create MSBuild tasks so that the xplat MSBuild will correctly load them? This is harder on Core than on Windows, because I have to ensure that the tasks reference the exact same versions of all referenced assemblies (both those that are part of MSBuild and those from CoreFX).\n\nI thought that `XamlTaskFactory` would be the solution to this problem (especially because it is designed to simply run an external program over each source file, which is exactly what I need here), but it isn't supported on non-Windows platforms. I saw #304, which may indicate that this functionality is not going to show up any time soon, but am not entirely certain if this was what was meant by \"in-line\" tasks. @AndyGerlicher You opened #304, can you provide me any guidance?\n",
  "state": "CLOSED",
  "createdAt": "2016-03-11T20:02:51Z",
  "updatedAt": "2024-02-21T17:28:52Z",
  "closedAt": "2019-07-22T21:30:50Z",
  "author": {
    "login": "wjk"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "I actually had a few thoughts about how to make `XamlTaskFactory` work on xplat. It is a two-step process:\n1. Replace the usage of System.CodeDom with Roslyn.\n2. Replace the `System.Xaml`-based parser with one using `System.Xml.Linq`.\n\nThese changes would enable `XamlTaskFactory` to parse most task-definition files on non-Windows platforms, and be able to create the task classes in a cross-platform manner. However, there is one downside I noticed: While all XAML files can be parsed with a significantly sophisticated XML parser, some XAML constructs require a number of special cases to be written for a `System.Xml.Linq`-based parser to be able to understand the file. I am most concerned with the fact that these two XAML constructs are semantically identical, but require significantly different parsing code to handle:\n\n``` xml\n<StringProperty DisplayName=\"Additional Options\" />\n\n<StringProperty>\n  <StringProperty.DisplayName>\n    <sys:String>Additional Options</sys:String>\n  </StringProperty.DisplayName>\n</StringProperty>\n```\n\nThe second syntax is used in real-world XAML task definitions; see for example [here](https://github.com/Enseed/ReflectAPI/blob/5f0777c63c1d1bade4bc5129d5c6b57ab7b22f89/msvc/reflect.xml#L105-L110) or [here](https://github.com/metamorph-inc/meta-core/blob/789a5b093d82cf6177725e774a6eafb86a0229d8/externals/common-scripts/build_customization/meta2uml.xml#L43-L48).\n\nWould it be an acceptable tradeoff to require the first syntax above, and not support the second? This would make writing a parser for XAML task definition files far easier. I can prepare a PR if the functional differences outlined above are acceptable between the Windows-only .NET Framework-based version of MSBuild and the cross-platform .NET Core-based version.\n",
        "createdAt": "2016-03-13T20:57:25Z",
        "updatedAt": "2016-03-13T20:57:25Z",
        "author": {
          "login": "wjk"
        }
      },
      {
        "body": "Since https://github.com/dotnet/corefx/issues/5766 is still open, I think you should wait.\n",
        "createdAt": "2016-03-15T02:37:29Z",
        "updatedAt": "2016-03-15T02:37:29Z",
        "author": {
          "login": "lextm"
        }
      },
      {
        "body": "You can write tasks that work both on full MSBuild as well as the .NET Core version.  Basically you create a .NET Core library that's compatible with the full .NET Framework, and then reference the .NET Core MSBuild DLLs.  The [PortableTask Sample](https://github.com/Microsoft/msbuild/tree/xplat/Samples/PortableTask) shows how to do this.  The main thing you would change is that instead of having project references to Microsoft.Build.Framework and Microsoft.Build.Utilities, you would reference the NuGet packages which contain the .NET Core versions of those assemblies.\n",
        "createdAt": "2016-03-15T17:28:01Z",
        "updatedAt": "2016-03-15T17:28:01Z",
        "author": {
          "login": "dsplaisted"
        }
      },
      {
        "body": "Closing this issue as this is something that we do ourselves all the time and @dsplaisted has pointed out to some guidance regarding that.",
        "createdAt": "2019-07-22T21:30:50Z",
        "updatedAt": "2019-07-22T21:30:50Z",
        "author": {
          "login": "livarcocc"
        }
      }
    ]
  }
}