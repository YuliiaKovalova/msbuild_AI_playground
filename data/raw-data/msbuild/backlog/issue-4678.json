{
  "number": 4678,
  "title": "Avoid rebuilding Any CPU dependencies",
  "body": "I have a solution containing an executable that depends on numerous libraries. We build the executable in both x86 and x64, and all the libraries \"Any CPU\". \r\nOur CI msbuild script runs the MSBuild task twice against the solution, once for each target platform. This means each library dependency gets built twice, somewhat redundantly.\r\n\r\nIs there a way I can use msbuild to build only the executable in the 2nd run, and have it pick up all the dependencies from the Any CPU folder? This works in Visual Studio, but not via msbuild from the command line. \r\n\r\nIn detail, I created 3 solution platforms in VS: Any CPU, x86, x64. \r\nAny CPU marks everything for build (via the Configuration Manager)\r\nx86 & x64 only mark the executable for build\r\nProvided I build Any CPU first, Visual Studio will copy (but not build) dependencies from Any CPU when I build the x86/x64 platforms.\r\n\r\nMSBuild command line respects the build/do not build settings, but fails to compile as it doesn't pass the (project) references in to csc. Visual Studio on the other hand magically knows.\r\n\r\nI hoped something like this might work:\r\n`    <MSBuild Projects=\"$(SolutionFile)\" Targets=\"Build\" Properties=\"Platform=Any CPU\" />`\r\n`    <MSBuild Projects=\"$(SolutionFile)\" Targets=\"Build\" Properties=\"Platform=x86;BuildProjectReferences=false\" />`\r\n\r\nIs there a neat way to achieve this? I suppose I could duplicate the executable project and have one build x86, one x64, and build everything in a single pass, but I don't really want to do this.\r\n",
  "state": "CLOSED",
  "createdAt": "2019-08-30T09:15:29Z",
  "updatedAt": "2024-02-21T17:07:19Z",
  "closedAt": "2019-09-11T10:19:33Z",
  "author": {
    "login": "RobSwDev"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Discussion"
  },
  "comments": {
    "nodes": [
      {
        "body": "Yes, you can accomplish this on the command line, but it's more complicated than it should be. I've attached an example of my preferred approach to this situation: \r\n[MultiPlatformApp.zip](https://github.com/microsoft/msbuild/files/3560631/MultiPlatformApp.zip)\r\n\r\n* 2 solution platforms: x64 and x86 (no anycpu because that wouldn't produce your usable app)\r\n* AnyCPU is the only platform for the library projects, so that gets used in the x64 and x86 _solution_ platforms\r\n* AnyCPU library projects are still configured to build in the platform-specific configurations.\r\n* In **addition** to that solution configuration (which is primarily for VS scenarios), tell MSBuild to always reference the AnyCPU platform of the libraries by adding `SetPlatform=\"Platform=AnyCPU\"` to all `ProjectReference`s in your application project.\r\n\r\nWith that, you can always build the solution for either platform, and automatically bring everything up to date:\r\n\r\n```sh-session\r\n$ msbuild -nologo -m -v:m .\\MultiPlatformApp.sln -p:Platform=x86\r\n  AnyCPULibrary -> S:\\repro\\microsoft\\msbuild\\issues\\4678\\AnyCPULibrary\\bin\\Debug\\AnyCPULibrary.dll\r\n  MultiPlatformApp -> S:\\repro\\microsoft\\msbuild\\issues\\4678\\MultiPlatformApp\\bin\\x86\\Debug\\MultiPlatformApp.exe\r\n$ msbuild -nologo -m -v:m .\\MultiPlatformApp.sln -p:Platform=x64\r\n  AnyCPULibrary -> S:\\repro\\microsoft\\msbuild\\issues\\4678\\AnyCPULibrary\\bin\\Debug\\AnyCPULibrary.dll\r\n  MultiPlatformApp -> S:\\repro\\microsoft\\msbuild\\issues\\4678\\MultiPlatformApp\\bin\\x64\\Debug\\MultiPlatformApp.exe\r\n```\r\n\r\nYou can also use a small wrapper project to build both copies of the application in parallel:\r\n\r\n```xml\r\n<Project>\r\n  <ItemGroup>\r\n    <ProjectReference Include=\"MultiPlatformApp\\MultiPlatformApp.csproj\" Properties=\"Platform=x86\" />\r\n    <ProjectReference Include=\"MultiPlatformApp\\MultiPlatformApp.csproj\" Properties=\"Platform=x64\" />\r\n  </ItemGroup>\r\n\r\n  <Target Name=\"Build\">\r\n    <MSBuild Projects=\"@(ProjectReference)\"\r\n             BuildInParallel=\"true\"\r\n             />\r\n  </Target>\r\n</Project>\r\n```\r\n\r\n```sh-session\r\n$ msbuild -nologo -m -v:m .\\BuildAll.proj\r\n  AnyCPULibrary -> S:\\repro\\microsoft\\msbuild\\issues\\4678\\AnyCPULibrary\\bin\\Debug\\AnyCPULibrary.dll\r\n  MultiPlatformApp -> S:\\repro\\microsoft\\msbuild\\issues\\4678\\MultiPlatformApp\\bin\\x64\\Debug\\MultiPlatformApp.exe\r\n  MultiPlatformApp -> S:\\repro\\microsoft\\msbuild\\issues\\4678\\MultiPlatformApp\\bin\\x86\\Debug\\MultiPlatformApp.exe\r\n```\r\n\r\nNote that there's only _one_ build of `AnyCPULibrary` mentioned there.\r\n\r\nWhat you _can't_ do is build the _solution_ twice in parallel, because of #4680 which I just filed while writing this up.",
        "createdAt": "2019-08-30T16:07:36Z",
        "updatedAt": "2019-08-30T16:07:36Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Excellent - thanks! I'll give that a go. \r\nHaven't seen \"SetPlatform\" in any of the documentation - e.g. it's not mentioned [here](https://docs.microsoft.com/en-us/visualstudio/msbuild/common-msbuild-project-items?view=vs-2019).",
        "createdAt": "2019-08-30T20:31:12Z",
        "updatedAt": "2019-08-30T20:31:12Z",
        "author": {
          "login": "RobSwDev"
        }
      },
      {
        "body": "@RobSwDev did this work for you?",
        "createdAt": "2019-09-09T21:53:14Z",
        "updatedAt": "2019-09-09T21:53:14Z",
        "author": {
          "login": "livarcocc"
        }
      },
      {
        "body": "@livarcocc Yes, thanks, it's working for me. In fact it seems like I don't actually need to add the SetPlatform metadata to the project references, and it still works. (Both in the MultiPlatformApp sample and in my real-world case)\r\n\r\nI had several issues stopping it working: \r\n- Minor differences in the properties passed in for each platform build: when only 1 project out of 100 needs that property, the project itself can work it out based on `$(Platform)`\r\n- CopyAlways set to true on a couple of Content items\r\n- CopyAlways set to true in targets files in nuget packages referenced my multiple projects\r\n- Unnecessary test project references to the 5 projects that have to be built for both platforms. ",
        "createdAt": "2019-09-11T10:19:33Z",
        "updatedAt": "2019-09-11T10:19:33Z",
        "author": {
          "login": "RobSwDev"
        }
      }
    ]
  }
}