{
  "number": 2705,
  "title": "MSBuild on .NET Core is aggressively loading tasks from Microsoft.Common.Tasks",
  "body": "I've been testing recent versions of the `Microsoft.NETCore.Compilers` package with .NET Core MSBuild on Windows and I've been seeing errors with the 2.1.1-preview-007118 SDK (and earlier, but unfortunately I deleted my old SDK versions and can't tell exactly when the problem started) where MSBuild is aggressively loading tasks listed in `Microsoft.Common.tasks` before they're used, resulting in an error when we try to run our `UsingTask` in the `Microsoft.NETCore.Compilers` package due to the task binary already being loaded in the process.\r\n\r\nThe workflow for our compiler packages is: ship a targets file that uses UsingTask on the `Microsoft.Build.Tasks.CodeAnalysis` package in the NuGet package, as well as override some properties and targets to force new compilers to be used. If we can't rely on `UsingTask` picking the the assembly inside the NuGet package before MSBuild loads Microsoft.Common.tasks then we cannot upgrade the compiler used by MSBuild.\r\n\r\nThis is a problem for Roslyn as this feature is required for us to override the built-in compilers in CLI/MSBuild.",
  "state": "CLOSED",
  "createdAt": "2017-11-07T00:15:21Z",
  "updatedAt": "2024-02-21T17:15:48Z",
  "closedAt": "2017-11-07T20:16:42Z",
  "author": {
    "login": "agocke"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "cc @jaredpar @AndyGerlicher @dsplaisted ",
        "createdAt": "2017-11-07T00:15:42Z",
        "updatedAt": "2017-11-07T00:15:42Z",
        "author": {
          "login": "agocke"
        }
      },
      {
        "body": "Specifically, this blocks our ability to self-host (upgrade to new compiler versions) on Windows on CLI. I haven't seen this problem on Desktop or on CLI Linux/Mac. This only seems to be a problem on CLI + Windows.",
        "createdAt": "2017-11-07T00:23:04Z",
        "updatedAt": "2017-11-07T00:23:04Z",
        "author": {
          "login": "agocke"
        }
      },
      {
        "body": "This shouldn't be the case. The `UsingTask` statements don't load anything until the task is called, and the last one wins. I tried it out:\r\n``` XML\r\n<Project>\r\n  <Target Name=\"Build\"> <Csc /> </Target>\r\n</Project>\r\n```\r\nThis works fine (fails wrong arguments), Csc is loaded from the shipping Roslyn task.\r\n\r\n``` XML\r\n<Project>\r\n  <UsingTask TaskName=\"Csc\" AssemblyFile=\"c:\\missing.dll\" />\r\n  <Target Name=\"Build\"> <Csc /> </Target>\r\n</Project>\r\n```\r\nThis fails that the dll isn't found. I also tried it in a real csproj and I could overwrite `Csc`. The only thing I could see that would definitely cause problems is node reuse. Once it loads a specific dll for the `Csc` task, you're stuck until the node closes. You could also have something else triggering a `Csc` task inadvertently in your build that would lock you to a specific version until the node is done.",
        "createdAt": "2017-11-07T03:03:36Z",
        "updatedAt": "2017-11-07T03:03:36Z",
        "author": {
          "login": "AndyGerlicher"
        }
      },
      {
        "body": "Hmm, this problem went away when I commented out the lines in Microsoft.Common.tasks, which leads me to believe it's being loaded from there first. Lemme see if I can narrow this down.",
        "createdAt": "2017-11-07T03:06:33Z",
        "updatedAt": "2017-11-07T03:06:33Z",
        "author": {
          "login": "agocke"
        }
      },
      {
        "body": "OK I figured out what the problem was and it is not a bug in MSBuild, the problem is with our package.\r\n\r\nIn Microsoft.NETCore.Compilers we override the Csc task and the Vbc task, but we forget to override the CopyRefAssembly task. When running the build, the CopyRefAssembly task is used before the Csc task. When MSBuild tries to load the task, it falls back to Microsoft.Common.tasks (where it is defined) and loads the task from the Microsoft.Build.Tasks.CodeAnalysis assembly deployed to MSBuild. Later, when attempting to load the Csc task, MSBuild notes the override to point the Csc task to the Microsoft.Build.Tasks.CodeAnalysis assembly in the NuGet package. Since this assembly is already loaded, everything explodes. This explains why removing the definitions from the Microsoft.Common.tasks file fixed the problem, since eventually the assembly was eventually loaded properly by the NuGet package for Csc. \r\n\r\nThe proper fix is that we should override the CopyRefAssembly task in our NuGet package. Sorry for the trouble!",
        "createdAt": "2017-11-07T20:16:42Z",
        "updatedAt": "2017-11-07T20:16:42Z",
        "author": {
          "login": "agocke"
        }
      }
    ]
  }
}