{
  "number": 3963,
  "title": "Keep msbuild server around (/m) on .NET Core?",
  "body": "Hey,\r\n\r\nThis is a question about msbuild with multiple build node. Today when we are issuing a `dotnet build` on Linux, it takes more than 1 second to complete even if nothing has changed in a csproj.\r\nIf I remember, there is a server mode for msbuild and it doesn't seem to be used for .NET Core, is it correct?\r\n\r\nWhat is preventing msbuild to bring support for that? Is it AppDomains? Would a version using collectible AssemblyLoadContext work in this case? How much work would it be to bring such support?",
  "state": "CLOSED",
  "createdAt": "2018-11-28T06:21:34Z",
  "updatedAt": "2024-02-21T17:10:17Z",
  "closedAt": "2018-11-28T21:13:47Z",
  "author": {
    "login": "xoofx"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "This should already be used by default by `dotnet build`. You can disable it by adding `-m:1`.\r\nThe .NET Core SDK also provides a CLI for shutting down build servers using the `dotnet build-server shutdown`.\r\nTo investigate build time issues, make sure that you have the latest tools (`dotnet --version` should show 2.1.500 at the moment) and add `-clp:PerformanceSummary` to output some diagnostics that would help to understand where build time issues come from.",
        "createdAt": "2018-11-28T06:46:02Z",
        "updatedAt": "2018-11-28T06:46:02Z",
        "author": {
          "login": "dasMulli"
        }
      },
      {
        "body": "That being said, on my machine the incremental build times for a hello world app are also 1.3s or 1.05s (`--no-restore`).",
        "createdAt": "2018-11-28T06:47:40Z",
        "updatedAt": "2018-11-28T06:47:40Z",
        "author": {
          "login": "dasMulli"
        }
      },
      {
        "body": "While I do see a process for VBCSCompiler after running msbuild:\r\n\r\n```\r\n/usr/share/dotnet/dotnet /usr/share/dotnet/sdk/2.1.500/Roslyn/bincore/VBCSCompiler.dll -pipename:xoofx.F.6GZZy65+aUdVb1+waJR2XaOlQ\r\n```\r\n\r\nI don't see any for msbuild. Are you sure that a msbuild server is running with .NET Core? \r\n1 second is quite huge for an incremental build...",
        "createdAt": "2018-11-28T07:25:37Z",
        "updatedAt": "2018-11-28T07:25:37Z",
        "author": {
          "login": "xoofx"
        }
      },
      {
        "body": "Node reuse has been available (and on by default) on .NET Core since .NET Core 2.1 (#3106 turned it on, with some tweaks afterward).\r\n\r\n@xoofx How many projects are built in your scenario? MSBuild will only start worker nodes if it can use them, and the entry-point node isn't reused (we have some vague notions about possibly changing that but nothing concrete yet).",
        "createdAt": "2018-11-28T16:02:00Z",
        "updatedAt": "2018-11-28T16:02:00Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> @xoofx How many projects are built in your scenario? MSBuild will only start worker nodes if it can use them, and the entry-point node isn't reused (we have some vague notions about possibly changing that but nothing concrete yet).\r\n\r\nI was actually testing on only one project. On Windows I'm able to go down to around 900ms.  I have done a small exe that is calling msbuild in a loop - via Microsoft.Build, so by not launching the exe (it doesn't have to reload all assemblies...etc.) and I can go down to 200ms after that (parsed only once). So I suspect that a good part of running msbuild is actually spent in loading all the msbuild/nuget assemblies (even though msbuild shipped with dotnet CLI seems crossgen)\r\n\r\nI'm experimenting how much I can go down with a msbuild in-flight in terms of compilation time. So I assume that when compiling a single project, msbuild doesn't forward to a node reuse but is actually building from the running instance?",
        "createdAt": "2018-11-28T20:43:24Z",
        "updatedAt": "2018-11-28T20:45:16Z",
        "author": {
          "login": "xoofx"
        }
      },
      {
        "body": "> when compiling a single project, msbuild doesn't forward to a node reuse but is actually building from the running instance?\r\n\r\nCorrect.",
        "createdAt": "2018-11-28T20:51:20Z",
        "updatedAt": "2018-11-28T20:51:20Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "ok, so is there any way for msbuild to forward to a node reuse even if you have only one project, while I could keep the client msbuild in-process for example?",
        "createdAt": "2018-11-28T20:55:08Z",
        "updatedAt": "2018-11-28T20:55:08Z",
        "author": {
          "login": "xoofx"
        }
      },
      {
        "body": "Using the API, yes: you can set [`BuildParameters.DisableInProcNode = true`](https://docs.microsoft.com/en-us/dotnet/api/microsoft.build.execution.buildparameters.disableinprocnode?view=netframework-4.7.2#Microsoft_Build_Execution_BuildParameters_DisableInProcNode).",
        "createdAt": "2018-11-28T21:12:52Z",
        "updatedAt": "2018-11-28T21:12:52Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Cool, thanks, I will give this a try",
        "createdAt": "2018-11-28T21:13:47Z",
        "updatedAt": "2018-11-28T21:13:47Z",
        "author": {
          "login": "xoofx"
        }
      }
    ]
  }
}