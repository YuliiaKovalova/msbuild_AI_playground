{
  "number": 3730,
  "title": "UseSymboliclinksIfPossible for local resources leads to unresolved path in out dir",
  "body": "### Steps to reproduce\r\n\r\nI have activated all the available flags to use symbolic links (CreateSymbolicLinksForAdditionalFilesIfPossible, CreateSymbolicLinksForCopyFilesToOutputDirectoryIfPossible, CreateSymbolicLinksForCopyAdditionalFilesIfPossible, CreateSymbolicLinksForCopyLocalIfPossible, CreateSymbolicLinksForPublishFilesIfPossible) and I have discovered a general behavior that might be unexpected for all the local project resources.\r\n\r\n_CopyAppConfigFile\r\nCreating symbolic link to copy \"App.config\" to \"X:\\REPO\\out\\retail-amd64\\Project\\Project.exe.config\".\r\n\r\nDoing dir X:\\REPO\\out\\retail-amd64\\Project\\Project.exe.config, this will point to relative [App.config] instead of the full path of App.config.\r\n\r\nAnother example is:\r\n\r\nCopyFilesToOutputDirectory:\r\n         Creating symbolic link to copy \"obj\\amd64\\Project.dll\" to \"X:\\REPO\\out\\retail-amd64\\Project\\Project.dll\". \r\n\r\nDoing dir X:\\REPO\\out\\retail-amd64\\Project\\Project.dll, the target is [obj\\amd64\\Project.dll] which is relative path.\r\n\r\nSeems that the general behavior is converting a copy command from:\r\nCopy relativeLocalFile x:\\target\\path\\dstFile \r\nInto\r\nMklink x:\\target\\path\\dstFile relativeLocalFile\r\n\r\nMaybe we want for links to use ?\r\nMklink x:\\target\\path\\dstFile y:\\full\\path\\relativeLocalFile\r\n\r\nPotential fix:\r\nI have tested patching Microsoft.Common.CurrentVersion.targets in all the targets, <Copy> tasks to use the meta %(FullPath) and it's working ok, I don't see any side effect.\r\n\r\n    <Copy  SourceFiles=\"@(IntermediateAssembly->'%(FullPath)')\"...\r\n\r\n### Environment data\r\nVersion 15.7.177.53362\r\n\r\nThanks,\r\nDaniel",
  "state": "OPEN",
  "createdAt": "2018-09-11T19:00:04Z",
  "updatedAt": "2024-02-26T13:12:20Z",
  "closedAt": null,
  "author": {
    "login": "vaboca"
  },
  "labels": [
    "triaged",
    "symlink"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "manfred-brands"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "3.5 years later, this is still broken in dotnet 6.0.201. ",
        "createdAt": "2022-04-29T14:00:20Z",
        "updatedAt": "2022-04-29T14:00:20Z",
        "author": {
          "login": "manfred-brands"
        }
      },
      {
        "body": "Can you assign this to me, I will fix it.",
        "createdAt": "2022-12-16T07:05:38Z",
        "updatedAt": "2022-12-16T07:05:38Z",
        "author": {
          "login": "manfred-brands"
        }
      },
      {
        "body": "@manfred-brands Assigned to you.\r\n\r\n> I have tested patching Microsoft.Common.CurrentVersion.targets in all the targets, tasks to use the meta %(FullPath) and it's working ok, I don't see any side effect.\r\n\r\nA theoretical downside to this: it makes the result machine-specific, so if you copied the result to another machine in a different path (or changed a drive letter), the symlink would be invalid even if you had copies of both the link and its destination.\r\n\r\nComputing and using a relative path inside Copy would be more robust to that case, but less robust to the case \"I copied stuff out of the bin folder and tried to use it\" on a single machine, which isn't ideal.\r\n\r\n@manfred-brands did you have a plan for the details on this?",
        "createdAt": "2022-12-16T15:18:45Z",
        "updatedAt": "2022-12-16T15:18:45Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I prefer to fix it in the `NativeMethods.MakeSymbolicLink` instead. That will fix it for all other possible cases this is called.\r\nUsing `newFileName = Path.GetRelativePath(Path.GetDirectoryName(newFileName), existingFileName);`\r\n\r\nSymbolic links always have the risk of breaking and are machine/user specific by nature as the NuGet cache is user specific.\r\nThe main reason we need to use symbolic links is because the source and nuget cache are on different drives and copying adds significant time to the build.\r\nNow that #8211 is merged, I expect it to use hard-links for these relative paths as they are on the same drive.\r\n",
        "createdAt": "2022-12-18T02:55:05Z",
        "updatedAt": "2022-12-18T03:00:48Z",
        "author": {
          "login": "manfred-brands"
        }
      }
    ]
  }
}