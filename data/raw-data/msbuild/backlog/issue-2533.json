{
  "number": 2533,
  "title": "Invoke MSBuild from unit test",
  "body": "I'm attempting to fire off a build from code inside a unit test, to validate some custom tasks/targets that I'm developing. However, I cannot seem to get the project to **load**. The issue appears to be related to the new Sdk feature, as the error that is reported is:\r\n\r\n`'The SDK 'Microsoft.NET.Sdk' specified could not be found.'`\r\n\r\nThis occurs when calling `ProjectCollection.LoadProject(\"Project.csproj\");`\r\n\r\nThis is the same error message as reported in #2532. However, my example project builds properly from MSBuild on the command line; I just can't seem to load it in code. This is something that I've done in the past, but that was before the new Sdk feature existed.\r\n\r\nI have a feeling this is related to the Toolset configuration. I've tried providing custom Toolset configuration for my test project, by copying the configuration from MSBuild.exe.config into an app.config for my project, and using `ToolsetDefinitionLocations.ConfigurationFile`. This presented the same error. Inspecting the initial property values I see paths that don't look correct, such as:\r\n\r\n`\"MSBuildSDKsPath\"=\"C:\\\\PROGRAM FILES (X86)\\\\MICROSOFT VISUAL STUDIO\\\\2017\\\\PROFESSIONAL\\\\COMMON7\\\\IDE\\\\COMMONEXTENSIONS\\\\MICROSOFT\\\\TESTWINDOW\\\\Sdks\"`\r\n\r\nThis doesn't look correct, and I'm assuming this has something to do with running inside the Visual Studio test runner. I expect this path to be:\r\n\r\n`\"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Professional\\MSBuild\\Sdks\"`\r\n\r\nWhich is what I see in the \"Initial Properties\" section from /v:diag output of a successful build.\r\n\r\nI modified my app.config to contain all the correct paths that I saw in the successful Initial Properties section. The same error persisted.\r\n\r\nI've created a minimal repro in this repository:\r\nhttps://github.com/MarkPflug/MSBuildTestError\r\n\r\nJust run the single unit test from within the VS unit test window.\r\n\r\nIs there some special initialization that needs to be performed to kick off a build from code when using a \"new style\" project that uses the \"Sdk\" feature?\r\n",
  "state": "CLOSED",
  "createdAt": "2017-09-18T23:56:10Z",
  "updatedAt": "2024-02-21T17:16:38Z",
  "closedAt": "2018-06-15T16:48:38Z",
  "author": {
    "login": "MarkPflug"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "I've found that if I run my tests with the xunit console runner that the test passes (this SDK exception is not thrown). So, it would seem that this is some issue with running the test in the visual studio test runner. I'm using xunit.runnner.visualstudio 2.2.0.\r\n\r\nLooking at the Microsoft.Build source, I'm wondering if this is an issue in the BuildEnvironmentHelper. There are lists of process names (Xunit, NUnit, VSTest, etc) that a appear to trigger property initialization. Ultimately, one of these properties, MSBuildToolsDirectory32, is used to discover the SDKResolvers (SdkResolverLoader.cs Line 24).\r\n\r\nI'm not totally sure this is the right track yet.\r\n\r\n",
        "createdAt": "2017-09-19T17:39:54Z",
        "updatedAt": "2017-09-19T17:39:54Z",
        "author": {
          "login": "MarkPflug"
        }
      },
      {
        "body": "In my unit test I inspected the BuiltEnvironmentHelper.Instance property (via reflection), and indeed, the MSBuildToolsDirectory32 is pointing at some rando directory:\r\n`C:\\PROGRAM FILES (X86)\\MICROSOFT VISUAL STUDIO\\2017\\PROFESSIONAL\\COMMON7\\IDE\\COMMONEXTENSIONS\\MICROSOFT\\TESTWINDOW\r\n`\r\nThis  directory is clearly associated with the VS test window, and doesn't contain an SdkResolvers folder. Okay, so just to validate that I'm on the right path I copied the SdkResolvers folder from `MSBuild\\15.0\\Bin\\` into that folder and the Sdk exception was replaced with a new exception.\r\n\r\nSo, it appears that I need to figure out how to cause the BuildEnvironmentHelper to initialize properly. I thought that providing the `msbuildToolsets` config section hard-coded with the correct paths would allow this to work.\r\n",
        "createdAt": "2017-09-19T17:56:54Z",
        "updatedAt": "2017-09-19T17:56:54Z",
        "author": {
          "login": "MarkPflug"
        }
      },
      {
        "body": "What a nightmare. I finally got this working by prodding the Microsoft.Build.Shared.BuildEnvironmentHelper.Instance singleton to contain a BuildEnvironment with the correct values. Shield your eyes, this is going to hurt:\r\n\r\n```\r\nvoid InitializeMSBuildEnvironment()\r\n{\r\n    var msbAsm = typeof(ProjectCollection).Assembly;\r\n    var behType = msbAsm.GetTypes().FirstOrDefault(t => t.FullName == \"Microsoft.Build.Shared.BuildEnvironmentHelper\");\r\n    var behsType = msbAsm.GetTypes().FirstOrDefault(t => t.Name == \"BuildEnvironmentHelperSingleton\");\r\n    var beType = msbAsm.GetTypes().FirstOrDefault(t => t.FullName == \"Microsoft.Build.Shared.BuildEnvironment\");\r\n    var singletonField = behsType.GetFields().Single(f => f.Name == \"s_instance\");\r\n    var beCtor = beType.GetConstructors().Single();\r\n\r\n    var msbPath = @\"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Professional\\MSBuild\\15.0\\Bin\";\r\n    //var msbPath = Environment.GetEnvironmentVariable(\"MSBUILD_EXE_PATH\");\r\n    var be = beCtor.Invoke(new object[] { 1, msbPath, false, false, null });\r\n                        \r\n    var instProp = behType.GetProperties().FirstOrDefault(p => p.Name == \"Instance\");\r\n    singletonField.SetValue(null, be);\r\n}\r\n```\r\n\r\nAnd also providing in the app.config the hard paths for all the properties:\r\n\r\n  ```\r\n<msbuildToolsets default=\"15.0\">\r\n    <toolset toolsVersion=\"15.0\">\r\n      <property name=\"MSBuildToolsPath\" value=\"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Professional\\MSBuild\\15.0\\bin\" />\r\n      <property name=\"MSBuildToolsPath32\" value=\"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Professional\\MSBuild\\15.0\\bin\" />\r\n      <property name=\"MSBuildToolsPath64\" value=\"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Professional\\MSBuild\\15.0\\Bin\\amd64\" />\r\n      <property name=\"MSBuildSDKsPath\" value=\"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Professional\\MSBuild\\Sdks\" />\r\n      <property name=\"FrameworkSDKRoot\" value=\"$(Registry:HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Microsoft SDKs\\NETFXSDK\\4.6.1@InstallationFolder)\" />\r\n      <property name=\"MSBuildRuntimeVersion\" value=\"4.0.30319\" />\r\n      <property name=\"MSBuildFrameworkToolsPath\" value=\"$(SystemRoot)\\Microsoft.NET\\Framework\\v$(MSBuildRuntimeVersion)\\\" />\r\n      <property name=\"MSBuildFrameworkToolsPath32\" value=\"$(SystemRoot)\\Microsoft.NET\\Framework\\v$(MSBuildRuntimeVersion)\\\" />\r\n      <property name=\"MSBuildFrameworkToolsPath64\" value=\"$(SystemRoot)\\Microsoft.NET\\Framework64\\v$(MSBuildRuntimeVersion)\\\" />\r\n      <property name=\"MSBuildFrameworkToolsRoot\" value=\"$(SystemRoot)\\Microsoft.NET\\Framework\\\" />\r\n      <property name=\"SDK35ToolsPath\" value=\"$([MSBuild]::GetRegistryValueFromView('HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Microsoft SDKs\\Windows\\v8.0A\\WinSDK-NetFx35Tools-x86', 'InstallationFolder', null, RegistryView.Registry32))\" />\r\n      <property name=\"SDK40ToolsPath\" value=\"$([MSBuild]::GetRegistryValueFromView('HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Microsoft SDKs\\NETFXSDK\\4.6.1\\WinSDK-NetFx40Tools-x86', 'InstallationFolder', null, RegistryView.Registry32))\" />\r\n      <property name=\"WindowsSDK80Path\" value=\"$(Registry:HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Microsoft SDKs\\Windows\\v8.1@InstallationFolder)\" />\r\n      <property name=\"VsInstallRoot\" value=\"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Professional\" />\r\n      <property name=\"MSBuildToolsRoot\" value=\"$(VsInstallRoot)\\MSBuild\\15.0\" />\r\n      <property name=\"MSBuildExtensionsPath\" value=\"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Professional\\MSBuild\" />\r\n      <property name=\"MSBuildExtensionsPath32\" value=\"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Professional\\MSBuild\" />\r\n      \r\n      <property name=\"RoslynTargetsPath\" value=\"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Professional\\MSBuild\\15.0\\bin\\Roslyn\" />\r\n    </toolset>\r\n  </msbuildToolsets>\r\n```\r\n\r\nThere **must** be a more reasonable way to make this work. If there isn't, perhaps I can hope that this will become reasonable in a future release.\r\n\r\nI don't envy the task you guys have of trying to improve MSBuild while also preserving backwards compatibility. For what it's worth I think you've done a pretty respectable job. I also don't expect that my horrible hack is going to work in the future, so hopefully someone will be able to recommend a better solution.\r\n\r\nIf you made it this far, thanks for reading!",
        "createdAt": "2017-09-19T21:32:09Z",
        "updatedAt": "2017-09-19T21:32:09Z",
        "author": {
          "login": "MarkPflug"
        }
      },
      {
        "body": "Updating nuget packages from 15.3.409 to 15.5.180 fixed this issue. I no longer need the hackery described above, but I did need to add a binding redirect to the app.config to redirect Microsoft.Build.Framework to 15.1.0.0.",
        "createdAt": "2018-02-06T18:10:00Z",
        "updatedAt": "2018-02-06T18:10:00Z",
        "author": {
          "login": "MarkPflug"
        }
      },
      {
        "body": "Reopening this issue. With no change to my project, my tests now fail again with a different error message. I'm still targeting MSBuild nuget packages at version 15.5.180. I have run VS updates in the months since I had this issue, so I wonder if there is something in VS test runner that has changed that has introduced this error. That said, this exception is throw from an MSBuild assembly:\r\n```\r\n   at Microsoft.Build.Shared.ErrorUtilities.ThrowInternalError(String message, Object[] args)\r\n   at Microsoft.Build.Shared.ErrorUtilities.VerifyThrow(Boolean condition, String unformattedMessage, Object arg0)\r\n   at Microsoft.Build.Shared.AssemblyResources.GetStringFromEngineResources(String name)\r\n   at Microsoft.Build.Shared.AssemblyResources.GetString(String name)\r\n   at Microsoft.Build.BackEnd.Logging.LoggingService.LogWarningFromText(BuildEventContext buildEventContext, String subcategoryResourceName, String warningCode, String helpKeyword, BuildEventFileInfo file, String message)\r\n   at Microsoft.Build.BackEnd.Logging.LoggingService.LogWarning(BuildEventContext buildEventContext, String subcategoryResourceName, BuildEventFileInfo file, String messageResourceName, Object[] messageArgs)\r\n   at Microsoft.Build.BackEnd.SdkResolverLoader.LoadResolvers(LoggingContext loggingContext, ElementLocation location)\r\n   at Microsoft.Build.BackEnd.SdkResolution.Initialize(LoggingContext loggingContext, ElementLocation location)\r\n   at Microsoft.Build.BackEnd.SdkResolution.GetSdkPath(SdkReference sdk, LoggingContext loggingContext, ElementLocation sdkReferenceLocation, String solutionPath, String projectPath)\r\n   at Microsoft.Build.Evaluation.Evaluator`4.ExpandAndLoadImportsFromUnescapedImportExpressionConditioned(String directoryOfImportingFile, ProjectImportElement importElement, List`1& projects, Boolean throwOnFileNotExistsError)\r\n   at Microsoft.Build.Evaluation.Evaluator`4.ExpandAndLoadImports(String directoryOfImportingFile, ProjectImportElement importElement)\r\n   at Microsoft.Build.Evaluation.Evaluator`4.EvaluateImportElement(String directoryOfImportingFile, ProjectImportElement importElement)\r\n   at Microsoft.Build.Evaluation.Evaluator`4.PerformDepthFirstPass(ProjectRootElement currentProjectOrImport)\r\n   at Microsoft.Build.Evaluation.Evaluator`4.Evaluate(ILoggingService loggingService, BuildEventContext buildEventContext)\r\n   at Microsoft.Build.Evaluation.Evaluator`4.Evaluate(IEvaluatorData`4 data, ProjectRootElement root, ProjectLoadSettings loadSettings, Int32 maxNodeCount, PropertyDictionary`1 environmentProperties, ILoggingService loggingService, IItemFactory`2 itemFactory, IToolsetProvider toolsetProvider, ProjectRootElementCache projectRootElementCache, BuildEventContext buildEventContext, ProjectInstance projectInstanceIfAnyForDebuggerOnly, SdkResolution sdkResolution)\r\n   at Microsoft.Build.Evaluation.Project.Reevaluate(ILoggingService loggingServiceForEvaluation, ProjectLoadSettings loadSettings)\r\n   at Microsoft.Build.Evaluation.Project.ReevaluateIfNecessary(ILoggingService loggingServiceForEvaluation, ProjectLoadSettings loadSettings)\r\n   at Microsoft.Build.Evaluation.Project.Initialize(IDictionary`2 globalProperties, String toolsVersion, String subToolsetVersion, ProjectLoadSettings loadSettings)\r\n   at Microsoft.Build.Evaluation.Project..ctor(String projectFile, IDictionary`2 globalProperties, String toolsVersion, String subToolsetVersion, ProjectCollection projectCollection, ProjectLoadSettings loadSettings)\r\n   at Microsoft.Build.Evaluation.ProjectCollection.LoadProject(String fileName, IDictionary`2 globalProperties, String toolsVersion)\r\n   at Microsoft.Build.Evaluation.ProjectCollection.LoadProject(String fileName)\r\n   at Elemental.JsonResource.JsonResourceGeneratorTests.BuildProject(String projFile)\r\n   at Elemental.JsonResource.JsonResourceGeneratorTests.BuildTest()\r\nResult Message:\tMicrosoft.Build.Shared.InternalErrorException : MSB0001: Internal MSBuild Error: Missing resource ''\r\n```\r\n\r\nI have verified the Microsoft.Build.*.dll assembly versions are loaded at 15.5.180.51428 in the debug modules window. However, the load location is at `C:\\Users\\markp\\AppData\\Local\\Temp\\d73c0955-63f6-400b-ac6e-ac2b6562585f\\d73c0955-63f6-400b-ac6e-ac2b6562585f\\assembly\\dl3\\997b4298\\0038ddd8_286ed301\\` I don't understand what that location is, how they got there, or how the runtime is discovering them. Is this a nuget thing? Or a VS test thing?\r\n\r\nThe process that the tests run in is testhost.x86.exe. Does MSBuild need to be made aware of this name? I noticed that xunit, nunit, and other test runner executable names exist in MSBuild source.\r\n\r\nRepro project: https://github.com/MarkPflug/Elemental.JsonResource\r\nRun the unit tests in VS test runner. I'm seeing this in VS Pro 15.7.3.",
        "createdAt": "2018-06-15T16:02:43Z",
        "updatedAt": "2018-06-15T16:04:49Z",
        "author": {
          "login": "MarkPflug"
        }
      },
      {
        "body": "Possible duplicate of https://github.com/Microsoft/msbuild/issues/2997",
        "createdAt": "2018-06-15T16:32:35Z",
        "updatedAt": "2018-06-15T16:32:35Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "Indeed I think this is a dupe. Updating to the latest packages I was able to resolve it. Frustrating that my code that worked a few months ago just starts failing with no changes. Perhaps it was a VS update, or a .NET core 2,.1 update that triggered something environmental to change.",
        "createdAt": "2018-06-15T16:48:37Z",
        "updatedAt": "2018-06-15T16:48:37Z",
        "author": {
          "login": "MarkPflug"
        }
      }
    ]
  }
}