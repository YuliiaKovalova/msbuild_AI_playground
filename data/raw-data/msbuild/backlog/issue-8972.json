{
  "number": 8972,
  "title": "Audit/Fix code issues with localized characters in paths",
  "body": "### Motivation\r\n\r\nPrevent unexpected crashes or/and build issues with hard to investigate rootcauses in localized environments\r\n\r\n### Context\r\n\r\nhttps://github.com/dotnet/msbuild/pull/8931 fixed one instance of issue with build issues caused by usage of localized characters in OS paths.\r\nRootcause was in passing a string path argument to `XmlReader.Create`, that expect a path URI - so either the string argument would need to be edited to form a proper URI (e.g. prepending `file://` prefix), or a stream would need to be passed to `XmlReader.Create`. The second approach was used (as it doesn't need to differentiate what the proper [uri schema](https://en.wikipedia.org/wiki/List_of_URI_schemes) should be)\r\nHowever there are other possible buggy usages in the code: https://github.com/search?q=repo%3Adotnet%2Fmsbuild%20XmlReader.Create&type=code\r\nPlus there might be other similar APIs accepting string argument, converting it internaly into uri - specifically in `System.Xml` namespace (e.g. [`XPathDocument` ctor](https://learn.microsoft.com/en-us/dotnet/api/system.xml.xpath.xpathdocument.-ctor?view=net-7.0#system-xml-xpath-xpathdocument-ctor(system-string)) - we are not using this one specifically - but just for ilustration)\r\n\r\n### Suggested Approach\r\n\r\nTraverse [`XmlReader.Create` usages](https://github.com/search?q=repo%3Adotnet%2Fmsbuild%20XmlReader.Create&type=code) and fix the ones using `string` argument and replace with `Stream` arg.\r\nTraverse other usages of `System.Xml` namespace (there will be lot - try to somehow filter/pick constructors/factories accepting string arguments representing paths) and decide whether fixing is needed as well",
  "state": "CLOSED",
  "createdAt": "2023-06-28T13:21:31Z",
  "updatedAt": "2024-02-21T14:04:27Z",
  "closedAt": "2023-07-17T05:50:37Z",
  "author": {
    "login": "JanKrivanek"
  },
  "labels": [
    "Priority:2",
    "triaged",
    "internal-team-onboarding"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "YuliiaKovalova"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "@YuliiaKovalova had a great offline question as to why moving from the string path accepting xml APIs to Stream accepting xml APIs would solve the issue.\r\n\r\n**The short answer is:** It helps to avoid the need to properly compose Uri (which is another way of fixing - but more complicated).\r\n\r\n\r\n**More context:**\r\nThe problem was in not sticking to the proper format of input expected by the string accepting apis (e.g. https://learn.microsoft.com/en-us/dotnet/api/system.xml.xmlreader.create?view=net-7.0#system-xml-xmlreader-create(system-string-system-xml-xmlreadersettings-system-xml-xmlparsercontext)) - where the string argument is called `inputUri`, but we are not passing valid Uri. This causes not very grace failure down the road in some corner cases. By using `Stream` we completely circumvent the problem of composing proper Uri.\r\nThe underlying OS specific I/O implementations of file access (`SafeFileHandle.CreateFile` / `SafeFileHandle.Open`) are able to handle unicode characters (including surogate ones) just fine. However if we call the xml API accepting string - it converts it to `Uri` and then back to string - causing characters encoding during the process, that yields the resulting path different from the originaly passed.\r\n\r\nThe analogy of what is happening is in the following code\r\n```\r\n\tstring path = Path.GetFullPath(\"\\uE025\\uE026\");\r\n\tConsole.WriteLine(path);\r\n\t// This will cause unwanted modification of the path - since the uri was not properly specified. This happens within the XmlReader.Create call\r\n\tConsole.WriteLine(new Uri(Path.GetFullPath(\"\\uE025\\uE026\")).LocalPath);\r\n\t// We'd need to properly craft the Uri to preserve the proper path. However we need to be sure about proper uri scheme https://en.wikipedia.org/wiki/List_of_URI_schemes\r\n\tConsole.WriteLine(new Uri(\"file://\" + Path.GetFullPath(\"\\uE025\\uE026\")).LocalPath);\r\n```\r\n\r\noutput:\r\n\r\n```\r\n<local-folder>\\\ue025\ue026\r\n<local-folder>\\%EE%80%A5%EE%80%A6\r\n<local-folder>\\\ue025\ue026\r\n```",
        "createdAt": "2023-07-10T15:19:07Z",
        "updatedAt": "2023-07-10T15:19:07Z",
        "author": {
          "login": "JanKrivanek"
        }
      }
    ]
  }
}