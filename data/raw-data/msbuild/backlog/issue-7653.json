{
  "number": 7653,
  "title": "MSBuild: dependencies and parallel builds",
  "body": "Moved from https://developercommunity.visualstudio.com/t/MSBuild:-dependencies-and-parallel-build/10040724\r\n\r\nHi,\r\n\r\n\r\neven though it\u2019s more a nuisance, I consider it an error since it\u2019s a missed optimization.\r\n\r\n\r\nHere\u2019s the problem: when building solutions with many projects from VS on a machine with many processors, then MSBuild mostly parallelizes poorly, since it linearizes the project-dependency-graph.\r\n\r\n\r\nI observe then the following behavior:\r\n\r\nBefore the build starts, MSBuild  linearizes the project-dependency-graph and assigns each project to a processor. And then each processor builds its projects in a strict linear order.\r\n\r\n\r\nThat usually results in parallel builds, where processors stall to build on, because they are waiting for a dependency to finish its build, even though there are unbuilt projects where all dependencies are already built!\r\n\r\n\r\nA much better way, would be to NOT linearize the project-dependency-graph, but to check dynamically (i.e. during the build) for \u201cready-to-build\u201d projects and then dispatch them to the next available processor.\r\n\r\n\r\nIf there question to my request, please let me know.\r\n\r\n\r\nThanks",
  "state": "CLOSED",
  "createdAt": "2022-05-26T16:23:11Z",
  "updatedAt": "2024-02-21T17:00:25Z",
  "closedAt": "2022-12-06T23:29:13Z",
  "author": {
    "login": "benvillalobos"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Do you have a specific example in mind?  Is the \"[graph](https://github.com/dotnet/msbuild/blob/main/documentation/specs/static-graph.md)\" feature what you are describing? \r\n\r\nI think the fundamental issue is that once a project is loaded onto a node, it sticks to that node.  Overall this isn't an major issue because the tasks on nodes can \"yield\" or context switch to other projects.  Long running tasks don't block other projects from gaining access to the node.  For example, in VCXProj, once cl.exe spawns, the task yields, allowing other projects to work on something else.  Sadly \"yield\" isn't on by default as it would be a breaking change.  I do wish Exec task has yield on by default.",
        "createdAt": "2022-05-26T19:53:07Z",
        "updatedAt": "2022-05-26T19:53:07Z",
        "author": {
          "login": "yuehuang010"
        }
      },
      {
        "body": "I'm going to close this; the OP is not an accurate description of the current scheduler without `-graph` and `-graph` does change the scheduling.",
        "createdAt": "2022-12-06T23:29:13Z",
        "updatedAt": "2022-12-06T23:29:13Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}