{
  "number": 5682,
  "title": "TargetStartedEventArgs could have fields for inputs/outputs",
  "body": "From an email I got:\r\n\r\n> There\u2019s of course a bunch of badly authored targets that always build, causing a chain of downstream projects to rebuild. But to go after the ones causing the most damage to get the most bang for the buck, I want to try and extract the \u201cinvalidation chain\u201d and attack from the root forward. Sometimes the links are clear in the build log, eg. \u201cReferenced.dll is newer than Referer.dll\u201d. Other times less so, eg. \u201c.CoreCompileInputs.cache is newer than MyProgram.exe\u201d and CoreCompileInputs includes a bunch of autogenerated .cs files (which one changed?). \r\n> \r\n> Are there any tools/tricks to perform such an analysis? I think it should be possible from mining the binary build log with code, but before I set out trying that I wanted to check if there are better ways or whether you have any tips on how to go about it.\r\n\r\nSuch analysis would be much easier if you didn't have to parse out the inputs/outputs to build the graph.\r\n\r\nOn the other hand, we don't want to bloat the events with data that isn't likely to be used. We'll have to think about tradeoffs.",
  "state": "OPEN",
  "createdAt": "2020-08-27T14:56:25Z",
  "updatedAt": "2024-02-21T16:29:00Z",
  "closedAt": null,
  "author": {
    "login": "rainersigwald"
  },
  "labels": [
    "Area: Debuggability",
    "needs-design",
    "Area: Logging",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Backlog"
  },
  "comments": {
    "nodes": []
  }
}