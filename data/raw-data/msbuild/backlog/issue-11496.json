{
  "number": 11496,
  "title": "Allow SolutionFile to be parsed from Stream",
  "body": "### Summary\n\nWe have an app that parses and processes a lot of solution files. In order to parse a solution file using this library, it needs to be persisted to the file system. This means we have to write the content to a file before we can parse it into the SolutionFile structure. \n\n\nUsing reflection we can get it working but this is definitely undesirable:\n```csharp \n       private SolutionFile ParseSolutionFromStream(Stream fileStream)\n        {\n            using var streamReader = new StreamReader(fileStream, Encoding.GetEncoding(0));\n\n            var solutionFile = CreateInstance<SolutionFile>();\n            SetInternalProperty(solutionFile, \"SolutionReader\", streamReader);\n            CallInternalMethod(solutionFile, \"ParseSolution\");\n\n            return solutionFile;\n\n            static T CreateInstance<T>() where T : class\n            {\n                Type type = typeof(T);\n\n                var constructorInfo = type.GetConstructor(\n                    BindingFlags.Instance | BindingFlags.NonPublic,\n                    null,\n                    Type.EmptyTypes,\n                    null);\n\n                if (constructorInfo != null)\n                {\n                    return (T)constructorInfo.Invoke(null);\n                }\n                else\n                {\n                    throw new InvalidOperationException(\"Internal constructor not found.\");\n                }\n            }\n\n            static void SetInternalProperty<T>(T instance, string propertyName, object value)\n            {\n                Type type = typeof(T);\n\n                var propertyInfo = type.GetProperty(propertyName, BindingFlags.Instance | BindingFlags.NonPublic);\n\n                if (propertyInfo != null && propertyInfo.CanWrite)\n                {\n                    propertyInfo.SetValue(instance, value);\n                }\n                else\n                {\n                    throw new InvalidOperationException(\"Internal property not found or not writable.\");\n                }\n            }\n\n            static void CallInternalMethod<T>(T instance, string methodName)\n            {\n                Type type = typeof(T);\n\n                var methodInfo = type.GetMethod(methodName, BindingFlags.Instance | BindingFlags.NonPublic);\n\n                if (methodInfo != null)\n                {\n                    methodInfo.Invoke(instance, null);\n                }\n                else\n                {\n                    throw new InvalidOperationException(\"Internal method not found.\");\n                }\n            }\n        }\n``` \n\n\n### Background and Motivation\n\nWe are downloading solution files from repositories as zip files over HTTP. This means we primarily work with streams. Having to persist each stream to a file in order to parse them is inefficient. \n\n### Proposed Feature\n\nAdd a method to parse the solution from a stream. It should probably also receive the name of the solution file in order to determine which parser to use internally.\n\n### Alternative Designs\n\n_No response_",
  "state": "CLOSED",
  "createdAt": "2025-02-25T17:21:34Z",
  "updatedAt": "2025-02-25T17:28:55Z",
  "closedAt": "2025-02-25T17:28:54Z",
  "author": {
    "login": "Ericvf"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "comments": {
    "nodes": [
      {
        "body": "Consider using the [microsoft/vs-solutionpersistence library](https://github.com/microsoft/vs-solutionpersistence/blob/55ff324202d253b51635cc39d0cb7f673f634e25/src/Microsoft.VisualStudio.SolutionPersistence/Serializer/ISolutionSerializer.cs#L78-L84) for this - MSBuild's solution parser is homegrown and we plan on deprecating it soon.",
        "createdAt": "2025-02-25T17:28:54Z",
        "author": {
          "login": "baronfel"
        }
      }
    ]
  }
}