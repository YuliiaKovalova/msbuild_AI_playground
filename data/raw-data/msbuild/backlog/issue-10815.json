{
  "number": 10815,
  "title": "Review/Fix MSBuild ngen registrations",
  "body": "### Context\n\nReported by @davkean:\n\n> Its super unclear why all MSBuild binaries in general are being registered for all architectures too (we only should register 32-bit for 32-bit and 64-bit for 64-bit), those 32-bit vsn.exe are definitely wrong as we don\u2019t ship a 32-bit version of VS, so we\u2019re wasting end-user machine resources.\n\n### Goal\n\nOnly required registrations are issued",
  "state": "OPEN",
  "createdAt": "2024-10-15T06:01:28Z",
  "updatedAt": "2025-06-02T08:30:28Z",
  "closedAt": null,
  "author": {
    "login": "JanKrivanek"
  },
  "milestone": null,
  "assignees": {
    "nodes": [
      {
        "login": "rainersigwald"
      }
    ]
  },
  "labels": [
    "Area: Performance",
    "Priority:2",
    "triaged"
  ],
  "comments": {
    "nodes": [
      {
        "body": "Sub-issue \nhttps://github.com/dotnet/msbuild/issues/10847",
        "createdAt": "2024-10-18T14:05:22Z",
        "author": {
          "login": "YuliiaKovalova"
        }
      },
      {
        "body": "Looking at this as part of #11145, and I think we need Setup features or a pretty big package refactor to do it right.\n\nSpecifically, we want our core assemblies and their transitive closure to be ngened in several contexts:\n\n| Context | controlling config | arch | file |\n|--------|--------|--------|--------|\n| VS in-proc | `vsn.exe` | amd64 or arm64 | `bin\\Microsoft.Build*.dll`<br/>closure |\n| Mainline CLI | `bin\\amd64\\MSBuild.exe` | amd64 | `bin\\amd64\\MSBuild.exe`<br/>`bin\\Microsoft.Build*.dll`<br/>closure |\n| Old CLI and 32-bit taskhost | `bin\\MSBuild.exe` | x86 | `bin\\MSBuild.exe`<br/>`bin\\Microsoft.Build*.dll`<br/>closure |\n| arm64 CLI | `bin\\arm64\\MSBuild.exe` | arm64 | `bin\\arm64\\MSBuild.exe`<br/>`bin\\Microsoft.Build*.dll`<br/>closure |\n\nBut I don't see a way to express in the `.swr` or the VSIX manifest things like \"ngen `bin\\Microsoft.Build.dll` for `amd64` with `bin\\amd64\\MSBuild.exe.config` and `vsn.config` and also for `x86` with `bin\\MSBuild.exe.config`\".\n\nToday, we run:\n\n```text\n[framework]\ninstall \"C:\\VisualStudio\\MSBuild\\Current\\Bin\\Microsoft.Build.dll\" /NoDependencies /ExeConfig:\"C:\\VisualStudio\\MSBuild\\Current\\Bin\\MSBuild.exe\" /queue:1\ninstall \"C:\\VisualStudio\\MSBuild\\Current\\Bin\\Microsoft.Build.dll\" /NoDependencies /ExeConfig:\"C:\\VisualStudio\\Common7\\IDE\\vsn.exe\" /queue:1\n\n[framework64]\ninstall \"C:\\VisualStudio\\MSBuild\\Current\\Bin\\Microsoft.Build.dll\" /NoDependencies /ExeConfig:\"C:\\VisualStudio\\Common7\\IDE\\vsn.exe\" /queue:1\ninstall \"C:\\VisualStudio\\MSBuild\\Current\\Bin\\Microsoft.Build.dll\" /NoDependencies /ExeConfig:\"C:\\VisualStudio\\MSBuild\\Current\\Bin\\MSBuild.exe\" /queue:1\n```\n\n* the 32-bit `vsn.exe` one is unnecessary\n* 32-bit msbuild.exe is important for CI\n* 64-bit `vsn.exe` is critical\n* 64-bit `msbuild.exe` is critical (but is it getting the right context here? At runtime it'll get `bin\\amd64\\MSBuild.exe.config` but it's running with just `bin\\MSBuild.exe.config`)",
        "createdAt": "2024-12-20T16:27:14Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "reverted https://github.com/dotnet/msbuild/pull/11182 which contributed to this:\n\nRegresses VM_AdjustedImagesInMemory_Total_devenv e.g. here:\nhttps://devdiv.visualstudio.com/DevDiv/_git/VS/pullrequest/606301",
        "createdAt": "2025-01-30T15:50:37Z",
        "author": {
          "login": "JanProvaznik"
        }
      }
    ]
  }
}