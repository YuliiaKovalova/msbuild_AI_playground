{
  "number": 5240,
  "title": "Cannot call curl from MSBuild",
  "body": "### Steps to reproduce\r\n\r\nWindows 10 now comes with curl included (usually under _C:\\Windows\\System32_) however that also means that the utility cannot be called from inside x64 MSBuild:\r\n\r\nProject file (download.proj)\r\n```xml\r\n<Project>\r\n  <Target Name=\"Download\">\r\n    <Exec Command=\"curl -L $(from) -o $(to)\" />\r\n  </Target>\r\n</Project>\r\n```\r\n\r\n\r\nCommand line\r\n```\r\nmsbuild download.proj /p:from=\"some url\" /p:to=\"some path\"\r\n```\r\n### Expected behavior\r\nThe curl is called, file downloaded.\r\n\r\n### Actual behavior\r\nError 9009, curl could not be found.\r\n\r\n### Environment data\r\n`msbuild /version` output:\r\nMicrosoft (R) Build Engine version 16.5.0+d4cbfca49 for .NET Framework\r\n\r\nOS info:\r\nWindows 10 Enterprise (build 1803, 17134.1304)\r\n\r\n\r\n\r\nNo matter what I try `curl` is never found. Absolute path, setting PATH inside the command to contain it etc. Nothing works. And on the command line conversely everything is fine. I even have system32 in system PATH. So I eventually found out the reason, it seems to be this:\r\n\r\n>When trying to reproduce your problem I tried a couple of things (running curl, running 64bit curl, running when it's in the PATH, running with specifying full path, running an executable from the system32 diretory), but the one thing I didn't try out of principle is copying curl to the system32 directory: doing that is almost never the correct solution for a problem, for a variety of reasons which can be found on the internet. And yes, today we found yet another reason why it's bad :]\r\nMsBuild's Exec task works by creating a temporary file including the Command to run, and then launching cmd.exe /q /c <path/to/tempfile>. The task does not just start cmd.exe though, but specifies the the full path by prepending it with Environment.GetFolderPath(Environment.SpecialFolder.System). Which returns C:\\windows\\SysWOW64 or similar when called from a 32bit process (i.e. msbuild) on a 64bit system.\r\nAs a result msbuild starts the 32bit cmd from C:\\windows\\SysWOW64\\cmd.exe. Being a 32bit process, the file system redirection gets invoked: if you tell a 32bit process to look in c:\\windows\\system32 it won't do that, but look in c:\\windows\\SysWOW64. And curl.exe is not there since you put it in system32. And so you get a code 9009.\r\nLong story short: be a good Windows citizen and don't put curl.exe in sSystem32 or SysWOW64, and then either specify the full path to it when using Exec or add the directory where it is located to your PATH.\r\n\r\nExcept I have not put curl.exe to system32, Microsoft did. I can of course put it into some other location but what gives? Who thought this behaviour to be reasonable? Silent redirection like this is crazy. And especially when it applies to every access of system32 be it relative, absolute, from PATH etc. There is literally no way I can call `curl` from inside 64-bit MSBuild.\r\n\r\nI am not even sure this can be fixed in MSBuild itself as it sounds more like a Windows issue. But perhaps there is a workaround?\r\n\r\nThanks.\r\n",
  "state": "CLOSED",
  "createdAt": "2020-04-06T10:00:48Z",
  "updatedAt": "2024-02-21T17:04:20Z",
  "closedAt": "2020-04-15T16:17:17Z",
  "author": {
    "login": "michaelvlach"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Discussion"
  },
  "comments": {
    "nodes": [
      {
        "body": "Addendum: The issue seems to be related to the OS version. On Windows 10 (1909) it works fine.",
        "createdAt": "2020-04-06T10:37:18Z",
        "updatedAt": "2020-04-06T10:37:18Z",
        "author": {
          "login": "michaelvlach"
        }
      },
      {
        "body": "@Resurr3ction what's the output of `where.exe curl` on the failing machine? According to https://techcommunity.microsoft.com/t5/containers/tar-and-curl-come-to-windows/ba-p/382409, it should be available in 1803 (17063+).",
        "createdAt": "2020-04-06T16:59:48Z",
        "updatedAt": "2020-04-06T16:59:48Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "On the command line it is:\r\n\r\n_c:\\Windows\\System32\\curl.exe_\r\n\r\nFrom inside MSBuild using\r\n**CurlDownload.proj**\r\n``` \r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<Project>\r\n    <Target Name=\"Build\">\r\n        <Exec Command=\"where curl.exe\" />\r\n    </Target>\r\n</Project>\r\n```\r\nThe output is:\r\n\r\n_INFO: Could not find files for the given pattern(s).\r\n error MSB3073: The command \"where curl.exe\" exited with code 1._\r\n\r\nFull console output:\r\n```\r\nc:\\dev\\projects\\CFR\\rpos\\Build>where curl\r\nC:\\Windows\\System32\\curl.exe\r\n\r\nc:\\dev\\projects\\CFR\\rpos\\Build>msbuild CurlDownload.proj\r\nMicrosoft (R) Build Engine version 16.5.0+d4cbfca49 for .NET Framework\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\nBuild started 07-Apr-20 08:47:05.\r\nProject \"c:\\dev\\projects\\CFR\\rpos\\Build\\CurlDownload.proj\" on node 1 (default targets).\r\nBuild:\r\n  where curl.exe\r\n  INFO: Could not find files for the given pattern(s).\r\nc:\\dev\\projects\\CFR\\rpos\\Build\\CurlDownload.proj(4,9): error MSB3073: The command \"where curl.exe\" exited with code 1.\r\nDone Building Project \"c:\\dev\\projects\\CFR\\rpos\\Build\\CurlDownload.proj\" (default targets) -- FAILED.\r\n\r\n\r\nBuild FAILED.\r\n\r\n\"c:\\dev\\projects\\CFR\\rpos\\Build\\CurlDownload.proj\" (default target) (1) ->\r\n(Build target) ->\r\n  c:\\dev\\projects\\CFR\\rpos\\Build\\CurlDownload.proj(4,9): error MSB3073: The command \"where curl.exe\" exited with code 1\r\n.\r\n\r\n    0 Warning(s)\r\n    1 Error(s)\r\n\r\nTime Elapsed 00:00:00.66\r\n\r\nc:\\dev\\projects\\CFR\\rpos\\Build>\r\n```",
        "createdAt": "2020-04-07T06:42:51Z",
        "updatedAt": "2020-04-07T06:47:26Z",
        "author": {
          "login": "michaelvlach"
        }
      },
      {
        "body": "I've got a theory. Can you try this project on that machine, @Resurr3ction?\r\n\r\n```xml\r\n<Project>\r\n  <Target Name=\"Download\">\r\n    <Exec Command=\"C:\\Windows\\sysnative\\curl.exe -L $(from) -o $(to)\" />\r\n  </Target>\r\n</Project>\r\n```",
        "createdAt": "2020-04-09T19:20:49Z",
        "updatedAt": "2020-04-09T19:20:49Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Sorry I must have missed the notification. I have tried it and it works! Thanks!\r\n\r\nHowever what is `sysnative` anyway? There is no such directory in the Windows directory. Yet it works. Another silent replacement in path I guess? Should I add that to PATH? I mean I guess I would be content if it worked on all machines.\r\n\r\nEDIT: It works only from inside MSBuild. On the command line that path does not work. Hmm.",
        "createdAt": "2020-04-14T11:55:00Z",
        "updatedAt": "2020-04-14T12:00:06Z",
        "author": {
          "login": "michaelvlach"
        }
      },
      {
        "body": "Alright so I did some reading. This turned out to be helpful:\r\n\r\nhttps://www.samlogic.net/articles/sysnative-folder-64-bit-windows.htm\r\n\r\nWhile it is completely mad (64-bit apps in system32 and 32-bit ones in SysWOW64 ???). Sysnative is only visible from 32-bit apps (???). There is literally nothing that could point one to the problem because the system just tells you that \"c:/Windows/system32/whatever\" does not exist even when it clearly does. And you are left unsuspecting that some silent redirection happened and it does not bother to tell you about it. Also x64 VS 2019 command line is running 32-bit MSBuild. Another surprise.\r\n\r\nI have seen my fair share of weirdness in Software but this is some entirely different level to be honest.\r\n\r\nBut thank you! I would never have thought it could be something like this. Will be wary of this in the future.",
        "createdAt": "2020-04-14T12:22:26Z",
        "updatedAt": "2020-04-14T12:22:26Z",
        "author": {
          "login": "michaelvlach"
        }
      },
      {
        "body": "I already entered a community feedback item about the MsBuild 32-bits running under the \"x64 command prompt\" : https://developercommunity.visualstudio.com/content/problem/784372/msbuild-architecture-not-the-same-as-developer-com.html\r\nHowever I suspect changing that would break even more things that unknownlingly \"rely\" on having 32-bits MsBuild.",
        "createdAt": "2020-04-14T14:12:48Z",
        "updatedAt": "2020-04-14T14:12:48Z",
        "author": {
          "login": "RoguePointer80"
        }
      },
      {
        "body": "On a completely different note: Recent MSBuild versions also have a [https://docs.microsoft.com/en-us/visualstudio/msbuild/downloadfile-task?view=vs-2019](DownloadFile) task.\r\nIt's relatively (compared to other MSBuild stuff) new so not many people have learned about it yet - so if you don't want to mess around with manual curl invocations, that could be useful too. (But of course, curl can be used for much more than downloading files)",
        "createdAt": "2020-04-14T14:29:17Z",
        "updatedAt": "2020-04-14T14:29:17Z",
        "author": {
          "login": "dasMulli"
        }
      },
      {
        "body": "@dasMulli Thanks for pointing that out. I am aware of the `DownloadFile` task. It's a good thing but we use curl to access Artifactory with a token so DownloadTask cannot be used unfortunately. Otherwise I am all for staying in bounds of my build system when I can.",
        "createdAt": "2020-04-14T17:01:50Z",
        "updatedAt": "2020-04-14T17:02:01Z",
        "author": {
          "login": "michaelvlach"
        }
      },
      {
        "body": ".. seems like a reasonable feature request for `<DownloadFile>` though - setting an authorization header.\r\n(especially since that's a thing i'd be setting as an env var so i could use it as an msbuild property)",
        "createdAt": "2020-04-14T19:06:16Z",
        "updatedAt": "2020-04-14T19:07:28Z",
        "author": {
          "login": "dasMulli"
        }
      },
      {
        "body": "> However I suspect changing that would break even more things that unknownlingly \"rely\" on having 32-bits MsBuild.\r\n\r\nYup :(\r\n\r\n> .. seems like a reasonable feature request for `<DownloadFile>` though - setting an authorization header.\r\n\r\nFeel free to file a feature request. One complexity here is that properties and task inputs are logged, while you probably don't want to have your secrets logged. Ideally, they'd be retrieved from a secret store just in time, and we probably don't want to make MSBuild dependent on any specific secret store.",
        "createdAt": "2020-04-15T16:16:59Z",
        "updatedAt": "2020-04-15T16:16:59Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Closing this because it's a (confusing, surprising) Windows behavior.",
        "createdAt": "2020-04-15T16:17:17Z",
        "updatedAt": "2020-04-15T16:17:17Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}