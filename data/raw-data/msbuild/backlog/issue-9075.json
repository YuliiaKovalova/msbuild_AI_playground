{
  "number": 9075,
  "title": "[Bug]: Build - Intermittent unit test failure from RunnerUtilities.RunProcessAndGetOutput() with stdout",
  "body": "### Issue Description\r\n\r\nThis is an issue in the unit tests for the project.\r\n\r\nThere appears to be an issue with the unit test support method `Microsoft.Build.UnitTests.Shared.RunnerUtilities.RunProcessAndGetOutput()`. Intermittently on Windows, a unit test may fail to find the expected output. It appears that `stdout` is not completely captured before the process exits.\r\n\r\n### Steps to Reproduce\r\n\r\nCurrently there are no unit tests for the `/preprocess` and `/targets` switches that test the functionality[^1]. As part of the work for #7697 I am adding unit tests for the `/preprocess` and `/targets` switches for project files and for solution files.\r\n\r\nI added the following unit test to `src\\MSBuild.UnitTests\\XMake_Tests.cs`:\r\n\r\n```csharp\r\n        /// <summary>\r\n        /// Given an empty project, the Preprocess switch should report an empty project.\r\n        /// </summary>\r\n        [Fact]\r\n        public void PreprocessSwitchWithEmptyProject()\r\n        {\r\n            string[] arguments = { @\"/pp\", @\"/nologo\" };\r\n            string project = @\"<Project>\" + Environment.NewLine + @\"</Project>\" + Environment.NewLine;\r\n            string logContents = ExecuteMSBuildExeExpectSuccess(project, arguments: arguments);\r\n            logContents.ShouldContain(@\"<Project />\");\r\n        }\r\n```\r\n\r\nWhen running all unit tests from the command line (`build.cmd -test`) or in the Visual Studio Test Explorer, this unit test will sometimes fail on the `logContents.ShouldContain(@\"<Project />\")` verification because the output is missing from the string returned by `ExecuteMSBuildExeExpectSuccess`.\r\n\r\nThe call chain is\r\n`ExecuteMSBuildExeExpectSuccess` -->\r\n`ExecuteMSBuildExe` -->\r\n`RunnerUtilities.ExecMSBuild(string, out bool, ITestOutputHelper)` -->\r\n`RunnerUtilities.ExecMSBuild(string, out bool, bool = false, ITestOutputHelper = null)` -->\r\n`RunnerUtilities.RunProcessAndGetOutput`\r\n\r\n\r\n[^1]: There are unit tests that test that the switches are recognized as part of handling the command line.\r\n\r\n### Expected Behavior\r\n\r\nThe unit test is expected to always succeed.\r\n\r\n### Actual Behavior\r\n\r\nIntermittently the unit test will falsely fail.\r\n\r\n(Unfortunately, the example unit test will probably not show the issue on the first attempt. :slightly_frowning_face:)\r\n\r\n### Analysis\r\n\r\nThe issue happens on Windows 11 with both net7.0 and net472. On macOS 12 (Monterey) the issue doesn't present. I have not tested on Liunux.\r\n\r\nThe `/preprocess` and `/targets` switches differ from building a project because they write directly to `Console.Out` and don't use the configured logger(s).\r\n\r\nIn `XMake.cs`, as an experiment, I added explicit `Flush()` calls after the completion of the work for Preprocess and for Targets. This seemed to lessen the occurrence of the issue but it did not resolve the issue.\r\n\r\n### Versions & Configurations\r\n\r\n_No response_",
  "state": "OPEN",
  "createdAt": "2023-07-26T16:04:39Z",
  "updatedAt": "2024-01-31T08:13:39Z",
  "closedAt": null,
  "author": {
    "login": "jrdodds"
  },
  "labels": [
    "bug",
    "Priority:2",
    "Area: Tests",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": []
  }
}