{
  "number": 3526,
  "title": "`dotnet build` should error out when building legacy project",
  "body": "### Steps to reproduce\r\nCreate a new .NET Framework project using the legacy template. Run `dotnet build` on it. It works, sometimes.\r\n\r\nhttps://github.com/reactiveui/refit/issues/511#issuecomment-406326126\r\n\r\nHowever, if some NuGet references do things with custom targets, it can quickly error out. Also, certain project types, like WPF/WCF will currently fail.\r\n\r\nThis can be remedied with an error if `dotnet build` detects that it's a legacy project type.\r\n\r\nThe current behavior conveys the wrong expectations that it should work.",
  "state": "CLOSED",
  "createdAt": "2018-07-19T15:56:31Z",
  "updatedAt": "2024-02-21T17:12:19Z",
  "closedAt": "2018-07-19T16:09:23Z",
  "author": {
    "login": "clairernovotny"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "This isn't easily possible: there's not actually a distinction of \"project type\" except within the solution (which may or may not be involved in a command line build process).\r\n\r\nEven with full-framework `MSBuild.exe`, a build can fail because a particular environment doesn't have all the right Visual Studio workloads or SDKs (in the classic, not project-element sense) installed.\r\n\r\nThat said, this is definitely a pit of failure. I'm going to move this to the CLI repo; we may be able to apply some heuristics before invoking MSBuild on projects through `dotnet build`.",
        "createdAt": "2018-07-19T16:09:05Z",
        "updatedAt": "2018-07-19T16:09:05Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "This issue was moved to dotnet/cli#9706",
        "createdAt": "2018-07-19T16:09:22Z",
        "updatedAt": "2018-07-19T16:09:22Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}