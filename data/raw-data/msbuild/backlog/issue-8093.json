{
  "number": 8093,
  "title": "MsBuild inferred outputs not behaving like I expected",
  "body": "Hi,\r\n\r\nIm trying to look into Incremental Builds, but having issues getting Inferred Outputs to behave like I expect.\r\n\r\n```\r\n\r\n\t<ItemGroup>\r\n\t\t<TaskInputsCustom Include=\"BlahInput.txt\"></TaskInputsCustom>\r\n\t\t<TaskOutputsCustom Include=\"BlahOutput.txt\"></TaskOutputsCustom>\r\n\t</ItemGroup>\r\n\t\r\n\t<Target Name=\"SomeBuildTask\" Inputs=\"@(TaskInputsCustom)\" Outputs=\"@(TaskOutputsCustom)\" Returns=\"ResultFromThisTask\" BeforeTargets=\"Restore\">\r\n\t\t<SomeBuildTask>\r\n\t\t\t<Output ItemName=\"FooList\" TaskParameter=\"RandomThings\" />\r\n\t\t</SomeBuildTask>\r\n\r\n\t\t<ItemGroup>\r\n\t\t\t<ResultFromThisTask Include=\"@(FooList)\"></ResultFromThisTask>\r\n\t\t</ItemGroup>\r\n\t</Target>\r\n\r\n\r\n\t<Target Name=\"TestSomeBuildTask\" AfterTargets=\"SomeBuildTask\">\r\n\t\t<Message Text=\"@(ResultFromThisTask)\"></Message>\r\n\t</Target>\r\n```\r\n\r\nWhen the Target runs with outdated;\r\nhttps://i.imgur.com/SMoQl1j.png\r\n\r\nAs shown `ResultFromThisTask ` is added as Items.\r\n\r\nWhen the Target is skipped because of the Input/Output the Items are not added from the Target;\r\nhttps://i.imgur.com/3SLrtc7.png\r\n\r\nFrom what I understood from the documentation about Input/Output and Incremental Builds, I should see my Items outputs inferred.\r\nAdding a `Returns=` to the Target does not help.\r\n\r\nAm I missing something?",
  "state": "OPEN",
  "createdAt": "2022-10-26T14:11:37Z",
  "updatedAt": "2024-01-31T08:16:00Z",
  "closedAt": null,
  "author": {
    "login": "hknielsen"
  },
  "labels": [
    "backlog",
    "Area: Documentation",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "ghogen"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Output inference only works for items that can be inferred without running tasks. MSBuild doesn't know what `SomeBuildTask` will do, so it can't know what its `RandomThings` output would be, so it can't infer the output.\r\n\r\nThat's why the [output inference docs](https://learn.microsoft.com/visualstudio/msbuild/incremental-builds?#output-inference) say\r\n\r\n> output inference is performed automatically on item and property groups in a target.\r\n\r\nPerhaps we should add an \"only\" there, or otherwise clarify?\r\n\r\ncc @ghogen",
        "createdAt": "2022-10-26T14:16:19Z",
        "updatedAt": "2022-10-26T14:16:19Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald Yeah I could also only get it to work with Items/Props that was not from a Custom Task.\r\nSo are there anyway to do it? Other than writing down cach data. \r\nIt feels like its something one would like to have, if the Targets Input hasnt changed, one should expect the tasks output also shouldn't, with or without Custom Task's.\r\n\r\nI think this needs to be clarified in the docs yeah, as you see my Custom Task is populating an ItemGroup's Item.",
        "createdAt": "2022-10-26T14:32:36Z",
        "updatedAt": "2022-10-26T14:32:36Z",
        "author": {
          "login": "hknielsen"
        }
      },
      {
        "body": "Can you refactor your target to construct the list of outputs in MSBuild logic rather than in the task? If not, there's no way to get inference to work.",
        "createdAt": "2022-10-26T14:45:45Z",
        "updatedAt": "2022-10-26T14:45:45Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald - where do I find documentation about doing pure MsBuild logic? Maybe im using tasks where it could be optimized to do this instead.\r\n\r\nSeparate question, Inferred Outputs, how and where, are they stored on disk?",
        "createdAt": "2022-10-26T14:52:17Z",
        "updatedAt": "2022-10-26T14:52:17Z",
        "author": {
          "login": "hknielsen"
        }
      },
      {
        "body": "> where do I find documentation about doing pure MsBuild logic? Maybe im using tasks where it could be optimized to do this instead.\r\n\r\nI wasn't very clear! I mean \"can you create an ItemGroup that knows the outputs without calling the task?\"\r\n\r\nFor example, with many compiler-type operations there is a default mapping from inputs to outputs, like say `a.c` maps to `a.o`. In cases like that you may be able to use an item transform to predict the list of outputs from the list of inputs.\r\n\r\n```xml\r\n<Target Name=\"SillyCCompiler\" Inputs=\"@(CSourceFiles)\" Outputs=\"@(CSourceFiles->'$(IntermediateOutputPath)\\%(FileName).o')\">\r\n```\r\n\r\nand/or\r\n\r\n```xml\r\n<Target Name=\"SillyCCompiler2\" Inputs=\"@(CSourceFiles)\" Outputs=\"@(SillyObjFiles)\">\r\n  <ItemGroup>\r\n    <SillyObjFiles Include=\"@(CSourceFiles->'$(IntermediateOutputPath)\\%(FileName).o')\" />\r\n  </ItemGroup>\r\n\r\n  <SillyCompiler Sources=\"@(CSourceFiles)\" ObjDir=\"$(IntermediateOutputPath)\" />\r\n</Target>\r\n```\r\n\r\nThis isn't always possible, if the output items depend on the contents of the inputs--for example it doesn't work if you have something that generates a file per line of input. But when it can be done it enables inference.",
        "createdAt": "2022-10-26T15:01:12Z",
        "updatedAt": "2022-10-26T15:01:12Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> Separate question, Inferred Outputs, how and where, are they stored on disk?\r\n\r\nThey aren't. When a target is \"skipped\" we still \"run\" the inferred tasks within it that create items and properties, if they're amenable to inference.",
        "createdAt": "2022-10-26T15:02:21Z",
        "updatedAt": "2022-10-26T15:02:21Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Ah makes sense thanks for explaining @rainersigwald! Sometimes im sure you must have clones of yourself with all these cases you are handling.\r\n\r\nShould I keep this issue open for the sake of the documentation clear up part?\r\n\r\nAdditionally, now that I got you and we are in the ballpark of incremental builds, do you have any example projects using\r\nhttps://github.com/dotnet/msbuild/blob/main/documentation/specs/project-cache.md \r\nReading about it it seems like something we could use. Any idea of when it will go out of `Experimental`?",
        "createdAt": "2022-10-27T11:40:59Z",
        "updatedAt": "2022-10-27T11:41:12Z",
        "author": {
          "login": "hknielsen"
        }
      }
    ]
  }
}