{
  "number": 4717,
  "title": "ProjectReference transitive dependencies",
  "body": "### Steps to reproduce\r\n\r\nLet's consider these 3 project files :\r\n\r\nProjectA\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net471</TargetFramework>\r\n  </PropertyGroup>\r\n</Project>\r\n```\r\n\r\nProjectB\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net471</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <ProjectReference Include=\"..\\ProjectA\\ProjectA.csproj\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nProjectC\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net471</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <ProjectReference Include=\"..\\ProjectB\\ProjectB.csproj\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe 3 projects depends on each other as follows : `ProjectC -(depends on)-> ProjectB -> ProjectA`\r\n\r\n### Expected  behavior\r\n\r\n`ProjectC` should not be able to use elements from `ProjectA` (public classes for example) since it doesn't reference this project directly. \r\n\r\n### Actual behavior\r\n\r\n`ProjectC` has access to `ProjectA` via transitivity as it can be seen in his assets file :\r\n\r\n```json\r\n{\r\n      ...\r\n      \"ProjectA/1.0.0\": {\r\n        \"type\": \"project\",\r\n        \"framework\": \".NETFramework,Version=v4.7.1\",\r\n        \"compile\": {\r\n          \"bin/placeholder/ProjectA.dll\": {}\r\n        },\r\n        \"runtime\": {\r\n          \"bin/placeholder/ProjectA.dll\": {}\r\n        }\r\n      },\r\n      \"ProjectB/1.0.0\": {\r\n        \"type\": \"project\",\r\n        \"framework\": \".NETFramework,Version=v4.7.1\",\r\n        \"dependencies\": {\r\n          \"ProjectA\": \"1.0.0\"\r\n        },\r\n        \"compile\": {\r\n          \"bin/placeholder/ProjectB.dll\": {}\r\n        },\r\n        \"runtime\": {\r\n          \"bin/placeholder/ProjectB.dll\": {}\r\n        }\r\n      }\r\n      ...\r\n}\r\n```\r\n\r\nAs mentioned in https://github.com/dotnet/project-system/issues/2313, it appears that this behavior can be cancelled by using `PrivateAssets`, from [`PackageReference` dependency assets](https://docs.microsoft.com/en-us/nuget/consume-packages/package-references-in-project-files#controlling-dependency-assets), when referencing `ProjectA` : \r\n\r\n```xml\r\n  <ItemGroup>\r\n    <ProjectReference Include=\"..\\ProjectA\\ProjectA.csproj\" PrivateAssets=\"all\" />\r\n  </ItemGroup>\r\n```\r\n\r\nUsing `ExcludeAssets` when referencing `ProjectB` also works :\r\n\r\n```xml\r\n  <ItemGroup>\r\n    <ProjectReference Include=\"..\\ProjectB\\ProjectB.csproj\" ExcludeAssets=\"all\" />\r\n  </ItemGroup>\r\n```\r\n\r\nHowever, these metadatas are originally applicable only for `PackageReference` and I can't find any documentation of this behavior for `ProjectReference` (in the [`ProjectReference` item reference](https://docs.microsoft.com/en-us/visualstudio/msbuild/common-msbuild-project-items?view=vs-2019#projectreference) for example).\r\nSo, should this (`PrivateAssets` or `ExcludeAsssets`) be really used in `ProjectReference` tag ?\r\n\r\n\r\n### Environment data\r\n\r\n`msbuild /version` output: 15.9.21.664\r\nVisual Studio : Professional 2017, version 15.9.15\r\n",
  "state": "OPEN",
  "createdAt": "2019-09-11T09:27:29Z",
  "updatedAt": "2024-08-13T05:42:11Z",
  "closedAt": null,
  "author": {
    "login": "joeltankam"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Discussion"
  },
  "comments": {
    "nodes": [
      {
        "body": "Any update on the topic please ?",
        "createdAt": "2019-09-18T09:35:32Z",
        "updatedAt": "2019-09-18T09:35:32Z",
        "author": {
          "login": "joeltankam"
        }
      },
      {
        "body": "You could use `<DisableTransitiveProjectReferences>true</DisableTransitiveProjectReferences>` to turn this off for Project to project references.",
        "createdAt": "2019-09-18T21:40:09Z",
        "updatedAt": "2019-09-18T21:43:14Z",
        "author": {
          "login": "livarcocc"
        }
      },
      {
        "body": "Ok, thanks.\r\nI'll try that.",
        "createdAt": "2019-09-19T20:16:40Z",
        "updatedAt": "2019-09-19T20:16:40Z",
        "author": {
          "login": "joeltankam"
        }
      },
      {
        "body": "@livarcocc `<DisableTransitiveProjectReferences>true</DisableTransitiveProjectReferences>` works fine as far as compilation is concerned. \r\nHowever, `ProjectA` is still present in `ProjectC` asset file (same as mentioned in the description); which is a **false** information since this dependency doesn't exist anymore at compile time.",
        "createdAt": "2019-09-20T11:36:06Z",
        "updatedAt": "2019-09-20T11:36:06Z",
        "author": {
          "login": "joeltankam"
        }
      },
      {
        "body": "Any update please ?",
        "createdAt": "2019-09-25T17:42:26Z",
        "updatedAt": "2019-09-25T17:42:26Z",
        "author": {
          "login": "joeltankam"
        }
      },
      {
        "body": "```\r\n<DisableTransitiveProjectReferences>true</DisableTransitiveProjectReferences>\r\n```\r\n\r\nand \r\n```\r\n      <Private>false</Private>\r\n      <ExcludeAssets>all</ExcludeAssets>\r\n```\r\nseems to work to me",
        "createdAt": "2019-10-01T20:26:45Z",
        "updatedAt": "2019-10-01T20:27:06Z",
        "author": {
          "login": "jmecosta"
        }
      },
      {
        "body": "> You could use `<DisableTransitiveProjectReferences>true</DisableTransitiveProjectReferences>` to turn this off for Project to project references.\r\n\r\n@thank you @livarcocc It works perfect.\r\nDo you know if there is any documentation for this settings? I cannot find anything. I also don't know when it was introduced (in which version of MSBuild/SDK/VisualStudio?)\r\n\r\nNot sure if you are the right person to ask, but just to clarify I have some questions:\r\n\r\nSo this `DisableTransitiveProjectReferences` setting changes `ProjectReference` behavior in new SDK-csproj to be the same as in old csproj where `ProjectReference` wasn't transitive but the transitive projects' `.dlls` were copied to `bin` folder ?\r\n\r\nIs the effect the same as setting `PrivateAssets=\"All\"` on all the dependencies of dependand project? Just that with `DisableTransitiveProjectReferences` you control this behavior in different place, on project that reference other projects, not on project that might be referenced by other projects. \r\n\r\nIn other word `PrivateAssets=\"All\"` is more flexible and fine-grained and you can achieve the same end result like with `DisableTransitiveProjectReferences` but `DisableTransitiveProjectReferences` is just more useful if you prefer \"old non-SDK csproj\" non-transitive behavior of `ProjectReference`s (or if you are in process of migrating to .NET Core or SDK-style csproj)",
        "createdAt": "2020-03-10T13:56:37Z",
        "updatedAt": "2020-03-10T13:56:37Z",
        "author": {
          "login": "mpawelski"
        }
      },
      {
        "body": "I had put a community item in about the bahaviour of mixed C++/CLI, C# solutions that seems related to this\r\nhttps://developercommunity.visualstudio.com/t/Transitive-usage-of-nuget-package-types/1424201\r\nI was wondering if someone knows what the behaviour should be for .vcxproj projects. If it is meant to be non-transitive is there a flag to make it transitive as that is what I needed.",
        "createdAt": "2021-08-09T15:48:25Z",
        "updatedAt": "2021-08-09T15:48:25Z",
        "author": {
          "login": "davidhunter22"
        }
      },
      {
        "body": "Any update on this question? Is this intended but undocumented?\r\n\r\n> However, these metadatas are originally applicable only for PackageReference and I can't find any documentation of this behavior for ProjectReference (in the [ProjectReference item reference](https://docs.microsoft.com/en-us/visualstudio/msbuild/common-msbuild-project-items?view=vs-2019#projectreference) for example).\r\nSo, should this (PrivateAssets or ExcludeAsssets) be really used in ProjectReference tag ?",
        "createdAt": "2024-08-13T05:42:09Z",
        "updatedAt": "2024-08-13T05:42:09Z",
        "author": {
          "login": "Tobias-Werner-Recom"
        }
      }
    ]
  }
}