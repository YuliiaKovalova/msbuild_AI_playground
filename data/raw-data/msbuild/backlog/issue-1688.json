{
  "number": 1688,
  "title": "Using the new .Csproj without .Net core",
  "body": "Apologies if this is the wrong repository.\r\n\r\nIs it possible to use the new .Csproj format without targeting .Net core? I.e. targeting .NET 4.5.x or 4.6.x?",
  "state": "CLOSED",
  "createdAt": "2017-02-10T04:09:55Z",
  "updatedAt": "2024-02-21T17:21:59Z",
  "closedAt": "2017-05-03T22:12:40Z",
  "author": {
    "login": "cable729"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Yes, the SDK tooling works for .NET Framework without explicitly targeting .NET Core. However, there are caveats.  We've focused this release entirely about making just compile of Console Apps, Libraries and ASP.NET _Core_ on NET Framework work. You cannot use the tooling build/use .NET Framework projects that contain Windows Forms, WPF, Workflow, ASP.NET Web Forms, etc. \r\n\r\nPaging @onovotny, who does this a bit and can probably point to some guidance he's written.\r\n",
        "createdAt": "2017-02-10T04:27:19Z",
        "updatedAt": "2017-02-10T04:27:19Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "Oh gotcha. Thanks for the quick response. That's too bad about the ASP.net web forms. Is supporting these other projects on the roadmap after the release of VS 2017, or are there other more urgent priorities?",
        "createdAt": "2017-02-10T04:30:26Z",
        "updatedAt": "2017-02-10T04:30:26Z",
        "author": {
          "login": "cable729"
        }
      },
      {
        "body": "We wanted to unify csproj tooling across all the .NET stacks this release, but it turned into a fairly large undertaking (who knew 15 years of tooling would be hard to replace!).  I don't have timelines when we'll do it, and what order we'll do it in, but I'm confident that we'll be able to move the majority of projects over to using the new project system (http://github.com/dotnet/roslyn-project-system), and then a significant portion of those over to the SDK-based format in future releases.\r\n",
        "createdAt": "2017-02-10T04:36:02Z",
        "updatedAt": "2017-02-10T04:36:30Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "OK, thanks for the information that you're able to provide. I haven't heard of this SDK-based format. Do you have a link or keywords for where I can learn more? Google doesn't turn up anything.",
        "createdAt": "2017-02-10T04:38:41Z",
        "updatedAt": "2017-02-10T04:38:41Z",
        "author": {
          "login": "cable729"
        }
      },
      {
        "body": "Is it any plans to simplyfi vcxproj to in the future? ",
        "createdAt": "2017-02-10T04:51:36Z",
        "updatedAt": "2017-02-10T04:51:36Z",
        "author": {
          "login": "magol"
        }
      },
      {
        "body": "We doc'd some of it here: https://docs.microsoft.com/en-us/dotnet/articles/core/preview3/tools/csproj, you can see an example template here: https://github.com/dotnet/sdk/blob/master/src/Templates/ProjectTemplates/CSharp/.NETCore/CSharpConsoleApplication/ProjectTemplate.csproj. That \"Sdk\" attribute basically auto-imports a props at the top of the project and a targets at the bottom.",
        "createdAt": "2017-02-10T04:52:37Z",
        "updatedAt": "2017-02-10T04:52:37Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "@magol To be honest, no plans as of yet. The C++ team are aware of the work we're doing, and once we've landed .NET Core scenarios lots of the new features we've added will just work for them, but I cannot promise anything.",
        "createdAt": "2017-02-10T04:54:14Z",
        "updatedAt": "2017-02-10T04:54:14Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "@davkean Is it any list of the new features? For example,  what new features do you think will be usable in vcxproj? \r\nDo the c++ team have any github repository or mail list? ",
        "createdAt": "2017-02-10T05:22:47Z",
        "updatedAt": "2017-02-10T05:22:47Z",
        "author": {
          "login": "magol"
        }
      },
      {
        "body": "An example of a couple of the new features that vcxproj might be able to benefit from, is auto-reload (ie project file changes on disk, we pick up the changes automatically), or project file editing while the project is open.  C++ team does not have a repo or a mailing list (that I'm aware of), Report a Problem/Suggestion from VS would be away to give feedback to them.",
        "createdAt": "2017-02-10T05:26:59Z",
        "updatedAt": "2017-02-10T05:26:59Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "@davkean Great improvements.  But i can not expect any simplifications of the xml in the vcxproj file? ",
        "createdAt": "2017-02-10T07:40:07Z",
        "updatedAt": "2017-02-10T07:40:07Z",
        "author": {
          "login": "magol"
        }
      },
      {
        "body": "@magol I can only speak for things that I work on, I don't work on C++ - so can't talk about any format improvements that they may or may not.",
        "createdAt": "2017-02-10T07:42:07Z",
        "updatedAt": "2017-02-10T07:42:07Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "You can build any project type with the SDK style builds. The main trick is to set the `LanaguageTargets` to the correct project specific targets for the type of project you want to build. I talk about how it all works here: https://oren.codes/2017/01/04/multi-targeting-the-world-a-single-project-to-rule-them-all/\r\n\r\nThat said, there are some additional things you'll need to add for certain project types that need additional actions - metadata for specific things like WPF pages, etc.\r\n\r\nThis issue is working on what's needed for WPF: https://github.com/dotnet/roslyn-project-system/issues/1467. The specific globs to add are here: https://github.com/Microsoft/VSProjectSystem/issues/169\r\n\r\nShould look something like:\r\n\r\n``` xml\r\n<Compile Update=\"**\\*.xaml.cs\">\r\n        <DependentUpon>%(Filename)</DependentUpon>      \r\n        <SubType>Code</SubType>\r\n</Compile>\r\n\t\t\t\r\n<Page Include=\"**\\*.xaml\">\r\n        <Generator>MSBuild:Compile</Generator>\r\n        <SubType>Designer</SubType>      \r\n</Page>\r\n```",
        "createdAt": "2017-02-10T14:53:06Z",
        "updatedAt": "2017-02-10T14:58:22Z",
        "author": {
          "login": "clairernovotny"
        }
      },
      {
        "body": "@davkean is there any roadmap or GitHub issue for tracking progress of the \"new csproj format for all project types\"?",
        "createdAt": "2017-08-29T06:21:48Z",
        "updatedAt": "2017-08-29T06:21:48Z",
        "author": {
          "login": "tomkuijsten"
        }
      },
      {
        "body": "https://github.com/dotnet/project-system/blob/master/docs/repo/roadmap.md - make note there is no dates associated with the \"16.0\" milestone that its associated with.",
        "createdAt": "2017-08-29T06:23:10Z",
        "updatedAt": "2017-08-29T06:23:10Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "Anyone got this working? I'm able to compile it but I lost intellisense in VS 2017.\r\n\r\nThis is my csproj:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <LanguageTargets>$(MSBuildExtensionsPath)\\$(VisualStudioVersion)\\Bin\\Microsoft.CSharp.targets</LanguageTargets>\r\n    <OutputType>winexe</OutputType>\r\n    <TargetFramework>net462</TargetFramework>\r\n    <DebugType>Full</DebugType>\r\n    <ApplicationIcon>res\\ico\\icon.ico</ApplicationIcon>\r\n    <OutputTypeEx>winexe</OutputTypeEx>\r\n    <StartupObject />\r\n  </PropertyGroup>\r\n\r\n  <PropertyGroup>\r\n    <VisualStudioVersion Condition=\"'$(VisualStudioVersion)' == ''\">15.0</VisualStudioVersion>\r\n    <VSToolsPath Condition=\"'$(VSToolsPath)' == ''\">$(MSBuildExtensionsPath32)\\Microsoft\\VisualStudio\\v$(VisualStudioVersion)</VSToolsPath>\r\n    <TransformOnBuild>True</TransformOnBuild>\r\n    <TransformOutOfDateOnly>false</TransformOutOfDateOnly>\r\n  </PropertyGroup>\r\n\r\n  <Import Project=\"$(VSToolsPath)\\TextTemplating\\Microsoft.TextTemplating.targets\" />\r\n\r\n  <ItemGroup>\r\n    <!-- App.xaml -->\r\n    <ApplicationDefinition Include=\"App.xaml\" SubType=\"Designer\" Generator=\"MSBuild:UpdateDesignTimeXaml\" />\r\n\r\n    <!-- XAML elements -->\r\n    <Page Include=\"**\\*.xaml\" SubType=\"Designer\" Generator=\"MSBuild:UpdateDesignTimeXaml\" Exclude=\"App.xaml\" />\r\n    <Compile Update=\"**\\*.xaml.cs\" SubType=\"Designer\" DependentUpon=\"%(Filename)\" />\r\n    <Compile Include=\"$(IntermediateOutputPath)**\\*.g.cs\" Visible=\"false\" />\r\n    <None Include=\"$(ProjectDir)obj\" Visible=\"false\" />\r\n\r\n    <!-- Resources -->\r\n    <EmbeddedResource Update=\"Properties\\Resources.resx\" Generator=\"ResXFileCodeGenerator\" LastGenOutput=\"Resources.Designer.cs\" />\r\n    <Compile Update=\"Properties\\Resources.Designer.cs\" AutoGen=\"True\" DependentUpon=\"Resources.resx\" DesignTime=\"True\" />\r\n\r\n    <!-- Settings -->\r\n    <None Update=\"Properties\\Settings.settings\" Generator=\"SettingsSingleFileGenerator\" LastGenOutput=\"Settings.Designer.cs\" />\r\n    <Compile Update=\"Properties\\Settings.Designer.cs\" AutoGen=\"True\" DependentUpon=\"Settings.settings\" />\r\n\r\n    <None Update=\"App.config\">\r\n      <TransformOnBuild>true</TransformOnBuild>\r\n    </None>\r\n    <None Update=\"App.Debug.config\">\r\n      <IsTransformFile>True</IsTransformFile>\r\n    </None>\r\n    <None Update=\"App.Release.config\">\r\n      <IsTransformFile>True</IsTransformFile>\r\n    </None>\r\n  </ItemGroup>\r\n\r\n  <ItemGroup>\r\n    <Reference Include=\"PresentationCore\" />\r\n    <Reference Include=\"PresentationFramework\" />\r\n    <Reference Include=\"System.Xaml\" />\r\n    <Reference Include=\"WindowsBase\" />\r\n  </ItemGroup>\r\n\r\n  <ItemGroup>\r\n    <Compile Remove=\"Publish\\**\" />\r\n    <EmbeddedResource Remove=\"Publish\\**\" />\r\n    <None Remove=\"Publish\\**\" />\r\n    <Page Remove=\"Publish\\**\" />\r\n  </ItemGroup>\r\n\r\n  <PropertyGroup>\r\n    <AssemblySearchPaths>$(AssemblySearchPaths);{GAC}</AssemblySearchPaths>\r\n  </PropertyGroup>\r\n\r\n  <Import Project=\"$(MSBuildSDKExtrasTargets)\" Condition=\"Exists('$(MSBuildSDKExtrasTargets)')\" />\r\n</Project>",
        "createdAt": "2017-09-04T18:25:54Z",
        "updatedAt": "2017-09-04T18:25:54Z",
        "author": {
          "login": "bdovaz"
        }
      },
      {
        "body": "@onovotny thanks for the great information dump on how to migrate existing WPF projects...\r\n\r\nI was wondering if you could help in porting Windows Forms project to the new csproj.\r\n\r\nI assume that except for `<LanguageTargets>` I also need to find the names of the generators for windows form classes... right?\r\n\r\nIn other words...\r\nIn \"old style\" csproj I have:\r\n```\r\n    <Compile Include=\"AmazingForm.cs\">\r\n      <SubType>Form</SubType>\r\n    </Compile>\r\n```\r\n\r\nI'm assuming the .cs files that are form based need to have a special generator in order for them to compile....\r\n\r\nWhat would that Generator be?",
        "createdAt": "2017-10-29T17:48:17Z",
        "updatedAt": "2017-10-29T17:48:17Z",
        "author": {
          "login": "damageboy"
        }
      },
      {
        "body": "Anyone aware of how to include Telerik reports in the new project template?",
        "createdAt": "2018-05-08T09:07:18Z",
        "updatedAt": "2018-05-08T09:07:18Z",
        "author": {
          "login": "buddalasunil999"
        }
      }
    ]
  }
}