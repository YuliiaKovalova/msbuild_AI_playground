{
  "number": 784,
  "title": "Mechanism for \"magic\" pickup of nuget restore logic during build",
  "body": "On full framework, desktop installs, the nuget msi dropped its targets into `$(MSBuildExtensionsPath)\\$(MSBuildToolsVersion)\\Microsoft.Common.targets\\ImportAfter\\Microsoft.NuGet.ImportAfter.targets`. This ensured that all the builds on the machine got Nuget functionality.\n\nProblems with this approach:\n- no machine wide program files directory for .net core apps. The most you can do with this approach is drop targets into the applocal extension path (xplat msbuild resolves the extension path relative to msbuild.exe)\n- not friendly with other consumers. Where would each project put its special logic coming in from nuget packages?. Would they all write their files inside the CLI SDK, into MSBuild's applocal extension path? This does not scale well since a project can now potentially influence other projects\n\nSolution:\n- create a new convention for loading project specific build logic that comes from packages\n- common.props imports a special file (something like `<project_name>.generated.targets`), if it is there\n- the file sits in the intermediate output directory\n- nuget can generate its contents inside of it.\n- there should be a switch to disable this convention\n",
  "state": "CLOSED",
  "createdAt": "2016-07-18T18:53:52Z",
  "updatedAt": "2024-02-21T17:27:06Z",
  "closedAt": "2016-09-12T15:41:33Z",
  "author": {
    "login": "cdmihai"
  },
  "labels": [
    "backlog",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "jeffkl"
      }
    ]
  },
  "milestone": {
    "title": "Visual Studio 15 Preview 5"
  },
  "comments": {
    "nodes": [
      {
        "body": "NuGet, along with MSBuild, should logically be part of the .NET CLI platform.  So the targets it needs should come together with MSBuild, and the common targets, and the C#/VB targets when you install the .NET CLI.  (Whether it actually comes from separate NuGet packages, MSIs, apt packages, etc isn't important to the user as long as there's one top-level action that gets you everything.)\n\nThe targets should be written in such a way that you can override them with your own copies by setting an MSBuild property.  I know the Roslyn targets already do this, I don't know about the NuGet targets.  That way you get the benefit of everything working out of the box, while still being extensible if you want to do something different.\n\nAs for having a feature to automatically pick up targets from the project directory, that seems fine to me (and NuGet actually already does this in order to support .props and .targets files that come from packages), but I don't think it should be needed for the default experience.\n",
        "createdAt": "2016-07-18T19:58:18Z",
        "updatedAt": "2016-07-18T20:04:55Z",
        "author": {
          "login": "dsplaisted"
        }
      },
      {
        "body": "@dsplaisted I think you're thinking about something else. This issue is to solve only the last issue you were talking about (given that NuGet restore has already happened, how does MSBuild pull in package-delivered build logic for a project).\n\nThe proposed solution is to generalize the existing NuGet mechanism. It's currently included in the build via [a wildcard import in Microsoft.Common.CurrentVersion.targets](https://github.com/Microsoft/msbuild/blob/c1459f5cbd36f2c33eafc8f4ff087f6ee84c3640/src/XMakeTasks/Microsoft.Common.CurrentVersion.targets#L5508) (and another in props) that imports a file that contains\n\n``` XML\n  <Import Project=\"$(MSBuildProjectDirectory)\\$(MSBuildProjectName).nuget.targets\"\n Condition=\"Exists('$(MSBuildProjectDirectory)\\$(MSBuildProjectName).nuget.targets') AND '$(IncludeNuGetImports)' != 'false'\" />\n```\n\nWe're thinking to generalize that to `$(MSBuildProjectDirectory)\\$(MSBuildProjectName).generated.targets` (to avoid privileging NuGet above other package managers with similar requirements) and moving the import to core common props/targets directly. That way NuGet doesn't need to \"install\" its targets in every possible app-local MSBuild.\n\nThere are two other parts to the NuGet scenario that aren't affected by this change.\n\nPackages need to be specified and restored somehow.  We'd want the generated props/targets files to obey the new naming rule.\n\nThe other part is resolving assets out of a package for use at build time. @jasonmalinowski is thinking that all of the logic for that can be included in its own NuGet package. That would mean that the only alteration core MSBuild would need is this--to get the \"resolve assets\" logic included in a project at build time post-restore.\n",
        "createdAt": "2016-07-18T20:57:22Z",
        "updatedAt": "2016-07-18T21:35:34Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald I see, that makes sense.\n",
        "createdAt": "2016-07-18T21:01:29Z",
        "updatedAt": "2016-07-18T21:01:29Z",
        "author": {
          "login": "dsplaisted"
        }
      },
      {
        "body": "So... instead of NuGet having to install into every MSBuild, it has to install into _every project directory_? Isn't that going to tie the projects themselves to a specific NuGet install?\n\nThat also seems to me like it would prevent NuGet supporting MSBuild-integrated restore and require it to continue being a separate, explicit command.\n",
        "createdAt": "2016-07-18T21:34:52Z",
        "updatedAt": "2016-07-18T21:34:52Z",
        "author": {
          "login": "mhutch"
        }
      },
      {
        "body": "Also, isn't this going to break if you use multiple package managers, as they'll be fighting over one file?\n",
        "createdAt": "2016-07-18T22:14:24Z",
        "updatedAt": "2016-07-18T22:14:24Z",
        "author": {
          "login": "mhutch"
        }
      },
      {
        "body": "# Design proposal:\n1. MSBuild introduces a new property `MSBuildProjectExtensionsPath`\n   1.  Move definition of `$(BaseIntermediateOutputPath)` to `Microsoft.Common.props`\n   2.  Default value of `$(MSBuildProjectExtensionsPath)` is `$(BaseIntermediateOutputPath)`\n   3. `Microsoft.Common.props` will import `$(MSBuildProjectExtensionsPath)\\$(MSBuildProjectFile).*.props`\n   4.  Microsoft.Common.targets will import `$(MSBuildProjectExtensionsPath)$(MSBuildProjectFile).*.targets`\n2. NuGet generates files `$(MSBuildProjectFile).nuget.g.props` and `$(MSBuildProjectFile).nuget.g.targets` to the folder specified by `$(MSBuildProjectExtensionsPath)`\n   1.  Note the `.g` here should help customers understand that the file is dynamically generated.\n\n### Microsoft.Common.props\n\nExample:\n\n``` xml\n<Import Project=\"$(MSBuildProjectExtensionsPath)\" \n        Condition=\" '$(ImportProjectExtensions)' != 'false' \n                     and '$(MSBuildProjectExtensionsPath)' != '' />\n```\n\nOther package management systems will also be able to write out a `.props` or `.targets` to be imported.\n",
        "createdAt": "2016-08-23T21:14:23Z",
        "updatedAt": "2016-08-29T16:51:08Z",
        "author": {
          "login": "jeffkl"
        }
      }
    ]
  }
}