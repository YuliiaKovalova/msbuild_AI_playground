{
  "number": 11149,
  "title": "Resolve Assembly Reference is not a cancelable task",
  "body": "## Context\nThis ticket is intended to track the effort to improve the performance and responsiveness of the Resolve Assembly Reference task in Visual Studio.\nDuring recent investigations into long-running tasks in Visual Studio, we identified the Resolve Assembly Reference  [RAR](https://github.com/dotnet/msbuild/blob/6a4f3151664a960fc323b48de826dc1b32946208/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs#L33)  task as a significant performance bottleneck. The current implementation is not cancelable, which can lead to severe performance issues, especially in scenarios involving:\n\n- Large dependency graphs\n- Interactions with Windows Defender file scanning\n\n\n## Call Stack Analysis:\nThe provided stack trace demonstrates the RAR task's deep call stack, highlighting its complexity and potential for causing hangs:\n\n```\n \tmscorlib.dll!System.Reflection.AssemblyName.GetAssemblyName(string assemblyFile)\tUnknown\n>\tMicrosoft.Build.Tasks.Core.dll!Microsoft.Build.Shared.AssemblyNameExtension.GetAssemblyNameEx(string path) Line 204\tC#\n \tMicrosoft.Build.Tasks.Core.dll!Microsoft.Build.Tasks.ResolveAssemblyReference.Execute.AnonymousMethod__1(string path) Line 1615\tC#\n \tMicrosoft.Build.Tasks.Core.dll!Microsoft.Build.Tasks.SystemState.GetAssemblyName(string path) Line 287\tC#\n \tMicrosoft.Build.Tasks.Core.dll!Microsoft.Build.Tasks.ReferenceTable.SetPrimaryAssemblyReferenceItem(Microsoft.Build.Framework.ITaskItem referenceAssemblyName) Line 321\tC#\n \tMicrosoft.Build.Tasks.Core.dll!Microsoft.Build.Tasks.ReferenceTable.SetPrimaryItems(Microsoft.Build.Framework.ITaskItem[] referenceAssemblyFiles, Microsoft.Build.Framework.ITaskItem[] referenceAssemblyNames, System.Collections.Generic.List<System.Exception> exceptions) Line 261\tC#\n \tMicrosoft.Build.Tasks.Core.dll!Microsoft.Build.Tasks.ReferenceTable.ComputeClosure(System.Collections.Generic.IEnumerable<Microsoft.Build.Tasks.DependentAssembly> remappedAssembliesValue, Microsoft.Build.Framework.ITaskItem[] referenceAssemblyFiles, Microsoft.Build.Framework.ITaskItem[] referenceAssemblyNames, System.Collections.Generic.List<System.Exception> exceptions) Line 917\tC#\n \tMicrosoft.Build.Tasks.Core.dll!Microsoft.Build.Tasks.ResolveAssemblyReference.Execute(Microsoft.Build.Shared.FileExists fileExists, Microsoft.Build.Shared.DirectoryExists directoryExists, Microsoft.Build.Tasks.GetDirectories getDirectories, Microsoft.Build.Tasks.GetAssemblyName getAssemblyName, Microsoft.Build.Tasks.GetAssemblyMetadata getAssemblyMetadata, Microsoft.Build.Shared.GetRegistrySubKeyNames getRegistrySubKeyNames, Microsoft.Build.Shared.GetRegistrySubKeyDefaultValue getRegistrySubKeyDefaultValue, Microsoft.Build.Tasks.GetLastWriteTime getLastWriteTime, Microsoft.Build.Tasks.GetAssemblyRuntimeVersion getRuntimeVersion, Microsoft.Build.Shared.OpenBaseKey openBaseKey, Microsoft.Build.Tasks.GetAssemblyPathInGac getAssemblyPathInGac, Microsoft.Build.Tasks.IsWinMDFile isWinMDFile, Microsoft.Build.Tasks.ReadMachineTypeFromPEHeader readMachineTypeFromPEHeader) Line 1674\tC#\n \tMicrosoft.Build.Tasks.Core.dll!Microsoft.Build.Tasks.ResolveAssemblyReference.Execute() Line 2226\tC#\n```\n\n\n## Proposed Solutions:\nI  recommend pursuing one of two approaches to mitigate the performance issues:\n\n- Out-of-Proc Execution:\n\nImplement an out-of-process mechanism for the RAR task\nThis would prevent blocking the main Visual Studio thread\nProvide better isolation and potential performance improvements\n\n- Make RAR Cancelable:\n\nModify the current RAR implementation to implement the ICancelableTask interface\nAllow graceful cancellation of long-running assembly reference resolution\nProvide a mechanism to interrupt the task when it becomes unresponsive\n! Be careful with the cache file creation - don't attempt to interrupt task execution in the middle of this process.",
  "state": "OPEN",
  "createdAt": "2024-12-16T10:27:05Z",
  "updatedAt": "2024-12-16T14:44:35Z",
  "closedAt": null,
  "author": {
    "login": "YuliiaKovalova"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "I set a breakpoint at `ResolveAssemblyReference.Execute()` and started a build in Visual Studio, but `ResolveAssemblyReference.Execute()` was called on a thread that has `Microsoft.Build.BackEnd.RequestBuilder.RequestThreadProc` in its calls stack and is not the VS main thread.  I don't know whether the VS main thread is waiting for the task to finish on the request thread; but even if it is, how would out-of-process execution help?\n\nCompare to ToolTask, which starts a new process but then [waits for the process to finish](https://github.com/dotnet/msbuild/blob/3a63bca49ffeaf025750f01f5474f89e5bd4c83b/src/Utilities/ToolTask.cs#L916) and blocks the thread that called ToolTask.Execute.",
        "createdAt": "2024-12-16T11:13:31Z",
        "updatedAt": "2024-12-16T11:14:28Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      }
    ]
  }
}