{
  "number": 2408,
  "title": "Understanding the Clean target",
  "body": "Tried a recent experiment in the Roslyn repo:\r\n\r\n``` cmd\r\n> git clean -dxf .\r\n> msbuild /t:restore /v:m /m Roslyn.sln\r\n...\r\n> msbuild /t:build /v:m /m Roslyn.sln\r\n...\r\n> msbuild /t:clean /v:m /m Roslyn.sln\r\n```\r\n\r\nMy expectation is that once this is complete both my `Binaries\\Debug` directory should be essentially empty. Possibly some directories around but all content like .dll / .exe files removed. Instead what I see is 9,000+ .dll / .exe files in my `Binaries\\Debug` directory. \r\n\r\nThe Roslyn build is correct to our understanding and *mostly* devoid of hacks around build output. My mental model is Clean is the reverse of Build and hence the above should leave my build artifact free. Given that Clean doesn't actually clean, the only safe operation our devs can do for rebuild is essentially delete `Binaries\\Debug`. \r\n\r\nIs my mental model wrong here? Or are there likely bugs in the build that we need to track down to ensure Clean actually cleans? \r\n\r\n\r\n",
  "state": "CLOSED",
  "createdAt": "2017-08-08T18:43:23Z",
  "updatedAt": "2024-02-21T17:17:26Z",
  "closedAt": "2017-08-09T15:57:53Z",
  "author": {
    "login": "jaredpar"
  },
  "labels": [
    "question",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "## What Clean does and how\r\n\r\nThat mental model doesn't capture the nuances of the current implementation of Clean, which is pretty complex.\r\n\r\nThe intuitive goal of the `Clean` target is to delete everything produced by previous non-clean runs. That goal is hard to achieve because the MSBuild engine doesn't have enough information to know what \"the outputs of the build\" are. A task implementation can create arbitrarily many files, and build input parameters or other state can cause different outputs to be produced.\r\n\r\nTo deal with that, the common targets implement an honor-system method of tracking the output of \"the last build\". Well-behaved targets emit their outputs into an item named `@(FileWrites)`, which is serialized to `$(CleanFile)` in the obj directory (it ends with `.FileListAbsolute.txt`) in a target named [`_CleanRecordFileWrites`](https://github.com/Microsoft/msbuild/blob/9354c727bd70450912c882dfeaf8941a67dc2f66/src/Tasks/Microsoft.Common.CurrentVersion.targets#L4935-L4965). Clean can then read that list and delete files in it during a subsequent MSBuild invocation.\r\n\r\nThat is made more complicated by the possibility of incremental builds--builds that _would_ have written a file, but it was up to date, so _this build_ didn't do so. But you still want to delete those build outputs on Clean! So there's logic in common targets to preserve the list of files that were written last time, unless they really shouldn't be present any more (because you changed something). That's the `AndPrior` part of [`_CleanGetCurrentAndPriorFileWrites`](https://github.com/Microsoft/msbuild/blob/9354c727bd70450912c882dfeaf8941a67dc2f66/src/Tasks/Microsoft.Common.CurrentVersion.targets#L4725).\r\n\r\nThe next complicating factor is the possibility that multiple projects might be built to the same output directory. In that case, cleaning a single project should _not_ delete the outputs of other projects. But it would, because some references get copied to the output folder. To account for this, there's a second item group `@(FileWritesShareable)`. That list is treated specially: only items from it that are believed to be unique to this project are written to the `$(CleanFile)` for later deletion.\r\n\r\n## The Roslyn problem at hand\r\n\r\nI captured logs of the builds you described and looked through them to figure out what the problem was.\r\n\r\nThe files that don't get deleted are added to `@(FileWritesShareable)` in the `Build` invocation, but don't get serialized to `$(CleanFile)`. That's because the heuristic used for \"this 'Shareable' output is unique to this project\" is [\"output is under the project file's directory\"](https://github.com/Microsoft/msbuild/blob/9354c727bd70450912c882dfeaf8941a67dc2f66/src/Tasks/Microsoft.Common.CurrentVersion.targets#L4757-L4769).\r\n\r\nThat's not a very good heuristic, as evidenced by your case. I bet we can do better--I filed #2410--but we probably can't do so in an update.\r\n\r\n## Possible workarounds\r\n* Go with the flow and don't use a dedicated output folder (yes, this is worse in many ways)\r\n* Patch up the `@(FileWrites)` list with a custom target, since you know it's safe to include `@(FileWritesShareable)`. Untested:\r\n```xml\r\n<Target Name=\"EnsureDeletionOfCopiedReferences\"\r\n        BeforeTargets=\"_CleanRecordFileWrites\"\r\n        DependsOnTargets=\"_CleanGetCurrentAndPriorFileWrites\">\r\n  <!-- Work around https://github.com/Microsoft/msbuild/issues/2410 -->\r\n  <ItemGroup>\r\n    <_PreviousCurrentFileWrites Include=\"@(_CleanCurrentFileWrites)\" />\r\n    <_CleanCurrentFileWrites Remove=\"@(_CleanCurrentFileWrites)\" />\r\n  </ItemGroup>\r\n  <!-- Remove duplicates from files produced in this build. -->\r\n  <RemoveDuplicates Inputs=\"@(_PreviousCurrentFileWrites);@(FileWritesShareable)\" >\r\n    <Output TaskParameter=\"Filtered\" ItemName=\"_CleanCurrentFileWrites\"/>\r\n  </RemoveDuplicates>\r\n</Target>\r\n```",
        "createdAt": "2017-08-08T21:10:51Z",
        "updatedAt": "2017-08-08T21:10:51Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Okay ... that pretty much destroyed my mental model \ud83d\ude04 \r\n\r\nThanks for the detailed explanation here. Really helps. ",
        "createdAt": "2017-08-09T00:07:18Z",
        "updatedAt": "2017-08-09T00:07:18Z",
        "author": {
          "login": "jaredpar"
        }
      },
      {
        "body": "@rainersigwald is there a way to remove the empty folder? I realize clean can remove the files. But it will not remove the folder, so there are many empty folders left.",
        "createdAt": "2018-07-18T21:24:13Z",
        "updatedAt": "2018-07-18T21:24:13Z",
        "author": {
          "login": "wli3"
        }
      },
      {
        "body": "@wli3 you can try to play with [`RemoveDir`](https://docs.microsoft.com/en-us/visualstudio/msbuild/removedir-task?view=vs-2017) task",
        "createdAt": "2018-09-04T13:36:11Z",
        "updatedAt": "2018-09-04T13:36:11Z",
        "author": {
          "login": "Sysa"
        }
      }
    ]
  }
}