{
  "number": 8242,
  "title": "Do MSBuild versions use different LangVersions when using <LangVersion>latest</LangVersion>?",
  "body": "I have a `net6.0` console application with `LangVersion` set to `latest`. The code I am running is the one from this [issue]( https://github.com/dotnet/roslyn/issues/65938). My project also has the following `global.json`:\r\n```\r\n{\r\n  \"sdk\": {\r\n    \"version\": \"6.0.100\",\r\n    \"rollForward\": \"latestFeature\"\r\n  }\r\n}\r\n```\r\n\r\nI noticed a strange behaviour when running my console application via command line and using Visual Studio 17.4.1. `dotnet run` will use MSBuild 17.0, while VS 17.4 uses MSBuild 17.4, which is perfectly normal.\r\n\r\nThe problem is that the code from the bug I linked will have a different output when the `LangVersion` is set to 10.0 compared to 11.0. When I run the build from 17.0 I get the output expected from C#10, but when I run the build from 17.4 I get the output expected from C#11.\r\n\r\nI then added a build target to print `$(NETCoreSDKVersion)` and `$(MaxSupportedLangVersion)`, but both builds print `6.0.111` and `10.0`.\r\n\r\nMy question is if different MSBuild versions (in this case 17.0 and 17.4) will interpret `<LangVersion>latest</LangVersion>` differently, even though they display the same .NET SDK version and the same max supported language version, since I was expecting both of them to build the application as if `latest == 10.0`.",
  "state": "CLOSED",
  "createdAt": "2022-12-14T14:19:04Z",
  "updatedAt": "2024-02-21T14:06:52Z",
  "closedAt": "2022-12-14T15:05:09Z",
  "author": {
    "login": "thecristidima"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": []
  }
}