{
  "number": 3937,
  "title": "Running build.cmd on the Developer Command Prompt for VS 2017 fails",
  "body": "### What I am trying to do\r\nI just want to get the source code for MS Build on my machine so I can play with it and step through the code.\r\n\r\n### What I have\r\nI had .NET Core version 2.1.500 on my machine. I also have Visual Studio 2017 Community.\r\n\r\n### Steps to reproduce\r\nAs per the instructions [here](https://github.com/Microsoft/msbuild#building-msbuild-with-visual-studio-2017):\r\n1. I cloned the MS Build repository from [here](https://github.com/Microsoft/msbuild.git).\r\n2. Opened the **Developer Command Prompt for VS 2017**.\r\n3. Browsed to the root of the git repository on my local machine.\r\n4. Typed `build.cmd`.\r\n\r\n### Expected  behavior\r\nI expected the `build.cmd` file to run successfully.\r\n\r\n### Actual behavior\r\nI got the following error:\r\n\r\n```\r\nC:\\Sathyaish\\repos\\public\\msbuild>build.cmd\r\ndotnet-install: Downloading link: https://dotnetcli.azureedge.net/dotnet/Sdk/2.1\r\n.401/dotnet-sdk-2.1.401-win-x64.zip\r\ndotnet-install: Cannot download: https://dotnetcli.azureedge.net/dotnet/Sdk/2.1.\r\n401/dotnet-sdk-2.1.401-win-x64.zip\r\ndotnet-install: Downloading legacy link: https://dotnetcli.azureedge.net/dotnet/\r\nSdk/2.1.401/dotnet-dev-win-x64.2.1.401.zip\r\nException calling \"Invoke\" with \"0\" argument(s): \"Failed to download https://dot\r\nnetcli.azureedge.net/dotnet/Sdk/2.1.401/dotnet-dev-win-x64.2.1.401.zip.  StatusC\r\node: 404, ReasonPhrase: 'Not Found', Version: 1.1, Content: System.Net.Http.Stre\r\namContent, Headers:\r\n{\r\n  x-ms-request-id: 104c7d7f-f01e-00b5-284c-7ea534000000\r\n  x-ms-version: 2009-09-19\r\n  Date: Sat, 17 Nov 2018 08:09:36 GMT\r\n  Server: Windows-Azure-Blob/1.0\r\n  Server: Microsoft-HTTPAPI/2.0\r\n  Content-Length: 215\r\n  Content-Type: application/xml\r\n}\"\r\nSystem.Management.Automation.MethodInvocationException: Exception calling \"Invok\r\ne\" with \"0\" argument(s): \"Failed to download https://dotnetcli.azureedge.net/dot\r\nnet/Sdk/2.1.401/dotnet-dev-win-x64.2.1.401.zip.  StatusCode: 404, ReasonPhrase:\r\n'Not Found', Version: 1.1, Content: System.Net.Http.StreamContent, Headers:\r\n{\r\n  x-ms-request-id: 104c7d7f-f01e-00b5-284c-7ea534000000\r\n  x-ms-version: 2009-09-19\r\n  Date: Sat, 17 Nov 2018 08:09:36 GMT\r\n  Server: Windows-Azure-Blob/1.0\r\n  Server: Microsoft-HTTPAPI/2.0\r\n  Content-Length: 215\r\n  Content-Type: application/xml\r\n}\" ---> System.Management.Automation.RuntimeException: Failed to download https:\r\n//dotnetcli.azureedge.net/dotnet/Sdk/2.1.401/dotnet-dev-win-x64.2.1.401.zip.  St\r\natusCode: 404, ReasonPhrase: 'Not Found', Version: 1.1, Content: System.Net.Http\r\n.StreamContent, Headers:\r\n{\r\n  x-ms-request-id: 104c7d7f-f01e-00b5-284c-7ea534000000\r\n  x-ms-version: 2009-09-19\r\n  Date: Sat, 17 Nov 2018 08:09:36 GMT\r\n  Server: Windows-Azure-Blob/1.0\r\n  Server: Microsoft-HTTPAPI/2.0\r\n  Content-Length: 215\r\n  Content-Type: application/xml\r\n} ---> System.Management.Automation.RuntimeException: Failed to download https:/\r\n/dotnetcli.azureedge.net/dotnet/Sdk/2.1.401/dotnet-dev-win-x64.2.1.401.zip.  Sta\r\ntusCode: 404, ReasonPhrase: 'Not Found', Version: 1.1, Content: System.Net.Http.\r\nStreamContent, Headers:\r\n{\r\n  x-ms-request-id: 104c7d7f-f01e-00b5-284c-7ea534000000\r\n  x-ms-version: 2009-09-19\r\n  Date: Sat, 17 Nov 2018 08:09:36 GMT\r\n  Server: Windows-Azure-Blob/1.0\r\n  Server: Microsoft-HTTPAPI/2.0\r\n  Content-Length: 215\r\n  Content-Type: application/xml\r\n}\r\n   --- End of inner exception stack trace ---\r\n   at System.Management.Automation.ExceptionHandlingOps.CheckActionPreference(Fu\r\nnctionContext funcContext, Exception exception)\r\n   at System.Management.Automation.Interpreter.ActionCallInstruction`2.Run(Inter\r\npretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.R\r\nun(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.R\r\nun(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.Interpreter.Run(InterpretedFrame\r\nframe)\r\n   at System.Management.Automation.Interpreter.LightLambda.RunVoid1[T0](T0 arg0)\r\n\r\n   at System.Management.Automation.ScriptBlock.InvokeWithPipeImpl(ScriptBlockCla\r\nuseToInvoke clauseToInvoke, Boolean createLocalScope, Dictionary`2 functionsToDe\r\nfine, List`1 variablesToDefine, ErrorHandlingBehavior errorHandlingBehavior, Obj\r\nect dollarUnder, Object input, Object scriptThis, Pipe outputPipe, InvocationInf\r\no invocationInfo, Object[] args)\r\n   at System.Management.Automation.ScriptBlock.<>c__DisplayClassa.<InvokeWithPip\r\ne>b__8()\r\n   at System.Management.Automation.Runspaces.RunspaceBase.RunActionIfNoRunningPi\r\npelinesWithThreadCheck(Action action)\r\n   at System.Management.Automation.ScriptBlock.InvokeWithPipe(Boolean useLocalSc\r\nope, ErrorHandlingBehavior errorHandlingBehavior, Object dollarUnder, Object inp\r\nut, Object scriptThis, Pipe outputPipe, InvocationInfo invocationInfo, Boolean p\r\nropagateAllExceptionsToTop, List`1 variablesToDefine, Dictionary`2 functionsToDe\r\nfine, Object[] args)\r\n   at System.Management.Automation.ScriptBlock.DoInvoke(Object dollarUnder, Obje\r\nct input, Object[] args)\r\n   at CallSite.Target(Closure , CallSite , ScriptBlock )\r\n   --- End of inner exception stack trace ---\r\n   at System.Management.Automation.ExceptionHandlingOps.CheckActionPreference(Fu\r\nnctionContext funcContext, Exception exception)\r\n   at System.Management.Automation.Interpreter.ActionCallInstruction`2.Run(Inter\r\npretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.R\r\nun(InterpretedFrame frame)\r\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.R\r\nun(InterpretedFrame frame)\r\nat Invoke-With-Retry, C:\\Sathyaish\\repos\\public\\msbuild\\artifacts\\.dotnet\\2.1.40\r\n1\\dotnet-install.ps1: line 137\r\nat GetHTTPResponse, C:\\Sathyaish\\repos\\public\\msbuild\\artifacts\\.dotnet\\2.1.401\\\r\ndotnet-install.ps1: line 193\r\nat DownloadFile, C:\\Sathyaish\\repos\\public\\msbuild\\artifacts\\.dotnet\\2.1.401\\dot\r\nnet-install.ps1: line 480\r\nat <ScriptBlock>, C:\\Sathyaish\\repos\\public\\msbuild\\artifacts\\.dotnet\\2.1.401\\do\r\ntnet-install.ps1: line 568\r\nat <ScriptBlock>, <No file>: line 1\r\nat InstallDotNetCli, C:\\Sathyaish\\repos\\public\\msbuild\\build\\build.ps1: line 98\r\nat Build, C:\\Sathyaish\\repos\\public\\msbuild\\build\\build.ps1: line 197\r\nat <ScriptBlock>, C:\\Sathyaish\\repos\\public\\msbuild\\build\\build.ps1: line 419\r\nat <ScriptBlock>, <No file>: line 1\r\n```\r\n\r\n\r\n\r\n### Environment data\r\nOS info:\r\nWindows 7 Home Premium 64-bit",
  "state": "CLOSED",
  "createdAt": "2018-11-17T08:21:51Z",
  "updatedAt": "2024-02-21T17:10:29Z",
  "closedAt": "2020-01-02T21:25:41Z",
  "author": {
    "login": "ghost"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "MSBuild is currently using DotNet Core SDK 2.1.401 which was not found on your machine. Currently used version is defined in `.\\build\\Versions.props`.\r\nWhen SDK is not found, the script attepmts to download and install it automatically, however in your case the download failed. Any idea why? On my machine the script downloads SDK correctly. The [link](https://dotnetcli.azureedge.net/dotnet/Sdk/2.1.401/dotnet-sdk-2.1.401-win-x64.zip) from log is correct.\r\n\r\nPlease, install DotNet Core SDK 2.1.401 and rebuild the project.",
        "createdAt": "2018-11-19T09:39:39Z",
        "updatedAt": "2018-11-19T09:39:39Z",
        "author": {
          "login": "michal-pawlowski"
        }
      },
      {
        "body": "Does this happen consistently? Can you open `https://dotnetcli.azureedge.net/dot\r\nnet/Sdk/2.1.401/dotnet-dev-win-x64.2.1.401.zip` in a browser? I don't think we've seen this step fail very often.",
        "createdAt": "2018-11-19T16:26:36Z",
        "updatedAt": "2018-11-19T16:26:36Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Thank you, @michal-pawlowski  and @rainersigwald .\r\n\r\nI was able to download the zip file from `https://dotnetcli.azureedge.net/dotnet/Sdk/2.1.401/dotnet-sdk-2.1.401-win-x64.zip` and unzip it, but now I have a new problem. Its contents look like it is actually a non-installable X-copyable (like old win32 files) version of .NET Core. How do I merge it with the other versions of .NET Core that exist on my machine?\r\n\r\nMy problem is detailed on [this Stack Overflow question](https://stackoverflow.com/q/53427817/303685).",
        "createdAt": "2018-11-22T09:48:12Z",
        "updatedAt": "2018-11-22T09:48:12Z",
        "author": {
          "login": "ghost"
        }
      },
      {
        "body": "> Currently used version is defined in .\\build\\Versions.props.\r\n\r\nThanks. Missed that. Edited `Version.props` to need the latest version `2.1.500` and trying it. Will report.",
        "createdAt": "2018-11-22T09:55:33Z",
        "updatedAt": "2018-11-22T09:55:33Z",
        "author": {
          "login": "ghost"
        }
      },
      {
        "body": "Ok, this is strange. I edited `Version.props` to make it need version 2.1.500. And I *do* have that version. But running `build.cmd` attempts to now try and download version `2.1.500` of .NET Core.\r\n\r\nIt's not yet done so I'll know in some time what's going on, but in the meantime, I looked up `build.ps1` (called by `build.cmd` on Windows), and here's probably the culprit code.\r\n\r\n```\r\n[CmdletBinding(PositionalBinding=$false)]\r\nParam(\r\n  ...\r\n\r\n  # This is set to an empty string\r\n  [string] $DotNetCoreSdkDir = \"\",\r\n)\r\n\r\n\r\nfunction Build {\r\n  if (![string]::IsNullOrEmpty($DotNetCoreSdkDir) -and (Test-Path -Path $DotNetCoreSdkDir)) {\r\n    $env:DOTNET_INSTALL_DIR = $DotNetCoreSdkDir\r\n  }\r\n  else {\r\n   # The flow-of-control probably enters here because\r\n   # the variable $(DotNetCoreSdkDir) is set to an empty\r\n   # string in the parameter declaration section of this\r\n   # script\r\n    InstallDotNetCli\r\n  }\r\n\r\n  $env:DOTNET_HOST_PATH = Join-Path $env:DOTNET_INSTALL_DIR \"dotnet.exe\"\r\n\r\n  ...\r\n}\r\n```",
        "createdAt": "2018-11-22T10:13:41Z",
        "updatedAt": "2018-11-22T10:15:09Z",
        "author": {
          "login": "ghost"
        }
      },
      {
        "body": "I believe this is by design. We write our build scripts to be completely independent. They will download all the pieces that the build needs to succeed and also binplace them within the repo itself, so that afterwards, something like a `git clean` can restore the machine to a clean state as far as the repo is concerned.\r\n\r\nDo you know why the install script that build.cmd attempts to run is failing to download the SDK that it needs to build msbuild with? I just attempted straight up running build.cmd and everything worked for me.",
        "createdAt": "2018-11-23T20:48:19Z",
        "updatedAt": "2018-11-23T20:48:19Z",
        "author": {
          "login": "livarcocc"
        }
      },
      {
        "body": "@livarcocc Thanks. I did set out to find out the reason and then got busy doing something else. I have it on my list and will get to it when I can (coming few days) and post here.",
        "createdAt": "2018-11-24T07:08:34Z",
        "updatedAt": "2018-11-24T07:08:34Z",
        "author": {
          "login": "ghost"
        }
      },
      {
        "body": "Aaargh! It took me all of today to figure out what was wrong.\r\n\r\nAfter a lot of putting in `Set-Verbose` or `Write-Host \"\" -ForegroundColor Red` statements, and stepping through the `$(ProjectRoot)\\artifacts\\.dotnet\\$(DotNetCliVersion)\\dotnet-install.ps1`, scanning through my event logs, reading a ton of documentation, and after many a wild goose chases down the wrong alley, many false leads, here is what was wrong:\r\n\r\n1. Fiddler is set up as a system wide proxy for me at port `8888` on the `localhost`. This was my default system proxy and I wasn't running the Fiddler process, so the attempts to download the first downloadable file, namely, `https://dotnetcli.azureedge.net/dotnet/Sdk/2.1\r\n.401/dotnet-sdk-2.1.401-win-x64.zip` failed.\r\n\r\n   I tried removing the system-wide proxy 127.0.0.1:8888 from the Win Inet options / Control Panel / Internet Options but I don't know why, Fiddler would re-instate itself as the proxy. I changed **Fiddler -> Tools -> Telerik Fiddler Options -> Connections** and unchecked **Act as a system proxy on start-up** and **Monitor all connections** but that didn't help either, so I just let Fiddler run while I ran the `$(ProjectRoot)\\build.cmd` batch file.\r\n\r\n   However, that was only half the problem.\r\n\r\n2. If the script fails to download the file `https://dotnetcli.azureedge.net/dotnet/Sdk/2.1\r\n.401/dotnet-sdk-2.1.401-win-x64.zip`, it attempts to download a legacy file from the URL `https://dotnetcli.azureedge.net/dotnet/\r\nSdk/2.1.401/dotnet-dev-win-x64.2.1.401.zip`. It turns out this URL is invalid and hence any Web request to it yields a 404. So, this needs to be updated.\r\n\r\n3. Even though I have a 2 Mbps connection, it appears that the file `https://dotnetcli.azureedge.net/dotnet/Sdk/2.1 .401/dotnet-sdk-2.1.401-win-x64.zip` would take only slightly more than 10 minutes to download on my machine. However, the `dotnet-install.ps1` script file had a time-out set to 10 minutes for every download. This is declared in the script block that's passed to the call to the `Invoke-With-Retry` method from within the `GetHTTPResponse` method.\r\n\r\n   `$HttpClient.Timeout = New-TimeSpan -Minutes 10`\r\n\r\n   I changed it to 30 minutes and it downloaded the file.\r\n\r\n   Therefore, I advise that this limit be increased keeping in mind people like me. My connection is still far better than some of the connections in rural and sub-urban regions in South East Asia, Middle East and Africa.\r\n\r\n   I understand this is within the purview of the .NET Core CLI team and so I have posted [an issue about this on their repo](https://github.com/dotnet/cli/issues/10396).\r\n\r\n4. This is about the 20th time or so I am running the build process today. It appears to be going well till now except there's another timeout of 10000ms someplace, this time in one of the `.csproj` files and I can't afford to hunt it down anymore. It was trying to download nuget or something. I'll have to check the logs once this build process runs fully. But I suggest that all time-outs be increased to 30 minutes just to be safe.\r\n\r\n**False chase:**\r\n\r\nI had many a false chases in tracking this but one popular one was that the `Add-Type` commandlet was producing an Information entry in the event logs, so I thought something must be wrong there. Spent about 2 hours, retrying it, reading its documentation and putting in `Set-Verbose` around the code. I noticed that it read something like (from the `Load-Assembly` function in `dotnet-install.ps1`):\r\n\r\n`Add-Type -Assembly Assembly | Out-Null`\r\n\r\nI was certain this was failing because there is no switch named `-Assembly` for this commandlet. There was, however, an `-AssemblyName` switch. I suspected that since the commandlet usage above was trying to download all types from the `System.Net.Http` assembly, it was failing and hence all download calls (`Invoke-WebRequest / HttpClient.GetAsync`) could be failing because of this.\r\n\r\nThen, after many hours of debugging, I remembered that Powershell allows you to type partial switch names so long as what you've typed can uniquely identify the switch. So, this was a false lead.\r\n\r\n**Finally, a request:**\r\n\r\nI am looking for work. If you know someone hiring remotely, please do let me know.\r\n\r\nI am a programmer working in .NET. I've been programming since 1997.\r\n\r\nMy family situation presently only allows me to work from home remotely. I live in Noida, India.",
        "createdAt": "2018-11-27T12:16:41Z",
        "updatedAt": "2018-11-27T12:39:47Z",
        "author": {
          "login": "ghost"
        }
      },
      {
        "body": "Hi all,\r\n\r\nI have exactly the same issue as @Sathyaish! Seven attempts and counting without any success. I have no proxies. My Internet connection is quite good and stable. I'm getting the same errors after the SDK download attempt.",
        "createdAt": "2018-12-10T09:38:55Z",
        "updatedAt": "2018-12-10T09:38:55Z",
        "author": {
          "login": "wassimans"
        }
      }
    ]
  }
}