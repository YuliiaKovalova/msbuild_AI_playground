{
  "number": 10266,
  "title": "[Feature Request]: Support building the new Visual Studio solution file format (.slnx)",
  "body": "### Summary\r\n\r\nThe VS team has a new XML-based format for solution files that simplifies the current sln file format. When released, it will have an open-source parser, so tools like MSBuild and the dotnet CLI can consistently operate on the format. The new format is intended to reduce common customer pains like merge conflicts and readability, but not to drastically change the experience of working with solutions. MSBuild should be able to build these solutions.\r\n\r\n### Background and Motivation\r\n\r\nFor many developers, not being able to build this format will result in not using the new format at all - what use is an IDE-only file when your CI/CD system cannot process it?\r\n\r\n### Proposed Feature\r\n\r\nWe should support accepting .slnx files for builds, using all of the same rules as .sln files today. We should \r\n* accept up to one slnx file if present in a directory as an argument to MSBuild\r\n* the presence of multiple sln, slnx, or projects in a directory should result in an ambiguity error\r\n* we should translate the slnx model to a metaproject that builds in the same manner as sln metaprojects today\r\n\r\nThis will require an OSS and public parser from the VS team to handle the new format.\r\n\r\n### Alternative Designs\r\n\r\n_No response_",
  "state": "CLOSED",
  "createdAt": "2024-06-19T14:00:04Z",
  "updatedAt": "2025-03-14T13:25:40Z",
  "closedAt": "2024-10-17T06:12:03Z",
  "author": {
    "login": "baronfel"
  },
  "milestone": null,
  "assignees": {
    "nodes": [
      {
        "login": "surayya-MS"
      }
    ]
  },
  "labels": [
    "Feature Request"
  ],
  "comments": {
    "nodes": [
      {
        "body": "Issue about slnx was created in past in msbuild and roslyn project.\r\n* https://github.com/dotnet/roslyn/issues/73004\r\n* https://github.com/dotnet/msbuild/issues/10012\r\nShould Roslyn or MSBuild handle it?",
        "createdAt": "2024-06-20T00:19:28Z",
        "author": {
          "login": "itn3000"
        }
      },
      {
        "body": "We all have independent units of work to do - but I expect MSBuild will need to be the 'first mover' before Roslyn can update to support the new format. ",
        "createdAt": "2024-06-20T00:21:11Z",
        "author": {
          "login": "baronfel"
        }
      },
      {
        "body": "Roslyn's MSBuildProjectLoader loads solutions [here](https://github.com/dotnet/roslyn/blob/main/src/Workspaces/Core/MSBuild/MSBuild/MSBuildProjectLoader.cs#L157-L242) - it directly uses `Microsoft.Build.Construction.SolutionFile.Parse(string path)`. When MSBuild does this work, we should decide on the merits of transparently handling slnx files in `SolutionFile.Parse`, or requiring users to use the SLNX file parser manually, or having a new convenience API on top of the 'dance' of determining which solution parser to use.",
        "createdAt": "2024-06-20T16:32:41Z",
        "author": {
          "login": "baronfel"
        }
      },
      {
        "body": "I feel strongly that we should not extend `SolutionFile` to handle slnx. The push should be to use the new supported parser, not to extend the buggy MSBuild one and use it in more cases.",
        "createdAt": "2024-06-20T16:51:47Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> I feel strongly that we should not extend `SolutionFile` to handle slnx. The push should be to use the new supported parser, not to extend the buggy MSBuild one and use it in more cases.\n\nOne potentially interesting question is what to do with SolutionFile once the new parser exists. My favorite option would be to fully delete SolutionFile and just use the other parser, but I strongly suspect that would break way too many people who currently call into our APIs directly. We could instead work to make all our APIs just redirect into the new parser, though we might have to add something extra on top if there aren't perfect analogues. To be pragmatic, it would probably be good to phase in the new parser so the team working on it has a chance to fix any bugs it may have before everyone's build relies on it working flawlessly.",
        "createdAt": "2024-07-12T15:04:37Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "@rainersigwald from our discussion:\r\nNot introducing new API, but changing the behavior. Apply [change waves](https://learn.microsoft.com/en-us/visualstudio/msbuild/change-waves?view=vs-2022), so that in [SolutionFile.Parse](https://github.com/dotnet/msbuild/blob/main/src/Build/Construction/Solution/SolutionFile.cs#L258)\r\n*  If the change wave is the newest one (have to look it up which one it is) then use the new parser to parse .slnx and .sln files, throw error if the new parser couldn't parse the file.\r\n*  If it is old wave then use the old parser to parse .sln, and for .slnx throw error with new message like \"upgrade to parse slnx\"",
        "createdAt": "2024-07-15T14:29:01Z",
        "author": {
          "login": "surayya-MS"
        }
      },
      {
        "body": "The change wave will be 17.12 :)",
        "createdAt": "2024-07-15T14:40:20Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Quick question, does this new solution format also include support for Directory.Solution.props and Directory.Solution.targets?\r\n\r\nAccording to https://learn.microsoft.com/en-gb/visualstudio/msbuild/customize-solution-build?view=vs-2022 the Directory.Solution.props and Directory.Solution.targets are only supported from MSBuild commandline, not inside VisualStudio\r\n",
        "createdAt": "2024-07-17T11:16:22Z",
        "author": {
          "login": "japj"
        }
      },
      {
        "body": "I can check with the Solution dev team, but I would not expect support for those files to be added - the _semantics_ of the solution file aren't changing with the new format, just the format of the file. ",
        "createdAt": "2024-07-17T13:50:17Z",
        "author": {
          "login": "baronfel"
        }
      },
      {
        "body": "It should support them the same way we do today: _only_ when building in MSBuild/`dotnet build`.",
        "createdAt": "2024-07-17T13:59:31Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Surayya`s PR (internal): https://devdiv.visualstudio.com/DevDiv/_git/DotNet-msbuild-Trusted/pullrequest/569790",
        "createdAt": "2024-08-06T17:03:30Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "I have wrote an [SLNX file parser](https://github.com/winscripter/Slnx) a few months ago. While I'm not certain if it directly assists with building SLNX files, it might be worth considering.",
        "createdAt": "2024-08-08T18:45:17Z",
        "author": {
          "login": "winscripter"
        }
      },
      {
        "body": "What exactly is this issue blocked on? Is there something that could be done to unblock it?",
        "createdAt": "2024-08-16T17:41:49Z",
        "author": {
          "login": "tkapin"
        }
      },
      {
        "body": "@tkapin it is blocked on the availability of the library we need from the VS solution folks in a form we can consume it. Right now we have some prototype work based on their Microsoft-internal code.",
        "createdAt": "2024-08-16T17:46:20Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> [@tkapin](https://github.com/tkapin) it is blocked on the availability of the library we need from the VS solution folks in a form we can consume it. Right now we have some prototype work based on their Microsoft-internal code.\n\nAre you talking about this? https://github.com/microsoft/vs-solutionpersistence\n",
        "createdAt": "2025-03-14T07:21:07Z",
        "author": {
          "login": "ekalchev"
        }
      },
      {
        "body": "@ekalchev yes, that's what we use for this now as of #10794.",
        "createdAt": "2025-03-14T13:25:39Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}