{
  "number": 4405,
  "title": "The Hash task in the _GenerateCompileDependencyCache target introduces regression in behaviour of incremental build vs msbuild 14",
  "body": "There are different scenarios. One is related to the case sensitivity of the Hash task. E.g. let the solution file reference directories in the wrong case. Should not matter on Windows and it does not when using msbuild 14. But with the Hash task in msbuild 15 it does matter.\r\nI have already reported this issue through a Support Case:\r\n\r\n> I just wanted to loop back on this ticket and update you that the internal product bug for this issue has been filed with our dev team and is being investigated. The bug ID that we have internally for this is 804169, however this might not be that useful to you as it is an internal tracker for the issue.\r\n> At this stage, this is under consideration to be addressed in one of the servicing updates for VS 2019, which officially was made available to our customers as a Release Candidate yesterday, 2/27.\r\n> \r\n> Also since this bug has been linked to your support case here, I can confirm that this incident has also been marked as a \u201cNon-Decrement\u201d, and you will not incur charges for the same.\r\n> I have verified this is done, so feel free to let me know if you note otherwise.\r\n> \r\n\r\nBut this time I have found another regression, not related to case sensitivity. The scenario is something like this:\r\n\r\n1. Have a solution with many projects\r\n1. Have a folder with 3rd party dependencies committed to the source code (I know, I know. We are slowly clearing it, but it predates the merry days of NuGet)\r\n1. Ordinarily, projects would reference dependencies in there with the HintPath, but sometimes a project can get away without it. Indeed, if project A depends on project B, then project A can skip the HintPath, if the project B references the same dependency correctly with the HintPath. In this case A can omit the HintPath. The dependency in question would be fetched from the bin folder of B. But what if A depends on C and D which also depend on the aforementioned dependency correctly? Then A can get it from the bin folder of B, C or D. Which one exactly? In a parallel build this is non deterministic.\r\n\r\nThe net result - the Hash task may produce different hash values in subsequent builds and cause recompilations. \r\n\r\nThis is not an exact scenario, but again, I have a real solution with this problem and 2 binlogs from two successive builds clearly showing the problem.\r\n\r\nI decided to go through the github issues, rather than a formal Microsoft Support Case, but do let me know if I should open one.\r\n\r\nAnyway, if you give me a secure upload location I can upload both binlogs.\r\n\r\nWhat you will see is that the second build contains a single compilation because the Hash is different from the first build (recall that I ran two builds one after the other). \r\nI copied the Hash input (i.e. ItemsToHash) from the first and the second builds to different files and diffed them:\r\n```Powershell\r\nC:\\temp> diff (cat .\\1.txt) (cat .\\2.txt) -CaseSensitive\r\n\r\nInputObject                                                                              SideIndicator\r\n-----------                                                                              -------------\r\nD:\\_wf\\01\\3\\s\\Test\\DFAcceptanceTest\\DFAcceptanceTest\\CompSeleniumTest\\bin\\Debug\\NLog.dll =>\r\nD:\\_wf\\01\\3\\s\\Test\\DFAcceptanceTest\\DFAcceptanceTest\\DFSeleniumTest\\bin\\Debug\\NLog.dll   <=\r\n\r\nC:\\temp>\r\n```\r\nAs you can guess, NLog.dll lives in the infamous Dependencies folder. CompSeleniumTest is a project that depends on DFSeleniumTest. The latter depends on NLog.dll correctly:\r\n```xml\r\n    <Reference Include=\"NLog, Version=3.1.0.0, Culture=neutral, PublicKeyToken=b3dac0a0872f0a93, processorArchitecture=MSIL\">\r\n      <SpecificVersion>False</SpecificVersion>\r\n      <HintPath>..\\..\\..\\..\\Dependencies\\NLog.dll</HintPath>\r\n    </Reference>\r\n```\r\nBut CompSeleniumTest does not:\r\n```xml\r\n    <Reference Include=\"NLog, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b3dac0a0872f0a93\" />\r\n```\r\nAs a result in the first clean build the dependency was copied from DFSeleniumTest bin folder. But in the second build it is already found in the bin folder of CompSeleniumTest and so it taken from there.\r\nNet result - redundant compilation on the second build.\r\n",
  "state": "CLOSED",
  "createdAt": "2019-05-27T21:30:18Z",
  "updatedAt": "2024-02-21T17:08:18Z",
  "closedAt": "2021-10-22T20:04:35Z",
  "author": {
    "login": "MarkKharitonov"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Guys, aren't you going to comment on it?\r\n\r\nI am sure you know what I am talking about. The `Hash` task in the `_GenerateCompileDependencyCache` target causes redundant recompilations for all kinds of reasons, which never mattered before.\r\n\r\nAnyone?",
        "createdAt": "2019-07-19T17:27:21Z",
        "updatedAt": "2019-07-19T17:27:39Z",
        "author": {
          "login": "MarkKharitonov"
        }
      },
      {
        "body": "Discussed again in https://github.com/dotnet/msbuild/issues/6401 and #6522.",
        "createdAt": "2021-10-22T20:04:35Z",
        "updatedAt": "2021-10-22T20:04:35Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}