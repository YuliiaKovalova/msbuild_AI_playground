{
  "number": 1602,
  "title": "Install xcopy MSBuild",
  "body": "Is there a way to install MSBuild 15.0 in an xcopy fashion?\r\n\r\nGiven the changes to Visual Studio 2017 it seems that this should be possible.  This is the only tool remaining in the Roslyn build process which isn't xcopy deployable.  I'm pretty sure that with an xcopy MSBuild I could clone, build and run tests in Roslyn on a fresh Windows 10 machine. ",
  "state": "CLOSED",
  "createdAt": "2017-01-23T21:47:24Z",
  "updatedAt": "2024-02-21T17:22:36Z",
  "closedAt": "2022-01-21T18:53:10Z",
  "author": {
    "login": "jaredpar"
  },
  "labels": [
    "question",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "@jaredpar the [Microsoft.Build.Runtime](https://www.nuget.org/packages/Microsoft.Build.Runtime) should contain everything you need for MSBuild.  If you want to evaluate or build projects, you'll need a few more packages like `Microsoft.Net.Compilers.netcore` and `Microsoft.CodeAnalysis.Build.Tasks` (which now have to be placed in a Roslyn subfolder or you have to set RoslyTargetsPath explicitly.  This will is enough to build a basic `.csproj` or `.vbproj`.  And then you'll need additional packages for other SDKs unless the project itself contains enough package references to get the build dependencies.\r\n\r\nThis is my test application I've been using to show things working in a stand-alone fashion: https://github.com/jeffkl/MSBuild-NetCore/tree/master/src/ConsoleApplication",
        "createdAt": "2017-01-23T21:53:49Z",
        "updatedAt": "2017-01-23T21:53:49Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "Yes, this should be possible now, but there's no easy way to do it at the moment. The main issue is that not all of the props and targets that are required for a \"reasonable\" MSBuild are present in this repo--Roslyn being a notable absence. Everything gets assembled by the VSIXes in VS or by the CLI repo for .NET Core.\r\n\r\nFor you in Roslyn, it's probably ok to not have Roslyn targets redistributed, depending on how your bootstrap is set up. You _might_ be able to just unzip the [`Microsoft.Build.Runtime`](https://dotnet.myget.org/feed/msbuild/package/nuget/Microsoft.Build.Runtime) package and run from there (with explicit references to your LKG compiler).\r\n\r\n[Crossed with @jeffkl so may be repetitive]",
        "createdAt": "2017-01-23T21:54:12Z",
        "updatedAt": "2017-01-23T21:54:52Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Does the MS.Build.Runtime package contain everything needed to enable NuGet restore and reference resolve issues?  Also does it have the desktop reference assemblies? ",
        "createdAt": "2017-01-23T21:55:40Z",
        "updatedAt": "2017-01-23T21:55:40Z",
        "author": {
          "login": "jaredpar"
        }
      },
      {
        "body": "No NuGet restore is not part of the \"core\" MSBuild logic at the moment.  This is handled by Visual Studio or the dotnet CLI.  We're working on a feature where MSBuild will be able to restore SDK packages which could then restore NuGet package references.  \r\n\r\nAnother possibility could be to zip up the MSBuild folder from a VS install but I haven't tried it.",
        "createdAt": "2017-01-23T21:59:46Z",
        "updatedAt": "2017-01-23T21:59:46Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "Also, would it work if you just installed the MSBuild tools part of Visual Studio on the machine?  This part of the install should be very minimal and fast...",
        "createdAt": "2017-01-23T22:00:40Z",
        "updatedAt": "2017-01-23T22:00:40Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "> No NuGet restore is not part of the \"core\" MSBuild logic at the moment.\r\n\r\nThat's unfortunate.  I'm really interested in driving down the pre-requisites needed to build DotNet projects.  Today it far too often comes down to \"install Visual Studio\" which is a pretty big burden.  I think it would be great if we can get it to a simple \"grab this toolset\" and go.  \r\n\r\nIt seems like there are at a minimum the following required components:\r\n\r\n1. NuGet.exe: available today as a direct download today.  On Windows only though.\r\n1. NuGet tasks for resolving references during build\r\n1. MSBuild core components\r\n1. Roslyn compilers\r\n\r\nI feel like 2 is the big item we are missing.  Everything else can be cobbled together.  I'm not even sure where this code lives.  \r\n\r\n> Another possibility could be to zip up the MSBuild folder from a VS install but I haven't tried it.\r\n\r\nI agree that should work.  But it's not ... official.  It's a bit hacky.\r\n\r\n> Also, would it work if you just installed the MSBuild tools part of Visual Studio on the machine? \r\n\r\nHow would one go about doing that? \r\n\r\n\r\n",
        "createdAt": "2017-01-24T15:24:23Z",
        "updatedAt": "2017-01-24T15:24:23Z",
        "author": {
          "login": "jaredpar"
        }
      },
      {
        "body": "@jaredpar I agree, that's why I came up with http://commonbuildtoolset.github.io/ which is a hook into MSBuild which allows for bootstrapping build dependencies at build time.  I haven't had a chance to make it work with .NET Core yet though but it is why I joined the MSBuild team.\r\n\r\nI can say that the near term goal is to accomplish exactly what you want which is that MSBuild acquires all build dependencies for you so you can just \"clone and go\".  The new SDK stuff I spoke about is slated for update 1 and I've already started working on it based on this design: https://github.com/Microsoft/msbuild/issues/1493.  It will work from the command-line, Visual Studio, Windows, Linux, etc.  The lowest common denominator is MSBuild so that's all you'll need as a prerequisite. \r\n\r\nThe DotNet CLI might also be a good option but I'm not sure if it can build desktop framework apps yet.  It is xcopy deployable and comes with MSBuild, Roslyn, and NuGet.  \r\n\r\nTo install just the build tools, you can download this: https://www.visualstudio.com/downloads/#build-tools-for-visual-studio-2017-rc\r\n\r\nAnd then do an unattended installation on build servers by doing this: https://docs.microsoft.com/en-us/visualstudio/install/visual-studio-administrator-guide\r\n\r\n",
        "createdAt": "2017-01-24T16:14:26Z",
        "updatedAt": "2017-01-24T16:14:26Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "@jaredpar Isn't the CLI good enough? It's pretty much xcopy-able and puts together nuget, msbuild, and roslyn. As @jeffkl said, after this VS release we'll be working on teaching msbuild how to acquire dependencies: #1493. The end goal is to clone and build with only msbuild on the machine.",
        "createdAt": "2017-01-24T23:45:32Z",
        "updatedAt": "2017-01-24T23:45:59Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "> Isn't the CLI good enough? It's pretty much xcopy-able and puts together nuget, msbuild, and roslyn\r\n\r\nThe phrase \"pretty much\" is suspicious.  Is there a supported xcopy way to grab it?  If so then yeah it might be enough. \r\n\r\n",
        "createdAt": "2017-01-25T02:14:32Z",
        "updatedAt": "2017-01-25T02:14:32Z",
        "author": {
          "login": "jaredpar"
        }
      },
      {
        "body": "You'd need CLI + full-framework MSBuild in a zip (or NuGet or whatever). CLI could do NuGet operations but you'd want to use full framework MSBuild (which doesn't come with CLI at the moment) to make sure the build matched the installed version.\r\n\r\nCLI does come in an xcopy mode (not sure the official \"supportedness\"). For example https://dotnetcli.blob.core.windows.net/dotnet/Sdk/rel-1.0.0/dotnet-dev-win-x64.latest.zip",
        "createdAt": "2017-01-25T02:23:17Z",
        "updatedAt": "2017-01-25T02:23:17Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I also would like to have the option of a msbuild xcopy installation for a Full and CLI version.",
        "createdAt": "2017-01-25T10:35:17Z",
        "updatedAt": "2017-01-25T10:35:17Z",
        "author": {
          "login": "mfilippov"
        }
      },
      {
        "body": "As a counter example consider the [instructions for acquiring Maven](https://maven.apache.org/install.html).  They are as simple as it gets.  In summary: download and unzip.  Imagine if it were that easy to get a functional MSBuild environment going. ",
        "createdAt": "2017-01-26T16:06:24Z",
        "updatedAt": "2017-01-26T16:06:31Z",
        "author": {
          "login": "jaredpar"
        }
      },
      {
        "body": "@jaredpar I don't see anyone disagreeing with that goal. We're just not there yet.",
        "createdAt": "2017-01-26T17:24:02Z",
        "updatedAt": "2017-01-26T17:24:02Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald gotcha.\r\n\r\nDo you have any thoughts on what would be the minimum collection of items in that package?  Been pondering this and it seems it would include:\r\n\r\n- Core msbuild\r\n- NuGet.exe\r\n- MSBuild Extensions\r\n    - Roslyn\r\n    - NuGet asset resolution task \r\n    - SDK bits\r\n\r\nIn looking around .Net that seems to be the core set of tools that necessary for building most repos.  Possible I'm missing other core sccenarios though. \r\n\r\n",
        "createdAt": "2017-01-26T17:56:12Z",
        "updatedAt": "2017-01-26T17:56:12Z",
        "author": {
          "login": "jaredpar"
        }
      },
      {
        "body": "@jaredpar If you want the .NET Core version of MSBuild, then you can pretty much get this with the .NET CLI.  The \"Binaries\" download links are to .zip files with xcopy-able contents.  There are also [scripts](https://github.com/dotnet/cli/tree/rel/1.0.0/scripts/obtain) in the CLI repo that you can use to download and extract everything.\r\n\r\nI think the only thing from your list that isn't included is NuGet.exe, and that's because NuGet.exe is for the full .NET Framework and in the CLI, and the NuGet functionality is provided via other means (targets in MSBuild, `dotnet restore`, etc.).",
        "createdAt": "2017-01-26T18:31:48Z",
        "updatedAt": "2017-01-26T18:31:48Z",
        "author": {
          "login": "dsplaisted"
        }
      },
      {
        "body": "@dsplaisted the last time we used `dotnet restore` it couldn't handle our NuGet packages (csproj with project.json files).  That's a bit of a blocker. ",
        "createdAt": "2017-01-26T21:18:39Z",
        "updatedAt": "2017-01-26T21:18:39Z",
        "author": {
          "login": "jaredpar"
        }
      },
      {
        "body": "@dsplaisted addtionally the CLI only supports CoreClr compilers.  That's a break in some cases as we need full framework to run some of the analyzers. ",
        "createdAt": "2017-01-26T21:19:08Z",
        "updatedAt": "2017-01-26T21:19:08Z",
        "author": {
          "login": "jaredpar"
        }
      },
      {
        "body": "Been looking into this again.  I'm still at a loss as to where the NuGet Asset resolution deliverables are coming from.  Can someone get me pointed in the right direction?  That seems to be the one big piece that we don't have info one.\r\n\r\n@dsplaisted \r\n\r\nBeen looking into this more and CLI does not appear to be an option here for [dotnet/roslyn](https://github.com/dotnet/roslyn) in the near term.  Even though it is driving MSBuild it is doing so using CoreCLR.  Hence it rules out any build tasks which are tied to desktop.  \r\n\r\nRoslyn uses a number of those, most notable the VS SDK build tools but including several others.  There is no real gain to be had for these tasks to move to CoreCLR as they target desktop only scenarios.  Hence Roslyn for the forseable future is going to need a full MSBuild to build our Windows assets.  \r\n\r\n\r\n\r\n",
        "createdAt": "2017-02-08T23:42:42Z",
        "updatedAt": "2017-02-08T23:42:42Z",
        "author": {
          "login": "jaredpar"
        }
      }
    ]
  }
}