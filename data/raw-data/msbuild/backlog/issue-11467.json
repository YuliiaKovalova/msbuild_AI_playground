{
  "number": 11467,
  "title": "Indicating a dependency on the outer build of a multi-targeted project",
  "body": "Let's say you have a multi-targeted project A and a project B that references A.\n\nProject A generates a package on build.\n\nProject B doesn't wait until project A builds the Pack target, because ResolveProjectReferences calls the Build target in project A with a specific nearest target framework. So when project A builds, the Pack target is not invoked (`IsInnerBuild == true`):\n\n```\nTarget \"_PackAsBuildAfterTarget\" skipped, due to false condition; ('$(GeneratePackageOnBuild)' == 'true' AND '$(IsInnerBuild)' != 'true') was evaluated as ('true' == 'true' AND 'true' != 'true').\n```\n\nIs there a way to indicate a dependency on the outer build of project A, so that project B waits until project A builds the package? Project B then wants to copy the resulting .nupkg elsewhere but we get a race condition because project B attempts to copy it while the Pack target of project A is still running.",
  "state": "OPEN",
  "createdAt": "2025-02-19T23:16:47Z",
  "updatedAt": "2025-04-03T18:29:35Z",
  "closedAt": null,
  "author": {
    "login": "KirillOsenkov"
  },
  "milestone": null,
  "assignees": {
    "nodes": [
      {
        "login": "rainersigwald"
      }
    ]
  },
  "labels": [
    "Area: Documentation",
    "triaged"
  ],
  "comments": {
    "nodes": [
      {
        "body": "I think what you're asking is for the Project B to have a dependency of the Package of Project A instead of its outputs of referenced framework? Am I understanding this right? If so, there are many issues in SDK/NuGet repos asking for this feature.\n\nCurrently, the way that Outer Build and Project References are designed, the Outer Build is on Project B and not on Project A. i.e., When Project A Build is invoked by Project B through Project Reference, it is always inner build. Since, no outer build happens with Project A, you couldn't wait on Pack since it's not run.\n\n<details>\n<summary><h3>Short-Term Solution</h3></summary>\n\nA simple patch-work solution would be is making sure that we run the build of Project A first and then Project B. In solution build, we could make the Project B declare a dependency on Project A (_before adding as a `ProjectReference`_) so that Project A is build first no matter what.\n\n</details>\n\n<details>\n<summary><h3>Long-Term Solution</h3></summary>\n\nThe best way to solve this (_as long term solution_) is to support referencing Package outputs instead of Build outputs. This could be done in two ways...\n\n1. A `Source`/`Project` metadata on the `PackageReference` that says, refer this package from a project build instead of NuGet feeds. Version could be optional as it can either be made into a validation parameter to match the Version from project file or override the Version from project file.\n\n2. An update on the `OutputItemType` metadata on the `ProjectReference` to include `Package` in addition to `Analyzer`. Version is not needed here as it never supported.\n\nDoing 1st will enable scenarios such as Project/Package swapping as most of us were asking for it since the X Project days. In retrospect, 2nd will be easier to implement and test.\n\n</details>\n\n",
        "createdAt": "2025-04-03T18:29:33Z",
        "author": {
          "login": "Nirmal4G"
        }
      }
    ]
  }
}