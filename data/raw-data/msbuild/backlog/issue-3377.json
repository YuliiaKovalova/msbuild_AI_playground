{
  "number": 3377,
  "title": "Consider shipping separate copies of Msbuild binaries that are loaded to devenv process",
  "body": "Currently the binaries are loaded from the same directory msbuild.exe runs and the msbuild VS component is configured to use the same NGEN configuration as devenv. \r\nThis means that all dependencies that msbuild and VS have in common must be exactly the same, making updating them in VS complicated. \r\n\r\n**Proposal**\r\n\r\nInstall msbuild binaries that are used from within devenv.exe and ServiceHub processes into a separate directory in VS (e.g. `[installDir]\\Common7\\IDE\\CommonExtensions\\Microsoft\\MSBuild`) and load them from there, instead of `[installDir]\\MSBuild\\15.0\\Bin` directory.\r\n\r\n[Update swr file](https://github.com/Microsoft/msbuild/pull/3375) to specify `vs.file.ngenApplication=\"[installDir]\\MSBuild\\15.0\\Bin\\msbuild.exe\"`, so that NGEN of binaries in `MSBuild\\15.0\\Bin` is independent of VS NGEN.\r\n\r\n**Background**\r\n\r\nUpdating VS dependencies concerns the following types of components:\r\n- Components built from the internal VS repository use VS-wide build variables to generate their binding redirects and pull their dependencies from a common location. Updating these is simply matter of changing a few build variables.\r\n\r\n- Components built outside of VS repository that are loaded into devenv process (or other process that shares the same runtime configuration, such as SeviceHub) can be built against lower versions of their VS dependencies. They will be automatically redirected to the version VS specifies in devenv.exe.config.\r\n\r\n- Components built outside of VS repository that are loaded in a separate process using its own runtime configuration do not need to be updated.\r\n\r\n- Components built outside of VS repository that are loaded in BOTH a separate process using its own runtime configuration AND devenv process (e.g. msbuild) are required to have exactly the same version of the dependencies. This sharing makes it hard to update the dependencies in VS since all such components and the VS repository itself need to be updated in a single change.\r\n\r\n\r\nIf this is implemented remove the following entries from `/src/appid/devenv/stub/devenv.urt.config.tt`:\r\n```\r\n        <dependentAssembly>\r\n          <assemblyIdentity name=\"System.Buffers\" publicKeyToken=\"cc7b13ffcd2ddd51\" culture=\"neutral\"/>\r\n          <bindingRedirect oldVersion=\"0.0.0.0-99.9.9.9\" newVersion=\"<#= SystemBuffersVersion #>\"/>\r\n          <codeBase version=\"<#= SystemBuffersVersion #>\" href=\"<#= MSBuildCodeBasePath #>\\System.Buffers.dll\" />\r\n        </dependentAssembly>\r\n        <dependentAssembly>\r\n          <assemblyIdentity name=\"System.Memory\" publicKeyToken=\"cc7b13ffcd2ddd51\" culture=\"neutral\"/>\r\n          <bindingRedirect oldVersion=\"0.0.0.0-99.9.9.9\" newVersion=\"<#= SystemMemoryVersion #>\"/>\r\n          <codeBase version=\"<#= SystemMemoryVersion #>\" href=\"<#= MSBuildCodeBasePath #>\\System.Memory.dll\" />\r\n        </dependentAssembly>\r\n        <dependentAssembly>\r\n          <assemblyIdentity name=\"System.Numerics.Vectors\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\"/>\r\n          <bindingRedirect oldVersion=\"0.0.0.0-99.9.9.9\" newVersion=\"<#= SystemNumericsVectorsVersion #>\"/>\r\n          <codeBase version=\"<#= SystemNumericsVectorsVersion #>\" href=\"<#= MSBuildCodeBasePath #>\\System.Memory.dll\" />\r\n        </dependentAssembly>\r\n```",
  "state": "OPEN",
  "createdAt": "2018-06-06T20:34:37Z",
  "updatedAt": "2024-02-21T16:33:49Z",
  "closedAt": null,
  "author": {
    "login": "tmat"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Backlog"
  },
  "comments": {
    "nodes": [
      {
        "body": "Wouldn't this cause problems when we serialize a type from one of these dependencies on an out-of-proc `msbuild.exe` node and serialize it in the `devenv.exe` node with different versions?",
        "createdAt": "2018-06-19T16:46:16Z",
        "updatedAt": "2018-06-19T16:46:16Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I guess depends on how you do the serialization. What types do you need to transfer? Wouldn't they be mostly just lists of strings?",
        "createdAt": "2018-06-19T17:08:54Z",
        "updatedAt": "2018-06-19T17:09:08Z",
        "author": {
          "login": "tmat"
        }
      },
      {
        "body": "Mostly, yes, but I believe we can wind up serializing arbitrary types.",
        "createdAt": "2018-06-19T17:45:35Z",
        "updatedAt": "2018-06-19T17:45:35Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}