{
  "number": 2350,
  "title": "Detecting and failing on old MSBuild versions",
  "body": "The [dotnet/roslyn](http://github.com/dotnet/roslyn) repo requires the MSBuild from at least VS2017 update 2 to compile. This the earliest version that has a number of SDK bug fixes that we depend on. When built with earlier versions of MSBuild we end up with some fairly cryptic error messages like\r\n\r\n```\r\nRuntimeIdentifier must be set for .NETFramework executables\r\n```\r\n\r\nThis means customers with RTM builds of our product come up to our repos, build and get crpytic error messages. Feel like that makes our build process look broken / flaky. Trying to come up with a better experience here. \r\n\r\nThe ideal is that when you run msbuild on our solution you end up with one or more messages that say:\r\n\r\n```\r\nThis project requires at least MSBuild from VS2017 Update 2. \r\n```\r\n\r\nThat would be actionable by customers and save a lot of headache on our part. Think this would be really easy to do in a BeforeBuild Target / Task. But I can't figure out the best way to map an installation of MSBuild to say VS2017 update 2. Looking on my machine I can see the file version is 15.1.1012.6693. So I could just say if the version is greater than or equal to that then you're at least update 2. Feels a bit hacky though. Is there a better way of doing a version comparison on MSBuild binaries? \r\n\r\n\r\n\r\n",
  "state": "CLOSED",
  "createdAt": "2017-07-24T22:42:17Z",
  "updatedAt": "2024-02-21T17:17:44Z",
  "closedAt": "2018-01-02T18:25:08Z",
  "author": {
    "login": "jaredpar"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "CC @tannergooding ",
        "createdAt": "2017-07-24T22:42:25Z",
        "updatedAt": "2017-07-24T22:42:25Z",
        "author": {
          "login": "jaredpar"
        }
      },
      {
        "body": "We have `$(MSBuildAssemblyVersion)` . . . but it does what it says, and isn't the file version that actually changes. We should introduce (and [document](https://docs.microsoft.com/en-us/visualstudio/msbuild/msbuild-reserved-and-well-known-properties)) a `$(MSBuildVersion)`.\r\n\r\nBut that's just a nicer way to expose the information you're already looking at. We do tag [our releases here](https://github.com/Microsoft/msbuild/releases) with the VS version they correspond to, so you can manually correlate in that way.\r\n\r\nYou could possibly correlate with `$(VisualStudioVersion)`, after https://github.com/Microsoft/msbuild/pull/2258 is fixed (in 15.5). Internally that's a headache across branches of course.\r\n\r\n\u26a0\ufe0f As we've discussed offline, there can be reasons beyond the MSBuild engine + common.targets version that you can depend on. Having a heuristic for MSBuild version will probably catch most things especially for non-Microsoft users, but to be fully accurate you'd need `{MSBuild engine} + {dotnet sdk} + {any additional installed SDKs like VSSDK} + {compiler} + ...` versions.",
        "createdAt": "2017-07-24T23:02:48Z",
        "updatedAt": "2017-07-24T23:02:48Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> We should introduce (and document) a $(MSBuildVersion)\r\n\r\nThat would definitely help the scenarios that I'm interested in. \r\n\r\n> We do tag our releases here with the VS version they correspond to, so you can manually correlate in that way.\r\n\r\nPerfect. Thanks!\r\n\r\n> You could possibly correlate with $(VisualStudioVersion), \r\n\r\nThat's a MSBuild variable that I generally avoid, possibly incorrectly. In my experience it's only set when building through Visual Studio while a lot of our builds are driven strictly through command line. Or maybe I've just gotten unlucky here and it's intended to be set more often. \r\n\r\n> Having a heuristic for MSBuild version will probably catch most things especially for non-Microsoft users, but to be fully accurate you'd need {MSBuild engine} + {dotnet sdk} + {any additional installed SDKs like VSSDK} + {compiler} + ... versions.\r\n\r\nYep. 100% agree. \r\n\r\nBeen asking other teams similar questions to this one today \ud83d\ude04 \r\n\r\n\r\n\r\n",
        "createdAt": "2017-07-25T04:54:08Z",
        "updatedAt": "2017-07-25T04:54:08Z",
        "author": {
          "login": "jaredpar"
        }
      },
      {
        "body": "> > You could possibly correlate with $(VisualStudioVersion),\r\n>\r\n>That's a MSBuild variable that I generally avoid, possibly incorrectly. In my experience it's only set when building through Visual Studio while a lot of our builds are driven strictly through command line. Or maybe I've just gotten unlucky here and it's intended to be set more often.\r\n\r\nI also tend to avoid it so it's hard for me to say this is a bad or wrong policy. The linked #2258 will ensure that it gets set all the time (in future MSBuild versions), but it's not very granular--it'll be 15.0 for the lifetime of the VS2017, so it won't help achieve your stated goal.",
        "createdAt": "2017-07-25T14:20:19Z",
        "updatedAt": "2017-07-25T14:20:19Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Took a stab at implementing this for Roslyn and I think this represents roughly the work required:\r\n\r\nhttps://github.com/dotnet/roslyn/pull/21218/commits/cfb19ce4616c5b573ab82ded92b3a8add3f0b81a\r\n\r\nRecent conversations with the SDK team make me feel even stronger that this is a feature we should have in MSBuild. There are now at least three different functionality levels of MSBuild within 15.0:\r\n\r\n- 15.0: brings SDK 1.0 \r\n- 15.1: brings SDK 1.1. \r\n- 15.3: min-req for SDK 2.0\r\n\r\nThis means using 15.0 to compile SDK 1.1 or 2.0 ends in a lot of cryptic error messages. Hence any repo that moves to SDK 2.0 is basically asking to confuse users until they upgrade to a new MSBuild version. Feel like we're really doing a disservice to our users there. \r\n\r\n\r\n\r\n\r\n",
        "createdAt": "2017-07-31T21:19:42Z",
        "updatedAt": "2017-07-31T21:19:42Z",
        "author": {
          "login": "jaredpar"
        }
      },
      {
        "body": "@jaredpar is your requirement to check for the actual msbuild version or the loaded version of an SDK (e.g. `Microsoft.NET.Sdk`)? The latter could be completely independent of the host msbuild version depending on what the resolvers resolve to.\r\nFrom what I've read, I think the plan is still to ship VS 15.3 with MSBuild 15.3 and SDK 1.1 but include an [SDK resolver](https://github.com/dotnet/cli/tree/master/src/Microsoft.DotNet.MSBuildSdkResolver) that detects installed versions of the 2.0 SDK - so unless someone installs the 2.0 SDK, checking for MSBuild 15.3 is pretty useless if you depend on 2.0 SDK features. The mono version of MSBuild uses the same resolver.\r\n\r\nWhile the SDK [introduced a `UsingMicrosoftNETSdk` property](https://github.com/dotnet/sdk/pull/1242/files), it may make more sense to add a version property as well to allow for checks. (this may be especially useful for nuget packages containing props/targets)",
        "createdAt": "2017-08-01T13:04:12Z",
        "updatedAt": "2017-08-01T13:05:07Z",
        "author": {
          "login": "dasMulli"
        }
      },
      {
        "body": "@dasMulli \r\n\r\n> is your requirement to check for the actual msbuild version or the loaded version of an SDK (e.g. Microsoft.NET.Sdk)?\r\n\r\nEventually both. This particular thread though I'm focused on the MSBuild version checking. The SDK team, as you pointed out, already provides a way to somewhat check the version already. \r\n\r\n> so unless someone installs the 2.0 SDK, checking for MSBuild 15.3 is pretty useless if you depend on 2.0 SDK features.\r\n\r\nIt's actually very useful. If you depend on the 2.0 SDK then you also implicitly depend on MSBuild 15.3. Hence it makes a lot of sense in your `\"BeforeBuild\"` targets to ensure you're on a minimum of MSBuild 15.3. Otherwise why bother with anything else in the compilation? It will just fail with a cryptic error that no one will understand. \r\n\r\n\r\n\r\n\r\n\r\n",
        "createdAt": "2017-08-01T15:40:51Z",
        "updatedAt": "2017-08-01T15:40:51Z",
        "author": {
          "login": "jaredpar"
        }
      }
    ]
  }
}