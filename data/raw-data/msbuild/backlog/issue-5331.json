{
  "number": 5331,
  "title": "x64 MSBuild is getting CLR quirks for .NET 4.0 behaviors",
  "body": "Already reported by @ariccio here: https://github.com/microsoft/msbuild/issues/53\r\nbut a new ticket, because of 64-bit variant isn't solved.\r\n\r\n> As seen in Fix 260 character file name length limitation, there's quite a bit of support for better longer-than-MAX_PATH-filename handling.\r\n> \r\n> Will Buik's response w/regard to fixing it was:\r\n> \r\n>     We understand that this can be a frustrating issue, however, fixing it requires a large and complicated architectural change across different products and features including Visual Studio, TFS, MSBuild and the .NET Framework. Dedicating resources to this work item would come at the expense of many other features and innovation.\r\n> \r\n> I wondered, how big can those architectural changes be (for MSBuild)?\r\n> \r\n> According to Naming Files, Paths, and Namespaces: Maximum Path Length Limitation, (which I have mirrored here ):\r\n> \r\n>     The Windows API has many functions that also have Unicode versions to permit an extended-length path for a maximum total path length of 32,767 characters. This type of path is composed of components separated by backslashes, each up to the value returned in the lpMaximumComponentLength parameter of the GetVolumeInformation function (this value is commonly 255 characters). To specify an extended-length path, use the \"\\\\?\\\" prefix. For example, \"\\\\?\\D:\\very long path\".\r\n>     [other stuff]\r\n> \r\n>     Because you cannot use the \"\\\\?\\\" prefix with a relative path, relative paths are always limited to a total of MAX_PATH characters.\r\n> \r\n> (emphasis mine)\r\n> \r\n> ...Which means that wherever MSBuild uses full paths, we can should be able to just prepend \"\\\\?\\\" to ask for a long path.\r\n> \r\n> Of course, we'd need to rework the existing path-length-workaround hack.\r\n> \r\n> This won't fix the whole ecosystem, but it'll get us just one step closer.\r\n> \r\n> I'd like to fix this myself (it seems simple enough), so in accordance with:\r\n> \r\n>         Contributions must be discussed with the team first, or they will likely be declined. As our process matures and our experience grows, the team expects to take larger contributions.\r\n>         Only contributions referencing an approved Issue will be accepted.\r\n> \r\n> ...this is the suggested issue.\r\n> \r\n> I'm a native developer at heart, not an experienced C# developer, but this shouldn't require anything crazy.\r\n> \r\n> Direct references to MAX_PATH:\r\n> \r\n>     NativeMethods.cs#L15\r\n>     NativeMethodsShared_Tests.cs#L53\r\n>     NativeMethodsShared.cs#L318\r\n>     NativeMethodsShared.cs#L540\r\n>     NativeMethodsShared.cs#L750\r\n>     FileState.cs#L293\r\n>     ComReference.cs#L460\r\n>     TargetsFile_Test.cs#L2041\r\n> ",
  "state": "CLOSED",
  "createdAt": "2020-05-04T08:16:51Z",
  "updatedAt": "2024-04-15T13:50:48Z",
  "closedAt": "2021-06-23T17:48:22Z",
  "author": {
    "login": "mahaase"
  },
  "labels": [
    "Area: Engine",
    "OS: Windows",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "rainersigwald"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Can you provide some repro steps? what kind of project are you building? How exactly are you launching MSBuild?",
        "createdAt": "2020-05-04T18:29:29Z",
        "updatedAt": "2020-05-04T18:29:29Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "In my case, we use [bob ](https://github.com/BobBuildTool/bob) (build automation tool) which uses e.g. CMake to build windows binaries. CMake calls the msbuild by using the CMake VS2019 generators.\r\nIn some cases, the build automation tool creates paths, which resulting with the MAX_PATH issues.\r\nIt isn't possible to handle this paths, they will auto-generated by the tool.\r\n\r\nrefer: https://github.com/microsoft/msbuild/issues/53#issuecomment-566589136\r\n> Has anyone ever seen/verified, that this fix still works?\r\n> \r\n> I enabled long paths in gpedit.\r\n> I checked msbuild.exe resource stuff, still fine.\r\n> I use MSBuild v16.2, but the long path issues still exists.\r\n> \r\n> \"...maximale Pfadlimit des Betriebssystems. Der vollqualifizierte Dateiname muss weniger als 260 Zeichen umfassen\"\r\n> \r\n> The issue occurs inside a build-system, which handles the paths (directory-names a.s.o.) by itself, no way/easy way to change them.\r\n\r\nmore references:\r\n\r\nrefer: https://github.com/microsoft/msbuild/issues/53#issuecomment-511969054\r\n> @rainersigwald was this expected to be fixed in both the 32bit and 64bit (amd64\\msbuild.exe) msbuild binaries? I am getting interesting behavior wherein the 64 bit version throws this error:\r\n> \r\n> ```\r\n> \"S:\\Builds\\GenerateInterop-60R39\\WorkingDirectory\\src\\Dotnet\\Source\\Framework\\Interop\\Project\\ComputersUnlimited.Interop.sln\" (Restore target) (1) ->\r\n> (Restore target) ->\r\n>   C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\\Common7\\IDE\\CommonExtensions\\Microsoft\\NuGet\\NuGet.targets(121,5): error : The specified path, file name, or both are too long. The fully qualified file name must be less than 260 characters, and the directory name must be less than 248 characters. [S:\\Builds\\GenerateInterop-60R39\\WorkingDirectory\\src\\Dotnet\\Source\\Framework\\Interop\\Project\\ComputersUnlimited.Interop.sln]\r\n> ```\r\n> \r\n> Whereas using the 32bit version has no such qualms (restores and builds without issue).\r\n> \r\n> Here's the version from the 64bit and 32bit versions (same):\r\n> \r\n> ```\r\n> Microsoft (R) Build Engine version 16.1.76+g14b0a930a7 for .NET Framework\r\n> Copyright (C) Microsoft Corporation. All rights reserved.\r\n> ```\r\n> \r\n> I can open a new issue if need be but wanted to start here. If this is something I need to get off to the NuGet guys I can do that as well.\r\n\r\nrefer: https://github.com/microsoft/msbuild/issues/53#issuecomment-608451906\r\n> @mahaase same problem here. 32bit is still working, 64bit does show the max_path error. Tested with newest visual studio build tools on newest windows 10. Thanks for the tip with 32bit. I was nearly giving up and taking myself to a knit.\r\n\r\nBut, generally I guess, we don't need any special use-case to reproduce - I guess there is no case, where the issue doesn't occurs if the paths just long enough.",
        "createdAt": "2020-05-05T08:12:02Z",
        "updatedAt": "2020-05-05T08:15:01Z",
        "author": {
          "login": "mahaase"
        }
      },
      {
        "body": "@BenVillalobos, can you try to repro?",
        "createdAt": "2020-05-06T15:48:13Z",
        "updatedAt": "2020-05-06T15:48:13Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@BenVillalobos could you please \ud83d\udc4d ",
        "createdAt": "2020-05-15T07:29:45Z",
        "updatedAt": "2020-05-15T07:29:45Z",
        "author": {
          "login": "mahaase"
        }
      },
      {
        "body": "Shouldn't this have been fixed in the 90s? You know... in the century that ended 20 years ago?",
        "createdAt": "2020-06-04T15:46:21Z",
        "updatedAt": "2020-06-04T18:03:17Z",
        "author": {
          "login": "goldsam"
        }
      },
      {
        "body": "@mahaase (or anyone): Can you try patching your `amd64\\MSBuild.exe.config` file like this:\r\n\r\n```patch\r\ndiff --git a/src/MSBuild/app.amd64.config b/src/MSBuild/app.amd64.config\r\nindex f37149aca..c2023dc93 100644\r\n--- a/src/MSBuild/app.amd64.config\r\n+++ b/src/MSBuild/app.amd64.config\r\n@@ -10,7 +10,7 @@\r\n       <DisableFXClosureWalk enabled=\"true\" />\r\n       <DeferFXClosureWalk enabled=\"true\" />\r\n       <generatePublisherEvidence enabled=\"false\" />\r\n-      <AppContextSwitchOverrides value=\"Switch.System.Security.Cryptography.UseLegacyFipsThrow=false\" />\r\n+      <AppContextSwitchOverrides value=\"Switch.System.Security.Cryptography.UseLegacyFipsThrow=false;Switch.System.IO.UseLegacyPathHandling=false;Switch.System.IO.BlockLongPaths=false\" />\r\n       <assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\">\r\n         <dependentAssembly>\r\n           <assemblyIdentity name=\"Microsoft.Build.Framework\" culture=\"neutral\" publicKeyToken=\"b03f5f7f11d50a3a\" />\r\n```\r\n\r\n? That appears to resolve the problem for me.",
        "createdAt": "2020-06-25T21:41:51Z",
        "updatedAt": "2020-06-25T21:41:51Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> @mahaase (or anyone): Can you try patching your `amd64\\MSBuild.exe.config` file like this:\r\n> \r\n> ```diff\r\n> -      <AppContextSwitchOverrides value=\"Switch.System.Security.Cryptography.UseLegacyFipsThrow=false\" />\r\n> +      <AppContextSwitchOverrides value=\"Switch.System.Security.Cryptography.UseLegacyFipsThrow=false;Switch.System.IO.UseLegacyPathHandling=false;Switch.System.IO.BlockLongPaths=false\" />\r\n> ```\r\n> \r\n> ? That appears to resolve the problem for me.\r\n\r\nI can confirm that this makes the long path errors go away. If anyone needs a workaround for this in their CI system, the following step before building does the trick for our queue.\r\n\r\n```yaml\r\n  - task: PowerShell@2\r\n    displayName: Fix LongPath bug in MsBuild\r\n    inputs:\r\n      targetType: 'inline'\r\n      script: |\r\n        $msbExeConfigPath=\"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\\MSBuild\\Current\\bin\\amd64\\msbuild.exe.config\"\r\n        [ xml ]$msbExeConfig = Get-Content -Path $msbExeConfigPath\r\n        $msbExeConfig.configuration.runtime.AppContextSwitchOverrides.SetAttribute(\"value\", \"Switch.System.Security.Cryptography.UseLegacyFipsThrow=false;Switch.System.IO.UseLegacyPathHandling=false;Switch.System.IO.BlockLongPaths=false\")\r\n        $msbExeConfig.Save($msbExeConfigPath)\r\n```\r\n",
        "createdAt": "2020-06-26T18:25:44Z",
        "updatedAt": "2020-06-26T18:25:44Z",
        "author": {
          "login": "dannyvv"
        }
      },
      {
        "body": "@rainersigwald: Thank you so much for a quick turnaround!",
        "createdAt": "2020-06-26T18:49:11Z",
        "updatedAt": "2020-06-26T18:49:11Z",
        "author": {
          "login": "dannyvv"
        }
      },
      {
        "body": "What a time to be alive! :)",
        "createdAt": "2020-06-26T18:50:35Z",
        "updatedAt": "2020-06-26T18:50:35Z",
        "author": {
          "login": "Piedone"
        }
      },
      {
        "body": "I'm actually going to reactivate this as a more general problem; Something\u2122 is going wrong that's causing .NET Framework to give us the .NET 4.0 behaviors for everything instead of .NET 4.7.2+ . . . only in our x64 MSBuild.exe. I'm investigating with some CLR folks.",
        "createdAt": "2020-06-29T19:11:15Z",
        "updatedAt": "2020-06-29T19:11:15Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "This turns out to be due to a bug in .NET Framework (internal link: https://dev.azure.com/devdiv/DevDiv/_workitems/edit/1148752).\r\n\r\nIf you load an assembly that needs a `codeBase` redirect to a different location, part of the CLR accidentally checks the target framework of the running application before it has actually been set. That causes .NET to provide compatibility shims as though the application targeted .NET 4.0, instead of whatever it actually targeted. That includes the `System.IO.BlockLongPaths` behavior (because that was the only behavior in .NET 4.0).\r\n\r\nThe Runtime folks are going to look the underlying bug. Fortunately, we don't really _need_ the `codeBase` for x64--we still ship the assemblies in the `bin\\amd64` folder. #5471 drops the `codeBase` to work around the Framework bug.",
        "createdAt": "2020-06-30T15:31:48Z",
        "updatedAt": "2020-06-30T15:31:48Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Reactivating: just removing the `codeBase` caused https://github.com/microsoft/msbuild/issues/5494.\r\n\r\nThe current state is that 16.7 gets all the 4.0 behavior (same as 16.6) _except_ for long paths (thanks to #5460). We should try to come up with a better fix for 16.8 (and ship it in an earlier preview this time \ud83d\ude2c).",
        "createdAt": "2020-07-10T15:43:20Z",
        "updatedAt": "2020-07-10T15:43:20Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Any updates? long path is a real issue...",
        "createdAt": "2021-04-07T10:13:58Z",
        "updatedAt": "2021-04-07T10:13:58Z",
        "author": {
          "login": "spanevin"
        }
      },
      {
        "body": "I thought this was fixed in 16.9, but I still had the issue. I've examined some of the commits here and it seems it was once part of the code base, but then [removed](https://github.com/dotnet/msbuild/commit/d98fde4795add51613433cb5def9c7cbd09f4f15). Any reason why? Now the target release is 16.10...\r\n\r\nBtw, manually modifying `amd64\\MSBuild.exe.config` did the trick, so I'm just wondering why this is still not official...",
        "createdAt": "2021-04-12T08:34:18Z",
        "updatedAt": "2021-04-12T08:34:18Z",
        "author": {
          "login": "odalet"
        }
      },
      {
        "body": "up",
        "createdAt": "2021-05-14T09:22:05Z",
        "updatedAt": "2021-05-14T09:22:05Z",
        "author": {
          "login": "spanevin"
        }
      },
      {
        "body": "https://github.com/dotnet/msbuild/milestone/51\r\n\r\nI don't see this issue here, where else I can check that target release is really 16.10 ?",
        "createdAt": "2021-05-14T09:24:21Z",
        "updatedAt": "2021-05-14T09:24:21Z",
        "author": {
          "login": "spanevin"
        }
      },
      {
        "body": "Hi, I was brought here by https://developercommunity.visualstudio.com/t/msbuild-editorconfig-filename-length-issues/1462559\r\n\r\nAnd I had updated my `C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\MSBuild\\Current\\Bin\\amd64\\MSBuild.exe.config` to have \r\n``` XML\r\n<AppContextSwitchOverrides value=\"...... Switch.System.Security.Cryptography.UseLegacyFipsThrow=false;Switch.System.IO.UseLegacyPathHandling=false;Switch.System.IO.BlockLongPaths=false\" />\r\n```\r\n\r\nBut my VS still not able to build properly and showing \r\n```\r\nError MSB3491 Could not write lines to file \u201cobj\\Debug\\netcoreapp3.1\\MySuperDeepProject.UnitTests.GeneratedMSBuildEditorConfig.editorconfig\u201d. Path: obj\\Debug\\netcoreapp3.1\\MySuperDeepProject.UnitTests.GeneratedMSBuildEditorConfig.editorconfig exceeds the OS max path limit. The fully qualified file name must be less than 260 characters.\r\n```\r\nThe error point to this line in `C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\MSBuild\\Current\\Bin\\Roslyn\\Microsoft.Managed.Core.targets` which is not my project\r\n![image](https://user-images.githubusercontent.com/4518597/129876480-581e8309-f857-410f-a104-29d9da4e502e.png)\r\n\r\nTried running `dotnet build` directly in the root folder and it can build properly.\r\n\r\nRunning Microsoft Visual Studio Community 2019 Version 16.11.1",
        "createdAt": "2021-08-18T09:44:35Z",
        "updatedAt": "2021-08-18T09:54:45Z",
        "author": {
          "login": "jasonycw"
        }
      },
      {
        "body": "I have this problem with Visual Studio Community 2022\r\n```\r\n2>MSBuild version 17.3.1+2badb37d1 for .NET Framework\r\n....\r\n6>C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\MSBuild\\Microsoft\\VC\\v170\\Microsoft.CppBuild.targets(383,5): error MSB3491: Could not write lines to file \"test_PoissonLogLikelihoodWithLinearModelForMeanAndProjData.dir\\RelWithDebInfo\\test_Poi.AB258268.tlog\\test_PoissonLogLikelihoodWithLinearModelForMeanAndProjData.lastbuildstate\". Path: test_PoissonLogLikelihoodWithLinearModelForMeanAndProjData.dir\\RelWithDebInfo\\test_Poi.AB258268.tlog\\test_PoissonLogLikelihoodWithLinearModelForMeanAndProjData.lastbuildstate exceeds the OS max path limit. The fully qualified file name must be less than 260 characters. [C:\\Users\\krisf\\Documents\\devel\\buildVC22\\SIRF-SuperBuild\\builds\\STIR\\build\\src\\recon_test\\test_PoissonLogLikelihoodWithLinearModelForMeanAndProjData.vcxproj]\r\n```\r\nI've tried patching the `MSBuild.exe.config` but that didn't help.",
        "createdAt": "2022-09-15T07:39:32Z",
        "updatedAt": "2022-09-15T07:39:32Z",
        "author": {
          "login": "KrisThielemans"
        }
      },
      {
        "body": "> I have this problem with Visual Studio Community 2022\r\n\r\napologies. This wasn't `msbuild`, it was actually the OS path limit, as it said... \r\n\r\n(Setting the registry key via `Set-ItemProperty 'HKLM:\\System\\CurrentControlSet\\Control\\FileSystem' -Name 'LongPathsEnabled' -value 1` wasn't enough for me (Windows 10 Pro). I had to use the Group Policy editor as well.)\r\n\r\nApologies for the noise.",
        "createdAt": "2022-11-03T16:06:13Z",
        "updatedAt": "2022-11-03T16:06:13Z",
        "author": {
          "login": "KrisThielemans"
        }
      },
      {
        "body": "This bug still exists. (17.9.6, x64, .NET8) Why isn't it fixed?\r\nIn my case, an error occurs even with a folder length of 122 characters. Is it because it is a non-ascii country?\r\n`Set-ItemProperty 'HKLM:\\System\\CurrentControlSet\\Control\\FileSystem' -Name 'LongPathsEnabled' -value 1` is not works\r\n![image](https://github.com/dotnet/msbuild/assets/32407205/603e6ee8-aaea-44b8-8db2-74f6a3923014)\r\npatching \"MSBuild.exe.config\" is not works\r\n",
        "createdAt": "2024-04-15T02:54:41Z",
        "updatedAt": "2024-04-15T03:28:13Z",
        "author": {
          "login": "neominky"
        }
      },
      {
        "body": "@neominky please file a new issue describing your problem, including details about how you are launching the build.",
        "createdAt": "2024-04-15T13:50:47Z",
        "updatedAt": "2024-04-15T13:50:47Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}