{
  "number": 1957,
  "title": "Project dependency specified in .sln file, causes build to fail, on Unix",
  "body": "I have a `.sln` with:\r\n\r\nProjects A, B and C.\r\nA has a `ProjectReference` to B\r\nB depends on C, specified in the `.sln` file\r\n```\r\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"LibB\", \"LibB\\LibB.csproj\", \"{34ED4F6B-145E-467E-AFFB-48B3237878D3}\"\r\n        ProjectSection(ProjectDependencies) = postProject\r\n                        {9C743F94-9DA8-422B-8FB8-DEB139216381} = {9C743F94-9DA8-422B-8FB8-DEB139216381}\r\n        EndProjectSection\r\nEndProject\r\n```\r\n\r\nBuilding this with msbuild:\r\n\r\n```\r\n\"/Users/ankit/Projects/SlnProjectDepsBug/SlnProjectDepsBug.sln\" (default target) (1) ->\r\n\"/Users/ankit/Projects/SlnProjectDepsBug/LibB/LibB.csproj.metaproj\" (default target) (5) ->\r\n  /Users/ankit/Projects/SlnProjectDepsBug/LibB/LibB.csproj.metaproj : error MSB4025: The project file could not be loaded. Could not find file \"/Users/ankit/Projects/SlnProjectDepsBug/LibB/LibB.csproj.metaproj\".\r\n```\r\n\r\nFrom what I able to gather, the `SolutionProjectGenerator` creates a `ProjectInstance` for `LibB.csproj.metaproj`. When `RequestBuilder` starts to build the `.sln.metaproj` and wants to build `LibB.csproj.metaproj`, it doesn't seem to have access to the earlier `ProjectInstance` and tries to create a new one, which tries to access the file, but since that was just in-memory, it fails.\r\n\r\nIf you run it with `MSBuildEmitSolution=1` then the `LibB.csproj.metaproj` is written to disk and the build succeeds.\r\n\r\nAlso, there is a bug due to which if you use `MSBUILDEMITSOLUTION=1` (note the case!), the `.sln.metaproj.tmp` is written to disk before the `.csproj.metaproj` has been added to it, so you won't see it there. I'll add open a PR for that.",
  "state": "CLOSED",
  "createdAt": "2017-04-07T22:12:10Z",
  "updatedAt": "2024-02-21T17:20:04Z",
  "closedAt": "2018-02-20T23:37:16Z",
  "author": {
    "login": "radical"
  },
  "labels": [
    "bug",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Consider for Next Major Version"
  },
  "comments": {
    "nodes": [
      {
        "body": "This old blog should be relevant: https://blogs.msdn.microsoft.com/msbuild/2010/12/21/incorrect-solution-build-ordering-when-using-msbuild-exe/",
        "createdAt": "2017-04-07T22:30:22Z",
        "updatedAt": "2017-04-07T22:30:22Z",
        "author": {
          "login": "radical"
        }
      },
      {
        "body": "Team Triage:\r\nMoving this out. @radical you mention this is a regression? Does this behavior work in VS2015 and is broken in VS2017?",
        "createdAt": "2017-04-13T18:13:14Z",
        "updatedAt": "2017-04-13T18:13:14Z",
        "author": {
          "login": "AndyGerlicher"
        }
      },
      {
        "body": "I was mistaken. It doesn't look like a regression. I will investigate why this is happening on mono/mac though.",
        "createdAt": "2017-04-25T14:53:51Z",
        "updatedAt": "2017-04-25T14:53:51Z",
        "author": {
          "login": "radical"
        }
      },
      {
        "body": "I'll open a PR for this in a few days. This is the patch that I am using: https://github.com/mono/msbuild/commit/4a3d1b1da80606c7b2e3c602cb23f10ec7865921",
        "createdAt": "2017-05-02T09:04:40Z",
        "updatedAt": "2017-05-02T09:04:40Z",
        "author": {
          "login": "radical"
        }
      },
      {
        "body": "Likewise experiencing this issue on Mac - project solution from Visual Studio 2017, errors when built on VS Code.\r\n\r\nSolution excerpt:\r\n```Microsoft Visual Studio Solution File, Format Version 12.00\r\n# Visual Studio 15\r\nVisualStudioVersion = 15.0.26730.12\r\nMinimumVisualStudioVersion = 10.0.40219.1\r\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"Archive\", \"Archive\\Archive.csproj\", \"{08C511A8-3F8F-4182-A9C0-7D15262F73A2}\"\r\n\tProjectSection(ProjectDependencies) = postProject\r\n\t\t{5E854290-82A9-443D-83A8-BC85354817FD} = {5E854290-82A9-443D-83A8-BC85354817FD}\r\n\tEndProjectSection\r\nEndProject\r\n```\r\n\r\nGenerates error on build:\r\n\r\n> Microsoft (R) Build Engine version 15.3.409.57025 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n>\r\n>/Users/jsturges/Projects/archive-db/Archive/Archive.csproj.metaproj : error MSB4025: The project file could not be loaded. Could not find file '/Users/jsturges/Projects/archive-db/Archive/Archive.csproj.metaproj'.\r\n>\r\n>Build FAILED.\r\n\r\nVS Code, Version 1.15.1 (1.15.1) 41abd21\r\nVisual Studio 2017, Version 15.3.3\r\nMS Build: 15.3.409.57025\r\n\r\n.Net Core 2.0 project specifying dependency to .Net Standard 2.0 library.\r\n\r\nRemoving the post project dependency from the .sln file builds without errors.",
        "createdAt": "2017-09-01T21:47:37Z",
        "updatedAt": "2017-09-01T21:48:44Z",
        "author": {
          "login": "jasonsturges"
        }
      },
      {
        "body": "I have the same issue on Linux when the project dependency is specified in the `.sln`, I get the following error:\r\n```\r\nerror MSB4025: The project file could not be loaded. Could not find file '/home/user/project/project.csproj.metaproj'.\r\n```\r\n\r\nBut it works perfectly on Visual Studio 2017 and Visual Studio for Mac.\r\n\r\nRemoving the dependency in the `.sln` fixes the issue on Linux.\r\n\r\nI'm using .NET Core 2.0 SDK.",
        "createdAt": "2017-09-17T21:54:20Z",
        "updatedAt": "2017-09-17T21:54:20Z",
        "author": {
          "login": "bouassaba"
        }
      },
      {
        "body": "while\r\n`dotnet publish -c Release -o out`\r\nis working on windows i had the same problem on linux. For me it got fixed by passing the csproj file like:\r\n`dotnet publish -c Release -o out project.csproj`\r\nit still builds the entire solution (maybe as in my case the project in project.csproj depends on all other projects)",
        "createdAt": "2017-10-25T16:06:16Z",
        "updatedAt": "2017-10-25T16:11:37Z",
        "author": {
          "login": "mahald"
        }
      },
      {
        "body": "Same here: https://travis-ci.org/Saibamen/BriskChat/jobs/293200595",
        "createdAt": "2017-10-26T19:56:38Z",
        "updatedAt": "2017-10-26T19:56:38Z",
        "author": {
          "login": "Saibamen"
        }
      },
      {
        "body": "My issue is slightly different, but I found a solution that might help you out.\r\n\r\nIn my Solution.sln, I have 3 csproj :\r\n\r\n- A is standalone\r\n- B depends upon A\r\n- C depends upon both B and A\r\n\r\nWhen I do a \"dotnet restore\", everything is fine, but doing a \"dotnet publish ./MySolution.sln -c Release -o ./obj/Docker/publish\", it gave me errors about .csproj.metaproj missing.  But removing C's dependency on A seems to have fixed the problem.\r\n\r\nNot saying this is the best solution (or even feasible in some situation), but I managed to fix it this way on my end.\r\n\r\nedit : Just to mention, I'm running on Core 2.0 SDK and Ubuntu 16.04",
        "createdAt": "2017-11-15T20:57:01Z",
        "updatedAt": "2017-11-15T20:57:49Z",
        "author": {
          "login": "AlexandreOuellet"
        }
      },
      {
        "body": "To add to my previous fix : It worked for some sln, but not all of them (I don't know why it actually worked, maybe simply touching the csproj made a difference?)\r\n\r\nAnyway, the fix is actually what @jasonsturges mentionned : the proper solution to remove the postProject part of your .sln file (anything between ProjectSection and EndProjectSection, including those tags)",
        "createdAt": "2017-11-15T21:35:58Z",
        "updatedAt": "2017-11-16T14:26:44Z",
        "author": {
          "login": "AlexandreOuellet"
        }
      },
      {
        "body": "When deps are not specified in a solution file they're all published with a Debug configuration for some reason. When deps are specified than each and every dep requires framework and rid specified in csproj. So both ways are not working properly",
        "createdAt": "2017-11-16T21:24:52Z",
        "updatedAt": "2017-11-16T21:24:52Z",
        "author": {
          "login": "sherlock1982"
        }
      },
      {
        "body": "My .net core 2.0 console application runs properly in Windows OS. But I m having problem running it on RHEL7.\r\n\r\nIn my .sln file, I have 6-7 projects (.Net Stansard Library 2.0). Some projects depends on some other. But my solution file does not contain any word like **postProject**.\r\n\r\nWhen I run following command, it gives no error and command prompt comes back without doing anything. Also it gives no error or nothing.\r\n$ dotnet AppName.dll 1\r\n1 is command line argument.\r\n\r\nMy application uses SQL connection, Reflection, Third Party dlls( developed in c++), socket connection etc.\r\n\r\nI also tried running a demo application with command line arguments, SQL connection. It works fine in RHEL7.\r\nMy application dll has version like 1.2.3.4.\r\nWhile Publishing my code, it gives target runtime as Portable. But another sample with target runtime as Portable wotks fine in RHEL7.\r\n\r\nWhat could be the problem? If you have any idea regarding this please share.",
        "createdAt": "2017-11-20T05:59:31Z",
        "updatedAt": "2017-11-20T05:59:31Z",
        "author": {
          "login": "ms0713"
        }
      },
      {
        "body": "yes deleting /obj during the build fixed it for me",
        "createdAt": "2017-11-20T09:08:25Z",
        "updatedAt": "2017-11-20T09:08:25Z",
        "author": {
          "login": "forki"
        }
      },
      {
        "body": "I can confirm that the workaround is to manually edit the .sln file and change the paths to use slashes instead of backslashes. The solution will then correctly restore on Windows and Linux. The changes I just made to make Froto.sln restore on Travis CI:\r\n\r\nhttps://github.com/ctaggart/froto/commit/fb2bf7f3e8e39fd5ccf096b14a0620d59647933f\r\n\r\nThis is a bug. We should have to make this change to make it work on Unix.",
        "createdAt": "2017-12-25T15:15:56Z",
        "updatedAt": "2017-12-25T15:16:44Z",
        "author": {
          "login": "ctaggart"
        }
      },
      {
        "body": "Same here, \r\nI just add the following POS to my build script:\r\n\r\n```bash\r\nif [ \"$(uname)\" == \"Linux\" ]; then\r\n  echo \"Unfucking xxx.sln for ${__BuildOS}\"\r\n  sed -i 's#\\\\#/#g' xxx.sln\r\nfi\r\n```",
        "createdAt": "2017-12-27T12:42:39Z",
        "updatedAt": "2017-12-27T12:46:42Z",
        "author": {
          "login": "damageboy"
        }
      },
      {
        "body": "Same with .net core sdk 2.1.3",
        "createdAt": "2018-01-19T09:43:48Z",
        "updatedAt": "2018-01-19T09:43:48Z",
        "author": {
          "login": "enricosada"
        }
      },
      {
        "body": "Hey @rainersigwald I'm experiencing this issue with dotnet Core, when will your commit be made into a release to resolve the issue?\r\n\r\nThe suggested `sed -i 's#\\\\#/#g' xxx.sln` on linux fixes the build, but the same change on windows will cause the build to fail",
        "createdAt": "2018-03-01T05:05:30Z",
        "updatedAt": "2018-03-01T05:05:30Z",
        "author": {
          "login": "braunsonm"
        }
      },
      {
        "body": "@ChaosCA It should be in 2.1-preview2; unfortunately it didn't make -preview1.",
        "createdAt": "2018-03-01T15:09:06Z",
        "updatedAt": "2018-03-01T15:09:06Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "This is happening again in my solution first created on mac, then migrated to VS2017. Now when building the solution on macosx again I get the error:\r\n\r\n> /src/Informedica.GenUtils.Lib/Informedica.GenUtils.Lib.fsproj.metaproj : error MSB4025: The project file could not be loaded. Could not find file 'src/Informedica.GenUtils.Lib/Informedica.GenUtils.Lib.fsproj.metaproj'.",
        "createdAt": "2018-04-27T08:23:46Z",
        "updatedAt": "2018-04-27T08:23:46Z",
        "author": {
          "login": "halcwb"
        }
      },
      {
        "body": "@halcwb Editing the slashes back to `/` should keep it working cross-plat until VS overwrites them on save. A fixed .NET Core SDK will be released before too long.",
        "createdAt": "2018-04-27T16:19:46Z",
        "updatedAt": "2018-04-27T16:19:46Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}