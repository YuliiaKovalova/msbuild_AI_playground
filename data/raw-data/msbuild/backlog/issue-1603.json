{
  "number": 1603,
  "title": "Setting BaseIntermediateOutputPath correctly in a SDK-based project is hard",
  "body": "NuGet restore drops the project.assets.json file to the `$(BaseIntermediateOutpath)`. If a user customizes that by setting the property in a SDK-based project like so:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n   <PropertyGroup>\r\n         <BaseIntermediateOutputPath>C:\\blah</BaseIntermediateOutputPath>\r\n   </PropertyGroup>\r\n</Project>\r\n```\r\n\r\nThen the project.assets.json gets dropped to that folder correctly. However if there are nuget packages in this project that have tasks\\targets then the generated project.nuget.g.props\\targets are imported by Microsoft.Common.Props. Therefore BaseIntermediateOutputPath needs to be defined before the import of the common props and for that they have to know to expand the SDK import:\r\n\r\n```xml\r\n<Project>\r\n   <PropertyGroup>\r\n         <BaseIntermediateOutputPath>C:\\blah</BaseIntermediateOutputPath>\r\n   </PropertyGroup>\r\n   <Import Sdk=\"Microsoft.NET.Sdk\" Project=\"Sdk.props\" />\r\n...\r\n   <Import Sdk=\"Microsoft.NET.Sdk\" Project=\"Sdk.targets\" />\r\n</Project>\r\n```\r\n\r\nI don't know what we can do to fix this but logging an issue here so that atleast this serves as documentation for people running into this issue.\r\n",
  "state": "CLOSED",
  "createdAt": "2017-01-24T19:40:23Z",
  "updatedAt": "2024-02-21T17:22:35Z",
  "closedAt": "2018-06-18T18:49:08Z",
  "author": {
    "login": "srivatsn"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "An easier way is to use the new `Sdk` attribute for import elements:\r\n```xml\r\n<Project>\r\n  <PropertyGroup>\r\n    <BaseIntermediateOutputPath>C:\\blah</BaseIntermediateOutputPath>\r\n  </PropertyGroup>\r\n\r\n  <Import Project=\"Sdk.props\" Sdk=\"Microsoft.NET.Sdk/1.0.0\" />\r\n...\r\n  <Import Project=\"Sdk.targets\" Sdk=\"Microsoft.NET.Sdk/1.0.0\" />\r\n</Project>\r\n```\r\nSee #1493\r\n",
        "createdAt": "2017-01-26T00:01:27Z",
        "updatedAt": "2017-01-26T00:01:55Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "Has that syntax been implemented already?",
        "createdAt": "2017-01-26T00:03:19Z",
        "updatedAt": "2017-01-26T00:03:19Z",
        "author": {
          "login": "srivatsn"
        }
      },
      {
        "body": "According to this diff it was: https://github.com/Microsoft/msbuild/pull/1492/files#diff-325c8a74f9ae27c1b3f8870e9cb64678L2310",
        "createdAt": "2017-01-26T00:04:38Z",
        "updatedAt": "2017-01-26T00:05:34Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "For posterity: another option is using a `Directory.Build.props` to set this. See https://github.com/dotnet/sdk/issues/802.",
        "createdAt": "2017-02-06T16:00:15Z",
        "updatedAt": "2017-02-06T16:00:15Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Is there are \"correct\" solution for this? All I'm trying to do is move the `bin\\` and `obj\\` folders that .NET Core projects dump in the project folder into a `Build\\` directory at the solution level so they're separate from the source code. I added this:\r\n\r\n``` xml\r\n    <PropertyGroup>\r\n        <OutputPath>$(SolutionDir)\\Build\\$(ProjectName)\\bin\\$(Configuration)</OutputPath>\r\n        <BaseIntermediateOutputPath>$(SolutionDir)\\Build\\$(ProjectName)\\obj</BaseIntermediateOutputPath>\r\n    </PropertyGroup>\r\n```\r\n\r\nto the top of our .csproj files, but it appears that `$(ProjectName)` is not set at this point? Is there some correct way to accomplish this as it's driving me crazy. :) Note that it appears that `$(SolutionDir)` works fine. It also looks like `OutputPath` always has the `netcoreapp1.1` or `netstandard1.6.1` folder appended as well.",
        "createdAt": "2017-02-28T16:25:59Z",
        "updatedAt": "2017-02-28T16:25:59Z",
        "author": {
          "login": "Ziflin"
        }
      },
      {
        "body": "Both moving the imports as in https://github.com/Microsoft/msbuild/issues/1603#issuecomment-275271522 and using a `Directory.Build.props` as in https://github.com/Microsoft/msbuild/issues/1603#issuecomment-277726334 are \"correct\", @Ziflin. Chose whichever meets your needs better.",
        "createdAt": "2017-02-28T16:36:43Z",
        "updatedAt": "2017-02-28T16:36:43Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I don't have an imports section. This is just a simple .NET Core Console App and Lib solution. So the console app uses: \r\n``` xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n    <PropertyGroup>\r\n        <OutputType>Exe</OutputType>\r\n        <TargetFramework>netcoreapp1.1</TargetFramework>\r\n    </PropertyGroup>\r\n</Project>\r\n```\r\nAnd I added the PropertyGroup in my first comment above this PropertyGroup. Is $(ProjectName) supposed to be valid or is there some other variable name I can use that is for the project's name? It's basically treating it like it's not set.\r\n\r\nSorry I'm not clear on how to use the Directory.Build.props from that other comment/issue..",
        "createdAt": "2017-02-28T16:52:15Z",
        "updatedAt": "2017-02-28T16:52:15Z",
        "author": {
          "login": "Ziflin"
        }
      },
      {
        "body": "@Ziflin your two options are:\r\n\r\nCreate a file named `Directory.Build.props` in a folder above your projects (maybe next to your solution? you know your repo layout best) that sets the properties you want to set. It will be automatically included in any project below it in the directory structure.\r\n\r\nOr change your project file from the implicit imports model to explicit imports, so that you can control order. These are exactly identical:\r\n\r\n```diff\r\n-<Project Sdk=\"Microsoft.NET.Sdk\">\r\n+<Project>\r\n+ <Import Project=\"Sdk.props\" Sdk=\"Microsoft.NET.Sdk\" />\r\n    <PropertyGroup>\r\n        <OutputType>Exe</OutputType>\r\n        <TargetFramework>netcoreapp1.1</TargetFramework>\r\n    </PropertyGroup>\r\n+ <Import Project=\"Sdk.targets\" Sdk=\"Microsoft.NET.Sdk\" />\r\n</Project>\r\n```\r\n\r\nAfter you've made the implicit imports explicit, you can add or move things around them to affect relative order.",
        "createdAt": "2017-02-28T17:17:05Z",
        "updatedAt": "2017-02-28T17:17:05Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald Thanks for the help, but neither of those methods seem to have any effect on the fact that the `$(ProjectName)` variable is not set which makes it very difficult to do something like:\r\n``` xml\r\n<BaseIntermediateOutputPath>$(SolutionDir)\\Build\\$(ProjectName)\\obj</BaseIntermediateOutputPath>\r\n```\r\nAnd have it create a `Build\\MyProject\\obj` folder under the solution. If I hardcode a name for $(ProjectName):\r\n```xml\r\n<BaseIntermediateOutputPath>$(SolutionDir)\\Build\\MyProject\\obj</BaseIntermediateOutputPath>\r\n```\r\nthen it works as expected, but then I am unable to use a single `Directory.Build.props` file for all the projects in the solution. The `$(SolutionDir)` and `$(Configuration)` variables seem to work fine so I wasn't sure if I just had the name wrong for the project name variable or if it was a bug.\r\n",
        "createdAt": "2017-02-28T18:12:15Z",
        "updatedAt": "2017-02-28T18:12:15Z",
        "author": {
          "login": "Ziflin"
        }
      },
      {
        "body": "Would `$(MSBuildProjectName)`, which is a [well-known property](https://docs.microsoft.com/en-us/visualstudio/msbuild/msbuild-reserved-and-well-known-properties) automatically populated by MSBuild based on the file name, work for you?",
        "createdAt": "2017-02-28T18:51:37Z",
        "updatedAt": "2017-02-28T18:51:37Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "That works perfectly! Sorry for the confusion. I saw that `$(SolutionDir)` was working and assumed `$(ProjectName)` would as well.",
        "createdAt": "2017-02-28T19:09:09Z",
        "updatedAt": "2017-02-28T19:09:09Z",
        "author": {
          "login": "Ziflin"
        }
      },
      {
        "body": "> From @srivatsn \r\n`BaseIntermediateOutputPath` needs to be defined before the import of the common props and for that they have to know to expand the SDK import.\r\n\r\nEven easier way is to generalize implicit imports placement.\r\n\r\n```xml\r\n<Project Sdk=\"Custom.Sdk\">\r\n  <PropertyGroup Evaluation=\"BeforeImplicitProps\">\r\n    <BaseIntermediateOutputPath>..\\..\\Build</BaseIntermediateOutputPath>\r\n  </PropertyGroup>\r\n...\r\n  <PropertyGroup Evaluation=\"AfterImplicitTargets\">\r\n    <SomeImportantPropertyAfterTargets>Value!!!</SomeImportantPropertyAfterTargets>\r\n  </PropertyGroup>\r\n</Project>\r\n```\r\n\r\nwould translate to this\r\n\r\n```xml\r\n<Project>\r\n  <PropertyGroup>\r\n    <BaseIntermediateOutputPath>..\\..\\Build</BaseIntermediateOutputPath>\r\n  </PropertyGroup>\r\n\r\n  <Import Project=\"Sdk.props\" Sdk=\"Custom.Sdk/1.0.0\" />\r\n...\r\n  <Import Project=\"Sdk.targets\" Sdk=\"Custom.Sdk/1.0.0\" />\r\n\r\n  <PropertyGroup>\r\n    <SomeImportantPropertyAfterTargets>Value!!!</SomeImportantPropertyAfterTargets>\r\n  </PropertyGroup>\r\n</Project>\r\n```\r\n\r\nHere, assume Custom Sdk uses common Sdk. This is helpful in creating custom .proj file with Sdk story to them like I can use any custom Sdk that uses common Sdk or itself. See Issue #1686\r\n\r\nThis is one way to fix the problem and It does it even before all the props and after all the targets, which would be useful for many debugging and logging scenarios.",
        "createdAt": "2017-09-20T19:30:30Z",
        "updatedAt": "2017-09-20T20:52:55Z",
        "author": {
          "login": "Nirmal4G"
        }
      },
      {
        "body": "@Nirmal4G `Directory.Build.props` is imported before `BaseIntermediateOutputPath` is set so I would recommend you just use that.",
        "createdAt": "2017-09-20T19:50:22Z",
        "updatedAt": "2017-09-20T19:50:22Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "@jeffkl I know!\r\n\r\nBut I want to set some properties (**within the Project file**) even before all the implicit props and have some targets after all the implicit targets, something along those lines!",
        "createdAt": "2017-09-20T20:28:14Z",
        "updatedAt": "2017-09-25T19:59:07Z",
        "author": {
          "login": "Nirmal4G"
        }
      },
      {
        "body": "Where in the SDK props do we implicitly import .props from nuget packages?  I wanted to look at it and see if I can come up with any other clever tricks for my Sdk props (trying to avoid Directory.Build.props for the time being), but I can't find the actual place where we look at the project assets and import them.",
        "createdAt": "2017-10-25T19:00:04Z",
        "updatedAt": "2017-10-25T19:00:04Z",
        "author": {
          "login": "KevinH-MS"
        }
      },
      {
        "body": "See the lines here, the comments will tell you everything!\r\n\r\nhttps://github.com/dotnet/msbuild/blob/b38e4ceeaaec36c5237ae698041e9b9f18c84876/src/Tasks/Microsoft.Common.props#L22-L63\r\n\r\nAnd in the targets...\r\n\r\nhttps://github.com/dotnet/msbuild/blob/b38e4ceeaaec36c5237ae698041e9b9f18c84876/src/Tasks/Microsoft.Common.targets#L116-L147\r\n\r\nThat is how nuget and other package managers (paket, etc) import the restored assets!",
        "createdAt": "2017-11-01T11:46:28Z",
        "updatedAt": "2022-06-21T04:08:53Z",
        "author": {
          "login": "Nirmal4G"
        }
      },
      {
        "body": "You can modify `MSBuildProjectExtensionsPath` to generalize your assets output!",
        "createdAt": "2017-11-01T11:49:48Z",
        "updatedAt": "2017-11-01T11:49:48Z",
        "author": {
          "login": "Nirmal4G"
        }
      },
      {
        "body": "It's not just `MSBuildProjectExtensionsPath` though, as I wrote for https://stackoverflow.com/questions/45575280/msbuild-nuget-restoreoutputpath-how-to-make-it-work, there are more properties that need to work together:\r\n\r\n* `BaseIntermediateOutputPath` - used to construct:\r\n   * `ProjectAssetsFile` (SDK targets)\r\n   * `MSBuildProjectExtensionsPath` if unset (MSBuild - Microsoft.Common.props)\r\n   * `RestoreOutputPath` (NuGet targets)\r\n* `MSBuildProjectExtensionsPath` - could theoretically be set to something different\r\n* `RestoreOutputPath` - tells restore where to drop assets file and extension targets.\r\n\r\nIf those three don't point to the same directory -> \ud83d\udca9\r\n\r\nThe dangerous part is that those three properties are coming from different components so if you're not careful about which one is set where (=> set base..path early or set all), you won't have a good time.",
        "createdAt": "2017-11-01T14:08:53Z",
        "updatedAt": "2017-11-01T14:08:53Z",
        "author": {
          "login": "dasMulli"
        }
      },
      {
        "body": "I had the same experience, and that was the solution that saved me, thank you for that, but if you are using the latest tools you can get away with those problems.\r\n\r\nBut if you are using props/targets that are before the `ProjectExtensions` logic, It's better to shim up (_by detecting_ `ImportProjectExtensionProps`) those in `Directory.Build.props/targets` so that you can use them with your old toolsets ensuring forward compatibility.",
        "createdAt": "2017-11-01T15:21:40Z",
        "updatedAt": "2017-11-01T15:21:56Z",
        "author": {
          "login": "Nirmal4G"
        }
      },
      {
        "body": "Thanks for the summary of the interrelated properties, @dasMulli.\r\n\r\n`MSBuildProjectExtensionsPath` is the only one of these properties that is used in the common props, before the body of the project.  So I think a good solution would be:\r\n\r\n- Use `MSBuildProjectExtensionsPath` instead of `BaseIntermediateOutputPath` to construct the `RestoreOutputPath`.  This would mean it would be OK to change `BaseIntermediateOutputPath` in the body of a project, and it would mean that the intermediate build output would go in the specified folder, but the NuGet assets, props, and targets files would continue to go in the default `obj` folder.\r\n- Add an errror to MSBuild if the `MSBuildProjectExtensionsPath` is modified between when it's used in the common props and when it's used in the common targets.  This would catch anyone who tries to override this property in the body of their project file.",
        "createdAt": "2018-02-25T16:04:43Z",
        "updatedAt": "2018-02-25T16:04:43Z",
        "author": {
          "login": "dsplaisted"
        }
      },
      {
        "body": "> but the NuGet assets, props, and targets files would continue to go in the default obj folder.\r\n\r\nMaybe this needs to be checked with the original requirement of the build authors asking for this.. if the goal of setting any of these properties ist to make sure no `obj` folder (and then `bin` with similar modifications) is created at the project level, this may not help them at all.\r\n\r\nAn instance where I have seen this being used is having multiple csproj files in the same directory, which need to set all of the directories to a deeper level containing `$(MSBuildProjectName)` as well.",
        "createdAt": "2018-02-25T17:39:27Z",
        "updatedAt": "2018-02-25T17:39:27Z",
        "author": {
          "login": "dasMulli"
        }
      },
      {
        "body": "@dsplaisted I agree with @dasMulli \u2014 the only reason I'm changing `$BaseIntermediateOutputPath` and all other paths is to put all files generated by the build (a.k.a. not in version control) into one directory at the root of the solution.\r\n\r\nA lot of .NET projects do this. I'm actually surprised that something as basic as puting all artifacts into one directory instead of dozens of directories all over the solution not only isn't the default, but requires so much jumping through the hoops.",
        "createdAt": "2018-02-25T18:14:08Z",
        "updatedAt": "2018-02-25T18:14:08Z",
        "author": {
          "login": "Athari"
        }
      },
      {
        "body": "I know backwards compat is important and I also know that generalization of output properties will benefit a lot of people like us who are using large projects with different structures.\r\n\r\nWe need that as @Athari says. So, there must be some way to do both!",
        "createdAt": "2018-02-26T16:03:12Z",
        "updatedAt": "2018-02-26T16:03:12Z",
        "author": {
          "login": "Nirmal4G"
        }
      },
      {
        "body": "@dasMulli @Athari We have dotnet/sdk#867 for supporting a root output path where all generated files would go.\r\n\r\nHowever, no matter what properties we offer, it's not possible for everything to work correctly if you set those properties in the body of your project (ie after the common .props files have been evaluated).  That's because the common .props automatically import from `$(MSBuildProjectExtensionsPath)`, which defaults to `$(BaseIntermediateOutputPath)`, which defaults to `obj`.  NuGet restore lays down .props and .targets files which need to be imported in this way.  So the ideal thing to do is to override those properties before they are used, either via a `Directory.Build.props` file or before explicitly importing the SDK props and targets via the `<Import Project=\"Sdk.props\" Sdk=\"Microsoft.NET.Sdk\" />` syntax.\r\n\r\nWhat I'm proposing here is that if you don't set the properties in the \"right\" place, that we preserve correct build behavior (ie importing the .props and .targets from NuGet) over keeping absolutely everything out of your build folder, but building your project incorrectly.\r\n\r\nNote that with my proposal if you set `BaseIntermediateOutputPath` in `Directory.Build.props`, then that value would flow through to the `MSBuildProjectExtensionsPath` and the `RestoreOutputPath`, so both the NuGet generated files as well as the intermediate build files would go under that folder.",
        "createdAt": "2018-02-27T18:49:34Z",
        "updatedAt": "2018-02-27T18:49:34Z",
        "author": {
          "login": "dsplaisted"
        }
      },
      {
        "body": "Just wanted to say that I chose .NET core for my project to have less boilerplate than in the full .NET framework. It's disappointing that I need to add Directory.Build.props to get the custom path to work.\r\n\r\nIt's also a shame that these properties work in certain conditions but not in others. It's a huge pain point for newcomers who expect a simple property to just work. \r\n\r\nWe're lucky to have\r\n* patient and dedicated users who put up with this\r\n* wonderful Microsoft engineers who readily help out on github\r\n\r\nHaving said that, such bad infrastructure \r\n* prevents wider adoption of .NET Core - there is no way I would recommend it to anyone, despite being vested in success of this platform\r\n* takes up time of engineers that need to address these issues\r\n\r\nSorry for polluting an engineering thread with this rant, but I want my voice to be heard. .NET Core has had issues like that since inception, and **every time I start a new project or update VS I run into a new set of problems**. Meanwhile, I don't see any progress happening in msbuild.",
        "createdAt": "2018-03-15T17:35:00Z",
        "updatedAt": "2018-03-15T17:35:39Z",
        "author": {
          "login": "AmadeusW"
        }
      },
      {
        "body": "@AmadeusW Thanks for the feedback.  We're actively working on this issue.  The fixed behavior will be that your build will succeed and it will use the folders you specified for the build output.  The NuGet output will still go in the un-redirected `obj` folder in your project folder if you haven't applied one of the workarounds.  This is because of technical limitations because some of the NuGet output (the generated .props file) needs to be used before the `BaseIntermediateOutputPath` property has been set.",
        "createdAt": "2018-03-15T18:24:48Z",
        "updatedAt": "2018-03-15T18:24:48Z",
        "author": {
          "login": "dsplaisted"
        }
      },
      {
        "body": "Previously, one would have\r\n\r\n```xml\r\n<Project>\r\n  <PropertyGroup>\r\n    <BaseIntermediateOutputPath>C:\\blah</BaseIntermediateOutputPath>\r\n  </PropertyGroup>\r\n  <Import Project=\"$(MSBuildExtensionsPath)\\$(MSBuildToolsVersion)\\Microsoft.Common.props\" Condition=\"Exists('$(MSBuildExtensionsPath)\\$(MSBuildToolsVersion)\\Microsoft.Common.props')\" />\r\n  <!-- Project content. Lots and lots of project content. -->\r\n  <Import Project=\"$(MSBuildToolsPath)\\Microsoft.CSharp.targets\" />\r\n</Project>\r\n```\r\n\r\nto achieve the same without breaking potential extension points. Even with the new NuGet PackageReference, this has the same effects for all projects upgraded from packages.config, regardless of .net core or new project system.\r\n\r\nSo having the default case without any `<Import>` in magic places (misplaced property groups => dangerous) is definitely better.",
        "createdAt": "2018-03-15T19:41:42Z",
        "updatedAt": "2018-03-15T19:42:00Z",
        "author": {
          "login": "dasMulli"
        }
      },
      {
        "body": "@dasMulli I agree. If \"magic\" importing doesn't work (not working as intended is *not* a huge improvement over breaking build), then the feature should be dropped or at least not used by default, even though it looks nice in some cases. A lot of developers will try overriding `BaseIntermediateOutputPath`, so they will have to google for workarounds either way. And even if you know about the workaround, there're no easy way to convert \"magic\" properties to imports; you have to google and copypaste the code every single time. This is impractical.",
        "createdAt": "2018-04-02T14:31:01Z",
        "updatedAt": "2018-04-02T14:31:01Z",
        "author": {
          "login": "Athari"
        }
      },
      {
        "body": "This was fixed with https://github.com/NuGet/NuGet.Client/pull/2131 and #3059",
        "createdAt": "2018-06-18T18:49:08Z",
        "updatedAt": "2018-06-18T18:49:08Z",
        "author": {
          "login": "dsplaisted"
        }
      },
      {
        "body": "To summarize, if I want to override my intermediate and output folders, it appears that following is needed in a **Directory.Build.props** file in my project or enclosing solution folder. Please call out if this is incorrect :)\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<Project ToolsVersion=\"4.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\r\n  <!-- Common properties -->\r\n  <PropertyGroup>\r\n    <!-- SolutionDir is not defined when building projects explicitly -->\r\n    <SolutionDir Condition=\" '$(SolutionDir)' == '' \">$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildProjectDirectory), MySolution.sln))\\</SolutionDir>\r\n    <!-- Output paths -->\r\n    <BaseIntermediateOutputPath>$(SolutionDir)bin\\obj\\$(Configuration)\\$(MSBuildProjectName)\\</BaseIntermediateOutputPath>\r\n    <IntermediateOutputPath>$(SolutionDir)bin\\obj\\$(Configuration)\\$(MSBuildProjectName)\\</IntermediateOutputPath>\r\n    <MSBuildProjectExtensionsPath>$(IntermediateOutputPath)\\</MSBuildProjectExtensionsPath>\r\n    <OutputPath>$(SolutionDir)bin\\out\\$(Configuration)\\</OutputPath>\r\n    <OutDir>$(OutputPath)</OutDir>\r\n    <DocumentationFile>$(SolutionDir)bin\\doc\\$(Configuration)\\$(MSBuildProjectName).xml</DocumentationFile>\r\n  </PropertyGroup>\r\n</Project>\r\n```",
        "createdAt": "2019-02-05T18:47:39Z",
        "updatedAt": "2019-02-05T18:47:39Z",
        "author": {
          "login": "gaziqbal"
        }
      },
      {
        "body": "After reading this whole thread I cannot believe there is not a better solution. There should be a simple \"ObjectPath\" and \"BinPath\" in the project properties that can be filled out via the VS GUI.\r\n\r\nIt is such a simple request to move the intermediate directories. Instead we need a separate file? It has taken me an hour of trying things and reading this thread to figure out how to do such a \"simple\" task.",
        "createdAt": "2019-11-15T03:56:33Z",
        "updatedAt": "2019-11-15T03:56:45Z",
        "author": {
          "login": "rollsch"
        }
      },
      {
        "body": "I feel your pain. Unfortunately that's the downside of making the common way super easy and clean - configuring things deep down get harder. mostly duet to history and the way things are layered.",
        "createdAt": "2019-11-15T10:11:07Z",
        "updatedAt": "2019-11-15T10:11:07Z",
        "author": {
          "login": "dasMulli"
        }
      },
      {
        "body": "\"configuring things deep down get harder. mostly duet to history and the way things are layered\"\r\n\r\nSorry but I don't consider changing the output directory for a project a \"deep down\" configuration.\r\n\"mostly duet to history and the way things are layered\" is also not an acceptable excuse for me in a brand new framework. I mean, .NET has been around for nearly 2 decades, fine, it has acquired its quirks over time. But that's why .Core was not a version upgrade and an entirely new framework requiring migration - fine by me. And now you're brushing issues off by saying .Core has its \"history baggage\"? Sorry, not buying it.\r\n\r\nSorry for yet another rant. I just wanted to build a simple .Core project and been trying to figure this issue out since yesterday. Could have literally written hundreds of lines in the meantime but I had to spend all this time reading threads, jumping to links, reading documentation and trying to put it all together just to figure out how to configure my build. Turns out you either let Visual Studio generate everything for you, or you need a PhD in how MS Build works internally. There's nothing, null, nada, zero in between. OK, rant over.",
        "createdAt": "2019-11-18T03:18:43Z",
        "updatedAt": "2019-11-18T03:18:43Z",
        "author": {
          "login": "agaace"
        }
      },
      {
        "body": "@agaace You are absolutely right.\r\n\r\nI myself from .NET framework days, and I still want many changes that are proposed here.\r\n\r\nAs long as there are docs documenting the migration for every new breaking change, I don't care about how many are there.\r\n\r\nForgive me, team, but what he said, I \ud83d\udcaf agree.",
        "createdAt": "2019-11-18T04:16:27Z",
        "updatedAt": "2019-11-18T04:16:27Z",
        "author": {
          "login": "Nirmal4G"
        }
      },
      {
        "body": "Has there been any progress on this? As far as I can tell, .NET 8 still requires you to use either the awkward separate file (which requires you to version control and keep track of yet more things, and doesn't let you set directories per-project) or the similarly obtuse `<Import Sdk=.../>` pair. Even worse, naively adding `<BaseOutputPath>` and `<BaseIntermediateOutputPath>` to your project works perfectly fine without an error, until you find out that *some* things weren't overridden properly, and you spend an hour tearing your hair out and tracking down this GitHub issue like I just did.\r\n\r\nMSBuild needs a way to set the intermediary directories of a project with a single, simple property in your .csproj file that functions as expected. Period, end of story, I don't care what needs to change to make that happen.",
        "createdAt": "2023-10-26T20:23:50Z",
        "updatedAt": "2023-10-26T20:23:50Z",
        "author": {
          "login": "Limezero"
        }
      },
      {
        "body": "> To summarize, if I want to override my intermediate and output folders, it appears that following is needed in a **Directory.Build.props** file in my project or enclosing solution folder. Please call out if this is incorrect :)\r\n> \r\n> ```\r\n> <?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n> <Project ToolsVersion=\"4.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\r\n>   <!-- Common properties -->\r\n>   <PropertyGroup>\r\n>     <!-- SolutionDir is not defined when building projects explicitly -->\r\n>     <SolutionDir Condition=\" '$(SolutionDir)' == '' \">$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildProjectDirectory), MySolution.sln))\\</SolutionDir>\r\n>     <!-- Output paths -->\r\n>     <BaseIntermediateOutputPath>$(SolutionDir)bin\\obj\\$(Configuration)\\$(MSBuildProjectName)\\</BaseIntermediateOutputPath>\r\n>     <IntermediateOutputPath>$(SolutionDir)bin\\obj\\$(Configuration)\\$(MSBuildProjectName)\\</IntermediateOutputPath>\r\n>     <MSBuildProjectExtensionsPath>$(IntermediateOutputPath)\\</MSBuildProjectExtensionsPath>\r\n>     <OutputPath>$(SolutionDir)bin\\out\\$(Configuration)\\</OutputPath>\r\n>     <OutDir>$(OutputPath)</OutDir>\r\n>     <DocumentationFile>$(SolutionDir)bin\\doc\\$(Configuration)\\$(MSBuildProjectName).xml</DocumentationFile>\r\n>   </PropertyGroup>\r\n> </Project>\r\n> ```\r\n\r\nI'm here in 2023 and just wanted to extend this answer, because it's quite tempting to use as-is, but I don't think all of it is needed anymore. I wanted to move the bin/ and obj/ folders outside of Source/\r\n\r\n```txt\r\nSource/\r\nOutput/\r\n  bin/\r\n    proj1/\r\n    ...\r\n  obj/\r\n    proj1/\r\n    ...\r\n```\r\n\r\nThere may be more efficient ways of compiling i.e. combining library output folders so avoid regenerating libs, but I've not gotten that far yet. I also have some older WPF projects in there that I'm more careful with.\r\n\r\nI've gotten the effect I wanted with the following configuration in a `Directory.Build.Props` file at the solution-file level:\r\n\r\n```xml\r\n<OutputPath>$(SolutionDir)../Output/bin/$(MSBuildProjectName)</OutputPath>\r\n<IntermediateOutputPath>$(SolutionDir)../Output/obj/$(MSBuildProjectName)</IntermediateOutputPath>\r\n<BaseIntermediateOutputPath>$(IntermediateOutputPath)</BaseIntermediateOutputPath>\r\n```\r\n\r\nThe documentation destination doesn't have to be explicit anymore. Instead, you can use `GenerateDocumentationFile` as follows:\r\n\r\n```xml\r\n<GenerateDocumentationFile>true</GenerateDocumentationFile>\r\n```\r\n\r\nWith those directives, I no longer have any `obj/` and `bin/` folders in `Source/` and everything restores and compiles reliably.",
        "createdAt": "2024-01-19T07:06:31Z",
        "updatedAt": "2024-01-19T07:07:29Z",
        "author": {
          "login": "mvonballmo"
        }
      }
    ]
  }
}