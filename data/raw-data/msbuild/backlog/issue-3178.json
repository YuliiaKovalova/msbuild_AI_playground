{
  "number": 3178,
  "title": "MSBuild 2015 can't find cvtres.exe",
  "body": "### Steps to reproduce\r\nHaven't tried to create a minimal reproduction but this is my setup:\r\n1. Created a c++ project using visual studio 2010.\r\n2. Created a C# project\r\n3. Created a solution for both in VS 2015\r\n4. Compiled it when VS 2010 and 2015 are installed using VS 2015 - should work.\r\n5. Take the solution and place it on a windows server running TFS build agent when only VS 2010 and 2012 are installed and Build tools 2015 are installed.\r\n6. Run MSBuild form installation folder on that solutoin.\r\n\r\n### Expected  behavior\r\nBuild should succeed.\r\n\r\n### Actual behavior\r\nBuild fails:\r\nFirst it gave me an error since it didn't find `SDK40ToolsPath` so I configured it in the registry\r\nThen it complained it doesn't know what `VCTargetsPath` is so I configured it in the registry too\r\nNow it failed with the following error:\r\n`LINK : fatal error LNK1158: cannot run 'cvtres.exe' `\r\n\r\nI used procmon to try and find why and it seems like it doens't look in the right place.\r\nSetting the path to `cvtres.exe` in the windows `PATH` variable seems to help but the build agent is running with a different user so it's not an ideal option.\r\nAm I missing something?\r\n\r\n### Environment data\r\n`msbuild /version` output:\r\nMicrosoft (R) Build Engine version 14.0.23107.0\r\nOS info:\r\nWindow server 6.2 build 9200\r\n\r\nIf applicable, version of the tool that invokes MSBuild (Visual Studio, dotnet CLI, etc):\r\ncommand line",
  "state": "CLOSED",
  "createdAt": "2018-04-10T09:55:32Z",
  "updatedAt": "2024-02-21T17:13:41Z",
  "closedAt": "2019-01-07T15:49:09Z",
  "author": {
    "login": "HarelM"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Have same problem with VS 2017, c++ DLL with resource (version info) and MSBuild.\r\nIt was functional in March, 2018, but now no more.\r\nPerhaps a recent update of windows components (I'm investigating, probably Office 2003 or Skype for business) for security reason give problem to this functionality.\r\nSteps to reproduce:\r\n\r\n1) Create a Visual studio Project for a C++ DLL  (and related solution), for example dll1Prova\r\n2) Add a resource file (file with \".rc\" extension)  with version information\r\n3) Save all files and compile. Compilation is good, and all seems functional\r\n4) Then with MSBuild I try to build the solution with the following commands (from Command Prompt):\r\n\r\nset VisualStudioVersion=15.0\r\nset VCTargetsPath=C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Professional\\Common7\\IDE\\VC\\VCTargets\r\n\r\n\"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Professional\\MSBuild\\15.0\\Bin\\msbuild.exe\" dll1Prova.sln /nologo /p:PlatformToolset=v141;Configuration=Debug /v:detailed\r\n\r\nI obtain the following error at the end of the log:\r\n\r\n\"C:\\Users\\LazzaAnd\\source\\repos\\Dll1Prova\\dll1Prova.sln\" (default target) (1) ->\r\n\"C:\\Users\\LazzaAnd\\source\\repos\\Dll1Prova\\Dll1Prova\\Dll1Prova.vcxproj\" (default target) (2) ->\r\n(Link target) ->\r\n  LINK : fatal error LNK1158: cannot run 'cvtres.exe' [C:\\Users\\LazzaAnd\\source\\repos\\Dll1Prova\\Dll1Prova\\Dll1Prova.vcx\r\nproj]\r\n",
        "createdAt": "2018-04-16T19:46:32Z",
        "updatedAt": "2018-04-16T19:46:32Z",
        "author": {
          "login": "AndreaLazz"
        }
      },
      {
        "body": "The following is the workaround I eventually used to fix this for all users (a very bad one):\r\nCopy and paste the file `vctres.exe` from:\r\n`C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\bin\\`\r\nto \r\n`C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\bin\\x86_amd64`\r\n",
        "createdAt": "2018-04-16T20:32:34Z",
        "updatedAt": "2018-04-16T20:32:34Z",
        "author": {
          "login": "HarelM"
        }
      },
      {
        "body": "Path in VS 2017 are different.\r\nI tried to do the same thing as you, that is copying cvtres.exe file from directory:\r\n\r\nC:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Professional\\SDK\\ScopeCppSDK\\VC\\bin\r\n\r\nto directories:\r\nC:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Professional\\VC\\Tools\\MSVC\\14.13.26128\\bin\\Hostx86\\x86\r\nC:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Professional\\VC\\Tools\\MSVC\\14.13.26128\\bin\\Hostx64\\x64\r\n\r\nbut the problem still remains.\r\nEven restoring cvtres.exe files from an old functional installation of VS 2017 is not functional.\r\nPerhaps there's something changed in the build engine MSBuild or in libraries used by this engine.\r\n",
        "createdAt": "2018-04-17T07:48:13Z",
        "updatedAt": "2018-04-17T07:48:13Z",
        "author": {
          "login": "AndreaLazz"
        }
      },
      {
        "body": "It depends on the C++ project. I used procmon to see where msbuild looks for the file and placed it where it looks.",
        "createdAt": "2018-04-17T07:50:56Z",
        "updatedAt": "2018-04-17T07:50:56Z",
        "author": {
          "login": "HarelM"
        }
      },
      {
        "body": "In my case the cvtres.exe file is correctly found (I also tried with procmon and all seems good).\r\nPerhaps I found the problem.\r\nIf I run MSBuild as Administrator, the build is successful.\r\nPerhaps there's a security issue.",
        "createdAt": "2018-04-17T08:21:14Z",
        "updatedAt": "2018-04-17T08:21:14Z",
        "author": {
          "login": "AndreaLazz"
        }
      },
      {
        "body": "Thanks @AndreaLazz, running elevated fixed it for me too (VS 2015 Community Win32 DLL build)",
        "createdAt": "2018-06-15T15:36:23Z",
        "updatedAt": "2018-06-15T15:36:23Z",
        "author": {
          "login": "randomsock"
        }
      },
      {
        "body": "Note that just installing Build Tools is not supported for building C++ projects; you must install Visual C++ Build Tools 2015. More details are available in the [blog post](https://blogs.msdn.microsoft.com/vcblog/2016/03/31/announcing-the-official-release-of-the-visual-c-build-tools-2015/).\r\n\r\nWith Visual Studio 2017, the situation is simplified and you only need to select the C++ workloads in the Build Tools 2017 installer.",
        "createdAt": "2018-06-28T19:39:06Z",
        "updatedAt": "2018-06-28T19:39:06Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Closing since this has been inactive and I think C++ Build Tools 2015 / Build Tools 2017 with the C++ workload should resolve the problem.",
        "createdAt": "2019-01-07T15:49:09Z",
        "updatedAt": "2019-01-07T15:49:09Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}