{
  "number": 3001,
  "title": "Inner builds lose custom toolsets when building programatically",
  "body": "### Steps to reproduce\r\n\r\nMinimal repro located here: https://github.com/dfederm/msbuild/tree/inner-build-loses-toolset/src/Samples/InnerBuildToolsetLost\r\n\r\nAfter building, run something like:\r\n`\"artifacts\\Debug\\bin\\Samples\\InnerBuildToolsetLost\\net46\\InnerBuildToolsetLost.exe\" \"C:\\Program Files (x86)\\Microsoft Visual Studio\\Preview\\Enterprise\\MSBuild\\15.0\\Bin\\\"`\r\n\r\n### Expected  behavior\r\nOutput:\r\n```\r\nBuild succeeded\r\nLog lines:\r\nMsBuildToolsPath for OuterProject.proj: C:\\Program Files (x86)\\Microsoft Visual Studio\\Preview\\Enterprise\\MSBuild\\15.0\\Bin\r\nMsBuildToolsPath for InnerProject.proj: C:\\Program Files (x86)\\Microsoft Visual Studio\\Preview\\Enterprise\\MSBuild\\15.0\\Bin\r\n\r\nToolsets were the same\r\n```\r\n\r\n### Actual behavior\r\nOutput:\r\n```\r\nBuild succeeded\r\nLog lines:\r\nMsBuildToolsPath for OuterProject.proj: C:\\Program Files (x86)\\Microsoft Visual Studio\\Preview\\Enterprise\\MSBuild\\15.0\\Bin\r\nMsBuildToolsPath for InnerProject.proj: D:\\msbuild\\artifacts\\Debug\\bin\\Samples\\InnerBuildToolsetLost\\net46\r\n\r\nToolsets were not the same!\r\n```\r\n\r\n### Environment data\r\nUsing the latest version of Microsoft.Build.Runtime (15.5.180.1)",
  "state": "OPEN",
  "createdAt": "2018-02-16T20:09:29Z",
  "updatedAt": "2024-02-21T16:34:51Z",
  "closedAt": null,
  "author": {
    "login": "dfederm"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "I've run into this issue too. Any ideas for a workaround?",
        "createdAt": "2018-02-25T00:49:57Z",
        "updatedAt": "2018-02-25T00:49:57Z",
        "author": {
          "login": "dlech"
        }
      },
      {
        "body": "After further inspection, I'm not sure my issue is exactly the same. However, I was able to workaround the problem by using the `MSBUILD_EXE_PATH` environment variable. I'm use .NET Core from the command line, so the original issue may be different since it is using Visual Studio.",
        "createdAt": "2018-02-25T01:52:26Z",
        "updatedAt": "2018-02-25T01:53:11Z",
        "author": {
          "login": "dlech"
        }
      },
      {
        "body": "@dlech Your issue may be the same thing, especially if setting `MSBUILD_EXE_PATH` fixes the issue. My guess as to what the issue is is that the toolset isn't passed down to the inner build so it just uses MsBuild's normal resolution logic for finding the toolset. Setting `MSBUILD_EXE_PATH` forces MsBuild to find it at that specific spot (it's what the resolver looks for first). In fact, setting `MSBUILD_EXE_PATH` before doing the design-time build and then usetting it after may be a really good mitigation while we wait for a fix.",
        "createdAt": "2018-02-25T02:20:07Z",
        "updatedAt": "2018-02-25T02:20:07Z",
        "author": {
          "login": "dfederm"
        }
      }
    ]
  }
}