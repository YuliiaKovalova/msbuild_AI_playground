{
  "number": 1680,
  "title": "Move definitions of BeforeBuild and AfterBuild targets to .props instead of .targets files",
  "body": "The `BeforeBuild` and `AfterBuild` targets are currently defined in [Microsoft.Common.CurrentVersion.targets](https://github.com/Microsoft/msbuild/blob/ca7b47d21088068aa7f8055b5637c5eb5ab500db/src/XMakeTasks/Microsoft.Common.CurrentVersion.targets#L783-L792).  I presume that the intention was for you to override them in your project files after the .targets import near the bottom of the file.\r\n\r\nHowever, if you're using the new `Sdk` attribute on the `Project` element, it's not possible to put a target definition after the default .targets import.  This can lead to targets that people put in their project files unexpectedly not running, with no indication why unless you examine the log file and see the message that the target has been overridden (for example, https://github.com/dotnet/sdk/issues/841).\r\n\r\nIt would be better to define the empty `BeforeBuild` and `AfterBuild` targets in a .props file so that if they occur in the body of a project the ones from the project take precedence.\r\n\r\n@AndyGerlicher @rainersigwald @cdmihai What do you think about the compat implications of this and when we could make such a change?  If we changed it for all situations, then targets defined in the \"wrong\" place in project files would start running where they hadn't previously.  If we are not OK with that, we could change to conditionally defining these targets where they currently are, and then define them in a .props file of the .NET SDK along with a property telling the default MSBuild targets not to define them.",
  "state": "OPEN",
  "createdAt": "2017-02-08T21:59:49Z",
  "updatedAt": "2024-07-26T18:21:17Z",
  "closedAt": null,
  "author": {
    "login": "dsplaisted"
  },
  "labels": [
    "Feature: Warning Waves"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "A workaround is to use SDK imports:\r\n\r\n```xml\r\n<Project>\r\n  <Import Project=\"Sdk.props\" Sdk=\"Microsoft.NET.Sdk\" />\r\n...\r\n  <Import Project=\"Sdk.targets\" Sdk=\"Microsoft.NET.Sdk\" />\r\n\r\n  <Target Name=\"BeforeBuild\">\r\n...\r\n  </Target>\r\n</Project>\r\n```",
        "createdAt": "2017-02-09T00:04:25Z",
        "updatedAt": "2017-02-09T00:05:29Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "I'm very worried about the compat impact of moving things around in common targets. I do not think we should make this change, ever.\r\n\r\nThe condition on a target is considered when the target is run, not when it is evaluated. That means there's no such thing as a conditional target definition, so there's no way to mitigate the compat impact as you describe.\r\n\r\nAdditionally, I do not think we should make changes to encourage the use of the confusing override-`BeforeBuild`/`AfterBuild` extensibility mechanism over the clearer alternative of adding a new target that runs at the right time defined by `AfterTargets` or `BeforeTargets`. I know that the comment in the old default csproj template encouraged this. That was wrong then and is wrong now.\r\n\r\nIf a user really wants to override an SDK-delivered target, they should switch to the explicit import form to make the ordering clear, as @cdmihai showed.",
        "createdAt": "2017-02-09T00:05:44Z",
        "updatedAt": "2017-02-09T00:05:44Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I wasn't explicit in the original issue description, but you can do a conditional target definition by putting the target in a separate file and conditionally importing it.  That's what I was thinking of doing for this.\r\n\r\nI think it's going to be common for people to hit this as they port projects to the new SDK.  If you just had to add `AfterTargets=\"Build\"` to your target, that wouldn't be bad, but you also have to choose a different name for the target, when `AfterBuild` or `BeforeBuild` are the natural choices.  So we end up with [`MyAfterBuild` targets](https://github.com/dotnet/sdk/blob/faac7c6ada41a1ab92857dcbbb9d6feba0dbd9a4/src/Dependencies/xUnit.net/xUnit.net.csproj#L19) in the projects.",
        "createdAt": "2017-02-09T01:49:00Z",
        "updatedAt": "2017-02-09T01:49:00Z",
        "author": {
          "login": "dsplaisted"
        }
      },
      {
        "body": "I couldn't disagree more strongly with this:\r\n\r\n> `AfterBuild` or `BeforeBuild` are the natural choices\r\n\r\nThe natural name for a target, like the natural name for a function, is a description of what the target does--for all the same reasons. I would hard reject any code review I saw with a pattern like `MyAfterBuild`.",
        "createdAt": "2017-02-09T16:05:53Z",
        "updatedAt": "2017-02-09T16:05:53Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Good point that BeforeBuild and AfterBuild are not great names.  Unfortunately we've trained people to use them over 10 or so years, so in that sense I do think they are names that people will naturally use.\r\n\r\nIn general, I think we should prefer avoiding friction when adopting the new Sdk-style projects, as opposed to imposing better practices on patterns that worked fine before.",
        "createdAt": "2017-02-10T18:34:39Z",
        "updatedAt": "2017-02-10T18:34:39Z",
        "author": {
          "login": "dsplaisted"
        }
      },
      {
        "body": "That's definitely the line of argument that's going to convince me, if anything will. But it doesn't yet.\r\n\r\nI don't want to saddle all new projects with the failures of the past. We've taken the new Sdk as a place to make many breaks from old behavior, and I think should be one of them.",
        "createdAt": "2017-02-13T16:55:55Z",
        "updatedAt": "2017-02-13T16:55:55Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "As Daniel said, this is going to break a lot of people and there is a lot of docs on the net telling people to use these magic names. Just run into this myself--very confusing.\r\n\r\nIf we do not want the magic, at least we should make sure that BeforeBuild/AfterBuild names are not \"cursed\" (they currently are, meaning, if your target is named AfterBuild, it won't be executed even if it has AfterTargets attribute set). This feels just mean and silly.",
        "createdAt": "2017-03-20T22:41:01Z",
        "updatedAt": "2017-03-20T22:41:01Z",
        "author": {
          "login": "karolz-ms"
        }
      },
      {
        "body": "I've just started switching my project file formats over and thank god I ran into these threads: for the life of me I couldn't figure out why none of my build scripts were running.\r\n\r\nGoing from `Target Name=\"AfterCompile\"` to `Target Name=\"MyTask\" AfterTargets=\"Compile\"` or from `Target Name=\"AfterBuild\"` to `Target Name=\"MyTask\" AfterTargets=\"Build\"` resolved all of my issues.\r\n\r\nLike was mentioned, from all of the tutorials out there I just assumed those special names were how you were supposed to setup these.",
        "createdAt": "2017-03-24T21:10:45Z",
        "updatedAt": "2017-03-24T21:10:45Z",
        "author": {
          "login": "JohnYoungers"
        }
      },
      {
        "body": "I want to add my 2cents; I've been involved in this project from day 1 - yet I was utterly confused when my `AfterBuild` target didn't run. If someone closely involved in the project runs into this - I can't imagine how 3rd parties can understand this change.",
        "createdAt": "2017-04-26T04:02:37Z",
        "updatedAt": "2017-04-26T04:02:37Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "What is the recommended replacement?\r\n\r\n```xml\r\n<Target Name=\"MyCode\" AfterTargets=\"AfterBuild\" />\r\n```\r\n\r\n-- or --\r\n\r\n```xml\r\n<Target Name=\"MyCode\" AfterTargets=\"Build\" />\r\n```\r\n\r\n-- or --\r\n\r\n```xml\r\n<PropertyGroup>\r\n  <BuildDependsOn>$(BuildDependsOn);MyCode</BuildDependsOn>\r\n</PropertGroup>\r\n\r\n<Target Name=\"MyCode\" />\r\n```\r\n\r\nThey aren't equivalent as they have different behavior (and there are probably more ways to do that). We should agree what the right replacement is and recommend it in our docs.",
        "createdAt": "2017-04-26T04:50:30Z",
        "updatedAt": "2017-04-26T04:50:44Z",
        "author": {
          "login": "terrajobst"
        }
      },
      {
        "body": "The most direct replacement is \r\n\r\n```xml\r\n<Target Name=\"MyCode\" BeforeTargets=\"Build\" />\r\n```\r\n\r\n(note `Before`, not `After`).\r\n\r\nThat is often appropriate for a \"just needs to get done eventually\" target. In many cases, I would recommend using `AfterTargets` on the target that produces the output that needs to be modified instead, for better understandability and future extensibility. For example, you might have\r\n\r\n```csproj\r\n<Target Name=\"RewriteILUsingMagic\" AfterTargets=\"CoreCompile\">\r\n  <Exec Command=\"magic.exe @(IntermediateRefAssembly) -rewrite\" />\r\n</Target>\r\n```",
        "createdAt": "2017-04-26T15:36:09Z",
        "updatedAt": "2017-04-26T15:36:09Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "So for `AfterBuild` it sounds like the recommendation is\r\n\r\n```xml\r\n<Target Name=\"MyCode\" BeforeTargets=\"Build\" />\r\n```\r\n\r\nWhat about `BeforeBuild`?",
        "createdAt": "2017-04-26T22:25:48Z",
        "updatedAt": "2017-04-26T22:25:48Z",
        "author": {
          "login": "terrajobst"
        }
      },
      {
        "body": "```xml\r\n<Target Name=\"MyCode\" BeforeTargets=\"CoreBuild\" />\r\n```\r\n\r\nIs the direct replacement, though in this case I'd recommend even more strongly that you should refer directly to the target that will consume the output you're producing (perhaps `BeforeTargets=\"CoreCompile\"` if you're generating code). ",
        "createdAt": "2017-04-26T22:45:23Z",
        "updatedAt": "2017-04-26T22:45:23Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Makes sense. I supposed it would be useful to have a table with a few entries, plus the recommendation to check `Microsoft.Common.targets` for details, as most of it is probably not going to be documented for now...",
        "createdAt": "2017-04-27T04:14:03Z",
        "updatedAt": "2017-04-27T04:14:03Z",
        "author": {
          "login": "terrajobst"
        }
      },
      {
        "body": "One issue i have with AfterBuild is when i use multiple frameworks. The target is run efter each target framework has been compiled. But how do i do if i want a target to run after all target has been compiled?  ",
        "createdAt": "2017-04-30T15:51:35Z",
        "updatedAt": "2017-04-30T15:51:35Z",
        "author": {
          "login": "magol"
        }
      },
      {
        "body": "If we don't want to move forward `BeforeBuild`/`AfterBuild` that's one thing, but users should be able to name the targets `BeforeBuild`/`AfterBuild` as they have before. Today if you create the following target in your .csproj\r\n\r\n```\r\n<Target Name=\"BeforeBuild\" BeforeTargets=\"Build\">\r\n  <Message Text=\"Inside BeforeBuild\" Importance=\"high\"/>\r\n</Target>\r\n```\r\n\r\nThe target will not run and you'll see the following in the log file.\r\n\r\n```\r\nOverriding target \"BeforeBuild\" in project \"C:\\Users\\sayedha\\source\\repos\\TuneTag\\TuneTag\r\n\\TuneTag.csproj\" with target \"BeforeBuild\" from project \"C:\\Program Files (x86)\\Microsoft Visual \r\nStudio\\2017\\Enterprise\\MSBuild\\15.0\\Bin\\Microsoft.Common.CurrentVersion.targets\".\r\n```\r\n\r\nWhat's the value of defining an empty target in `Microsoft.Common.CurrentVersion.targets` for `BeforeBuild` and `AfterBuild`?\r\n\r\nAlso I'd like to echo @davkean comment.\r\n\r\n>I want to add my 2cents; I've been involved in this project from day 1 - yet I was utterly confused when my AfterBuild target didn't run. If someone closely involved in the project runs into this - I can't imagine how 3rd parties can understand this change.\r\n\r\nI was really confused when my `BeforeBuild` target didn't execute, especially after adding `AfterTargets`. I don't think a typical customer would be able to figure out that they would need to change the name of the target. It just appears as yet another thing that doesn't work with core.\r\n\r\nI understand we would like customers to move away from BeforeBuild/AfterBuild but there is an extensive amount of docs/info available that point users to that.\r\n",
        "createdAt": "2017-09-26T17:38:02Z",
        "updatedAt": "2017-09-26T17:38:02Z",
        "author": {
          "login": "sayedihashimi"
        }
      },
      {
        "body": "I've migrated a solution with the old csproj format to the new one, but the lack of `BeforeBuild` did break my build.\r\nI now have a mix of old and new format in that solution, because a project depends on a code generation tool to run before the compiler kicks in.\r\nIs there any way (in the new format) to force a traget to be run before the compiler kicks in, without having to specify the target directly via MSBuild flags (because the build in VS should do it by default too)?\r\n\r\nThe workaround with import targets and props doesn't work for me anymore, just giving some warnings and not invoking the target.\r\n\r\n\r\nThe project is targeting `net461` and I'm using VS 15.4.5\r\n\r\nEdit:\r\n\r\nI've just tried to go through the Properties of the project in VS and when adding a target to run before the build it adds:\r\n`<Target Name=\"PreBuild\" BeforeTargets=\"PreBuildEvent\">`\r\n\r\nThis works for me.",
        "createdAt": "2018-08-07T05:51:55Z",
        "updatedAt": "2018-08-07T06:09:06Z",
        "author": {
          "login": "MarkusAmshove"
        }
      },
      {
        "body": "You did not only break BeforeBuild/AfterBuild but also BuildDependsOn. And probably all other {Target}DependsOn Variables defined in MSBuild, like CoreBuildDependsOn, RunDependsOn, and whatever else there may exist. Now we have to redo our entire Build Process which worked fine for classic projects for 10+ years. Very annoying.\r\n\r\n@rainersigwald \r\n> I'm very worried about the compat impact of moving things around in common targets. I do not think we should make this change, ever.\r\n\r\nThe compact impact of *not* moving them around is that all After{Target}, Before{Target} and {Target}DependsOn Variables do not work anymore at all. Any targets files which made use of these are now subtly broken. Think of targets inside nuget packages which may be included in either classic or new project types.",
        "createdAt": "2019-02-08T09:22:57Z",
        "updatedAt": "2019-02-08T09:22:57Z",
        "author": {
          "login": "weltkante"
        }
      },
      {
        "body": "We just had a project migrated to Sdk style csproj that had a codegen target defined like this that failed to run: \r\n\r\n```\r\n<PropertyGroup>\r\n<CoreCompileDependsOn>\r\nGenerateTemplates;\r\n$(CoreCompileDependsOn);\r\n</CoreCompileDependsOn>\r\n</PropertyGroup>\r\n```\r\n\r\nI don't see `CoreCompileDependsOn` called out on this thread explicitly - is this a variant of the problem being discussed here? \r\n\r\n/cc @danzil\r\n",
        "createdAt": "2019-02-19T22:34:17Z",
        "updatedAt": "2019-02-19T23:08:20Z",
        "author": {
          "login": "vatsan-madhavan"
        }
      },
      {
        "body": "Yes.",
        "createdAt": "2019-02-19T22:44:03Z",
        "updatedAt": "2019-02-19T22:44:03Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "Do we have a plan for prevent these sorts of surprises? When projects are migrated over to Sdk style csproj, we should expect these to just work. This feels like a significant compatibility loss to me - esp. one that can often be a silent problem in sufficiently complex systems. ",
        "createdAt": "2019-02-19T23:10:56Z",
        "updatedAt": "2019-02-19T23:10:56Z",
        "author": {
          "login": "vatsan-madhavan"
        }
      },
      {
        "body": "As a general rule, migrated projects should use explicit SDK imports, rather than the implicit form, for exactly these reasons. That is, replace the old project template's\r\n\r\n```xml\r\n<Import Project=\"$(MSBuildExtensionsPath)\\$(MSBuildToolsVersion)\\Microsoft.Common.props\" Condition=\"Exists('$(MSBuildExtensionsPath)\\$(MSBuildToolsVersion)\\Microsoft.Common.props')\" />\r\n```\r\n\r\nwith\r\n\r\n```xml\r\n<Import Project=\"Sdk.props\" Sdk=\"Microsoft.NET.Sdk\" />\r\n```\r\n\r\nand likewise replace\r\n\r\n```xml\r\n<Import Project=\"$(MSBuildToolsPath)\\Microsoft.CSharp.targets\" />\r\n```\r\n\r\nwith \r\n\r\n```xml\r\n<Import Project=\"Sdk.targets\" Sdk=\"Microsoft.NET.Sdk\" />\r\n```\r\n\r\nAfter doing this, _do not_ add an SDK to the `Project` element; that is syntactic sugar for adding an `Sdk.props` import as the first line of the file and `Sdk.targets` as the last line.\r\n\r\nIn that way, the import order is preserved, allowing properties and targets to be overridden as they have been historically.",
        "createdAt": "2019-02-21T17:46:28Z",
        "updatedAt": "2019-02-21T17:47:44Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald I'm not sure its just a problem for project migration, what about targets imported from nuget packages, like code generators?\r\n \r\nI worry that this can subtly break packages which rely on After{Target}, Before{Target} or {Target}DependsOn variables. It definitely did happen for our own build customization and we didn't notice for months that some rules did not run anymore when imported into SDK projects.\r\n\r\nFor us it basically means we cannot use implicit SDK projects at all (regardless of whether they are migrated or newly created).",
        "createdAt": "2019-02-22T12:32:38Z",
        "updatedAt": "2019-02-22T12:32:38Z",
        "author": {
          "login": "weltkante"
        }
      },
      {
        "body": "@weltkante Can you please provide a concrete example? The relative import order of NuGet-package-delivered imports should not change between SDK and non-SDK projects (the \"import all NuGet .targets\" import comes after the common.currentversion.targets import), so I don't think I understand the problem you're describing.\r\n\r\nNote also that it's bad practice for NuGet packages to override an extension target like `AfterBuild`, independently of SDK projects--what if you want to use two such packages?",
        "createdAt": "2019-02-27T22:58:14Z",
        "updatedAt": "2019-02-27T22:58:14Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> the \"import all NuGet .targets\" import comes after the common.currentversion.targets import\r\n\r\nI wasn't aware of the concrete ordering, sorry, I guess that means it should work. Our scenario was manually referencing a targets file and I was assuming that targets referenced by nuget packages may have the same problem, but I didn't try to build an example. Given the ordering you mention it makes sense that only the explicit references in the project file itself are broken and not those included by other mechanics.\r\n\r\n> Note also that it's bad practice for NuGet packages to override an extension target like `AfterBuild`, independently of SDK projects--what if you want to use two such packages?\r\n\r\n`{Target}DependsOn` is composable (you include the previous value of the variable when extending it) but suffers from the same bug.",
        "createdAt": "2019-02-28T10:17:22Z",
        "updatedAt": "2019-02-28T10:18:09Z",
        "author": {
          "login": "weltkante"
        }
      },
      {
        "body": "> `{Target}DependsOn` is composable (you include the previous value of the variable when extending it) but suffers from the same bug.\r\n\r\nThat should be handled correctly for NuGet packages by the import order, too, and can be handled with explicit Sdk imports for the manual (or ported-from-non-SDK-project) case.",
        "createdAt": "2019-02-28T17:19:52Z",
        "updatedAt": "2019-02-28T17:19:52Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@herebebeasties That's not correct. The docs describe [the exact target-ordering algorithm](https://docs.microsoft.com/en-us/visualstudio/msbuild/target-build-order?view=vs-2017#determine-the-target-build-order), but the critical part is that `BeforeTargets` is considered _after_ `DependsOnTargets`.\r\n\r\nTo prove this to yourself here's a simple example:\r\n\r\n```xml\r\n<Project DefaultTargets=\"Build\">\r\n <Target Name=\"Build\" DependsOnTargets=\"BeforeBuild;CoreBuild;AfterBuild\" />\r\n\r\n <Target Name=\"BeforeBuild\" />\r\n <Target Name=\"CoreBuild\" />\r\n <Target Name=\"AfterBuild\" />\r\n\r\n <Target Name=\"Custom\" BeforeTargets=\"Build\" />\r\n</Project>\r\n```\r\n\r\n```\r\nS:\\msbuild>msbuild -verbosity:detailed ordering.proj\r\nMicrosoft (R) Build Engine version 16.0.443+g5775d0d6bb for .NET Framework\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\nBuild started 3/1/2019 9:46:14 AM.\r\n     1>Project \"S:\\msbuild\\ordering.proj\" on node 1 (default targets).\r\n     1>Building with tools version \"Current\".\r\n     1>Target \"BeforeBuild\" in project \"S:\\msbuild\\ordering.proj\" (target \"Build\" depends on it):\r\n     1>Done building target \"BeforeBuild\" in project \"ordering.proj\".\r\n     1>Target \"CoreBuild\" in project \"S:\\msbuild\\ordering.proj\" (target \"Build\" depends on it):\r\n     1>Done building target \"CoreBuild\" in project \"ordering.proj\".\r\n     1>Target \"AfterBuild\" in project \"S:\\msbuild\\ordering.proj\" (target \"Build\" depends on it):\r\n     1>Done building target \"AfterBuild\" in project \"ordering.proj\".\r\n     1>Target \"Custom\" in project \"S:\\msbuild\\ordering.proj\" (target \"Build\" depends on it):\r\n     1>Done building target \"Custom\" in project \"ordering.proj\".\r\n     1>Target \"Build\" in project \"S:\\msbuild\\ordering.proj\" (entry point):\r\n     1>Done building target \"Build\" in project \"ordering.proj\".\r\n     1>Done Building Project \"S:\\msbuild\\ordering.proj\" (default targets).\r\n\r\nBuild succeeded.\r\n```\r\n\r\nI recommend against ever using `AfterTargets=\"Build\"`. It has very confusing semantics and buggy behavior in multiproc builds (#3345).\r\n\r\nIf you wish to be very explicit in ordering,\r\n\r\n```xml\r\n<Target Name=\"CustomBeforeBuild\" BeforeTargets=\"BeforeBuild\" />\r\n<Target Name=\"CustomAfterBuild\" AfterTargets=\"AfterBuild\" />\r\n```\r\n\r\nis a better approach.",
        "createdAt": "2019-03-01T15:50:28Z",
        "updatedAt": "2019-03-01T15:50:28Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Thank you very much for clarifying this. I hadn't realised the ordering there, which obviously makes sense when you think about it, but nonetheless gives a rather counterintuitive result that a `<Target>` with `BeforeTargets=\"Build\"` runs _after_ the build. We'll use your suggestion as it's less likely to be inadvertently changed by other devs to \"fix\" it.\r\n\r\nI've deleted my original comment to avoid confusion.",
        "createdAt": "2019-03-01T23:31:49Z",
        "updatedAt": "2019-03-01T23:34:08Z",
        "author": {
          "login": "herebebeasties"
        }
      },
      {
        "body": "Going way back to https://github.com/Microsoft/msbuild/issues/1680#issuecomment-278504147\r\n\r\n> That means there's no such thing as a conditional target definition, so there's no way to mitigate the compat impact as you describe.\r\n\r\nIsn't this possible like so?\r\n\r\n#### Place where you want to put target but only on some condition:\r\n``` xml\r\n<Import Project=\"ConditionalTargets.targets\" Condition=\"$(SomeCondition)\" />\r\n```\r\n\r\n#### ConditionalTargets.targets\r\n``` xml\r\n<Project>\r\n  <Target Name=\"ConditionalTarget\" />\r\n</Project>\r\n```\r\n",
        "createdAt": "2019-03-15T00:04:04Z",
        "updatedAt": "2019-03-15T00:36:16Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "Yes, that's true.",
        "createdAt": "2019-03-15T15:27:41Z",
        "updatedAt": "2019-03-15T15:27:41Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Using that could we maybe do this:\r\n\r\n1. Have a targets file with all the overridable stubs in common.targets. Have it set a flag that it has already been imported.\r\n2. In common.props, set a variable to the path of this targets file.\r\n3. In common.targets, import it conditioned on whether it's already been imported.\r\n4. In sdk.props for 3.0, import the stubs early.\r\n\r\nThis should be compatible with sdk < 3.0 and all classic projects, and only break some exotic cases going from 2.0 to 3.0 SDK.",
        "createdAt": "2019-03-15T15:56:06Z",
        "updatedAt": "2019-03-15T16:14:30Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "My initial reaction to that plan is utter revulsion, followed by agreeing that we should do it since it's a bunch of gymnastics we can do to avoid user pain. I think that's the plan now.",
        "createdAt": "2019-03-15T20:16:50Z",
        "updatedAt": "2019-03-15T20:16:50Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I would be more in favor of making these targets work if they were originally given the more accurate names `MaybeBeforeBuild` and `MaybeAfterBuild`. \ud83d\ude04 ",
        "createdAt": "2019-03-15T20:36:27Z",
        "updatedAt": "2019-03-15T20:36:27Z",
        "author": {
          "login": "sharwell"
        }
      },
      {
        "body": "Before this becomes legacy that carries over into new sdk forever. Would a new sdk.compat that does that and possibly more gymnastics not be preferable? Then there's at least some hint that at some point in the future this could cease to exist. Nudging people to gradual migration",
        "createdAt": "2019-03-15T21:45:36Z",
        "updatedAt": "2019-03-15T21:45:36Z",
        "author": {
          "login": "NinoFloris"
        }
      },
      {
        "body": "We have a common dependency nuget that have this in the nuspec\r\n\r\n```XML\r\n  <Target Name=\"CreateModelConfig\" AfterTargets=\"Build\" Outputs=\"%(Model.Identity)\">\r\n  <SomeTask Input=\"%(Model.Input)\"/>\r\n  </Target>\r\n```\r\n\r\nShould we change it to `AfterTargets=\"CoreCompile\"` if we want to to be usable in VS2019?",
        "createdAt": "2019-11-21T22:54:03Z",
        "updatedAt": "2019-11-21T22:54:03Z",
        "author": {
          "login": "dashesy"
        }
      },
      {
        "body": "@dashesy no, `AfterTargets` attributes work just fine, this issue is about `Before{TargetName}` and `After{TargetName}` extension points (which are targets you can override) not about the `BeforeTargets` and `AfterTargets` _attributes_ (which are attributes on the target itself).",
        "createdAt": "2019-11-22T09:16:42Z",
        "updatedAt": "2019-11-22T09:19:05Z",
        "author": {
          "login": "weltkante"
        }
      },
      {
        "body": "@dashesy In general I recommend that you change to `BeforeTargets=\"AfterBuild\"` (or a more specific target, depending on details).\r\n\r\nThe `Build` target is the very last thing to run in the default configuration; it does nothing and exists only to call `BeforeBuild`, `CoreBuild`, and `AfterBuild` targets (in that order). Hooking after Build has confusing semantics because it means work happens after the project is \"done\". That leads to bugs like #3345.\r\n\r\nI would not recommend `AfterTargets=\"CoreCompile\"` because it makes it harder for a user to inject itself into the middle (if for example they want to use an IL rewriter after the compiler but before packaging).",
        "createdAt": "2019-12-02T16:36:51Z",
        "updatedAt": "2019-12-02T16:36:51Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald is any work planned to help people migrating avoid this pain? It's so easy to get tripped up. ",
        "createdAt": "2020-04-27T16:00:52Z",
        "updatedAt": "2020-04-27T16:00:52Z",
        "author": {
          "login": "ericsampson"
        }
      },
      {
        "body": "Ditto. We've solved it locally by adding the following to the root Directory.Build.targets our repos:\r\n\r\n```\r\n<!-- \r\nAlternate beforebuild/afterbuild that's compatible with both old style projects and sdk projects. See\r\nissue https://github.com/dotnet/msbuild/issues/1680 for details: \r\n-->\r\n<Target Name=\"XyzBeforeBuild\" BeforeTargets=\"BeforeBuild\" DependsOnTargets=\"$(BeforeBuildDependsOn)\" />\r\n<Target Name=\"XyzAfterBuild\" BeforeTargets=\"AfterBuild\" DependsOnTargets=\"$(AfterBuildDependsOn)\" />\r\n```\r\n\r\nNote that GeneratePackageOnBuild uses that dreaded `AfterTargets=\"Build\"` causing phasing issues in repos that have multiple projects (e.g. 3 nuget projects, then one down-stream project that validates them all). So when we pack as part of build, we would generally write\r\n\r\n```\r\n<PropertyGroup>\r\n  <AfterBuildDependsOn>$(AfterBuildDependsOn);Pack;MyCustomPackageValidation;Etc</AfterBuildDependsOn>\r\n<PropertyGroup>\r\n```\r\n\r\nAnd when migrating projects, this:\r\n\r\n```\r\n<Target Name=\"AfterBuild\">\r\n  ...\r\n</Target>\r\n```\r\n\r\nGets renamed and added to AfterBuildDependsOn, e.g.:\r\n\r\n```\r\n<PropertyGroup>\r\n  <AfterBuildDependsOn>$(ThisProjectAfterBuild);AfterBuild_</AfterBuildDependsOn>\r\n</PropertyGroup>\r\n<Target Name=\"AfterBuild_\">\r\n   ...\r\n</Target>\r\n```",
        "createdAt": "2020-10-01T23:31:15Z",
        "updatedAt": "2020-10-01T23:31:15Z",
        "author": {
          "login": "ghost"
        }
      },
      {
        "body": "> My initial reaction to that plan is utter revulsion, followed by agreeing that we should do it since it's a bunch of gymnastics we can do to avoid user pain. I think that's the plan now.\n\n@rainersigwald @nguerrera or @KirillOsenkov, is this something that could be considered for .NET 6? Given the number of people that are hopefully going to be migrating off Framework onto .NET 6 and potentially run into this little footgun, it would be great to avoid their pain :) Cheers!",
        "createdAt": "2020-10-02T22:19:03Z",
        "updatedAt": "2020-10-02T22:19:03Z",
        "author": {
          "login": "ericsampson"
        }
      },
      {
        "body": "I support this, so thumbs up, but I don't work on .NET anymore so I can't speak for the timeline or anything.",
        "createdAt": "2020-10-02T22:33:13Z",
        "updatedAt": "2020-10-02T22:33:13Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "In case this is not fixed I would suggest to give a warning that target is not called or out of scope, if easy possible of course.",
        "createdAt": "2020-10-15T07:28:02Z",
        "updatedAt": "2020-10-15T07:28:29Z",
        "author": {
          "login": "trivalik"
        }
      },
      {
        "body": "I just ran into this when I happened to name my target `AfterBuild`, and then spent too long trying to figure out why it wasn't running...\r\n\r\nI see some people talking about `Overriding target \"BeforeBuild\" in project` and such appearing in logs, but I've never seen this message in any of my logs. If it appeared, I probably would have figured this out sooner. All I'm seeing is:\r\n\r\n### dotnet build\r\n```\r\nMicrosoft (R) Build Engine version 16.11.2+f32259642 for .NET\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\nDetermining projects to restore...\r\nRestored /home/... (in 296 ms).\r\nTestProject -> /home/...\r\n\r\nBuild succeeded.\r\n0 Warning(s)\r\n0 Error(s)\r\n\r\nTime Elapsed 00:00:01.84 \r\n```\r\n\r\n### build log file\r\n```\r\nBuild started 12/28/2021 10:36:32 AM.\r\nLogging verbosity is set to: Normal.     1>Project \"/home/...\" on node 1 (Build target(s)).\r\n     1>ValidateSolutionConfiguration:\r\n         Building solution configuration \"Debug|x64\".\r\n     1>Project \"/home/...\" (2) on node 1 (default targets).\r\n     2>GenerateTargetFrameworkMonikerAttribute:\r\n       Skipping target \"GenerateTargetFrameworkMonikerAttribute\" because all output files are up-to-date with respect to the input files.\r\n       CoreGenerateAssemblyInfo:\r\n       Skipping target \"CoreGenerateAssemblyInfo\" because all output files are up-to-date with respect to the input files.\r\n       CoreCompile:\r\n         /usr/share/dotnet/dotnet exec (extremely long line follows)\r\n         CompilerServer: server - server processed compilation - f9d8998d-ca95-4d31-bb2c-5b2bc4bf638f\r\n       _CopyOutOfDateSourceItemsToOutputDirectory:\r\n         Copying file from \"/home/...\".\r\n       GenerateBuildRuntimeConfigurationFiles:\r\n       Skipping target \"GenerateBuildRuntimeConfigurationFiles\" because all output files are up-to-date with respect to the input files.\r\n       CopyFilesToOutputDirectory:\r\n         Copying file from \"/home/...\".\r\n         TestProject -> /home/...\r\n         Copying file from \"/home/...\".\r\n     2>Done Building Project \"/home/...\" (default targets).\r\n     1>Done Building Project \"/home/...\" (Build target(s)).\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:00:01.19\r\n```\r\n\r\nThe target just doesn't appear at all in the build logs, with no warning that it was skipped or overridden. Where was I supposed to see the warning?",
        "createdAt": "2021-12-28T09:51:33Z",
        "updatedAt": "2021-12-28T09:51:33Z",
        "author": {
          "login": "chylex"
        }
      },
      {
        "body": "Moving them to `Common.props` at-least maintains the working state of the upgraded project! It also won't be much of a compat issue since the `Common.targets` already imports `Common.props`!",
        "createdAt": "2024-07-26T18:21:16Z",
        "updatedAt": "2024-07-26T18:21:16Z",
        "author": {
          "login": "Nirmal4G"
        }
      }
    ]
  }
}