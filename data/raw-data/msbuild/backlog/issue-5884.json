{
  "number": 5884,
  "title": "Add `EnsurePathHasOneSetOfQuotes` function to FileUtilies.cs",
  "body": "Related: https://github.com/dotnet/msbuild/issues/4682 and https://github.com/dotnet/msbuild/pull/5871\r\n\r\nIn `FileUtiliies.cs` we have `RemoveQuotes` and `TrimAndStripAnyQuotes`. We should consider adding some sort of `Ensure-This-Path-Is-Single-Quoted` function.\r\n\r\nPossible names:\r\n- EnsurePathIsSingleQuoted\r\n- That's all I got!",
  "state": "CLOSED",
  "createdAt": "2020-11-13T17:19:45Z",
  "updatedAt": "2024-02-21T17:02:08Z",
  "closedAt": "2022-02-15T17:55:50Z",
  "author": {
    "login": "benvillalobos"
  },
  "labels": [
    "help wanted",
    "Good First Issue",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "I can make an attempt at this issue but I would like to get more definition.\r\n\r\nThere is a set of string returning Ensure* methods in the `FileUtilities` class:\r\n`EnsureNoLeadingOrTrailingSlash`,\r\n`EnsureNoTrailingSlash`,\r\n`EnsureTrailingNoLeadingSlash`,\r\n`EnsureTrailingSlash`\r\n\r\nGiven the naming pattern of these existing methods, the new method could be named `EnsureSingleQuoted`.\r\n\r\nA stub for the method might be:\r\n```\r\ninternal static string EnsureSingleQuoted(string path)\r\n{\r\n    path = FixFilePath(path);\r\n\r\n    ...\r\n\r\n    return path;\r\n}\r\n```\r\n\r\nAs a notional specification, the following table shows an output for a given input. For the cases with notes, I took a guess at what I thought might be the most useful but least surprising behavior. Does this look like an acceptable spec?\r\n\r\n| Test Case | Input Value | Output Value | Note |\r\n|--|--|--|--|\r\n| **Null string** | `null` | `null` |\r\n| **Empty string** |  |  |\r\n| **Unquoted string** | example | 'example' |\r\n| **Single Quoted string** | 'example' | 'example' |\r\n| **Double Quoted string** | \"example\" | 'example' | Change double quotes to single quotes |\r\n| **Mixed Quotes - Leading Single** | 'example\" | ''example\"' | Add single quotes around input value |\r\n| **Mixed Quotes - Leading Double** | \"example' | '\"example'' | Add single quotes around input value |\r\n| **Interior Quotes** | ex\"am'ple | 'ex\"am'ple' | Add single quotes around input value |\r\n\r\nThanks\r\n\r\n(An aside and a possibly separate issue: it appears that `TrimAndStripAnyQuotes` is not currently used and could be removed.)",
        "createdAt": "2022-01-25T22:42:52Z",
        "updatedAt": "2022-01-26T00:13:40Z",
        "author": {
          "login": "jrdodds"
        }
      },
      {
        "body": "Thanks for jumping on this issue! Unfortunately, the naming conventions in this file are out of whack. `TrimAndStripAnyQuotes` sounds like it would strip _either_ single or double quotes, but the summary says it only strips double quotes. `TrimAndStripAnyQuotes` doesn't even have safety checks before using the string.\r\n\r\nFor the sake of clarity, it would be best to specify the type of quote in the function name. `EnsureSingleQuoted` makes sense for a function that ensures a string is surrounded like so `'foo.bar.cs'`, so there might also be an `EnsureDoubleQuoted` that does the same but for double quotes. @rainersigwald thoughts?\r\n\r\nFor your table (for `EnsureSingleQuoted`)\r\n\r\nNull: We can throw in this case. Something like `ErrorUtilities.VerifyThrow(path != null, \"path must be a non-null value\");`\r\nEmpty string: \u2705\r\nUnquoted string: \u2705\r\nSingle quoted string: \u2705\r\nDouble quoted: \u2705\r\nMixed quotes - leading single: \u2705 though I can see this converting the trailing double into a single. I think it's fine for this function to be as simple as \"make sure it starts and ends with a single quote\" and anything beyond that can be done at a later time.\r\nMixed Quotes - leading double: \u2705",
        "createdAt": "2022-01-26T19:41:42Z",
        "updatedAt": "2022-01-26T19:41:42Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "@BenVillalobos Thanks for the feedback.\r\n\r\nI based the null behavior on the other Ensure* methods. Currently none of the methods throw when passed null.",
        "createdAt": "2022-01-26T19:58:59Z",
        "updatedAt": "2022-01-26T19:58:59Z",
        "author": {
          "login": "jrdodds"
        }
      },
      {
        "body": "@jrdodds Digging in some more, `EscapingUtilities.cs` handles the null/empty case by returning whatever was given to the method, so that looks to be the way to go.",
        "createdAt": "2022-01-26T20:14:36Z",
        "updatedAt": "2022-01-26T20:14:36Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "There are two things that single/double quotes could mean and sadly they're both within the realm of possibility: \"single\" could mean `'` or \"one `\"`\" and double could mean `\"` or `\"\"`. Sometimes shell escaping rules mean you need things like `\"\"`.\r\n\r\nDo we have example use sites for this new method? That might help hone down both behavior and naming.",
        "createdAt": "2022-01-26T20:22:41Z",
        "updatedAt": "2022-01-26T20:22:41Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> There are two things that single/double quotes could mean and sadly they're both within the realm of possibility: \"single\" could mean `'` or \"one `\"`\" and double could mean `\"` or `\"\"`. Sometimes shell escaping rules mean you need things like `\"\"`.\r\n> \r\n\r\n@rainersigwald Do you mean that single can mean `'` (one single quote) and also `''` (two single quotes) and double can mean `\"` (one double quote) and `\"\"` (two double quotes)?\r\n\r\n> Do we have example use sites for this new method? That might help hone down both behavior and naming.\r\n\r\nI agree that use sites would help a lot. :)",
        "createdAt": "2022-01-26T21:19:40Z",
        "updatedAt": "2022-01-26T21:19:40Z",
        "author": {
          "login": "jrdodds"
        }
      },
      {
        "body": "@BenVillalobos @rainersigwald I have provided some working code that I hope contributes constructively to the conversation. This may be especially useful if it helps support experimenting with some use cases. Thanks",
        "createdAt": "2022-01-27T14:29:55Z",
        "updatedAt": "2022-01-27T14:29:55Z",
        "author": {
          "login": "jrdodds"
        }
      }
    ]
  }
}