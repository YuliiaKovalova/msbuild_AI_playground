{
  "number": 11216,
  "title": "[Performance]: buildchecks",
  "body": "### Issue Description\n\nAfter some initial benchmarking, the buildchecks have ~8% performance cost.\n\n### Steps to Reproduce\n\nRun build checks on an orchardCore solution, use maxcpucount:10 on a dev drive, use a cold run.\n\n\n### Data\n\ninitial and rather crude benchmarking, however the impact is visible.\nLeft column is a baseline, right one is using build checks. Last column are averages.\n47.04163 | \u00a0 | 57.319\n49.99453 | \u00a0 | 52.50005\n49.50645 | \u00a0 | 52.69354\n52.76786 | \u00a0 | 50.99738\n47.06608 | \u00a0 | 50.97427\n47.69965 | \u00a0 | 55.23598\n\u00a0 | \u00a0 | \u00a0\n49.0127 | \u00a0 | 53.2867\n\n\n\n\n### Analysis\n\nWhile the benchmark I used is basic and rather crude, the result hint at a regression in a ballpark of 6-10%.\nThis is to be expected however it poses an issue if we want to make build checks opt-out.\n\nOne possible solution could be to implement caching - the project files usually don't change all that often so only re-running build checks when an update happens should be reasonable.\n\n### Versions & Configurations\n\n_No response_\n\n### Regression\n\n- [ ] yes\n- [ ] no\n\n### Regression Details\n\n_No response_",
  "state": "OPEN",
  "createdAt": "2025-01-03T15:17:16Z",
  "updatedAt": "2025-01-14T15:51:57Z",
  "closedAt": null,
  "author": {
    "login": "SimaTian"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "Area: Performance",
    "triaged",
    "Area: BuildCheck"
  ],
  "comments": {
    "nodes": [
      {
        "body": "We have work tracked here to add perf tests on perfStar specifically for BuildCheck: https://github.com/dotnet/msbuild/issues/10828",
        "createdAt": "2025-01-14T15:51:55Z",
        "author": {
          "login": "maridematte"
        }
      }
    ]
  }
}