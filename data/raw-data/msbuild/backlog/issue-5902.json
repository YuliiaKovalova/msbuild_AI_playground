{
  "number": 5902,
  "title": "Change Waves Warnings Don't Report to Error/Warning Window in VS and Log Many Times",
  "body": "### The Problem\r\nThere is currently no mechanism for MSBuild to log a warning **once per build**.\r\n- CLI builds and VS builds log differently.\r\n   - The ideal location for us to throw this warning for it to happen once is in `BeginBuild`. This is complicated because VS has zero loggers attached at the time BeginBuild is called. So while this works for CLI builds, this doesn't work at the moment for VS (see Actual Behavior).\r\n- Should we decide to log the warning once per project, or after MSBuild worker nodes have spawned, we will see these warnings **many** times unless deduplicated.\r\n\r\nCurrently, ChangeWaves warnings get logged at evaluation time when [setting built-in properties](https://github.com/dotnet/msbuild/blob/master/src/Build/Evaluation/Evaluator.cs#L1074). These warnings have two issues with them:\r\n1. The warning gets logged many times per build\r\n2. The warning does not show in the Error/Warning window in VS.\r\n\r\n### The Solution\r\nCreate a task that runs **once per project** that checks if the user set some invalid change wave, and warn appropriately. This should cut down the number of warnings.\r\n-----\r\n\r\n### Steps to Reproduce\r\nin a dev cmd prompt:\r\n`set MSBuildDisableFeaturesFromVersion=16.5`\r\n`devenv someSolution.sln`\r\nBuild your project and view the output window\r\n\r\n### Expected Behavior\r\nError/Warning window shows the thrown warning.\r\n\r\n### Actual Behavior\r\n![image](https://user-images.githubusercontent.com/4691428/99858214-e2085e80-2b41-11eb-9aeb-df48881d3880.png)\r\n![image](https://user-images.githubusercontent.com/4691428/99858229-ec2a5d00-2b41-11eb-80b2-54207f7550a0.png)\r\n\r\n------\r\nA Path Forward (old)\r\nThe [new diagnostic API](https://devdiv.visualstudio.com/DevDiv/_wiki/wikis/DevDiv.wiki/10963/Error-List-Remote-Diagnostic-API) is supposed to be able to condense errors/warnings of the same type. See \"Identifier/Supersedes integers\" in the doc linked. I don't think this is something we can implement at the MSBuild layer. Project System could consider adding this to their Error/Warning window loggers.\r\n\r\nThere is also the option of attaching a logger just before `BeginBuild` is called, having it only watch for warning events, and detaching it after the `BeginBuild` call here: https://dev.azure.com/devdiv/DevDiv/_git/VS?path=%2Fsrc%2Fenv%2Fvscore%2Fpackage%2FBuildManager%2FBuildManagerAccessor.cs&version=GBmain&line=1740&lineEnd=1741&lineStartColumn=1&lineEndColumn=1&lineStyle=plain&_a=contents",
  "state": "OPEN",
  "createdAt": "2020-11-20T23:23:58Z",
  "updatedAt": "2024-02-21T16:28:47Z",
  "closedAt": null,
  "author": {
    "login": "benvillalobos"
  },
  "labels": [
    "bug",
    "changewaves",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Backlog"
  },
  "comments": {
    "nodes": [
      {
        "body": "### 11/23/2020 Sync Up Meeting Notes\r\nIt's been a problem reported by customers that some warnings get posted in the output window that don't show in the warnings list.\r\n\r\nThe path forward we're considering is adding a logger at the [CPS level here](https://dev.azure.com/devdiv/DevDiv/_git/VS?path=%2Fsrc%2Fenv%2Fvscore%2Fpackage%2FBuildManager%2FBuildManagerAccessor.cs&version=GBmain&line=1607&lineEnd=1607&lineStartColumn=22&lineEndColumn=36&lineStyle=plain&_a=contents). \r\n\r\n\r\n#### ideal-beautiful-scenario-thats-probably-wrong.graph\r\n1. In BeginRealBuild()\r\n2. Hook Up a logger\r\n   - This logger should only listen to warnings/errors, as there is a lot of logging of regular messages at that time\r\n3. call BeginBuild()\r\n4. Detach logger\r\n\r\nNote: The way the sdk reports their preview warning currently happens once per project, so figuring out a way to log these warnings once per build is also relevant for them.\r\n/cc: @dsplaisted ",
        "createdAt": "2020-11-23T22:36:53Z",
        "updatedAt": "2020-11-23T22:49:03Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "The solution mentioned earlier won't work, because BeginBuild is called by solution feature code, which is chained to the solution build manager initial event, and has no knowledge on how projects handle builds. At that time, the solution hasn't tell any project to build, and they have no chance to chain to the logging.  After that point, the solution build manager controls which project to be built, and only then, the project to be scheduled to build would hook up logger, and send build submission.\r\n\r\nTo chain to the solution build logger, project need tell the solution its build submission id. You cannot get build submission id before creating the build submission, and you cannot create build submission before BeginBuild is called. So projects cannot hook up a logger after BegingBuild is called. ",
        "createdAt": "2020-11-23T23:25:06Z",
        "updatedAt": "2020-11-23T23:25:06Z",
        "author": {
          "login": "lifengl"
        }
      },
      {
        "body": "@lifengl Could there be some \"known value\" for submission ID that represents an error/warning that isn't associated with a particular build submission?",
        "createdAt": "2020-11-23T23:32:15Z",
        "updatedAt": "2020-11-23T23:32:23Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "I think it has been discussed through emails earlier. We have two options here:\r\n\r\n1, the warning/error must be reported for each build submission if it impacts the project, and the error need be deduplicated in the error list.  That matches the current VS design. However, I don't know how the new diagnostic service supports deduplication logic. Because it is completely new, it sounds a reasonable time to design the deduplication logic for that. I think @davkean supports this solution.  (It fits VS design, because each project can decide where/how to build. The per-build concept in msbuild doesn't match one solution build in VS.  For example, one project wants to use 32 bit msbuild, and other one wants to use 64bit msbuild, a third one want to do build through an azure service, so they might build completely differently on different environments or even on different machines.  It is only built-in C#/VB projects are using the default build manager, and share a same build session. \r\n\r\n2, update the solution side code to manage the default build manager and handle this scenario in a special way. In that case, there will be no change in project systems.\r\n",
        "createdAt": "2020-11-23T23:36:25Z",
        "updatedAt": "2020-11-23T23:36:25Z",
        "author": {
          "login": "lifengl"
        }
      },
      {
        "body": "It calls MuxLogger.RegisterLogger(submissionId, logger).  I think the reason is to split messages from one project to another, so it won't handle messages from building another project in the solution. \r\n\r\nActually BuildManagerAccessor does expose RegisterLogger without a submissionId.  However, BeginRealBuild is done by listening IVsUpdateSolutionEvents4.UpdateSolution_BeginUpdateAction event. Without defining some new contract, this code has no idea on what projects will be built, and other projects have no idea on whether they will be involved as well. The code calling BeginBuild (BuildManagerAccessor) and projects are very loosely coupled.  Also, it is possible that the project to be built won't use msbuild at all, so it will call BeginBuild and then EndBuild without building anything.  For example, maybe all projects are up to date, or it is a single deploy project (which is not msbuild based.)  I am not sure whether it makes sense to produce the warning message, because the developer doesn't expect msbuild to be involved. Only BuildManagerAccessor doesn't know that, and it expects it to be no-op originally. ",
        "createdAt": "2020-11-23T23:53:11Z",
        "updatedAt": "2020-11-23T23:53:11Z",
        "author": {
          "login": "lifengl"
        }
      },
      {
        "body": "Takeaway from the sync up today: Using this case as an example of what would help other teams (notably deduping the dotnet/sdk preview warning per-project), there's interest in using the new diagnostic API to dedup warnings/errors regardless of happening in different projects.\r\n\r\nI'll be in touch with the folks behind the Diagnostic API and see when they can jump into a sync up meeting to continue the discussion.",
        "createdAt": "2020-11-26T00:53:24Z",
        "updatedAt": "2020-11-26T01:00:16Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "Takeaway from sync up today: This warning is very specific such that:\r\n1. Customers only hit if they _incorrectly_ set an environment variable\r\n1. Customers will hit once and resolve it, and if they hit it again they'll know what to do\r\n1.. If they hit it a second time, they'll know what to do\r\n\r\nThis issue alone isn't enough to justify CPS and project system adding implementations of the diagnostic API, a solution that ultimately is a workaround for this issue.\r\n\r\nThe core of this issue can be summed up as \"There is no way for MSBuild to log a single error/warning in a multi-project solution in both CLI and VS once per build \"",
        "createdAt": "2020-12-03T01:13:56Z",
        "updatedAt": "2020-12-03T01:14:15Z",
        "author": {
          "login": "benvillalobos"
        }
      }
    ]
  }
}