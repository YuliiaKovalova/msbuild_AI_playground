{
  "number": 2070,
  "title": "Does not respect the location of BaseIntermediateOutputPath",
  "body": "I am using dotnet core.  When I changed the \"obj\" location using BaseIntermediateOutputPath, msbuild doesn't respect that path if there is already an obj in the subdirectory.\r\n\r\nIt doesn't work entirely. I am switching branches usually between old and new. Lets say our folder structure is as follows:\r\n\r\n`\r\n-Test\\src\\\r\n-Test\\src\\test.csproj\r\n-Test\\src\\obj\\\r\n`\r\nAnd the contents of my test.csproj is as follows:\r\n\r\n\r\n```\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp1.1</TargetFramework>\r\n    <AssemblyName>Test</AssemblyName>\r\n    <OutputType>Exe</OutputType>\r\n    <PackageId>Test</PackageId>\r\n    <OutputPath>..\\bin\\</OutputPath>\r\n    <BaseIntermediateOutputPath>..\\obj</BaseIntermediateOutputPath>\r\n    <PackageTargetFallback>$(PackageTargetFallback);dotnet5.6;portable-net45+win8</PackageTargetFallback>\r\n  </PropertyGroup>\r\n```\r\n\r\nWhat msbuild would do is  that iwill create a `obj` as a sibling to `src`.\r\n\r\n`\r\n-Test\\src\\\r\n-Test\\src\\test.csproj\r\n-Test\\src\\obj\\\r\n-Test\\obj\\\r\n`\r\n\r\nThe above is correct. It created the correct `obj` folder path. But when we build from console Visual Studio, known error pops up, but when I build using `dotnet build`, it fails:\r\n\r\n`\\src\\obj\\project.assets.json' doesn't have a target for '.NETCoreApp,Version=v1.1'. Ensure you have restored this project for TargetFramework='netcoreapp1.1' and RuntimeIdentifier=''.`\r\n\r\nIt shouldn't have used that `obj` location for the target framework.\r\n\r\nCan msbuild respect the location of the `obj` folder in its csproj file?",
  "state": "CLOSED",
  "createdAt": "2017-05-06T01:45:44Z",
  "updatedAt": "2024-02-21T17:19:17Z",
  "closedAt": "2017-05-10T16:46:08Z",
  "author": {
    "login": "mohamedmansour"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Thanks for the feedback. Unfortunately there not a really great solution here because the root of the problem is you're setting the `BaseIntermediateOutputPath` too late. For various reasons, the .NET SDK had to defined that property in the \"top\" import (generally the .props file) that comes from the `Sdk=\"Microsoft.NET.Sdk\"`. An alternative would be to convert your project to explicitly importing the SDK. For example:\r\n\r\n```XML\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp1.1</TargetFramework>\r\n  </PropertyGroup>\r\n</Project>\r\n```\r\nBecomes:\r\n```XML\r\n<Project>\r\n  <PropertyGroup>\r\n    <BaseIntermediateOutputPath>..\\obj</BaseIntermediateOutputPath>\r\n  </PropertyGroup>\r\n  <Import Project=\"Sdk.props\" Sdk=\"Microsoft.NET.Sdk\" />\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp1.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <Import Project=\"Sdk.targets\" Sdk=\"Microsoft.NET.Sdk\" />\r\n</Project>\r\n```\r\n_Note the removal of the `Sdk` attribute on the `Project` element and the addition of the `<Import>` elements._\r\n\r\nThis will define `BaseIntermediateOutputPath` before the SDK is imported.\r\n\r\nThat being said, an even better solution is to define a `Directory.Build.props` file for your repo/solution. For example, placing a file with that name in the root of your enlistment with the following contents:\r\n```XML\r\n<Project>\r\n  <PropertyGroup>\r\n    <BaseIntermediateOutputPath>..\\obj</BaseIntermediateOutputPath>\r\n  </PropertyGroup>\r\n</Project>\r\n```\r\n\r\nThis will automatically be imported by MSBuild and define that property in all projects under that folder. You can also use `Directory.Build.targets` as well (imported at the end). This feature was added VS2017 to solve this sort of issue in a more global way (you don't have to do it in every project and don't have to modify new projects to import it). It was added in #751.",
        "createdAt": "2017-05-10T05:02:50Z",
        "updatedAt": "2017-05-10T05:02:50Z",
        "author": {
          "login": "AndyGerlicher"
        }
      },
      {
        "body": "@AndyGerlicher , Hi, I have another question about it.\r\nIs there any possible to separate some other files  and some nuget files in obj folder ? like:\r\n\r\n> nuget.g.props\r\n> project.assets.json\r\n> .....\r\n\r\nI always put my `obj` and `bin` file to temp folder(that will remove every time restart windows, but looks like the nuget files not a temporary files, So I want 2 path for temporary files and long-term files.  \r\nIf I use `Directory.Build.props` set `BaseIntermediateOutputPath` path,  the `obj` folder and all nuget files still remove together to the new path, that's really bothering me, I worry every time delete nuget files will cause some problems.\r\nThat would be very helpful if there is another path we could add in to it, like:\r\n```\r\n<Project>\r\n  <PropertyGroup>\r\n    <BaseIntermediateOutputPath>c:\\windows\\temp\\project\\</BaseIntermediateOutputPath>\r\n   <NugetOutputPath>d:\\nuget\\</NugetOutputPath>\r\n  </PropertyGroup>\r\n</Project>\r\n```\r\nIs there any possible to do that? Thanks.",
        "createdAt": "2020-02-21T21:03:41Z",
        "updatedAt": "2020-02-21T21:03:41Z",
        "author": {
          "login": "huangjinshe"
        }
      }
    ]
  }
}