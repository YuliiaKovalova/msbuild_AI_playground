{
  "number": 4870,
  "title": "MSBuild <Exec>/ToolTask resets the console output code page, prohibiting unicode output",
  "body": "### Steps to reproduce\r\n\r\nRepro project (save as `repro.proj`):\r\n```xml\r\n<Project xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\r\n    <Target Name=\"Print\">\r\n        <Exec Command=\"chcp\" />\r\n    </Target>       \r\n</Project>\r\n```\r\n\r\nRepro commands in `cmd.exe`:\r\n```\r\n>chcp\r\nActive code page: 850\r\n\r\n>msbuild repro.proj\r\nMicrosoft (R) Build Engine version 16.4.0-preview-19517-01+31c846a51 for .NET Framework\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\nBuild started 11/1/2019 8:35:23 AM.\r\nProject \"repro.proj\" on node 1 (default targets).\r\nPrint:\r\n  chcp\r\n  Active code page: 850\r\nDone Building Project \"repro.proj\" (default targets).\r\n\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:00:00.18\r\n\r\n>chcp 65001\r\nActive code page: 65001\r\n\r\n>msbuild repro.proj\r\nMicrosoft (R) Build Engine version 16.4.0-preview-19517-01+31c846a51 for .NET Framework\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\nBuild started 11/1/2019 8:35:29 AM.\r\nProject \"repro.proj\" on node 1 (default targets).\r\nPrint:\r\n  chcp\r\n  Active code page: 850\r\nDone Building Project \"repro.proj\" (default targets).\r\n\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:00:00.23\r\n```\r\n\r\nNote: 850 is the Western Europe/US code page, representing most latin-based characters. 65001 is UTF-8, which can represent all Unicode characters.\r\n\r\n### Expected  behavior\r\nWhen run inside MSBuild, `chcp` should output the same code page as its ancestor `cmd.exe`.\r\n\r\nPrograms should inherit the console code page from their ancestors.\r\n\r\n### Actual behavior\r\nWhen run inside MSBuild, `chcp` outputs 850 rather than 65001 as set on the ancestor `cmd.exe`.\r\n\r\nMSBuild's `<Exec>` task executes its commands in such a way that the child processes do not inherit the console code page from MSBuild (which itself inherited it from its parent). The console code page for children processes is rather reset to the OEM code page, which cannot encode Unicode characters in any Windows OS language in its default configuration. This means that it is impossible to use MSBuild to run a program that will output Japanese characters on an English OS without it coming out as a bunch of `?????`.\r\n\r\nSpecifically, the use of `ProcessStartInfo.CreateNoWindow = true` in `ToolTask` will reset the console code page of the child process to the OEM code page. If this is fixed, the batch file should also be written in the console code page since that is what `cmd.exe` will be using to read it. Pull request coming soon.\r\n\r\n### Environment data\r\n`msbuild /version` output: `Microsoft (R) Build Engine version 16.4.0-preview-19517-01+31c846a51 for .NET Framework`\r\nOS info: Windows 10\r\n",
  "state": "CLOSED",
  "createdAt": "2019-11-01T15:44:57Z",
  "updatedAt": "2024-10-29T15:23:00Z",
  "closedAt": "2024-10-29T15:21:31Z",
  "author": {
    "login": "tristanlabelle"
  },
  "labels": [
    "needs-design"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "MSBuild 16.6"
  },
  "comments": {
    "nodes": [
      {
        "body": "If `ProcessStartInfo.CreateNoWindow` cannot be set to `false` for other reasons, there is an alternative, contrived solution that would work:\r\n\r\nMSBuild could prepend `$\"@chcp {Console.OutputEncoding.CodePage}\\r\\n\"` to the batch file and write the batch with the encoding from `Console.OutputEncoding`. `cmd.exe` would be started with OEM as its console code page due to `CreateNoWindow = true`. However, after executing the first line of the batch file, it would switch to the same console output code page as MSBuild, essentially reimplementing inheritance. The following lines of the batch file would then also be decoded using the `Console.OutputEncoding` code page (yes, `cmd.exe` is that horrible), hence why it is necessary to encode the batch file itself in that encoding. MSBuild would have to set `ProcessStartInfo.StandardOutputEncoding = Console.OutputEncoding` in order to decode the commands' output using the console output code page that they should be honoring.",
        "createdAt": "2019-11-01T23:12:30Z",
        "updatedAt": "2019-11-01T23:15:58Z",
        "author": {
          "login": "tristanlabelle"
        }
      },
      {
        "body": "Note that `<PostBuildEvent>` is implemented in terms of `<Exec>`, so it is also subject to this issue.",
        "createdAt": "2019-11-09T04:20:12Z",
        "updatedAt": "2019-11-09T04:20:12Z",
        "author": {
          "login": "tristanlabelle"
        }
      },
      {
        "body": "Maybe we should have an parameter indicates that is sub-process produces Unicode output. Consider most of dotnet commands (even MGCB) uses Unicode, this option should have a true value in default.",
        "createdAt": "2023-12-21T08:17:40Z",
        "updatedAt": "2023-12-21T08:17:40Z",
        "author": {
          "login": "Akarinnnnn"
        }
      },
      {
        "body": "Hi,\r\n\r\nI have the same/similar problem.\r\n\r\nThe output of Exec task is not shown correctly.\r\n\r\nHere are some simple steps to reproduce it.\r\n\r\n1. Create `output.cmd` file with following content\r\n  ```output.cmd\r\n  echo \u2713 54 modules transformed.\r\n  ```\r\n\r\n2. Create a simple project file with following target\r\n  ```csproj\r\n  <Target Name=\"OutputSomething\" BeforeTargets=\"BeforeBuild\">\r\n    <Message Text=\"\u2713 54 modules transformed.\" Importance=\"high\" />\r\n    <Exec Command=\"echo \u2713 54 modules transformed.\" />\r\n    <Exec Command=\"cmd /c echo \u2713 54 modules transformed.\" />\r\n    <Exec Command=\"output.cmd\" />\r\n    <Exec Command=\"output.cmd\" UseUtf8Encoding=\"true\" />\r\n    <Exec Command=\"output.cmd\" ConsoleToMSBuild=\"true\">\r\n      <Output TaskParameter=\"ConsoleOutput\" PropertyName=\"OutputOfExec\" />\r\n    </Exec>\r\n    <Exec Command=\"cmd /c output.cmd\" />\r\n  </Target>\r\n  ```\r\n\r\n3. Run `dotnet build` and get following output\r\n  ```cmd\r\n  Determining projects to restore...\r\n  All projects are up-to-date for restore.\r\n  \u2713 54 modules transformed.\r\n  \u2713 54 modules transformed.\r\n  \u2713 54 modules transformed.\r\n  \u00d4\u00a3\u00f4 54 modules transformed.\r\n  \u00d4\u00a3\u00f4 54 modules transformed.\r\n  \u00d4\u00a3\u00f4 54 modules transformed.\r\n\r\n  C:\\Users\\leko.tomas\\playground\\TestMsBuildOutput>echo \u00d4\u00a3\u00f4 54 modules transformed.\r\n  \u00d4\u00a3\u00f4 54 modules transformed.\r\n  ```\r\n\r\nI guess that there is some problem when starting a script file (cmd or powershell). If the command is written directly in `Command` attribute everything works fine.",
        "createdAt": "2024-07-05T06:26:14Z",
        "updatedAt": "2024-07-05T06:26:14Z",
        "author": {
          "login": "ThisFunctionalTom"
        }
      },
      {
        "body": "> Maybe we should have an parameter indicates that is sub-process produces Unicode output.\n\nThat's `UseUtf8Encoding=\"Always\"`.\n\n> Consider most of dotnet commands (even MGCB) uses Unicode, this option should have a true value in default.\n\nThis is a pretty breaky change since most _Windows_ commands and most Windows tools don't emit Unicode, so we haven't done it.\n\n@ThisFunctionalTom `UseUtf8Encoding=\"true\"` is ignored; [valid values are are `Always`, `Never`, or `Detect`](https://learn.microsoft.com/en-us/visualstudio/msbuild/exec-task?view=vs-2022#:~:text=Valid%20values%20are%20Always%2C%20Never%2C%20or%20Detect.). We should probably treat `true` as `Always` though, since it isn't currently an error: https://github.com/dotnet/msbuild/issues/10907.\n\n",
        "createdAt": "2024-10-29T15:21:31Z",
        "updatedAt": "2024-10-29T15:23:00Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}