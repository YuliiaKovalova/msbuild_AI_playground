{
  "number": 6477,
  "title": "Canceling a build can fail if a process running on the computer is protected",
  "body": "<!-- This is a template that helps us provide quicker feedback. Please use any relevant sections and delete anything you don't need. -->\r\n\r\n### Issue Description\r\n<!--\r\n* Please include a clear and concise description of the problem.\r\n-->\r\nCanceling a NMake project (not relevant here but it's Unreal Engine 4) through CTRL+BREAK in Visual Studio doesn't work when some (unrelated) processes are running on the computer.\r\n\r\n### Steps to Reproduce\r\n<!--\r\n* Include as much of the following as possible:\r\n\r\n* A minimal sample project that reproduces the issue.\r\n* Your zipped project.\r\n* IDE / CLI steps to create the project and reproduce the behaviour.\r\n* Your command line invocation\r\n-->\r\n\r\nPrerequisites: have a process running which will deny access to its start time (for instance, OpenVPN, see Analysis section).\r\n\r\n1. Build Project in Visual Studio\r\n2. Cancel build (CTRL+BREAK)\r\n\r\nNotice an MSBuild error (see Actual Behavior section).\r\n\r\n### Expected Behavior\r\n<!--\r\n* The expected output or behavior.\r\n-->\r\nWe should be able to cancel a build without an error. (Or at least just #5508 \ud83d\ude04)\r\n\r\n### Actual Behavior\r\n<!--\r\n* The actual output or behavior.\r\n-->\r\nCancelling a build doesn't work and provokes the following error:\r\n```\r\n2>C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Professional\\MSBuild\\Microsoft\\VC\\v160\\Microsoft.MakeFile.Targets(46,5): warning MSB5021: Terminating the task executable \"cmd\" and its child processes because the build was canceled.\r\n2>C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Professional\\MSBuild\\Microsoft\\VC\\v160\\Microsoft.MakeFile.Targets(46,5): error MSB6003: The specified task executable \"cmd.exe\" could not be run. System.ComponentModel.Win32Exception (0x80004005): Access is denied\r\n2>C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Professional\\MSBuild\\Microsoft\\VC\\v160\\Microsoft.MakeFile.Targets(46,5): error MSB6003:    at System.Diagnostics.ProcessManager.OpenProcess(Int32 processId, Int32 access, Boolean throwIfExited)\r\n2>C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Professional\\MSBuild\\Microsoft\\VC\\v160\\Microsoft.MakeFile.Targets(46,5): error MSB6003:    at System.Diagnostics.Process.GetProcessHandle(Int32 access, Boolean throwIfExited)\r\n2>C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Professional\\MSBuild\\Microsoft\\VC\\v160\\Microsoft.MakeFile.Targets(46,5): error MSB6003:    at System.Diagnostics.Process.GetProcessTimes()\r\n2>C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Professional\\MSBuild\\Microsoft\\VC\\v160\\Microsoft.MakeFile.Targets(46,5): error MSB6003:    at System.Diagnostics.Process.get_StartTime()\r\n2>C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Professional\\MSBuild\\Microsoft\\VC\\v160\\Microsoft.MakeFile.Targets(46,5): error MSB6003:    at Microsoft.Build.Shared.NativeMethodsShared.GetChildProcessIds(Int32 parentProcessId, DateTime parentStartTime)\r\n2>C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Professional\\MSBuild\\Microsoft\\VC\\v160\\Microsoft.MakeFile.Targets(46,5): error MSB6003:    at Microsoft.Build.Shared.NativeMethodsShared.KillTree(Int32 processIdToKill)\r\n2>C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Professional\\MSBuild\\Microsoft\\VC\\v160\\Microsoft.MakeFile.Targets(46,5): error MSB6003:    at Microsoft.Build.Utilities.ProcessExtensions.KillTree(Process process, Int32 timeout)\r\n2>C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Professional\\MSBuild\\Microsoft\\VC\\v160\\Microsoft.MakeFile.Targets(46,5): error MSB6003:    at Microsoft.Build.Utilities.ToolTask.KillToolProcessOnTimeout(Process proc, Boolean isBeingCancelled)\r\n2>C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Professional\\MSBuild\\Microsoft\\VC\\v160\\Microsoft.MakeFile.Targets(46,5): error MSB6003:    at Microsoft.Build.Utilities.ToolTask.TerminateToolProcess(Process proc, Boolean isBeingCancelled)\r\n2>C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Professional\\MSBuild\\Microsoft\\VC\\v160\\Microsoft.MakeFile.Targets(46,5): error MSB6003:    at Microsoft.Build.Utilities.ToolTask.HandleToolNotifications(Process proc)\r\n2>C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Professional\\MSBuild\\Microsoft\\VC\\v160\\Microsoft.MakeFile.Targets(46,5): error MSB6003:    at Microsoft.Build.Utilities.ToolTask.ExecuteTool(String pathToTool, String responseFileCommands, String commandLineCommands)\r\n2>C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Professional\\MSBuild\\Microsoft\\VC\\v160\\Microsoft.MakeFile.Targets(46,5): error MSB6003:    at Microsoft.Build.Tasks.Exec.ExecuteTool(String pathToTool, String responseFileCommands, String commandLineCommands)\r\n2>C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Professional\\MSBuild\\Microsoft\\VC\\v160\\Microsoft.MakeFile.Targets(46,5): error MSB6003:    at Microsoft.Build.Utilities.ToolTask.Execute()\r\n```\r\n\r\n### Analysis\r\n<!--\r\n* If you have an idea where the problem might lie, let us know that here.\r\n* Please include any pointers to code, relevant changes, or related issues you know of.\r\n-->\r\nLooking at the code, I think the issue is with [Shared.NativeMethodsShared.GetChildProcessIds](https://github.com/dotnet/msbuild/blob/97ba42a391b459caca040301165eeb5d4464bd66/src/Shared/NativeMethodsShared.cs#L1355 ) which fails if, while iterating through the processes currently running, one of them is protected.\r\n\r\nIn my case, I managed to identify the faulty process: [OpenVPN 2.5.1](https://openvpn.net/community-downloads/). When connected to the VPN, it creates a process which makes `GetChildProcessIds()` fail.\r\n\r\nMore precisely, [Process.StartTime](https://docs.microsoft.com/en-us/dotnet/api/system.diagnostics.process.starttime?view=net-5.0) throws Win32Exception 0x80004005 \"Access is denied\" and it's not caught.\r\n\r\nI also managed to reproduce the error by copying the following code from msbuild in a simple project and calling it:\r\n```\r\n\t\t[SuppressMessage(\"Microsoft.Design\", \"CA1060:MovePInvokesToNativeMethodsClass\", Justification = \"Class name is NativeMethodsShared for increased clarity\")]\r\n\t\t[DllImport(\"KERNEL32.DLL\")]\r\n\t\tprivate static extern SafeProcessHandle OpenProcess(eDesiredAccess dwDesiredAccess, [MarshalAs(UnmanagedType.Bool)] bool bInheritHandle, int dwProcessId);\r\n\r\n\t\tinternal static List<KeyValuePair<int, SafeProcessHandle>> GetChildProcessIds(int parentProcessId, DateTime parentStartTime)\r\n\t\t{\r\n\t\t\tList<KeyValuePair<int, SafeProcessHandle>> myChildren = new List<KeyValuePair<int, SafeProcessHandle>>();\r\n\r\n\t\t\tforeach (Process possibleChildProcess in Process.GetProcesses())\r\n\t\t\t{\r\n\t\t\t\tusing (possibleChildProcess)\r\n\t\t\t\t{\r\n\t\t\t\t\tLog.TraceInformation(\"Process:\");\r\n\t\t\t\t\tLog.TraceInformation(possibleChildProcess.ToString());\r\n\t\t\t\t\t// Hold the child process handle open so that children cannot die and restart with a different parent after we've started looking at it.\r\n\t\t\t\t\t// This way, any handle we pass back is guaranteed to be one of our actual children.\r\n\t\t\t\t\tSafeProcessHandle childHandle = OpenProcess(eDesiredAccess.PROCESS_QUERY_INFORMATION, false, possibleChildProcess.Id);\r\n\t\t\t\t\tif (childHandle.IsInvalid)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tbool keepHandle = false;\r\n\t\t\t\t\ttry\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif (possibleChildProcess.StartTime > parentStartTime)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tfinally\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif (!keepHandle)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tchildHandle.Dispose();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn myChildren;\r\n\t\t}\r\n```\r\n\r\n### Versions & Configurations\r\n<!--\r\n* In a Visual Studio developer command prompt, run `msbuild -version` and paste the output here.\r\n* If applicable, include the version of the tool that invokes MSBuild (Visual Studio, dotnet CLI, etc):\r\n\r\n* Post any other relevant configuration settings here.\r\n*   OS, architecture, etc.\r\n-->\r\n16.9.0.16703\r\n\r\n### Attach a binlog\r\n<!--\r\n* If providing us a project that reproduces the issue proves difficult, consider including a binlog.\r\n* Click [here](https://aka.ms/msbuild/binlog) for details on sharing binary logs.\r\n* Click [here](https://github.com/microsoft/msbuild/blob/master/documentation/wiki/Binary-Log.md) for more information on binary logs.\r\n    NOTE: Binlogs can contain sensitive information. Don't attach anything you don't want to be public.\r\n\r\n*   To view the contents of the binlogs yourself, you may wish to use a tool like https://msbuildlog.com/.\r\n-->",
  "state": "OPEN",
  "createdAt": "2021-05-24T18:06:13Z",
  "updatedAt": "2024-01-31T08:21:07Z",
  "closedAt": null,
  "author": {
    "login": "DamienKochanek"
  },
  "labels": [
    "bug",
    "help wanted",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Backlog"
  },
  "comments": {
    "nodes": [
      {
        "body": "Team Triage: We agree, that shouldn't be fatal. The solution here would be to add a catch for this",
        "createdAt": "2021-05-26T15:37:12Z",
        "updatedAt": "2021-05-26T16:05:11Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "I tried your repro (the code you posted) with a few admin level processes, but I can't repro your scenario. Is OpenVPN the only way to repro your scenario?",
        "createdAt": "2022-11-18T18:13:19Z",
        "updatedAt": "2022-11-18T18:13:19Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "@DamienKochanek I can't repro this issue either.  Could you repro this issue now\uff1f",
        "createdAt": "2022-11-21T03:23:33Z",
        "updatedAt": "2022-11-21T03:23:33Z",
        "author": {
          "login": "JaynieBai"
        }
      }
    ]
  }
}