{
  "number": 68,
  "title": "Add a \"treat warnings as errors\" option",
  "body": "I would like an option to be able to treat all warnings as errors, when running from the command line.\n",
  "state": "CLOSED",
  "createdAt": "2015-04-10T01:15:29Z",
  "updatedAt": "2024-02-21T17:31:51Z",
  "closedAt": "2016-11-29T20:41:30Z",
  "author": {
    "login": "Porges"
  },
  "labels": [
    "help wanted",
    "User Experience",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "jeffkl"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Thanks for the suggestion, sounds like a potentially useful feature. This doesn't meet the bar for our roadmap at this time however.\n",
        "createdAt": "2015-04-14T22:22:05Z",
        "updatedAt": "2015-04-14T22:22:05Z",
        "author": {
          "login": "AndyGerlicher"
        }
      },
      {
        "body": "Is there a Roadmap defined somewhere?\n",
        "createdAt": "2015-04-15T06:51:41Z",
        "updatedAt": "2015-04-15T06:51:41Z",
        "author": {
          "login": "jbjoshi"
        }
      },
      {
        "body": "If it is a potentially useful feature, why is the issue closed? Someone from the community may want to pick it up.\n",
        "createdAt": "2015-04-15T18:59:16Z",
        "updatedAt": "2015-04-15T18:59:16Z",
        "author": {
          "login": "eatdrinksleepcode"
        }
      },
      {
        "body": "As a work around, you should be (I think) able to add TreatWarningsAsErrors property in a targets file - set it to true and invoke that target as a part of the msbuild command line argument along with your default targets. Wouldn't that work?\n",
        "createdAt": "2015-04-15T22:04:30Z",
        "updatedAt": "2015-04-15T22:04:30Z",
        "author": {
          "login": "chandramouleswaran"
        }
      },
      {
        "body": "@chandramouleswaran: that's for the compiler warnings, not for warnings from MSBuild itself.\n\nI want to be able to make things like missing files be errors, not warnings like they are currently.\n",
        "createdAt": "2015-04-15T22:54:51Z",
        "updatedAt": "2015-04-15T22:55:20Z",
        "author": {
          "login": "Porges"
        }
      },
      {
        "body": "@Porges - Good point :+1: \n",
        "createdAt": "2015-04-16T19:06:54Z",
        "updatedAt": "2015-04-16T19:06:54Z",
        "author": {
          "login": "chandramouleswaran"
        }
      },
      {
        "body": "Reopening and marking as up-for-grabs.  This isn't high on our priority list but it's a good feature to have.\n",
        "createdAt": "2015-09-01T22:31:07Z",
        "updatedAt": "2015-09-01T22:31:07Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "We are getting a bunch of these warnings as well. The code accumulated dozens of warnings such as importing a target file several times, even though we have TreatWarningsAsErrors=true.\n",
        "createdAt": "2015-11-19T18:40:58Z",
        "updatedAt": "2015-11-19T18:41:27Z",
        "author": {
          "login": "iouri-s"
        }
      },
      {
        "body": "We are in the same situation.\n\n## Use case\n\n**Misconfigured Platform across a Solution**\n\nHaving some dependency that require a specific platform (e.g. x64) but that when build from msbuild using the solution configuration matrix produce:\n\n```\nC:\\Program Files (x86)\\MSBuild\\14.0\\bin\\Microsoft.Common.CurrentVersion.targets (1820, 5)\nThere was a mismatch between the processor architecture of the project being built \"MSIL\" and the processor architecture of the reference \"Microsoft.ServiceFabric.Internal\", \"AMD64\". This mismatch may cause runtime failures. Please consider changing the targeted processor architecture of your project through the Configuration Manager so as to align the processor architectures between your project and references, or take a dependency on references with a processor architecture that matches the targeted processor architecture of your project.\n```\n\nSince this is plugged in a CI/CD workflow, it would be nice to be able to block the release process in this case.\n",
        "createdAt": "2016-05-12T09:10:08Z",
        "updatedAt": "2016-05-12T09:10:08Z",
        "author": {
          "login": "D3-LucaPiombino"
        }
      },
      {
        "body": "We want the appveyor builds to fail if a PR introduces new warnings. However we don't want the dev to deal with this permanently as they are working towards a PR. Essentially we want gated checkins that also prevents users from introducing new warnings. Simply being able to do this through a commandline would be the easiest way.\n",
        "createdAt": "2016-08-19T17:01:11Z",
        "updatedAt": "2016-08-19T17:01:41Z",
        "author": {
          "login": "dotMorten"
        }
      },
      {
        "body": "I'm working on this for MSBuild 15.  \n\n# Design\n\nA new command-line argument `/WarnAsError` to enable the functionality.  When a warning is treated as an error, the execution of the target will continue but the overall build will be marked as failed.\n\n## All Warnings as Errors\n\nSpecifying just `/WarnAsError` will log all warnings as errors and the build will fail.  \n\nExample\n\n```\nmsbuild.exe myproject.proj /warnaserror\n```\n\n## Specifying Which Warnings Should Be Errors\n\nSpecifying a comma-delimited list of warning codes will treat just that set of warnings as errors.  The value can include duplicates and only that set will be logged as errors and the build will fail.\n\nExample\n\n```\nmsbuild.exe myproject.proj /warnaserror:MSB3000,MSB4000,CA1000,FOO,123\n```\n\nThis will also work within response files.\n\n## Suppressing Warnings\n\nAlthough we don't recommend it, there are cases when it might be necessary to suppress warnings.  To do this, you'll be able to specify a comma-delimited list of warning codes to suppress.  You must specify a list of warnings to suppress as we will not be just suppressing everything.\n\nExample\n\n```\nmsbuild.exe myproject.proj /nowarn:MSB1000,MSB2000,FOO,123\n```\n\n## Open Questions\n1. The values cannot be MSBuild properties so they are passed in as command-line arguments or contained in response files.  Should there be environment variables as well?\n2. The build will fail if a warning is treated as an error but tasks won't stop executing.  The target execution model will still treat it as a warning and tasks will continue executing.  This is because warnings are typically non-critical.  Is this okay?\n3. Is it acceptable that attached loggers will only receive the mutated warning as an error and will not be aware that it was supposed to be a warning?\n\nPlease send me any feedback on this design.\n",
        "createdAt": "2016-11-16T23:46:50Z",
        "updatedAt": "2016-11-17T00:37:55Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "This design would satisfy our needs. Replacing \"can not\" with \"cannot\" in the first open question would make it easier to understand.\n",
        "createdAt": "2016-11-16T23:56:54Z",
        "updatedAt": "2016-11-16T23:56:54Z",
        "author": {
          "login": "iouri-s"
        }
      },
      {
        "body": "> 1. The values can not be MSBuild properties so they are passed in as command-line arguments or contained in response files\n\nDoes this mean we can't enable this in .csproj? That would suck \u2639 \n",
        "createdAt": "2016-11-17T05:41:57Z",
        "updatedAt": "2016-11-17T05:41:57Z",
        "author": {
          "login": "dotMorten"
        }
      },
      {
        "body": "@dotMorten The problem is that project properties are declared too late.  MSBuild logs warnings during project evaluation which would mean they could not be turned into errors.  For example:\n\n``` xml\n<Project xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n  <PropertyGroup Condition=\"true or true and true\">\n    <MSBuildWarningsAsErrors>MSB4130</MSBuildWarningsAsErrors>\n  </PropertyGroup>\n  <Target Name=\"Build\" />\n</Project>\n```\n\nResults in the MSB4130 warning:\n\n```\nwarning MSB4130: The condition \"true or true and true\" may have been evaluated incorrectly in an\nearlier version of MSBuild. Please verify that the order of the AND and OR clauses is written\n as intended.  To avoid this warning, add parentheses to make the evaluation order explicit.\n```\n\nThe warning is logged before the `MSBuildWarningsAsErrors` property is declared.  The `TreatWarningsAsErrors` works as a property because the compiler is called after the property is declared.  But I don't know of any property you can declare in your project that will affect MSBuild itself, just the targets that are executed.  There's also the problem of project-to-project references where MSBuild is building a massive tree of hundreds of projects in a solution, if the setting was a property in one of the projects, should it apply to everything in the build graph?\n\nIt might be possible to add a new property to the `<MSBuild />` task which would let you use a property to control it.  But I felt that in order to really nail this scenario, it needed to be a global control knob.  Since it can only be enabled as a command-line parameter it will only really be helpful in the hosted build scenario for things like CI environments.  So local builds in Visual Studio and command-line buiilds wthout the switch would still emit warnings but branch owners would be able to keep the warnings from making their way into the code base.\n\nYou had original stated:\n\n> Simply being able to do this through a commandline would be the easiest way.\n\nAnd this design _should_ provide this capability.  Does this seem reasonable?\n",
        "createdAt": "2016-11-17T06:44:48Z",
        "updatedAt": "2016-11-17T06:44:48Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "We used to recommend that all tasks return `return !Log.HasLoggedErrors;` from Execute() -- the idea being that all well behaved tasks log one or more errors if and only if they are fail -- really Execute() should have been void and the engine could have enforced this. Anyway -- what happens to tasks that log a warning which is upgraded to an error. I didn't look carefully at the change but I'm guessing `TaskLoggingHelper` (aka `Log`) is unaware so the task will still succeed in this case and build will continue. Presumably that's what desired.\r\n\r\n[edited to make sense]",
        "createdAt": "2016-11-22T22:06:02Z",
        "updatedAt": "2016-11-22T22:09:51Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "The logic will be if you specify /warnaserror than the overall build result will fail if _any_ errors are logged.  Individual targets can still show as \"Success\".  So if I build pragmatically via `Build()`, you would get back a `BuildResult` with an `OverallResult` of `BuildResultCode.Failure`.  But in the `ResultsByTarget` collection, all of the target results could show as success. \r\n\r\nIf all of the tasks return `!Log.HasLoggedErrors` than the target would show as fail like you said so the logic is a catch-all.  It would be a little harder to fail the task/target so I figured it was good enough that at least the overall build fails.  Do you agree?",
        "createdAt": "2016-11-22T22:55:28Z",
        "updatedAt": "2016-11-22T22:55:28Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "@jeffkl - I am not sure I am convinced on the command line switch vs. MSBuild property argument.\r\nFor most cases, specifying the property early enough would solve the corner case you show.\r\nIt is expected in a project file that an msbuild property does not take effect before it is declared.\r\nThe behavior of a switch can be achieved with the existing /p command-line switch even if it is a property.\r\nProject-to-project references are not a problem either. Typically, a (compiler) warnings as errors policy is team-wide, and teams already have a process in place for ensuring that the property gets into all the necessary projects, by creating a common targets file, for example.\r\nHaving inconsistent behavior between hosts will create further confusion and frustration.\r\n\r\n\r\n",
        "createdAt": "2016-11-22T23:26:15Z",
        "updatedAt": "2016-11-22T23:26:15Z",
        "author": {
          "login": "iouri-s"
        }
      },
      {
        "body": "@iouri-s The main concern is that if you set a property to suppress a warning and there is ever a case where that warning wouldn't be treated as an error, it defeats the purpose of this functionality.  My example above is not really a corner case in my opinion.  \r\n\r\nDo you think an environment variable would good enough?\r\n\r\nI believe that the local build experience will still show warnings unless people manually specify to treat them as errors.  But the `/warnaserror` switch would at least let hosted build environments like CI to fail if a warning is introduced.  This means that pull request validation builds would fail and users would know they need to fix the warning.\r\n\r\nI would love to come up with a way to have the warning list be an MSBuild property but I just don't see a way to ensure that what is specified will actually be treated as an error.",
        "createdAt": "2016-11-22T23:40:28Z",
        "updatedAt": "2016-11-22T23:40:28Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "@jeffkl Hey Jeff, have you talked to anyone inside Visual Studio to get an option inside VS to turn this on?",
        "createdAt": "2017-01-17T03:47:02Z",
        "updatedAt": "2017-01-17T03:47:02Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "I never noticed this was closed. Thanks @jeffkl! \ud83d\udc4d ",
        "createdAt": "2017-01-17T07:55:02Z",
        "updatedAt": "2017-01-17T07:55:02Z",
        "author": {
          "login": "Porges"
        }
      },
      {
        "body": "@davkean Not yet, any recommendations on who to talk to?\r\n\r\n@Porges You're very welcome, I've been wanting the feature myself for a long time.  Spread the word!",
        "createdAt": "2017-01-17T15:37:27Z",
        "updatedAt": "2017-01-17T15:37:27Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "Any update on this?",
        "createdAt": "2017-11-09T19:59:00Z",
        "updatedAt": "2017-11-09T19:59:00Z",
        "author": {
          "login": "memark"
        }
      },
      {
        "body": "@memark the command-line arguments shipped in MSBuild 15.1 and the properties shipped in [MSBuild 15.3](https://github.com/Microsoft/msbuild/releases/tag/v15.3.409.57025) via #1928 ",
        "createdAt": "2017-11-09T20:19:27Z",
        "updatedAt": "2017-11-09T20:19:27Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "@jeffkl this is a great improvement, thank you!  \r\n\r\nThis was closed quite a while ago.  Since then, have you worked with the VS team to get this added as a VS option as @davkean mentioned? Until that exists, it's my understanding that there is simply no way to control this behavior for any Visual-Studio-Driven workflows.  \r\n\r\nIn our specific case, we would want to add a property to `Directory.Build.Props`.  As @iouri-s mentioned, the property would work for a majority of cases.  At least it would be a start, and could come with the disclaimer that users would have to ensure the order it was processed. \r\n\r\nOf note, for native C/C++ projects, we have `ForceImportBeforeCppTargets` flag for `MSBuild`.  However that feature is implemented in MSBuild seems like it could be generalized to `ForceImportBeforeAnythingElse` for this very specific case of \"bootstrapping `MSBuild` settings\". ",
        "createdAt": "2019-08-05T14:18:54Z",
        "updatedAt": "2019-08-05T14:18:54Z",
        "author": {
          "login": "solvingj"
        }
      },
      {
        "body": "@solvingj `<MSBuildTreatWarningsAsErrors>true</MSBuildTreatWarningsAsErrors>` has been supported since MSBuild 15.3:\r\n\r\n> the command-line arguments shipped in MSBuild 15.1 and the properties shipped in [MSBuild 15.3](https://github.com/Microsoft/msbuild/releases/tag/v15.3.409.57025) via #1928\r\n\r\n",
        "createdAt": "2019-08-05T14:21:52Z",
        "updatedAt": "2019-08-05T14:21:52Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Thank you for that @rainersigwald . I was actually more specifically needing to solve this related issue of suppressing specific warnings, in my case `MSB4011`: \r\nhttps://github.com/Microsoft/msbuild/issues/910\r\n\r\nI'm about to look at that link you provided to see if there's a mechanism for this as well.",
        "createdAt": "2019-08-05T15:49:49Z",
        "updatedAt": "2019-08-05T15:49:49Z",
        "author": {
          "login": "solvingj"
        }
      },
      {
        "body": "It looks like this has no effect, likely due to the limitation explained in the start of the PR.  \r\n`    <MSBuildWarningsAsMessages>MSB4011</MSBuildWarningsAsMessages>`\r\n\r\nI guess the remaining questions is, how is it possible that there is no way for the user to append/alter or otherwise affect the `MSBuild` flags when using Visual Studio?  If that existed, we could have easily passed `/WarnAsMessage` (and any other future flag) from visual studio without even needing this property, and without any caveats.",
        "createdAt": "2019-08-05T16:11:14Z",
        "updatedAt": "2019-08-05T16:11:54Z",
        "author": {
          "login": "solvingj"
        }
      },
      {
        "body": "@rainersigwald , if I understand this [comment](https://github.com/dotnet/msbuild/issues/68#issuecomment-518254878) correctly, Visual Studio should support MSBuildWarningsAsErrors. It isn't working for me. Here is my Directory.Build.props.\r\n```\r\n<Project>\r\n    <PropertyGroup>\r\n        <MSBuildWarningsAsErrors>MSB3276;MSB3247;MSB3277;NU1605;MSB3245;MSB3243</MSBuildWarningsAsErrors>\r\n        <WarningsAsErrors>MSB3276;MSB3247;MSB3277;NU1605;MSB3245;MSB3243</WarningsAsErrors>\r\n    </PropertyGroup>\r\n</Project>\r\n```\r\n I am using Visual Studio 2019. When I build my solution it doesn't fail the build or output the warnings as errors to the error pane. It just outputs them in the warning pane like before I set the MSBuildWarningsAsErrors setting. Also, I did this after deleting the .vs folder and clearing the bin and obj folders. On the other hand, Rider and MSBuild will fail and show the errors. \r\n\r\nWhat do you or anyone else recommend we do to get this fixed?\r\n\r\np.s. I know I put the same warnings in both MSBuildWarningsAsErrors and WarningsAsErrors. I wasn't sure what the difference was, so I used both.",
        "createdAt": "2021-05-03T19:16:11Z",
        "updatedAt": "2021-05-03T19:16:11Z",
        "author": {
          "login": "MattBussing"
        }
      },
      {
        "body": "@MattBussing I don't reproduce your problem. Can you file a new issue with more details (ideally a repro project) please?\r\n\r\n![image](https://user-images.githubusercontent.com/3347530/116923971-e2db0b80-ac1c-11eb-8d1e-273067e1504b.png)\r\n\r\n\r\n> p.s. I know I put the same warnings in both MSBuildWarningsAsErrors and WarningsAsErrors. I wasn't sure what the difference was, so I used both.\r\n\r\nGreat news! As of #5774 you can just use `WarningsAsErrors`.\r\n\r\nIn the past, `WarningsAsErrors` was passed explicitly to some places (notably the C# compiler) but never applied to `MSBxxxx` messages, and many tasks didn't use it. `MSBuildWarningsAsErrors` is respected by MSBuild itself, so it can apply to any* warning that has a code.\r\n\r\n\\* This may actually be the problem you're seeing; some of MSBuild's warnings are emitted before we can read this property and thus can't be changed by the property. But please let us know the specific problem you're seeing.",
        "createdAt": "2021-05-03T19:41:41Z",
        "updatedAt": "2021-05-03T19:41:41Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald , thank you so much for the quick response! Thanks for your patience while I filed another issue. Here is the issue with a project that reproduces the error. https://github.com/dotnet/msbuild/issues/6473\r\n\r\nSo what you are saying for the second part is that `WarningsAsErrors` is the same as `MSBuildWarningsAsErrors` now?",
        "createdAt": "2021-05-21T18:57:47Z",
        "updatedAt": "2021-05-21T18:57:47Z",
        "author": {
          "login": "MattBussing"
        }
      },
      {
        "body": "> So what you are saying for the second part is that `WarningsAsErrors` is the same as `MSBuildWarningsAsErrors` now?\r\n\r\nCorrect, in MSBuild 16.9 and higher.",
        "createdAt": "2021-05-21T19:15:01Z",
        "updatedAt": "2021-05-21T19:15:01Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}