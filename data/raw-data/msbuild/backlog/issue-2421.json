{
  "number": 2421,
  "title": "GetAllGlobs are quite slow",
  "body": "I took a perf trace in the project loading scenario (load Roslyn project into VS), and GetAllGlobs uses considerable CPU resources.  (In my trace it took about 1.4 seconds)\r\n\r\n```\r\nName | Inc % | Inc\r\n-- | -- | --\r\nMicrosoft.Build!Project.GetAllGlobs | 2.5 | 1,388\r\n+ Microsoft.Build!Project.BuildGlobResultFromIncludeItem | 1.7 | 934\r\n\\|+ Microsoft.Build!Microsoft.Build.Globbing.CompositeGlob..ctor(class System.Collections.Generic.IEnumerable`1) | 1.5 | 837\r\n\\|\\|+ System.Collections.Immutable!ImmutableArray.ToImmutableArray | 1.5 | 837\r\n\\|\\| + System.Collections.Immutable!ImmutableArray.CreateRange | 1.5 | 837\r\n\\|\\| \u00a0+ system.core.ni!? | 1.5 | 837\r\n\\|\\| \u00a0\u00a0+ Microsoft.Build!Microsoft.Build.Evaluation.ItemSpec`2+<>c[System.__Canon,System.__Canon].<ToMSBuildGlob>b__19_0(class Microsoft.Build.Evaluation.ItemFragment) | 1.5 | 832\r\n\\|\\| \u00a0\u00a0\\|+ Microsoft.Build!ItemFragment.get_MsBuildGlob | 1.5 | 832\r\n\\|\\| \u00a0\u00a0\\| + mscorlib.ni!System.Lazy`1[System.__Canon].get_Value() | 1.5 | 832\r\n\\|\\| \u00a0\u00a0\\| \u00a0+ mscorlib.ni!System.Lazy`1[System.__Canon].LazyInitValue() | 1.5 | 831\r\n\\|\\| \u00a0\u00a0\\| \u00a0\\|+ mscorlib.ni!System.Lazy`1[System.__Canon].CreateValue() | 1.5 | 829\r\n\\|\\| \u00a0\u00a0\\| \u00a0\\|\\|+ Microsoft.Build!ItemFragment.CreateMsBuildGlob | 1.5 | 829\r\n\\|\\| \u00a0\u00a0\\| \u00a0\\|\\| + Microsoft.Build!MSBuildGlob.Parse | 1.5 | 827\r\n\\|\\| \u00a0\u00a0\\| \u00a0\\|\\| \\|+ Microsoft.Build!FileMatcher.GetFileSpecInfo | 1.5 | 798\r\n\\|\\| \u00a0\u00a0\\| \u00a0\\|\\| \\|\\|+ Microsoft.Build!FileMatcher.RegularExpressionFromFileSpec | 1.4 | 788\r\n\\|\\| \u00a0\u00a0\\| \u00a0\\|\\| \\|\\|\\|+ mscorlib.ni!StringBuilder.Replace | 1.3 | 705\r\n\\|\\| \u00a0\u00a0\\| \u00a0\\|\\| \\|\\|\\|\\|+ mscorlib.ni!StringBuilder.StartsWith | 0.8 | 455\r\n```\r\n\r\nOne part of the slowness is coming from RegularExpressionFromFileSpec does lots of string replacements.  May want to investigate how to reduce those overhead, because globbings are now used in every .Net Core projects.\r\n\r\n",
  "state": "CLOSED",
  "createdAt": "2017-08-11T20:54:54Z",
  "updatedAt": "2024-02-21T17:17:20Z",
  "closedAt": "2017-10-02T02:40:13Z",
  "author": {
    "login": "lifengl"
  },
  "labels": [
    "Area: Performance",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "cdmihai"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "This looks related to https://github.com/Microsoft/msbuild/issues/2380, which was dup'd against: https://github.com/Microsoft/msbuild/issues/2392.",
        "createdAt": "2017-08-17T05:48:51Z",
        "updatedAt": "2017-08-17T05:48:51Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "Dup'ing against #2380, if we reopen it - it will be addressed by it, or by #2392.",
        "createdAt": "2017-10-02T02:40:13Z",
        "updatedAt": "2017-10-02T02:40:13Z",
        "author": {
          "login": "davkean"
        }
      }
    ]
  }
}