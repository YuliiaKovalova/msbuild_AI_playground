{
  "number": 7757,
  "title": "msbuild does not \"recover\" from slowdowns",
  "body": "when i build runtime libraries, after quickly building 50 or so libraries, msbuild slows down and doesn't recover the speed it initially possessed for rest of the build.\r\n\r\nreproduction steps:\r\n\r\n```sh\r\n# clone dotnet/runtime on linux\r\n\r\n# first build native prerequisite\r\n./build.sh clr+libs.native\r\n\r\n# then build libs and notice how the build slows down after a first couple of\r\n# libraries are built (and never recovers the speed)\r\n./build.sh libs.src\r\n```",
  "state": "CLOSED",
  "createdAt": "2022-06-28T22:13:17Z",
  "updatedAt": "2022-08-18T16:54:23Z",
  "closedAt": "2022-08-18T16:54:16Z",
  "author": {
    "login": "kasperk81"
  },
  "labels": [
    "Area: Performance",
    "needs-more-info",
    "needs-triage",
    "author-responded"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Can you please collect a trace of the build by installing [`dotnet-trace`](https://docs.microsoft.com/dotnet/core/diagnostics/dotnet-trace) and running your repro with\r\n\r\n```\r\ndotnet trace collect --providers Microsoft-Build -- ./build.sh libs.src\r\n```\r\n\r\n? That should collect perf information using [our events](https://github.com/dotnet/msbuild/blob/main/documentation/specs/event-source.md).",
        "createdAt": "2022-07-07T16:32:45Z",
        "updatedAt": "2022-07-07T16:32:45Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "docs say:\r\n\r\n> **Note**\r\n>\r\n>Using this option monitors the first .NET 5 process that communicates back to the tool, which means if your command launches multiple .NET applications, it will only collect the first app. Therefore, it is recommended you use this option on self-contained applications, or using the dotnet exec <app.dll> option.\r\n\r\nsince `./build.sh libs.src` invokes `dotnet` internally multiple, it doesn't work. i didn't find a \"follow child\" option, provided by similar tools; `strace -f` or gdb (all versions) and lldb (version 14 onward) `follow-fork-mode` option.\r\n\r\n@hoyosjs",
        "createdAt": "2022-07-07T17:34:22Z",
        "updatedAt": "2022-07-07T17:34:22Z",
        "author": {
          "login": "kasperk81"
        }
      },
      {
        "body": "That's good feedback, but sadly I don't think there's a provision for that. I opened https://github.com/dotnet/diagnostics/issues/3175 to discuss the issue. @rainersigwald, when a build shells out using the MSBuild task, is there a way to get an equivalent invocation from the binlog such that `dotnet exec msbuild` could reproduce the issues in a single instance?",
        "createdAt": "2022-07-07T20:48:43Z",
        "updatedAt": "2022-07-07T20:48:43Z",
        "author": {
          "login": "hoyosjs"
        }
      },
      {
        "body": "No, unfortunately MSBuild is multi-process by design and while you can build with `-m:1` to avoid that, it dramatically alters the perf characteristics of the build so it's probably not something that would be helpful here.\r\n\r\nA binlog might have sufficient information to observe and possibly troubleshoot the slowdown, though.",
        "createdAt": "2022-07-07T20:51:30Z",
        "updatedAt": "2022-07-07T20:51:30Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald, here is `artifacts/log/Debug/Build.binlog` from `./build.sh clr+libs --binarylog`: https://github.com/kasperk81/runtime/releases/download/msbuild_binlogs/Build.binlog\r\n\r\nweirdly enough, the total duration is smaller than core compile task alone:\r\n\r\n![image](https://user-images.githubusercontent.com/83082615/178055683-a36bfb55-7d27-44b7-bd68-8d9cdec40292.png)\r\n",
        "createdAt": "2022-07-08T19:10:46Z",
        "updatedAt": "2022-07-08T19:10:46Z",
        "author": {
          "login": "kasperk81"
        }
      },
      {
        "body": "> the total duration is smaller than core compile task alone\r\n\r\nThat is not unexpected: total duration is \"total wall-clock time\", while task times are \"sum of wall-clock time\", and we can run many of them in parallel on your 16-core machine.\r\n\r\nTaking a quick look at the log nothing is jumping out at me; there are some long serialized segments but they all seemed inherent to the nature of the repo, for example compiling/linking/crossgenning corelib before unblocking a bunch of stuff (that presumably depends on corelib).",
        "createdAt": "2022-07-08T19:33:17Z",
        "updatedAt": "2022-07-08T19:33:17Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> nothing is jumping out at me\r\n\r\nok, in that case, we can close this. it just always feels like after quickly building couple of libraries, the build slows down then it continues on degraded speed. it is probably tied to project-to-project dependency graph; the leaf nodes build quicker than the others.",
        "createdAt": "2022-07-08T20:33:41Z",
        "updatedAt": "2022-07-08T20:33:41Z",
        "author": {
          "login": "kasperk81"
        }
      }
    ]
  }
}