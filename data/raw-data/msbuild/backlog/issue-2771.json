{
  "number": 2771,
  "title": "BuildAbortedException because two binary equal Microsoft.Build.dll differs in LastWriteTime ",
  "body": "### Summary\r\nMSBuild uses a handshake mechanism to determine if two MSBuild nodes can work with each other. This handshake is calculated in the NodeProviderOutOfProc.GetHostHandshake(bool enableNodeReuse) method. One part of the handshake is the LastWriteTime of the Microsoft.MSBuild.dll assembly. This time is read in the Microsoft.Build.Internal.Constants.AssemblyTimestamp property. When you deploy e.g. a custom build tool which brings its own copy of the Microsoft.Build.dll the handshake will never succeed. The reason is that the LastWriteTime depends on the time at which you have installed MSBuild on your system.\r\n\r\nWhen you face this problem a BuildAbortedException is throw with the message \u201cFailed to successfully launch or connect to a child MSBuild.exe process\u201d. In the traces you will see e.g. \u201cHandshake failed. Received 57581269766385075 from host not 66982339790952257. Probably the host is a different MSBuild build\u201d.\r\n\r\n### Expected  behavior\r\nFrom my point of view it would make more sense to just check the full qualified name of the assembly.\r\n\r\n### Environment data\r\nMicrosoft (R) Build Engine version 15.4.8.50001 for .NET Framework\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\nOS info:\r\nMicrosoft Windows [Version 6.1.7601]\r\n",
  "state": "CLOSED",
  "createdAt": "2017-12-04T10:05:54Z",
  "updatedAt": "2024-02-21T17:15:25Z",
  "closedAt": "2021-06-21T19:16:45Z",
  "author": {
    "login": "chuchu"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "In your situation is the assembly binary identical, just a duplicate? The handshake is intended to prevent undefined behavior because the contract between nodes is not a stable one, two versions of the binary may have different ideas about it.",
        "createdAt": "2017-12-07T22:33:56Z",
        "updatedAt": "2017-12-07T22:33:56Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "My copy of the Microsoft.Build.dll assembly is binary identical with the one which ships with MSBuild. The two files differ only in there last write time which belongs to the file system. This time stamp may change during zip / unzip operation or when you use a copy of another installation.\r\nUnfortunately this time stamp is also included in the handshake. I think this was Ok when the library was installed into the GAC. Then MSBuild and any other executable, which references this assembly will use the same version. But since this assembly is not in the GAC each application need its own copy. I would suggest to use the assembly version instead. Do you really change the contract and keep the version?",
        "createdAt": "2017-12-08T18:42:31Z",
        "updatedAt": "2017-12-08T18:42:31Z",
        "author": {
          "login": "chuchu"
        }
      },
      {
        "body": "I don't know whether the file version increments systematically (I'm not on the MSBuild team). How is the custom build tool causing a different version of Microsoft.Build.dll to load? Isn't it being loaded into an (already launched) MSBuild child process, which already has the \"real\" Microsoft.Build.dll loaded into it?",
        "createdAt": "2017-12-08T18:52:13Z",
        "updatedAt": "2017-12-08T18:52:13Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "No, its an own self made console application linked against Microsoft.Build.dll. The build is triggered with BuildManager.DefaultBuildManager.Build(\u2026). This call spawns its own MSBuild processes. Each application (MSBuild and the custom one) loads the  Microsoft.Build.dll from its application directory. ",
        "createdAt": "2017-12-08T20:47:32Z",
        "updatedAt": "2017-12-08T20:47:32Z",
        "author": {
          "login": "chuchu"
        }
      },
      {
        "body": "I'm experiencing a similar issue.\r\n\r\nI've got a custom build tool that I use in my organization, that I've been using since VS2005. Recently I ported the tool to the latest version of msbuild, to be able to build VS2017 projects.\r\n\r\nMy reference to msbuild dlls is to their respective nuget packages, instead of referencing the dlls from the GAC as in the past. This is because I no longer know where the build tools will be installed on each developer machine.\r\nThe assembly version of Microsoft.Build.dll I'm referencing is identical to the one used by the MSBuild process located in \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\MSBuild\\15.0\\Bin\", but they're not binary equal. The one in my build tool is 1,511,592 bytes in size, while the one installed by VS2017 is 1,691,816 bytes.\r\n\r\nThe weird thing is I'm seeing the BuildAbortedException when BuildManager.Build completes successfully, after the BuildFinished event in the ProjectCollection logger is raised. If I cancel the build with BuildManager.CancelAllSubmissions, the issue doesn't manifest.\r\n\r\nAm I doing something wrong?",
        "createdAt": "2018-01-10T15:16:09Z",
        "updatedAt": "2018-01-10T15:16:09Z",
        "author": {
          "login": "fedeazzato"
        }
      },
      {
        "body": "I believe this is long resolved. Please let us know if you see otherwise.",
        "createdAt": "2021-06-21T19:16:45Z",
        "updatedAt": "2021-06-21T19:16:45Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}