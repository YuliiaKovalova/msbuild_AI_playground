{
  "number": 6388,
  "title": "Consumption of SkipEagerWildcardEvaluations in VS blocked on exclude bugs",
  "body": "From the VS side, we see about 3-3.5% in solution load gains when using _SkipEagerWildcardEvaluations_ . But Mihai mentioned the below where there are potential bugs in that codepath that would need to be cleared out for consumption.\r\n\r\n_As far as I remember if you have Include=\u201d*.cs\u201d Exclude=\u201dfoo.cs\u201d, if *.cs is expanded lazily then it won\u2019t apply the exclude pattern and hence the glob result will have foo.cs. IIRC this happens because lazy expansion is implemented deep inside the Evaluator when it reads an item, at which point all the details about the item element that produced that item (like the contents of the Exclude attribute) are lost. It\u2019s not obvious to me how to fix this without doing a deep dive into the code._\r\n\r\nConsider adding this to your backlog of VS requests. Given how old the codebase is, I\u2019m of the opinion that we should try and chase down any areas we know there are gains, because it\u2019s more likely for us to get a lot of small gains than 1 big gain, unless there is a huge codebase rewrite. ",
  "state": "OPEN",
  "createdAt": "2021-04-29T18:57:18Z",
  "updatedAt": "2024-01-31T08:21:16Z",
  "closedAt": null,
  "author": {
    "login": "arunchndr"
  },
  "labels": [
    "bug",
    "backlog",
    "Area: Performance",
    "CPS",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Hi  @arkalyanms ,\r\n\r\nI'd like to do initial investigation about this issue.  Could you give more information about how to use SkipEagerWildcardEvaluations?",
        "createdAt": "2022-08-31T03:16:27Z",
        "updatedAt": "2022-08-31T03:16:27Z",
        "author": {
          "login": "JaynieBai"
        }
      },
      {
        "body": "This was a while ago and I may have forgotten some context. The whole point was to speed up netcore evaluation.\r\n\r\nDuring the project evaluation call into CPS, we currently use RecordDuplicateButNotCircularImports |RejectCircularImports |IgnoreEmptyImports| IgnoreMissingImports |IgnoreInvalidImports | RecordEvauationItemElements.\r\n\r\nIf user excludes some large folders by using \u2018Remove\u2019, instead of setting some SDK macro, we can benefit from using SkipEagerWildcardEvaluations as well. I think the reason why they put this as an option, instead of always switching to it, is that it can make some projects faster and others slower, by potentially evaluating multiple times in some cases. So project evaluation might need to be benchmarked against different project types.\r\n\r\nLifeng Lu currently works on the CPS side and may be able to explain better.",
        "createdAt": "2022-08-31T16:42:07Z",
        "updatedAt": "2022-08-31T16:42:07Z",
        "author": {
          "login": "arunchndr"
        }
      }
    ]
  }
}