{
  "number": 4907,
  "title": "Consider limiting task-input logging character max",
  "body": "An internal partner reported (see [AB#1019268](https://devdiv.visualstudio.com/0bdbc590-a062-4c3f-b0f6-9383f67865ee/_workitems/edit/1019268)) out-of-memory errors in VS when using their large solution. @merlynoppenheim debugged and discovered that `LogTaskInputs` was enabled (by Project System Tools turning on binary logging for design-time builds), and a huge amount of memory was attributable to `ItemGroupLoggingHelper.GetParameterText` building up strings to log.\r\n\r\nIn the project in question, there was a single task that tried to log 9966 items, each with ~60 metadata values, some of which were long (I caught one at 172,800 characters and one at 51,860).\r\n\r\nWe should consider having an on-by-default cap on how much gets logged. It's not _useless_ to log all of this input: you can imagine pulling it out of the log and doing something useful with it. But there's surely a point of diminishing returns between logging one input (yes! Definitely!) and logging a megabyte of text (is this actually useful?).\r\n\r\nWe spitballed a limit like \"the first 10k characters of the item inputs as text\".",
  "state": "CLOSED",
  "createdAt": "2019-11-11T17:55:35Z",
  "updatedAt": "2024-02-21T17:06:07Z",
  "closedAt": "2020-04-08T17:21:35Z",
  "author": {
    "login": "rainersigwald"
  },
  "labels": [
    "Area: Debuggability",
    "Area: Performance",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "benvillalobos"
      }
    ]
  },
  "milestone": {
    "title": "MSBuild 16.6 Preview 3"
  },
  "comments": {
    "nodes": [
      {
        "body": "Related to #2200, but a different approach: instead of avoiding creating LOH strings, just discard (part of) them.",
        "createdAt": "2019-11-11T17:57:01Z",
        "updatedAt": "2019-11-11T17:57:01Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "This might be a duplicate of microsoft/msbuild#2168, though.",
        "createdAt": "2019-11-11T18:02:08Z",
        "updatedAt": "2019-11-11T18:02:08Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Hi there. I'm pretty sure we're hitting this whilst running a custom-build step of ours. We have an intermittent failure of a custom-build step, with many inputs. The length of the Inputs field is over 190k characters long. See the bug I filed here: https://developercommunity.visualstudio.com/content/problem/804881/visual-studio-2019-cant-run-custombuildstep-with-l.html?childToView=825578#comment-825578\r\n\r\nAfter further debugging, two different callstacks surface (reproduced below), both in regards to logging. Turning `MSBuild project build output verbosity` to Quiet works around this issue. This is not a suitable workaround.\r\n\r\nIs there a way we can rewrite this as a task or something to avoid this? It's a severe blocker. Thanks!\r\n\r\n\r\n```\r\nSystem.OutOfMemoryException: Exception of type 'System.OutOfMemoryException' was thrown.\r\n   at System.Text.StringBuilder.ToString()\r\n   at Microsoft.Build.Shared.ReuseableStringBuilder.ToString()\r\n   at Microsoft.Build.BackEnd.ItemGroupLoggingHelper.GetParameterText(String prefix, String parameterName, IList parameterValue)\r\n   at Microsoft.Build.BackEnd.ItemGroupIntrinsicTask.ExecuteRemove(ProjectItemGroupTaskItemInstance child, ItemBucket bucket)\r\n   at Microsoft.Build.BackEnd.ItemGroupIntrinsicTask.ExecuteTask(Lookup lookup)\r\n```\r\n\r\n\r\n```\r\nSystem.OutOfMemoryException: Exception of type 'System.OutOfMemoryException' was thrown.\r\n   at System.String.Split(String[] separator, Int32 count, StringSplitOptions options)\r\n   at Microsoft.Build.BackEnd.Logging.BaseConsoleLogger.IndentString(String s, Int32 indent)\r\n   at Microsoft.Build.BackEnd.Logging.BaseConsoleLogger.WriteLinePretty(Int32 indentLevel, String formattedString)\r\n   at Microsoft.Build.BackEnd.Logging.SerialConsoleLogger.MessageHandler(Object sender, BuildMessageEventArgs e)\r\n   at Microsoft.VisualStudio.ProjectSystem.VS.Implementation.Build.VsOutputWindowFormatter.AnyEventRaisedHandler(Object sender, BuildEventArgs args)\r\n   at Microsoft.Build.Utilities.MuxLogger.SubmissionRecord.RaiseAnyEvent(Object sender, BuildEventArgs buildEvent)\r\n   at Microsoft.Build.BackEnd.Logging.EventSourceSink.RaiseAnyEvent(Object sender, BuildEventArgs buildEvent)\r\n```",
        "createdAt": "2019-11-26T02:07:51Z",
        "updatedAt": "2019-11-26T02:08:21Z",
        "author": {
          "login": "omnigoat"
        }
      },
      {
        "body": "Also improved by https://github.com/dotnet/msbuild/pull/6155",
        "createdAt": "2021-03-04T03:10:47Z",
        "updatedAt": "2021-03-04T03:10:47Z",
        "author": {
          "login": "KirillOsenkov"
        }
      }
    ]
  }
}