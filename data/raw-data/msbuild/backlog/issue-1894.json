{
  "number": 1894,
  "title": "MSBuild command parser confused by Fully Qualified Path to proj files in Linux root",
  "body": "## Steps to reproduce\r\nOn a linux machine, with root access:\r\n- `cd /`\r\n- `dotnet new console`\r\n- `dotnet restore`\r\n- `dotnet msbuild /.csproj`\r\n\r\n## Expected  behavior\r\nApp builds\r\n\r\n## Actual behavior\r\n```\r\nMSBUILD : error MSB1001: Unknown switch.\r\nSwitch: /.csproj\r\n\r\nFor switch syntax, type \"MSBuild /help\"\r\n\r\nThe build failed. Please fix the build errors and run again.\r\n```\r\n\r\n## Investigation\r\nThis is related to https://github.com/dotnet/templating/issues/454 and https://github.com/dotnet/cli/issues/6092\r\n\r\nWhen creating a new project in root, the resultant csproj file gets named `.csproj`. This likely gets passed to MSBuld as `/.csproj` which, in turn, is interpreted as a parameter name [MSBuild parameters tend to be named `/{some string}`. \r\n\r\nThough the CLI's `new` experience is likely not right, `/.csproj` looks like a perfectly valid fully-qualified file path on Linux. \r\n\r\n### Important\r\nFurthermore, the same issue repros even if the csproj file has a name, e.g. `foo.csproj` so long as it is in the root. Specifically, `dotnet msbuild /foo.csproj` fails. The fully qualified path can only be passed in if the file resides in a subdirectory of root, not root directly.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n```\r\n.NET Command Line Tools (1.0.1)\r\n\r\nProduct Information:\r\n Version:            1.0.1\r\n Commit SHA-1 hash:  005db40cd1\r\n\r\nRuntime Environment:\r\n OS Name:     debian\r\n OS Version:  8\r\n OS Platform: Linux\r\n RID:         debian.8-x64\r\n Base Path:   /usr/share/dotnet/sdk/1.0.1\r\n```",
  "state": "CLOSED",
  "createdAt": "2017-03-21T22:48:42Z",
  "updatedAt": "2024-02-21T17:20:28Z",
  "closedAt": "2017-04-13T18:08:00Z",
  "author": {
    "login": "TheRealPiotrP"
  },
  "labels": [
    "bug",
    "help wanted",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "MSBuild 15.3"
  },
  "comments": {
    "nodes": [
      {
        "body": "We actually have special magic to determine if a `/`-prefixed parameter is a path: https://github.com/Microsoft/msbuild/blob/c698d39bb389177224b2b3ff69155b51f3bd8d66/src/MSBuild/XMake.cs#L1420-L1421\r\n\r\nLooks like the problem here is that [`LooksLikeUnixFilePath`](https://github.com/Microsoft/msbuild/blob/63ddeb67142dd81d5518ebc5c7e248e789919b35/src/Shared/FileUtilities.cs#L462) assumes that it's not in the root: it checks whether the first element is a directory that exists. In this case it's a file that exists.\r\n\r\nYou should be able to work around this if you're dealing with it manually by doing something like `dotnet msbuild /src/../.csproj`.",
        "createdAt": "2017-03-21T22:59:15Z",
        "updatedAt": "2017-03-21T22:59:15Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "yep, I figured out that subdirectories work. However, the root directory issue should be looked at. It looks like docker containers typically start users out in the root of the container. I created a `microsoft/dotnet` container, ran `dotnet new`, and ended up with a broken project.",
        "createdAt": "2017-03-21T23:25:03Z",
        "updatedAt": "2017-03-21T23:25:03Z",
        "author": {
          "login": "TheRealPiotrP"
        }
      },
      {
        "body": "Sounds reasonable and should be a small, scoped change.",
        "createdAt": "2017-03-22T15:35:41Z",
        "updatedAt": "2017-03-22T15:35:41Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Does it make sense to ask the template engine to not create project in the root directory? (without a `--force` maybe)\r\nFeels somehow dangerous to have the default globs search the entire container..",
        "createdAt": "2017-03-24T01:21:47Z",
        "updatedAt": "2017-03-24T01:22:14Z",
        "author": {
          "login": "dasMulli"
        }
      },
      {
        "body": "@patros fixed this for MSBuild (thanks!), but I think @dasMulli's point about accidentally globbing _the entire filesystem_ when building is a good one. @livarcocc that's worth considering as a feature in CLI.",
        "createdAt": "2017-04-13T18:13:44Z",
        "updatedAt": "2017-04-13T18:13:44Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Just for anyone coming across this issue from `docker build`, I manage to fix it my `docker build` by changing my `Dockerfile` line from:\r\n\r\n     RUN dotnet restore src-identityserver.csproj\r\n\r\nto\r\n\r\n    RUN dotnet restore ./src-identityserver.csproj\r\n\r\nSeem to be enough to make MSBuild pick it up correctly and build the container.",
        "createdAt": "2018-07-05T00:57:57Z",
        "updatedAt": "2018-07-05T00:57:57Z",
        "author": {
          "login": "michal-ciechan"
        }
      }
    ]
  }
}