{
  "number": 9054,
  "title": "[Feature Request]: Support non-Latin characters in MSBuild properties/itemgroups",
  "body": "### Summary\n\nI would like that MSBuild support at least property groups\r\n```\r\n<PropertyGroup>\r\n     <\u0414\u0456\u0430\u043b\u0435\u043a\u0442FSharp>ua</\u0414\u0456\u0430\u043b\u0435\u043a\u0442FSharp>\r\n</PropertyGroup>\r\n```\n\n### Background and Motivation\n\nBy itself Nuget handle such packages fine, dotnet build also works fine. But If I add \r\n```\r\n<ItemGroup>\r\n  <PackageReference Include=\"\u0412\u0435\u0441\u0435\u043b\u0428\u0430\u0440\u043f.\u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430\" Version=\"1.0.0\" GeneratePathProperty=\"true\" />\r\n</ItemGroup>\r\n```\r\nthe tooling generates \r\n```\r\n<Pkg\u0412\u0435\u0441\u0435\u043b\u0428\u0430\u0440\u043f_\u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 Condition=\" '$(Pkg\u0412\u0435\u0441\u0435\u043b\u0428\u0430\u0440\u043f_\u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430)' == '' \">C:\\Users\\User\\.nuget\\packages\\\u0432\u0435\u0441\u0435\u043b\u0448\u0430\u0440\u043f.\u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430\\1.0.0</Pkg\u0412\u0435\u0441\u0435\u043b\u0428\u0430\u0440\u043f_\u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430>\r\n```\r\nand this is produce `error MSB5016: The name \"Pkg\u0412\u0435\u0441\u0435\u043b\u0428\u0430\u0440\u043f_\u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430\" contains an invalid character \"\u0412\".`\n\n### Proposed Feature\n\nRelax XML naming parser to support at least Cyrillic. I suspect Arabic would works too, but I do not have plans to use this, and this maybe too complicate.\r\n\r\nI hope that only changes here would be enough:\r\nhttps://github.com/dotnet/msbuild/blob/a9034a279cdb9f31166fa1212439822e6b2fbf56/src/Shared/XmlUtilities.cs#L169-L182\n\n### Alternative Designs\n\n_No response_",
  "state": "OPEN",
  "createdAt": "2023-07-20T10:58:32Z",
  "updatedAt": "2024-01-31T08:13:42Z",
  "closedAt": null,
  "author": {
    "login": "kant2002"
  },
  "labels": [
    "backlog",
    "Feature Request",
    "Priority:3",
    "triaged",
    "gathering-feedback"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "It seems technically possible to implement but could cause some problems:\n\n- Developer might not know how to type those letters on the keyboard.  Mitigation:\n  - NuGet packages that are intended for developers worldwide should be named with Latin characters\n  - Projects that want contributions from developers worldwide should name their properties, items, and metadata with Latin characters\n- Cyrillic characters might look like Latin characters (homoglyphs).  A developer who types the characters to the project file or MSBuild command-line option might use the wrong alphabet and then the name wouldn't match.  Mitigation:\n  - Use a name that is a word in a language that the expected developers understand, so that they can guess the alphabet.\n  - Or copy and paste the name.\n- [Unicode Standard Annex #31](https://www.unicode.org/reports/tr31/) has recommendations for characters that should be allowed in identifiers, and how those identifiers should then be normalised for equality comparison.  An implementation of that seems likely to be slower than the current ASCII-only syntax.\n  - I believe Visual Basic .NET already uses this in case-insensitive mode, so it cannot be horribly slow.",
        "createdAt": "2023-07-20T11:22:34Z",
        "updatedAt": "2023-07-20T11:22:34Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "# A bit of my thought on item 3\r\n\r\nC# use this rules for identifier checking.\r\nhttps://github.com/dotnet/roslyn/blob/9999d45981eb74581530c28d297f04ce9ba51004/src/Compilers/Core/Portable/InternalUtilities/UnicodeCharacterUtilities.cs#L15-L43\r\n\r\nSimilarly in F#\r\nhttps://github.com/dotnet/fsharp/blob/254efcb7a4aa1ec059a1d2b1cb41ccf748cd97bf/vsintegration/src/FSharp.Editor/Completion/CompletionUtils.fs#L32C33-L50\r\n\r\nAnd in general broad .NET ecosystem well prepared for such \"extensions\". At least I was able to successfully create libraries with non English API.\r\n\r\n# and item 1\r\n\r\nI personally explore old idea of localized programming languages. So really I would like to have bare minimum from the ecosystem to continue my exploration and not have maintainance burden on any project which I touch. Having said that, I think we are currently have country-wide ecosystem of tools and libraries to some degree, so I personally do not think that world wide reach for libraries outside of dev tooling domain is always great direction. \r\n\r\n# item 2\r\n\r\nHonestly I never experience this is as an complicated issue, but I never work in editor tooling. For me such letter confusion always was more fun games then something serious. and VS code has annoying property do mark non-Latin confusing letters. Have 3 keyboard layout is already annoying enough. So I admin my ignorance on the topic and would like to be educated if possible.",
        "createdAt": "2023-07-20T13:18:17Z",
        "updatedAt": "2023-07-20T13:18:17Z",
        "author": {
          "login": "kant2002"
        }
      },
      {
        "body": "Team triage: Let's gather customer's interest in this feature.",
        "createdAt": "2023-07-21T15:23:44Z",
        "updatedAt": "2023-07-21T15:23:44Z",
        "author": {
          "login": "AR-May"
        }
      }
    ]
  }
}