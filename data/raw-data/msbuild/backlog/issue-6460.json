{
  "number": 6460,
  "title": "A crash in evaluator causes MSBuild to fail the build with 0 errors 0 warnings",
  "body": "We should harden MSBuild against crashes in various places to ensure that we get a decent behavior and report the original stack.\r\n\r\nA sample exception I'm seeing here causes these symptoms:\r\n\r\n```\r\nPath.CheckInvalidPathChars Line 1394\r\nPath.Combine Line 1204\r\nFileUtilities.GetFullPath Line 667\r\nLazyItemEvaluator`4.LazyItemList.ProcessNonWildCardItemUpdates Line 431\r\nLazyItemEvaluator`4.LazyItemList.ComputeItems Line 402\r\nLazyItemEvaluator`4.LazyItemList.GetItemData Line 290\r\nLazyItemEvaluator`4.<>c.<GetAllItemsDeferred>b__26_0 Line 489\r\nEnumerable.<SelectManyIterator>d__17`2.MoveNext\r\nBuffer`1..ctor\r\nOrderedEnumerable`1.<GetEnumerator>d__1.MoveNext\r\nEvaluator`4.Evaluate Line 665\r\nEvaluator`4.Evaluate Line 320\r\nProjectInstance.Initialize Line 2752\r\nProjectInstance..ctor Line 484\r\nBuildRequestConfiguration.<>c__DisplayClass61_0.<LoadProjectIntoConfiguration>b__0 Line 474\r\nBuildRequestConfiguration.InitializeProject Line 500\r\nBuildRequestConfiguration.LoadProjectIntoConfiguration Line 433\r\nRequestBuilder.<BuildProject>d__67.MoveNext Line 1118\r\nAsyncTaskMethodBuilder`1.Start Line 472\r\nRequestBuilder.BuildProject\r\nRequestBuilder.<BuildAndReport>d__58.MoveNext Line 812\r\nAsyncTaskMethodBuilder.Start Line 317\r\nRequestBuilder.BuildAndReport\r\nRequestBuilder.<RequestThreadProc>d__57.MoveNext Line 777\r\nAsyncTaskMethodBuilder.Start Line 317\r\nRequestBuilder.RequestThreadProc\r\nRequestBuilder.<StartBuilderThread>b__52_2 Line 702\r\nTask`1.InnerInvoke Line 680\r\nTask.Execute Line 2499\r\nTask.ExecutionContextCallback Line 2861\r\nExecutionContext.RunInternal Line 981\r\nExecutionContext.Run Line 928\r\nTask.ExecuteWithThreadLocal Line 2827\r\nTask.ExecuteEntry Line 2757\r\nTaskScheduler.TryExecuteTask Line 458\r\nRequestBuilder.DedicatedThreadsTaskScheduler.<InjectThread>b__6_0 Line 1411\r\nThreadHelper.ThreadStart_Context Line 69\r\nExecutionContext.RunInternal Line 981\r\nExecutionContext.Run Line 928\r\nExecutionContext.Run Line 917\r\nThreadHelper.ThreadStart Line 106\r\n```\r\n\r\nIn the Path.Combine, the first argument is:\r\n`C:\\A\\src\\Shims`\r\nand the second one is:\r\n`\\Users\\kirill\\AppData\\Local\\Microsoft\\A\\Temp\\WebTooling\\Schemas\\JSON\\Catalog\\https`\r\n\r\nThrowing this ArgumentException from this location causes the problem:\r\nhttps://github.com/dotnet/msbuild/blob/d07c47adec8d5cf40718ef9a618b0b959cc8be0d/src/Build/Evaluation/LazyItemEvaluator.cs#L431",
  "state": "CLOSED",
  "createdAt": "2021-05-17T03:44:06Z",
  "updatedAt": "2024-02-21T14:13:26Z",
  "closedAt": "2022-02-18T21:57:40Z",
  "author": {
    "login": "KirillOsenkov"
  },
  "labels": [
    "bug",
    "Area: Debuggability",
    "Area: Engine",
    "has-repro",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "Forgind"
      }
    ]
  },
  "milestone": {
    "title": "VS 17.2"
  },
  "comments": {
    "nodes": [
      {
        "body": "The exception occurred as part of this scenario:\r\nhttps://github.com/dotnet/msbuild/issues/6459",
        "createdAt": "2021-05-17T03:45:12Z",
        "updatedAt": "2021-05-17T03:45:12Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "`itemsWithNoWildcards` has two items, `items` has 1.5 million items (which are all the files on my drive)",
        "createdAt": "2021-05-17T03:47:36Z",
        "updatedAt": "2021-05-17T03:47:36Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "Hmm, I happened to have a file with this name in that location:\r\n\r\nDirectory:\r\n`\\Users\\kirill\\AppData\\Local\\Microsoft\\A\\Temp\\WebTooling\\Schemas\\JSON\\Catalog\\https`\r\nfile:\r\n`https%003A%002F%002Fgo.microsoft.com%002Ffwlink%002F%003Flinkid%003D835884`\r\n\r\nThis causes the ArgumentException in Path.Combine.",
        "createdAt": "2021-05-17T03:49:12Z",
        "updatedAt": "2021-05-17T03:49:12Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "No, the debugger was lying to me, the `path` that we're checking for null contains a zero char??",
        "createdAt": "2021-05-17T04:18:52Z",
        "updatedAt": "2021-05-17T04:31:15Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "OK, I have a minimal repro:\r\n\r\nPaste this into 1.csproj:\r\n\r\n```\r\n<Project>\r\n\r\n  <ItemGroup>\r\n    <File Include=\"*\" />\r\n    <File Update=\"a\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\r\n\r\nIn the same directory, create a file with the name `%00`. And build.",
        "createdAt": "2021-05-17T04:19:33Z",
        "updatedAt": "2021-05-17T04:19:33Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "Hmm, but this small repro does print the full exception call stack:\r\n\r\n```\r\nBuild FAILED.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:00:00.02\r\nMSBUILD : error MSB1025: An internal failure occurred while running MSBuild.\r\nSystem.ArgumentException: Illegal characters in path.\r\n   at System.IO.Path.CheckInvalidPathChars(String path, Boolean checkAdditional)\r\n   at System.IO.Path.Combine(String path1, String path2)\r\n   at Microsoft.Build.Shared.FileUtilities.GetFullPath(String fileSpec, String currentDirectory)\r\n   at Microsoft.Build.Evaluation.LazyItemEvaluator`4.LazyItemList.ProcessNonWildCardItemUpdates(Dictionary`2 itemsWithNoWildcards, Builder items)\r\n   at Microsoft.Build.Evaluation.LazyItemEvaluator`4.LazyItemList.ComputeItems(LazyItemList lazyItemList, ImmutableHashSet`1 globsToIgnore)\r\n   at Microsoft.Build.Evaluation.LazyItemEvaluator`4.LazyItemList.GetItemData(ImmutableHashSet`1 globsToIgnore)\r\n   at Microsoft.Build.Evaluation.LazyItemEvaluator`4.<>c.<GetAllItemsDeferred>b__26_0(LazyItemList itemList)\r\n   at System.Linq.Enumerable.<SelectManyIterator>d__17`2.MoveNext()\r\n   at System.Linq.Buffer`1..ctor(IEnumerable`1 source)\r\n   at System.Linq.OrderedEnumerable`1.<GetEnumerator>d__1.MoveNext()\r\n   at Microsoft.Build.Evaluation.Evaluator`4.Evaluate()\r\n```",
        "createdAt": "2021-05-17T04:22:19Z",
        "updatedAt": "2021-05-17T04:22:19Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "Maybe there won't be an exception if this happens in a worker node??",
        "createdAt": "2021-05-17T04:23:20Z",
        "updatedAt": "2021-05-17T04:23:20Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "Basically having files with `%00` on my drive, and then globbing all files from my drive resulted in this. Not how I wanted to spend my Sunday, but I'm happy I found a couple obscure issues!",
        "createdAt": "2021-05-17T04:24:23Z",
        "updatedAt": "2021-05-17T04:24:23Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "HAH!!!! I got it!\r\n\r\nRequestBuilder catch block has a hole here for non-fatal exceptions:\r\nhttps://github.com/dotnet/msbuild/blob/d07c47adec8d5cf40718ef9a618b0b959cc8be0d/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs#L841\r\n\r\nModify the previous repro to use this project instead:\r\n\r\n```\r\n<Project>\r\n\r\n  <ItemGroup Condition=\"$(IsInner) == true\">\r\n    <File Include=\"*\" />\r\n    <File Update=\"a\" />\r\n  </ItemGroup>\r\n\r\n  <Target Name=\"Build\">\r\n    <MSBuild Projects=\"$(MSBuildThisFileFullPath)\" Targets=\"Inner\" Properties=\"IsInner=true\"/>\r\n  </Target>\r\n\r\n  <Target Name=\"Inner\">\r\n  </Target>\r\n\r\n</Project>\r\n```",
        "createdAt": "2021-05-17T04:29:27Z",
        "updatedAt": "2021-05-17T04:29:27Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "Output:\r\n\r\n```\r\nC:\\Temp>msbuild 1.proj\r\nMicrosoft (R) Build Engine version 16.9.0+5e4b48a27 for .NET Framework\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\nBuild started 5/16/2021 9:28:00 PM.\r\n\r\nBuild FAILED.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:00:00.07\r\n```",
        "createdAt": "2021-05-17T04:29:48Z",
        "updatedAt": "2021-05-17T04:29:48Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "Well, that was Sunday well spent, even if I say so myself. ",
        "createdAt": "2021-05-17T04:30:20Z",
        "updatedAt": "2021-05-17T04:30:20Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "So we could add a very specific exception for if it finds an invalid path character, but I highly doubt that's the only way \"build failed 0 warnings 0 errors\" could come about in Evaluator. Finding all the possible sources of error would be a huge task. A relatively easy fix that would at least get the user a stack to try to identify what went wrong is if we wrapped all of Evaluate in a try/catch and logged a fairly generic error with a stack immediately rather than letting it bubble up to BuildAndReport, which clearly has no idea what to do. Does that sound good enough?",
        "createdAt": "2022-02-03T20:46:09Z",
        "updatedAt": "2022-02-03T20:46:09Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "I recommend you turn on first-chance exceptions in the debugger and step through building this project:\r\nhttps://github.com/dotnet/msbuild/issues/6460#issuecomment-841975519\r\n\r\nYou will see that the first catch block is here:\r\nhttps://github.com/dotnet/msbuild/blob/09bdfae164eac3b5c9027d803ffa513efaf91095/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs#L1107\r\n\r\nThe second catch block is here:\r\nhttps://github.com/dotnet/msbuild/blob/09bdfae164eac3b5c9027d803ffa513efaf91095/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs#L823\r\n\r\nThe problem is that this second catch block is effectively throwing away all non-critical exceptions.\r\n\r\nI don't care about this specific exception (invalid char). This is just a convenient representative of a class of exceptions in the build that will go unnoticed when they happen. As you correctly point out, there could be a plethora of these. We need to harden against all potential exceptions that bubble up to here - if an exception bubbles up to here, it's a bug in the engine.\r\n\r\nI think that this catch block needs to do three things:\r\n\r\n1. ensure the full stack of the exception is logged (by logging an error I presume)\r\n2. fail the entire build (I think the finally block does that already)\r\n3. the error should probably include a prompt to open an issue at https://github.com/dotnet/msbuild/issues/new\r\n\r\ntry/catch around the Evaluator is probably not the right thing because if there's an exception like this one, we probably don't want to continue the build.\r\n\r\nIn addition to all that hardening, we need to fix this particular case at the source - this needs to happen here:\r\nhttps://github.com/dotnet/msbuild/blob/09bdfae164eac3b5c9027d803ffa513efaf91095/src/Build/Evaluation/LazyItemEvaluator.cs#L453\r\n\r\nWe should sanitize inputs before we call `Path.Combine` in `FileUtilities.GetFullPath`, since `fileSpec` is a string with a zero-char:\r\n![image](https://user-images.githubusercontent.com/679326/152455689-5d5f2b59-4ba2-417e-a42b-5a87dba2fdfa.png)\r\n\r\nBut it is vastly more important to harden the engine and safeguard against any non-critical exceptions, not just this one.",
        "createdAt": "2022-02-04T01:09:27Z",
        "updatedAt": "2022-02-04T01:09:27Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "I also meant to add that this line is too complicated and we need to extract several subexpressions:\r\nhttps://github.com/dotnet/msbuild/blob/09bdfae164eac3b5c9027d803ffa513efaf91095/src/Build/Evaluation/LazyItemEvaluator.cs#L453",
        "createdAt": "2022-02-04T01:11:11Z",
        "updatedAt": "2022-02-04T01:11:11Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "I was thinking of the try/catch throwing the exception after making it nicer, since then we could actually say it's an error in Evaluate rather than that there's some bug with MSBuild, and we aren't entirely sure. On the other hand, the second catch will still swallow it, as you said, so maybe that's best. We could also split the difference and throw an internal exception in RequestBuilder with a message from the thrown exception (i.e., \"Error in Evaluate\") if present.",
        "createdAt": "2022-02-04T18:49:17Z",
        "updatedAt": "2022-02-04T18:49:17Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "I\u2019d rather have the raw original exception with full stack, don\u2019t see much value in wrapping it. I would add a text before or after it saying: there was an exception in MSBuild, please file an issue. I believe we already do it elsewhere, need to find it.",
        "createdAt": "2022-02-04T21:41:05Z",
        "updatedAt": "2022-02-04T21:41:05Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "Not sure how this is related, but this annoying file `https%003A%002F%002Fgo.microsoft.com%002Ffwlink%002F%003Flinkid%003D835884` now started to show up in every VS project folder. This is the report on VS: https://developercommunity.visualstudio.com/t/JSON-Schema-being-written-to-solution-fo/10158717",
        "createdAt": "2022-12-14T09:53:40Z",
        "updatedAt": "2022-12-14T09:53:40Z",
        "author": {
          "login": "pps83"
        }
      }
    ]
  }
}