{
  "number": 9368,
  "title": "[Broken Build]: OK in Visual Studio but NU1604 in command line",
  "body": "### Issue Description\n\nHi. I have 2 packages, say Derived and Base. Base package has .props file with property `<MyVersion>1.2.3</MyVersion>` among other properties. This props file is properly packed I see it thanks to NugetPackageExplorer. Next, Derived package consumes Base package: `<PackageReference Include=\"Base\" Version=\"1.0.0\" PrivateAssets=\"all\" />`. Also Derived package has another PackageReference like that: `<PackageReference Include=\"OtherPackage\" Version=\"$(MyVersion)\" />`. Does such usage possible? Now I have restore error NU1604. I called `dotnet restore -v diag` and saw that the value of `OtherPackage.Version` is actually an empty string. So the general question here is - how can I (if I can) import  variable from one package that is intended to be used as the value of `PackageReference.Version` in my other package?\n\n### Steps to Reproduce\n\nSince I feel that described issue is likely a general usage question I hope it does not require sample. I'm fine to provide sample otherwise.\n\n### Expected Behavior\n\nRestore is successful.\n\n### Actual Behavior\n\nRestore failed.\n\n### Ask us questions\n\n_No response_",
  "state": "CLOSED",
  "createdAt": "2023-10-29T12:05:14Z",
  "updatedAt": "2023-10-31T04:57:29Z",
  "closedAt": "2023-10-31T04:57:28Z",
  "author": {
    "login": "sungam3r"
  },
  "labels": [
    "needs-triage"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "The weird thing is that I can successfully build `Derived` package from Visual Studio. All dependencies in the created package have versions exactly as I want (from `Base` package) but `dotnet restore`/`dotnet build` from command line (local or CI server) fails with a lot of `NU1604: Project dependency does not contain an inclusive lower bound ...` errors.",
        "createdAt": "2023-10-29T12:13:26Z",
        "updatedAt": "2023-10-29T12:13:26Z",
        "author": {
          "login": "sungam3r"
        }
      },
      {
        "body": "You cannot do this today. Properties from one package cannot be used as part of the version specification of another package because none of the props and targets from a package exist locally until after a restore has been run - which is after the last of PackageReferences has already been decided on. ",
        "createdAt": "2023-10-29T12:35:49Z",
        "updatedAt": "2023-10-29T12:35:49Z",
        "author": {
          "login": "baronfel"
        }
      },
      {
        "body": "\ud83d\ude1e But VS does it somehow. Maybe there is some workaround like manual intervention in MSBuild targets chaining? ",
        "createdAt": "2023-10-29T17:27:12Z",
        "updatedAt": "2023-10-29T17:27:12Z",
        "author": {
          "login": "sungam3r"
        }
      },
      {
        "body": "VS completely separates the build and restore phases, and is a completely different mechanism than a restore-time build. Essentially what you're asking for would need 3 (at minimum) and potentially unbounded repeated `Restore` calls, because each subsequent `Restore` could provide properties (in the respective packages' props and targets) that would then influence the _next_ round of `Restores`. This is a key reason why `Restore` as a single-run independent workflow was established in the CLI tooling today.",
        "createdAt": "2023-10-29T17:40:30Z",
        "updatedAt": "2023-10-29T17:40:30Z",
        "author": {
          "login": "baronfel"
        }
      },
      {
        "body": "Thanks for explanation.",
        "createdAt": "2023-10-31T04:57:28Z",
        "updatedAt": "2023-10-31T04:57:28Z",
        "author": {
          "login": "sungam3r"
        }
      }
    ]
  }
}