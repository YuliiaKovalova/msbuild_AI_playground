{
  "number": 10933,
  "title": "Guide users of the MSBuild API towards loading MSBuild via MSBuild Locator instead of standard .NET Assembly Loading rules",
  "body": "### Summary\n\nWe get a decent amount of issues and internal feedback from users attempting to use the MSBuild APIs to programmatically manipulate project files - either to read specific data, or to do what amounts to quasi-design-time builds, etc.  In many cases these users have some quick success, but then break when trying to do something that's slightly harder than trivial. This is often because they are attempting to load MSBuild functionality from dlls placed alongside their projects. We should guide users of the MSBuild API to loading MSBuild dlls via MSBuild Locator, so that they have more success, and we have fewer issues to triage.\n\n### Background and Motivation\n\nMSBuild requires more than just some dlls to work - it requires props, targets, and SDK resolvers (among others) and the normal PackageReference of Microsoft.Build doesn't satisfy all of those requirements. MSBuildLocator solves these problems for most users, and we have been directing users to use it for years.  If we can get users out of the pit of failure when using the MSBuild APIs we should reduce our maintenance burden and increase user success rates.\n\n### Proposed Feature\n\nBroadly, when an exception is thrown that would escape to the user, we should detect the context in which we are run and wrap the exception in a message guiding the user towards using MSBuildLocator if they are not already using MSBuildLocator.\n\nExample Message (silly wording, etc):\n```\nHey, we tried to load some critical data but it wasn't there. This is often because you're trying to load a bundled version of MSBuild, but you really should be using MSBuild Locator to bind to an existing MSBuild installation. See https://aka.ms/use-msbuild-locator for details.\n```\n\nPossible Check Locations:\n* Project constructors\n* Graph Node constructors\n* Basically anywhere that does Evaluation or Evaluation+Execution.\n\nBroadly, a C# Exception Filter was what I was thinking:\n\n```csharp\ntry {\n ....\n}\ncatch (Exception ex) when BuildEnvironmentHelper.Instance != whatever_means_msbuild_locator => // wrap ex in the message above\n```\n\n### Alternative Designs\n\n_No response_",
  "state": "OPEN",
  "createdAt": "2024-11-04T22:10:47Z",
  "updatedAt": "2025-06-02T08:30:23Z",
  "closedAt": null,
  "author": {
    "login": "baronfel"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "Area: Debuggability",
    "needs-design",
    "triaged"
  ],
  "comments": {
    "nodes": [
      {
        "body": "Time boxed for January",
        "createdAt": "2025-01-07T16:18:56Z",
        "author": {
          "login": "JanKrivanek"
        }
      }
    ]
  }
}