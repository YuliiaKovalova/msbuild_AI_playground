{
  "number": 10121,
  "title": "[Bug]: TaskItem normalises path to build platform, not target platform",
  "body": "### Issue Description\n\nI've been working a bit on a bug in the dotnet/sdk#559, and stumbled upon something that _might_ be considered a bug in either Microsoft.Build.Utilities.TaskItem, or Microsoft.Build.Shared.FileUtilities.FixFilePath. One might also argue that it's not a bug, and that it's the usage of it in Microsoft.NET.Build.Containers.Tasks.CreateNewImage that is wrong.\r\n\r\nAnyway, the problem is, when publishing dotnet projects to containers, some properties are set on the [CreateNewImage](https://github.com/dotnet/sdk/blob/dd843a86ae8d907fd9c68a42c3dd5c8670d7f74b/src/Containers/Microsoft.NET.Build.Containers/Tasks/CreateNewImage.cs#L14) MSBuild task, that are needed runtime in the built container. So, the paths need to be compatible with the container target platform, not the platform it's built on. The properties in question are (at least) Entrypoint, EntrypointArgs, AppCommand, AppCommandArgs.\r\n\r\nHowever, as the properties are of type `ITaskItem`, implemented by `TaskItem`, the paths are normalised when initialised. And, the normalisation uses the Path.DirectorySeparatorChar of the build platform, not the target.\r\n\r\nWould you consider this a bug/shortcoming in the `TaskItem`, or are we/they using it in the wrong way in the MSBuild task?\n\n### Steps to Reproduce\n\nUse a `TaskItem` in an MSBuild task, where you need the directory separator char of a different platform than the one you are building on (e.g. use C:\\app\\foo.exe when building on *nix)\n\n### Expected Behavior\n\nThe item should stay as C:\\app\\foo.exe\n\n### Actual Behavior\n\nThe path is changed to C:/app/foo.exe\n\n### Analysis\n\nhttps://github.com/dotnet/msbuild/blob/863209471a60e9dfd387ed54d4edb85fd8db57ee/src/Utilities/TaskItem.cs#L80\r\n\r\nThere is no way to tell either: 1) That you _don't_ want normalisation of directory separator characters, or 2) which style of normalisation you want\r\n\n\n### Versions & Configurations\n\ndotnet msbuild --version\r\n17.11.0.25706\r\n",
  "state": "OPEN",
  "createdAt": "2024-05-09T20:30:38Z",
  "updatedAt": "2025-04-06T07:56:39Z",
  "closedAt": null,
  "author": {
    "login": "erikbra"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "bug",
    "xplat",
    "Area: Language",
    "triaged",
    "gathering-feedback"
  ],
  "comments": {
    "nodes": [
      {
        "body": "Oh that's a very interesting failure mode for this. I'd say it's an MSBuild bug, but it's a hard one to fix, so we might need to figure out how to work around for the SDK.",
        "createdAt": "2024-05-09T20:41:16Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Thanks for recognizing it as a bug \ud83d\ude04 \r\n\r\nIt's probably an edge case, as almost every property that contains a path _should_ be correct on the build server. However, there might be some others that would make sense to resolve on the target platform as well. Maybe dotnet tools have the same issue? But, I'm not sure.\r\n\r\nWe'll have to think a bit on how to solve this. I made a first attempt in my fork of the SDK repo at \"fixing\" it by swapping out the `ITaskItem`s with strings, but I don't like the approach, and I haven't been able to get it working either.\r\n\r\nhttps://github.com/erikbra/dotnet-sdk/pull/1\r\n\r\nDo you have suggestions on the best way of fixing this? Is there anywhere in the build pipeline we can decide which implementation of `ITaskItem` that gets instantiated? I tried looking at the constructor that takes metadata, and pondered upon whether we could use a metadata item to tell the TaskItem to not normalise the paths, or normalise to a specific platform, but I couldn't finish the thought. Are there other contructs than a TaskItem that would make sense to use for path properties where we don't want the path \"fixing\"?\r\n",
        "createdAt": "2024-05-10T05:15:40Z",
        "author": {
          "login": "erikbra"
        }
      },
      {
        "body": "One possible hacky option: renormalize inside the task, which should know the target OS's preferred slash direction :-/\r\n\r\n\r\n\r\n> Is there anywhere in the build pipeline we can decide which implementation of `ITaskItem` that gets instantiated? I tried looking at the constructor that takes metadata, and pondered upon whether we could use a metadata item to tell the TaskItem to not normalise the paths, or normalise to a specific platform, but I couldn't finish the thought.\r\n\r\nThis sounds directionally correct to me, but I'm afraid I haven't been in that portion of the code for a while and don't remember offhand where there might be some good hooks to change things. Another possible option would be an attribute on the `ITaskItem`-taking input of the task that tells the engine to avoid normalization (somehow!).\r\n\r\n\r\n\r\n> Are there other contructs than a TaskItem that would make sense to use for path properties where we don't want the path \"fixing\"?\r\n\r\n`string` is all I can think of too.",
        "createdAt": "2024-05-10T13:54:13Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@baronfel Can you take a look at this issue? @rokonec and I looked at it, and we would rather to implement a work-around in Microsoft.NET.Build.Containers.Tasks.CreateNewImage task for this.",
        "createdAt": "2024-05-17T15:56:20Z",
        "author": {
          "login": "AR-May"
        }
      },
      {
        "body": "I haven't looked at the details of the PR but I am broadly in favor of having a way for items, item types, or tasks to opt out of the path \"correction\"--since it's heuristic it's caused problems before.",
        "createdAt": "2024-05-17T16:00:25Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I want to keep this open and see if it bites more people - It feels like the kind of thing that could be handled on a Task-by-Task basis, perhaps with an annotation on the Task's Input itself?",
        "createdAt": "2024-05-17T16:00:37Z",
        "author": {
          "login": "baronfel"
        }
      },
      {
        "body": "I think keeping this one open is a good idea. I'm not sure whether the \"build for an OS that has a different directory separator char than the one you are building on, AND, having to resolve paths at build-time, that are to be used runtime\" is a very, very corner-case (only applicable to container builds), or if it's a broader issue.\r\n\r\nThat said, having worked a bit more on the PR, I'm not so much a fan of my own suggestion to solve the problem. It got a bit ugly, since the evaluated (already path-replaced) string is stored on the `TaskItem` in so many different code paths. Of course, one might change to doing this replacement on read, but I'm not aware of potential performance issues with this. I guess there is a reason why it's stored on write, already with the paths \"fixed\".\r\n\r\nAdditionally, there are many implementations of the `ITaskItem` in the MsBuild source code.  So one needs to think about whether solving it specifically for `TaskItem` will solve the end-problem, or if it needs to be fixed in multiple places, maybe the whole path transformation logic should be moved to a separate, explicit place (if feasible).\r\n\r\nI fear \"fixing\" this in the `TaskItem`, as well as being rather high-risk, as the `TaskItem` is used as a very core citizen of MsBuild, and probably has thousands of usages out in the wild, will not fix the problem either, as there are very many places the paths are fixed elsewhere too (on the Solution, ProjectItem, etc).\r\n\r\nOne possible way is, of course, to just go all the way, and accept that Windows works well with forward-slash paths, and has done for decades, but I think people will feel this is obtrusive.\r\n\r\nSorry, just a lot of loose, random thoughts here, but I think the \"idea bubbling phase\" is important here, both to hammer out:\r\n1. Whether this use case is a corner case or a core case\r\n2. How one wants to solve this long-term\r\n\r\nIn my head, the short-term solution to choose, is depending on the answers to the questions above too.\r\n\r\n\r\n\r\n\r\n",
        "createdAt": "2024-05-18T08:14:02Z",
        "author": {
          "login": "erikbra"
        }
      },
      {
        "body": "Over the years since MSBuild went cross platform, I've seen my fair share of problems of normalizing path strings. If we want to solve this in the long term, we need a strongly-typed `Path` in .NET!",
        "createdAt": "2025-04-06T07:55:49Z",
        "author": {
          "login": "Nirmal4G"
        }
      }
    ]
  }
}