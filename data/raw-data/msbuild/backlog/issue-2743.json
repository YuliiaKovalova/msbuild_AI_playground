{
  "number": 2743,
  "title": "SolutionDir is not resolved during dotnet restore",
  "body": "_From @bradphelan on October 2, 2017 14:16_\n\nSee the following repository that can reproduce the error\r\n\r\nhttps://github.com/bradphelan/msbuildbug\r\n\r\nfirst reported at\r\n\r\nhttps://stackoverflow.com/questions/46526428/msbuild-solutiondir-resolves-incorrectly-to-c-when-running-msbuild-tresto\n\n_Copied from original issue: dotnet/sdk#1623_",
  "state": "CLOSED",
  "createdAt": "2017-11-23T03:54:54Z",
  "updatedAt": "2025-02-23T18:29:02Z",
  "closedAt": "2017-12-08T22:46:34Z",
  "author": {
    "login": "livarcocc"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "triaged"
  ],
  "comments": {
    "nodes": [
      {
        "body": "I believe this is an issue with the generated metaproj for the solution. I will move it to MSBuild for now.",
        "createdAt": "2017-11-23T03:54:55Z",
        "author": {
          "login": "livarcocc"
        }
      },
      {
        "body": "This happens because the nuget owned restore target inside the metaproject generated from the solution does not propagate the same set of global properties (SolutionDir being one of them) as the hardcoded targets do (e.g. clean, build, etc).\r\n\r\nOur recommendations, in order of preference:\r\n-\tDo not depend on SolutionDir, or any other sln dependent property. SolutionDir is only set when you are building a solution. It has no meaning when building the csproj directly (or a dirs.proj sln replacement). Best to consider the sln file deprecated. Instead, place a `directory.build.props` at the root of your repo and define a root property like <RepoRoot>$(MSBuildThisFileDirectory)</RepoRoot>\r\n-\tNuget could change its solution targets to propagate the solution specific properties as global properties to the projects it builds via the MSBuild task. (in a similar way the other targets like build, clean, etc do)\r\n-\tMSBuild could change its solution handling code to set those properties as global properties when building the metaproj. This eliminates the need for every sln extension to manually propagate them. On the other hand, this has a higher chance to break something somewhere.\r\n    - Intermediate solution, MSBuild can emit an extra property in the metaproj file which sln extensions can use to propagate down their msbuild task invocations. Eliminates potential risks of back compat issues, and makes it resilient to potential global properties changes.\r\n\r\n",
        "createdAt": "2017-12-08T22:46:34Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "I think Microsoft must be careful about backward compatibility and care for good feature and facilities, so something like $(solutiondir) can be built-in defined variable in build system. or can be exists in solution templates in visual studio or other IDE",
        "createdAt": "2020-03-23T12:51:10Z",
        "author": {
          "login": "soroshsabz"
        }
      },
      {
        "body": "This impacts my current workflow as well, including `dotnet restore/build/publish` (https://github.com/dotnet/sdk/issues/46990) and MSBuild \"Copy\" task, `SolutionDir` in those is completely ignored, it's only valid in \"Exec\" tasks (so far from what I've been trying).",
        "createdAt": "2025-02-23T18:29:01Z",
        "author": {
          "login": "MasterMann"
        }
      }
    ]
  }
}