{
  "number": 1780,
  "title": "Proposal: spawning tasks in parallel",
  "body": "@yuehuang010 (Felix Huang) from the C++ team is interested in a way to invoke tools (tasks) in parallel.\r\n\r\nThe problem is that tools such as CLang and GCC often only accept a single file at a time and invoking them serially is slow and wastes time. Instead one could parallelize tool invocations in a sort of a MultiToolTask where inner tasks are executed in parallel and not serially.\r\n\r\nIn the TPL world, an analog would be Task.WhenAll() or Task.WaitAll().",
  "state": "OPEN",
  "createdAt": "2017-03-01T23:43:52Z",
  "updatedAt": "2024-02-21T16:37:21Z",
  "closedAt": null,
  "author": {
    "login": "KirillOsenkov"
  },
  "labels": [
    "needs-design",
    "Feature Request",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "See sample prototype by @yuehuang010 at src/vc/projbld/CppTasks/Common/MultiToolTask.cs",
        "createdAt": "2017-03-01T23:45:44Z",
        "updatedAt": "2017-03-01T23:45:44Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "There are a couple of interesting variations on this when I've seen it wished for in the past:\r\n* Batching over a bunch of \"similar\" processes in parallel like the OP mentions.\r\n* Declaring that multiple tasks (or even targets) do not step on each others' outputs and can be run in parallel in a single project.\r\n\r\nThe former fits much more nicely with the MSBuild execution model, so we should probably restrict this issue to that. The latter would be awesome but very hard to fit into the current world.\r\n\r\nSo this would be making it easy to write something like\r\n```\r\nTarget\r\n  foreach item in batch *in parallel*\r\n----- \u2191 MSBuild language+engine / task \u2193 ----\r\n    Task (ITaskItem)\r\n```\r\n\r\nInstead of the current requirement of\r\n```\r\nTarget\r\n----- \u2191 MSBuild language+engine / task \u2193 ----\r\n    Task (ITaskItem[])\r\n      Parallel.ForEach(...)\r\n```",
        "createdAt": "2017-03-01T23:56:28Z",
        "updatedAt": "2017-03-02T00:01:07Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "You will have to confront (or accept) the problem of potential over parallelization. Right now it is typically seen in builds that use CL /MP. CL and MSBuild do not negotiate with each other (MSBuild just passes the flag through) so you can easily end up with heavy thrashing. Building the CoreCLR repo from the root, for example, can have 8 MSBuild's and 64 CL's or suchlike running at once, which is tremendously inefficient. What you're proposing here is to make that problem possible (or likely) for CLANG, etc.\r\n\r\nOf course running those tools in parallel is a great thing if you can avoid thrashing. There are three options we talked about in the past\r\n\r\n1.  Have the user manually configure the build. ie., pick a number to pass to msbuild /m, and pick a number for CL /MP. This isn't practical because even if you want to go to that trouble, you don't know how many projects are being built at once. You want differet numbers if you're building from the root, than if you're building a project. And if compilation skips, you want different configuration again. Indeed I am not sure I have ever seen anyone do this. I want to fix the CoreCLR build but there isn't really a way to do it. I could disable CL /MP entirely and get a fast root build but slow leaf build.\r\n1.  Have some way for MSBuild and the tools (or their tasks) to negotiate with each other. For example MSBuild could choose the value for CL /MP and the equivalent parameter on the proposed \"parallel wrapper\" much like it has a semaphore with roughly one resource for each hardware thread. This would potentially work pretty well so long as the tool was configurable. Clearly if this task (MSBuild) was parallelizing the tool, this would be true.\r\n1.   Dynamically configure by observation of machine counters (CPU, disk). This could be an extension of (2) or an option of its own. The advantage of this is that for some tasks, one unit of execution per hardware thread is likely to saturate the disk - specifically Link/Lib. It could determine the disk is saturated and back off.\r\n\r\n@rainersigwald I suggest breaking out \"parallelize tools wrapped by tasks\" into its own proposal. I could imagine it done various ways, but the task would need to indicate how to subset its inputs, and which parameter indicates the subsettable inputs. For example for MIDL it's Sources and subset size must be 1. For CL it's Sources and subset size can be any (this is what /MP does under the covers -- I don't believe it does any more than the CL task itself could do). Once this is done, MSBuild (by spotting that attribute on the task or similar) would use approach (2) to parallelize. It coudl be extended in future to use (3).\r\n\r\nThis could be a pretty nice way to leverage the \"task abstraction\" that MSBuild introduced to introduce parallelism to the majority of exe's that don't handle it by themselves. MIDL is a great example.",
        "createdAt": "2017-03-03T06:26:59Z",
        "updatedAt": "2017-03-03T06:26:59Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "When I worked on MultiToolTask.cs, I had to deal with additional requirements that are less obvious from initial brainstorms.  \r\n-Task from another DLL (this can be solved with base interfaces)\r\n-Dependency Graph\r\n-Incremental Build via file tracking, and update dependency graph\r\n-Working Directory changes cause by \"Yield\"\r\n-Error handling (ie stop on first error, or try best to complete graph).\r\n-Cancel() -- incremental recovery\r\n\r\nAll that while dealing with scheduler.",
        "createdAt": "2017-03-03T20:27:22Z",
        "updatedAt": "2017-03-03T20:28:14Z",
        "author": {
          "login": "yuehuang010"
        }
      },
      {
        "body": "We are using MSBuild in our CI scripts. I wonder if this issue could solve our needs when it comes to bring our build times down. In our C#/Web project we have build steps like code analysis and nunit tests, javascript tests that might be possible to execute in parallel after the code has been compiled. \r\nCurrently these steps are targets. For us, starting up a couple of \"execute command line\" build steps  in parallel and wait for all of their results would be awesome :+1: and could potentially cut our build times in half.  I've been looking at the MSBuild extension pack [AsyncExec](http://www.msbuildextensionpack.com/help/4.0.12.0/html/68cdc023-8926-4ac9-9e7c-0297592fec29.htm) task, but that is a fire and forget kind of thing and waiting for its result be hard to implement. If you decide to implement this issue I think it would be a huge gain.",
        "createdAt": "2017-03-31T07:44:36Z",
        "updatedAt": "2017-03-31T07:44:36Z",
        "author": {
          "login": "mortb"
        }
      },
      {
        "body": "Is the above-mentioned `AsyncExec` still around? The original link:\r\n```\r\nhttps://www.hugedomains.com/domain_profile.cfm?d=msbuildextensionpack&e=com\r\n```\r\nnow goes here, apparently as an expired domain:\r\n```\r\nhttps://www.hugedomains.com/domain_profile.cfm?d=msbuildextensionpack&e=com\r\n```\r\nWas that essentially the idea from stackoverflow, such as my example [here](https://github.com/gojimmypi/VerilogLanguageExtension/pull/25#issuecomment-640548300)?\r\n\r\nIs this `documentation.help` domain a Microsoft thing, such as this [AsyncExec Class](https://documentation.help/MSBuild.ExtensionPack/68cdc023-8926-4ac9-9e7c-0297592fec29.htm) page? \r\n",
        "createdAt": "2020-06-08T16:43:02Z",
        "updatedAt": "2020-06-08T16:43:02Z",
        "author": {
          "login": "gojimmypi"
        }
      },
      {
        "body": "Is the MultiToolTask something that will move from the CppTasks (closed source repo) to the MSBuild GitHub? And would it be possible to have a Multi-Exec implementation (for e.g. scripts or commands that are known to be able to run in parallel over an ItemGroup)?",
        "createdAt": "2021-09-16T11:21:20Z",
        "updatedAt": "2021-09-16T11:21:20Z",
        "author": {
          "login": "japj"
        }
      }
    ]
  }
}