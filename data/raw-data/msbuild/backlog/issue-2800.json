{
  "number": 2800,
  "title": "Subtle: when CreateItem \u2260 intrinsic ItemGroup task",
  "body": "Same example as #2790, but this time with a twist.\r\n\r\n### Steps to reproduce\r\n\r\nRun this either with MSBuild 4.0 that comes with the framework or 15 from the repo; both behave identically.\r\n\r\nProject file\r\n```xml\r\n<Project xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\r\n\r\n  <ItemGroup>\r\n    <Files Include=\"$(MsBuildThisFileFullPath); nosuchfile\" />\r\n  </ItemGroup>\r\n\r\n  <Target Name=\"Build\" DependsOnTargets=\"T1\" >\r\n    <Message Importance=\"high\" Text=\"From CreateItem task    :@(OutOfDateFiles_CreateItem->' %(Identity)[Built=%(Built)]')\" />\r\n    <Message Importance=\"high\" Text=\"From intrinsic ItemGroup:@(OutOfDateFiles_Intrinsic->' %(Identity)[Built=%(Built)]')\" />\r\n  </Target>\r\n\r\n  <Target Name=\"T1\" Inputs=\"@(Files)\" Outputs=\"%(Identity)\">\r\n    <Message Importance=\"high\" Text=\"As if building '@(Files)'...\" />\r\n    <CreateItem Include=\"@(Files)\" AdditionalMetadata=\"Built=true\">\r\n      <Output TaskParameter=\"Include\" ItemName=\"OutOfDateFiles_CreateItem\" />\r\n    </CreateItem>\r\n    <ItemGroup>\r\n      <OutOfDateFiles_Intrinsic Include=\"@(Files)\">\r\n        <Built>true</Built>\r\n      </OutOfDateFiles_Intrinsic>\r\n    </ItemGroup>    \r\n  </Target>\r\n\r\n</Project>\r\n```\r\n\r\nCommand line\r\n```\r\nmsbuild text.xxproj\r\n```\r\n### Actual behavior\r\n\r\nI'm trying to distinguish files really processed in a target with `TaskExecutionMode.ExecuteTaskAndGatherOutputs` from those inferred with `TaskExecutionMode.InferOutputsOnly`. Here's a subtle difference between the \"real\" task `CreateItem` and the items from the `BackEnd.ItemGroupIntrinsicTask`: `CreateItem` is adding the extra metadata only when it was actually ran, but the `ItemGroupIntrinsicTask` adds the specified metadata in either inference-only or execute-and-gather modes, regardless:\r\n```\r\nMicrosoft (R) Build Engine version 15.6.23.27374 for .NET Framework\r\nProject \"c:\\tmp\\test.xxproj\" on node 1 (default targets).\r\nT1:\r\nSkipping target \"T1\" because all output files are up-to-date with respect to the input files.\r\nT1:\r\n  As if building 'nosuchfile'...\r\nBuild:\r\n  From CreateItem task    : c:\\tmp\\test.xxproj[Built=]; nosuchfile[Built=true]\r\n  From intrinsic ItemGroup: c:\\tmp\\test.xxproj[Built=true]; nosuchfile[Built=true]\r\nDone Building Project \"c:\\tmp\\test.xxproj\" (default targets).\r\n```\r\nThere is no`Build` metadata in the `CreateItem`'s output when the target is skipped (this is a good thing, I can distinguish whether the items was inferred), but there is in the `<ItemGroup>` regardelss of the task execution mode.\r\n\r\n### Expected  behavior\r\n\r\nI do not know, looks like a corner case. Probably I'd expect the `<ItemGroup>` intrinsic would behave identically to the `CreateItem` task, then the already complex behavior of inference-vs-execution would be somewhat less confusing.",
  "state": "OPEN",
  "createdAt": "2017-12-13T03:26:04Z",
  "updatedAt": "2024-02-21T16:35:14Z",
  "closedAt": null,
  "author": {
    "login": "kkm000"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": []
  }
}