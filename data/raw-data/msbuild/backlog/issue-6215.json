{
  "number": 6215,
  "title": "BinaryFormatter Deprecation",
  "body": "## Motivativation\r\n\r\nMoving away from [BinaryFormatter](https://aka.ms/BinaryFormatter) is a long running coordinated dotnet effort, [all first party code should be migrated away during .NET 8 timeframe](https://github.com/dotnet/designs/blob/main/accepted/2020/better-obsoletion/binaryformatter-obsoletion.md#all-first-party-dotnet-org-code-bases-complete-migration-away-from-binaryformatter-net-8)\r\n\r\n## Context\r\n\r\nMSBuild is using BinaryFormatter in couple places as a fallback mechanism for de/serialization of more complex types (AppDomainSetup, Exceptions, ValueTypes etc.) as well as for de/serialization of custom, pluggable data (BuildEventArgs, Embedded resources)\r\n\r\n## Scope\r\n\r\n### NET 8 - need to remove or developer-condition MSBuild usages of BinaryFormatter\r\n- [x] **_GenerateResource_** Task (+ _resgen_) - Action plan needed - we can slowly deprecate this, but viable replacement needs to be thought through. **Cost: Unknown, Breaking: Yes**\r\n  - [x] https://github.com/dotnet/msbuild/issues/8827 \r\n- [x] _BinaryTranslator.TranslateDotNet_\r\n  - [x] _TranslateException_ #8786 **Cost: M, Breaking: No**\r\n  - [x] _AppDomainSetup_: https://github.com/dotnet/msbuild/issues/8922 needed for OutOfProc (TaskHostConfiguration) and Separate AppDomain Tasks (NodeConfiguration)) - it seems all we need are actually 'ConfigurationBytes' (https://github.com/dotnet/msbuild/blob/main/src/Shared/TaskLoader.cs#L95-L99) - so hopefully limited cost, but needs investigation. **Cost: S (TODO: detailed investigation to confirm), Breaking: No**\r\n  - [x] _ValueType and ValueTypeArray_ task parameter types https://github.com/dotnet/msbuild/issues/8923 ([usage](https://github.com/dotnet/msbuild/blob/main/src/Shared/TaskParameter.cs#L282))  - We should be able to de/serialize without BinaryFormatter (Blittable types just be grabing the bytes, nonblittable by marshaling) - this should be relatively easy and isolated. **Cost: S, Breaking: No**\r\n  - [x] _BuildEventArgs_\r\n    - [x] MSBuild _first class citizen events_ - all serialized without BinaryFormatter (either via LogMessagePacketBase special handling, or via reflection discovered methods on types). **No work here**\r\n    - [x] **_Custom BuildEventArgs_** #8823 - de/serialization approach from TranslateException should likely be way to go here. It's breaking though. **Cost: M, Breaking: Yes**\r\n    - [x] #8825 Internal partners relying on custom BuildEventArgs need to be discovered (code search within GH, AzDO accross all our build event types), notified and brought to discussion (code search). **Cost: S-M**\r\n    - [x] @Forgind already identified FxCop as relying on this. It's removed from VS, but will continue to ship as optional component via nuget (PoC: @mavasani(?) - so it might be FullFW only?)\r\n    - [x] #9016\r\n    - [x] #9008\r\n    - [x] #9091\r\n    - [x] #9355\r\n  - [x] _Tests_ https://github.com/dotnet/msbuild/issues/8924\r\n    - [x] _exceptions_ (just remove or move to TranslateException) **Cost: XS, Breaking: No**\r\n    - [x] _ProfilerResult_ - most likely just remove, as this most likely uses only ITranslatable **Cost: XS, Breaking: No**\r\n- [x] #8822  currently 11 usages. Hopefuly this doesn't need to be touched, or at worst just conditioned, otherwise cost might be significant. **Cost: Unknown, Breaking: Unknown**\r\n- [x] _Unit tests_ https://github.com/dotnet/msbuild/issues/8925\r\n  - [x] _Build.UnitTests_ - testing deserializing exceptions - should be moved to new eceptions de/serialization mechanism. **Cost: S, Breaking: No**\r\n  - [x] _Framework.UnitTests_ - testing deserialization of EventArgs, AssemblyNameEx, CopyOnWriteDictionary - should be moved to new deserialization once implemented. **Cost: S, Breaking: No**\r\n- [x] [_StateFileBase_ and extensions](https://github.com/dotnet/msbuild/pull/6350)\r\n- [x] [_GetSDKReferenceFiles_ task](https://github.com/dotnet/msbuild/pull/6324)\r\n\r\n\r\n### post NET 8 <a href=\"#post-net-8\" id=\"post-net-8\">#<a/>\r\n- [x] https://github.com/dotnet/msbuild/issues/9300 - **Cost: XS, Breaking: Yes**\r\n- [x] Communicate the .NET Framework breaking change to internal partners. Facilitate documentation update for VS 17.? - **Cost: S**\r\n - [ ] Remove serialization attributes, GetObjectData, (SerializationInfo, StreamingContext) constructors, etc. (to align with the [plan - deprecation of types](https://github.com/dotnet/designs/blob/main/accepted/2020/better-obsoletion/binaryformatter-obsoletion.md#remainder-of-legacy-serialization-infrastructure-obsoleted-net-9)) **Cost estimate: S-M**",
  "state": "CLOSED",
  "createdAt": "2021-03-03T00:44:05Z",
  "updatedAt": "2024-02-21T17:01:54Z",
  "closedAt": "2024-01-04T14:52:00Z",
  "author": {
    "login": "Forgind"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "JanKrivanek"
      }
    ]
  },
  "milestone": {
    "title": "Consider for Next Major Version"
  },
  "comments": {
    "nodes": [
      {
        "body": "I'm working on getting rid of BinaryTranslator.TranslateDotNet. I'm writing custom manual serialization for various args which will be more efficient.",
        "createdAt": "2021-03-16T06:27:15Z",
        "updatedAt": "2021-03-16T06:27:15Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "@rokonec \ud83d\udc46",
        "createdAt": "2021-03-16T15:47:06Z",
        "updatedAt": "2021-03-16T15:47:06Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "@KirillOsenkov are those new 'custom manual serialization' be still supported by ITranslator? Also, how are you planning to deal with serialization of Exceptions?",
        "createdAt": "2021-03-16T16:00:19Z",
        "updatedAt": "2021-03-16T16:01:17Z",
        "author": {
          "login": "rokonec"
        }
      },
      {
        "body": "I\u2019ll send a PR in the next day or two, for now I started with ProjectEvaluationStarted and ProjectEvaluationFinished, which currently go through TranslateDotNet. I haven\u2019t looked at the other cases yet.",
        "createdAt": "2021-03-16T17:27:37Z",
        "updatedAt": "2021-03-16T17:27:37Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "Should not have closed this because of BinaryTranslator.TranslateDotNet",
        "createdAt": "2021-05-27T20:49:17Z",
        "updatedAt": "2021-05-27T20:49:17Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "I think I've at least moved all *BuildEventArgs classes off of using TranslateDotNet. So if you place a breakpoint and run a build, it shouldn't be hit for BuildEventArgs serialization. If I missed a kind, let me know. I think TelemetryEventArgs potentially, but I don't know what that's for so I might have left it out.\r\n\r\nBut yes, there could be other types other than BuildEventArgs, so I didn't look into those.",
        "createdAt": "2021-05-27T21:21:57Z",
        "updatedAt": "2021-05-27T21:22:22Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "I'm getting this when building a project with errors from the command line when using a recent version of .NET 8 (8.0.100-preview.5.23266.8):\r\n\r\n```\r\n MSBUILD : error MSB4166: UNHANDLED EXCEPTIONS FROM PROCESS 90123:\r\n MSBUILD : error MSB4166: =====================\r\n MSBUILD : error MSB4166: 5/18/2023 4:56:48 PM\r\n MSBUILD : error MSB4166: System.NotSupportedException: BinaryFormatter serialization and deserialization are disabled within this application. See https://aka.ms/binaryformatter for more information.\r\n MSBUILD : error MSB4166:    at System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Serialize(Stream serializationStream, Object graph)\r\n MSBUILD : error MSB4166:    at Microsoft.Build.Execution.BuildResult.Microsoft.Build.BackEnd.ITranslatable.Translate(ITranslator translator)\r\n MSBUILD : error MSB4166:    at Microsoft.Build.BackEnd.NodeEndpointOutOfProcBase.RunReadLoop(Stream localReadPipe, Stream localWritePipe, ConcurrentQueue`1 localPacketQueue, AutoResetEvent localPacketAvailable, AutoResetEvent localTerminatePacketPump)\r\n MSBUILD : error MSB4166: ===================\r\n```",
        "createdAt": "2023-05-18T15:10:40Z",
        "updatedAt": "2023-05-18T15:10:40Z",
        "author": {
          "login": "rolfbjarne"
        }
      },
      {
        "body": "@rolfbjarne very interesting! Can you share a repro? We didn't expect any .NET Core codepaths to hit this but we were clearly wrong.",
        "createdAt": "2023-05-18T15:45:19Z",
        "updatedAt": "2023-05-18T15:45:19Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\t<PropertyGroup>\r\n\t\t<TargetFramework>net8.0</TargetFramework>\r\n\t</PropertyGroup>\r\n\t<PropertyGroup Condition=\"''\">\r\n\t</PropertyGroup>\r\n</Project>\r\n```\r\n\r\n```shell\r\n$ dotnet --version\r\n8.0.100-preview.5.23266.8\r\n\r\n$ MSBUILDNOINPROCNODE=1 dotnet build MySimpleApp.csproj\r\nMSBuild version 17.7.0-preview-23260-01+7f4bef8b4 for .NET\r\n/Users/rolf/work/maccore/mono-master/xamarin-macios/tests/dotnet/MySimpleApp/macOS/MySimpleApp.csproj(6,17): error MSB4113: Specified condition \"''\" evaluates to \"\" instead of a boolean.\r\nMSBUILD : error MSB4166: Child node \"2\" exited prematurely. Shutting down. Diagnostic information may be found in files in \"/var/folders/43/h027tm1n101cdrq2_b6n9n2m0000gn/T/MSBuildTemprolf/\" and will be named MSBuild_*.failure.txt. This location can be changed by setting the MSBUILDDEBUGPATH environment variable to a different directory.\r\nMSBUILD : error MSB4166: /var/folders/43/h027tm1n101cdrq2_b6n9n2m0000gn/T/MSBuildTemprolf/MSBuild_pid-5527_75432f69f6fa4357a1cb60532f101677.failure.txt:\r\nMSBUILD : error MSB4166: UNHANDLED EXCEPTIONS FROM PROCESS 5527:\r\nMSBUILD : error MSB4166: =====================\r\nMSBUILD : error MSB4166: 5/18/2023 6:00:21 PM\r\nMSBUILD : error MSB4166: System.NotSupportedException: BinaryFormatter serialization and deserialization are disabled within this application. See https://aka.ms/binaryformatter for more information.\r\nMSBUILD : error MSB4166:    at System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Serialize(Stream serializationStream, Object graph)\r\nMSBUILD : error MSB4166:    at Microsoft.Build.Execution.BuildResult.Microsoft.Build.BackEnd.ITranslatable.Translate(ITranslator translator)\r\nMSBUILD : error MSB4166:    at Microsoft.Build.BackEnd.NodeEndpointOutOfProcBase.RunReadLoop(Stream localReadPipe, Stream localWritePipe, ConcurrentQueue`1 localPacketQueue, AutoResetEvent localPacketAvailable, AutoResetEvent localTerminatePacketPump)\r\nMSBUILD : error MSB4166: ===================\r\nMSBUILD : error MSB4166:\r\nMSBUILD : error MSB4166:\r\n\r\nBuild FAILED.\r\n```\r\n\r\nNote that when I ran into this originally, I didn't have `MSBUILDNOINPROCNODE` set, so that's not necessary for the issue to trigger (although I'm not sure how to force it without the env variable)",
        "createdAt": "2023-05-18T16:02:37Z",
        "updatedAt": "2023-05-18T16:02:53Z",
        "author": {
          "login": "rolfbjarne"
        }
      },
      {
        "body": "Oh wow, that is DEFINITELY not a case I expected to fail here. Yikes. Thanks!\r\n\r\n> Note that when I ran into this originally, I didn't have `MSBUILDNOINPROCNODE` set, so that's not necessary for the issue to trigger (although I'm not sure how to force it without the env variable)\r\n\r\nI bet it's \"multiproc build where the error originated in one of the worker processes\".",
        "createdAt": "2023-05-18T16:44:17Z",
        "updatedAt": "2023-05-18T16:44:17Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "related: https://github.com/dotnet/runtime/issues/43482",
        "createdAt": "2023-05-19T07:38:25Z",
        "updatedAt": "2023-05-19T07:38:25Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "Turn on warning in GenerateResource when building from the SDK:\r\nhttps://github.com/dotnet/sdk/pull/32981",
        "createdAt": "2023-06-02T14:40:17Z",
        "updatedAt": "2023-06-02T14:40:17Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "Hi, we (MAUI team) are getting our build failing when bumping to 8.0.100-preview.6.23310.1 \r\n\r\nHere's the PR : https://github.com/dotnet/maui/pull/15504/files\r\n\r\nbuild: https://devdiv.visualstudio.com/DevDiv/_build/results?buildId=7910174&view=results\r\n\r\n",
        "createdAt": "2023-06-13T16:03:53Z",
        "updatedAt": "2023-06-13T16:04:08Z",
        "author": {
          "login": "rmarinho"
        }
      },
      {
        "body": "> Hi, we (MAUI team) are getting our build failing when bumping to 8.0.100-preview.6.23310.1\r\n> \r\n> Here's the PR : https://github.com/dotnet/maui/pull/15504/files\r\n> \r\n> build: https://devdiv.visualstudio.com/DevDiv/_build/results?buildId=7910174&view=results\r\n\r\nJanKrivanek has a PR open [here](https://github.com/dotnet/msbuild/pull/8779) that should resolve this issue when it goes in.",
        "createdAt": "2023-06-13T18:30:50Z",
        "updatedAt": "2023-06-13T18:30:50Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "What's the timeline to fix this? ~50% of our builds are now failing due to this.",
        "createdAt": "2023-06-13T21:14:23Z",
        "updatedAt": "2023-06-13T21:14:23Z",
        "author": {
          "login": "BrennanConroy"
        }
      },
      {
        "body": "FYI: https://github.com/dotnet/sdk/pull/33227 (once merged, this should provide a workaround for the meantime)",
        "createdAt": "2023-06-14T09:28:01Z",
        "updatedAt": "2023-06-14T09:28:01Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "Removing the BinFmt opt-in in sdk: https://github.com/dotnet/sdk/pull/34402 ",
        "createdAt": "2023-08-14T12:11:00Z",
        "updatedAt": "2023-08-14T12:11:00Z",
        "author": {
          "login": "JanKrivanek"
        }
      }
    ]
  }
}