{
  "number": 4332,
  "title": "Confusing error when using COMReference on Core",
  "body": "_From @fubar-coder on Tuesday, 23 April 2019 07:16:19_\r\n\r\nI get an error which seems to be caused by the following `COMReference` project item:\r\n\r\n```xml\r\n  <ItemGroup Condition=\" '$(TargetFramework)' == 'net461' and '$(OS)' == 'Windows_NT' \">\r\n    <COMReference Include=\"ADOX.dll\">\r\n      <Guid>00000600-0000-0010-8000-00aa006d2ea4</Guid>\r\n      <VersionMajor>6</VersionMajor>\r\n      <VersionMinor>0</VersionMinor>\r\n      <WrapperTool>tlbimp</WrapperTool>\r\n      <Lcid>0</Lcid>\r\n      <Isolated>false</Isolated>\r\n    </COMReference>\r\n  </ItemGroup>\r\n```\r\n\r\nThe error message roughly translates to something along the lines: `The \"ResolveComReference\" task couldn't be executed, because MSBuild couldn't create or connect to a task host with runtime \"CLR4\" and architecture \"x86\".`\r\n\r\nI also attached the build log.\r\n\r\n[build-log.zip](https://github.com/dotnet/core-sdk/files/3106259/build-log.zip)\r\n\r\n\r\n_Copied from original issue: dotnet/core-sdk#1690_",
  "state": "CLOSED",
  "createdAt": "2019-04-23T18:08:29Z",
  "updatedAt": "2024-02-21T17:08:36Z",
  "closedAt": "2019-11-04T19:05:25Z",
  "author": {
    "login": "rainersigwald"
  },
  "labels": [
    ".NET Core",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "Forgind"
      }
    ]
  },
  "milestone": {
    "title": "MSBuild 16.5 Preview 1 (Sprint 161)"
  },
  "comments": {
    "nodes": [
      {
        "body": "_From @Pilchie on Tuesday, 23 April 2019 16:24:09_\r\n\r\n@rainersigwald do you know the state of `COMReference` in the SDK?",
        "createdAt": "2019-04-23T18:08:30Z",
        "updatedAt": "2019-04-23T18:08:30Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "_From @rainersigwald on Tuesday, 23 April 2019 18:07:39_\r\n\r\nIt's not expected to work, but it should fail in a clearer way than this. I think that's a bug for Microsoft/MSBuild; I'll move this and describe what the problem is there.",
        "createdAt": "2019-04-23T18:08:31Z",
        "updatedAt": "2019-04-23T18:08:31Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "COM reference resolution currently only works when building with MSBuild.exe. That's tracked by #3986. You should be able to build successfully with MSBuild.exe (targeting .NET Core 3.0).\r\n\r\nThis error is very confusing; we should instead give the error added in #3987, which should make the underlying problem clearer. This issue tracks the bad error, which I think is related to this:\r\n\r\nhttps://github.com/Microsoft/msbuild/blob/64a5b6be6d4c1a45c02537a08dca8dd1db09f7f2/src/Tasks/Microsoft.Common.CurrentVersion.targets#L3019-L3043\r\n\r\nI think we're trying to load a task in a specific TaskHost environment that we can't satisfy, which means we can't emit the error from the new task.",
        "createdAt": "2019-04-23T18:35:27Z",
        "updatedAt": "2019-04-23T18:35:27Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Reproed with @forgind; this only happens when `PlatformTarget` is `x86`.",
        "createdAt": "2019-10-23T19:24:56Z",
        "updatedAt": "2019-10-23T19:24:56Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald Could use a little help understanding the problem and fix here.  I am switching to JetBrains Rider on my home computer to give it a try, and when I build a project with ADOX.dll reference, I get errors like the one described here.\r\n\r\n> Microsoft.Common.CurrentVersion.targets(2729, 5): [MSB4062] The \"Microsoft.Build.Tasks.ResolveComReference\" task could not be loaded from the assembly Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a.  Confirm that the <UsingTask> declaration is correct, that the assembly and all its dependencies are available, and that the task contains a public class that implements Microsoft.Build.Framework.ITask.\r\n\r\nfor the following MSBuild csproj snippet:\r\n\r\n```xml\r\n  <ItemGroup Condition=\" '$(TargetFramework)' == 'net461' and '$(OS)' == 'Windows_NT' \">\r\n    <COMReference Include=\"ADOX.dll\">\r\n      <Guid>00000600-0000-0010-8000-00aa006d2ea4</Guid>\r\n      <VersionMajor>6</VersionMajor>\r\n      <VersionMinor>0</VersionMinor>\r\n      <WrapperTool>tlbimp</WrapperTool>\r\n      <Lcid>0</Lcid>\r\n      <Isolated>false</Isolated>\r\n    </COMReference>\r\n  </ItemGroup>\r\n```\r\n\r\nI then right clicked on the project, and explicitly added \"Microsoft ADO Ext. 6.0 for DDL and Security 6.0.0\", which generated nearly identical info: it added `<EmbedInteropTypes>True</EmbedInteropTypes>`.\r\n\r\nIs the only way to get this to work to install .net core 3.0+?  I'm trying that now but I couldn't understand \r\n\r\n> I think we're trying to load a task in a specific TaskHost environment that we can't satisfy, which means we can't emit the error from the new task.\r\n\r\nAnd - I take it the improvements in the latest MSBuild assembly loader solve this problem, too?\r\n\r\nEdit: Ha.  Re-reading the issue, I see @fubar-coder reported it and we're both literally referring to the same xml in the same project.",
        "createdAt": "2020-02-16T20:02:59Z",
        "updatedAt": "2020-02-16T20:06:04Z",
        "author": {
          "login": "jzabroski"
        }
      },
      {
        "body": "After installing .NET SDK 3.1.101 x64, I now get this error:\r\n\r\n>   Microsoft.Common.CurrentVersion.targets(2726, 5): [MSB4216] Could not run the \"ResolveComReference\" task because MSBuild could not create or connect to a task host with runtime \"CLR4\" and architecture \"x86\".  Please ensure that (1) the requested runtime and/or architecture are available on the machine, and (2) that the required executable \"C:\\Program Files\\dotnet\\sdk\\3.1.101\\MSBuild.exe\" exists and can be run.\r\n\r\nI don't quite understand this message - not being difficult.\r\n\r\n1. `the requested runtime and/or architecture are available on the machine` - checked using https://docs.microsoft.com/en-us/dotnet/framework/migration-guide/how-to-determine-which-versions-are-installed#use-powershell-to-check-for-a-minimum-version shows I have .NET Framework 4.8 installed, and I have the Developer Pack for .NET Framework 4.6.1\r\n    ```powershell\r\n    (Get-ItemProperty \"HKLM:SOFTWARE\\Microsoft\\NET Framework Setup\\NDP\\v4\\Full\").Release\r\n    ```\r\n    ```\r\n    528040\r\n    ```\r\n2. `that the required executable \"C:\\Program Files\\dotnet\\sdk\\3.1.101\\MSBuild.exe\" exists and can be run` - ran following in PowerShell:\r\n    ```powershell\r\n    ls \"C:\\Program Files\\dotnet\\sdk\\3.1.101\\MSBuild.*\"\r\n    ```\r\n    ```\r\n        Directory: C:\\Program Files\\dotnet\\sdk\\3.1.101\r\n    \r\n    Mode                LastWriteTime         Length Name\r\n    ----                -------------         ------ ----\r\n    -a----       12/18/2019   1:15 AM         153587 MSBuild.deps.json\r\n    -a----       12/19/2019  10:31 PM         696184 MSBuild.dll\r\n    -a----       12/19/2019  10:29 PM            154 MSBuild.runtimeconfig.json\r\n    ```\r\n\r\nIs this supposed to be looking for an MSBuild.exe or is it a typo in the error message?",
        "createdAt": "2020-02-16T20:31:26Z",
        "updatedAt": "2020-02-16T20:31:26Z",
        "author": {
          "login": "jzabroski"
        }
      },
      {
        "body": "I believe this line is incorrect in .NET Core context:\r\nhttps://github.com/microsoft/msbuild/blob/81d9a23b505474a1e7fff3fad86fa5ba2c475523/src/Build/Instance/TaskFactories/TaskHostTask.cs#L568\r\n\r\nI will open a ticket to discuss this message improvement separate from whether this issue fixes the originally reported problem.",
        "createdAt": "2020-02-17T17:38:59Z",
        "updatedAt": "2020-02-17T17:40:26Z",
        "author": {
          "login": "jzabroski"
        }
      },
      {
        "body": "@jzabroski This bug (the confusing error message) should be fixed in MSBuild 16.5/SDK 3.1.200, which isn't out yet.",
        "createdAt": "2020-02-18T17:15:02Z",
        "updatedAt": "2020-02-18T17:15:02Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald Sorry - but, can you (a) point me to the fix? (b) explain to me if there is a workaround / what the correct error message should be here?\r\n\r\nAnd thanks for your help.",
        "createdAt": "2020-02-18T17:25:01Z",
        "updatedAt": "2020-02-18T17:25:20Z",
        "author": {
          "login": "jzabroski"
        }
      },
      {
        "body": "The change is [here](https://github.com/microsoft/msbuild/pull/4849).\r\n\r\nrainersigwald recommended this error message:\r\n`The task \"{0}\" is not supported on the .NET Core version of MSBuild. Please use the .NET Framework version of MSBuild. See https://aka.ms/msbuild/MSB4803 for further details.`\r\nwhere {0} refers to the ResolveComReference task.",
        "createdAt": "2020-03-03T22:40:15Z",
        "updatedAt": "2020-03-03T22:40:58Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "@Forgind Thanks for all your amazing work, and thanks @rainersigwald for your leadership in making this a much more usable/better product overall.  Very impressed.",
        "createdAt": "2020-04-11T17:23:41Z",
        "updatedAt": "2020-04-11T17:23:41Z",
        "author": {
          "login": "jzabroski"
        }
      },
      {
        "body": "> @jzabroski This bug (the confusing error message) should be fixed in MSBuild 16.5/SDK 3.1.200, which isn't out yet.\r\n\r\n@rainersigwald Is there any way I can stick a check for MSBuild at top of a .NET SDK project?  I have stayed away from putting build targets in .NET SDK projects, with the assumption it isn't smart to do so, and put targets in a build.targets file instead.  However, it would be nice to have an `InitialTargets=\"MSBuildMinimumVersionCheck\"` at the top of the project file to encourage people working on my open source project to use the latest version of the SDK/MSBuild.\r\n\r\nI was thinking `MSBuildVersion` and `MSBuildRuntimeType`?",
        "createdAt": "2020-04-11T17:26:22Z",
        "updatedAt": "2020-04-11T17:28:34Z",
        "author": {
          "login": "jzabroski"
        }
      },
      {
        "body": "@jzabroski Yes, you can add `InitialTargets` to SDK-style projects just as you can with legacy projects. You might be interested in defining the target in a `Directory.Build.targets` so it gets imported into many projects in your solution. The properties you mentioned are the likely candidates for such a check. You might also like the version-comparison property functions from microsoft/msbuild#4911--but note that since they're new, if someone's using an old MSBuild they may not be able to parse a file that uses them. Until they get everywhere you'd have to guard their use (ironically behind an MSBuild-version version check . . . so probably not actually helpful to you today).",
        "createdAt": "2020-04-13T16:51:52Z",
        "updatedAt": "2020-04-13T16:51:52Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald I like where you're going.  Saving the world from one footgun at a time.  Somewhere on the Redmond campus there should be a slab of [Golden Foot](https://en.wikipedia.org/wiki/Golden_Foot) dedicated to your MSBuild sanitization.  If refactoring MSBuild isn't an athletic achievement, I don't know what is.",
        "createdAt": "2020-04-13T17:36:16Z",
        "updatedAt": "2020-04-13T17:36:49Z",
        "author": {
          "login": "jzabroski"
        }
      }
    ]
  }
}