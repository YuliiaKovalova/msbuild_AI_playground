{
  "number": 4533,
  "title": "Pack with multiple TargetFrameworks does not use Build Packages correctly",
  "body": "I have created a build package that sets the Version property based on the current time. When I pack a project  with TargetFramework  .netcoreapp3.0, which  reference this build package, the package version is applied correctly. When I pack the project with multiple TargetFrameworks (e.g. netcoreapp3.0;netcoreapp2.2;netcoreapp2.1) the build package is not loaded. The version of the package becomes 1.0.0 instead.\r\n\r\n**Edit:**\r\nEven if I use \r\n```xml\r\n<TargetFrameworks>netcoreapp3.0</TargetFrameworks>\r\n```\r\nThe build package is not loaded\r\n\r\nif I use \r\n```xml\r\n<TargetFramework>netcoreapp3.0</TargetFramework>\r\n```\r\n\r\ninstead, everything works as expected.\r\n\r\n**Edit:**\r\nThe build package targets netstandard1.1",
  "state": "OPEN",
  "createdAt": "2019-07-21T16:06:32Z",
  "updatedAt": "2024-02-21T16:30:59Z",
  "closedAt": null,
  "author": {
    "login": "TFTomSun"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Discussion"
  },
  "comments": {
    "nodes": [
      {
        "body": "@nguerrera can you help?\r\n\r\nI think this may be dependent on how you are authoring your build package. It is possible that you are setting the version in a way that is only applicable in the inner loop of the build (for targetframework) instead of the outer loop (target frameworks).",
        "createdAt": "2019-07-22T18:40:06Z",
        "updatedAt": "2019-07-22T18:40:06Z",
        "author": {
          "login": "livarcocc"
        }
      },
      {
        "body": "@livarcocc is correct.\r\n\r\nWhen you have multiple target frameworks, there are two different build contexts. The \"outer build\" loops over the target frameworks and performs an \"inner build\" on each. The \"inner builds\" are where all the traditional msbuild targets run: compilation, etc. So not everything can work in the outer build, anything that is specific to the target framework cannot. As such, NuGet lets you specify targets for inner and outer builds.\r\n\r\nIf you have things you want to run in outer build, you need a buildMultiTargeting folder. If you want the same logic in inner and outer build, you can duplicate the files or have one of them import the other.\r\n\r\nThis is the package structure:\r\n\r\n```\r\nPackageName.nupkg\r\n    build/\r\n        ## These are used in \"inner build\"\r\n        PackageName.props\r\n        PackageName.targets\r\n    buildMultiTargeting/\r\n        # These are used in \"outer build\"\r\n        PackageName.props\r\n        PackageName.targets\r\n```\r\n        \r\n",
        "createdAt": "2019-07-22T20:06:26Z",
        "updatedAt": "2019-07-22T20:07:10Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "@nguerrera Thanks for the details, i wasn't aware of  that yet. Is there any further documentation for that or is there any possibility to see those outer and inner loops in the MSBuild log? If so, which log level do I need to set and for which keywords should I look for?\r\n\r\nDoes the outer build loop also exist on a single TargetFramework build? Or do I need to find out which part moves from the single loop to the outer loop on a multi target build?\r\n",
        "createdAt": "2019-07-22T21:28:46Z",
        "updatedAt": "2019-07-22T21:30:16Z",
        "author": {
          "login": "TFTomSun"
        }
      },
      {
        "body": "Hi,\r\n\r\nI have the same problem.\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>netstandard1.3</TargetFramework>\r\n    <Company>IP Parking BV</Company>\r\n    <Product>ParkBase Identity Common</Product>\r\n    <Description>ParkBase Identity Common</Description>\r\n    <Authors>Yvonne Arnoldus</Authors>\r\n    <Copyright>Copyright \u00a9 2006-2020 IP Parking BV</Copyright>\r\n    <VersionPrefix>1.0.0</VersionPrefix>\r\n    <AssemblyVersion>1.0.0.0</AssemblyVersion>\r\n    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>\r\n    <PackageId>ParkBase.Identity.Common</PackageId>\r\n  </PropertyGroup>\r\n\r\n  <Target Name=\"GetVersionInformation\" BeforeTargets=\"PreBuildEvent\" Condition=\"'$(AzureDevOps)'==''\">\r\n    <!-- Get Commit Hash -->\r\n    <Exec Command=\"powershell.exe -ExecutionPolicy ByPass -File getcommithash.ps1\" ConsoleToMSBuild=\"true\" WorkingDirectory=\"$(SolutionDir)\">\r\n      <Output TaskParameter=\"ConsoleOutput\" PropertyName=\"CommitHash\" />\r\n    </Exec>  \r\n    <Message Text=\"Commit Hash: $(CommitHash)\" Importance=\"High\" />\r\n\r\n    <!-- Get Build Number -->\r\n    <Exec Command=\"powershell.exe -ExecutionPolicy ByPass -File getbuildnumber.ps1\" ConsoleToMSBuild=\"true\" WorkingDirectory=\"$(SolutionDir)\">\r\n      <Output TaskParameter=\"ConsoleOutput\" PropertyName=\"BuildNumber\" />\r\n    </Exec>  \r\n    <Message Text=\"Build Number: $(BuildNumber)\" Importance=\"High\" />\r\n  </Target>  \r\n\r\n  <Target Name=\"SetVersionInformation\" BeforeTargets=\"PreBuildEvent\">\r\n    <!-- Set FileVersion -->\r\n    <CreateProperty Value=\"$(VersionPrefix).$(BuildNumber)\">\r\n        <Output TaskParameter=\"Value\" PropertyName=\"FileVersion\" />\r\n    </CreateProperty>\r\n\r\n    <!-- Set Version -->\r\n    <CreateProperty Value=\"$(VersionPrefix).$(BuildNumber)-$(CommitHash)\">\r\n        <Output TaskParameter=\"Value\" PropertyName=\"Version\" />\r\n    </CreateProperty>\r\n\r\n    <!-- Set Package Version -->\r\n    <CreateProperty Value=\"$(VersionPrefix).$(BuildNumber)\">\r\n      <Output TaskParameter=\"Value\" PropertyName=\"PackageVersion\" />\r\n    </CreateProperty>\r\n  </Target>\r\n\r\n</Project>\r\n```\r\n\r\nWorks but when I change <TargetFramework> to <TargetFrameworks> is does not work so how can we set a property in buildMultiTargeting?",
        "createdAt": "2020-04-22T05:54:20Z",
        "updatedAt": "2020-04-22T05:54:20Z",
        "author": {
          "login": "YvonneArnoldus"
        }
      }
    ]
  }
}