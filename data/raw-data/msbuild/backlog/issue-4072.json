{
  "number": 4072,
  "title": "Internal MSBuild Error: Unexpected CopyLocal flag",
  "body": "### Steps to reproduce\r\n\r\nSee original discussion on https://github.com/dotnet/cli/issues/10452.\r\n\r\nUsing a preview 1 .NET Core SDK (3.0.100-preview-009812) with MSBuild version 16.0.225.48734 on macOS or Linux:\r\n\r\n```\r\ndotnet new console\r\ndotnet add package akka.multinodetestrunner\r\ndotnet build\r\n```\r\n\r\n### Expected  behavior\r\n\r\nThe project builds successfully, but warns for each unexpected native assembly without managed metadata found in `lib/netcoreapp1.1`.\r\n\r\n### Actual behavior\r\n\r\nThe project fails with the following error:\r\n\r\n```\r\n/usr/local/share/dotnet/sdk/3.0.100-preview-009812/Microsoft.Common.CurrentVersion.targets(2114,5): error MSB4018: The \"ResolveAssemblyReference\" task failed unexpectedly. [/Users/peterhuene/tmp/repro/repro.csproj]\r\n/usr/local/share/dotnet/sdk/3.0.100-preview-009812/Microsoft.Common.CurrentVersion.targets(2114,5): error MSB4018: Microsoft.Build.Shared.InternalErrorException: MSB0001: Internal MSBuild Error: Unexpected CopyLocal flag. [/Users/peterhuene/tmp/repro/repro.csproj]\r\n/usr/local/share/dotnet/sdk/3.0.100-preview-009812/Microsoft.Common.CurrentVersion.targets(2114,5): error MSB4018:    at Microsoft.Build.Tasks.CopyLocalStateUtility.IsCopyLocal(CopyLocalState state) [/Users/peterhuene/tmp/repro/repro.csproj]\r\n/usr/local/share/dotnet/sdk/3.0.100-preview-009812/Microsoft.Common.CurrentVersion.targets(2114,5): error MSB4018:    at Microsoft.Build.Tasks.ResolveAssemblyReference.LogResults(ReferenceTable dependencyTable, List`1 idealAssemblyRemappings, List`1 idealAssemblyRemappingsIdentities, ArrayList generalResolutionExceptions) [/Users/peterhuene/tmp/repro/repro.csproj]\r\n/usr/local/share/dotnet/sdk/3.0.100-preview-009812/Microsoft.Common.CurrentVersion.targets(2114,5): error MSB4018:    at Microsoft.Build.Tasks.ResolveAssemblyReference.Execute(FileExists fileExists, DirectoryExists directoryExists, GetDirectories getDirectories, GetAssemblyName getAssemblyName, GetAssemblyMetadata getAssemblyMetadata, GetLastWriteTime getLastWriteTime, GetAssemblyRuntimeVersion getRuntimeVersion, GetAssemblyPathInGac getAssemblyPathInGac, IsWinMDFile isWinMDFile, ReadMachineTypeFromPEHeader readMachineTypeFromPEHeader) [/Users/peterhuene/tmp/repro/repro.csproj]\r\n/usr/local/share/dotnet/sdk/3.0.100-preview-009812/Microsoft.Common.CurrentVersion.targets(2114,5): error MSB4018:    at Microsoft.Build.Tasks.ResolveAssemblyReference.Execute() [/Users/peterhuene/tmp/repro/repro.csproj]\r\n/usr/local/share/dotnet/sdk/3.0.100-preview-009812/Microsoft.Common.CurrentVersion.targets(2114,5): error MSB4018:    at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute() [/Users/peterhuene/tmp/repro/repro.csproj]\r\n/usr/local/share/dotnet/sdk/3.0.100-preview-009812/Microsoft.Common.CurrentVersion.targets(2114,5): error MSB4018:    at Microsoft.Build.BackEnd.TaskBuilder.ExecuteInstantiatedTask(ITaskExecutionHost taskExecutionHost, TaskLoggingContext taskLoggingContext, TaskHost taskHost, ItemBucket bucket, TaskExecutionMode howToExecuteTask) [/Users/peterhuene/tmp/repro/repro.csproj]\r\n```\r\n\r\nNote that the referenced package has incorrectly been packaged.  It contains native PEs in `lib/netcorelib1.1`, which we do get warnings for:\r\n\r\n```\r\n/usr/local/share/dotnet/sdk/3.0.100-preview-009812/Microsoft.Common.CurrentVersion.targets(2114,5): warning MSB3246: Resolved file has a bad image, no metadata, or is otherwise inaccessible. Assembly file '/Users/peterhuene/.nuget/packages/akka.multinodetestrunner/1.3.11/lib/netcoreapp1.1/API-MS-Win-Base-Util-L1-1-0.dll' could not be opened -- PE image doesn't contain managed metadata. [/Users/peterhuene/tmp/repro/repro.csproj]\r\n...\r\n```\r\n\r\nThe expected behavior then would provide these warnings but `RAR` should ignore them entirely for both referencing and copy-local.\r\n\r\n### Environment data\r\n\r\n```\r\n$ dotnet --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview-009812\r\n Commit:    e3abf6e935\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  10.14\r\n OS Platform: Darwin\r\n RID:         osx.10.14-x64\r\n Base Path:   /usr/local/share/dotnet/sdk/3.0.100-preview-009812/\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview-27122-01\r\n  Commit:  00c5c8bc40\r\n\r\n.NET Core SDKs installed:\r\n  2.1.302 [/usr/local/share/dotnet/sdk]\r\n  2.1.502 [/usr/local/share/dotnet/sdk]\r\n  2.2.101 [/usr/local/share/dotnet/sdk]\r\n  3.0.100-preview-009812 [/usr/local/share/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.2 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.0 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.2 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.0 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview-18579-0056 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.2 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview-27122-01 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n```\r\ndotnet msbuild /version\r\nMicrosoft (R) Build Engine version 16.0.225-preview+g5ebeba52a1 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n16.0.225.48734\r\n```\r\n",
  "state": "CLOSED",
  "createdAt": "2019-01-14T22:14:02Z",
  "updatedAt": "2024-02-26T16:37:07Z",
  "closedAt": "2024-02-25T19:17:41Z",
  "author": {
    "login": "peterhuene"
  },
  "labels": [
    "Area: Tasks",
    "Area: Task: Resolve Assembly References (RAR)",
    "needs-more-info",
    "stale",
    "closed-by-bot",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "I have just faced the same problem with 16.5. We have a big nuget package containing all the dependencies within. Adding it to the project resulted in this error.\r\nAny workaround?\r\n",
        "createdAt": "2020-04-08T17:49:44Z",
        "updatedAt": "2020-04-08T18:01:18Z",
        "author": {
          "login": "MarkKharitonov"
        }
      },
      {
        "body": "+1",
        "createdAt": "2020-05-01T05:55:43Z",
        "updatedAt": "2020-05-01T05:55:43Z",
        "author": {
          "login": "whihathac"
        }
      },
      {
        "body": "I have found the reason why it happens for us. The NuGet packs a certain Asp.Net Core with all of its dependencies using a NuSpec file. It packs both the platform dependent executable and the .Net Core DLL. The presences of both seems to kill msbuild. Once we excluded the EXE from the package file it worked.",
        "createdAt": "2020-05-01T12:52:36Z",
        "updatedAt": "2020-05-01T12:52:36Z",
        "author": {
          "login": "MarkKharitonov"
        }
      },
      {
        "body": "I'm currently hitting this.\r\n\r\nI've not modified any of the nuget packages that my solution is consuming - now all of a sudden I get this same build error both locally and in devops\r\n\r\nMSB0001: Internal MSBuild Error: Unexpected CopyLocal flag\r\n\r\nMicrosoft.Build.Shared.InternalErrorException: MSB0001: Internal MSBuild Error: Unexpected CopyLocal flag.\r\n   at Microsoft.Build.Tasks.CopyLocalStateUtility.IsCopyLocal(CopyLocalState state)\r\n   at Microsoft.Build.Tasks.ResolveAssemblyReference.LogResults(ReferenceTable dependencyTable, List`1 idealAssemblyRemappings, List`1 idealAssemblyRemappingsIdentities, List`1 generalResolutionExceptions)\r\n   at Microsoft.Build.Tasks.ResolveAssemblyReference.Execute(FileExists fileExists, DirectoryExists directoryExists, GetDirectories getDirectories, GetAssemblyName getAssemblyName, GetAssemblyMetadata getAssemblyMetadata, GetLastWriteTime getLastWriteTime, GetAssemblyRuntimeVersion getRuntimeVersion, GetAssemblyPathInGac getAssemblyPathInGac, IsWinMDFile isWinMDFile, ReadMachineTypeFromPEHeader readMachineTypeFromPEHeader)\r\n   at Microsoft.Build.Tasks.ResolveAssemblyReference.Execute()\r\n   at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute()\r\n   at Microsoft.Build.BackEnd.TaskBuilder.ExecuteInstantiatedTask(ITaskExecutionHost taskExecutionHost, TaskLoggingContext taskLoggingContext, TaskHost taskHost, ItemBucket bucket, TaskExecutionMode howToExecuteTask)\r\n/usr/share/dotnet/sdk/3.1.302/Microsoft.Common.CurrentVersion.targets(2081,5): error MSB4018: The \"ResolveAssemblyReference\" task failed unexpectedly. [/home/vsts/work/1/s/DRF.Portal.Web/DRF.Portal.Web/DRF.Portal.Web.csproj]\r\n/usr/share/dotnet/sdk/3.1.302/Microsoft.Common.CurrentVersion.targets(2081,5): error MSB4018: Microsoft.Build.Shared.InternalErrorException: MSB0001: Internal MSBuild Error: Unexpected CopyLocal flag. [/home/vsts/work/1/s/DRF.Portal.Web/DRF.Portal.Web/DRF.Portal.Web.csproj]\r\n/usr/share/dotnet/sdk/3.1.302/Microsoft.Common.CurrentVersion.targets(2081,5): error MSB4018:    at Microsoft.Build.Tasks.CopyLocalStateUtility.IsCopyLocal(CopyLocalState state) [/home/vsts/work/1/s/DRF.Portal.Web/DRF.Portal.Web/DRF.Portal.Web.csproj]\r\n/usr/share/dotnet/sdk/3.1.302/Microsoft.Common.CurrentVersion.targets(2081,5): error MSB4018:    at Microsoft.Build.Tasks.ResolveAssemblyReference.LogResults(ReferenceTable dependencyTable, List`1 idealAssemblyRemappings, List`1 idealAssemblyRemappingsIdentities, List`1 generalResolutionExceptions) [/home/vsts/work/1/s/DRF.Portal.Web/DRF.Portal.Web/DRF.Portal.Web.csproj]\r\n/usr/share/dotnet/sdk/3.1.302/Microsoft.Common.CurrentVersion.targets(2081,5): error MSB4018:    at Microsoft.Build.Tasks.ResolveAssemblyReference.Execute(FileExists fileExists, DirectoryExists directoryExists, GetDirectories getDirectories, GetAssemblyName getAssemblyName, GetAssemblyMetadata getAssemblyMetadata, GetLastWriteTime getLastWriteTime, GetAssemblyRuntimeVersion getRuntimeVersion, GetAssemblyPathInGac getAssemblyPathInGac, IsWinMDFile isWinMDFile, ReadMachineTypeFromPEHeader readMachineTypeFromPEHeader) [/home/vsts/work/1/s/DRF.Portal.Web/DRF.Portal.Web/DRF.Portal.Web.csproj]\r\n/usr/share/dotnet/sdk/3.1.302/Microsoft.Common.CurrentVersion.targets(2081,5): error MSB4018:    at Microsoft.Build.Tasks.ResolveAssemblyReference.Execute() [/home/vsts/work/1/s/DRF.Portal.Web/DRF.Portal.Web/DRF.Portal.Web.csproj]\r\n/usr/share/dotnet/sdk/3.1.302/Microsoft.Common.CurrentVersion.targets(2081,5): error MSB4018:    at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute() [/home/vsts/work/1/s/DRF.Portal.Web/DRF.Portal.Web/DRF.Portal.Web.csproj]\r\n/usr/share/dotnet/sdk/3.1.302/Microsoft.Common.CurrentVersion.targets(2081,5): error MSB4018:    at Microsoft.Build.BackEnd.TaskBuilder.ExecuteInstantiatedTask(ITaskExecutionHost taskExecutionHost, TaskLoggingContext taskLoggingContext, TaskHost taskHost, ItemBucket bucket, TaskExecutionMode howToExecuteTask) [/home/vsts/work/1/s/DRF.Portal.Web/DRF.Portal.Web/DRF.Portal.Web.csproj]\r\n\r\n\r\n\r\n\r\nAny thoughts or help here would be amazing. \r\n\r\n\r\n",
        "createdAt": "2020-08-10T09:58:47Z",
        "updatedAt": "2020-08-10T09:58:47Z",
        "author": {
          "login": "drfbwilliams"
        }
      },
      {
        "body": "@drfbwilliams - are you consuming any NuGet packages developed internally by your organisation?",
        "createdAt": "2020-08-10T15:07:39Z",
        "updatedAt": "2020-08-10T15:07:39Z",
        "author": {
          "login": "MarkKharitonov"
        }
      },
      {
        "body": "@MarkKharitonov thanks for your reply.\r\n\r\nThe answer is yes, and that appears to be the source of the issue.\r\n\r\nOne of the projects that is a .Net Core 3.1 console app moves through devops and outputs a nuget package. The problem being that this project also contains our datacontext and should be generating EF migrations sql scripts in our build pipeline - but that too is failing in the most crazy ways.\r\n\r\nI am going to create a new project and transplant everything to see if the issue comes back. For now, it appears entirely a conflict in terms of referenced resources between two solutions, one being consumed as a nuget by the other solutions.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
        "createdAt": "2020-08-10T16:00:47Z",
        "updatedAt": "2020-08-10T16:00:47Z",
        "author": {
          "login": "drfbwilliams"
        }
      },
      {
        "body": "@drfbwilliams - check if your internal NuGet package contains both exe and dll with the same name. E.g., if the NuGet packages a web application (off by default, but you could have enabled it) or an executable, then .Net Core 3 would pack both the dll and the platform dependent executable, i.e. exe on windows.\r\nIf you have both .exe and .dll - modify the build process for the NuGet to exclude either .exe or .dll, because it is unlikely you need both in the same NuGet package. ",
        "createdAt": "2020-08-10T17:09:03Z",
        "updatedAt": "2020-08-10T17:09:03Z",
        "author": {
          "login": "MarkKharitonov"
        }
      },
      {
        "body": "Thanks @MarkKharitonov - It is definitely this issue with both being packed.\r\n\r\n![image](https://user-images.githubusercontent.com/69192966/89816357-a50af400-db70-11ea-90ab-bf6f2608c6cb.png)\r\n\r\n\r\nThis is a problem in my particular situation - EF can only generate SQL scripts from a startup exe, that is why the datacontext sits in that full fat web project.\r\n\r\nFor anyone else who comes across this - ensure that in the project properties => package, you have not checked Generate NuGet package on build.\r\n\r\n![image](https://user-images.githubusercontent.com/69192966/89814748-d7ffb880-db6d-11ea-84a7-1bb8f77266c5.png)\r\n\r\n\r\nIf you are using the devops NuGet Pack Task, you will need create a basic .nuspec file which needs to exclusively executed (as opposed to allowing the Task to pack from the .csproj file) in order to exclude the exe\r\n\r\nIn the nuspec file, just include a package sibling section for file(s) to include and exclude such as the following:\r\n\r\n![image](https://user-images.githubusercontent.com/69192966/89923779-49ea0780-dc2b-11ea-99bf-c39a0c594481.png)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
        "createdAt": "2020-08-11T16:37:25Z",
        "updatedAt": "2020-08-11T16:37:25Z",
        "author": {
          "login": "drfbwilliams"
        }
      },
      {
        "body": "The NuGet Pack Task should not be used on a project. Rather on the solution. Inside the csproj file you can set `<IsPackable>false</IsPackable>` if you want to skip packing the project at all.\r\n\r\nIf you do want to pack it, but avoid having both exe and dll, then I suppose there should be a build property that suppresses the generation of the framework dependent executable. I just do not know it.\r\nOr you could have a post build step that deletes it.\r\n\r\nIn my opinion it is more convenient than having a custom nuspec.",
        "createdAt": "2020-08-11T18:31:12Z",
        "updatedAt": "2020-08-11T18:31:12Z",
        "author": {
          "login": "MarkKharitonov"
        }
      },
      {
        "body": "@MarkKharitonov I have the Task on the solution - which contains several projects that are libraries. Every project needs to be packed.\r\n\r\nI find no build property to suppress the exe, but as I say, generating an exe is required, because of the issue with EF migration script generation on the data context(s).\r\n\r\nThe other reason to use a nuspec is for the metadata. The nuget task just doesn't respect the assembly info in the csproj so you end up with an utter mess in your artifact feed, all with no author or description information.\r\n\r\nVersions are of course a giant mess, so all in all, it is a considerable investment to get this all working correctly with versioned, detailed nuget packages.\r\n\r\nThanks for your help Mark.\r\n\r\n",
        "createdAt": "2020-08-12T04:35:45Z",
        "updatedAt": "2020-08-12T04:35:45Z",
        "author": {
          "login": "drfbwilliams"
        }
      },
      {
        "body": "I am facing this same issue. I am using an internal NuGet package which generates C# classes based on certain inputs.",
        "createdAt": "2020-08-20T12:34:43Z",
        "updatedAt": "2020-08-20T12:34:43Z",
        "author": {
          "login": "amandal1810"
        }
      },
      {
        "body": "Okay! I figured it out... but it might be specific to my case:\r\n\r\nI made this change in the .csproj file where I am referencing the internal nuget package:\r\nI changed from this:\r\n```\r\n    <PackageReference Include=\"Microsoft.Omex.CodeGenerators.SettingsGenerator\" Version=\"20.4.10820.11105\" />\r\n```\r\n\r\nto this:\r\n\r\n```\r\n    <PackageReference Include=\"Microsoft.Omex.CodeGenerators.SettingsGenerator\" Version=\"20.4.10820.11105\">\r\n      <PrivateAssets>all</PrivateAssets>\r\n      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>\r\n    </PackageReference>\r\n```",
        "createdAt": "2020-08-20T13:00:33Z",
        "updatedAt": "2020-08-20T13:00:33Z",
        "author": {
          "login": "amandal1810"
        }
      },
      {
        "body": "After doing the steps mentioned above, I did two more steps:\r\n1. Deleted C:\\Users\\[user]\\.nuget **.packages folder** \r\n2. Deleted C:\\Program Files\\dotnet\\sdk **NuGetFallbackFolder**\r\n\r\nThat fixed the problem for me.",
        "createdAt": "2021-08-23T09:15:06Z",
        "updatedAt": "2021-08-23T09:15:06Z",
        "author": {
          "login": "Stoyanov8"
        }
      },
      {
        "body": "> \r\n> \r\n> I have found the reason why it happens for us. The NuGet packs a certain Asp.Net Core with all of its dependencies using a NuSpec file. It packs both the platform dependent executable and the .Net Core DLL. The presences of both seems to kill msbuild. Once we excluded the EXE from the package file it worked.\r\n\r\n\r\nThis was absolutely it for my issue. Had a nuspec file which was gobbling up the `xUnit` exe - fixed the `exclude` and publish specs and a return to sanity was achieved. Thanks for the nudge, @MarkKharitonov  !",
        "createdAt": "2021-08-31T15:30:33Z",
        "updatedAt": "2021-08-31T15:30:33Z",
        "author": {
          "login": "bsolovij-ebsco"
        }
      },
      {
        "body": "Are there any updates on this? Any way to get more information for what the root issue is when it fails? I had added the exclude for **/*.exe and yet the package still fails to install with the same message: \"Internal MSBuild Error: Unexpected CopyLocal flag.\"",
        "createdAt": "2022-11-16T19:54:07Z",
        "updatedAt": "2022-11-16T19:54:07Z",
        "author": {
          "login": "wiisaacs"
        }
      },
      {
        "body": "I suspect this was resolved by #7937. Can anyone confirm or refute that?",
        "createdAt": "2022-12-13T22:44:31Z",
        "updatedAt": "2022-12-13T22:44:31Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "This issue is marked as stale because feedback has been requested for 30 days with no response. Please respond within 14 days or this issue will be closed due to inactivity.\n<!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. -->",
        "createdAt": "2024-02-08T17:47:20Z",
        "updatedAt": "2024-02-08T17:47:20Z",
        "author": {
          "login": "dotnet-policy-service[bot]"
        }
      },
      {
        "body": "This issue was closed due to inactivity. If you can still reproduce this bug, please comment with the requested information, detailed steps to reproduce the problem, or any other notes that might help in the investigation.\n<!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. -->",
        "createdAt": "2024-02-25T19:17:42Z",
        "updatedAt": "2024-02-25T19:17:42Z",
        "author": {
          "login": "dotnet-policy-service[bot]"
        }
      }
    ]
  }
}