{
  "number": 10306,
  "title": "[Bug]: `ResolveKeySource` is not a dependency of `CoreCompile`",
  "body": "### Issue Description\r\n\r\n`CoreCompile` target calls `Csc` with `KeyFile=\"$(KeyOriginatorFile)\"`.\r\nThis `KeyOriginatorFile` property is set by the `ResolveKeySource` target.\r\n`ResolveKeySource` target is not a dependency of `CoreCompile` (although it is a dependency of e.g., `Compile` and `CoreBuild`)\r\nMost of the time it seems the `ResolveKeySource` target is actually executed before `CoreCompile` so everything works fine - but sometimes it doesn't: https://github.com/dotnet/roslyn/issues/74156\r\n\r\n### Steps to Reproduce\r\n\r\n1. Clone roslyn at 31e6ba81af842e960aa04850b0e63229874d4f02\r\n2. Run `.\\Restore.cmd`\r\n3. Open in VS IntPreview Version 17.11.0 Preview 3.0 [35026.344.main]\r\n4. Run Build > Build Solution - succeeds\r\n5. Run Build > Build Solution again - fails - see https://github.com/dotnet/roslyn/issues/74156\r\n\r\nCreating a minimal repro would be complicated, I don't know the exact conditions needed to get the buggy ordering of targets.\r\n\r\nHere's the binlog (from a VS build) where I saw the issue: [vs.binlog.zip](https://github.com/user-attachments/files/16029277/vs.binlog.zip)\r\n\r\n### Expected Behavior\r\n\r\nBuild succeeds the second time.\r\n\r\n### Actual Behavior\r\n\r\n```\r\nCSC error CS8102: Public signing was specified and requires a public key, but no public key was specified. [D:\\roslyn-D\\src\\VisualStudio\\CSharp\\Impl\\Microsoft.VisualStudio.LanguageServices.CSharp.csproj]\r\n```\r\n\r\n### Analysis\r\n\r\n_No response_\r\n\r\n### Versions & Configurations\r\n\r\n_No response_",
  "state": "OPEN",
  "createdAt": "2024-06-28T12:01:35Z",
  "updatedAt": "2025-02-04T14:51:16Z",
  "closedAt": null,
  "author": {
    "login": "jjonescz"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "bug",
    "Priority:2",
    "triaged"
  ],
  "comments": {
    "nodes": [
      {
        "body": "In that binlog:\r\n\r\n1. `CoreCompile` is running because of `<Target Name=\"_SetGeneratedOutputItems\" DependsOnTargets=\"CoreCompile\">` from `microsoft.visualstudio.extensibility.jsongenerators.sdk\\17.10.2079\\build\\Microsoft.VisualStudio.Extensibility.JsonGenerators.Sdk.props`\r\n2. That's depended on by `ExtensionJsonOutputGroup`\r\n3. That's explicitly requested in the reference through VSSDK targets by\r\n\r\nhttps://github.com/dotnet/roslyn/blob/879be6a9604d74f51916939625856e6602303256/src/VisualStudio/Setup/Roslyn.VisualStudio.Setup.csproj#L209C146-L209C170\r\n\r\nI think two things should be done:\r\n\r\n1. The VSSDK should be updated so that reference is `Compile` instead of `CoreCompile`, which would trigger all of `$(CompileDependsOn)` in order and work.\r\n2. `CoreCompile` for VB and C# should consider adding an explicit dependency on `ResolveKeySource`.\r\n\r\nThe reason I'm saying \"consider\" for 2 is that right now `CoreCompile` doesn't really have any explicit dependencies and depends on the implicit `$(BuildDependsOn)`/`$(CompileDependsOn)` ordering. That can produce other problems like this (I'm a bit surprised for example that NuGet references made it into this compilation)--but adding a constraints to target order has been a surprisingly breaking operation in the past due to how people have hooked the fragile existing system.",
        "createdAt": "2024-06-28T15:05:09Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> * The VSSDK should be updated so that reference is `Compile` instead of `CoreCompile`, which would trigger all of `$(CompileDependsOn)` in order and work.\r\n\r\nI did this in an internal PR that I just completed; not sure when there'll be a new package for Roslyn to reference @jjonescz.",
        "createdAt": "2024-07-09T15:53:06Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Thanks, now after updating VSSDK with the fix I see a similar issue - WPF markup is not getting compiled. Again it looks like target `CoreBuild` depends on `PrepareResources` which depends on `MarkupCompilePass1` and `CoreCompile` is not in this dependency chain so it can run before `MarkupCompilePass1` - failing to find the C# files generated from WPF XAML markup files.\r\n\r\nHere are binlogs - first a failing one then another succeeding on rebuild for comparison: [wpf-binlogs.zip](https://github.com/user-attachments/files/16163825/wpf-binlogs.zip)\r\n",
        "createdAt": "2024-07-10T14:42:22Z",
        "author": {
          "login": "jjonescz"
        }
      },
      {
        "body": "Should we create another bug? I think we have another request, asking `PrepareResources` should also be called before `CoreCompile`",
        "createdAt": "2024-07-17T21:58:09Z",
        "author": {
          "login": "Cosifne"
        }
      }
    ]
  }
}