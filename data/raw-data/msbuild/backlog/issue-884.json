{
  "number": 884,
  "title": "Potential performance hit from PipeStream misuse",
  "body": "MSBuild is using a [NamedPipeServerStream](https://github.com/Microsoft/msbuild/blob/master/src/Shared/NodeEndpointOutOfProcBase.cs#L486) wrapped by a [binary reader](https://github.com/Microsoft/msbuild/blob/master/src/Shared/InterningBinaryReader.cs) for inter process object marshalling during multiproc builds.\n\nVS perf tests pointed out that deserialization is taking a long time due to a potential misuse of the pipe stream (or it's interaction with the custom interning binary reader): _\"the perf trace shows that the code spent 2/3 of time to call the API to read to a buffer the size of a single byte, and 1/3 of time to read a string.  Behind it, the pipeStream code calls async API, and wait it to be processed in another thread for every those bytes.\"_\n\n```\nName                                                    Inc %        Inc     Inc Ct Exc %   Exc Exc Ct  Fold    Fold Ct                             When        First         Last\nsystem.core.ni!PipeStream.ReadCore                   5.7    28,580.086  415,755  0.0     0      0     0      0  _50999999999999999999999999993__    1,467.629   30,203.703\n+ system.core.ni!PipeStream.EndRead                      5.5    27,873.910  404,585  0.0     0      0     0      0  _29999999999999999999999999993__    1,467.629   30,203.703\n|+ mscorlib.ni!System.Threading.WaitHandle.WaitOne()     5.5    27,687.170  402,319  0.0     0      0     0      0  _29999999999999999999999999993__    1,467.629   30,203.703\n\nThread Time caller:\nName                                                                    Inc %        Inc     Inc Ct Exc %   Exc Exc Ct  Fold    Fold Ct                             When        First         Last\nsystem.core.ni!PipeStream.ReadCore                                       5.7    28,580.086  415,755  0.0     0      0     0      0  _50999999999999999999999999993__    1,467.629   30,203.703\n+ system.core.ni!System.IO.Pipes.PipeStream.ReadByte()                   3.9    19,753.338  292,850  0.0     0      0     0      0  _26666666666666666666666666662__    1,467.629   30,203.703\n+ system.core.ni!PipeStream.Read                                         1.8    8,826.576   122,902  0.0     0      0     0      0  _02333333333333323323333323331__    1,490.325   30,203.515\n|+ microsoft.build.ni!InterningBinaryReader.ReadString                   1.5    7,764.039   107,894  0.0     0      0     0      0  _02222222222222222222222222221__    1,493.011   30,203.515\n\nCPU stack (indicates called many time, not blocked in one call)\nName                                        Inc %        Inc    Exc %   Exc Fold                                When        First         Last\nsystem.core.ni!PipeStream.ReadCore          53.9      17,090     0.1    36    0 _2066656656566666655555666665554    1,489.024   30,203.740\n+ system.core.ni!PipeStream.EndRead         24.9       7,902     0.3    92    0 _0222222232222222222222222222222    1,489.024   30,201.739\n+ system.core.ni!PipeStream.BeginReadCore   19.0       6,043     0.2    60    0 _0222222212222222221222222222111    1,492.010   30,194.837\n\n```\n\nNeed to investigate how / why this happens and fix it.\n",
  "state": "CLOSED",
  "createdAt": "2016-08-09T20:23:19Z",
  "updatedAt": "2024-02-21T17:26:40Z",
  "closedAt": "2016-10-28T22:09:22Z",
  "author": {
    "login": "cdmihai"
  },
  "labels": [
    "backlog",
    "needs-design",
    "Area: Performance",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Visual Studio 15 RC"
  },
  "comments": {
    "nodes": [
      {
        "body": "@dsplaisted I vaguely remember you also spotted some weird pipe stream usage while enabling `/m` for xplat. Does this sound familiar?\n",
        "createdAt": "2016-08-09T20:26:31Z",
        "updatedAt": "2016-08-09T20:27:26Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "This should have been resolved by @dsplaisted in #1227.\n",
        "createdAt": "2016-10-28T22:09:22Z",
        "updatedAt": "2016-10-28T22:09:22Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}