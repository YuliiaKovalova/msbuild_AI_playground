{
  "number": 8623,
  "title": "ResolveAssemblyReferencesDesignTime returning many items unused by .NET Core projects in VS",
  "body": "### Issue Description\n\nFor a new, empty SDK-style .NET project, the `ResolveAssemblyReferencesDesignTime` target produces ~160 items that the .NET Project System ignores. These items remain in memory, for every configuration of every project. Removing these items would reduce the amount of memory we retain.\r\n\r\nThese items include assemblies from framework references (the bulk of those mentioned above). Additionally assemblies from NuGet packages are included. In both cases, the .NET Project System does not use these items.\r\n\r\nHere's an example from a .NET 7 project having a single `PackageReference`:\r\n\r\n![image](https://user-images.githubusercontent.com/350947/229386788-27f96bb0-2a74-4624-b5f2-3e1e288e9ccc.png)\r\n\r\nThe `ResolveAssemblyReferencesDesignTime` target may have other consumers, so I'm unclear on whether we can change this without breaking other scenarios. There isn't much documentation on the target to cover what's expected of the target. One option is to have the .NET Project System ship its own alternative version of this target that meets its own expectations.\n\n### Steps to Reproduce\n\nRun a design-time build for an SDK-style .NET project in VS.\n\n### Expected Behavior\n\nOnly assemblies shown in the Dependencies tree should be returned.\n\n### Actual Behavior\n\nAssemblies covered by other reference types (`PackageReference`/`FrameworkReference`) are included too, wasting resources in VS.\r\n\r\nIt seems like historically the intent was to return only resolved `Reference` items (from the perspective of the user) as P2P references are filtered out. Perhaps this filtering should be extended to package/framework references too.\r\n\r\nhttps://github.com/dotnet/msbuild/blob/4c9e8aa8a981899b046beba9c290dbfc0a6d88ae/src/Tasks/Microsoft.Common.CurrentVersion.targets#L2804-L2814\n\n### Analysis\n\nIt seems like these items could be filtered to omit any having non-empty `NuGetPackageId` metadata. Or to filter only `FrameworkReference` assemblies, use `FrameworkReferenceName` metadata.\n\n### Versions & Configurations\n\n_No response_",
  "state": "CLOSED",
  "createdAt": "2023-04-03T00:16:59Z",
  "updatedAt": "2023-04-04T13:53:27Z",
  "closedAt": "2023-04-04T13:53:27Z",
  "author": {
    "login": "drewnoakes"
  },
  "labels": [
    "Area: Performance",
    "Area: Task: Resolve Assembly References (RAR)",
    "needs-triage"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "It seems likely that we cannot change the behaviour of the target here, so I filed https://github.com/dotnet/project-system/pull/8953 to replace that target for purposes of the .NET Project System. We can close that if making a change to MSBuild is preferred.",
        "createdAt": "2023-04-03T01:30:29Z",
        "updatedAt": "2023-04-03T01:30:29Z",
        "author": {
          "login": "drewnoakes"
        }
      },
      {
        "body": "cc @Forgind and @ladipro who've been thinking about RAR in general (though I don't think this is very related to the ongoing perf-of-rar-itself work).\r\n\r\nI am not aware of any other consumer of `ResolveAssemblyReferencesDesignTime`, and it's early enough in 17.7 that I think I'd be willing to experiment (behind a changewave) in the MSBuild targets. Of course that's if it'd work for other consumers (https://github.com/dotnet/project-system/issues/8952#issuecomment-1493509589). Were you envisioning something like adding another clause to exclude those with FrameworkReferenceName metadata?",
        "createdAt": "2023-04-03T20:37:32Z",
        "updatedAt": "2023-04-03T20:37:32Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "So something like https://github.com/dotnet/msbuild/pull/8627?\r\n\r\nI just put that up for discussion; not strongly pushing for it or anything. That said, VS is slow, and making it consume a bit less memory and compute sounds like a good thing \ud83d\ude42",
        "createdAt": "2023-04-04T00:05:06Z",
        "updatedAt": "2023-04-04T00:05:06Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "As @davkean pointed out, the target is used by CPS directly for various other views of references. Changing this would require testing a bunch of scenarios outside of my initial use case (the dependencies tree), and I'm no longer sure it's safe to filter those items out completely without breaking things like designers in VS.\r\n\r\nI suspect this should be closed.",
        "createdAt": "2023-04-04T03:09:09Z",
        "updatedAt": "2023-04-04T03:09:09Z",
        "author": {
          "login": "drewnoakes"
        }
      },
      {
        "body": "> making it consume a bit less memory and compute sounds like a good thing\r\n\r\nIt may be possible to reduce the amount of metadata on these items, but careful analysis of the current usages would be required. I feel like any such work should probably apply more broadly than just these items too.",
        "createdAt": "2023-04-04T03:10:19Z",
        "updatedAt": "2023-04-04T03:10:19Z",
        "author": {
          "login": "drewnoakes"
        }
      }
    ]
  }
}