{
  "number": 8633,
  "title": "[Feature Request]: Import with content body (inline import)",
  "body": "### Updated Summary\r\nSee the full details below. The updated idea is to have `Import` include child elements that would be treated like they were part of a `<Project>` in a separate file. In that way, you can do inline importing of content, such as targets/properties/etc. This solution satisfies the scenario mentioned in the original feature request.\r\n\r\n#### Updated Proposal\r\nIn *Directory.Build.targets*:\r\n```xml\r\n<Import Condition=\"'$(IsVsixProject)' == 'true'\">\r\n\r\n  <Target Name=\"GetVsixPrimaryOutputs\" Condition=\"'$(CreateVsixContainer)' == 'true'\" Returns=\"@(VsixPrimaryOutputs)\">\r\n    <ItemGroup>\r\n      <VsixPrimaryOutputs Include=\"$(TargetVsixContainer)\" />\r\n      <VsixPrimaryOutputs Include=\"$(VisualStudioSetupInsertionPath)$(VsixManifestPackageId).json\">\r\n        <RelativeUrl Condition=\"'$(Platform)' != 'AnyCPU'\">$(Platform)/</RelativeUrl>\r\n        <SBOMFileLocation>@(SbomOutput)</SBOMFileLocation>\r\n        <SBOMFileDestPath>$(SBOMFileDestPath)</SBOMFileDestPath>\r\n      </VsixPrimaryOutputs>\r\n    </ItemGroup>\r\n  </Target>\r\n\r\n</Import>\r\n```\r\n\r\n# Original Feature Request\r\n\r\n### Summary\r\n\r\nThe idea is to create a `TargetGroup` element. This element would only be able to hold `Target` elements. The primary purpose of this element is to allow a `Condition` attribute to be defined on the `TargetGroup`. This would allow for conditional definition of targets at evaluation-time.\r\n\r\n### Background and Motivation\r\n\r\nCurrently, the only way to conditionally define a `Target` is to put it into its own *.targets* file and then conditionally `Import` the *.targets* file. In the example below, the override for the `GetVsixPrimaryOutputs` target will only be defined if `IsVsixProject` is set to `true`.\r\n\r\n#### Example\r\nIn *Directory.Build.targets*:\r\n```xml\r\n<Import Project=\"..\\eng\\imports\\OverrideGetVsixPrimaryOutputs.targets\" Condition=\"'$(IsVsixProject)' == 'true'\" />\r\n```\r\nIn *OverrideGetVsixPrimaryOutputs.targets*:\r\n```xml\r\n<Project>\r\n\r\n  <Target Name=\"GetVsixPrimaryOutputs\" Condition=\"'$(CreateVsixContainer)' == 'true'\" Returns=\"@(VsixPrimaryOutputs)\">\r\n    <ItemGroup>\r\n      <VsixPrimaryOutputs Include=\"$(TargetVsixContainer)\" />\r\n      <VsixPrimaryOutputs Include=\"$(VisualStudioSetupInsertionPath)$(VsixManifestPackageId).json\">\r\n        <RelativeUrl Condition=\"'$(Platform)' != 'AnyCPU'\">$(Platform)/</RelativeUrl>\r\n        <SBOMFileLocation>@(SbomOutput)</SBOMFileLocation>\r\n        <SBOMFileDestPath>$(SBOMFileDestPath)</SBOMFileDestPath>\r\n      </VsixPrimaryOutputs>\r\n    </ItemGroup>\r\n  </Target>\r\n\r\n</Project>\r\n```\r\n\r\n### Proposed Feature\r\n\r\nUsing a `TargetGroup`, you can set the condition directly on the `TargetGroup` and do not need to define the `Target` in a separate file. Based on the example above, the proposal would look like the concept below.\r\n\r\n#### Proposal\r\nIn *Directory.Build.targets*:\r\n```xml\r\n<TargetGroup Condition=\"'$(IsVsixProject)' == 'true'\">\r\n\r\n  <Target Name=\"GetVsixPrimaryOutputs\" Condition=\"'$(CreateVsixContainer)' == 'true'\" Returns=\"@(VsixPrimaryOutputs)\">\r\n    <ItemGroup>\r\n      <VsixPrimaryOutputs Include=\"$(TargetVsixContainer)\" />\r\n      <VsixPrimaryOutputs Include=\"$(VisualStudioSetupInsertionPath)$(VsixManifestPackageId).json\">\r\n        <RelativeUrl Condition=\"'$(Platform)' != 'AnyCPU'\">$(Platform)/</RelativeUrl>\r\n        <SBOMFileLocation>@(SbomOutput)</SBOMFileLocation>\r\n        <SBOMFileDestPath>$(SBOMFileDestPath)</SBOMFileDestPath>\r\n      </VsixPrimaryOutputs>\r\n    </ItemGroup>\r\n  </Target>\r\n\r\n</TargetGroup>\r\n```\r\n\r\n### Alternative Designs\r\n\r\nSome other ideas for `TargetGroup` include:\r\n- Allowing a way to combine the element name `Target` and the `Name` attribute for a target within a `TargetGroup`\r\n  - In a `TargetGroup`, instead of `<Target Name=\"GetVsixPrimaryOutputs\"/>`, you could have `<GetVsixPrimaryOutputs />`.\r\n- Allowing the use of target sequencing modifiers (`BeforeTargets`, `AfterTargets`, `DependsOn`) to be used on a `TargetGroup`",
  "state": "OPEN",
  "createdAt": "2023-04-05T00:46:20Z",
  "updatedAt": "2024-02-21T16:27:40Z",
  "closedAt": null,
  "author": {
    "login": "MiYanni"
  },
  "labels": [
    "backlog",
    "Feature Request",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Backlog"
  },
  "comments": {
    "nodes": [
      {
        "body": "The TargetGroup feature could help <https://github.com/dotnet/Nerdbank.GitVersioning/issues/568> in principle, but not in practice because the package wouldn't be able to require such a new version of MSBuild.\n\nI suspect that the feature would require changes in software that people use to edit MSBuild projects, and those changes would be larger than the changes in MSBuild itself.\n\n",
        "createdAt": "2023-04-05T03:18:05Z",
        "updatedAt": "2023-04-05T03:18:05Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "> would require changes in software that people use to edit MSBuild projects\n\nPossibly the existing OM could somehow fake it. Eg if you just enumerate targets, the group is transparent. Or it looks like a special import with a condition. And if you want to manipulate the \"target group\" you use a new API.",
        "createdAt": "2023-04-05T04:37:22Z",
        "updatedAt": "2023-04-05T04:37:22Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "The motivation for the feature request appears to be overriding an existing target, and not conditionally defining targets.\r\n\r\nIf `GetVsixPrimaryOutputs` was not an override, it would not need to be conditionally defined and the condition on the target could be `Condition=\"'$(IsVsixProject)' == 'true' and '$(CreateVsixContainer)' == 'true'\"`.\r\n\r\nThe ability to conditionally override an existing target is supported by conditional imports. It is not a 'missing' capability.",
        "createdAt": "2023-04-05T13:09:57Z",
        "updatedAt": "2023-04-05T13:09:57Z",
        "author": {
          "login": "jrdodds"
        }
      },
      {
        "body": "My main concern here is the different semantics of `<TargetGroup Condition=\"false\">` vs `<Target Condition=\"false\">`. The latter would condition whether the Target gets _evaluated_ while the latter conditions whether the target gets _executed_.\r\n\r\nIn other `*Group` groupings, the condition applies _as if it were applied to each subelement_, but this would be different. Is that worth being able to avoid the import (which is admittedly a pain)?\r\n\r\nAnother option would be to have two types of condition on `Target`, the existing execution-time `Condition` and a new evaluation-time `EvaluationCondition` (I don't think I like that name) that controls whether the target is created/overrides an existing target.",
        "createdAt": "2023-04-05T14:37:51Z",
        "updatedAt": "2023-04-05T14:37:51Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> The TargetGroup feature could help [dotnet/Nerdbank.GitVersioning#568](https://github.com/dotnet/Nerdbank.GitVersioning/issues/568) in principle, but not in practice because the package wouldn't be able to require such a new version of MSBuild.\r\n\r\nThis is a reasonable concern but it doesn't mean we shouldn't add useful features--if we don't add them they're never useful; if we add them now they can be useful at some point in the future when individual maintainers are willing to drop support for older versions.\r\n \r\n> I suspect that the feature would require changes in software that people use to edit MSBuild projects, and those changes would be larger than the changes in MSBuild itself.\r\n\r\nThis is a very important factor to consider when changing the MSBuild language itself.",
        "createdAt": "2023-04-05T14:40:09Z",
        "updatedAt": "2023-04-05T14:40:09Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Perhaps instead Target (etc) could be allowed as a child of an Import element. The semantics of Condition on Import are already clear . Essentially Import but of a block in the same file.",
        "createdAt": "2023-04-05T14:49:25Z",
        "updatedAt": "2023-04-05T14:49:25Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "> My main concern here is the different semantics of `<TargetGroup Condition=\"false\">` vs `<Target Condition=\"false\">`. The latter would condition whether the Target gets _evaluated_ while the latter conditions whether the target gets _executed_.\r\n> \r\n> In other `*Group` groupings, the condition applies _as if it were applied to each subelement_, but this would be different. Is that worth being able to avoid the import (which is admittedly a pain)?\r\n\r\nI would argue that the weird semantics is more in Target vs. other rather than TargetGroup vs. OtherGroup. Though it's true that conditions on group elements are equivalent to applying it to the elements in that group, conditions on ItemGroups or PropertyGroups or ImportGroups or ItemDefinitionGroups, etc. all apply to the group/element at evaluation time.\r\n \r\n> Another option would be to have two types of condition on `Target`, the existing execution-time `Condition` and a new evaluation-time `EvaluationCondition` (I don't think I like that name) that controls whether the target is created/overrides an existing target.\r\n\r\nBy the same token, I might say we could have Condition and ExecutionCondition, though I recognize that would be a _very serious_ breaking change, so we couldn't do that. \ud83d\ude09",
        "createdAt": "2023-04-05T17:28:34Z",
        "updatedAt": "2023-04-05T17:28:34Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "Adding support for 'inline' content for an `Import`, as @danmoseley suggests, seems like it could be a very useful feature in general.",
        "createdAt": "2023-04-05T18:40:41Z",
        "updatedAt": "2023-04-05T18:40:41Z",
        "author": {
          "login": "jrdodds"
        }
      },
      {
        "body": "@jrdodds interesting, what other uses are you thinking of?",
        "createdAt": "2023-04-05T18:55:00Z",
        "updatedAt": "2023-04-05T18:55:00Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@MiYanni's interest in managing the number of separate files applies to more than just targets.\r\n\r\nAs a specific example, I can imagine a target that uses a custom task where the target is needed conditionally. Instead of a separate small file, the `Target` and `UsingTask` could be in an inline `Import`.",
        "createdAt": "2023-04-05T19:11:31Z",
        "updatedAt": "2023-04-05T19:11:31Z",
        "author": {
          "login": "jrdodds"
        }
      },
      {
        "body": "My only real critique of having Targets under Imports is that it feels like an anachronism. People who have used MSBuild a lot recognize that currently, if you want a Target (or UsingTask, etc.) to be evaluated conditionally, it needs to be in a separate file and imported, but if you don't realize that, you might wonder what a conditionally evaluated Target has to do with Imports. TargetGroup would resolve that issue, but if it exists, it would presumably only be for Targets...we could consider having an element with a more generic name that can contain Targets or other things?\r\n\r\n```XML\r\n<Group>\r\n  <Target...\r\n  <UsingTask...\r\n  <Property Name=\"...\">...</Property>\r\n  ...\r\n</Group>\r\n```\r\n",
        "createdAt": "2023-04-05T19:18:14Z",
        "updatedAt": "2023-04-05T19:18:14Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "What I like about allowing children of imports is that while it's unfamiliar I think once you realize it's equivalent to a file the rest (e.g. evaluation rules) should be intuitive. There is relatively little that would need designing here - it would be semantically the same as an import in most ways. Potentially the existing OM could be used if eg it was given a notional path (like the path of the file it's in, plus a numbered suffix). Existing code should not be broken as it would not attempt to enumerate children of an Import tag.\n\nConversely if you invent a new tag there will need to be a series of decisions made about behaviors (which may take some exploring), more OM to represent it, and potentially more impact on existing code using the OM. It also does not naturally extend to other child elements. And there is more cognitive load (at least to me)",
        "createdAt": "2023-04-05T19:29:06Z",
        "updatedAt": "2023-04-05T19:31:44Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "Can you just allow Import, Target, and UsingTask within Choose/When and Choose/Otherwise?",
        "createdAt": "2023-04-05T19:32:23Z",
        "updatedAt": "2023-04-05T19:32:23Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "To give a bit more detail to the request:\r\n\r\nOverriding a `Target` is currently achievable and is done in many different situations. However, the current situation I'm faced with has `GetVsixPrimaryOutputs` overridden **twice**, once for VSIX extension projects and once for SWiX-based projects. I'm attempting to override only the VSIX extension project version of it. Keep in mind, there is a 'default' `GetVsixPrimaryOutputs` for VSIX extension projects, but that version is being overridden by a NuGet package I'm using. I'm trying to override that specific NuGet package-specific version of the target, while keeping the rest of the props/targets from the package.\r\n\r\nAs it stands, the only way to conditionally define a `Target` override is to put it in a separate `<Project>` and then `Import` that project conditionally. You can *only* define a new `<Project>` in a new file. AFAIK, the 'identity' of a `<Project>` is entirely based on the file it is in, as it is a 1-1 mapping (1 project per file). The proposal here was contemplating a way to define a `Target` within the same file, while also allowing it to be a conditional override.\r\n\r\nAfter reading the comments, I see the issue with using `Condition` on a group-type element as the condition *can be thought as* propagating to the children, which isn't the intended usage here. Some other way to defining conditional evaluation would need to be determined. The way I think about this situation is that `Import` is for `<Project>` and I shouldn't need to define a new `<Project>` to hold a single `Target` for the purpose of importing it conditionally. Simply, I'm searching for a solution that is a bit more elegant and doesn't add file bloat to a repo/package. I saw that `Target` is one of the few elements to not have a `*Group` mechanism, and thought that might be able to satisfy this situation.",
        "createdAt": "2023-04-05T19:55:38Z",
        "updatedAt": "2023-04-05T19:55:38Z",
        "author": {
          "login": "MiYanni"
        }
      },
      {
        "body": "What if we add an attribute to `<Target>` instead? \r\n\r\n```xml\r\n<Target Name=\"GetVsixPrimaryOutputs\" OverrideCondition=\"false\" />\r\n```\r\n\r\nThat would seem to have minimal OM impact, and seems more clear than adding child elements to `<Import>`.\r\n\r\nThe name of the attribute may need to me massaged so that it isn't misleading when it happens to be the _only_ definition of the target.",
        "createdAt": "2023-04-05T20:09:40Z",
        "updatedAt": "2023-04-05T20:10:30Z",
        "author": {
          "login": "AArnott"
        }
      },
      {
        "body": "rainersigwald suggested something similar:\r\nhttps://github.com/dotnet/msbuild/issues/8633#issuecomment-1497603384\r\n\r\nMy only critique (though I don't have any serious problems with that) is that it seems more reasonable to have Condition always apply at evaluation time, as that's how it works for other things, and have an ExecutionCondition for execution time, except that's a bad breaking change, so we can't do that.",
        "createdAt": "2023-04-05T21:15:16Z",
        "updatedAt": "2023-04-05T21:15:16Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "> What I like about allowing children of imports is that while it's unfamiliar I think once you realize it's equivalent to a file the rest (e.g. evaluation rules) should be intuitive.\r\n\r\n@danmoseley It's funny that you put it like that because that's the cycle I went through. On first reading the idea, it seemed strange and weird. But giving it a second thought, it made a lot of sense. The content of the `Import` is just read from the element body instead of a file. It's a here document.\r\n\r\nIt may be important to not allow a `Project` element. There may be an expectation that there can be only be one `Project` element in a file. To move an existing MSBuild file to be inline, the document root `Project` element would be stripped off and the `Import` be the containing element. I think that's okay. The body content of a `Code` element of an inline task is similarly not 'complete'.\r\n\r\nI think an inline import feature has merit on its own, not just in the context of this feature request and discussion.",
        "createdAt": "2023-04-05T21:50:00Z",
        "updatedAt": "2023-04-05T21:50:00Z",
        "author": {
          "login": "jrdodds"
        }
      },
      {
        "body": "I like @Forgind's `Group` idea. I think it helps move away from the problem of the different meanings of `Condition`. But I also think the `Group` idea looks like the inline `Import` idea when `Project` is not allowed.\r\n\r\n```xml\r\n<Import>\r\n  <Target...\r\n  <UsingTask...\r\n  <Property Name=\"...\">...</Property>\r\n  ...\r\n</Import>\r\n```",
        "createdAt": "2023-04-05T22:00:56Z",
        "updatedAt": "2023-04-05T22:00:56Z",
        "author": {
          "login": "jrdodds"
        }
      },
      {
        "body": "I think that an `InlineImport` would both solve the problem originally presented and allow for more elements than just `Target`. As @jrdodds said, since you're already in the context of a `<Project>`, it should not contain that within it. Here, I'm naming it `InlineImport` as to not overload the mechanics of the current `Import`. My original proposal example only changes the word `TargetGroup` to `InlineImport`, and everything else says the same.\r\n\r\n```xml\r\n<InlineImport Condition=\"'$(IsVsixProject)' == 'true'\">\r\n\r\n  <Target Name=\"GetVsixPrimaryOutputs\" Condition=\"'$(CreateVsixContainer)' == 'true'\" Returns=\"@(VsixPrimaryOutputs)\">\r\n    <ItemGroup>\r\n      <VsixPrimaryOutputs Include=\"$(TargetVsixContainer)\" />\r\n      <VsixPrimaryOutputs Include=\"$(VisualStudioSetupInsertionPath)$(VsixManifestPackageId).json\">\r\n        <RelativeUrl Condition=\"'$(Platform)' != 'AnyCPU'\">$(Platform)/</RelativeUrl>\r\n        <SBOMFileLocation>@(SbomOutput)</SBOMFileLocation>\r\n        <SBOMFileDestPath>$(SBOMFileDestPath)</SBOMFileDestPath>\r\n      </VsixPrimaryOutputs>\r\n    </ItemGroup>\r\n  </Target>\r\n\r\n</InlineImport>\r\n```\r\n\r\nYou could put `PropertyGroup` or any other items that normally go into a `<Project>` within an `InlineImport`.",
        "createdAt": "2023-04-07T20:45:00Z",
        "updatedAt": "2023-04-07T20:45:00Z",
        "author": {
          "login": "MiYanni"
        }
      },
      {
        "body": "If you have this `<InlineImport>` why not just call it `<Import>` (but with children)? that is much more intuitive in my opinion.",
        "createdAt": "2023-04-07T20:58:39Z",
        "updatedAt": "2023-04-07T20:58:39Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "@danmoseley Someone with a bit more experience in the internals of MSBuild would need to chime in if using `<Import>` in that way would be possible. My assumption is that it would be a breaking change to do so.",
        "createdAt": "2023-04-07T21:35:06Z",
        "updatedAt": "2023-04-07T21:35:06Z",
        "author": {
          "login": "MiYanni"
        }
      },
      {
        "body": "Unless things changed recently, `<Import>` can't have children today, so if you're simply enabling it to have children, that wouldn't be breaking:\r\n\r\nhttps://github.com/dotnet/msbuild/blob/4ffba3fe0dd35a30cc892bc8c202a006acb8f20a/src/Build/Evaluation/ProjectParser.cs#L458",
        "createdAt": "2023-04-07T22:15:40Z",
        "updatedAt": "2023-04-07T22:15:40Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "And I'd say amending an existing element to change its rules is likely easier in implementation and ecosystem than adding a new top-level element.",
        "createdAt": "2023-04-07T22:25:05Z",
        "updatedAt": "2023-04-07T22:25:05Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald I've updated the name of the feature request and gave an updated summary/example in the description.",
        "createdAt": "2023-04-13T21:44:26Z",
        "updatedAt": "2023-04-13T21:44:26Z",
        "author": {
          "login": "MiYanni"
        }
      }
    ]
  }
}