{
  "number": 1394,
  "title": "Comments will be a problem for .NET Core apps with sections containing switches",
  "body": "I'm migrating a few projects over to .NET Core with MSBuild/`csproj`. It doesn't look like MSBuild is currently able to handle switches in comments. Perhaps, it's just very keen on the XML standard.\r\n\r\nFor example, here is a migrated `project.json > tools` section for `csproj` ...\r\n```\r\n<!--\r\n<Target Name=\"PostpublishScript\" AfterTargets=\"Publish\" Condition=\" '$(IsCrossTargetingBuild)' \r\n        != 'true' \">\r\n    <Exec Command=\"dotnet razor-precompile --configuration $(Configuration) --framework \r\n        $(TargetFramework) --output-path $(TargetDir) $(MSBuildThisFileDirectory)\" />\r\n</Target>\r\n-->\r\n```\r\nI wished to comment it temporarily simply because Razor View precompilation tooling doesn't currently work with MSBuild/`csproj`, so I'd wish to leave this in place and activate it in the future.\r\n\r\nNote that MSBuild chokes on the double dashes (`--`) in the switches.\r\n```\r\nMSBUILD : error MSB4025: The project file could not be loaded. An XML comment cannot \r\ncontain '--', and '-' cannot be the last character. Line 107, position 44.\r\n```\r\nIf the XML spec doesn't allow double dashes in comments, and you're adhering to the spec, I get why this probably won't be addressed. If there is some wiggle-room wrt the spec, I'm not sure that breaking the standard in a way that would allow them to exist in this file would be all that bad.\r\n\r\nIs is possible/feasable that MSBuild could be provided with the capability to ignore comment text all the way up to the end on the comment (`-->`)?\r\n\r\n[EDIT] Reference: https://www.w3.org/TR/REC-xml/#sec-comments\r\n\r\n> For compatibility, the string \" -- \" (double-hyphen) must not occur within comments.]\r\n\r\nReasoning:\r\n\r\n> [To] ensure that XML remains compatible with SGML.\r\n\r\nBut I ask: For this configuration file (`csproj`), will you consider breaking the standard because switches, for example, are going to be a common holiday wish list item for devs using comments that have switches in them?",
  "state": "CLOSED",
  "createdAt": "2016-11-23T23:57:51Z",
  "updatedAt": "2024-02-21T17:24:00Z",
  "closedAt": "2016-11-24T00:07:55Z",
  "author": {
    "login": "guardrex"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Unfortunately, we're at the mercy of `System.Xml`, which enforces this part of the [XML standard](http://www.w3.org/TR/REC-xml/#sec-comments):\r\n\r\n> For compatibility, the string \" -- \" (double-hyphen) MUST NOT occur within comments.\r\n \r\nI agree that this is especially annoying now that nice double-dash-style arguments are more likely to appear in project files (hooray cross-platform MSBuild!), but I don't see any way of avoiding the problem. We definitely don't want to have to have our own non-standard-compliant XML parser.\r\n\r\nSome editors will break double-hyphens on commenting--for example Emacs produces this on your example:\r\n\r\n```xml\r\n<!-- <Target Name=\"PostpublishScript\" AfterTargets=\"Publish\" Condition=\" '$(IsCrossTargetingBuild)'  -->\r\n<!--         != 'true' \"> -->\r\n<!--     <Exec Command=\"dotnet razor-precompile -\\-configuration $(Configuration) -\\-framework  -->\r\n<!--         $(TargetFramework) -\\-output-path $(TargetDir) $(MSBuildThisFileDirectory)\" /> -->\r\n<!-- </Target> -->\r\n```\r\n\r\nI know that's not a very satisfying answer. Sorry. \ud83d\ude1e",
        "createdAt": "2016-11-24T00:07:55Z",
        "updatedAt": "2016-11-24T00:07:55Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Thanks @rainersigwald for getting back so fast. That's cool. I'm not a huge fan myself of breaking standards.\r\n\r\nYour reply reminded me of something tho ...... single-dash switches will be fine, e.g., `--runtime win10-x64` is the same as `-r win10-x64`. IIRC and AFIAK all of the tooling has been built to support the short switches, so I think we're good here.\r\n\r\nThanks again for discussing it. :+1:",
        "createdAt": "2016-11-24T00:14:20Z",
        "updatedAt": "2016-11-24T00:14:20Z",
        "author": {
          "login": "guardrex"
        }
      },
      {
        "body": "That is a decent workaround, though it hurts me to encourage using short forms--I'm generally of the philosophy that long forms are for scripts and computers, and short forms are just for command lines you actually type.",
        "createdAt": "2016-11-24T00:21:11Z",
        "updatedAt": "2016-11-24T00:21:11Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Can't you disable a Target by setting its Condition to false?",
        "createdAt": "2022-07-21T15:46:16Z",
        "updatedAt": "2022-07-21T15:46:16Z",
        "author": {
          "login": "anon17"
        }
      },
      {
        "body": "@anon17 Setting a target's condition to `false` has some subtle differences from commenting it out, depending on the target. [Target build order docs](https://docs.microsoft.com/visualstudio/msbuild/target-build-order) have details, but \"altering the build order of other targets\" is probably the easiest difference to trigger.",
        "createdAt": "2022-07-25T14:40:36Z",
        "updatedAt": "2022-07-25T14:40:36Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}