{
  "number": 11331,
  "title": "Support launching .NET taskhost",
  "body": "Extend `NodeProviderOutOfProcTaskHost.CreateNode` to support launching the .NET `MSBuild.dll` (in the location from #11330) under a `dotnet.exe`.\n\nFiguring out which `dotnet.exe` might be interesting. We should have a clean abstraction to get its path that we can change over time and eventually tie to the one the .NET SDK resolver tells us about from https://github.com/dotnet/sdk/pull/45364 (that is, the result may vary by project on a machine with multiple SDKs installed). This can certainly be prototyped with a more hardcoded value though.\n\nThis will also include getting the `UsingTask` infrastructure to handle the `Net` identifier from a .NET Framework 4 host, which currently fails (expected, without this feature) with this unfortunate stack dump:\n\n```\nSystem.AggregateException: One or more errors occurred. ---> Microsoft.Build.Exceptions.BuildAbortedException: Build was canceled.\n        MSBuild.exe could not be launched as a child node as it could not be found at the location \"C:\\Program Files\\Microsoft Visual Studio\\2022\\Preview\\MSBuild\\Current\\Bin\\amd64\\MSBuild.dll\". If necessary, specify the correct location in the BuildParameters, or with the MSBUILD_EXE_PATH environment variable.\n  at Microsoft.Build.BackEnd.NodeLauncher.StartInternal(String msbuildLocation, String commandLineArgs)\n  at Microsoft.Build.BackEnd.NodeLauncher.DisableMSBuildServer(Func`1 func)\n  at Microsoft.Build.BackEnd.NodeProviderOutOfProcBase.<>c__DisplayClass14_0.<GetNodes>g__StartNewNode|2(Int32 nodeId)\n  at Microsoft.Build.BackEnd.NodeProviderOutOfProcBase.<>c__DisplayClass14_0.<GetNodes>b__0(Int32 nodeId)\n```",
  "state": "OPEN",
  "createdAt": "2025-01-24T16:39:08Z",
  "updatedAt": "2025-04-02T13:58:19Z",
  "closedAt": null,
  "author": {
    "login": "rainersigwald"
  },
  "milestone": {
    "title": "vs 17.15"
  },
  "assignees": {
    "nodes": [
      {
        "login": "YuliiaKovalova"
      }
    ]
  },
  "labels": [
    "Area: Visual Studio",
    "triaged"
  ],
  "comments": {
    "nodes": [
      {
        "body": "Btw. not sure if it's relevant here - the OutOfProcTaskHost doesn't support BuildEngine RequestCores/ReleaseCores APIs - if any tasks needs those, they'd get NotImplementedException (shouldn't be that hard to add the support)",
        "createdAt": "2025-01-27T16:01:10Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "That's totally relevant here though I don't know of any core .NET SDK tasks that need it today so we could probably deprioritize it.",
        "createdAt": "2025-01-27T16:15:05Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I see [several tasks in dotnet/runtime](https://github.com/search?q=%22.RequestCores%22+path%3A*.cs+repo%3Adotnet%2Fruntime&type=code) that use this - is this a concern? Do we have a better model for them to pre-emptively migrate to, or does this mean we need to design/implement this correctly?",
        "createdAt": "2025-01-27T16:19:03Z",
        "author": {
          "login": "baronfel"
        }
      },
      {
        "body": "They'll be running using the netcore engine though so not the cross-framework implementation.\n\nRegardless I don't think there's anything blocking that work besides \"find the time to do it\".",
        "createdAt": "2025-01-27T16:23:17Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}