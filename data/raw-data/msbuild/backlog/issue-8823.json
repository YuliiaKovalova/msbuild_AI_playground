{
  "number": 8823,
  "title": "[BinFmt] Custom BuildEventArgs de/serialization",
  "body": "### Background \r\n #6215\r\n This subitem is focused on https://github.com/dotnet/msbuild/blob/main/src/Shared/LogMessagePacketBase.cs#L377\r\n\r\n### Suggested approach\r\nDefine custom build event type with de/serialization methods similar to https://github.com/dotnet/msbuild/pull/8779 (however without any type hierarchy/ overloading/ reflection etc - just single type and bag of strings), allow only such custom events - unles opted-out via changewave\r\nSeal our BuildEventArgs hierarchy - to prevent subclasing (handling of subclasses would require registration of those during startup of nodes)",
  "state": "CLOSED",
  "createdAt": "2023-06-01T13:24:25Z",
  "updatedAt": "2024-02-21T16:59:12Z",
  "closedAt": "2023-08-09T14:58:05Z",
  "author": {
    "login": "JanKrivanek"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Discussed with @rokonec:\r\n* Some usages derive from more derived event args (e.g. `BuildWarningEventArgs`) - so we need to have a way to allow preserving similar functionality\r\n* One way is to add a `Dictionary<string, string>? CustomData` property to the root (`BuildEventArgs`) - so that custom data can be attached to any of our events (without deriving)\r\n* Another way is to create single `CustomBuildEventArgs` that will hold the above member, plus it will hold a `BuildEventArgs? AdditionalEvent` property - to which the additional event can be attached.\r\n* The second approach would require adjusting all places in our code where we rely on type matching (e.g. specific handling of `BuildWarningEventArgs`)\r\n* Sealing our hierarchy is a breaking change - so should be conditionaly compiled only for `NET` (and only after transiting users from the custom events - so likely NET9 timeframe)",
        "createdAt": "2023-06-08T08:34:20Z",
        "updatedAt": "2023-06-08T08:34:20Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "Additional thoughts:\r\n* The de/serialization code handling custome event args currently should be adjusted to produce warning, and possibly somehow grace handle the disabled BinaryFormatter situation (either detect it, or catch) - so that MSBuild doesn't crash and so that users that choose `EnableUnsafeBinaryFormatterSerialization` (or whatever will be needed to flip this in SDK) can continue to operate their plugins, but with very explicit default warning (that should be maskable).\r\n* We should idealy add aka.ms links to such warnings - to point users to information about how to handle this properly\r\n* All this should probably be for Core only for now (FullFW will likely follow soon as well - net9?)",
        "createdAt": "2023-06-08T08:39:43Z",
        "updatedAt": "2023-06-08T08:39:43Z",
        "author": {
          "login": "JanKrivanek"
        }
      }
    ]
  }
}