{
  "number": 5250,
  "title": "dotnet build doesn't resolve package references correctly for old style projects",
  "body": "### Steps to reproduce\r\n\r\nDotnet build  does not resolve package references in old style projects, but restore seems to be done fine. I tried also several variations like dotnet msbuild /t:restore;build etc. All lead to the same build errors.\r\n\r\n[PackageReferenceBugDemo.zip](https://github.com/microsoft/msbuild/files/4448967/PackageReferenceBugDemo.zip)\r\n\r\n\r\nProject file\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<Project ToolsVersion=\"15.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\r\n  <Import Project=\"$(MSBuildExtensionsPath)\\$(MSBuildToolsVersion)\\Microsoft.Common.props\" Condition=\"Exists('$(MSBuildExtensionsPath)\\$(MSBuildToolsVersion)\\Microsoft.Common.props')\" />\r\n  <PropertyGroup>\r\n    <Configuration Condition=\" '$(Configuration)' == '' \">Debug</Configuration>\r\n    <Platform Condition=\" '$(Platform)' == '' \">AnyCPU</Platform>\r\n    <ProjectGuid>{C27219F1-6C86-4D9C-B9C3-4B01B5D9879B}</ProjectGuid>\r\n    <OutputType>Library</OutputType>\r\n    <AppDesignerFolder>Properties</AppDesignerFolder>\r\n    <RootNamespace>PackageReferenceBugDemo</RootNamespace>\r\n    <AssemblyName>PackageReferenceBugDemo</AssemblyName>\r\n    <TargetFrameworkVersion>v4.8</TargetFrameworkVersion>\r\n    <FileAlignment>512</FileAlignment>\r\n    <Deterministic>true</Deterministic>\r\n  </PropertyGroup>\r\n  <PropertyGroup Condition=\" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' \">\r\n    <DebugSymbols>true</DebugSymbols>\r\n    <DebugType>full</DebugType>\r\n    <Optimize>false</Optimize>\r\n    <OutputPath>bin\\Debug\\</OutputPath>\r\n    <DefineConstants>DEBUG;TRACE</DefineConstants>\r\n    <ErrorReport>prompt</ErrorReport>\r\n    <WarningLevel>4</WarningLevel>\r\n  </PropertyGroup>\r\n  <PropertyGroup Condition=\" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' \">\r\n    <DebugType>pdbonly</DebugType>\r\n    <Optimize>true</Optimize>\r\n    <OutputPath>bin\\Release\\</OutputPath>\r\n    <DefineConstants>TRACE</DefineConstants>\r\n    <ErrorReport>prompt</ErrorReport>\r\n    <WarningLevel>4</WarningLevel>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Nunit\" Version=\"2.5.10.11092\"/>\r\n    \r\n    <Reference Include=\"System\" />\r\n    <Reference Include=\"System.Core\" />\r\n    <Reference Include=\"System.Xml.Linq\" />\r\n    <Reference Include=\"System.Data.DataSetExtensions\" />\r\n    <Reference Include=\"Microsoft.CSharp\" />\r\n    <Reference Include=\"System.Data\" />\r\n    <Reference Include=\"System.Net.Http\" />\r\n    <Reference Include=\"System.Xml\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <Compile Include=\"Class1.cs\" />\r\n    <Compile Include=\"Properties\\AssemblyInfo.cs\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n\r\n  </ItemGroup>\r\n  <Import Project=\"$(MSBuildToolsPath)\\Microsoft.CSharp.targets\" />\r\n</Project>\r\n```\r\n\r\nDirectory contents:\r\n```\r\nsee attachment\r\n```\r\n\r\nCommand line\r\n```\r\ndotnet build\r\n```\r\n### Expected behavior\r\n\r\nThe build runs fine\r\n\r\n### Actual behavior\r\n\r\nThe nunit package reference doesn't get resolved\r\n\r\n### Environment data\r\ndotnet msbuild //version\r\n```\r\nMicrosoft (R)-Build-Engine, Version 16.4.0+e901037fe f\u2592r .NET Core\r\nCopyright (C) Microsoft Corporation. Alle Rechte vorbehalten.\r\n```\r\n\r\n",
  "state": "OPEN",
  "createdAt": "2020-04-08T07:44:20Z",
  "updatedAt": "2024-02-21T16:29:36Z",
  "closedAt": null,
  "author": {
    "login": "TFTomSun"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Discussion"
  },
  "comments": {
    "nodes": [
      {
        "body": "The targets that resolve package assets at build time are part of the .NET Core SDK, and so aren't imported in this project. We don't currently support building non-SDK projects with the .NET Core CLI, so this is behaving as expected.\r\n\r\nDo you have a scenario where this support would be important to you? I don't think it's super likely to make it to the top of the priority list but new data could help.",
        "createdAt": "2020-04-08T15:36:46Z",
        "updatedAt": "2020-04-08T15:36:46Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald \r\nin our big organization we have a mixture of old style and new style projects. The dotnet cli and it's global tools is an easy to use approach for defining pipelines. I wish I could build a solution that contains both types of projects with it. Restructuring all projects in a big organization at one time is not realistic, so a transition path from the old world to the new world would be really helpful.",
        "createdAt": "2020-04-09T07:31:46Z",
        "updatedAt": "2020-04-09T07:33:45Z",
        "author": {
          "login": "TFTomSun"
        }
      },
      {
        "body": "> I wish I could build a solution that contains both types of projects with it.\r\n\r\nYou can, but you have to use MSBuild.exe (from VS or VS build tools).",
        "createdAt": "2020-04-09T19:07:06Z",
        "updatedAt": "2020-04-09T19:07:06Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Is msbuild.exe available as a global tool, so that i can pull it via Artifactory in our intranet? Does it work on Linux as well? Are docker images with msbuild.exe available? The problem with most tools in dev ops scenarios is that it's complicated to deploy and start them, especially within enterprise networks. With the dotnet cli it's easy. That's why i like it. I wish we would have one build environment that works simple like that in every environment for all type of projects, so that we can build state of the art dev ops solutions even if we still have legacy code to support. ",
        "createdAt": "2020-04-09T20:18:50Z",
        "updatedAt": "2020-04-09T20:24:37Z",
        "author": {
          "login": "TFTomSun"
        }
      },
      {
        "body": "> Is msbuild.exe available as a global tool, so that i can pull it via Artifactory in our intranet? Does it work on Linux as well?\r\n\r\nNo global tool. For Windows, install Visual Studio (Build Tools only, or other editions). For Linux, you might install Mono which ships MSBuild.\r\n\r\nIf you are working on a non-SDK style project, you are supposed to be on Windows. So if you face the same challenge on Linux, you probably should review carefully whether that's the trouble you want to afford.\r\n\r\n> Are docker images with msbuild.exe available?\r\n\r\nIt depends on which images you are talking about. If there is none, you can build your own.\r\n\r\n> I wish we would have one build environment that works simple like that in every environment for all type of projects\r\n\r\nYou can recommend that on the right repo https://github.com/dotnet/sdk/issues.",
        "createdAt": "2020-04-10T13:35:13Z",
        "updatedAt": "2020-04-10T13:36:16Z",
        "author": {
          "login": "lextm"
        }
      },
      {
        "body": "I can already build full framework projects (SDK style) on Linux by referencing Microsoft.NETFramework.ReferenceAssemblies. I can use the Dotnet Core SDK Docker images that are provided by Microsoft for that. I can also install the Dotnet SDK on a Windows machine, the CI/CD scripts stay the same like on Linux.\r\n\r\nJust because of the Old style Format, I can't use all this tooling and need to setup a complete different build environment and write different CI/CD scripts which are even platform dependent. I just wonder why. I thought the SDK style is just another format for a project file.",
        "createdAt": "2020-04-11T02:34:35Z",
        "updatedAt": "2020-04-11T02:53:46Z",
        "author": {
          "login": "TFTomSun"
        }
      },
      {
        "body": "@TFTomSun The SDK style project format is more an indicator of scope.\r\n\r\n> All .NET 5 applications will be buildable with the .NET CLI, ensuring that you have common command-line tooling across projects.\r\n\r\nYou can find the above statement from [.NET 5 Roadmap](https://devblogs.microsoft.com/dotnet/introducing-net-5/), so the unification you wanted is coming.\r\n\r\nHowever you wanted, non SDK style projects (most likely to be WCF/WF, ASP.NET 2.x/4.x) seem to be out of scope.",
        "createdAt": "2020-04-11T14:34:08Z",
        "updatedAt": "2020-04-11T14:34:08Z",
        "author": {
          "login": "lextm"
        }
      },
      {
        "body": "\"SDK style\" is indeed \"another format for a project file\". It's just a fancy way to import some stuff that has a bunch of defaults (like \"compile `**/*.cs`).\r\n\r\nHowever, the .NET Core SDK does not contain all of the build logic and SDKs that are available in Visual Studio. It's designed around .NET Core scenarios. It doesn't support C++, and it doesn't support projects that use other Visual Studio features. As a result, to build those projects, you must continue to use Visual Studio (or Visual Studio Build Tools).",
        "createdAt": "2020-04-14T02:12:14Z",
        "updatedAt": "2020-04-14T02:12:14Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald \r\nThat's why I wonder. The projects I tried to build don't use any features that couldn't be built by a similar SDK style project format with for example TargetFramework net48. They don't contain WCF, WF, ASP.NET 2/4. \r\n\r\nThat means, technically everything is in place to built these kind of projects with the dotnet sdk. Just because they have the old style format, they can't be built via dotnet build.\r\nA possibility to develop dotnet sdk based CI/CD solutions that work with legacy code as well, would be nice, even if dotnet build would fallback to an installed build tools instance.\r\n\r\nBut I understand now, that the suggested migration path is to upgrade to sdk style first before you can use the dotnet cli for building the projects, it's just difficult to achieve that in large code bases.\r\n\r\n\r\n",
        "createdAt": "2020-04-14T23:59:26Z",
        "updatedAt": "2020-04-14T23:59:26Z",
        "author": {
          "login": "TFTomSun"
        }
      },
      {
        "body": "I can confirm that this limitation is super counter-intuitive. Especially in light of the Microsoft.NETFramework.ReferenceAssemblies nuget package. All the build works, but we will have to migrate the whole project style just because PackageReference is not resolved at build-time. This is not about providing support for C++, this looks more like something you have overlooked and that should be fixed. This looks like a low hanging fruit.\r\n\r\nAs far as the use case, we have been migrating to .NET Core progressively. We started by converting our projects to use the PackageReference format (which has been supported by classical projects for a little while now). We wanted to transition to using the new .NET SDK (dotnet cli etc..) without disrupting our current projects. Proper resolving of PackageReference would have allowed us to migrate our projects one after the other calmly and safely, instead of creating a big bang and postponing the migration until we have time to handle this massive undertaking (we develop under linux so we do not have access to the migration facilities of Visual Studio).",
        "createdAt": "2021-10-05T10:30:49Z",
        "updatedAt": "2021-10-05T10:30:49Z",
        "author": {
          "login": "nkosi23"
        }
      },
      {
        "body": "Very bad experience that .net framwork project is not supported... Wasting lots of time on such issue",
        "createdAt": "2021-12-16T02:14:54Z",
        "updatedAt": "2021-12-16T02:14:54Z",
        "author": {
          "login": "bz-wow"
        }
      },
      {
        "body": "> > I wish I could build a solution that contains both types of projects with it.\r\n> \r\n> You can, but you have to use MSBuild.exe (from VS or VS build tools).\r\n\r\nUse msbuild directly, it shows error \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\\MSBuild\\Microsoft\\NuGet\\16.0\\Microsoft.NuGet.targets(1\r\n98,5): error : Your project file doesn't list 'win' as a \"RuntimeIdentifier\". You should add 'win' to the \"RuntimeIdent\r\nifiers\" property in your project file and then re-run NuGet restore.\"\r\nPS: this should be a nuget.exe bug according to https://github.com/NuGet/Home/issues/10590. Earlier nuget version like 5.4.0 is ok.\r\n\r\nNot sure if any other issue appears if above one is fixed.\r\n\r\nHad to run nuget (like v5.4, latest version has bug mentioned avove) restore and then msbuild to make it built.\r\n\r\nAdditionally, this limition and solution are not mentioned in official doc - https://docs.microsoft.com/en-us/nuget/consume-packages/package-references-in-project-files",
        "createdAt": "2021-12-16T02:19:22Z",
        "updatedAt": "2021-12-16T03:23:23Z",
        "author": {
          "login": "bz-wow"
        }
      }
    ]
  }
}