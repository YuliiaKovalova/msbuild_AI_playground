{
  "number": 720,
  "title": "In MSBuild xplat pass through path to msbuild.exe host as a property",
  "body": "This will solve the issue of needing to set an environment variable in the cli when invoking msbuild.exe so the same host can be used to execute csc.exe.\n\n@cdmihai @rainersigwald \n",
  "state": "CLOSED",
  "createdAt": "2016-06-22T17:27:15Z",
  "updatedAt": "2024-02-21T17:27:35Z",
  "closedAt": "2016-10-18T14:16:19Z",
  "author": {
    "login": "brthor"
  },
  "labels": [
    "needs-design",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "jeffkl"
      }
    ]
  },
  "milestone": {
    "title": "Visual Studio 15 RC"
  },
  "comments": {
    "nodes": [
      {
        "body": "Can you please detail more?\n\nAre you suggesting that each ToolTask has a way to access the host that MSBuild is run under? I guess there's a couple of ways to do it:\n- opt in: ToolTasks choose their own host, and they may choose to use MSBuild's host via some protected field\n- opt out: ToolTasks are automatically run under the same host as MSBuild's and they have the option to opt out. \n- all the above: Opt in by default. Opt out by cmd line flag: `MSBuild --RunTasksInMSBuildHost`\n",
        "createdAt": "2016-06-23T18:22:35Z",
        "updatedAt": "2016-06-23T18:23:02Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "@cdmihai \n\nThe motivating scenario here is that the Csc tooltask needs to explicitly have the host overridden by the cli when executing under `dotnet.exe` to prevent a file not found for `corerun.exe`. In general this seems like it would be common scenario for tools.\n\nWith that in mind, I think that your option 2 seems most appropriate. ToolTasks would automatically be run under the host msbuild is being run under with the override gesture being reserved for cases where that isn't appropriate or some customization needs to happen. \n",
        "createdAt": "2016-06-29T18:58:10Z",
        "updatedAt": "2016-06-29T18:58:10Z",
        "author": {
          "login": "brthor"
        }
      },
      {
        "body": "At some point, `csc.exe` could become a stand-alone app and not need to run under `dotnet.exe`.  We might need logic to detect if the app that's about to run is a .NET Core assembly before running it under `dotnet.exe` as well.  \n\n@eerhardt also mentioned that Roslyn might be recommending people wrap execution in a batch script like `csc.cmd` which  explicitly runs the app under `dotnet.exe`.  \n\nAll that said, I still think we should at least expose the host as a property to tasks.  I'm not convinced yet that there is a good way to determine whether or not the app should run under the same host though...\n",
        "createdAt": "2016-09-15T16:11:58Z",
        "updatedAt": "2016-09-15T16:11:58Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "This is no longer necessary for the CLI in Visual Studio 15 RC.  The Roslyn team recommends to ship \"wrapper\" `csc.cmd` and `csc.sh` files that invoke the managed Csc assembly using the `dotnet` host executable.  The CLI does this, and sets the `CscToolExe` property to tell the Csc ToolTask to use this wrapper file.\n\nFrom the perspective of the CLI, this issue can be closed.  (I don't have permissions to close issues in this repo.)\n",
        "createdAt": "2016-10-07T15:20:53Z",
        "updatedAt": "2016-10-07T15:20:53Z",
        "author": {
          "login": "eerhardt"
        }
      },
      {
        "body": "Is that the general \"how you should run a managed tool in a build\" advice, @eerhardt? `csc.exe` is probably the most important tool but I expect there to be many others in this situation.\n",
        "createdAt": "2016-10-07T15:29:13Z",
        "updatedAt": "2016-10-07T15:29:13Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I'm not sure if that is the general advice.  But this is the advice for invoking `csc.exe` I got from conversations with @agocke.\n\nThe generalized approach being employed by the Roslyn team here is for a ToolTask to allow the caller to pass in the path and name to the executable to invoke. This seems like a fine approach in general to me. The caller can and will have more context to where the tool is in their scenario. And if the ToolTask is unable to figure it out, at least it gives the caller an \"escape hatch\".\n",
        "createdAt": "2016-10-07T15:36:58Z",
        "updatedAt": "2016-10-07T15:36:58Z",
        "author": {
          "login": "eerhardt"
        }
      },
      {
        "body": "I agree on using batch files. I happen to have a compiler to only runs on .NET/Mono which cannot be run on .NET Core (even if it supports it as a target) and the batch file method would allow me to use it with the new cross-plat MSBuild.\n",
        "createdAt": "2016-10-08T09:16:54Z",
        "updatedAt": "2016-10-08T09:17:01Z",
        "author": {
          "login": "borgdylan"
        }
      },
      {
        "body": "To be clear @borgdylan, it's a hard requirement that users be able to execute a script or native binary in a `ToolTask`--that works today and we have no intention of breaking it.\n\nThis issue is about making it easier to run .NET Core applications. Right now that requires either modifying the project file or using a wrapper script as the tool (and that wrapper script has no way to determine \"the CLI host that is currently running MSBuild\" which is probably the most common scenario).\n",
        "createdAt": "2016-10-10T14:53:13Z",
        "updatedAt": "2016-10-10T14:53:13Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "So should we consider this solved by way of using batch files?  Or should we expose a property that indicates the path to the CLR host? \n",
        "createdAt": "2016-10-13T20:00:16Z",
        "updatedAt": "2016-10-13T20:00:16Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "The community has spoken and we're going to leave it up to task authors for now.  We'll gladly revisit this if enough people feel like they need support for it.\n",
        "createdAt": "2016-10-18T14:16:18Z",
        "updatedAt": "2016-10-18T14:16:18Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "Re; https://github.com/aspnet/KestrelHttpServer/pull/1748\r\n\r\nHad to propagate dotnet location to run Csc.exe from a task by forcing it to be on the PATH. And had to do that in two environments - regular run and in a docker. Took some time to figure why one fails and not another (was using different PATH env).\r\n\r\nIt could be more convenient to use a property.",
        "createdAt": "2017-04-26T21:34:35Z",
        "updatedAt": "2017-04-26T21:34:35Z",
        "author": {
          "login": "VSadov"
        }
      }
    ]
  }
}