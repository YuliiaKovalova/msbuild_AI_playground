{
  "number": 3658,
  "title": "Solution meta-project doesn't propagate target return values for custom targets",
  "body": "### Steps to reproduce\r\n\r\nProject file a.csproj\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net46</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n  <Target Name=\"T\" Returns=\"@(Thing)\">\r\n    <ItemGroup>\r\n      <Thing Include=\"A\"/>\r\n      <Thing Include=\"B\"/>\r\n      <Thing Include=\"C\"/>\r\n    </ItemGroup>\r\n  </Target>\r\n</Project>\r\n```\r\n\r\nSolution A.sln containing a.csproj.\r\n\r\nProject file x.proj\r\n```xml\r\n<Project>\r\n  <Target Name=\"Build\">\r\n    <MSBuild Projects=\"A.sln\" Targets=\"T\">\r\n      <Output ItemName=\"Thing\" TaskParameter=\"TargetOutputs\" />\r\n    </MSBuild>\r\n\r\n    <Message Text=\"Things: '@(Thing)'\"/>\r\n  </Target>\r\n</Project>\r\n```\r\n\r\nCommand line\r\n```\r\nmsbuild x.proj\r\n```\r\n### Expected  behavior\r\n\r\n`Things: 'A;B;C'`\r\n\r\n### Actual behavior\r\n\r\n`Things: ''`\r\n\r\n### Environment data\r\n`msbuild /version` output:\r\n\r\n```\r\nMicrosoft (R) Build Engine version 15.8.166+gd4e8d81a88 for .NET Framework\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n```\r\n",
  "state": "OPEN",
  "createdAt": "2018-08-27T17:59:59Z",
  "updatedAt": "2024-02-21T16:33:13Z",
  "closedAt": null,
  "author": {
    "login": "tmat"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "I think that'd be a reasonable enhancement, though I hope it's never needed.",
        "createdAt": "2018-08-27T18:52:23Z",
        "updatedAt": "2018-08-27T18:52:23Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Why should it not be needed? It if was not needed I wouldn't file an issue. \r\n\r\nI would like to collect some information from all projects in a given solution. For example, find all test projects and all platforms they target and need to run tests on, so we can schedule test runs more efficiently than if we launch XUnit from within each test project. \r\n ",
        "createdAt": "2018-08-27T19:50:56Z",
        "updatedAt": "2018-08-27T19:50:56Z",
        "author": {
          "login": "tmat"
        }
      },
      {
        "body": "For that use, consider waiting for https://github.com/Microsoft/vstest/issues/411, which the test folks are working on.\r\n\r\nCalling targets for every project in a solution is error-prone, because solutions can contain non-MSBuild projects and heterogeneous projects that don't all contain the desired target. So building infrastructure that depends on it seems risky to me.",
        "createdAt": "2018-08-27T20:39:16Z",
        "updatedAt": "2018-08-27T20:39:16Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> because solutions can contain non-MSBuild projects and heterogeneous projects that don't all contain the desired target\r\n\r\nGood point. It would also be useful to have an option for skipping non-existing targets, similarly to the option `SkipNonexistentProjects`.",
        "createdAt": "2018-08-27T21:36:40Z",
        "updatedAt": "2018-08-27T21:36:40Z",
        "author": {
          "login": "tmat"
        }
      },
      {
        "body": "There is `SkipNonexistentTargets` as of https://github.com/Microsoft/msbuild/pull/2541. But it's not clear to me that always specifying it is the right thing to do for `msbuild a.sln /t:Custom`. For `Test` you'd want it, but for a hypthetical `ValidateProjectDefinesSomeProperty` you wouldn't. We don't currently specify it for the generated traversal targets.\r\n\r\n",
        "createdAt": "2018-08-27T21:46:22Z",
        "updatedAt": "2018-08-27T21:46:22Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald Cool. Yes, it's definitely dependent on the scenario. You can either require all projects in the solution to import targets file with the custom target and then expect it to be everywhere or not if it's optional.",
        "createdAt": "2018-08-27T22:07:52Z",
        "updatedAt": "2018-08-27T22:07:52Z",
        "author": {
          "login": "tmat"
        }
      }
    ]
  }
}