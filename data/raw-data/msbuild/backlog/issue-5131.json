{
  "number": 5131,
  "title": "Incorrect argument passed to TaskHostAcquireFailed resource string",
  "body": "https://github.com/microsoft/msbuild/blob/81d9a23b505474a1e7fff3fad86fa5ba2c475523/src/Build/Instance/TaskFactories/TaskHostTask.cs#L568\r\n\r\nIn .NET Core, msbuild appears to be an msbuild.dll, not an msbuild.exe, if you invoke via `dotnet.exe`\r\n\r\nSee discussion here: https://github.com/microsoft/msbuild/issues/4332#issuecomment-586749375",
  "state": "OPEN",
  "createdAt": "2020-02-17T17:40:44Z",
  "updatedAt": "2024-02-21T16:29:53Z",
  "closedAt": null,
  "author": {
    "login": "jzabroski"
  },
  "labels": [
    "help wanted",
    ".NET Core",
    "Area: Debuggability",
    "Area: Engine",
    "Area: TaskHost",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Backlog"
  },
  "comments": {
    "nodes": [
      {
        "body": "This is true but the larger issue is that .NET Framework TaskHosts aren't supported on .NET Core (and .NET Core task hosts aren't supported on .NET Framework--#4834).\r\n\r\nIf there's an way to say that in the error we should consider it rather than failing with this generic error.",
        "createdAt": "2020-02-18T22:39:11Z",
        "updatedAt": "2020-02-18T22:39:11Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Why can't .NET Core MSBuild tunnel to an MSBuild running .NET Framework?  I'm sure there are some complexities there, but is it really a bad idea?  There is already MsbuildVersionLoader - why can't there be MsBuildProgramLauncher. The main reason I see to not do this is that .NET Framework will eventually go away, so it's literally adding complexity for something nobody really wants to hang around.",
        "createdAt": "2020-02-18T23:22:21Z",
        "updatedAt": "2020-02-18T23:22:21Z",
        "author": {
          "login": "jzabroski"
        }
      },
      {
        "body": "@jzabroski Yeah, it'd be possible to do using the existing TaskHost infrastructure. As with the inverse question #4834, it's probably more work in setting up and delivering all the right bits to the right places than in IPC since our IPC should already be compatible. But there hasn't yet been a compelling reason to do it relative to other work.",
        "createdAt": "2020-02-24T20:08:38Z",
        "updatedAt": "2020-02-24T20:08:38Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}