{
  "number": 10574,
  "title": "Clearer message that running .NET Framework MSBuild in a .NET process is unsupported",
  "body": "Originating from https://github.com/dotnet/msbuild/pull/10175 discussion.\r\n\r\nThe scenario of running .NET Framework MSBuild in a .NET process is unsupported, but it worked until a recent change. Since there is some confusion around this, identifying and breaking this scenario with a specific message would be ideal.",
  "state": "OPEN",
  "createdAt": "2024-08-27T15:27:21Z",
  "updatedAt": "2025-06-02T08:30:32Z",
  "closedAt": null,
  "author": {
    "login": "maridematte"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "triaged"
  ],
  "comments": {
    "nodes": [
      {
        "body": "A wrinkle here is that our API has a _lot_ of entry points. However an exception in the evaluator would probably catch almost everything.",
        "createdAt": "2024-08-27T19:11:57Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Can ModuleInitializerAttribute be used for this?  It would cause the exception to be wrapped in TypeInitializationException, though.\r\n\r\n.NET Framework does not provide the System.Runtime.CompilerServices.ModuleInitializerAttribute type, but if you define a similar one as internal in MSBuild, then I think Roslyn will recognize it and set up the `<Module>::.cctor` method that the runtime will then call.",
        "createdAt": "2024-08-27T20:44:10Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      }
    ]
  }
}