{
  "number": 10657,
  "title": "Usage of msbuild switch /graphBuild appears to cause after.[solutionname].sln.targets not being loaded",
  "body": "_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/t/Usage-of-msbuild-switch-graphBuild-appe/10743440)._\n\n---\nI recently notice that if I use the /graphBuild:true switch for msbuild.exe command line, it will ignore the targets specified in the after.[solutionname].sln.targets file.\n\nFor a quick repro, just use Visual Studio project creation template and to create a c++ console program project, and at the location where the solution .sln file is created, add a after.[solutionname].sln.targets file and in the file add the content\n\n```\n<Project>\n <Target Name=\"EmitCustomMessage\" BeforeTargets=\"Build\">\n   <Message Importance=\"High\" Text=\"---- Test Message ----\" />\n </Target>\n</Project>\n```\n\nWhen I do a build using msbuild.exe, I see that \"Test Message\" output:\n\n```\nD:\\tmp\\vs2022\\TestSolution>\"C:\\Program Files\\Microsoft Visual Studio\\2022\\Professional\\MSBuild\\Current\\Bin\\MSBuild.exe\" \"/p:Configuration=Release;Platform=x64\" /t:build\nMSBuild version 17.10.4+10fbfbf2e for .NET Framework\nBuild started 9/11/2024 10:25:11 AM.\n\nProject \"D:\\tmp\\vs2022\\TestSolution\\TestSolution.sln\" on node 1 (build target(s)).\nValidateSolutionConfiguration:\n  Building solution configuration \"Release|x64\".\nEmitCustomMessage:\n  ---- Test Message ----\nProject \"D:\\tmp\\vs2022\\TestSolution\\TestSolution.sln\" (1) is building \"D:\\tmp\\vs2022\\TestSolution\\TestProject\\TestProject.vcxproj\" (2) on node 1 (default targets).\nPrepareForBuild:\n...\n```\n\nBut if I deleted the output folder and try again with /graphBuild:true, I don't see the \"Test Message\" being displayed as if that file doesn't exist.\n\n```\nD:\\tmp\\vs2022\\TestSolution>\"C:\\Program Files\\Microsoft Visual Studio\\2022\\Professional\\MSBuild\\Current\\Bin\\MSBuild.exe\" \"/p:Configuration=Release;Platform=x64\" /t:build /graphBuild:true\nMSBuild version 17.10.4+10fbfbf2e for .NET Framework\nBuild started 9/11/2024 10:25:38 AM.\n\nStatic graph loaded in 0.11 seconds: 1 nodes, 0 edges\nProject \"D:\\tmp\\vs2022\\TestSolution\\TestProject\\TestProject.vcxproj\" on node 1 (build target(s)).\nPrepareForBuild:\n...\n```\n\nCan someone fix this?\n\n\n---\n### Original Comments\n(no comments)\n\n---\n### Original Solutions\n(no solutions)",
  "state": "OPEN",
  "createdAt": "2024-09-12T00:30:48Z",
  "updatedAt": "2025-04-02T14:32:21Z",
  "closedAt": null,
  "author": {
    "login": "vsfeedback"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "help wanted",
    "triaged"
  ],
  "comments": {
    "nodes": [
      {
        "body": "This is interesting, when you specify `-graphBuild:true` the metaproject for the solution is not created. Evaluation of the metaproject in a non-graph build includes: `Directory.Solution.props`, `Directory.Solution.targets`, `after.[solutionname].sln.targets`, `before.[solutionname].sln.targets`, `C:\\Program Files\\Microsoft Visual Studio\\2022\\<VSVersion>\\MSBuild\\Current\\SolutionFile\\ImportAfter\\Microsoft.NuGet.Solution.ImportAfter.targets`\n\nnon-graph:\n![Image](https://github.com/user-attachments/assets/e71370f9-73a4-408f-9b78-1b18da1d0f95)\n\ngraph:\n![Image](https://github.com/user-attachments/assets/3ab71613-be7a-4d52-ab8e-ce5b750a95ac)\n\nDo you see this as a bug or as by design @baronfel @rainersigwald ? \nI think it's bad that this causes a build inconsistency between graph and non-graph but I'm not sure if we want to introduce the metaproject concept to graph and how hard that is.\n\n",
        "createdAt": "2025-03-18T10:38:31Z",
        "author": {
          "login": "JanProvaznik"
        }
      },
      {
        "body": "It does seem wrong to me; I would expect a (basically no-op except when customized) metaproj build at the very end of a graph build (after all the projects have completed).",
        "createdAt": "2025-03-25T15:30:02Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@dfederm is there any reason we'd break things if we did build the solution metaproject last in a sln-based graph build?",
        "createdAt": "2025-03-25T15:30:48Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I don't imagine anything would break. The default action for the metaproject is effectively a no-op right (besides dispatching to the projects in the sln)?\n\nI slightly worry though that if the graph is \"wrong\" that the Build action for the metaproject may rebuild basically everything all over again. So for safety you could add a condition to the metaproject's Build target: `Condition=\" '$(IsGraphBuild)' != 'true' \"`. That's what `Microsoft.Build.Traversal` does as well.",
        "createdAt": "2025-03-25T15:36:11Z",
        "author": {
          "login": "dfederm"
        }
      }
    ]
  }
}