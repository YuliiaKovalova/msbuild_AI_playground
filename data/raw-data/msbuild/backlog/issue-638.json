{
  "number": 638,
  "title": "Define and test the msbuild user consumption matrix",
  "body": "I think the current state looks something like this:\n\n| API version |  | Full Framework (test status / packaging status) | NetCore (test status / packaging status) |\n| --- | --- | --- | --- |\n| 14 | Runnable deployment | Not Tested / WIP | Not Tested / WIP |\n| 14 | App has transitive dependency for API reference | Not Tested / WIP | Not Tested / WIP |\n| 14 | App has transitive dependency for programatic build | Not Tested / WIP | Not Tested / WIP |\n| 15 | Runnable deployment | CI tested on master branch /WIP | CI tested on xplat branch /WIP |\n| 15 | App has transitive dependency for API reference | Not Tested / WIP | Not Tested / WIP |\n| 15 | App has transitive dependency for programatic build | Not Tested / WIP | Not Tested / WIP |\n\n**Definitions**:\n\n|  |  |\n| --- | --- |\n| Runnable deployment | standalone deployment of msbuild that users call via `msbuild.exe` / `corerun msbuild.exe` |\n| Transitive dependency on MSBuild for API reference | user app has dependency on msbuild APIs for non-runnable scenarios (e.g., write a task that needs to extend ITask, tool location helpers, etc). **Nothing that requires sdk targets and tasks** ( introspecting csproj requires the common props and targets for managed langs) |\n| Transitive dependency on MSBuild for programmatic build | user app has dependency on msbuild APIs to start a build programmatically (not via msbuild.exe) or use APIs that require SDK targets and tasks |\n\n**Testing for API reference**\n- separate build step after build and packaging\n- tests that a couple of sample tasks can compile against the packages for various framworks\n  - a portable task that targets netstandard1.3 and is invokable by both netcore and full framework msbuild\n  - a FF task that only targets FF msbuild and is only executable by FF msbuild\n\n**API versions**\nFor each MSBuild release, the API version is that of the Full Framework flavor while its NetCore counterpart is a subset.\n",
  "state": "OPEN",
  "createdAt": "2016-05-19T21:37:17Z",
  "updatedAt": "2024-02-21T16:38:37Z",
  "closedAt": null,
  "author": {
    "login": "cdmihai"
  },
  "labels": [
    "packaging",
    "testing",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Since writing this up, a couple of other scenarios have become more obvious. \"Building a Task\", in particular, has a few flavors:\n- A task that's intended to be portable between .NET Core and Desktop MSBuild 15\n- A task that's intended to be portable between .NET Core and Desktop MSBuild 14+\n- A task that's specifically targeting Desktop MSBuild 14+\n",
        "createdAt": "2016-08-19T16:18:19Z",
        "updatedAt": "2016-08-19T16:18:19Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Do they also need to be runnable (actual code that does something)? So, do we need a .net core ready version of MSBuild 14? This looks like it could be easily achieved by just taking the latest nuget packages and reducing the ref assemblies to whatever APIs the previous msbuild had. And then manually punching in the dll name. Oh, dlls ...\n",
        "createdAt": "2016-08-19T16:27:23Z",
        "updatedAt": "2016-08-19T16:33:06Z",
        "author": {
          "login": "cdmihai"
        }
      }
    ]
  }
}