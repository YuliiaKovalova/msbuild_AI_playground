{
  "number": 6373,
  "title": "Building a VS solution file at the command line now causes MSB4057",
  "body": "### Issue Description\r\n\r\nI have a solution file with several projects in and use `-targets` to selectively build some projects in this solution.\r\n\r\nUsing\r\n```\r\nmsbuild --version\r\nMicrosoft (R) Build Engine version 16.9.0+5e4b48a27 for .NET Framework\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n16.9.0.16703\r\n```\r\n\r\nThe following works:\r\n\r\n`msbuild -p:Platform=x64 -p:Configuration=Debug -t:banana SolutionFile.sln`\r\n\r\nbut since installing VS 2019 16.10 Preview 2.1, I now receive `error MSB4057: The target \"banana\" does not exist in the project.` for every project in the solution.\r\n\r\nI think this update to Visual Studio brought this version of MSBuild with it:\r\n\r\n```\r\nmsbuild --version\r\nMicrosoft (R) Build Engine version 16.10.0-preview-21181-05+80f316e90 for .NET Framework\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n16.10.0.18105\r\n```\r\n\r\n### Steps to Reproduce\r\n\r\nI have been unable to reproduce this issue in a new project. Unfortunately I cannot share the entire solution with you, nor is it open source.\r\n\r\n### Expected Behavior\r\nThe specified project is targeted and built from the solution.\r\n\r\n### Actual Behavior\r\nThe build does not complete.\r\n\r\n### Analysis\r\n\r\nI emitted the metaproj for build instances, and it looks like there are a few differences, but this one looks related. Looking at `SolutionFile.slnmetaproj`, I have these two blocks:\r\n\r\n**16.9**\r\n```\r\n  <Target Name=\"banana\" Outputs=\"@(bananaBuildOutput)\">\r\n    <MSBuild Condition=\"'%(ProjectReference.Identity)' == 'C:\\code\\banana\\msvc\\2019\\banana.vcxproj'\" ToolsVersion=\"$(ProjectToolsVersion)\" BuildInParallel=\"True\" Projects=\"@(ProjectReference)\" Properties=\"Configuration=Debug; Platform=x64;BuildingSolutionFile=true; CurrentSolutionConfigurationContents=$(CurrentSolutionConfigurationContents); SolutionDir=$(SolutionDir); SolutionExt=$(SolutionExt); SolutionFileName=$(SolutionFileName); SolutionName=$(SolutionName); SolutionPath=$(SolutionPath)\">\r\n      <Output TaskParameter=\"TargetOutputs\" ItemName=\"bananaBuildOutput\" />\r\n    </MSBuild>\r\n  </Target>\r\n  <Target Name=\"banana:Clean\">\r\n    <MSBuild Condition=\"'%(ProjectReference.Identity)' == 'C:\\code\\banana\\msvc\\2019\\banana.vcxproj'\" ToolsVersion=\"$(ProjectToolsVersion)\" BuildInParallel=\"True\" Projects=\"@(ProjectReference)\" Targets=\"Clean\" Properties=\"Configuration=Debug; Platform=x64;BuildingSolutionFile=true; CurrentSolutionConfigurationContents=$(CurrentSolutionConfigurationContents); SolutionDir=$(SolutionDir); SolutionExt=$(SolutionExt); SolutionFileName=$(SolutionFileName); SolutionName=$(SolutionName); SolutionPath=$(SolutionPath)\" />\r\n  </Target>\r\n  <Target Name=\"banana:Rebuild\" Outputs=\"@(bananaBuildOutput)\">\r\n    <MSBuild Condition=\"'%(ProjectReference.Identity)' == 'C:\\code\\banana\\msvc\\2019\\banana.vcxproj'\" ToolsVersion=\"$(ProjectToolsVersion)\" BuildInParallel=\"True\" Projects=\"@(ProjectReference)\" Targets=\"Rebuild\" Properties=\"Configuration=Debug; Platform=x64;BuildingSolutionFile=true; CurrentSolutionConfigurationContents=$(CurrentSolutionConfigurationContents); SolutionDir=$(SolutionDir); SolutionExt=$(SolutionExt); SolutionFileName=$(SolutionFileName); SolutionName=$(SolutionName); SolutionPath=$(SolutionPath)\">\r\n      <Output TaskParameter=\"TargetOutputs\" ItemName=\"bananaBuildOutput\" />\r\n    </MSBuild>\r\n  </Target>\r\n  <Target Name=\"banana:Publish\">\r\n    <MSBuild Condition=\"'%(ProjectReference.Identity)' == 'C:\\code\\banana\\msvc\\2019\\banana.vcxproj'\" ToolsVersion=\"$(ProjectToolsVersion)\" BuildInParallel=\"True\" Projects=\"@(ProjectReference)\" Targets=\"Publish\" Properties=\"Configuration=Debug; Platform=x64;BuildingSolutionFile=true; CurrentSolutionConfigurationContents=$(CurrentSolutionConfigurationContents); SolutionDir=$(SolutionDir); SolutionExt=$(SolutionExt); SolutionFileName=$(SolutionFileName); SolutionName=$(SolutionName); SolutionPath=$(SolutionPath)\" />\r\n  </Target>\r\n```\r\n\r\n**16.10**\r\n```\r\n  <Target Name=\"banana\">\r\n    <MSBuild BuildInParallel=\"True\" SkipNonexistentProjects=\"%(ProjectReference.SkipNonexistentProjects)\" Projects=\"@(ProjectReference)\" Targets=\"banana\" Properties=\"BuildingSolutionFile=true; CurrentSolutionConfigurationContents=$(CurrentSolutionConfigurationContents); SolutionDir=$(SolutionDir); SolutionExt=$(SolutionExt); SolutionFileName=$(SolutionFileName); SolutionName=$(SolutionName); SolutionFilterName=$(SolutionFilterName); SolutionPath=$(SolutionPath)\" />\r\n  </Target>\r\n  <Target Name=\"banana:Clean\">\r\n    <MSBuild Condition=\"'%(ProjectReference.Identity)' == 'C:\\code\\banana\\msvc\\2019\\banana.vcxproj'\" ToolsVersion=\"$(ProjectToolsVersion)\" BuildInParallel=\"True\" Projects=\"@(ProjectReference)\" Targets=\"Clean\" Properties=\"Configuration=Debug; Platform=x64;BuildingSolutionFile=true; CurrentSolutionConfigurationContents=$(CurrentSolutionConfigurationContents); SolutionDir=$(SolutionDir); SolutionExt=$(SolutionExt); SolutionFileName=$(SolutionFileName); SolutionName=$(SolutionName); SolutionFilterName=$(SolutionFilterName); SolutionPath=$(SolutionPath)\" />\r\n  </Target>\r\n  <Target Name=\"banana:Rebuild\" Outputs=\"@(bananaBuildOutput)\">\r\n    <MSBuild Condition=\"'%(ProjectReference.Identity)' == 'C:\\code\\banana\\msvc\\2019\\banana.vcxproj'\" ToolsVersion=\"$(ProjectToolsVersion)\" BuildInParallel=\"True\" Projects=\"@(ProjectReference)\" Targets=\"Rebuild\" Properties=\"Configuration=Debug; Platform=x64;BuildingSolutionFile=true; CurrentSolutionConfigurationContents=$(CurrentSolutionConfigurationContents); SolutionDir=$(SolutionDir); SolutionExt=$(SolutionExt); SolutionFileName=$(SolutionFileName); SolutionName=$(SolutionName); SolutionFilterName=$(SolutionFilterName); SolutionPath=$(SolutionPath)\">\r\n      <Output TaskParameter=\"TargetOutputs\" ItemName=\"bananaBuildOutput\" />\r\n    </MSBuild>\r\n  </Target>\r\n  <Target Name=\"banana:Publish\">\r\n    <MSBuild Condition=\"'%(ProjectReference.Identity)' == 'C:\\code\\banana\\msvc\\2019\\banana.vcxproj'\" ToolsVersion=\"$(ProjectToolsVersion)\" BuildInParallel=\"True\" Projects=\"@(ProjectReference)\" Targets=\"Publish\" Properties=\"Configuration=Debug; Platform=x64;BuildingSolutionFile=true; CurrentSolutionConfigurationContents=$(CurrentSolutionConfigurationContents); SolutionDir=$(SolutionDir); SolutionExt=$(SolutionExt); SolutionFileName=$(SolutionFileName); SolutionName=$(SolutionName); SolutionFilterName=$(SolutionFilterName); SolutionPath=$(SolutionPath)\" />\r\n  </Target>\r\n  <Target Name=\"banana:banana\">\r\n    <MSBuild Condition=\"'%(ProjectReference.Identity)' == 'C:\\code\\banana\\msvc\\2019\\banana.vcxproj'\" ToolsVersion=\"$(ProjectToolsVersion)\" BuildInParallel=\"True\" Projects=\"@(ProjectReference)\" Targets=\"banana\" Properties=\"Configuration=Debug; Platform=x64;BuildingSolutionFile=true; CurrentSolutionConfigurationContents=$(CurrentSolutionConfigurationContents); SolutionDir=$(SolutionDir); SolutionExt=$(SolutionExt); SolutionFileName=$(SolutionFileName); SolutionName=$(SolutionName); SolutionFilterName=$(SolutionFilterName); SolutionPath=$(SolutionPath)\" />\r\n  </Target>\r\n```\r\n\r\nAfter inspecting these generated targets, I can confirm that `-t:banana:Clean` works in both cases i.e.\r\n```\r\nmsbuild -p:Platform=x64 -p:Configuration=Debug -t:banana:Clean SolutionFile.sln\r\n```\r\nAs does `-t:banana:Rebuild`.\r\n\r\nSo I tried `-t:banana:banana` and this was somewhat of an improvement. It found the correct vcxproj target from the solution but then generated the same error as earlier:\r\n\r\n```\r\nC:\\code\\banana\\msvc\\2019\\banana.vcxproj : error MSB4057: The target \"banana\" does not exist in the project.\r\n```\r\n\r\nThe main difference between `-t:banana` and `-t:banana:banana` is that the former causes MSB4057 for every project in the solution, whereas the latter seems to find the correct project, but then `banana` does not exist as a target within that project (which makes sense to me).\r\n\r\n### Versions & Configurations\r\n\r\nWorking:\r\n```\r\nmsbuild --version\r\nMicrosoft (R) Build Engine version 16.9.0+5e4b48a27 for .NET Framework\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n16.9.0.16703\r\n```\r\n\r\nNot working:\r\n```\r\nmsbuild --version\r\nMicrosoft (R) Build Engine version 16.10.0-preview-21181-05+80f316e90 for .NET Framework\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n16.10.0.18105\r\n```\r\n\r\nOS is Windows 10, x64, 20H2 (19042.928)\r\n\r\n### Attach a binlog\r\n<!--\r\n* If providing us a project that reproduces the issue proves difficult, consider including a binlog.\r\n* Click [here](https://aka.ms/msbuild/binlog) for details on sharing binary logs.\r\n* Click [here](https://github.com/microsoft/msbuild/blob/master/documentation/wiki/Binary-Log.md) for more information on binary logs.\r\n    NOTE: Binlogs can contain sensitive information. Don't attach anything you don't want to be public.\r\n\r\n*   To view the contents of the binlogs yourself, you may wish to use a tool like https://msbuildlog.com/.\r\n-->\r\n\r\nNot available.\r\n\r\nThank you!",
  "state": "CLOSED",
  "createdAt": "2021-04-26T16:54:43Z",
  "updatedAt": "2024-02-21T14:13:49Z",
  "closedAt": "2021-05-26T17:34:05Z",
  "author": {
    "login": "snalexp"
  },
  "labels": [
    "bug",
    "regression",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "Forgind"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Team Triage: Would it be possible for you to share your `.sln` file without any of the projects? If you're not comfortable posting it publicly would you be willing to file a [Visual Studio Feedback Ticket](https://developercommunity.visualstudio.com/home) and upload it privately?",
        "createdAt": "2021-04-28T15:44:09Z",
        "updatedAt": "2021-04-28T15:44:09Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "Hi @BenVillalobos,\r\n\r\nI've attached one of our solutions with some anonymised names.\r\n\r\n[SolutionFile.zip](https://github.com/dotnet/msbuild/files/6393404/SolutionFile.zip)\r\n\r\nHope that helps,",
        "createdAt": "2021-04-28T16:38:26Z",
        "updatedAt": "2021-04-28T16:38:26Z",
        "author": {
          "login": "snalexp"
        }
      },
      {
        "body": "Hi,\r\n\r\nThis issue persists with the recent VS preview update:\r\n\r\n```\r\nmsbuild --version\r\nMicrosoft (R) Build Engine version 16.10.0-preview-21253-02+fa96a2a81 for .NET Framework\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n16.10.0.25302\r\n```",
        "createdAt": "2021-05-12T07:31:06Z",
        "updatedAt": "2021-05-12T07:31:06Z",
        "author": {
          "login": "snalexp"
        }
      },
      {
        "body": "Same problem when using tye - but building in Visual Studio and through `dotnet build` was all fine!\r\n\r\nMy error message was `The target \"Restore\" does not exist in the project.`\r\n\r\nI had VS 2019 16.9.5 and VS 2019 16.10.0 Preview 3.0 installed. Tried reinstalling the \".NET Portable Library Targeting Pack\" as suggested in an old issue at Newtonsoft:Json (https://github.com/JamesNK/Newtonsoft.Json/issues/2057/#issuecomment-493294589). Did not work.\r\n\r\n### Solution: Uninstall VS 2019 16.10.0 Preview 3.0\r\nI had just today updated the preview and stable version of VS. So I completely **uninstalled VS 2019 16.10.0 Preview 3.0** and that fixed the issue immediately, so it is definitely something in the latest preview update.\r\nNote: VS 2019 16.10.0 Preview _2.1_ did not cause any issues: `tye run` worked flawlessly.",
        "createdAt": "2021-05-12T09:06:39Z",
        "updatedAt": "2021-05-12T09:06:39Z",
        "author": {
          "login": "warappa"
        }
      },
      {
        "body": "@BenVillalobos,\r\nhttps://github.com/dotnet/msbuild/pull/6312 didn't only fail with Restore; that was just the common scenario. Could this just be a different manifestation of that?\r\n\r\n> and use -targets to selectively build some projects in this solution.\r\n\r\nCould this be better done with a [solution filter](https://docs.microsoft.com/visualstudio/ide/filtered-solutions?view=vs-2019)?",
        "createdAt": "2021-05-14T15:10:49Z",
        "updatedAt": "2021-05-14T15:10:49Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "@warappa A fix for that tye issue will be fixed in 16.10 P4.",
        "createdAt": "2021-05-19T15:31:38Z",
        "updatedAt": "2021-05-19T15:31:38Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "@BenVillalobos I just tested it. Unfortunately installing 16.10 Pre4 causes the same error. Just minutes earlier without 16.10 Pre 4 it worked, so it is definitely the update again.\r\n\r\nI'm not the only one with this issue:\r\nhttps://github.com/dotnet/tye/issues/1003#issuecomment-820948183\r\nhttps://github.com/dotnet/tye/issues/1024#issuecomment-830487870",
        "createdAt": "2021-05-19T16:16:43Z",
        "updatedAt": "2021-05-19T16:16:43Z",
        "author": {
          "login": "warappa"
        }
      },
      {
        "body": "@warappa ah, what's happening is that VS 16.10 preview 4 delivers a .NET SDK that has an MSBuild that doesn't have the fix. When the next .NET SDK preview releases with a fixed MSBuild, tye should work fine again.",
        "createdAt": "2021-05-19T16:41:34Z",
        "updatedAt": "2021-05-19T16:41:34Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I'm seeing this on the release of 16.10.0 - I have a sln that I can share internally.",
        "createdAt": "2021-05-26T16:25:56Z",
        "updatedAt": "2021-05-26T16:25:56Z",
        "author": {
          "login": "grantborthwick"
        }
      },
      {
        "body": "@grantborthwick, the solution for this has been merged and should go into 16.10.1. Let me know if you need it early or if it doesn't work!",
        "createdAt": "2021-05-26T17:34:05Z",
        "updatedAt": "2021-05-26T17:34:05Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "Glad this has been resolved, do you know when 16.10.1 will be released?",
        "createdAt": "2021-05-26T17:35:10Z",
        "updatedAt": "2021-05-26T17:35:10Z",
        "author": {
          "login": "jerharmon"
        }
      },
      {
        "body": "Probably 1-3 weeks from now.",
        "createdAt": "2021-05-26T17:59:53Z",
        "updatedAt": "2021-05-26T17:59:53Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "Hi, we are also encountering this issue. We tried solving it by custom build from the vs16.10 branch, which resolved most of the issues, however we probably went wrong somewhere because now when we build the project from Visual Studio first and then trying to build the same project from msbuild (without clean inbetween) we get the following warnings:\r\n\r\n`warning C4599: '/IC:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.29.30037\\include': command line argument number 3 does not match precompiled header `\r\n\r\nWould it be possible to do some hotfix release, or just a separate msbuild release that would work with VS 16.10.0? Thanks",
        "createdAt": "2021-05-27T13:48:23Z",
        "updatedAt": "2021-05-27T13:48:23Z",
        "author": {
          "login": "michalproks"
        }
      },
      {
        "body": "@michalproks We got it into the first possible hotfix release, but we'll have to wait for the wheels to turn on the release process there.\r\n\r\nI'd be _very_ surprised if the `C4599` warning you're seeing is related to you patching MSBuild though. That sounds like the build configuration is subtly different in VS versus MSBuild.exe.",
        "createdAt": "2021-05-27T18:35:34Z",
        "updatedAt": "2021-05-27T18:35:34Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "A [workaround from Stack Overflow user `chrsdy`](https://stackoverflow.com/a/67731920) is to specify the `:Rebuild` target for the projects explicitly.\r\n\r\n```\r\nmsbuild.exe MySolution.sln /t:Project1:Rebuild;Project2:Rebuild;Project3:Rebuild /p:Configuration=Release /p:DebugType=None /p:OutputPath=\"C:\\Users\\myuser\\Desktop\\Build\"\r\n```",
        "createdAt": "2021-05-28T20:19:08Z",
        "updatedAt": "2021-05-28T20:19:08Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Can't wait to get a fix. Breaks my entire buildchain scripting.",
        "createdAt": "2021-05-29T08:29:14Z",
        "updatedAt": "2021-05-29T08:29:14Z",
        "author": {
          "login": "rhuijben"
        }
      },
      {
        "body": "Why did you release/upgrade this version on azure pipelines? Our builds started failing. How can I specify an older version in Azure / VsBuild-task? \r\n\r\nEdit:\r\nhttps://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/build/visual-studio-build?view=azure-devops\r\n**vsVersion** parameter. Great. Lets enter 16.9 there, makes sense.\r\n##[warning]Visual Studio version '16.9' not found. Falling back to version '16.0'.\r\n\r\n.... really nice. Who decided that the only valid options are xx.0 and that automagically gets me the latest version?\r\n\r\n\r\nhttps://github.com/actions/virtual-environments/pull/3452/files\r\nI just want to revert to using the build-image BEFORE this one, but that doesn't seem like it's possible?\r\nI.e, I thought that entering for example 16.9 as vsVersion in the vsbuild-task would give me the \"virtual-environments\"-image with just that version, but it seems like theres only once choice, and that is to always use the latest version.....",
        "createdAt": "2021-05-31T15:17:11Z",
        "updatedAt": "2021-05-31T15:28:49Z",
        "author": {
          "login": "Appelg"
        }
      },
      {
        "body": "> Why did you release/upgrade this version on azure pipelines? \r\n\r\nSame on GitHub Actions, all test workflows were broken, needed to update all build scripts to implement the `:Rebuild` workaround.",
        "createdAt": "2021-05-31T15:23:06Z",
        "updatedAt": "2021-05-31T15:23:06Z",
        "author": {
          "login": "lelegard"
        }
      },
      {
        "body": "Is there any chance a regression test for this has/can be implemented? Seems like a very basic functionality that should not be allowed to be broken by a PR?",
        "createdAt": "2021-06-03T08:18:19Z",
        "updatedAt": "2021-06-03T08:18:19Z",
        "author": {
          "login": "jespergustinmsft"
        }
      },
      {
        "body": "Indeed! [This](https://github.com/dotnet/msbuild/blob/46b723ba9ee9f4297d0c8ccbb6dc52e4bd8ea438/src/Build.UnitTests/Construction/SolutionProjectGenerator_Tests.cs#L178-L216) is my test.",
        "createdAt": "2021-06-03T15:28:32Z",
        "updatedAt": "2021-06-03T15:28:32Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "VS 16.10.1 is now released.",
        "createdAt": "2021-06-09T15:09:09Z",
        "updatedAt": "2021-06-09T15:09:09Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I can confirm that VS 16.10.1 fixes this issue for my build. Thanks!",
        "createdAt": "2021-06-09T20:20:54Z",
        "updatedAt": "2021-06-09T20:20:54Z",
        "author": {
          "login": "grantborthwick"
        }
      },
      {
        "body": "> I can confirm that VS 16.10.1 fixes this issue for my build. Thanks!\r\n\r\nSame here - thank you.",
        "createdAt": "2021-06-10T07:58:45Z",
        "updatedAt": "2021-06-10T07:58:45Z",
        "author": {
          "login": "snalexp"
        }
      }
    ]
  }
}