{
  "number": 464,
  "title": "Flag for forcing output with colors when redirecting stdout",
  "body": "Currently MSBuild has nice and helpful command line colors. The colors help a great deal when scanning a long output manually.\nHowever, when redirecting the MSBuild output, like when executing MSBuild from Jenkins for instance, the colors are automatically removed. In most cases this is a reasonable thing to do, because most text editors can't parse the ANSI escape characters.\nHowever, there is flag that was made just for that (/clp:DisableConsoleColor).\nIt seems like the colors are removed only becuase the C# ConsoleColors API is not good enought, it throw an exception when used while STDOUT is redirected to a file.\nI think it's not a good idea to make MSBuild spit ANSI escape characters at this points, becuase users are not expecting that when redirecting the output. But there is a room for a new flag that forces the colors.\nTherefore, I suggested my Pull Request #458.\n",
  "state": "CLOSED",
  "createdAt": "2016-02-03T19:00:53Z",
  "updatedAt": "2024-02-21T17:29:07Z",
  "closedAt": "2016-11-21T07:36:41Z",
  "author": {
    "login": "assafnativ"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "I'm not opposed to this entirely, but I'm a little worried that it's pretty corner case to implement in the standard console logger. Also if you want to write colorized file, it seems like using a logger that was aware of the output file format would be a much better choice than modifying the console logger and redirecting to a file. This would be very easy to implement in that way. Thoughts?\n",
        "createdAt": "2016-02-11T20:47:12Z",
        "updatedAt": "2016-02-11T20:47:12Z",
        "author": {
          "login": "AndyGerlicher"
        }
      },
      {
        "body": "1. Implementing a new logger requires overriding the SetColor method which is defined as \"internal static void SetColor (ConsoleColor c)\". The code duploication in the BaseConsoleLogger.cs and ConsoleLogger.cs, makes it even harder.\n2. It seems like there is a full support for colors in the default logger. However, the poor C# ConsoleColors API is throwing exception when used with redirection and all of the hard work that was done in order to generate these colors in the first place is lost.\n3. The Jenkins + MSBuild environment is a very common one, everyone who uses it need to replace the default logger to get the data that is already in there.\n4. It was quite hard for me to follow the trail of compiling to pinpoint what part is to blame for not having colors.\n5. Colors are awesome, you want them in MSBuild.\n   \n   BTW: Your Jenkins builds of MSBuild itself is so colorless for the same reason.\n",
        "createdAt": "2016-02-14T14:34:53Z",
        "updatedAt": "2016-02-14T14:35:14Z",
        "author": {
          "login": "assafnativ"
        }
      },
      {
        "body": "Sorry for the delay. We discussed this one at length in triage today. We really don't like that it re-implements what should be core .NET functionality and don't want to be in the business of doing that when possible.\n\nHowever, we agreed that we'd like to take this change in this case. I like that you've refactored and reduced code duplication and made the change optional behind a feature flag. And I do agree this could benefit a lot of people on CI systems such as our Jenkins build.\n\nPlease reopen the pull request I think we had a few minor comments to address. Also keep in mind that master at this point would mean Dev15 (whatever is after Visual Studio 2015), not an update.\n",
        "createdAt": "2016-02-23T23:13:26Z",
        "updatedAt": "2016-02-23T23:13:26Z",
        "author": {
          "login": "AndyGerlicher"
        }
      },
      {
        "body": "Thank you for taking the time addressing the issue.\nI've reopened the pull request.\nI too would like it if .NET had a working console color API, but it doesn't. I might open a pull request there, but it's more problematic as it won't be backwards compatible.\nIt's a bit unfortunate it won't make it to VS2015 SP2...\n",
        "createdAt": "2016-02-24T13:24:37Z",
        "updatedAt": "2016-02-24T13:24:37Z",
        "author": {
          "login": "assafnativ"
        }
      }
    ]
  }
}