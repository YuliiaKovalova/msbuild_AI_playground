{
  "number": 8527,
  "title": "[Bug]: Cannot merge folders with wildcards",
  "body": "### Issue Description\n\nTrying to use wildcards to merge the contents of two folders looks like it should be possible, but doesn't work due to bugs.\r\n\n\n### Steps to Reproduce\n\nI have a vcxproj and two folders of resource files that I want to merge in the output. The content of the folders might be generated so I can't enumerate them in the project file, I need to use wildcards. I know wildcards are not fully supported in vcxproj so I follow the advice of [the docs](https://learn.microsoft.com/en-us/cpp/build/reference/vcxproj-files-and-wildcards) and put them in a Target:\r\n\r\n```\r\n<Target Name=\"SomeTarget\" BeforeTargets=\"ClCompile\">\r\n   <ItemGroup>\r\n      <Content Include=\"files1\\**\" CopyToOutputDirectory=\"PreserveNewest\" TargetPath=\"files\\@(RecursiveDir)%(Filename)%(Extension)\"/>\r\n      <Content Include=\"files2\\**\" CopyToOutputDirectory=\"PreserveNewest\" TargetPath=\"files\\@(RecursiveDir)%(Filename)%(Extension)\"/>\r\n   </ItemGroup>\r\n</Target>\r\n```\r\n\r\nMy project zipped:\r\n\r\n[CppSandbox.zip](https://github.com/dotnet/msbuild/files/10883572/CppSandbox.zip)\r\n\n\n### Expected Behavior\n\nThe contents of the two folders should be merged at buildtime.\n\n### Actual Behavior\n\nThe project fails to build with the following error:\r\n> error MSB3024: Could not copy the file \"D:\\Dev\\Sandbox\\CppSandbox\\files1\\a.txt\" to the destination file \"D:\\Dev\\Sandbox\\CppSandbox\\Debug\\files\\\", because the destination is a folder instead of a file. To copy the source file into a folder, consider using the DestinationFolder parameter instead of DestinationFiles.\r\n\r\nContrary to the docs, if I omit the Target and use a direct ItemGroup, it works. Another weird behaviour occurs if we consider one of the folders to be generated at buildtime, ergo not present at project evaluation time. So let's just put that in a Target:\r\n```\r\n<ItemGroup>\r\n\t<Content Include=\"files1\\**\" CopyToOutputDirectory=\"PreserveNewest\" TargetPath=\"files\\@(RecursiveDir)%(Filename)%(Extension)\"/>\t\t\t\r\n</ItemGroup>\r\n<Target Name=\"SomeTarget\" BeforeTargets=\"ClCompile\">\r\n\t<ItemGroup>\r\n\t\t<Content Include=\"files2\\**\" CopyToOutputDirectory=\"PreserveNewest\" TargetPath=\"files\\@(RecursiveDir)%(Filename)%(Extension)\"/>\r\n\t</ItemGroup>\r\n</Target>\r\n```\r\nNow MSBuild gets confused and starts overwriting the files with each other:\r\n>  Copying file from \"D:\\Dev\\Sandbox\\CppSandbox\\files1\\c.txt\" to \"D:\\Dev\\Sandbox\\CppSandbox\\x64\\Debug\\files\\c.txt\".\r\n  Copying file from \"D:\\Dev\\Sandbox\\CppSandbox\\files1\\a.txt\" to \"D:\\Dev\\Sandbox\\CppSandbox\\x64\\Debug\\files\\a.txt\".\r\n  Copying file from \"D:\\Dev\\Sandbox\\CppSandbox\\files1\\b.txt\" to \"D:\\Dev\\Sandbox\\CppSandbox\\x64\\Debug\\files\\b.txt\".\r\n  Copying file from \"D:\\Dev\\Sandbox\\CppSandbox\\files2\\d.txt\" to \"D:\\Dev\\Sandbox\\CppSandbox\\x64\\Debug\\files\\b.txt\".\r\n  Copying file from \"D:\\Dev\\Sandbox\\CppSandbox\\files2\\d.txt\" to \"D:\\Dev\\Sandbox\\CppSandbox\\x64\\Debug\\files\\c.txt\".\r\n  Copying file from \"D:\\Dev\\Sandbox\\CppSandbox\\files2\\d.txt\" to \"D:\\Dev\\Sandbox\\CppSandbox\\x64\\Debug\\files\\a.txt\".\r\n  Copying file from \"D:\\Dev\\Sandbox\\CppSandbox\\files2\\e.txt\" to \"D:\\Dev\\Sandbox\\CppSandbox\\x64\\Debug\\files\\b.txt\".\r\n  Copying file from \"D:\\Dev\\Sandbox\\CppSandbox\\files2\\e.txt\" to \"D:\\Dev\\Sandbox\\CppSandbox\\x64\\Debug\\files\\c.txt\".\r\n  Copying file from \"D:\\Dev\\Sandbox\\CppSandbox\\files2\\e.txt\" to \"D:\\Dev\\Sandbox\\CppSandbox\\x64\\Debug\\files\\a.txt\".\r\n  Copying file from \"D:\\Dev\\Sandbox\\CppSandbox\\files2\\f.txt\" to \"D:\\Dev\\Sandbox\\CppSandbox\\x64\\Debug\\files\\b.txt\".\r\n  Copying file from \"D:\\Dev\\Sandbox\\CppSandbox\\files2\\f.txt\" to \"D:\\Dev\\Sandbox\\CppSandbox\\x64\\Debug\\files\\c.txt\".\r\n  Copying file from \"D:\\Dev\\Sandbox\\CppSandbox\\files2\\f.txt\" to \"D:\\Dev\\Sandbox\\CppSandbox\\x64\\Debug\\files\\a.txt\". \n\n### Analysis\n\n_No response_\n\n### Versions & Configurations\n\nMicrosoft (R) Build Engine version 16.11.2+f32259642 for .NET Framework\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n16.11.2.50704\r\n\r\nor\r\n\r\nMSBuild version 17.5.0+6f08c67f3 for .NET Framework\r\n17.5.0.10706",
  "state": "CLOSED",
  "createdAt": "2023-03-03T15:40:55Z",
  "updatedAt": "2024-02-21T14:05:51Z",
  "closedAt": "2023-04-14T04:06:29Z",
  "author": {
    "login": "mmarczell-graphisoft"
  },
  "labels": [
    "help wanted",
    "Priority:3",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "JanKrivanek"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "`@(RecursiveDir)` should surely be `%(RecursiveDir)`, but I didn't test whether that works either.",
        "createdAt": "2023-03-05T06:28:40Z",
        "updatedAt": "2023-03-05T06:28:40Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "@KalleOlaviNiemitalo Thanks, and no, it doesn't.",
        "createdAt": "2023-03-06T09:07:33Z",
        "updatedAt": "2023-03-06T09:07:33Z",
        "author": {
          "login": "mmarczell-graphisoft"
        }
      },
      {
        "body": "Once properly investigated and documented here - a good candidate to include in the documentation/learning effort: https://github.com/dotnet/msbuild/issues/8447",
        "createdAt": "2023-03-07T15:22:21Z",
        "updatedAt": "2023-03-07T15:22:21Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "I tried this `msbuild8527.msbuildproj`\r\n\r\n```XML\r\n\ufeff<Project>\r\n  <Target Name=\"Build\">\r\n    <ItemGroup>\r\n      <Content Include=\"files1\\**\" CopyToOutputDirectory=\"PreserveNewest\" TargetPath=\"files\\%(RecursiveDir)%(Filename)%(Extension)\"/>\r\n      <Content Include=\"files2\\**\" CopyToOutputDirectory=\"PreserveNewest\" TargetPath=\"files\\%(RecursiveDir)%(Filename)%(Extension)\"/>\r\n    </ItemGroup>\r\n\r\n    <Message Text=\"Content: '%(Content.Identity)' -&gt; '%(Content.TargetPath)'\" Importance=\"high\" />\r\n  </Target>\r\n</Project>\r\n```\r\n\r\nwith these (empty) files:\r\n\r\n* files1/abc/tups.demo\r\n* files1/eugh/floppy\r\n* files2/abc/openit.txt\r\n* files2/inroot2.bin\r\n* files2/sub/epsilon.mini\r\n\r\nResults of `dotnet msbuild` using \"MSBuild version 17.6.0-preview-23108-10+51df47643 for .NET\" in .NET SDK 8.0.100-preview.1.23115.2:\r\n\r\n```\r\n  Content: 'files1\\abc\\tups.demo' -> 'files\\'\r\n  Content: 'files1\\eugh\\floppy' -> 'files\\'\r\n  Content: 'files2\\abc\\openit.txt' -> 'files\\abc\\tups.demo'\r\n  Content: 'files2\\inroot2.bin' -> 'files\\abc\\tups.demo'\r\n  Content: 'files2\\sub\\epsilon.mini' -> 'files\\abc\\tups.demo'\r\n  Content: 'files2\\abc\\openit.txt' -> 'files\\eugh\\floppy'\r\n  Content: 'files2\\inroot2.bin' -> 'files\\eugh\\floppy'\r\n  Content: 'files2\\sub\\epsilon.mini' -> 'files\\eugh\\floppy'\r\n```\r\n\r\nso -- it seems that, in `<Content Include=\"files2\\**\" CopyToOutputDirectory=\"PreserveNewest\" TargetPath=\"files\\%(RecursiveDir)%(Filename)%(Extension)\"/>`, the metadata references like `%(RecursiveDir)` do not refer to the items that are being added by `Include=\"files2\\**\"`, but rather to the items that are already in the `Content` item type. Which may be a useful feature in some scenario but is certainly confusing here.\r\n\r\nIf I move the metadata to child elements\r\n\r\n```XML\r\n<Project>\r\n  <Target Name=\"Build\">\r\n    <ItemGroup>\r\n      <Content Include=\"files1\\**\">\r\n        <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>\r\n        <TargetPath>files\\%(RecursiveDir)%(Filename)%(Extension)</TargetPath>\r\n      </Content>\r\n      <Content Include=\"files2\\**\">\r\n        <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>\r\n        <TargetPath>files\\%(RecursiveDir)%(Filename)%(Extension)\"</TargetPath>\r\n      </Content>\r\n    </ItemGroup>\r\n\r\n    <Message Text=\"Content: '%(Content.Identity)' -&gt; '%(Content.TargetPath)'\" Importance=\"high\" />\r\n  </Target>\r\n</Project>\r\n```\r\n\r\nthen the result is the same as above.  Well, that's at least consistent.\r\n\r\nInstead, I think this kind of merging has to be done like so:\r\n\r\n```XML\r\n<Project>\r\n  <Target Name=\"Build\">\r\n    <ItemGroup>\r\n      <ContentToMerge Include=\"files1\\**\" />\r\n      <ContentToMerge Include=\"files2\\**\" />\r\n      <Content Include=\"@(ContentToMerge)\" CopyToOutputDirectory=\"PreserveNewest\" TargetPath=\"files\\%(RecursiveDir)%(Filename)%(Extension)\" />\r\n    </ItemGroup>\r\n\r\n    <Message Text=\"Content: '%(Content.Identity)' -&gt; '%(Content.TargetPath)'\" Importance=\"high\" />\r\n  </Target>\r\n</Project>\r\n```\r\n\r\nin which case `%(RecursiveDir)` etc. refer to the `ContentToMerge` items, and the output is as expected:\r\n\r\n```\r\n  Content: 'files1\\abc\\tups.demo' -> 'files\\abc\\tups.demo'\r\n  Content: 'files1\\eugh\\floppy' -> 'files\\eugh\\floppy'\r\n  Content: 'files2\\abc\\openit.txt' -> 'files\\abc\\openit.txt'\r\n  Content: 'files2\\inroot2.bin' -> 'files\\inroot2.bin'\r\n  Content: 'files2\\sub\\epsilon.mini' -> 'files\\sub\\epsilon.mini'\r\n```",
        "createdAt": "2023-03-07T16:10:02Z",
        "updatedAt": "2023-03-07T16:10:02Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "\"Microsoft (R) Build Engine version 15.9.21+g9802d43bc3 for .NET Framework\" behaves the same as \"MSBuild version 17.6.0-preview-23108-10+51df47643 for .NET\".\r\n\r\n\"Microsoft (R) Build Engine version 4.8.4084.0\" likewise, except it does not support metadata as attributes.\r\n\r\n\"Microsoft (R) Build Engine Version 2.0.50727.9149\" does not support `ItemGroup` within `Target`.",
        "createdAt": "2023-03-07T16:17:12Z",
        "updatedAt": "2023-03-07T16:17:12Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "Thank you @KalleOlaviNiemitalo for the sample and suggested fix.\r\n\r\nTo explain the observed behavior:\r\n\r\nReferencing the item metadata (whether via `%(Item.Metadata)` or `%(Metadata)` or `@(Metadata)`) leads to different expansion when used within and outside of the targets:\r\n* Outside of the target, it refers to the metadata of the item, currently being processed - so this can be used to assemble additional metadata of current item based on existing metadata. Basically what OP is trying to achieve\r\n* Inside the target (or task), this leads to [_batching_](https://learn.microsoft.com/en-us/visualstudio/msbuild/msbuild-batching). So the expression is expanded for each item with that particular Metadata defined. In this specific case it leads to cross-applying of the paths (unwanted).\r\n\r\nThe way out is:\r\n* Either define the additional metadata outside of the target (to prevent batching)\r\n* Or (as suggested by @KalleOlaviNiemitalo) add items into different Item and then Include and expand this to your desired Item (`Content` here).\r\n* Or us the item [_transforms_](https://learn.microsoft.com/en-us/visualstudio/msbuild/msbuild-transforms) to express the 1:1 desired transformation between two item lists\r\n  ```\r\n  <Target Name=\"Build\">\r\n    <ItemGroup>\r\n      <Content Include=\"files1\\**\" />\r\n      <Content Include=\"files2\\**\" />\r\n    </ItemGroup>\r\n\r\n    <Message Text=\"Content: '%(Content.Identity)' -&gt; '@(Content->'files\\%(RecursiveDir)%(Filename)%(Extension)')'\" Importance=\"high\" />\r\n  </Target>\r\n  ```\r\n\r\n",
        "createdAt": "2023-03-08T16:38:09Z",
        "updatedAt": "2023-03-08T16:38:09Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "Would it be feasible to make MSBuild emit a warning about this use, and link the warning code to an article that describes what to do instead?\r\n\r\nWarn if an ItemGroup in a Target contains an item element that matches all of these conditions:\r\n\r\n- has an Include attribute\r\n- has one or more unqualified `%(metadata)` references (or qualified reference attempting to reference current item)\r\n- does not reference any qualified `%(itemtype.metadata)` (unless `itemtype` referenced is identical to the currently processed item)\r\n- does not reference any `@(itemtype)` (including transforms)",
        "createdAt": "2023-03-08T16:59:10Z",
        "updatedAt": "2023-03-08T18:43:03Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "@KalleOlaviNiemitalo Great suggestion. We've discussed this idea yesterday (without details on how to detect possible missues - your suggestion is nicely expanding that thought).\r\n\r\nI'd probably modify the point 3 above ('does not reference any qualified `%(itemtype.metadata)`' to disallow `%(itemtype.metadata)` reference of self as well) - adding the suggestion inline, as your list is a nice reference ",
        "createdAt": "2023-03-08T18:40:52Z",
        "updatedAt": "2023-03-08T18:40:52Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "I was thinking, if someone hits the new warning but does want the current behaviour, then they can silence the warning by qualifying the metadata reference. This is why it should not warn about qualified metadata, even if the item type matches the element.",
        "createdAt": "2023-03-09T04:28:29Z",
        "updatedAt": "2023-03-09T04:28:29Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      }
    ]
  }
}