{
  "number": 1690,
  "title": "msbuild fails to load task assembly if there is one right next to msbuild.dll",
  "body": "if there are more than one copy of the task dll, and the targets file refer to a copy that is not right next to msbuild.dll , msbuild crashses with an error like : \r\n\r\n``` \r\nerror MSB4062: The \"NuGet.Build.Tasks.Pack.PackTask\" task could not be loaded from the assembly C:\\Users\\ragrawal\\AppData\\Local\\Temp\\NuGetTestFolder\\4e25a2f6-7075-442c-bafe-7f9a473cf069\\sdk\\1.0.0-rc4-004777\\Sdks\\NuGet.Build.Tasks.Pack\\buildCrossTargeting\\..\\CoreCLR\\NuGet.Build.Tasks.Pack.dll. Could not load file or assembly 'NuGet.Build.Tasks.Pack, Culture=neutral, PublicKeyToken=null'. The system cannot find the file specified. Confirm that the <UsingTask> declaration is correct, that the assembly and all its dependencies are available, and that the task contains a public class that implements Microsoft.Build.Framework.ITask. \r\n\r\n```\r\n\r\nCC: @rainersigwald ",
  "state": "CLOSED",
  "createdAt": "2017-02-10T19:35:02Z",
  "updatedAt": "2024-02-21T17:21:58Z",
  "closedAt": "2022-01-21T19:51:47Z",
  "author": {
    "login": "rohit21agrawal"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Consider for Next Major Version"
  },
  "comments": {
    "nodes": [
      {
        "body": "This one was _deeply_ mysterious! I was able to confirm the problem by observing a failure with ProcMon and seeing that a load was attempted from next to `dotnet.exe` instead of `MSBuild.dll` as you'd expect.\r\n\r\nThis happens because MSBuild has [logic to simulate `LoadFrom` in CoreCLR](https://github.com/rainersigwald/msbuild/blob/99e95d0f55d2af82767ffd8c81dcfdc663092e49/src/Shared/TypeLoader.cs#L187-L204).\r\n\r\nIn this case, MSBuild observed that there was a file named `NuGet.Build.Tasks.Pack.dll` in the `CurrentMSBuildToolsDirectory`, so it attempted to load using a bare `Assembly.Load` of `\"NuGet.Build.Tasks.Pack\"`. The CLR loader then probes\r\n\r\n```\r\n3:55:51.7967062 PM\tdotnet.exe\t16088\tQueryOpen\tS:\\work\\rohit-usingtask-failure\\cli.1.0.0-rc4-4777\\sdk\\1.0.0-rc4-004777\\Sdks\\Microsoft.NET.Sdk\\tools\\netcoreapp1.0\\NuGet.Build.Tasks.Pack.ni.dll\tNAME NOT FOUND\t\r\n3:55:51.7969958 PM\tdotnet.exe\t16088\tQueryOpen\tS:\\work\\rohit-usingtask-failure\\cli.1.0.0-rc4-4777\\sdk\\1.0.0-rc4-004777\\Sdks\\Microsoft.NET.Sdk\\tools\\netcoreapp1.0\\NuGet.Build.Tasks.Pack.ni.exe\tNAME NOT FOUND\t\r\n3:55:51.7972648 PM\tdotnet.exe\t16088\tQueryOpen\tS:\\work\\rohit-usingtask-failure\\cli.1.0.0-rc4-4777\\sdk\\1.0.0-rc4-004777\\Sdks\\Microsoft.NET.Sdk\\tools\\netcoreapp1.0\\NuGet.Build.Tasks.Pack.dll\tNAME NOT FOUND\t\r\n3:55:51.7974816 PM\tdotnet.exe\t16088\tQueryOpen\tS:\\work\\rohit-usingtask-failure\\cli.1.0.0-rc4-4777\\sdk\\1.0.0-rc4-004777\\Sdks\\Microsoft.NET.Sdk\\tools\\netcoreapp1.0\\NuGet.Build.Tasks.Pack.exe\tNAME NOT FOUND\t\r\n```\r\n\r\nAnd doesn't find it in any of those places.\r\n\r\nIt looks like our assumption that `Assembly.Load` would look next to MSBuild is wrong . . . somehow.\r\n\r\nIt should be rare to try to load a task from a DLL in the MSBuild bin folder outside of our own tasks, which work for other reasons (evidently\u203d), so this doesn't seem too bad.",
        "createdAt": "2017-02-10T22:20:11Z",
        "updatedAt": "2017-02-10T22:20:11Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Should be long fixed by AssemblyLoadContext",
        "createdAt": "2022-01-21T19:51:47Z",
        "updatedAt": "2022-01-21T19:51:47Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}