{
  "number": 5053,
  "title": "TreatWarningsAsErrors doesn't work for MSB3277",
  "body": "Due to upgrades made in https://github.com/microsoft/msbuild/issues/608 , the dreaded warning `MSB3277 Found conflicts between different versions of the same dependent assembly that could not be resolved.` is now (somewhat) easily actionable from the Visual Studio. However, in times of CI/CD and https://dependabot.com/ , I don't want to have to wait for a deployment to fail in order to notice that MSBuild already knew at build time my project won't start.\r\n\r\nHowever, no matter how strict the MSBuild settings are, this is always emitted as warning, not error.\r\n\r\nPlease make the MSB3277 respect TreatWarningsAsErrors and related flags.\r\n\r\nRelated (6 year old, still valid) StackOverflow thread https://stackoverflow.com/q/23662639/3205",
  "state": "CLOSED",
  "createdAt": "2020-01-14T16:08:50Z",
  "updatedAt": "2024-02-21T17:05:26Z",
  "closedAt": "2020-01-17T15:34:36Z",
  "author": {
    "login": "skolima"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "You can use the generic mechanism `MSBuildTreatWarningsAsErrors` or `< MSBuildWarningsAsErrors>MSB3277</MSBuildWarningsAsErrors>` (introduced in #1928) to accomplish this. We're considering treating `TreatWarningsAsErrors` in the same way (#4421). It wasn't done that way initially out of concern about changing the behavior of existing projects--but it is a completely reasonable expectation!\r\n\r\n(\"Ok, Rainer, but those aren't documented!\" you might say. To which I preemptively reply: you're right! https://github.com/MicrosoftDocs/visualstudio-docs/issues/4660)",
        "createdAt": "2020-01-17T15:34:28Z",
        "updatedAt": "2020-01-17T15:34:28Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Duplicate of #4421",
        "createdAt": "2020-01-17T15:34:36Z",
        "updatedAt": "2020-01-17T15:34:36Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Hi,\r\n\r\nIs there also an equivalent for `WarningsNotAsErrors`? Ideally, you'd want to threat every warning as an error (especially in a CI-scenario) and be able to whitelist specific warnings when there is a genuine reason to.",
        "createdAt": "2020-03-30T13:23:50Z",
        "updatedAt": "2020-03-31T08:15:20Z",
        "author": {
          "login": "wouterroos"
        }
      },
      {
        "body": "@wouterroos that's #3062.",
        "createdAt": "2020-03-30T21:12:26Z",
        "updatedAt": "2020-03-30T21:12:26Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald Thanks for your response. How would this work when setting properties in *.csproj files? I have the following scenario: We have set `<MSBuildTreatWarningsAsErrors>true</MSBuildTreatWarningsAsErrors>` in our `Directory.Build.props` file since we'd like to fail our ci build on any unexpected warnings. However, due to [this](https://github.com/aspnet/websdk/issues/1250) issue in aspnetcore we would like to whitelist `MSB3539` for specific projects so that the build won't fail and it will show as a warning. I tried various combinations of seemingly related properties I found at [this](https://docs.microsoft.com/en-us/visualstudio/msbuild/common-msbuild-project-properties?view=vs-2019) page but unfortunately I haven't been able to figure out a way to make this work. Any suggestions?",
        "createdAt": "2020-03-31T08:15:10Z",
        "updatedAt": "2020-03-31T08:15:51Z",
        "author": {
          "login": "wouterroos"
        }
      },
      {
        "body": "@wouterroos There's no way to make it appear as a warning today. You can either suppress it entirely or turn off warnings-as-errors in those projects. The issue I linked would allow you to get the behavior you want but isn't implemented.",
        "createdAt": "2020-03-31T14:59:43Z",
        "updatedAt": "2020-03-31T14:59:43Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald just to make sure I'm understanding this correctly. I believe my case is similar to @wouterroos ' in that \"I want to handle _everything_ as an error by default, with the exception of specific warnings that should be whitelisted\".\r\n\r\nWe were previously using he `TreatWarningsAsErrors` flag in combination with `WarningsNotAsErrors` to exclude deprecation warnings 612 and 618. This was working fine, but I noticed MSB3277 was being raised as a warning still, which was undesirable.\r\n\r\nI then found out about `MSBuildTreatWarningsAsErrors`, however when I enabled it, suddenly the deprecation warnings, which were showing as warnings previously due to `WarningsNotAsErrors`, started appearing as errors in the build.\r\n\r\nIs `WarningsNotAsErrors` just flat out ignored when `MSBuildTreatWarningsAsErrors`? If so, why is that the case?\r\n\r\nThe only way I got it to work was by _not_ setting `MSBuildTreatWarningsAsErrors`, and instead explicitly adding the MSB3277 warning in the `MSBuildWarningsAsErrors` property. However this is far from ideal, since I'd then need to know each and every warning possible to protect my build, i.e. move from a whitelist solution into a blacklist one.\r\n\r\nAre there any short-term plans to fix all this confusion and adopt a unified approach that allows both whitelist and blacklist strategies for warnings?\r\n\r\nApologies if this was already answered, but this is all very confusing and unintuitive to me. The very fact that we have separate `TreatWarningsAsErrors` and `MSBuildTreatWarningsAsErrors` flags is puzzling and smells of poor design in my view.\r\n\r\nI'm hesitant of relying on `MSBuildWarningsAsErrors` since that would force several hardcodes I don't want to maintain in the project.\r\n\r\nEDIT:\r\n\r\nAlso, I found this post from you in another thread, suggesting that `TreatWarningsAsErrors` should work in my scenario (at least that's what I interpreted), however it does not. I'm using VS 16.11.5 which from what I understand has a newer version of MSBuild than 16.9:\r\n- https://github.com/dotnet/msbuild/issues/68#issuecomment-846188995",
        "createdAt": "2021-11-05T19:52:01Z",
        "updatedAt": "2021-11-05T20:03:59Z",
        "author": {
          "login": "julealgon"
        }
      },
      {
        "body": "@julealgon, the compiler and MSBuild sometimes handle flags like TreatWarningsAsErrors the same way but sometimes don't. In this case, MSBuild didn't recognize WarningsNotAsErrors as a thing in all cases. The compiler was upgrading warnings other than 612 and 618 to errors, and MSBuild wasn't changing any warnings to errors. When you added MSBuildTreatWarningsAsErrors, it was taking all warnings (given to it by the compiler as well as other sources) and converting them to errors\u2014and since WarningsNotAsErrors was only a compiler thing, there were no exceptions.\r\n\r\nOne difficulty from a design perspective is that MSBuild can run without any specific compiler and vice versa, hence having disjoint systems.\r\n\r\nIn any case, I merged the feature for specifying just a few warnings to not be errors yesterday, so it should hopefully come out in 17.2. Hope that helps!",
        "createdAt": "2022-02-16T20:22:49Z",
        "updatedAt": "2022-02-16T20:23:20Z",
        "author": {
          "login": "Forgind"
        }
      }
    ]
  }
}