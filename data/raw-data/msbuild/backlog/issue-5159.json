{
  "number": 5159,
  "title": "Using /graphBuild May Result in Projects Silently Being Excluded",
  "body": "### Steps to reproduce\r\nAttempting to use the new /graphBuild switch may result in Projects being excluded from MSBuild with no warning to indicate projects have been excluded.\r\n\r\nFor example\r\n```\r\n\"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Preview\\MSBuild\\Current\\Bin\\amd64\\MSBuild.exe\" C:\\REDACTED\\Utilities.sln /m /graphBuild /t:Build /p:Configuration=Release\r\n```\r\n\r\nYields\r\n\r\n```\r\nMicrosoft (R) Build Engine version 16.5.0-preview-20113-03+04ed36359 for .NET Framework\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\nBuild started 3/4/2020 3:41:34 PM.\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:00:00.10\r\n```\r\n\r\nExcluding the `/graphBuild` command yields the expected build.\r\n\r\n```\r\n\"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Preview\\MSBuild\\Current\\Bin\\amd64\\MSBuild.exe\" C:\\REDACTED\\Utilities.sln /m /t:Build /p:Configuration=Release\r\n```\r\n\r\n```\r\nMicrosoft (R) Build Engine version 16.5.0-preview-20113-03+04ed36359 for .NET Framework\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\nBuild started 3/4/2020 3:43:33 PM.\r\n     1>Project \"C:\\REDACTED\\Utilities.sln\" on node\r\n        1 (Build target(s)).\r\n     1>ValidateSolutionConfiguration:\r\n         Building solution configuration \"Release|Any CPU\".\r\n     1>Project \"C:\\REDACTED\\Utilities.sln\" (1) is building \"C:\\REDACTED\\Utilities.synproj\" (2) on node 1 (default targets).\r\n     2>PrepareForBuild:\r\n         Creating directory \"C:\\REDACTED\\..\\bin\\Client\\\".\r\n         Creating directory \"C:\\REDACTED\\obj\\Release\\\".\r\n     1>Project \"C:\\REDACTED\\Utilities.sln\" (1) is building \"C:\\REDACTED\\Structures.synproj\" (3) on node 2 (default targets).\r\n     3>PrepareForBuild:\r\n         Creating directory \"C:\\REDACTED\\obj\\Release\\\".\r\n     1>Project \"C:\\REDACTED\\Utilities.sln\" (1) is\r\n       building \"C:\\REDACTED\\Schemas\\Repository.synproj\" (4) on node 3 (default targets).\r\n     4>BeforeBuild:\r\n         Creating directory \"C:\\REDACTED\\Schemas\\obj\\Release\\AnyCPU\".\r\n       FixSDI2015Bug:\r\n         Fixing Bug Caused By SDI 2501 Not Deleting the Temp Schema\r\n       CopyFilesToOutputDirectory:\r\n         Creating directory \"..\\..\\bin\\rpsdat\".\r\n         Creating directory \"..\\..\\bin\\rpsdat\".\r\n         Creating directory \"..\\..\\bin\\rpsdat\".\r\n         Creating directory \"..\\..\\bin\\rpsdat\".\r\n         Copying file from \"C:\\REDACTED\\Schemas\\obj\\Release\\AnyCPU\\rpstext.eng\" to \"C:\\REDACTED\\bin\\rpsdat\\rpstext.eng\".\r\n         Copying file from \"C:\\REDACTED\\Schemas\\obj\\Release\\AnyCPU\\rpsmain.en1\" to \"C:\\REDACTED\\bin\\rpsdat\\rpsmain.en1\".\r\n         Copying file from \"C:\\REDACTED\\Schemas\\obj\\Release\\AnyCPU\\rpstext.en1\" to \"C:\\REDACTED\\bin\\rpsdat\\rpstext.en1\".\r\n         Copying file from \"C:\\REDACTED\\Schemas\\obj\\Release\\AnyCPU\\rpsmain.eng\" to \"C:\\REDACTED\\bin\\rpsdat\\rpsmain.eng\".\r\n         Repository ->\r\n     4>Done Building Project \"C:\\REDACTED\\Schemas\\Repository.synproj\" (default targets).\r\n     3>CopyFilesToOutputDirectory:\r\n         Copying file from \"C:\\REDACTED\\obj\\Release\\SynergyStructures.elb\" to \"C:\\REDACTED\\bin\\Client\\SynergyStructures.elb\".\r\n         SynergyStructures -> C:\\REDACTED\\bin\\Client\\SynergyStructures.elb\r\n     3>Done Building Project \"C:\\REDACTED\\SynergyStructures.synproj\" (default targets).\r\n     2>CopyFilesToOutputDirectory:\r\n         Copying file from \"C:\\REDACTED\\obj\\Release\\utilities.elb\" to \"C:\\REDACTED\\bin\\Client\\utilities.elb\".\r\n         Utilities -> C:\\REDACTED\\bin\\Client\\utilities.elb\r\n     2>Done Building Project \"C:\\REDACTED\\Utilities.synproj\" (default targets).\r\n     1>Done Building Project \"C:\\REDACTED\\Utilities.sln\" (Build target(s)).\r\n\r\nBuild succeeded.\r\n\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:01:08.90\r\n```\r\n\r\nThis can be especially dangerous if you have a large mixed-technology solution file (once that contains a significant amount of C# in addition to the unsupported SDK) because the build will \"appear to work\", and unless you are explicitly checking for the binaries produced by the build this issue may go undetected.\r\n\r\nBased on https://github.com/microsoft/msbuild/blob/master/documentation/specs/static-graph.md it seems to indicate that _Existing functionality must still work. This new behavior is opt-in only._ We assume this means that the third party SDK does not properly support the new graphBuild behavior; but that msbuild should fall back to the previous behavior in times of difficulty.\r\n\r\nThe vendor of the SDK Extending MSBuild has been notified to see if they can conform to the Static Graph standard listed above.\r\n\r\n### Environment data\r\n`msbuild /version` output:\r\n```\r\nMicrosoft (R) Build Engine version 16.5.0-preview-20113-03+04ed36359 for .NET Framework\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n16.5.0.11303\r\n```\r\nOS info: Windows 10 1909\r\n",
  "state": "OPEN",
  "createdAt": "2020-03-04T22:59:51Z",
  "updatedAt": "2024-02-21T16:29:48Z",
  "closedAt": null,
  "author": {
    "login": "aolszowka"
  },
  "labels": [
    "Area: Static Graph",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Backlog"
  },
  "comments": {
    "nodes": [
      {
        "body": "@cdmihai can you take a look? Is this just that `/graph` doesn't support solutions?",
        "createdAt": "2020-03-04T23:04:45Z",
        "updatedAt": "2020-03-04T23:04:45Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "`/graph` supports solutions (or rather, the solutions that VS creates for managed projects). The description in #4463 summarizes what's supported and what's not.\r\n\r\nI see you are using a custom project, `synproj`. At the very least it has to adhere to the [msbuild p2p protocol](https://github.com/microsoft/msbuild/blob/master/documentation/ProjectReference-Protocol.md). If you want to make sure you've got it right, also add `/isolate` in addition to `/graph`. `/isolate` will fail the build if anything not predicted by the graph is built. Without `/isolate`, `/graph` will infer whatever it can and build it, regardless of how different it is from a vanilla msbuild invocation.\r\n\r\nSince no projects are found in your graph based solution build, I suspect that `synproj` is not using `ProjectReference` items to specify project dependencies.\r\n\r\n",
        "createdAt": "2020-03-04T23:29:19Z",
        "updatedAt": "2020-03-04T23:30:51Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "@cdmihai @rainersigwald It looks like the `/graph` feature actually excludes non-C# projects from being read from the solution.\r\n\r\nIf I identify my `synproj` as a `{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}` GUID in the solution file, my build will get run. If I switch back to my actual project type GUID definition of `{BBD0F5D1-1CC4-42FD-BA4C-A96779C64378}`, we get skipped.\r\n\r\nEdit for clarity: We do support msbuild p2p. There are no references involved in my test case.",
        "createdAt": "2020-03-04T23:32:31Z",
        "updatedAt": "2020-03-04T23:33:46Z",
        "author": {
          "login": "madkat"
        }
      },
      {
        "body": "It's most likely this line: https://github.com/microsoft/msbuild/blob/master/src/Build/Graph/GraphBuilder.cs#L255-L258\r\n\r\nAt the very least, a warning should be written saying there's ignored projects from the solution.",
        "createdAt": "2020-03-04T23:40:12Z",
        "updatedAt": "2020-03-04T23:40:12Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "@madkat Thanks for chiming in (this is the third party vendor).\r\n\r\nIn our test case we have ProjectReferences but as @cdmihai  just pointed out this does not show as a `SolutionProjectType.KnownToBeMSBuildFormat` (I've gotten burned by that in the utilities I've written to operate on these files). Is there anything we can do to register as a \"Known\" MSBuildFormat? They are really good citizens of the ecosystem and its improved our productivity!\r\n",
        "createdAt": "2020-03-04T23:44:08Z",
        "updatedAt": "2020-03-04T23:44:08Z",
        "author": {
          "login": "aolszowka"
        }
      },
      {
        "body": "There is no warning happening at normal, detailed or diagnostic verbosity. Maybe that would be different if I had a C# project present.\r\n\r\nEdit: No, there is no indicator that a project was skipped. Even on diagnostic.",
        "createdAt": "2020-03-04T23:44:44Z",
        "updatedAt": "2020-03-04T23:47:03Z",
        "author": {
          "login": "madkat"
        }
      },
      {
        "body": "If I have a C# project reference a Synergy .NET project, there is no problem. We are evaluated correctly by the graph.\r\n\r\nF:\\temp\\msftsample>msbuild /m /isolate /graphBuild MSBuildGraphTestSynNet.sln /v:minimal\r\nMicrosoft (R) Build Engine version 16.4.0+e901037fe for .NET Framework\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  MSBuildGraphTestSynNet -> F:\\temp\\msftsample\\bin\\Debug\\MSBuildGraphTestSynNet.exe\r\n  MSBuildGraphTestCS -> F:\\temp\\msftsample\\bin\\Debug\\MSBuildGraphTestCS.exe",
        "createdAt": "2020-03-04T23:50:46Z",
        "updatedAt": "2020-03-04T23:51:07Z",
        "author": {
          "login": "madkat"
        }
      },
      {
        "body": "> If I have a C# project reference a Synergy .NET project, there is no problem\r\n\r\nI noticed that in our testing too; In addition the Repository project type also worked (which is also referenced by a C# Project). However Traditional Synergy Projects are not recognized.\r\n\r\nDoes a Repository Project type alone work?",
        "createdAt": "2020-03-04T23:52:30Z",
        "updatedAt": "2020-03-04T23:52:30Z",
        "author": {
          "login": "aolszowka"
        }
      },
      {
        "body": "> If I have a C# project reference a Synergy .NET project, there is no problem. We are evaluated correctly by the graph.\r\n\r\nIt works because the C# project passes the filter criteria, and then graph construction finds the reference to the `.synproject` project.\r\n\r\nI'm thinking a better fix would be to just mimic what vanilla msbuild does when it interprets solutions and finds a project that's not msbuild syntax (if it fails this check https://github.com/Microsoft/msbuild/blob/07c3b3392dc05e0e3aba18bdec235a374aa72301/src/Build/Construction/Solution/ProjectInSolution.cs#L279-L362). Which means anything that looks like an msbuild project file will get accepted, and for the rest I'll reverse engineer what vanilla msbuild does.\r\n\r\nIn the meantime, as @madkat observed, a workaround is to add the C# GUID to the .synproj.\r\n\r\nLet us know if using `/graph` improves your build times (when it's building a non empty set of projects :)), and whether the build is correct w.r.t. vanilla msbuild. `/isolate` is a good proxy for that correctness.",
        "createdAt": "2020-03-05T00:15:44Z",
        "updatedAt": "2020-03-05T00:15:44Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "We are SUPER Excited for this; as I mentioned in that other thread we've got a large solution (~3500 Projects) split around 2200 SYNPROJ and 1300 CSPROJ with a VERY complex dependency tree. We've been given permission to throw some pretty significant hardware at it in an attempt to speed up build times.\r\n\r\nIn testing in Azure with 64 Cores / 128GB RAM / 64GB RAM Drive (Shared) [F64s_v2 instance] we have seen build times of around 17 minutes. Comparatively on a local Hyper-V instance on my dev machine VM with 16 Cores (i7-8770) / 36GB RAM / NVMe SSD we see around 30 minutes. Our target is 10 minutes from clean build.\r\n\r\nWe are hoping that we will avoid seeing the bottlenecking behavior late in the build and will report back.",
        "createdAt": "2020-03-05T00:23:09Z",
        "updatedAt": "2020-03-05T00:23:09Z",
        "author": {
          "login": "aolszowka"
        }
      },
      {
        "body": "To follow up on this:\r\n\r\nWhile the work around of changing the Project Type GUID in the solution file is working we are encountering a new issue when building via `/graphBuild` that we do not encounter when building without it. We are working with the vendor through their issue tracking system and will open a *new* issue based on our findings if we feel it is Microsoft related.\r\n\r\nTo be clear:\r\n\r\n**The ask on this issue is a fix to NOT Exclude non-CSPROJ Types when building via `/graphBuild`**",
        "createdAt": "2020-03-05T16:37:12Z",
        "updatedAt": "2020-03-05T16:37:12Z",
        "author": {
          "login": "aolszowka"
        }
      },
      {
        "body": "> The ask on this issue is a fix to NOT Exclude non-CSPROJ Types when building via /graphBuild\r\n\r\nThat's correct, given my current understanding right now, I think the ideal solution is to mimic vanilla msbuild's behaviour as reasonable as possible. And at the very least, provide warnings for any projects that do get skipped from the solution.",
        "createdAt": "2020-03-05T17:36:42Z",
        "updatedAt": "2020-03-05T17:36:42Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "@cdmihai With the merge of #5698 this is working (just tested by building Master) for our particular use case. I am OK closing it, but realistically this should probably remain open for any other ISV who has extended MSBuild/Visual Studio and is expecting to get a free ride via the Solution.",
        "createdAt": "2020-09-04T17:14:02Z",
        "updatedAt": "2020-09-04T17:14:02Z",
        "author": {
          "login": "aolszowka"
        }
      },
      {
        "body": "Looks like same happens with WIX installer project: https://wixtoolset.org/\r\nIt also silently excluded from build when `-graph` mode used, unless it is referenced by some other project.",
        "createdAt": "2022-06-09T20:43:54Z",
        "updatedAt": "2022-06-09T20:43:54Z",
        "author": {
          "login": "iskiselev"
        }
      },
      {
        "body": "@iskiselev Yup and without the escape hatch (still unimplemented see #5931) you might be out of luck without that reference. For us we added the type on #5698 but that's not a great long term solution, maybe someone over in the WiX Project might be willing to submit a PR?",
        "createdAt": "2022-06-09T21:25:05Z",
        "updatedAt": "2022-06-09T21:25:05Z",
        "author": {
          "login": "aolszowka"
        }
      }
    ]
  }
}