{
  "number": 5349,
  "title": "MSBuild SDKs version property is not expanded",
  "body": "### Steps to reproduce\r\n\r\nDirectory.Build.props file:\r\n```xml\r\n<Project>\r\n\r\n  <PropertyGroup>\r\n    <LocalPackageVersion>2.0.0-local</LocalPackageVersion>\r\n  </PropertyGroup>\r\n\r\n  <Import Project=\"Sdk.props\" Sdk=\"SharpGenTools.Sdk\" Version=\"$(LocalPackageVersion)\" Condition=\"'$(MSBuildProjectExtension)' == '.csproj'\" />\r\n\r\n</Project>\r\n```\r\n\r\n### Expected behavior\r\n`SharpGenTools.Sdk/2.0.0-local` is resolved and imported.\r\n\r\n### Actual behavior\r\n`SharpGenTools.Sdk/$(LocalPackageVersion)` fails to be resolved by NuGet resolver.\r\n\r\nLog:\r\n```\r\nResolving SDK 'SharpGenTools.Sdk/$(LocalPackageVersion)'...\r\n```\r\n\r\n### Environment data\r\n```\r\nProcess = \"C:\\Program Files\\dotnet\\dotnet.exe\"\r\nMSBuild executable path = \"C:\\Program Files\\dotnet\\sdk\\5.0.100-preview.5.20261.11\\MSBuild.dll\"\r\nCommand line arguments = \"\"C:\\Program Files\\dotnet\\sdk\\5.0.100-preview.5.20261.11\\MSBuild.dll\" -maxcpucount -verbosity:m /t:Restore;Build /bl \"-distributedlogger:Microsoft.DotNet.Tools.MSBuild.MSBuildLogger,C:\\Program Files\\dotnet\\sdk\\5.0.100-preview.5.20261.11\\dotnet.dll*Microsoft.DotNet.Tools.MSBuild.MSBuildForwardingLogger,C:\\Program Files\\dotnet\\sdk\\5.0.100-preview.5.20261.11\\dotnet.dll\"\"\r\nMSBuild version = \"16.7.0-preview-20258-02+26f6d1d87\"\r\n```\r\n\r\n### Source\r\n[`ProjectImportElement.ParsedSdkReference`](https://github.com/Microsoft/msbuild/blob/1adb5c56a1cb00ec44986c5dfd2bed81e05212a0/src/Build/Construction/ProjectImportElement.cs#L135) contains unexpanded properties from XML element, but [`Evaluator.ExpandAndLoadImportsFromUnescapedImportExpressionConditioned`](https://github.com/Microsoft/msbuild/blob/6f41a4fa3c6957d430783b7d31fe16e6a13b6e8e/src/Build/Evaluation/Evaluator.cs#L1738) doesn't expand them before passing to SDK resolvers.\r\n\r\n---\r\n\r\nCross-referencing [my SharpGen branch](https://github.com/SharpGenTools/SharpGenTools/pull/161).",
  "state": "CLOSED",
  "createdAt": "2020-05-12T08:45:46Z",
  "updatedAt": "2024-02-21T17:03:53Z",
  "closedAt": "2020-08-10T21:56:43Z",
  "author": {
    "login": "andrew-boyarshin"
  },
  "labels": [
    "needs-design",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "This is not supported as SDKs are parsed before any part of the project like properties, items, etc.  I have an open issue to log an error if you try to put expandable characters in there.\r\n\r\nhttps://github.com/microsoft/msbuild/issues/1518",
        "createdAt": "2020-05-12T15:49:59Z",
        "updatedAt": "2020-05-12T15:49:59Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "@jeffkl \r\n> This is not supported as SDKs are parsed before any part of the project like properties, items, etc.\r\n\r\nEven explicit imports? I was under impression these were evaluated simultaneously with the properties during the 1st pass. That's why you can put a `Condition` on an `Import`.\r\n\r\n> I have an open issue to log an error if you try to put expandable characters in there.\r\n\r\nWell, logging is great, but isn't it better to just expand the properties (and log error only when evaluation has failed)?\r\n\r\nI use explicit imports, without this working I have to force `PackageVersion` to always be sth like `42.42.42`, and even then, this issue makes it impossible to run tests after building a tagged release.\r\nI can put together a PR for that, if MSBuild team considers it okay.",
        "createdAt": "2020-05-12T15:58:55Z",
        "updatedAt": "2020-05-12T16:07:21Z",
        "author": {
          "login": "andrew-boyarshin"
        }
      },
      {
        "body": "Yes technically explicit imports would be possible to make work.  But we also need to consider the pros and cons of making it work in one scenario (`<Import />`) but not in another (`<Project Sdk=\"\" />` and `<Sdk />`).  I'm a little worried that it would cause confusion.  That said, `<Import />` elements have conditions and are different from `<Project />` but `<Sdk />` _looks_ the same but is treated a lot differently under the covers.",
        "createdAt": "2020-05-12T16:07:22Z",
        "updatedAt": "2020-05-12T16:07:22Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "@jeffkl but is _this_ consistency worth more than feature-completeness? From my PoV, `<Import />` is already inconsistent. Some properties are evaluated, some are not. It's the choice between 2 inconsistencies, one is more feature-complete than the other, and that one actually blocks some legitimate scenarios.",
        "createdAt": "2020-05-12T16:10:42Z",
        "updatedAt": "2020-05-12T16:10:42Z",
        "author": {
          "login": "andrew-boyarshin"
        }
      },
      {
        "body": "As an alternative you can put the version info in a global.json as described at https://docs.microsoft.com/en-us/visualstudio/msbuild/how-to-use-project-sdk?view=vs-2019#how-project-sdks-are-resolved",
        "createdAt": "2020-05-14T20:35:04Z",
        "updatedAt": "2020-05-14T20:35:04Z",
        "author": {
          "login": "japj"
        }
      },
      {
        "body": "@japj but that doesn't allow referencing MSBuild properties, does it? This is kind of the whole point of this issue. Imagine there is a lot of logic to compute version property. There is no way to use the computed value to resolve SDK. There is no benefit from moving from explicit versioned SDK imports to (explicit non-versioned SDK imports)+(_global.json_).",
        "createdAt": "2020-05-15T02:57:18Z",
        "updatedAt": "2020-05-15T02:57:18Z",
        "author": {
          "login": "andrew-boyarshin"
        }
      },
      {
        "body": "The version of an imported SDK must match across the entire build session, so I'm not sure it makes sense to support property expansion there.\r\n\r\n> that one actually blocks some legitimate scenarios.\r\n\r\nCan you expand on that, please?",
        "createdAt": "2020-05-20T16:02:28Z",
        "updatedAt": "2020-05-20T16:02:28Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald SharpGen repo has a custom versioning logic. If repo is built on local PC (not via Azure DevOps CI), version string is `$(VersionPrefix)-local` (sth like `2.0.0-local`), whereas on CI it can either be a release build (version string is taken verbatim from build environment variable), or a nightly build (with `VersionSuffix` generated by AzDO, like `2.0.0-ci.1024`). This logic is, naturally, in Directory.Build.props. The repo dev workflow steps are:\r\n* Build\r\n* Pack\r\n* Copy built `*.nupkg`s to `SdkTests\\LocalPackages`\r\n* Restore & Build & Run `SdkTests\\SdkTests.sln`\r\n\r\nSdkTests must know the just-built package version to restore. This is only possible if these properties become expandable. I have implemented a workaround for now (change all non-release builds to use 42.42.42 as a version), but that still makes it impossible to run `SdkTests` when building a tagged release.\r\n\r\nI have already fixed this issue in my local MSBuild branch and I've refactored `ProjectImportElement` along the way. It still needs some work (add proper tests, for instance).\r\n\r\nBy the way, one *can* inject properties visible in `<Project Sdk=\"...\" />` and `<Sdk />` via command line or via Directory.Build.rsp. It's just a matter of knowing how flexible MSBuild really is (or how to make it so).",
        "createdAt": "2020-05-20T17:48:19Z",
        "updatedAt": "2020-05-20T17:55:59Z",
        "author": {
          "login": "andrew-boyarshin"
        }
      },
      {
        "body": "> one can inject properties visible in `<Project Sdk=\"...\" />` and `<Sdk />` via command line or via `Directory.Build.rsp`.\r\n\r\nThis is what I wanted to do. See: https://github.com/microsoft/msbuild/issues/1518#issuecomment-329839989\r\n\r\n> https://github.com/microsoft/msbuild/pull/5378#issuecomment-643624644\r\n\r\nI personally welcome this change but if we're allowing versions then we can move the `MinimumVersion`/`MaximumVersion` representation to global json. Thus we don't need to add additional version attributes. Either we specify a version or don't, which will infer from global json. For SDK packages from NuGet, specifying dependencies of required base SDK packages should be more than enough for resolving dependent SDKs transitively. `NuGetSdkResolver` should be able to do just that!",
        "createdAt": "2020-06-13T13:55:05Z",
        "updatedAt": "2020-06-13T13:55:05Z",
        "author": {
          "login": "Nirmal4G"
        }
      }
    ]
  }
}