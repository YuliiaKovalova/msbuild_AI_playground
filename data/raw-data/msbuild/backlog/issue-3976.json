{
  "number": 3976,
  "title": "In strict mode do not allow undefined variables to return empty string",
  "body": "The number of times I meant $(Foo) vs @(Foo) and burned 10 minutes debugging suggests this is a common mistake.",
  "state": "OPEN",
  "createdAt": "2018-11-30T17:04:18Z",
  "updatedAt": "2024-02-13T09:55:29Z",
  "closedAt": null,
  "author": {
    "login": "chamons"
  },
  "labels": [
    "Feature: Warning Waves"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Love it! This has been a problem for us with large build refactors that change the props import sequence, like migration to SDK-style projects and Central Package Management. We have to just spot-check some and check the conceptual props import sequence makes conceptual sense. One potential impediment in our build, I found that pre-restore evaluations can run into this too easily if a props file is loaded that depends on an expected nuget package's props. Hope this is related; apologies if I'm missing some subtlety or better solutions here.",
        "createdAt": "2024-02-12T20:54:53Z",
        "updatedAt": "2024-02-12T20:54:53Z",
        "author": {
          "login": "JustinSchneiderPBI"
        }
      },
      {
        "body": "Marking as an idea for #1777 ",
        "createdAt": "2024-02-13T09:55:28Z",
        "updatedAt": "2024-02-13T09:55:28Z",
        "author": {
          "login": "stan-sz"
        }
      }
    ]
  }
}