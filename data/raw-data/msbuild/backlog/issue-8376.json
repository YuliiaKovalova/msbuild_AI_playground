{
  "number": 8376,
  "title": "doc: `ProjectReference` for an executable project",
  "body": "Document the use case from https://github.com/dotnet/msbuild/issues/7000: `ProjectReference` for an executable project:\r\n\r\n_I have two projects : RootProject and ChildProcess. Both are executables, and RootProject starts ChildProcess.exe as part of its work._\r\n\r\nHow to properly configure build for this case?",
  "state": "OPEN",
  "createdAt": "2023-01-31T16:15:59Z",
  "updatedAt": "2024-01-31T08:15:16Z",
  "closedAt": null,
  "author": {
    "login": "vlada-shubina"
  },
  "labels": [
    "backlog",
    "triaged",
    "gathering-feedback"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Team triage: Let's collect feedback on the interest in this issue.",
        "createdAt": "2023-02-14T14:41:43Z",
        "updatedAt": "2023-02-14T15:22:04Z",
        "author": {
          "login": "AR-May"
        }
      },
      {
        "body": "I have been battling this for a few weeks as part of a larger problem of getting an MSIX packaging project to build correctly. My particular case: Executable `USCRAM.exe` depends on executable `USCRAM.WinRTProxy.Server.exe`, hereafter referred to as \"WinRTProxy\". Three things to note here:\r\n1) WinRTProxy must be available in the `bin` directory of USCRAM so I can run and debug USCRAM in Visual Studio.\r\n2) I cannot add WinRTProxy to the Programs list in the MSIX project because this will create an installation entry for it, which is not appropriate.\r\n3) WinRTProxy is published as a self-contained _single-file_ executable, so unlike the linked issue #7000, I do not have any issues with DLL files not being copied. Any PDB files generated are copied fine with my method, however.\r\n\r\nMy method, in a nutshell, involves writing a custom Target that, in turn, invokes the Publish target on WinRTProxy.\r\n\r\n**USCRAM.csproj:**\r\n```xml\r\n<Target Name=\"PublishWinRTProxy\" AfterTargets=\"BeforeBuild\">\r\n\t<!--\r\n\t\tPublishItemsOutputGroup:\r\n\t\thttps://github.com/dotnet/sdk/blob/7b6e4f6954956dad9cd00050a5cdc4195686f189/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.Publish.targets\r\n\t\thttps://learn.microsoft.com/en-us/visualstudio/msbuild/msbuild-task?view=vs-2022\r\n\t\r\n\t\tRebaseOutputs=\"true\" is required because some files emitted by TargetOutputs use relative paths that need to be adjusted for this project.\r\n\t-->\r\n\r\n\t<MSBuild Projects=\"..\\WinRT\\USCRAM.WinRTProxy.Server\\USCRAM.WinRTProxy.Server.csproj\" Targets=\"Publish;PublishItemsOutputGroup\" RebaseOutputs=\"true\">\r\n\t\t<Output TaskParameter=\"TargetOutputs\" PropertyName=\"WinRTProxyTargetPath\" />\r\n\t</MSBuild>\r\n\r\n\t<Message Text=\"WinRTProxy TargetOutputs is '$(WinRTProxyTargetPath)'\" Importance=\"low\" />\r\n\t\r\n\t<ItemGroup>\r\n\t\t<Content Include=\"$(WinRTProxyTargetPath)\" CopyToOutputDirectory=\"PreserveNewest\" />\r\n\t</ItemGroup>\r\n</Target>\r\n```\r\n\r\n**USCRAM.WinRTProxy.Server.csproj:**\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\t<PropertyGroup>\r\n\t\t<OutputType>Exe</OutputType>\r\n\t\t<TargetFramework>net7.0-windows10.0.17763.0</TargetFramework>\r\n\t\t<ImplicitUsings>enable</ImplicitUsings>\r\n\t\t<Nullable>enable</Nullable>\r\n\t\t<StartupObject>WinRTProxyServer.Program</StartupObject>\r\n\t\t<SelfContained>true</SelfContained>\r\n\t\t<PublishSingleFile>true</PublishSingleFile>\r\n\t\t<RuntimeIdentifier>win-x64</RuntimeIdentifier>\r\n\t</PropertyGroup>\r\n\r\n\t<!-- ...snip... -->\r\n\r\n</Project>\r\n```\r\n\r\nThe Publish target emits files `USCRAM.WinRTProxy.Server.exe` and a PDB file `USCRAM.WinRTProxy.Server.pdb` into directory `src\\WinRT\\USCRAM.WinRTProxy.Server\\bin\\Release\\net7.0-windows10.0.17763.0\\win-x64\\publish`. The list of files is captured by the `TargetOutputs` property on the `MSBuild` task, which is then passed into a `Content` element. The `Content` element is important because this is how it informs MSBuild that the files are dependencies. Thus when a Build or Rebuild is performed on USCRAM, the files appear in `bin` and are also copied correctly by the MSIX packaging project. \ud83d\udc4c",
        "createdAt": "2023-04-22T02:41:12Z",
        "updatedAt": "2023-04-22T02:41:12Z",
        "author": {
          "login": "Trinitek"
        }
      },
      {
        "body": "I have the same case as @Trinitek: two exe projects, main.exe and helper.exe. Main.exe wants to call helper.exe via the `Process.Start`.\r\nI was able to configure the main.exe build process to do the following\r\n* build and publish helper.exe to get the ready-to-use exe file.\r\n* harvest the output of the `publish` target \r\n* copy the harvested build artefacts as the `Content` to the main.exe output folder.\r\n\r\nThis seems to work for the simple scenarios, but I have not been able to configure the dependency tracking in the incremental builds.\r\nFor example, I have both main.exe and helper.exe built and up-to-date (so, the build artefacts match the sources). Then I change sources for the helper.exe and hit F5 to run Main.exe\r\n\r\nExpected behaviour: changes in the helper.exe will be detected, causing the main.exe to be built (as it depends on the build artefacts of the helper.exe). Then the helper.exe is build (as a part of the main.exe build process) and the up-to-date helper.exe build artefacts are copied to the main.exe output folder.\r\n\r\nActual behaviour: msbuild checks the status of the main.exe and sees that the build artifacts (of the main.exe) match the sources, then no further build actions are performed.\r\n\r\nI will be happy to see documentation which will cover such a case, including such a details",
        "createdAt": "2023-11-24T18:00:39Z",
        "updatedAt": "2023-11-24T18:00:39Z",
        "author": {
          "login": "snechaev"
        }
      },
      {
        "body": "> Actual behaviour: msbuild checks the status of the main.exe and sees that the build artifacts (of the main.exe) match the sources, then no further build actions are performed.\n\nAre you sure this is checked by MSBuild and not by [Fast Up-to-Date Check](https://github.com/dotnet/project-system/blob/main/docs/up-to-date-check.md)?",
        "createdAt": "2023-11-24T18:12:22Z",
        "updatedAt": "2023-11-24T18:12:22Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "> Are you sure this is checked by MSBuild and not by [Fast Up-to-Date Check](https://github.com/dotnet/project-system/blob/main/docs/up-to-date-check.md)?\r\n\r\nWhen was FUTDC added? I seem to recall the same out-of-date issue at the time of writing in April, but I habitually rebuild the solution which triggers a re-publish anyway, so it was not an issue for me personally.",
        "createdAt": "2023-11-24T19:10:10Z",
        "updatedAt": "2023-11-24T19:10:10Z",
        "author": {
          "login": "Trinitek"
        }
      },
      {
        "body": "@KalleOlaviNiemitalo , sorry, my initial point was that I just don't know how to tell the build system (msbuild or VS) how to track such additional dependencies (so, we need to check if the final build artefact in the main project output `main\\bin\\debug\\helper.exe` matches the sources of the other project `helper.csproj` and act accordingly if the anything in the `helper.csproj` has been changed). \r\n\r\nI tried a lot of things with `ProjectReference` (pretty mach the same as described in the https://github.com/dotnet/msbuild/issues/7000) without luck.\r\n\r\nThanks for the tip, we'll try the FUTDC.\r\n\r\nAnyway, if the documentation for this case will be released, I think that some notes or references on how to get it to work in the simple F5 scenario in VS will be very helpful, even if such a functinality is a not handled directly by the msbuild.",
        "createdAt": "2023-11-24T19:17:18Z",
        "updatedAt": "2023-11-24T19:17:18Z",
        "author": {
          "login": "snechaev"
        }
      }
    ]
  }
}