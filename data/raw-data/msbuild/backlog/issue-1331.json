{
  "number": 1331,
  "title": "Add structured binary logger to MSBuild",
  "body": "To improve diagnostics for builds, MSBuild should include a binary logger that can produce a structured and compressed diagnostic log. The logger should be included by default and easily turned on, e.g. by adding a `/bl` switch similar to `/fl` which produces a text file log. The log file should be as as small as possible in size (compressed) and minimal impact to build performance/memory to encourage users to turn it on all the time. This should be especially useful in CI scenarios where a full diagnostic log is too large and intermittent issues are therefor hard to diagnose.\r\n\r\nMy original idea and proof of concept used the pre-existing binary serialization on log event objects to produce a binary serialized log. I was able to get this working and the compressed size was <10% the size of a full diagnostic log file. I liked this approach as it would allow to potentially de-serialize log event objects and \"replay\" them to an existing ILogger. For example, one could produce a text log of a specified verbosity or an XML log to use in a viewer (like https://github.com/KirillOsenkov/MSBuildStructuredLog).",
  "state": "CLOSED",
  "createdAt": "2016-11-10T18:18:53Z",
  "updatedAt": "2024-02-21T17:24:23Z",
  "closedAt": "2017-08-11T22:48:25Z",
  "author": {
    "login": "AndyGerlicher"
  },
  "labels": [
    "Area: Debuggability",
    "needs-design",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "KirillOsenkov"
      }
    ]
  },
  "milestone": {
    "title": "MSBuild 15.3"
  },
  "comments": {
    "nodes": [
      {
        "body": "If you wrap the binary serialized stream in a GZipStream, it should compress substantially because of all those very similar strings you get in logs.\n",
        "createdAt": "2016-11-11T03:02:21Z",
        "updatedAt": "2016-11-11T03:02:21Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "Binary Serialization is coming back in .NET Standard 2.0, but it's not a format that's going to be compatible across different runtimes, operating systems, or processor architectures, so it doesn't seem appropriate to use as a logging format.\n",
        "createdAt": "2016-11-11T03:36:04Z",
        "updatedAt": "2016-11-11T03:36:04Z",
        "author": {
          "login": "dsplaisted"
        }
      },
      {
        "body": "@dsplaisted agree, that's why I haven't pursued that any further. I just liked the idea that we could run the binary format through an existing logger. The MSBuildStructuredLog could use that without having to understand the binary format because it can already attach as a logger.\n",
        "createdAt": "2016-11-11T23:39:18Z",
        "updatedAt": "2016-11-11T23:39:18Z",
        "author": {
          "login": "AndyGerlicher"
        }
      },
      {
        "body": "I also like the idea of replayability.\r\n\r\nAs for saving space, I've had huge savings of space (500 MB XML -> 3 MB binary) by employing two tricks:\r\n\r\n1. Deduplicate all strings through a string table\r\n2. Compress everything at the end using GZipString like @danmosemsft suggests\r\n\r\nThe details about my format are here:\r\nhttps://github.com/KirillOsenkov/MSBuildStructuredLog/wiki/Log-Format\r\n\r\nThe downsides I ran into is that it's not a streaming format, i.e. it keeps accumulating everything in memory before writing it out in one fell swoop at the end. This way you achieve string deduplication, however for large builds 32-bit MSBuild.exe runs out of memory. Workarounds are to use 64-bit MSBuild.exe or one should investigate distributed loggers (or another way to accumulate the logger data in a separate 64-bit process).",
        "createdAt": "2016-12-07T22:22:39Z",
        "updatedAt": "2016-12-07T22:22:39Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "This would also be helpful in CLI to generate useful failure messages. For example, if we had programatic access to property & item values after a failure occurs then we could use those to give feedback. For example, we could inspect the value of `TargetFrameworks` to tell the user `--framework netcoreapp10` does not exist in the project.",
        "createdAt": "2016-12-20T06:01:11Z",
        "updatedAt": "2016-12-20T06:01:11Z",
        "author": {
          "login": "TheRealPiotrP"
        }
      },
      {
        "body": "Hey, @KirillOsenkov did this for 15.3! See #1747",
        "createdAt": "2017-08-11T22:48:25Z",
        "updatedAt": "2017-08-11T22:48:25Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}