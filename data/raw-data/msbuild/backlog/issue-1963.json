{
  "number": 1963,
  "title": "Speedup Compiling by making partial assembly .dlls",
  "body": "Hi,\r\nMaybe as an idea to speed the inner cycle for developers [run/fix code/compile/run/...], and because some projects have tens/hundreds of files, and the developer might be just changing one or two of in several projects in the same time, to fix an issue or add new feature, and all the other source code are not touched.\r\n\r\nso if the compiler, compiles the hole assembly, it will take time, but if compiling per project folder [main folders/sub folders], it would speed things a lot.\r\n\r\nSo, lets say you have the following Solution structure:\r\n**Solution SolABC**\r\n----   **Project PrjA**\r\n------------  Folder A\r\n-------------------- SubFolder A1\r\n-------------------- SubFolder A2\r\n-------------------- SubFolder A3\r\n------------  Folder B\r\n-------------------- SubFolder B1\r\n-------------------- SubFolder B2\r\n-------------------- SubFolder B3\r\n------------  Folder C\r\n------------  Folder D\r\n----   **Project PrjB**\r\n------------  Folder A\r\n-------------------- SubFolder A1\r\n-------------------- SubFolder A2\r\n------------  Folder B\r\n-------------------- SubFolder B1\r\n\r\n**then instead of emitting two dll files:**\r\nPrjA.dll\r\nPrjB.dll\r\n\r\n**the compiler in debug mode will emit:**\r\n**for Project PrjA:**\r\n----PrjA.Folder A.SubFolder A1.dll\r\n----PrjA.Folder A.SubFolder A2.dll\r\n----PrjA.Folder A.SubFolder A3.dll\r\n----PrjA.Folder B\r\n----PrjA.Folder B.SubFolder B1.dll\r\n----PrjA.Folder B.SubFolder B2.dll\r\n----PrjA.Folder B.SubFolder B3.dll\r\n----PrjA.Folder C.dll\r\n----PrjA.Folder D.dll\r\n**Project PrjB**\r\n----PrjB.Folder A.SubFolder A1\r\n----PrjB.Folder A.SubFolder A2\r\n----PrjB.Folder A.SubFolder B1\r\n\r\n\r\nand maybe adding an option in the VS options, to specify how many files[threshold] in a folder/subfolder, that if exceeded it make the folder susceptible to being emitted to its own .dll, and have a way to make the reference system see them as one .dll, even that its separated into multiple partial .dlls.\r\n\r\nits exactly like partial classes, that the developer can make multiple partial files, but the system looks at them as one class, making partial .dlls for one assembly/project, but the system looks at them as one .dll.\r\n\r\nbut when compiling for release, the compiler compiles each project as one .dll, as before.\r\nthis i think might speed things a lot.\r\n\r\n",
  "state": "CLOSED",
  "createdAt": "2017-04-11T10:27:37Z",
  "updatedAt": "2024-02-21T17:20:01Z",
  "closedAt": "2017-04-11T16:04:58Z",
  "author": {
    "login": "reader-man"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "This is an interesting idea, similar to the way static libraries work in C++. However, it's not something MSBuild can do alone--the C# compiler would have to support it, and then the build system would need to use that support. I think the best place for this suggestion would be to the C# compiler team at https://github.com/dotnet/roslyn/issues. I'm going to close this since it's currently unactionable, but we can reopen to track the build-system part of the work if the compiler team implements it.",
        "createdAt": "2017-04-11T16:04:58Z",
        "updatedAt": "2017-04-11T16:04:58Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}