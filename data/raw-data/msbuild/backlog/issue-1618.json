{
  "number": 1618,
  "title": "Update construct seems to update all items regardless of match when run in target",
  "body": "``` XML\r\n<Project>\r\n  <ItemGroup>\r\n     <X Include=\"A;B;C\" />\r\n     <X Update=\"B\" Metadata=\"Just on B\" />\r\n     <X Update=\"NonExistent\" Metadata=\"Useless\" />\r\n  </ItemGroup>\r\n\r\n  <Target Name=\"Build\">\r\n    <Warning Text=\"Before in-target update: %(X.Identity) %(X.Metadata)\" />\r\n    \r\n   <ItemGroup>\r\n      <X Update=\"A\" Metadata=\"Just on A\" />\r\n      <X Update=\"NonExistent\" Metadata=\"Huh\" />\r\n   </ItemGroup>\r\n      \r\n   <Warning Text=\"After in-target update: %(X.Identity) %(X.Metadata)\" />\r\n </Target>\r\n</Project>\r\n```\r\n\r\nExpected after target runs:\r\n* A has Metadata= \"Just on A\" and B has Metadata \"Just on B\", C has no Metadata=\"\"\r\n\r\nActual:\r\n* They all have Metadata=\"Huh\"\r\n\r\n```\r\nC:\\temp\\test.proj(10,5): warning : Before in-target update: A\r\nC:\\temp\\test.proj(10,5): warning : Before in-target update: B Just on B\r\nC:\\temp\\test.proj(10,5): warning : Before in-target update: C\r\nC:\\temp\\test.proj(17,4): warning : After in-target update: A Huh\r\nC:\\temp\\test.proj(17,4): warning : After in-target update: B Huh\r\nC:\\temp\\test.proj(17,4): warning : After in-target update: C Huh\r\n```\r\n\r\n@AndyGerlicher @rainersigwald \r\n",
  "state": "CLOSED",
  "createdAt": "2017-01-27T08:10:15Z",
  "updatedAt": "2024-02-21T17:22:32Z",
  "closedAt": "2017-03-08T18:30:00Z",
  "author": {
    "login": "nguerrera"
  },
  "labels": [
    "bug",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "tag @cdmihai ",
        "createdAt": "2017-01-27T08:15:39Z",
        "updatedAt": "2017-01-27T08:15:39Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "I think this is a bad interaction between metadata-as-attributes and the fact that items are handled differently in targets.\r\n\r\nUpdate was possible before the `Update` attribute, but only in targets. Inside a target you can use the old form (set metadata as though in an `ItemDefinitionGroup`, batching over the items with conditions).\r\n\r\n```xml\r\n      <X Metadata=\"Just on A\" Condition=\"'%(X.Identity)' == 'A'\" />\r\n      <X Metadata=\"Huh\" Condition=\"'%(X.Identity)' == 'NonExistent'\" />\r\n```\r\n\r\nThat's the best workaround for this.\r\n\r\nSurprising things:\r\n* This isn't an error. We didn't implement Update attributes inside targets, and I would have expected this to report \"invalid syntax\". I suspect it's not because of metadata-as-attributes, but\r\n* Update doesn't appear to actually be getting set as metadata. Maybe we're correctly rejecting it as a reserved not-eligible-for-as-attribute metadata name, but not pushing up an error?",
        "createdAt": "2017-01-27T15:25:16Z",
        "updatedAt": "2017-01-27T15:25:16Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "This needs to at least be an error for RTW.\r\n\r\nI have a case (investigating perf issue with GetTargetFrameworkProperties) where it is very difficult to express as a condition.\r\n\r\nBasically, I get a item group back from `<MSBuild>` task where the items have OriginalItemSpec pointing back to the project items and I want to update the project items passed in with metadata returned.\r\n\r\nI imagined something like this would work and read nicely:\r\n\r\n``` XML\r\n<MSBuild Projects=\"@(X)\">\r\n   <Output TaskParameter=\"TargetOutputs\" ItemName=\"Y\" />\r\n</MSBuild>\r\n<ItemGroup>\r\n    <X Update=\"%(Y.OriginalItemSpec)\">\r\n        <Metadata>%(Y.Metadata)</Metadata>\r\n   </X>\r\n</ItemGroup>\r\n```\r\n\r\nVariants using conditions did not work out either:\r\n\r\n``` XML\r\n<X  Metadata=\"%(Y.Metadata)\" Condition=\"%(X.Identity) == %(Y.OriginalItemSpec)\" />\r\n```\r\n\r\nI'm still trying to wrap my head around https://github.com/Microsoft/msbuild/pull/1018#r78638528 and I can't get it to work. I'd love to find a readable expression of this pattern.\r\n\r\n\r\n          \r\n",
        "createdAt": "2017-01-27T15:50:09Z",
        "updatedAt": "2017-01-27T15:53:18Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "Btw, it does error out if I use Update=\"\" saying Update can't be empty so it partially knows this is special and not metadata.",
        "createdAt": "2017-01-27T16:57:55Z",
        "updatedAt": "2017-01-27T16:57:55Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "Beat my head against this for quite a while. I think you should just write a Task to do this. The syntax you want wouldn't do what you expect either due to the vagaries of batching rules.",
        "createdAt": "2017-01-27T21:52:34Z",
        "updatedAt": "2017-01-27T21:52:34Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "OK. I'll write a task. :) Still pushing for that error in RTW.",
        "createdAt": "2017-01-27T21:54:17Z",
        "updatedAt": "2017-01-27T21:54:17Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "Included in  #1124",
        "createdAt": "2017-03-08T18:30:00Z",
        "updatedAt": "2017-03-08T18:30:00Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "NOTE: This was closed because it's a subset of #1124, not because it was fixed.",
        "createdAt": "2018-12-04T19:14:25Z",
        "updatedAt": "2018-12-04T19:14:25Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "> This needs to at least be an error for RTW.\r\n> \r\n> I have a case (investigating perf issue with GetTargetFrameworkProperties) where it is very difficult to express as a condition.\r\n> \r\n> Basically, I get a item group back from `<MSBuild>` task where the items have OriginalItemSpec pointing back to the project items and I want to update the project items passed in with metadata returned.\r\n> \r\n> I imagined something like this would work and read nicely:\r\n> \r\n> ```\r\n> <MSBuild Projects=\"@(X)\">\r\n>    <Output TaskParameter=\"TargetOutputs\" ItemName=\"Y\" />\r\n> </MSBuild>\r\n> <ItemGroup>\r\n>     <X Update=\"%(Y.OriginalItemSpec)\">\r\n>         <Metadata>%(Y.Metadata)</Metadata>\r\n>    </X>\r\n> </ItemGroup>\r\n> ```\r\n> \r\n> Variants using conditions did not work out either:\r\n> \r\n> ```\r\n> <X  Metadata=\"%(Y.Metadata)\" Condition=\"%(X.Identity) == %(Y.OriginalItemSpec)\" />\r\n> ```\r\n> \r\n> I'm still trying to wrap my head around [#1018 (comment)](https://github.com/Microsoft/msbuild/pull/1018#r78638528) and I can't get it to work. I'd love to find a readable expression of this pattern.\r\n\r\nI'm trying to do exactly what @nguerrera is trying to do here with similar results.",
        "createdAt": "2019-03-06T15:28:16Z",
        "updatedAt": "2019-03-06T15:28:16Z",
        "author": {
          "login": "jimitndiaye"
        }
      },
      {
        "body": "I've just run across this and it was _extremely_ confusing.",
        "createdAt": "2023-08-11T04:57:45Z",
        "updatedAt": "2023-08-11T04:57:45Z",
        "author": {
          "login": "gulbanana"
        }
      }
    ]
  }
}