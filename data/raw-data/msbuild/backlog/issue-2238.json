{
  "number": 2238,
  "title": "MSBuild File globbing is slow on large directory layouts (e.g. node_modules)",
  "body": "Issue ported from:\r\n- developer community (**workaround available**) https://developercommunity.visualstudio.com/content/problem/50110/visual-studio-is-extremely-slow-when-node-modules.html\r\n- internal https://devdiv.visualstudio.com/DevDiv/MSBuild/_workitems?id=447520",
  "state": "CLOSED",
  "createdAt": "2017-06-21T23:49:19Z",
  "updatedAt": "2024-02-21T17:18:23Z",
  "closedAt": "2018-03-27T16:38:06Z",
  "author": {
    "login": "cdmihai"
  },
  "labels": [
    "Feature - Globbing",
    "Area: Performance",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "cdmihai"
      }
    ]
  },
  "milestone": {
    "title": "MSBuild 15.5"
  },
  "comments": {
    "nodes": [
      {
        "body": "From internal investigation:\r\n\r\n> When there's a large number of files, the Build FileMatcher.GetFilesRecursive allocates a huge amount of strings.\r\n> \r\n> Name                                                                                                                                                             Inc %              Inc\r\n>  Type System.String                                                                                                                                               55.8    1,446,726,272\r\n> + microsoft.build.ni![COLD] Microsoft.Build.Shared.FileUtilities.PathsEqual(System.String, System.String)                                                         27.3      708,307,520\r\n> |+ Microsoft.Build!Microsoft.Build.Shared.FileMatcher+<>c__DisplayClass29_0.<GetFilesRecursive>b__0(class System.String)                                          27.3      708,307,520\r\n> | + microsoft.build.ni![COLD] Microsoft.Build.Shared.FileMatcher.GetFilesRecursive(System.Collections.Generic.IList`1, RecursionState, System.String, Boolean,    27.3      708,307,520\r\n> |  + microsoft.build.ni!FileMatcher.GetFilesRecursive                                                                                                             27.3      707,986,112\r\n> |  |+ microsoft.build.ni!FileMatcher.GetFiles                                                                                                                     27.3      707,986,112\r\n> |  | + microsoft.build.ni!EngineFileUtilities.GetFileList                                                                                                         27.3      707,986,112\r\n> |  |  + microsoft.build.ni!EngineFileUtilities.GetFileListEscaped                                                                                                 27.3      707,986,112\r\n> |  |   + microsoft.build.ni!Microsoft.Build.Evaluation.LazyItemEvaluator`4+LazyItemOperation[System.__Canon,System.__Canon,System.__Canon,System.__Canon].Apply   27.3      707,986,112\r\n> |  |    + microsoft.build.ni!Microsoft.Build.Evaluation.LazyItemEvaluator`4+MemoizedOperation[System.__Canon,System.__Canon,System.__Canon,System.__Canon].Appl   27.3      707,986,112\r\n> |  |     + microsoft.build.ni!Microsoft.Build.Evaluation.LazyItemEvaluator`4+LazyItemList[System.__Canon,System.__Canon,System.__Canon,System.__Canon].ComputeI   27.3      707,986,112\r\n> |  |      + microsoft.build.ni!Microsoft.Build.Evaluation.LazyItemEvaluator`4+LazyItemList[System.__Canon,System.__Canon,System.__Canon,System.__Canon].GetItem   27.3      707,986,112\r\n> |  |       + microsoft.build.ni!Microsoft.Build.Evaluation.LazyItemEvaluator`4+<>c[System.__Canon,System.__Canon,System.__Canon,System.__Canon].<GetAllItems>b_   27.3      707,986,112\r\n> |  |        + microsoft.build.ni!System.Linq.Buffer`1[Microsoft.Build.Evaluation.LazyItemEvaluator`4+ItemData[System.__Canon,System.__Canon,System.__Canon,Syst   27.3      707,986,112\r\n> |  |         + microsoft.build.ni!System.Linq.OrderedEnumerable`1+<GetEnumerator>d__1[Microsoft.Build.Evaluation.LazyItemEvaluator`4+ItemData[System.__Canon,Sy   27.3      707,986,112\r\n> |  |          + microsoft.build.ni!System.Collections.Generic.List`1[Microsoft.Build.Evaluation.LazyItemEvaluator`4+ItemData[System.__Canon,System.__Canon,Syst   27.3      707,986,112\r\n> |  |           + microsoft.build.ni!System.Linq.Enumerable.ToList[Microsoft.Build.Evaluation.LazyItemEvaluator`4+ItemData[System.__Canon,System.__Canon,System.   27.3      707,986,112\r\n> |  |            + microsoft.build.ni!Microsoft.Build.Evaluation.LazyItemEvaluator`4[System.__Canon,System.__Canon,System.__Canon,System.__Canon].GetAllItems()    27.3      707,986,112\r\n> |  |             + microsoft.build.ni!Microsoft.Build.Evaluation.Evaluator`4[System.__Canon,System.__Canon,System.__Canon,System.__Canon].Evaluate()              27.3      707,986,112\r\n> |  |              + microsoft.build.ni!Microsoft.Build.Evaluation.Evaluator`4[System.__Canon,System.__Canon,System.__Canon,System.__Canon].Evaluate(Microsoft.B   27.3      707,986,112\r\n> |  |               + microsoft.build.ni!Project.Reevaluate                                                                                                        27.3      707,986,112\r\n> |  |                + microsoft.build.ni!Project.ReevaluateIfNecessary                                                                                            27.3      707,986,112\r\n> |  |                 + microsoft.build.ni!Project.Initialize                                                                                                      27.3      707,986,112\r\n\r\n> Relevant code is here:\r\n> https://github.com/Microsoft/msbuild/blob/master/src/Shared/FileMatcher.cs#L765\r\n> \r\n>                                 excludeNextSteps[i].Subdirs.Any(excludedDir => FileUtilities.PathsEqual(excludedDir, subdir)))\r\n> \r\n> This Any() creates an allocation for the delegate (every iteration of the loop), and it runs the PathsEqual function per every exclude item per every sub directory - this can be a lot.\r\n> The function to compare two paths allocates at least 4 strings and two char arrays (from ToSlash() and TrimTrailingSlashes() )\r\n> https://github.com/Microsoft/msbuild/blob/master/src/Shared/FileUtilities.cs#L1042-L1056\r\n> \r\n> This could be mitigated by running the comparison on less files (ideal). Alternatively this can be written using a custom comparison function which ignores trailing slashes and considers forward/backward slashes to be equivalent. Then the comparisons can be done without allocation\r\n\r\n",
        "createdAt": "2017-06-21T23:55:08Z",
        "updatedAt": "2017-06-21T23:55:08Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "The orthogonal optimization to back out of certain excluded directories is tracked here: #2000 ",
        "createdAt": "2017-06-21T23:57:08Z",
        "updatedAt": "2017-06-21T23:57:08Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "Might be related: https://developercommunity.visualstudio.com/content/problem/73964/visual-studio-msbuild-scans-every-file-in-an-aspne.html",
        "createdAt": "2017-07-08T02:08:00Z",
        "updatedAt": "2017-07-08T02:08:00Z",
        "author": {
          "login": "jasselin"
        }
      },
      {
        "body": "@jasselin It is related, though I suspect #2000 would have a larger impact in that scenario. Since source files in ASP.NET Core projects are included by glob, the rename operation is essentially:\r\n\r\n1. Rename the file (on disk), telling MSBuild nothing about it\r\n1. Ask MSBuild to reevaluate the project, discovering all files referred to by the globs\r\n\r\nThe latter step hits these performance limitations.",
        "createdAt": "2017-07-10T15:02:45Z",
        "updatedAt": "2017-07-10T15:02:45Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald Is there any workaround like opting out of globbing and reverting to the old way of including files in a project? I tried setting EnableDefaultItems to True and including every file manually but it doesn't seem to help.",
        "createdAt": "2017-07-10T23:30:38Z",
        "updatedAt": "2017-07-10T23:30:38Z",
        "author": {
          "login": "jasselin"
        }
      },
      {
        "body": "I'm seeing what looks like a similar issue in a slightly different codepath (ComparePathsNoThrow -> NormalizePathForComparisonNoThrow):\r\n\r\n```\r\nName | Inc % | Inc\r\n-- | -- | --\r\n\\|\\|\\| \\|\\|\\|\\|\\| \\|\\| \\|\\|\\| \\|\\|\\|+ microsoft.build!ItemFragment.MatchCount | 40.7 | 18,266\r\n\\|\\|\\| \\|\\|\\|\\|\\| \\|\\| \\|\\|\\| \\|\\|\\|\\|+ microsoft.build!Microsoft.Build.Internal.EngineFileUtilities+<>c__DisplayClass6_0.<GetFileSpecMatchTester>b__0(class System.String) | 40.2 | 18,042\r\n\\|\\|\\| \\|\\|\\|\\|\\| \\|\\| \\|\\|\\| \\|\\|\\|\\|\\|+ microsoft.build!FileUtilities.ComparePathsNoThrow | 40.1 | 18,021\r\n\\|\\|\\| \\|\\|\\|\\|\\| \\|\\| \\|\\|\\| \\|\\|\\|\\|\\|\\|+ microsoft.build!FileUtilities.NormalizePathForComparisonNoThrow | 38.8 | 17,441\r\n\\|\\|\\| \\|\\|\\|\\|\\| \\|\\| \\|\\|\\| \\|\\|\\|\\|\\|\\|\\|+ microsoft.build!FileUtilities.GetFullPathNoThrow | 24.6 | 11,029\r\n\\|\\|\\| \\|\\|\\|\\|\\| \\|\\| \\|\\|\\| \\|\\|\\|\\|\\|\\|\\|+ OTHER <<mscorlib.ni!Path.Combine>> | 6.0 | 2,690\r\n\\|\\|\\| \\|\\|\\|\\|\\| \\|\\| \\|\\|\\| \\|\\|\\|\\|\\|\\|\\|+ OTHER <<clr!COMString::Replace>> | 2.5 | 1,126\r\n\\|\\|\\| \\|\\|\\|\\|\\| \\|\\| \\|\\|\\| \\|\\|\\|\\|\\|\\|\\|+ microsoft.build!FileUtilities.PathIsInvalid | 1.7 | 762\r\n\\|\\|\\| \\|\\|\\|\\|\\| \\|\\| \\|\\|\\| \\|\\|\\|\\|\\|\\|\\|+ microsoft.build!FileUtilities.get_InvalidFileNameChars | 1.3 | 573\r\n\\|\\|\\| \\|\\|\\|\\|\\| \\|\\| \\|\\|\\| \\|\\|\\|\\|\\|\\|\\|+ OTHER <<?!?>> | 0.4 | 193\r\n\\|\\|\\| \\|\\|\\|\\|\\| \\|\\| \\|\\|\\| \\|\\|\\|\\|\\|\\|\\|+ OTHER <<clr!COMString::IndexOfCharArray>> | 0.3 | 147\r\n\\|\\|\\| \\|\\|\\|\\|\\| \\|\\| \\|\\|\\| \\|\\|\\|\\|\\|\\|\\|+ microsoft.build!FileUtilities.NormalizePath | 0.0 | 8\r\n\\|\\|\\| \\|\\|\\|\\|\\| \\|\\| \\|\\|\\| \\|\\|\\|\\|\\|\\|\\|+ OTHER <<clr!JIT_NewArr1>> | 0.0 | 3\r\n\\|\\|\\| \\|\\|\\|\\|\\| \\|\\| \\|\\|\\| \\|\\|\\|\\|\\|\\|+ OTHER <<?!?>> | 0.1 | 43\r\n\\|\\|\\| \\|\\|\\|\\|\\| \\|\\| \\|\\|\\| \\|\\|\\|\\|\\|\\|+ OTHER <<mscorlib.ni!Path.Combine>> | 0.0 | 12\r\n\\|\\|\\| \\|\\|\\|\\|\\| \\|\\| \\|\\|\\| \\|\\|\\|\\|\\|\\|+ microsoft.build!FileUtilities.GetFullPathNoThrow | 0.0 | 10\r\n\\|\\|\\| \\|\\|\\|\\|\\| \\|\\| \\|\\|\\| \\|\\|\\|\\|\\|\\|+ microsoft.build!FileUtilities.PathIsInvalid | 0.0 | 8\r\n\\|\\|\\| \\|\\|\\|\\|\\| \\|\\| \\|\\|\\| \\|\\|\\|\\|\\|\\|+ OTHER <<clr!COMString::Replace>> | 0.0 | 7\r\n\\|\\|\\| \\|\\|\\|\\|\\| \\|\\| \\|\\|\\| \\|\\|\\|\\|\\|\\|+ OTHER <<clr!ThePreStub>> | 0.0 | 1\r\n\\|\\|\\| \\|\\|\\|\\|\\| \\|\\| \\|\\|\\| \\|\\|\\|\\|\\|+ microsoft.build!FileUtilities.NormalizePathForComparisonNoThrow | 0.0 | 4\r\n\\|\\|\\| \\|\\|\\|\\|\\| \\|\\| \\|\\|\\| \\|\\|\\|\\|+ microsoft.build!FileUtilities.ComparePathsNoThrow | 0.0 | 3\r\n\r\n\r\n```",
        "createdAt": "2017-07-17T22:58:38Z",
        "updatedAt": "2017-07-17T22:58:38Z",
        "author": {
          "login": "dsplaisted"
        }
      },
      {
        "body": "@jasselin Sorry, missed this:\r\n\r\n>Is there any workaround like opting out of globbing and reverting to the old way of including files in a project? \r\n\r\nYes, you can always avoid the implicit globbing and explicitly specify the files of your choice, either individually or via your own more-specific glob. ~It looks like you'll have to do it [for each item type](https://github.com/dotnet/sdk/blob/a4bceb67b160c72318a581d87d52796e4fa31794/src/Tasks/Microsoft.NET.Build.Tasks/build/Microsoft.NET.Sdk.DefaultItems.targets#L20-L22), unfortunately. I would have also expected that setting `EnableDefaultItems` to false would do the trick.~",
        "createdAt": "2017-07-17T23:10:25Z",
        "updatedAt": "2017-07-18T14:49:54Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald Setting `EnableDefaultItems` to false will disable the implicit items for all of the item types.  See for example https://github.com/dotnet/sdk/blob/a4bceb67b160c72318a581d87d52796e4fa31794/src/Tasks/Microsoft.NET.Build.Tasks/build/Microsoft.NET.Sdk.DefaultItems.props#L25-L28",
        "createdAt": "2017-07-17T23:12:25Z",
        "updatedAt": "2017-07-17T23:12:25Z",
        "author": {
          "login": "dsplaisted"
        }
      },
      {
        "body": "You're right! Corrected my comment.",
        "createdAt": "2017-07-17T23:14:12Z",
        "updatedAt": "2017-07-17T23:14:12Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald @dsplaisted Still having the same issue with EnableDefaultItems set to false. It seems devenv.exe is still scanning every subdirectory. Is it MSBuild or Visual Studio related?\r\n\r\n**edit:** msbuild.exe does not seem to scan the directories anymore, but devenv.exe still does.",
        "createdAt": "2017-07-17T23:36:32Z",
        "updatedAt": "2017-07-17T23:49:14Z",
        "author": {
          "login": "jasselin"
        }
      },
      {
        "body": "@jasselin How are you setting `EnableDefaultItems`?",
        "createdAt": "2017-07-18T00:50:37Z",
        "updatedAt": "2017-07-18T00:50:37Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "@rainersigwald @cdmihai We should sync on path manipulation - I'm in the process of rewriting CPS's to avoid much the same issues.",
        "createdAt": "2017-07-18T00:51:44Z",
        "updatedAt": "2017-07-18T00:51:44Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "@davkean Yes, to \"False\".",
        "createdAt": "2017-07-18T00:54:31Z",
        "updatedAt": "2017-07-18T00:55:11Z",
        "author": {
          "login": "jasselin"
        }
      },
      {
        "body": "@jasselin Sorry my question is \"_how_ do you set it?\"",
        "createdAt": "2017-07-18T00:56:57Z",
        "updatedAt": "2017-07-18T00:56:57Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "@davkean Sorry, misread.\r\n\r\nIn the csproj file.\r\n\r\n```\r\n  <PropertyGroup>\r\n    <AssemblyName>App</AssemblyName>\r\n    <PackageId>App</PackageId>\r\n    <EnableDefaultItems>False</EnableDefaultItems>\r\n  </PropertyGroup>\r\n```",
        "createdAt": "2017-07-18T00:58:56Z",
        "updatedAt": "2017-07-18T00:58:56Z",
        "author": {
          "login": "jasselin"
        }
      },
      {
        "body": "If it could help diagnose, I found out the whole thing originates from this:;\r\n\r\n`  87,1%   MoveNext  \u2022  8\u00a0268 ms  \u2022  Microsoft.VisualStudio.ProjectSystem.Items.SourceItemsService+<SetUnvaluatedIncludesCoreWithGlobbingHelperAsync>d__117.MoveNext()\r\n    84,4%   ReevaluateIfNecessary  \u2022  8\u00a0011 ms  \u2022  Microsoft.Build.Evaluation.Project.ReevaluateIfNecessary()\r\n      84,4%   ReevaluateIfNecessary  \u2022  8\u00a0011 ms  \u2022  Microsoft.Build.Evaluation.Project.ReevaluateIfNecessary(ILoggingService, ProjectLoadSettings)\r\n        84,4%   Reevaluate  \u2022  8\u00a0011 ms  \u2022  Microsoft.Build.Evaluation.Project.Reevaluate(ILoggingService, ProjectLoadSettings)\r\n          84,4%   Evaluate  \u2022  8\u00a0011 ms  \u2022  Microsoft.Build.Evaluation.Evaluator`4.Evaluate(IEvaluatorData, ProjectRootElement, ProjectLoadSettings, Int32, PropertyDictionary, ILoggingService, IItemFactory, IToolsetProvider, ProjectRootElementCache, BuildEventContext, ProjectInstance)\r\n            84,3%   Evaluate  \u2022  8\u00a0003 ms  \u2022  Microsoft.Build.Evaluation.Evaluator`4.Evaluate()\r\n              83,3%   GetAllItems  \u2022  7\u00a0910 ms  \u2022  Microsoft.Build.Evaluation.LazyItemEvaluator`4.GetAllItems()\r\n  ...",
        "createdAt": "2017-07-18T01:03:18Z",
        "updatedAt": "2017-07-18T01:03:58Z",
        "author": {
          "login": "jasselin"
        }
      },
      {
        "body": "@cdmihai @rainersigwald @AndyGerlicher I did some investigation into this, and did a local fix for optimizing `ComparePathsNoThrow` which significantly speeded things up, but on further investigation I think we have an O(n^2) perf issue with the following code pattern:\r\n\r\n```xml\r\n<None Update=\"@(None)\" Foo=\"Bar\" />\r\n```\r\n\r\nAdding this line to a very simple project with around 11,000 `None` items changed the build time from 0.63 seconds to 32 seconds (after applying my other fix, before then it took about 8 minutes).\r\n\r\n`UpdateOperation.Apply` [calls `ItemSpec.MatchesItem`](https://github.com/Microsoft/msbuild/blob/07c3b3392dc05e0e3aba18bdec235a374aa72301/src/Build/Evaluation/LazyItemEvaluator.UpdateOperation.cs#L36) for each item currently in the list.  When there is a fragment of type `ItemExpressionFragment`, then it ends up comparing the item against each referenced item, which when using the pattern `<None Update=\"@(None)\" />` is all of the items in the list.  So each item ends up [being compared](https://github.com/Microsoft/msbuild/blob/07c3b3392dc05e0e3aba18bdec235a374aa72301/src/Build/Evaluation/ItemSpec.cs#L359) with all the items in the list, resulting in an n^2 runtime.\r\n",
        "createdAt": "2017-07-18T02:06:13Z",
        "updatedAt": "2017-07-18T02:06:13Z",
        "author": {
          "login": "dsplaisted"
        }
      },
      {
        "body": "@rainersigwald @davkean @dsplaisted I did some further testing and I am pretty sure `EnableDefaultItems` is ignored or overridden by Visual Studio. When I update or add something to `DefaultItemExcludes`, I see (using procmon) that the pattern I added is looked for in every subdirectories. Is there a way to see the MSBuild output when called from within devenv.exe so I can confirm the value used for `EnableDefaultItems`?",
        "createdAt": "2017-07-18T14:44:55Z",
        "updatedAt": "2017-07-18T14:44:55Z",
        "author": {
          "login": "jasselin"
        }
      },
      {
        "body": "@jasselin Yes; check out https://github.com/dotnet/project-system/blob/master/docs/design-time-builds.md#diagnosing-design-time-builds -- because you're using a new-sdk project, follow the \"new project system\" instructions.\r\n\r\nI wonder if this is related to the VS-ignores-conditions-so-it-can-display-source-files-from-all-flavors-of-the-project behavior?",
        "createdAt": "2017-07-18T15:36:02Z",
        "updatedAt": "2017-07-18T15:36:02Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald Sadly, I think you're right. When I comment the following sections, everything is lightning fast.\r\n\r\nhttps://github.com/dotnet/sdk/blob/a4bceb67b160c72318a581d87d52796e4fa31794/src/Tasks/Microsoft.NET.Build.Tasks/build/Microsoft.NET.Sdk.DefaultItems.props#L25-L33\r\n\r\nhttps://github.com/aspnet/websdk/blob/dev/src/ProjectSystem/Microsoft.NET.Sdk.Web.ProjectSystem.Targets/netstandard1.0/Microsoft.NET.Sdk.Web.ProjectSystem.props#L27-L45\r\n\r\nI was able to confirm using the \"Build - Design-time\" output that `EnableDefaultItems` is set to `False`. Is there anything we can do to make this work properly?\r\n\r\n**edit:** That seems to do it, am I wrong?\r\n```\r\n  <ItemGroup Condition=\" $(EnableDefaultItems) != 'true' \">\r\n    <Compile Remove=\"**/*\" />\r\n    <EmbeddedResource Remove=\"**/*\" />\r\n    <None Remove=\"**/*\" />\r\n    <Content Remove=\"**/*\" />\r\n  </ItemGroup>\r\n```",
        "createdAt": "2017-07-18T20:10:37Z",
        "updatedAt": "2017-07-18T23:22:45Z",
        "author": {
          "login": "jasselin"
        }
      },
      {
        "body": "I have a project with two **nodes_modules** folders which make Visual Studio extremely slow. After\r\nadding `<EnableDefaultItems>false</EnableDefaultItems>` the performance is better but then there seems to be a problem when precompiling razor views: the <projectname>.PrecompiledViews.dll is generated but it is empty.\r\n\r\nWhen setting `<EnableDefaultItems>true</EnableDefaultItems>` the dll is generated with the razor views included.\r\n\r\nDoes anyone has the same problem?",
        "createdAt": "2017-09-25T14:45:04Z",
        "updatedAt": "2017-09-25T14:45:35Z",
        "author": {
          "login": "DavidUrting"
        }
      },
      {
        "body": "@DavidUrting See [this comment](https://github.com/dotnet/cli/issues/5918#issuecomment-331740052) for a workaround which should addrcess the perf issue you are hitting.",
        "createdAt": "2017-09-25T19:36:38Z",
        "updatedAt": "2017-09-25T19:36:38Z",
        "author": {
          "login": "dsplaisted"
        }
      },
      {
        "body": "```XML\r\n  <PropertyGroup>\r\n    <DefaultItemExcludes>$(DefaultItemExcludes);wwwroot\\node_modules\\**</DefaultItemExcludes>\r\n  </PropertyGroup>\r\n```\r\nHelped me.",
        "createdAt": "2017-10-05T07:38:49Z",
        "updatedAt": "2017-10-05T07:40:15Z",
        "author": {
          "login": "ofir-shapira-como"
        }
      },
      {
        "body": "Does not work for me.",
        "createdAt": "2017-10-09T19:28:48Z",
        "updatedAt": "2017-10-09T19:28:48Z",
        "author": {
          "login": "StarpTech"
        }
      },
      {
        "body": "@StarpTech, where is your `node_modules` located?",
        "createdAt": "2017-10-10T05:01:38Z",
        "updatedAt": "2017-10-10T05:01:38Z",
        "author": {
          "login": "ofir-shapira-como"
        }
      },
      {
        "body": "@ofir-shapira-como wwwroot/node_modules",
        "createdAt": "2017-10-10T08:47:54Z",
        "updatedAt": "2017-10-10T08:47:54Z",
        "author": {
          "login": "StarpTech"
        }
      },
      {
        "body": "@ofir-shapira-como forget it seems to work know, thank you.",
        "createdAt": "2017-10-10T08:50:11Z",
        "updatedAt": "2017-10-10T08:50:11Z",
        "author": {
          "login": "StarpTech"
        }
      },
      {
        "body": "There's been a lot of perf work in this area, so we're going to close this. If you have a specific case that's still bad, please open a new issue with repro steps.",
        "createdAt": "2018-03-27T16:38:06Z",
        "updatedAt": "2018-03-27T16:38:06Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}