{
  "number": 11364,
  "title": "msbuild clean wrong files during compilation",
  "body": "### Issue Description\n\nWe have below structure in repository. When we are compiling individual folder solutions separately everything works correctly.  We have also combined solution which contains all projects from all folders. If we will compile that solution everything works correctly. However, if we will compile combined solution first (compile correctly), and  then we will compile just project2 (some code changes), msbuild will delete files which are part of the project1 from output directory even if project1 was not compiled at all.  It seems that project2 FileListAbsolute.txt in obj compilation folder contain list of files from Project1 (probably generated when combined solution was compiled ?). As files which are not part of compiled solution are deleted from target location application will not start anymore. We have to go back and recompile Folder1 solution again. This is affecting productivity a lot and if people are not aware about this, they even spend lot of time investigating why those files are disappearing. \n\nPlease see attached binary log from compilation. Im not able to attach projects\\solutions for reproducibility as those are protected IP.\n\n![Image](https://github.com/user-attachments/assets/dc2a6782-b288-40d8-b753-397c480bf53f)\n\n[msbuild.DeletingWrongFiles.zip](https://github.com/user-attachments/files/18622090/msbuild.DeletingWrongFiles.zip)\n\n[MI.Biz.Plugin.Registration.csproj.FileListAbsolute.txt](https://github.com/user-attachments/files/18622099/MI.Biz.Plugin.Registration.csproj.FileListAbsolute.txt)\n\nFolder1\n - projects1\n   - xml files in output dir\n - solution for Folder1\n\nFolder2\n - projects2\n   -  dependency on project1\n - solution for Folder2\n\nCombinedSolution (Folder1\\Folder2)\n\n\n\n### Steps to Reproduce\n\nCompile combined solution first. Compile individual projects afterwards.\n\n### Expected Behavior\n\nFiles which are not related\\owned by compiled project\\solution should not be deleted from compilation output directory.\n\n### Actual Behavior\n\nFiles which are not part of compiled project\\solution are deleted from compilation output directory.\n\n### Analysis\n\n_No response_\n\n### Versions & Configurations\n\nMSBuild version 17.12.12+1cce77968 for .NET Framework\n17.12.12.57101",
  "state": "OPEN",
  "createdAt": "2025-01-31T17:16:29Z",
  "updatedAt": "2025-05-13T10:05:52Z",
  "closedAt": null,
  "author": {
    "login": "payn-git"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "triaged"
  ],
  "comments": {
    "nodes": [
      {
        "body": "Adding binary log for combined solution compilation which will lead to situation where Project2 FileListAbsolute.txt contains files which are not part of the project itself.\n\n[CombinedSolution.zip](https://github.com/user-attachments/files/18622414/CombinedSolution.zip)",
        "createdAt": "2025-01-31T17:48:58Z",
        "author": {
          "login": "payn-git"
        }
      },
      {
        "body": "@maridematte Any update on this ? This issue affecting quite few developers in our company.",
        "createdAt": "2025-02-21T05:19:54Z",
        "author": {
          "login": "payn-git"
        }
      },
      {
        "body": "@payn-git, I attempted to replicate the bug following the described steps but couldn\u2019t reproduce it. Is it still occurring on your side?",
        "createdAt": "2025-03-22T01:34:11Z",
        "author": {
          "login": "crispim1411"
        }
      },
      {
        "body": "Yes its still happening and 100% reproducible. We are now on 17.13.19+0d9f5a35a for .NET Framework. Please see attached outputs from compilation. Performed actions:\n\n1. clone repository with source code (multiple root level folders where each contains solution for all projects inside folder)\n2. download all compile time dependencies for whole repo\n3. generate combined \"monster solution\" which combine all solutions from root folders to single solution\n4. compile generated monster solution\n5. Check output in one of the projects \"obj\" folder.  *.csproj.FileListAbsolute.txt contains list of files which are not part of this project, they are part of the project which is configured as compile time dependency\n6. compile sub solution file from one of the root folders (one which contains project with *.csproj.FileListAbsolute.txt which is listing files which doesnt belong to given project)\n7. all files listed in *.csproj.FileListAbsolute.txt are deleted from target location even if they dont belong to compiled project...\n\nI guess question is why is msbuild including files from referenced projects A inside *.csproj.FileListAbsolute.txt of project which has A configured as compile time dependency when generated monster solution is compiled. PS: exactly same is happening for each end every project. Mean if project have compile time dependency to A all files, all files from A are listed in *.csproj.FileListAbsolute.tx for such project. And when project is compiled individually all such files are deleted during compilation.\n\nPS: for some reason I cant attach output form compilation. Upload will fail with no specific reason..... I can provide binlogs, generated monster solution and content of obj folder content from compilation on both monster solution and sub-solution....\n\n",
        "createdAt": "2025-03-24T19:27:10Z",
        "author": {
          "login": "payn-git"
        }
      },
      {
        "body": "And I just saw this :). It seems that's on purpose, but its not explaining why. And how to avoid that as this behavior is causing problems. Not sure in which scenario this is actually desired behavior.\n\nhttps://learn.microsoft.com/en-us/visualstudio/msbuild/msbuild-targets?view=vs-2022\n\nGetCopyToOutputDirectoryItems\n**Get all project items that may need to be transferred to the output directory.\nThis includes baggage items from transitively referenced projects. It would appear\nthat this target computes full transitive closure of content items for all referenced\nprojects; however that is not the case. It only collects the content items from its\nimmediate children and not children of children.** The reason this happens is that\nthe ProjectReferenceWithConfiguration list that is consumed by _SplitProjectReferencesByFileExistence\nis only populated in the current project and is empty in the children. The empty list\ncauses _MSBuildProjectReferenceExistent to be empty and terminates the recursion.\n\n<Target Name=\"GetCopyToOutputDirectoryItems\"\n        Returns=\"@(AllItemsFullPathWithTargetPath)\"\n        KeepDuplicateOutputs=\" '$(MSBuildDisableGetCopyToOutputDirectoryItemsOptimization)' == '' \"\n        DependsOnTargets=\"$(GetCopyToOutputDirectoryItemsDependsOn)\">",
        "createdAt": "2025-03-24T19:46:56Z",
        "author": {
          "login": "payn-git"
        }
      }
    ]
  }
}