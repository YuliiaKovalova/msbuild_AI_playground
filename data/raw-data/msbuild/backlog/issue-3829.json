{
  "number": 3829,
  "title": "New msbuild package update on Ubuntu crashes environment",
  "body": "### Steps to reproduce\r\n\r\nI have an Ubuntu environment for my .NET Core 2.1 project. Today apt reported there are some updates available. After upgrading my environment broke, failing to load projects in the solution.\r\n\r\nThese packages were updated: mono-llvm-tools msbuild msbuild-sdkresolver\r\n\r\nThis is the error given:\r\nProject 'MyProject' load failed: The SDK 'Microsoft.NET.Sdk.Razor' specified could not be found.\r\n\r\nThat SDK is referenced in 2 files:\r\n/usr/lib/mono/msbuild/15.0/bin/Sdks/Microsoft.NET.Sdk.Web/Sdk/Sdk.props\r\n/usr/lib/mono/msbuild/15.0/bin/Sdks/Microsoft.NET.Sdk.Web/Sdk/Sdk.targets\r\nAs a workaround I commented out a reference to that SDK in those files and now my environment is working again.\r\n\r\nI don't know if it's a mono or msbuild issue. The only thing I know is that it was working before the update of those packages and stopped working afterwards. Nothing else changed.\r\n\r\nVersion info:\r\n\r\n\r\nSetting up mono-llvm-tools (3.6.0+mono201805011452-0xamarin1+ubuntu1804b1) ...                                                                                           \r\nSetting up msbuild-sdkresolver (1:15.8+xamarinxplat.2018.07.31.22.43-0xamarin5+ubuntu1804b1) ...                                                                         \r\nSetting up msbuild (1:15.8+xamarinxplat.2018.07.31.22.43-0xamarin5+ubuntu1804b1) ... \r\n\r\nMono JIT compiler version 5.14.0.177 (tarball Mon Aug  6 09:07:45 UTC 2018)\r\nCopyright (C) 2002-2014 Novell, Inc, Xamarin Inc and Contributors. www.mono-project.com\r\n        TLS:           __thread\r\n        SIGSEGV:       altstack\r\n        Notifications: epoll\r\n        Architecture:  amd64\r\n        Disabled:      none\r\n        Misc:          softdebug \r\n        Interpreter:   yes\r\n        LLVM:          yes(3.6.0svn-mono-/)\r\n        GC:            sgen (concurrent by default)\r\n\r\nMicrosoft (R) Build Engine version 15.1.8.0 ( Wed Sep  5 19:27:37 UTC 2018) for Mono",
  "state": "CLOSED",
  "createdAt": "2018-10-05T09:05:53Z",
  "updatedAt": "2024-02-21T17:10:59Z",
  "closedAt": "2019-01-03T16:50:04Z",
  "author": {
    "login": "mvodanovic"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "@radical Can you take a look? I'd expect the `msbuild-sdkresolver` package to include the NuGet SDK resolver, but I don't actually know the Mono distribution details.",
        "createdAt": "2018-10-05T15:33:39Z",
        "updatedAt": "2018-10-05T15:33:39Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "It would not be expected to use the NuGet SDK resolver to find Microsoft.NET.Sdk.Razor. It is a depdency of Microsoft.NET.Sdk.Web. What's happening here is that resolution has fallen back to the default Sdk resolver, which found a default web sdk without its razor sdk dependency. If mono msbuild bundles web sdk for use without .NET Core SDK, it needs to also bundle the razor sdk.\r\n\r\nSee also https://github.com/OmniSharp/omnisharp-vscode/issues/2604#issuecomment-430330103",
        "createdAt": "2018-10-16T17:44:22Z",
        "updatedAt": "2018-10-16T21:24:15Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "Hmm I thought we're bundling Razor (https://github.com/mono/msbuild/blob/105cb8a15778bf32efa730b5125d1503e5b44629/mono/build/SdkVersions.txt#L4) but I indeed don't see it in my Mono install.",
        "createdAt": "2018-10-16T18:07:35Z",
        "updatedAt": "2018-10-16T18:07:35Z",
        "author": {
          "login": "akoeplinger"
        }
      },
      {
        "body": "Does a Mono install normally carry Microsoft.DotNet.MSBuildSdkResolver?\r\n\r\nFWIW, we are moving in the opposite direction in VS where we will not be putting any SDKs in the default MSBuildSdksPath.\r\n\r\nSee https://github.com/dotnet/cli/issues/6795\r\n\r\nThe problem with the default resolver is that it hides errors with the .NET Core SDK resolver, and it's very hard to diagnose. \r\n\r\nI suspect that some of the folks seeing razor failures are first having a hidden failure to resolve from .NET Core SDK, and then seeing that the default location doesn't have Razor as the only error message.",
        "createdAt": "2018-10-16T21:19:41Z",
        "updatedAt": "2018-10-16T21:19:41Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "Yes we do ship the Microsoft.DotNet.MSBuildSdkResolver cause afaik it was the only way to get SDK style projects to work.\r\n\r\nI'm not really deeply familiar with all of this though, @radical would be the subject matter expert (but he is out till end of this month).",
        "createdAt": "2018-10-16T22:34:23Z",
        "updatedAt": "2018-10-16T22:34:23Z",
        "author": {
          "login": "akoeplinger"
        }
      },
      {
        "body": "Any updates on this @radical / @akoeplinger?\r\n\r\nWould be great to see this resolved, all our web projects are broken due to this.\r\n\r\nUPDATE: Seems to have been fixed in Mono 5.18.0 (https://github.com/Microsoft/msbuild/issues/3829). Cheers!",
        "createdAt": "2018-12-27T18:10:40Z",
        "updatedAt": "2018-12-27T19:33:09Z",
        "author": {
          "login": "marchy"
        }
      },
      {
        "body": "Closing since @marchy reported it fixed.",
        "createdAt": "2019-01-03T16:50:04Z",
        "updatedAt": "2019-01-03T16:50:04Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}