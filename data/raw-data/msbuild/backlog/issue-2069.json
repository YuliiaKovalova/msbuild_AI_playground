{
  "number": 2069,
  "title": "Compile Remove with a wildcard removes more files than it should",
  "body": "_From @bording on May 5, 2017 23:20_\n\nI'm not entirely sure where this bug is best filed, but since I'm using the new project system to reproduce it, I figured I'd start here.\r\n\r\nI've got a NuGet package that brings in source files via the contentFiles mechanism. I need to be able to exclude certain files, so I added a `Compile` item with a wildcard pattern to remove them. That works correctly, however it seems to also remove files that aren't part of the pattern as well.\r\n\r\nI've pushed up a repo that demonstrates the problem here: https://github.com/bording/GlobbingProblem\r\n\r\nIf you look at the project file, you can see the following:\r\n\r\n```\r\n <ItemGroup>\r\n    <Compile Remove=\"$(NuGetPackageRoot)**\\Audit\\*.cs\" />\r\n  </ItemGroup>\r\n```\r\n\r\nThat removes the 5 files in the Audit folder as expected, but it also removes `ConfigureEndpointLearningTransport.cs`, which doesn't match the pattern at all.\r\n\r\nBefore remove:\r\n![before](https://cloud.githubusercontent.com/assets/753669/25767110/c2ca36f8-31c4-11e7-96ae-57e4cf920ddd.png)\r\n\r\nAfter remove:\r\n![after](https://cloud.githubusercontent.com/assets/753669/25767113/c72633b4-31c4-11e7-8113-8e3056baaa79.png)\r\n\r\nI've experimented with different wildcard patterns, and I can't see any discernible pattern to explain the behavior.\r\n\r\nFor example:\r\n```\r\n  <ItemGroup>\r\n    <Compile Remove=\"$(NuGetPackageRoot)**\\EndpointTemplates\\*.cs\" />\r\n  </ItemGroup>\r\n```\r\nRemoves files from the Pipeline and Recoverability folders as well.\r\n\n\n_Copied from original issue: dotnet/project-system#2134_",
  "state": "CLOSED",
  "createdAt": "2017-05-05T23:56:48Z",
  "updatedAt": "2024-02-21T17:19:18Z",
  "closedAt": "2017-06-06T22:16:56Z",
  "author": {
    "login": "davkean"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "cdmihai"
      }
    ]
  },
  "milestone": {
    "title": "MSBuild 15.3"
  },
  "comments": {
    "nodes": [
      {
        "body": "See also https://github.com/FakeItEasy/FakeItEasy/pull/1103 for another example. This is really weird. Looks like a serious bug in the globbing algorithm.",
        "createdAt": "2017-05-29T19:20:35Z",
        "updatedAt": "2017-05-29T19:20:35Z",
        "author": {
          "login": "thomaslevesque"
        }
      },
      {
        "body": "@AndyGerlicher Can you please triage this?",
        "createdAt": "2017-05-30T00:40:09Z",
        "updatedAt": "2017-05-30T00:40:09Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "This may be a bug in `ImmutableList<T>.Builder`. If I do the following replacement, everything works:\r\n\r\n```c#\r\n                //listBuilder.RemoveAll(itemData => items.Contains(itemData.Item));\r\n\r\n                var itemDatasToRemove = listBuilder.Where(itemData => items.Contains(itemData.Item)).ToList();\r\n\r\n                foreach (var itemToRemove in itemDatasToRemove)\r\n                {\r\n                    listBuilder.Remove(itemToRemove);\r\n                }\r\n```\r\n\r\nIt's quite hard to write a unit test for this. I'll try and reduce the repro and open a bug against corefx, and then go ahead and check this fix in.",
        "createdAt": "2017-06-01T21:00:15Z",
        "updatedAt": "2017-06-01T21:00:15Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "Worked around in #2162",
        "createdAt": "2017-06-06T22:16:56Z",
        "updatedAt": "2017-06-06T22:16:56Z",
        "author": {
          "login": "cdmihai"
        }
      }
    ]
  }
}