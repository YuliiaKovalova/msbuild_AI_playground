{
  "number": 2463,
  "title": "Need to build twice when modifying the csproj file",
  "body": "Hello\r\n\r\nI have the issue that I want to create an unsigned and a signed version of my product.\r\nFor this, I first build and pack the unsigned, then modify the csproj and then build again.\r\nFor some reason, the second build adds the wrong (the unsigned) nuget references into the generated package.\r\nIf I just build again, everything is then ok. It's 100% reproducable.\r\nI use cake for that. The cake file is: https://github.com/Roemer/FlaUI/blob/master/build.cake\r\nJust run Build, then Build-Signed. Now you have unsigned and signed assemblies in the nuget folder. Opening for example FlaUI.UIA2.Signed shows that it has a reference to FlaUI.Core (and not FlaUI.Core.Signed).\r\nIf you now run Build-Signed again and look at FlaUI.UIA2.Signed again, the reference is now correctly set to FlaUI.Core.Signed.\r\n\r\nWhat can be the cause of that?\r\n\r\nI use VS2017.3.2.\r\n\r\nThanks for your help.",
  "state": "CLOSED",
  "createdAt": "2017-08-22T21:22:35Z",
  "updatedAt": "2024-02-21T17:17:03Z",
  "closedAt": "2018-11-19T23:42:22Z",
  "author": {
    "login": "Roemer"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "I'm afraid this is likely to be dependent on how Cake implements its `MSBuild()` function. I suspect that what you're seeing is the MSBuild project-file cache in action, which prevents loading two versions of the same project within a single build.\r\n\r\nYou'll have to ask the Cake folks about that.\r\n\r\nBut in general, I'd recommend replacing the XML manipulation with logic based on properties, and invoking the second build with a different set of properties (perhaps something like `FlaUISign=true`). MSBuild will happily build the same project multiple times with different global properties (just make sure the outputs are orthogonal).",
        "createdAt": "2017-08-22T21:35:48Z",
        "updatedAt": "2017-08-22T21:35:48Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "It's pretty much 2 separate msbuild calls. The name of the output and everything is cotrect, just not the nuget project references. Anyway good hint. I will try something like https://msdn.microsoft.com/en-us/library/ms171481.aspx tomorrow.",
        "createdAt": "2017-08-22T21:43:57Z",
        "updatedAt": "2017-08-22T21:43:57Z",
        "author": {
          "login": "Roemer"
        }
      },
      {
        "body": "I somehow can't get it to work correctly :(\r\n\r\nI have added the following to the csproj:\r\n```xml\r\n<PropertyGroup Label=\"Signing\" Condition=\"'$(EnableSigning)'=='true'\">\r\n  <SignAssembly>true</SignAssembly>\r\n  <AssemblyOriginatorKeyFile>../../FlaUI.snk</AssemblyOriginatorKeyFile>\r\n  <PublicSign Condition=\"'$(OS)'!='Windows_NT'\">true</PublicSign>\r\n  <AssemblyName>FlaUI.Core.Signed</AssemblyName>\r\n  <OutputPath>bin\\$(Configuration)\\Signed</OutputPath>\r\n  <IntermediateOutputPath>obj\\$(Configuration)\\Signed</IntermediateOutputPath>\r\n</PropertyGroup>\r\n```\r\nand added `/p:EnableSigning=true` to the msbuild call.\r\n\r\nNow the generated assembly is FlaUI.Core.Signed.dll but the other assemblies which reference this and also generate a package still reference FlaUI.Core (instead of the signed one).\r\nEven rebuilding does not help.\r\nBut if I remove the `Condition=\"'$(EnableSigning)'=='true'\"` from the csproj, everything is correct.",
        "createdAt": "2017-08-23T07:56:40Z",
        "updatedAt": "2017-08-23T07:56:40Z",
        "author": {
          "login": "Roemer"
        }
      },
      {
        "body": "I think that the problem is that the project reference\r\n```\r\n  <ItemGroup Label=\"Project References\">\r\n    <ProjectReference Include=\"..\\FlaUI.Core\\FlaUI.Core.csproj\" />\r\n  </ItemGroup>\r\n```\r\ndoes not know anything abot the EnableSigning property and adds a reference to the \"default\" one. Is there any way to fix this like passing the reference this property?",
        "createdAt": "2017-08-23T09:26:39Z",
        "updatedAt": "2017-08-23T09:26:39Z",
        "author": {
          "login": "Roemer"
        }
      },
      {
        "body": "One (ugly) way to solve this would be to use assembly references instead of project references and point to the according dll (either in signed folder or not) but this is far from optimal.",
        "createdAt": "2017-08-24T09:17:29Z",
        "updatedAt": "2017-08-24T09:17:29Z",
        "author": {
          "login": "Roemer"
        }
      },
      {
        "body": "You shouldn't need to go down that road.\r\n\r\nAgain, I don't know much about Cake, but from the msbuild perspective,\r\n\r\n```\r\nmsbuild.exe your.sln /p:EnableSigning=true\r\n```\r\n\r\nor the equivalent API call sets that property for all projects in the solution (most probably ignore it). ProjectReferences should get a consistent view, especially since I from what you posted you're not using exotic metadata.\r\n\r\nI'd recommend looking through a log (perhaps a binary log viewed through https://github.com/KirillOsenkov/MSBuildStructuredLog) to try to see where things are going wrong. But I don't know how hard it is to convince Cake to produce such a thing.",
        "createdAt": "2017-08-24T15:33:09Z",
        "updatedAt": "2017-08-24T15:33:09Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I am not using cake until it works from command line right now.\r\nI currently use: `\"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Professional\\MSBuild\\15.0\\Bin\\msbuild.exe\" src\\FlaUI.sln /p:EnableSigning=true` with the same result: The references point to the wrong unsigned one. I'll try to get that structured log.",
        "createdAt": "2017-08-24T15:44:29Z",
        "updatedAt": "2017-08-24T15:44:29Z",
        "author": {
          "login": "Roemer"
        }
      },
      {
        "body": "@Roemer do I understand correctly that your problem is the dependency nodes of the resulting nuspec file?\r\n\r\nThe referenced package names are fixed at restore time so you'd need to do an `msbuild /t:Restore /p:EnableSigning=true` to fix that between builds. This is similar to https://github.com/NuGet/Home/issues/4790 but for the `PackageId` instead of just the version.",
        "createdAt": "2017-08-24T16:18:37Z",
        "updatedAt": "2017-08-24T16:18:37Z",
        "author": {
          "login": "dasMulli"
        }
      },
      {
        "body": "Oh, THAT would explain it!",
        "createdAt": "2017-08-24T16:26:54Z",
        "updatedAt": "2017-08-24T16:26:54Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Whoa awesome, that solves the problem although I do not fully understand why actually.\r\nMy situation:\r\nI have FlaUI.Core.csproj and FlaUI.UIA2.csproj\r\nFlaUI.UIA2 references (Project Reference) FlaUI.Core.\r\nIf I build the sln, I get two nuget packets and FlaUI.UIA2 correctly references FlaUI.Core in the nuget.\r\nNow I have this property `p:EnableSigning` which changes the assembly name by adding a .Signed and set the signing to `true`. If I now build the solution with this property, I get the correctly named nuget packages. But the nuget reference from FlaUI.UIA2.Signed points to FlaUI.Core instead of FlaUI.Core.Signed.\r\n\r\nIf I now add a Restore before a Build, everything works correct :)\r\n\r\nEdit: Found a desription on https://docs.microsoft.com/en-us/nuget/schema/msbuild-targets#restore-target\r\n> 1. Read all project to project references\r\n> 2. Read the project properties to find the intermediate folder and target frameworks\r\n> 3. Pass msbuild data to NuGet.Build.Tasks.dll\r\n> 4. Run restore\r\n> 5. Download packages\r\n> 6. Write assets file, targets, and props\r\n\r\nThanks again, this solved my issue here!",
        "createdAt": "2017-08-24T18:11:03Z",
        "updatedAt": "2017-08-24T18:12:42Z",
        "author": {
          "login": "Roemer"
        }
      },
      {
        "body": "Yes the point is that the dependencies that go into the nuspec are read from `obj\\project.assets.json` which is created at restore time from the values returned by the referenced projects. So if you have any properties that affect the resulting `PackageId` and `PackageVersion` names or the properties they are defaulted to (`AssemblyName`), they need to be set at restore time.",
        "createdAt": "2017-08-24T18:18:52Z",
        "updatedAt": "2017-08-24T18:18:52Z",
        "author": {
          "login": "dasMulli"
        }
      },
      {
        "body": "Even if I use different IntermediateOutputPath for the signed and unsigned builds?",
        "createdAt": "2017-08-24T18:22:42Z",
        "updatedAt": "2017-08-24T18:22:42Z",
        "author": {
          "login": "Roemer"
        }
      },
      {
        "body": "It still is not working 100% :/ The first time it works right and from then on it's wrong again.\r\nI build with Clean;Restore;Rebuild.\r\nIf I manually delete all bin/obj it works again.",
        "createdAt": "2017-08-24T18:25:48Z",
        "updatedAt": "2017-08-24T18:25:48Z",
        "author": {
          "login": "Roemer"
        }
      },
      {
        "body": "about the output paths:\r\nIt really only depends on how much headache medicine you have for when things go wrong \ud83d\ude02 . There are many properties involved that control the restore+build experience - NuGet has a `RestoreOutputPath` that should be the same as `BaseIntermediateOutputPath` which in turn controls `MSBuildProjectExtensionsPath` (=> auto-imported props/targets that nuget generates) and `ProjectAssetsFile` (=> dependency graph). E.g. see https://stackoverflow.com/questions/45575280/msbuild-nuget-restoreoutputpath-how-to-make-it-work.\r\n\r\nI guess we'd need to see a build log of a build that went wrong.. you can add `/bl` and zip+upload the resulting binary logfile here.\r\n\r\nWhat's also a bit annoying is that incremental builds have problems with things passed in as commandline argument since there may not be a file change that triggers targets to rebuild - e.g. pack targets might think that there's noting to do to regenerate the nuspec file in your `obj` directory.",
        "createdAt": "2017-08-24T18:34:51Z",
        "updatedAt": "2017-08-24T18:34:51Z",
        "author": {
          "login": "dasMulli"
        }
      },
      {
        "body": "Crazy idea:\r\n\r\n```xml\r\n<ItemGroup>\r\n  <NuGetPackInput Include=\"$(ProjectAssetsFile)\" Condition=\"Exists('$(ProjectAssetsFile)')\" />\r\n</ItemGroup>\r\n```\r\n\r\n\ud83d\udc46 in the csproj to make sure that the `GenerateNuspec` target always runs on restore changes even if all other inputs (build output) have not changed.",
        "createdAt": "2017-08-24T18:39:24Z",
        "updatedAt": "2017-08-24T18:41:58Z",
        "author": {
          "login": "dasMulli"
        }
      },
      {
        "body": "What I see in the log is; \r\n\r\n> Projekt \"E:\\Development\\MyGitHub\\FlaUI\\src\\FlaUI.sln\" auf Knoten \"1\", Restore Ziel(e).\r\n> ValidateSolutionConfiguration:\r\n>   Die Projektmappenkonfiguration \"Release|Any CPU\" wird erstellt.\r\n> Restore:\r\n>   Commit f\u00fcr Wiederherstellung wird ausgef\u00fchrt...\r\n>   Die Assetdatei wurde nicht ge\u00e4ndert. Das Schreiben der Assetdatei wird \u00fcbersprungen. Pfad: E:\\Development\\MyGitHub\\FlaUI\\sr\r\n>   c\\FlaUI.Core\\obj\\project.assets.json\r\n\r\nSo it skips the regeneration of the asset file for some reasons.",
        "createdAt": "2017-08-24T18:52:01Z",
        "updatedAt": "2017-08-24T18:52:01Z",
        "author": {
          "login": "Roemer"
        }
      },
      {
        "body": "Even Adding the NuGetPackInput does not change anything unfortunately. Best way currently is to delete the obj folder for th two builds.\r\n",
        "createdAt": "2017-08-24T18:55:47Z",
        "updatedAt": "2017-08-24T18:55:47Z",
        "author": {
          "login": "Roemer"
        }
      },
      {
        "body": "Interesting. There's also an `/p:RestoreForce=true` option for nuget restores now in 4.3 to disable their new \"no-op restore\" feature.",
        "createdAt": "2017-08-24T19:04:53Z",
        "updatedAt": "2017-08-24T19:04:53Z",
        "author": {
          "login": "dasMulli"
        }
      },
      {
        "body": "hmm interesting, let's try that one.",
        "createdAt": "2017-08-24T19:08:23Z",
        "updatedAt": "2017-08-24T19:08:23Z",
        "author": {
          "login": "Roemer"
        }
      },
      {
        "body": "That seems to finally do the trick.\r\nIn cake-term, my build now looks like:\r\n```csharp\r\nTask(\"Build\")\r\n    .IsDependentOn(\"Restore-NuGet-Packages\")\r\n    .Does(() =>\r\n{\r\n    var buildSettings = new MSBuildSettings {\r\n        Verbosity = Verbosity.Minimal,\r\n        ToolVersion = MSBuildToolVersion.VS2017,\r\n        Configuration = configuration,\r\n        PlatformTarget = PlatformTarget.MSIL,\r\n    }.AddFileLogger(new MSBuildFileLogger {\r\n        LogFile = \"./BuildLog.txt\",\r\n        MSBuildFileLoggerOutput = MSBuildFileLoggerOutput.All\r\n    });\r\n    // Restore and build\r\n    buildSettings.WithTarget(\"Restore\").WithTarget(\"Build\");\r\n    // Hide informational warnings for now\r\n    buildSettings.Properties.Add(\"WarningLevel\", new[] { \"3\" });\r\n    // Force restoring\r\n    buildSettings.Properties.Add(\"RestoreForce\", new[] { \"true\" });\r\n\r\n    // First build with default settings\r\n    MSBuild(slnFile, buildSettings);\r\n\r\n    // Second build with signing enabled\r\n    buildSettings.FileLoggers.First().LogFile = \"./BuildLogSigned.txt\";\r\n    buildSettings.Properties.Add(\"EnableSigning\", new[] { \"true\" });\r\n    MSBuild(slnFile, buildSettings);\r\n});\r\n```",
        "createdAt": "2017-08-24T19:20:47Z",
        "updatedAt": "2017-08-24T19:20:47Z",
        "author": {
          "login": "Roemer"
        }
      },
      {
        "body": "Ah I see you tried to call restore and build in the same invocation.. that's not very good.. https://github.com/Microsoft/msbuild/issues/2455",
        "createdAt": "2017-08-24T19:30:26Z",
        "updatedAt": "2017-08-24T19:30:26Z",
        "author": {
          "login": "dasMulli"
        }
      },
      {
        "body": "Can split that as well. But the RestoreForce seems to have helped definitely.",
        "createdAt": "2017-08-24T19:31:26Z",
        "updatedAt": "2017-08-24T19:31:26Z",
        "author": {
          "login": "Roemer"
        }
      },
      {
        "body": "I adjusted it to:\r\n```csharp\r\nTask(\"Build\")\r\n    .IsDependentOn(\"Restore-NuGet-Packages\")\r\n    .Does(() =>\r\n{\r\n    var buildSettings = new MSBuildSettings {\r\n        Verbosity = Verbosity.Minimal,\r\n        ToolVersion = MSBuildToolVersion.VS2017,\r\n        Configuration = configuration,\r\n        PlatformTarget = PlatformTarget.MSIL,\r\n    }.AddFileLogger(new MSBuildFileLogger {\r\n        LogFile = \"./BuildLog.txt\",\r\n        MSBuildFileLoggerOutput = MSBuildFileLoggerOutput.All\r\n    });\r\n    // Hide informational warnings for now\r\n    buildSettings.Properties.Add(\"WarningLevel\", new[] { \"3\" });\r\n    // Force restoring\r\n    buildSettings.Properties.Add(\"RestoreForce\", new[] { \"true\" });\r\n\r\n    // First build with default settings\r\n    buildSettings.Targets.Clear();\r\n    buildSettings.WithTarget(\"Restore\");\r\n    MSBuild(slnFile, buildSettings);\r\n    buildSettings.Targets.Clear();\r\n    buildSettings.WithTarget(\"Build\");\r\n    MSBuild(slnFile, buildSettings);\r\n\r\n    // Second build with signing enabled\r\n    buildSettings.FileLoggers.First().LogFile = \"./BuildLogSigned.txt\";\r\n    buildSettings.Properties.Add(\"EnableSigning\", new[] { \"true\" });\r\n    buildSettings.Targets.Clear();\r\n    buildSettings.WithTarget(\"Restore\");\r\n    MSBuild(slnFile, buildSettings);\r\n    buildSettings.Targets.Clear();\r\n    buildSettings.WithTarget(\"Build\");\r\n    MSBuild(slnFile, buildSettings);\r\n});\r\n```\r\nNo problems so far!",
        "createdAt": "2017-08-24T20:18:42Z",
        "updatedAt": "2017-08-24T20:18:42Z",
        "author": {
          "login": "Roemer"
        }
      },
      {
        "body": "Closing since the last comment had things working.",
        "createdAt": "2018-11-19T23:42:22Z",
        "updatedAt": "2018-11-19T23:42:22Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}