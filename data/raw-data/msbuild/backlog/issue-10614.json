{
  "number": 10614,
  "title": "[BuildCheck Suggestion]: Flag setting AssemblyName in Directory.Build.targets (or other 'core' values being changed after significant usage)",
  "body": "### Summary\n\nIt would be great to be able to detect an anti-pattern of some build assets taking a dependency on a Property or Item metadata and then changing that value in a destructive way later on in the build.\r\n\n\n### Background and Motivation\n\nIn SDK triage we responded to a user that had set `AssemblyName` to a custom value in their Directory.Build.targets and then was \r\nconfused when other build assets had already consumed that value by the time it was set. \n\n### Sample issue or antipattern that the check should be flagging\n\nA simple example would be to create a project and a `Directory.Build.targets` and set `AssemblyName` in the `Directory.Build.targets`  then run `dotnet run`.\n\n### Sample output\n\n```\r\nMSB0666 - property changed after being consumed. The property <property> has already been used by <other property> at <usage location>, but was set to <value> at <setting location>. This change will not be seen by <property>\r\n```\r\n",
  "state": "OPEN",
  "createdAt": "2024-09-03T21:16:48Z",
  "updatedAt": "2025-03-26T17:33:19Z",
  "closedAt": null,
  "author": {
    "login": "baronfel"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "BuildCheck Suggestion",
    "triaged",
    "Area: BuildCheck"
  ],
  "comments": {
    "nodes": [
      {
        "body": "+1 I fell into this trap, being a newbie to msbuild customization. Hours lost :)\n\nEven a simple documentation on what should/should not be in .targets file would be helpful. ",
        "createdAt": "2025-03-26T17:33:17Z",
        "author": {
          "login": "devlie"
        }
      }
    ]
  }
}