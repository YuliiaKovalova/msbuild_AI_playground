{
  "number": 3039,
  "title": "Perf: potential lock contention in ProjectRootElementCache.Get",
  "body": "When we look into performance traces of parallel project loading work, we noticed some lock contentions in ProjectRootElementCache.Get method.  In one trace we noticed it was blocked 60ms.\r\n\r\nThe code is using a single lock to control to access the cache, and also read file into XmlDocument, when it does not exist.  The later one can be slow on a slow disk.  When PPL is enabled, multiple projects are evaluated, and this becomes more a problem. \r\n\r\nIf the code can pull out the logic to load a project file out of the lock region, it will allow other threads to access the cache for other files in the same project collection.",
  "state": "CLOSED",
  "createdAt": "2018-02-28T21:59:57Z",
  "updatedAt": "2024-02-21T17:14:15Z",
  "closedAt": "2021-07-26T06:20:32Z",
  "author": {
    "login": "lifengl"
  },
  "labels": [
    "backlog",
    "Area: Performance",
    "CPS",
    "Priority:1",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "AR-May"
      }
    ]
  },
  "milestone": {
    "title": "VS 17.0"
  },
  "comments": {
    "nodes": [
      {
        "body": "When Jialong tries to open a solution with 1600 projects, this lock contention issue became much more serious, and the main reason to slow down the phase of loading construction model of projects during the solution loading time. (During solution loading time, CPS loads the construction model in one large batch, before it starts to evaluate them). \r\n\r\nName                                                 \tInc %\t     Inc\tExc %\t   Exc\tFold\t                             When\t     First\t       Last\r\n clr!AwareLock::Contention                           \t  9.0\t   9,533\t  8.8\t 9,341\t 564\t __03.4444442._o___.ooo..ooooo_.o\t 6,030.473\t 77,354.601\r\n+ clr!JITutil_MonContention                          \t  8.9\t   9,527\t  0.0\t     0\t   0\t __0354444442__o___.ooo..ooo.o_.o\t 6,030.473\t 77,354.601\r\n|+ microsoft.build.ni!ProjectRootElementCache.Get    \t  8.9\t   9,455\t  0.0\t     0\t   0\t __0o54444442__o___.______o_.o__.\t 6,030.473\t 76,220.207\r\n||+ microsoft.build.ni!ProjectRootElement.Open       \t  7.5\t   7,972\t  0.0\t     0\t   0\t __0o43443332__o___.______o_.o__.\t 6,030.473\t 76,220.207\r\n||+ microsoft.build.ni!ProjectRootElementCache.TryGet\t  1.4\t   1,483\t  0.0\t     0\t   0\t __o000000000____________________\t 6,893.559\t 28,217.690\r\n",
        "createdAt": "2020-03-23T19:06:52Z",
        "updatedAt": "2020-03-23T19:06:52Z",
        "author": {
          "login": "lifengl"
        }
      },
      {
        "body": "Just the overhead of taking the lock itself (not the blocked time) is ~0.9% CPU opening a large solution of ~1400 projects. \r\n\r\n[Trace](https://microsoft.sharepoint.com/:f:/t/VSIDEPerformance/Etm7IDAYTSpIn9CAQYfXgYUBuUMciQ4xUku3e1KWZtLspw?e=YOQ2sB) (1404 projects)\r\n\r\n```\r\nName | Inc % | Inc\r\n-- | -- | --\r\nclr!AwareLock::Contention | 1.0 | 5,491\r\n+ clr!JITutil_MonContention | 1.0 | 5,488\r\n\\|+ microsoft.build.ni!ProjectRootElementCache.Get | 0.9 | 4,710\r\n```\r\n\r\n",
        "createdAt": "2021-06-16T08:19:20Z",
        "updatedAt": "2021-06-16T08:19:20Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "Status update: issue is in progress, I am actively working on a PR for it. \r\nETA for the PR in the MSBuild repo: end of week (in two days). ",
        "createdAt": "2021-07-14T12:29:36Z",
        "updatedAt": "2021-07-14T12:29:36Z",
        "author": {
          "login": "AR-May"
        }
      },
      {
        "body": "Status Update: \r\nFixed in #6680. As suggested, we pulled out the logic of loading a project file out of the single lock region. We decided against locking the loading region with any project specific lock, as we are fine with possibility of loading the same file twice, as this would be quite rare situation.\r\nResults: measurements were done for OrchardCore solution. Common time spent waiting and taking the lock in ProjectRootElementCache on the dev machine before the fix: ~6000 msec, after the fix: ~700 msec (that is ~0.008 msec average per lock acquiring).",
        "createdAt": "2021-07-27T20:28:29Z",
        "updatedAt": "2021-07-28T12:55:39Z",
        "author": {
          "login": "AR-May"
        }
      }
    ]
  }
}