{
  "number": 9778,
  "title": "[Feature Request]: Provide a way to remove specific properties from the implicit restore triggered by /restore",
  "body": "### Summary\n\nIn https://github.com/dotnet/sdk/pull/38956 we had to jump through a bunch of hoops to navigate the situations where the SDK needs to trigger a 'separate restore' - meaning a Restore operation that doesn't include various properties that the user may want to be sent to the subsequent Build/Publish/etc invocation. The most common scenario here is `TargetFramework`.\r\n\r\nBecause TargetFramework negatively influences Restore, we remove it, perform a Restore, then perform the original call the user requested. This is both fragile, and it creates overhead in the build from running an entire separate MSBuild invocation.\r\n\r\nThere should be some mechanism to either use the existing `-restoreProperty` or a new flag to explicitly un-set properties for the Restore triggered by `/restore`, so that these call patterns could be accounted for by the engine itself, instead of callers having to patch it together.\n\n### Background and Motivation\n\nThis most clearly surfaces when people try to use the new `-getProperty` family of flags in conjunction with a build call that includes TFMs.\n\n### Proposed Feature\n\nA new `-rrp/-removeRestoreProperty` flag that takes a list of properties to unset for a Restore call.\n\n### Alternative Designs\n\n`-rp` could be extended to allow unset via `-rp:Property=`, though this would be ambiguous with an explicit set to an empty value.",
  "state": "OPEN",
  "createdAt": "2024-02-23T14:28:55Z",
  "updatedAt": "2024-10-10T15:57:27Z",
  "closedAt": null,
  "author": {
    "login": "baronfel"
  },
  "labels": [
    "backlog",
    "needs-design",
    "Feature Request",
    "Priority:2",
    "triaged",
    "Functionality:Restore"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "> `-rp` could be extended to allow unset via `-rp:Property=`, though this would be ambiguous with an explicit set to an empty value.\r\n\r\nThis was my first instinct. I'm surprised we allow explicit set to an empty value, since that's not really expressible in a project (it's ambiguous whether it's set to empty or unset-and-thus-returns-empty).",
        "createdAt": "2024-02-23T15:18:03Z",
        "updatedAt": "2024-02-23T15:18:03Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Since the same issue also exists for 'normal' build invocations, we may want to consider generalizing this. Similar to how we have both `-p` and `-rp`, we should have an `--unset-restore-property` and `-unset-property` flag that could apply to both the implicit restore and the 'normal' requested build. This would make it easier for scripted-build scenarios where a script might be aggregating some kind of 'final' command line.\r\n\r\nProposal:\r\n\r\n* `--unset-property [PROPERTYNAME]` - if provided, the property PROPERTYNAME will be removed from the global property collection used for evaluating the requested project\r\n  * short form: `--up`\r\n* `--unset-restore-property [PROPERTYNAME]` - if provided, the property PROPERTYNAME will be removed from the global property collection used for evaluating the requested project\r\n  * short form: `--urp`\r\n\r\nAll `--` prefixes here should be interpreted to be the full set of valid MSBuild flag prefixes: `--`, `-`, `/`.\r\n\r\nBoth flags can be specified multiple times, or take a comma-separated list of values, and both apply after all `-p`/`-rp` flags have been processed.\r\n\r\nExample usages:\r\n\r\n```terminal\r\n> dotnet msbuild /restore /t:Publish -p:TargetFramework=net8.0 -urp:TargetFramework\r\n```\r\n\r\n",
        "createdAt": "2024-02-28T15:23:03Z",
        "updatedAt": "2024-02-28T15:25:26Z",
        "author": {
          "login": "baronfel"
        }
      }
    ]
  }
}