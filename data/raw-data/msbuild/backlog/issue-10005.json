{
  "number": 10005,
  "title": "Transitive package reference from project reference ignores Copy Local/Private setting for .Net Framework projects.",
  "body": "### Issue Description\r\n\r\nWhen referencing a project that itself contains a package reference, the \"Copy Local\" (`<Private>False</Private>`) setting is not honored for the package.  Consequently, the parent project out directory contains all package assemblies even if the reference project assemblies are not copied.\r\n\r\n\r\n### Steps to Reproduce\r\n\r\n\r\nConsider these two .Net Framework projects using the Sdk file format. ProjectA and ProjectB. ProjectB references ProjectA with `Private=\"False\"`, and ProjectA contains a `PackageReference`.  \r\n\r\n#### ProjectA.csproj:\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net48</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Text.Json\" Version=\"9.0.0-preview.3.24172.9\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\n#### ProjectB.csproj:\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net48</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <ProjectReference Include=\"..\\ProjectA\\ProjectA.csproj\">\r\n      <Private>False</Private>\r\n    </ProjectReference>\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nNote that the ProjectA contains a package reference to System.Text.Json.\r\nNote that the ProjectB contains a \"not private\" project reference to ProjectA (Copy Local = False).\r\n\r\n### Expected Behavior\r\n\r\nThe output directory for ProjectB should only contain the output for that project, ProjectB.dll.\r\n\r\n### Actual Behavior\r\n\r\nThe output directory for ProjectB does not contain ProjectA.dll as expected. However, it does contain System.Text.Json.dll and all dependencies of System.Text.Json.\r\n\r\n### Analysis\r\n\r\nI've tried all manner of using `PrivateAssets` and `DisableTransitiveProjectReferences` as described here:\r\nhttps://github.com/dotnet/msbuild/blob/main/documentation/wiki/Controlling-Dependencies-Behavior.md#not-copying-projectreference\r\n\r\nI've also attempted to set `PrivateAssets` within the `ItemDefinitionGroup` in ProjectB.\r\n```xml\r\n<ItemDefinitionGroup>\r\n  <PackageReference>\r\n    <PrivateAssets>all</PrivateAssets>\r\n  </PackageReference>\r\n</ItemDefinitionGroup>\r\n```\r\nSetting `PrivateAssets` to `all` for the package reference in ProjectA prevents the package from being copied to the output of ProjectB. But this is causes other problems for me as ProjectC (not included here) is an executable and must contain the full output of both ProjectA and ProjectB including all dependencies.\r\n\r\nFor reference here - in my application, ProjectB is a runtime discoverable \"plug-in\". I am trying to prevent polluting my \"plugin\" directory with assemblies that are loaded by the main application.\r\n\r\n### Versions & Configurations\r\n\r\nMSBuild version 17.9.8+b34f75857 for .NET Framework\r\n17.9.8.16306\r\n\r\nMicrosoft Visual Studio Professional 2022 (64-bit) - Current\r\nVersion 17.9.4\r\n",
  "state": "CLOSED",
  "createdAt": "2024-04-12T22:01:10Z",
  "updatedAt": "2024-04-17T11:35:09Z",
  "closedAt": "2024-04-17T11:35:09Z",
  "author": {
    "login": "General-Fault"
  },
  "labels": [
    "bug"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Is this a correct problem statement?: You want to influence copying of PackageReference items from the referenced project (through ProjectReference) within the referencing project. E.g. you want PackageReference items from ProjectA not to be copied to output of referencing ProjectB, but to be copied to output of referencing ProjectC.\r\n\r\nIf that's correct - I do not believe it's supported today (but I'll dig further) - but can you workaround by specifying `PrivateAssets` on the PackageReference items in ProjectA (so that they are excluded by referencing projects) and explicitly adding those to ProjectC (so that they are copied there)?",
        "createdAt": "2024-04-13T06:25:37Z",
        "updatedAt": "2024-04-13T06:25:37Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "One workaround is to let ProjectB copy the assemblies to the output directory, but then copy the assemblies from there to a separate directory and exclude the indirect references from that copy.  [Microsoft.Build.Artifacts](https://www.nuget.org/packages/Microsoft.Build.Artifacts) can be used for that.",
        "createdAt": "2024-04-13T14:27:46Z",
        "updatedAt": "2024-04-13T14:27:46Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "> Is this a correct problem statement?: You want to influence copying of PackageReference items from the referenced project (through ProjectReference) within the referencing project. E.g. you want PackageReference items from ProjectA not to be copied to output of referencing ProjectB, but to be copied to output of referencing ProjectC.\r\n> \r\n> If that's correct - I do not believe it's supported today (but I'll dig further) - but can you workaround by specifying `PrivateAssets` on the PackageReference items in ProjectA (so that they are excluded by referencing projects) and explicitly adding those to ProjectC (so that they are copied there)?\r\n\r\nNot quite... ProjectC in this case also has a reference to ProjectA and the necessary packages. In my use-case, ProjectA is a \"common\" assembly that includes shared interfaces. ProjectB is a runtime discoverable plugin. By the time the plugin is loaded by the ProjectC executable, the shared ProjectA.dll its dependencies have already been loaded. By this token, the `PrivateAssets` approach is not usable here. \r\n\r\nWhat I'm trying to do here is have the output directory for ProjectB (and installer generated from those outputs) only contain assemblies that are specific to that plugin and not the \"common\" assemblies also used by Project A and ProjectC.\r\n\r\nFor what it's worth, I think I may have solved my own problem using `<IncludeAssets>compile</IncludeAssets>` in the `ProjectReference` tag in ProjectB. So, is the \"bug\" here only in my head where I simply didn't understand the intention of the MSBuild developers? Or should `<Private>False</Private>` imply that the dependencies of the referenced project also not be included in the output as I had expected?",
        "createdAt": "2024-04-15T19:40:34Z",
        "updatedAt": "2024-04-15T19:40:34Z",
        "author": {
          "login": "General-Fault"
        }
      },
      {
        "body": "@KalleOlaviNiemitalo Thank you for pointing me toward [Microsoft.Build.Artifacts](https://github.com/microsoft/MSBuildSdks/blob/main/src/Artifacts/README.md)! This probably isn't the ideal solution for the project that led to me filing this issue. However, this may solve another related challenge I'm facing.",
        "createdAt": "2024-04-15T19:48:26Z",
        "updatedAt": "2024-04-15T19:48:26Z",
        "author": {
          "login": "General-Fault"
        }
      },
      {
        "body": "@General-Fault No - you are right, this is a known bug in MSBuild/sdk/nuget: https://github.com/dotnet/sdk/issues/1366\r\nClosing this as duplicate now",
        "createdAt": "2024-04-17T11:35:09Z",
        "updatedAt": "2024-04-17T11:35:09Z",
        "author": {
          "login": "JanKrivanek"
        }
      }
    ]
  }
}