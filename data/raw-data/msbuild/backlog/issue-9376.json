{
  "number": 9376,
  "title": "[Bug]: Solution-based graph builds don't handle a quoted target list consistent with non-graph builds",
  "body": "### Issue Description\r\n\r\nWhen using a quoted target list (eh `/t:\"Clean;Build\"`), the behavior is inconsistent with non-graph builds.\r\n\r\n> error MSB4057: The target \"Clean;Build\" does not exist in the project.\r\n\r\nMSBuild itself also behaves a bit inconsistently, the that's potentially a separate bug (@rainersigwald?).\r\n\r\nSetup:\r\n```\r\nmkdir QuotedTargetRepro\r\ncd QuotedTargetRepro\r\ndotnet new classlib\r\ndotnet new sln\r\ndotnet sln add .\r\nmsbuild /t:restore\r\n```\r\n\r\nNon-graph\r\n* `msbuild /v:m /graph:false /t:Clean;Build QuotedTargetRepro.sln` - WORKS\r\n* `msbuild /v:m /graph:false /t:\"Clean;Build\" QuotedTargetRepro.sln` - WORKS\r\n* `msbuild /v:m /graph:false /t:Clean;Build QuotedTargetRepro.csproj` - WORKS\r\n* `msbuild /v:m /graph:false /t:\"Clean;Build\" QuotedTargetRepro.csproj` - FAIL\r\n\r\nGraph:\r\n\r\n* `msbuild /v:m /graph /t:Clean;Build QuotedTargetRepro.sln` - WORKS\r\n* `msbuild /v:m /graph /t:\"Clean;Build\" QuotedTargetRepro.sln` - FAIL <--- This bug\r\n* `msbuild /v:m /graph /t:Clean;Build QuotedTargetRepro.csproj` - WORKS\r\n* `msbuild /v:m /graph /t:\"Clean;Build\" QuotedTargetRepro.csproj` - FAIL\r\n\r\n\r\n### Steps to Reproduce\r\n\r\nSee above\r\n\r\n### Expected Behavior\r\n\r\nSee above\r\n\r\n### Actual Behavior\r\n\r\nSee above\r\n\r\n### Analysis\r\n\r\n_No response_\r\n\r\n### Versions & Configurations\r\n\r\n_No response_",
  "state": "CLOSED",
  "createdAt": "2023-10-31T23:19:09Z",
  "updatedAt": "2023-12-05T13:42:48Z",
  "closedAt": "2023-12-05T13:42:47Z",
  "author": {
    "login": "dfederm"
  },
  "labels": [
    "bug",
    "needs-triage"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "maridematte"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Looks like this works for slns at all because in `SolutionProjectGenerator.EvaluateAndAddProjects` it just adds targets exactly as they were requested (unsplit):\r\n\r\n```cs\r\n                // Add any other targets specified by the user that were not already added. A target's presence or absence must be determined at the last\r\n                // minute because whether traversalInstance.Targets.ContainsKey(i) is true or not can change during the enumeration.\r\n                foreach (string targetName in _targetNames.Where(i => !traversalInstance.Targets.ContainsKey(i)))\r\n                {\r\n                    AddTraversalTargetForProject(traversalInstance, project, projectConfiguration, targetName, null, canBuildDirectly);\r\n                }\r\n```\r\n\r\nSo this adds the target \"Clean;Build\" to the sln (actually \"QuotedTargetRepro:Clean;Build\" due to logic in `AddTraversalTargetForProject`) which simply calls the MSBuild task using the provided targets. Since the MSBuild task ends up splitting the targets, then this is where the split occurs.\r\n\r\nThis _feels_ a bit odd and possibly a happy accident that the splitting happens in the MSBuild task.",
        "createdAt": "2023-11-01T22:43:45Z",
        "updatedAt": "2023-11-01T22:43:45Z",
        "author": {
          "login": "dfederm"
        }
      },
      {
        "body": "Dug into the argument parsing and it seems intentional that a quoted value be treated as a single value and not multi-value. This explains why `/t:\"Clean;Build\"` on a project fails.",
        "createdAt": "2023-11-01T22:53:34Z",
        "updatedAt": "2023-11-01T22:53:34Z",
        "author": {
          "login": "dfederm"
        }
      },
      {
        "body": "To distill down the quirkiness of sln behavior (non-graph), consider:\r\n\r\n```xml\r\n<Project>\r\n  <Target Name=\"Build\">\r\n    <Message Text=\"Build\" Importance=\"High\" />\r\n  </Target>\r\n  <Target Name=\"Clean\">\r\n    <Message Text=\"Clean\" Importance=\"High\" />\r\n  </Target>\r\n  <Target Name=\"Clean;Build\">\r\n    <Message Text=\"Clean;Build\" Importance=\"High\" />\r\n  </Target>\r\n</Project>\r\n```\r\n\r\nThen:\r\n```\r\n>msbuild /v:m /nologo /t:Clean;Build QuotedTargetRepro.csproj\r\n\r\n  Clean\r\n  Build\r\n\r\n>msbuild /v:m /nologo /t:\"Clean;Build\" QuotedTargetRepro.csproj\r\n\r\n  Clean;Build\r\n\r\n>msbuild /v:m /nologo /t:Clean;Build QuotedTargetRepro.sln\r\n\r\n  Clean\r\n  Build\r\n\r\n>msbuild /v:m /nologo /t:\"Clean;Build\" QuotedTargetRepro.sln\r\n\r\n  Clean\r\n  Build\r\n```\r\n\r\nThat last command that \"should\" have executed the \"Clean;Build\" target.\r\n\r\nThis actually begs the question, how would one be able to specify a target name with a ';' in it when using the MSBuild task at all? Perhaps ';' shouldn't be allowed in target names.",
        "createdAt": "2023-11-02T15:48:45Z",
        "updatedAt": "2023-11-02T15:48:45Z",
        "author": {
          "login": "dfederm"
        }
      },
      {
        "body": "As far as I know, you have to quote the whole thing:\n\n```\nmsbuild \"/target:Clean;Build\"\n```\n\nI use this for spaces in property values\n\n```\nmsbuild \"/Property:Something=This property value has spaces in it\"\n```",
        "createdAt": "2023-11-02T15:53:10Z",
        "updatedAt": "2023-11-02T15:55:31Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "@jeffkl Yes, that's how one should invoke it, but this bug is mostly about how graph and non-graph builds handle the other (arguably incorrect) way of doing it. Surprisingly, it works when building a sln (it being `/t:\"Clean;Build\"`) because of how the `<MSBuild>` task works.\r\n\r\nFor a specific example, see microsoft/Terminal (https://github.com/microsoft/terminal/blob/0289cb043c3aac0f9199f667550d8811022e9bed/tools/bcz.cmd#L21C5-L21C20 and https://github.com/microsoft/terminal/blob/0289cb043c3aac0f9199f667550d8811022e9bed/tools/bcz.cmd#L80).\r\n\r\nThe issue is actually a little complicated (somewhat my fault for muddying the waters with my rambling), but to summarize:\r\n1. Non-graph solution builds using `/t:\"Clean;Build\"` work, but graph builds don't. That's the hear of this bug and what I am fixing in #9390.\r\n2. Non-graph solution builds using `/t:\"Clean;Build\"` work at all. In theory, they should be executing the \"Clean;Build\" target on the projects in the sln, but it ends up executing \"Clean\" and \"Build\" as separate targets. This is a quirk and arguably a bug. Also arguably is whether the bug is worth fixing though since it could break people, like Terminal (see above).\r\n3. The `<MSBuild>` task has no way to invoke targets with ';' in them. Assuming there was some defined target named \"Clean;Build\", it would be impossible to invoke it except via the MSBuild command-line when directly building that specific project. Furthermore, other related MSBuild mechanisms like `BeforeTarget`, `AfterTargets`, etc. also have no way of specifying a target with that name. Based on that, it seems like ';' in a target name should be considered invalid.\r\n\r\nThe first issue is the one I'm mostly concerned with since it's related to graph behavior differing from \"normal\" builds. The other two I'll defer to the MSBuild team :)",
        "createdAt": "2023-11-02T17:06:13Z",
        "updatedAt": "2023-11-02T17:06:13Z",
        "author": {
          "login": "dfederm"
        }
      },
      {
        "body": "> Perhaps ';' shouldn't be allowed in target names.\r\n\r\nI am completely surprised that this was not already the case \ud83d\ude31",
        "createdAt": "2023-11-02T17:48:16Z",
        "updatedAt": "2023-11-02T17:48:16Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "IMO, we shall not support `;` in target names and `;` shall always be interpreted as target name separator. I doubt it would be breaking change for considerable amount of people.\r\n\r\nThe line https://github.com/microsoft/terminal/blob/0289cb043c3aac0f9199f667550d8811022e9bed/tools/bcz.cmd#L80\r\nshall be changed to: `:set _BUILD_CMDLINE=\"%MSBUILD%\" %OPENCON%\\OpenConsole.sln \"/t:%_MSBUILD_TARGET%\" /m /p:Configuration=%_LAST_BUILD_CONF% /p:GenerateAppxPackageOnBuild=false /p:Platform=%ARCH% %_APPX_ARGS%`\r\n\r\nwhich will work in both CMD and powershell as expected\r\n\r\nBTW, to repro it in powershell command would have to be:\r\n```PWS> msbuild /v:m /graph:false /t:`\"Clean`;Build`\" QuotedTargetRepro.csproj - FAIL```\r\n```PWS> msbuild /v:m /graph:false /t:\"Clean;Build\" QuotedTargetRepro.csproj - SUCCESS```\r\n\r\n`msbuild /v:m /graph:false /t:\"Clean;Build\" QuotedTargetRepro.csproj - FAIL` is IMO bug in our argument parsing logic.\r\n@rainersigwald shall we fix it? I think it might be good internal onboarding fix.",
        "createdAt": "2023-11-15T10:47:50Z",
        "updatedAt": "2023-11-15T11:12:40Z",
        "author": {
          "login": "rokonec"
        }
      },
      {
        "body": "I agree, that seems like it should be perfectly fine to specify a command line that way.",
        "createdAt": "2023-11-16T15:43:20Z",
        "updatedAt": "2023-11-16T15:43:20Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}