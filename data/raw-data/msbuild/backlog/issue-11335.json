{
  "number": 11335,
  "title": "Add long-running \"sidecar\" TaskHosts",
  "body": "TaskHost nodes are transient, started up as needed and torn down after task completion. But that means that there's fairly high overhead of using a TaskHost because of process-start and JIT time and limited ability to use in-memory caches (because the memory disappears between invocations/builds!).\n\nIf the .NET TaskHost becomes widely used, many or most tasks will run in it, exacerbating this overhead.\n\nWe should consider adding a new TaskHost type, which I'm calling a \"sidecar\" TaskHost, which will be created on-demand but live for the same lifetime as the worker node that created it. Then the only overhead of using a TaskHost would be IPC.",
  "state": "OPEN",
  "createdAt": "2025-01-24T16:48:37Z",
  "updatedAt": "2025-06-02T14:27:34Z",
  "closedAt": null,
  "author": {
    "login": "rainersigwald"
  },
  "milestone": {
    "title": "VS 17.14"
  },
  "assignees": {
    "nodes": [
      {
        "login": "SimaTian"
      }
    ]
  },
  "labels": [
    "Area: Visual Studio",
    "triaged"
  ],
  "comments": {
    "nodes": [
      {
        "body": "This is fairly important for the C# build tasks to be able to use the .NET Core task host. One of the primary benefits of `VBCSCompiler` is that it avoids spawning a process per build on Windows where process creation is relatively expensive. Unless there are long running tasks then we would end up back in a place where it's process per build and hence remove a pretty significant perf win for large solutions. \n\n@jjonescz ",
        "createdAt": "2025-03-28T15:32:27Z",
        "author": {
          "login": "jaredpar"
        }
      }
    ]
  }
}