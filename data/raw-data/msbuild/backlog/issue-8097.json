{
  "number": 8097,
  "title": "How to build more than one platform target?",
  "body": "Hi,\n\nAs a company, we have recently introduced an Arm64 version of our .NET 6-based product, and now we're building both Arm64 and x64 versions of it and deploy one or the other (depending on a machine) using a single installer.\n\nTo make it work, we had to introduce an MSBuild property to switch between platforms, and then build the project twice, output the result into a separate directory and remove all AnyCPU dependencies in a script.\n\nI would like to ask, is there a better way to do this? I particularly dislike the part with the \"cleanup\" of duplicated dependencies. Is there a good way to build two platform-dependent EXEs (with different names) for one project, reusing the dependencies? Preferably in a single build.\n\nThanks!",
  "state": "OPEN",
  "createdAt": "2022-10-20T23:55:11Z",
  "updatedAt": "2024-01-31T08:16:01Z",
  "closedAt": null,
  "author": {
    "login": "Alovchin91"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Backlog"
  },
  "comments": {
    "nodes": [
      {
        "body": "If I'm understanding correctly, the duplicated dependencies are a problem in the sense that you have to build AnyCPU dependencies twice? Once for x64, and once for ARM64, even though they are architecture agnostic, so you spend more time doing builds? Or do you not want to include dependencies in the build whatsoever? @Alovchin91  \r\n\r\nThere are OS generic runtime identifiers like `win-x64` and `win-arm64`, for example, that accomplish some of what you're describing. I'm probably not the best contact for this question, let's discuss a bit more. ",
        "createdAt": "2022-10-25T23:18:31Z",
        "updatedAt": "2022-10-25T23:19:31Z",
        "author": {
          "login": "nagilson"
        }
      },
      {
        "body": "Is the issue that the AnyCPU built output gets copied to both x64 and arm64 folders and you don't want those duplicates?  I don't think at compile time we know that two separate architectures of project are using shared components like that so there isn't really support for this. There is some work to not double build those AnyCPU components with SetPlatform (CC @BenVillalobos ) but you'll still end up with duplicate outputs.\r\n\r\nI'll leave this open as a suggestion but we don't have a good option for this today.",
        "createdAt": "2022-10-26T21:19:54Z",
        "updatedAt": "2022-10-26T21:19:54Z",
        "author": {
          "login": "marcpopMSFT"
        }
      },
      {
        "body": ">  Is there a good way to build two platform-dependent EXEs (with different names) for one project, reusing the dependencies? Preferably in a single build.\r\n\r\nLong story short, there should absolutely be a way to do this but this scenario isn't supported today. I believe this is still possible to achieve with some msbuild know-how.\r\n\r\nI think there is a way for you to create a single build that handles most of this stuff for you though. I think you'll need a separate project that references your two exe projects so that you can manually place their outputs as needed. [Here's an example of how the MSBuild repo does this today](https://github.com/dotnet/msbuild/blob/main/src/Package/GetBinPaths.targets#L31) (though it's not easy to follow and it could use some updating).\r\n\r\nIn terms of deduplicating AnyCPU assemblies, you can manually place AnyCPU assemblies in a specific directory relative to both EXE's and add a BindingRedirect for each exe into that folder. Or, you can control how those anyCPU assemblies are build and placed, such that they're only built once.\r\n\r\nIf this were to become an officially supported scenario, it would most likely be done at the MSBuild layer or one of the MSBuild SDK's. Moving to MSBuild for now.\r\n",
        "createdAt": "2022-10-26T22:29:20Z",
        "updatedAt": "2022-10-26T22:29:20Z",
        "author": {
          "login": "benvillalobos"
        }
      }
    ]
  }
}