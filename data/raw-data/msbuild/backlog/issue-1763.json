{
  "number": 1763,
  "title": "Warnings promoted as errors do not block the build",
  "body": "Unlike errors, warnings prompted as errors do not block the build:\r\n\r\nRun `msbuild build.proj /warnaserror`\r\n\r\n``` XML\r\n<!-- build.proj -->\r\n<Project>\r\n\r\n  <Target Name=\"Build\">\r\n\r\n    <Warning Text=\"This should block the build.\" />\r\n\r\n    <Error Text=\"This should never be run\" />\r\n    \r\n  </Target>\r\n\r\n</Project>\r\n````\r\n\r\n**Expected:** A single error:\r\n\r\n```\r\nD:\\Repro\\build.proj(15,5): error : This should block the build.\r\n```\r\n**Actual:** Two errors:\r\n\r\n```\r\nD:\\Repro\\build.proj(15,5): error : This should block the build.\r\nD:\\Repro\\build.proj(9,5): error : This should never be run\r\n```",
  "state": "CLOSED",
  "createdAt": "2017-02-28T03:12:11Z",
  "updatedAt": "2024-02-21T17:21:25Z",
  "closedAt": "2017-03-03T07:27:18Z",
  "author": {
    "login": "davkean"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "I'm not sure if this behavior is expected or not, it certainty was unexpected, in our case we had \"restore\" before \"build\", we expected restore to stop the build due to warnings being promoted as error. It did not.",
        "createdAt": "2017-02-28T03:17:50Z",
        "updatedAt": "2017-02-28T03:17:50Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "Okay, I think I understand better in my mind why I believe this warnings promoted as errors should stop the build:\r\n\r\nWhen writing builds scripts that build, deploy and run tests, etc entirely in MSBuild there's two main approaches;\r\n\r\n1) Have individual steps separated out into individual projects, ie _restore.proj_, _build.proj_, _deploy.proj_ and _test.proj_. Then individually calling MSBuild on each one, failing if MSBuild returns an error code.\r\n\r\n2) Have individual stages separated by targets, ie _Restore_, _Build_, _Deploy_ and _Test_ targets. Then have a single call into MSBuild, and rely on MSBuild to fail the build if one of the steps fails.\r\n\r\nIn the first case, passing `warnaserror` works as expected. Any warnings coming out of one step get promoted as errors and block the build.\r\n\r\nIn the second case, passing `warnaserror` doesn't work as expected. Any warnings that come of one step get prompted as errors, but they _do not_ block the build.",
        "createdAt": "2017-02-28T03:36:22Z",
        "updatedAt": "2017-02-28T05:47:19Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "This was an intentional decision but it looks like @jeffkl and I didn't write down our discussion. Here's my recollection:\r\n\r\n* Warnings do not stop the build.\r\n* Errors do not *always* stop the build--you can configure `ErrorAndContinue`, and you can emit an error without failing a Task (I'll be mad at you, but it's possible).\r\n* We expect `/WarnAsError` to be used primarily (not exclusively) in batch builds--command line full builds and CI/lab builds.\r\n\r\nThose combine to suggest that collecting a full set of errors is better behavior for this option. The build output would then match the output of a build that didn't use the flag and just had warnings, and a CI system could report a full set of error/warnings rather than just the first, possibly reducing onion-peeling.",
        "createdAt": "2017-02-28T15:37:12Z",
        "updatedAt": "2017-02-28T15:37:12Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Aside: \r\n\r\n> we had \"restore\" before \"build\",\r\n\r\nThis won't work in the same invocation of MSBuild--any build logic within newly-restored NuGet packages won't be in the \"build\" phase of the build, causing mysterious breakage. This is a major driver for the Sdk-acquisition work we're planning.",
        "createdAt": "2017-02-28T15:38:20Z",
        "updatedAt": "2017-02-28T15:38:20Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Here's where I sort of captured the design decision: https://github.com/Microsoft/msbuild/issues/68#issuecomment-262390696\r\n\r\nThe current logic to to simply mutate the original warning into an error and then only modify the overall build result if any warnings were mutated.  Individual tasks don't fail because of what @rainersigwald pointed out unless they `return !Log.HasLoggedErrors`.  \r\n\r\nWhat do you think @davkean ?",
        "createdAt": "2017-02-28T15:41:18Z",
        "updatedAt": "2017-02-28T15:41:18Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "I have a repro (that cannot isolate) where I'm calling the 'restore' target in an msbuild task invocation, it's producing a warning that's getting promoted to an error but this is not causing MSBuild to return a non-zero error code. Who's issue this is? I _cannot_ repro this with the following and this does the right thing (MSBuild returns 1 when I build this):\r\n\r\n``` XML\r\n<!-- build.proj -->\r\n<Project>\r\n\r\n  <Target Name=\"Build\">\r\n\r\n    <MSBuild BuildInParallel=\"true\"\r\n             Projects=\"project.proj\"\r\n             Targets=\"Warning\"\r\n             Properties=\"$(CommonMSBuildGlobalProperties)\"\r\n             />\r\n    \r\n  </Target>\r\n\r\n  <Target Name=\"Warning\">\r\n\r\n\t    <Warning Text=\"This should block the build.\" />\r\n   </Target>\r\n\r\n</Project>\r\n```\r\n\r\nBasically, in my case - I consider these warnings as \"errors\" and they should block the build. I expected based on above to put the restore target into a standalone msbuild command-invocation and have that break the build due to a non-zero error code, but that did not.",
        "createdAt": "2017-03-03T06:59:06Z",
        "updatedAt": "2017-03-03T06:59:21Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "Okay, I figured out the bug with restore - basically if you combine file logger and multi-proc build, then the error level is set to the wrong thing:\r\nhttps://github.com/Microsoft/msbuild/issues/1791\r\n\r\nI will close this issue, as you consider this behavior to be by design.\r\n",
        "createdAt": "2017-03-03T07:27:15Z",
        "updatedAt": "2017-03-03T07:27:15Z",
        "author": {
          "login": "davkean"
        }
      }
    ]
  }
}