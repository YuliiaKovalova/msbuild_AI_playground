{
  "number": 247,
  "title": "Project File and Nuget Packages",
  "body": "In my Project file, I have referenced several DLLs from a Nuget Package:\n\n``` xml\n<Reference Include=\"System.Web.Http\">\n      <HintPath>..\\packages\\Microsoft.AspNet.WebApi.Core.5.1.2\\lib\\net45\\System.Web.Http.dll</HintPath>\n    </Reference>\n```\n\nI have however configured in my nuget.config (under %AppData%\\Nuget) that my Nuget Packages shall all be saved under C:\\Packages (using the setting \"repositoryPath\". Therefore the Hint is actually not really helpful. It sometimes happens, that wrong dlls are taken (including wrong version numbers)\n\nIs it somehow possible to do something like this:\n\n``` xml\n<Reference Include=\"System.Web.Http\">\n<HintPath>$(LOCALNUGETPACKAGESPATH)\\Microsoft.AspNet.WebApi.Core.5.1.2\\lib\\net45\\System.Web.Http.dll</HintPath>\n    </Reference>\n```\n\nwhere $(LOCALNUGETPACKAGESPATH) is defined differently for each system. For those not having configured repository path in a nuget.config, it is just ..\\packages, for the others it is the repositoryPath.\n\nNot sure if this is more of a Nuget issue\n",
  "state": "CLOSED",
  "createdAt": "2015-10-03T15:08:24Z",
  "updatedAt": "2024-02-21T17:30:31Z",
  "closedAt": "2015-10-20T22:34:11Z",
  "author": {
    "login": "aersam"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "I think this is a NuGet issue.  It's possible to do exactly as you describe using a machine-wide environment variable--MSBuild properties fall back to environment variables when no property of a given name is specified.  You could define `LocalNugetPackagesPath` and change your project files just as you were proposing, and it should work fine (in fact, this is exactly how many internal Microsoft build systems handle packages).  The problem is that NuGet's automated editing of your project file doesn't work that way.\n\nAs a heads-up, though, NuGet 3.0 has dramatically changed how references get added to projects at build time.  The new `project.json` approach doesn't change the project file at all, instead relying on a task that is run within MSBuild that reads the NuGet package configuration and dynamically creates MSBuild items.  In the new approach, there is a single, machine-wide repository, like you want.  For this reason, they may be resistant to your proposal since it's a change to the \"old way\" of referencing assemblies from packages.\n",
        "createdAt": "2015-10-05T15:18:57Z",
        "updatedAt": "2015-10-05T15:18:57Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I think NuGet v3 with project.json as Rainer describes is the fix to this.  Right now, it's used by default by UWP apps and some Portable Class Libraries.  You can use it with other projects if you have the Windows 10 tools installed and replace packages.config with project.json.  I'm not sure if that's recommended or supported yet.\n",
        "createdAt": "2015-10-05T16:54:27Z",
        "updatedAt": "2015-10-05T16:54:27Z",
        "author": {
          "login": "dsplaisted"
        }
      }
    ]
  }
}