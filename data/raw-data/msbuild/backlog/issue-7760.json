{
  "number": 7760,
  "title": "Platform Negotiation fails between two projects that offer the same platform",
  "body": "### Issue Description\r\n\r\nWhen library A references library B, and both support arm64 as a platform, building library A for arm64 should also build library B for arm64. But instead, library B builds for AnyCPU.\r\n\r\n### Steps to Reproduce\r\n\r\nCheck out this minimal repro:\r\n\r\n[platformnegotiation.zip](https://github.com/dotnet/msbuild/files/9012888/platformnegotiation.zip)\r\n\r\nRun `dotnet build lib2 /p:platform=arm64` and see how only lib2 builds for arm64 while lib1 (which lib2 references) builds for AnyCPU.\r\n\r\n### Expected Behavior\r\n\r\n```\r\ndotnet build lib2 /p:platform=arm64\r\n  lib1 -> C:\\temp\\platformnegotiation\\lib1\\bin\\arm64\\Debug\\net6.0\\lib1.dll\r\n  lib2 -> C:\\temp\\platformnegotiation\\lib2\\bin\\arm64\\Debug\\net6.0\\lib2.dll\r\n```\r\n\r\nNote the `arm64` in the lib1 output path.\r\n\r\n### Actual Behavior\r\n\r\n```\r\ndotnet build lib2 /p:platform=arm64\r\n  lib1 -> C:\\temp\\platformnegotiation\\lib1\\bin\\Debug\\net6.0\\lib1.dll\r\n  lib2 -> C:\\temp\\platformnegotiation\\lib2\\bin\\arm64\\Debug\\net6.0\\lib2.dll\r\n```\r\n\r\nNote the lack of the `arm64` in the output path.\r\n\r\n### Analysis\r\n\r\nWhen the `_GetProjectReferencePlatformProperties` target determines that a referenced project supports an exact match with the originating project, it thinks it can just drop the need to set the Platform (because it would propagate naturally, I guess):\r\n\r\n> Platform property of referenced project '..\\x\\x.csproj' matches current project's platform: 'arm64'. Referenced project will be built without a global Platform property.\r\n\r\nBut it doesn't work, because when the ProjectReference is ultimately built, it's passed with this metadata:\r\n> UndefineProperties = ;TargetFramework;Platform\r\n\r\nThat means the Platform property *won't* propagate. As a result, the referenced project will build with its default Platform instead of the matching one.\r\n\r\n\r\n### Versions & Configurations\r\n\r\nThis is with .NET SDK 7.0.100-preview.5.22307.18.\r\n\r\nNote that this is impacting work that targets a .NET 6 SDK.",
  "state": "CLOSED",
  "createdAt": "2022-06-29T17:54:22Z",
  "updatedAt": "2022-11-20T00:51:32Z",
  "closedAt": "2022-11-20T00:51:25Z",
  "author": {
    "login": "AArnott"
  },
  "labels": [
    "bug",
    "needs-triage",
    "author-responded",
    "Area: SetPlatform"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "VS 17.4"
  },
  "comments": {
    "nodes": [
      {
        "body": "I'm not able to repro what you're seeing. Are the projects set up properly? It looks like neither project has a default platform, should the command line repro be `dotnet build lib2 /p:platform=arm64`? If so, I think I see what you're seeing.\r\n\r\nWhat's happening is that during the `GetTargetFrameworks` call on lib1, it gets passed the `SetPlatform` value (platform=arm64), which then gets picked up because in this target I assumed that $(Platform) is the \"default\" platform this project would have built as. This is very much an oversight.\r\n\r\nBecause of that, platform negotiation improperly detects arm64 as what lib1 would have built as, but as it builds it defaults to anycpu instead.\r\n\r\nMy next question, can we make this MSBuild call _explicitly_ not pass any properties? This target does not rely on `$(Platform)` or `$(Configuration)`, I'm not sure why it's passed. @dsplaisted might know.\r\n\r\nhttps://github.com/dotnet/msbuild/blob/62b690b290fdb75e2bf368dfcb52e84b411e88d2/src/Tasks/Microsoft.Common.CurrentVersion.targets#L1776-L1786\r\n\r\nOption number 2 is to separate MSBuild calls got `GetTargetFrameworks` based on the value of `EnableDynamicPlatformResolution`, and when true, not pass anything since we're already a special case.",
        "createdAt": "2022-07-08T20:42:40Z",
        "updatedAt": "2022-07-12T17:31:50Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": ">  It looks like neither project has a default platform, should the command line repro be dotnet build lib2 /p:platform=arm64? If so, I think I see what you're seeing.\r\n\r\nYes, I believe you're right in that I dropped that switch from the repro steps. I've corrected the issue description.",
        "createdAt": "2022-07-12T17:31:21Z",
        "updatedAt": "2022-07-12T17:31:21Z",
        "author": {
          "login": "AArnott"
        }
      },
      {
        "body": "Reactivating as @BenVillalobos requested, given I have more cases of P2P graphs that fail. Not all align exactly with the original issue, and we can certainly farm them out to distinct new issues if that's helpful.\r\n\r\nThese repro with:\r\n> MSBuild version 17.4.0-preview-22366-04+d2871ca13 for .NET Framework\r\n> 17.4.0.36604\r\n\r\nNewly discovered cases:\r\n\r\n- [TraversalPlusP2PToVcxproj.zip](https://github.com/dotnet/msbuild/files/9136435/TraversalPlusP2PToVcxproj.zip)\r\nThis includes a traversal project that simply references all project recursively, and an AnyCPU csproj that references a vcxproj with explicit SetPlatform metadata.\r\n**Expected**: When the dirs.proj is built, the vcxproj builds **once**, as its only platform (x64). \r\nTraversal projects should build _all_ platforms of the projects they directly reference.\r\n**Actual**: The vcxproj builds **twice**: once (successfully) because of the csproj with the explicit SetPlatform metadata, and once more (failure) because the dirs.proj didn't supply any Platform global property. \r\n- [TraversalAndAnyCpuReferencesMultiPlatCsProj.zip](https://github.com/dotnet/msbuild/files/9136578/TraversalAndAnyCpuReferencesMultiPlatCsProj.zip)\r\nThis includes a traversal project that simply references all project recursively, and an AnyCPU csproj that references a multi-plat csproj.\r\n**Expected**: When the dirs.proj is built, the multi-plat csproj should be built twice (once per platform) and the AnyCPU csproj should build once.\r\n**Actual**: The multi-plat csproj is built twice *as AnyCPU both times*, leading to timing breaks. The AnyCPU csproj also builds once (which is correct).\r\n\r\nHigh level requirements that I think fall out from these repro cases include:\r\n1. All P2Ps should *always* specify a `Platform` global property, even if the default one would be the right one. Otherwise we end up in this world where a graph of projects may make divergent decisions regarding whether a particular platform of a project should be specified explicitly or not, leading to overbuild of the project. This also matches sln-based build behavior, so it has a strong precedent to be correct.\r\n2. Traversals, which tend to be recursive, and certainly should not have to encode the implementation detail of all their underlying projects including all their allowed platforms, should dynamically 'negotiate' to build *all* platforms that those projects support. That in fact is what we already do for traversals in the VS repo already, but this is done through a proprietary technique instead of the msbuild feature.",
        "createdAt": "2022-07-19T00:24:30Z",
        "updatedAt": "2022-07-19T01:03:27Z",
        "author": {
          "login": "AArnott"
        }
      },
      {
        "body": "I would further suggest that the proposed traversal project capability of building _all_ platforms of referenced projects should be exposed as metadata on a `ProjectReference` item so that *any* project can opt into that behavior, and the traversal SDK would simply set that metadata on the item definition.  For example:\r\n\r\n```xml\r\n<ProjectReference Include=\"some.proj\">\r\n  <ReferenceOutputAssembly>false</ReferenceOutputAssembly>\r\n  <AllPlatforms>true</AllPlatforms>\r\n</ProjectReference>\r\n```\r\n\r\nThis would allow other project types such as setup/archival projects to build all platforms of a referenced project and consume their outputs in whatever way they need.\r\n\r\nAlternatively, the metadata could be a semicolon-delimited list of platforms that should be built for that project. But if so, some special value (e.g. `{all}`) should allow avoiding hard-coding a list of platforms if the referencing project just wants them 'all'. Given that requirement, and that if you're willing to list a subset of platforms to be referenced you can already do that by writing out the ProjectReference multiple times, I'm leaning toward just a boolean metadata as proposed above.",
        "createdAt": "2022-07-19T19:16:48Z",
        "updatedAt": "2022-07-19T19:19:40Z",
        "author": {
          "login": "AArnott"
        }
      },
      {
        "body": "> [TraversalPlusP2PToVcxproj.zip](https://github.com/dotnet/msbuild/files/9136435/TraversalPlusP2PToVcxproj.zip)\r\nThis includes a traversal project that simply references all project recursively, and an AnyCPU csproj that references a vcxproj with explicit SetPlatform metadata.\r\nExpected: When the dirs.proj is built, the vcxproj builds once, as its only platform (x64).\r\nTraversal projects should build all platforms of the projects they directly reference.\r\nActual: The vcxproj builds twice: once (successfully) because of the csproj with the explicit SetPlatform metadata, and once more (failure) because the dirs.proj didn't supply any Platform global property.\r\n\r\nThis is an interesting scenario. The `dirs.proj` build of the `vcxproj` fails to build because there's no project config set up for `Debug|Win32`, which it happens to default to. The responsibility of defaulting to something like `x64` (because of `Platforms`) would lie in the traversal SDK. I now see what you meant. I filed an issue over in the traversal SDK for this: https://github.com/microsoft/MSBuildSdks/issues/380 please add/fix my issue description if it doesn't quite match what you're asking for\r\n\r\nAs for the second scenario:\r\n\r\n> Actual: The multi-plat csproj is built twice as AnyCPU both times, leading to timing breaks. The AnyCPU csproj also builds once (which is correct).\r\n\r\nI think this is no longer the case. Testing it out today, the anycpulib detects that the multiplat csproj would have built as AnyCPU without passing global properties, so it doesn't explicitly pass `Platform=AnyCPU` anymore. I also see one less evaluation as a result. I have both binlogs saved, message me if you'd like to see them.\r\n\r\nHave you tested that scenario with an MSBuild that has https://github.com/dotnet/msbuild/pull/7511/files#diff-5407d46dd30ce4031e530c35cc2e0a62a6c96e54cb1def14fb316f351ef92de9 merged? ",
        "createdAt": "2022-08-22T23:24:09Z",
        "updatedAt": "2022-08-22T23:24:09Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "> Have you tested that scenario with an MSBuild that has...\r\n\r\n`dotnet build` repros the problem with the 6.0.400 SDK. That evidently carries msbuild 17.3.0+92e077650\r\n`msbuild.exe` exhibits the desired behavior in 17.4.0-preview-22451-06+2db11c256\r\n\r\nWhat version of the .NET SDK does or will carry the msbuild that contains the fix?",
        "createdAt": "2022-09-06T20:50:38Z",
        "updatedAt": "2022-09-06T20:51:59Z",
        "author": {
          "login": "AArnott"
        }
      },
      {
        "body": "> dotnet build repros the problem with the 6.0.400 SDK. That evidently carries msbuild 17.3.0+92e077650\r\n\r\n92e077650 _should_ have that change. Does the issue persist into the 7.0 SDK's? Is it possible for you to use the 7.0 SDK's?",
        "createdAt": "2022-09-29T15:47:11Z",
        "updatedAt": "2022-09-29T15:47:11Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "The 7.0.100-rc.1.22431.12 .NET SDK works. But 6.0.401 (which carries msbuild 17.3.1+2badb37d1) does not.\r\n\r\nUsing the 7.0 SDK is only an option for me once it ships as a stable version.",
        "createdAt": "2022-10-03T15:14:33Z",
        "updatedAt": "2022-10-03T15:14:33Z",
        "author": {
          "login": "AArnott"
        }
      },
      {
        "body": "@AArnott I just tested this with 6.0.402 and I see only one build of the multiplatcsproj, and one reduced evaluation (compared to 6.0.300 from globaljson). I think your global json may have been pinning you to to a previous version:\r\n```\r\n    \"version\": \"6.0.300\",\r\n    \"rollForward\": \"patch\",\r\n    \"allowPrerelease\": false\r\n```",
        "createdAt": "2022-10-28T01:04:28Z",
        "updatedAt": "2022-10-28T01:04:42Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "Looks good at this point. Thank you.",
        "createdAt": "2022-11-20T00:51:25Z",
        "updatedAt": "2022-11-20T00:51:25Z",
        "author": {
          "login": "AArnott"
        }
      }
    ]
  }
}