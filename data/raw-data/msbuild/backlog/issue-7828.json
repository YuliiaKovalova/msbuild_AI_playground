{
  "number": 7828,
  "title": "Enabling the binary logger adds console output",
  "body": "### Issue Description\r\n\r\nRequesting a binary log (`/bl`) will print a line to the terminal which isn't printed otherwise (when doing quiet builds).\r\n\r\n### Steps to Reproduce\r\n\r\n```shell\r\n$ msbuild test.csproj /bl /verbosity:quiet /nologo\r\n/Library/Frameworks/Mono.framework/Versions/6.12.0/lib/mono/msbuild/15.0/bin/MSBuild.dll /nologo /bl /verbosity:quiet test.csproj\r\n```\r\n\r\n### Expected Behavior\r\n\r\nQuiet builds should be quiet:\r\n\r\n```shell\r\n$ msbuild test.csproj /verbosity:quiet /nologo\r\n[no output]\r\n```\r\n\r\n### Actual Behavior\r\n\r\nAn additional line of text (seems like the parsed MSBuild command line) is printed.\r\n\r\n### Analysis\r\n\r\nI think the following two code blocks work together to cause this:\r\n\r\nhttps://github.com/dotnet/msbuild/blob/f25c1ee15e92d7d71074df0dc6ab89ed40442545/src/MSBuild/XMake.cs#L3184-L3187\r\n\r\nhttps://github.com/dotnet/msbuild/blob/f25c1ee15e92d7d71074df0dc6ab89ed40442545/src/MSBuild/XMake.cs#L2344-L2348\r\n\r\nThe extra line of text is also printed when not enabling the binary logger, but using diagnostic verbosity (but none of the other verbosity levels).\r\n\r\n### Versions & Configurations\r\n\r\n```\r\n$ msbuild --version\r\nMicrosoft (R) Build Engine version 16.10.1 for Mono\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n16.10.1.31401%\r\n```\r\n\r\nThis also happens with `dotnet build`, so here's that version too:\r\n\r\n```\r\n$ dotnet --version\r\n6.0.301\r\n```",
  "state": "CLOSED",
  "createdAt": "2022-07-15T10:48:37Z",
  "updatedAt": "2024-02-21T14:08:08Z",
  "closedAt": "2022-10-07T15:00:38Z",
  "author": {
    "login": "rolfbjarne"
  },
  "labels": [
    "bug",
    "Good First Issue",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "fanhaipeng"
      }
    ]
  },
  "milestone": {
    "title": "Backlog"
  },
  "comments": {
    "nodes": [
      {
        "body": "This sounds fairly straightforward to me. It would be good to check if we can just delay setting the verbosity to diagnostic; if not, we can store the \"real\" verbosity then use that for that check instead.",
        "createdAt": "2022-08-04T16:50:54Z",
        "updatedAt": "2022-08-04T16:50:54Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "Hello there, would you assign this issue to me? I'd like to take this as my first commit to MSBuild. I tried the solution that uses another variable to store the original verbosity and check if the original verbosity equals quiet when binary logger is specified. It worked well on my local machine. \r\n\r\nI prefer this solution because it makes the setting-the-verbosity-to-diagnostic independent of the verbosity value, though it introduces a new parameter to functions, it should be trivial for private function.",
        "createdAt": "2022-09-19T02:42:58Z",
        "updatedAt": "2022-09-19T02:42:58Z",
        "author": {
          "login": "fanhaipeng"
        }
      },
      {
        "body": "@fanhaipeng done! Please let us know if you have any questions. We look forward to the PR.",
        "createdAt": "2022-09-19T13:53:09Z",
        "updatedAt": "2022-09-19T13:53:09Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald would you help review the change? thanks",
        "createdAt": "2022-09-20T03:59:54Z",
        "updatedAt": "2022-09-20T03:59:54Z",
        "author": {
          "login": "fanhaipeng"
        }
      }
    ]
  }
}