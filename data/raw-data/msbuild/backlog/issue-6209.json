{
  "number": 6209,
  "title": "Feature request: allow -pp to produce some output even in presence of import and schema errors",
  "body": "<!-- This is a template that helps us provide quicker feedback. Please use any relevant sections and delete anything you don't need. -->\r\n\r\n### Issue Description\r\nThe `-pp` or `-preprocess` will produce no output if the project experiences schema or import errors. In the past, this was acceptable as you could usually just fix the error in question. However, the new PackageReference and Sdk mechanisms often result in a situation where one error in the project will cause package restore to fail, but if that error is not syntactic or schematic, the only diagnostics reported by msbuild will be for the failed Sdk or PackageReference import. This makes debugging the /t:restore target very difficult, as we have no way to see what the project looks like to msbuild when it runs the restore target.\r\n\r\nThis motivates a need for `-pp` to function with incomplete projects -- where either the Imports fail, or where errors are caused by incorrect property values (e.g. UsingTask can fail with syntax errors if the task factory value is set wrong, due to improperly initialized properties).\r\n\r\n### Steps to Reproduce\r\n\r\n1. Create a new C# project, e.g. `dotnet new console`\r\n2. Add the following to the project:\r\n    ```\r\n    <ItemGroup>\r\n      <PackageReference Include=\"Microsoft.NoSuchProject\" Version=\"1.0.0\" GeneratePackagePath=\"true\" />\r\n    </ItemGroup>\r\n    <Import Project=\"$(PkgMicrosoft_NoSuchProject)\" />\r\n    ```\r\n3. `dotnet /pp`\r\n\r\n### Expected Behavior\r\nSyntax errors, and partial result of preprocessing (at least up until the first error. Preferably preprocessed exactly as the /t:restore project would see the project.\r\n\r\n### Actual Behavior\r\nNo output at all.\r\n\r\n### Analysis\r\nn/a\r\n\r\n### Versions & Configurations\r\n```\r\nC:\\scratch\\repro>dotnet --version\r\n6.0.100-preview.1.21103.13\r\n\r\nC:\\scratch\\repro>ver\r\n\r\nMicrosoft Windows [Version 10.0.19042.804]\r\n```\r\n\r\n### Attach a binlog\r\nn/a",
  "state": "OPEN",
  "createdAt": "2021-03-02T18:10:40Z",
  "updatedAt": "2024-01-31T08:21:48Z",
  "closedAt": null,
  "author": {
    "login": "ghost"
  },
  "labels": [
    "bug",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Related issue: https://github.com/dotnet/msbuild/issues/3971",
        "createdAt": "2021-03-02T18:10:57Z",
        "updatedAt": "2021-03-02T18:10:57Z",
        "author": {
          "login": "ghost"
        }
      },
      {
        "body": "Team Triage: Have you tried passing `/bl` and viewing the generated binlog?",
        "createdAt": "2021-03-03T16:29:31Z",
        "updatedAt": "2021-03-03T16:29:31Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "Yes, but the binlog doesn't show me what I need to know. It won't show me, for instance, which order different projects were imported, or let me search to find that some property was never defined. While sometimes helpful, /bl is not sufficient in all cases.",
        "createdAt": "2021-03-03T18:05:41Z",
        "updatedAt": "2021-03-03T18:05:41Z",
        "author": {
          "login": "ghost"
        }
      },
      {
        "body": "Hmm, try `-flp:v=diag` instead of `/pp`. You should see an `msbuild.log` file where you ran the command.",
        "createdAt": "2021-03-03T18:22:51Z",
        "updatedAt": "2021-03-03T18:23:08Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "Again, my goal is to see what msbuild is seeing when restore is running. If I run `msbuild -t:Restore -flp:v=diag`, it doesn't report any errors. None at all. But some of my packages weren't restored properly, and `msbuild -t:Build` fails with \"The imported project \"C:\\Sdk\\Sdk.props\" was not found.\"\r\n\r\nI'd like to see what my project looked like to msbuild before it ran the restore target. But when I run `msbuild -pp:tmp.pp`, I get an empty file out.",
        "createdAt": "2021-03-03T19:16:35Z",
        "updatedAt": "2021-03-03T19:17:12Z",
        "author": {
          "login": "ghost"
        }
      },
      {
        "body": "@BenVillalobos I'm going to assign this to myself and work on it.  Its a feature I've wanted for a while, sometimes I try to get a preprocess file but its empty because of some problem with the project.  At the very least, MSBuild should log an error telling me why the preprocess doc couldn't be generated.  I'll debug it and figure out why the file's just empty and nothing is logged.  ",
        "createdAt": "2021-03-03T19:34:14Z",
        "updatedAt": "2021-03-03T19:34:14Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "Actually I don't have permissions anymore to assign this to myself, please assign it to me.",
        "createdAt": "2021-03-03T19:35:10Z",
        "updatedAt": "2021-03-03T19:35:10Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "I've found something interesting, MSBuild _is_ logging something if the preprocess fails.\r\n```xml\r\n<Project>\r\n  <Import Project=\"$(Foo)\" />\r\n</Project>\r\n```\r\n\r\nMSBuild.exe correctly reports the problem:\r\n```\r\nD:\\msbuild>msbuild /pp:pp.log D:\\Stuff\\pp.proj\r\nD:\\Stuff\\pp.proj(2,3): error MSB4020: The value \"\" of the \"Project\" attribute in element <Import> is invalid.\r\n```\r\n\r\nBut `dotnet msbuild /pp` does not?\r\n```\r\nD:\\msbuild>dotnet msbuild /pp:pp.log D:\\Stuff\\pp.proj\r\n```\r\n\r\nBut if you directly execute MSBuild from dotnet it does?\r\n```\r\nD:\\msbuild>dotnet exec \"C:\\Program Files\\dotnet\\sdk\\5.0.200\\MSBuild.dll\" /pp:pp.log D:\\Stuff\\pp.proj\r\nD:\\Stuff\\pp.proj(2,3): error MSB4020: The value \"\" of the \"Project\" attribute in element <Import> is invalid.\r\n```\r\n\r\nThis makes me think the [MSBuildForwardingApp](https://github.com/dotnet/sdk/blob/master/src/Cli/dotnet/commands/dotnet-msbuild/MSBuildForwardingApp.cs) is causing the issue, but I haven't had a chance to debug that yet.  Does that sound familiar to anyone?",
        "createdAt": "2021-03-04T21:33:10Z",
        "updatedAt": "2021-03-04T21:33:10Z",
        "author": {
          "login": "jeffkl"
        }
      }
    ]
  }
}