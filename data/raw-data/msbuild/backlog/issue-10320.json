{
  "number": 10320,
  "title": "[Bug]: ProjectCollection LoadProject throws null reference exception.",
  "body": "### Issue Description\n\nWe have multiple ProjectCollections, one pr project graph that we want Build. The ProjectCollection is kept alive between multiple Build invocations to benefit its caching logic.\r\nWe recently ran into problems of the `projectcollection.LoadProject` throwing null reference exceptions on already loaded projects:\r\n\r\n```\r\nObject reference not set to an instance of an object.\r\nStackTrace:\r\n   at Microsoft.Build.Evaluation.Evaluator`4.Evaluate(IEvaluatorData`4 data, Project project, ProjectRootElement root, ProjectLoadSettings loadSettings, Int32 maxNodeCount, PropertyDictionary`1 environmentProperties, ILoggingService loggingService, IItemFactory`2 itemFactory, IToolsetProvider toolsetProvider, IDirectoryCacheFactory directoryCacheFactory, ProjectRootElementCacheBase projectRootElementCache, BuildEventContext buildEventContext, ISdkResolverService sdkResolverService, Int32 submissionId, EvaluationContext evaluationContext, Boolean interactive)\r\n\r\n   at Microsoft.Build.Evaluation.Project.ProjectImpl.Reevaluate(ILoggingService loggingServiceForEvaluation, ProjectLoadSettings loadSettings, EvaluationContext evaluationContext)\r\n\r\n   at Microsoft.Build.Evaluation.Project.ProjectImpl.ReevaluateIfNecessary(ILoggingService loggingServiceForEvaluation, ProjectLoadSettings loadSettings, EvaluationContext evaluationContext)\r\n\r\n   at Microsoft.Build.Evaluation.Project.ProjectImpl.Initialize(IDictionary`2 globalProperties, String toolsVersion, String subToolsetVersion, ProjectLoadSettings loadSettings, EvaluationContext evaluationContext, Boolean interactive)\r\n\r\n   at Microsoft.Build.Evaluation.Project..ctor(String projectFile, IDictionary`2 globalProperties, String toolsVersion, String subToolsetVersion, ProjectCollection projectCollection, ProjectLoadSettings loadSettings, EvaluationContext evaluationContext, IDirectoryCacheFactory directoryCacheFactory, Boolean interactive)\r\n\r\n   at Microsoft.Build.Evaluation.ProjectCollection.LoadProject(String fileName, IDictionary`2 globalProperties, String toolsVersion)\r\n```\r\n\r\nIt does not happen all the time, only some times.\r\nThe flow of the application is:\r\n\r\n- ProjectCollection is created with GlobalProperties that do not change for its lifetime.\r\n- `LoadProject` is called to evaluate Items/Props.\r\n- BuildManager is invoked to \"Restore\" with a ForwardLogger, including the same ProjectCollection and its GlobalProperties\r\n- BuildManager is invoked to \"Publish\" with additional GlobalProperties and ForwardLogger, including the same ProjectCollection and its GlobalProperties\r\n- ProjectCollection is used again to gather some extra information with `LoadProject`\r\n- Sometimes we get the above exception.\r\n\r\nThe error happens here\r\nhttps://github.com/dotnet/msbuild/blob/main/src/Build/Evaluation/Evaluator.cs#L316\r\nAnd is because the `loggingService` is null, and looking at the code that can happen, and it depends on who created the project with `ProjectLoadSettings`.\n\n### Steps to Reproduce\n\nIm not totally sure of the exact flow of when we get into a state in the ProjectCollection that gives this exception, but reevaluation should never throw and looking at the code that could easily happen.\n\n### Expected Behavior\n\nLoadProject should never throw null reference exception when project is reevaluated\n\n### Actual Behavior\n\nSometimes we get null reference exception in code that should ever throw.\n\n### Analysis\n\n_No response_\n\n### Versions & Configurations\n\n_No response_",
  "state": "CLOSED",
  "createdAt": "2024-07-02T08:06:37Z",
  "updatedAt": "2024-09-12T06:59:09Z",
  "closedAt": "2024-09-12T06:59:09Z",
  "author": {
    "login": "hknielsen"
  },
  "labels": [
    "bug"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "MichalPavlik"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Mentioning this bug, together with Documentation task, as it could be bad usage of ProjectCollection https://github.com/dotnet/msbuild/issues/9417",
        "createdAt": "2024-07-02T08:21:48Z",
        "updatedAt": "2024-07-02T08:21:48Z",
        "author": {
          "login": "hknielsen"
        }
      },
      {
        "body": "@JanKrivanek @MichalPavlik  We are running into this error again in another place. Going to entirely stop relying on ProjectCollection.Load.\r\nAny estimate on it?",
        "createdAt": "2024-09-06T18:24:42Z",
        "updatedAt": "2024-09-06T18:24:42Z",
        "author": {
          "login": "hknielsen"
        }
      },
      {
        "body": "@hknielsen, I'm sorry for the delay. Could you please provide a minimal repro sample? It would speed up our investigation.\r\n\r\n@AR-May, was this issue triaged? :) If not, then add it to the list please.",
        "createdAt": "2024-09-09T06:23:46Z",
        "updatedAt": "2024-09-09T06:25:46Z",
        "author": {
          "login": "MichalPavlik"
        }
      },
      {
        "body": "@hknielsen Is it possible that you are reusing ProjectCollection after it was Disposed or after getting exception during construction?\r\n\r\nThose are the only two cases where the LoggingService initialized in ProjectCollection ctor is nullified.",
        "createdAt": "2024-09-10T14:25:12Z",
        "updatedAt": "2024-09-10T14:25:12Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "@JanKrivanek - Could be.\r\nJust to clarify;\r\nWe have x amount of Instances of ProjectCollection.\r\nEach invocation of the BuildManager get passed one of these ProjectCollections matching the Project we are going to build.\r\n\r\nWe can call Dispose on One of the `ProjectCollection` at some point, while the others live on.\r\nSo what you are saying, that should work?\r\n\r\nIm going to investigate if we could have called Dispose on the ProjectCollection thats failing",
        "createdAt": "2024-09-11T10:43:51Z",
        "updatedAt": "2024-09-11T10:43:51Z",
        "author": {
          "login": "hknielsen"
        }
      },
      {
        "body": "@JanKrivanek Confirmed that it was disposed and we continued to use it afterwords. I agree on the proposal in https://github.com/dotnet/msbuild/issues/10648",
        "createdAt": "2024-09-11T18:33:06Z",
        "updatedAt": "2024-09-11T18:33:06Z",
        "author": {
          "login": "hknielsen"
        }
      },
      {
        "body": "Thanks @hknielsen for confirmation. I will close this issue and the team will plan my proposal next week.",
        "createdAt": "2024-09-12T06:59:09Z",
        "updatedAt": "2024-09-12T06:59:09Z",
        "author": {
          "login": "MichalPavlik"
        }
      }
    ]
  }
}