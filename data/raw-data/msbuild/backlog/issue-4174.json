{
  "number": 4174,
  "title": "Invoke async methods in Microsoft.Build.Utilities.Task.Execute()",
  "body": "Currently `Microsoft.Build.Utilities.Task` has a sync API of `Execute()` that needs to be implemented in derived class. What if the implementation has to invoke async methods, is there better pattern than blocking?",
  "state": "CLOSED",
  "createdAt": "2019-02-14T17:31:35Z",
  "updatedAt": "2024-02-21T17:09:14Z",
  "closedAt": "2019-02-17T22:26:57Z",
  "author": {
    "login": "ritchxu"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Discussion"
  },
  "comments": {
    "nodes": [
      {
        "body": "`Execute()` will have to remain synchronous, so you should just block.\r\n\r\n\"Why can't there be a new option for `ExecuteAsync()`?\", you might ask. Because of overall MSBuild design decisions that can't be changed without a ton of effort.\r\n\r\nTasks have historically had full access to process state, including global state like environment variables and the current working directory. That implies that only a single task can execute concurrently in a process--otherwise you might get bad interleavings like\r\n\r\n1. Task1 sets working directory to `dir1`.\r\n1. Task2 sets working directory to `dir2`.\r\n1. Task1 launches a process with path arguments relative to `dir1`.\r\n1. Process fails.\r\n\r\nAs a result, a process is completely committed to a task execution, and if a worker node is yielded (because a project needs the results of another project) we have a complex save/restore state process so that neither project has to attempt to preserve its own state.\r\n\r\nSome tasks do depend on this, so it'd be a big effort to change it. And we still couldn't run multiple tasks concurrently, because the MSBuild execution model is that tasks are serialized within a target and targets are serialized within a project), so there's not much upside IMO.\r\n\r\nIf I were designing a build system today, it would not allow access to global state to cause this kind of problem and would probably have more async plumbing throughout. But we have to be compatible.",
        "createdAt": "2019-02-14T18:25:36Z",
        "updatedAt": "2019-02-14T18:25:36Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}