{
  "number": 11250,
  "title": "Can I suppress `MSB3027;MSB3021` errors?",
  "body": "In my case I'm OK if MSBuild can't build one project because of the related file being locked. I'm OK to get warnings but let my build to carry on. Currently I'm getting the following output:\n![Image](https://github.com/user-attachments/assets/4081808c-fcbb-4db1-99cd-50db0db227ad)\n\nThe desired result is to continue on failure. \n",
  "state": "CLOSED",
  "createdAt": "2025-01-10T09:00:40Z",
  "updatedAt": "2025-01-10T15:03:47Z",
  "closedAt": "2025-01-10T15:03:45Z",
  "author": {
    "login": "michaelsamoilenko"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "comments": {
    "nodes": [
      {
        "body": "What I've tried is adding on project level following bit:\n`<MSBuildWarningsAsMessages>3027;3021</MSBuildWarningsAsMessages>`\nI also tried this stuff altogether:\n```\n<WarningsAsMessages>MSB3027;MSB3021</WarningsAsMessages><NoWarn>MSB3027;MSB3021</NoWarn>\n<TreatWarningsAsErrors>false</TreatWarningsAsErrors>\n```\nI know that it's pretty much overkill and there's no sense in mixing all that kinds of things but generally that all didn't help",
        "createdAt": "2025-01-10T09:18:03Z",
        "author": {
          "login": "michaelsamoilenko"
        }
      },
      {
        "body": "The Copy task logs the error, and then its Execute method returns false to indicate failure.  The properties that you set may suppress the error logging but not the return value.\n\nPerhaps you can override the \"CopyFilesToOutputDirectory\" target with a modified one that adds `ContinueOnError=\"WarnAndContinue\"` to the Copy task invocations.\n",
        "createdAt": "2025-01-10T09:45:14Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "\n> The Copy task logs the error, and then its Execute method returns false to indicate failure. The properties that you set may suppress the error logging but not the return value.\n> \n> Perhaps you can override the \"CopyFilesToOutputDirectory\" target with a modified one that adds `ContinueOnError=\"WarnAndContinue\"` to the Copy task invocations.\n\ncan you please provide more information of how to override \"CopyFilesToOutputDirectory\". I'm lacking that knowledge and didn't find proper information on that",
        "createdAt": "2025-01-10T09:54:59Z",
        "author": {
          "login": "michaelsamoilenko"
        }
      },
      {
        "body": "I think I was able to do that. I followed this [guide](https://learn.microsoft.com/en-us/visualstudio/msbuild/how-to-extend-the-visual-studio-build-process?view=vs-2022#to-override-a-predefined-target). I ended up having in my proj file this bit:\n<details>\n<summary>Customized `CopyFilesToOutputDirectory` target</summary>\n\n```\n<Target\n      Name=\"CopyFilesToOutputDirectory\"\n      DependsOnTargets=\"\n            ComputeIntermediateSatelliteAssemblies;\n            _CopyFilesMarkedCopyLocal;\n            _CopySourceItemsToOutputDirectory;\n            _CopyAppConfigFile;\n            _CopyManifestFiles;\n            _CheckForCompileOutputs;\n            _SGenCheckForOutputs\">\n\n      <PropertyGroup>\n        <!-- By default we're not using Hard Links to copy to the output directory, and never when building in VS -->\n        <CreateHardLinksForCopyFilesToOutputDirectoryIfPossible Condition=\"'$(BuildingInsideVisualStudio)' == 'true' or '$(CreateHardLinksForCopyFilesToOutputDirectoryIfPossible)' == ''\">false</CreateHardLinksForCopyFilesToOutputDirectoryIfPossible>\n        <CreateSymbolicLinksForCopyFilesToOutputDirectoryIfPossible Condition=\"'$(BuildingInsideVisualStudio)' == 'true' or '$(CreateSymbolicLinksForCopyFilesToOutputDirectoryIfPossible)' == ''\">false</CreateSymbolicLinksForCopyFilesToOutputDirectoryIfPossible>\n        <ErrorIfLinkFailsForCopyFilesToOutputDirectory Condition=\"'$(BuildingInsideVisualStudio)' == 'true' or '$(ErrorIfLinkFailsForCopyFilesToOutputDirectory)' == ''\">false</ErrorIfLinkFailsForCopyFilesToOutputDirectory>\n      </PropertyGroup>\n\n      <PropertyGroup>\n        <CopyBuildOutputToOutputDirectory Condition=\"'$(CopyBuildOutputToOutputDirectory)'==''\">true</CopyBuildOutputToOutputDirectory>\n        <CopyOutputSymbolsToOutputDirectory Condition=\"'$(CopyOutputSymbolsToOutputDirectory)'==''\">true</CopyOutputSymbolsToOutputDirectory>\n        <CopyDocumentationFileToOutputDirectory Condition=\"'$(CopyDocumentationFileToOutputDirectory)'==''\">true</CopyDocumentationFileToOutputDirectory>\n      </PropertyGroup>\n\n      <!-- Copy the build product (.dll or .exe). -->\n      <Copy\n        SourceFiles=\"@(IntermediateAssembly)\"\n        DestinationFolder=\"$(OutDir)\"\n        SkipUnchangedFiles=\"$(SkipCopyUnchangedFiles)\"\n        OverwriteReadOnlyFiles=\"$(OverwriteReadOnlyFiles)\"\n        Retries=\"$(CopyRetryCount)\"\n        RetryDelayMilliseconds=\"$(CopyRetryDelayMilliseconds)\"\n        UseHardlinksIfPossible=\"$(CreateHardLinksForCopyFilesToOutputDirectoryIfPossible)\"\n        UseSymboliclinksIfPossible=\"$(CreateSymbolicLinksForCopyFilesToOutputDirectoryIfPossible)\"\n        ErrorIfLinkFails=\"$(ErrorIfLinkFailsForCopyFilesToOutputDirectory)\"\n        Condition=\"'$(CopyBuildOutputToOutputDirectory)' == 'true' and '$(SkipCopyBuildProduct)' != 'true'\"\n        ContinueOnError=\"WarnAndContinue\"\n      >\n\n        <Output TaskParameter=\"DestinationFiles\" ItemName=\"MainAssembly\" />\n        <Output TaskParameter=\"DestinationFiles\" ItemName=\"FileWrites\" />\n\n      </Copy>\n\n      <!-- Copy the reference assembly build product (.dll or .exe). -->\n      <CopyRefAssembly\n        SourcePath=\"@(IntermediateRefAssembly)\"\n        DestinationPath=\"$(TargetRefPath)\"\n        Condition=\"'$(ProduceReferenceAssembly)' == 'true' and '$(CopyBuildOutputToOutputDirectory)' == 'true' and '$(SkipCopyBuildProduct)' != 'true'\"\n      >\n\n        <Output TaskParameter=\"DestinationPath\" ItemName=\"ReferenceAssembly\" />\n        <Output TaskParameter=\"DestinationPath\" ItemName=\"FileWrites\" />\n\n      </CopyRefAssembly>\n\n      <Message Importance=\"High\" Text=\"$(MSBuildProjectName) -&gt; @(MainAssembly->'%(FullPath)')\" Condition=\"'$(CopyBuildOutputToOutputDirectory)' == 'true' and '$(SkipCopyBuildProduct)'!='true'\" />\n\n      <!-- Copy the additional modules. -->\n      <Copy\n        SourceFiles=\"@(AddModules)\"\n        DestinationFolder=\"$(OutDir)\"\n        SkipUnchangedFiles=\"$(SkipCopyUnchangedFiles)\"\n        OverwriteReadOnlyFiles=\"$(OverwriteReadOnlyFiles)\"\n        Retries=\"$(CopyRetryCount)\"\n        RetryDelayMilliseconds=\"$(CopyRetryDelayMilliseconds)\"\n        UseHardlinksIfPossible=\"$(CreateHardLinksForCopyAdditionalFilesIfPossible)\"\n        UseSymboliclinksIfPossible=\"$(CreateSymbolicLinksForCopyAdditionalFilesIfPossible)\"\n        Condition=\"'@(AddModules)' != ''\"\n        ContinueOnError=\"WarnAndContinue\"\n      >\n\n        <Output TaskParameter=\"DestinationFiles\" ItemName=\"FileWrites\" />\n\n      </Copy>\n\n      <!-- Copy the serialization assembly if it exists. -->\n      <Copy\n        SourceFiles=\"$(IntermediateOutputPath)$(_SGenDllName)\"\n        DestinationFiles=\"$(OutDir)$(_SGenDllName)\"\n        SkipUnchangedFiles=\"$(SkipCopyUnchangedFiles)\"\n        OverwriteReadOnlyFiles=\"$(OverwriteReadOnlyFiles)\"\n        Retries=\"$(CopyRetryCount)\"\n        RetryDelayMilliseconds=\"$(CopyRetryDelayMilliseconds)\"\n        UseHardlinksIfPossible=\"$(CreateHardLinksForCopyFilesToOutputDirectoryIfPossible)\"\n        UseSymboliclinksIfPossible=\"$(CreateSymbolicLinksForCopyFilesToOutputDirectoryIfPossible)\"\n        ErrorIfLinkFails=\"$(ErrorIfLinkFailsForCopyFilesToOutputDirectory)\"\n        Condition=\"'$(_SGenDllCreated)'=='true'\"\n      ContinueOnError=\"WarnAndContinue\">\n\n        <Output TaskParameter=\"DestinationFiles\" ItemName=\"FileWrites\" />\n\n      </Copy>\n\n      <!-- Copy the debug information file (.pdb), if any -->\n      <Copy\n        SourceFiles=\"@(_DebugSymbolsIntermediatePath)\"\n        DestinationFiles=\"@(_DebugSymbolsOutputPath)\"\n        SkipUnchangedFiles=\"$(SkipCopyUnchangedFiles)\"\n        OverwriteReadOnlyFiles=\"$(OverwriteReadOnlyFiles)\"\n        Retries=\"$(CopyRetryCount)\"\n        RetryDelayMilliseconds=\"$(CopyRetryDelayMilliseconds)\"\n        UseHardlinksIfPossible=\"$(CreateHardLinksForCopyFilesToOutputDirectoryIfPossible)\"\n        UseSymboliclinksIfPossible=\"$(CreateSymbolicLinksForCopyFilesToOutputDirectoryIfPossible)\"\n        ErrorIfLinkFails=\"$(ErrorIfLinkFailsForCopyFilesToOutputDirectory)\"\n        Condition=\"'$(_DebugSymbolsProduced)'=='true' and '$(SkipCopyingSymbolsToOutputDirectory)' != 'true' and '$(CopyOutputSymbolsToOutputDirectory)'=='true'\"\n      ContinueOnError=\"WarnAndContinue\">\n\n        <Output TaskParameter=\"DestinationFiles\" ItemName=\"FileWrites\" />\n\n      </Copy>\n\n      <!-- Copy the resulting XML documentation file, if any. -->\n      <Copy\n        SourceFiles=\"@(DocFileItem)\"\n        DestinationFiles=\"@(FinalDocFile)\"\n        SkipUnchangedFiles=\"$(SkipCopyUnchangedFiles)\"\n        OverwriteReadOnlyFiles=\"$(OverwriteReadOnlyFiles)\"\n        Retries=\"$(CopyRetryCount)\"\n        RetryDelayMilliseconds=\"$(CopyRetryDelayMilliseconds)\"\n        UseHardlinksIfPossible=\"$(CreateHardLinksForCopyFilesToOutputDirectoryIfPossible)\"\n        UseSymboliclinksIfPossible=\"$(CreateSymbolicLinksForCopyFilesToOutputDirectoryIfPossible)\"\n        ErrorIfLinkFails=\"$(ErrorIfLinkFailsForCopyFilesToOutputDirectory)\"\n        Condition=\"'$(_DocumentationFileProduced)'=='true' and '$(CopyDocumentationFileToOutputDirectory)'=='true'\"\n      ContinueOnError=\"WarnAndContinue\">\n\n        <Output TaskParameter=\"DestinationFiles\" ItemName=\"FileWrites\" />\n\n      </Copy>\n\n      <!-- Copy satellite assemblies. -->\n      <Copy\n        SourceFiles=\"@(IntermediateSatelliteAssembliesWithTargetPath)\"\n        DestinationFiles=\"@(IntermediateSatelliteAssembliesWithTargetPath->'$(OutDir)%(Culture)\\$(TargetName).resources.dll')\"\n        SkipUnchangedFiles=\"$(SkipCopyUnchangedFiles)\"\n        OverwriteReadOnlyFiles=\"$(OverwriteReadOnlyFiles)\"\n        Retries=\"$(CopyRetryCount)\"\n        RetryDelayMilliseconds=\"$(CopyRetryDelayMilliseconds)\"\n        UseHardlinksIfPossible=\"$(CreateHardLinksForCopyFilesToOutputDirectoryIfPossible)\"\n        UseSymboliclinksIfPossible=\"$(CreateSymbolicLinksForCopyFilesToOutputDirectoryIfPossible)\"\n        ErrorIfLinkFails=\"$(ErrorIfLinkFailsForCopyFilesToOutputDirectory)\"\n        Condition=\"'@(IntermediateSatelliteAssembliesWithTargetPath)' != ''\"\n        ContinueOnError=\"WarnAndContinue\"\n      >\n\n        <Output TaskParameter=\"DestinationFiles\" ItemName=\"FileWrites\" />\n\n      </Copy>\n\n      <!--\n          Copy COM reference wrappers, isolated COM references, COM references included by\n          native (manifest) references, native (manifest) reference files themselves.\n          -->\n      <Copy\n        SourceFiles=\"@(ReferenceComWrappersToCopyLocal); @(ResolvedIsolatedComModules); @(_DeploymentLooseManifestFile); @(NativeReferenceFile)\"\n        DestinationFolder=\"$(OutDir)\"\n        SkipUnchangedFiles=\"$(SkipCopyUnchangedFiles)\"\n        OverwriteReadOnlyFiles=\"$(OverwriteReadOnlyFiles)\"\n        Retries=\"$(CopyRetryCount)\"\n        RetryDelayMilliseconds=\"$(CopyRetryDelayMilliseconds)\"\n        UseHardlinksIfPossible=\"$(CreateHardLinksForCopyAdditionalFilesIfPossible)\"\n        UseSymboliclinksIfPossible=\"$(CreateSymbolicLinksForCopyAdditionalFilesIfPossible)\"\n        Condition=\"'@(ReferenceComWrappersToCopyLocal)' != '' or '@(ResolvedIsolatedComModules)' != '' or '@(_DeploymentLooseManifestFile)' != '' or '@(NativeReferenceFile)' != '' \"\n        ContinueOnError=\"WarnAndContinue\"\n      >\n\n        <Output TaskParameter=\"DestinationFiles\" ItemName=\"FileWritesShareable\" />\n\n      </Copy>\n\n      <!-- Copy the build product of WinMDExp. -->\n      <Copy\n        SourceFiles=\"@(WinMDExpArtifacts)\"\n        DestinationFolder=\"$(OutDir)\"\n        SkipUnchangedFiles=\"$(SkipCopyUnchangedFiles)\"\n        OverwriteReadOnlyFiles=\"$(OverwriteReadOnlyFiles)\"\n        Retries=\"$(CopyRetryCount)\"\n        RetryDelayMilliseconds=\"$(CopyRetryDelayMilliseconds)\"\n        UseHardlinksIfPossible=\"$(CreateHardLinksForCopyFilesToOutputDirectoryIfPossible)\"\n        UseSymboliclinksIfPossible=\"$(CreateSymbolicLinksForCopyFilesToOutputDirectoryIfPossible)\"\n        ErrorIfLinkFails=\"$(ErrorIfLinkFailsForCopyFilesToOutputDirectory)\"\n        Condition=\"'$(SkipCopyWinMDArtifact)' != 'true' and '@(WinMDExpArtifacts)' != ''\"\n        ContinueOnError=\"WarnAndContinue\"\n      >\n        <Output TaskParameter=\"DestinationFiles\" ItemName=\"FileWrites\" />\n        <Output TaskParameter=\"DestinationFiles\" ItemName=\"FinalWinmdExpArtifacts\" />\n      </Copy>\n\n      <Message Importance=\"High\" Text=\"$(MSBuildProjectName) -&gt; $([System.IO.Path]::GetFullPath('$(_WindowsMetadataOutputPath)'))\" Condition=\"'$(SkipCopyWinMDArtifact)' != 'true' and '$(_WindowsMetadataOutputPath)' != ''\" />\n\n    </Target>\n```\n</details>\n\nI added everywhere in Copy `ContinueOnError=\"WarnAndContinue\"`. Sad news is that obviously now I have a custom implementation of `CopyFilesToOutputDirectory` so if that target changes my code will still be using an old version ",
        "createdAt": "2025-01-10T10:14:21Z",
        "author": {
          "login": "michaelsamoilenko"
        }
      },
      {
        "body": "Or if you _never_ need those copies then perhaps you could just set the `SkipCopyBuildProduct` property that the target checks.",
        "createdAt": "2025-01-10T10:49:44Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "Sadly but generally I do want them to be built. I just want if that file is being used by another process just continue build without failure ",
        "createdAt": "2025-01-10T11:04:47Z",
        "author": {
          "login": "michaelsamoilenko"
        }
      },
      {
        "body": "@KalleOlaviNiemitalo many thanks for you help! I agreed with my team that all that stuff sounds hacky and we should go with some other approach ",
        "createdAt": "2025-01-10T15:03:45Z",
        "author": {
          "login": "michaelsamoilenko"
        }
      }
    ]
  }
}