{
  "number": 5482,
  "title": "Question: How can I create a \"soft dependency\" between 2 projects",
  "body": "Let's assume I have project A and project B. They have different incompatible TargetFrameworks, but the build of A depends on the build of B. I want to keep the delta compile compatibility, too.  That means:\r\n\r\n- no changes to both projects -> no build\r\n- change in B -> Build of A triggers build of B first, then builds A\r\n- change in A -> Only A builds\r\n\r\nIs there a common approach to achieve that for all kind of SDK-style projects?",
  "state": "CLOSED",
  "createdAt": "2020-07-03T11:37:18Z",
  "updatedAt": "2024-02-21T17:03:11Z",
  "closedAt": "2020-07-08T16:26:22Z",
  "author": {
    "login": "TFTomSun"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "You can set project A to be dependent on B, without actually referencing B, using `ProjectReference` with:\r\n- `ReferenceOutputAssembly` set to **false**\r\n- `SkipGetTargetFrameworkProperties` set to **true**\r\n\r\n_This is loosely based on https://github.com/microsoft/msbuild/issues/3843_\r\n\r\n```xml\r\n<!-- ProjectA.csproj -->\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net20</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <ProjectReference Include=\"..\\ProjectB\\ProjectB.csproj\">\r\n      <ReferenceOutputAssembly>false</ReferenceOutputAssembly>\r\n      <SkipGetTargetFrameworkProperties>true</SkipGetTargetFrameworkProperties>\r\n    </ProjectReference>\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n```xml\r\n<!-- ProjectB.csproj -->\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netstandard2.1</TargetFramework>\r\n  </PropertyGroup>\r\n</Project>\r\n```\r\n\r\nThis appears to fit your requirements, so:\r\n- projects are incompatible (`net20` cannot reference `netstandard2.1`)\r\n- when changing something in A:\r\n   - and building A => only A builds\r\n   - and building B => nothing builds\r\n- when changing something in B:\r\n   - and building A => only **B** builds (nothing changed in A, so A doesn't)\r\n   - and building B => only B builds",
        "createdAt": "2020-07-07T18:28:20Z",
        "updatedAt": "2020-07-07T18:28:20Z",
        "author": {
          "login": "xerif"
        }
      },
      {
        "body": "@xerif  thanks alot! SkipGetTargetFrameworkProperties was the property I didn't know before. ",
        "createdAt": "2020-07-07T21:30:43Z",
        "updatedAt": "2020-07-07T21:30:43Z",
        "author": {
          "login": "TFTomSun"
        }
      },
      {
        "body": "Thanks @xerif! Closing this as that was a great answer.",
        "createdAt": "2020-07-08T16:26:21Z",
        "updatedAt": "2020-07-08T16:26:21Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}