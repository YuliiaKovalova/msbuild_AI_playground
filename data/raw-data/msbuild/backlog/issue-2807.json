{
  "number": 2807,
  "title": "Runtime/Platform-specific package build artifact import",
  "body": "This seems to be a \r\n\r\n### Steps to reproduce\r\n\r\n1. Following the instructions [in the CoreFX repo](https://github.com/dotnet/corefx/blob/master/Documentation/coding-guidelines/package-projects.md#platform-specific-library) to create a platform-specific library with an associated metapackage. (e.g. Microsoft.DotNet.FooPackage and runtime.win-x64.Microsoft.DotNet.FooPackage). \r\n2. In the platform-specific package add a .targets file with the name of the package under a `build` folder. \r\n3. Push the created packages to a package feed (local or remote).\r\n4. Create any simple .NET Core app template and add a reference to the created package. If not already added, also add the package feed as a package source.\r\n5. Specify a property in the .csproj file of the app with its target runtime.  ( e.g.  `<RuntimeIdentifiers>win-x64</RuntimeIdentifiers>`)\r\n6. Run `dotnet restore`\r\n\r\n\r\n### Expected  behavior\r\nThe build artifact in the runtime-specific package is added to the app's nuget.g.targets/props files. This seems to be the case for MSBuild outside of .NET Core.\r\n\r\n### Actual behavior\r\nThe build artifact in the runtime-specific package is not added to the app's nuget.g.targets/props files. \r\n\r\n### Environment data\r\n`msbuild /version` output: 15.5.180.51428\r\n\r\nOS info: Microsoft Windows 10 Enterprise Version\t10.0.16299 Build 16299\r\n\r\nIf applicable, version of the tool that invokes MSBuild (Visual Studio, dotnet CLI, etc): dotnet cli 2.1.4-preview-007237\r\n",
  "state": "OPEN",
  "createdAt": "2017-12-14T00:41:35Z",
  "updatedAt": "2024-02-21T16:35:13Z",
  "closedAt": null,
  "author": {
    "login": "A-And"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "@A-And Any chance you can zip up an example platform-specific package? I looked at the corefx instructions briefly and got intimidated.\r\n\r\nAnd to be clear, you're seeing it fail with `dotnet build` but succeed with `msbuild.exe`?",
        "createdAt": "2017-12-21T21:38:35Z",
        "updatedAt": "2017-12-21T21:38:35Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald Sure thing! We built a workaround for this in CoreRT, so I'll remove the workarounds and send you an example package. \r\n\r\nFor some more clarity - .NET Native uses a similar package setup - one platform-agnostic identity package, which imports platform-specific packages at build-time. These specific packages have build artifacts, which get successfully added as build targets/props. \r\n\r\nThe same package layout doesn't seem to behave in the same way when using `dotnet restore/build/publish`. ",
        "createdAt": "2017-12-21T21:46:58Z",
        "updatedAt": "2017-12-21T21:46:58Z",
        "author": {
          "login": "A-And"
        }
      }
    ]
  }
}