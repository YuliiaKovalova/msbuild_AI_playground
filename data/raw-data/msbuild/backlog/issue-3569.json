{
  "number": 3569,
  "title": "Distribute the MSBuild internal test helpers as a nuget package",
  "body": "Some of the APIs such as \"TestEnvironment\", the custom loggers and assertion wrappers could be really helpful for people who distribute Custom MSBuild Tasks / Sdks.\r\n",
  "state": "OPEN",
  "createdAt": "2018-08-01T06:49:51Z",
  "updatedAt": "2024-10-22T19:34:51Z",
  "closedAt": null,
  "author": {
    "login": "MeikTranel"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "I have created https://github.com/jeffkl/MSBuildProjectCreator as a test helper and its used in the MSBuildSdks repo:\r\n\r\nhttps://github.com/Microsoft/MSBuildSdks/blob/master/src/CentralPackageVersions.UnitTests/CentralPackageVersionsTests.cs#L80\r\n\r\nIt does not do everything you mention but it does cover some of it.",
        "createdAt": "2018-08-01T15:14:23Z",
        "updatedAt": "2018-08-01T15:14:23Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "@jeffkl that does indeed help for some tasks and is definitely a good fit for a smaller projects who struggle with the most basic testing \"infrastructure\".\r\n\r\nBut at my workplace we're planning on investing in Custom SDKs and Task Packages on a much larger scale, where an official testing package build alongside the package we're testing would help greatly.\r\n\r\nIt's kind of an odd feature to have, but i have grown much more fond with the underlying idea since https://github.com/cake-build/cake 's test package. They serve the same basic need really. The application model is so odd/complex, that regular testing workflows and tooling is kinda all over the place for them. \r\n\r\nThe question to me would be: How much of an additional workload would it be for the product ownership of MSBuild to put this into the hands of some of the consumers. I'm sure the implementation of deployment wouldn't be an issue. Would you expect users of this package to use the package in a way that would drive the already implemented testing framework into places that it wouldn't naturally be (aka requiring APIs that serve no use the actual msbuild tests etc.)",
        "createdAt": "2018-08-01T20:58:52Z",
        "updatedAt": "2018-08-01T20:58:52Z",
        "author": {
          "login": "MeikTranel"
        }
      },
      {
        "body": "Would be lovely to do this - I replicated the helpers in https://github.com/dotnet/sdk/pull/26729 out of a desire to easily assert on logged messages.",
        "createdAt": "2022-07-22T20:12:49Z",
        "updatedAt": "2022-07-22T20:12:49Z",
        "author": {
          "login": "baronfel"
        }
      },
      {
        "body": "Hey @baronfel can you do some internal advertising for this to get some PM eyeballs on this?\r\n\r\nMaybe we should wrap this in a larger vision and create an official MSBuild task package template - there seems to be much confusion about the entire system - which is why many people still use AfterBuild shell scripts seemingly confused that there even is something like a task that can act in a sane manner from within msbuild. \r\n\r\nThis discussion really shows this whole dilemma: https://github.com/dotnet/roslyn/issues/57608\r\n\r\nOh wait... you're PM :D:D",
        "createdAt": "2023-05-22T10:18:11Z",
        "updatedAt": "2023-05-22T10:18:11Z",
        "author": {
          "login": "MeikTranel"
        }
      }
    ]
  }
}