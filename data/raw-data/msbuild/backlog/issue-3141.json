{
  "number": 3141,
  "title": "Node reuse locks task assembly file",
  "body": "We have build scripts that produce tasks as a local assembly. These assembly files are locked by the nodes, which means we can't use nodeReuse on repos that use custom local tasks.\r\n\r\n### Steps to reproduce\r\n\r\n1. Git clone https://github.com/aspnet/BuildTools/tree/6e2c86240ffd0056d202eb8ede1fba1e251804b4\r\n2. `build.cmd /p:SkipTests=true`\r\n3. `build.cmd /p:SkipTests=true`\r\n\r\n### Expected  behavior\r\nIt would be great if nodeReuse was savvy enough to handle changes to task assemblies on disk.\r\n\r\n### Actual behavior\r\n```\r\nC:\\Users\\namc\\.dotnet\\x64\\sdk\\2.1.300-preview2-008396\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Publish.targets(137,5): warning MSB3026: Could not copy \"obj\\Release\\netcoreapp2.0\\RepoTasks.dll\" to \"C:\\dev\\aspnet\\BuildTools\\build\\tasks\\bin\\publish\\RepoTasks.dll\". Beginning retry 1 in 1000ms. The process cannot access the file 'C:\\dev\\aspnet\\BuildTools\\build\\tasks\\bin\\publish\\RepoTasks.dll' because it is being used by another process.  [C:\\dev\\aspnet\\BuildTools\\build\\tasks\\RepoTasks.csproj]\r\n```\r\n\r\nThe process locking the file is\r\n```\r\nC:\\Users\\namc\\.dotnet\\x64\\dotnet.exe \"C:\\Users\\namc\\.dotnet\\x64\\sdk\\2.1.300-preview2-008396\\MSBuild.dll\" C:\\Users\\namc\\.dotnet\\x64\\sdk\\2.1.300-preview2-008396\\MSBuild.dll /nologo /nodemode:1 /nodeReuse:true\r\n```\r\n\r\n### Environment data\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.300-preview2-008396\r\n Commit:    400e670faa\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Users\\namc\\.dotnet\\x64\\sdk\\2.1.300-preview2-008396\\\r\n```\r\n\r\n## Workaround\r\n```\r\nbuild.cmd /nodeReuse:false\r\n```",
  "state": "CLOSED",
  "createdAt": "2018-03-27T19:13:54Z",
  "updatedAt": "2024-02-21T17:13:53Z",
  "closedAt": "2020-03-18T21:53:45Z",
  "author": {
    "login": "natemcmaster"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "MSBuild 16.6 Preview 2"
  },
  "comments": {
    "nodes": [
      {
        "body": "This would be great but AFAIK it's impossible as .NET Core doesn't provide any way to unload an assembly.",
        "createdAt": "2018-03-27T19:17:02Z",
        "updatedAt": "2018-03-27T19:17:02Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "One way to improve the current situation would be to shut task host nodes down immediately after they run their task.\r\n\r\nToday, you can force execution of a task into another process by specifying `TaskFactory=\"TaskHostFactory\"` in its `UsingTask` declaration. Today, that process lives long past the initial build and may be reused, causing the task assemblies to be locked for a long time, so a subsequent build can't update them.\r\n\r\nRelated (I thought this was already the case and was wrong): https://github.com/microsoft/msbuild/issues/2916#issuecomment-360897413\r\n\r\nIf using the already-slow \"isolate this task into its own process\" flag also implied \"and terminate that process when it's done\", we could advise people who use tasks built in their own repo to use it, which would help a lot with this annoyance.\r\n\r\nI'm going to tentatively put this in 16.6 since it keeps coming up (see also #4743).\r\n\r\n[task-locks-task-assembly-forever.zip](https://github.com/microsoft/msbuild/files/4104717/task-locks-task-assembly-forever.zip)\r\n",
        "createdAt": "2020-01-23T18:04:14Z",
        "updatedAt": "2020-01-23T18:04:14Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}