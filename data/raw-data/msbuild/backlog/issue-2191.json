{
  "number": 2191,
  "title": "MSBuild target incorrect framework when using project dependencies to enforce build order",
  "body": "I have a solution that has multiple projects. Most of the projects are targeting multiple frameworks using the new .csproj format and one of them is only targeting a single framework (net 4.6.1). If you set up build order MSBuild attempts to build the referenced project with (what appears to be) the wrong target framework.\r\n\r\nWhen building from within Visual Studio everything works fine.\r\n\r\nWhen building with MSBuild (MSBuild.exe\" /t:rebuild) on the command line the build fails. \r\n\r\nThe impact is we can't build on our CI server. \r\n\r\nAttached is a test project. \r\n\r\n[ResharperTests.zip](https://github.com/Microsoft/msbuild/files/1059435/ResharperTests.zip)\r\n",
  "state": "OPEN",
  "createdAt": "2017-06-07T21:52:11Z",
  "updatedAt": "2024-02-21T16:36:41Z",
  "closedAt": null,
  "author": {
    "login": "lennoncork"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Consider for Next Major Version"
  },
  "comments": {
    "nodes": [
      {
        "body": "If you remove the project dependency the build order is wrong but MSBuild succeeds. If you need to enforce build order, adding a project dependency causes MSBuild to fail. \r\n\r\n![image](https://user-images.githubusercontent.com/7624296/26905972-33382fc8-4b9f-11e7-985f-ccf221f31cf6.png)\r\n",
        "createdAt": "2017-06-07T23:36:08Z",
        "updatedAt": "2017-06-07T23:36:08Z",
        "author": {
          "login": "lennoncork"
        }
      },
      {
        "body": "Probably related to https://github.com/Microsoft/msbuild/issues/1915.",
        "createdAt": "2017-06-14T17:00:59Z",
        "updatedAt": "2017-06-14T17:00:59Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Do you have a workaround for this issue ?\r\nIs it necessary to return to old csproj for build my solution on my CI server again ?\r\n",
        "createdAt": "2017-08-21T14:00:57Z",
        "updatedAt": "2017-08-21T14:00:57Z",
        "author": {
          "login": "Kassoul"
        }
      },
      {
        "body": "@Kassoul I simply created two solutions and executed them in the appropriate order on the build server. I only had one dependency so it wasn't too big of an issue. Not a great solution but it worked as a stop gap for us. ",
        "createdAt": "2017-09-23T04:18:25Z",
        "updatedAt": "2017-09-23T15:40:55Z",
        "author": {
          "login": "lennoncork"
        }
      },
      {
        "body": "An additional workaround. As the project was a binary executable, adding the \"netstandard\" build target wasn't an option. However I was able to add a target that changed the output type. This allowed us to target multiple framwworks without any build errors. \r\n\r\n```  \r\n  <!-- SEE https://github.com/Microsoft/msbuild/issues/2191 -->\r\n  <PropertyGroup Condition=\"'$(TargetFramework)'=='netstandard1.6'\">\r\n    <!-- Update to library so can be compiled as netstandard. -->\r\n    <OutputType>Library</OutputType>\r\n  </PropertyGroup>\r\n\r\n  <!-- SEE https://github.com/Microsoft/msbuild/issues/2191 -->\r\n  <ItemGroup Condition=\"'$(TargetFramework)'=='netstandard1.6'\">\r\n    <!-- Remove all files from being compiled -->\r\n    <Compile Remove=\"**\\*.cs\" />\r\n  </ItemGroup>\r\n```",
        "createdAt": "2018-04-16T16:15:00Z",
        "updatedAt": "2018-04-16T16:15:40Z",
        "author": {
          "login": "lennoncork"
        }
      },
      {
        "body": "Somewhat related to #3200",
        "createdAt": "2018-04-16T17:00:27Z",
        "updatedAt": "2018-04-16T17:01:04Z",
        "author": {
          "login": "lennoncork"
        }
      }
    ]
  }
}