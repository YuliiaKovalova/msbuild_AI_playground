{
  "number": 1750,
  "title": "Ideas needed: Concise syntax for [System.IO.Path]::Combine()",
  "body": "Combining paths is a common operation in a build system. Now that MSBuild is cross-platform, it's even more fraught with danger due to the vagaries of slash directions.\r\n\r\nMost MSBuild projects just use `$(Path1)\\$(Path2)`. This works and is concise but has some downsides:\r\n* Has an explicit slash direction\r\n* Can result in doubled slashes (if `Path1` has a trailing slash)\r\n* Isn't obviously a path-combining expression--it's indistinguishable from string concatenation (because that's what it is).\r\n\r\nThe most-obviously-correct approach is `$([System.IO.Path]::Combine('$(Path1)', '$(Path2)'))`. That doesn't have any of those downsides, but is verbose and hard to read (and type).\r\n\r\nIt would be great if we could have a concise syntax that called the cross-platform supported system API, but wasn't unreadable. Ideas welcome!",
  "state": "OPEN",
  "createdAt": "2017-02-24T18:12:54Z",
  "updatedAt": "2023-11-25T13:27:55Z",
  "closedAt": null,
  "author": {
    "login": "rainersigwald"
  },
  "labels": [
    "needs-design"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "One thought that I had is to make a new function similar to `Exists`, that takes two strings and returns a string.  It could be named `PathCombine`. (Or even just `Combine` and it could imply that it is combining paths.  This is similar to `Exists`, since `Exists` implies files/directories.)\r\n\r\n`<MyPath>PathCombine('$(Path1)', '$(Path2)')</MyPath>`",
        "createdAt": "2017-02-24T18:17:38Z",
        "updatedAt": "2017-02-24T18:19:11Z",
        "author": {
          "login": "eerhardt"
        }
      },
      {
        "body": "Currently, we don't allow bare functions like that in property expansions. `Exists()` is valid only in `Condition` attributes--which allows it to have the more concise form.\r\n\r\nWe could change that, but it strikes me as risky and potentially hard to model when reading the project. Having something stuffed inside a `$()` property expansion would be more consistent with the current approach.",
        "createdAt": "2017-02-24T18:42:46Z",
        "updatedAt": "2017-02-24T18:42:46Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "We need to document my new instrisic function [NormalizeDirectory](https://github.com/Microsoft/msbuild/blob/e5bc7994348dba88d1f6fe2ebd6aa354355f0063/src/Build/Evaluation/IntrinsicFunctions.cs#L406).\r\n\r\n```xml\r\n<PropertyGroup>\r\n  <MyPath1>$([MSBuild]::NormalizeDirectory('foo', 'bar', 'baz'))</MyPath1>\r\n  <MyPath2>$([MSBuild]::NormalizeDirectory($(Path1), $(Path2))</MyPath2>\r\n  <MyPath3>$([MSBuild]::NormalizeDirectory($(Path1), $(Path2), 'foo')</MyPath3>\r\n</PropertyGroup>\r\n```\r\n\r\nIt takes a params string[], calls `Path.Combine()`, `Path.GetFullPath()` and ensures the result has a trailing slash (where all directory separators are correct for the platform).\r\n\r\nFunctions like `Exists()` only work in conditions as far as I know because of [special parsing logic](https://github.com/Microsoft/msbuild/blob/xplat/src/Build/Evaluation/Conditionals/FunctionCallExpressionNode.cs#L18).  Property functions must be in the form `$([]::)` so the shortest is intrinsic functions exposed via `$([MSBuild]::)`.",
        "createdAt": "2017-02-24T18:46:18Z",
        "updatedAt": "2017-02-24T18:46:53Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "Oh, `NormalizeDirectory`! I thought I remembered something like that going in but couldn't dig it up. So yes, we need documentation :)",
        "createdAt": "2017-02-24T18:49:35Z",
        "updatedAt": "2017-02-24T18:49:35Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "To make things more concise, is there a way you could you drop the `$([MSBuild]::).` part and if there is no prefix/class imply `[MSBuild]`?\r\n\r\nSay: `$(::NormalizeDirectory($(Path1), $(Path2))`",
        "createdAt": "2017-02-24T18:51:01Z",
        "updatedAt": "2017-02-24T18:51:01Z",
        "author": {
          "login": "eerhardt"
        }
      },
      {
        "body": "I love that idea. I hoped it would produce a syntax error in today's MSBuild but instead it's . . . silently eaten? Which is not good. But I wouldn't feel too bad about making it do something meaningful.\r\n\r\n```xml\r\n<Message Importance=\"High\" Text=\"Yo: $(::NormalizeDirectory('foo', 'bar', 'baz'))\" />\r\n```\r\n\r\n```\r\nMicrosoft (R) Build Engine version 15.1.545.13942\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\nBuild started 2/24/2017 12:55:17 PM.\r\nProject \"s:\\work\\bxc-52673\\expansion.targets\" on node 1 (default targets).\r\nBuild:\r\n  Yo:\r\nDone Building Project \"s:\\work\\bxc-52673\\expansion.targets\" (default targets).\r\n```",
        "createdAt": "2017-02-24T18:56:44Z",
        "updatedAt": "2017-02-24T18:56:44Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@eerhardt  anything is possible but I share Rainer's concern about breaking back compat.  Properties are in the form `$(foo)` and you're asking for something like `$(NormalizeDirectory('foo'))`.  I'm not familiar enough with the parsing code to know how invasive it would be.",
        "createdAt": "2017-02-24T18:56:50Z",
        "updatedAt": "2017-02-24T18:56:50Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "> Properties are in the form $(foo) and you're asking for something like $(NormalizeDirectory('foo'))\r\n\r\nI think you missed the `::` part.  Or at least, some sort of way to mark it as \"this is a built-in function\".",
        "createdAt": "2017-02-24T18:58:50Z",
        "updatedAt": "2017-02-24T18:58:50Z",
        "author": {
          "login": "eerhardt"
        }
      },
      {
        "body": "I saw it but I think if it would make sense to go for `$(NormalizeDirectory('foo'))` instead, do you agree?  The `::` looks weird to me....",
        "createdAt": "2017-02-24T19:00:59Z",
        "updatedAt": "2017-02-24T19:00:59Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "If you know the full property function syntax, that would be a one-line update to your knowledge: \"If no class is specified, the `[MSBuild]` class is implied.\" It doesn't have quite the same meaning as a leading [\u05e4\u05e2\u05de\u05d9\u05d9\u05dd \u05e0\u05e7\u05d5\u05d3\u05ea\u05d9\u05d9\u05dd](http://php.net/manual/en/language.oop5.paamayim-nekudotayim.php) does in C++, but it still serves as a property-function marker, visible to the eye and to the parser. Strikes me as a great compromise between readability and compatibility.",
        "createdAt": "2017-02-24T19:04:27Z",
        "updatedAt": "2017-02-24T19:05:45Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Okay so \"implicit intrinsic functions\"!  I'm fine with it.",
        "createdAt": "2017-02-24T19:06:56Z",
        "updatedAt": "2017-02-24T19:06:56Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "Is there any resolution for \"extension methods\" for properties? If so, one could make a method similar to how string instance methods can be used:\r\n```\r\n$(PublishDir.Sub('pkg').Sub('stage0'))\r\n```",
        "createdAt": "2017-02-24T19:13:27Z",
        "updatedAt": "2017-02-24T19:13:27Z",
        "author": {
          "login": "dasMulli"
        }
      },
      {
        "body": "> Is there any resolution for \"extension methods\" for properties? \r\n\r\nAt the moment we use reflection on members of the current type.  Is there a way to search for static extensions methods that apply to the current type?",
        "createdAt": "2017-02-24T19:21:49Z",
        "updatedAt": "2017-02-24T19:21:49Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "I bet we could add logic to treat \"I have a string and they're asking for `Combine`\" specially, replacing it with a method of our choice. That's interesting, too. Could be something like `$(Path1.Combine($(Path2), $(Path3)))` . . .",
        "createdAt": "2017-02-24T19:46:27Z",
        "updatedAt": "2017-02-24T19:46:27Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "+1 to the new extension method.\r\n\r\nWe could also introduce a special property like `$(/)`: `foo$(/)bar$(/)zar`. Though the extension method looks easier to the eye. We could even add a Normalize method: `$(Path1.Sub('Path2').Sub('Path2').Normalize())`. ",
        "createdAt": "2017-02-27T20:55:28Z",
        "updatedAt": "2017-02-27T20:59:23Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "Have you already found a solution to this? Why not just accelerate access to `Path` (and possibly other useful classes) like `$([Path]::Combine('$(Path1)', '$(Path2)'))` ?",
        "createdAt": "2023-11-25T13:27:54Z",
        "updatedAt": "2023-11-25T13:27:54Z",
        "author": {
          "login": "ceztko"
        }
      }
    ]
  }
}