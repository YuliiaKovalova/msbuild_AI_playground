{
  "number": 9224,
  "title": "[Bug]: <MSBuild> build target fails when csproj specifies frameworks using <TargetFrameworks>",
  "body": "### Issue Description\n\nI have a platform-independent dependency project that targets the `net6.0` framework.\r\nFurther, I have a main project that needs to target both `net6.0` and `net6.0-windows` and have a project reference to the dependency project.\r\nI also have an MSBuild props file that packages all projects into one NuGet package when you `dotnet pack` the main project.\r\n\r\nWhen I specify a single target framework for the main project using `<TargetFramework>` the project builds fine. However, if I just change the element to `<TargetFrameworks>` (plural), then building the project fails with the following error:\r\n\r\n```\r\nC:\\Program Files\\dotnet\\sdk\\7.0.401\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(266,5): error NETSDK1005: Assets file 'C:\\Projects\\AdHoc\\MSBuildTarget\\Dependency\\obj\\project.assets.json' doesn't have a target for 'net6.0-windows'. Ensure that restore has run and that you have included 'net6.0-windows' in the TargetFrameworks for your project.\r\n```\r\n\r\nHere's the main project _csproj_ file with the project reference using a `PackAsRuntime` attribute so as to trigger the relevant target in the props file:\r\n\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFrameworks>net6.0-windows</TargetFrameworks>\r\n    <ImplicitUsings>enable</ImplicitUsings>\r\n    <Nullable>enable</Nullable>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <ProjectReference Include=\"..\\Dependency\\Dependency.csproj\" PackAsRuntime=\"true\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\r\n\r\nHere is the props file that is used that declares `PackAsRuntime`:\r\n\r\n```\r\n<Project>\r\n\t<Target\r\n        Name=\"IncludePackAsRuntimeProjectReferences\"\r\n        AfterTargets=\"AfterCompile\"\r\n        Condition=\"'@(ProjectReference)' != '' and @(ProjectReference->AnyHaveMetadataValue('PackAsRuntime', 'true'))\">\r\n\t\t\r\n\t\t<MSBuild Projects=\"@(ProjectReference->WithMetadataValue('PackAsRuntime', 'true'))\" Targets=\"GetPackAsRuntimeFiles\" />\r\n\t</Target>\r\n\r\n\t<Target Name=\"GetPackAsRuntimeFiles\" DependsOnTargets=\"$(GenerateNuspecDependsOn)\">\r\n\t</Target>\r\n</Project>\r\n```\r\n\r\nWhen I build the main project, I get the following error:\r\n\r\n```\r\nC:\\Program Files\\dotnet\\sdk\\7.0.401\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(266,5): error NETSDK1005: Assets file 'C:\\Projects\\AdHoc\\MSBuildTarget\\Dependency\\obj\\project.assets.json' doesn't have a target for 'net6.0-windows'. Ensure that restore has run and that you have included 'net6.0-windows' in the TargetFrameworks for your project.\r\n```\r\n\r\n[MSBuildTarget.zip](https://github.com/dotnet/msbuild/files/12647217/MSBuildTarget.zip)\r\n\n\n### Steps to Reproduce\n\nA sample project that demonstrates the issue is attached.\r\nThe following command manifests the issue (or build the solution via Visual Studio):\r\n\r\n```\r\ndotnet build Main\r\n```\n\n### Expected Behavior\n\nBuilding the project outputs the binaries for the `net6.0-windows` framework target and does not fail.\n\n### Actual Behavior\n\nBuilding the project fails when `<TargetFrameworks>` is used in the main project instead of `<TargetFramework>`\n\n### Analysis\n\n_No response_\n\n### Versions & Configurations\n\nVisual Studio: 17.7.4\r\n\r\nMSBuild: MSBuild version 17.7.2+d6990bcfa for .NET Framework\r\n17.7.2.37605",
  "state": "CLOSED",
  "createdAt": "2023-09-18T11:36:01Z",
  "updatedAt": "2023-09-19T16:37:05Z",
  "closedAt": "2023-09-19T08:16:45Z",
  "author": {
    "login": "bhaeussermann"
  },
  "labels": [
    "bug",
    "needs-triage"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Invoking `<MSBuild` manually on `@(ProjectReference)` items is tricky because you have to take special care to pass additional properties in the same way that the common targets do, or you'll be building a different instance of the project (with different global properties).\r\n\r\nhttps://github.com/dotnet/msbuild/blob/caf06d19326f9e7dcc06d4d4f4b04f1c6ddae5f0/src/Tasks/Microsoft.Common.CurrentVersion.targets#L2085C8-L2092\r\n\r\nIn your case, because your `<MSBuild` invocation doesn't have `RemoveProperties=\"TargetFramework\"`, the `TargetFramework` global property from the `net6.0-windows` \"inner build\" of your referencing project is inherited by the project created by the `<MSBuild` task. Since that TF wasn't specified for the referenced project at restore time, you get the \"haven't restored for this TF\" error.\r\n\r\n",
        "createdAt": "2023-09-18T13:48:51Z",
        "updatedAt": "2023-09-19T16:25:50Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Thanks @rainersigwald!\r\nAdding `RemoveProperties=\"TargetFramework\"` got me a step further, though I'm not sure why it's not needed when using `<TargetFramework>` in the csproj instead of `<TargetFrameworks>`.\r\n\r\nEither way, I've now run into a problem when building the NuGet package that also relates to `<TargetFrameworks>`. I created a [separate issue](https://github.com/dotnet/msbuild/issues/9230) for it.",
        "createdAt": "2023-09-19T08:16:45Z",
        "updatedAt": "2023-09-19T08:16:45Z",
        "author": {
          "login": "bhaeussermann"
        }
      },
      {
        "body": "> I'm not sure why it's not needed when using `<TargetFramework>` in the csproj instead of `<TargetFrameworks>`.\r\n\r\nThis is because multitargeted projects work like this from the MSBuild engine perspective:\r\n\r\n* The project starts building with no TF specified as a global property\r\n* That build, the \"outer build\", imports build logic that, instead of building stuff, _invokes the inner builds for each `TargetFramework` in `$(TargetFrameworks)`_.\r\n* It does that by building _itself_ (the same `.csproj`) but with an additional specified global property: `TargetFramework={}`\r\n* Those projects (the \"inner builds\") then do their own build stuff . . . but when they call to other builds they will (by default, unless `RemoveProperties` is specified) **pass along** the global properties they're built with.\r\n\r\nSo you get\r\n\r\n```mermaid\r\ngraph TD\r\nsubgraph referencing is single-targeted\r\nA[Referencing<br/>Single-targeted] --> B(Referenced)\r\nend\r\n\r\nsubgraph referencing is multi-targeted\r\nMulti[Referencing<br/>Multitargeted] -->|TF=tf1| Multi_tf1[Referencing inner<br />TF=tf1]\r\nMulti -->|TF=tf2| Multi_tf2[Referencing inner<br />TF=tf2]\r\nMulti_tf1 -->|your MSBuild call| B_tf1[Referenced<br/>TF=tf1]\r\nMulti_tf2 -->|your MSBuild call| B_tf2[Referenced<br/>TF=tf2]\r\nend\r\n```",
        "createdAt": "2023-09-19T16:34:26Z",
        "updatedAt": "2023-09-19T16:37:05Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}