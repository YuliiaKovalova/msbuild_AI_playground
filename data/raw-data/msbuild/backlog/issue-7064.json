{
  "number": 7064,
  "title": "Question - are there any tools that leverage the Detailed Build Summary to help identify the build bottlenecks?",
  "body": "I have a solution with ~130 projects and according to the detailed build summary (obtained from the bin log) its node utilization is abysmal:\r\n```\r\nUtilization:          22.8    11.7    17.2    7.2     52.4    16.6    12.8    13.3    13.1    29.8    34.3    14.9     Average Utilization: 20.5104451261997\r\n```\r\nI would like to improve it. My plan is identify the bottleneck projects on which many other projects depend and check if there are transitive dependencies involving the bottleneck projects that can be short-circuited. For example, suppose A depends on B and B depends on C. Does A really need to depend on B? Maybe it can depend on C directly and the B dependency can be removed?\r\n\r\nThis kind of analysis requires tooling, so I wonder - do you guys have such tooling or anything that can help here? I am asking because I know you have created the detailed build summary to help you improve the performance, but I hardly believe you did all the leg work without automation.\r\n\r\nThank you,",
  "state": "OPEN",
  "createdAt": "2021-11-22T18:41:57Z",
  "updatedAt": "2024-01-31T08:19:46Z",
  "closedAt": null,
  "author": {
    "login": "MarkKharitonov"
  },
  "labels": [
    "question",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Discussion"
  },
  "comments": {
    "nodes": [
      {
        "body": "Have you seen this?\r\nhttps://github.com/rainersigwald/TraceEventLogger ",
        "createdAt": "2021-11-22T23:39:12Z",
        "updatedAt": "2021-11-22T23:39:12Z",
        "author": {
          "login": "yuehuang010"
        }
      },
      {
        "body": "No, but I will take a look right away,",
        "createdAt": "2021-11-23T00:23:10Z",
        "updatedAt": "2021-11-23T00:23:10Z",
        "author": {
          "login": "MarkKharitonov"
        }
      },
      {
        "body": "I have a 9MB binlog capturing the full build of a solution with 130 projects. When I open the trace in chrome it seems overwhelmed by its size. At this point I do not understand how I can use it efficiently. It may be my problem, not the tool's. If there is a doc explaining how to analyze a solution the size of mine, I will be happy to get it.",
        "createdAt": "2021-11-23T00:49:39Z",
        "updatedAt": "2021-11-23T00:49:39Z",
        "author": {
          "login": "MarkKharitonov"
        }
      },
      {
        "body": "You can modify the logger to strip inform to reduce the size.  For an instance, you can remove targets and focus on task and projects.",
        "createdAt": "2021-11-23T01:05:08Z",
        "updatedAt": "2021-11-23T01:05:08Z",
        "author": {
          "login": "yuehuang010"
        }
      },
      {
        "body": "Essentially it would be a different logger altogether. \r\nBut it is good starting point and an interesting idea to leverage chrome tracing. I would not have thought about it. So, thank you for the info.",
        "createdAt": "2021-11-23T21:28:14Z",
        "updatedAt": "2021-11-23T21:28:28Z",
        "author": {
          "login": "MarkKharitonov"
        }
      },
      {
        "body": "> I have a 9MB binlog capturing the full build of a solution with 130 projects. When I open the trace in chrome it seems overwhelmed by its size. At this point I do not understand how I can use it efficiently. It may be my problem, not the tool's. If there is a doc explaining how to analyze a solution the size of mine, I will be happy to get it.\r\n\r\nI have the same problem. Our solution contains 500 projects and a clean build results in a 30 MB binlog file. The aforementioned tool seems nice but too detailed at the moment. I think I would need a tool which is visualizing the `Detailed Build Summary` in the first place. In my understanding this should reflect the dependency graph and the node utilization in a clean and compact way and could provide hints, where there are bottlenecks or unwanted non-parallel executing.\r\n\r\n@MarkKharitonov Have you already found a different tool or how do you deal with it at the moment?",
        "createdAt": "2021-12-03T11:49:22Z",
        "updatedAt": "2021-12-03T11:50:45Z",
        "author": {
          "login": "rkieslinger"
        }
      },
      {
        "body": "@rkieslinger - yes. I took @yuehuang010 advice to heart and modified the logger. So the things I found useful are:\r\n\r\n1. Ignore all the events, except the project level event corresponding to the build target.\r\n2. Ignore all the events, except the given target event.\r\n\r\nI reworked the tool using the ManyConsole nuget package, that allows to easily implement many commands within the same command line tool. Here is the complete code for the get-trace-events command:\r\n```\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.IO;\r\nusing System.Linq;\r\nusing ManyConsole;\r\nusing Microsoft.Build.Logging.StructuredLogger;\r\nusing Newtonsoft.Json;\r\n\r\nnamespace MSBuildBinaryLogAnalyzer\r\n{\r\n    public partial class GetTraceEventsCmd : ConsoleCommand\r\n    {\r\n        private string m_input;\r\n        private string m_target;\r\n\r\n        public GetTraceEventsCmd()\r\n        {\r\n            IsCommand(\"get-trace-events\", \"Gets trace events for the projects or the given target across all the projects.\");\r\n\r\n            HasRequiredOption(\"i|input=\", \"A binary log file.\", v => m_input = v);\r\n            HasOption(\"t|target=\", \"The target to focus on. By default the focus is on the entire project.\", v => m_target = v);\r\n        }\r\n\r\n        public override int Run(string[] remainingArguments)\r\n        {\r\n            Run(m_input, m_target);\r\n            return 0;\r\n        }\r\n\r\n        internal static void Run(string input, string target)\r\n        {\r\n            var build = BinaryLog.ReadBuild(input);\r\n            BuildAnalyzer.AnalyzeBuild(build);\r\n            var events = YieldEvents(build, target);\r\n\r\n            var fileNameSuffix = target == null ? \"_events.json\" : $\"_events_for_{target}.json\";\r\n            using var file = File.CreateText(input.Replace(\".binlog\", fileNameSuffix));\r\n            var serializer = new JsonSerializer\r\n            {\r\n                NullValueHandling = NullValueHandling.Ignore\r\n            };\r\n            serializer.Serialize(file, events);\r\n        }\r\n\r\n        private static IEnumerable<TraceEvent> YieldEvents(Build build, string targetName)\r\n        {\r\n            IReadOnlyCollection<TimedNode> foundNodes;\r\n            Func<TimedNode, string> getName;\r\n            if (targetName != null)\r\n            {\r\n                foundNodes = build.FindChildrenRecursive<Target>(o => o.Name == targetName);\r\n                getName = n => ((Target)n).Project.Name;\r\n            }\r\n            else\r\n            {\r\n                foundNodes = build.FindChildrenRecursive<Project>(o =>\r\n                    !o.Name.EndsWith(\".metaproj\") &&\r\n                    (o.EntryTargets.Count == 0 || o.EntryTargets[0] == \"Build\") &&\r\n                    !o.Children.OfType<Target>().Any(o => o.FirstChild is Message m && m.LookupKey == \"Target \\\"Build\\\" skipped. Previously built successfully.\"));\r\n                getName = n => n.Name;\r\n            }\r\n\r\n            foreach (var foundNode in foundNodes)\r\n            {\r\n                var name = getName(foundNode);\r\n                yield return StartTraceEvent(foundNode, name, build.StartTime);\r\n                yield return EndTraceEvent(foundNode, name, build.StartTime);\r\n            }\r\n        }\r\n\r\n        private static TraceEvent EndTraceEvent(TimedNode node, string name, DateTime firstObservedTime) => new()\r\n        {\r\n            name = name,\r\n            ph = \"E\",\r\n            ts = (node.EndTime - firstObservedTime).TotalMicroseconds(),\r\n            tid = node.NodeId,\r\n            id = node.Id.ToString(),\r\n            pid = \"0\"\r\n        };\r\n\r\n        private static TraceEvent StartTraceEvent(TimedNode node, string name, DateTime firstObservedTime) => new()\r\n        {\r\n            name = name,\r\n            ph = \"B\",\r\n            ts = (node.StartTime - firstObservedTime).TotalMicroseconds(),\r\n            tid = node.NodeId,\r\n            id = node.Id.ToString(),\r\n            pid = \"0\"\r\n        };\r\n    }\r\n}\r\n```\r\nIt leverages the fact that the binary log API is richer today than it was when the original tool was first written. We no longer need to process the low level build events, instead the binary log API can build the tree for us and let us search for the nodes we want. Wasteful, but so convenient.\r\n\r\nNotice I report everything as a single process and map the different build nodes to the threads, rather than processes as done by the original tool. Finally, do not use built-in chrome://tracing, instead I am using https://ui.perfetto.dev/\r\nCheckout the result:\r\n![image](https://user-images.githubusercontent.com/489792/144645936-9f16579e-4700-4f9f-ad78-d9da233e154f.png)\r\n\r\nAnd if you pass the target name, it would produce the trace events for that target only. Not sure yet if it is helpful in identifying the bottlenecks, but the project view surely is. When you see a long \"bridge\" - it is a bottleneck.\r\n\r\nHope it helps.",
        "createdAt": "2021-12-03T17:27:00Z",
        "updatedAt": "2021-12-03T17:27:00Z",
        "author": {
          "login": "MarkKharitonov"
        }
      },
      {
        "body": "@MarkKharitonov Thank you so much for taking the time sharing and explaining your solution to me! Although it doesn't worked  in my case, it definitely pointed me in the right direction.\r\n\r\nI don't know why, but multiple `ProjectStartedEvents`/`ProjectFinishedEvents` per project and seperated begin and end events in the trace file always seemed to mess up something.\r\n\r\nSo I started focusing more on the expensive tasks rather than the whole projects, because in our case, there are 3 tasks which are taking about 95 % of the time (CL, Link, CSC). For us understanding our long build times better, the other 5 % are just noise in that case. This already made everything so much clearer (thousands of project events in comparison to just about 850 task events)\r\n\r\nBecause the binary log API is already giving us start and end times of tasks, I also got rid of the duration events (begin and ends seperated) and started using [complete events](https://docs.google.com/document/d/1CvAClvFfyA5R-PhYUmn5OOQtYMH4h6I0nSsKchNAySU/preview#heading=h.lpfof2aylapb) (begin and ends combined) instead. This not only reduces the file size significantly, but also is more straight forward in my opinion. I don't know why, but using seperated begin and end events I always get the feeling, there could get wrong begin and end events connected to each other.\r\n\r\nTo give us the best overview, I use `NodeId` as the process id and create a thread for every task. Though our solution is huge (> 500 projects) the resulting json file is still under 100 kb.\r\n\r\nHere's a screenshot (no, that are not our real project names \ud83d\ude01):\r\n\r\n![image](https://user-images.githubusercontent.com/20225125/144749857-19c894fe-d20c-4fde-ba07-82cf616ad22b.png)",
        "createdAt": "2021-12-05T14:20:06Z",
        "updatedAt": "2021-12-05T14:20:06Z",
        "author": {
          "login": "rkieslinger"
        }
      },
      {
        "body": "Let me paste the project file here:\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n    <PropertyGroup>\r\n      <TargetFramework>net5</TargetFramework>\r\n      <OutputType>Exe</OutputType>\r\n    </PropertyGroup>\r\n    <ItemGroup>\r\n      <PackageReference Include=\"ManyConsole\" Version=\"2.0.1\" />\r\n      <PackageReference Include=\"MSBuild.StructuredLogger\" Version=\"2.1.545\" />\r\n      <PackageReference Include=\"Newtonsoft.Json\" Version=\"13.0.1\" />\r\n    </ItemGroup>\r\n</Project>\r\n```\r\nI am curious why you could not build the tree of events using the commands\r\n```\r\nvar build = BinaryLog.ReadBuild(input);\r\nBuildAnalyzer.AnalyzeBuild(build);\r\n```\r\nI do not know how well this API is suited for C++ projects. Maybe it is not and that leaves you no choice but deal with the low level.\r\n\r\nFor purely C# projects it works great and is very convenient.",
        "createdAt": "2021-12-05T16:03:37Z",
        "updatedAt": "2021-12-05T16:03:37Z",
        "author": {
          "login": "MarkKharitonov"
        }
      },
      {
        "body": "Sorry if my last post wasn't clear enough.\r\n\r\nThe method `BinaryLog.ReadBuild(input)` works just fine. I think the problem with your approach **in my case** is more about how the project events are getting filtered. Maybe that is not compatible with C++ projects, because the resulting trace file is weird and definitely wrong (For example, it doesn't show anything in the second half, except a single bar for the solution file).\r\n\r\nAnyways, I'm pretty happy with my current solution. Here's some code of the core logic:\r\n\r\n```C#\r\npublic ChromeTrace CreateTrace(params string[] taskNames)\r\n{\r\n    var traceBuilder = new ChromeTraceBuilder();\r\n    var build = BinaryLog.ReadBuild(_filePath);\r\n\r\n    var taskInfos = build\r\n        .FindChildrenRecursive<Task>(t => taskNames.Contains(t.Name))\r\n        .OrderBy(t => t.NodeId).ThenBy(t => t.Name)\r\n        .Select(t => new\r\n        {\r\n            ProjectName = ((Target)t.Parent).Project.Name,\r\n            Timestamp = (t.StartTime - build.StartTime).TotalMicroseconds(),\r\n            Duration = t.Duration.TotalMicroseconds(),\r\n            ProcessId = t.NodeId,\r\n            ThreadId = Array.IndexOf(taskNames, t.Name)\r\n        })\r\n        .ToList();\r\n\r\n    foreach (var t in taskInfos)\r\n        traceBuilder.AddDuration(t.ProjectName, t.Timestamp, t.Duration, t.ProcessId, t.ThreadId);\r\n\r\n    foreach (var pGroup in taskInfos.GroupBy(t => t.ProcessId).OrderBy(g => g.Key))\r\n    {\r\n        traceBuilder.AddMetadataProcessName(pGroup.Key, \"MSBuild\");\r\n        traceBuilder.AddMetadataProcessSortIndex(pGroup.Key, pGroup.Key);\r\n\r\n        foreach (var tGroup in pGroup.GroupBy(t => t.ThreadId).OrderBy(g => g.Key))\r\n        {\r\n            traceBuilder.AddMetadataThreadName(pGroup.Key, tGroup.Key, taskNames[tGroup.Key]);\r\n            traceBuilder.AddMetadataThreadSortIndex(pGroup.Key, tGroup.Key, tGroup.Key);\r\n        }\r\n    }\r\n\r\n    return traceBuilder.Build();\r\n}\r\n```",
        "createdAt": "2021-12-05T21:20:18Z",
        "updatedAt": "2021-12-05T21:20:18Z",
        "author": {
          "login": "rkieslinger"
        }
      },
      {
        "body": "Hi, I pushed a new tracing to binlog viewer.  Let me know if you find it useful and what feature would you like to see?",
        "createdAt": "2022-01-28T20:46:26Z",
        "updatedAt": "2022-01-28T20:46:26Z",
        "author": {
          "login": "yuehuang010"
        }
      },
      {
        "body": "Yes, I have seen it, but it is too crowded. I can share the code I am using to build traces. There are two key points:\r\n\r\n1. It is important to reduce the clutter by focusing on certain events only. I found it very useful to present the project build events Or specific target events.\r\n2. It is useless to spread the events across multiple processes (NodeId) and threads (project instance Id). No insights can be gathered from it, at least I failed to. Instead, I represent all the events as from a single process and NodeId is the thread Id. However, there is a catch - multiple project build events can share the same Node without being related at all. This fails the trace viewer. So, a special processing is needed. I pushed my code to github, you can find the relevant source code here - https://github.com/MarkKharitonov/MSBuildBinaryLogAnalyzer/blob/master/src/MSBuildBinaryLogAnalyzer/GetTraceEventsCmd.cs\r\n\r\nRun `.\\run.ps1 -h`, the command of interest is `get-trace-events`.",
        "createdAt": "2022-01-28T22:33:48Z",
        "updatedAt": "2022-01-28T22:33:48Z",
        "author": {
          "login": "MarkKharitonov"
        }
      }
    ]
  }
}