{
  "number": 5030,
  "title": "What is the correct way to run a target before/after Restore?",
  "body": "### Steps to reproduce\r\n\r\n1. Create a solution\r\n2. Add a project\r\n3. Edit the .csproj to add a target like \r\n\r\n```\r\n<Target Name=\"MyTarget\" AfterTargets=\"Restore\">\r\n  <!-- Whatever you want it to do -->\r\n</Target>\r\n```\r\n\r\n4. From command line, run msbuild on your project, with restore and generate a binlog `msbuild YourProjectName.csproj /r /bl`\r\n5. Look at the msbuild.binlog file that's generated. MyTarget will be immediately after the Restore target.\r\n6. From command line, run msbuild on your solution with restore and generate a binlog `msbuild YourSolutionName.sln /r /bl`\r\n7. Look at the msbuild.binlog file that's generated. MyTarget will not be run at all.\r\n\r\n### Expected  behavior\r\n\r\nMyTarget target is run after Restore target.\r\n\r\n### Actual behavior\r\n\r\nMyTarget target is never run\r\n\r\n### Environment data\r\n`msbuild /version` output:\r\n\r\nMicrosoft (R) Build Engine version 16.5.0-preview-19562-03+d72e25031 for .NET Framework\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n16.5.0.56203\r\n\r\nOS info:win\r\n\r\n### Other info\r\n\r\n1. The same thing is true for BeforeTargets as AfterTargets as far as I can tell.\r\n2. It looks like the problem is because there is no Restore target on the individual project when building from the solution. There is just one \"meta\" Restore target no matter how many projects are in the solution\r\n\r\n### Question\r\nSo the question then becomes, how do we do this properly? I want to do some extra restore stuff whenever a restore is done, but not worry about it at build time.\r\n",
  "state": "OPEN",
  "createdAt": "2020-01-03T19:30:46Z",
  "updatedAt": "2024-02-21T16:30:08Z",
  "closedAt": null,
  "author": {
    "login": "tlmii"
  },
  "labels": [
    "question",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Discussion"
  },
  "comments": {
    "nodes": [
      {
        "body": "This is happening because NuGet has different restore flows when invoked at the solution level and the project level. At the project level, the `Restore` target _in the project_ is called, because that's the entry point of the build. At the solution level, the `Restore` target _in the solution_ does something different: it collects reference information from all of the projects in the solution, then does the restore operation for the solution all at once. This can be much faster than doing restore for each project in turn.\r\n\r\nIf you want to customize solution restore, you can use [solution build extensibility](https://docs.microsoft.com/visualstudio/msbuild/customize-your-build?view=vs-2019#customize-the-solution-build) to call your custom target for each project in the solution before/after the (solution's) `Restore` target is called.\r\n\r\nIf you want to run per-project and _don't_ depend on the NuGet restore result, you might be able to hook the target NuGet uses to collect information from each project in addition to `Restore`, but I'm not sure if that's a documented, public extensibility point.\r\n\r\ncc @jeffkl, @nkolev92",
        "createdAt": "2020-01-06T16:43:38Z",
        "updatedAt": "2020-01-06T16:43:38Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> This is happening because NuGet has different restore flows when invoked at the solution level and the project level. At the project level, the `Restore` target _in the project_ is called, because that's the entry point of the build. At the solution level, the `Restore` target _in the solution_ does something different: it collects reference information from all of the projects in the solution, then does the restore operation for the solution all at once. This can be much faster than doing restore for each project in turn.\r\n> \r\nThat matches my understanding of the underlying situation, so thank you for confirming.\r\n\r\n> If you want to run per-project and _don't_ depend on the NuGet restore result, you might be able to hook the target NuGet uses to collect information from each project in addition to `Restore`, but I'm not sure if that's a documented, public extensibility point.\r\n> \r\nThis was exactly the route we were examining as an alternative, but were hesitant to take a dependency on what seemed like implementation details. It looks like either `_IsProjectRestoreSupported` or `_GenerateRestoreProjectPathWalk` would work for our specific solution right now - just not sure if that's a good long term solution.\r\n\r\n",
        "createdAt": "2020-01-06T17:47:26Z",
        "updatedAt": "2020-01-06T17:47:26Z",
        "author": {
          "login": "tlmii"
        }
      },
      {
        "body": "@tmlii \r\n\r\nYou are correct to be hesitant about any targets prefixed with _. \r\n\r\nCan you elaborate more about your scenario? \r\nWhat are you trying to customize? \r\n\r\nThere's a further complication to the issues summarized by both you and @rainersigwald and that's that NuGet Visual Studio restore is not run by a target. ",
        "createdAt": "2020-01-06T22:34:40Z",
        "updatedAt": "2020-01-06T22:34:56Z",
        "author": {
          "login": "nkolev92"
        }
      },
      {
        "body": "The short answer is that we're essentially trying to run `npm ci` as part of an otherwise mostly msbuild/C#-driven development project. We thought it would be nice to tie in the target that executes that with the restore process in msbuild (at least) and VS (if possible) since they are roughly equivalent concepts. We might not end up going down this route (mixing the worlds is fraught anyway) but wanted to see if it was even possible.",
        "createdAt": "2020-01-06T23:32:13Z",
        "updatedAt": "2020-01-06T23:32:13Z",
        "author": {
          "login": "tlmii"
        }
      },
      {
        "body": "Unfortunately, there is no way to hook on to restore in Visual Studio in a performant way. \r\nFor that reason I'd recommend not doing it if at all possible. \r\nThe `Collect*` targets in NuGet are an extensibility mechanism, but meant only for lightweight operations. ",
        "createdAt": "2020-01-07T00:58:03Z",
        "updatedAt": "2020-01-07T00:58:03Z",
        "author": {
          "login": "nkolev92"
        }
      },
      {
        "body": "See related https://github.com/NuGet/Home/issues/4781",
        "createdAt": "2021-11-15T10:31:50Z",
        "updatedAt": "2021-11-15T10:31:50Z",
        "author": {
          "login": "stan-sz"
        }
      },
      {
        "body": "I have a dotnet-tools.json defined at solution level.\r\n\r\nSome projects in the solution depends on the dotnet tools.\r\n\r\nHow to ensure, that the dotnet tools are restored, when either, solution or a project is build?\r\n\r\nI guess, ideal would be a variable flag, that could flow across projects when building solution...",
        "createdAt": "2021-12-05T10:25:06Z",
        "updatedAt": "2021-12-05T10:25:25Z",
        "author": {
          "login": "Liero"
        }
      },
      {
        "body": "you could just tell them that your project depends on the tools being restored first before trying to open it in devenv.",
        "createdAt": "2022-01-01T18:17:53Z",
        "updatedAt": "2022-01-01T18:17:53Z",
        "author": {
          "login": "AraHaan"
        }
      },
      {
        "body": "I am using msbuild /restore to retore the packages and then invoked devenv to build the solution. The commands are included in a batch file and this file is integrated to CI pipeline. The batch commands are as shown below.\r\n\r\n\r\n------------------------------------------------------------------------------------------------------------------------------\r\n\r\n> _msbuild MySolution.sln -t:Restore \r\n> \r\n> \r\n> \"%VS160COMNTOOLS%\\..\\IDE\\devenv\"  \"MySolution.sln\" /build \"%Build%|x64\" /out MySolution.log\r\n> if errorlevel 1 goto :failed_\r\n\r\n------------------------------------------------------------------------------------------------------------------------------\r\n\r\n'MySolution.sln' includes two projects- a library project and a WPF application.  The packages referenced in the projects are specified in a Packages.props file.\r\n\r\nThe build results are inconsistent. Sometimes it fails with following errors.\r\n\r\n\r\n> _CSC : error CS2001: Source file '<outpath>\\obj\\DDLStyleEditor\\Views\\ElementGroupView.g.cs' could not be found.\r\n> CSC : error CS2001: Source file '<outpath>\\obj\\DDLStyleEditor\\Views\\OptionsView.g.cs' could not be found.\r\n> CSC : error CS2001: Source file '<outpath>\\obj\\DDLStyleEditor\\Views\\PropertiesView.g.cs' could not be found.\r\n> CSC : error CS2001: Source file '<outpath>\\obj\\DDLStyleEditor\\Views\\MainView.g.cs' could not be found._\r\n\r\nIt works fine with VS2019, the packages are properly restored and the solution build successfully. Then why does it fail with batch file??. Please help.\r\n",
        "createdAt": "2022-04-06T05:42:40Z",
        "updatedAt": "2022-04-06T05:52:17Z",
        "author": {
          "login": "sreelekshmip"
        }
      }
    ]
  }
}