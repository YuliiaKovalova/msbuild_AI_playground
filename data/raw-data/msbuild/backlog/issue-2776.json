{
  "number": 2776,
  "title": "NuGet PackageReference style incorrectly selects 'bait' dll in NuGet package using 'bait and switch' pattern",
  "body": "### Summary\r\nA Xamarin.Forms project using a NetStandard class library for the Portable code, and the PackageReference NuGet package style in the corresponding Android project, incorrectly selects the 'bait' dll within a referenced 'Bait and Switch'-style NuGet package when compiling the Android App, resulting in a 'method or operation not implemented' exception on starting the App.\r\n\r\nNote: The same project correctly compiles the Android-specific 'Switch' dll when using the packages.config NuGet style in the Android project.\r\n\r\n### Steps to reproduce\r\n\r\n1. Create a Xamarin.Forms PCL project using the PackageReference NuGet package style\r\n2. Update the Portable project to target NetStandard\r\n3. Install a NuGet package in the Portable and Android projects that uses the 'bait and switch' pattern (i.e. SocketLite.Pcl)\r\n4. Build the Android project\r\n5. Open the \\obj\\Debug\\android\\assets folder, find the installed 'bait and switch' dll. The build process has incorrectly grabbed the 'bait' dll instead of the platform-specific implementation.\r\n6. Deploy the app -> the app crashes due to an 'un-implemented message \r\n\r\n### Sample projects\r\nThe below sample projects use SocketLite.PCL as an example package using the Bait-and-Switch pattern.\r\n\r\nThe below project uses the packages.config style in the Android project, and correctly compiles the Android-specific SocketLite.dll\r\n[BaitAndSwitchSample.zip](https://github.com/Microsoft/msbuild/files/1532480/BaitAndSwitchSample.zip)\r\n\r\nThe below project is identical, but uses the PackageReference style in the Android project, and incorrectly compiles the 'bait' dll instead of the Android-specific SocketLite.dll. This project catches and displays the 'unimplemented method' exception.\r\n[BaitAndSwitchSample-X.zip](https://github.com/Microsoft/msbuild/files/1532489/BaitAndSwitchSample-X.zip)\r\n\r\n\r\n### Environment data\r\nVisual Studio Version 15.4.4",
  "state": "CLOSED",
  "createdAt": "2017-12-05T19:06:47Z",
  "updatedAt": "2024-02-21T17:15:23Z",
  "closedAt": "2020-03-10T15:51:02Z",
  "author": {
    "login": "kelly987654"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "I'm seeing this as well, seems to be related to this issue\r\n\r\nAndroid 7.1 project using project.json chooses netstandard-1.6 dependencies, over monoandroid #5759\r\nhttps://github.com/NuGet/Home/issues/5759\r\n",
        "createdAt": "2018-01-10T21:25:06Z",
        "updatedAt": "2018-01-10T21:25:06Z",
        "author": {
          "login": "jalbertSyncroTech"
        }
      },
      {
        "body": "Has anyone had a chance to take a look at this? We have encountered this issue several times now in different applications.",
        "createdAt": "2018-01-13T03:13:20Z",
        "updatedAt": "2018-01-13T03:13:20Z",
        "author": {
          "login": "kelly987654"
        }
      },
      {
        "body": "@kzu could you take a look?\n\nFrom: kelly987654\nSent: Friday, January 12, 2018 7:14 PM\nTo: Microsoft/msbuild\nCc: Subscribed\nSubject: Re: [Microsoft/msbuild] NuGet PackageReference style incorrectlyselects 'bait' dll in NuGet package using 'bait and switch' pattern (#2776)\n\nHas anyone had a chance to take a look at this? We have encountered this issue several times now in different applications.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n\n",
        "createdAt": "2018-01-13T03:38:34Z",
        "updatedAt": "2018-01-13T03:38:34Z",
        "author": {
          "login": "dsplaisted"
        }
      },
      {
        "body": "I've no idea where to even start looking @dsplaisted :(. Wouldn't this be a NuGet restore issue rather?",
        "createdAt": "2018-01-13T03:43:03Z",
        "updatedAt": "2018-01-13T03:43:03Z",
        "author": {
          "login": "kzu"
        }
      },
      {
        "body": "@kzu Yes, it sounds like something NuGet related, but I haven't heard of this issue before, so I think it might be specific to Xamarin projects.",
        "createdAt": "2018-01-16T00:03:01Z",
        "updatedAt": "2018-01-16T00:03:01Z",
        "author": {
          "login": "dsplaisted"
        }
      },
      {
        "body": "/cc @mhutch\nOn Mon, Jan 15, 2018 at 9:03 PM Daniel Plaisted <notifications@github.com>\nwrote:\n\n> @kzu <https://github.com/kzu> Yes, it sounds like something NuGet\n> related, but I haven't heard of this issue before, so I think it might be\n> specific to Xamarin projects.\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/Microsoft/msbuild/issues/2776#issuecomment-357816201>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AAKW60TZyPQKpgirQYGyFyVgAnInL1Jdks5tK-c_gaJpZM4Q2zcG>\n> .\n>\n-- \n\n--\n/kzu from mobile\n",
        "createdAt": "2018-01-16T00:18:49Z",
        "updatedAt": "2018-01-16T00:18:49Z",
        "author": {
          "login": "kzu"
        }
      },
      {
        "body": "The NuGet has implementation assemblies for Android, but the reference assembles are NetStandard.\r\n\r\n```json\r\n\"compile\": {\r\n  \"ref/netstandard1.0/ISocketLite.PCL.dll\": {},\r\n  \"ref/netstandard1.0/SocketLite.dll\": {}\r\n},\r\n\"runtime\": {\r\n  \"lib/MonoAndroid10/ISocketLite.PCL.dll\": {},\r\n  \"lib/MonoAndroid10/SocketLite.dll\": {}\r\n}\r\n```\r\n\r\nXamarin.Android packaging (and resource extraction) steps appear to be picking up the reference assemblies instead of the implementation assemblies. /cc @dellis1972 @jonpryor",
        "createdAt": "2018-01-16T17:26:30Z",
        "updatedAt": "2018-01-16T17:26:30Z",
        "author": {
          "login": "mhutch"
        }
      },
      {
        "body": "This is related to https://github.com/xamarin/xamarin-android/issues/1154 and https://github.com/xamarin/xamarin-android/issues/1162\r\n\r\nMy investigation however shows that the `@(ReferencePath)` ItemGroup which MSBuild provides us contains the `ref` version of the NetStandard assembly, not the `lib` version for Android Projects. ",
        "createdAt": "2018-01-18T09:51:05Z",
        "updatedAt": "2018-01-18T09:51:05Z",
        "author": {
          "login": "dellis1972"
        }
      },
      {
        "body": "Okay thanks for looking into this! So you think it is an msbuild issue?",
        "createdAt": "2018-01-30T19:06:41Z",
        "updatedAt": "2018-01-30T19:06:41Z",
        "author": {
          "login": "kelly987654"
        }
      },
      {
        "body": "It seems this issue is affecting lot of Nuget libraries, even in Xamarin iOS. Any workaround?",
        "createdAt": "2018-01-31T11:30:21Z",
        "updatedAt": "2018-01-31T11:30:21Z",
        "author": {
          "login": "muhaym"
        }
      },
      {
        "body": "The only work around I can think of for now is to directly reference the `lib` version of the library in the iOS/Andorid app. \r\n\r\n@radical I think this is related to  xamarin/xamarin-android#1154 and xamarin/xamarin-android#1162. Looks like it effects iOS too.",
        "createdAt": "2018-01-31T11:44:37Z",
        "updatedAt": "2018-01-31T11:44:37Z",
        "author": {
          "login": "dellis1972"
        }
      },
      {
        "body": "My current \"workaround\" is to change the Android project to use packages.config instead.\r\n\r\nI tried directly referencing the lib from the Android project, and I was getting compilation errors.",
        "createdAt": "2018-01-31T16:13:09Z",
        "updatedAt": "2018-01-31T16:14:02Z",
        "author": {
          "login": "kelly987654"
        }
      },
      {
        "body": "I'm trying to update my Library https://github.com/muhaym/CrossPlacePicker, and can't test it in Android because of this issue",
        "createdAt": "2018-02-01T10:54:59Z",
        "updatedAt": "2018-02-01T10:54:59Z",
        "author": {
          "login": "muhaym"
        }
      },
      {
        "body": "I recently updated my Android project, which was already using PackageReference successfully, to update all of the 3rd party dependencies, which also required updating my target from MonoAndroid71 to MonoAndroid80.\r\n\r\nOne of the dependencies is ReactiveUI 8.0.0-alpha0117, which uses the bait and switch pattern.\r\n\r\nEverything initially worked, however I later needed to back date to MonoAndroid71 after which I started getting the following error from ReactiveUI: \"You are referencing the Portable version of ReactiveUI in an App. Reference the platform-specific version.\"  I verified that going back to MonoAndroid80 resolves the issue.\r\n\r\nI'm going to put my update on hold, but can anybody here with more information on the issue explain why I might be seeing this with MonoAndroid71 and not with MonoAndroid80?\r\n",
        "createdAt": "2018-02-19T17:51:19Z",
        "updatedAt": "2018-02-19T17:52:32Z",
        "author": {
          "login": "jalbertSyncroTech"
        }
      },
      {
        "body": "Is there any update on this?",
        "createdAt": "2018-03-07T00:45:04Z",
        "updatedAt": "2018-03-07T00:45:04Z",
        "author": {
          "login": "kelly987654"
        }
      },
      {
        "body": "Related to this: https://github.com/xamarin/xamarin-android/issues/1154 and https://github.com/xamarin/xamarin-android/issues/1162",
        "createdAt": "2018-03-09T21:59:34Z",
        "updatedAt": "2018-03-09T22:00:41Z",
        "author": {
          "login": "kzu"
        }
      },
      {
        "body": "any update? This [also blocks me](https://github.com/xamarin/xamarin-android/issues/2076)",
        "createdAt": "2018-08-24T06:27:00Z",
        "updatedAt": "2018-08-24T06:27:00Z",
        "author": {
          "login": "MagicAndre1981"
        }
      },
      {
        "body": "@dellis1972 I think there was a fix for this, right? ",
        "createdAt": "2018-08-24T12:42:00Z",
        "updatedAt": "2018-08-24T12:42:00Z",
        "author": {
          "login": "kzu"
        }
      },
      {
        "body": "@kzu  I \"fixed\" it by using packages.config instead of PackageReference ",
        "createdAt": "2018-08-24T12:46:00Z",
        "updatedAt": "2018-08-24T12:46:00Z",
        "author": {
          "login": "MagicAndre1981"
        }
      },
      {
        "body": "We merged a fix for our `ResolveAssemblies` but that I suspect doesn't help in this case. This looks like a different msbuild issue. If I remember rightly it was because the `PackageRefernce` did not contain a hint path .. but the one added via a `package.config` did. And that path had the correct `lib` path.",
        "createdAt": "2018-08-24T12:48:37Z",
        "updatedAt": "2018-08-24T12:48:37Z",
        "author": {
          "login": "dellis1972"
        }
      },
      {
        "body": "what is the status of the issue?",
        "createdAt": "2019-01-11T06:14:29Z",
        "updatedAt": "2019-01-11T06:14:29Z",
        "author": {
          "login": "MagicAndre1981"
        }
      },
      {
        "body": "Starting a few weeks ago, Microsot.Identity.Client uses bait and switch and customers have started reporting issues. What is the status of this issue?",
        "createdAt": "2019-01-18T10:31:24Z",
        "updatedAt": "2019-01-18T10:31:24Z",
        "author": {
          "login": "bgavrilMS"
        }
      },
      {
        "body": "We've started to see this issue using the latest version of Microsoft.Identity.Client (2.7.0) in our Xamarin android app when building remotely, everything seems fine when building locally. Are there updates on this?",
        "createdAt": "2019-01-24T13:22:57Z",
        "updatedAt": "2019-01-24T13:47:52Z",
        "author": {
          "login": "bugail"
        }
      },
      {
        "body": "It seems like this same issues comes up using `ProjectReference Include` (currently on VS 2019, likely elsewhere too) when the target is NET 4.6.1 and use Worker or Web Roles and includes packages such as `System.Runtime.CompilerServices.Unsafe` (possibly others such as `System.Memory` etc.). The result is a runtime failure some type could not be loaded, such as `ReadOnlySpan` if a dependent library/Nuget package or code uses it either directly or functions such as `AsSpan` (as an aside, maybe one fix is also to install the appropriate .NET Core/Standard libraries to the target environment).\r\n\r\nGoing into [Nuget packages](https://docs.microsoft.com/en-us/nuget/consume-packages/configuring-nuget-behavior) and replacing `ref` packages with `lib` ones fixes the issue. I tried quickly a `targets` fix as proposed at https://github.com/xamarin/xamarin-android/issues/1162#issuecomment-359475008 (amongst other places), but it doesn't work. MSBuild reports \r\n> The target \"_ResolveAssemblies\" listed in an AfterTargets attribute at \"<someprojectpath>\\ReplaceRefAssemblies.targets (2,39)\" does not exist in the project, and will be ignored.\r\n\r\nSo maybe it's different in Xamarin or something has shifted (or maybe I just looked the output too hastily and it was a different project, it's Sunday and this is more work related. :)). If someone knows of the cuff the right target/changes, that'd be nice. Hopefully I dropped enough key words for search engine fu too to those who come from another angle. :)",
        "createdAt": "2019-04-28T09:49:50Z",
        "updatedAt": "2019-04-28T11:29:54Z",
        "author": {
          "login": "veikkoeeva"
        }
      },
      {
        "body": "FYI, I don't know if something like this would better\r\n```\r\n<Project>\r\n  <Target Name=\"ReplaceRefAssemblies\" AfterTargets=\"ResolveAssemblyReferences\">\r\n    <ItemGroup>\r\n      <ResolvedAssembliesFixedWindows Include=\"@(ReferencePath->Replace('\\ref\\','\\lib\\'))\" />\r\n      <ResolvedAssembliesFixedUnix Include=\"@(ReferencePath->Replace('/ref/','/lib/'))\" />\r\n      <ResolvedAssembliesFixed Include=\"@(ResolvedAssembliesFixedWindows)\" Condition=\"@(ResolvedAssembliesFixedWindows) != @(ReferencePath)\" />\r\n      <ResolvedAssembliesFixed Include=\"@(ResolvedAssembliesFixedUnix)\" Condition=\"@(ResolvedAssembliesFixedUnix) != @(ReferencePath)\" />\r\n      <ResolvedAssemblies Condition=\"'@(ResolvedAssembliesFixed->Count())' &gt; 0\" Remove=\"@(ReferencePath)\" />\t  \r\n      <ReferencePath Include=\"@(ResolvedAssembliesFixed)\" />\r\n    </ItemGroup>\r\n  </Target>\r\n</Project>\r\n```\r\nOr perhaps\r\n```\r\n<Project>\r\n  <Target Name=\"ReplaceRefAssemblies\" AfterTargets=\"ResolveAssemblyReferences\">\r\n    <ItemGroup>\r\n      <ResolvedAssembliesFixedWindows Include=\"@(_ResolveAssemblyReferenceResolvedFiles->Replace('\\ref\\','\\lib\\'))\" />\r\n      <ResolvedAssembliesFixedUnix Include=\"@(_ResolveAssemblyReferenceResolvedFiles->Replace('/ref/','/lib/'))\" />\r\n      <ResolvedAssembliesFixed Include=\"@(ResolvedAssembliesFixedWindows)\" Condition=\"@(ResolvedAssembliesFixedWindows) != @(_ResolveAssemblyReferenceResolvedFiles)\" />\r\n      <ResolvedAssembliesFixed Include=\"@(ResolvedAssembliesFixedUnix)\" Condition=\"@(ResolvedAssembliesFixedUnix) != @(_ResolveAssemblyReferenceResolvedFiles)\" />\r\n      <ResolvedAssemblies Condition=\"'@(ResolvedAssembliesFixed->Count())' &gt; 0\" Remove=\"@(_ResolveAssemblyReferenceResolvedFiles)\" />\t  \r\n      <_ResolveAssemblyReferenceResolvedFiles Include=\"@(ResolvedAssembliesFixed)\" />\r\n    </ItemGroup>\r\n  </Target>\r\n</Project> \r\n```\r\nbut they don't work. The first one print an error\r\n> CSC error CS0006: Metadata file 'C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.text.encoding.codepages\\4.3.0\\lib\\netstandard1.3\\System.Text.Encoding.CodePages.dll' could not be found [C:\\<path>some.csproj]\r\n\r\nAnd the reason appears to be that the `ref` folder in this particular case isn't \"symmetrical\" with the `lib` one. So there ought be another way, perhaps listing the changed paths one-by-one or have an exclusion list if it doesn't matter (e.g. the program functions properly).",
        "createdAt": "2019-05-01T09:55:25Z",
        "updatedAt": "2019-05-01T09:55:25Z",
        "author": {
          "login": "veikkoeeva"
        }
      },
      {
        "body": "This is still an issue for Microsoft.Identity.Client (4.1.0) in our Xamarin android app when building remotely, everything seems fine when building locally. Are there updates on this?",
        "createdAt": "2019-07-11T07:52:10Z",
        "updatedAt": "2019-07-11T07:52:10Z",
        "author": {
          "login": "bugail"
        }
      },
      {
        "body": "Closing in favor of the Xamarin issues (which may now be fixed? Not totally clear to me at the moment.)",
        "createdAt": "2020-03-10T15:51:02Z",
        "updatedAt": "2020-03-10T15:51:02Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> Closing in favor of the Xamarin issues (which may now be fixed? Not totally clear to me at the moment.)\r\n\r\nFor [VS2017, the issue is still present, but even worse](https://github.com/xamarin/xamarin-android/issues/2076#issuecomment-480722609), I get issues about System.Threading.Tasks.Extensions.\r\n\r\nFor VS2019, the Xamarin Team, [made a lot of changes](https://github.com/xamarin/xamarin-android/blob/0103d4fc07f1764eba11a9d0cbc2daed2c5368bd/src/Xamarin.Android.Build.Tasks/Tasks/ResolveAssemblies.cs#L80) compared to [15.9](https://github.com/xamarin/xamarin-android/blob/d15-9/src/Xamarin.Android.Build.Tasks/Tasks/ResolveAssemblies.cs#L105) but with VS2019 the compile also randomly fails with useless messages about missing files (from used nugets).\r\n\r\nI gave it up on both (VS2017, VS2019) using **PackageReference Include** and always use the **packages.config**, which always works fine.",
        "createdAt": "2020-03-18T07:25:38Z",
        "updatedAt": "2020-03-19T07:15:28Z",
        "author": {
          "login": "MagicAndre1981"
        }
      }
    ]
  }
}