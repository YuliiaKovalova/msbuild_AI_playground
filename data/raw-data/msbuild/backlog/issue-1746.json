{
  "number": 1746,
  "title": "Unable to use csc task in simple project",
  "body": "I'd like to be able to use the x-plat msbuild installed with the cli to compile simple programs while controlling arguments to csc, but this doesn't seem to work. Is this a supported scenario?\r\n\r\n**Repro steps**\r\n\r\nbuild.csproj:\r\n```\r\n<Project DefaultTargets=\"Build\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\" >\r\n  <Target Name=\"Build\">\r\n    <Csc Sources=\"test.cs\" />\r\n  </Target>\r\n</Project>\r\n```\r\n\r\ntest.cs:\r\n```\r\nusing System;\r\n\r\nnamespace test\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            Console.WriteLine(\"Hello World!\");\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n`dotnet msbuild /v:n` \r\n\r\n**Output**\r\n\r\n```\r\nMicrosoft (R) Build Engine version 15.1.548.43366\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\nBuild started 2/23/17 3:11:59 PM.\r\n     1>Project \"/home/sven/csctest/build.csproj\" on node 1 (default targets).\r\n     1>Building with tools version \"15.0\".\r\n       Project file contains ToolsVersion=\"\". This toolset may be unknown or missing, in which case you may be able to resolve this by installing the appropriate version of MSBuild, or the build may have been forced to a particular ToolsVersion for policy reasons. Treating the project as if it had ToolsVersion=\"15.0\". For more information, please see http://go.microsoft.com/fwlink/?LinkId=293424.\r\n     1>Target \"Build\" in project \"/home/sven/csctest/build.csproj\" (entry point):\r\n       Using \"Csc\" task from assembly \"/home/sven/bin/sdk/1.0.0-rc4-004842/Roslyn/Microsoft.Build.Tasks.CodeAnalysis.dll\".\r\n       Task \"Csc\"\r\n         /home/sven/bin/sdk/1.0.0-rc4-004842/Roslyn/csc.exe /out:test.exe test.cs\r\n     1>/home/sven/csctest/build.csproj(3,5): error MSB6003: The specified task executable \"csc.exe\" could not be run. Permission denied\r\n       Done executing task \"Csc\" -- FAILED.\r\n     1>Done building target \"Build\" in project \"build.csproj\" -- FAILED.\r\n     1>Done Building Project \"/home/sven/csctest/build.csproj\" (default targets) -- FAILED.\r\n\r\nBuild FAILED.\r\n\r\n       \"/home/sven/csctest/build.csproj\" (default target) (1) ->\r\n       (Build target) -> \r\n         /home/sven/csctest/build.csproj(3,5): error MSB6003: The specified task executable \"csc.exe\" could not be run. Permission denied\r\n\r\n    0 Warning(s)\r\n    1 Error(s)\r\n\r\nTime Elapsed 00:00:00.08\r\n\r\n```\r\n\r\n\r\n****",
  "state": "CLOSED",
  "createdAt": "2017-02-23T23:19:51Z",
  "updatedAt": "2024-02-21T17:21:33Z",
  "closedAt": "2017-02-24T19:48:31Z",
  "author": {
    "login": "sbomer"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "This is more complicated than it seems at first, due to a combination of factors:\r\n\r\n* The Roslyn `Csc` task defaults to attempting to run `csc.exe` (which works great on Windows/full framework, but not so well on platforms where you need to specify a host)\r\n* `dotnet` CLI sets a property when invoking MSBuild named `CscToolExe` that points to a wrapper script (`RunCsc.cmd` or a `.sh` equivalent) that will invoke `csc` under the right host\r\n* But you have to pass that override to the task explicitly because of MSBuild's task isolation model. I could get your project to invoke the compiler by adding `ToolExe=\"$(CscToolExe)\"` to the `<Csc>` invocation\r\n* But that's not enough for .NET Core scenarios, because there's no longer an ambient reference to core CLR assemblies . . . so even when the compiler runs it immediately fails with, e.g., `error CS0246: The type or namespace name 'System' could not be found`\r\n* The .NET Core SDK depends fairly deeply on NuGet package references to do the reference assembly resolution needed to explicitly get everything passed to the compiler\r\n\r\nIt's certainly possible to plumb everything through yourself, but you're likely to be swimming upstream.",
        "createdAt": "2017-02-23T23:53:00Z",
        "updatedAt": "2017-02-23T23:53:00Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Thanks @rainersigwald for the clear response.\r\nI was aware of some of these behaviors, but not others. I'll try to avoid having to do this, but now I have a good starting point if I ever need to work around this.",
        "createdAt": "2017-02-24T19:46:54Z",
        "updatedAt": "2017-02-24T19:46:54Z",
        "author": {
          "login": "sbomer"
        }
      }
    ]
  }
}