{
  "number": 1952,
  "title": "VersionPrefix and VersionSuffix are misnamed",
  "body": "Prefix:\r\n\r\n> a word, letter, or number placed before another.\r\n\r\nThe value of this property never _prefixes the version_. That would imply that the version is another string of characters, and the value of this property precedes it. This never happens.\r\n\r\nUntil I read the documentation, I was surprised to see values of `VersionPrefix` of the form \"1.0.0\", since \"1.0.0\" is not a prefix to the version. It _is_ the version.\r\n\r\nThe same argument could be applied to `VersionSuffix`, depending on the interpretation of \"version\". If \"1.0.0\" is the \"version\" in \"1.0.0-beta1\" then it's true to say that the \"version suffix\" is \"beta1\", but if \"1.0.0-beta1\" is the \"version\", then `VersionSuffix` is similarly misnamed.\r\n\r\n---\r\n\r\n**Update:**\r\n\r\nBased on the comments below, it seems that the general opinion is that \"1.0.0-beta1\" is the \"version\", implying that `VersionSuffix` is also misnamed. I'm re-titling the issue from \"VersionPrefix is misnamed\" to \"VersionPrefix and VersionSuffix are misnamed\".",
  "state": "CLOSED",
  "createdAt": "2017-04-07T06:44:46Z",
  "updatedAt": "2024-02-21T17:20:07Z",
  "closedAt": "2017-04-19T16:05:11Z",
  "author": {
    "login": "adamralph"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "The naming used here should follow the [semver](http://semver.org/spec/v2.0.0.html), right?\r\n\r\nAccording to that spec, both `1.2.3` and `2.4.5-beta.2` are versions. The latter being a [pre-release version](http://semver.org/spec/v2.0.0.html#spec-item-9) in which what you called `VersionSuffix` is referred to as `dot separated identifiers`.\r\n\r\n[GitVersion](https://github.com/GitTools/GitVersion) uses the term `pre-release tag` although I'm not sure whether they coined that term. @asbjornu?",
        "createdAt": "2017-04-07T07:14:08Z",
        "updatedAt": "2017-04-07T07:24:07Z",
        "author": {
          "login": "tpluscode"
        }
      },
      {
        "body": "I think @JakeGinnivan might know better than me where `pre-release-tag` came from, but as discussed in GitTools/GitVersion#1054, we might change `tag` to `label` or `identifier` (as seems to be the word used by [semver](http://semver.org/)) to not confuse it with a `git tag`.",
        "createdAt": "2017-04-07T07:29:10Z",
        "updatedAt": "2017-04-07T07:29:10Z",
        "author": {
          "login": "asbjornu"
        }
      },
      {
        "body": "fyi the logic comes from https://github.com/dotnet/sdk/blob/master/src/Tasks/Microsoft.NET.Build.Tasks/build/Microsoft.NET.DefaultAssemblyInfo.targets#L18-L22\r\n\r\nIt's hard since you need to be able to construct the `Version` from two parts. Changing the version based on the presence of a `VersionSuffix` isn't a good option here because it may be a global property and can't be overwritten.\r\nSo i guess the feature request would be to create an alias for `VersionPrefix` (e.g. `VersionNumber`  - but i'm horrible at naming things)",
        "createdAt": "2017-04-07T07:53:05Z",
        "updatedAt": "2017-04-07T07:53:05Z",
        "author": {
          "login": "dasMulli"
        }
      },
      {
        "body": "Based on the comments above, it seems that the general opinion is that \"1.0.0-beta1\" is the \"version\", implying that `VersionSuffix` is also misnamed. I'm re-titling the issue from \"VersionPrefix is misnamed\" to \"VersionPrefix and VersionSuffix are misnamed\".",
        "createdAt": "2017-04-08T06:37:08Z",
        "updatedAt": "2017-04-08T06:37:34Z",
        "author": {
          "login": "adamralph"
        }
      },
      {
        "body": "Unfortunately SemVer doesn't define terms to describe the \"1.0.0\" and \"beta1\" parts of the _version_ \"1.0.0-beta1\" so I guess we'll have to define them (or look for precedents elsewhere).\r\n\r\nBut, before going too far down that path, perhaps we should challenge\r\n\r\n> you need to be able to construct the Version from two parts\r\n\r\nWhy?",
        "createdAt": "2017-04-08T06:42:02Z",
        "updatedAt": "2017-04-08T06:42:19Z",
        "author": {
          "login": "adamralph"
        }
      },
      {
        "body": "> you need to be able to construct the Version from two parts\r\n\r\nMy reasoning is mostly based on the ability and need to pass version-related properties as arguments to msbuild invocations, e.g. from CI.\r\nHowever, the importance of the different usage scenarios need to be weighted against each other.. Let me elaborate:\r\n\r\nYou can currently pass `/p:VersionSuffix=beta1` and it will generate a `1.0.0-beta1` version (the `dotnet` cli even has convenience parameters for that). if you set `/p:Version=1.2.3;VersionSuffix=beta1`, you end up with `1.2.3` - which is expected and you get the same behaviour if you specified these two properties inside a project file or from command line. While not perfectly named, it is at least consistent.\r\n\r\nHowever, take the following project file for example:\r\n```xml\r\n<Project>\r\n  <PropertyGroup>\r\n    <Version Condition=\"'$(Version)' == ''\">1.0.0</Version>\r\n    <Version Condition=\"'$(PreReleaseLabel)' != ''\">$(Version)-$(PreReleaseLabel)</Version>\r\n  </PropertyGroup>\r\n  <Target Name=\"Build\">\r\n    <Message Importance=\"high\" Text=\"Version: $(Version)\"/>\r\n  </Target>\r\n</Project>\r\n```\r\n\r\n1. Invoke it with `dotnet msbuild /p:PreReleaseLabel=beta1` and it prints `1.0.0-beta1`.\r\n2. Invoke it using `dotnet msbuild /p:Version=1.2.3;PreReleaseLabel=beta1` and you get `1.2.3`, because Version is now a global property and can't be overwritten.\r\n3. Put a `<Version>1.2.3</Version>` at the top of the property group (pretend everything else is coming from the SDK) and run `dotnet msbuild /p:PreReleaseLabel=beta1`. The result will be `1.2.3-beta1`\r\n\r\nMy problem with this is that 2. and 3. look similar - both properties set to a value - but behave differently because of the way global msbuild properties work, which is confusing for beginners trying to set up their project / CI.\r\n\r\nThere are a few workarounds for that but they would require a different property (`ResolvedVersion`) or each target that needs a version had to look at all available properties. (Not to mention this would be a breaking tooling change).\r\n\r\nSummed up, I think it's best to leave `Version` being composed from two properties, but maybe figure out better names (falling back to the current ones).",
        "createdAt": "2017-04-08T13:48:53Z",
        "updatedAt": "2017-04-08T13:48:53Z",
        "author": {
          "login": "dasMulli"
        }
      },
      {
        "body": "> if you set /p:Version=1.2.3;VersionSuffix=beta1, you end up with 1.2.3...\r\n\r\nTherein lies the problem. If I pass Foo, and FooSuffix, I expected the value of Foo to be suffixed by the value of FooSuffix. The current behaviour is surprising and does not follow the semantics conveyed by the property names.\r\n\r\n> - which is expected...\r\n\r\nIt is only expected after you have experienced the surprising behaviour or read the documentation, and you have retained and recalled that knowledge before the occasion. The names (semantics) cannot be relied on to remind the user of the expected behaviour.\r\n\r\nI still haven't seen a defense of the assertion that we need the version to be composed of two properties. What does this offer over a single property named `Version`?",
        "createdAt": "2017-04-08T17:07:03Z",
        "updatedAt": "2017-04-08T17:07:03Z",
        "author": {
          "login": "adamralph"
        }
      },
      {
        "body": "@adamralph:\r\n\r\n> Unfortunately SemVer doesn't define terms to describe the \"1.0.0\" and \"beta1\" parts of the version \"1.0.0-beta1\" so I guess we'll have to define them (or look for precedents elsewhere).\r\n\r\nYes, SemVer defines them as such:\r\n\r\n> Additional **labels** for pre-release and build metadata are available as extensions to the MAJOR.MINOR.PATCH format.\r\n\r\nAnd:\r\n\r\n> A pre-release version MAY be denoted by appending a hyphen and a series of dot separated **identifiers** immediately following the patch version.\r\n\r\nSo SemVer calls these pre-release strings that are suffixed to the `version` for **labels** or **identifiers**. I would call the entire string for `SemanticVersion`, the version number for `VersionNumber` and the pre-release suffix for `PreReleaseLabel`.",
        "createdAt": "2017-04-19T13:47:11Z",
        "updatedAt": "2017-04-19T13:47:11Z",
        "author": {
          "login": "asbjornu"
        }
      },
      {
        "body": "@asbjornu defining `SemanticVersion` as `{VersionNumber}-{PreReleaseLabel}` is not a bad idea. For completeness, I would extend it to `{VersionNumber}-{PreReleaseLabel}+{BuildLabel}`.\r\n\r\nHowever, I still challenge the need for multiple properties. I haven't seen a strong argument for having multiple properties over a single `Version` property.",
        "createdAt": "2017-04-19T15:57:05Z",
        "updatedAt": "2017-04-19T15:57:05Z",
        "author": {
          "login": "adamralph"
        }
      },
      {
        "body": "This issue was moved to dotnet/sdk#1131",
        "createdAt": "2017-04-19T16:05:11Z",
        "updatedAt": "2017-04-19T16:05:11Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}