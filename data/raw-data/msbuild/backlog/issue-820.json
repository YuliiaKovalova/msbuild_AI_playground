{
  "number": 820,
  "title": "Simplified Property Groups",
  "body": "It would be nice to support a terser and more readable syntax for `PropertyGroup`.\r\n\r\nBy making `Properties` an alias for `PropertyGroup` and allowing properties to be provided as attributes instead / in addition to child elements, this:\r\n\r\n``` xml\r\n<PropertyGroup>\r\n    <Foo>A</Foo>\r\n    <Bar>B</Bar>\r\n</PropertyGroup>\r\n```\r\n\r\ncould be simplified to\r\n\r\n``` xml\r\n<Properties\r\n    Foo=\"A\"\r\n    Bar=\"B\"\r\n/>\r\n```\r\n\r\nThis is a pretty big readability improvement.\r\n\r\nIt would also be nice to alias `Items` to `ItemGroup`.",
  "state": "OPEN",
  "createdAt": "2016-07-26T19:30:20Z",
  "updatedAt": "2024-02-21T16:38:27Z",
  "closedAt": null,
  "author": {
    "login": "mhutch"
  },
  "labels": [
    "Feature - Project File Cleanup",
    "Area: Language",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Backlog"
  },
  "comments": {
    "nodes": [
      {
        "body": "I'd pitch a few more aliases here, for example `<References>` and `<Includes>`. In line with this issue: though they'd have no net effect, they'd make the human editable form much more readable.\r\n\r\nUnrelated to this but along the same vein, I think something like `<References Framework='net45'>` would also increase readability. How much of a work tradeoff are we looking at for aliasing vs. elements with additional attribute support?\r\n\r\n/cc @davkean\r\n\r\nAs an example, here's a file today vs. with proposed changes (I've inlined the `Version` attribute for comparison on both as this is already planned): \r\n\r\n```xml\r\n<Project ToolsVersion=\"15.0\">\r\n  <Import Project=\"$(MSBuildExtensionsPath)\\$(MSBuildToolsVersion)\\Microsoft.Common.props\" />\r\n  <PropertyGroup>\r\n    <TargetFrameworks>net45;netstandard1.5</TargetFrameworks>\r\n    <AssemblyName>MiniProfiler.Shared</AssemblyName>\r\n    <OutputType>Library</OutputType>\r\n    <OutputPath>bin\\</OutputPath>\r\n    <SignAssembly>true</SignAssembly>\r\n    <AssemblyOriginatorKeyFile>..\\MiniProfiler\\miniprofiler.snk</AssemblyOriginatorKeyFile>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <Compile Include=\"**\\*.cs\" />\r\n    <EmbeddedResource Include=\"**\\*.resx\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.NET.Sdk\" Version=\"1.0.0-alpha-20161104-2\" PrivateAssets=\"All\"/>\r\n    <PackageReference Include=\"NETStandard.Library\" Version=\"1.6.1\"/>\r\n  </ItemGroup>\r\n  <ItemGroup Condition=\"'$(TargetFramework)' == 'netstandard1.5'\">\r\n    <PackageReference Include=\"System.ComponentModel.Primitives\" Version=\"4.3.0\"/>\r\n    <PackageReference Include=\"System.Data.Common\" Version=\"4.3.0\"/>\r\n    <PackageReference Include=\"System.Diagnostics.StackTrace\" Version=\"4.3.0\"/>\r\n    <PackageReference Include=\"System.Dynamic.Runtime\" Version=\"4.3.0\"/>\r\n    <PackageReference Include=\"System.Reflection.Emit.Lightweight\" Version=\"4.3.0\"/>\r\n    <PackageReference Include=\"System.Runtime.Extensions\" Version=\"4.3.0\"/>\r\n    <PackageReference Include=\"System.Runtime.Serialization.Primitives\" Version=\"4.3.0\"/>\r\n    <PackageReference Include=\"System.Threading.Tasks.Parallel\" Version=\"4.3.0\"/>\r\n    <PackageReference Include=\"Newtonsoft.Json\" Version=\"9.0.1\"/>\r\n  </ItemGroup>\r\n  <ItemGroup Condition=\"'$(TargetFramework)' == 'net45'\">\r\n    <Reference Include=\"Microsoft.CSharp\" />\r\n    <Reference Include=\"System\" />\r\n    <Reference Include=\"System.Configuration\" />\r\n    <Reference Include=\"System.Data\" />\r\n    <Reference Include=\"System.Data.Linq\" />\r\n    <Reference Include=\"System.Runtime.Serialization\" />\r\n    <Reference Include=\"System.Transactions\" />\r\n    <Reference Include=\"System.Web\" />\r\n    <Reference Include=\"System.Web.Extensions\" />\r\n    <Reference Include=\"System.Xml\" />\r\n  </ItemGroup>\r\n  <Import Project=\"$(MSBuildToolsPath)\\Microsoft.CSharp.targets\" />\r\n</Project>\r\n```\r\nProposed:\r\n```xml\r\n<Project ToolsVersion=\"15.0\">\r\n  <Import Project=\"$(MSBuildExtensionsPath)\\$(MSBuildToolsVersion)\\Microsoft.Common.props\" />\r\n  <Properties>\r\n    <TargetFrameworks>net45;netstandard1.5</TargetFrameworks>\r\n    <AssemblyName>MiniProfiler.Shared</AssemblyName>\r\n    <OutputType>Library</OutputType>\r\n    <OutputPath>bin\\</OutputPath>\r\n    <SignAssembly>true</SignAssembly>\r\n    <AssemblyOriginatorKeyFile>..\\MiniProfiler\\miniprofiler.snk</AssemblyOriginatorKeyFile>\r\n  </Properties>\r\n  <Includes>\r\n    <Compile Include=\"**\\*.cs\" />\r\n    <EmbeddedResource Include=\"**\\*.resx\" />\r\n  </Includes>\r\n  <References>\r\n    <PackageReference Include=\"Microsoft.NET.Sdk\" Version=\"1.0.0-alpha-20161104-2\" PrivateAssets=\"All\"/>\r\n    <PackageReference Include=\"NETStandard.Library\" Version=\"1.6.1\"/>\r\n  </References>\r\n  <References Framework=\"netstandard1.5\">\r\n    <PackageReference Include=\"System.ComponentModel.Primitives\" Version=\"4.3.0\"/>\r\n    <PackageReference Include=\"System.Data.Common\" Version=\"4.3.0\"/>\r\n    <PackageReference Include=\"System.Diagnostics.StackTrace\" Version=\"4.3.0\"/>\r\n    <PackageReference Include=\"System.Dynamic.Runtime\" Version=\"4.3.0\"/>\r\n    <PackageReference Include=\"System.Reflection.Emit.Lightweight\" Version=\"4.3.0\"/>\r\n    <PackageReference Include=\"System.Runtime.Extensions\" Version=\"4.3.0\"/>\r\n    <PackageReference Include=\"System.Runtime.Serialization.Primitives\" Version=\"4.3.0\"/>\r\n    <PackageReference Include=\"System.Threading.Tasks.Parallel\" Version=\"4.3.0\"/>\r\n    <PackageReference Include=\"Newtonsoft.Json\" Version=\"9.0.1\"/>\r\n  </References>\r\n  <References Framework=\"net45\">\r\n    <Reference Include=\"Microsoft.CSharp\" />\r\n    <Reference Include=\"System\" />\r\n    <Reference Include=\"System.Configuration\" />\r\n    <Reference Include=\"System.Data\" />\r\n    <Reference Include=\"System.Data.Linq\" />\r\n    <Reference Include=\"System.Runtime.Serialization\" />\r\n    <Reference Include=\"System.Transactions\" />\r\n    <Reference Include=\"System.Web\" />\r\n    <Reference Include=\"System.Web.Extensions\" />\r\n    <Reference Include=\"System.Xml\" />\r\n  </References>\r\n  <Import Project=\"$(MSBuildToolsPath)\\Microsoft.CSharp.targets\" />\r\n</Project>\r\n```",
        "createdAt": "2016-11-21T03:05:18Z",
        "updatedAt": "2016-11-21T03:05:18Z",
        "author": {
          "login": "NickCraver"
        }
      },
      {
        "body": "One thought I had was that instead of MSBuild having special knowledge of individual properties, such as \"Framework\" (which it doesn't do today), it would instead simply allow a simpler condition syntax.\r\n\r\nTherefore something like this: \r\n\r\n``` XML\r\n<ItemGroup TargetFramework=\"net45\">\r\n...\r\n</ItemGroup>\r\n```\r\n\r\nWould be treated as if I wrote:\r\n\r\n``` XML\r\n<ItemGroup Condition=\"'$(TargetFramework)'=='net45\">\r\n\r\n<ItemGroup>\r\n```\r\n\r\nThen you could do something like:\r\n\r\n``` XML\r\n<PropertyGroup TargetFramework=\"net45\" Configuration=\"Debug\">\r\n<!-- Only applies when targeting .NET 4.5 under Debug -->\r\n</PropertyGroup>\r\n```\r\nOr:\r\n\r\n``` XML\r\n<ItemGroup>\r\n    <!-- Only reference when targeting UWP -->\r\n    <ProjectReference Include=\"UWPSupport.csproj\" TargetFramework=\"UWP\" />\r\n</ItemGroup>\r\n```",
        "createdAt": "2016-11-21T03:16:08Z",
        "updatedAt": "2016-11-21T03:17:06Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "@davkean That's an *extremely* attractive option - what's the thinking on existing attributes and collision with property names with this layout? Known attributes would be preferred? I could see that, but then *if you didn't know it was an attribute* would be fairly confusing. I wonder if we could figure out a way to indicate it's a conditional and bypass the conflict case.\r\n\r\nOr am I over-analyzing this?",
        "createdAt": "2016-11-21T03:19:34Z",
        "updatedAt": "2016-11-21T03:19:34Z",
        "author": {
          "login": "NickCraver"
        }
      },
      {
        "body": "Not over analyzing this, there is a concern. Especially that item metadata has been prompted to attributes -even more likely that there will be clashes. I'll let the MSBuild chime into the issues - maybe you could make it less likely by only allowing the syntax on \"groups\"; `<ItemGroup>`, `<PropertyGroup>`.",
        "createdAt": "2016-11-21T03:23:22Z",
        "updatedAt": "2016-11-21T03:23:55Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "that option looks like a large readability improvement, even if only on groups",
        "createdAt": "2016-11-21T03:50:11Z",
        "updatedAt": "2016-11-21T03:50:11Z",
        "author": {
          "login": "gulbanana"
        }
      },
      {
        "body": "An additional readability improvement would be to to alias `ItemGroup` to `Items` and `PropertyGroup` to `Properties`. I'm guessing the name originated from a code element that was named to represent a collection..\r\n\r\nFor readability, this would be a small change but a huge improvement:\r\n\r\n```xml\r\n<Properties>\r\n    <Awesome>true</Awesome>\r\n</Properties>\r\n<Items>\r\n    <Compile Include=\"...\" />\r\n</Items>\r\n```\r\n\r\nIf i understand msbuild correctly, there could be an issue if there was a task named like that when adding properties or items inside of a task.",
        "createdAt": "2016-11-21T08:04:34Z",
        "updatedAt": "2016-11-21T08:04:34Z",
        "author": {
          "login": "dasMulli"
        }
      },
      {
        "body": "@dasMulli I'm confused...that was the original issue. Are you talking about other changes, or just adding `<Items>` to the list?\r\n\r\n@mhutch Perhaps an update up top (if you agree with these) with an overall alias list would be helpful?",
        "createdAt": "2016-11-21T10:49:24Z",
        "updatedAt": "2016-11-21T10:49:24Z",
        "author": {
          "login": "NickCraver"
        }
      },
      {
        "body": "@NickCraver slightly different: The original proposal of the issue is adding the properties as attributes, which is a more substantial change than \"just\" aliasing.",
        "createdAt": "2016-11-21T15:52:22Z",
        "updatedAt": "2016-11-21T15:52:22Z",
        "author": {
          "login": "dasMulli"
        }
      },
      {
        "body": "Added the `Items` alias.\r\n\r\nI think the simplified conditions could work on itemgroups, properties, targets, tasks etc. But on propertygroups it would directly collide with my proposal, and on items there would be a very high risk of collision with metadata attributes. So... I'm not sure what I think about it.",
        "createdAt": "2016-11-21T17:06:33Z",
        "updatedAt": "2016-11-21T17:06:33Z",
        "author": {
          "login": "mhutch"
        }
      },
      {
        "body": "Also, check out https://github.com/Microsoft/msbuild/issues/821",
        "createdAt": "2016-11-21T17:07:00Z",
        "updatedAt": "2016-11-21T17:07:00Z",
        "author": {
          "login": "mhutch"
        }
      },
      {
        "body": "My thoughts on `PropertyGroup` to `Properties` (and `ItemGroup` to `Items`) aliasing: I wish that had been the original name, but I don't see enough benefit from enabling it now. We'd have to allow the old names and the new names, making parsing and persisting projects after OM manipulation more complicated both for us and for the folks that treat MSBuild projects as straight XML (that I wish didn't happen but does).",
        "createdAt": "2016-11-21T17:29:31Z",
        "updatedAt": "2016-11-21T17:29:31Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I personally think anything uncontentious we can do to make MSBuild more readable is worth doing, but I'm not the one who has to implement it :)",
        "createdAt": "2016-11-21T18:03:32Z",
        "updatedAt": "2016-11-21T18:03:32Z",
        "author": {
          "login": "mhutch"
        }
      },
      {
        "body": "@rainersigwald  I would venture that it is worth it to get the syntax as clean and friendly as possible to help make the platform as easy to hop into as possible. Lets not forget the bad foot that this repo started on. Msbuild has some baggage but has made some great progress. Be bold, we have minds to win. \r\n\r\nIf that argument doesn't work then I submit the following: \r\n\r\nPlease. I'll buy pizza.",
        "createdAt": "2016-11-22T01:07:29Z",
        "updatedAt": "2016-11-22T01:07:29Z",
        "author": {
          "login": "AlgorithmsAreCool"
        }
      },
      {
        "body": "@rainersigwald how much pizza and beer do you need? We can start a gofund me.",
        "createdAt": "2016-12-13T01:42:57Z",
        "updatedAt": "2016-12-13T01:42:57Z",
        "author": {
          "login": "davidfowl"
        }
      },
      {
        "body": "I don't need bribes, I need someone to tell me how the Construction APIs will deal with this situation without making my head explode. It seems like a lot of work that's better spent doing something like building IntelliSense so you _don't have to know_ the right magic keyword and are just guided onto the right path.",
        "createdAt": "2016-12-13T15:04:26Z",
        "updatedAt": "2016-12-13T15:04:26Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Spitballing an idea here, \r\n\r\nAm I correct that the newer syntax is just sugar? Or is there novel functionality being added? (I think globbing was added for example) If the core functionality is the same then what about just having two separate project schemas? \r\n\r\nSo the old way works with `<project>, <ItemGroup>, <PropertyGroup>` and the new way uses `<*NewProject*>, <Includes>, <References>, ...` \r\n\r\nWhere `<*NewProject*>` is something other than `<Project>` to make mode detection easy.\r\n\r\nThe new syntax could have all the handy defaults, assumptions and friendly names that made project.json simple.\r\n\r\nSince this is all standard XML then a [sufficiently smart XSLT](http://wiki.c2.com/?SufficientlySmartCompiler) post-parse should make this 'trivial' to desugar (similar to compiler 'lowering') to the traditional syntax.\r\n\r\nBut I have a feeling I am underestimating the reverse compat requirements here however...",
        "createdAt": "2016-12-13T21:35:57Z",
        "updatedAt": "2016-12-13T21:35:57Z",
        "author": {
          "login": "AlgorithmsAreCool"
        }
      },
      {
        "body": "I made an issue kind of similar to this but with a slightly different take, linking it just to keep track \r\n#1453",
        "createdAt": "2016-12-14T19:51:18Z",
        "updatedAt": "2016-12-14T19:52:45Z",
        "author": {
          "login": "aL3891"
        }
      }
    ]
  }
}