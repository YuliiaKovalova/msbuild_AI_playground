{
  "number": 4772,
  "title": "Force build project in solution when not selected for default target",
  "body": "### Steps to reproduce\r\n\r\nGiven a solution x.sln and any project y.vcxproj.\r\nThe project is selected to **not** build in any configuration.\r\n\r\nThere is no option in MSBuild to forcibly build it via solution file.\r\n\r\nThis command will built nothing\r\n```\r\nmsbuild x.sln /t:y\r\n```\r\n\r\nIt would be nice to have some parameter like \"BuildProjectInSolution=True\" which will build the project nevertheless.",
  "state": "OPEN",
  "createdAt": "2019-10-01T15:35:31Z",
  "updatedAt": "2024-02-21T16:30:37Z",
  "closedAt": null,
  "author": {
    "login": "NN---"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Discussion"
  },
  "comments": {
    "nodes": [
      {
        "body": "Can you clarify why you would want to build it in the solution context when it normally wouldn't? That would cause problems in resolving references and generally \"behaving like Visual Studio\".\r\n\r\nPut another way, why is it insufficient to just build the project itself with `msbuild y\\y.csproj`?",
        "createdAt": "2019-10-01T15:37:32Z",
        "updatedAt": "2019-10-01T15:37:32Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I have one configuration where some projects are not selected for build on purpose.\r\nNow I want to be able to build them in one step with other solution projects.\r\nCurrent solution is to build each such project separately or to generate a solution with all relevant projects build enabled.",
        "createdAt": "2019-10-01T19:02:09Z",
        "updatedAt": "2019-10-01T19:02:09Z",
        "author": {
          "login": "NN---"
        }
      },
      {
        "body": "> Can you clarify why you would want to build it in the solution context when it normally wouldn't?\r\n\r\nOne major use case is solution/projects layout created with [CMake](https://cmake.org/): an `ALL_BUILD` project depending on all projects that will default build and a `INSTALL` project that will just perform an installation step for all built artifacts, resembling the pattern `make && make install` used in `Makefile` builds.\r\n\r\n> why is it insufficient to just build the project itself with `msbuild y\\y.csproj`\r\n\r\nI have some scenarios where .NET projects will get configured slightly differently depending on the solution getting loaded (all tricks made possible by using `Directory.Build.props` and `Directory.Build.targets` files[1]).  Make these projects build with `MSBuild INSTALL.vcxproj` can be not trivial and in many case inconvenient.\r\n\r\nI also request a special force switch for `MSBuild` command line to allow override the current behavior and try to build the unselected projects anyway, also considering this seems to be already supported by [`devenv.exe`](https://stackoverflow.com/a/17504961/213871) command line and IMO there are no reasons MSBuild should be less powerful with that regard.\r\n\r\n[1] https://docs.microsoft.com/en-us/visualstudio/msbuild/customize-your-build?view=vs-2019",
        "createdAt": "2020-06-08T13:47:41Z",
        "updatedAt": "2020-06-08T13:51:17Z",
        "author": {
          "login": "ceztko"
        }
      },
      {
        "body": "+1, would be useful in some cases, e.g. having a project build only in certain scenarios, e.g. on CI. Having to support a separate Configuration solely for it would be inconvenient. As a workaround, I'm just explicitly setting `/p:SolutionDir=`. and building the project directly.",
        "createdAt": "2020-07-14T16:32:31Z",
        "updatedAt": "2020-07-14T16:32:31Z",
        "author": {
          "login": "yuyoyuppe"
        }
      },
      {
        "body": "After a few tableflips I came across this issue, also as a user of CMake.\r\n\r\nOur CI speed is currently limited by the throughput of the CMake build driver building multiple targets at once in tandem with MSbuild. When using\r\n```\r\ncmake --build <build_root> --config <config> --target tgt1 tgt2 etc...\r\n```\r\nthen CMake's build driver will take the list of target names, and [emit](https://github.com/Kitware/CMake/blob/fd57ced75a72cd73d2fd01ec0dd9c5cd552f029d/Source/cmGlobalVisualStudio10Generator.cxx#L1043) an `MSBuild.exe tname.vcxproj` equivalent command-line entry for each target listed. (Disregard the comment, it's out of date. It doesn't drive the build through the `.sln` file.) This is suboptimal, especially when trying to use the new [MultiToolTask](https://devblogs.microsoft.com/cppblog/improved-parallelism-in-msbuild/) engine with 10-20 projects, each consisting of 2-4 _loooong_ compiling source files on a 64-core build server. We can't build the entire solution, because we're developing a new module to a gigantic test suite and we have no need of building everything in CI, as our build times would skyrocket.\r\n\r\nI started developing an alternative `GenerateBuildCommand` inside CMake, which instead of immediately dropping to stamping out a command-line via `for (const auto& tname : realTargetNames) {...}` it defers generation by collecting all targets with the same configuration and platform into a range and emitting a single command-line. The range based for loop becomes a custom [`for_each_partition`](https://godbolt.org/z/6hG8hEfne) invocation, which takes a user-defined predicate to collect similar items into ranges. (There's quite a lot of logic, as this command also receives Intel fortran targets, C# targets that may need Restore before building, empty lists equate of ALL_BUILD, Clean should precede builds, etc.) It all works fine, but I can't handle the meta utility targets created by CMake. I would try not having to switch between driving some targets through `.sln`, and some (ALL_BUILD, INSTALL, ZERO_CHECK, ???) through `vcxproj` files. I've no clue if for C#-only projects these will still be `vcxproj` or `csproj`, but I shouldn't really have to care.\r\n\r\nI also found, that this very simple `CMakeLists.txt` file:\r\n```cmake\r\ncmake_minimum_required(VERSION 3.8)\r\ncmake_policy(VERSION 3.8...3.24)\r\n\r\nproject(CMakeFeature1 LANGUAGES CXX)\r\n\r\nadd_executable(App1 Main1.cpp)\r\nadd_executable(App2 Main2.cpp)\r\n```\r\nwhen using the `MSBUILDEMITSOLUTION` env var results in this metaproj fragment:\r\n```xml\r\n<SolutionConfiguration xmlns=\"\">\r\n  <ProjectConfiguration Project=\"{AE07BDAC-390E-3041-96D5-00F8D13C24E9}\" AbsolutePath=\"C:\\Users\\mate\\Source\\CMakeFeature1\\.vscode\\build\\msbuild-msvc-v143\\ALL_BUILD.vcxproj\" BuildProjectInSolution=\"False\">Debug|x64<ProjectDependency Project=\"{4EEE8610-9614-3ACE-AAF5-CE2AA8B7EC1D}\" /><ProjectDependency Project=\"{969AF5B4-102E-3D52-86FC-0831ABDDB5E8}\" /><ProjectDependency Project=\"{D633DE30-D5D3-3E16-9F70-9A446B95B200}\" /></ProjectConfiguration>\r\n  <ProjectConfiguration Project=\"{4EEE8610-9614-3ACE-AAF5-CE2AA8B7EC1D}\" AbsolutePath=\"C:\\Users\\mate\\Source\\CMakeFeature1\\.vscode\\build\\msbuild-msvc-v143\\App1.vcxproj\" BuildProjectInSolution=\"True\">Debug|x64<ProjectDependency Project=\"{D633DE30-D5D3-3E16-9F70-9A446B95B200}\" /></ProjectConfiguration>\r\n  <ProjectConfiguration Project=\"{969AF5B4-102E-3D52-86FC-0831ABDDB5E8}\" AbsolutePath=\"C:\\Users\\mate\\Source\\CMakeFeature1\\.vscode\\build\\msbuild-msvc-v143\\App2.vcxproj\" BuildProjectInSolution=\"True\">Debug|x64<ProjectDependency Project=\"{D633DE30-D5D3-3E16-9F70-9A446B95B200}\" /></ProjectConfiguration>\r\n  <ProjectConfiguration Project=\"{D633DE30-D5D3-3E16-9F70-9A446B95B200}\" AbsolutePath=\"C:\\Users\\mate\\Source\\CMakeFeature1\\.vscode\\build\\msbuild-msvc-v143\\ZERO_CHECK.vcxproj\" BuildProjectInSolution=\"True\">Debug|x64</ProjectConfiguration>\r\n</SolutionConfiguration>\r\n```\r\nNotice `BuildProjectInSolution=\"False\"` for `ALL_BUILD` like @NN--- said. However, if I add `install(TARGETS App1 App2)` to the end of my `CMakeLists.txt` file, it turns into this fragment:\r\n```xml\r\n<SolutionConfiguration xmlns=\"\">\r\n  <ProjectConfiguration Project=\"{AE07BDAC-390E-3041-96D5-00F8D13C24E9}\" AbsolutePath=\"C:\\Users\\mate\\Source\\CMakeFeature1\\.vscode\\build\\msbuild-msvc-v143\\ALL_BUILD.vcxproj\" BuildProjectInSolution=\"True\">Debug|x64<ProjectDependency Project=\"{4EEE8610-9614-3ACE-AAF5-CE2AA8B7EC1D}\" /><ProjectDependency Project=\"{969AF5B4-102E-3D52-86FC-0831ABDDB5E8}\" /><ProjectDependency Project=\"{D633DE30-D5D3-3E16-9F70-9A446B95B200}\" /></ProjectConfiguration>\r\n  <ProjectConfiguration Project=\"{4EEE8610-9614-3ACE-AAF5-CE2AA8B7EC1D}\" AbsolutePath=\"C:\\Users\\mate\\Source\\CMakeFeature1\\.vscode\\build\\msbuild-msvc-v143\\App1.vcxproj\" BuildProjectInSolution=\"True\">Debug|x64<ProjectDependency Project=\"{D633DE30-D5D3-3E16-9F70-9A446B95B200}\" /></ProjectConfiguration>\r\n  <ProjectConfiguration Project=\"{969AF5B4-102E-3D52-86FC-0831ABDDB5E8}\" AbsolutePath=\"C:\\Users\\mate\\Source\\CMakeFeature1\\.vscode\\build\\msbuild-msvc-v143\\App2.vcxproj\" BuildProjectInSolution=\"True\">Debug|x64<ProjectDependency Project=\"{D633DE30-D5D3-3E16-9F70-9A446B95B200}\" /></ProjectConfiguration>\r\n  <ProjectConfiguration Project=\"{6BD12640-A9C3-30BB-AC02-D22E455647F6}\" AbsolutePath=\"C:\\Users\\mate\\Source\\CMakeFeature1\\.vscode\\build\\msbuild-msvc-v143\\INSTALL.vcxproj\" BuildProjectInSolution=\"False\">Debug|x64<ProjectDependency Project=\"{AE07BDAC-390E-3041-96D5-00F8D13C24E9}\" /><ProjectDependency Project=\"{D633DE30-D5D3-3E16-9F70-9A446B95B200}\" /></ProjectConfiguration>\r\n  <ProjectConfiguration Project=\"{D633DE30-D5D3-3E16-9F70-9A446B95B200}\" AbsolutePath=\"C:\\Users\\mate\\Source\\CMakeFeature1\\.vscode\\build\\msbuild-msvc-v143\\ZERO_CHECK.vcxproj\" BuildProjectInSolution=\"True\">Debug|x64</ProjectConfiguration>\r\n</SolutionConfiguration>\r\n```\r\nNotice that now `ALL_BUILD` no longer has `BuildProjectInSolution=\"False\"`, but this \"privilige\" was given to `INSTALL`. In this case, now I'm able to build `ALL_BUILD` through the solution:\r\n```\r\nMSBuild.exe CMakeFeature1.sln /t:ALL_BUILD /p:Platform=x64 /p:Configuration=Release /p:VisualStudioVersion=17.0 /verbosity:minimal /nologo\r\n  App1.vcxproj -> C:\\Users\\mate\\Source\\CMakeFeature1\\.vscode\\build\\msbuild-msvc-v143\\Release\\App1.exe\r\n  App2.vcxproj -> C:\\Users\\mate\\Source\\CMakeFeature1\\.vscode\\build\\msbuild-msvc-v143\\Release\\App2.exe\r\n```\r\nNow the `INSTALL` target suffers:\r\n```\r\nMSBuild.exe CMakeFeature1.sln /t:INSTALL /p:Platform=x64 /p:Configuration=Release /p:VisualStudioVersion=17.0 /verbosity:minimal /nologo                               \r\nC:\\Users\\mate\\Source\\CMakeFeature1\\.vscode\\build\\msbuild-msvc-v143\\ZERO_CHECK.vcxproj : error MSB4057: The target \"INSTALL\" does not exist in the project.\r\nC:\\Users\\mate\\Source\\CMakeFeature1\\.vscode\\build\\msbuild-msvc-v143\\ZERO_CHECK.vcxproj : error MSB4057: The target \"INSTALL\" does not exist in the project.\r\n```\r\nHandling this in the CMake build driver is quite problematic. @rainersigwald Can we get some pointers how to go around this? Can we override the `BuildProjectInSolution` property somehow? A simple `/p:BuildProjectInSolution=True` doesn't do the trick. :(",
        "createdAt": "2022-10-26T08:10:40Z",
        "updatedAt": "2022-10-26T08:15:01Z",
        "author": {
          "login": "MathiasMagnus"
        }
      },
      {
        "body": "@rainersigwald Allow me to add, that I bit my finger working round the lack of this feature. I tried filtering out canonical targets like ALL_BUILD and INSTALL, but unfortunately all `add_custom_target` commands are generated with `BuildProjectInSolution=\"False\"` so that makes it more edge-cases than worth working around. I either find a way to interrogate MSBuild which files won't be able to build through the solution file, either on the command-line or parse it out of the solution file.",
        "createdAt": "2022-12-05T09:45:00Z",
        "updatedAt": "2022-12-05T09:45:00Z",
        "author": {
          "login": "MathiasMagnus"
        }
      },
      {
        "body": "@MathiasMagnus Pull Request button is above, but if you come with a solution it should be generic/clean enough that is worth merging into msbuild. Regarding the name `BuildProjectInSolution` I think that's not a good name for the switch/parameter. Instead I would go for a value less `-forceBuild` switch, which also respects the conventions in other `msbuild.exe` switches. ",
        "createdAt": "2022-12-05T10:25:31Z",
        "updatedAt": "2022-12-05T10:25:31Z",
        "author": {
          "login": "ceztko"
        }
      },
      {
        "body": "@ceztko I was contributing to CMake, not MSBuild. I don't know which was before, the chicken or the egg: does CMake's build driver build MSBuild targets using the project files because of this limitation, or is it just by chance. I was changing the build driver inside CMake such that when one says `cmake --build . --target App1 App2` then instead of:\r\n```\r\nMSBuild.exe App1.vcxproj /p:Platform=x64 /p:Configuration=Release /p:VisualStudioVersion=17.0 /v:m\r\nMSBuild.exe App2.vcxproj /p:Platform=x64 /p:Configuration=Release /p:VisualStudioVersion=17.0 /v:m\r\n```\r\nbeing emitted, it emits:\r\n```\r\nMSBuild.exe Whatever.sln /t:App1;App2 /p:Platform=x64 /p:Configuration=Release /p:VisualStudioVersion=17.0 /v:m\r\n```\r\nOf course this is easier said than done, given how these build targets are interleaved with C# project restores and there's even some archaic Intel Fortran project support, so it's easier said than done.\r\n\r\nUnfortunately I'm not a C# developer, and installing the compiler, doing a C# crash course and then familiarizing myself with the internals of MSBuild to figure out whether this is some intrinsic limitation that'll need a refactor to overcome or it's just a default property that needs switching... I wouldn't hold my breath me coming around to fixing it. I'd sooner work around it in the CMake driver by saving the metaproject file and parsing out which targets can be built via the solution file and which can't. That will decide how big a portion of the build can be parallalized when building from the CLI (MSBuild or CMake build driver both).\r\n\r\nI did not intend on adding a `BuildProjectInSolution` CLI flag, that's a property on the `ProjectConfiguration` entry in the metaproject which may be persisted. I'll probably pursue issuing a dummy `MSBuild.exe Solution.sln /targets /v:q` before CMake parses the solution file for targets and the metaproj file will be interrogated to see, which target has `BuildProjectInSolution` set to `true` or `false`;\r\n\r\n_ps.: don't get me wrong, I'd love to dig deeper into MSBuild, I do have an unhealthy interest in build systems, but there are too many useful things in the GPGPU domain I'd like to realise first, that no one else will write if I don't. Reading up on MSBuild internals would help me clear up for eg: do C# NuGet restores properly when using `MultiToolTask` if I'd specify `/t:CppTarget;CSharpTarget:Build;CSharpTarget:Restore`, would the restore finish on the C# target before it's build is started?_",
        "createdAt": "2022-12-05T11:21:29Z",
        "updatedAt": "2022-12-05T11:21:29Z",
        "author": {
          "login": "MathiasMagnus"
        }
      }
    ]
  }
}