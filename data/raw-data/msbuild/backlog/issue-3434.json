{
  "number": 3434,
  "title": ".NET Core App fails to load project (.NET 4.6.1 works as expected)",
  "body": "I created a sample .NET Console app with the following code.\r\n\r\n```\r\nusing System;\r\nusing Microsoft.Build.Evaluation;\r\n\r\nnamespace ConsoleApp25\r\n{\r\n    internal class Program\r\n    {\r\n        private static void Main(string[] args)\r\n        {\r\n            var buildEngine = new ProjectCollection();\r\n            var project = buildEngine.LoadProject(\"<full path>\\\\UnitTestProject.csproj\");\r\n       }\r\n    }\r\n}\r\n```\r\nMy project references the following 2 Nuget packages:\r\n* Microsoft.Build\r\n* Microsoft.Build.Utilities.Core\r\n\r\nThis gives the following exception when compiled to target .NET Core 2.0; \r\n```\r\nMicrosoft.Build.Exceptions.InvalidProjectFileException\r\n  HResult=0x80131500\r\n  Message=The SDK 'Microsoft.NET.Sdk' specified could not be found.  d:\\dd\\GitHubTestAdapter\\UnitTestProject\\UnitTestProject.csproj\r\n  Source=Microsoft.Build\r\n  StackTrace:\r\n   at Microsoft.Build.Shared.ProjectErrorUtilities.ThrowInvalidProject(String errorSubCategoryResourceName, IElementLocation elementLocation, String resourceName, Object[] args) in /_/src/Shared/ProjectErrorUtilities.cs:line 412\r\n   at Microsoft.Build.Evaluation.Evaluator`4.ExpandAndLoadImportsFromUnescapedImportExpressionConditioned(String directoryOfImportingFile, ProjectImportElement importElement, List`1& projects, Boolean throwOnFileNotExistsError) in /_/src/Build/Evaluation/Evaluator.cs:line 2173\r\n   at Microsoft.Build.Evaluation.Evaluator`4.ExpandAndLoadImports(String directoryOfImportingFile, ProjectImportElement importElement) in /_/src/Build/Evaluation/Evaluator.cs:line 1944\r\n   at Microsoft.Build.Evaluation.Evaluator`4.EvaluateImportElement(String directoryOfImportingFile, ProjectImportElement importElement) in /_/src/Build/Evaluation/Evaluator.cs:line 1823\r\n   at Microsoft.Build.Evaluation.Evaluator`4.PerformDepthFirstPass(ProjectRootElement currentProjectOrImport) in /_/src/Build/Evaluation/Evaluator.cs:line 940\r\n   at Microsoft.Build.Evaluation.Evaluator`4.Evaluate(ILoggingService loggingService, BuildEventContext buildEventContext) in /_/src/Build/Evaluation/Evaluator.cs:line 726\r\n   at Microsoft.Build.Evaluation.Project.Reevaluate(ILoggingService loggingServiceForEvaluation, ProjectLoadSettings loadSettings) in /_/src/Build/Definition/Project.cs:line 2752\r\n   at Microsoft.Build.Evaluation.Project.ReevaluateIfNecessary(ILoggingService loggingServiceForEvaluation, ProjectLoadSettings loadSettings) in /_/src/Build/Definition/Project.cs:line 2719\r\n   at Microsoft.Build.Evaluation.Project.Initialize(IDictionary`2 globalProperties, String toolsVersion, String subToolsetVersion, ProjectLoadSettings loadSettings, EvaluationContext evaluationContext) in /_/src/Build/Definition/Project.cs:line 2822\r\n   at Microsoft.Build.Evaluation.Project..ctor(String projectFile, IDictionary`2 globalProperties, String toolsVersion, String subToolsetVersion, ProjectCollection projectCollection, ProjectLoadSettings loadSettings, EvaluationContext evaluationContext) in /_/src/Build/Definition/Project.cs:line 543\r\n   at Microsoft.Build.Evaluation.ProjectCollection.LoadProject(String fileName, IDictionary`2 globalProperties, String toolsVersion) in /_/src/Build/Definition/ProjectCollection.cs:line 1118\r\n   at ConsoleApp25.Program.Main(String[] args) in D:\\tmp\\source\\repos\\ConsoleApp25\\ConsoleApp25\\Program.cs:line 11\r\n```\r\n\r\nHowever it works as expected when targeting .NET 4.6.1\r\n\r\nAny ideas?\r\n\r\n[ConsoleApp25.zip](https://github.com/Microsoft/msbuild/files/2120893/ConsoleApp25.zip)",
  "state": "OPEN",
  "createdAt": "2018-06-20T20:17:56Z",
  "updatedAt": "2024-02-21T16:33:41Z",
  "closedAt": null,
  "author": {
    "login": "paulvanbrenk"
  },
  "labels": [
    "Area: API",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "KirillOsenkov"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Can you see if the documentation at https://docs.microsoft.com/en-us/visualstudio/msbuild/updating-an-existing-application helps? Feedback welcome, but I think it addresses your use case.",
        "createdAt": "2018-06-20T20:20:59Z",
        "updatedAt": "2018-06-20T20:20:59Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "The documentation suggests it would, but I can't access the `MSBuildLocator` type in my .NET Core app. (The assemblies in the package only target .NET 4.6).",
        "createdAt": "2018-06-20T20:54:38Z",
        "updatedAt": "2018-06-20T20:54:38Z",
        "author": {
          "login": "paulvanbrenk"
        }
      },
      {
        "body": "When I run the project from the command line (using `dotnet run`), I get some more information:\r\n\r\n```\r\nUnhandled Exception: Microsoft.Build.Exceptions.InvalidProjectFileException: The imported project \"C:\\vs\\dogfood\\MSBuild\\15.0\\Bin\\15.0\\Microsoft.Common.props\" was not found. Confirm that the path in the <Import> declaration is correct, and that the file exists on disk.  C:\\Program Files\\dotnet\\sdk\\2.1.400-preview-008963\\Sdks\\Microsoft.NET.Sdk\\Sdk\\Sdk.props\r\n   at Microsoft.Build.Shared.ProjectErrorUtilities.ThrowInvalidProject(String errorSubCategoryResourceName, IElementLocation elementLocation, String resourceName, Object[] args) in /_/src/Shared/ProjectErrorUtilities.cs:line 412\r\n   at Microsoft.Build.Evaluation.Evaluator`4.ExpandAndLoadImportsFromUnescapedImportExpression(String directoryOfImportingFile, ProjectImportElement importElement, String unescapedExpression, Boolean throwOnFileNotExistsError, List`1& imports) in /_/src/Build/Evaluation/Evaluator.cs:line 2418\r\n   at Microsoft.Build.Evaluation.Evaluator`4.ExpandAndLoadImportsFromUnescapedImportExpressionConditioned(String directoryOfImportingFile, ProjectImportElement importElement, List`1& projects, Boolean throwOnFileNotExistsError) in /_/src/Build/Evaluation/Evaluator.cs:line 2173\r\n   at Microsoft.Build.Evaluation.Evaluator`4.ExpandAndLoadImports(String directoryOfImportingFile, ProjectImportElement importElement) in /_/src/Build/Evaluation/Evaluator.cs:line 1944\r\n   at Microsoft.Build.Evaluation.Evaluator`4.EvaluateImportElement(String directoryOfImportingFile, ProjectImportElement importElement) in /_/src/Build/Evaluation/Evaluator.cs:line 1823\r\n   at Microsoft.Build.Evaluation.Evaluator`4.PerformDepthFirstPass(ProjectRootElement currentProjectOrImport) in /_/src/Build/Evaluation/Evaluator.cs:line 997\r\n   at Microsoft.Build.Evaluation.Evaluator`4.EvaluateImportElement(String directoryOfImportingFile, ProjectImportElement importElement) in /_/src/Build/Evaluation/Evaluator.cs:line 1825\r\n   at Microsoft.Build.Evaluation.Evaluator`4.PerformDepthFirstPass(ProjectRootElement currentProjectOrImport) in /_/src/Build/Evaluation/Evaluator.cs:line 940\r\n   at Microsoft.Build.Evaluation.Evaluator`4.Evaluate(ILoggingService loggingService, BuildEventContext buildEventContext) in /_/src/Build/Evaluation/Evaluator.cs:line 726\r\n   at Microsoft.Build.Evaluation.Project.Reevaluate(ILoggingService loggingServiceForEvaluation, ProjectLoadSettings loadSettings) in /_/src/Build/Definition/Project.cs:line 2752\r\n   at Microsoft.Build.Evaluation.Project.ReevaluateIfNecessary(ILoggingService loggingServiceForEvaluation, ProjectLoadSettings loadSettings) in /_/src/Build/Definition/Project.cs:line 2719\r\n   at Microsoft.Build.Evaluation.Project.Initialize(IDictionary`2 globalProperties, String toolsVersion, String subToolsetVersion, ProjectLoadSettings loadSettings, EvaluationContext evaluationContext) in /_/src/Build/Definition/Project.cs:line 2822\r\n   at Microsoft.Build.Evaluation.Project..ctor(String projectFile, IDictionary`2 globalProperties, String toolsVersion, String subToolsetVersion, ProjectCollection projectCollection, ProjectLoadSettings loadSettings, EvaluationContext evaluationContext) in /_/src/Build/Definition/Project.cs:line 543\r\n   at Microsoft.Build.Evaluation.ProjectCollection.LoadProject(String fileName, IDictionary`2 globalProperties, String toolsVersion) in /_/src/Build/Definition/ProjectCollection.cs:line 1118\r\n   at ConsoleApp25.Program.DoWork() in d:\\tmp\\source\\repos\\ConsoleApp25\\ConsoleApp25\\Program.cs:line 44\r\n   at ConsoleApp25.Program.Main(String[] args) in d:\\tmp\\source\\repos\\ConsoleApp25\\ConsoleApp25\\Program.cs:line 37\r\n```\r\n\r\nThe only `Microsoft.Common.props` file I can find in my VS install directory is: \r\n`C:\\vs\\dogfood\\MSBuild\\15.0\\Microsoft.Common.props`.\r\n\r\n",
        "createdAt": "2018-06-20T23:13:41Z",
        "updatedAt": "2018-06-20T23:13:41Z",
        "author": {
          "login": "paulvanbrenk"
        }
      },
      {
        "body": "I can confirm that it doesn't work when Paul's app that uses MSBuild is targeting netcoreapp20:\r\n```\r\nUnhandled Exception: Microsoft.Build.Exceptions.InvalidProjectFileException: The imported project \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\MSBuild\\15.0\\Bin\\15.0\\Microsoft.Common.props\" was not found. Confirm that the path in the <Import> declaration is correct, and that the file exists on disk.  C:\\Program Files\\dotnet\\sdk\\2.1.300-preview1-008174\\Sdks\\Microsoft.NET.Sdk\\Sdk\\Sdk.props\r\n```\r\n\r\nLooks like in both cases it's appending an unnecessary `\\15.0` to the path to Microsoft.Common.props.\r\n\r\nAdding some SDK experts @dsplaisted @nguerrera. Still not sure if the bug is in the SDK or elsewhere, but hopefully someone can shed some light. The repro is easy (just had to change the hardcoded path to the test project on Paul's drive).",
        "createdAt": "2018-06-21T23:33:28Z",
        "updatedAt": "2018-06-21T23:33:28Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "It is becoming more and more required, depending on the porting to the .net core.\r\nAt the moment I don't see any libraries that provide the capabilities that this library provides, and there is no library that supports net core.\r\nCan anyone direct me to where the solution might be? I'm not yet familiar with the MSBuild code.",
        "createdAt": "2018-12-19T18:48:36Z",
        "updatedAt": "2018-12-19T18:48:36Z",
        "author": {
          "login": "baruchiro"
        }
      },
      {
        "body": "I just hit this issue. Are there any known workarounds?",
        "createdAt": "2019-06-19T10:47:42Z",
        "updatedAt": "2019-06-19T10:47:42Z",
        "author": {
          "login": "Alxandr"
        }
      },
      {
        "body": "MSBuildLocator now supports .NET Core applications. Are you using it, @Alxandr?",
        "createdAt": "2019-06-19T14:00:57Z",
        "updatedAt": "2019-06-19T14:00:57Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I'm using `nuke-build`. So I'm not directly using anything. I might look into it though.",
        "createdAt": "2019-06-19T14:13:58Z",
        "updatedAt": "2019-06-19T14:13:58Z",
        "author": {
          "login": "Alxandr"
        }
      },
      {
        "body": "I tried doing the following:\r\n\r\n```csharp\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\n\r\nstatic class Program\r\n{\r\n    public static int Main()\r\n    {\r\n        Microsoft.Build.Locator.MSBuildLocator.RegisterDefaults();\r\n        return Build.Run();\r\n    }\r\n}\r\n```\r\n\r\nAnd I still got the same error.\r\n\r\nHere's output from the immediate window before doing `Build.Run()` (I inserted `>` in front of the input lines):\r\n\r\n```\r\n> Microsoft.Build.Locator.MSBuildLocator.IsRegistered\r\ntrue\r\n> Environment.GetEnvironmentVariable(\"MSBUILD_EXE_PATH\")\r\n\"C:\\\\Program Files\\\\dotnet\\\\sdk\\\\2.2.300\\\\MSBuild.dll\"\r\n```\r\n\r\n**Edit**: \r\nAnd it's failing here: https://github.com/nuke-build/common/blob/35404e91f1a283cddf5e5659ef7011ba44d17873/source/Nuke.Common/ProjectModel/ProjectModelTasks.cs#L47",
        "createdAt": "2019-06-19T14:42:53Z",
        "updatedAt": "2019-06-19T14:46:01Z",
        "author": {
          "login": "Alxandr"
        }
      },
      {
        "body": "Any news on this issue?",
        "createdAt": "2021-02-04T22:39:27Z",
        "updatedAt": "2021-02-04T22:39:27Z",
        "author": {
          "login": "LegendaryB"
        }
      },
      {
        "body": "@Forgind @BenVillalobos \r\n\r\nAs far as I know MSBuildLocator should work on .NET Core.  I'm not sure what the issue with nuke-build was, or whether it's been resolved yet.",
        "createdAt": "2021-02-05T02:58:47Z",
        "updatedAt": "2021-02-05T02:58:47Z",
        "author": {
          "login": "dsplaisted"
        }
      },
      {
        "body": "It should, yes. @Alxandr, would you mind sharing the version of your repro that used MSBuildLocator?",
        "createdAt": "2021-02-05T16:02:06Z",
        "updatedAt": "2021-02-05T16:02:06Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "I don't even remember which project I was using this on anymore, so I'm not going to to try to recreate it half a year later, sorry.",
        "createdAt": "2021-02-05T19:37:07Z",
        "updatedAt": "2021-02-05T19:37:07Z",
        "author": {
          "login": "Alxandr"
        }
      },
      {
        "body": "I can still easily reproduce the problem:\r\n\r\nUse this .csproj:\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>net5.0</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.Build\" Version=\"16.8.0\" />\r\n    <PackageReference Include=\"Microsoft.Build.Utilities.Core\" Version=\"16.8.0\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\r\n\r\nand this .cs:\r\n```csharp\r\nusing Microsoft.Build.Evaluation;\r\n\r\nclass Program\r\n{\r\n    private static void Main(string[] args)\r\n    {\r\n        var buildEngine = new ProjectCollection();\r\n        var project = buildEngine.LoadProject(\"some.csproj\");\r\n    }\r\n}\r\n```\r\n\r\nIt works fine if you're targeting net472, but fails if you're targeting net5.0.\r\n\r\nTo workaround, you need to add a reference to Microsoft.Build.Locator. Change the .csproj to this:\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>net5.0</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.Build\" Version=\"16.8.0\" ExcludeAssets=\"runtime\" />\r\n    <PackageReference Include=\"Microsoft.Build.Locator\" Version=\"1.4.1\" />\r\n    <PackageReference Include=\"Microsoft.Build.Utilities.Core\" Version=\"16.8.0\" ExcludeAssets=\"runtime\"/>\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\r\n\r\nand the .cs to this:\r\n```csharp\r\nusing Microsoft.Build.Evaluation;\r\n\r\nclass Program\r\n{\r\n    private static void Main(string[] args)\r\n    {\r\n        Microsoft.Build.Locator.MSBuildLocator.RegisterDefaults();\r\n        Test();\r\n    }\r\n\r\n    private static void Test()\r\n    {\r\n        var buildEngine = new ProjectCollection();\r\n        var project = buildEngine.LoadProject(\"C:\\\\temp\\\\multi\\\\a\\\\a.csproj\");\r\n    }\r\n}\r\n```\r\n\r\nNote how the first usage of MSBuild API has to be in a separate method, because otherwise JIT will try to resolve Microsoft.Build.dll before MSBuildLocator was registered.\r\n\r\nI'm still curious why the desktop version works without MSBuildLocator, but .NET 5 version needs it.",
        "createdAt": "2021-02-05T20:48:24Z",
        "updatedAt": "2021-02-05T20:48:39Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": ">I'm still curious why the desktop version works without MSBuildLocator, but .NET 5 version needs it.\r\n\r\nThe part of this that confuses me is not that it doesn't work with .NET 5 but that it works with .NET Framework. It's meaningless to say you need __ part of the MSBuild API if you don't specify which version of MSBuild you want to use. That suggests to me that there's some default logic that tries to guess which MSBuild you are trying to use, in which case it would make sense that it would only be right if it knows what framework to use, and it presumably hasn't been updated since Core came out. I'm curious what would happen if you tried it on a computer with Core MSBuild but not Framework MSBuild.",
        "createdAt": "2021-02-05T21:29:51Z",
        "updatedAt": "2021-02-05T21:29:51Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "For me everything works with .net 5.0, but as soon as I use .net 6.0 I have to use\r\nMicrosoft.Build.Locator.MSBuildLocator.RegisterDefaults(); \r\n\r\nany updates on this issue (at least for .net 6.0)?",
        "createdAt": "2022-03-10T08:40:04Z",
        "updatedAt": "2022-03-10T08:40:04Z",
        "author": {
          "login": "rizi"
        }
      },
      {
        "body": "What versions of MSBuild do you have? If you have net5.0 and net6.0 but nothing lower, that might validate my guess.",
        "createdAt": "2022-03-10T15:34:40Z",
        "updatedAt": "2022-03-10T15:34:40Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "> What versions of MSBuild do you have? If you have net5.0 and net6.0 but nothing lower, that might validate my guess.\r\n\r\nI will check tomorrow, but I have VS 2019 and VS 2022 installed. .net core 3, .net 5 and .net 6.0 SDKs and runtimes.\r\n\r\nI also have.net 4.7.2 installed.\r\nSo I think I have the latest version of msbuild and at least one version before the latest version.\r\nBr ",
        "createdAt": "2022-03-10T15:46:50Z",
        "updatedAt": "2022-03-10T15:46:50Z",
        "author": {
          "login": "rizi"
        }
      },
      {
        "body": "Ah, ok. Not what I'd been hoping, then. Thanks for checking.",
        "createdAt": "2022-03-10T16:34:50Z",
        "updatedAt": "2022-03-10T16:34:50Z",
        "author": {
          "login": "Forgind"
        }
      }
    ]
  }
}