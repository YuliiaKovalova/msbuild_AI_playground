{
  "number": 10106,
  "title": "Item to copy to output",
  "body": "If we need to copy a file to output directory, the current pattern seems to be:\r\n\r\n```xml\r\n<ItemGroup>\r\n  <None Include=\"myfile.txt\">\r\n    <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>\r\n  </None>\r\n</ItemGroup>\r\n```\r\n\r\nIt works by first assigning the target path in the `AssignTargetPaths` (plural!) target. The output of the `AssignTargetPath` task (singular!) is copied to the `NoneWithTargetPath` item:\r\nhttps://github.com/dotnet/msbuild/blob/dbf8d12deab2aee74f1bd574c1ecad2b39f552b4/src/Tasks/Microsoft.Common.CurrentVersion.targets#L3197-L3199\r\n\r\nAll the `AssignTargetPath` task does is append the `TargetPath` metadata to the item, usually just the name. It is the relative path inside the project output directory where to copy the file. Without it, you'll get an error saying the destination file path is a directory (because the target file path is empty).\r\nhttps://github.com/dotnet/msbuild/blob/dbf8d12deab2aee74f1bd574c1ecad2b39f552b4/src/Tasks/AssignTargetPath.cs#L122\r\n\r\nThen `NoneWithTargetPath` gets copied to `_ThisProjectItemsToCopyToOutputDirectory`:\r\nhttps://github.com/dotnet/msbuild/blob/dbf8d12deab2aee74f1bd574c1ecad2b39f552b4/src/Tasks/Microsoft.Common.CurrentVersion.targets#L5176-L5179\r\n\r\nThen the target returns and the items go into `_ThisProjectItemsToCopyToOutputDirectory`:\r\nhttps://github.com/dotnet/msbuild/blob/dbf8d12deab2aee74f1bd574c1ecad2b39f552b4/src/Tasks/Microsoft.Common.CurrentVersion.targets#L5195-L5197\r\n\r\nThen the items flow into `_SourceItemsToCopyToOutputDirectory`:\r\nhttps://github.com/dotnet/msbuild/blob/dbf8d12deab2aee74f1bd574c1ecad2b39f552b4/src/Tasks/Microsoft.Common.CurrentVersion.targets#L5204-L5214\r\n\r\nFinally the copy happens in `_CopyOutOfDateSourceItemsToOutputDirectory`:\r\nhttps://github.com/dotnet/msbuild/blob/dbf8d12deab2aee74f1bd574c1ecad2b39f552b4/src/Tasks/Microsoft.Common.CurrentVersion.targets#L5264-L5282\r\n\r\nNote the destination is `$(OutDir)%(TargetPath)`. This is what the `TargetPath` metadata was needed for.\r\n\r\n======\r\n\r\nNow, the problem with the `None` item is that it's considered an input by the Visual Studio Fast Up-To-Date Check. So if you are generating an item as part of the project build, and then add it to the `None` item to ensure it gets copied, you have a situation where the project's output is also its input, so the FUTDC will always consider the project not up-to-date, because the generated file was written to after the primary output assembly, but it's now an input, so we have an input newer than output.\r\n\r\nI was looking for a loophole to find a better way to do this. I first tried to directly add to the `_ThisProjectItemsToCopyToOutputDirectory` item, but without the `TargetPath` metadata I got an error from the copy task because the destination file name was empty.\r\n\r\nThe only thing I found that works is instead of `None` to add it to `_CompileItemsToCopy`:\r\nhttps://github.com/dotnet/msbuild/blob/dbf8d12deab2aee74f1bd574c1ecad2b39f552b4/src/Tasks/Microsoft.Common.CurrentVersion.targets#L5163-L5174\r\n\r\nConveniently, `AssignTargetPath` is being called for this item, so it acquires the `TargetPath` metadata. \r\n\r\nHowever, obviously, it's a hack.\r\n\r\nI wonder what's the official blessed pattern for ensuring that a file generated by this project gets copied to output. If we don't have one, we should make one and make it easy and fool-proof.",
  "state": "OPEN",
  "createdAt": "2024-05-05T16:57:43Z",
  "updatedAt": "2025-05-28T03:50:55Z",
  "closedAt": null,
  "author": {
    "login": "KirillOsenkov"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "Area: Documentation",
    "Area: Common Targets",
    "Priority:2",
    "triaged"
  ],
  "comments": {
    "nodes": [
      {
        "body": "also the benefit of using this is that it flows transitively to referencing projects. For example things like `<Reference Include=\"...\" Private=\"true\" />` do not flow transitively. Would be nice to have control over the transitive behavior as well (copy to output of this project vs. copy to output for all referencing projects too)",
        "createdAt": "2024-08-13T18:28:20Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "My recommendation would be to literally clone `_CompileItemsToCopy`, name it something sensible like `CopyToOutput` and set the default metadata `CopyToOutputDirectory=PreserveNewest`.\r\n\r\nThe biggest risk here is someone already having an item named CopyToOutput, not sure what to do in this case. I guess we'll just break them?\r\n\r\n",
        "createdAt": "2024-08-13T18:44:48Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "Why not use `Content`? It's meant to be used when you need your files in output, package and publish. If you want your files processed as part of the build while needing to copy them to output as well, you can still use the `CopyToOutputDirectory` on the item (`Compile`, `TextTemplate`, `Resource`, etc...). Also, `None` should be excluded from `CopyToOutputDirectory` and **FUTDC** altogether IMHO.",
        "createdAt": "2025-04-06T08:05:44Z",
        "author": {
          "login": "Nirmal4G"
        }
      },
      {
        "body": "Content has preexisting semantics that is different and can't be changed. RAR resolves from Content items.",
        "createdAt": "2025-04-06T20:37:07Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "Then we should introduce a new item. I'm thinking `File`. We already have `Folder` so this could be a good replacement for `None`.",
        "createdAt": "2025-04-07T04:04:36Z",
        "author": {
          "login": "Nirmal4G"
        }
      },
      {
        "body": "File is too fuzzy and generic to use for a specific scenario like this. Whatever the item name is, it has to be related to copying to output and be used for this scenario only.",
        "createdAt": "2025-05-27T21:48:18Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "I think we (**I**) already had encountered this problem few times before. I totally missed the point that it has to do with the generated files.\n\nAt that time, I had used a custom item, `GeneratedFile` to include those files to perform the `CopyToOutputDirectory` or `CopyToPublishDirectory` functions. And manually excluded them from `None` and included them in `UpToDateCheck{Input/Output}` if needed.\n\nIs `ExcludedFromBuild` on items still a thing? If so can't we use that? I don't remember anyone mentioning this or tried it previously.\n\nDo we also see the same issues with `Content`, `EmbeddedResource`, `Page`, `Resource` and other items as well? As you said, _without deeply looking into code_, the `Compile` item seems to be protected!? If so, can we replicate that to other items? That could fix the root of the problem.\n\n\n#### References\n- https://github.com/dotnet/project-system/issues/62\n- https://github.com/dotnet/project-system/issues/7784\n\n_I see that you were involved in the original feature discussion._",
        "createdAt": "2025-05-28T03:36:10Z",
        "author": {
          "login": "Nirmal4G"
        }
      },
      {
        "body": "For naming the new item, `CopyToOutput` seems good to me, if we want to introduce it anyway.\n\nWhatever we decide to do, I still think `None` should excluded from anything related to build. And introduce `File` to fulfill the current `None` item role.",
        "createdAt": "2025-05-28T03:50:54Z",
        "author": {
          "login": "Nirmal4G"
        }
      }
    ]
  }
}