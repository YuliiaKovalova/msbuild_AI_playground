{
  "number": 1310,
  "title": "<AutoGenerateBindingRedirects> doesn't work for class libraries",
  "body": "The property is ignored unless the containing project is an .exe.\r\n\r\nExtensible frameworks/apps that load plugins might support loading configuration for each plugin, including binding redirects, from a .dll.config file next to the plugin .dll. For example, a unit-testing framework such as xunit. See also proposal https://github.com/Microsoft/msbuild/issues/1309, which might also make use of this feature.\r\n\r\nI propose the restriction on project type is removed and binding redirects are generated for any project that sets AutoGenerateBindingRedirects to true.",
  "state": "OPEN",
  "createdAt": "2016-11-03T19:43:30Z",
  "updatedAt": "2024-02-21T16:37:58Z",
  "closedAt": null,
  "author": {
    "login": "tmat"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Backlog"
  },
  "comments": {
    "nodes": [
      {
        "body": "//cc @ericstj\n",
        "createdAt": "2016-11-03T19:43:37Z",
        "updatedAt": "2016-11-03T19:43:37Z",
        "author": {
          "login": "tmat"
        }
      },
      {
        "body": "cc @piotrpMSFT @krwq @dsplaisted There is a similar requirement for the CLI team\n",
        "createdAt": "2016-11-10T21:12:20Z",
        "updatedAt": "2016-11-10T21:12:20Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "Also there need to be a way how to specify the target framework for which the redirects need to be generated. Is there is a way to do so for a class library?",
        "createdAt": "2017-01-06T23:30:49Z",
        "updatedAt": "2017-01-06T23:30:49Z",
        "author": {
          "login": "tmat"
        }
      },
      {
        "body": "this issue is blocking me from using Microsoft.AspNetCore.TestHost in a .net 4.6.1 test project targeting asp.net core .net 4.6.1 in VS 2017. Manually adding the binding redirect attributes to my test proj doesn't help. :(",
        "createdAt": "2017-04-22T17:45:59Z",
        "updatedAt": "2017-04-22T17:45:59Z",
        "author": {
          "login": "kdowswell"
        }
      },
      {
        "body": "The magic sauce seems to be to add\r\n\r\n```\r\n<PropertyGroup>\r\n  <AutoGenerateBindingRedirects>true</AutoGenerateBindingRedirects>\r\n  <GenerateBindingRedirectsOutputType>true</GenerateBindingRedirectsOutputType>\r\n</PropertyGroup>\r\n\r\n```\r\n\r\nbut I don't understand why there are two props with basically the same meaning. I found this [here](https://github.com/Microsoft/vstest/issues/428#issuecomment-276801928)\r\n\r\nand then my libraries started generating binding redirects.\r\n\r\n\r\n\r\n",
        "createdAt": "2017-05-09T13:02:00Z",
        "updatedAt": "2017-05-09T13:02:18Z",
        "author": {
          "login": "bradphelan"
        }
      },
      {
        "body": "But now it stopped working again.... totally inconsistent behavior :(\r\n",
        "createdAt": "2017-05-10T07:05:25Z",
        "updatedAt": "2017-05-10T07:05:25Z",
        "author": {
          "login": "bradphelan"
        }
      },
      {
        "body": "Oh yes it does. I've figured it out. ;) When set the below on a library project\r\n\r\n```\r\n<PropertyGroup>\r\n  <AutoGenerateBindingRedirects>true</AutoGenerateBindingRedirects>\r\n  <GenerateBindingRedirectsOutputType>true</GenerateBindingRedirectsOutputType>\r\n</PropertyGroup>\r\n```\r\n\r\n(1) If there are no binding conflicts then the __*.config__ file is not generated. \r\n(2) If there are binding conflicts then the __*.config__ file is generated.",
        "createdAt": "2017-05-10T07:17:40Z",
        "updatedAt": "2017-05-10T07:17:50Z",
        "author": {
          "login": "bradphelan"
        }
      },
      {
        "body": "Over here I tried to activate both \r\n`  <AutoGenerateBindingRedirects>true</AutoGenerateBindingRedirects>\r\n  <GenerateBindingRedirectsOutputType>true</GenerateBindingRedirectsOutputType>\r\n`\r\nbut no effect.\r\n\r\nAlso, no effect either in library or exe file. Like... redirects not created at all. ",
        "createdAt": "2017-06-19T07:37:26Z",
        "updatedAt": "2017-06-19T07:37:26Z",
        "author": {
          "login": "JoseFMP"
        }
      },
      {
        "body": " If you don't need the binding redirects then it will not generate them. At least that is what I have found.",
        "createdAt": "2017-06-19T07:41:18Z",
        "updatedAt": "2017-06-19T07:41:18Z",
        "author": {
          "login": "bradphelan"
        }
      },
      {
        "body": "I need them. That's why my software does not start. ",
        "createdAt": "2017-06-19T08:22:51Z",
        "updatedAt": "2017-06-19T08:22:51Z",
        "author": {
          "login": "JoseFMP"
        }
      },
      {
        "body": "I am also suffering from this. I get the MSB3276 warning, but adding \r\n\r\n``\r\n<AutoGenerateBindingRedirects>true</AutoGenerateBindingRedirects> <GenerateBindingRedirectsOutputType>true</GenerateBindingRedirectsOutputType>\r\n``\r\n\r\nDoes nothing...\r\n\r\nI am using the new MSBuild-based tooling (that means, using `<Project Sdk=\"Microsoft.NET.Sdk.Web\">`",
        "createdAt": "2017-06-19T22:53:46Z",
        "updatedAt": "2017-06-19T22:53:46Z",
        "author": {
          "login": "danrozenberg"
        }
      },
      {
        "body": "This should work:\r\n\r\n```xml\r\n  <Target Name=\"ForceGenerationOfBindingRedirects\"\r\n          AfterTargets=\"ResolveAssemblyReferences\"\r\n          BeforeTargets=\"GenerateBindingRedirects\"\r\n          Condition=\"'$(AutoGenerateBindingRedirects)' == 'true'\">\r\n    <PropertyGroup>\r\n      <!-- Needs to be set in a target because it has to be set after the initial evaluation in the common targets -->\r\n      <GenerateBindingRedirectsOutputType>true</GenerateBindingRedirectsOutputType>\r\n    </PropertyGroup>\r\n  </Target>\r\n```",
        "createdAt": "2017-06-19T22:56:41Z",
        "updatedAt": "2017-06-19T22:56:55Z",
        "author": {
          "login": "tmat"
        }
      },
      {
        "body": "tmat, it does work, thank you! \r\nIs there any way to see which binding redirections were made?",
        "createdAt": "2017-06-19T23:09:46Z",
        "updatedAt": "2017-06-19T23:09:46Z",
        "author": {
          "login": "danrozenberg"
        }
      },
      {
        "body": "Yes, there should be a .dll.config file generated to the output directory.",
        "createdAt": "2017-06-19T23:15:21Z",
        "updatedAt": "2017-06-19T23:15:21Z",
        "author": {
          "login": "tmat"
        }
      },
      {
        "body": "Fixing this (not requiring any specific output type) is required to unblock https://github.com/Microsoft/vstest/issues/792",
        "createdAt": "2017-06-19T23:17:12Z",
        "updatedAt": "2017-06-19T23:17:12Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "tmat, although I said it worked earlier, I was mistaken, I had changed the command line directory to another project and didn't realize I was building something that didn't have MSB3276 to begin with. At this point, I am still getting that warning, even when using the ``Target`` solution. Sorry about that...",
        "createdAt": "2017-06-19T23:30:12Z",
        "updatedAt": "2017-06-19T23:30:12Z",
        "author": {
          "login": "danrozenberg"
        }
      },
      {
        "body": "To be honest, I think what I am experiencing is an issue with the warning showing up even when the binding redirection is being done...so the warning trigger is being too sensitive...\r\n\r\nI do get the ``.dll.config`` file with the correct redirections, either using the ``Target`` technique, or any other technique that sets the AutoGenerateBindingRedirects to be turned on.\r\n\r\nI might have to find a more appropriate issue to discuss this... thanks for the help so far, though!",
        "createdAt": "2017-06-20T00:00:33Z",
        "updatedAt": "2017-06-20T00:00:33Z",
        "author": {
          "login": "danrozenberg"
        }
      },
      {
        "body": "@tmat Your solution worked for me... thank you so much! So now the redirects are created. Surprising to see how many... I envision it's going to be a hard time to work with .NET Standard libraries. Based on the fallacy of interoperability between frameworks and platforms....",
        "createdAt": "2017-06-20T01:59:33Z",
        "updatedAt": "2017-06-20T01:59:33Z",
        "author": {
          "login": "JoseFMP"
        }
      },
      {
        "body": "It shouldn't need to be set in a target since the common targets only set it to true, never to false (am I missing something?).\r\nAt least it worked for a few users on SO:\r\nhttps://stackoverflow.com/questions/43995432/could-not-load-file-or-assembly-microsoft-extensions-dependencyinjection-abstrac/43996389\r\nhttps://stackoverflow.com/questions/43955266/interface-in-netstandard-1-1-library-does-not-have-implementation-in-net-4-61/43955719",
        "createdAt": "2017-06-20T03:44:53Z",
        "updatedAt": "2017-06-20T03:44:53Z",
        "author": {
          "login": "dasMulli"
        }
      },
      {
        "body": "I am aware it worked for others. But for me the only thing that worked was setting it with the target solution @tmat proposed. The rest did not generate any binding at all. ",
        "createdAt": "2017-06-20T04:04:40Z",
        "updatedAt": "2017-06-20T04:04:40Z",
        "author": {
          "login": "JoseFMP"
        }
      },
      {
        "body": "To understand why static properties might be different than the target you can look at the evaluated project by using msbuild /pp.  I suspect that the order of import and/or the contents of the targets themselves differs between the projects.",
        "createdAt": "2017-06-20T16:05:12Z",
        "updatedAt": "2017-06-20T16:05:12Z",
        "author": {
          "login": "ericstj"
        }
      },
      {
        "body": "/cc @bradwilson",
        "createdAt": "2017-08-28T15:16:24Z",
        "updatedAt": "2017-08-28T15:16:24Z",
        "author": {
          "login": "ericstj"
        }
      },
      {
        "body": "I might have a duplicate issue here: https://github.com/dotnet/sdk/issues/1595\r\n\r\nEdit:\r\nI've done extensive tests (see my issue in https://github.com/dotnet/sdk/issues/1595) and the problem is related to using Package References but not explictly setting both \r\n`<AutoGenerateBindingRedirects>true</AutoGenerateBindingRedirects>`\r\nand\r\n`<GenerateBindingRedirectsOutputType>true</GenerateBindingRedirectsOutputType>`\r\nin the project file.",
        "createdAt": "2017-09-20T06:35:14Z",
        "updatedAt": "2017-09-20T07:03:00Z",
        "author": {
          "login": "MichaelKetting"
        }
      },
      {
        "body": "@MichaelKetting  in my case that did not influence anything. Unfortunately.",
        "createdAt": "2017-09-28T06:36:37Z",
        "updatedAt": "2017-09-28T06:36:37Z",
        "author": {
          "login": "JoseFMP"
        }
      },
      {
        "body": "I would like to not have to put either of these in a .csproj targeting .NET Framework, regardless of output type. If the output type is DLL, I want a .config by default even if it's not a test DLL. It's critical information no matter where the DLL is used.\r\n\r\n```xml\r\n    <AutoGenerateBindingRedirects>true</AutoGenerateBindingRedirects>\r\n    <GenerateBindingRedirectsOutputType>true</GenerateBindingRedirectsOutputType>\r\n```\r\n\r\nRight now (VS 15.4) I have to add both to every project.",
        "createdAt": "2017-10-17T20:02:41Z",
        "updatedAt": "2017-10-17T20:02:41Z",
        "author": {
          "login": "jnm2"
        }
      },
      {
        "body": "@jnm2 You could add them to a single Directory.Build.props file that will be picked up by every project underneath its directory.",
        "createdAt": "2017-10-17T20:27:44Z",
        "updatedAt": "2017-10-17T20:27:44Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "@nguerrera I hadn't thought of that, that's a nice workaround. But at the end of the day, I don't want to have to do either (or tell other people to do either in order to use my NUGet packages).",
        "createdAt": "2017-10-17T20:40:06Z",
        "updatedAt": "2017-10-17T20:40:19Z",
        "author": {
          "login": "jnm2"
        }
      },
      {
        "body": "@AndyGerlicher can we get this fixed in 15.6? There is a lot of customer pain around getting non-exe test projects to generate binding redirects. I think the conditions on $(GenerateBindingRedirectsOutputType) should be removed. If AutoGenerateBindingRedirects is true, then generate irrespective of output type. cc @Petermarcu ",
        "createdAt": "2017-11-21T08:58:13Z",
        "updatedAt": "2017-11-21T08:58:13Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "Agree this is critical for getting test libraries to work correctly in a Net Standard world. ",
        "createdAt": "2017-11-21T17:32:52Z",
        "updatedAt": "2017-11-21T17:32:52Z",
        "author": {
          "login": "jaredpar"
        }
      },
      {
        "body": "AFAIK, none of the test frameworks support `netstandard`, and for good reason: it's not a platform, it's an API set. A `netstandard` library is not intended to be \"runnable\".",
        "createdAt": "2017-11-21T18:08:27Z",
        "updatedAt": "2017-11-21T18:08:27Z",
        "author": {
          "login": "bradwilson"
        }
      },
      {
        "body": "I wouldn't mind being able to build a netcoreapp1.0 test DLL and execute it against .NET Core 1.0, 1.1, 2.0, etc. Likewise, I wouldn't mind being about to build a netstandard1.3 test DLL and execute it against those as well as .NET Framework, Xamarin, etc.",
        "createdAt": "2017-11-21T18:16:15Z",
        "updatedAt": "2017-11-21T18:16:23Z",
        "author": {
          "login": "jnm2"
        }
      },
      {
        "body": "> I wouldn't mind being about to build a netstandard1.3 test DLL and execute it against those as well as .NET Framework, Xamarin, etc.\r\n\r\nThat's currently very very hard to achieve - test hosts rely on the build system to produce the necessary assets for each platform. From generation of deps.json/runtimeconfig.json for .net core to netstandard shim injection for .net framework.\r\n\r\nSuch a \"portable test\" project would need runners that create projects behind the scenes referencing the test project / dlls.\r\n\r\nThis issue reflects the need to run build logic meant for \"executable projects\" for tests.",
        "createdAt": "2017-11-21T18:30:43Z",
        "updatedAt": "2017-11-21T18:30:43Z",
        "author": {
          "login": "dasMulli"
        }
      },
      {
        "body": "It is indeed possible to do this. The .NET SDK just doesn't support it currently. The Compile task can be executed once on the netstandardXX project and the results can then be deployed multiple times with corresponding  runtime configuration files to mutliple deployment directories, one per target platform. I could easily imagine the project having settings like\r\n\r\n```xml\r\n<TargetFramework>netstandard1.3</TargetFramework>\r\n<DeploymentFrameworks>net46;netcoreapp2.0<DeploymentFrameworks>\r\n```\r\n\r\nThen the unit test runners would run for each deployment framework.",
        "createdAt": "2017-11-21T19:13:44Z",
        "updatedAt": "2017-11-21T19:13:44Z",
        "author": {
          "login": "tmat"
        }
      },
      {
        "body": "> I wouldn't mind being able to build a netcoreapp1.0 test DLL and execute it against .NET Core 1.0, 1.1, 2.0, etc.\r\n\r\nThis is fine.\r\n\r\n> Likewise, I wouldn't mind being about to build a netstandard1.3 test DLL and execute it against those as well as .NET Framework, Xamarin, etc.\r\n\r\nThis is not. You should use multi-targeting instead.",
        "createdAt": "2017-11-21T19:38:08Z",
        "updatedAt": "2017-11-21T19:38:08Z",
        "author": {
          "login": "bradwilson"
        }
      },
      {
        "body": "> This is not. You should use multi-targeting instead.\r\n\r\nI disagree. Why not? Just because it's hard for tooling authors?",
        "createdAt": "2017-11-21T19:40:23Z",
        "updatedAt": "2017-11-21T19:41:19Z",
        "author": {
          "login": "jnm2"
        }
      },
      {
        "body": "> Then the unit test runners would run for each deployment framework.\r\n\r\nA full build is required. Just multi-target and be done with it. These suggested workarounds are, frankly, nonsense in the world where we have `<TargetFrameworks>`. `dotnet xunit` already supports multi-targeting against both `net452`+ and `netcoreapp1.0`+ (example: https://github.com/xunit/xunit.integration/blob/master/dotnet-xunit/v2x_MultiTarget_DotNetSdk.csproj). This is what all multi-platform test runners should support.",
        "createdAt": "2017-11-21T19:40:32Z",
        "updatedAt": "2017-11-21T19:40:32Z",
        "author": {
          "login": "bradwilson"
        }
      },
      {
        "body": "> I disagree. Why not?\r\n\r\nBecause, as stated above, `netstandard` is an API set, not a platform. Unit tests require a platform to run on, and without knowing the platform it will be run on, the build system as it stands today (and presumably for a short- to medium-term future) requires that knowledge to properly build for the platform.\r\n\r\nWhether you agree with the decision the team made is irrelevant (today), as that's the world we live in. You want this to work today? Multi-target.",
        "createdAt": "2017-11-21T19:42:01Z",
        "updatedAt": "2017-11-21T19:42:01Z",
        "author": {
          "login": "bradwilson"
        }
      },
      {
        "body": "> Whether you agree with the decision the team made is irrelevant (today), as that's the world we live in. You want this to work today? Multi-target.\r\n\r\nOh, I'm being totally realistic. I know multi-targeting is the only way to go right now. But you told me it's not fine to _want_ to be able to run a .NET Standard binary against a selection of platforms and versions and I disagree. I don't think it's wrong to want to be able to execute a single DLL against more than one platform and version, whether the API set targeted is netcoreapp*.* or netstandard*.* or net*. Yes, some map to platforms and one doesn't, but at the end of the day they are all just API specs.\r\n\r\nAs an example, though I wouldn't likely find this useful in the real world, a net46 test dll could be executed against .NET Framework and .NET Core 2.0.",
        "createdAt": "2017-11-21T19:45:17Z",
        "updatedAt": "2017-11-21T19:47:16Z",
        "author": {
          "login": "jnm2"
        }
      },
      {
        "body": "Multi-targeting the tests is the opposite of what I want. My tests can be written against Net Standard which means it can run on any runtime. Multi-targeting is a way to limit my tests to a very specific set of platforms. That's the opposite of portable code. \r\n\r\nIt means every time a new platform comes out i have to modify my tests to support it. Even though I've done nothing to the code other than say \"hey this new platform exists\". \r\n\r\nI've spoken with the CLI and testing teams a couple of times about this. The preferred setup here is:\r\n\r\n1. Allow test libraries to target net standard\r\n1. Allow publishing to target libraries and exe projects\r\n1. Extend publishing to allow for targets not explicitly listed in the project file\r\n\r\nBoth 2 and 3 should be done anyways. They are general improvements to the ecosystem. Taken together though it makes authoring Net Standard test libraries a reality. \r\n",
        "createdAt": "2017-11-21T19:48:28Z",
        "updatedAt": "2017-11-21T19:54:00Z",
        "author": {
          "login": "jaredpar"
        }
      },
      {
        "body": "And it'll come as no surprise then that I want the same capabilities for netstandard console apps. In fact, not being able to do this is causing us at NUnit to have to create a matrix of separate csproj files, a cross product between unique DLLs targeting different frameworks and the list of platforms each unique DLL can be executed on. The new SDK doesn't really provide a way to relieve the complexity yet, but I _think_ @tmat's proposed `<DeploymentFrameworks>` is exactly the type of thing I've been looking for.",
        "createdAt": "2017-11-21T19:53:33Z",
        "updatedAt": "2017-11-21T19:54:01Z",
        "author": {
          "login": "jnm2"
        }
      },
      {
        "body": "Any news on this issue?",
        "createdAt": "2018-02-05T03:23:55Z",
        "updatedAt": "2018-02-05T03:23:55Z",
        "author": {
          "login": "JoseFMP"
        }
      },
      {
        "body": "Ugly workaround, but much nicer than creating a bunch of separate .csprojs: https://github.com/dotnet/sdk/issues/1561\r\n\r\n@jaredpar \r\n\r\n> 1. Allow test libraries to target net standard\r\n> 2. Allow publishing to target libraries and exe projects\r\n> 3. Extend publishing to allow for targets not explicitly listed in the project file\r\n\r\nI would like to be able to follow these in an issue other than this one which isn't strictly related.",
        "createdAt": "2018-02-12T19:36:45Z",
        "updatedAt": "2018-02-12T19:36:45Z",
        "author": {
          "login": "jnm2"
        }
      },
      {
        "body": "I was struggling to run NUnit tests on TeamCity while worked fine locally. Adding `<GenerateBindingRedirectsOutputType>true</GenerateBindingRedirectsOutputType>` seemed to resolve my issue and I finally got the needed redirects to appear on `Project.Tests.dll.config` on TeamCity as well. (Thank you @bradphelan & others <3)\r\n\r\nI'm still a bit confused why it worked locally already only with `<AutoGenerateBindingRedirects>true</AutoGenerateBindingRedirects>`? Has this been addressed with some version of MSBuild already?",
        "createdAt": "2018-03-29T09:57:42Z",
        "updatedAt": "2018-03-29T09:57:42Z",
        "author": {
          "login": "Gonnagle"
        }
      },
      {
        "body": "Note that web projects with web.config are incompatible with GenerateBindingRedirects because the edits have to be made to web.config in source. For these projects, you are instead supposed to double click on warnings in the error list to get web.config edited. It looks to me as though if we were to remove all consideration of GenerateBindingRedirectsOutputType, then we would regress the web.config case.",
        "createdAt": "2018-06-06T20:46:06Z",
        "updatedAt": "2018-06-06T20:46:06Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "As I posted on https://github.com/dotnet/standard/issues/613#issuecomment-354393350, this will look like this:\r\n![webapinetstd](https://user-images.githubusercontent.com/6129250/34428900-b10caae8-ec51-11e7-8af7-157621137f5d.gif)",
        "createdAt": "2018-06-07T00:04:34Z",
        "updatedAt": "2018-06-07T00:04:34Z",
        "author": {
          "login": "dasMulli"
        }
      },
      {
        "body": "For me the solution was to add \r\n\r\n    <PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"15.8.0\" />\r\n\r\nto a unit test project",
        "createdAt": "2018-09-06T14:22:00Z",
        "updatedAt": "2018-09-06T14:22:00Z",
        "author": {
          "login": "dsyme"
        }
      },
      {
        "body": "@dsyme I'm pretty sure that package sets the OutputType to Exe",
        "createdAt": "2018-09-06T18:34:01Z",
        "updatedAt": "2018-09-06T18:34:01Z",
        "author": {
          "login": "dsplaisted"
        }
      },
      {
        "body": "@dsplaisted Only for `netcoreapp`.",
        "createdAt": "2018-09-06T22:45:48Z",
        "updatedAt": "2018-09-06T22:45:48Z",
        "author": {
          "login": "bradwilson"
        }
      },
      {
        "body": "In my case, the problem was caused by conflict of _GenerateBindingRedirects_ and _TransformXml_\r\n (XDT transformation) msbuild targets. By default _TransformXml_ overrides output of _GenerateBindingRedirects_.\r\n```xml\r\n<TransformXml Source=\"$(IntermediateOutputPath)$(TargetFileName).config\" Destination=\"$(IntermediateOutputPath)$(TargetFileName).config\" Transform=\"App.$(Configuration).config\" />\r\n```\r\nThis solved my problem.",
        "createdAt": "2018-10-15T14:35:58Z",
        "updatedAt": "2018-10-18T10:59:26Z",
        "author": {
          "login": "Vorval0"
        }
      },
      {
        "body": "I've having a similar issue, not sure if it's the same one. Can you guys confirm if this matches your situation?\r\n\r\nWhen I build the project, binding redirects *are* applied to the output config file. But, all the warnings still occur. It's as if the binding redirects are being added at the wrong stage of compilation.",
        "createdAt": "2018-12-11T17:47:13Z",
        "updatedAt": "2018-12-11T17:47:13Z",
        "author": {
          "login": "scalablecory"
        }
      },
      {
        "body": "Hit this error again in 2019. Did thing that some combinations of package are incompatible due too rigid binding, but at some point (one hour of clicking, nuget package resolve + every change + check) I realized as I reverted to the old state. \r\n\r\nI have a mix of old cproj + package.config (working) and two test with new cproj + Json (not working).\r\n\r\nJeah *dance* Green Day - Bang Bang (just hearing music and share that with you)",
        "createdAt": "2019-01-07T16:19:41Z",
        "updatedAt": "2019-01-07T16:20:04Z",
        "author": {
          "login": "JackGrinningCat"
        }
      },
      {
        "body": "I ran into a similar issue.\r\nVisual Studio 2017, Version 15.9.8\r\n\r\n**Steps to reproduce**\r\n\r\n- Create a new class library project (.NET Framework 4.6)\r\n- Go to Project properties and check  **Auto-generate binding redirects**\r\n- Add nuget package \"Install-Package Google.Cloud.Language.V1 -Version 1.2.0\"\r\n- Build the project\r\n- Examine output folder, the ?.dll.config file does not have any binding redirects\r\n\r\n**Steps taken to rectify**\r\nEdit the CSPROJ file after unloading the project and ensure the following entries are present\r\n```\r\n<PropertyGroup>\r\n  <AutoGenerateBindingRedirects>true</AutoGenerateBindingRedirects>\r\n  <GenerateBindingRedirectsOutputType>true</GenerateBindingRedirectsOutputType>\r\n</PropertyGroup>\r\n\r\n```\r\nNote - **AutoGenerateBindingRedirects** was already present in the CSPROJ. The setting **GenerateBindingRedirectsOutputType** was missing.\r\n\r\nReload the CSPROJ , Clean and Build. You should see the binding redirect entries in the ??.dll.config file\r\n```\r\n    <assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\">\r\n      <dependentAssembly>\r\n        <assemblyIdentity name=\"Google.Apis.Auth.PlatformServices\" publicKeyToken=\"4b01fa6e34db77ab\" culture=\"neutral\" />\r\n        <bindingRedirect oldVersion=\"0.0.0.0-1.35.1.0\" newVersion=\"1.35.1.0\" />\r\n      </dependentAssembly>\r\n    </assemblyBinding>\r\n\r\n```\r\n\r\nHope this helps. My sincere gratitude to all those who have contributed on this issue. On a little somber note, while I admire Microsoft's strategy towards .NET Core. However, .NET Framework is a very capable framework in its own right and problems such as these eat away into productive time. We are a small company working on meager amounts of borrowed capital and I wish we could have saved all this time.\r\n",
        "createdAt": "2019-04-07T16:22:56Z",
        "updatedAt": "2019-04-07T16:33:02Z",
        "author": {
          "login": "sdg002"
        }
      },
      {
        "body": "I sure wish I had found this last month. I must have spent 60 hours working around it. How is this still a thing four years later? Must be trickier to fix than it seems.",
        "createdAt": "2020-05-28T17:56:01Z",
        "updatedAt": "2020-05-28T17:56:01Z",
        "author": {
          "login": "Curdie"
        }
      },
      {
        "body": "Hi , i am using .net framework sdk style test project which has 3 project references 2- .net standards , 1- .net framework which is also converted to sdk style . I have added  these in the unit test project but still the compiler throws the below warnings \r\n\r\n1. Warning\tMSB3277\tFound conflicts between different versions of \"Microsoft.CodeAnalysis\" that could not be resolved.\r\n\r\n2. Warning\tNU1702\tProjectReference '.csproj' was resolved using '.NETFramework,Version=v4.8' instead of the project target framework '.NETStandard,Version=v2.0'. This project may not be fully compatible with your project.\tObjectModel[.net standard 2.0 project]\tC:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Preview\\MSBuild\\Current\\Bin\\Microsoft.Common.CurrentVersion.targets\t1717\t\r\n\r\n3. Warning\tMSB3836\tThe explicit binding redirect on \"Newtonsoft.Json, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed\" conflicts with an autogenerated binding redirect. Consider removing it from the application configuration file or disabling autogenerated binding redirects. The build will replace it with: \"<bindingRedirect oldVersion=\"0.0.0.0-13.0.0.0\" newVersion=\"13.0.0.0\" xmlns=\"urn:schemas-microsoft-com:asm.v1\" />\".\t.UnitTests\tC:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Preview\\MSBuild\\Current\\Bin\\Microsoft.Common.CurrentVersion.targets\t2321\r\n\r\n\r\n\r\n**Unit testproject**\r\n![image](https://user-images.githubusercontent.com/42301172/116803512-e9428800-ab35-11eb-829d-60ff86456789.png)\r\n\r\nreference projects\r\n![image](https://user-images.githubusercontent.com/42301172/116803600-d7151980-ab36-11eb-976d-cff64ef8f326.png)\r\n\r\n![image](https://user-images.githubusercontent.com/42301172/116803604-e72cf900-ab36-11eb-90c5-36a2d1db9c7f.png)\r\n\r\n![image](https://user-images.githubusercontent.com/42301172/116803714-c5804180-ab37-11eb-8265-adfdfe28661a.png)\r\n\r\n\r\n\r\n",
        "createdAt": "2021-05-02T05:40:21Z",
        "updatedAt": "2021-05-02T05:46:02Z",
        "author": {
          "login": "MS-Manikandan"
        }
      },
      {
        "body": "Thanks tmat, it  helped me to get things going again after a lot frustration. For me it helped to get rid of version errors about packages. \r\n\r\nI was working on a WCF-service on .net 4.8. What I did was remove packages and redirects from web.config, to start with a clean slate. Thinking I could regenerate necessary redirects when re-adding packages. That did not happen.\r\n\r\nNow the target method gave me the redirects in a dll.config. I think they did not have effect there, but by copying them to web.config they did. Now I had a working situation, even without having to re-add packages, with some recreated redirects (apparently dependencies), but with different version numbers. Apparently there had been a lot to sort out.\r\n\r\nThis may also have been working in an API service, but then directly through the dll.config. I am not sure, but I suddenly lost warnings about redirects while building.",
        "createdAt": "2021-09-23T20:03:32Z",
        "updatedAt": "2021-09-23T20:03:32Z",
        "author": {
          "login": "a-einstein"
        }
      },
      {
        "body": "> This should work:\r\n> \r\n> ```\r\n>   <Target Name=\"ForceGenerationOfBindingRedirects\"\r\n>           AfterTargets=\"ResolveAssemblyReferences\"\r\n>           BeforeTargets=\"GenerateBindingRedirects\"\r\n>           Condition=\"'$(AutoGenerateBindingRedirects)' == 'true'\">\r\n>     <PropertyGroup>\r\n>       <!-- Needs to be set in a target because it has to be set after the initial evaluation in the common targets -->\r\n>       <GenerateBindingRedirectsOutputType>true</GenerateBindingRedirectsOutputType>\r\n>     </PropertyGroup>\r\n>   </Target>\r\n> ```\r\n\r\nbut what to do if it doesn't help?\r\nASP application on .Net 5.0\r\nIts really append redirects to `.dll.config` but I still see `System.TypeInitializationException: The type initializer for 'Google.Apis.Json.NewtonsoftJsonSerializer' threw an exception.\r\n System.IO.FileLoadException: Could not load file or assembly 'Newtonsoft.Json, Version=12.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed'. The located assembly's manifest definition does not match the assembly reference. (0x80131040)'`",
        "createdAt": "2021-10-19T12:08:25Z",
        "updatedAt": "2021-10-19T12:24:14Z",
        "author": {
          "login": "EgoPingvina"
        }
      },
      {
        "body": "@EgoPingvina Binding redirects as a concept do not apply to .NET 5.0 (and didn't apply to .NET Core). .NET 5.0 will load according to [its own rules](https://github.com/dotnet/runtime/blob/v5.0.11/docs/design/features/assembly-conflict-resolution.md). It sounds like in your case the copy of `Newtonsoft.Json.dll` that is available at runtime is not version `12.0.0.0` or higher.",
        "createdAt": "2021-10-19T14:37:29Z",
        "updatedAt": "2021-10-19T14:37:29Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald but I use `Newtonsoft.Json.dll v13.0.1` in project and see the `dll` in after-build folder. You want to say that this parameters doesn't work on `.Net 5.0` at all?",
        "createdAt": "2021-10-19T15:03:11Z",
        "updatedAt": "2021-10-19T15:03:11Z",
        "author": {
          "login": "EgoPingvina"
        }
      },
      {
        "body": "> You want to say that this parameters doesn't work on `.Net 5.0` at all?\r\n\r\nCorrect: `.exe.config` entries for `bindingRedirect` and other related properties are completely ignored on .NET 5.0.\r\n\r\nYou might find the techniques described in [this doc on assembly-load debugging](https://docs.microsoft.com/dotnet/core/dependency-loading/collect-details) helpful for your situation.",
        "createdAt": "2021-10-19T15:11:53Z",
        "updatedAt": "2021-10-19T15:11:53Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": ">completely ignored on .NET 5.0.\r\n\r\nsounds sad. and is it real to fix this problem on .Net 5?",
        "createdAt": "2021-10-20T06:34:58Z",
        "updatedAt": "2021-10-20T06:35:17Z",
        "author": {
          "login": "EgoPingvina"
        }
      },
      {
        "body": "> sounds sad\r\n\r\nIt's actually not.  Most of the time you never need to think about assembly binding rules on .NETCore.  The runtime will typically allow a newer version to win.  The exceptions are if you're trying to *downgrade* a dependency or implement a plugin host.   There's a of assumptions being tacked onto an existing issue here.  Perhaps you can open a new issue with a simple repro?  Might be a better way for folks to have a look at what you are facing and make a suggestion to fix it (or identify a unique bug if that's the case).",
        "createdAt": "2021-10-20T17:32:24Z",
        "updatedAt": "2021-10-20T17:32:24Z",
        "author": {
          "login": "ericstj"
        }
      }
    ]
  }
}