{
  "number": 7134,
  "title": "Package not found after switching to PackageReference",
  "body": "<!-- NOTE: The MSBuild team receives a lot of issues and we need to prioritize them accordingly. Please understand that we may not get to your issue for some time. -->\r\n<!-- This is a template that helps us provide quicker feedback. Please use any relevant sections and delete anything you don't need. -->\r\n\r\n<!--\r\n* Here are some useful links to help you figure out what's wrong.\r\n* Our wiki: https://github.com/microsoft/msbuild/blob/master/documentation/wiki/Home.md\r\n* General Help: https://github.com/microsoft/msbuild/blob/master/documentation/wiki/Something's-wrong-in-my-build.md\r\n* Tips & Tricks: https://github.com/microsoft/msbuild/blob/master/documentation/wiki/MSBuild-Tips-%26-Tricks.md\r\n-->\r\n\r\n### Issue Description\r\n\r\nWe have a solution with around 10 projects. One Web API, several libraries used by it, and test projects for all those.\r\n\r\nAfter upgrading from net461 to net472, there were several complications with packages, so we switched from Reference to PackageReference.  \r\nUnfortunately, this seems to interfere with msbuild somehow:\r\n\r\nOne of the libraries, let's call it \"OtherTeamAdapter\", uses an internal package provided by a different team, let's call it \"InternalLibY\", version 2.67.something.\r\n\r\nRestore seems to have to problems finding the package, as it is not in the nuget package cache waiting to be used.  \r\nVisual Studio and msbuild however keep on telling us the package does in fact not exist. \r\n\r\nBasically I changed this\r\n\r\n    <Reference Include=\"InternalLibY, Version=2.67, Culture=neutral, processorArchitecture=MSIL\">\r\n      <HintPath>..\\..\\packages\\InternalLibY.2.67\\lib\\net40\\datenanlage_lib.dll</HintPath>\r\n    </Reference>\r\n\r\nto this\r\n\r\n\r\n    <PackageReference Include=\"InternalLibY\">\r\n      <Version>2.67</Version>\r\n    </PackageReference>\r\n\r\nBefore this there seemed to be a problem with the nuget restore, so I opened an issue with nuget first: https://github.com/NuGet/Home/issues/11417\r\n\r\nThere is a description of the msbuild binlog output there, and a paste of the verbose build log with changed internal names.\r\n\r\nThe package does not appear in the project's \"references\"-list at all.\r\n\r\n### Steps to Reproduce\r\n\r\nUnfortunately I have no idea what's wrong or how to reproduce it outside this very specific case.\r\n\r\n### Expected Behavior\r\n\r\nThe package should be recognised by Visual Studio and msbuild.\r\n\r\n### Actual Behavior\r\n\r\nVisual Studio says \"The name InternalLibY does not exist in the current context\" where we try to use that namespace. The build fails because the lack of that package.\r\n\r\n### Technical information\r\n\r\nVisual Studio version: 16.11.7  \r\nMsBuild: `Microsoft (R) Build Engine version 16.11.2+f32259642 for .NET Framework`\r\n",
  "state": "CLOSED",
  "createdAt": "2021-12-08T09:52:39Z",
  "updatedAt": "2021-12-16T15:03:04Z",
  "closedAt": "2021-12-16T15:03:03Z",
  "author": {
    "login": "Regenhardt"
  },
  "labels": [
    "needs-triage"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "@Regenhardt can you help me understand why you think this might be an MSBuild issue? It sounds like a NuGet configuration problem to me at first glance.",
        "createdAt": "2021-12-08T14:47:19Z",
        "updatedAt": "2021-12-08T14:47:19Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Well by now the biggest reason is probably that the nuget team sent me here :)\r\n\r\nBut also because in the binlog from building the OtherTeamAdapter with -bl option the restore task seems to have no problems  finding the package, but then in what I think is part of the build process under `Target ResolveAssemblyReferences > Task ResolveAssemblyReferences` it says \"Could not resolve this reference\". \r\n\r\nTo quote myself from the other issue:  \r\n\r\n> Below that are several searchpaths that were considered, but none of these points to the actual package directory. There are however several searchpaths pointing to other referenced libraries that themselves reference InternalLibY. Which might make sense if the dependency was only transitive, but it's a direct reference and should therefore have been restored and resolved normally.\r\n> \r\n> So it seems to restore InternalLibY but then can't find it when trying to build.",
        "createdAt": "2021-12-09T08:44:40Z",
        "updatedAt": "2021-12-09T08:44:40Z",
        "author": {
          "login": "Regenhardt"
        }
      },
      {
        "body": "In the other ticket, you said the ResolveAssemblyReference task was looking in the wrong places. What happens if you add the path to your assembly to the property $(AssemblySearchPaths)? Note that it has a default set [here](https://github.com/dotnet/msbuild/blob/a70ee3087277b8d5c908d911ffca0e5deb19ecd5/src/Tasks/Microsoft.Common.CurrentVersion.targets#L612-L638), so you'd also have to include those if you want them.",
        "createdAt": "2021-12-09T17:17:56Z",
        "updatedAt": "2021-12-09T17:17:56Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "Can I somehow tell it to take the config from NuGet? NuGet puts all packages to %USERPROFILE%\\.nuget\\packages, but I'm not entirely sure I can add it and it would work in the pipeline too. I will however try to find out where NuGet puts the packages on the build server.",
        "createdAt": "2021-12-10T16:51:06Z",
        "updatedAt": "2021-12-10T16:51:06Z",
        "author": {
          "login": "Regenhardt"
        }
      },
      {
        "body": "I'm not sure if this is the recommended way to do things, but another option is to set the \"HintPath\" metadatum for each item passed into RAR to the NuGet path. You can get that quickly by setting GeneratePathProperty=true, in which case HintPath would be something like $(PkgMy_Assembly)\\net472\\lib\\My.Assembly.dll (might have that slightly wrong).",
        "createdAt": "2021-12-15T01:58:15Z",
        "updatedAt": "2021-12-15T01:58:15Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "> I'm not sure if this is the recommended way to do things, but another option is to set the \"HintPath\" metadatum for each item passed into RAR to the NuGet path.\r\n\r\nThis is definitely not the recommended way to do things; PackageReference was introduced in large part to avoid having to do this.\r\n\r\n> Well by now the biggest reason is probably that the nuget team sent me here\r\n\r\nI think there is some missing information but that this would be best pursued there. I'm following that issue and will chime in on MSBuild-y stuff.\r\n",
        "createdAt": "2021-12-16T15:03:03Z",
        "updatedAt": "2021-12-16T15:03:03Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}