{
  "number": 4936,
  "title": "Consider logging BeforeTargets/AfterTargets/DependsOn for each target",
  "body": "I wonder what's the best way to get the target graph information. Should this get logged during evaluation? We do log the ParentTarget here:\r\nhttps://github.com/microsoft/msbuild/blob/8eda0fac789ac3314a14bf002bd9b6e8ab382aca/src/Framework/TargetStartedEventArgs.cs#L165\r\n\r\nBut would be nice to get high fidelity information",
  "state": "OPEN",
  "createdAt": "2019-11-20T16:48:17Z",
  "updatedAt": "2025-05-11T23:56:43Z",
  "closedAt": null,
  "author": {
    "login": "KirillOsenkov"
  },
  "milestone": {
    "title": "Backlog"
  },
  "assignees": {
    "nodes": [
      {
        "login": "KirillOsenkov"
      }
    ]
  },
  "labels": [
    "Area: Debuggability",
    "needs-design",
    "Area: Engine",
    "Area: Logging",
    "triaged"
  ],
  "comments": {
    "nodes": [
      {
        "body": "This gets complicated, because the reasonable mental model for how target dependencies work (a directed acyclic graph of targets with edges determined by `DependsOnTargets`, `BeforeTargets`, and `AfterTargets`) is _not_ how the actual dependencies are implemented, in user-observable (and user-manipulable) ways.\r\n\r\nThe real implementation is that targets are pushed and popped off a stack as their dependencies are considered. This results in the documented [ordering rules for MSBuild targets](https://docs.microsoft.com/en-us/visualstudio/msbuild/target-build-order?view=vs-2019#determine-the-target-build-order).\r\n\r\nThe consequence of the stack-based implementation is that the logged data is completely accurate: _exactly one_ target caused the target in question to be built, for exactly one reason.\r\n\r\nThat's not the full picture; when trying to understand builds it's completely reasonable to want to know \"ok, but if that hadn't been there, what would have happened?\". For instance, \"is there another target that this target would have run after/before\", or \"what targets depend on this target?\"\r\n\r\nUnfortunately, the stack manipulations are dynamic, so simply logging the value of `DependsOn` and friends at the end of evalution isn't sufficient; another target run a the right time can change a property and affect dependencies.\r\n\r\nIt might be possible to add a log event at the relevant target-stack transition points, like\r\nhttps://github.com/microsoft/msbuild/blob/9c33693c492a0cb99474dcb703bfd0947056d8a9/src/Build/BackEnd/Components/RequestBuilder/TargetBuilder.cs#L414-L416\r\n\r\nand other calls to `PushTargets`.\r\n\r\nI think it'd have to be an entirely new log event, though, and possibly one per dependency type.",
        "createdAt": "2019-11-20T17:13:26Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "We might also be able to store the true expanded values of those attributes at the place I mentioned, then pass them along to the place that the current target-started event gets fired and add them to new fields there.",
        "createdAt": "2019-11-21T15:19:06Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "It would be nice to just have the expanded actual values for these attributes, just to see what they evaluated to.\r\n\r\nI could add hyperlinks from a target to any of its DependsOnTargets, BeforeTargets or AfterTargets targets:\r\n\r\n![image](https://user-images.githubusercontent.com/679326/71704191-a4fe7680-2d8d-11ea-97f1-cce100da11f4.png)\r\n",
        "createdAt": "2020-01-03T02:28:19Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "Not sure if this feature would address it, but sometimes I see a grayed out target and I don't understand why it wasn't executed. This doc: https://github.com/KirillOsenkov/MSBuildStructuredLog/wiki/Viewer-UI lists multiple possible reasons for a target to not log any messages. It would be really useful to know which of the reasons is it.",
        "createdAt": "2020-04-16T22:34:02Z",
        "author": {
          "login": "tmat"
        }
      },
      {
        "body": "The viewer now parses the preprocessed XML and extracts the target graph information:\nhttps://github.com/KirillOsenkov/MSBuildStructuredLog/issues/641#issuecomment-2870292697",
        "createdAt": "2025-05-11T23:56:42Z",
        "author": {
          "login": "KirillOsenkov"
        }
      }
    ]
  }
}