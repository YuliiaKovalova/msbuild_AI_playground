{
  "number": 9553,
  "title": "[Built-in analyzer] Flag shared evaluations between restore and build targets",
  "body": "See https://github.com/dotnet/runtime/blob/6d0a902c9585d98bfa44f514bac21a47eabe02fa/eng/testing/workloads-testing.targets#L195-L200 as an example.\r\n\r\nBecause the Restore and Pack target pass the same set of properties in, the underlying project evaluation evaluation is shared. This resulted in msbuild files restored via a `PackageReference` not being imported during the build.\r\n\r\nI have been fixing so many of these code pieces in my career at Microsoft and it would really be helpful if msbuild could somehow indicate that a shared evaluation between `Restore` and `Build` or `Pack` is most certainly wrong. Sure, there are cases where a shared evaluation might be intentional, but that should < 1%.\r\n\r\nRelated: https://github.com/dotnet/msbuild/issues/2811\r\n\r\ncc @akoeplinger @ericstj",
  "state": "OPEN",
  "createdAt": "2023-12-15T13:12:47Z",
  "updatedAt": "2024-12-10T12:16:02Z",
  "closedAt": null,
  "author": {
    "login": "ViktorHofer"
  },
  "labels": [
    "backlog",
    "Feature: Warning Waves",
    "BuildCheck Suggestion",
    "triaged",
    "Area: BuildCheck"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "The error should be clear that just having different evaluations _is not enough_, they have to be in separate executions.",
        "createdAt": "2023-12-15T15:16:11Z",
        "updatedAt": "2023-12-15T15:16:11Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> different evaluations *is not enough*, they have to be in separate executions.\r\n\r\n@rainersigwald  I'm a bit unclear on what that means.  Does that mean that this is not a valid workaround?\r\n\r\n```xml\r\n\r\n<Target Name=\"RestoreBuildAndPublishSubproject\">\r\n        <MSBuild Projects=\"SomeSubproject.csproj\"\r\n                 Properties=\"Configuration=$(NativeLibsPublishConfiguration);RuntimeIdentifier=$(OutputRID);NativeLib=$(NativeLibKind);_RandomPropertyToPleaseMSBuild=Restoring\"\r\n                 Targets=\"Restore\" />\r\n\r\n        <MSBuild Projects=\"SomeSubproject.csproj\"\r\n                 Properties=\"Configuration=$(NativeLibsPublishConfiguration);RuntimeIdentifier=$(OutputRID);NativeLib=$(NativeLibKind);_RandomOtherPropertyToPleaseMSBuild=BuildingAndPublishing\"\r\n                 Targets=\"Build;Publish\" />\r\n</Target>",
        "createdAt": "2024-02-16T20:41:32Z",
        "updatedAt": "2024-02-16T20:41:32Z",
        "author": {
          "login": "lambdageek"
        }
      },
      {
        "body": "@lambdageek correct. The failure mode is:\r\n\r\n\r\n1. The project has references that include MSBuild logic (`build/PackageName.props`).\r\n2. Restore.\r\n3. Change something such that the packages that include the MSBuild logic are changed (bump the patch version of a reference, say).\r\n4. Execute the `Restore;Build` _or_ something like the workaround you posted.\r\n\r\nInside 4, the timeline goes like\r\n\r\n1. Evaluate projects, _including_ the `.nuget.g.props` file that was created in 3.\r\n2. Do restore stuff, download the packages, whatever.\r\n3. As part of that restore, update `.nuget.g.props` on disk to point to the new package version.\r\n4. Enter the Build part.\r\n   a. If it was via `Restore;Build` this reuses the evaluation from 1, so still uses the old package version.\r\n   b. If there's a new global property, the MSBuild engine reevaluates the project, but because it's part of the same build session it has an internal cache of _the XML of all imports_, when it reprocesses `.nuget.g.props` it's _still_ the old version.\r\n\r\nWe considered allowing invalidating the XML cache in that scenario but it turns out to be load-bearing for some cases including Live Unit Testing and some builds that try to bump their own version mid-build.\r\n\r\nThings work _most_ of the time because it's not super common to bump the versions of packages that have build logic . . . but that's not 100%.",
        "createdAt": "2024-02-16T21:45:23Z",
        "updatedAt": "2024-02-16T21:45:23Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald just to make sure I understood point 4b correctly, does that also apply if we set MSBuildRestoreSessionId to a guid [like restore does internally](https://github.com/dotnet/msbuild/blob/82c8f933f7a0968836559b6c4e04d399af35e91d/src/MSBuild/XMake.cs#L1843-L1846)? or is that considered two distinct build sessions then?",
        "createdAt": "2024-12-10T12:16:00Z",
        "updatedAt": "2024-12-10T12:16:00Z",
        "author": {
          "login": "akoeplinger"
        }
      }
    ]
  }
}