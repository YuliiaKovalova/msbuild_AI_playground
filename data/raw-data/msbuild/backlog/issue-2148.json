{
  "number": 2148,
  "title": "CollectedBuildOutput from solution does not include output from cross-targeting projects",
  "body": "**Repro:**\r\n```\r\nTest.sln\r\n  SingleTfm.csproj:   <TargetFramework>net451</TargetFramework>\r\n  MultiTfm.csproj:    <TargetFrameworks>net451;netstandard1.3</TargetFrameworks>\r\n```\r\n```xml\r\n<Project>\r\n  <Target Name=\"Build\">\r\n    <MSBuild Projects=\"Test.sln\" Targets=\"Build\">\r\n      <Output TaskParameter=\"TargetOutputs\" ItemName=\"CollectedBuildOutput\" />\r\n    </MSBuild>\r\n    <Message Text=\"@(CollectedBuildOutput, '%0A')\" />\r\n  </Target>\r\n</Project>\r\n```\r\n\r\n**Expected output**\r\n```\r\n C:\\proj\\SingleTfm\\bin\\Debug\\net451\\SingleTfm.dll\r\n C:\\proj\\MultiTfm\\bin\\Debug\\net451\\MultiTfm.dll\r\n C:\\proj\\MultiTfm\\bin\\Debug\\netstandard1.3\\MultiTfm.dll\r\n```\r\n\r\n**Actual**\r\n```\r\n C:\\proj\\SingleTfm\\bin\\Debug\\net451\\SingleTfm.dll\r\n```\r\n\r\n**Details**\r\nMicrosoft (R) Build Engine version 15.3.246.41955 for .NET Core \r\nand \r\nMicrosoft (R) Build Engine version 15.3.246.41955 for .NET Framework",
  "state": "CLOSED",
  "createdAt": "2017-05-30T22:29:02Z",
  "updatedAt": "2024-02-21T17:18:50Z",
  "closedAt": "2018-08-17T05:07:55Z",
  "author": {
    "login": "natemcmaster"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Team Triage:\r\nThis doesn't seem like something we could easily change. The `Build` target has a single value return currently and there are potentially many assumptions made around this. Since this output is generated via the solution metaproj generation, the only way we could change this would be to change the contract of Build to return multiple values.\r\n\r\nWhat is the use case for this? Is there another way to do this?",
        "createdAt": "2017-05-30T22:47:29Z",
        "updatedAt": "2017-05-30T22:47:29Z",
        "author": {
          "login": "AndyGerlicher"
        }
      },
      {
        "body": "Actually, the build target has zero returned output for cross-targeting projects. Should it have returned at least one item?\r\n\r\n> What is the use case for this? \r\n\r\nI would like to compile a particular solution configuration _and_ get a list of all assemblies produced for that solution configuration.\r\n\r\n>  Is there another way to do this?\r\n\r\nSure. Set CustomAfterMicrosoftCommonCrossTargetingTargets to a file that contains this:\r\n\r\n```xml\r\n<Project>\r\n  <Target Name=\"Build\" \r\n    DependsOnTargets=\"_SetBuildInnerTarget;DispatchToInnerBuilds\" \r\n    Returns=\"@(InnerOutput)\" />\r\n</Project>\r\n```\r\n\r\nThough it seems like it should be a last-resort.",
        "createdAt": "2017-05-30T23:02:40Z",
        "updatedAt": "2017-05-30T23:02:40Z",
        "author": {
          "login": "natemcmaster"
        }
      },
      {
        "body": "Having encountered this same issue, the triage response seems odd. In the file `Microsoft.Common.CrossTargeting.targets` the `Build` target is documented as:\r\n\r\n````\r\n <!--\r\n  ============================================================\r\n                                       Build\r\n\r\n   Cross-targeting version of Build.\r\n\r\n   [IN]\r\n   $(TargetFrameworks) - Semicolon delimited list of target frameworks.\r\n\r\n   $(InnerTargets)     - The targets to build for each target framework. Defaults\r\n                         to 'Build' if unset, but allows override to support\r\n                         `msbuild /p:InnerTargets=X;Y;Z` which will build X, Y,\r\n                         and Z targets for each target framework.\r\n\r\n   [OUT]\r\n   @(InnerOutput) - The combined output items of the inner targets across\r\n                    all builds.\r\n  ============================================================\r\n  -->\r\n  <Target Name=\"Build\" DependsOnTargets=\"_SetBuildInnerTarget;DispatchToInnerBuilds\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\" />\r\n  <Target Name=\"_SetBuildInnerTarget\" Returns=\"@(InnerOutput)\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\r\n    <PropertyGroup Condition=\"'$(InnerTargets)' == ''\">\r\n      <InnerTargets>Build</InnerTargets>\r\n    </PropertyGroup>\r\n  </Target>\r\n````\r\n\r\nNote that the output is indicated as @(InnerOutput), but the `Build` target lacks a Returns attribute. Please correct me if I'm wrong, but there are other `Build` targets that return multiple output items. The metaproject generation for solution files is an example.\r\n\r\nIt would appear, based on the documentation comment, that returning the coalesced output items is the  original intent.\r\n\r\nAs an additional point, the cross targeting `Build` target is used to execute custom targets, by specifying the inner targets directly. Not returning the inner output in these cases really seems like a bug.",
        "createdAt": "2017-09-19T06:55:30Z",
        "updatedAt": "2017-09-19T07:00:01Z",
        "author": {
          "login": "williamb1024"
        }
      },
      {
        "body": "I have also encountered this issue and I agree with @williamb1024. (By the way, the `Rebuild` target lacks the `Returns` attribute too.) As for workarounds, another one is to invoke the `MSBuild` task building the inner cross-targeting project(s) with the `DispatchToInnerBuilds` target instead of `Build`. This workaround doesn't use the CustomAfterMicrosoftCommonCrossTargetingTargets hook (what if another package wants to set it?)",
        "createdAt": "2017-11-01T16:50:23Z",
        "updatedAt": "2017-11-01T16:50:23Z",
        "author": {
          "login": "atykhyy"
        }
      },
      {
        "body": "Closing as this is stale and I don't need changes here anymore. See workaround above https://github.com/Microsoft/msbuild/issues/2148#issuecomment-305033099",
        "createdAt": "2018-08-17T05:07:55Z",
        "updatedAt": "2018-08-17T05:07:55Z",
        "author": {
          "login": "natemcmaster"
        }
      },
      {
        "body": "That workaround should, at minimum, be able to be toggled on/off as a feature of msbuild because it simply works.  It makes separate distinct results come per project (one per target) and from that point one could write build scripts around that behavior... even if it violates some past assumptions.\r\n\r\nAs it stands, msbuild is just not providing any values to TargetOutputs for these projects... which violates the hell out of assumptions already.  It doesn't even provide the MSBuildSourceProjectFile which it most certainly has a single value for, and which is guaranteed by the documentation to be provided.\r\n\r\nThis is not just a \"oh well, it's hard to fix because we return only a single value as it stands, so we won't fix it\".  **It's a bug.**  Maybe some other switch/flag is needed to gate access to new functionality so legacy can continue as it is, but this is unintuitive and contrary to documentation/expectation.",
        "createdAt": "2019-12-20T19:27:43Z",
        "updatedAt": "2019-12-20T19:28:57Z",
        "author": {
          "login": "nacitar"
        }
      },
      {
        "body": "Any chance this one might be reopened?\r\nIt is not very consistent that `Build` returns something for 1 TFM but not for multiple TFMs (especially when the target comment/doc says it should do so).\r\nI currently use the workaround described in https://github.com/microsoft/msbuild/issues/2148#issuecomment-305033099 but this will break on  any change.",
        "createdAt": "2020-05-31T23:07:08Z",
        "updatedAt": "2020-05-31T23:08:34Z",
        "author": {
          "login": "xen2"
        }
      },
      {
        "body": "@rainersigwald can we please reopen the issue? We are adding the proposed workaround into dotnet/runtime and linking back to this issue (https://github.com/dotnet/runtime/pull/35606/files/a2c6b29240d46342244e1b2e6e669cca74261e52#r458357395).",
        "createdAt": "2020-07-21T21:06:36Z",
        "updatedAt": "2020-07-21T21:06:36Z",
        "author": {
          "login": "ViktorHofer"
        }
      }
    ]
  }
}