{
  "number": 9749,
  "title": "[Feature Request]: Provide an Item Function to stringify an Item and its Metadata",
  "body": "### Summary\r\n\r\nIt's currently very easy to 'dump' a Property during external end-to-end testing of MSBuild logic by writing key/value pairs to a file. There's not a good way to dump an Item and its metadata similarly, making it very hard to get in-build logs or checkpoints without resorting to finicky, hand-rolled serialization schemes. We should provide a way to dump an Item that parallels the logic used to dump Items to stdout with `-getItem`.\r\n\r\n### Background and Motivation\r\n\r\nI'm trying to write tests for https://github.com/dotnet/sdk/pull/38504 using the SDK's testing framework for testing MSBuild, which relies on injecting targets that log specific properties to an external file, then read them in. It's very hard to do the same for Items.\r\n\r\n### Proposed Feature\r\n\r\nThere should be some function, let's say '[MSBuild]::DumpItem(Item)', that writes an Item in some sort of semi-structured format. Options might include, but are not limited to:\r\n\r\n* JSON Lines - i.e. one line of JSON, each line emitted as a separate Item (for future logging in a WriteLinesToFile Task?)\r\n* some kind of key/value keyed collection, like space-delimited `key=value` pairs?\r\n* ???\r\n\r\n### Alternative Designs\r\n\r\n_No response_",
  "state": "OPEN",
  "createdAt": "2024-02-15T19:13:01Z",
  "updatedAt": "2024-10-10T15:57:27Z",
  "closedAt": null,
  "author": {
    "login": "baronfel"
  },
  "labels": [
    "backlog",
    "needs-design",
    "Feature Request",
    "Priority:2",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "@baronfel thank you for the Feature Request, May I clarify the priority of the item? ",
        "createdAt": "2024-02-20T14:39:05Z",
        "updatedAt": "2024-02-20T14:39:05Z",
        "author": {
          "login": "f-alizada"
        }
      },
      {
        "body": "This is a nice-to-have. It would make debugging and logging easier, but is not blocking any critical functionality. ",
        "createdAt": "2024-02-20T14:40:08Z",
        "updatedAt": "2024-02-20T14:40:08Z",
        "author": {
          "login": "baronfel"
        }
      }
    ]
  }
}