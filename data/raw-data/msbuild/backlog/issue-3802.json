{
  "number": 3802,
  "title": "Directory.Build.props version tags not used correctly when multi-target building from VS2017",
  "body": "When building from Visual Studio 2017 (15.8.5), Directory.Build.props version tags are only used to generate assemblyinfo for first target when multi-targeting frameworks.\r\n\r\nWhen having a project with multiple target frameworks, only the first target output assembly gets the correct version info when built from Visual Studio 2017.\r\nWhen building from the CLI with MSBuild, this works correctly and as expected.\r\n\r\nI'm not sure if this is the right place to post this, if not, I appologize.\r\n\r\n**Update:**\r\nWith further investigation it seems to get a bit more confusing.\r\nAfter changing the Directory.Build.props file it fails like described. Restarting Visual Studio fixes it, until the next change to the props file. So it seems to be a caching issue.\r\nI now also see the same issue on our build server, where we use MSBuild, but there I'm not sure what to restart. I will continue to investigate this as a caching issue.\r\n\r\n\r\n\r\n### Steps to reproduce\r\nCreate a .NET Core Library project and setup multi-targeting, see project file below.\r\nCreate a Directory.Build.props file one level above the project folder, see props file below.\r\nBuild using Visual Studio 2017.\r\n\r\nDirectory.Build.props file\r\n```xml\r\n<Project>\r\n...\r\n<PropertyGroup>\r\n  <Product>MyProduct</Product>\r\n  <Company>MyCompany</Company>\r\n  <Copyright>Copyright \u00a9 2018</Copyright>\r\n  <Description>MyDescription</Description>\r\n\r\n  <AssemblyVersion>8.8.5.0</AssemblyVersion>\r\n  <FileVersion>8.8.50100.0</FileVersion>\r\n  <InformationalVersion>Debug Build</InformationalVersion>\r\n  <AssemblyTitle>Debug Build ($(TargetFramework)), ($(TargetFrameworkIdentifier))</AssemblyTitle>\r\n</PropertyGroup>\r\n...\r\n</Project>\r\n```\r\n\r\nProject file\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n...\r\n<PropertyGroup>\r\n  <OutputType>Library</OutputType>\r\n  <TargetFrameworks>net472;netcoreapp2.1</TargetFrameworks>\r\n  <ApplicationIcon />\r\n  <StartupObject />\r\n  <AssemblyName>Namespace.MyAssembly</AssemblyName>\r\n  <RootNamespace>Namespace.MyAssembly</RootNamespace>\r\n  <LangVersion>latest</LangVersion>\r\n  <OutputPath>..\\bin\\$(Configuration)</OutputPath>\r\n  <GenerateAssemblyInfo>true</GenerateAssemblyInfo>\r\n</PropertyGroup>\r\n...\r\n</Project>\r\n```\r\n\r\n### Expected  behavior\r\nBoth output assemblies should have the same version info as specified in the Directory.Build.props file.\r\n\r\n### Actual behavior\r\nOnly the first output assembly generate for the first target listed in <TargetFrameworks> in the project file has the correct assembly version info.\r\n\r\nThe assemblyinfo.cs in the first target's obj folder is:\r\n```xml\r\n...\r\n[assembly: System.Reflection.AssemblyCompanyAttribute(\"MyCompany\")]\r\n[assembly: System.Reflection.AssemblyConfigurationAttribute(\"Debug\")]\r\n[assembly: System.Reflection.AssemblyCopyrightAttribute(\"Copyright \u00a9 2018\")]\r\n[assembly: System.Reflection.AssemblyDescriptionAttribute(\"MyDescription\")]\r\n[assembly: System.Reflection.AssemblyFileVersionAttribute(\"8.8.50100.0\")]\r\n[assembly: System.Reflection.AssemblyInformationalVersionAttribute(\"Debug Build\")]\r\n[assembly: System.Reflection.AssemblyProductAttribute(\"MyProduct\")]\r\n[assembly: System.Reflection.AssemblyTitleAttribute(\"Debug Build (net472), ()\")]\r\n[assembly: System.Reflection.AssemblyVersionAttribute(\"8.8.5.0\")]\r\n...\r\n```\r\n\r\nThe assemblyinfo.cs in the second target's obj folder is:\r\n```xml\r\n...\r\n[assembly: System.Reflection.AssemblyCompanyAttribute(\"MyCompany\")]\r\n[assembly: System.Reflection.AssemblyConfigurationAttribute(\"Debug\")]\r\n[assembly: System.Reflection.AssemblyCopyrightAttribute(\"Copyright \u00a9 2018\")]\r\n[assembly: System.Reflection.AssemblyDescriptionAttribute(\"MyDescription\")]\r\n[assembly: System.Reflection.AssemblyFileVersionAttribute(\"4.0.00100.0\")]\r\n[assembly: System.Reflection.AssemblyInformationalVersionAttribute(\"Debug Build\")]\r\n[assembly: System.Reflection.AssemblyProductAttribute(\"MyProduct\")]\r\n[assembly: System.Reflection.AssemblyTitleAttribute(\"Debug Build (netcoreapp2.1), ()\")]\r\n[assembly: System.Reflection.AssemblyVersionAttribute(\"4.0.0.0\")]\r\n...\r\n```\r\n\r\n(Where this 4.0.00100.0 comes from I'm not quite sure, I did use that version at some point during testing.)\r\n\r\n\r\nEverything works as expected if building from the CLI using MSBuild.\r\n\r\n\r\n### Environment data\r\n`msbuild /version` output:\r\n\r\nMicrosoft (R) Build Engine version 15.8.169+g1ccb72aefa for .NET Framework\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n15.8.169.51996\r\n\r\nOS info:\r\nVisual Studio 2017 enterprise: 15.8.5+28010.2036\r\ndotnet --version: 2.1.402\r\n",
  "state": "OPEN",
  "createdAt": "2018-09-27T13:24:09Z",
  "updatedAt": "2024-01-25T20:06:07Z",
  "closedAt": null,
  "author": {
    "login": "Ronzan"
  },
  "labels": [],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "same cache issue with vs2019 16.5.2",
        "createdAt": "2020-04-02T10:33:42Z",
        "updatedAt": "2020-04-02T10:33:42Z",
        "author": {
          "login": "m00ners"
        }
      },
      {
        "body": "Same cache issue in VS2022 17.8.5 . In my scenario, it is the same target framework but a different OS. Windows for the local machine, Linux for deployment. I update Directory.Build.props and publish to an Azure Linux App Service. The updated Version is not used. If I close and restart Visual Studio before publishing then the updated Version is used.",
        "createdAt": "2024-01-25T20:05:25Z",
        "updatedAt": "2024-01-25T20:06:07Z",
        "author": {
          "login": "stagep"
        }
      }
    ]
  }
}