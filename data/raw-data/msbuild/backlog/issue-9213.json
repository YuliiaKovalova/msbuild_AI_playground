{
  "number": 9213,
  "title": "System.Windows.Extensions.dll included in Linux SDK output",
  "body": "The Linux version of the SDK is including the System.Windows.Extensions.dll file in the following paths:\r\n\r\n* ./sdk/x.y.z/FSharp/runtimes/win/lib/netx.y/System.Windows.Extensions.dll\r\n* ./sdk/x.y.z/runtimes/win/lib/netx.y/System.Windows.Extensions.dll\r\n\r\n~This is a regression as a result of the change in https://github.com/dotnet/msbuild/pull/9158. That change caused the live version of System.Security.Permissions to be used. That version has a dependency on System.Windows.Extensions, even when targeting Linux. So System.Windows.Extensions is being built and included in the output of the SDK.~ This is not a regression from https://github.com/dotnet/msbuild/pull/9158 because this change also exists in Microsoft-built SDK for Linux. The change from https://github.com/dotnet/msbuild/pull/9158 just made it visible in the source-build SDK diff tests.\r\n\r\nThere are other files existing in this `runtimes/win` path as well, which is a suspicious path when targeting Linux:\r\n\r\n* System.Diagnostics.EventLog.dll\r\n* System.Diagnostics.EventLog.Messages.dll\r\n* System.Security.Cryptography.Pkcs.dll\r\n* System.ServiceProcess.ServiceController.dll",
  "state": "CLOSED",
  "createdAt": "2023-08-29T18:56:16Z",
  "updatedAt": "2024-05-14T14:40:33Z",
  "closedAt": "2024-05-14T14:40:33Z",
  "author": {
    "login": "mthalman"
  },
  "labels": [
    "Priority:2",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "I couldn't figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one area label.",
        "createdAt": "2023-08-29T18:56:25Z",
        "updatedAt": "2023-08-29T18:56:25Z",
        "author": {
          "login": "ghost"
        }
      },
      {
        "body": "One question is why there is no Windows-based condition check for this reference:\r\n\r\nhttps://github.com/dotnet/runtime/blob/cf3328cceecccf781afa3e1ba619cf42830ead60/src/libraries/System.Security.Permissions/src/System.Security.Permissions.csproj#L210-L212",
        "createdAt": "2023-08-29T19:16:29Z",
        "updatedAt": "2023-08-29T19:16:29Z",
        "author": {
          "login": "mthalman"
        }
      },
      {
        "body": "Tagging subscribers to this area: @dotnet/area-infrastructure-libraries\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n<details>\n<summary>Issue Details</summary>\n<hr />\n\nThe Linux version of the SDK is including the System.Windows.Extensions.dll file in the following paths:\r\n\r\n* ./sdk/x.y.z/FSharp/runtimes/win/lib/netx.y/System.Windows.Extensions.dll\r\n* ./sdk/x.y.z/runtimes/win/lib/netx.y/System.Windows.Extensions.dll\r\n\r\n~This is a regression as a result of the change in https://github.com/dotnet/msbuild/pull/9158. That change caused the live version of System.Security.Permissions to be used. That version has a dependency on System.Windows.Extensions, even when targeting Linux. So System.Windows.Extensions is being built and included in the output of the SDK.~ This is not a regression from https://github.com/dotnet/msbuild/pull/9158 because this change also exists in Microsoft-built SDK for Linux. The change from https://github.com/dotnet/msbuild/pull/9158 just made it visible in the source-build SDK diff tests.\r\n\r\nThere are other files existing in this `runtimes/win` path as well, which is a suspicious path when targeting Linux:\r\n\r\n* System.Diagnostics.EventLog.dll\r\n* System.Diagnostics.EventLog.Messages.dll\r\n* System.Security.Cryptography.Pkcs.dll\r\n* System.ServiceProcess.ServiceController.dll\n\n<table>\n  <tr>\n    <th align=\"left\">Author:</th>\n    <td>mthalman</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Assignees:</th>\n    <td>-</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Labels:</th>\n    <td>\n\n`area-Infrastructure-libraries`, `untriaged`\n\n</td>\n  </tr>\n  <tr>\n    <th align=\"left\">Milestone:</th>\n    <td>-</td>\n  </tr>\n</table>\n</details>",
        "createdAt": "2023-08-29T19:17:25Z",
        "updatedAt": "2023-08-29T19:17:25Z",
        "author": {
          "login": "ghost"
        }
      },
      {
        "body": "cc @dotnet/area-system-security for the above System.Security.Permissions question.\r\n\r\n> One question is why there is no Windows-based condition check for this reference:\r\n\r\nSystem.Security.Permissions doesn't target any RIDs. It provides RID agnostic TFMs: https://github.com/dotnet/runtime/blob/b9b51d3bbdd547a2542720c772d7e85fa6a82837/src/libraries/System.Security.Permissions/src/System.Security.Permissions.csproj#L3\r\n\r\nIf we would want to only include that reference for Windows, we would need to start targeting RIDs which has drawbacks (package size, build complexity, ...).\r\n\r\nFrom what I can see, the S.W.E. reference is necessary because of `XamlAccessLevel` types being used in S.S.P: https://github.com/dotnet/runtime/blob/main/src/libraries/System.Security.Permissions/src/System/Xaml/Permissions/XamlLoadPermission.cs#L19\r\n\r\nAs that type is already marked as obsolete on .NETCoreApp and was only brought back for WPF, it might be interesting to discuss if we can actually remove it as part of a breaking change.",
        "createdAt": "2023-08-29T19:41:27Z",
        "updatedAt": "2023-08-29T20:58:54Z",
        "author": {
          "login": "ViktorHofer"
        }
      },
      {
        "body": "The whole S.S.P is obsolete. I do not think it is worth doing anything with it. People should be deleting references to it as part of modernizing their projects.\r\n\r\n> There are other files existing in this runtimes/win path as well, which is a suspicious path when targeting Linux:\r\n\r\nThis is https://github.com/dotnet/sdk/issues/16895",
        "createdAt": "2023-08-29T23:37:49Z",
        "updatedAt": "2023-08-29T23:37:49Z",
        "author": {
          "login": "jkotas"
        }
      },
      {
        "body": "> The whole S.S.P is obsolete. I do not think it is worth doing anything with it. People should be deleting references to it as part of modernizing their projects.\r\n\r\nWe ourselves also reference S.S.P. Should we stop doing that as part of a bigger breaking change and delete S.S.P eventually?",
        "createdAt": "2023-08-30T07:19:43Z",
        "updatedAt": "2023-08-30T07:19:43Z",
        "author": {
          "login": "ViktorHofer"
        }
      },
      {
        "body": "S.S.P is part of .NET Framework compat. I think it needs to exist in this repo as long as we are building the .NET Framework compat live. \r\n\r\nCleaning it up from dependencies of assemblies that end up in .NET SDK would be nice. I expect that most of the work for that would be outside of this repo.",
        "createdAt": "2023-08-30T15:12:30Z",
        "updatedAt": "2023-08-30T15:12:30Z",
        "author": {
          "login": "jkotas"
        }
      },
      {
        "body": "> We ourselves also reference S.S.P.\r\n\r\nWe've actually removed most of these references in dotnet/runtime - making them private to exclude the package reference.  Keeping the type forwards (dangling) for compat.  I think `System.Xaml` and `WindowsBase` may still reference it, but it seems like they are only using for forwards.  We do actually expose it from the WindowsDesktop shared framework refpack -- perhaps we can remove it entirely 9.0.\r\n\r\nI had a look at MSBuild and I'm not sure it even uses System.Security.Permissions.  Most that code looks to me like it's under ifdef that's only defined for NetFX - one exception seems to be XmlSyntaxException which needs an ifdef.  It seems that it does still pull in SSP through a reference to 7.0 ConfiugrationManager, when updating to 8.0 we can remove this completely.  I was able to update to 8.0 packages and remove SSP completely and it no longer shows up in the output.  https://github.com/dotnet/msbuild/pull/9212.  EDIT: Looks like a similar PR was already raised: https://github.com/dotnet/msbuild/pull/9055.  I think that PR should be driven in.",
        "createdAt": "2023-09-08T18:34:38Z",
        "updatedAt": "2023-09-08T23:59:46Z",
        "author": {
          "login": "ericstj"
        }
      },
      {
        "body": "Let's check that it was fixed.",
        "createdAt": "2024-05-14T13:41:55Z",
        "updatedAt": "2024-05-14T13:41:55Z",
        "author": {
          "login": "AR-May"
        }
      },
      {
        "body": "Yes, I think this got resolved.",
        "createdAt": "2024-05-14T14:01:53Z",
        "updatedAt": "2024-05-14T14:01:53Z",
        "author": {
          "login": "ViktorHofer"
        }
      }
    ]
  }
}