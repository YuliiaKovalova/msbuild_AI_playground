{
  "number": 3242,
  "title": "Question: Are item Include paths always relative to $(MSBuildProjectDirectory)",
  "body": "### Steps to reproduce\r\n\r\nIn a somewhat non-standard build configuration, I have two csproj files that contain item definitions that I need to gather for a separate build process. I'm finding that item definition \"Include\" paths don't work the way I thought they did. \r\n\r\nAs a minimal example:\r\n\r\nDirectory structure:\r\n- Root/\r\n  - Proj1/\r\n    - Proj1.proj\r\n    - Test1.cs\r\n  - Proj2/\r\n    - Proj2.proj\r\n    - Test2.cs\r\n  - Full.proj\r\n\r\n[Full.proj]\r\n```xml\r\n<Project xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\r\n\r\n  <Import Project=\"Proj1/Proj1.proj\"/>\r\n  <Import Project=\"Proj2/Proj2.proj\"/>\r\n  \r\n  <Target Name=\"Build\">\r\n    <Message Text=\"%(Compile.FullPath)\"/>\r\n  </Target>\r\n</Project>\r\n```\r\n\r\n[Proj1.proj]\r\n```xml\r\n<Project xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\r\n  <ItemGroup>\r\n    <Compile Include=\"Test1.cs\"/>\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nCommand line\r\n```\r\nmsbuild Full.proj\r\n```\r\n### Expected  behavior\r\n  C:\\users\\mpflug\\Desktop\\msbuildtest\\Proj1\\Test1.cs\r\n  C:\\users\\mpflug\\Desktop\\msbuildtest\\Proj2\\Test2.cs\r\n\r\n### Actual behavior\r\n  C:\\users\\mpflug\\Desktop\\msbuildtest\\Test1.cs\r\n  C:\\users\\mpflug\\Desktop\\msbuildtest\\Test2.cs\r\n\r\n### Environment data\r\n`msbuild /version` output: `15.6.85.37198`\r\n\r\nOS info: Win 10 64bit\r\n\r\nI had expected that the Compile Include paths would be relative to the ProjX.proj files (`$(MSBuildThisFileDirectory)`) rather than being relative to the Full.proj (`$(MSBuildProjectDirectory)`) that is importing them. Has it always worked this way? Is there a reasonable way to accomplish what I'm trying to do?\r\n\r\nExample project: https://github.com/MarkPflug/MSBuildCombine\r\n",
  "state": "CLOSED",
  "createdAt": "2018-04-26T22:00:54Z",
  "updatedAt": "2024-02-21T17:13:24Z",
  "closedAt": "2018-05-07T20:51:48Z",
  "author": {
    "login": "MarkPflug"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Yes, relative paths in `<Import>`ed files are relative to the _project_, not the _file they came from_. That's discussed a bit in the docs [here](https://docs.microsoft.com/en-us/visualstudio/msbuild/import-element-msbuild#remarks).\r\n\r\nOne option to do what you want is to explictly `<Compile Include=\"$(MSBuildThisFileDirectory)\\Test1.cs\" />` though VS won't maintain that for you.\r\n\r\nThe \"standard\" VS way to accomplish this goal is with a shared project (`.shproj`). Have you tried that?",
        "createdAt": "2018-04-26T22:35:22Z",
        "updatedAt": "2018-04-26T22:35:22Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "That behavior feels backwards to me. It seems like if you want to include files relative to the *entry-project* that you should have to `Include=\"$(MSBuildProjectDirectory)/**/*.cs\"`. Since the standard for any user-land project file (csproj, vbproj) is to define items relative to *itself*. That way the burden would be on the build targets author (you), who could be expected to understand such esoterica. I know that nothing can be done about it at this point... I'm just looking for validation that I'm not crazy.\r\n\r\nNever heard of a shared project before, I suspect they aren't going to suit my particular scenario, but I'll look into it.  I suspect I'll have to write a custom build task to parse the child project files, and scrape out their Includes with the corrected absolute path. Ugly, but it should work.\r\n\r\nThanks for the quick response.",
        "createdAt": "2018-04-26T22:55:19Z",
        "updatedAt": "2018-04-26T22:55:19Z",
        "author": {
          "login": "MarkPflug"
        }
      },
      {
        "body": "I don't think that's unreasonable--there are arguments either way. But MSBuild has behaved like this since v1 so as you say there's no changing it now.\r\n\r\nDon't parse project files yourself, it's asking for pain and suffering. What if one of those projects uses a shared project, or imports something, or uses a wildcarded Include, or a conditional Include, or a conditional ItemGroup, or expands a property in an Include? Soon you'll have all kinds of other opinions about how MSBuild should have been designed (we certainly do!).\r\n\r\nA better approach would be to let the MSBuild do all of that work on behalf of the other project. Add a target in Proj1 and Proj2 (define it only once; import it in the projects) that `Returns` the item you're interested in, just `BeforeTargets` it would be consumed (probably in `CoreCompile`). Then in Full.proj, `<MSBuild>` that target in the other projects and use its output as you wish. Does that make sense?",
        "createdAt": "2018-04-27T14:30:38Z",
        "updatedAt": "2018-04-27T14:30:38Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Thanks for saving me from myself, the parsing approach would have been a nightmare. I was able to get the target with returns working.\r\n\r\nI'd be interested in what you guys would have done differently with 15 years of retrospection. I've always appreciated how flexible MSBuild is in letting projects override and customize the default behavior, but it's also always been a struggle to get it to work like I want; mostly a struggle to understand the details of Microsoft.XXX.targets. The new Sdk style projects are a huge step forward in making the end-user experience more palatable. If you guys could \"start over\", would you choose something other than xml? I would have thought that the xmlns would allow you to revise the fundamental structure of project files while maintaining back compat. But, maintenance is probably the crux of the issue: maintaining multiple versions is a nightmare in its own right.",
        "createdAt": "2018-04-27T17:26:14Z",
        "updatedAt": "2018-04-27T17:28:15Z",
        "author": {
          "login": "MarkPflug"
        }
      },
      {
        "body": "> The \"standard\" VS way to accomplish this goal is with a shared project (`.shproj`). Have you tried that?\r\n\r\nFor posterity, the way that Visual Studio accomplishes this goal within a .shproj is by implicitly prepending `$(MSBuildThisFileDirectory)` to every item in the `.projitems` file.\r\n\r\nThe implementation of a .shproj from the perspective of MsBuild is nothing more than `<Import Project=\"..\\SharedProject\\SharedProject.projitems\" Label=\"Shared\" />`. If (as I did) you manually edit the `.projitems` file to add a file using a relative path, its FullPath will be wrong from the perspective of the consuming project.",
        "createdAt": "2023-08-08T21:30:54Z",
        "updatedAt": "2023-08-08T21:30:54Z",
        "author": {
          "login": "chipplyman"
        }
      }
    ]
  }
}