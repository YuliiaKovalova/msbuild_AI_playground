{
  "number": 6277,
  "title": "Warn for conditional clauses that are either always true or never true",
  "body": "The below was a typo we overlooked in our repo. Strictly, the expression is \"valid\" but the possibility it was intended is zero.\r\n\r\nHave you considered warning for conditions or clauses in conditions that will either ALWAYS or NEVER be true? In this case, it will always be true. I am guessing such clauses are very rarely intentional.\r\n\r\n```xml\r\n<Project>\r\n\r\n   <ItemGroup Condition=\"'$(RunDisabledAppleSiliconTests' != 'true'\"/>\r\n\r\n   <Target Name=\"dummy\"/>\r\n</Project>\r\n```\r\n\r\n```\r\nC:\\proj\\1>dotnet --version\r\n6.0.100-preview.2.21155.3\r\n\r\nC:\\proj\\1>dotnet --info\r\n.NET SDK (reflecting any global.json):\r\n Version:   6.0.100-preview.2.21155.3\r\n Commit:    1a9103db2d\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.19042\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\6.0.100-preview.2.21155.3\\\r\n\r\nHost (useful for support):\r\n  Version: 6.0.0-preview.2.21154.6\r\n  Commit:  3eaf1f316b\r\n\r\n...\r\n```",
  "state": "OPEN",
  "createdAt": "2021-03-18T15:25:10Z",
  "updatedAt": "2024-01-31T08:21:25Z",
  "closedAt": null,
  "author": {
    "login": "danmoseley"
  },
  "labels": [
    "bug",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Backlog"
  },
  "comments": {
    "nodes": [
      {
        "body": "For perf reasons this might require a \"lint\" mode",
        "createdAt": "2021-03-29T03:38:54Z",
        "updatedAt": "2021-03-29T03:38:54Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "Team Triage: Should we consider that if what we're parsing as a property has `$(`, and no closing `)`, log a warning based off of that?\r\n\r\nThis could also be expanded to special MSBuildisms like `%(` `@(` `$(`.",
        "createdAt": "2021-03-31T15:39:56Z",
        "updatedAt": "2021-03-31T15:39:56Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "I figured just generally warning for clauses that are always true or always false would be much easier as there's no parser work. Basically after parsing, examine any comparison of string/number/bool to string/number/bool where there are no expandable elements (e.g. no $ or % or @ ...I forget whether this falls directly out of the parsing). In fact if it can be done like that it's nearly free and wouldn't need an opt in lint mode.",
        "createdAt": "2021-03-31T16:04:02Z",
        "updatedAt": "2021-03-31T16:04:02Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "I don't understand how we can guarantee whether or not something would always be true or never be true? Unless you mean comparing different types.\r\n\r\neg: \r\n\"$(foo)\" resolves to false, and we're comparing it to true, so no warning because they're the same type and \"could have been\" equal.\r\n\"$(foo\" resolves to \"$(foo\" and is being compared to true, so log a warning that these mismatched types could never be equal.\r\n\r\nIs this what you mean?",
        "createdAt": "2021-03-31T18:22:33Z",
        "updatedAt": "2021-03-31T18:22:33Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "Yes, exactly. If your parse tree contains a subtree like\r\n```\r\n|\r\nequal\r\n|          \\ \r\nstring   string\r\n```\r\nand string isn't expandable, then we can immediately warn because the clause will always have the same result and at best is redundant, at worst is a typo.\r\n\r\nSimilarly for other comparisons between string/bool/number - the key being there's nothing expandable on either side.\r\n\r\nI don't think it's necessary to consider more than individual clauses, eg to handle cases like `$(A) == '1' || $(A) != '1'` -- also pointless, but less likely to be the result of a typo.\r\n\r\nIf instead you extended the parser to try to catch typos, I would imagine it could be much more costly/fragile. I don't know much about parsers, but I would expect that would be better handled by changing to a parser generator, if there is one, that offers a feature for spotting expressions that are \"nearly something else\".",
        "createdAt": "2021-03-31T19:00:36Z",
        "updatedAt": "2021-03-31T19:04:30Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "> and string isn't expandable\r\n\r\nIn this case you mean the string on both sides of the equal aren't expanded?\r\n\r\nMy understanding for cases to warn:\r\n1. Comparison between two different types\r\n1. Comparison between two items of the same type, where neither expanded",
        "createdAt": "2021-03-31T19:20:52Z",
        "updatedAt": "2021-03-31T19:20:52Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "> In this case you mean the string on both sides of the equal aren't expanded\n\nRight\n\n> Comparison between two different types\n\nI don't think the type is relevant as there's coercion . So `'1' == 1.0` or `'YES' == true` are valid but would warn but `'$(foo)' == 1` is valid and would not warn.",
        "createdAt": "2021-03-31T19:26:57Z",
        "updatedAt": "2021-03-31T19:26:57Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "Here's another example from [today ](https://github.com/dotnet/runtime/pull/57143) where a typo caused a condition to always be false (extra space after property name)\r\n`    <EnableUnsafeUTF7Encoding Condition=\"'$(EnableUnsafeUTF7Encoding )' == ''\">false</EnableUnsafeUTF7Encoding >`\r\n\r\nIdeally MSBuild would flag this.",
        "createdAt": "2021-08-11T22:45:51Z",
        "updatedAt": "2021-08-11T22:45:51Z",
        "author": {
          "login": "danmoseley"
        }
      }
    ]
  }
}