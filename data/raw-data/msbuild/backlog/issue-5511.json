{
  "number": 5511,
  "title": "HasLoggedErrors should respect MSBuildWarningsAsErrors",
  "body": "### Steps to reproduce\r\n\r\n[warnaserr.tar.gz](https://github.com/microsoft/msbuild/files/4915653/warnaserr.tar.gz)\r\n\r\n```csharp\r\n    public class MyTask : Task\r\n    {\r\n        public override bool Execute()\r\n        {\r\n            Log.LogWarning(subcategory: null,\r\n                           warningCode: \"MyWarning1234\",\r\n                           helpKeyword: null,\r\n                           file: null,\r\n                           lineNumber: 0,\r\n                           columnNumber: 0,\r\n                           endLineNumber: 0,\r\n                           endColumnNumber: 0,\r\n                           message: \"my warning\");\r\n\r\n            return !Log.HasLoggedErrors;\r\n        }\r\n    }\r\n```\r\n\r\n```xml\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>net5.0</TargetFramework>\r\n    <MSBuildWarningsAsErrors>MyWarning1234</MSBuildWarningsAsErrors>\r\n  </PropertyGroup>\r\n\r\n  <UsingTask TaskName=\"task.MyTask\" AssemblyFile=\"$(MSBuildThisFileDirectory)../task/bin/Debug/net5.0/task.dll\" />\r\n  <Target Name=\"MyTargetOuter\"\r\n          DependsOnTargets=\"MyTargetInner\">\r\n    <Message Importance=\"High\" Text=\"Outer target\" />\r\n  </Target>\r\n\r\n  <Target Name=\"MyTargetInner\">\r\n    <MyTask />\r\n  </Target>\r\n```\r\n\r\n```\r\n> dotnet msbuild /t:MyTargetOuter\r\nwarnaserr/project/project.csproj(16,5): error MyWarning1234: my warning\r\n  Outer target\r\n```\r\n\r\n### Expected behavior\r\n\r\n`Log.HasLoggedErrors` returns `true` when the logged warning is treated as an error due to `MSBuildWarningsAsErrors`, causing the build to stop after `MyTask`.\r\n\r\n### Actual behavior\r\n\r\n`HasLoggedErrors` returns `false`, the build continues, and the outer target runs even after the task produced an error. \r\n\r\nPerhaps this is the intended behavior. If that's the case, is there a recommended way for tasks to check whether any of their warnings have been turned into errors?\r\n\r\nWe are using ToolTask (which relies on `HasLoggedErrors` by default) for the IL linker MSBuild task, and we don't want to continue the build if any errors were logged - otherwise we touch a file on disk that prevents the linker from running incrementally next time.\r\n\r\n### Environment data\r\n`msbuild /version` output: 16.7.0.36003\r\n\r\nOS info: 18.04.1-Ubuntu\r\n\r\nIf applicable, version of the tool that invokes MSBuild (Visual Studio, dotnet CLI, etc): dotnet cli\r\n",
  "state": "CLOSED",
  "createdAt": "2020-07-13T23:48:40Z",
  "updatedAt": "2024-02-21T17:03:01Z",
  "closedAt": "2021-03-13T00:39:07Z",
  "author": {
    "login": "sbomer"
  },
  "labels": [
    "Partner request",
    "Area: Engine",
    "changewave16.10",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "benvillalobos"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Team triage: we think that it's right that this is how it _should_ behave.\r\n\r\nWe're a bit concerned about two scenarios:\r\n\r\n* User has a project that warns-as-errors, builds it, and expects output (even though it would fail today).\r\n* User expects errors from downstream targets that would now be dropped.\r\n\r\nWe think this should be fixed to match your expectations.",
        "createdAt": "2020-07-15T15:54:17Z",
        "updatedAt": "2020-07-15T15:54:17Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}