{
  "number": 8030,
  "title": "Race condition when publishing multiple projects can cause missed references",
  "body": "This was reported via a Microsoft discussion group; this is a simplified repro.\r\n\r\nThe solution in [publish_bad_ordering.zip](https://github.com/dotnet/msbuild/files/9728840/publish_bad_ordering.zip), when built and published with\r\n\r\n```sh\r\ndotnet build\r\ndotnet publish --no-build -bl -flp:v=diag -m:1\r\n```\r\n\r\n(`7.0.100-rc.1.22431.12`), will produce an incorrect `App3.deps.json` compared to publishing only `App3.csproj`:\r\n\r\n```diff\r\ndiff --git \"a/.\\\\IndividualPublish-App3.deps.json\" \"b/.\\\\SolutionPublish-App3.deps.json\"\r\nindex 4b28e94..7dd6f87 100644\r\n--- \"a/.\\\\IndividualPublish-App3.deps.json\"\r\n+++ \"b/.\\\\SolutionPublish-App3.deps.json\"\r\n@@ -20,12 +20,7 @@\r\n           \"StyleCop.Analyzers.Unstable\": \"1.2.0.435\"\r\n         }\r\n       },\r\n-      \"StyleCop.Analyzers.Unstable/1.2.0.435\": {},\r\n-      \"App1/1.0.0\": {\r\n-        \"runtime\": {\r\n-          \"App1.dll\": {}\r\n-        }\r\n-      }\r\n+      \"StyleCop.Analyzers.Unstable/1.2.0.435\": {}\r\n     }\r\n   },\r\n   \"libraries\": {\r\n@@ -47,11 +42,6 @@\r\n       \"sha512\": \"sha512-ouwPWZxbOV3SmCZxIRqHvljkSzkCyi1tDoMzQtDb/bRP8ctASV/iRJr+A2Gdj0QLaLmWnqTWDrH82/iP+X80Lg==\",\r\n       \"path\": \"stylecop.analyzers.unstable/1.2.0.435\",\r\n       \"hashPath\": \"stylecop.analyzers.unstable.1.2.0.435.nupkg.sha512\"\r\n-    },\r\n-    \"App1/1.0.0\": {\r\n-      \"type\": \"project\",\r\n-      \"serviceable\": false,\r\n-      \"sha512\": \"\"\r\n     }\r\n   }\r\n }\r\n\\ No newline at end of file\r\n```\r\n\r\nThis happens because the reference from App2\u2192App3 causes parts of `ProjectReference` resolution to execute in a bad order:\r\n\r\n```sh-session\r\n\u276f rg 'Done building target .(_SplitProjectReferencesByFileExistence|BuildOnlySettings|AssignProjectConfiguration|ResolveProjectReferences). in project .App3\\.csproj' .\\msbuild.log\r\n48393:Done building target \"_SplitProjectReferencesByFileExistence\" in project \"App3.csproj\".: (TargetId:147)\r\n51394:Done building target \"BuildOnlySettings\" in project \"App3.csproj\".: (TargetId:168)\r\n51501:Done building target \"AssignProjectConfiguration\" in project \"App3.csproj\".: (TargetId:176)\r\n51519:Done building target \"ResolveProjectReferences\" in project \"App3.csproj\".: (TargetId:178)\r\n```\r\n\r\n`_SplitProjectReferencesByFileExistence` depends on `@(ProjectReferenceWithConfiguration)`\r\n\r\nhttps://github.com/dotnet/msbuild/blob/20ce296d6b3f4e63a511321c7e1a2f69a4ee63ef/src/Tasks/Microsoft.Common.CurrentVersion.targets#L1606-L1612\r\n\r\nwhich is populated in `AssignProjectConfiguration`\r\n\r\nhttps://github.com/dotnet/msbuild/blob/20ce296d6b3f4e63a511321c7e1a2f69a4ee63ef/src/Tasks/Microsoft.Common.CurrentVersion.targets#L1564-L1567\r\n\r\nSo if `_SplitProjectReferencesByFileExistence` runs first, the later `ResolveProjectReferences` will do nothing.\r\n\r\nMissing project references at `publish --no-build` time can be somewhat benign, but in this case the project falls into a `$(_UseBuildDependencyFile) != true` case, because `@(_ExcludeFromPublishPackageReference)` is nonempty, because of the `ExcludeAssets=\"all\"` on a `PackageReference` to `StyleCop.Analyzers`. That causes `App3.deps.json` to be recomputed with bad project-reference information, causing the absence of `App1`.\r\n\r\nIn the build that initially caused this report, this happened intermittently due to sometimes scheduling App3's publish before App2's reference to it, but the repro described above is deterministic because of limiting to a single build node with `-m:1`.",
  "state": "OPEN",
  "createdAt": "2022-10-06T21:57:34Z",
  "updatedAt": "2024-01-31T08:16:08Z",
  "closedAt": null,
  "author": {
    "login": "rainersigwald"
  },
  "labels": [
    "bug",
    "backlog",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "The folks who hit this report that forcing correct ordering by adding\r\n\r\n```xml\r\n<Target Name=\"WorkAroundOrderingOfProjectReferencesDuringSolutionPublish_MSBuild8030\" BeforeTargets=\"_SplitProjectReferencesByFileExistence\" DependsOnTargets=\"AssignProjectConfiguration\" />\r\n```\r\n\r\nto their \"`App3.csproj`\" resolves the issue.\r\n\r\nThe most straightforward fix would be to add that dependency in `_SplitProjectReferencesByFileExistence` directly. However, we've avoided that in the past because of compatibility concerns:\r\n\r\nhttps://github.com/dotnet/msbuild/blob/20ce296d6b3f4e63a511321c7e1a2f69a4ee63ef/src/Tasks/Microsoft.Common.CurrentVersion.targets#L4920-L4922\r\n\r\nWe should reevaluate those concerns and see what we can do. Another option would be to have the SDK's `GetCopyToPublishDirectoryItems` target depend on `$(_TargetsThatPrepareProjectReferences)` instead of  directly on `_SplitProjectReferencesByFileExistence`.",
        "createdAt": "2022-10-06T22:09:50Z",
        "updatedAt": "2022-10-06T22:09:50Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}