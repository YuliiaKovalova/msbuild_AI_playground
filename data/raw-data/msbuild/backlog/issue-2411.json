{
  "number": 2411,
  "title": "IndexOfAny/ProbablyContains/InitializeProbabilisticMap is showing up on radar",
  "body": "See: https://github.com/dotnet/corefx/issues/22771\r\n\r\nI've looked at 3 large solutions where IndexOfAny usage is showing up on the radar. I initially thought that it maybe caused by Directory.GetFiles/GetDirectories usage (where they check for invalid chars) but looking at this trace: https://github.com/Microsoft/msbuild/issues/2348, I see it consuming *a lot* (25% of CPU) - but very little time spent in GetFiles/GetDirectories. \r\n\r\nCheck usage of other Path APIs, such as GetExtension which also does a invalid char check - it may be caused by this.\r\n\r\nI suspect we should just hand write IndexOfAny checks for known chars.",
  "state": "CLOSED",
  "createdAt": "2017-08-09T02:00:41Z",
  "updatedAt": "2024-02-21T17:17:24Z",
  "closedAt": "2021-04-13T11:35:17Z",
  "author": {
    "login": "davkean"
  },
  "labels": [
    "Area: Performance",
    "Priority:2",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "davkean"
      }
    ]
  },
  "milestone": {
    "title": "MSBuild 16.10"
  },
  "comments": {
    "nodes": [
      {
        "body": "Feel free to assign this one to me.",
        "createdAt": "2017-08-09T02:00:52Z",
        "updatedAt": "2017-08-09T02:00:52Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "~I suspect this has to do with http://index/?query=ExpandPropertiesLeaveTyped&rightProject=Microsoft.Build&file=Evaluation%5CExpander.cs&line=933:~\r\n\r\n``` C#\r\n                // If there are no substitutions, then just return the string.\r\n                propertyStartIndex = s_invariantCompareInfo.IndexOf(expression, \"$(\", CompareOptions.Ordinal);\r\n                if (propertyStartIndex == -1)\r\n                {\r\n                    return expression;\r\n                }\r\n\r\n```",
        "createdAt": "2017-09-19T05:37:30Z",
        "updatedAt": "2017-09-26T10:35:08Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "I believe these belong together (ProbablyContains/InitializeProbabilisticMap usage is always a broken stack so they aren't grouped):\r\n\r\n![image](https://user-images.githubusercontent.com/1103906/30577494-f3b02ee6-9d51-11e7-938b-6fb53e07d77c.png)\r\n",
        "createdAt": "2017-09-19T05:49:43Z",
        "updatedAt": "2017-09-19T05:49:43Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "I don't know what the cause of this is, I replaced all usage of IndexOfAny and LastIndexOfAny and it's still showing up on the radar.",
        "createdAt": "2017-09-21T10:47:53Z",
        "updatedAt": "2017-09-21T10:47:53Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "`clr!ProbablyContains`\r\n`clr!InitializeProbabilisticMap`\r\n`clr!COMString::IndexOfCharArray`\r\n\r\ntogether amount to ~0.4% of evaluation time according to recent @arkalyanms's traces.\r\n\r\nProbablyContains and InitializeProbabilisticMap have broken stacks and IndexOfCharArray (~0.2% of eval time) has many callers with nothing standing out:\r\n\r\n![image](https://user-images.githubusercontent.com/12206368/114545088-d0903200-9c5b-11eb-9d24-1fc1b7ed251a.png)\r\n\r\nBased on this I'm inclined to close this unless @davkean remembers the scenario where the excessive cost was observed.",
        "createdAt": "2021-04-13T11:28:33Z",
        "updatedAt": "2021-04-13T11:28:33Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "I have seen popup in a few traces recently as much as what caused me to file the original CoreFx bug but the traces are long gone. I will keep an eye out for it and reopen this if you close it if I see it again.",
        "createdAt": "2021-04-13T11:33:33Z",
        "updatedAt": "2021-04-13T11:34:40Z",
        "author": {
          "login": "davkean"
        }
      }
    ]
  }
}