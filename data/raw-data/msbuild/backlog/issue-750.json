{
  "number": 750,
  "title": "Native image cannot be loaded multiple times",
  "body": "This error based on offline discussions:\n\n```\nC:\\Users\\brthor\\code\\cli\\build\\package\\Microsoft.DotNet.Cli.Layout.targets(64,5): error MSB4062: The \"Microsoft.Build.Tasks.Copy\" task could not be loaded from the assembly Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a. Native image cannot be loaded multiple times Confirm that the <UsingTask> declaration is correct, that the assembly and all its dependencies are available, and that the task contains a public class that implements Microsoft.Build.Framework.ITask. [C:\\Users\\brthor\\code\\cli\\build.proj]\n```\n\nCreating a standalone repro of this is proving challenging but I have shared a repro offline with \n@rainersigwald and @cdmihai \n\nUsing this issue for tracking workarounds we are making for this issue.\n",
  "state": "CLOSED",
  "createdAt": "2016-06-29T21:58:25Z",
  "updatedAt": "2024-02-21T17:27:20Z",
  "closedAt": "2016-10-11T17:18:19Z",
  "author": {
    "login": "brthor"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "tmeschter"
      }
    ]
  },
  "milestone": {
    "title": "Visual Studio 15 RC"
  },
  "comments": {
    "nodes": [
      {
        "body": "@rainersigwald @brthor @cdmihai I've been asked to help out with these MSBuild issues, and I've already picked up #658. This issue looks to be related (at least to the extent that it has to do with assembly loading).\n\nWould it be possible for one of you to share the repro with me?\n",
        "createdAt": "2016-08-03T16:03:32Z",
        "updatedAt": "2016-08-03T16:03:32Z",
        "author": {
          "login": "tmeschter"
        }
      },
      {
        "body": "To repro:\n- clone https://github.com/dotnet/cli\n- checkout the `feature/msbuild` branch\n- Remove these lines https://github.com/dotnet/cli/blob/feature/msbuild/build.proj#L47-L52\n- `build` from the root of the repo\n",
        "createdAt": "2016-08-08T18:19:07Z",
        "updatedAt": "2016-08-08T18:19:07Z",
        "author": {
          "login": "eerhardt"
        }
      },
      {
        "body": "@eerhardt Thanks!\n",
        "createdAt": "2016-08-08T18:24:59Z",
        "updatedAt": "2016-08-08T18:24:59Z",
        "author": {
          "login": "tmeschter"
        }
      },
      {
        "body": "@eerhardt I'm not able to reproduce the issue using the provided steps. With or without the `<Message>` element in build.proj, the build succeeds.\n",
        "createdAt": "2016-08-08T19:53:48Z",
        "updatedAt": "2016-08-08T19:53:48Z",
        "author": {
          "login": "tmeschter"
        }
      },
      {
        "body": "@tmeschter If the entire `MSBuildWorkaroundTarget` and references are removed do you see the behavior?\n",
        "createdAt": "2016-08-08T19:55:17Z",
        "updatedAt": "2016-08-08T19:55:17Z",
        "author": {
          "login": "brthor"
        }
      },
      {
        "body": "Also comment out the Exec call on line 79:\n\nhttps://github.com/dotnet/cli/blob/feature/msbuild/build.proj#L79\n",
        "createdAt": "2016-08-08T19:57:37Z",
        "updatedAt": "2016-08-08T19:57:37Z",
        "author": {
          "login": "eerhardt"
        }
      },
      {
        "body": "The issue seems to occur when the root project doesn't use any built-in tasks (like Message or Exec), and it imports a separate .targets file that uses a built-in task (like Message or Exec).\n",
        "createdAt": "2016-08-08T19:58:46Z",
        "updatedAt": "2016-08-08T19:58:46Z",
        "author": {
          "login": "eerhardt"
        }
      },
      {
        "body": "@brthor @eerhardt Still can't repro this, even after removing the `MSBuildWorkaroundTarget` and all references to it, and removing the `Exec` call on line 79. Of course, without the `Exec` call the build fails with an unrelated problem...\n",
        "createdAt": "2016-08-08T21:28:54Z",
        "updatedAt": "2016-08-08T21:28:54Z",
        "author": {
          "login": "tmeschter"
        }
      },
      {
        "body": "Moving this to `build/Microsoft.DotNet.Cli.Prepare.targets` instead of deleting it might help get the repro.\n\nhttps://github.com/dotnet/cli/blob/feature/msbuild/build.proj#L75-L80\n",
        "createdAt": "2016-08-08T21:34:22Z",
        "updatedAt": "2016-08-08T21:34:22Z",
        "author": {
          "login": "brthor"
        }
      },
      {
        "body": "@brthor Can you please make the repro inducing edits in a separate branch and link it here? Would make it easier for multiple people to repro the issue by just checking out a branch and building.\n",
        "createdAt": "2016-08-09T00:12:25Z",
        "updatedAt": "2016-08-09T00:12:25Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "@cdmihai @tmeschter \n\n> Can you please make the repro inducing edits in a separate branch and link it here? Would make it easier for multiple people to repro the issue by just checking out a branch and building.\n\nThat was the purpose of the offline shared repro. Is that repro not usable for debugging?\n",
        "createdAt": "2016-08-09T17:32:50Z",
        "updatedAt": "2016-08-09T17:32:50Z",
        "author": {
          "login": "brthor"
        }
      },
      {
        "body": "@brthor Unfortunately VS crashes when trying to load symbols for the copy of Microsoft.Build.dll used by that offline repro. And when I drop in locally-built MSBuild binaries I end up with assembly version mismatches. So at the moment I'm trying to construct a simpler repro with newer bits.\n",
        "createdAt": "2016-08-09T17:49:43Z",
        "updatedAt": "2016-08-09T17:49:43Z",
        "author": {
          "login": "tmeschter"
        }
      },
      {
        "body": "It sounded like @anurse had a repro of this bug as well.  Maybe he has an separate branch that you can checkout.\n",
        "createdAt": "2016-08-09T18:56:26Z",
        "updatedAt": "2016-08-09T18:56:26Z",
        "author": {
          "login": "eerhardt"
        }
      },
      {
        "body": "I don't have a very convenient repro yet, it's tied into our build system which isn't a great standalone example yet.\n",
        "createdAt": "2016-08-09T21:15:06Z",
        "updatedAt": "2016-08-09T21:15:06Z",
        "author": {
          "login": "analogrelay"
        }
      },
      {
        "body": "@tmeschter \nI've pushed a branch exhibiting the repro.\n\n```\ngit checkout brthor/repro750\nbuild.cmd /t:BuildDotnetCliBuildFramework\nbuild.cmd /t:InitializeCommonProps\n```\n\nI had some trouble getting a solid repro, a target in a file that only called built in tasks didn't seem to trigger it. A target calling a custom task followed by the built in task when the target isn't in the top level project did trigger it. I don't know if that info will be useful :smile:\n",
        "createdAt": "2016-08-09T21:48:32Z",
        "updatedAt": "2016-08-09T21:48:32Z",
        "author": {
          "login": "brthor"
        }
      },
      {
        "body": "@brthor Great; that does reproduce the issue.\n\nThe exception occurs while running this command:\n`E:\\Projects\\cli\\.dotnet_stage0\\x64\\dotnet.exe E:\\Projects\\cli\\.dotnet_stage0\\x64\\sdk\\1.0.0-featmsbuild-003411\\MSBuild.exe /p:Architecture=x64 /t:InitializeCommonProps build.proj`\n\nHowever, if I replace the Microsoft.Build*.dll binaries under 1.0.0-featmsbuild-003411 with locally-built bits and run that command again it works.\n\nI notice that the original Microsoft.Build.\\* binaries under E:\\Projects\\cli.dotnet_stage0\\x64\\sdk\\1.0.0-featmsbuild-003411 are about twice as large as my locally-built bits. Are these actually NGEN'd bits (despite the lack of a .ni.dll suffix)? If so, how were they produced?\n\nNote that I know almost nothing about the dotnet CLI and its use, so I'll need a certain amount of hand-holding to understand how this is all supposed to work.\n",
        "createdAt": "2016-08-10T18:27:49Z",
        "updatedAt": "2016-08-10T18:27:49Z",
        "author": {
          "login": "tmeschter"
        }
      },
      {
        "body": "Indeed @tmeschter We do crossgen these bits. \n\nThey're produced here\nhttps://github.com/dotnet/cli/blob/feature/msbuild/build/Microsoft.DotNet.Cli.Compile.targets#L193\n\nFeel free to ping me with any questions on this :smile: \n",
        "createdAt": "2016-08-10T18:36:36Z",
        "updatedAt": "2016-08-10T18:36:36Z",
        "author": {
          "login": "brthor"
        }
      },
      {
        "body": "@brthor Does the CrossGen task produce .pdbs for these bits? Actually, any suggestions you have on how to debug through these bits would be helpful.\n",
        "createdAt": "2016-08-10T19:13:16Z",
        "updatedAt": "2016-08-10T19:13:16Z",
        "author": {
          "login": "tmeschter"
        }
      },
      {
        "body": "/cc @eerhardt \n\n@tmeschter In the past I haven't needed to do anything special for crossgen'd binaries besides pointing at the pdb in the VS debugger.\n\nDo you have the Pdbs for the binary which is already crossgend? It comes from the msbuild nuget package, but I'm not sure where symbols are published.\n",
        "createdAt": "2016-08-10T19:38:42Z",
        "updatedAt": "2016-08-10T19:38:42Z",
        "author": {
          "login": "brthor"
        }
      },
      {
        "body": "/cc @gkhanna79 @johnchen0 Can you provide some guidance here?\n\nThe error we're attempting to debug is\n`Native image cannot be loaded multiple times`\n",
        "createdAt": "2016-08-10T19:40:25Z",
        "updatedAt": "2016-08-10T19:42:28Z",
        "author": {
          "login": "brthor"
        }
      },
      {
        "body": "Can someone summarize the problem :) ?\n",
        "createdAt": "2016-08-10T19:43:25Z",
        "updatedAt": "2016-08-10T19:43:25Z",
        "author": {
          "login": "gkhanna79"
        }
      },
      {
        "body": "@gkhanna79 \n\nThe problem appears to be that ordering targets which invoke custom/builtin tasks in msbuild in a certain way produces an error that can only be reproduced when the MSBuild binaries are crossgend.\n\nThe error we're seeing is posted above but the interesting part is:\n`Native image cannot be loaded multiple times`\n\n@tmeschter Is working to debug the crossgend MSBuild bits and looking for any guidance on how to do the debugging there. \n",
        "createdAt": "2016-08-10T19:47:22Z",
        "updatedAt": "2016-08-10T19:47:22Z",
        "author": {
          "login": "brthor"
        }
      },
      {
        "body": "@brthor This issue doesn't repro if the MSBuild binaries are _not_ crossgend--is that an option for you?\n",
        "createdAt": "2016-08-10T22:47:55Z",
        "updatedAt": "2016-08-10T22:47:55Z",
        "author": {
          "login": "tmeschter"
        }
      },
      {
        "body": "I did some debugging and found what happened: MSBuild first loaded Microsoft.Build.Utilities.Core.dll using `AssemblyLoadContext.LoadFromAssemblyPath`. It then tried to load a type from Microsoft.Build.Tasks.Core.dll, which depends on Microsoft.Build.Utilities.Core.dll. While resolving this dependency, the runtime decides to reload Microsoft.Build.Utilities.Core.dll, probably because the previous load was in the wrong context. When Microsoft.Build.Utilities.Core.dll had been compiled by CrossGen, the second load was disallowed, since we don't allow multiple loads of a DLL containing native code, thus generating an error.\n\n@gkhanna79: How is `AssemblyLoadContext.LoadFromAssemblyPath` expected to interact with other types of assembly loads?\n",
        "createdAt": "2016-08-10T22:49:16Z",
        "updatedAt": "2016-08-10T22:49:16Z",
        "author": {
          "login": "JohnChen0"
        }
      },
      {
        "body": "@tmeschter \nThis would reduce the performance of dotnet build. Hopefully we could instead drive the bugfix in crossgen or msbuild (wherever it exists). Disabling it temporarily may be an option. \n\nThanks for the great info @JohnChen0\n",
        "createdAt": "2016-08-10T22:50:08Z",
        "updatedAt": "2016-08-10T22:50:08Z",
        "author": {
          "login": "brthor"
        }
      },
      {
        "body": "Based on @JohnChen0's analysis, this seems like an issue with CrossGen or the runtime. At least, it isn't clear to me what MSBuild could or should be doing differently\n",
        "createdAt": "2016-08-10T23:03:55Z",
        "updatedAt": "2016-08-10T23:03:55Z",
        "author": {
          "login": "tmeschter"
        }
      },
      {
        "body": "We will investigate what can be done from the runtime to prevent this issue, but this will take some time, and we don't yet know what are the possibilities. In the mean time, there are a couple of ways to unblock CLI build:\n- Use IL image for MSBuild, as @tmeschter suggested. (Probably enough to use IL image for just Microsoft.Build.Utilities.Core.dll, though I haven't tried it.)\n- Modify MSBuild's implementation of `AssemblyLoadContext.Resolve`, so it returns null if the target assembly is on the TPA list, instead of calling `AssemblyLoadContext.LoadFromAssemblyPath`. This should cause the runtime to load the assembly from TPA.\n",
        "createdAt": "2016-08-10T23:26:02Z",
        "updatedAt": "2016-08-10T23:26:02Z",
        "author": {
          "login": "JohnChen0"
        }
      },
      {
        "body": "@JohnChen0 What if MSBuild simply used the default `AssemblyLoadContext` rather than creating a derived type? It seems like that would keep all of the loads in the same context, and effectively avoid the issue.\n\n@AndyGerlicher @rainersigwald Do you know why we're creating our own `AssemblyLoadContext` rather than simply using the default? We could handle loading dependencies by hooking the `AssemblyLoadContext.Resolve` event.\n",
        "createdAt": "2016-08-11T14:33:48Z",
        "updatedAt": "2016-08-11T14:33:48Z",
        "author": {
          "login": "tmeschter"
        }
      },
      {
        "body": "The default `AssemblyLoadContext` is an abstract class, and thus can't be used directly. If MSBuild only loads assemblies from TPA, then it can rely on runtime's own assembly probing mechanism, and doesn't need to use `AssemblyLoadContext`. However, I suspect MSBuild needs to load assemblies from arbitrary paths specified by build projects, in which case it needs a derived `AssemblyLoadContext`. The recommendation is for its implementation of `AssemblyLoadContext` to distinguish between assemblies on the TPA and those not on the TPA, and only explicitly load assemblies not on the TPA.\n",
        "createdAt": "2016-08-11T14:40:16Z",
        "updatedAt": "2016-08-11T14:40:16Z",
        "author": {
          "login": "JohnChen0"
        }
      },
      {
        "body": "@JohnChen0 I meant could/should we just use the object returned by `AssemblyLoadContext.Default`.\n\nAnd yes, MSBuild needs to load assemblies from arbitrary paths, as well as locate those assemblies' dependencies.\n\nAlso, could you define \"TPA\"?\n",
        "createdAt": "2016-08-11T14:49:08Z",
        "updatedAt": "2016-08-11T14:50:11Z",
        "author": {
          "login": "tmeschter"
        }
      },
      {
        "body": "> Modify MSBuild's implementation of AssemblyLoadContext.Resolve\n\nNot `Resolve` event but `Load` override of custom AssemblyLoadContext should return null to allow the TPA (DefaultContext) binder to perform the bind.\n\n@tmeschter Think of TPA (Trusted Platform Assembly) list as the set of binaries that constitute the app (and thus, are referred to by their respective package entries in app.deps.json).\n\nIf all the assemblies that need to be loaded are known ahead of time, then ensure that they are part of the app and listed in app.deps.json. This will make them always be loaded from a single (Default) loadcontext.\n\nIf you do not know their path ahead of time BUT know that the ones that need to be loaded from a single context, then in your custom AssemblyLoadContext's Load override, check for the assembly and load it in the default Context using AssemblyLoadContext.Default.LoadFromAssemblyPath.\n",
        "createdAt": "2016-08-11T15:15:50Z",
        "updatedAt": "2016-08-11T15:15:50Z",
        "author": {
          "login": "gkhanna79"
        }
      },
      {
        "body": "@gkhanna79 Thanks; that is good to know.\n\nLet me ask a more general question: under what circumstances would it make sense to derive from `AssemblyLoadContext` rather than simply use `AssemblyLoadContext.Default` and hook the `Resolve` event to help find assemblies?\n",
        "createdAt": "2016-08-11T15:24:38Z",
        "updatedAt": "2016-08-11T15:24:38Z",
        "author": {
          "login": "tmeschter"
        }
      },
      {
        "body": "`AssemblyLoadContext` is about providing isolation to load same or different versions of a given assembly at runtime. Typically, developers do not have to worry about this. However, when dealing with scenarios like Plugin infrasturcture, the plugin infra needs to think about such issues and use AssemblyLoadContext to provide isolation for such loads.\n\nResolving event is a mechanism to enable a given load context have a fallback mechanism to point to assembly if one is not already loaded within the load context.\n\nThe specific issue you are running into is about attempting to load a given SharedFX assembly twice - this should not be required to be done since SharedFX is already part of the DefaultContext. Thus, you should consider returning null from the Load override.\n",
        "createdAt": "2016-08-11T16:22:21Z",
        "updatedAt": "2016-08-11T16:22:21Z",
        "author": {
          "login": "gkhanna79"
        }
      },
      {
        "body": "@gkhanna79 Can you define \"SharedFX\"? Is it the same as \"TPA\"?\n\nHow do I know if a given assembly is part of the SharedFX and/or TPA?\n",
        "createdAt": "2016-08-11T16:31:01Z",
        "updatedAt": "2016-08-11T16:31:01Z",
        "author": {
          "login": "tmeschter"
        }
      },
      {
        "body": "Yes, it is the same as TPA.\n\nYou can determine the path to the SharedFX and check if the assembly exists there or not. If not, then this is an app specific assembly and the Load override should know how to load it.\n",
        "createdAt": "2016-08-11T16:44:54Z",
        "updatedAt": "2016-08-11T16:44:54Z",
        "author": {
          "login": "gkhanna79"
        }
      },
      {
        "body": "Is there an API to get the path to the SharedFX?\n",
        "createdAt": "2016-08-11T17:16:32Z",
        "updatedAt": "2016-08-11T17:16:32Z",
        "author": {
          "login": "tmeschter"
        }
      },
      {
        "body": "> Is there an API to get the path to the SharedFX?\n\nThe way we get it in the CLI is using this code:\n\nhttps://github.com/dotnet/cli/blob/feature/msbuild/src/Microsoft.DotNet.Cli.Utils/Muxer.cs#L45\n\n```\n        public static string GetDataFromAppDomain(string propertyName)\n        {\n            var appDomainType = typeof(object).GetTypeInfo().Assembly?.GetType(\"System.AppDomain\");\n            var currentDomain = appDomainType?.GetProperty(\"CurrentDomain\")?.GetValue(null);\n            var deps = appDomainType?.GetMethod(\"GetData\")?.Invoke(currentDomain, new[] { propertyName });\n\n            return deps as string;\n        }\n\n        private bool TryResolveMuxerFromParentDirectories()\n        {\n            var fxDepsFile = GetDataFromAppDomain(\"FX_DEPS_FILE\");\n            if (string.IsNullOrEmpty(fxDepsFile))\n            {\n                return false;\n            }\n\n            var fxDir = new FileInfo(fxDepsFile).Directory\n```\n",
        "createdAt": "2016-08-11T17:19:43Z",
        "updatedAt": "2016-08-11T17:19:43Z",
        "author": {
          "login": "eerhardt"
        }
      },
      {
        "body": "Worth noting that @eerhardt 's posted solution requires you to be using the dotnet.exe host, and not corerun.\n",
        "createdAt": "2016-08-11T17:42:09Z",
        "updatedAt": "2016-08-11T17:42:22Z",
        "author": {
          "login": "brthor"
        }
      },
      {
        "body": "> and not corerun.\n\nI didn't think corerun supports the Shared FX at all. So yes, it can't can't be used with the code above.\n",
        "createdAt": "2016-08-11T17:44:55Z",
        "updatedAt": "2016-08-11T17:44:55Z",
        "author": {
          "login": "eerhardt"
        }
      },
      {
        "body": "My take away from all this is that there's basically no way to correctly implement an `AssemblyLoadContext` without some rather deep knowledge of the runtime environment.\n\nIf an `AssemblyLoadContext` should always/generally avoid loading an assembly that is part of the \"SharedFX\" and instead let the default context handle it, then that should be the default behavior. My `AssemblyLoadContext` shouldn't even be asked about it unless it opts out of that default.\n\nFurther, since the application gets to decide whether or not to crossgen assemblies, my library shouldn't have to think about them at all when loading an assembly.\n\nAt this point I think I'm probably going to remove MSBuild's `AssemblyLoadContext` in favor of using whatever is returned by `AssemblyLoadContext.Default` and hooking its `Resolve` method.\n",
        "createdAt": "2016-08-11T18:30:20Z",
        "updatedAt": "2016-08-11T18:30:20Z",
        "author": {
          "login": "tmeschter"
        }
      },
      {
        "body": "Is there any way general way to probe the TPA @gkhanna79 @JohnChen0 ?\n\nOnly looking in the sharedfx directory seems like it could be fragile in the long term, also doesn't the host also place the assemblies in the app's deps.json on TPA?\n",
        "createdAt": "2016-08-11T18:38:56Z",
        "updatedAt": "2016-08-11T18:38:56Z",
        "author": {
          "login": "brthor"
        }
      },
      {
        "body": "Do you want to chat before you make the change @tmeschter? It will be good to have context on why MSbuild had one in the first place and figure out the right next steps.\n\nAlso, you may run into https://github.com/dotnet/coreclr/issues/5837 with Resolving event, so lets chat on how you can achieve your intended goal.\n",
        "createdAt": "2016-08-11T18:46:50Z",
        "updatedAt": "2016-08-11T18:46:50Z",
        "author": {
          "login": "gkhanna79"
        }
      },
      {
        "body": "> Is there any way general way to probe the TPA @gkhanna79 @JohnChen0 ?\n\nUnless TRUSTED_PLATFORM_ASSEMBLIES property is published (like FX_DEPS_FILE), then no.\n",
        "createdAt": "2016-08-11T18:48:24Z",
        "updatedAt": "2016-08-11T18:48:24Z",
        "author": {
          "login": "gkhanna79"
        }
      },
      {
        "body": "@gkhanna79 MSBuild more or less copied the one from Roslyn: https://github.com/dotnet/roslyn/blob/d6f8dc441a1a3b749b5082579f582892236b1584/src/Compilers/Helpers/CoreClrAnalyzerAssemblyLoader.cs\n\nHowever, Roslyn no longer implements an `AssemblyLoadContext` either. It now simply grabs the existing one and hooks the `Resolving` event.\n\nThe MSBuild requirements are pretty simply. We need to be able to load assemblies from arbitrary file paths. We also need to be able to load their dependencies, which we assume are located immediately next to them (or are supplied by the app/system, in which case we shouldn't have to think about them at all). We _don't_ care about isolating one \"plug-in\" from another.\n",
        "createdAt": "2016-08-11T20:58:19Z",
        "updatedAt": "2016-08-11T20:58:19Z",
        "author": {
          "login": "tmeschter"
        }
      },
      {
        "body": "@tmeschter Roslyn is actually creating its own LoadContext (see https://github.com/dotnet/roslyn/blob/56f605c41915317ccdb925f66974ee52282609e7/src/Scripting/Core/Hosting/AssemblyLoader/CoreAssemblyLoaderImpl.cs#L37) and using its Load override to override what the DefaultContext may return.\n\n> We need to be able to load assemblies from arbitrary file paths\n\nDo you know these paths ahead of time? Also, are you going to run against .NET Core RTM or using the CoreCLR that comes from CoreCLR master (since that will determine whether you need to workaround the Resolving bug or not)?\n",
        "createdAt": "2016-08-11T23:37:41Z",
        "updatedAt": "2016-08-11T23:37:41Z",
        "author": {
          "login": "gkhanna79"
        }
      },
      {
        "body": "@gkhanna79 That implementation of `AssemblyLoadContext` is solely for scripting scenarios (e.g. csi.exe/C# Interactive Window); it is not used in the C# or VB compilers themselves.\n\nThe paths are not known ahead of time.\n\nI don't know if we're going to run against .NET Core RTM or the CoreCLR from CoreCLR master.\n\nWould this be another option: have our `AssemblyLoadContext` forward all load requests the default context, and only try to resolve an assembly if the default context can't? I'm not sure how that would differ from simply hooking the `Resolving` event on the default context, but maybe there's something I'm missing.\n",
        "createdAt": "2016-08-18T20:25:19Z",
        "updatedAt": "2016-08-18T20:25:19Z",
        "author": {
          "login": "tmeschter"
        }
      },
      {
        "body": "> have our AssemblyLoadContext forward all load requests the default context, and only try to resolve an assembly if the default context can't?\n\nThis sounds reasonable approach, by doing something like AssemblyLoadContext.Default.LoadFrom\\* in the Load override of your LoadContext implementation.\n",
        "createdAt": "2016-08-19T17:03:59Z",
        "updatedAt": "2016-08-19T17:03:59Z",
        "author": {
          "login": "gkhanna79"
        }
      },
      {
        "body": "@gkhanna79 One issue with that approach is that I need to catch all exceptions that arise from AssemblyLoadContext.Default.LoadFrom\\* and ignore them, and then move on to checking the paths specific to my loader. Doable, but a bit ugly.\n\nI also tried simply hooking the `Resolving` event of the `AssemblyLoadContext.Default` instance, with the handler locating the assembly and then calling `AssemblyLoadContext.Default.LoadFromAssemblyPath`. This works to the extent that I can find and load the assembly, but then immediately dies with an `ExecutionEngineException` as soon as we try to execute any code in the new assembly. Any idea about that one?\n",
        "createdAt": "2016-08-22T21:45:39Z",
        "updatedAt": "2016-08-22T21:45:39Z",
        "author": {
          "login": "tmeschter"
        }
      },
      {
        "body": "@brthor Assuming I can produce MSBuild bits with a fix, how should I go about updating the repro to test those new bits?\n",
        "createdAt": "2016-08-22T21:50:26Z",
        "updatedAt": "2016-08-22T21:50:26Z",
        "author": {
          "login": "tmeschter"
        }
      },
      {
        "body": "Patching the msbuild binaries under stage0 that gets downloaded as a part of the build under `.dotnet_stage0/sdk/...` should do it.\n\nThey'll also need to be crossgen'd which means you'll need to run that tool. Alternatively we can wait for cli to pick up the new version and the stage0 will get the latest bits.\n",
        "createdAt": "2016-08-22T22:00:37Z",
        "updatedAt": "2016-08-22T22:01:53Z",
        "author": {
          "login": "brthor"
        }
      },
      {
        "body": "@brthor  You mean `.dotnet_stage0/x64/sdk`, for example? Since those are crossgen'd binaries, how do I patch them?\n",
        "createdAt": "2016-08-22T22:42:33Z",
        "updatedAt": "2016-08-22T22:42:33Z",
        "author": {
          "login": "tmeschter"
        }
      },
      {
        "body": "yes that is the directory i mean. You'll need to crossgen the binaries you are placing there. That is required to get the repro at all right?\n",
        "createdAt": "2016-08-22T23:05:50Z",
        "updatedAt": "2016-08-22T23:05:50Z",
        "author": {
          "login": "brthor"
        }
      },
      {
        "body": "> dies with an ExecutionEngineException as soon as we try to execute any code in the new assembly.\n> @tmeschter This is the issue [https://github.com/dotnet/coreclr/issues/5837] I mentioned in the thread above. To workaround this is why you will need to catch the exception in your Load override.\n",
        "createdAt": "2016-08-22T23:25:45Z",
        "updatedAt": "2016-08-22T23:25:45Z",
        "author": {
          "login": "gkhanna79"
        }
      },
      {
        "body": "@brthor Yes, the binaries have to be crossgen'd for the problem to repro.\n\nHow can I find the command line that was used to produce the crossgen'd MSBuild binaries? Otherwise I'm just going to be guessing about what arguments to pass to crossgen.exe.\n",
        "createdAt": "2016-08-23T16:18:50Z",
        "updatedAt": "2016-08-23T16:18:50Z",
        "author": {
          "login": "tmeschter"
        }
      },
      {
        "body": "@brthor packages versioned `0.1.0-preview-00033-160829` should have the theoretical fix. I think @tmeschter was trying to validate that it worked, but from our (offline) conversation you might be willing to take them already.\n",
        "createdAt": "2016-08-29T23:42:12Z",
        "updatedAt": "2016-08-29T23:42:12Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "We have an important PR failing due to this issue. I'm about to try taking the build referenced by @rainersigwald to see if it fixes.\n",
        "createdAt": "2016-08-30T17:25:49Z",
        "updatedAt": "2016-08-30T17:25:49Z",
        "author": {
          "login": "TheRealPiotrP"
        }
      },
      {
        "body": "We ended up side-stepping this issue and not validating the fix at the moment. We needed to get a PR through and taking a new MSBuild requires a separate PR into CLI. We'll keep an eye out for this issue.\n",
        "createdAt": "2016-08-31T00:30:28Z",
        "updatedAt": "2016-08-31T00:30:28Z",
        "author": {
          "login": "TheRealPiotrP"
        }
      },
      {
        "body": "@naamunds is hitting this issue with some local changes to cli\n",
        "createdAt": "2016-09-15T22:13:28Z",
        "updatedAt": "2016-09-15T22:14:02Z",
        "author": {
          "login": "brthor"
        }
      },
      {
        "body": "Here are some more details about the scenario in which I see this issue.\n- I'm doing a local of build of the dotnet/cli repo, using the latest MSBuild version in that repo (0.1.0-preview-00038-160914).\n- I'm building my changes in https://github.com/dotnet/cli/pull/4191.\n- In addition to those changes, I removed \"Test\" from the build targets in build.proj to make the build get to the Publish step quicker and because I've sometimes been seeing unrelated errors in the Test target.\n- The error occurs both when doing a clean build (with `git clean -xdf` before building) and when not doing a clean build.\n\n> Time Elapsed 00:11:27.72\n> \n> MSBUILD : error MSB1025: An internal failure occurred while running MSBuild.\n> \n> Unhandled Exception: System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation. ---> System.IO.FileLoadException: Native image cannot be loaded multiple times\n>    at System.Diagnostics.StackTraceSymbols..ctor()\n>    --- End of inner exception stack trace ---\n>    at System.RuntimeTypeHandle.CreateInstance(RuntimeType type, Boolean publicOnly, Boolean noCheck, Boolean& canBeCached, RuntimeMethodHandleInternal& ctor, Boolean& bNeedSecurityCheck)\n>    at System.RuntimeType.CreateInstanceSlow(Boolean publicOnly, Boolean skipCheckThis, Boolean fillCache, StackCrawlMark& stackMark)\n>    at System.Activator.CreateInstance(Type type, Boolean nonPublic)\n>    at System.Activator.CreateInstance(Type type)\n>    at System.Diagnostics.StackFrameHelper.InitializeSourceInfo(Int32 iSkip, Boolean fNeedFileInfo, Exception exception)\n>    at System.Diagnostics.StackTrace.CaptureStackTrace(Int32 iSkip, Boolean fNeedFileInfo, Thread targetThread, Exception e)\n>    at System.Diagnostics.StackTrace..ctor(Exception e, Boolean fNeedFileInfo)\n>    at System.Environment.GetStackTrace(Exception e, Boolean needFileInfo)\n>    at System.Exception.GetStackTrace(Boolean needFileInfo)\n>    at System.Exception.ToString(Boolean needFileLineInfo, Boolean needMessage)\n>    at System.Exception.ToString(Boolean needFileLineInfo, Boolean needMessage)\n>    at Microsoft.Build.CommandLine.MSBuildApp.Execute(String[] commandLine)\n>    at Microsoft.Build.CommandLine.MSBuildApp.Main(String[] args)\n> Failed to build\n> At C:\\Repos\\cli\\run-build.ps1:79 char:31\n> -     if($LASTEXITCODE -ne 0) { throw \"Failed to build\" }\n> -                               ~~~~~~~~~~~~~~~~~~~~~~~\n>   - CategoryInfo          : OperationStopped: (Failed to build:String) [], RuntimeException\n>   - FullyQualifiedErrorId : Failed to build\n",
        "createdAt": "2016-09-16T20:31:00Z",
        "updatedAt": "2016-09-16T20:31:00Z",
        "author": {
          "login": "naamunds"
        }
      },
      {
        "body": "I'm seeing the same issue on a clean local build when synced to rel/1.0.0 of cli (commit 4400b3be) without any local changes.\n",
        "createdAt": "2016-09-16T21:49:22Z",
        "updatedAt": "2016-09-16T21:50:55Z",
        "author": {
          "login": "naamunds"
        }
      },
      {
        "body": "Since this only repros when the MSBuild binaries have been CrossGen'd, I need to be able to do that in order to properly test any potential fix. Until I get detailed instructions on how to do that I'm effectively blocked from further progress on this issue.\n",
        "createdAt": "2016-09-20T22:05:34Z",
        "updatedAt": "2016-09-20T22:05:34Z",
        "author": {
          "login": "tmeschter"
        }
      },
      {
        "body": "@tmeschter - see the following build scripts that we use to crossgen all of the assemblies in the CLI:\n\nMSBuild Crossgen Task:\nhttps://github.com/dotnet/cli/blob/rel/1.0.0/build_projects/dotnet-cli-build/Crossgen.cs\n\nInitCrossgenProps Target:\nhttps://github.com/dotnet/cli/blob/rel/1.0.0/build/crossgen/Microsoft.DotNet.Cli.Crossgen.targets\n\nInvoking the Crossgen Task:\nhttps://github.com/dotnet/cli/blob/rel/1.0.0/build/Microsoft.DotNet.Cli.Compile.targets#L193-L201\n",
        "createdAt": "2016-09-20T22:13:18Z",
        "updatedAt": "2016-09-20T22:13:18Z",
        "author": {
          "login": "eerhardt"
        }
      },
      {
        "body": "Coreclr also looks to have some docs \n\nhttps://github.com/dotnet/coreclr/blob/master/Documentation/building/crossgen.md\n\n\ud83d\udc4d \n",
        "createdAt": "2016-09-20T22:18:44Z",
        "updatedAt": "2016-09-20T22:18:44Z",
        "author": {
          "login": "brthor"
        }
      },
      {
        "body": "@naamunds I'm unable to repro this when building your changes in dotnet/cli#4191. I did the following:\n1. Checked out your commit (95f0141).\n2. `git clean -xdf`\n3. Updated build.proj to remove \"Test\" from the CLITargets property.\n4. `.\\build.cmd`\n\nIt takes a while, but the command completes successfully.\n",
        "createdAt": "2016-09-22T20:50:15Z",
        "updatedAt": "2016-09-22T20:50:15Z",
        "author": {
          "login": "tmeschter"
        }
      },
      {
        "body": "@tmeschter I investigated this a little more and found that the error only occurs in my repro when the publish step is executed.  For this to happen on a local build, you'll need to set four environment variables:\n`set PUBLISH_TO_AZURE_BLOB=1`\n`set STORAGE_ACCOUNT=<Azure Storage account name>`\n`set STORAGE_CONTAINER=<Azure Storage container name>`\n`set STORAGE_KEY=<Azure Storage account access key>`\n\nYou can use an Azure Storage account in a personal Azure subscription (e.g. your MSDN subscription).\n\nTo re-run the build with the same Storage info, you'll also need to set the following environment variable:\n`set OverwriteOnPublish=true`\n",
        "createdAt": "2016-09-23T18:32:58Z",
        "updatedAt": "2016-09-23T18:36:13Z",
        "author": {
          "login": "naamunds"
        }
      },
      {
        "body": "Also, because of a recent breaking change, you'll need to instead use commit `88a1bdd6` (or later).\n",
        "createdAt": "2016-09-23T18:35:38Z",
        "updatedAt": "2016-09-23T18:35:38Z",
        "author": {
          "login": "naamunds"
        }
      },
      {
        "body": "@naamunds Thanks, I'll give that a try.\n",
        "createdAt": "2016-09-23T19:34:22Z",
        "updatedAt": "2016-09-23T19:34:22Z",
        "author": {
          "login": "tmeschter"
        }
      },
      {
        "body": "@naamunds @brthor I'm not convinced this is still the same issue. Even if it is, I don't think there's much we can do about it on the MSBuild side since we're not participating in this assembly load and have no control over it.\n\nMy assessment of the situation is that there's no safe way to use CrossGen'd images and custom `AssemblyLoadContext`s in the same program due to bug https://github.com/dotnet/coreclr/issues/6695.\n\nI may yet try to eliminate MSBuild's use of a custom `AssemblyLoadContext`, but I'm not 100% sure it will help here.\n",
        "createdAt": "2016-09-23T22:43:10Z",
        "updatedAt": "2016-09-23T22:43:10Z",
        "author": {
          "login": "tmeschter"
        }
      }
    ]
  }
}