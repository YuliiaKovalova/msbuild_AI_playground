{
  "number": 6753,
  "title": "Deadlock when a task writes to stdout and node reuse is enabled",
  "body": "### Issue Description\r\n\r\nMSBuild deadlocks when:\r\n\r\n* Executes on macOS (probably linux as well, but probably not Windows)\r\n* A task writes a lot of output to stdout and/or stderr\r\n* This happens in the msbuild server\r\n* 'dotnet build' launched that server\r\n\r\n### Steps to Reproduce\r\n\r\nProject file:\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<Project DefaultTargets=\"Build\" ToolsVersion=\"4.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\r\n\r\n<UsingTask TaskName=\"Hello\"\r\n    TaskFactory=\"RoslynCodeTaskFactory\"\r\n    AssemblyFile=\"$(MSBuildToolsPath)\\Microsoft.Build.Tasks.Core.dll\" >\r\n  <ParameterGroup />\r\n  <Task>\r\n    <Code Type=\"Fragment\" Language=\"cs\"><![CDATA[\r\n        var str = \"Hello, world!\";\r\n        for (int i = 0; i < 100000; i++) {\r\n            Console.WriteLine (str);\r\n        }\r\n        ]]>\r\n    </Code>\r\n  </Task>\r\n</UsingTask>\r\n\r\n<Target Name=\"Build\">\r\n  <Hello />\r\n</Target>\r\n</Project>\r\n```\r\n\r\nSave the project file (say to `test.proj`), and execute this:\r\n\r\n```shell\r\n$ dotnet build-server shutdown \r\n$ MSBUILDNOINPROCNODE=1 dotnet build test.proj\r\nMicrosoft (R) Build Engine version 17.0.0-preview-21403-01+1b4b5fb96 for .NET\r\nCopyright (C) Microsoft Corporation. All rights reserved\r\n[ ... nothing happens ... ]\r\n```\r\n\r\nTrying without `MSBUILDNOINPROCNODE=1`:\r\n\r\n```shell\r\n$ dotnet build test.proj\r\nMicrosoft (R) Build Engine version 17.0.0-preview-21403-01+1b4b5fb96 for .NET\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\nHello, world!\r\nHello, world!\r\nHello, world!\r\n...\r\nHello, world!\r\nHello, world!\r\nHello, world!\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:00:00.95\r\n```\r\n\r\nI looked at the code here: https://github.com/dotnet/msbuild/blob/62c6327acdca6af0a2402fd491f91ba5e88d0ede/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs#L495-L501\r\n\r\nand it doesn't look like the StandardOutput/StandardError streams are ever read from. This can cause a deadlock, as described in the remarks section here: https://docs.microsoft.com/en-us/dotnet/api/system.diagnostics.processstartinfo.redirectstandardoutput?view=net-5.0#remarks\r\n\r\nThe redirection was implemented here: https://github.com/dotnet/msbuild/commit/dc10ceafe75cdfb01507b63b29a1ecbc7391a8bd, which refers to https://github.com/dotnet/roslyn/pull/23805, which raises this as a concern: https://github.com/dotnet/roslyn/pull/23805/files#r157562697.\r\n\r\nThe code in `NodeProviderOutOfProcBase.cs` also gave me the idea to try with `MSBUILDENSURESTDOUTFORTASKPROCESSES=1`, and that works just fine:\r\n\r\n```shell\r\n$ MSBUILDENSURESTDOUTFORTASKPROCESSES=1 MSBUILDNOINPROCNODE=1 dotnet build test.proj\r\nMicrosoft (R) Build Engine version 17.0.0-preview-21403-01+1b4b5fb96 for .NET\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\nHello, world!\r\nHello, world!\r\nHello, world!\r\n...\r\nHello, world!\r\nHello, world!\r\nHello, world!\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:00:01.20\r\n```\r\n\r\n```shell\r\n$ dotnet --version\r\n6.0.100-rc.1.21405.1\r\n```",
  "state": "OPEN",
  "createdAt": "2021-08-12T12:30:29Z",
  "updatedAt": "2024-01-31T08:20:44Z",
  "closedAt": null,
  "author": {
    "login": "rolfbjarne"
  },
  "labels": [
    "bug",
    "has-repro",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "/cc @rainersigwald ",
        "createdAt": "2021-08-12T15:26:50Z",
        "updatedAt": "2021-08-12T15:26:50Z",
        "author": {
          "login": "akoeplinger"
        }
      },
      {
        "body": "Hmm. I wonder if we can just call `BeginOutputReadLine`/`BeginErrorReadLine` and not hook up a delegate to do anything with the data.\r\n\r\nIf we close stdout in worker-node startup, would that break people who call `Console.WriteLine` in a plugin?",
        "createdAt": "2021-08-12T16:18:37Z",
        "updatedAt": "2021-08-12T16:18:37Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Team Triage: Thanks for filing the issue, how common is this scenario you're running into?",
        "createdAt": "2021-08-12T16:20:46Z",
        "updatedAt": "2021-08-12T16:20:46Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "We could also consider (when not in `EnsureStdOutForTaskProcesses` mode) that we set\r\n\r\n```C#\r\nConsole.SetOut(StreamWriter.Null);\r\nConsole.SetError(StreamWriter.Null);\r\n```",
        "createdAt": "2021-08-12T16:28:18Z",
        "updatedAt": "2021-08-12T16:28:18Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Also, is there a particular task that you're seeing that's badly-behaved in this way? They should be logging instead of writing to stdout.",
        "createdAt": "2021-08-12T16:33:30Z",
        "updatedAt": "2021-08-12T16:33:30Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> Also, is there a particular task that you're seeing that's badly-behaved in this way? They should be logging instead of writing to stdout.\r\n\r\nIt's an issue with `MergeAppBundles` task in Xamarin. I kind of expected this suggestion. It's possible to wire up the logging but requires a few small refactorings.\r\n\r\nNevertheless the subtlety of the behavior and the resulting deadlock is quite unexpected.\r\n\r\n> how common is this scenario you're running into?\r\n\r\nThe particular task writes a lot of diagnostic output to console. For sufficiently big app I hit the bug in about 95% of the builds.\r\n\r\nThe task itself was added in .NET 6 Preview 7 and it is only used when building macOS/iOS universal apps (ie. targeting more than one architecture). It is likely that it would hit sizable number of people when it goes out of preview.\r\n",
        "createdAt": "2021-08-12T17:42:49Z",
        "updatedAt": "2021-08-12T17:47:16Z",
        "author": {
          "login": "filipnavara"
        }
      },
      {
        "body": "> Nevertheless the subtlety of the behavior and the resulting deadlock is quite unexpected.\r\n\r\nAgreed: we should totally fix this! But also ideally use logging in the task :) Note that even when we fix this, the stdout of the worker nodes will go to `/dev/null`, not any console.",
        "createdAt": "2021-08-12T18:07:48Z",
        "updatedAt": "2021-08-12T18:07:48Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Fixing the particular Xamarin task is doable. I am willing to take a stab at it. However, this was only the tip of the iceberg that tripped the behavior because it had too much output. There's potentially more similar issues so fixing it at MSBuild side would be greatly appreciated.",
        "createdAt": "2021-08-12T18:11:50Z",
        "updatedAt": "2021-08-12T18:11:50Z",
        "author": {
          "login": "filipnavara"
        }
      },
      {
        "body": "> Agreed: we should totally fix this!\r\n\r\nGreat!\r\n\r\n> But also ideally use logging in the task :)\r\n\r\nAgreed. \r\n\r\nI believe it's also possible to hit this behavior if a task executes another process, doesn't capture stdout/stderr, and that other process writes to stdout/stderr. You could still argue that the task should then capture stdout/stderr from the other process (and redirect to logging), but a plausible explanation could be that the other process doesn't usually write anything, but one day might run into an error condition, and then dumps a lot of information to stderr.\r\n\r\n> Note that even when we fix this, the stdout of the worker nodes will go to `/dev/null`, not any console.\r\n\r\nThat's totally fine.\r\n\r\n> Hmm. I wonder if we can just call `BeginOutputReadLine`/`BeginErrorReadLine` and not hook up a delegate to do anything with the data.\r\n\r\nI don't see why that wouldn't work, it doesn't matter what you do with the output, you just have to read it.\r\n\r\n> If we close stdout in worker-node startup, would that break people who call `Console.WriteLine` in a plugin?\r\n\r\nOne (admittedly far fetched) failure scenario: someone tries to open stdout, fails unexpectedly (because who considers that opening stdout can fail?), and ends up throwing an exception.\r\n",
        "createdAt": "2021-08-13T09:37:23Z",
        "updatedAt": "2021-08-13T09:37:23Z",
        "author": {
          "login": "rolfbjarne"
        }
      },
      {
        "body": "@rolfbjarne is this something you can work around in macios tasks for now?  We think this might be the root cause of all of our MAUI CI builds hanging on our own agents, so really blocking for us right now.",
        "createdAt": "2021-08-17T02:12:23Z",
        "updatedAt": "2021-08-17T02:12:23Z",
        "author": {
          "login": "Redth"
        }
      },
      {
        "body": "@Redth you'd only run into this with our task if you're building an app for more than one iOS runtime identifier (by setting `RuntimeIdentifiers=ios-arm64;ios-arm` for instance). Is that what you're doing?",
        "createdAt": "2021-08-17T06:14:08Z",
        "updatedAt": "2021-08-17T06:14:08Z",
        "author": {
          "login": "rolfbjarne"
        }
      },
      {
        "body": "I think we are explicitly setting just one.\r\n\r\nI'm going to try remove projects and see.",
        "createdAt": "2021-08-17T15:59:50Z",
        "updatedAt": "2021-08-17T16:12:13Z",
        "author": {
          "login": "mattleibow"
        }
      },
      {
        "body": "> I believe it's also possible to hit this behavior if a task executes another process, doesn't capture stdout/stderr, and that other process writes to stdout/stderr.\r\n\r\nI believe we ran into this again in a totally different way:\r\n\r\nWe set the `MONO_ENV_OPTIONS=--trace=E:all` environment variable (to ask mono to print every exception to stdout/stderr), and that ended up hanging msbuild in the same way (randomly).\r\n",
        "createdAt": "2022-03-30T08:33:17Z",
        "updatedAt": "2022-03-30T08:33:32Z",
        "author": {
          "login": "rolfbjarne"
        }
      }
    ]
  }
}