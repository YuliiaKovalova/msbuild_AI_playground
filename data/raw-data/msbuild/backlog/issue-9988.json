{
  "number": 9988,
  "title": "Check performance with/without analyzers.",
  "body": "Context\r\nWhen analyzers are disabled ('/analyze' not passed on command line) there should be no to minimal impact on the build perf. There should be an acceptable overhead for when the analyzers are enabled.\r\n\r\n\r\nGoals\r\n- Check the performance of current state (with and without analyzers).",
  "state": "CLOSED",
  "createdAt": "2024-04-10T13:16:36Z",
  "updatedAt": "2024-04-29T06:26:06Z",
  "closedAt": "2024-04-24T15:27:30Z",
  "author": {
    "login": "AR-May"
  },
  "labels": [
    "triaged",
    "Area: BuildCheck"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "AR-May"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "I have checked on our automated tests in PerfStar and I do not notice any regression without the analyzers on. \r\n\r\nAs for the run of tests with analyzers, I see insignificant regression (0.4% with previous CI run and 1.4% with 30-days mean) which is on the top edge of the possible variance. \r\n\r\nI would say it is an acceptable overhead for the new capabilities. However, not many analyzers are implemented, so it is expected that the overhead would not be high at this moment of development.\r\n\r\nTODO: run manual perf tests on bigger repositories.",
        "createdAt": "2024-04-10T13:37:10Z",
        "updatedAt": "2024-04-10T13:37:10Z",
        "author": {
          "login": "AR-May"
        }
      },
      {
        "body": "FYI @baronfel ",
        "createdAt": "2024-04-10T20:45:59Z",
        "updatedAt": "2024-04-10T20:45:59Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "This is an encouraging result! Can you link to the perfstar runs/charts here for posterity?",
        "createdAt": "2024-04-10T20:47:21Z",
        "updatedAt": "2024-04-10T20:47:21Z",
        "author": {
          "login": "baronfel"
        }
      },
      {
        "body": "I have some screenshots:\r\n![image](https://github.com/dotnet/msbuild/assets/67507805/3fc0dee2-ae97-4f4c-a4e7-12245492b788)\r\n![image](https://github.com/dotnet/msbuild/assets/67507805/2424104f-3437-4335-81c3-b91c5cca28dd)\r\n",
        "createdAt": "2024-04-18T13:15:40Z",
        "updatedAt": "2024-04-18T13:15:40Z",
        "author": {
          "login": "AR-May"
        }
      },
      {
        "body": " @JanKrivanek checked current main: ran msbuild on OC and console app solutions with and without analyzers.\r\n\r\nOC rebuild | with analyzers | without analyzers\r\n-- | -- | --\r\nmedian | 85053 | 73716\r\nmean | 88154 | 77364\r\n\u00a0 | \u00a0 | \u00a0\r\nconsole app rebuild | with analyzers | without analyzers\r\nmedian | 8982 | 8912\r\nmean | 8969 | 8915\r\n\r\nFor small solutions overhead is small, but for bigger one it is quite noticeable. \r\n",
        "createdAt": "2024-04-24T08:47:44Z",
        "updatedAt": "2024-04-24T08:47:44Z",
        "author": {
          "login": "AR-May"
        }
      },
      {
        "body": "Oh - that is almost 14% :-O\r\nDo we have any mid or larger size solution in the batter of repos in PerfStar? It's be nice to be able to catch those slowdowns autmatically.\r\n\r\nAs for now - we'll likely need a measurement of OC build \r\n * with `MSBUILDLOGPROPERTIESANDITEMSAFTEREVALUATION` env variable set system wide to \"1\" (this is required by the analyzers currently to provide data for analysis).\r\n * with the sole analyzer turned off - https://github.com/dotnet/msbuild/blob/d542f3a80101883083b95fff0b67666b63002751/src/Build/BuildCheck/Analyzers/SharedOutputPathAnalyzer.cs#L20 `IsEnabled` set to `false`. So that we can disect the impact of infra and the analyzer.\r\n\r\n@AR-May - can you create items and handle those?\r\n\r\nIt'd be good to test on a version without editorconfig changes (https://github.com/dotnet/msbuild/pull/9811) merged - as that will bring yet another big variable to the perf equation.\r\nIt might be interesting to test with https://github.com/dotnet/msbuild/pull/10016 (once it's finlized) - as it'd get the tracing a good test-drive (with ability to compare the results reported by TracingModule and actual 'wall clock time measurements') - FYI @maridematte (you might want to team up with @AR-May on this)",
        "createdAt": "2024-04-24T09:17:40Z",
        "updatedAt": "2024-04-24T09:17:40Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "> Do we have any mid or larger size solution in the batter of repos in PerfStar? It's be nice to be able to catch those slowdowns automatically.\r\n\r\nThey are currently broken; we have an issue to fix them: https://devdiv.visualstudio.com/DevDiv/_workitems/edit/1896972\r\n\r\nI will create items and investigate further the source of this perf issue. I agree that's a big difference.\r\n\r\n> It'd be good to test on a version without editorconfig changes (https://github.com/dotnet/msbuild/pull/9811) merged - as that will bring yet another big variable to the perf equation.\r\n\r\neditorconfig changes are not yet merged, so I tested without them.\r\n",
        "createdAt": "2024-04-24T10:53:20Z",
        "updatedAt": "2024-04-24T10:53:28Z",
        "author": {
          "login": "AR-May"
        }
      },
      {
        "body": "> with MSBUILDLOGPROPERTIESANDITEMSAFTEREVALUATION env variable set system wide to \"1\"\r\n\r\nDone, here it is. Does not explain the difference in ~10 seconds of the build time.\r\n```\r\nTime Elapsed 00:01:32.61\r\nMSBuild.SharedOutputPathAnalyzer: 00:00:00.0213450\r\n```",
        "createdAt": "2024-04-24T11:25:55Z",
        "updatedAt": "2024-04-24T11:25:55Z",
        "author": {
          "login": "AR-May"
        }
      },
      {
        "body": "> with the sole analyzer turned off\r\n\r\nI turned off the analyzer and ran again with `/analyze` and without. Also ran a baseline with commit https://github.com/dotnet/msbuild/commit/fc97b2d1f7c2309d0069dfbd4ab73e4779ad6989\r\n\r\nResults:\r\n\r\nOC rebuild | with analyze | without analyze | baseline\r\n-- | -- | -- | --\r\nmedian | 81445 | 71151 | 72182\r\nmean | 82251.14286 | 73447.57143 | 71997\r\n\r\nIt seems like most of the perf overhead lays in the infra part and not in the only analyzer.\r\nThe baseline and run without `/analyze` are same, difference is withing the variance.",
        "createdAt": "2024-04-24T13:11:28Z",
        "updatedAt": "2024-04-24T13:33:06Z",
        "author": {
          "login": "AR-May"
        }
      },
      {
        "body": "With @maridematte changes:\r\n\r\n```\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:01:30.07\r\nBuildCheck run times\r\n\r\nInfrastructure run times\r\nanalyzerAcquisitionTime,00:00:00\r\nanalyzerSetDataSourceTime,00:00:00.0000075\r\nnewProjectAnalyzersTime,00:00:00.0001385\r\n\r\nAnalyzer run times\r\nMSBuild.SharedOutputPathAnalyzer,00:00:00.0153347\r\n```",
        "createdAt": "2024-04-24T14:36:48Z",
        "updatedAt": "2024-04-24T14:37:08Z",
        "author": {
          "login": "AR-May"
        }
      },
      {
        "body": "Closing this issue - we measured the perf. \r\nCreated a new one to investigate (and hopefully fix) the perf issue. ",
        "createdAt": "2024-04-24T15:27:30Z",
        "updatedAt": "2024-04-24T15:27:30Z",
        "author": {
          "login": "AR-May"
        }
      }
    ]
  }
}