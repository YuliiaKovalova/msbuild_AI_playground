{
  "number": 1598,
  "title": "GetItemProvenance matches items outside the project cone with globs inside",
  "body": "GetItemProvenance is currently matching items from outside of the project cone with globs that are purely within the project cone.\r\n\r\n```XML\r\n<Project>\r\n  <ItemGroup>\r\n    <Compile Include=\"**/*.cs\" /> <!-- Inside the project cone -->\r\n    <Compile Include=\"../shared/Class1.cs\"> <!-- Outside the project cone -->\r\n      <Link>Class1.cs</Link>\r\n    </Compile>\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\n``` CSharp\r\nvar provenance = project.GetItemProvenance(\"../shared.Class1.cs\", \"Compile\");\r\nAssert.Equal(1, provenance.Count); // False! it is 2.\r\nAssert.Equal(Provenance.StringLiteral, provenance[0].Provenance); // False! Provenance.Glob, from the \"**/*.cs\" glob\r\n```",
  "state": "CLOSED",
  "createdAt": "2017-01-21T01:35:24Z",
  "updatedAt": "2024-02-21T17:22:37Z",
  "closedAt": "2017-01-27T02:13:00Z",
  "author": {
    "login": "jviau"
  },
  "labels": [
    "bug",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "cdmihai"
      }
    ]
  },
  "milestone": {
    "title": "Visual Studio 15 RTW"
  },
  "comments": {
    "nodes": [
      {
        "body": "This is because regex matching does not attempt to interpret neither the glob nor the matching string as a path. Currently, path aware comparison of strings is only attempted when the item fragment is a literal value and not a glob.\r\n\r\nFor this to work with globs, we'd have to change today's plain string regex matching with a path aware regex matching. This means parsing the strings into path-aware entities such as base directory parts, globbing parts, etc and then defining a more complex matching algorithm based on these structural entities.\r\n\r\nAlso, there might be queries that cannot be unambiguous without actually hitting the disk and expanding the glob. One example is when the glob escapes the project's cone, such as `Include=\"**/../../**/*.cs\"`. Depending on the actual file system layout, `GetItemProvenance(\"a.cs\")` might or might not hit the Include.",
        "createdAt": "2017-01-21T20:57:04Z",
        "updatedAt": "2017-01-21T21:02:52Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "Good news, `..` after `**` is actually considered illegal by msbuild. That's one way to solve the issue :)\r\n\r\nThis leaves the case of widened cones (e.g. `Include=\"../**/*.cs\"`), but these are easy to reason about and don't require hitting the disk",
        "createdAt": "2017-01-21T21:27:57Z",
        "updatedAt": "2017-01-21T21:30:32Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "It appears that this bug is also the cause for another bug: \r\n`<I Include=\"..\\a.foo\" Exclude=\"**\\*.foo\"/>` excludes `..\\a.foo` in xplat, but didn't in dev14.",
        "createdAt": "2017-01-25T21:52:25Z",
        "updatedAt": "2017-01-25T21:52:25Z",
        "author": {
          "login": "cdmihai"
        }
      }
    ]
  }
}