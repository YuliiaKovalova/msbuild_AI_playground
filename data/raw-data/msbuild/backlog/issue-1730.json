{
  "number": 1730,
  "title": "[Discussion] Clean up sln (VisualStudio solution) files",
  "body": "_From @chrisaut on February 21, 2017 4:32_\n\nNow that the csproj files are ```somewhat``` clean, are there plans to similarly clean up .sln files?\r\n\r\nA sample solution with just two projects looks like this today:\r\n\r\n```\r\nMicrosoft Visual Studio Solution File, Format Version 12.00\r\n# Visual Studio 15\r\nVisualStudioVersion = 15.0.26206.0\r\nMinimumVisualStudioVersion = 10.0.40219.1\r\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"coreDemo\", \"coreDemo\\coreDemo.csproj\", \"{1A6AEDEC-9638-465A-9EEE-7CC718C12DED}\"\r\nEndProject\r\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"netStdLib\", \"netStdLib\\netStdLib.csproj\", \"{EEE8E2FD-7DAF-4AAC-8A2C-8B5D4A159B56}\"\r\nEndProject\r\nGlobal\r\n\tGlobalSection(SolutionConfigurationPlatforms) = preSolution\r\n\t\tDebug|Any CPU = Debug|Any CPU\r\n\t\tDebug|x64 = Debug|x64\r\n\t\tDebug|x86 = Debug|x86\r\n\t\tRelease|Any CPU = Release|Any CPU\r\n\t\tRelease|x64 = Release|x64\r\n\t\tRelease|x86 = Release|x86\r\n\tEndGlobalSection\r\n\tGlobalSection(ProjectConfigurationPlatforms) = postSolution\r\n\t\t{1A6AEDEC-9638-465A-9EEE-7CC718C12DED}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{1A6AEDEC-9638-465A-9EEE-7CC718C12DED}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{1A6AEDEC-9638-465A-9EEE-7CC718C12DED}.Debug|x64.ActiveCfg = Debug|x64\r\n\t\t{1A6AEDEC-9638-465A-9EEE-7CC718C12DED}.Debug|x64.Build.0 = Debug|x64\r\n\t\t{1A6AEDEC-9638-465A-9EEE-7CC718C12DED}.Debug|x86.ActiveCfg = Debug|x86\r\n\t\t{1A6AEDEC-9638-465A-9EEE-7CC718C12DED}.Debug|x86.Build.0 = Debug|x86\r\n\t\t{1A6AEDEC-9638-465A-9EEE-7CC718C12DED}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{1A6AEDEC-9638-465A-9EEE-7CC718C12DED}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{1A6AEDEC-9638-465A-9EEE-7CC718C12DED}.Release|x64.ActiveCfg = Release|x64\r\n\t\t{1A6AEDEC-9638-465A-9EEE-7CC718C12DED}.Release|x64.Build.0 = Release|x64\r\n\t\t{1A6AEDEC-9638-465A-9EEE-7CC718C12DED}.Release|x86.ActiveCfg = Release|x86\r\n\t\t{1A6AEDEC-9638-465A-9EEE-7CC718C12DED}.Release|x86.Build.0 = Release|x86\r\n\t\t{EEE8E2FD-7DAF-4AAC-8A2C-8B5D4A159B56}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{EEE8E2FD-7DAF-4AAC-8A2C-8B5D4A159B56}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{EEE8E2FD-7DAF-4AAC-8A2C-8B5D4A159B56}.Debug|x64.ActiveCfg = Debug|x64\r\n\t\t{EEE8E2FD-7DAF-4AAC-8A2C-8B5D4A159B56}.Debug|x64.Build.0 = Debug|x64\r\n\t\t{EEE8E2FD-7DAF-4AAC-8A2C-8B5D4A159B56}.Debug|x86.ActiveCfg = Debug|x86\r\n\t\t{EEE8E2FD-7DAF-4AAC-8A2C-8B5D4A159B56}.Debug|x86.Build.0 = Debug|x86\r\n\t\t{EEE8E2FD-7DAF-4AAC-8A2C-8B5D4A159B56}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{EEE8E2FD-7DAF-4AAC-8A2C-8B5D4A159B56}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{EEE8E2FD-7DAF-4AAC-8A2C-8B5D4A159B56}.Release|x64.ActiveCfg = Release|x64\r\n\t\t{EEE8E2FD-7DAF-4AAC-8A2C-8B5D4A159B56}.Release|x64.Build.0 = Release|x64\r\n\t\t{EEE8E2FD-7DAF-4AAC-8A2C-8B5D4A159B56}.Release|x86.ActiveCfg = Release|x86\r\n\t\t{EEE8E2FD-7DAF-4AAC-8A2C-8B5D4A159B56}.Release|x86.Build.0 = Release|x86\r\n\tEndGlobalSection\r\n\tGlobalSection(SolutionProperties) = preSolution\r\n\t\tHideSolutionNode = FALSE\r\n\tEndGlobalSection\r\nEndGlobal\r\n\r\n```\r\n\r\nI see 3 \"sections\":\r\n\t1) Information about VS, which version created it and the minimum version\r\n\t2) List or projects and their locations\r\n\t3) Solution and ProjectConfigurationPlatforms\r\n\r\n1) Is the VisualStudio stuff really needed? I regularly run into changes here when opening solutions in different versions, it creates a change for no apparent reason.\r\n\r\n2) Can we get rid of the GUIDs for the project lists? Also the logical name (coreDemo, netStdLib) in addition to the csproj, can this just be infered for the probably 99.99% case when the two match?\r\n\r\n3) I can't say much about the ConfigurationPlatform stuff, except that it looks messy. I feel like this should be pulled out somehow.\r\n\r\nSince everything is going xml (....I know, I know), perhaps the format of the sln file should also be xml.\r\nA minimalistic solution could look something like this:\r\n```\r\n<Solution MinimumVisualStudioVersion=\"10.0.40219.1\">\r\n  <Projects>\r\n    <Project Location=\"coreDemo\\coreDemo.csproj\" Type=\"netCoreConsole\" ProjectConfigurationPlatforms=\"Default\" />\r\n    <Project Location=\"netStdLib\\netStdLib.csproj\" Type=\"netStandardLib\" >\r\n        <ProjectConfigurationPlatforms>\r\n            <ConfigurationPlatform Configuration=\"Release\" Platform=\"x64\" />\r\n            <ConfigurationPlatform Configuration=\"Release\" Platform=\"x86\" />\r\n        </ProjectConfigurationPlatforms>\r\n    </Project>\r\n  </Projects>\r\n  <SolutionConfigurationPlatforms>\r\n    <ConfigurationPlatform Configuration=\"Release\" Platform=\"x64\" />\r\n    <ConfigurationPlatform Configuration=\"Release\" Platform=\"x86\" />\r\n  </SolutionConfigurationPlatforms>\r\n</Solution>\r\n\r\n```\r\n\r\nA few things to note:\r\nThe Project Type Guids (\"FAE04EC0-301F-11D3-BF4B-00C04F79EFBC\", at least that's what I think those are) are messy, if this is really needed by VS for some reason let's please make it a string that makes sense for humans (\"netCoreConsole\" in the example).\r\nWe pull the ProjectConfigurations into the projects where they logically belong. Also, while at times custom platform/configurations are needed, most of the time people I think just use the default (x86/x64/Any CPU)/(Debug/Release).\r\nSo we just make those the default.\r\nFor the project list we could also do the filepattern thing (**/*.csproj) but I feel like projects aren't added/removed often enough to warrant this, so perhaps being explicit here is the better choice.\r\n\r\nI just want to start this issue so that a discussion can be started, I'm by no means an expert on this stuff.\n\n_Copied from original issue: dotnet/roslyn-project-system#1594_",
  "state": "CLOSED",
  "createdAt": "2017-02-21T18:55:42Z",
  "updatedAt": "2024-10-12T15:33:44Z",
  "closedAt": "2023-08-24T15:13:45Z",
  "author": {
    "login": "srivatsn"
  },
  "labels": [
    "Area: Solution (.sln)",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Backlog"
  },
  "comments": {
    "nodes": [
      {
        "body": "Moving to the msbuild repo where the design for this needs to happen.",
        "createdAt": "2017-02-21T18:55:43Z",
        "updatedAt": "2017-02-21T18:55:43Z",
        "author": {
          "login": "srivatsn"
        }
      },
      {
        "body": "This isn't in our power alone, unfortunately. MSBuild is one consumer of the solution format, but arguably not the most important one: Visual Studio itself reads solutions when loading and that code is the canonical copy.\r\n\r\nThis has been put off for almost 15 years now, so I'm pessimistic--but it's a totally reasonable request, and maybe now is the time it can actually get done.\r\n\r\nPersonally, I'd like to see a native MSBuild format rather than a distinct XML schema. But representing all the data in MSBuild could be pretty tricky.",
        "createdAt": "2017-02-21T19:10:15Z",
        "updatedAt": "2017-02-21T19:10:15Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "+1 for replacing the .sln file with native msbuild files. This probably implies implementing lineup files in one form or another (see lineup files in #1493). And then, probably, also the notion \"project cones\".",
        "createdAt": "2017-02-24T01:02:18Z",
        "updatedAt": "2017-02-24T01:02:18Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "Clearly I'm misunderstanding what the role of the sln file actually is, I thought it was merely for VisualStudio but at build time it would pass the relevant csproj files down to msbuild, and that msbuild only deals with those.\r\n\r\nBut yes, I understand this is not a quick thing to do and requires major efforts across various teams (and companies), but given the effort to simplify csproj files was so well received, we should still strive for it.\r\n\r\n@rainersigwald do you have a quick example of what an msbuild format for a solution might look like?",
        "createdAt": "2017-02-24T03:27:27Z",
        "updatedAt": "2017-02-24T03:27:27Z",
        "author": {
          "login": "chrisaut"
        }
      },
      {
        "body": "> I thought it was merely for VisualStudio but at build time it would pass the relevant csproj files down to msbuild, and that msbuild only deals with those.\r\n\r\nThe reason it's more complex than that is that VS builds individual projects _with configuration derived from the solution_. That enables the things you can do with the Solution Configuration Manager, like \"don't build this project in this configuration\" or \"when the solution is in Release configuration, still build this individual project as Debug\". See MSBuild's [`AssignProjectConfiguration`](https://github.com/Microsoft/msbuild/blob/fdbf2d358238e8236383e81acb353937161dae29/src/Tasks/AssignProjectConfiguration.cs) task for a bit of the code required to deal with this.\r\n\r\n> do you have a quick example of what an msbuild format for a solution might look like?\r\n\r\nI do not, in large part because one of the sources of complexity here is that I don't know all of the configuration capabilities of the .sln format. I learned a new one yesterday investigating https://github.com/Microsoft/msbuild/issues/626#issuecomment-282117160! Building all of the capabilities of the current format into a new one is one reason this has been put off for over a decade (the other big reason is that the solution-handling code in VS is ancient and has tentacles into lots of things, so it's not easy to drop in a replacement).\r\n\r\n> we should still strive for it.\r\n\r\nI agree, and I think everyone agrees in principle--I haven't met defenders of the current format. It's just a matter of prioritization.",
        "createdAt": "2017-02-24T16:24:36Z",
        "updatedAt": "2017-02-24T16:24:36Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "As @rainersigwald says, this has been put off repeatedly and it really is something for the VS team to drive as they would do almost all the work (since it's safe to assume they would move to a format that MSBuild already understands)\r\n\r\nAlthough the solution has tendrils throughout VS, to my knowledge, knowledge of the solution format is pretty localized (as you would hope) so changing the format should not be a huge effort.\r\n\r\nNext decision to make would be how VS would handle changing the build process of a solution. Right now you can't do that or at least VS will ignore it: it invokes MSBuild individually on each project in the solution -- it does not \"build\" the solution itself, as MSBuild does. Lots of parts of VS listen to events through the build of all the projects and if the build process changes, they might get confused about that. (They don't generally pay attention to what happens within the build of a particular project, so this would be a new issue.)\r\n\r\nHowever they may want to go further. MSBuild doesn't care what your project structure is, it can be n-level for example. VS doesn't work quite the same when you reference projects that aren't listed in your solution; it doesn't represent visually any kind of hierarchy or structure beyond 2 levels; solution folders are fake folders. So if VS wanted to invest in the solution file, they might want to think beyond just changing the format of the file and instead allow VS to just open any number of random MSBuild files at once and make some sense of it.\r\n\r\n",
        "createdAt": "2017-03-02T01:16:26Z",
        "updatedAt": "2017-03-02T01:16:26Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "+1 for a native MSBuild format.\r\nIt would be awesome to have it as \"simple\" as\r\n```xml\r\n<Project Sdk=\"Microsoft.Sln.Sdk\">\r\n  <ItemGroup>\r\n    <SolutionProject Include=\"**\\*.*proj\" />\r\n  </ItemGroup>\r\n</Project>\r\n```",
        "createdAt": "2017-03-19T11:35:18Z",
        "updatedAt": "2018-05-25T20:12:46Z",
        "author": {
          "login": "dasMulli"
        }
      },
      {
        "body": "Since this seems to be more of a long term goal, perhaps in the meantime we can make surgical improvements to the existing format.\r\n\r\nCan anyone explain/confirm if\r\n1) type Guids are not needed/can be inferred\r\n2) VS version information is not needed\r\n\r\n",
        "createdAt": "2017-03-21T03:57:42Z",
        "updatedAt": "2017-03-21T03:57:42Z",
        "author": {
          "login": "chrisaut"
        }
      },
      {
        "body": "I got exactly the same question, will we have a human-ready sln format?",
        "createdAt": "2017-10-20T14:56:19Z",
        "updatedAt": "2017-10-20T14:56:19Z",
        "author": {
          "login": "UncleFirefox"
        }
      },
      {
        "body": "SLN currently has that archaic syntax. GitHub linguist classifier even doesn't understands it.. was it vb, inf, ruby or which language was the source of inspiration back in 1900-who-knows. Dotnet-cli team had to create a custom parser and writer to add support for `dotnet new sln` -- actually took from Mono: https://github.com/dotnet/cli/blob/b674f5d/src/Microsoft.DotNet.Cli.Sln.Internal/SlnFile.cs\r\n\r\nXML is something used in <all>proj and working out decently with new format, SLN should be updated. It's now or never!\r\n\r\n> So if VS wanted to invest in the solution file, they might want to think beyond just changing the format of the file and instead allow VS to just open any number of random MSBuild files at once and make some sense of it.\r\n\r\n@danmosemsft, since we don't have any idea whose scones to butter to make it ever happen, but we would stand by you and vote if you further this discussion with *right* people in VS team. If they just start with the drop-in replacement of SLN for vNext of VS that understands everything what current SLN provides today, it would improve a lot!\r\n\r\nOnce that gets shipped and both VS and MSBuild get familiarized with this format, they can add exciting new features *\"stuff that wasn't possible with old format\"*.\r\n\r\nOr VS guys can open source their core solution handling module to enter the community-driven-development bliss.",
        "createdAt": "2017-11-17T00:44:56Z",
        "updatedAt": "2017-11-17T00:44:56Z",
        "author": {
          "login": "ghost"
        }
      },
      {
        "body": "This idea is listed in the [Visual Studio User Voice](https://visualstudio.uservoice.com/forums/121579-visual-studio-ide/suggestions/2035831-xml-format-of-solutions-files-sln). Vote for it.",
        "createdAt": "2018-04-18T10:19:16Z",
        "updatedAt": "2018-04-18T10:19:16Z",
        "author": {
          "login": "BrunoZell"
        }
      },
      {
        "body": "I know that only some of the information is written, depending on the (solution) configuration and platform selected, but the output seen with MSBuildEmitSolution when using MSBuild might be a place to start. Obviously the information in there would need to be generated by the `Microsoft.Sln.Sdk` if it wasn't present in the file directly, and as some of it is proxy targets for individual projects, it might need to be generated and cached (maybe like the nuget project.assets.json?)\r\n\r\nI for one would love there to be something like\r\n```\r\n  <ItemDefinitionGroup>\r\n    <SolutionProject>\r\n      <Configuration>$(Configuration)</Configuration>\r\n      <Platform>$(Platform)</Platform>\r\n      <SolutionConfiguration>$(Configuration)</SolutionConfiguration>\r\n      <SolutionPlatform>$(Platform)</SolutionPlatform>\r\n      <SolutionDir>$(MSBuildThisFileDirectory)</SolutionDir>\r\n      <Build>True</Build>\r\n    </SolutionProject>\r\n  </ItemDefinitionGroup>\r\n```\r\nIn the defaults which would allow overriding on a per project basis, and all project metadata to be passed to the project build.\r\n\r\nAnd maybe even a nice project globbing pattern based on installed languages / extensions.",
        "createdAt": "2018-04-18T11:23:29Z",
        "updatedAt": "2018-04-18T11:23:29Z",
        "author": {
          "login": "CZEMacLeod"
        }
      },
      {
        "body": "I have more use cases here that a MSBuild format would make possible! For example, take a look at MiniProfiler: https://github.com/MiniProfiler/dotnet. It's a library that supports ASP.NET Core and non-Core (new and old) versions. Now because of that, I need sample projects for both. So the solution contains [a sample for ASP.NET](https://github.com/MiniProfiler/dotnet/tree/master/samples/Samples.Mvc5) and [a sample for ASP.NET Core](https://github.com/MiniProfiler/dotnet/tree/master/samples/Samples.AspNetCore), for the people, you know, the lovely people! They like samples. They're good folk.\r\n\r\nNow, a use case! The `dotnet build` tooling does *almost* everything you'd want here to build a solution. But, since `dotnet build` cannot build a ASP.NET non-Core sample, it throws an error every time (which error doesn't matter, it's not supported and that's not the point of this comment). Also, AFAIK, you cannot filter what would be built, aside from carrying the baggage of additional build configs just for packaging...which is a bad state to be in when testing vs. deployment.\r\n\r\nIf the `.sln` file (I'm gonna lobby for `.slnx` here!) was XML/MSBuild, I could do something as simple as `/p:IncludeSamples=false` around a `<Projects Condition=\"$(IncludeSamples) == 'true'\">` section (like proposed in the original issue) to exclude them. Any configuration could be treated this way really. I'm not saying that's an easy task, but it would be a huge usability and versatility improvement to build a solution however you wanted.\r\n\r\nPlus, ya know, no GUIDs because ewww.",
        "createdAt": "2018-05-25T19:22:05Z",
        "updatedAt": "2018-05-25T19:22:05Z",
        "author": {
          "login": "NickCraver"
        }
      },
      {
        "body": "@NickCraver Would something like https://github.com/Microsoft/MSBuildSdks/tree/master/src/Traversal be what you're looking for? \r\n\r\nSeems like that would be a good model for what solution files should end up being.",
        "createdAt": "2018-05-25T19:33:26Z",
        "updatedAt": "2018-05-25T19:33:26Z",
        "author": {
          "login": "bording"
        }
      },
      {
        "body": "I believe in VS organization, the team owning SLN would have more context on full list of supported verbs and variation.\r\n\r\nLets assume there is no team, folks who invented SLN two decades ago left and nobody is maintaining it anymore.\r\n\r\nThen here is a [#Hackathon](https://github.com/dotnet/corefx/issues/29909) idea for @karelz:\r\n\r\nImplementation of new format can be done and validated against 3 million SLN files on public GitHub https://github.com/search?q=fileextension%3Asln+project. A cronjob can be written to collect distinct verbs/tokens from 3M files. For parsing, we can use https://github.com/dotnet/cli/blob/b674f5d/src/Microsoft.DotNet.Cli.Sln.Internal/SlnFile.cs.\r\n\r\nI think if it still misses some obscure verb for example that was only supported in past century VS 97, it is most likely acceptable.\r\n\r\nWith GitHub v3 API, it is bit more work. First it needs to traverse through organizations:\r\nhttps://api.github.com/search/code?q=extension:sln+org:dotnet\r\nthen call:\r\nhttps://api.github.com/search/code?q=extension:sln+org:$ORGANIZATION\r\nto get `url` value, navigating to which gives us `download_url`.With 100 threads it will take 30K iterations.\r\n\r\nOnce there is an exhaustive list, an XML schema can be established, which someone in VS team can implement with [5-10 lines of C# code](https://stackoverflow.com/a/752774) to replace archaic SLN syntax.",
        "createdAt": "2018-05-25T20:20:37Z",
        "updatedAt": "2018-05-25T20:20:37Z",
        "author": {
          "login": "ghost"
        }
      },
      {
        "body": "@NickCraver a workaround you could use for your case today is to customize MSBuild's view of the solution when it builds from the command line (as in `dotnet build`).\r\n\r\nYou can do this with a [solution build customization](https://docs.microsoft.com/en-us/visualstudio/msbuild/customize-your-build#customizing-the-solution-build). Since your solution is `MiniProfiler.sln`, create a file named `after.MiniProfiler.sln.targets` that manipulates the `ProjectReference` item before MSBuild starts building things:\r\n\r\n```xml\r\n<Project InitialTargets=\"RemoveIncompatibleProjectsFromDotnetCoreBuild\">\r\n  <Target Name=\"RemoveIncompatibleProjectsFromDotnetCoreBuild\"\r\n          Condition=\"'$(MSBuildRuntimeType)' == 'Core'\">\r\n    <ItemGroup>\r\n      <!-- These projects don't successfully build in `dotnet build`, so don't build them\r\n          when MSBuild is running on Core. -->\r\n      <ProjectReferenceToAvoidInDotnetBuild Include=\"samples\\Samples.Mvc5.EFCore\\Samples.Mvc5.EFCore.csproj\" />\r\n      <ProjectReferenceToAvoidInDotnetBuild Include=\"samples\\Samples.Mvc5\\Samples.Mvc5.csproj\" />\r\n\r\n      <ProjectReference Remove=\"@(ProjectReferenceToAvoidInDotnetBuild->'%(FullPath)')\" />\r\n    </ItemGroup>\r\n  </Target>\r\n</Project>\r\n```",
        "createdAt": "2018-05-25T21:14:52Z",
        "updatedAt": "2018-05-25T21:14:52Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@bording @rainersigwald Thanks! I'll give both of these a look today and see what works. Traversal does seem to be the more appealing option if it works. I'll give it a shot and report back :)",
        "createdAt": "2018-05-26T11:39:51Z",
        "updatedAt": "2018-05-26T11:39:51Z",
        "author": {
          "login": "NickCraver"
        }
      },
      {
        "body": "@bording Unfortunately I hit issues with Traversal but indeed that's *very* appealing. I filed an issue with what I hit; maybe I can help resolve this one given I have an easy (I think) repro: https://github.com/Microsoft/MSBuildSdks/issues/34 I'm not sure if this points to a larger issue of tree traversal shenanigans that currently happens via `.sln` resolution of what to build or not.",
        "createdAt": "2018-05-26T12:32:38Z",
        "updatedAt": "2018-05-26T12:38:58Z",
        "author": {
          "login": "NickCraver"
        }
      },
      {
        "body": "@NickCraver  `.slnx` reminds me of `.doc` -> `.docx`, not in a good way. `.slnproj` is the way to go.",
        "createdAt": "2018-05-30T19:34:10Z",
        "updatedAt": "2018-05-30T19:34:10Z",
        "author": {
          "login": "m0sa"
        }
      },
      {
        "body": "A noticeable thing is that if I move a project file's position, project references with GUID will automatically correct its position, seems using GUID from the solution.\r\nBut I think Visual Studio should has a feature to move a project and correct references together.",
        "createdAt": "2018-05-31T01:43:37Z",
        "updatedAt": "2018-05-31T01:43:37Z",
        "author": {
          "login": "huoyaoyuan"
        }
      },
      {
        "body": "@rainersigwald so the last info on this is paraphrased \"we're not in charge to decide this\" - which is totally fine. But can we at least know who is, maybe a link to uservoice if its directly decided by the VS programm ownership.\r\n\r\nAlso: Maybe we can do this in two steps? Lots of negative feedback for SLN has to do with the large amount of GUIDs in the sln file. Maybe (as the GUID went away from regular projects) we can make an effort to get rid of the GUIDs first and then proceed with the big one in a larger timeframe?",
        "createdAt": "2018-09-01T21:08:54Z",
        "updatedAt": "2018-09-01T21:08:54Z",
        "author": {
          "login": "MeikTranel"
        }
      },
      {
        "body": "I made an sdk-style msbuild solution file format, the use is limited since there is no VisualStudio support, but it can still be used with vs code, Visual Studio Open Folder or build-only solution.\r\n\r\nhttps://github.com/JeffCyr/MSBuild.SolutionSdk\r\n\r\nA solution file can be as lean as this:\r\n```xml\r\n<Project Sdk=\"MSBuild.SolutionSdk/0.0.2\" />\r\n```\r\n\r\nBy default, all csproj/vbproj/fsproj/vcxproj under the folder hierarchy of the solution file will be included in the solution. For simple solutions, the .slnproj file may never have to be edited again.\r\n",
        "createdAt": "2018-09-17T11:51:04Z",
        "updatedAt": "2018-09-17T11:51:04Z",
        "author": {
          "login": "JeffCyr"
        }
      },
      {
        "body": "@JeffCyr there's a ms-built version at https://github.com/Microsoft/MSBuildSdks/tree/master/src/Traversal that does that same you are doing but also covers some more edge cases (but is certainly less user-friendly / documented and lacks default items)\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.Build.Traversal/1.0.43\">\r\n  <ItemGroup>\r\n    <ProjectReference Include=\"src\\Common\\Common.csproj\" />\r\n    <ProjectReference Include=\"src\\App\\App.csproj\" />\r\n    <ProjectReference Include=\"src\\WebApplication\\WebApplication.csproj\" />\r\n  </ItemGroup>\r\n</Project>\r\n```",
        "createdAt": "2018-09-17T21:00:37Z",
        "updatedAt": "2018-09-17T21:02:13Z",
        "author": {
          "login": "dasMulli"
        }
      },
      {
        "body": "@dasMulli Indeed, Traversal seems great for creating a simple build script. The main difference with MSBuild.SolutionSdk is that it tries to keep the same experience as current sln files with configuration management and build dependencies. My hope is that this project can serve as a playground to eventually be standardized and replace sln files in Visual Studio.",
        "createdAt": "2018-09-18T15:26:54Z",
        "updatedAt": "2018-09-18T15:26:54Z",
        "author": {
          "login": "JeffCyr"
        }
      },
      {
        "body": "With the new msbuild Sdk pluggability, the solution proposed [above](https://github.com/Microsoft/msbuild/issues/1730#issuecomment-421982874) by @JeffCyr and the related MSBuildSDKs/Traversal initiatives are exactly where msbuild sln should go.\r\n\r\nI would love to see this adopted. There is the IDE integrations story (VS, VSCode, Rider...etc.) but the opportunities/scenarios offered by such a solution (\ud83d\ude05) are just tremendously exciting!\r\n\r\nIs there any plan to prioritize this work?  cc: @davkean @KirillOsenkov ",
        "createdAt": "2018-09-19T16:38:12Z",
        "updatedAt": "2018-09-19T16:38:12Z",
        "author": {
          "login": "xoofx"
        }
      },
      {
        "body": "I still routinely hit issues where someone forgot to commit changes to the sln, or there are merge conflicts. I was hoping this would be tackled for VS19, but doesn't seem to be the case.\r\n\r\nIs there anyone that could champion this and bring it up with the VS team or whoever is responsible?",
        "createdAt": "2019-02-07T03:54:08Z",
        "updatedAt": "2019-02-07T03:54:08Z",
        "author": {
          "login": "chrisaut"
        }
      },
      {
        "body": "Would this be a good candidate to tackle for the .NET 5 timeframe?\r\n\r\nPretty please",
        "createdAt": "2019-08-05T00:59:01Z",
        "updatedAt": "2019-08-05T01:00:02Z",
        "author": {
          "login": "chrisaut"
        }
      },
      {
        "body": "> This has been put off for almost 15 years now, so I'm pessimistic--but it's a totally reasonable request, and maybe now is the time it can actually get done.\r\n\r\n@rainersigwald 3 years later the situation seems to be unchanged, has the chance of this happening increased or decreased?\r\n\r\nIt's the second most :+1: issue here, only surpassed by #613. The UserVoice someone linked no longer exists. What can we do as customers to give this request a higher priority?",
        "createdAt": "2020-03-04T14:22:28Z",
        "updatedAt": "2020-03-04T14:22:28Z",
        "author": {
          "login": "stijnherreman"
        }
      },
      {
        "body": "Since the uservoice site apparently is gone and I wasn't able to find a relevant issue for this on the new https://developercommunity.visualstudio.com/ I've gone ahead and created a feature request there:\r\nhttps://developercommunity.visualstudio.com/idea/988209/clean-up-sln-visualstudio-solution-files.html\r\n\r\nPlease upvote it just in case it helps get the relevant parties more aware of this.\r\n",
        "createdAt": "2020-04-13T10:51:45Z",
        "updatedAt": "2020-04-13T10:51:45Z",
        "author": {
          "login": "chrisaut"
        }
      },
      {
        "body": "I never understood why Microsoft created Solution files in the first place. A solution file should just be a .csproj file containing references to child .csproj files. Configuration data is cascaded down from down the hierarchy with each .csproj having the ability to override it's parent configuration in the same way .config files do. This would make configuration a lot easier than it is now.",
        "createdAt": "2020-08-09T21:03:59Z",
        "updatedAt": "2020-08-09T21:03:59Z",
        "author": {
          "login": "Joebeazelman"
        }
      },
      {
        "body": "> I never understood why Microsoft created Solution files in the first place. \r\n\r\nSln files predated csproj and predated building without using VS so the format probably wasn\u2019t considered too important at the time. That said they could have made them more mergeable.",
        "createdAt": "2020-08-10T03:38:46Z",
        "updatedAt": "2020-08-10T03:38:46Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "@Joebeazelman To echo @danmosemsft there are several other project types out there beyond CSPROJ; for example our use case has the following project types:\r\n\r\n* VCPROJ\r\n* VBPROJ\r\n* SQLPROJ\r\n* SYNPROJ\r\n* WIXPROJ\r\n\r\nHistorically not all of these types were \"MSBuild Native\", but the last big Microsoft hold out (VCPROJ) I believe was converted in either VS 2012 or 2013?\r\n\r\nWe're not huge fans of the format, but honestly there are other places our company would like to see development resources placed (for example getting all of the classic Project Formats converted, or improving project load times for large solutions (1000+ Projects).",
        "createdAt": "2020-08-10T13:10:54Z",
        "updatedAt": "2020-08-10T13:10:54Z",
        "author": {
          "login": "aolszowka"
        }
      },
      {
        "body": "I'm a bit curious why you require 1000+ projects? I can somewhat understand getting into the lower 100s, but even then I would seriously considering splitting things up, but literally 1000s?",
        "createdAt": "2020-08-10T13:20:47Z",
        "updatedAt": "2020-08-10T13:20:47Z",
        "author": {
          "login": "chrisaut"
        }
      },
      {
        "body": "@chrisaut The system is a huge monolith from 35+ years of code; its wild! Here's a gist of one of the dependency trees https://gist.github.com/aolszowka/a93ea5545d54344c61f66830fae90c4e its a dotgraph generated using https://github.com/aolszowka/MsBuildProjectReferenceDependencyGraph. Use GraphViz (takes around 10-15 minutes on my workstation to generate) don't bother with WebGraphViz it'll choke.\r\n\r\nI really wish this wasn't the case but attempting to pay off this technical debt is going to take a long time (I'll probably be long gone!).\r\n\r\nMost projects, even with their minimal dependencies end up floating around 200-300 projects.",
        "createdAt": "2020-08-10T13:26:11Z",
        "updatedAt": "2020-08-10T13:26:11Z",
        "author": {
          "login": "aolszowka"
        }
      },
      {
        "body": "@Joebeazelman @danmosemsft @chrisaut  Sorry to double post, but I thought I should reply to this comment:\r\n\r\n> That said they could have made them more mergeable.\r\n\r\nIt would be really cool if Visual Studio sorted these out of the box, a long time ago (way back when we had Microsoft Connect instead of Developer Community) there was an ask to have them sorted alphabetically. I do not believe it made the jump to Developer Community.\r\n\r\nAs a stop gap I opened sourced a bunch of our tools to manage these files (we have something like 5,000+ Solution files). I really wish we could trash every single one of these and just use stuff out of the box, but thought I'd be worth sharing:\r\n\r\n* https://github.com/aolszowka/VisualStudioSolutionSorter\r\n** Sorts the Solution file in Alphabetical Order based on their paths; supports (as far as we have used) all the weird corner cases of various solution files\r\n* https://github.com/aolszowka/VisualStudioSolutionUpdater\r\n** Used to update all your solution files when the dependency tree changes. Extremely helpful in giant monoliths like ours when a a simple dependency change can rip though 5000+ solutions.\r\n* https://github.com/aolszowka/VisualStudioSolutionShaker\r\n** The sister tool to help clean up when someone pays off some technical debt and those 5000+ solutions can be smaller\r\n* https://github.com/aolszowka/VisualStudioSolutionRemoveStaleDependencies\r\n** Another sister tool when someone straight up deletes a dependency and tells no one!\r\n* https://github.com/aolszowka/MsBuildProjectReferenceDependencyGraph\r\n** Helpful to understand your dependency tree in dotgraph's; useful when attempting to find areas of low hanging fruit to pay off technical debt.\r\n\r\nAll of these tools are MIT Licensed/Open Sourced, it'd be super cool if they were integrated somehow into VS and we could delete them, until then our recommendation is to throw them in CI, otherwise you will drown trying to keep them all up to date.",
        "createdAt": "2020-08-10T13:37:23Z",
        "updatedAt": "2020-08-10T13:37:23Z",
        "author": {
          "login": "aolszowka"
        }
      },
      {
        "body": "@aolszowka thanks for sharing!",
        "createdAt": "2020-08-10T15:28:20Z",
        "updatedAt": "2020-08-10T15:28:20Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "> @Joebeazelman To echo @danmosemsft there are several other project types out there beyond CSPROJ; for example our use case has the following project types:\r\n> \r\n> * VCPROJ\r\n> * VBPROJ\r\n> * SQLPROJ\r\n> * SYNPROJ\r\n> * WIXPROJ\r\n> \r\n> Historically not all of these types were \"MSBuild Native\", but the last big Microsoft hold out (VCPROJ) I believe was converted in either VS 2012 or 2013?\r\n> \r\n> We're not huge fans of the format, but honestly there are other places our company would like to see development resources placed (for example getting all of the classic Project Formats converted, or improving project load times for large solutions (1000+ Projects).\r\n\r\nI would've left those project formats alone and used PROJ for all future MsBuild Native formats for Visual Studio and MSBuild. One single format for any language. \r\n\r\nAs a side note, I hope you guys don't adopt YAML in the future. Developers, such as myself, can only handle so much cognitive load. Please use our remaining bandwidth judiciously on something that's a clear improvement in terms of productivity. ",
        "createdAt": "2020-08-10T17:53:01Z",
        "updatedAt": "2020-08-10T17:53:01Z",
        "author": {
          "login": "Joebeazelman"
        }
      },
      {
        "body": "> As a side note, I hope you guys don't adopt YAML in the future.\r\n\r\n@Joebeazelman Right there with you. I think though, based on the fact that GitHub Actions are all YAML based, we might be out of luck!\r\n\r\n>I would've left those project formats alone and used PROJ for all future MsBuild Native formats for Visual Studio and MSBuild. One single format for any language.\r\n\r\nAs Raymond Chen often says:\r\n\r\n>Many decisions make sense only in the context of history.\r\n\r\nhttps://devblogs.microsoft.com/oldnewthing/20110119-00/?p=11723\r\n\r\nAll of those projects are first class citizens in the Visual Studio Ecosystem. While lots of progress is made here https://github.com/dotnet/project-system its a really big ship with lots of players.\r\n",
        "createdAt": "2020-08-10T18:31:19Z",
        "updatedAt": "2020-08-10T18:31:50Z",
        "author": {
          "login": "aolszowka"
        }
      },
      {
        "body": "Interesting Twitter thread by @davidfowl \r\n\r\n\"\r\nFeels like it\u2019s time for a .NET tooling renaissance.Solution files are dated, and project files while much cleaner, are tied to the powerful but flawed msbuild. We\u2019ve seen huge performance improvements  in runtime performance but haven\u2019t done the same on the tooling side. #dotnet\r\n\"\r\n\r\nhttps://twitter.com/davidfowl/status/1292298514735566849",
        "createdAt": "2020-08-11T19:48:32Z",
        "updatedAt": "2020-08-11T19:48:32Z",
        "author": {
          "login": "chrisaut"
        }
      },
      {
        "body": ".NET 6 is being planned out ATM. I can't help but wonder if, as part of it, perhaps a tiny bit of at least thought could be given towards this sln mess? Or is it not on the radar at all?",
        "createdAt": "2020-10-23T11:16:26Z",
        "updatedAt": "2020-10-23T11:16:26Z",
        "author": {
          "login": "chrisaut"
        }
      },
      {
        "body": "Solution files are not just for .NET, there are many other project types. Probably, it should be considered for the next major version of the Visual Studio.",
        "createdAt": "2020-10-23T12:08:16Z",
        "updatedAt": "2020-10-23T12:08:16Z",
        "author": {
          "login": "vrubleg"
        }
      },
      {
        "body": "Understood, but someone needs to push for it.\r\n\r\nVS still understand the old csproj file format along with the new, we need something similar for solution files, even if at first it only supports a small portion of all the features of the current sln format. \r\n\r\n.NET is in a unique position to push for this IMO.",
        "createdAt": "2020-10-23T12:22:39Z",
        "updatedAt": "2020-10-23T12:22:39Z",
        "author": {
          "login": "chrisaut"
        }
      },
      {
        "body": "It was also my time to need this so badly right now.",
        "createdAt": "2021-04-09T17:11:02Z",
        "updatedAt": "2021-04-09T17:11:02Z",
        "author": {
          "login": "ceztko"
        }
      },
      {
        "body": "It would be great if this task finally gets prioritized. In the mean time I had to quickly find a workaround to generate a Solution on Linux platform so I came up with a quick powershell script that can create a .sln file from a given template. It's very simple and it supports only generating a solution with `Release`/`Debug ` configurations and a given platform (for example `x86`/`x64`). It doesn't specify dependencies but implicit dependencies are respected anyway. Projects can enforce a different platform, for example `Any CPU`. The script with an example is available as a gist at [this](https://gist.github.com/ceztko/71ac75f1881c78fac600f06c90675d48) address.",
        "createdAt": "2021-04-11T18:02:12Z",
        "updatedAt": "2021-04-11T18:02:12Z",
        "author": {
          "login": "ceztko"
        }
      },
      {
        "body": "@ceztko for generating solution files I recommend slngen which is available as a global tool.",
        "createdAt": "2021-04-12T13:59:59Z",
        "updatedAt": "2021-04-12T13:59:59Z",
        "author": {
          "login": "ViktorHofer"
        }
      },
      {
        "body": "> for generating solution files I recommend slngen which is available as a global tool.\r\n\r\nInteresting! I was missing such tool. I just tried: while not entirely clear from the [documentation](https://microsoft.github.io/slngen/) it can also work with a list of projects as arguments. For sure I will consider it.",
        "createdAt": "2021-04-12T15:09:00Z",
        "updatedAt": "2021-04-12T15:09:00Z",
        "author": {
          "login": "ceztko"
        }
      },
      {
        "body": "slngen uses built-in file globbing, similar to msbuild. Which means, it also works with space separated paths and shell globbing.\r\n\r\n```sh\r\n# bult-in globbing\r\n$ slngen '*/*proj' -o Main.sln\r\n\r\n# shell (bash) globbing - without single quotes\r\n$ slngen */*proj -o Main.sln\r\n\r\n# space separated paths\r\n$ slngen src/foo/foo.proj src/bar/bar.proj tests/baz/baz.proj -o Main.sln\r\n```\r\nif we drop `-o` argument, it will generate sln files for each project. The tool name (`Microsoft.VisualStudio.SlnGen.Tool`) is a bit unconventional, one would expect `dotnet tool install --global slngen` (or `dotnet-slngen`).. but those are the minor details. :)",
        "createdAt": "2021-04-12T15:52:13Z",
        "updatedAt": "2021-04-12T15:52:13Z",
        "author": {
          "login": "am11"
        }
      },
      {
        "body": "Since nothing was explicitly mentioned, I assume no work is planned here for VS2022 either?\r\n\r\nIt's really a shame. At least we get new icons to look at while we fix merge conflicts, so it's got that going for it I guess.",
        "createdAt": "2021-05-07T09:07:02Z",
        "updatedAt": "2021-05-07T09:07:02Z",
        "author": {
          "login": "chrisaut"
        }
      },
      {
        "body": "More than 5 years have passed already since this issue was open and I wish this could be prioritized.\r\n\r\nEvery single time projects gets added in different branches in our solution, merge conflicts appear and inevitable one of the projects gets temporarily lost, until it gets discovered that it was left out during the conflict solving.",
        "createdAt": "2022-04-20T03:26:06Z",
        "updatedAt": "2022-04-20T03:26:06Z",
        "author": {
          "login": "carlosmunozrodriguez"
        }
      },
      {
        "body": "That's because this is a *HARD* problem, a really hard one. We should tackle it but solution files have tentacles everywhere and we need a real plan for how to replace them. Any plan that contain the words \"just\" isn't a plan \ud83d\ude04. I mean a real well though out plan that discusses the multi year migration plan for .NET projects and C++. Having personally introduced a new project system into the .NET and Visual Studio ecosystems I know how painful it is. \r\n\r\nDon't get me wrong, we should do this, but we haven't spent the brain power to come up with a feasible solid plan AFAIK.",
        "createdAt": "2022-04-20T04:02:36Z",
        "updatedAt": "2022-04-20T04:02:36Z",
        "author": {
          "login": "davidfowl"
        }
      },
      {
        "body": "@carlosmunozrodriguez As a stop gap I'd point you to some of the tools I've created to help avoid merge conflicts by enforcing sorts on the SLN, you can put these in as a gate on your CI to prevent anyone from drifting once they're fixed https://github.com/dotnet/msbuild/issues/1730#issuecomment-671358983",
        "createdAt": "2022-04-20T04:05:36Z",
        "updatedAt": "2022-04-20T04:05:36Z",
        "author": {
          "login": "aolszowka"
        }
      },
      {
        "body": "@davidfowl\n\nIt is a **HARD** problem. But if the enterprises are asking and they are your paying customers, could you not spend the brain power here to finally solve this issue?\n\n<details>\n<summary>My thoughts...</summary> \n\nA pattern I see with @Microsoft atleast on the outside, is that their internal teams' request comes first, then the enterprises (_the paying ones_), then the partners, the implicit customers (_through other channels_) and finally the community.\n\nI'm not saying that this is bad but have a time limit for how a highly requested issue stays stale. Like 5years is more than enough for any high demand feedback to be on the backlog.\n\n***The ask for VS IDE to 64-bit only happened because of the internal teams request not because of the user voice. It's been on connect, user voice, and finally Dev community but no one bothered to take it up but once the request comes from the internal team, lo behold VS becomes 64-bit.***\n\nSee this kind of behavior is what I hate about $MSFT. I know all the political and technical reasons behind these decisions but what can we do? Humans are biased and $MSFT is full of them. I'm one of those.\n\n</details>\n\nThat said, some of the solutions here are interesting... Especially one with the existing MSBuild project schema is very interesting but certainly limited for some of the aspects that we use solutions today but overall I'm all for team XML/XAML. It's the language for declarative definitions.\n\nAs for the \"PLAN\", we could fix some of the long standing issues with sln writer as @aolszowka mentioned **now**. Then, we could introduce new `Solution` schema (_either with XML or XAML; as XAML allows OOP_) to not interfere with the `Project` schema. We could initially add features that covers the existing scenarios with solution files; so the migration would be 1:1 from sln files, then we can add more as the implementation and it's usage progresses with the customers.\n\n***We could affectionately call them `slnx` files.***",
        "createdAt": "2022-04-20T04:52:13Z",
        "updatedAt": "2022-04-20T04:52:13Z",
        "author": {
          "login": "Nirmal4G"
        }
      },
      {
        "body": "> A pattern I see with https://github.com/microsoft atleast on the outside, is that their internal teams' request comes first, then the enterprises (the paying ones), then the partners, the implicit customers (through other channels) and finally the community.\r\n\r\nThe internal teams would disagree with you.\r\n\r\nA plan would be complete, what we have here set of suggestions. I would love to spend energy fixing this problem.",
        "createdAt": "2022-04-20T05:29:29Z",
        "updatedAt": "2022-04-20T05:31:02Z",
        "author": {
          "login": "davidfowl"
        }
      },
      {
        "body": "> The internal teams would disagree with you.\r\n\r\nFirst...,\r\n- I would love to know what those teams are. \ud83d\ude10\ud83d\ude11\r\n- You wouldn't happen to be one of them? \ud83e\udd10\ud83d\ude43\r\n\r\nWhat would you say, the order is based on your experience? OR if there is any order at all? (_doubt it as I see from various places that people engage with $MSFT_)\r\n\r\n> I would love to spend energy fixing this problem.\r\n\r\nThank you for your kind words. \ud83d\ude0a",
        "createdAt": "2022-04-20T05:51:30Z",
        "updatedAt": "2022-04-20T05:51:30Z",
        "author": {
          "login": "Nirmal4G"
        }
      },
      {
        "body": "> The ask for VS IDE to 64-bit only happened because of the internal teams request not because of the user voice. It's been on connect, user voice, and finally Dev community but no one bothered to take it up but once the request comes from the internal team, lo behold VS becomes 64-bit.\r\n\r\nBeing on the team involved in making VS 64-bit, this is not how this happened. This was heavily influenced by enterprise customers and telemetry. VS team knew exactly what we were going to gain (and lose - 64-bit wasn't free and had some perf loses that we had to make up elsewhere) based on our performance telemetry and insight when we made this decision. I've covered a few of these here: https://twitter.com/davkean/status/1438027241074561026 and https://twitter.com/davkean/status/1489477275192279043. \r\n\r\nWe all (\"the VS team\") want to fix the solution problem, its a matter of picking the right time to make this change. As the Visual Studio team, we avoid making many large scale architectural changes all at the same time. You'll be happy to know, that starting in 17.2, our 15-20 year old code that handles the solution has been rewritten in C#, which is a step towards modernizing this.",
        "createdAt": "2022-04-20T06:12:55Z",
        "updatedAt": "2022-04-20T06:12:55Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "@davkean the first tweet is news to me but I had already read the 2nd one. It was certainly interesting. I learned a lot. Thanks for sharing.\r\n\r\nWasn't it because of Windows 11 (_10.0.22000 weird versioning I know!_) dropping 32-bit distribution? At least on the executive-level...!\r\n\r\n> You'll be happy to know, that starting in 17.2, our 15\u201320-year-old code that handles the solution has been rewritten in C#, which is a step towards modernizing this.\r\n\r\nFirst of all, **YAY**. Then my ask is, will that be matched/merged/replaced with the implementation in MSBuild? @rainersigwald thoughts on this?",
        "createdAt": "2022-04-20T06:36:34Z",
        "updatedAt": "2022-04-20T06:36:34Z",
        "author": {
          "login": "Nirmal4G"
        }
      },
      {
        "body": "> Wasn't it because of Windows 11 (10.0.22000 weird versioning I know!) dropping 32-bit distribution? \r\n\r\nWe already don't support installing on 32-bit build of Windows so these decisions are unrelated. WOW64 still exists and will be supported for many, many years into the future.\r\n\r\nMost of that code is VS's implementation of the solution & interaction with VS. The solution reader/writer is a very small amount of code.\r\n",
        "createdAt": "2022-04-20T06:41:33Z",
        "updatedAt": "2022-04-20T06:41:33Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "> Most of that code is VS's implementation of the solution & interaction with VS. The solution reader/writer is a very small amount of code.\r\n\r\nI was talking about only the parts that match MSBuild's. Disparate implementations are problematic and hard to maintain.",
        "createdAt": "2022-04-20T06:48:46Z",
        "updatedAt": "2022-04-20T06:48:46Z",
        "author": {
          "login": "Nirmal4G"
        }
      },
      {
        "body": "yes, please fix this, merging/trying to resolve conflicts a sln is a nightmare ",
        "createdAt": "2022-04-20T06:49:12Z",
        "updatedAt": "2022-04-20T06:49:12Z",
        "author": {
          "login": "MagicAndre1981"
        }
      },
      {
        "body": "Note that there's also an implementation in the dotnet/sdk for reading/writing sln files: https://github.com/dotnet/sdk/blob/main/src/Cli/Microsoft.DotNet.Cli.Sln.Internal/SlnFile.cs. Ideally, these different implementation would be merged and made available centrally (i.e. as a nuget package).",
        "createdAt": "2022-04-20T06:54:39Z",
        "updatedAt": "2022-04-20T06:54:39Z",
        "author": {
          "login": "ViktorHofer"
        }
      },
      {
        "body": "> You'll be happy to know, that starting in 17.2, our 15-20 year old code that handles the solution has been rewritten in C#, which is a step towards modernizing this.\r\n\r\ni'd be more happy if you had invested that time on xml based sln format instead.\r\n\r\n> I mean a real well though out plan that discusses the multi year migration plan for .NET projects and C++.\r\n\r\n- have VS understand both, the existing one and the new xml based, formats\r\n- expose it as experimental feature for next two releases of VS (`New > Solution` and `New > Solution (experimental)` with hover tip explaining it's xml based solution file, use at your own risk)\r\n- remove experimental feature flag and deprecate the old format two releases after that\r\n\r\nthat'll give enough time to gather feedback and work out of remaining corner cases.",
        "createdAt": "2022-04-20T07:16:55Z",
        "updatedAt": "2022-04-20T07:16:55Z",
        "author": {
          "login": "kasperk81"
        }
      },
      {
        "body": "> remove experimental feature flag and deprecate the old format two releases after that\r\n\r\nYou mean support the old format forever.\r\n\r\nSolutions files are old, and there have been attempts to replace them before. It's not impossible but its not the same as writing up a plan without knowledge of the implementation details (which I also don't know).",
        "createdAt": "2022-04-20T08:43:22Z",
        "updatedAt": "2022-04-20T08:51:18Z",
        "author": {
          "login": "davidfowl"
        }
      },
      {
        "body": "until there is a 100% confidence that all old sln features are supported in new xml based sln, yes. similar to how old and new csproj, vbproj, fsproj formats are supported by VS simultaneously. for most of the users, it will not come as a surprise at this point.\r\n\r\npreferably with diagnostics on first-time solution load (backed by a sentinel file), a popup with a message: \"Loading old-style .sln file. Do you want to upgrade to new format? Yes | No\". in future version, when new format has some mileage and tools are caught up, replace \"No\" option with \"Close\", make it the mandatory to upgrade and delete the old (https://github.com/microsoft/slngen based?) implementation from VS source code. as-if it never existed, \u00e0 la how project.json / xproj formats were \"phased out\".",
        "createdAt": "2022-04-20T09:56:25Z",
        "updatedAt": "2022-04-20T09:56:25Z",
        "author": {
          "login": "kasperk81"
        }
      },
      {
        "body": "I do agree. The configuration should be readable by a human without any tooling. IMHO the team at google with dart did a fantastic job. Their configuration file is aweasome.\nI would love to use their syntax with .net",
        "createdAt": "2022-07-17T10:07:58Z",
        "updatedAt": "2022-07-17T10:07:58Z",
        "author": {
          "login": "hu1buerger"
        }
      },
      {
        "body": "@Hu1buerger how does it look like in Dart?",
        "createdAt": "2022-07-17T10:16:18Z",
        "updatedAt": "2022-07-17T10:16:18Z",
        "author": {
          "login": "vrubleg"
        }
      },
      {
        "body": "@vrubleg take a look at this [doc](https://dart.dev/tools/pub/pubspec). And for a \"live\" example chosen at random by me see [here](https://github.com/flutter/samples/blob/main/form_app/pubspec.yaml).\r\n\r\nThe hole xml thing might me aweasome for the machine, but my brain likes to read a configuration that lists the important stuff, like dependencies, tooling, paths and so on. I do like the conditional features that the csproj brings, but i do not want to need to consult the documentation as i am changing the config - or need to use a tool to do that.\r\n\r\nTL;DR: Darts config reads more like human text.",
        "createdAt": "2022-07-17T10:29:15Z",
        "updatedAt": "2022-07-17T10:36:59Z",
        "author": {
          "login": "hu1buerger"
        }
      },
      {
        "body": "yes yaml is best for configurations, hands down! azure devops configurations, github ci and many other systems use yaml and those configs are fun to work with. BUT yaml is technically not feasible unfortunately. msbuild is tied to xml serialization.\r\n\r\nit is not perfect, but the modern project formats are concise, human readable and user can easily write it by hand (usually 5-20 lines for average project). if sln is switched to xml representation, majority of the community will be happy. something similar to: https://github.com/dotnet/msbuild/issues/1730#issuecomment-422169541.",
        "createdAt": "2022-07-17T10:39:20Z",
        "updatedAt": "2022-07-17T10:39:20Z",
        "author": {
          "login": "kasperk81"
        }
      },
      {
        "body": "Please, no YAML, it is a horrible format. Something like TOML would be much better, but it is also an alien format for MSBuild. The most logical and conforming way is to make it XML-based.",
        "createdAt": "2022-07-17T14:13:04Z",
        "updatedAt": "2022-07-17T16:08:27Z",
        "author": {
          "login": "vrubleg"
        }
      },
      {
        "body": "> . if sln is switched to xml representation, majority of the community will be happy. \r\n\r\nsomeone tried to [do it in xml](https://subsln.github.io/):\r\n\r\n _.Subsln files are used by [SubSolution tools](https://github.com/ReMinoer/SubSolution) to describe the content of Visual Studio solutions in a user-friendly syntax._ \r\n\r\n```\r\n<Subsln xmlns=\"http://subsln.github.io/\">\r\n    <Root>\r\n        <Folder Name=\"Tools\">\r\n            <Files Path=\"tools/*.bat\" />\r\n        </Folder>\r\n        <Folder Name=\"Tests\">\r\n            <Projects Path=\"**/*.Tests.csproj\" />\r\n        </Folder>\r\n        <Projects Path=\"src/\">\r\n    </Root>\r\n</Subsln>\r\n```\r\n\r\nVS2022 extension: https://marketplace.visualstudio.com/items?itemName=ReMinoer.SubSolution2022\r\nVS2019 extension: https://marketplace.visualstudio.com/items?itemName=ReMinoer.SubSolution2019",
        "createdAt": "2022-07-17T16:06:12Z",
        "updatedAt": "2022-07-17T16:06:12Z",
        "author": {
          "login": "MagicAndre1981"
        }
      },
      {
        "body": "XAML?",
        "createdAt": "2022-07-17T17:25:57Z",
        "updatedAt": "2022-07-17T17:25:57Z",
        "author": {
          "login": "gulshan"
        }
      },
      {
        "body": "> @NickCraver a workaround you could use for your case today is to customize MSBuild's view of the solution when it builds from the command line (as in `dotnet build`).\r\n> \r\n> You can do this with a [solution build customization](https://docs.microsoft.com/en-us/visualstudio/msbuild/customize-your-build#customizing-the-solution-build). Since your solution is `MiniProfiler.sln`, create a file named `after.MiniProfiler.sln.targets` that manipulates the `ProjectReference` item before MSBuild starts building things:\r\n> \r\n> ```\r\n> <Project InitialTargets=\"RemoveIncompatibleProjectsFromDotnetCoreBuild\">\r\n>   <Target Name=\"RemoveIncompatibleProjectsFromDotnetCoreBuild\"\r\n>           Condition=\"'$(MSBuildRuntimeType)' == 'Core'\">\r\n>     <ItemGroup>\r\n>       <!-- These projects don't successfully build in `dotnet build`, so don't build them\r\n>           when MSBuild is running on Core. -->\r\n>       <ProjectReferenceToAvoidInDotnetBuild Include=\"samples\\Samples.Mvc5.EFCore\\Samples.Mvc5.EFCore.csproj\" />\r\n>       <ProjectReferenceToAvoidInDotnetBuild Include=\"samples\\Samples.Mvc5\\Samples.Mvc5.csproj\" />\r\n> \r\n>       <ProjectReference Remove=\"@(ProjectReferenceToAvoidInDotnetBuild->'%(FullPath)')\" />\r\n>     </ItemGroup>\r\n>   </Target>\r\n> </Project>\r\n> ```\r\n\r\nHi,\r\nTried in VS 17.4.4, seems like this behavior is no longer supported. Are there alternatives?",
        "createdAt": "2023-01-30T08:19:03Z",
        "updatedAt": "2023-01-30T08:19:03Z",
        "author": {
          "login": "workgroupengineering"
        }
      },
      {
        "body": "@workgroupengineering please be specific about what you tried and how it didn't work; there should be no changes in that behavior.",
        "createdAt": "2023-01-30T14:06:36Z",
        "updatedAt": "2023-01-30T14:06:36Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I'm trying to run dotnet-format before the build starts whether it's launched from dotnet cli, visual studio, rider, etc.. .",
        "createdAt": "2023-01-30T14:15:26Z",
        "updatedAt": "2023-01-30T14:15:26Z",
        "author": {
          "login": "workgroupengineering"
        }
      },
      {
        "body": "This is best tracked as a Visual Studio feature suggestion. The best one that I know of is https://developercommunity.visualstudio.com/t/Clean-up-sln-VisualStudio-solution-fil/988209.\r\n\r\nIf Visual Studio changes the solution format, MSBuild would follow.\r\n\r\n**Edit 9/24**: Updated link from @chrisaut below that is better. My link https://developercommunity.visualstudio.com/t/Open-MicrosoftBuildTraversal-project-f/1371244 is one possible replacement but not exactly the same. Thanks!",
        "createdAt": "2023-08-24T15:13:45Z",
        "updatedAt": "2023-08-24T15:50:03Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "https://developercommunity.visualstudio.com/t/Clean-up-sln-VisualStudio-solution-fil/988209\r\n\r\nThis is the direct equivalent, as of Aug 9, 2023 it's status has been changed to \"On Roadmap\" ",
        "createdAt": "2023-08-24T15:34:20Z",
        "updatedAt": "2023-08-24T15:34:20Z",
        "author": {
          "login": "chrisaut"
        }
      },
      {
        "body": "> I'm gonna lobby for .slnx here!\r\n\r\nYou succeeded! https://www.youtube.com/watch?v=wzMMclD8QsI \ud83d\ude09",
        "createdAt": "2024-04-11T14:00:26Z",
        "updatedAt": "2024-04-11T14:00:26Z",
        "author": {
          "login": "am11"
        }
      },
      {
        "body": "Hey @rainersigwald should we change the status of this - or is there another issue tracking it? (couldn't find in search)",
        "createdAt": "2024-04-11T14:11:29Z",
        "updatedAt": "2024-04-11T14:11:29Z",
        "author": {
          "login": "NickCraver"
        }
      },
      {
        "body": "See the [discussion on Developer Community](https://developercommunity.visualstudio.com/t/Clean-up-sln-VisualStudio-solution-fil/988209#T-N10636836), though.\r\n\r\n> While it is really nice to see a progress with the preview of slnx in VS 2022 V 17.10.0 Preview 3.0, It comes as a significant disappointment that this solution might not be based on MSBuild (similar to traversal projects)\r\n> \r\n> To handle the complexity of enterprise builds, it is critical that we are able to express similar MSBuild capabilities like conditionals, imports of other target files, target/tasks execution (e.g to automate some tasks when working with several projects), shared/transfer of properties to projects\u2026\r\n> \r\n> We should be able to express in a very similar compact form what is demonstrated in the slnx preview with a MSBuild approach. Currently, MSBuild has to translate sln into a meta MSBuild project and we should avoid that step entirely (which slnx would not avoid).\r\n> \r\n> So, please, reconsider the usage of a MSBuild approach to express such slnx similar to what we have been already able to use with traversal projects.\r\n> ",
        "createdAt": "2024-04-11T14:19:28Z",
        "updatedAt": "2024-04-11T14:19:28Z",
        "author": {
          "login": "thomaslevesque"
        }
      },
      {
        "body": "The Microsoft MSBuild team is involved in the internal discussions and trying to guide the effort, and of course MSBuild will adapt to deal with what what we settle on, but that's not quite set yet so no additional concrete MSBuild work.",
        "createdAt": "2024-04-11T14:20:55Z",
        "updatedAt": "2024-04-11T14:20:55Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I agree with @xoofx that being able to express dependencies via msbuild conditions is something that we need. Many of our own repositories would immensely benefit from this, especially [the VMR effort](https://github.com/dotnet/dotnet). ",
        "createdAt": "2024-04-11T14:40:34Z",
        "updatedAt": "2024-04-11T14:40:34Z",
        "author": {
          "login": "ViktorHofer"
        }
      },
      {
        "body": "i'm just glad that guids are gone which fixes long standing issues like https://github.com/dotnet/project-system/issues/1821",
        "createdAt": "2024-04-11T15:26:14Z",
        "updatedAt": "2024-04-11T15:26:14Z",
        "author": {
          "login": "kasperk81"
        }
      },
      {
        "body": "@rainersigwald, thank you for the update. I have to admit that I don't have details about why `Classic C#` vs. `C#` distinction is needed at the solution level, but if/when slnx processing is integrated with MSBuild, it may be possible to unify the Type to just `C#` in solution and let SDK distinguish between the two if it's necessary (which it already seems to do around static evaluation of properties like `UsingMicrosoftNETSdkWeb`, without any help from sln context).",
        "createdAt": "2024-04-11T17:18:21Z",
        "updatedAt": "2024-04-11T17:18:21Z",
        "author": {
          "login": "am11"
        }
      },
      {
        "body": "> why `Classic C#` vs. `C#` distinction is needed at the solution level\r\n\r\nThat detail is not relevant to MSBuild; it helps Visual Studio decide which project system to initialize for the specific projects (there are two, https://github.com/dotnet/project-system and an older closed-source one that's used for non-.NET-SDK projects).",
        "createdAt": "2024-04-11T17:35:04Z",
        "updatedAt": "2024-04-11T17:35:04Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> That detail is not relevant to MSBuild; it helps Visual Studio decide which project system to initialize for the specific projects (there are two, https://github.com/dotnet/project-system and an older closed-source one that's used for non-.NET-SDK projects).\r\n\r\nWhy is that attribute even required? VS should be able to read the first line (or few lines) and determine which project system to use right?",
        "createdAt": "2024-04-13T14:38:08Z",
        "updatedAt": "2024-04-13T14:38:08Z",
        "author": {
          "login": "nvmkpk"
        }
      },
      {
        "body": "> VS should be able to read the first line (or few lines) and determine which project system to use right?\r\n\r\nI believe it's not possible to correctly handle every case without do a full xml deserialization, or even loading a full MSBuild to evaluate it. MSBuild projects are quite flexibie.",
        "createdAt": "2024-04-13T15:41:24Z",
        "updatedAt": "2024-04-13T15:41:24Z",
        "author": {
          "login": "huoyaoyuan"
        }
      },
      {
        "body": "> > VS should be able to read the first line (or few lines) and determine which project system to use right?\n> \n> I believe it's not possible to correctly handle every case without do a full xml deserialization, or even loading a full MSBuild to evaluate it. MSBuild projects are quite flexibie.\n\nBut what's strange is I created a slnx from a solution (.NET 8 Avalonia projects + xUnit). It wrote all projects without the attribute, except the xUnit one which had \"Classic C#\". I removed that attribute and it still worked without difference.\n\nAnother thing I noticed globbing (*.csproj or for solution items) did not work.",
        "createdAt": "2024-04-13T15:53:37Z",
        "updatedAt": "2024-04-13T15:53:37Z",
        "author": {
          "login": "Mrxx99"
        }
      },
      {
        "body": "> > > VS should be able to read the first line (or few lines) and determine which project system to use right?\r\n> > \r\n> > \r\n> > I believe it's not possible to correctly handle every case without do a full xml deserialization, or even loading a full MSBuild to evaluate it. MSBuild projects are quite flexibie.\r\n> \r\n> But what's strange is I created a slnx from a solution (.NET 8 Avalonia projects + xUnit). It wrote all projects without the attribute, except the xUnit one which had \"Classic C#\". I removed that attribute and it still worked without difference.\r\n> \r\n> Another thing I noticed globbing (*.csproj or for solution items) did not work.\r\n\r\nPlease submit this kind of feedback to the VS team via VS Feedback!",
        "createdAt": "2024-04-15T14:14:31Z",
        "updatedAt": "2024-04-15T14:14:31Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Hey folks, I'm the VS team. The \"Classic C#\" is just a point in time issue and we'll fix this in a future update to the format. This is a similar case to what's called out on https://github.com/dotnet/project-system/issues/1821, but we've come up with a solution to resolve this.",
        "createdAt": "2024-04-16T07:34:55Z",
        "updatedAt": "2024-04-16T07:34:55Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "> This is best tracked as a Visual Studio feature suggestion.\r\n\r\nWe are very interested in this but only as a dotnet feature not as a Visual Studio-specific feature.\r\n\r\nslnx is currently supported in Visual Studio but not Visual Studio for Mac and not Rider.\r\n\r\nThis implies that slnx doesn't work in cross-platform projects.\r\n\r\nThe current Rider status is https://youtrack.jetbrains.com/issue/RIDER-110777 from a month ago:\r\n\r\n> The new format is currently in preview, likely to change, and more importantly, undocumented. Microsoft have not been in touch about this, so we have no sight of changes or timelines. Once Microsoft has shared details with the rest of the dotnet ecosystem, we'll be in a better position to update about Rider support.\r\n\r\nCan I ask therefore: is this format now documented and communicated to developers of clients other than VS?",
        "createdAt": "2024-05-23T15:32:45Z",
        "updatedAt": "2024-05-23T15:32:45Z",
        "author": {
          "login": "charlesroddie"
        }
      },
      {
        "body": "> Visual Studio for Mac\r\n\r\nis retiring in august https://learn.microsoft.com/en-us/visualstudio/mac/what-happened-to-vs-for-mac",
        "createdAt": "2024-05-23T15:35:14Z",
        "updatedAt": "2024-05-23T15:35:14Z",
        "author": {
          "login": "kasperk81"
        }
      },
      {
        "body": "It's a positive change, but at the same time a disappointing one. (See [announcement](https://blog.ndepend.com/slnx-the-new-net-solution-xml-file-format/).) It seems that Microsoft has decided not to turn the solution file into a proper MsBuild file, but instead invented a specific XML format for the solution file.",
        "createdAt": "2024-05-24T11:08:24Z",
        "updatedAt": "2024-05-24T11:08:24Z",
        "author": {
          "login": "MikeRosoft"
        }
      },
      {
        "body": "if slnx parser in visual studio is using dotnet, it can depend on msbuild evaluation engine package for `Condition=` support without invoking the real msbuild\r\n\r\nflip side is dumb solution files (as they ever were) keep parser implementation efficient and user expectations in check",
        "createdAt": "2024-05-24T11:27:03Z",
        "updatedAt": "2024-05-24T11:27:03Z",
        "author": {
          "login": "kasperk81"
        }
      },
      {
        "body": "> is this format now documented and communicated to developers of clients other than VS?\r\n\r\nThe feature is highly incomplete and work in progress. We still need to wait for some time for announcement of it.",
        "createdAt": "2024-05-24T11:28:18Z",
        "updatedAt": "2024-05-24T11:28:18Z",
        "author": {
          "login": "huoyaoyuan"
        }
      },
      {
        "body": "if someone has knowledge/time to add github/linguist support (syntax highlighting on github) for slnx https://github.com/github-linguist/linguist/issues/7083\n\nhttps://github.com/github-linguist/linguist/blob/main/CONTRIBUTING.md#adding-a-language",
        "createdAt": "2024-10-09T10:17:26Z",
        "updatedAt": "2024-10-09T10:17:26Z",
        "author": {
          "login": "kasperk81"
        }
      },
      {
        "body": "@kasperk81 forwarded that idea to the owning team.",
        "createdAt": "2024-10-09T14:10:11Z",
        "updatedAt": "2024-10-09T14:10:11Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "first feature request posted: https://github.com/microsoft/vs-solutionpersistence/issues/61",
        "createdAt": "2024-10-10T19:00:33Z",
        "updatedAt": "2024-10-10T19:00:33Z",
        "author": {
          "login": "kasperk81"
        }
      }
    ]
  }
}