{
  "number": 3671,
  "title": "MsBuild node problem",
  "body": "### Steps to reproduce\r\n\r\nAdd following nuget feed: https://ci.appveyor.com/nuget/gitversion-8nigugxjftrw\r\n\r\nProject file\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFrameworks>net461</TargetFrameworks>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"GitVersionTask\" Version=\"4.0.0-beta0015\">\r\n      <!--<PrivateAssets>all</PrivateAssets>\r\n      <IncludeAssets>runtime; build; native; contentfiles; analyzers</IncludeAssets>-->\r\n    </PackageReference>\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nBuilding from command line (msbuild, or dotnet cli) both work.\r\nBuilding from VS results in an exception in the output windows:\r\n\r\n>MSBUILD : error MSB4166: Child node \"2\" exited prematurely. Shutting down. Diagnostic information may be found in files in \"C:\\Users\\Administrator\\AppData\\Local\\Temp\\\" and will be named MSBuild_*.failure.txt. This location can be changed by setting the MSBUILDDEBUGPATH environment variable to a different directory.\r\n========== Rebuild All: 0 succeeded, 1 failed, 0 skipped ==========\r\n\r\nThe content of the MSBuild_*.failure.txt is:\r\n\r\n> UNHANDLED EXCEPTIONS FROM PROCESS 7924:\r\n=====================\r\n29/08/2018 14:21:13\r\nSystem.ArgumentNullException: Value cannot be null.\r\nParameter name: value\r\n   at System.IO.BinaryWriter.Write(String value)\r\n   at Microsoft.Build.Framework.LazyFormattedBuildEventArgs.WriteToStream(BinaryWriter writer)\r\n   at Microsoft.Build.Framework.BuildWarningEventArgs.WriteToStream(BinaryWriter writer)\r\n   at Microsoft.Build.Shared.LogMessagePacketBase.WriteToStream(INodePacketTranslator translator)\r\n   at Microsoft.Build.Shared.LogMessagePacketBase.Translate(INodePacketTranslator translator)\r\n   at Microsoft.Build.BackEnd.NodeEndpointOutOfProcBase.RunReadLoop(Stream localReadPipe, Stream localWritePipe, ConcurrentQueue`1 localPacketQueue, AutoResetEvent localPacketAvailable, AutoResetEvent localTerminatePacketPump)\r\n===================\r\n\r\n\r\n### Expected  behavior\r\n\r\nWas expecting building from VS to work, because both `dotnet build` and `msbuild` from command line works. Looking at the failure.txt file it's very hard for me to equate that to any problem with my own project, or the nuget package involved - it seems like an msbuild issue.\r\n\r\n### Actual behavior\r\n\r\nError shown above.\r\n\r\n### Environment data\r\n`msbuild /version` output: 15.7.180.61344\r\n\r\nOS info:\r\n\r\nIf applicable, version of the tool that invokes MSBuild (Visual Studio, dotnet CLI, etc):\r\n\r\nTried with VS 15.8.2, 15.8.1, 15.7.6\r\n",
  "state": "OPEN",
  "createdAt": "2018-08-29T13:28:07Z",
  "updatedAt": "2024-02-21T16:33:10Z",
  "closedAt": null,
  "author": {
    "login": "dazinator"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "I agree that no matter what bad thing is happening in the build, that error shouldn't be presented to the user.\r\n\r\nUnfortunately, I can't seem to reproduce this using your instructions. My builds succeed. Has the possibly-bad package aged away or something? Can you still repro using just this project?",
        "createdAt": "2018-08-31T21:23:44Z",
        "updatedAt": "2018-08-31T21:23:44Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Yeah I can still repro this using the above project file, and latest vs update 15.8.2. Another user reported it here with 15.8.1: https://github.com/GitTools/GitVersion/issues/1458 and also provided a repro via gist.",
        "createdAt": "2018-09-01T10:45:54Z",
        "updatedAt": "2018-09-01T10:45:54Z",
        "author": {
          "login": "dazinator"
        }
      },
      {
        "body": "Also the error doesnt show up on the errors pane in VS at all, you have to look at \"output\" pane to see it.",
        "createdAt": "2018-09-01T10:50:14Z",
        "updatedAt": "2018-09-01T10:50:14Z",
        "author": {
          "login": "dazinator"
        }
      },
      {
        "body": "I found this issue when googling error message of CometaSolutions/UtilPack#30 , which seems to be about this same error. I do not know the details of how MSBuild internals work in multi-node building, but looking at disassembled code in `C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\MSBuild\\15.0\\Bin\\Microsoft.Build.Framework.dll` it seems that the only way string given to `BinaryWriter` can be `null` without checking for it is `originalCultureName` field of `LazyFormattedBuildEventArgs`. That field is assigned in constructor as `this.originalCultureName = CultureInfo.CurrentCulture.Name;`. Is it possible for the current culture name to be `null` in some special cases?\r\n\r\nEDIT: Alternatively, another way of passing `null` to `BinaryWriter` seems to be by iterating arguments, some of which may return `null` via using `Convert.ToString` method.",
        "createdAt": "2018-09-02T09:55:07Z",
        "updatedAt": "2018-09-02T09:57:49Z",
        "author": {
          "login": "stazz"
        }
      },
      {
        "body": "Ok, I think the GitVersion problem only arises if the project is _not_ in a git repo. I usually create a repo to hold my repro projects, so that explains why I wasn't seeing it.\r\n\r\nDebugging, @stazz was right; `originalCultureName` was `null`. I also don't understand how that could happen. Continuing to debug.",
        "createdAt": "2018-09-05T19:22:08Z",
        "updatedAt": "2018-09-05T19:22:08Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "This is a _very_ weird one.\r\n\r\nGitVersion 4.0.0-beta0015 redistributes `Microsoft.Build.Framework.dll`, version `15.1.548` (the VS 2017 RTM version). That's new, and it happens because GitVersion switched from referencing the v4 MSBuild assemblies in the GAC to referencing v15 assemblies via NuGet.\r\n\r\nI didn't think that would be a problem, because the worker `MSBuild.exe` should already have `Microsoft.Build.Framework` loaded before running tasks, and from the right place/version. And it does. BUT . . .\r\n\r\nWhen the task logs a warning, there are TWO copies of Framework loaded, one in the \"NuGet assembly loader domain\".\r\n\r\n```\r\nMicrosoft.Build.Framework.dll\tMicrosoft.Build.Framework.dll\tC:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\MSBuild\\15.0\\Bin\\Microsoft.Build.Framework.dll\tNo\tN/A\tSymbols loaded.\tC:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\MSBuild\\15.0\\Bin\\Microsoft.Build.Framework.pdb\t7\t15.08.166.59604\t<Unknown>\t02AA0000-02ABC000\t[9184] MSBuild.exe\t[1] MSBuild.exe\t\r\nMicrosoft.Build.Framework.dll\tMicrosoft.Build.Framework.dll\tC:\\Users\\raines\\.nuget\\packages\\gitversiontask\\4.0.0-beta0015\\build\\net461\\Microsoft.Build.Framework.dll\tYes\tN/A\tCannot find or open the PDB file.\t\t36\t15.01.548.43366\t2/14/2017 10:00 PM\t072A0000-072B6000\t[9184] MSBuild.exe\t[2] NuGet assembly loader domain\t\r\n```\r\n\r\nIt looks like that's caused by UtilPack here: https://github.com/CometaSolutions/UtilPack/blob/e74fce0aec6f4c6978832571de20935c238163c5/Source/UtilPack.NuGet.AssemblyLoading/NuGetAssemblyResolver.cs#L361\r\n\r\nI've debugged through a fair amount and I can't see why having this second Framework loaded in an appdomain matters. None of the objects I can see originate from the second assembly.\r\n\r\nDeleting `Microsoft.Build.Framework.dll` from the GitVersion NuGet package causes the build to succeed. And fortunately, it isn't necessary to redistribute it with a task -- if the task is running, MSBuild's assemblies are available for use.\r\n\r\n@dazinator I recommend you apply this patch in GitVersion:\r\n\r\n```diff\r\ndiff --git a/src/GitVersionTask/GitVersionTask.csproj b/src/GitVersionTask/GitVersionTask.csproj\r\nindex 6da556ca..3500e527 100644\r\n--- a/src/GitVersionTask/GitVersionTask.csproj\r\n+++ b/src/GitVersionTask/GitVersionTask.csproj\r\n@@ -79,8 +79,8 @@\r\n     <PackageReference Include=\"YamlDotNet\" Version=\"$(PackageVersion_YamlDotNet)\">\r\n         <PrivateAssets>All</PrivateAssets>   \r\n     </PackageReference>\r\n-    <PackageReference Include=\"Microsoft.Build.Utilities.Core\" Version=\"15.1.548\" />\r\n-    <PackageReference Include=\"Microsoft.Build.Framework\" Version=\"15.1.548\" />\r\n+    <PackageReference Include=\"Microsoft.Build.Utilities.Core\" Version=\"15.1.548\" ExcludeAssets=\"runtime\" />\r\n+    <PackageReference Include=\"Microsoft.Build.Framework\" Version=\"15.1.548\" ExcludeAssets=\"runtime\" />\r\n     <PackageReference Include=\"UtilPack.NuGet.MSBuild\" Version=\"$(PackageVersion_UtilPackNuGetMSBuild)\" />\r\n   </ItemGroup> \r\n```\r\n\r\nThat tells NuGet that you only need the `Microsoft.Build*` references at build time, and they should be gotten from elsewhere at runtime. That should cause the output package to not have a copy of MSBuild assemblies, and resolve the symptoms of this problem.\r\n\r\nFor a long-term fix I don't know what to do. We could default to `en-US` at serialize time if the culture is null, but that feels like spackling over a problem I don't fully understand.",
        "createdAt": "2018-09-05T20:04:42Z",
        "updatedAt": "2018-09-05T20:04:42Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald thank you for investigating and for the workaround. I will try the suggested patch and report back. ",
        "createdAt": "2018-09-05T20:24:43Z",
        "updatedAt": "2018-09-05T20:24:43Z",
        "author": {
          "login": "dazinator"
        }
      },
      {
        "body": "@rainersigwald Very nice work at catching the real issue! If I remember correctly, the desktop `AppDomain` will not trigger its `AssemblyResolve` event if it finds the corresponding assembly within the same directory as the assembly requesting it. If that is true, then the only way to fix is indeed to remove MSBuild assemblies from the directory where GitVersion task DLL files are being loaded. On .NET Core, the `AssemblyLoadContext` behaves differently, so that would explain why this happens only on desktop.\r\n\r\nThe reason why none of the MSBuild objects originate from the UtilPack AppDomain is probably because the GitVersion task only uses MSBuild to reference types. The reason why `originalCultureName` was `null` is a mystery though. How about setting it to empty string if the `CultureInfo.CurrentCulture.Name` is null, thus at least avoiding a hard crash like this? Would that cause the same hard-crashing issues on deserializing end, or would things just silently be ignored/default values used?",
        "createdAt": "2018-09-06T21:00:09Z",
        "updatedAt": "2018-09-06T21:00:09Z",
        "author": {
          "login": "stazz"
        }
      },
      {
        "body": "I haven't actually tried it, but my concern is serializing as empty-string if it's `null` might result in an exception at deserialize time. That's why I was contemplating falling back to something like `en-US` which might be wrong but should be valid.",
        "createdAt": "2018-09-06T21:34:47Z",
        "updatedAt": "2018-09-06T21:34:47Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald What is your opinion about which scenario is better for the users of MSBuild - the hard crash when serializing, or (hard?) crash when deserializing? I am all about detecting and reacting to errors as early as possible, but it seems harsh to render building completely inoperable for the end user because of this. If the crashing on deserializing end won't halt the whole build, then I think empty string would be at least one possible option to fix this. The users might still end up getting error messages, but at least their builds would work.\r\n\r\nThe root cause of why `CultureInfo.CurrentCulture.Name` is null I guess lies somewhere within commits made to .NET Desktop framework, or MSVS between versions 15.8.1 (if that was the last working version for this issue) and 15.8.2.",
        "createdAt": "2018-09-11T17:56:40Z",
        "updatedAt": "2018-09-11T18:06:27Z",
        "author": {
          "login": "stazz"
        }
      }
    ]
  }
}