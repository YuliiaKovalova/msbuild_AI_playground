{
  "number": 828,
  "title": "Upgrade \"Mismatched assemblies\" MSB3274 to error.",
  "body": "Originally asked for here:\nhttps://github.com/dotnet/roslyn/issues/5001\n\nThis warning should be upgraded to an error and fail the build. The warning is logged [here](https://github.com/Microsoft/msbuild/blob/f90dcff1db3b10c3b136bed1a23ce710f7c579cd/src/XMakeTasks/AssemblyDependency/ReferenceTable.cs#L2927).\n",
  "state": "OPEN",
  "createdAt": "2016-07-26T22:30:08Z",
  "updatedAt": "2024-02-21T16:38:23Z",
  "closedAt": null,
  "author": {
    "login": "AndyGerlicher"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Consider for Next Major Version"
  },
  "comments": {
    "nodes": [
      {
        "body": "@AndyGerlicher Shouldn't we also need to fix [this](https://github.com/Microsoft/msbuild/blob/f90dcff1db3b10c3b136bed1a23ce710f7c579cd/src/XMakeTasks/AssemblyDependency/ReferenceTable.cs#L2912)?\n",
        "createdAt": "2016-07-27T14:41:11Z",
        "updatedAt": "2016-07-27T14:41:11Z",
        "author": {
          "login": "akoken"
        }
      },
      {
        "body": "@AndyGerlicher \r\nIs this already taken/fixed? If it's not, I'd take and work on this issue.",
        "createdAt": "2017-12-20T10:13:07Z",
        "updatedAt": "2017-12-20T10:13:07Z",
        "author": {
          "login": "eriawan"
        }
      },
      {
        "body": "@eriawan Thanks for the interest! Andy's on vacation until January. It doesn't look like there's a fix for this at the moment, and normally I'd say to go for it.\r\n\r\nBut I'm concerned about the level of breakage this could cause. Updates to VS2017 are not supposed to break any existing project. This would take projects from compiling to not compiling. I _think_ that's ok, as long as they were guaranteed to be broken at runtime. But I'm not sure right now that that's guaranteed.\r\n\r\nI'd like to talk that over with Andy and the team, but it's Vacation Season, so that'll take a couple of weeks.\r\n\r\nIf you feel passionate about this, you can work on it before then, but be aware that there's a possibility that we can't take the fix, if we can find customers who are not currently broken at runtime even though they get this warning for some reason.\r\n\r\nSorry to discourage . . . I really appreciate the offer!",
        "createdAt": "2017-12-20T18:18:03Z",
        "updatedAt": "2017-12-20T18:18:03Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald \r\nThanks for the reply. Could you elaborate more on:\r\n\r\n>  But I'm not sure right now that that's guaranteed\r\n\r\nIMHO, this update to warning is very relevant and I also need this to enforce compatibility compliant in terms of assembly references and when dealing with various different .NET TFMs.\r\n\r\nI think I'll submit the PR in case if you and your team may accept and merge it \ud83d\ude42 \r\n",
        "createdAt": "2017-12-25T10:04:21Z",
        "updatedAt": "2017-12-25T10:04:21Z",
        "author": {
          "login": "eriawan"
        }
      },
      {
        "body": "@AndyGerlicher and @rainersigwald ,\r\n\r\nPR submitted. Merry Christmas and Happy holidays!\r\n\r\n",
        "createdAt": "2017-12-25T14:12:14Z",
        "updatedAt": "2017-12-25T14:12:14Z",
        "author": {
          "login": "eriawan"
        }
      },
      {
        "body": "@rainersigwald \r\n\r\nI'd say this is safe to do, since the new p2p protocol already does it. It [asks nuget for tfm compatibility](https://github.com/Microsoft/msbuild/blob/master/src/Tasks/Microsoft.Common.CurrentVersion.targets#L1601) and that task fails even before ResolveAssemblyReference runs when a p2p references a newer tfm. Today this new protocol does not work with old style csprojes because they do not use `TargetFramework` / `TargetFrameworks` but rather `TargetFrameworkVersion`. One interesting exercise would be to teach old style csprojes to adapt their tfm properties to `TargetFramework` so they can participate and fail before RAR. The question is, is it safer to do this or to just update RAR :). Both seem equally at risk. I'd lean for updating RAR to align it with the new world.\r\n\r\nAs a curious exercise, I created a NET SDK console app targeting net46 which references an old style library targetting net47. As expected, the nearest tfm check does not fail and it runs into RAR which emits the warning.\r\n",
        "createdAt": "2018-01-04T20:07:33Z",
        "updatedAt": "2018-01-04T20:07:33Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "Team triage: We are worried about taking this in a patch release. Marking for the next breaking change. We should revive #2824 at that time.\r\n\r\nFor now, this warning can be made an error via \r\n\r\n```xml\r\n<PropertyGroup>\r\n  <MSBuildWarningsAsErrors>$(MSBuildWarningsAsErrors);MSB3274</MSBuildWarningsAsErrors>\r\n</PropertyGroup>\r\n```",
        "createdAt": "2019-07-09T20:44:44Z",
        "updatedAt": "2019-07-09T20:46:17Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}