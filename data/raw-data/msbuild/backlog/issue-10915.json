{
  "number": 10915,
  "title": "Platform configuration is applied to other builds in batch scripts",
  "body": "### Issue Description\n\nI'm not sure if it's a bug, intentional or if I forgot something - but the behavior of msbuild / dotnet build within batch scripts doesn't make sense to me.\nI have a \u201crelease\u201d batch script in which another batch script is called that builds a CPP project using msbuild. Then the \u201crelease\u201d script simply uses `dotnet build -c Release` to first create a release build of a .NET Standard project and then `dotnet pack` to create the Nuget package.\nThe following folder structure is generated:\n```\nbin/\n  x64/\n    Release/\n      myproject.1.0.0.nupkg\n      netstandard2.0/\n        myproject.dll\n        ...\n```\nIf the lines of the \u201crelease\u201d script are executed manually in the console step by step, the following folder structure is created  (which is also the expected result):\n```\nbin/\n  Release/\n    myproject.1.0.0.nupkg\n    netstandard.2.0/\n      myproject.dll\n      ...\n```\nIt looks as if msbuild is applying the platform configuration of the CPP build to the dotnet release build in the batch script, although I have not specified the platform anywhere.\n\n### Steps to Reproduce\n\nHere are my scripts:\n**release.bat**\n```\nCALL build.bat Release\nCALL dotnet build NETPROJECT -c Release\nCALL dotnet pack NETPROJECT\nCALL docfx .\\docfx.json\n```\n\n**build.bat**\n```\nSET VcVarsPath=%VSPath%\\VC\\Auxiliary\\Build\\vcvarsall.bat\nCALL \"%VcVarsPath%\" x64 > nul 2>&1\n[...]\nIF \"%Debug%\"==\"1\" SET Configuration=Debug\nIF \"%Release%\"==\"1\" SET Configuration=Release\n\nCALL msbuild %Project% /p:Configuration=%Configuration% /p:Platform=x64\n```\nI execute the lines of the release.bat manually on the console:\n```\n> build.bat Release\n> dotnet build NETPROJECT -c Release\n> dotnet pack NETPROJECT\n```\n\n### Expected Behavior\n\nI expect the batch script to generate the same result as if I execute the lines manually.\nI have also tried to reset the configuration with `dotnet restore` / `dotnet clean` - without success. \n\n### Actual Behavior\n\nFor some reason, the platform configuration is applied in all subsequent dotnet calls if msbuild was previously executed with a platform configuration (in a batch file).\n\n### Analysis\n\n_No response_\n\n### Versions & Configurations\n\n17.3.1.41501",
  "state": "CLOSED",
  "createdAt": "2024-10-31T09:46:03Z",
  "updatedAt": "2025-02-06T12:01:43Z",
  "closedAt": "2025-02-06T12:01:41Z",
  "author": {
    "login": "dn9090"
  },
  "milestone": null,
  "assignees": {
    "nodes": [
      {
        "login": "JanKrivanek"
      }
    ]
  },
  "labels": [
    "needs-more-info",
    "stale",
    "closed-by-bot",
    "triaged"
  ],
  "comments": {
    "nodes": [
      {
        "body": "Thank you for the report.\n\nPlease be aware that MSBuild is resolving properties values from environment variables (if the MSBuild script is dereferencing property, that is not explicitly defined while an env var with same name exists - it'll be used). This seems what is happening in your case - as you are defining env var with name `Configuration`",
        "createdAt": "2024-11-05T15:13:20Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "> Thank you for the report.\n> \n> Please be aware that MSBuild is resolving properties values from environment variables (if the MSBuild script is dereferencing property, that is not explicitly defined while an env var with same name exists - it'll be used). This seems what is happening in your case - as you are defining env var with name `Configuration`\n\nThank you for your answer. Is there a way to prevent this? I find the order somehow strange. If no parameters are passed - okay makes sense (even if I would have preferred to name the variables MS_BUILD_CONFIGURATION) - but with CLI parameters I expected nothing to be pulled in.\nThe problem is that we set these variables in various (also non-msbuild build scripts). Removing them manually would be quite time-consuming for us.",
        "createdAt": "2024-11-05T16:26:03Z",
        "author": {
          "login": "dn9090"
        }
      },
      {
        "body": "> > Thank you for the report.\n> > Please be aware that MSBuild is resolving properties values from environment variables (if the MSBuild script is dereferencing property, that is not explicitly defined while an env var with same name exists - it'll be used). This seems what is happening in your case - as you are defining env var with name `Configuration`\n> \n> Thank you for your answer. Is there a way to prevent this? I find the order somehow strange. If no parameters are passed - okay makes sense (even if I would have preferred to name the variables MS_BUILD_CONFIGURATION) - but with CLI parameters I expected nothing to be pulled in. The problem is that we set these variables in various (also non-msbuild build scripts). Removing them manually would be quite time-consuming for us.\n\nUnfortunately this would break some of the common targets shipped with SDK/VS.\nWe're preparing functionality that would help you check for violations in opt-in form (['BuildCheck'](https://github.com/dotnet/msbuild/blob/main/documentation/specs/BuildCheck/BuildCheck.md), specifically [BC0103](https://github.com/dotnet/msbuild/blob/main/documentation/specs/BuildCheck/Codes.md#bc0103---used-environment-variable)",
        "createdAt": "2024-11-07T07:54:12Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "As for the mentioned feature - from .NET 9.0 (or 17.12 if you use msbuild.exe) you can opt in to the ['BuildCheck'](https://github.com/dotnet/msbuild/blob/main/documentation/specs/BuildCheck/BuildCheck.md) on commandline via `/check`\n\nThe [BC0103](https://github.com/dotnet/msbuild/blob/main/documentation/specs/BuildCheck/Codes.md#bc0103---used-environment-variable) is just suggestion level and scoped to user code - as this practice is still wide-spread.\n\nIn order to increase to severity and scope of check You'd need to add an `.editorconfig` file with something like:\n```ini\n[*.csproj]\nbuild_check.BC0103.severity=warning\nbuild_check.BC0103.scope=all\n```\n\nand then run your build with buildcheck opted in:\n\n```\ndotnet build /check\n```\n\nyou'd then see something like:\n\n```\n  MyProj succeeded with 6 warning(s) (0.3s) \u2192 C:\\tst\\Release\\net9.0\\MyProj.dll\n    C:\\src\\msbuild-2\\artifacts\\bin\\bootstrap\\core\\sdk\\9.0.200-preview.0.24523.19\\Sdks\\Microsoft.NET.Sdk\\Sdk\\Sdk.props(49,11): warning BC0103: https://aka.ms/buildcheck/codes#BC0103 - Property is derived from environment variable: 'MSBuildExtensionsPath'. Properties should be passed explicitly using the /p option.\n    C:\\tst\\obj\\MyProj.csproj.nuget.g.props(7,5): warning BC0103: https://aka.ms/buildcheck/codes#BC0103 - Property is derived from environment variable: 'USERPROFILE'. Properties should be passed explicitly using the /p option.\n    C:\\Program Files\\dotnet\\sdk\\9.0.100-rc.2.24474.11\\Current\\Microsoft.Common.props(84,119): warning BC0103: https://aka.ms/buildcheck/codes#BC0103 - Property is derived from environment variable: 'MSBuildUserExtensionsPath'. Properties should be passed explicitly using the /p option.\n    C:\\Program Files\\dotnet\\sdk\\9.0.100-rc.2.24474.11\\Current\\Microsoft.Common.props(102,20): warning BC0103: https://aka.ms/buildcheck/codes#BC0103 - Property is derived from environment variable: 'Configuration'. Properties should be passed explicitly using the /p option.\n    C:\\Program Files\\dotnet\\sdk\\9.0.100-rc.2.24474.11\\Microsoft.Common.CurrentVersion.targets(2579,5): warning BC0103: https://aka.ms/buildcheck/codes#BC0103 - Property is derived from environment variable: 'LOCALAPPDATA'. Properties should be passed explicitly using the /p option.\n    C:\\Program Files\\dotnet\\sdk\\9.0.100-rc.2.24474.11\\Microsoft.Common.CurrentVersion.targets(6846,5): warning BC0103: https://aka.ms/buildcheck/codes#BC0103 - Property is derived from environment variable: 'MSBuildExtensionsPath32'. Properties should be passed explicitly using the /p option.\n```\n\nWhich gives you info about what all properties in your build are sourced from env",
        "createdAt": "2024-11-07T09:04:42Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "@dn9090 I just wanted to check if there is anything further you think should be done on MSBuild side?\nI'm setting a flag that will autoresolve the issue after couple weeks if there is no response - but wanted to first give an explicit heads up on this.",
        "createdAt": "2024-12-23T09:27:03Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "This issue is marked as stale because feedback has been requested for 30 days with no response. Please respond within 14 days or this issue will be closed due to inactivity.\n<!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. -->",
        "createdAt": "2025-01-22T19:12:05Z",
        "author": {
          "login": "dotnet-policy-service"
        }
      },
      {
        "body": "This issue was closed due to inactivity. If you can still reproduce this bug, please comment with the requested information, detailed steps to reproduce the problem, or any other notes that might help in the investigation.\n<!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. -->",
        "createdAt": "2025-02-06T12:01:42Z",
        "author": {
          "login": "dotnet-policy-service"
        }
      }
    ]
  }
}