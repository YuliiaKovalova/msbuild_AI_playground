{
  "number": 33,
  "title": "Command-line option for displaying targets",
  "body": "Most build systems that allow the creation of custom targets also have a command-line option for displaying the available targets in a project:\n\ngradle tasks\nrake --tasks\ngrunt --help\n\nDevelopers working on projects that use MSBuild would benefit from a similar feature.\n",
  "state": "CLOSED",
  "createdAt": "2015-03-25T05:07:39Z",
  "updatedAt": "2024-02-21T17:32:06Z",
  "closedAt": "2020-02-18T21:42:21Z",
  "author": {
    "login": "eatdrinksleepcode"
  },
  "labels": [
    "help wanted",
    "Feature Request",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Backlog"
  },
  "comments": {
    "nodes": [
      {
        "body": "MSBuild team triage: Do you know about the /pp flag?\n\n```\n  /preprocess[:file]\n                     Creates a single, aggregated project file by\n                     inlining all the files that would be imported during a\n                     build, with their boundaries marked. This can be\n                     useful for figuring out what files are being imported\n                     and from where, and what they will contribute to\n                     the build. By default the output is written to\n                     the console window. If the path to an output file\n                     is provided that will be used instead.\n                     (Short form: /pp)\n                     Example:\n                       /pp:out.txt\n```\n",
        "createdAt": "2015-03-31T22:51:47Z",
        "updatedAt": "2015-03-31T22:51:47Z",
        "author": {
          "login": "AndyGerlicher"
        }
      },
      {
        "body": "I was not aware of that flag; thanks for pointing it out.\n\nHowever, I don't believe that the /pp flag really addresses the scenarios I am thinking of. As a developer on a project that uses MSBuild, particularly one that uses more than just the standard build targets (like [CoreFX](https://github.com/dotnet/corefx/)), I want to quickly see what targets are available for me to execute. Scrolling through a large aggregated project file doesn't really serve that purpose.\n",
        "createdAt": "2015-04-08T04:09:40Z",
        "updatedAt": "2015-04-08T04:09:40Z",
        "author": {
          "login": "eatdrinksleepcode"
        }
      },
      {
        "body": "I love the idea of having an easy way to display available targets.\n\nThe `/pp` can help. It can be used in connection with `find` to spot the available targets like this:\n\n```\nmsbuild /pp | find \"<Target \"\n```\n\nAn alternative I currently prefer follows the solution outlined here by using a custom or inline task: \nhttp://stackoverflow.com/questions/2618201/msbuild-is-there-a-way-to-list-all-the-build-targets-available-in-a-build-file/2781693#2781693\n\nNevertheless it would feel much better if the possibility to display available targets is a built-in feature of msbuild.\n",
        "createdAt": "2015-04-12T15:24:27Z",
        "updatedAt": "2015-04-12T15:24:27Z",
        "author": {
          "login": "edgeteal"
        }
      },
      {
        "body": "Marking this up for grabs. If someone cares to research the change we may be willing to accept it. I'd probably choose to dump the Target names available to the default/or specified *proj file.\n\nOne drawback I see is many of the 'common' Targets are not meant for direct consumption and I wouldn't want to encourage folks to use them.\n",
        "createdAt": "2015-04-22T03:11:38Z",
        "updatedAt": "2015-04-22T03:11:38Z",
        "author": {
          "login": "Craig-Campbell-MS"
        }
      },
      {
        "body": "I started to make some investigation. Here are some results:\n\nThe necessary changes depend on the behaviour we need. For instance rake lists all available tasks (tasks in rake are the equivalent of targets in msbuild) _with_ a description (descriptions in rake are the equivalent of labels in msbuild). Tasks without description are by default ignored. This way it is possible to have 'private' tasks that are not intended for execution by the user. Gradle has a similar behaviour where tasks without a description are handled differently than ones with a description.\n\nLets break down the necessary changes for this:\n1. Introduce a new parameterless switch. Therefore the enum `ParameterlessSwitch` must be changed. Alternative: If for some reason a parameterized switch is needed the enum `ParameterizedSwitch` must be used and also we need to take care to parse the given parameters in the static method `MSBuildApp.BuildProject(...)`.\n2. Introduce the core functionality. Similarly to the `pp` switch a `Project` instance is created with the method `ProjectCollection.LoadProject(...)`. A loop iterates over the `Project.Targets` property to print out the target names. A possible implementation of the core functionality which follows the implementation of the `pp` switch might look like this (without any bells and whistles):\n\n```\nProject project = projectCollection.LoadProject(projectFile, globalProperties, toolsVersion);\nforeach (var target in project.Targets)\n{\n  Console.Out.WriteLine(target.Key);\n}\n```\n\nThe method `MSBuildApp.BuildProject(...)` must be modified to execute the implementation.\n3. To imitate the behaviour in rake that only tasks with a description should be considered for print out, we can use the `Label` attribute in the `Target` element. This means targets like this are printed out:\n\n```\n<Target Name=\"RebuildAll\" Label=\"Rebuilds the whole project from scratch.\">\n```\n\nTargets without a `Label` attribute are ignored.\nTo implement this behaviour a new property `ProjectTargetInstance.Label` must be introduced and fed with a value, when the XML elements are parsed. This happens in the static method `Evaluator.ReadNewTargetElement(...)`. Depending on if the constructor for the class `ProjectTargetInstance` needs to be modified for this, this has a ripple effect on several other classes. This needs further investigation.\n\nFor point 3 an own issue might be necessary, since at the current point of time I cannot assess the impact of this change. A minimal implementation can however omit point 3.\n",
        "createdAt": "2015-05-04T18:16:39Z",
        "updatedAt": "2015-05-04T18:16:39Z",
        "author": {
          "login": "edgeteal"
        }
      },
      {
        "body": "This feature would make MsBuild a lot more accessible, so this would be helpful! \ud83d\udc4d ",
        "createdAt": "2018-01-03T07:21:18Z",
        "updatedAt": "2018-01-03T07:21:18Z",
        "author": {
          "login": "wallymathieu"
        }
      },
      {
        "body": "This sort of caveat makes it painful:\r\n'Specify the target after the /target: switch in the format <ProjectName>:<TargetName>. If the project name contains any of the characters %, $, @, ;, ., (, ), or ', replace them with an _ in the specified target name.'",
        "createdAt": "2018-08-24T07:49:17Z",
        "updatedAt": "2018-08-24T07:49:17Z",
        "author": {
          "login": "pellet"
        }
      },
      {
        "body": "Fast forward four years and still no listing of targets either in msbuild or in the newer dotnet.exe!!",
        "createdAt": "2019-09-19T09:14:48Z",
        "updatedAt": "2019-09-19T09:14:48Z",
        "author": {
          "login": "AbhishekTripathi"
        }
      },
      {
        "body": "Every one moves to CMake. Now!\r\n(Microsoft has moved, haven't they \ud83d\ude09)\r\n\r\nBut, seriously, give an intern at Microsoft this perfect first task and a week or two and she will get the `msbuild /targets` done. ",
        "createdAt": "2019-09-19T09:18:42Z",
        "updatedAt": "2019-09-19T09:20:47Z",
        "author": {
          "login": "mloskot"
        }
      },
      {
        "body": "@AbhishekTripathi to be fair, it's been up for grabs for 4 years. I do not think it would be terribly difficult.",
        "createdAt": "2019-09-20T22:25:27Z",
        "updatedAt": "2019-09-20T22:25:27Z",
        "author": {
          "login": "danmoseley"
        }
      }
    ]
  }
}