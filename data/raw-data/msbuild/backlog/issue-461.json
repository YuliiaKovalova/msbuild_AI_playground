{
  "number": 461,
  "title": "CopyLocal setting not used",
  "body": "This is related to #24.\n\nConsider the following project setup.\n\nProject A - References Project B\nProject B - References Common.dll\nCommon.dll is in the GAC\n\nWhen building ProjectA, [RAR](https://github.com/Microsoft/msbuild/blob/master/src/XMakeTasks/AssemblyDependency/ResolveAssemblyReference.cs) will resolve all assemblies and their dependencies and copy them to the output path when `CopyLocal` is found to be `True`. Before #24, the presence of any DLL in the GAC would set `CopyLocal` to `False` unless otherwise specified in the project file. After #24, it would only set it to `False` if the assembly was resolved _only_ from the GAC (no `HintPath`, etc.). If it was resolved locally  `CopyLocal` would be `True`. Among other reasons, this was intended to make builds more deterministic and less reliant on machine GAC state.\n\nFrom Project A to B there is no issue. The `CopyLocal` setting (`Private` tag in A.csproj) is honored. However, when building Project A, Common.dll will be resolved as a dependency and treated as a DLL (project data from B.csproj not read). Therefore, setting the `CopyLocal` flag in B.csproj will have no affect on the [CopyLocal algorithm](https://github.com/Microsoft/msbuild/blob/master/src/XMakeTasks/AssemblyDependency/Reference.cs#L1158) when building Project A. This issue is not caused by #24, but with that change assemblies that would typically be in the GAC that you may not want in your build will be included in the output. The only workaround would be to turn off #24 or include C.dll as a reference of Project A and set `CopyLocal` to `false` there.\n\nThe fix seems to be to read metadata from B.csproj and honor the `CopyLocal` flag when building A. Since RAR is not implemented in this way currently, this change would likely be fairly involved and a high potential for regression.\n",
  "state": "CLOSED",
  "createdAt": "2016-02-02T22:17:23Z",
  "updatedAt": "2024-02-21T17:29:09Z",
  "closedAt": "2019-11-18T21:43:36Z",
  "author": {
    "login": "AndyGerlicher"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "[Here](https://onedrive.live.com/redir?resid=BBE231AE0B2B8660!4015&authkey=!ALZtZGb10BBEmLA&ithint=file%2czip) is a demo project. \n",
        "createdAt": "2016-02-03T11:00:05Z",
        "updatedAt": "2016-02-03T11:00:05Z",
        "author": {
          "login": "avezenkov"
        }
      },
      {
        "body": "I had a production environment stopped because of it. :-(",
        "createdAt": "2017-01-13T10:17:44Z",
        "updatedAt": "2017-01-13T10:17:44Z",
        "author": {
          "login": "pedrofernandesfilho"
        }
      },
      {
        "body": "Team triage: hasn't seen much traffic in almost 4 years, very high risk of regression. Closing as won't-fix.",
        "createdAt": "2019-11-18T21:43:36Z",
        "updatedAt": "2019-11-18T21:43:36Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "This is breaking the blazor boot when trying to exclude an assembly from the initial load by using `<Private>false</Private>` because it doesn't propagate to all sub-references.",
        "createdAt": "2020-05-20T08:42:44Z",
        "updatedAt": "2020-05-20T08:42:44Z",
        "author": {
          "login": "isc30"
        }
      }
    ]
  }
}