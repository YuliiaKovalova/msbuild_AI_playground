{
  "number": 3460,
  "title": "Property function regression from MSBuild 15",
  "body": "### Steps to reproduce\r\n\r\nProject file (eg. named \"SomeProject.csproj\")\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<Project ToolsVersion=\"4.0\" DefaultTargets=\"Build\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\r\n  <ItemGroup>\r\n    <Foo Include=\"foo.xml\" />\r\n  </ItemGroup>\r\n  <PropertyGroup>\r\n    <_FileNamePrefixLength>$([MSBuild]::Add($(MsBuildProjectName.Length),1))</_FileNamePrefixLength>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <Bar Include=\"@(Foo-> 'Output\\$(MsBuildProjectName)-%(FileName)%(Extension)')\">\r\n      <TargetPath>$([System.String]::new(%(FileName)).Substring($(_FileNamePrefixLength)))%(Extension)</TargetPath>\r\n    </Bar>\r\n  </ItemGroup>\r\n  <Target Name=\"Build\">\r\n    <Message Text=\"%(Bar.Identity) -> %(Bar.TargetPath)\" Importance=\"High\" />\r\n  </Target>\r\n</Project>\r\n```\r\n\r\nDirectory contents:\r\nN/A\r\n\r\nCommand line\r\n```\r\nmsbuild\r\n```\r\n### Expected  behavior\r\nBuild passes with output (this is msbuild 14):\r\n```\r\nMicrosoft (R) Build Engine version 14.0.25123.0\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\nBuild started 6/28/2018 9:38:58 AM.\r\nProject \"<removed>\\SomeProject.csproj\" on node 1 (default targets).\r\nBuild:\r\n  Output\\SomeProject-foo.xml -> foo.xml\r\nDone Building Project \"<removed>\\SomeProject.csproj\" (default targets).\r\n```\r\n\r\n### Actual behavior\r\nBuild errors with evaluation error (msbuild 15):\r\n```\r\nMicrosoft (R) Build Engine version 15.8.86-preview+g4ef6bb1fb2 for .NET Framework\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\nBuild started 6/28/2018 9:39:02 AM.\r\nProject \"<removed>\\SomeProject.csproj\" on node 1 (default targets).\r\n<removed>\\SomeProject.csproj(11,7): error MSB4184: The expression \"\"%(FileName)\".Substring(12)\" cannot be evaluated. star\r\ntIndex cannot be larger than length of string. Parameter name: startIndex\r\nDone Building Project \"<removed>\\SomeProject.csproj\" (default targets) -- FAILED.\r\n\r\n\r\nBuild FAILED.\r\n\r\n\"<removed>\\SomeProject.csproj\" (default target) (1) ->\r\n  <removed>\\SomeProject.csproj(11,7): error MSB4184: The expression \"\"%(FileName)\".Substring(12)\" cannot be evaluated. st\r\nartIndex cannot be larger than length of string. Parameter name: startIndex\r\n\r\n    0 Warning(s)\r\n    1 Error(s)\r\n\r\nTime Elapsed 00:00:00.07\r\n```\r\n\r\n### Environment data\r\n`msbuild /version` output:\r\n```\r\nMicrosoft (R) Build Engine version 15.8.86-preview+g4ef6bb1fb2 for .NET Framework\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n15.8.86.63054\r\n```\r\nOS info: Win 10\r\n",
  "state": "CLOSED",
  "createdAt": "2018-06-28T16:42:29Z",
  "updatedAt": "2024-02-21T17:12:32Z",
  "closedAt": "2018-07-09T17:30:07Z",
  "author": {
    "login": "dfederm"
  },
  "labels": [
    "bug",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "cdmihai"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "After debugging, it looks to be checking the length of `%(FileName)`.\r\n\r\nIE, this does not repro:\r\n```\r\n  <ItemGroup>\r\n    <Bar Include=\"A-foo.xml\">\r\n      <TargetPath>$([System.String]::new(%(FileName)).Substring(2))</TargetPath>\r\n    </Bar>\r\n  </ItemGroup>\r\n```\r\n\r\nBut this does:\r\n```\r\n  <ItemGroup>\r\n    <Bar Include=\"SomeProject-foo.xml\">\r\n      <TargetPath>$([System.String]::new(%(FileName)).Substring(12))</TargetPath>\r\n    </Bar>\r\n  </ItemGroup>\r\n```\r\n\r\nAnd if I change the number to 11:\r\n```\r\n  <ItemGroup>\r\n    <Bar Include=\"SomeProject-foo.xml\">\r\n      <TargetPath>$([System.String]::new(%(FileName)).Substring(11))</TargetPath>\r\n    </Bar>\r\n  </ItemGroup>\r\n```\r\n\r\nIt works and produces \"-foo\" (leading dash since I took off one character)",
        "createdAt": "2018-06-28T17:09:22Z",
        "updatedAt": "2018-06-28T17:09:22Z",
        "author": {
          "login": "dfederm"
        }
      },
      {
        "body": "Found an easy unit test for this.\r\n\r\nIn ItemEvaluation_Tests.cs, add:\r\n```\r\n        // see https://github.com/Microsoft/msbuild/issues/3460\r\n        [Fact]\r\n        public void MetadataPropertyFunctionBug()\r\n        {\r\n            const string prefix = \"SomeLongPrefix-\"; // Needs to be longer than \"%(FileName)\"\r\n            var projectContent = $@\"\r\n<Project>\r\n  <ItemGroup>\r\n    <Bar Include=`{prefix}foo`>\r\n      <Baz>$([System.String]::new(%(FileName)).Substring({prefix.Length}))</Baz>\r\n    </Bar>\r\n  </ItemGroup>\r\n</Project>\r\n\".Cleanup();\r\n\r\n            var items = ObjectModelHelpers.GetItems(projectContent, allItems: true);\r\n\r\n            var expectedMetadata = new[]\r\n            {\r\n                new Dictionary<string, string>\r\n                {\r\n                    {\"Baz\", \"foo\"},\r\n                },\r\n            };\r\n\r\n            ObjectModelHelpers.AssertItems(new[] { $\"{prefix}foo\" }, items, expectedMetadata);\r\n        }\r\n```",
        "createdAt": "2018-07-08T14:58:08Z",
        "updatedAt": "2018-07-08T14:58:08Z",
        "author": {
          "login": "dfederm"
        }
      },
      {
        "body": "I've done a little debugging, so I'll leave some notes for my findings here.\r\n\r\nThis seems to happen as part of a \"first pass\" at metadata evaluation. Specifically, it seems to attempt to evaluate the metadata only expanding properties and not other metadata (`LazyItemEvaluator.ProcessMetadataElements`) so that it can gather referenced items. It doesn't actually use the result (obviously, since it's be incorrect), but if the evaluation leads to an exception like it does here, it fails the evaluation completely despite this being a discovery-based operation and not critical. A couple options I can think of:\r\n\r\n1. Ignore exceptions during this phase? If anything bad happens during the property-only expansion, just ignore it. If anything bad happens later during full evaluation, that's when it can really error.\r\n\r\n2. Detect the metadata reference (`%(...)`) and stop trying to expand the value during this property-only phase.\r\n\r\n3. Special-case this substring case somehow? Some of the other well-known functions don't seem to have error conditions which are similarly easily triggerable by unexpanded metadata. This seems like whack-a-mole though.\r\n\r\nI haven't tried it yet, but this seems to imply weird behavior if property expansion happens first. For example, what if I had something like `$([System.String]::new(%(FileName)).Replace('%', '@'))`. This initial pass seems like it would expand to `@(FileName)` which may actually be defined as an item group. This would lead to `@(FileName)` being seen as a referenced item, but maybe that doesn't really matter anyway.",
        "createdAt": "2018-07-08T15:37:40Z",
        "updatedAt": "2018-07-08T17:15:44Z",
        "author": {
          "login": "dfederm"
        }
      }
    ]
  }
}