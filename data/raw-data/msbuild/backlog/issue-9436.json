{
  "number": 9436,
  "title": "[Bug]: MSBUILD : error MSB4166",
  "body": "### Issue Description\n\nI'm hitting this issue with a UWP app. I'm reporting here as suggested by the docs page of MSB4166.\r\n\r\nOutput:\r\n```\r\nBuild started...\r\n1>------ Build started: Project: TestControlSample, Configuration: Debug x64 ------\r\n1>MSBUILD : error MSB4166: Child node \"2\" exited prematurely. Shutting down. Diagnostic information may be found in files in \"C:\\Users\\User\\AppData\\Local\\Temp\\MSBuildTempuser\\\" and will be named MSBuild_*.failure.txt. This location can be changed by setting the MSBUILDDEBUGPATH environment variable to a different directory.\r\n========== Build: 0 succeeded, 1 failed, 1 up-to-date, 0 skipped ==========\r\n```\r\nContents of MSBuild_*.failure.txt:\r\n```\r\nUNHANDLED EXCEPTIONS FROM PROCESS 18652:\r\n=====================\r\n10/20/2023 3:21:36 PM\r\nSystem.IO.IOException: Pipe is broken.\r\n   at System.IO.Pipes.NamedPipeServerStream.CheckConnectOperationsServer()\r\n   at System.IO.Pipes.NamedPipeServerStream.BeginWaitForConnection(AsyncCallback callback, Object state)\r\n   at Microsoft.Build.BackEnd.NodeEndpointOutOfProcBase.PacketPumpProc()\r\n===================\r\n```\r\n\r\n\r\n\n\n### Steps to Reproduce\n\nI'm just F5-ing the solution/startup app.\r\n\r\nBinary logs:\r\n[MSBuildReproLogs.zip](https://github.com/dotnet/msbuild/files/13395072/MSBuildReproLogs.zip)\r\n\n\n### Expected Behavior\n\nThe sample app deploys.\n\n### Actual Behavior\n\nbuild fails.\n\n### Analysis\n\nthe compilation step seems to succeed.\n\n### Versions & Configurations\n\nMSBuild version 17.7.2+d6990bcfa for .NET Framework\r\n17.7.2.37605\r\n",
  "state": "CLOSED",
  "createdAt": "2023-11-17T18:03:34Z",
  "updatedAt": "2023-11-29T11:04:11Z",
  "closedAt": "2023-11-29T11:04:10Z",
  "author": {
    "login": "SerendipitousTesselation"
  },
  "labels": [
    "bug",
    "needs-triage"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "rokonec"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "@SerendipitousTesselation Are there any associated crash dumps with this issue? (you should be able to locate the info in Application section of Windows Log in event viewer)",
        "createdAt": "2023-11-21T15:42:43Z",
        "updatedAt": "2023-11-21T15:42:43Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "There are, here it is:\r\n\r\n[MSB4166_CrashDump.zip](https://github.com/dotnet/msbuild/files/13450629/MSB4166_CrashDump.zip)\r\n",
        "createdAt": "2023-11-23T13:51:12Z",
        "updatedAt": "2023-11-23T13:51:12Z",
        "author": {
          "login": "SerendipitousTesselation"
        }
      },
      {
        "body": "Thank you for the data.\r\nCouple points:\r\n * The rootcause is AV (C0000005) during obtaining call address into GenXbf. We sometimes see similar simptomps when Antivirus/Antimalware software is involved. It however usually has slightly different symptomps - Antivirus usually injects self into the MSBuild process and causes AV there (during calls that it deems unsafe) - in such cases we can see Antivirus module loaded into the MSBuild address space. I cannot see any suspicious module in this dump. Still - it might be good to check if you can repro on a different machine (without 3rd pty antivirus)\r\n * The crash happens in `windows.ui.xaml.build.tasks` module - @maddymontaquila, @AllenD-MSFT - I located you as owners of XamlCompiler in AzDO - would you be able to reassign or add to proper engineering contact?\r\n\r\nThe crashing stack:\r\n\r\n```\r\n \tgenxbf.dll!XamlBinaryMetadataStore::GetXamlXmlNamespaceId(class std::shared_ptr<class XamlNamespace> const &,unsigned int &)\tUnknown\r\n \tgenxbf.dll!XamlBinaryMetadataStore::GetXamlTypeId(class std::shared_ptr<class XamlType> const &,unsigned int &)\tUnknown\r\n \tgenxbf.dll!XamlBinaryMetadataStore::GetXamlPropertyId(class std::shared_ptr<class XamlProperty> const &,class WinBluePropertyTypeCompatHelper const &,unsigned int &)\tUnknown\r\n \tgenxbf.dll!XamlBinaryFormatSubWriter2::PersistProperty(class std::shared_ptr<class XamlProperty> const &)\tUnknown\r\n \tgenxbf.dll!XamlBinaryFormatSubWriter2::PersistNode(class ObjectWriterNode const &)\tUnknown\r\n \tgenxbf.dll!XamlBinaryFormatWriter2::ProcessSubNodes(class std::shared_ptr<class ObjectWriterNodeList> const &,class std::vector<unsigned int,class std::allocator<unsigned int> > &)\tUnknown\r\n \tgenxbf.dll!XamlBinaryFormatWriter2::WriteAllNodes(class std::shared_ptr<class ObjectWriterNodeList> const &)\tUnknown\r\n \tgenxbf.dll!XbfWriter::GetOptimizedBinaryEncodingFromReader(class std::shared_ptr<class XamlReader> const &,class std::shared_ptr<class ObjectWriterNodeList> const &,class std::array<unsigned char,64> const &,bool,unsigned int *,unsigned char * *)\tUnknown\r\n \tgenxbf.dll!ProcessXamlText(unsigned char *,unsigned int,struct TargetOSVersion const &,bool,class std::array<unsigned char,64> const &,unsigned char * *,unsigned int *,unsigned int *,unsigned int *,unsigned int *)\tUnknown\r\n \tgenxbf.dll!WriteImpl(struct IStream * *,unsigned int,struct IXbfMetadataProvider *,class std::vector<class std::array<unsigned char,64>,class std::allocator<class std::array<unsigned char,64> > > const &,struct TargetOSVersion const &,enum XbfGenerationFlags,struct IStream * *,unsigned int *,unsigned int *,unsigned int *,unsigned int *)\tUnknown\r\n \tgenxbf.dll!Write\u001e()\tUnknown\r\n \t[External Code]\t\r\n>\tMicrosoft.Windows.UI.Xaml.Build.Tasks.dll!Microsoft.Windows.UI.Xaml.Build.Tasks.NativeMethodsHelper.Write(System.IntPtr dllHandle, System.Runtime.InteropServices.ComTypes.IStream[] xamlStreams, int numFiles, string[] pbChecksum, int checksumSize, Microsoft.Xaml.XBF.IXbfMetadataProvider provider, Microsoft.Xaml.XBF.TargetOSVersion targetVersion, uint xbfGenerationFlags, System.Runtime.InteropServices.ComTypes.IStream[] xbfStreams, out int errorCode, out int errorFileIndex, out int errorLine, out int errorColumn)\tC#\r\n \tMicrosoft.Windows.UI.Xaml.Build.Tasks.dll!Microsoft.Xaml.XBF.XbfGenerator.GenerateXbfFromStreams(System.IntPtr dllHandle, System.Runtime.InteropServices.ComTypes.IStream[] inputStreams, System.Runtime.InteropServices.ComTypes.IStream[] outputStreams, uint xbfGenerationFlags, string[] checksums, Microsoft.Xaml.XBF.TargetOSVersion targetOS, out int errorCode, out int errorFile, out int errorLine, out int errorPosition)\tC#\r\n \tMicrosoft.Windows.UI.Xaml.Build.Tasks.dll!Microsoft.Xaml.XBF.XbfGenerator.GenerateAll(System.IntPtr dllHandle, uint xbfGenerationFlags)\tC#\r\n \tMicrosoft.Windows.UI.Xaml.Build.Tasks.dll!Microsoft.Xaml.XBF.XbfGenerator.GenerateXbfFiles(uint xbfGenerationFlags, bool v80Compat)\tC#\r\n \tMicrosoft.Windows.UI.Xaml.Build.Tasks.dll!Microsoft.Windows.UI.Xaml.Build.Tasks.CompileXamlInternal.GenerateXbfFiles(System.Collections.Generic.IEnumerable<Microsoft.Xaml.XBF.IXbfFileNameInfo> xamlList)\tC#\r\n \tMicrosoft.Windows.UI.Xaml.Build.Tasks.dll!Microsoft.Windows.UI.Xaml.Build.Tasks.CompileXamlInternal.DoExecute()\tC#\r\n \tMicrosoft.Windows.UI.Xaml.Build.Tasks.dll!Microsoft.Windows.UI.Xaml.Build.Tasks.CompileXaml.Execute()\tC#\r\n \tMicrosoft.Build.dll!Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute()\tC#\r\n \tMicrosoft.Build.dll!Microsoft.Build.BackEnd.TaskBuilder.ExecuteInstantiatedTask(Microsoft.Build.BackEnd.ITaskExecutionHost taskExecutionHost, Microsoft.Build.BackEnd.Logging.TaskLoggingContext taskLoggingContext, Microsoft.Build.BackEnd.TaskHost taskHost, Microsoft.Build.BackEnd.ItemBucket bucket, Microsoft.Build.BackEnd.TaskExecutionMode howToExecuteTask)\tC#\r\n \tMicrosoft.Build.dll!Microsoft.Build.BackEnd.TaskBuilder.InitializeAndExecuteTask(Microsoft.Build.BackEnd.Logging.TaskLoggingContext taskLoggingContext, Microsoft.Build.BackEnd.ItemBucket bucket, System.Collections.Generic.IDictionary<string, string> taskIdentityParameters, Microsoft.Build.BackEnd.TaskHost taskHost, Microsoft.Build.BackEnd.TaskExecutionMode howToExecuteTask)\tC#\r\n \tMicrosoft.Build.dll!Microsoft.Build.BackEnd.TaskBuilder.ExecuteBucket(Microsoft.Build.BackEnd.TaskHost taskHost, Microsoft.Build.BackEnd.ItemBucket bucket, Microsoft.Build.BackEnd.TaskExecutionMode howToExecuteTask, System.Collections.Generic.Dictionary<string, string> lookupHash)\tC#\r\n \tMicrosoft.Build.dll!Microsoft.Build.BackEnd.TaskBuilder.ExecuteTask(Microsoft.Build.BackEnd.TaskExecutionMode mode, Microsoft.Build.BackEnd.Lookup lookup)\tC#\r\n \tMicrosoft.Build.dll!Microsoft.Build.BackEnd.TaskBuilder.ExecuteTask(Microsoft.Build.BackEnd.Logging.TargetLoggingContext loggingContext, Microsoft.Build.BackEnd.BuildRequestEntry requestEntry, Microsoft.Build.BackEnd.ITargetBuilderCallback targetBuilderCallback, Microsoft.Build.Execution.ProjectTargetInstanceChild taskInstance, Microsoft.Build.BackEnd.TaskExecutionMode mode, Microsoft.Build.BackEnd.Lookup inferLookup, Microsoft.Build.BackEnd.Lookup executeLookup, System.Threading.CancellationToken cancellationToken)\tC#\r\n \tMicrosoft.Build.dll!Microsoft.Build.BackEnd.TargetEntry.ProcessBucket(Microsoft.Build.BackEnd.ITaskBuilder taskBuilder, Microsoft.Build.BackEnd.Logging.TargetLoggingContext targetLoggingContext, Microsoft.Build.BackEnd.TaskExecutionMode mode, Microsoft.Build.BackEnd.Lookup lookupForInference, Microsoft.Build.BackEnd.Lookup lookupForExecution)\tC#\r\n \tMicrosoft.Build.dll!Microsoft.Build.BackEnd.TargetEntry.ExecuteTarget(Microsoft.Build.BackEnd.ITaskBuilder taskBuilder, Microsoft.Build.BackEnd.BuildRequestEntry requestEntry, Microsoft.Build.BackEnd.Logging.ProjectLoggingContext projectLoggingContext, System.Threading.CancellationToken cancellationToken)\tC#\r\n \tMicrosoft.Build.dll!Microsoft.Build.BackEnd.TargetBuilder.ProcessTargetStack(Microsoft.Build.BackEnd.ITaskBuilder taskBuilder)\tC#\r\n \t[Resuming Async Method]\t\r\n \t[External Code]\t\r\n \tMicrosoft.Build.dll!Microsoft.Build.BackEnd.RequestBuilder.DedicatedThreadsTaskScheduler.InjectThread.AnonymousMethod__6_0()\tC#\r\n \t[External Code]\t\r\n\r\n```",
        "createdAt": "2023-11-23T16:33:03Z",
        "updatedAt": "2023-11-27T15:29:33Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "Thank you for your analysis Jan.\r\n\r\nI've only got the default Windows Defender on my machine though the pc is company managed. So, I tried it on a VM and couldn't reproduce the issue there.\r\n\r\nI've also re-installed VS on my work PC which has got me a newer version (17.8) which  has fixed it for the PC too.\r\n\r\nGo figure, I guess it really was the anti-virus.\r\n\r\n",
        "createdAt": "2023-11-29T08:02:31Z",
        "updatedAt": "2023-11-29T08:02:31Z",
        "author": {
          "login": "SerendipitousTesselation"
        }
      },
      {
        "body": "@SerendipitousTesselation Thank you for getting back with your observations.\r\nI'll be closing this now - but please feel free to reopen and add additional data/dumps if this reoccurs - this is not the tipical manifestation of the antivirus/antimalware collision (they usually hook on LoadLibrary(Ex) calls, rather then GetProcAddress)",
        "createdAt": "2023-11-29T11:04:11Z",
        "updatedAt": "2023-11-29T11:04:11Z",
        "author": {
          "login": "JanKrivanek"
        }
      }
    ]
  }
}