{
  "number": 10181,
  "title": "Request to backport getResultOutputFile from 8.0.3xx to 8.0.1xx SDK.",
  "body": "https://github.com/dotnet/msbuild/pull/9640 introduced the `getResultOutputFile` which makes it possible to redirect the project evaluation output into a separate file. This feature has now become available as part of the 8.0.3xx SDK\r\n\r\nWe'd like to use this feature on a source-build .NET 8 SDK.\r\n\r\nThe source-built .NET 8 SDK is limited to the 8.0.1xx series, so the feature needs to be backported.\r\n\r\nThe backport can happen upstream (shared in this repo) or we can do it as package maintainers (each maintainer separately).\r\n\r\nI'm opening the issue to request the backport, and to increase awareness about the feature gap between Microsoft and source-built SDKs.\r\n\r\ncc @omajid @baronfel @Forgind @rainersigwald ",
  "state": "OPEN",
  "createdAt": "2024-05-28T04:28:46Z",
  "updatedAt": "2024-10-15T14:13:55Z",
  "closedAt": null,
  "author": {
    "login": "tmds"
  },
  "labels": [
    "Partner request",
    "triaged",
    "gathering-feedback"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "I'd like to understand more about the landscape here. Are there other tooling ecosystems with distros-take-only-intermittent-releases? If so, are they generally backport-friendly or forked?\r\n\r\nFrom the MSBuild team perspective, we have three ship vehicles:\r\n\r\n1. Source-build distro SDKs (at 8.0.1xx for a year)\r\n2. Microsoft-built .NET SDK (update MSBuild quarterly, support cadence for patches follows VS)\r\n3. Visual Studio (updates quarterly, has LTS releases with longer support lifecycles for fixes but not new features)\r\n\r\nMSBuild 17.8, which shipped in .NET 8.0.100 and VS 17.8, is in kind of an awkward spot: the VS flavor is supported for fixes [until July 2025](https://learn.microsoft.com/visualstudio/productinfo/vs-servicing#long-term-servicing-channel-ltsc-support), but VS would not want to take a new feature like this as a backport. Conversely the source-build SDK would want new features backported.",
        "createdAt": "2024-05-28T14:26:14Z",
        "updatedAt": "2024-05-28T14:26:14Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> Are there other tooling ecosystems with distros-take-only-intermittent-releases? If so, are they generally backport-friendly or forked?\r\n\r\n@omajid may be you have some insights?\r\n\r\n> MSBuild 17.8, which shipped in .NET 8.0.100 and VS 17.8, is in kind of an awkward spot: the VS flavor is supported for fixes [until July 2025](https://learn.microsoft.com/visualstudio/productinfo/vs-servicing#long-term-servicing-channel-ltsc-support), but VS would not want to take a new feature like this as a backport. Conversely the source-build SDK would want new features backported.\r\n\r\nWe need to try address the general issue of the feature gap.\r\n\r\nSpecifically for `getResultOutputFile`. Do you think we can have a backport of `getResultOutputFile` to 8.0.1xx on the short term (available by august/september)? Or is that not likely?",
        "createdAt": "2024-05-31T06:45:27Z",
        "updatedAt": "2024-05-31T06:45:27Z",
        "author": {
          "login": "tmds"
        }
      },
      {
        "body": "> Are there other tooling ecosystems with distros-take-only-intermittent-releases? If so, are they generally backport-friendly or forked?\r\n\r\nI don't think there's a common answer. It varies per project. Often it's a mix of both.\r\n\r\nProjects like OpenJDK, python and gcc have a large set of contributors representing different organizations (or no organization). The releases are also self-driven and aren't tied to other products (like IDEs/Visual Sudio). So, when evaluating changes, these projects are primarily deciding \"is this something we think will benefit our project or not?\" The exact policies for backporting generally vary between projects and even release branches, and also depend on the length of support of a release branch.\r\n\r\nForking, to some extent, is guaranteed. Almost every distro taking a tool needs to make some changes to it.  For example:\r\n\r\n- CentOS Stream 9 applies these .patch files as changes to Python 3.12: https://gitlab.com/redhat/centos-stream/rpms/python3.12/-/tree/c9s?ref_type=heads\r\n- Debian makes these changes to OpenJDK 11: https://sources.debian.org/patches/openjdk-11/11.0.23+9-1~deb11u1/\r\n- Fedora applies these .patch files to make changes to gcc: https://src.fedoraproject.org/rpms/gcc/tree/rawhide \r\n\r\nThese projects have some differences from .NET, though. In particular, contributions/maintenance is primarily driven by Microsoft for .NET, and the ability for non-Microsoft contributors to create, test, verify and ship additional changes is much more limited. IMO, we non-Microsoft contributors also have an additional risk for de-stabilizing or breaking .NET when we make changes that are not merged/tested as part of the .NET project.",
        "createdAt": "2024-06-04T16:23:14Z",
        "updatedAt": "2024-06-04T16:23:14Z",
        "author": {
          "login": "omajid"
        }
      }
    ]
  }
}