{
  "number": 8420,
  "title": "MSBuild arguments that duplicate Visual Studio Publish command",
  "body": "\r\nDotnet core 6\r\nVisual Studio 17.4.2\r\n\r\nWhen I publish my ClickOnce app from Visual Studio menu using a named .pubxml file  I get the following in the root publish folder:\r\n\r\n    Applicaation Files folder\r\n    setup.exe  \r\n    MyApp.application \r\n\r\nWhen I re-publish the app a version folder appears in the Application Files folder (User is prompted to update).\r\n\r\nThe preceding works great - now I want to reproduce it using the msbuild command line so I can run it from a script.\r\n\r\nWhen I run `MSBuild myproject.csproj /target:publish /p:PublishProfile=ProfileName /p:PublishDir=\"\\\\sharename\\folder\\\"` I get the following in the root publish folder:\r\n\r\n    Application Files folder\r\n    language folders for dotnet runtime\r\n    All dotnet runtime and application .dlls\r\n    Launcher.exe\r\n    Setup.exe\r\n    MyApp.application\r\n\r\nWhen I re-publish the app a the target folder is cleared and same files are copied again (User is not prompted to update).\r\n\r\n\r\nWhat arguments and/or additional commands do I need to use on the command line to achieve the exact same result that I get with Visual Studio when I click Publish?    I did look at the output window in VS after running a publish but I am unable to reproduce the same result.\r\n\r\n\r\nThanks.\r\n\r\n\r\n\r\n\r\n\r\n\t<Project>\r\n\t  <PropertyGroup>\r\n\t\t<ApplicationRevision>4</ApplicationRevision>\r\n\t\t<ApplicationVersion>1.0.0.*</ApplicationVersion>\r\n\t\t<BootstrapperEnabled>True</BootstrapperEnabled>\r\n\t\t<Configuration>Release</Configuration>\r\n\t\t<CreateWebPageOnPublish>False</CreateWebPageOnPublish>\r\n\t\t<GenerateManifests>True</GenerateManifests>\r\n\t\t<Install>True</Install>\r\n\t\t<InstallFrom>Unc</InstallFrom>\r\n\t\t<IsRevisionIncremented>True</IsRevisionIncremented>\r\n\t\t<IsWebBootstrapper>False</IsWebBootstrapper>\r\n\t\t<MapFileExtensions>True</MapFileExtensions>\r\n\t\t<OpenBrowserOnPublish>False</OpenBrowserOnPublish>\r\n\t\t<Platform>Any CPU</Platform>\r\n\t\t<PublishProtocol>ClickOnce</PublishProtocol>\r\n\t\t<PublishReadyToRun>False</PublishReadyToRun>\r\n\t\t<PublishSingleFile>False</PublishSingleFile>\r\n\t\t<RuntimeIdentifier>win-x64</RuntimeIdentifier>\r\n\t\t<SelfContained>True</SelfContained>\r\n\t\t<SignatureAlgorithm>(none)</SignatureAlgorithm>\r\n\t\t<SignManifests>False</SignManifests>\r\n\t\t<TargetFramework>net6.0-windows</TargetFramework>\r\n\t\t<UpdateEnabled>True</UpdateEnabled>\r\n\t\t<UpdateMode>Foreground</UpdateMode>\r\n\t\t<UpdateRequired>False</UpdateRequired>\r\n\t\t<WebPageFileName>Publish.html</WebPageFileName>\r\n\t\t<CreateDesktopShortcut>True</CreateDesktopShortcut>\r\n\t\t<ProductName>MyApp</ProductName>\r\n\t\t<PublisherName>Us</PublisherName>\r\n\t\t<History></History>\r\n\t  </PropertyGroup>\r\n\r\n",
  "state": "CLOSED",
  "createdAt": "2023-02-08T00:57:27Z",
  "updatedAt": "2024-02-21T19:04:11Z",
  "closedAt": "2024-02-21T19:04:11Z",
  "author": {
    "login": "sam-wheat"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "sujitnayak"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "The publishing step that performs the tasks that you mention run inside Visual Studio. When you publish with the msbuild CLI, these steps will not run. You would need to write your own script to do the filtering of the files that happens during publish invoked from Visual Studio.\r\nThanks. ",
        "createdAt": "2023-02-10T01:10:29Z",
        "updatedAt": "2023-02-10T01:10:29Z",
        "author": {
          "login": "sujitnayak"
        }
      },
      {
        "body": "That's a shame, this behaviour is different now than in the past - publishing a .NET 4.8 WPF application from command line with MSBuild /target:publish generates only the files necessary for the publish/install (Exactly as described by @sam-wheat).\r\n\r\nPublishing a .NET 6.0 WPF application generates a lot of superfluous files which appear to be copied to at least 3 different locations.\r\n\r\nWe are publishing ClickOnce through pipelines and being able to run a single MSBuild task to achieve this without having to write additional scripts is super useful.\r\n\r\nThis issue hasn't been closed, is it likely to be addressed?",
        "createdAt": "2024-01-05T09:11:20Z",
        "updatedAt": "2024-01-05T09:11:20Z",
        "author": {
          "login": "Brubning"
        }
      },
      {
        "body": "@Brubning \r\n\r\nTo redirect the ClickOnce artifacts to a different folder from the msbuild command line, you can override the ClickOncePublishDir property. For e.g. to redirect it to a folder named 'publish':\r\n\r\n_msbuild foo.csproj /t:publish /p:ClickOncePublishDir=publish\\ /p:PublishProfile=<path_to_pubxml>_\r\n\r\nThere are 2 caveats when you do so:\r\n1. It is mandatory to specify a trailing backslash to the value of the ClickOncePublishDir property.\r\n2. When the ClickOncePublishDir property is overriden, it is not cleaned by msbuild. You would need to author your own target to clean it before the publishing target runs. \r\n\r\nThanks.",
        "createdAt": "2024-02-07T20:16:15Z",
        "updatedAt": "2024-02-07T20:16:15Z",
        "author": {
          "login": "sujitnayak"
        }
      },
      {
        "body": "Closing the issue since a workaround has been provided.",
        "createdAt": "2024-02-21T19:04:11Z",
        "updatedAt": "2024-02-21T19:04:11Z",
        "author": {
          "login": "sujitnayak"
        }
      }
    ]
  }
}