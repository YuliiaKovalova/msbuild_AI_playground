{
  "number": 4619,
  "title": "Misleading error message when passing wrong argument to static method.",
  "body": "### Steps to reproduce\r\n```\r\n<!-- MultiplyValue either not defined or not a number -->\r\n<!--<MultiplyValue></MultiplyValue>-->\r\n<MultiplyResult>$([MSBuild]::Multiply(10000000, $(MultiplyValue)))</MultiplyResult>\r\n```\r\nBasically, using a static MSBuild method passing it an invalid argument. \r\nIn my case it was just not being defined because it was defined by another props file that wasn't included correctly.\r\n\r\n### Expected  behavior\r\nA new error message telling the user the issue is caused by the wrong argument being passed to the method instead of the generic error message telling me that the static method was not found.\r\nI looked at the error message online and could only fine people talking about how MSBuild or Visual Studio needed to be repaired, uninstalled and reinstalled because for some reason it couldn't find the definition for the static method I was trying to call.\r\n\r\n### Actual behavior\r\nError message:\r\n```\r\nInvalid static method invocation syntax:\r\n'[MSBuild]::Multiply(10000000, $(MultiplyValue))', Method '[MSBuild]::Multiply' not found. Static method invocation should be of the form: $([FullTypeName]::Method()), e.g. $([System.IO.Path]::Combine(`a`, `b`)).\r\n```\r\nThe _** Method X not found**_ piece is the confusing one because it makes it sound like MSBuild doesn't have a multiply method.\r\nEverywhere I looked people said that usually happens when MSBuild is out of date or not installed correctly.\r\n\r\n### OS info:\r\nVisual Studio Enterprise 2017 - Version 15.9.15\r\n",
  "state": "OPEN",
  "createdAt": "2019-08-15T15:24:51Z",
  "updatedAt": "2024-02-21T16:30:51Z",
  "closedAt": null,
  "author": {
    "login": "maxbouchez"
  },
  "labels": [
    "Area: Debuggability",
    "needs-design",
    "Area: Language",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Backlog"
  },
  "comments": {
    "nodes": [
      {
        "body": "> A new error message telling the user the issue is caused by the wrong argument being passed to the method instead of the generic error message telling me that the static method was not found.\r\n\r\nThis is a perfectly reasonable expectation, but the implementation makes it somewhat difficult. I think the implementation would need to:\r\n\r\n* Identify and remember the types that we're passing into the property function\r\n* Remember the types found when exploring options for the method\r\n* Emit both in the error message (`No overload matching `int, string` was found; options: Multiply(int, int)` but less confusing)\r\n* Ensure that this works both for property functions found by reflection and those with fast paths (maybe this is automagic, since a fast-path failure falls back to reflection? But must validate)",
        "createdAt": "2019-08-15T15:33:09Z",
        "updatedAt": "2019-08-15T15:33:09Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Another, cheaper option here would be to print both the unexpanded invocation (already done) and the expanded-except-for-the-property-function one. So in the case here:\r\n\r\n```\r\nInvalid static method invocation syntax:\r\n'[MSBuild]::Multiply(10000000, $(MultiplyValue))'\r\nexpanded to\r\n'[MSBuild]::Multiply(10000000, \"\")'\r\n```\r\n\r\nIt's not as nice but would probably really help with addressing root causes like \"`MultiplyValue` not defined\".",
        "createdAt": "2020-04-27T11:52:02Z",
        "updatedAt": "2020-04-27T11:52:02Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}