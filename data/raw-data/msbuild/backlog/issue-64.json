{
  "number": 64,
  "title": "Branching strategy",
  "body": "Can the owners comment on the branching strategy they intend to use going forward? In particular I am concerned about continuing divergence between master and xplat as time goes on.\n\nCompare to [CoreFX](https://github.com/dotnet/corefx), which is implementing cross-platform capabilities on the master branch.\n",
  "state": "CLOSED",
  "createdAt": "2015-04-08T04:21:38Z",
  "updatedAt": "2024-02-21T17:31:52Z",
  "closedAt": "2016-06-14T22:35:18Z",
  "author": {
    "login": "eatdrinksleepcode"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "The Great Merge"
  },
  "comments": {
    "nodes": [
      {
        "body": "@ValMenn @AndyGerlicher can you comment on this? I'm curious too about how changes from master are brought into the xplat branch?\n",
        "createdAt": "2015-05-13T13:40:27Z",
        "updatedAt": "2015-05-13T13:40:55Z",
        "author": {
          "login": "akoeplinger"
        }
      },
      {
        "body": "Yes please merge the branches into one consolidated cross-platform `master`.\n\nThe branches have already diverged by miles:\n\nComparison:\nhttps://github.com/Microsoft/msbuild/compare/master...xplat vs. https://github.com/Microsoft/msbuild/compare/xplat...master\n\ncc @dannyvv, @sarajoiner, @mmitche, @jaredpar, @tmat\n",
        "createdAt": "2015-05-24T07:31:30Z",
        "updatedAt": "2015-05-24T07:31:30Z",
        "author": {
          "login": "ghost"
        }
      },
      {
        "body": "I'm not familiar with the reasons for this,  @AndyGerlicher will have to comment on it.\n",
        "createdAt": "2015-05-26T16:31:24Z",
        "updatedAt": "2015-05-26T16:31:24Z",
        "author": {
          "login": "mmitche"
        }
      },
      {
        "body": "Sorry to not comment on this earlier. Our ultimate longer-term goal will be to have a single branch that contains Linux and Windows, but right now the quality bar for master is much higher because of potential regressions. We have a very large customer base and tight integration with Visual Studio so this is the main priority when considering changes. We would definitely approve targeted and well tested merges between branches though.\n",
        "createdAt": "2015-06-15T17:39:33Z",
        "updatedAt": "2015-06-15T17:39:33Z",
        "author": {
          "login": "AndyGerlicher"
        }
      },
      {
        "body": "Thanks for the update @AndyGerlicher! :+1: \n#116 was just a proof of concept based on dotnet and aspnet repositories (corefx, coreclr, Roslyn, dnx, dnvm etc.) having a unified master/dev branch.\nWould love to see MSBuild get aligned sometime in future. :)\n",
        "createdAt": "2015-06-15T17:46:40Z",
        "updatedAt": "2015-06-15T17:46:40Z",
        "author": {
          "login": "ghost"
        }
      },
      {
        "body": "So it looks like merging master into xplat is a better approach for now to avoid diverging the branches too much?\n",
        "createdAt": "2015-06-15T18:17:25Z",
        "updatedAt": "2015-06-15T18:17:25Z",
        "author": {
          "login": "akoeplinger"
        }
      },
      {
        "body": "@AndyGerlicher Can you clarify for me, what would be the problem with simply holding xplat code to the same standard as master? For that matter, why would you want to hold any of your code to any lower standard?\n\nAnd if you are going to keep a long-lived xplat branch, what is the strategy for keeping the two branches aligned and preventing conflicts? Should contributors to master also submit PRs to xplat? Or will someone be regularly merging master to xplat? In which case, will it be the responsibility of whoever does the merge to resolve any conflicts with code that has been merged by contributors?\n",
        "createdAt": "2015-06-17T23:08:47Z",
        "updatedAt": "2015-06-17T23:08:47Z",
        "author": {
          "login": "eatdrinksleepcode"
        }
      },
      {
        "body": "I apologize for not being more forthcoming about what our team is up to and where we\u2019re going. Currently we\u2019ve been focusing more on shipping Visual Studio 2015 than communicating the roadmap. After VS ships, it\u2019s our plan to consolidate code and focus on the open source repo. Currently what\u2019s on GitHub isn\u2019t what we\u2019re shipping. It\u2019s close, but we\u2019re still in our internal version control for build environment, localization, etc. And there have been a few changes since the version I synced here. Our goal is to lock down the internal version and ship out of the code here, so when I say holding code to a higher standard, that's what I mean. The compatibility bar for shipping is insanely high as unfortunately even minor changes have a tendency to break _someone_.\n\nAs for xplat, the reality is there is not feature parity at this point (multi proc builds, for example) and plans are still up in the air for what exact features will be available cross platform. And changes that have been made in that branch for instance might cause performance regression or just aren't fully vetted and therefor can\u2019t merge to master, but having the product be available is very valuable to get feedback from the community and to help plan what\u2019s next. This is why we will continue to have the xplat branch for the foreseeable future.\n\nAnd definitely if there are changes that should be in both (true bug fixes, etc.) we will accept PR for merges. And it\u2019s on our list to do when we can.\n",
        "createdAt": "2015-06-18T05:08:03Z",
        "updatedAt": "2015-06-18T05:08:03Z",
        "author": {
          "login": "AndyGerlicher"
        }
      },
      {
        "body": "I definitely share OPs concern.\n\nmsbuild is quickly turning into a requirement for making and bootstrapping the entire dotnet coreclr/corefx system on platforms not Windows. That means we will need to be able to build it ourself.\n\n> Can you clarify for me, what would be the problem with simply holding xplat code to the same standard as master?\n\nAgreed on this one.\n\n> And if you are going to keep a long-lived xplat branch, what is the strategy for keeping the two branches aligned and preventing conflicts?\n\nLong lived feature-branches always create extra work, technical debt and results in postponing dealing with real world issues which should be dealt with anyway.\n\nCurrently the xplat-branch probably wont receive pull-requests or real world bug-fixes required for xplat dotnet self-bootstrapping, because it's not first class. If patches submitted risks end up in a branch never used, who's going to bother writing them?\n\nFor the well-being of other dotnet-projects, getting the xplat branch merged or worked on in `master` should be a priority. This has worked fine for other dotnet-projects as long as the code has been held to the same standard as everything else.\n\n>  Currently what\u2019s on GitHub isn\u2019t what we\u2019re shipping. It\u2019s close, but we\u2019re still in our internal version control for build environment, localization, etc. ...  The compatibility bar for shipping is insanely high as unfortunately even minor changes have a tendency to break someone.\n\nI'm pragmatic and I can definitely respect this concern.\n\nHowever, IMO msbuild as provided through Nuget (as opposed to installed with VS or the Windows .NET SDK) should always map to Github source and not MS-internal source. And for that to work cross platform, the Github source needs to have one branch only, master, because when used correctly Nuget doesn't understand branching, and trying to make into doing so will only cause other issues.\n",
        "createdAt": "2015-06-23T09:19:36Z",
        "updatedAt": "2015-06-23T09:20:49Z",
        "author": {
          "login": "josteink"
        }
      },
      {
        "body": "@AndyGerlicher, thanks for your elaboration and i totally respect your priorities. Best of luck with VS2015 release, we are looking forward to it. :+1: \n\nOn this note, please take this into account that we (the community) are eager to participate and take your lead on how to avoid breaking changes and handle critical portions of msbuild with extreme cautions, once xplat will merge into master. :)\n\nNot aware of the long-term strategy, but it would be a real win-win for everyone if we have just one consolidated version of MSBuild source: this the open-source one.\n\nWhat I have understood, when msbuild will drop dependency on mono for non-Windows, corefx, roslyn and CoreCLR will be able to drop it to and become self-sufficient on all supported operating systems. This is another reason why masses are waiting for msbuild to progress as it being the first piece of the puzzle.\n",
        "createdAt": "2015-06-23T10:00:46Z",
        "updatedAt": "2015-06-23T10:00:46Z",
        "author": {
          "login": "ghost"
        }
      },
      {
        "body": "I was going to reply to @AndyGerlicher, but @josteink expressed my thoughts and concerns well.\n",
        "createdAt": "2015-06-23T18:30:50Z",
        "updatedAt": "2015-06-23T18:30:50Z",
        "author": {
          "login": "eatdrinksleepcode"
        }
      },
      {
        "body": "We posted a [roadmap](https://github.com/Microsoft/msbuild/wiki/Roadmap) on our wiki to lay out where we want to go.  Regarding branching strategy, the plan is fairly consistent with what @AndyGerlicher described above.  The update is:\n- A Microsoft-internal repo contains the official shipping source for Visual Studio 2015 and its updates.  We manually port changes from GitHub `master` to that system as they come in. :\n- `master` represents the source that we'd like to ship into Visual Studio 2015 updates and future VS versions.\n- `xplat` is a feature branch for cross-platform support (Mono and CoreCLR).  Because of time constraints and a desire to ship VS2015 Update 1 from `master`, we weren't willing to do that work there.\n\nIn the not-too-distant future, we plan to:\n- Make sure testing and gates on `xplat` are a superset of `master`.  https://github.com/Microsoft/msbuild/issues/342 is a first step here\n- Create a new branch for VS 2015 updates (split from `master` before the merge of `xplat`)\n- Merge `xplat` into master and retire `xplat`\n- Ship into VS as an externally-built component, so we can get rid of the internal fork of our code in favor of GitHub being the only source\n",
        "createdAt": "2015-11-09T22:24:57Z",
        "updatedAt": "2015-11-09T22:24:57Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> - Merge xplat into master and retire xplat\n> - Ship into VS as an externally-built component, so we can get rid of the internal fork of our code in favor of GitHub being the only source\n\n:+1: \n",
        "createdAt": "2015-11-10T04:45:23Z",
        "updatedAt": "2015-11-10T04:45:23Z",
        "author": {
          "login": "ghost"
        }
      },
      {
        "body": "This looks like very good development and a good direction for the project.\n\nI'm all for it.\n",
        "createdAt": "2015-11-10T06:13:57Z",
        "updatedAt": "2015-11-10T06:13:57Z",
        "author": {
          "login": "josteink"
        }
      },
      {
        "body": "Tracking this issue here: #305  \n\nCheck out our milestone tag, [\"The Great Merge\"](https://github.com/Microsoft/msbuild/issues?q=is%3Aopen+is%3Aissue+milestone%3A%22The+Great+Merge%22)\n",
        "createdAt": "2016-06-14T22:35:18Z",
        "updatedAt": "2016-06-14T22:35:18Z",
        "author": {
          "login": "Sarabeth-Jaffe-Microsoft"
        }
      }
    ]
  }
}