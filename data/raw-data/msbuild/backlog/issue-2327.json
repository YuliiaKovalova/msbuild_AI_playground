{
  "number": 2327,
  "title": "Git - Add $(GitCommitIDShort) and $(GitCommitIDFull)",
  "body": "Is it possible to add functionality so that we can use the above macros in our build paths? The idea being that when we **publish** we can have an output folder that is named with the commit ID (say first 16 chars).\r\n\r\nThis of course assumes that app sits within a folder within a Git repo.\r\n\r\nIs this possible? does anything like it exist already?\r\n\r\nI'm primarily dealing with a site in which we **publish** most stuff within Visual Studio (manually) at this point, we do not (yet) have a more sophisticated build system. We'd be able to let developers **publish** (say to a shared network path) when we want to deliver a new version of an app to say our QA team. This publish operation would then put the output into a folder specific to the commit from which it was built.\r\n\r\n$(GitCommitIDShort) could be say 8 hex chars, $(GitCommitIDLong) could be 16 hex chars and $(GitCommitIDFull) could be the full 40 char commit ID hex string.\r\n\r\nPS, I did just see $(GitVersioningDir) in this file, line 5:\r\n\r\nhttps://github.com/Microsoft/msbuild/blob/33eb3a05573f99af5b8d4433658194e33b666720/setup/Microsoft.Build.swixproj\r\n\r\nWhat is that?\r\n\r\n\r\n",
  "state": "CLOSED",
  "createdAt": "2017-07-19T21:58:10Z",
  "updatedAt": "2024-02-21T17:17:51Z",
  "closedAt": "2020-05-20T16:28:27Z",
  "author": {
    "login": "The-Futurist"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "So far, we've left this to extension mechanisms, and I think that's the right long-term approach. The core MSBuild engine isn't tied to any particular version-control system--it only knows about files on disk.\r\n\r\nThat said, there are many ways to get the information you want:\r\n* Get it from the build/CI system (you allude to not having one, which is probably worth changing!)\r\n* Write a target that directly `Exec`s `git` and captures its output (this is common though can be a bit of a pain)\r\n* Write a task that uses Git (maybe through [LibGit2Sharp](https://github.com/libgit2/libgit2sharp))\r\n* Use an existing NuGet package that provides this information (I'm aware of [GitInfo](https://github.com/kzu/GitInfo), [GitVersion](https://github.com/GitTools/GitVersion) and [Nerdbank.GitVersioning](https://github.com/AArnott/Nerdbank.GitVersioning/); there are [many others](https://preview.nuget.org/packages?q=git+version)). Note that some of these packages have Strong Opinions about how your _product's assembly versions_ should be defined.\r\n\r\nGiven your stated desires, I'd probably start with GitInfo, though that's not an endorsement or anything.\r\n\r\nIn this repo we're currently [using](https://github.com/Microsoft/msbuild/blob/5cb34686634f2211b355e4a82170c200fcf6b539/src/.nuget/project.json#L4) Nerdbank.GitVersioning with a [customized configuration](https://github.com/Microsoft/msbuild/blob/master/version.json).",
        "createdAt": "2017-07-19T23:00:53Z",
        "updatedAt": "2017-07-19T23:00:53Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "In addition to the above there's https://github.com/dotnet/sourcelink. We do not plan to build this into MSBuild itself.",
        "createdAt": "2020-05-20T16:28:27Z",
        "updatedAt": "2020-05-20T16:28:27Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}