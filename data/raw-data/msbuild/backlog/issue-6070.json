{
  "number": 6070,
  "title": "Additional profiling per pass for netcore projects",
  "body": "For netcore vs netframework performance per phase, SDK structuring related differences is probably going to be a bag full of issues and probably a big chunk. But that is still a gap that needs to be bridged to get users moving to netcore with minimum friction. That will involve analyzing netcore hot patterns in msbuild evaluation and acquiring recommendations that can be passed onto the SDK teams or fixed inside msbuild and CPS.\r\n1. Calling pattern change is implied by SDK requirements\r\n2. Msbuild for .NETcore sdk codepath specific optimizations (Ex: SDK resolver)\r\n3. CPS calling patterns that can be improved (Ex: shared evaluation across projects)\r\n4. Calling pattern change is required and MSBuild should react by improving perf in a scenario that wasn\u2019t hot before (Ex: globbing)\r\n\r\nNote: I've already added some basic profiling to each pass stop to get a count of the items (properties, imports, item definitions, project item definitions, numberofUsingTaskElements, read targets) being processed. The ask is to look at the time delta and tell us which needs additional profiling to identify hot paths in netcore\r\n\r\n\u00a0 | Core (in ms) | Metadata/project | Framework (in   ms) | Metadata/project\r\n-- | -- | -- | -- | --\r\nPass0 | 337 | \u00a0 | 117 | \u00a0\r\nPass1 (properties, imports) | 18180 | Properties = 735/project   \u00a0   Imports = 83/project[RS1]\u00a0[RS2]\u00a0[AC3]\u00a0[RS4] | 4535 | Properties = 613/project   \u00a0   Imports = 56/project\r\nPass2 (item definitions) | 36 | \u00a0 | 9 | \u00a0\r\nPass3 (project items, properties) | 7771 | 245/project | 1796 | 50-52/project\r\nPass4 (NumberOfUsingTaskElements) | 672 | 101/project | 149 | 57/project\r\nPass5 (read targets) | 1069 | 475-481/project (Cost on each project | 295 | 332-335 / project   (First project takes the bulk cost)\r\nTrue Evaluation Cost | 28065 | \u00a0 | 6901 | \u00a0\r\n\r\n**Evaluation improvement suggestion from Daniel Plaisted**\r\n\r\n- For profiling from the commandline, use https://github.com/dotnet/msbuild/blob/master/documentation/evaluation-profiling.md. Given @ladipro's analysis, we could bypass the full solution load repro and use this profiling to analyze things better.\r\n- An idea that Rainer had for improving evaluation time was to create a compiler for props and targets files which would translate them into executable .NET code.  This would eliminate the overhead of parsing the XML, and then make evaluation faster by essentially changing it from being an interpreted to a compiled language.  This could have a big impact on Visual Studio perf, as in a lot of scenarios they do re-evaluation (which can be slow on big projects), but don\u2019t necessarily re-build.\r\n\r\nAcceptance criteria:\r\n- Re-measure on latest Dev17 build.\r\n- For each evaluation pass understand why it takes longer for .NET Core than for .NET Framework projects.\r\n",
  "state": "CLOSED",
  "createdAt": "2021-01-22T01:47:39Z",
  "updatedAt": "2024-02-21T14:15:19Z",
  "closedAt": "2021-09-06T11:34:22Z",
  "author": {
    "login": "arunchndr"
  },
  "labels": [
    "Area: Performance",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "rokonec"
      }
    ]
  },
  "milestone": {
    "title": "VS 17.0"
  },
  "comments": {
    "nodes": [
      {
        "body": "Noting that I still don't think the count is right:\r\nhttps://github.com/dotnet/msbuild/issues/6039\r\n\r\nAlso, is this something you're planning to do? In other words, should I assign this to you?",
        "createdAt": "2021-01-27T19:37:25Z",
        "updatedAt": "2021-01-27T19:37:25Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "Updated the count with the CPS side numbers and picked up #6039. ",
        "createdAt": "2021-03-31T23:39:26Z",
        "updatedAt": "2021-03-31T23:39:26Z",
        "author": {
          "login": "arunchndr"
        }
      },
      {
        "body": "Have identified that root cause of major difference between framework and netcore project Evalution performance is too strict cache retention policy. Currently, simplified, we cache only 50 ProjectRootElements.\r\n\r\nBy increasing cache limit by setting env variable MSBUILDPROJECTROOTELEMENTCACHESIZE = 200 I have measured about 32% gain (1 - new/old) for incremental build m:1 and 25% for incremental build m:4.\r\n\r\nThis is explained by the fact that framework have considerable less project XMLs to parse while netcore is modularized into significantly bigger  project files hierarchy.\r\n\r\nThis problem will be addressed in #6715.\r\n\r\nOther than that I have not identified any other system bug and/or easy wins related to netcore projects Evaluation.",
        "createdAt": "2021-08-25T19:01:05Z",
        "updatedAt": "2021-08-25T19:01:05Z",
        "author": {
          "login": "rokonec"
        }
      },
      {
        "body": "Nice find @rokonec!",
        "createdAt": "2021-08-25T19:28:17Z",
        "updatedAt": "2021-08-25T19:28:17Z",
        "author": {
          "login": "arunchndr"
        }
      }
    ]
  }
}