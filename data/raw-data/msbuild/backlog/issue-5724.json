{
  "number": 5724,
  "title": "Globalization: ToolTask batch file encoding does not respect UTF-8 encoding",
  "body": "### Issue Description\r\nToolTask supports setting the StandardOutputEncoding but does not work properly for UTF-8 encoding.\r\n\r\n### Steps to Reproduce\r\n1. Japanese OS\r\n2. Use the attached project\r\n[BatchEncodingBug.zip](https://github.com/dotnet/msbuild/files/5192002/BatchEncodingBug.zip)\r\n3. From a Developer Command Prompt run the following.\r\na. chcp 65001\r\nb. MSBuild.exe BatchEncodingBug.vcxproj /t:TestExec\r\n\r\n### Expected Behavior\r\nThe output test should correctly display Japanese characters.\r\n\r\n### Actual Behavior\r\nSome of the text is garbled.\r\n\r\n### Analysis\r\nIf you look at the provided vcxproj file, we use the <Exec> task and set the output encoding to UTF-8. Because (in the repro steps) we ran \"chcp 65001\" we should be using UTF-8. When when msbuild runs the Exec, the batch file it generates is saved in ANSI instead of UTF-8. After running msbuild you'll see \"file.cmd\" which is a copy of the msbuild generated batch file and can verify that it is in ANSI.\r\n\r\nThis is coming from this file:\r\nhttps://github.com/dotnet/msbuild/blob/f2c4bfd563f559daca27ea1cd8ae40db24e2e7cd/src/Utilities/ToolTask.cs\r\n\r\nLook for EncodingUtilities.BatchFileEncoding. Ideally msbuild should respect the console code page.\r\n",
  "state": "CLOSED",
  "createdAt": "2020-09-09T01:07:59Z",
  "updatedAt": "2024-02-21T14:17:03Z",
  "closedAt": "2021-03-03T20:38:27Z",
  "author": {
    "login": "jgoshi"
  },
  "labels": [
    "bug",
    "under-investigation",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "Forgind"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "This looks similar to https://github.com/dotnet/msbuild/issues/4870",
        "createdAt": "2020-09-09T15:46:19Z",
        "updatedAt": "2020-09-09T15:46:19Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "A few extra details:\r\n\r\nThe reason why Exec/ToolTask saves the batch file using the OEM encoding is that it detects that all characters can be encoded using this encoding, since there is an `echo` with japanese characters and the OEM encoding is the japanese codepage. The problem is that cmd.exe does not use the OEM encoding for reading batch files but rather the console (input) code page (`GetConsoleCP`/`Console.InputEncoding`), which normally defaults to OEM but in this case was changed to utf-8 by virtue of using `chcp 65001`. \r\n\r\nThe fix may be to have `EncodingUtilities.BatchFileEncoding` use `Console.InputEncoding` where it currently uses `SystemOEMEncoding`.\r\n\r\nI also want to point out that this is a world readiness issue since the message will be printed correctly or not depending on the OEM encoding (hence OS language), and it surfaces in the use of `<CustomBuild><Message>` in C++ projects.",
        "createdAt": "2020-09-09T16:55:23Z",
        "updatedAt": "2020-09-09T16:56:32Z",
        "author": {
          "login": "tristanlabelle"
        }
      },
      {
        "body": "We can't use `Console.InputEncoding`--that applies only to a single process, and MSBuild has long-lived background processes that don't have a console (and may have been started under a different codepage).",
        "createdAt": "2020-09-09T20:49:24Z",
        "updatedAt": "2020-09-09T20:49:24Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Then you can P/Invoke for [`GetConsoleCP`](https://docs.microsoft.com/en-us/windows/console/getconsolecp) if that's any different. The idea is that at the time where `cmd.exe` is about to be started, the current process' console input code page is what `cmd.exe` will inherit and use to read the `.cmd` file, not the OEM codepage.",
        "createdAt": "2020-09-09T21:50:28Z",
        "updatedAt": "2020-09-09T21:50:28Z",
        "author": {
          "login": "tristanlabelle"
        }
      },
      {
        "body": "This came very late, but I could break this repro by switching `StdOutEncoding=\"UTF-8\"` to `UseUtf8Encoding=\"ALWAYS\"`. Is that viable for https://dev.azure.com/devdiv/DevDiv/_workitems/edit/1178352?",
        "createdAt": "2021-01-11T21:10:16Z",
        "updatedAt": "2021-01-11T21:10:16Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "![image](https://user-images.githubusercontent.com/12969783/104265028-91c2c400-5441-11eb-9d5f-da50ad81a889.png)\r\n",
        "createdAt": "2021-01-11T21:11:42Z",
        "updatedAt": "2021-01-12T03:17:02Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "@jgoshi checking if you've had a chance to review Forgind's comment",
        "createdAt": "2021-02-01T17:39:53Z",
        "updatedAt": "2021-02-01T17:39:53Z",
        "author": {
          "login": "marcpopMSFT"
        }
      },
      {
        "body": "@marcpopMSFT Do you mean if I've had a chance to try out to see if this bug is fixed:\r\nhttps://dev.azure.com/devdiv/DevDiv/_workitems/edit/1178352\r\n\r\nIf I change all appearances of StdOutEncoding=\"UTF-8\" to UseUtf8Encoding=\"ALWAYS\" in my projects?\r\n\r\nI haven't had a chance to try that out yet. I'll try to get access to a Japanese OS machine.\r\n\r\n@MrTrillian do you see any issues with this approach (if it works)? It would mean we'd need to change the Kitware CMake code to emit UseUtf8Encoding=\"ALWAYS\" instead of what they currently do (emit StdOutEncoding=\"UTF-8\").",
        "createdAt": "2021-02-01T21:23:40Z",
        "updatedAt": "2021-02-01T21:23:40Z",
        "author": {
          "login": "jgoshi"
        }
      },
      {
        "body": "I've just spent an hour trying to page back in the subtleties of this. I think the answer is that in the original bug, we're not using `<Exec>` directly but rather our `<CustomBuild>` which inherits from `ToolTask`, which does not have a `UseUtf8Encoding` property, see: https://github.com/dotnet/msbuild/blob/74cbf25b3543a5c8c886a5a6659316f18dc49b8a/src/Utilities/ToolTask.cs#L1376\r\n\r\nThere might be other reasons why it would be problematic even if we had `UseUtf8Encoding`, but it's so hard to reason about these issues... `cmd.exe` is such a major source of internationalization problems. :(",
        "createdAt": "2021-02-02T22:56:18Z",
        "updatedAt": "2021-02-02T22:56:51Z",
        "author": {
          "login": "tristanlabelle"
        }
      },
      {
        "body": "I can make something to add a UseUtf8Encoding property to ToolTask, have it default to detect, and let you overwrite it to always, then use it on the line you linked. Then we can try to test it. If that doesn't work for some reason, I'd say it's time to formally get a permanent exception. I think we've both forgotten about this bug and spent time trying to remember details more than once at this point. How does that sound?",
        "createdAt": "2021-02-02T23:23:16Z",
        "updatedAt": "2021-02-02T23:23:16Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "https://github.com/Forgind/msbuild/tree/UseUtf8Encoding has the change to permit specifying UseUtf8Encoding in a ToolTask.",
        "createdAt": "2021-02-04T19:08:30Z",
        "updatedAt": "2021-02-04T19:08:30Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "If I recall, the problem is this:\r\n\r\nIf `cmake` migrates to generating VS solutions that set `UseUtf8Encoding=\"ALWAYS\"`, then using `cmake` directly (outside of VS, in a `cmd.exe`), will have the side-effect of changing the console code page because `msbuild` will share the console with cmake and will inject a `chcp 65001`. It would be badly behaved for a command-line program to change its parent console's code page since that could have all kinds of other side-effects. For example, if `cmake` was being called in a batch file, it would change how the remaining bytes of that batch file get decoded. Inside VS, we don't have that problem because we are the root program and any consoles will be created only for child processes like when we launch msbuild.",
        "createdAt": "2021-02-08T18:56:21Z",
        "updatedAt": "2021-02-08T18:57:59Z",
        "author": {
          "login": "tristanlabelle"
        }
      },
      {
        "body": "Could you save it off, call MSBuild, and restore it? I remember trying to do something like that in MSBuild, and it hit a snag because there wasn't anything to attach a code page to, but presumably you could do it?\r\n\r\nAlso, I'm a little surprised, since I thought we spun up a new process for executing the code page work, hence that you changing the code page to 65001 didn't affect whether MSBuild used utf-8 or not. I may be misremembering that part.",
        "createdAt": "2021-02-08T20:45:19Z",
        "updatedAt": "2021-02-08T20:45:19Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "In this scenario, there is no Visual Studio involved to save off and restore the chcp. Anyone can use cmake.exe directly from the command line.\r\n\r\nNew processes don't guarantee isolation from code page changes, it depends on how the new processes are created. By default, they will share the console with their parent, and the console is what holds the code page state. msbuild probably needs child processes to share the console with their parent so they can output to it.",
        "createdAt": "2021-02-09T16:43:45Z",
        "updatedAt": "2021-02-09T16:44:03Z",
        "author": {
          "login": "tristanlabelle"
        }
      },
      {
        "body": "I wasn't necessarily thinking of saving it in association with anything in particular. If it were C#, I'd just assign a random variable to the code page and call chcp <random variable> at the end. From the command line, maybe an environment variable? I'm assuming you wouldn't have to do this for multiple different code pages in a single build.",
        "createdAt": "2021-02-11T20:42:54Z",
        "updatedAt": "2021-02-11T20:42:54Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "We can't implement this because anyone (say, my uncle) could call `cmake.exe` directly in a `cmd.exe` window. In that case, no code from Visual Studio is launching `cmake.exe` and can sandwich it between `chcp` calls. It's like if you open notepad on your computer, Visual Studio doesn't have a hook to run code before and after (hopefully!)",
        "createdAt": "2021-02-12T16:02:28Z",
        "updatedAt": "2021-02-12T16:02:28Z",
        "author": {
          "login": "tristanlabelle"
        }
      }
    ]
  }
}