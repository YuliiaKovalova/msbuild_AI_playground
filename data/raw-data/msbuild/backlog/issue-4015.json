{
  "number": 4015,
  "title": "SkipUnchangedFiles doesn't work on Linux",
  "body": "On Windows and MacOS `File.Copy` preserves `LastWriteTime`, but it is not the case on Linux.\r\nFor this reason `SkipUnchangedFiles=true` doesn't really work on Linux, because we use `LastWriteTime` to check if file has changed or not. Linux doesn't preserve `LastWriteTime`, so it will always differ for original file and copy.\r\n\r\nhttps://github.com/Microsoft/msbuild/pull/3997/files#diff-4826624e1418003ab55be4305eadddadR568\r\n",
  "state": "OPEN",
  "createdAt": "2018-12-17T21:50:57Z",
  "updatedAt": "2024-02-21T16:32:15Z",
  "closedAt": null,
  "author": {
    "login": "marcin-krystianc"
  },
  "labels": [
    "xplat",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "MSBuild 16.6"
  },
  "comments": {
    "nodes": [
      {
        "body": "Do you know if the timestamp is really _not preserved_, or if it's preserved incorrectly? This could be a symptom of https://github.com/dotnet/corefx/issues/31379, which is fixed for 3.0. If that's the case, I'd rather not take an MSBuild fix since it'll be inefficient after getting the runtime fix.",
        "createdAt": "2018-12-18T16:20:33Z",
        "updatedAt": "2018-12-18T16:20:33Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> Do you know if the timestamp is really _not preserved_, or if it's preserved incorrectly? This could be a symptom of [dotnet/corefx#31379](https://github.com/dotnet/corefx/issues/31379), which is fixed for 3.0. If that's the case, I'd rather not take an MSBuild fix since it'll be inefficient after getting the runtime fix.\r\n\r\nI've opened this ticket, because CI pipeline for `msbuild` reports that `SkipUnchangedFiles` doesn't work on Linux (See the workaround that is necessary in this test https://github.com/Microsoft/msbuild/blob/95862314f14733dd0086b1747264c40e6989f2cf/src/Tasks.UnitTests/Copy_Tests.cs#L568)\r\nI wrote a netcore2.1 app to reproduce it and run it on `Win10`, real `Ubuntu18.04` and `Ubuntu18.04/WSL`. \r\nSo it seems that `File.Copy` and `SetLastWriteTime` work differently on `Win10`, real `Ubuntu18.04` and `Ubuntu18.04/WSL`.\r\n- `Win10` -> `File.Copy` preserves timestamp and `SetLastWriteTime` doesn't loose precision\r\n- `Ubuntu18.04` -> `File.Copy` preserves timestamp and `SetLastWriteTime` looses precision (it is rounded to seconds dotnet/corefx#31379)\r\n- `Ubuntu18.04/WSL` ->  `File.Copy` doesn't preserve timestamps (very small difference in number of ticks) and `SetLastWriteTime` looses precision (rounded to seconds)\r\n\r\nFrom these results we see that only on `Ubuntu18.04/WSL` timestamps are not preserved for copies. Therefore we can conclude that the actual issue here is that `WSL` has a bug and CI pipeline for `msbuild` doesn't run on real `Linux`, but it rather runs on `Linux/WSL`.  \r\n\r\n**TestApp**:\r\n```\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            var files = new[] { \"some_file.0\", \"some_file.1\", \"some_file.2\", \"some_file.3\" };\r\n            foreach (var f in files)\r\n                File.Delete(f);\r\n\r\n            File.WriteAllText(files[0], \"\");\r\n            Thread.Sleep(2000);\r\n            File.Copy(files[0], files[1], true);\r\n            Thread.Sleep(2000);\r\n            File.Copy(files[1], files[2], true);\r\n            File.WriteAllText(files[3], \"\");\r\n            File.SetCreationTimeUtc(files[3], File.GetCreationTimeUtc(files[0]));\r\n            File.SetLastWriteTimeUtc(files[3], File.GetLastWriteTimeUtc(files[0]));\r\n\r\n            var creationTimes = files.Select(f => File.GetCreationTimeUtc(f)).ToArray();\r\n            var writeTimes = files.Select(f => File.GetLastWriteTimeUtc(f)).ToArray();\r\n\r\n            Console.WriteLine($\" file_name\\t cration_time\\t\\t last_write_time\\t\");\r\n\r\n            for (var i = 0; i < files.Length; i++)\r\n            {\r\n                Console.WriteLine($\" {files[i]}\\t {creationTimes[i].Ticks}\\t {writeTimes[i].Ticks}\\t\");\r\n            }\r\n        }\r\n    }\r\n```\r\n\r\n**Win10**\r\n```\r\nfile_name       creation_time            last_write_time\r\n some_file.0     636807631884239034      636807658196795794\r\n some_file.1     636807631904280965      636807658196795794\r\n some_file.2     636807631924320285      636807658196795794\r\n some_file.3     636807631884239034      636807658196795794\r\n```\r\n\r\n**Ubuntu18.04**\r\n```\r\nfile_name\t creation_time\t\t last_write_time\t\r\n some_file.0\t 636807656652480010\t 636807656652480010\t\r\n some_file.1\t 636807656652480010\t 636807656652480010\t\r\n some_file.2\t 636807656652480010\t 636807656652480010\t\r\n some_file.3\t 636807656650000000\t 636807656650000000\t\r\n```\r\n\r\n\r\n**Ubuntu18.04/WSL**\r\n```\r\nfile_name       creation_time            last_write_time\r\n some_file.0     636807648584019239      636807648584019239\r\n some_file.1     636807648584019230      636807648584019230\r\n some_file.2     636807648584019230      636807648584019230\r\n some_file.3     636807648580000000      636807648580000000\r\n```",
        "createdAt": "2018-12-18T22:22:09Z",
        "updatedAt": "2018-12-18T22:22:09Z",
        "author": {
          "login": "marcin-krystianc"
        }
      }
    ]
  }
}