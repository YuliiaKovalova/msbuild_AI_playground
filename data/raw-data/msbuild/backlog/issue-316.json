{
  "number": 316,
  "title": "can't use enum parameter type from arbitrary assembly",
  "body": "I have a custom msbuild task that specifies a public parameter of an enum type (CompressionLevel).  msbuild rejects the parameter, even though the assembly reference is listed.\n\n```\nD:\\CustomTasks.proj(52,25): error MSB4022: The result \"System.IO.Compression.CompressionLevel\" of evaluating the value \"System.IO.Compression.CompressionLevel\" of the \"ParameterType\" attribute in element <Parameter> is not valid. \n```\n\n``` xml\n<UsingTask TaskName=\"ZipDirectory\" TaskFactory=\"CodeTaskFactory\" AssemblyFile=\"$(MSBuildToolsPath)\\Microsoft.Build.Tasks.v4.0.dll\">\n <ParameterGroup>\n  <Directory ParameterType=\"System.String\" Required=\"True\"/>\n  <DestinationZipFile ParameterType=\"System.String\" Required=\"True\"/>\n  <CompressionLevel ParameterType=\"System.IO.Compression.CompressionLevel\" />\n </ParameterGroup>\n <Task>\n  <Reference Include=\"System.IO.Compression.FileSystem\"/>\n  <Code Source=\"$(BuildScriptsDirectory)\\ZipDirectory.cs\"/>\n </Task>\n</UsingTask>\n```\n",
  "state": "OPEN",
  "createdAt": "2015-10-23T22:35:39Z",
  "updatedAt": "2024-02-21T16:38:57Z",
  "closedAt": null,
  "author": {
    "login": "mayerc-MSFT"
  },
  "labels": [
    "help wanted",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "The root cause of this is how MSBuild resolves types in a `UsingTaskParameterGroupElement`, in [`ParseUsingTaskParameterGroupElement`](https://github.com/Microsoft/msbuild/blob/cd0a0ef5d134ce090c551f817414caa83bb016b7/src/XMakeBuildEngine/Instance/TaskRegistry.cs#L1535).  That code calls `Type.GetType` and, if that fails, falls back to looking \"next to `ITaskItem`\".  That's not sufficient in this case.\n\nWithout looking too deeply, I think that this can be improved by ensuring that all `<Reference>` tags have been considered before trying to figure out types for parameters.  That would be a fairly large shift since we currently consider XML elements as they come, but it seems doable.\n\nFor now, there are workaround options:\n- Accept a parameter of type `System.String` and do type coercion in your code (this is my favorite, thanks for suggesting it @Craig-Campbell-MS).\n- Use a precompiled DLL for the task (possibly distributed via NuGet).\n",
        "createdAt": "2015-11-02T16:45:05Z",
        "updatedAt": "2015-11-02T16:45:05Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}