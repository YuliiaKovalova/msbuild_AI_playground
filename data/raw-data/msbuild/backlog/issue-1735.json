{
  "number": 1735,
  "title": "Referencing MSBuildExtensionPath property in another property does not allow fallback",
  "body": "**Repo**\r\n\r\nConsider the following msbuild file:\r\n\r\n```xml\r\n<Project>\r\n <Import Project=\"$(MSBuildExtensionsPath)\\foo\" />\r\n</Project>\r\n```\r\n\r\nWhen you attempt to build this project, you get the following error:\r\n\r\n> ```C:\\temp\\foo.proj(2,10): error MSB4226: The imported project \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Professional\\MSBuild\\foo\" was not found . Also, tried to find \"foo\" in the fallback search path(s) for $(MSBuildExtensionsPath) - \"C:\\Program Files (x86)\\MSBuild\" . These search paths are defined in \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Professional\\MSBuild\\15.0\\bin\\MSBuild.exe.Config\". Confirm that the path in the <Import> declaration is correct, and that the file exists on disk in one of the search paths.   ```        \r\n\r\nWhich clearly states that it attempted to import the project and attempted to fallback to the `C:\\Program Files (x86)\\MSBuild` path after trying the local DevEnv path.\r\n\r\nNow consider this slightly modified project file:\r\n\r\n```xml\r\n<Project>\r\n   <PropertyGroup>\r\n      <MyExtensionPath>$(MSBuildExtensionsPath)</MyExtensionPath>\r\n   </PropertyGroup>\r\n   <Import Project=\"$(MyExtensionPath)\\foo\" />\r\n</Project>\r\n```\r\n\r\nWhen this project is ran, the value of  `MyExtensionPath` is immediately set to the default `MSBuildExtensionsPath` and you get the following error at build time:\r\n\r\n>```C:\\temp\\foo.proj(5,2): error MSB4019: The imported project \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Professional\\MSBuild\\foo\" was not found.  Confirm that the path in the <Import> declaration is correct, and that the file exists on disk.```\r\n\r\nAs you can see, in this case msbuild only attempted to import from the local DevEnv path and no fallback was attempted.\r\n\r\n**Expected**\r\n\r\nUnsure. In the ideal case, when processing `Imports` (and maybe other tags?), you could walk up the Variable definitions and see if `MSBuildExtensionsPath` was used as part of the definition and use the same fallback logic as when it is directly referenced. \r\n\r\nI suspect that this might be difficult, perhaps the error message could be expanded to reference the case that one might be using `MSBuildExtensionsPath` through an intermediary property.\r\n\r\nAt minimum, this should be documented in case a user trips over it. \r\n\r\n**NB**\r\n\r\nThe current source for the Evaluator explicitly references this situation as unsupported: \r\n\r\n``` \r\n// The value of the MSBuildExtensionsPath* property, will always be \"visible\" with it's default value, example, when read or\r\n// referenced anywhere else. This is a very limited support, so, it doesn't come in to effect if the explicit reference to\r\n// the $(MSBuildExtensionsPath) property is not present in the Project attribute of the Import element. So, the following is\r\n// not supported:\r\n//\r\n//      <PropertyGroup><ProjectPathForImport>$(MSBuildExtensionsPath)\\foo\\extn.proj</ProjectPathForImport></PropertyGroup>\r\n//      <Import Project='$(ProjectPathForImport)' />\r\n```\r\n\r\nref [here](https://github.com/Microsoft/msbuild/blob/e5bc7994348dba88d1f6fe2ebd6aa354355f0063/src/Build/Evaluation/Evaluator.cs#L2233)",
  "state": "OPEN",
  "createdAt": "2017-02-22T00:53:24Z",
  "updatedAt": "2024-02-21T16:37:28Z",
  "closedAt": null,
  "author": {
    "login": "mletterle"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "+1\r\nI'm also having this issue when building Dotfuscator projects. They also rely on the same mechanism.",
        "createdAt": "2017-03-16T12:14:47Z",
        "updatedAt": "2017-03-16T12:14:47Z",
        "author": {
          "login": "drolevar"
        }
      },
      {
        "body": "@drolevar FYI PreEmptive/Dotfuscator will be releasing an updated version in the next few days that works around this issue. In the meantime we've posted a Knowledge Base article that gives a few options for working around it manually - see [Issue: Building a VSIP project in Visual Studio 2017 fails since it cannot find PreEmptive.Dotfuscator.Targets](https://www.preemptive.com/support/resources/knowledge-base#dot).",
        "createdAt": "2017-03-16T18:52:59Z",
        "updatedAt": "2017-03-16T18:52:59Z",
        "author": {
          "login": "truist"
        }
      },
      {
        "body": "@truist Good to know! I have opted for option 2. But probably options 1 or 3 would be more future-proof, since the file gets overwritten.",
        "createdAt": "2017-03-16T19:06:18Z",
        "updatedAt": "2017-03-16T19:08:53Z",
        "author": {
          "login": "drolevar"
        }
      }
    ]
  }
}