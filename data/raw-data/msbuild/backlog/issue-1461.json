{
  "number": 1461,
  "title": "SPEC: Visual Studio & Toolset Discovery",
  "body": "Currently the logic to find out where MSBuild is located has grown in complexity and is not coupled to Visual Studio discovery. Unfortunately these two are more intermingled than we originally thought and must be revisited to fix some issues.\r\n\r\nThis discovery is required for MSBuild to operate because depending on environment (or mode) MSBuild behaves slightly different for things like extensions path and other items defined in the toolset.\r\n\r\nI am proposing that we detect and operate in one of three modes: `VS`, `Standalone`, and `None`. The logic to discover the environment could be as follows:\r\n\r\n```C#\r\nEntry = Entry point process exe\r\nDevConsole = Directory Exists (%VSINSTALLDIR%) && VisualStudioVersion == '15.0'\r\n\r\nif (Entry == 'devenv.exe')\r\n{ // Case #1\r\n  Mode = 'VS'\r\n  ToolsPath = Entry.Directory\\..\\..\\MSBuild\\15.0\\Bin\\\r\n  ToolsPath64 = %ToolsPath%\\Amd64\r\n  MSBuildExtensionsPath = Entry.Directory\\..\\..\\MSBuild\r\n  VisualStudioDir = Entry.Directory\\..\\..\\\r\n}\r\nif (Entry == 'MSBuild.exe')\r\n{\r\n  if (Entry.Directory like '%\\MSBuild\\15.0\\Bin\\%')\r\n  { // Case #2\r\n    Mode = 'VS'\r\n    ToolsPath = Entry.Directory  // Note: We may be already in Amd64\\MSBuild.exe. Must account for this.\r\n    ToolsPath64 = %ToolsPath%\\Amd64\r\n    MSBuildExtensionsPath = Entry.Directory\\..\\..\\\r\n    VisualStudioPath = Entry.Directory\\..\\..\\..\\\r\n  }\r\n  else\r\n  { // Case #3\r\n    Mode = 'Standalone'\r\n    ToolsPath = Entry.Directory\r\n    ToolsPath64 = Entry.Directory  // 64 not supported\r\n    MSBuildExtensionsPath = Entry.Directory\r\n    VisualStudioPath = null\r\n  }\r\n}\r\n\r\nif (Entry != MSBuild && Entry != VS)\r\n{\r\n    if (Entry.Directory like '%\\MSBuild\\15.0\\Bin\\%)\r\n    {\r\n      Mode = 'VS',  Case #2      \r\n    }\r\n    if (File Exists: Entry.Directory\\'MSBuild.exe' )\r\n    {\r\n      Mode = 'Standalone', Case #3   // Even in DevConsole\r\n    }\r\n    if (NOT File Exists: Entry.Directory\\'MSBuild.exe' )\r\n    {\r\n      if (DevConsole)\r\n      { // Case #4\r\n        Mode = 'VS\r\n        ToolsPath = DevConsole.VSPath\\MSBuild\\15.0\\Bin\r\n        MSBuildExtensionsPath = DevConsole.VSPath\\MSBuild\r\n        VisualStudioPath = DevConsole.VSPath        \r\n      }\r\n      else if (VS Setup COM API)\r\n      {\r\n        Mode = 'VS', Case #4\r\n        if (VSSetup.Count > 1) Warn\r\n      }\r\n      else if (Exists: AppContextBaseDir \\ MSBuild.exe)\r\n      {\r\n        Mode = 'Standalone', Case #3\r\n      }\r\n      else\r\n      {\r\n        Mode = 'None'\r\n      }\r\n    }\r\n}\r\n```\r\n\r\nPrinciples in each Mode:\r\n`VS`: \r\n* Toolsets are read from the process called. If you call into MSBuild.exe it should use the toolset that ships with that instance of Visual Studio\r\n* Extensions path set to `%VSINSTALLDIR%\\MSBuild` path with fallback to `c:\\Program Files (x86)\\MSBuild`.\r\n\r\n`Standalone`:\r\n* Toolsets are read locally (or hard coded locally in .NET Core).\r\n* Should never be aware of Visual Studio knowledge or SDKs.\r\n\r\n`None`:\r\n* This is the case where you reference (for example) Microsoft.Build.dll. Very few things should work.\r\n* Toolsets not read locally, only fallback to registry\r\n\r\n\r\nAction items:\r\n\r\n- [x] Implement spec in `BuildEnvironmentHelper.cs`.\r\n- [ ] Add warning when more than once instance of Visual Studio is found using the Setup COM API.\r\n- [x] When in `None` mode, ensure that the toolset reader does not throw. Likely nothing will build successfully, but for example the construction API should function. No project evaluation or build will work. \r\n- [ ] Potential idea: Publish NuGet package to help a standalone app find MSBuild. This would check if we're in DevConsole or use the Setup COM API to find VS and add AssemblyLoad logic to the current AppDomain to find Microsoft.Build.*.dll.",
  "state": "CLOSED",
  "createdAt": "2016-12-08T23:38:56Z",
  "updatedAt": "2024-02-21T17:23:32Z",
  "closedAt": "2017-02-21T16:18:28Z",
  "author": {
    "login": "AndyGerlicher"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "AndyGerlicher"
      }
    ]
  },
  "milestone": {
    "title": "Consider for Next Major Version"
  },
  "comments": {
    "nodes": [
      {
        "body": "Looks good overall. Comments/questions:\r\n\r\nYour pseudocode breaks my brain :)\r\n\r\nVS version >= 15.0 for all checks there.\r\n\r\nWhat's case 4?\r\n\r\nWhat is the case-3 \"even in devconsole\" case?\r\n\r\nUnify language around \"disconnected\" -> \"none\".",
        "createdAt": "2016-12-09T17:27:29Z",
        "updatedAt": "2016-12-09T17:27:29Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@kirillosenkov -- you've asked questions related to our current confusing behavior in this area before. Does this sound reasonable to you?",
        "createdAt": "2016-12-09T17:28:26Z",
        "updatedAt": "2016-12-09T17:28:26Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Sorry about the bad pseudocode, quick attempt to capture what we did on the whiteboard :)\r\n\r\nI would say VS version == 15.0 (CurrentVisualStudioVersion). If VS version is 16 or 17 and MSBuild is built for 15 we should probably ignore it?\r\n\r\nCase 4 is from the DevConsole, so we find VS by the environment variable.\r\n\r\nThe case-3 even in devconsole was a note because we had a discussion if we should do something different. But in that case you included an MSBuild.exe (or .dll) so you're intending to be in Standalone mode. So in that case we should not know about VS toolsets. So we would ignore VSINSTALLDIR, etc.",
        "createdAt": "2016-12-09T17:52:21Z",
        "updatedAt": "2016-12-09T17:52:21Z",
        "author": {
          "login": "AndyGerlicher"
        }
      },
      {
        "body": "Ok, sounds reasonable.",
        "createdAt": "2016-12-09T18:49:36Z",
        "updatedAt": "2016-12-09T18:49:36Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Related to https://github.com/Microsoft/msbuild/issues/114",
        "createdAt": "2016-12-12T17:44:53Z",
        "updatedAt": "2016-12-12T17:44:53Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "Quick question: is there an extensibility point (escape hatch) for the None mode? If I'm running MSBuild in a complete vacuum, I should be able to set some state or pass the path to my own toolset somehow.\r\n\r\nAlso, I remember that VS exe is not always 'devenv.exe', but I can't remember the case. Was it Blend, or Express? Or iso shell? Not sure now but worth checking.\r\n\r\nAlso, are there reasons why MSBuild 15 doesn't work with toolset 14?",
        "createdAt": "2016-12-15T01:20:28Z",
        "updatedAt": "2016-12-15T01:21:23Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "It's hard to tell from the pseudocode, but does this mean if an import isn't found in the DevEnv install location, it should/will fallback to the Program Files msbuild directory? \r\n\r\nBasically, shouldn't MSBuildExtensions be the aggregate of the DevEnv install and program files?",
        "createdAt": "2017-02-20T15:37:44Z",
        "updatedAt": "2017-02-20T15:37:44Z",
        "author": {
          "login": "mletterle"
        }
      },
      {
        "body": "@mletterle Yes, that's how it works: it'll be searched for in the VS instance install, then fall back to progfiles.",
        "createdAt": "2017-02-21T16:18:04Z",
        "updatedAt": "2017-02-21T16:18:04Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Closing this because I think it's currently fully implemented. Please reopen if I'm wrong @AndyGerlicher.",
        "createdAt": "2017-02-21T16:18:28Z",
        "updatedAt": "2017-02-21T16:18:28Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> Potential idea: Publish NuGet package to help a standalone app find MSBuild. This would check if we're in DevConsole or use the Setup COM API to find VS and add AssemblyLoad logic to the current AppDomain to find Microsoft.Build.*.dll.\r\n\r\nI would love to have this. In OmniSharp, we end up calling `TryFromSetupApi` via [reflection](https://github.com/OmniSharp/omnisharp-roslyn/blob/dev/src/OmniSharp.MSBuild/MSBuildHelpers.cs#L65-L78) in order to determine whether we should set environment variables to use MSBuild in Standalone mode. In VS Code, we only want to be standalone as a last resort.",
        "createdAt": "2017-04-28T18:45:29Z",
        "updatedAt": "2017-04-28T18:45:29Z",
        "author": {
          "login": "DustinCampbell"
        }
      }
    ]
  }
}