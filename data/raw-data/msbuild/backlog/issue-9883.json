{
  "number": 9883,
  "title": "[Built-in analyzer] Undefined property is used",
  "body": "### Background\r\n\r\nThis issue tracks one of the BuildCheck analyzers we would like to ship in-box with MSBuild.\r\n\r\n### Goal\r\n\r\nImplement an analyzer with the following rule: No property is used before it's defined, except for conditions.\r\n\r\n### Notes\r\n\r\nA non-existent property is silently expanded to an empty string, which can lead to unexpected behavior. We would like to flag this as a violation, except for cases where the property is tested in a condition like so `'$(MyProp)' == ''`.\r\n\r\n\r\n### Implementation Update\r\n\r\nFully working prototype: https://github.com/dotnet/msbuild/pull/10009\r\nFor easier reviewing and less conflucts during other ongoing work, the payload will be delivered in 3 subsequent payloads:\r\n* [x] Expander refactoring https://github.com/dotnet/msbuild/pull/10102\r\n* [ ] Wiring the data https://github.com/dotnet/msbuild/pull/10237\r\n* [ ] Actuall BuildCheck implementation - this is **blocked by**:\r\n   * [x] https://github.com/dotnet/msbuild/issues/10123\r\n   * [ ] https://github.com/orgs/dotnet/projects/373/views/7?pane=issue&itemId=57851137",
  "state": "CLOSED",
  "createdAt": "2024-03-18T11:54:17Z",
  "updatedAt": "2024-08-16T12:12:11Z",
  "closedAt": "2024-08-09T15:39:08Z",
  "author": {
    "login": "ladipro"
  },
  "labels": [
    "BuildCheck Suggestion",
    "triaged",
    "Area: BuildCheck"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "JanKrivanek"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "How about self-concatenation:\n\n```xml\n<PropertyGroup>\n  <DefineConstants>$(DefineConstants);DEBUG</DefineConstants>\n</PropertyGroup>\n```\n",
        "createdAt": "2024-03-18T16:13:08Z",
        "updatedAt": "2024-03-18T16:13:08Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "> How about self-concatenation:\r\n> \r\n> ```\r\n> <PropertyGroup>\r\n>   <DefineConstants>$(DefineConstants);DEBUG</DefineConstants>\r\n> </PropertyGroup>\r\n> ```\r\n\r\nIdeally that should be excluded as well... but depends on the way we go about implementing this.\r\n\r\nIn any case - this reminds me we should as well build the configurable `ChainablePropertyRedefinedInNonchainableWay` analyzer",
        "createdAt": "2024-03-18T16:41:17Z",
        "updatedAt": "2024-03-18T16:41:17Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "Prior art here is https://github.com/dotnet/msbuild/blob/7adbbc162c3d9f37d8b287dd03f637b1831441fa/src/Build/Evaluation/Expander.cs#L372-L376\r\n\r\n(and it may be enough to just use that, changing the severity of the event it fires)\r\n",
        "createdAt": "2024-03-18T16:53:42Z",
        "updatedAt": "2024-03-18T16:53:42Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Btw. this might be something that we might want to ship as message severity (or even disabled) in initial versions. It seems to be quite common pattern where custom scripts support optional passing of build parameter from commandline and counting on conditions to eval to false on undefined value.",
        "createdAt": "2024-03-18T18:52:55Z",
        "updatedAt": "2024-03-18T18:52:55Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "Conditions evaluating to false on undefined value should be allowed. The hope is that actually using the value of an undefined property (e.g. passing `$(MyPath)\\myfile` to a task) is not commonly used for legitimate purposes and flagging it would be valuable. But yes, it remains to be seen how noisy it is after we implement it and we can adjust the severity accordingly.",
        "createdAt": "2024-03-18T20:45:20Z",
        "updatedAt": "2024-03-18T20:45:20Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "Oh I missed the part about allowing conditions - sorry.\r\nYeah - it makes it much more usefull (as well as bit more challenging to implement :-))",
        "createdAt": "2024-03-19T07:04:31Z",
        "updatedAt": "2024-03-19T07:04:31Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "> Prior art here is\r\n> \r\n> https://github.com/dotnet/msbuild/blob/7adbbc162c3d9f37d8b287dd03f637b1831441fa/src/Build/Evaluation/Expander.cs#L372-L376\r\n> \r\n> (and it may be enough to just use that, changing the severity of the event it fires)\r\n\r\nPlaying with this - it does seem to catch only a case where property was used unitialized, referenced during evaluation, and then later on set to same value later during the evaluation (`MSB4211: The property \"{0}\" is being set to a value for the first time, but it was already consumed at \"{1}\".`).\r\n\r\nIt doesn't catch:\r\n* totally unknown property referenced during evaluation (`PropertyTrackingEvaluatorDataWrapper` can fill the gap)\r\n* uninitialized property used during target/task execution (regardless whether it's initialized later on or not)\r\n\r\nSo this will need to be reworked/adapted a bit.\r\n\r\nIn any case - it seems to keep the discussed permitted cases in mind:\r\n\r\nhttps://github.com/dotnet/msbuild/blob/cd64b7b4a690d809cf14fe2af807a328cce04e54/src/Build/Evaluation/Expander.cs#L1521-L1525",
        "createdAt": "2024-03-20T12:08:19Z",
        "updatedAt": "2024-03-20T12:09:09Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "> ... except for cases where the property is tested in a condition like so `'$(MyProp)' == ''`\r\n\r\nMy preference is to further specialize this by stating the condition occurs as part of setting that same property:\r\n\r\n```\r\n<MyProp Condition=\"'$(MyProp)' == ''\"\r\n\r\n ^^^^^^   matches   ^^^^^^^^^\r\n```",
        "createdAt": "2024-03-20T22:20:06Z",
        "updatedAt": "2024-03-20T22:20:06Z",
        "author": {
          "login": "sharwell"
        }
      },
      {
        "body": "> > ... except for cases where the property is tested in a condition like so `'$(MyProp)' == ''`\r\n> \r\n> My preference is to further specialize this by stating the condition occurs as part of setting that same property:\r\n> \r\n> ```\r\n> <MyProp Condition=\"'$(MyProp)' == ''\"\r\n> \r\n>  ^^^^^^   matches   ^^^^^^^^^\r\n> ```\r\n\r\nI quess matching versus empty in general is a reasonable exception from flagging. Even common targets use this practice quite a bit - e.g.:\r\n\r\nhttps://github.com/dotnet/msbuild/blob/de776177f6d540e656e6b0c6d5bb07f2ff518c19/src/Tasks/Microsoft.Common.tasks#L44\r\n\r\nI'm wondering whether there are other cases where usage of unitialized property in conditions might be reasonable - e.g. something like:\r\n\r\n```xml\r\n<Target Name=\"MyTarget\" AfterTargets=\"Build\" Condition=\"'$(OptOutFromMyTarget)' != 'true'\">\r\n...\r\n```\r\n\r\nOr maybe couple others that lead to decision for the pre-existing check to completely skip conditions.\r\nAs an alternative, we might make the Check accept an optional config argument (we introduced an option to pass this via `.editorconfig`) for opting in checking of the conditions (excluding the self initialization, or possibly the comparison to empty in general).\r\n\r\nBtw. this check will as well likely need to accept the scope configurability (to allow users to tune it just for their project files or their imports - but skipping sdk).",
        "createdAt": "2024-03-21T09:58:39Z",
        "updatedAt": "2024-03-21T09:58:39Z",
        "author": {
          "login": "JanKrivanek"
        }
      }
    ]
  }
}