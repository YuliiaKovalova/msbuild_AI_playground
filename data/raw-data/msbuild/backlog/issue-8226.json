{
  "number": 8226,
  "title": "Tips to speed up `<MSBuild/>` task calls?",
  "body": "### Issue Description\r\n\r\nAndroid .NET 6+ apps can be built for 4 architectures, so we have a step that calls `<MSBuild/>` per-`$(RuntimeIdentifier)`:\r\n\r\nhttps://github.com/xamarin/xamarin-android/blob/2a16828a6c73d837e81c3a2d0c1ae2840d00873e/src/Xamarin.Android.Build.Tasks/Microsoft.Android.Sdk/targets/Microsoft.Android.Sdk.AssemblyResolution.targets#L95-L100\r\n\r\nDepending on the project, we see 150-300ms in just an extra `<MSBuild/>` task call. It doesn't appear that the `.targets` running inside the call are doing that much work.\r\n\r\nAny thoughts on how we can speed this up?\r\n\r\n![image](https://user-images.githubusercontent.com/840039/206013386-173dbc42-d463-4c29-b149-8a2bd86140de.png)\r\n\r\n### Steps to Reproduce\r\n\r\n1. Create a .NET MAUI project template\r\n2. F5 on Android\r\n3. Change some .xaml\r\n4. F5 again, and look at the `.binlog`\r\n\r\n### Data\r\n\r\n[MauiApp43_Debug_AnyCPU_net7.0-android_Build_2022-12-06T14_11_51.1784775-06_00.binlog.zip](https://github.com/dotnet/msbuild/files/10170037/MauiApp43_Debug_AnyCPU_net7.0-android_Build_2022-12-06T14_11_51.1784775-06_00.binlog.zip)\r\n\r\n### Versions & Configurations\r\n\r\nIn the above log I was using VS 2022 17.4.2 and .NET 7. I believe we've always noticed this since .NET 6, though.\r\n\r\n### Regression?\r\n\r\nNo\r\n\r\n/cc @rokonec\r\n",
  "state": "CLOSED",
  "createdAt": "2022-12-06T20:21:10Z",
  "updatedAt": "2023-02-07T14:50:07Z",
  "closedAt": "2023-02-07T14:50:07Z",
  "author": {
    "login": "jonathanpeppers"
  },
  "labels": [
    "backlog",
    "Area: Performance",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "JanKrivanek"
      }
    ]
  },
  "milestone": {
    "title": "8.0P1"
  },
  "comments": {
    "nodes": [
      {
        "body": "There is an extra evaluation from the AdditionalProperties added the project.  Are those properties important?  Could they be removed?",
        "createdAt": "2022-12-14T02:42:08Z",
        "updatedAt": "2022-12-14T02:42:08Z",
        "author": {
          "login": "yuehuang010"
        }
      },
      {
        "body": "The main important one is `RuntimeIdentifier=%(_RIDs.Identity)`, we are building an Android app for 4 RIDs and merging into a final `.apk` or `.aab` file.",
        "createdAt": "2022-12-14T15:55:34Z",
        "updatedAt": "2022-12-14T15:55:34Z",
        "author": {
          "login": "jonathanpeppers"
        }
      },
      {
        "body": "@jonathanpeppers - We had a quick look with @rokonec and unfortunately there doesn't seem to be any hidden surprise - .csproj  needs re-evaluation that takes 66ms, build of the .csproj takes 86ms and rest to the 273ms of the MSBuild taks is taken up by numerous tasks pulled as dependencies or/and pre/after build tasks. So there unfortunately doesn't seem to be any low hanging fruit to tackle.\r\n\r\nThough we'd like to provide deeper insight into your case - can you please provide us with ETW trace of the repro?\r\nPlease use the following command to ensure build events for proper correlation with binlog:\r\n\r\n```\r\nperfview collect /NoGui /Providers=*Microsoft-Build /BufferSize:8096 /CircularMB:8096 /NoNGenRundown /Merge:False /DataFile:rebuild-console-redacted-false\r\n```\r\n\r\nplus the binlog for the identical run.\r\n\r\n\r\nAgain - we are not promissing miracles - but at least we should be able to provide much deeper insight.\r\n\r\nThank you",
        "createdAt": "2022-12-19T15:17:25Z",
        "updatedAt": "2022-12-19T15:17:25Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "I had to put it in two files to get around GitHub's file size limit:\r\n\r\n* [android-etw.zip](https://github.com/dotnet/msbuild/files/10269453/android-etw.zip)\r\n* [android-etw2.zip](https://github.com/dotnet/msbuild/files/10269461/android-etw2.zip)\r\n\r\nThere are two `.binlogs` inside, the IDE does Build/Deploy in two steps. You would be interested in the first one (runs `Build`) where we call `<MSBuild/>`.\r\n\r\n![image](https://user-images.githubusercontent.com/840039/208695617-30e59ee6-469a-4dfe-a65f-732d44e6a903.png)",
        "createdAt": "2022-12-20T14:52:28Z",
        "updatedAt": "2022-12-20T14:53:05Z",
        "author": {
          "login": "jonathanpeppers"
        }
      },
      {
        "body": "WIP notes - steps to reproduce:\r\n\r\n```\r\n> dotnet new maui -n maui-test\r\n> dotnet restore .\\maui-test\\maui-test.csproj\r\n> dotnet build .\\maui-test\\maui-test.csproj /p:TargetFramework=net7.0-android /m:1 /nr:False\r\n> dotnet build .\\maui-test\\maui-test.csproj /p:TargetFramework=net7.0-android /m:1 /nr:False /bl\r\n> .\\msbuild.binlog\r\n```\r\n\r\nObservations:\r\n* Small gap between targets (`AppendCustomMetadataToItemGroup` and `Hash`) within the task, but likely not of first interest now (few % of the overal MSBuild task run).\r\n* ~ 30% decrease in the task run time when binary logging switched off.\r\n* Big portion of targets still run even if no change on disk performed (_this will be next investigation step_)\r\n* Other than that there is no clear perf degradation cause.",
        "createdAt": "2023-01-09T14:34:04Z",
        "updatedAt": "2023-01-13T16:43:17Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "**tl;dr;:** Unfortunately no gaps identified in bottom-up-approach (answering \"are there any ineficiencies or unneeded executions in the invocation path of the mentioned MSBuild task?\"). Next step would be more holistic (and more complicated and involved) up-down-approach (answering \"are involved maui build targets leveraging MSBuild properly or are there more efficient ways of achieving multitarget build with possible overlaps in targes evaluation?\") - I'll try to summon someone more experienced to help me with this investigation (@rainersigwald - I hope to get your help here ;-))\r\n\r\n---\r\n\r\nFindings:\r\n\r\n* Binlogging takes ~30% of execution time. Rest of investigation is after logging turned off (ETW only)\r\n* Subtasks of MSBuild task takes about ~30% of execution time of the MSBuild task (no unexpected tasks nor duration here, I'm just clarifying the tasks without name)\r\n\r\n\r\nTasks | Sum   of DURATION_MSEC\r\n-- | --\r\nMSBuild | 303.156\r\nResolveAssemblyReference | 37.649\r\n\u00a0 | 35.408\r\nProcessFrameworkReferences | 15.831\r\nResolveRuntimePackAssets | 12.397\r\nResolvePackageAssets | 6.088\r\nResolveOverlappingItemGroupConflicts | 5.022\r\nResolvePackageFileConflicts | 4.021\r\nResolveTargetingPackAssets | 3.785\r\nCheckForDuplicateItemMetadata | 3.699\r\nGetPackageDirectory | 1.629\r\n\r\n\r\n![image](https://user-images.githubusercontent.com/3809076/214124007-8384bcff-dd32-46f6-b94b-0d4ff7b71de2.png)\r\n\r\n\r\n* The execution of the MSBuild task is ~45% evaluation, ~55% Build. Even when drilling very deep down the stack, there is no unexpected execution times or unexpected executions.\r\n\r\n![image](https://user-images.githubusercontent.com/3809076/214123477-c8450581-23b0-4358-87f8-44bb6664d8cd.png)\r\n\r\n\r\n* As already mentioned here - `AdditionalProperties=\"RuntimeIdentifier=%(_RIDs.Identity);$(_AdditionalProperties)\"` - is causing the need to re-evaluate the project and rebuild the target - and currently results of previoius evaluation/build (with differen AdditionalPropertis) cannot be shared.\r\n* **TBD:** Are there any viable improvements to `Microsoft.Android.Sdk.AssemblyResolution.targets` (to enable better up-to-date check; share portion of evaluation invoked by MSBuild task etc.)?\r\n",
        "createdAt": "2023-01-23T19:10:05Z",
        "updatedAt": "2023-01-23T19:10:05Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "The  `<MSBuild/>` call we are making results in populating a `@(ResolvedFileToPublish)` item group.\r\n\r\nWhat is the best way to save an item group in a file (including all item metadata)? We could potentially use this file as an `Output` to skip the target in some cases. Incremental builds could load a file and populate an item group, skipping the `<MSBuild/>` call entirely.",
        "createdAt": "2023-01-23T20:11:07Z",
        "updatedAt": "2023-01-23T20:11:07Z",
        "author": {
          "login": "jonathanpeppers"
        }
      },
      {
        "body": "<Target /> have an Inputs and Outputs parameter and will skip the target if\nall Outputs are newer than the Inputs.  You can use the <WriteLinesToFiles>\n<https://learn.microsoft.com/en-us/visualstudio/msbuild/writelinestofile-task?view=vs-2022>\nTask to dump the information.  Likewise, <ReadLinesFromFile> Task to absorb\nit back.\n\nWithin the target, you can use <CallTarget> to invoke your Target that will\neventually call <MSBuild> task.\n\nOn Mon, Jan 23, 2023 at 12:11 PM Jonathan Peppers ***@***.***>\nwrote:\n\n> The <MSBuild/> call we are making results in populating a\n> @(ResolvedFileToPublish) item group.\n>\n> What is the best way to save an item group in a file (including all item\n> metadata)? We could potentially use this file as an Output to skip the\n> target in some cases. Incremental builds could load a file and populate an\n> item group, skipping the <MSBuild/> call entirely.\n>\n> \u2014\n> Reply to this email directly, view it on GitHub\n> <https://github.com/dotnet/msbuild/issues/8226#issuecomment-1400914499>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AEXI5GJ5DVUPPLTF2X45RKTWT3QWPANCNFSM6AAAAAASV6OJTU>\n> .\n> You are receiving this because you commented.Message ID:\n> ***@***.***>\n>\n",
        "createdAt": "2023-01-23T20:18:16Z",
        "updatedAt": "2023-01-23T20:18:16Z",
        "author": {
          "login": "yuehuang010"
        }
      },
      {
        "body": "@yuehuang010 how do you save item metadata with just `<WriteLinesToFiles/>` and `<ReadLinesFromFile/>`?\r\n\r\nIs the only option a custom task?",
        "createdAt": "2023-01-23T20:19:40Z",
        "updatedAt": "2023-01-23T20:19:40Z",
        "author": {
          "login": "jonathanpeppers"
        }
      },
      {
        "body": "For metadata, a custom task is the only way to go.\nIs it possible to avoid the metadata and only use the filepath?\n\nOn Mon, Jan 23, 2023 at 12:19 PM Jonathan Peppers ***@***.***>\nwrote:\n\n> @yuehuang010 <https://github.com/yuehuang010> how do you save item\n> metadata with just <WriteLinesToFiles/> and <ReadLinesFromFile/>?\n>\n> Is the only option a custom task?\n>\n> \u2014\n> Reply to this email directly, view it on GitHub\n> <https://github.com/dotnet/msbuild/issues/8226#issuecomment-1400926777>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AEXI5GMS5OXK2RAZIRJDBLLWT3RWPANCNFSM6AAAAAASV6OJTU>\n> .\n> You are receiving this because you were mentioned.Message ID:\n> ***@***.***>\n>\n",
        "createdAt": "2023-01-23T22:50:37Z",
        "updatedAt": "2023-01-23T22:50:37Z",
        "author": {
          "login": "yuehuang010"
        }
      },
      {
        "body": "@jonathanpeppers how are you thinking of invalidating the incremental build? That is, under what circumstances would the MSBuild task need to be run when you had some cached results?",
        "createdAt": "2023-01-24T13:53:43Z",
        "updatedAt": "2023-01-24T13:53:43Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "The `Inputs` would probably be `$(MSBuildAllProjects)` and a file where we save important property values. I would need to think about & review other files.\r\n\r\nIt's possible this would create too many bugs. Luckily our CI has lots of MSBuild integration tests (even incremental builds) that would show if it is a bad idea or not.",
        "createdAt": "2023-01-24T14:47:54Z",
        "updatedAt": "2023-01-24T14:47:54Z",
        "author": {
          "login": "jonathanpeppers"
        }
      },
      {
        "body": "@JanKrivanek  FYI",
        "createdAt": "2023-01-24T16:17:41Z",
        "updatedAt": "2023-01-24T16:17:41Z",
        "author": {
          "login": "rokonec"
        }
      },
      {
        "body": "Hi @jonathanpeppers - the next step is experimentation with `_ResolveAssemblies` target and direct dependencies (attempt to define inputs/outputs as files). Do you want to assign the item to yourself for the prototyping (we can then assist with review and measuring) or possibly close this investigation ticket? \r\nI'm as well open to any alternative proposals of next steps.",
        "createdAt": "2023-02-07T11:23:33Z",
        "updatedAt": "2023-02-07T11:23:33Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "We can track it here: https://github.com/xamarin/xamarin-android/issues/7775\r\n\r\nIt might be a little while until we get to this. Right now the huge push for us is fixing MAUI bugs.",
        "createdAt": "2023-02-07T14:50:07Z",
        "updatedAt": "2023-02-07T14:50:07Z",
        "author": {
          "login": "jonathanpeppers"
        }
      }
    ]
  }
}