{
  "number": 7730,
  "title": "RoslynCodeTaskFactory doesn't support code fragment in separate file",
  "body": "### Issue Description\r\n\r\nCode fragments in a separate file (as opposed to inline) work in CodeTaskFactory and based on the docs I expect them to work in RoslynCodeTaskFactory. But RoslynCodeTaskFactory fails to wrap the fragment in a Microsoft.Build.Utilities.Task, resulting in:\r\n\r\n> error CS8805: Program using top-level statements must be an executable\r\n\r\nThe [docs](https://docs.microsoft.com/en-us/visualstudio/msbuild/msbuild-roslyncodetaskfactory?view=vs-2022#code-element) say:\r\n\r\n> ...you can use the Source attribute of the Code element to specify the location of a file that contains the code for your task. The code in the source file must be of the type that is specified by the Type attribute.\r\n\r\nMy `Type` attribute is \"Fragment\".\r\n\r\n### Example\r\n\r\n```xml\r\n<UsingTask TaskName=\"SplitPath\"\r\n           TaskFactory=\"RoslynCodeTaskFactory\"\r\n           AssemblyFile=\"$(MSBuildToolsPath)\\Microsoft.Build.Tasks.Core.dll\" >\r\n    <ParameterGroup>\r\n        <Path ParameterType=\"System.String\" Required=\"true\" />\r\n        <Leaf ParameterType=\"System.String\" Output=\"true\" />\r\n        <BasePath ParameterType=\"System.String\" Output=\"true\" />\r\n    </ParameterGroup>\r\n    <Task>\r\n        <Code Type=\"Fragment\"\r\n              Language=\"cs\"\r\n              Source=\"$(MSBuildThisFileDirectory)\\SplitPath.cs\"/>\r\n    </Task>\r\n</UsingTask>\r\n```\r\n\r\n_SplitPath.cs:_\r\n\r\n```c#\r\nvar charsToTrim = new char[] { '\\\\', '/' };\r\nvar trimmedPath = Path.TrimEnd(charsToTrim);\r\nLeaf = System.IO.Path.GetFileName(trimmedPath);\r\nBasePath = System.IO.Path.GetDirectoryName(trimmedPath);\r\n```\r\n\r\nThe .tmp file given to csc.exe is:\r\n\r\n```c#\r\nvar charsToTrim = new char[] { '\\\\', '/' };\r\nvar trimmedPath = Path.TrimEnd(charsToTrim);\r\nLeaf = System.IO.Path.GetFileName(trimmedPath);\r\nBasePath = System.IO.Path.GetDirectoryName(trimmedPath);\r\n```\r\n\r\nIf I make the code inline, then the .tmp file is:\r\n\r\n```c#\r\n//------------------------------------------------------------------------------\r\n// <auto-generated>\r\n//     This code was generated by a tool.\r\n//     Runtime Version:4.0.30319.42000\r\n//\r\n//     Changes to this file may cause incorrect behavior and will be lost if\r\n//     the code is regenerated.\r\n// </auto-generated>\r\n//------------------------------------------------------------------------------\r\n\r\nnamespace InlineCode {\r\n    using Microsoft.Build.Framework;\r\n    using Microsoft.Build.Utilities;\r\n    using System;\r\n    using System.Collections;\r\n    using System.Collections.Generic;\r\n    using System.IO;\r\n    using System.Linq;\r\n    using System.Text;\r\n    \r\n    \r\n    public class SplitPath : Microsoft.Build.Utilities.Task {\r\n        \r\n       // ...some code removed for readability...\r\n        \r\n        public override bool Execute() {\r\n\r\nvar charsToTrim = new char[] { '\\\\', '/' };\r\nvar trimmedPath = Path.TrimEnd(charsToTrim);\r\nLeaf = System.IO.Path.GetFileName(trimmedPath);\r\nBasePath = System.IO.Path.GetDirectoryName(trimmedPath);\r\nfoo\r\n\r\n            return Success;\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n### Versions & Configurations\r\n\r\n- MSBuild: 17.3.0.27701 (17.3.0-preview-22277-01+f1dae6ab6 for .NET Framework)\r\n- dotnet.exe: 6.0.400-preview.22301.10\r\n- Windows: Windows 10, Version 21H2 (OS Build 19044.1766)",
  "state": "CLOSED",
  "createdAt": "2022-06-22T19:30:02Z",
  "updatedAt": "2024-02-21T14:08:23Z",
  "closedAt": "2022-08-02T07:54:34Z",
  "author": {
    "login": "JVimes"
  },
  "labels": [
    "bug",
    "Area: Engine",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "jrdodds"
      }
    ]
  },
  "milestone": {
    "title": "Backlog"
  },
  "comments": {
    "nodes": [
      {
        "body": "The \"Source\" attribute causes the factory to ignore the \"Type\" attribute here <https://github.com/dotnet/msbuild/blob/334835f647360028b75d827347fd73ec5433a481/src/Tasks/RoslynCodeTaskFactory/RoslynCodeTaskFactory.cs#L441-L443>",
        "createdAt": "2022-06-22T20:04:55Z",
        "updatedAt": "2022-06-22T20:05:20Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "Nice bug report @JVimes, nice find @KalleOlaviNiemitalo.\r\n\r\nTeam triage: that looks broken! Marking for the backlog and up-for-grabs; we would happily accept a fix.",
        "createdAt": "2022-06-23T16:38:07Z",
        "updatedAt": "2022-06-23T16:38:07Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald I'm looking into this issue and also #7842. Although it does appear that #7842 is a different issue, it also appears to be in the same area of code as this issue.",
        "createdAt": "2022-07-26T22:31:47Z",
        "updatedAt": "2022-07-26T22:31:47Z",
        "author": {
          "login": "jrdodds"
        }
      },
      {
        "body": "`Source` and `Type` are not exclusive of each other and the problem appears to be the `else` at line 445 which prevents processing the `Type` when `Source` is provided.\r\nhttps://github.com/dotnet/msbuild/blob/e1de0c476fac967bd1f1d4c17e5c8a70513cfdee/src/Tasks/RoslynCodeTaskFactory/RoslynCodeTaskFactory.cs#L432-L462",
        "createdAt": "2022-07-27T02:32:54Z",
        "updatedAt": "2022-07-27T02:32:54Z",
        "author": {
          "login": "jrdodds"
        }
      },
      {
        "body": "In the log output is an error:\r\n```\r\nerror MSB4175: The task factory \"RoslynCodeTaskFactory\" could not be loaded from the assembly \"C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\MSBuild\\Current\\Bin\\amd64\\Microsoft.Build.Tasks.Core.dll\". The task factory must return a value for the \"TaskType\" property.\r\n```\r\nThis error message is misleading. Essentially an exception is thrown and the catch is reporting the MSB4175. There is no issue with loading the RoslynCodeTaskFactory  and the TaskType is not set because the inline code failed to compile.\r\n\r\nThe experience of writing inline tasks could be improved with error messaging that is more 'on point'. There is an issue for this error messaging. See #6419.\r\n\r\n",
        "createdAt": "2022-07-28T14:37:22Z",
        "updatedAt": "2022-07-28T14:37:22Z",
        "author": {
          "login": "jrdodds"
        }
      },
      {
        "body": "With the `RoslynCodeTaskFactory`, a MSB4175 `TaskFactoryLoadFailure` will be logged for the following types of errors which are not `TaskFactoryLoadFailure` errors:\r\n- The inline task code has one or more compilation errors.\r\n- The inline task code is in an external file (specified with `Source`) and the file can't be found or read.\r\n- The inline task code is a class and the class name and the task name don't match.\r\n\r\n(This list may not be complete.)\r\n\r\nBecause the catch that generates the logging of the MSB4175 is in `RegisteredTaskRecord`, the same issues appear to apply to `CodeTaskFactory`.\r\n\r\nRegarding compilations errors:\r\nBoth `RoslynCodeTaskFactory` and `CodeTaskFactory` will log compilation errors. `CodeTaskFactory` will log compilation errors as MSB3758 `CodeTaskFactory.CompilerError`. However, `RoslynCodeTaskFactory` doesn't. Compilations errors are just generic errors with no MSB#### code.",
        "createdAt": "2022-07-28T16:52:06Z",
        "updatedAt": "2022-07-28T16:52:06Z",
        "author": {
          "login": "jrdodds"
        }
      }
    ]
  }
}