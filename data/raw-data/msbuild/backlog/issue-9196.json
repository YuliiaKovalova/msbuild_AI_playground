{
  "number": 9196,
  "title": "Consider using #line directives in RoslynCodeTaskFactory",
  "body": "The CodeTaskFactory implementations can work by being given a snippet of C#, which is assembled into a full `class` definition and fed to the compiler. But errors in C# syntax are reported in a convoluted way. Given:\r\n\r\n```xml\r\n<Project>\r\n  <UsingTask\r\n    TaskName=\"HelloWorld\"\r\n    TaskFactory=\"RoslynCodeTaskFactory\"\r\n    AssemblyFile=\"$(MSBuildToolsPath)\\Microsoft.Build.Tasks.Core.dll\" >\r\n    <ParameterGroup />\r\n    <Task>\r\n      <Code Type=\"Fragment\" Language=\"cs\">\r\n<![CDATA[\r\nC# syntax error\r\n]]>\r\n      </Code>\r\n    </Task>\r\n  </UsingTask>\r\n\r\n  <Target Name=\"Go\">\r\n    <HelloWorld />\r\n  </Target>\r\n</Project>\r\n```\r\n\r\nyou get\r\n\r\n```sh-session\r\n\u276f msbuild .\\foo.proj\r\nMSBuild version 17.8.0-preview-23423-02+1d8146d3d for .NET Framework\r\n  foo failed with errors (0.1s)\r\n    C:\\Users\\raines\\AppData\\Local\\Temp\\MSBuildTempraines\\tmp36947aa3db784f3b87b3ca8bfd166d69.tmp(37,2): error CS1040: Preprocessor directives must appear as the first non-whitespace character on a line\r\n    C:\\Users\\raines\\AppData\\Local\\Temp\\MSBuildTempraines\\tmp36947aa3db784f3b87b3ca8bfd166d69.tmp(37,2): error CS1002: ; expected\r\n    S:\\play\\codetaskfactory-errors\\foo.proj(17,5): error : The source file for this compilation can be found at: \"C:\\Users\\raines\\AppData\\Local\\Temp\\MSBuildTempraines\\tmp36947aa3db784f3b87b3ca8bfd166d69.tmp\"\r\n    S:\\play\\codetaskfactory-errors\\foo.proj(17,5): error MSB4036: The \"HelloWorld\" task was not found. Check the following: 1.) The name of the task in the project file is the same as the name of the task class. 2.) The task class is \"public\" and implements the Microsoft.Build.Framework.ITask interface. 3.) The task is correctly declared with <UsingTask> in the project file, or in the *.tasks files located in the \"C:\\Program Files\\Microsoft Visual Studio\\2022\\Preview\\MSBuild\\Current\\Bin\\amd64\" directory.\r\n\r\nBuild failed with errors in 0.2s\r\n```\r\n\r\nThis makes sense given the details of the system, but is hard to chase back to the original error.\r\n\r\nBy using the [`#line` directive](https://learn.microsoft.com/dotnet/csharp/language-reference/preprocessor-directives#error-and-warning-information) we could change the line reported by the compilation to be the line in the project file (or included `.cs` fragment) instead, which would be clearer.",
  "state": "OPEN",
  "createdAt": "2023-08-31T14:29:07Z",
  "updatedAt": "2024-04-04T15:14:58Z",
  "closedAt": null,
  "author": {
    "login": "rainersigwald"
  },
  "labels": [
    "backlog",
    "Area: Tasks",
    "Area: Engine",
    "Priority:3",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "(this arose from a conversation with @MichalPavlik about the inline-task UX)",
        "createdAt": "2023-08-31T14:37:32Z",
        "updatedAt": "2023-08-31T14:37:32Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "But consider this kind of mistake (using `Type=\"Method\"` when `Type=\"Class\"` is needed):\r\n\r\n```XML\r\n<Project>\r\n  <UsingTask\r\n    TaskName=\"HelloWorld\"\r\n    TaskFactory=\"RoslynCodeTaskFactory\"\r\n    AssemblyFile=\"$(MSBuildToolsPath)\\Microsoft.Build.Tasks.Core.dll\" >\r\n    <ParameterGroup />\r\n    <Task>\r\n      <Code Type=\"Method\" Language=\"cs\">\r\n<![CDATA[\r\npublic class HelloWorld : Microsoft.Build.Framework.ITask\r\n{\r\n    public Microsoft.Build.Framework.IBuildEngine BuildEngine { get; set; }\r\n    public Microsoft.Build.Framework.ITaskHost HostObject { get; set; }\r\n    public bool Execute() => true;\r\n}\r\n]]>\r\n      </Code>\r\n    </Task>\r\n  </UsingTask>\r\n\r\n  <Target Name=\"Go\">\r\n    <HelloWorld />\r\n  </Target>\r\n</Project>\r\n```\r\n\r\nHere, \"error CS0542: 'HelloWorld': member names cannot be the same as their enclosing type\" becomes more difficult to understand if the user cannot see the context in the generated C# file.\r\nI hope \"The source file for this compilation can be found at\" would still be shown.",
        "createdAt": "2023-08-31T15:18:38Z",
        "updatedAt": "2023-08-31T15:18:38Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "Just curious, why do we need to write the code to a temp file for RoslynCodeTaskFactory? I know that was inevitable as part of how Code DOM worked ,but Roslyn can accept memory streams surely.",
        "createdAt": "2023-09-26T04:10:20Z",
        "updatedAt": "2023-09-26T04:10:20Z",
        "author": {
          "login": "danmoseley"
        }
      }
    ]
  }
}