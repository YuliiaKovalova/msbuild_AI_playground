{
  "number": 3202,
  "title": "TargetFrameworks (multi-target project) - missing items in AllEvaluatedItems",
  "body": "### Steps to reproduce\r\n\r\n1. Create project which targets two frameworks (the project should contain a source file):\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFrameworks>netcoreapp2.0;net46</TargetFrameworks>\r\n  </PropertyGroup>\r\n</Project>\r\n\r\n```\r\n2. Open the project using Microsoft.Build.Evaluation.Project\r\n`var project = new Project(\"path_to_csproj\")`\r\n\r\n3. Inspect AllEvaluatedItems contents\r\n`project.AllEvaluatedItems`\r\n\r\n### Expected  behavior\r\n\r\nAllEvaluatedItems should contain information about source files contained in the project. For example if I have a file \"Class1.cs\" in project, there should be item Compile Class1.cs. \r\nThis is how it works for project with single target framework (\"<TargetFramework>\")\r\n\r\n### Attachments\r\n\r\n[MsbuildTargetFrameworks.zip](https://github.com/Microsoft/msbuild/files/1920258/MsbuildTargetFrameworks.zip)\r\n\r\nAttaching a simple solution with 3 projects:\r\n1. MultiTargetFrameworks \r\n2. SingleTargetFramework\r\n3. ConsoleApp1\r\n\r\nYou can compile it and run ConsoleApp1, passing it 1 argument - path to project file. It will open the project and print to console content of AllEvaluatedItems.\r\nThere are also files output_multi.txt and output.single.txt there with output saved from my run.\r\n\r\n### Versions\r\n\r\nI have tested this using latest stable Microsoft.Build nuget package version 15.6.85 on Windows 7.\r\n\r\n",
  "state": "CLOSED",
  "createdAt": "2018-04-17T14:37:01Z",
  "updatedAt": "2024-02-21T17:13:34Z",
  "closedAt": "2018-04-17T15:26:57Z",
  "author": {
    "login": "pkrukp"
  },
  "labels": [
    "question",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "The structure of multitargeted projects is that building the project with no specified TargetFramework just launches builds of itself, specifying each TargetFramework. Since it takes time to search the disk in order to populate the default globs for Compile and so on, those are not included in the \"outer\" project--only the \"inner\" projects with TF specified.\r\n\r\nThis is important, because it's possible to have differing items in different TFs--consider PackageReferences or source files that apply only to the .NET Core build, and not to a .NET 4.6 build.\r\n\r\nTo get the information you want, you will have to do more work: load the project and inspect its `TargetFrameworks` property. If it's defined, load the project with the global property `TargetFramework` set to one of the ones specified in the outer build.\r\n\r\nAfter you've gotten the inner builds of interest, you'll have to decide what you want to do with the result: build up a union? An intersection? That's specific to your application. Visual Studio, for example, uses a union when displaying source files--if it's in any TF, display it in the project tree. But for NuGet package references it displays them by TF:\r\n\r\n![image](https://user-images.githubusercontent.com/3347530/38877485-65b96814-4224-11e8-86b2-d2adf2ede3c4.png)\r\n",
        "createdAt": "2018-04-17T14:48:38Z",
        "updatedAt": "2018-04-17T14:48:38Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "As an aside, when using the API you should reference the new Microsoft.Build.Locator package. That avoids many problems related to getting builds that match what Visual Studio would have done on the same machine. The docs aren't live yet but MicrosoftDocs/visualstudio-docs#761 has information on using it.",
        "createdAt": "2018-04-17T14:50:36Z",
        "updatedAt": "2018-04-17T14:50:36Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Thanks for quick answer! Makes sense.\r\n",
        "createdAt": "2018-04-17T15:14:10Z",
        "updatedAt": "2018-04-17T15:14:10Z",
        "author": {
          "login": "pkrukp"
        }
      },
      {
        "body": "Thanks for asking. I'm going to close this since the behavior is \"by design\".",
        "createdAt": "2018-04-17T15:26:57Z",
        "updatedAt": "2018-04-17T15:26:57Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald I a have question for your remark:\r\n\r\n> As an aside, when using the API you should reference the new Microsoft.Build.Locator package. That avoids many problems related to getting builds that match what Visual Studio would have done on the same machine. The docs aren't live yet but MicrosoftDocs/visualstudio-docs#761 has information on using it.\r\n\r\nMicrosoft.Build.Evaluation.Project is in microsoft.build.* assembly. How will Microsoft.Build.Locator help me?\r\n\r\nTo use Microsoft.Build.Locator I can't have microsoft.build assemblies in my project's output dir, as it tries to resolve them on runtime using msbuild installed on machine. It also support VS2017+ only.\r\n\r\nTo compile code that uses Microsoft.Build.Evaluation.Project I must have microsoft.build references. The easiest way is to use microsoft.build nuget package. Is this not recommended way? \r\n\r\n\r\n\r\n",
        "createdAt": "2018-05-16T16:37:16Z",
        "updatedAt": "2018-05-16T16:37:16Z",
        "author": {
          "login": "pkrukp"
        }
      },
      {
        "body": "You should use the Microsoft.Build NuGet packages to compile against, but use the metadata `ExcludeAssets=\"runtime\"` on the `PackageReference` to prevent them from being copied to your output directory. Instead, let Microsoft.Build.Locator find MSBuild for you. The Locator package includes a target that tries to guide you down that road.",
        "createdAt": "2018-05-16T18:05:44Z",
        "updatedAt": "2018-05-16T18:05:44Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "But it only works if you have VS2017 or Build Tools 2017 installed on machine which executes program, right?",
        "createdAt": "2018-05-17T08:28:51Z",
        "updatedAt": "2018-05-17T08:28:51Z",
        "author": {
          "login": "pkrukp"
        }
      },
      {
        "body": "That's correct.",
        "createdAt": "2018-05-17T14:06:14Z",
        "updatedAt": "2018-05-17T14:06:14Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}