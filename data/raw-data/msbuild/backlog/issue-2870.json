{
  "number": 2870,
  "title": "MSBuild treats unqualified metadata case sensitive",
  "body": "### Steps to reproduce\r\n\r\nProject file\r\n```xml\r\n<Project xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\" >\r\n  <ItemGroup>\r\n    <Foo Include=\"Foo\">\r\n      <SENSITIVE>X</SENSITIVE>\r\n    </Foo>\r\n  </ItemGroup>\r\n  <Target Name=\"Build\">\r\n    \r\n    <Message Importance=\"high\" Text=\"%(Foo.FileName)=%(Foo.sensitive)\"/>\r\n    <!-- Output: Foo=X -->\r\n    \r\n    <Message Importance=\"high\" Text=\"%(Foo.FileName)=%(sensitive)\"/>\r\n    <!-- error MSB4096: The item \"Foo\" in item list \"Foo\" does not define a value for metadata \"sensitive\".  \r\n                        In order to use this metadata, either qualify it by specifying %(Foo.sensitive), or ensure that\r\n                        all items in this list define a value for this metadata. -->\r\n  </Target>\r\n</Project>\r\n```\r\n\r\nCommand line\r\n```\r\nmsbuild\r\n```\r\n### Expected  behavior\r\nOutputs `Foo=X` twice\r\n\r\n### Actual behavior\r\nFails with MSB4096\r\n\r\n### Environment data\r\n`msbuild /version` output: 15.5.180.51428. Also tested with MSBuild from .NET 4.0.\r\n\r\nOS info: Windows 10 1703",
  "state": "CLOSED",
  "createdAt": "2018-01-17T16:22:02Z",
  "updatedAt": "2024-02-21T17:15:00Z",
  "closedAt": "2018-07-17T17:48:15Z",
  "author": {
    "login": "chm-tm"
  },
  "labels": [
    "bug",
    "help wanted",
    "Area: Language",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Nice repro. I confirmed on 15.6.54.",
        "createdAt": "2018-01-17T16:26:05Z",
        "updatedAt": "2018-01-17T16:26:05Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Hey, i would like to do this, if that's ok?",
        "createdAt": "2018-07-05T21:07:23Z",
        "updatedAt": "2018-07-05T21:07:23Z",
        "author": {
          "login": "MeikTranel"
        }
      },
      {
        "body": "That'd be great @MeikTranel. Do you have a good idea about how to get started?",
        "createdAt": "2018-07-05T21:19:34Z",
        "updatedAt": "2018-07-05T21:19:34Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I wrote me a nice test to explore if I even feel like I can solve this before grabbing the issue. \r\nLots of cool but sketchy performance shortcuts. \r\nI think I identified the issue already, I'm just not quite sure what's the best way to solve it.\r\n\r\nI have 10 days of vacation in front of me, so I'm gonna have time to dive into this coming from work tomorrow. I have questions already but I'm currently not at home. \r\n\r\nI suggest you just check back in Saturday or Monday; I'll be able to be specific having the code in front of me not on mobile :smile:",
        "createdAt": "2018-07-05T22:04:57Z",
        "updatedAt": "2018-07-05T22:04:57Z",
        "author": {
          "login": "MeikTranel"
        }
      },
      {
        "body": "So i wrote down @chm-tm's spec as a test, which covers the issue perfectly like you said, @rainersigwald. See:\r\n\r\n```csharp\r\n[Fact]\r\npublic void ItemMetadataIsEvaluatedCaseInsensitively()\r\n{\r\n    var projectContents =\r\n    @\"<Project>\r\n        <ItemGroup>\r\n            <Foo Include=`Foo`>\r\n                <SensitiVE>X</SensitiVE>\r\n            </Foo>\r\n        </ItemGroup>\r\n        <Target Name=`AccessItemMetadata`>\r\n            <CreateProperty Value=`%(Foo.FileName)=%(Foo.sensitive)`>  \r\n                <Output TaskParameter=`Value` PropertyName=`Qualified` />  \r\n            </CreateProperty>          \r\n            <CreateProperty Value=`%(Foo.FileName)=%(sensitive)`>  \r\n                <Output TaskParameter=`Value` PropertyName=`Unqualified` />  \r\n            </CreateProperty>  \r\n        </Target>\r\n    </Project>\".Cleanup();\r\n    ProjectInstance project = new Project(\r\n        XmlReader.Create(\r\n            new StringReader(projectContents)\r\n        )\r\n    ).CreateProjectInstance();\r\n\r\n    project.Build();\r\n\r\n    Assert.NotNull(project.GetProperty(\"Qualified\"));\r\n    Assert.NotNull(project.GetProperty(\"Unqualified\"));            \r\n}\r\n```\r\n\r\nFrom that you can gather that the error the user is facing is thrown here:\r\nhttps://github.com/Microsoft/msbuild/blob/d136a42365dba0e6fe5f96dbd0ee4ba6ca77aa8b/src/Build/BackEnd/Components/RequestBuilder/BatchingEngine.cs#L251-L272\r\n\r\nThe project verification error is thrown given ITaskItem.HasMetadata returns false.\r\n\r\nIf you step in there you'll see that this call just ends up doing a regular \"Contains()\" on the collection which in this case does not compare strings at all.\r\n\r\nI'm not quite sure yet if this fixes the underlying issue yet, but the test i wrote would be satisfied with a simple OrdinalIgnoreCase search loop over _directMetadata. But i would really like to dig a little deeper, there's another bug hidden in here that haven't quite captured yet. Also adding a loop without having done any further consideration would be regression. Especially in between Big-O notated code :smile:",
        "createdAt": "2018-07-06T19:49:15Z",
        "updatedAt": "2018-07-06T19:49:15Z",
        "author": {
          "login": "MeikTranel"
        }
      },
      {
        "body": "@MeikTranel Nice! I believe the `CopyOnWritePropertyDictionary` should use `MSBuildNameIgnoreCaseComparer.Default` as its comparer, but maybe it's not for some reason?",
        "createdAt": "2018-07-06T20:23:11Z",
        "updatedAt": "2018-07-06T20:23:11Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "That's where i'm trying to get to, yes (mostly because of the optimized stringcomparer, which looked cool).\r\n\r\nI'll update you tomorrow. Today -> some more sweet csgo \ud83d\ude04 \r\n",
        "createdAt": "2018-07-06T20:57:17Z",
        "updatedAt": "2018-07-06T20:57:17Z",
        "author": {
          "login": "MeikTranel"
        }
      },
      {
        "body": "I pushed a branch you could look at, but it's still WIP: https://github.com/Microsoft/msbuild/compare/master...MeikTranel:UnqualifiedMetadataCaseSensitivityFix\r\n\r\n_(I am not supposed to open a WIP PR according to dotnet contribution rules)_\r\n\r\nI have to confirm that this doesn't just work for the specific repro @chm-tm gave us, because not all metadata is created equal.",
        "createdAt": "2018-07-08T23:31:14Z",
        "updatedAt": "2018-07-08T23:31:14Z",
        "author": {
          "login": "MeikTranel"
        }
      },
      {
        "body": "@rainersigwald So i tested all kinds of item metadata types (Metadata inherited through ItemDefinitionGroup, Well-known Metadata and direct metadata) and verified that all of them follow through with the expected behavior, by writing tests for each of them individually. Metadata cloned from ItemDefinitionGroup and Well-Known Metadata already worked with unqualified case insensitive metadata references.\r\n\r\nNow the question is, should i commit those tests to the PR? Technically speaking these do not directly relate to the issue, given that it wasn't specifically asked for and they did work without my fix.\r\n\r\nI'm specifically asking because of this particular piece of code:\r\nhttps://github.com/Microsoft/msbuild/blob/33d52b4fa5b509ff4f3c50f406819e332f32eb65/src/Build/Instance/ProjectItemInstance.cs#L1528-L1538\r\n\r\nAs you can see, the different kinds of metadata go along completely different paths of evaluation before actually being tested case insensitively (each of them in another way). That's why i'd personally prefer covering the whole spec: \"Unqualified & Qualified item metadata is evaluated case insensitively\"\r\n\r\nWhat do you think?",
        "createdAt": "2018-07-12T22:15:40Z",
        "updatedAt": "2018-07-12T22:16:14Z",
        "author": {
          "login": "MeikTranel"
        }
      },
      {
        "body": "We'd love to have more tests, even if they're already passing. Feel free to open up a WIP PR if you'd like -- we use wipbot, so if the title contains `WIP` we won't accidentally merge it, and you can ping me explicitly when you're ready for a detailed review.",
        "createdAt": "2018-07-12T22:58:51Z",
        "updatedAt": "2018-07-12T22:58:51Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}