{
  "number": 9052,
  "title": "API-using application is spawned instead of `dotnet` when using CodeTaskFactory",
  "body": "I'm trying to open csproj files via `Microsoft.CodeAnalysis.MSBuild.MSBuildWorkspace.OpenProjectAsync` from my console app. One of the projects, a rather big one, hangs the execution and spawns another instance of the app.\r\n\r\nTried both v4.6.0 from nuget.org and built myself from https://github.com/dotnet/roslyn/releases/tag/Visual-Studio-2022-Version-17.6.4, same behavior.\r\n\r\nTried to debug but quickly got lost... My best guess is that MSBuild is trying to create additional processes (for compilation?) to parallelize since it's a large project, but instead instantiates my app.\r\nAny suggestions much appreciated.",
  "state": "CLOSED",
  "createdAt": "2023-07-12T11:54:14Z",
  "updatedAt": "2024-02-21T14:04:18Z",
  "closedAt": "2023-10-26T14:57:34Z",
  "author": {
    "login": "Leon99"
  },
  "labels": [
    "backlog",
    "Area: Tasks",
    "Priority:2",
    "triaged",
    "internal-team-onboarding"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "GangWang01"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Here's a screenshot from Task Manager that shows the command line:\r\n![image](https://github.com/dotnet/roslyn/assets/6840381/81d5c567-6d06-4d47-b5bf-c898bb0e4747)\r\n",
        "createdAt": "2023-07-13T07:43:17Z",
        "updatedAt": "2023-07-13T07:43:17Z",
        "author": {
          "login": "Leon99"
        }
      },
      {
        "body": "Same behavior with 4.6.0 from nuget.org",
        "createdAt": "2023-07-13T08:23:26Z",
        "updatedAt": "2023-07-13T08:23:26Z",
        "author": {
          "login": "Leon99"
        }
      },
      {
        "body": "Under the covers OpenProjectAsync triggers a build of your project via MSBuild, but in a way that is supposed to prevent the compiler actually running. Did you customize your build in some way so the build of a project also runs it?",
        "createdAt": "2023-07-14T14:51:13Z",
        "updatedAt": "2023-07-14T14:51:13Z",
        "author": {
          "login": "jasonmalinowski"
        }
      },
      {
        "body": "Thanks for the idea, @jasonmalinowski!\r\nI localized the issue to this fragment in the csproj:\r\n```xml\r\n <UsingTask TaskName=\"WaitForFiles\" TaskFactory=\"RoslynCodeTaskFactory\" AssemblyFile=\"$(MSBuildToolsPath)\\Microsoft.Build.Tasks.Core.dll\">\r\n    <ParameterGroup>\r\n      <Files ParameterType=\"Microsoft.Build.Framework.ITaskItem[]\" Required=\"true\" />\r\n    </ParameterGroup>\r\n    <Task>\r\n      <Using Namespace=\"System.IO\" />\r\n      <Using Namespace=\"System.Linq\" />\r\n      <Code Type=\"Fragment\" Language=\"cs\"><![CDATA[\r\n\t\t\tFiles.AsParallel().ForAll(\r\n                file =>\r\n                {\r\n                    var fileName = file.ItemSpec.ToString();\r\n                    var startTime = DateTime.UtcNow;\r\n                    while (true)\r\n                    {\r\n                        try\r\n                        {\r\n                            using (var fs = new FileStream(fileName, FileMode.Open, FileAccess.ReadWrite, FileShare.Read))\r\n                            {\r\n                                if (fs.Length > 0)\r\n                                {\r\n                                    Log.LogMessage(MessageImportance.High, $\"File {fileName} is available!\");\r\n                                    return;\r\n                                }\r\n                            }\r\n                        }\r\n                        catch\r\n                        {\r\n                            // ignore\r\n                        }\r\n            \r\n                        if ((DateTime.UtcNow - startTime).TotalSeconds > 10)\r\n                        {\r\n                            Log.LogWarning($\"File {fileName} is still locked by another process... Stop waiting and give up.\");\r\n                            return;\r\n                        }\r\n\r\n                        Log.LogWarning($\"File {fileName} is still locked by another process...\");\r\n                        System.Threading.Thread.Sleep(1000);\r\n                    }\r\n                });\r\n      ]]></Code>\r\n    </Task>\r\n  </UsingTask>\r\n  <Target Name=\"WaitForAllFilesBeforeCompile\" BeforeTargets=\"CoreCompile\">\r\n    <Message Importance=\"High\" Text=\"$(MSBuildProjectName): WaitForAllFilesBeforeCompile\" />\r\n    <WaitForFiles Files=\"@(Compile)\" />\r\n    <Message Importance=\"High\" Text=\"$(MSBuildProjectName): /WaitForAllFilesBeforeCompile\" />\r\n  </Target>\r\n```",
        "createdAt": "2023-07-14T23:46:48Z",
        "updatedAt": "2023-07-14T23:50:37Z",
        "author": {
          "login": "Leon99"
        }
      },
      {
        "body": "Ah, the use of RoslynCodeTaskFactory might be the problem here. Can you share the _full_ command line of one of the processes that was being launched? You can of course redact user names, company/product names, but in this case it's important to see the source files being compiled and what the switches are being passed.",
        "createdAt": "2023-07-19T00:12:04Z",
        "updatedAt": "2023-07-19T00:12:04Z",
        "author": {
          "login": "jasonmalinowski"
        }
      },
      {
        "body": "1st process:\r\n```\r\nWorker.dll \"C:\\Program Files\\dotnet\\sdk\\7.0.304\\Roslyn\\bincore\\csc.dll\" /noconfig \"/reference:C:\\Program Files\\dotnet\\sdk\\7.0.304\\ref\\Microsoft.Build.Framework.dll\" \"/reference:C:\\Program Files\\dotnet\\sdk\\7.0.304\\ref\\Microsoft.Build.Utilities.Core.dll\" \"/reference:C:\\Program Files\\dotnet\\sdk\\7.0.304\\ref\\mscorlib.dll\" \"/reference:C:\\Program Files\\dotnet\\sdk\\7.0.304\\ref\\netstandard.dll\" /deterministic+ /nologo /optimize- /target:Library /out:C:\\Users\\leonv\\AppData\\Local\\Temp\\MSBuildTempleonv\\tmp96be05b9ef394598bc9b849aa6d5512d.dll C:\\Users\\leonv\\AppData\\Local\\Temp\\MSBuildTempleonv\\tmp0381fc715c144e29a4435dbc6ecdcd39.tmp /nostdlib+\r\n```\r\n2nd and following:\r\n```\r\nWorker.dll \"C:\\Program Files\\dotnet\\sdk\\6.0.315\\Roslyn\\bincore\\csc.dll\" /noconfig \"/reference:C:\\Program Files\\dotnet\\sdk\\6.0.315\\ref\\Microsoft.Build.Framework.dll\" \"/reference:C:\\Program Files\\dotnet\\sdk\\6.0.315\\ref\\Microsoft.Build.Utilities.Core.dll\" \"/reference:C:\\Program Files\\dotnet\\sdk\\6.0.315\\ref\\mscorlib.dll\" \"/reference:C:\\Program Files\\dotnet\\sdk\\6.0.315\\ref\\netstandard.dll\" /deterministic+ /nologo /optimize- /target:Library /out:C:\\Users\\leonv\\AppData\\Local\\Temp\\MSBuildTempleonv\\tmpa1950816718744f5892bf6b98744c38f.dll C:\\Users\\leonv\\AppData\\Local\\Temp\\MSBuildTempleonv\\tmp0f3b558462e844dea3bd6774fb234fea.tmp /nostdlib+\r\n```",
        "createdAt": "2023-07-19T09:03:47Z",
        "updatedAt": "2023-07-19T09:03:47Z",
        "author": {
          "login": "Leon99"
        }
      },
      {
        "body": "@Leon99 can you tell us more about your application--are you building it self-contained or single-file? are you running it with `application.exe` or `dotnet application.dll`?\r\n\r\nIf you're using `application.exe` can you please try running `application.dll`? I suspect that would work around the issue.\r\n\r\nBackground: `RoslynCodetaskFactory` invokes `dotnet csc.dll` to build the temporary task assembly. But what `dotnet` should it run? We try to run \"the same one we're running in\" . . . but it looks like we might be getting that wrong in your case and running `yourapplication.exe` instead of `dotnet.exe`.",
        "createdAt": "2023-07-19T14:31:09Z",
        "updatedAt": "2023-07-19T14:31:09Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Running it using `dotnet application.dll` helps, thanks for the workaround and the explanation @rainersigwald!",
        "createdAt": "2023-07-20T09:44:50Z",
        "updatedAt": "2023-07-20T12:17:39Z",
        "author": {
          "login": "Leon99"
        }
      },
      {
        "body": "Attached a sample [ReproSample.zip](https://github.com/dotnet/msbuild/files/12358537/ReproSample.zip) to repro this issue. \r\n\r\nFor .NET version of msbuild, root cause is the following code couldn't set dotnet cli path correctly when running the application via `application.exe`. Rather than the path of dotnet.exe, it's wrongly set using the path of the applicaiton. https://github.com/dotnet/msbuild/blob/3050e91563b2b9bbafd820f4e8cd3d050dd9d21a/src/Tasks/RoslynCodeTaskFactory/RoslynCodeTaskFactoryCompilers.cs#L16-L18\r\nFor the repro sample, the fix is to modify dotnet cli path based on the environment variable `MSBUILD_EXE_PATH`  that is set when registering the .NET SDK instance. But Roman mentioned getting dotnet cli path from the environment variable is not reliable and may not work for all scenarios, like Visual Studio doesn't need to register the instance (Cc @rokonec, please correct me if anything wrong). Welcome suggestions on a good way to get dotnet cli path working for all scenarios.\r\n\r\nAs for .NET framework version of msbuild, the System.MissingMethodException with the meesage Method not found: 'System.ReadOnlySpan`1<Char> Microsoft.IO.Path.GetFileName(System.ReadOnlySpan`1<Char>)' is thrown out from https://github.com/dotnet/msbuild/blob/ec8b4a4eddeef899e427c77e4744f9fdb15fe3e8/src/Shared/FileMatcher.cs#L1650-L1651. This is related to https://github.com/dotnet/msbuild/issues/7873.\r\n\r\n",
        "createdAt": "2023-08-16T10:54:11Z",
        "updatedAt": "2023-08-16T10:59:40Z",
        "author": {
          "login": "GangWang01"
        }
      },
      {
        "body": "Blocked by this issue: https://github.com/microsoft/MSBuildLocator/issues/229",
        "createdAt": "2023-08-23T09:09:23Z",
        "updatedAt": "2023-08-23T09:09:23Z",
        "author": {
          "login": "YuliiaKovalova"
        }
      },
      {
        "body": "@GangWang01 \r\nthe blocking issue was addressed. I hope you can continue working on this now.\r\nhttps://www.nuget.org/packages/Microsoft.Build.Locator/1.5.6",
        "createdAt": "2023-08-29T10:39:17Z",
        "updatedAt": "2023-08-29T10:39:17Z",
        "author": {
          "login": "YuliiaKovalova"
        }
      }
    ]
  }
}