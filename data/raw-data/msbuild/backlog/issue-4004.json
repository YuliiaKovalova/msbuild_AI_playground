{
  "number": 4004,
  "title": "Feature Request: Lazy ProjectReference Resolution",
  "body": "It would be nice if MSBuild implemented an \"XBuild-ism\": in xbuild, Build/dependency graph generation does *not* \"properly\" load project files and referenced `<Import/>` files.\r\n\r\nConsider the following project:\r\n\r\n[LazyProjectReferences.zip](https://github.com/Microsoft/msbuild/files/2673257/LazyProjectReferences.zip)\r\n\r\n```bash\r\n$ curl -o LazyProjectReferences.zip https://github.com/Microsoft/msbuild/files/2673257/LazyProjectReferences.zip\r\n$ unzip LazyProjectReferences.zip\r\n$ cd LazyProjectReferences\r\n$ msbuild\r\n```\r\n\r\nThis project is \"special\" in that `App.csproj` depends on \"MSBuild artifacts\" which are *created* by `Generator.csproj`: `Generator.csproj` copies `Generator.targets` and `Generator.dll` into `$(OutputPath)`, and `App.csproj` then attempts to `<Import>` `Generator.targets` and use the `<Generator/>` tasks which is declared within it.\r\n\r\nThis (bizarre?) build setup works with xbuild: [xbuild-log.txt](https://github.com/Microsoft/msbuild/files/2673272/xbuild-log.txt)\r\n\r\n[It fails with `msbuild`](https://github.com/Microsoft/msbuild/files/2673280/msbuild.binlog.zip):\r\n\r\n```\r\nApp\\App.targets(9,5): error MSB4036: The \"Generator\" task was not found. Check the following: 1.) The name of the task in the project file is the same as the name of the task class. 2.) The task class is \"public\" and implements the Microsoft.Build.Framework.ITask interface. 3.) The task is correctly declared with <UsingTask> in the project file, or in the *.tasks files located in the \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\MSBuild\\15.0\\bin\" directory.\r\n```\r\n\r\nThe reason this works with xbuild is because xbuild is \"lazy\" and reads the MSBuild files *twice*: Once looking for `@(ProjectReference)`, in order to construct the project dependency graph and compute the build order.  This is not a \"real\" project parsing; as such, not all syntax is fully evaluated.  During this first parsing, the `<Generator/>` invocation within `App.targets` is *ignored*.  (The `<Import/>` is followed, but making the `<Import/>` conditional on `Generator.targets` existing fixes the problem; during the first build, `$(OutputPath)Generator.targets` won't exist, but because `App.targets` isn't \"fully\" parsed, there is no issue with the \"potentially invalid\" `<Generator/>` invocation.)\r\n\r\nOnce the build order has been computed, *then* xbuild builds the project \"for real\".  `Generator.csproj` is built, creating files into `$(OutputPath)`.  Then `App.csproj` is loaded \"for real,\" and because `Generator.csproj` *already built*, `$(OutputPath)Generator.targets` now exists and can be `<Import/>`ed, which in turn allows the `<Generator/>` task to be used.\r\n\r\nI would ***love*** it if MSBuild also did this.\r\n\r\nWhy?  Becuase *right now* I need to separate out my unit test build from my \"main\" build, because the unit tests *depend upon* outputs produced by the main build:\r\n\r\n  * [`xamarin-android/Xamarin.Android.sln`](https://github.com/xamarin/xamarin-android/blob/master/Xamarin.Android.sln)\r\n  * [`xamarin-android/Xamarin.Android-Tests.sln`](https://github.com/xamarin/xamarin-android/blob/master/Xamarin.Android-Tests.sln)\r\n\r\nOriginally I had only one solution which contained both the unit tests and the \"main product\"; I had to [split them up](https://github.com/xamarin/xamarin-android/commit/7343965a0bbee3d192684dbb371789613bf5b830) in order to even *begin* building with proper MSBuild instead of xbuild.  I'm still irate about this.\r\n",
  "state": "OPEN",
  "createdAt": "2018-12-12T20:01:11Z",
  "updatedAt": "2024-02-21T16:32:19Z",
  "closedAt": null,
  "author": {
    "login": "jonpryor"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "The new static-graph build process comes _close_ to doing this, but it builds the same project objects that it loaded and extracted `ProjectReference` information from, so they wouldn't get the just-built targets.\r\n\r\ncc @AndyGerlicher",
        "createdAt": "2018-12-12T20:38:48Z",
        "updatedAt": "2018-12-12T20:38:48Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}