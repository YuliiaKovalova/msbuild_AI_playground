{
  "number": 2264,
  "title": "Intermittent NRE when using CallTarget",
  "body": "Public copy of internal bug [451463](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/451463).\r\n\r\nBuilds have failed with this callstack ~20 times in the last 7 or so months in the internal VS build. There's no known simplification, so it's pretty hard to track down.\r\n\r\n```\r\nF:\\dd\\src\\ConfigData\\BuildTargets\\Microsoft.DevDiv.targets(1601,5): error MSB4018: The \"CallTarget\" task failed unexpectedly. F:\\dd\\src\\ConfigData\\BuildTargets\\Microsoft.DevDiv.targets(1601,5): error MSB4018: System.NullReferenceException: Object reference not set to an instance of an object.\r\nF:\\dd\\src\\ConfigData\\BuildTargets\\Microsoft.DevDiv.targets(1601,5): error MSB4018: at Microsoft.Build.Execution.ProjectItemInstance.TaskItem.SetMetadataObject(String name, String metadataValueEscaped, Boolean allowItemSpecModifiers) \r\nF:\\dd\\src\\ConfigData\\BuildTargets\\Microsoft.DevDiv.targets(1601,5): error MSB4018: at Microsoft.Build.Execution.ProjectItemInstance.TaskItem.SetMetadata(String metadataName, String metadataValueEscaped) F:\\dd\\src\\ConfigData\\BuildTargets\\Microsoft.DevDiv.targets(1601,5): error MSB4018: at Microsoft.Build.BackEnd.MSBuild.d__77.MoveNext() \r\nF:\\dd\\src\\ConfigData\\BuildTargets\\Microsoft.DevDiv.targets(1601,5): error MSB4018: --- End of stack trace from previous location where exception was thrown --- \r\nF:\\dd\\src\\ConfigData\\BuildTargets\\Microsoft.DevDiv.targets(1601,5): error MSB4018: at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task) \r\nF:\\dd\\src\\ConfigData\\BuildTargets\\Microsoft.DevDiv.targets(1601,5): error MSB4018: at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) \r\nF:\\dd\\src\\ConfigData\\BuildTargets\\Microsoft.DevDiv.targets(1601,5): error MSB4018: at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task) \r\nF:\\dd\\src\\ConfigData\\BuildTargets\\Microsoft.DevDiv.targets(1601,5): error MSB4018: at Microsoft.Build.BackEnd.TaskBuilder.d__26.MoveNext()\r\n```\r\n\r\n@jeffkl and I looked at the [code that's throwing](https://github.com/Microsoft/msbuild/blob/dd134d0a917b870b6a6e805984909a8c341a8083/src/Build/Instance/ProjectItemInstance.cs#L1680-L1686) on Monday. It guards against an NRE:\r\n\r\n```c#\r\n_directMetadata = _directMetadata ?? new CopyOnWritePropertyDictionary<ProjectMetadataInstance>();\r\nProjectMetadataInstance metadatum = new ProjectMetadataInstance(name, metadataValueEscaped, allowItemSpecModifiers /* may not be built-in metadata name */);\r\n_directMetadata.Set(metadatum);\r\n```\r\n\r\nSo it seems like a race condition, where something is [resetting](https://github.com/Microsoft/msbuild/blob/dd134d0a917b870b6a6e805984909a8c341a8083/src/Build/Instance/ProjectItemInstance.cs#L1306) metadata on an item concurrently with calling `SetMetadataObject`. That's surprising, since this code is fairly single-threaded. There are some `async` methods involved around the [legacy `CallTarget`](https://github.com/Microsoft/msbuild/blob/497d797007410f43e1d7501b7d8254313b07b2a7/src/Build/BackEnd/Components/RequestBuilder/TaskHost.cs#L844-L859) handling, which seems to be involved in every case.",
  "state": "CLOSED",
  "createdAt": "2017-07-05T22:07:22Z",
  "updatedAt": "2024-02-21T17:18:15Z",
  "closedAt": "2017-09-27T16:23:31Z",
  "author": {
    "login": "rainersigwald"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "MSBuild 15.5"
  },
  "comments": {
    "nodes": [
      {
        "body": "From an internal dev who looked at this:\r\n\r\n> My suspicion is that there are concurrent accesses on the item instance when invoked through the CallTarget code path, one with SetMetadata running (for things like setting metadata on target results) , and another one calling RemoveMetadata or similar which might clear out the underlying _directMetadata object. If the other code path clones the items each time, it would explain why we only see this failure during CallTarget, because it is the only one which allows concurrent access to the same task item instance.\r\n\r\nThis seems possible, but I don't understand what's racing.\r\n\r\nOne possible solution is to change the `RemoveMetadata` call to avoid setting the `_directMetadata` field to null [when there is no more metadata](https://github.com/Microsoft/msbuild/blob/dd134d0a917b870b6a6e805984909a8c341a8083/src/Build/Instance/ProjectItemInstance.cs#L1306). That would result in more memory used for items that once had metadata but no longer do; I'm not sure how expensive that would be. It should resolve this exception by ensuring that `_directMetadata` is never reset to `null`, but wouldn't resolve the race that's causing the problem.",
        "createdAt": "2017-07-05T22:12:39Z",
        "updatedAt": "2017-07-05T22:12:39Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I just hit this as well.",
        "createdAt": "2017-09-14T23:38:41Z",
        "updatedAt": "2017-09-14T23:38:41Z",
        "author": {
          "login": "AArnott"
        }
      }
    ]
  }
}