{
  "number": 5002,
  "title": "Error diagnostic present for .net core project opened using MSBuild API ",
  "body": "### Description\r\nHi, \r\n\r\nI'm trying to open a .net core project using msbuild api from a .net framework cli program (to later use Roslyn). The project is a simple Hello World created by VS with 1 unit testing project added.\r\n\r\nThe code that opens it basically does following (I'm attaching actual working programs below):\r\n```\r\nMSBuildLocator.RegisterMSBuildPath(vs2019Instance.MSBuildPath)\r\nvar workspace = MSBuildWorkspace.Create();\r\nvar project = await workspace.OpenProjectAsync(path);\r\nvar compilation = await project.GetCompilationAsync();\r\nvar diagnostics = compilation.GetDiagnostics();\r\n```\r\n\r\n**When I compile this program with VS and run it at once from cli, the diagnostics contains errors**\r\nFor example:\r\n\r\n```\r\nC:\\Users\\pkruk\\Source\\repro\\ConsoleApp8\\XUnitTestProject1\\UnitTest1.cs(1,7): error CS0246: The type or namespace name 'System' could not be found (are you missing a using directive or an assembly reference?)\r\nC:\\Users\\pkruk\\Source\\repro\\ConsoleApp8\\XUnitTestProject1\\UnitTest1.cs(2,7): error CS0246: The type or namespace name 'Xunit' could not be found (are you missing a using directive or an assembly reference?)\r\nC:\\Users\\pkruk\\.nuget\\packages\\microsoft.net.test.sdk\\16.2.0\\build\\netcoreapp1.0\\Microsoft.NET.Test.Sdk.Program.cs(2,7): error CS0246: The type or namespace name 'System' could not be found (are you missing a using directive or an assembly reference?)\r\nC:\\Users\\pkruk\\Source\\repro\\ConsoleApp8\\XUnitTestProject1\\UnitTest1.cs(6,18): error CS0518: Predefined type 'System.Object' is not defined or imported\r\n```\r\n\r\n**But if I debug this program in VS, the diagnostics has no errors!**\r\n\r\n### Steps to reproduce\r\n\r\n* Unpack [ConsoleApp8.zip](https://github.com/microsoft/msbuild/files/3995133/ConsoleApp8.zip) (solution with .net core application project and .net core unit test project)\r\n* Unpack [[RoslynOpenProjectV2.zip](https://github.com/microsoft/msbuild/files/4019286/RoslynOpenProjectV2.zip) (solution with .net framework application that uses MSBuild api to open a project provided as argument)\r\n* Compile both but **do not start debugging**\r\n* Remove microsoft.build.dll and microsoft.framework.dll assemblies from build output (leave only microsoft.build.locator.dll)\r\n* Run RoslynOpenProject with XUnitTestProject1 project, for example:\r\n```\r\nC:\\Users\\pkruk\\Source\\repro\\RoslynOpenProject\\RoslynOpenProject\\bin\\Debug>RoslynOpenProject.exe C:\\Users\\pkruk\\Source\\repro\\ConsoleApp8\\XUnitTestProject1\\XUnitTestProject1.csproj\r\n```\r\n* Notice there are error diagnostics in the output\r\n* In VS run debug on this program (Debug>Start Debugging)\r\n* Run RoslynOpenProject in command line again\r\n* Notice there are NO error diagnostics in the output\r\n\r\n### Expected  behavior\r\n\r\n```\r\nC:\\Users\\pkruk\\Source\\repro\\RoslynOpenProject\\RoslynOpenProject\\bin\\Debug>RoslynOpenProject.exe C:\\Users\\pkruk\\Source\\repro\\ConsoleApp8\\XUnitTestProject1\\XUnitTestProject1.csproj\r\nProject C:\\Users\\pkruk\\Source\\repro\\ConsoleApp8\\XUnitTestProject1\\XUnitTestProject1.csproj\r\n\r\n6 not errors diagnostics exist.\r\n0 error diagnostics:\r\n```\r\n\r\n(The not error diagnostics are warning that some \"usings\" are not needed)\r\n\r\n### Actual behavior\r\n\r\n```\r\nC:\\Users\\pkruk\\Source\\repro\\RoslynOpenProject\\RoslynOpenProject\\bin\\Debug>RoslynOpenProject.exe C:\\Users\\pkruk\\Source\\repro\\ConsoleApp8\\XUnitTestProject1\\XUnitTestProject1.csproj\r\nProject C:\\Users\\pkruk\\Source\\repro\\ConsoleApp8\\XUnitTestProject1\\XUnitTestProject1.csproj\r\n\r\n3 not errors diagnostics exist.\r\n15 error diagnostics:\r\nC:\\Users\\pkruk\\Source\\repro\\ConsoleApp8\\XUnitTestProject1\\UnitTest1.cs(1,7): error CS0246: The type or namespace name 'System' could not be found (are you missing a using directive or an assembly reference?)\r\nC:\\Users\\pkruk\\Source\\repro\\ConsoleApp8\\XUnitTestProject1\\UnitTest1.cs(2,7): error CS0246: The type or namespace name 'Xunit' could not be found (are you missing a using directive or an assembly reference?)\r\nC:\\Users\\pkruk\\.nuget\\packages\\microsoft.net.test.sdk\\16.2.0\\build\\netcoreapp1.0\\Microsoft.NET.Test.Sdk.Program.cs(2,7): error CS0246: The type or namespace name 'System' could not be found (are you missing a using directive or an assembly reference?)\r\n[...]\r\n```\r\n\r\n(The not error diagnostics are warning that some \"usings\" are not needed)\r\n\r\n\r\n### Environment data\r\n\r\nFor compilation I'm using Visual Studio 2019 16.4.0.\r\n\r\nMSBuildLocator.QueryVisualStudioInstances finds following vs instances:\r\n```\r\nName: Visual Studio Build Tools 2017\r\nVersion: 15.9.28307.960\r\nMSBuildPath: C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\MSBuild\\15.0\\Bin\r\nVisualStudioRootPath: C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\r\n\r\nName: Visual Studio Professional 2019\r\nVersion: 16.4.29519.181\r\nMSBuildPath: C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Professional\\MSBuild\\Current\\Bin\r\nVisualStudioRootPath: C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Professional\r\n\r\nName: Visual Studio Professional 2017\r\nVersion: 15.9.28307.718\r\nMSBuildPath: C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Professional\\MSBuild\\15.0\\Bin\r\nVisualStudioRootPath: C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Professional\r\n```\r\n\r\ndotnet 3.1.100\r\nWindows 10\r\n",
  "state": "OPEN",
  "createdAt": "2019-12-23T13:56:32Z",
  "updatedAt": "2024-02-21T16:30:11Z",
  "closedAt": null,
  "author": {
    "login": "pkrukp"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "rainersigwald"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "I also tried registering the queried vs instances instead of using RegisterDefaults but it didn't change anything.\r\n\r\nI also compared content of the programs folders before and after running debug in VS. \r\n* for RoslynOpenProject the difference was the <runtime> addition .config file I mentioned in my first comment\r\n* for the ConsoleApp there was a difference in `XUnitTestProject1\\obj\\Debug\\netcoreapp3.1\\XUnitTestProject1.csprojAssemblyReference.cache`. It's a binary file, but has some text inside. After VS debug run I can see inside text which looks like references to system DLLs. This text was not present before (only references to the other project dll was present). Example of additional text:\r\n```\r\nC:\\Program Files\\dotnet\\packs\\Microsoft.NETCore.App.Ref\\3.1.0\\ref\\netcoreapp3.1\\System.Diagnostics.StackTrace.dll\r\nC:\\Program Files\\dotnet\\packs\\Microsoft.NETCore.App.Ref\\3.1.0\\ref\\netcoreapp3.1\\mscorlib.dll\r\n```\r\n\r\nWhen I opened the ConsoleApp in VS 2017, it said it does not know .net core 3.1. But:\r\n* VS 2019 knows it, and there were error diagnostics also when I registered VS 2019 instance in msbuild instead of default\r\n* I created new project in VS 2017 that targets .net core 2.1 (which is known to VS 2017) but there were the same error diagnostics in this case too.",
        "createdAt": "2019-12-23T14:02:34Z",
        "updatedAt": "2019-12-23T14:20:35Z",
        "author": {
          "login": "pkrukp"
        }
      },
      {
        "body": "I have updated the original comment and also RoslynOpenProject attached there:\r\n- added comment that microsoft.build dlls should be removed from output folder (except for microsoft.build.locator assembly)\r\n- updated project to register VS 2019 + (for .net core 3.x support)",
        "createdAt": "2020-01-03T13:54:15Z",
        "updatedAt": "2020-01-03T13:54:15Z",
        "author": {
          "login": "pkrukp"
        }
      },
      {
        "body": "I believe I found the reason for this problem. It turns out that two versions of Microsoft.Build.Framework are loaded when MSBuildWorkspace.OpenProjectAsync is called. One version is from msbuild registered by MSBuildLocator, but another version is version 4.0 from GAC:\r\n\r\n```\r\nMicrosoft.Build.Framework.dll\tMicrosoft.Build.Framework.dll\tC:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Professional\\MSBuild\\Current\\Bin\\Microsoft.Build.Framework.dll\tYes\tNo\tSkipped loading symbols.\t\t32\t16.04.0.56107\t<Unknown>\t06D30000-06D54000\t[22372] RoslynOpenProject.exe\t[1] RoslynOpenProject.exe\t\r\nMicrosoft.Build.Framework.dll\tMicrosoft.Build.Framework.dll\tC:\\WINDOWS\\Microsoft.Net\\assembly\\GAC_MSIL\\Microsoft.Build.Framework\\v4.0_4.0.0.0__b03f5f7f11d50a3a\\Microsoft.Build.Framework.dll\tYes\tNo\tSkipped loading symbols.\t\t57\t4.8.3752.0 built by: NET48REL1\t02.03.2019 07:38\t7C3D0000-7C439000\t[22372] RoslynOpenProject.exe\t[1] RoslynOpenProject.exe\t\r\n```\r\n\r\nFusion logs show following call hierarchy:\r\n```\r\nMicrosoft.Build.Framework, Version=4.0.0.0\r\n\tCalling assembly: Microsoft.Build.Utilities.v4.0, Version=4.0.0.0\r\n\t\tCalling assembly: NuGet.Build.Tasks, Version=5.4.0.2\r\n```\r\n\r\nIt does not say who called the NuGet.Build.Tasks ...\r\n\r\nAttaching the fuse logs: [fuse.zip](https://github.com/microsoft/msbuild/files/4019355/fuse.zip)",
        "createdAt": "2020-01-03T14:11:19Z",
        "updatedAt": "2020-01-03T14:23:11Z",
        "author": {
          "login": "pkrukp"
        }
      }
    ]
  }
}