{
  "number": 3941,
  "title": "TargetFrameworkAttribute support in UWP/WPF",
  "body": "### Steps to reproduce\r\n1. Create blank WPF project\r\n2. Add `Newtonsoft.Json` NuGet reference and restore NuGet cache\r\n3. Create blank UWP TPMinV<10.0.16299.0 project\r\n4. Copy `<NuGetPath>\\Newtonsoft.Json.11.0.2\\lib\\net45\\Newtonsoft.Json.dll` to UWP project\r\n5. Edit UWP .csproj to include:\r\n```\r\n    <Reference Include=\"Newtonsoft.Json.dll\">\r\n      <HintPath>Newtonsoft.Json.dll</HintPath>\r\n    </Reference>\r\n```\r\n6. Reload project and build\r\n### Expected  behavior\r\n`Newtonsoft.Json.dll` is marked with `TargetFrameworkAttribute(\".NETFramework, Version=v4.5\")` and should not be a resolved reference. Applies for design-time builds and the reverse scenario (.NETCore reference in .NETFramework project) as well.\r\n### Actual behavior\r\n`Newtonsoft.Json.dll` is resolved and returned as a reference.",
  "state": "CLOSED",
  "createdAt": "2018-11-19T00:11:38Z",
  "updatedAt": "2024-02-21T17:10:26Z",
  "closedAt": "2020-08-09T22:28:12Z",
  "author": {
    "login": "lutzroeder"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Backlog"
  },
  "comments": {
    "nodes": [
      {
        "body": "MSBuild already does TFM checks between versions (disallowing .NET Framework 4.6 project from referencing 4.7 library) this is an extension on this.",
        "createdAt": "2018-11-19T03:17:06Z",
        "updatedAt": "2018-11-19T03:17:06Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "> `Newtonsoft.Json.dll` is marked with `TargetFrameworkAttribute(\".NETFramework, Version=v4.5\")` and should not be a resolved reference.\r\n\r\nWhy? What rules need to be added to ResolveAssemblyReferences to satisfy the scenario?",
        "createdAt": "2018-11-19T17:06:01Z",
        "updatedAt": "2018-11-19T17:06:01Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Probably the sames rules that we apply to project-to-project rules @nguerrera @dsplaisted. Where is that logic stored?",
        "createdAt": "2018-11-19T21:41:55Z",
        "updatedAt": "2018-11-19T21:41:55Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "We've never applied TFM compatibility checks to DLL references.  Is this a request that we should now do so?  What's the motivation for this?",
        "createdAt": "2018-11-19T22:30:18Z",
        "updatedAt": "2018-11-19T22:30:18Z",
        "author": {
          "login": "dsplaisted"
        }
      },
      {
        "body": "We do within the same \"framework\" @dsplaisted:\r\n\r\n```\r\n1>C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Preview\\MSBuild\\Current\\Bin\\Microsoft.Common.CurrentVersion.targets(2114,5): warning MSB3275: The primary reference \"Microsoft.VisualStudio.ProjectSystem\" could not be resolved because it has an indirect dependency on the assembly \"Microsoft.Build.Framework, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" which was built against the \".NETFramework,Version=v4.7.2\" framework. This is a higher version than the currently targeted framework \".NETFramework,Version=v4.6\".\r\n```",
        "createdAt": "2018-11-19T22:31:45Z",
        "updatedAt": "2018-11-19T22:31:45Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "We discussed this and are concerned that a change in build behavior where we no longer allow these references could break projects that depend on the fact that this is possible.\r\n\r\nWe think we could do the following:\r\n\r\n- Add a warning when there is a DLL reference to a DLL compiled against an incompatible target framework\r\n- Allow opting out of the warning per-reference (via metadata on the reference)\r\n- Add telemetry to help us understand how frequently projects successfully reference DLLs from \"incompatible\" target frameworks\r\n- Based on the telemetry, consider modifying the build behavior to by default not allowing the incompatible reference to be resolved",
        "createdAt": "2018-11-20T01:38:21Z",
        "updatedAt": "2018-11-20T01:38:21Z",
        "author": {
          "login": "dsplaisted"
        }
      }
    ]
  }
}