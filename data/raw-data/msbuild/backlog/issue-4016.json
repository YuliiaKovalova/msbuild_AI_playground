{
  "number": 4016,
  "title": "Enable Remote HostObject",
  "body": "msbuild side work of https://github.com/dotnet/project-system/issues/4406\r\n\r\nExperiment:\r\n- [x] Create 2 projects and pass a  COM object and see if it works at all\r\n- [x] pass the moniker string over the nodes (add Translator)\r\n- [x] end to end with VS and _MarkupCompilePass2_ task\r\n\r\nCode change:\r\n- [x] check in msbuild Translator and get ROT change. Unit test would be hard since we cannot embed manifest to test runner\r\n- [x] share the COM interface on both VS and MSBuild. VS side `IVsMSBuildTaskFileManager`, `IPersistFileCheckSum` (one of the return 'object' get casted to that interface). MSBuild side `ITaskHost`. All of them need to have tlb and proxy files shipped in deployment on both side. It seems VS has all 3 proxy. And MSBuild may need to copy and use these proxy.",
  "state": "CLOSED",
  "createdAt": "2018-12-17T23:53:01Z",
  "updatedAt": "2024-02-21T17:10:00Z",
  "closedAt": "2019-04-01T22:30:26Z",
  "author": {
    "login": "wli3"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "wli3"
      }
    ]
  },
  "milestone": {
    "title": "MSBuild 16.1"
  },
  "comments": {
    "nodes": [
      {
        "body": "\"Either make a new Activation context with invoke an separated embedded manifest or use basic interface like `IStream` to pass it over and re-implement `IVsMSBuildTaskFileManager`\" is not needed, currently we only focus on full framework msbuild which has an exe",
        "createdAt": "2019-01-11T21:47:45Z",
        "updatedAt": "2019-01-11T21:47:45Z",
        "author": {
          "login": "wli3"
        }
      }
    ]
  }
}