{
  "number": 2000,
  "title": "Globing optimization for excludes with complex glob patterns",
  "body": "The current file system walking code that collects files that match a glob accepts a set of exclude patterns so it can prune the FS search tree in one file walk. It has some optimizations to [completely back out of a certain directory](https://github.com/Microsoft/msbuild/blob/44daad2ea3d32c9f7792b5c25b1799b73035d235/src/Shared/FileMatcher.cs#L681-L695). \r\n\r\nThis optimization does not work for complex patterns like `**/foo/**`. When a FS walk goes into a directory like `/a/b/foo`, it should backtrack out because the `**/foo/**` exclude would match all files under `/a/b/foo`. Instead, the current code walks the entire subtree under `/a/b/foo` and uses expensive Regex matching to exclude every file in the subtree.\r\n\r\nA common scenario where this hits is when npm enabled projects place their `node_modules` in a subdirectory relative to the project directory. This causes all globs to recurse inside the `node_modules` directory.",
  "state": "CLOSED",
  "createdAt": "2017-04-20T20:57:54Z",
  "updatedAt": "2024-02-21T17:19:44Z",
  "closedAt": "2021-04-12T14:35:01Z",
  "author": {
    "login": "cdmihai"
  },
  "labels": [
    "Feature - Globbing",
    "Area: Performance",
    "Priority:1",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "MSBuild 16.10"
  },
  "comments": {
    "nodes": [
      {
        "body": "I just hit this on a .NET Core project with node_modules in a subdirectory. Build times have gone from ~7s on cli 1.x to ~70s on 2.0. That\u2019s a regression of 900%...\r\n\r\n@dplasteid has a nice workaround he can share, though this will become a permanent fixture in affected project files lest folks revert once a fix for this issue is available.\r\n\r\nPing me if you need a real-world repro.",
        "createdAt": "2017-08-04T03:01:40Z",
        "updatedAt": "2017-08-04T03:01:40Z",
        "author": {
          "login": "TheRealPiotrP"
        }
      },
      {
        "body": "The workaround for that is to ensure that there's an exclusion for the (anchored) relative path of `node_modules`, something like\r\n\r\n\r\n```xml\r\n<DefaultItemExcludes>$(DefaultItemExcludes);path\\to\\node_modules\\**</DefaultItemExcludes>\r\n```\r\n\r\n(Doesn't mean we shouldn't fix this, but if you're hitting it today . . .)",
        "createdAt": "2017-08-04T14:59:54Z",
        "updatedAt": "2017-08-04T15:00:03Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "VS Feedback item reported for this issue: https://developercommunity.visualstudio.com/content/problem/86010/vs-hang-when-createdelete-a-new-folder.html \r\n\r\nAnd the internal feedback item for the above link: https://devdiv.visualstudio.com/DevDiv/_workitems/edit/470250",
        "createdAt": "2017-09-12T21:54:38Z",
        "updatedAt": "2017-09-12T21:56:46Z",
        "author": {
          "login": "jviau"
        }
      },
      {
        "body": "It would be extremely nice to have this bug fixed as it adds significant overhead to my build.\r\nI really want this to function so I can tell the of globs to avoiding traversing symlinks/reparse points which are present under directories being scanned for a wildcard pattern.\r\n\r\nI don't seem to be able to get the workaround to function with reparse points which is disappointing as my build leverages these and so MSBuild falls down into the reparse/symlink directory and starts scanning in the link target which is totally unnecessary and in my use case very expensive.",
        "createdAt": "2019-07-30T23:13:30Z",
        "updatedAt": "2019-07-30T23:13:30Z",
        "author": {
          "login": "michael-baker"
        }
      },
      {
        "body": "This was fixed in #6151 and will ship in 16.10 Preview 2. Exclude patterns like `**/foo/**` are now optimized and MSBuild does not descent any deeper when it reaches a directory named `foo`.",
        "createdAt": "2021-04-12T14:35:01Z",
        "updatedAt": "2021-04-12T14:35:01Z",
        "author": {
          "login": "ladipro"
        }
      }
    ]
  }
}