{
  "number": 9840,
  "title": "Potential incrementality issue in GenerateTargetFrameworkMonikerAttribute",
  "body": "https://github.com/dotnet/msbuild/blob/9af8ff2f951017996172e5b805651ebf957e97f4/src/Tasks/Microsoft.Common.CurrentVersion.targets#L3667-L3689\r\n\r\nI think the problem is that the condition on the target doesn't match the condition on the WriteLinesToFile task. I think we should add `and '$(TargetFrameworkMonikerAssemblyAttributeText)' != ''` to the Condition on the Target.\r\n\r\nOtherwise we get this:\r\n![image](https://github.com/dotnet/msbuild/assets/679326/51df4f6e-2dd8-484a-bd43-54d4a59552fa)\r\n\r\nThe target runs (because the output file doesn't exist), but then the tasks are skipped because the text is empty, and so it doesn't write the file again.\r\n\r\nIt's benign, but would be nice to get it out of the way for build incrementality investigations (the less targets run in an incremental build the easier it is to see targets which are breaking incrementality and shouldn't be running)",
  "state": "OPEN",
  "createdAt": "2024-03-07T19:32:46Z",
  "updatedAt": "2025-04-02T06:47:51Z",
  "closedAt": null,
  "author": {
    "login": "KirillOsenkov"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "Priority:2",
    "needs-investigation",
    "triaged"
  ],
  "comments": {
    "nodes": [
      {
        "body": "After added `and '$(TargetFrameworkMonikerAssemblyAttributeText)' != ''` to the Condition on the Target. The condition on the target is false all the time even though $(TargetFrameworkMonikerAssemblyAttributeText) is not empty. It seems target condition is evaluated in the Evalution time not the execution time.\r\nHere is the binlog\r\n[msbuild9840.binlog.txt](https://github.com/dotnet/msbuild/files/14834390/msbuild9840.binlog.txt)\r\n![image](https://github.com/dotnet/msbuild/assets/26814373/1a46ee26-7afa-4f1d-bbb9-5447db7a8ce2)\r\n\r\n```\r\n<Project xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\r\n  <Target Name=\"FirstTarget\" BeforeTargets=\"SecondTarget\">\r\n    <!-- Define a property inside the first target -->\r\n    <PropertyGroup>\r\n      <ConditionProperty>ConditionValue</ConditionProperty>\r\n    </PropertyGroup>\r\n    <Message Text=\"Executing FirstTarget\" />\r\n  </Target>  \r\n  <Target Name=\"SecondTarget\" Condition=\"'$(ConditionProperty)' == 'ConditionValue'\" >\r\n    <Message Text=\"Executing SecondTarget\" />\r\n  </Target>\r\n</Project>\r\n```\r\nmsbuild /t:SecondTarget  doesn't output the secondtarget message.",
        "createdAt": "2024-04-02T09:40:42Z",
        "author": {
          "login": "JaynieBai"
        }
      },
      {
        "body": "Thank you @JaynieBai !\r\n\r\nI tried it out too and got the exact same result.\r\n\r\nThis is because `$(TargetFrameworkMonikerAssemblyAttributeText)` property is set inside another target `_SetTargetFrameworkMonikerAttribute` \r\nhttps://github.com/dotnet/msbuild/blob/main/src/Tasks/Microsoft.VisualBasic.CurrentVersion.targets#L332\r\nhttps://github.com/dotnet/msbuild/blob/main/src/Tasks/Microsoft.CSharp.CurrentVersion.targets#L331\r\n\r\n If we add `and '$(TargetFrameworkMonikerAssemblyAttributeText)' != ''` to the condition on `GenerateTargetFrameworkMonikerAttribute` target, then the condition is always false and target is never run (see Jenny's example). \r\n \r\nAnother solution could be to remove `_SetTargetFrameworkMonikerAttribute` and instead set the property outside of any target, then we can add `and '$(TargetFrameworkMonikerAssemblyAttributeText)' != ''` to the Condition on `GenerateTargetFrameworkMonikerAttribute` target. @KirillOsenkov what do you think?\r\n\r\n",
        "createdAt": "2024-04-16T10:57:05Z",
        "author": {
          "login": "surayya-MS"
        }
      },
      {
        "body": "> It seems target condition is evaluated in the Evalution time not the execution time.\r\n\r\nThis is not quite right--it's more complicated :( The docs at https://learn.microsoft.com/en-us/visualstudio/msbuild/target-build-order?view=vs-2022#determine-the-target-build-order are accurate, but you have to read them about 300 times before they sink in. I did, anyway . . .\r\n\r\nWhat happens in your example is that the condition is evaluated _between_ seeing the target for the first time (when the build starts, because you specified it as the entry-point target) and running the `BeforeTargets`, so the condition observes project state _before_ `FirstTarget` runs.",
        "createdAt": "2024-04-17T14:20:33Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "thanks Rainer! I wasn't looking forward to digging in deeper to understand this :)\r\n\r\nI'm going to bow out if you excuse me :)",
        "createdAt": "2024-04-18T00:17:45Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "@surayya-MS can you try:\r\n\r\n1. Extract the current body of `GenerateTargetFrameworkMonikerAttribute` to a new target `_WriteTargetFrameworkMonikerAttributeToFile` (name arbitrary), including `Inputs`/`Outputs`\r\n2. Make `GenerateTargetFrameworkMonikerAttribute` have `DependsOnTargets=\"PrepareForBuild;GetReferenceAssemblyPaths;_WriteTargetFrameworkMonikerAttributeToFile\"`\r\n3. Make `_WriteTargetFrameworkMonikerAttributeToFile` have `Condition=\"'@(Compile)' != '' and '$(GenerateTargetFrameworkAttribute)' == 'true' and '$(TargetFrameworkMonikerAssemblyAttributeText)' != '' \"`\r\n\r\nThat should delay the evaluation of the condition to the point where it's already computed, so the target can be conditioned out rather than marked out of date.",
        "createdAt": "2024-04-22T16:37:53Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "\n> [@surayya-MS](https://github.com/surayya-MS) can you try:\n> \n> 1. Extract the current body of `GenerateTargetFrameworkMonikerAttribute` to a new target `_WriteTargetFrameworkMonikerAttributeToFile` (name arbitrary), including `Inputs`/`Outputs`\n> 2. Make `GenerateTargetFrameworkMonikerAttribute` have `DependsOnTargets=\"PrepareForBuild;GetReferenceAssemblyPaths;_WriteTargetFrameworkMonikerAttributeToFile\"`\n> 3. Make `_WriteTargetFrameworkMonikerAttributeToFile` have `Condition=\"'@(Compile)' != '' and '$(GenerateTargetFrameworkAttribute)' == 'true' and '$(TargetFrameworkMonikerAssemblyAttributeText)' != '' \"`\n> \n> That should delay the evaluation of the condition to the point where it's already computed, so the target can be conditioned out rather than marked out of date.\n\n@rainersigwald  I tested your suggestions in the PR https://github.com/dotnet/msbuild/pull/10934/files and the condition is still evaluated as false.   Here is the log [msbuild.binlog.txt](https://github.com/user-attachments/files/17643183/msbuild.binlog.txt)\nIf I misunderstood anything, please let me know. Thank you.",
        "createdAt": "2024-11-06T07:29:01Z",
        "author": {
          "login": "JaynieBai"
        }
      },
      {
        "body": "> > [@surayya-MS](https://github.com/surayya-MS) can you try:\n> > \n> > 1. Extract the current body of `GenerateTargetFrameworkMonikerAttribute` to a new target `_WriteTargetFrameworkMonikerAttributeToFile` (name arbitrary), including `Inputs`/`Outputs`\n> > 2. Make `GenerateTargetFrameworkMonikerAttribute` have `DependsOnTargets=\"PrepareForBuild;GetReferenceAssemblyPaths;_WriteTargetFrameworkMonikerAttributeToFile\"`\n> > 3. Make `_WriteTargetFrameworkMonikerAttributeToFile` have `Condition=\"'@(Compile)' != '' and '$(GenerateTargetFrameworkAttribute)' == 'true' and '$(TargetFrameworkMonikerAssemblyAttributeText)' != '' \"`\n> > \n> > That should delay the evaluation of the condition to the point where it's already computed, so the target can be conditioned out rather than marked out of date.\n> \n> [@rainersigwald](https://github.com/rainersigwald) I tested your suggestions in the PR https://github.com/dotnet/msbuild/pull/10934/files and the condition is still evaluated as false. Here is the log [msbuild.binlog.txt](https://github.com/user-attachments/files/17643183/msbuild.binlog.txt) If I misunderstood anything, please let me know. Thank you.\n\n\nThe `TargetFrameworkMonikerAssemblyAttributeText` is set in `_SetTargetFrameworkMonikerAttribute` - and that's still executed after the `_WriteTargetFrameworkMonikerAttributeToFile`:\n\n![Image](https://github.com/user-attachments/assets/2e7367e0-24a4-456d-8208-3ec07570e468)\n\n\n\n@JaynieBai - can you please play with your PR to switch that order? I believe adding `_SetTargetFrameworkMonikerAttribute` to `DependsOn` of `_WriteTargetFrameworkMonikerAttributeToFile` should do the trick",
        "createdAt": "2025-01-02T13:58:59Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "> [@JaynieBai](https://github.com/JaynieBai) - can you please play with your PR to switch that order? I believe adding `_SetTargetFrameworkMonikerAttribute` to `DependsOn` of `_WriteTargetFrameworkMonikerAttributeToFile` should do the trick\n\n@JanKrivanek This still doesn't work [msbuild1.binlog.txt](https://github.com/user-attachments/files/18420421/msbuild1.binlog.txt).  this is since [The Condition attribute of the target is evaluated. If the Condition attribute is present and evaluates to false, the target isn't executed and has no further effect on the build](https://learn.microsoft.com/en-us/visualstudio/msbuild/target-build-order?view=vs-2022#determine-the-target-build-order)\n\n\n![Image](https://github.com/user-attachments/assets/d5004043-dd51-4ff9-abf6-63145aa994c2)\n\n",
        "createdAt": "2025-01-15T07:27:50Z",
        "author": {
          "login": "JaynieBai"
        }
      },
      {
        "body": "It was discussed offline that Before/After Targets should be attempted to be used here for targets ordering - since those execute regardles of the condition evaluation, while DependsOn targets are skipped if condition evalautes to false before executing them.",
        "createdAt": "2025-01-24T08:17:46Z",
        "author": {
          "login": "JanKrivanek"
        }
      }
    ]
  }
}