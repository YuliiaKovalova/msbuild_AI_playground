{
  "number": 5797,
  "title": "ProjectReference: How to make one project to consume/import assets (content, props, targets) from another project?",
  "body": "I need to make project with some msbuild properties, tasks and targets which will be consumed by another project.\r\n\r\nWhen my consumer-project references nuget package via `PackageReference` then consumer-projects can consume any assets: assemblies, content, props, targets and probably a lot more from package.\r\n\r\n> This is accomplished with [MSBuildProjectExtensionsPath](https://docs.microsoft.com/en-us/visualstudio/msbuild/customize-your-build?view=vs-2019#msbuildprojectextensionspath) (project implicitly imports `obj/MyProject.*.props` and `obj/MyProject.*.targets`). \r\n> And NuGet creates `MyProject.csproj.nuget.g.props` and `MyProject.csproj.nuget.g.targets` which just adding content items and importing props and targets.\r\n\r\nBut when my consumer-project references another project then consumer-project can consume only assembly. \r\nIs it possible to consume other assets?\r\n\r\nI've found next ProjectReference's metadata, but there is a little information in documentation. So, I don't know if this can help me. \r\n```\r\n<IncludeAssets>All</IncludeAssets>\r\n<ExcludeAssets>None</ExcludeAssets>\r\n<PrivateAssets>None</PrivateAssets>\r\n<Private>True</Private>\r\n<OutputItemType>Content</OutputItemType>\r\n<ReferenceOutputAssembly>true</ReferenceOutputAssembly>\r\n<CopyToOutputDirectory>Always</CopyToOutputDirectory>\r\n<TreatAsPackageReference>True</TreatAsPackageReference>\r\n```\r\nOf course I can just manually write imports to my props and targets. But there must be a better way. Or not?",
  "state": "OPEN",
  "createdAt": "2020-10-12T22:35:48Z",
  "updatedAt": "2024-10-23T02:17:14Z",
  "closedAt": null,
  "author": {
    "login": "Denis535"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Discussion"
  },
  "comments": {
    "nodes": [
      {
        "body": "Team Triage: You can't do this with `.props` and `.targets`. You can transfer other assets like content to project references. \r\n\r\nThe problem here is that each project gets evaluated at the same time, and the outputs of your first project will not have generated such that your second project (at evaluation time) sees them. We also don't know where the outputs of a project are until build time. But in order to import and affect the second project we would need an import statement pointing to those outputs.",
        "createdAt": "2020-10-14T15:43:51Z",
        "updatedAt": "2020-10-14T15:43:51Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "> You can transfer other assets like content to project references.\r\n\r\nCan you give more details?\r\n\r\nAlso what is happening when I write `<OutputItemType>Content</OutputItemType>` ? I don't notice any changes.",
        "createdAt": "2020-10-15T08:44:55Z",
        "updatedAt": "2020-10-15T08:44:55Z",
        "author": {
          "login": "Denis535"
        }
      },
      {
        "body": "Hey,\r\n\r\nI've also stumbled across this, I've been wanted to change our project / nuget to start using BuildTransitive, but it seems that those will not take into account in project references.\r\n\r\nIn most places, you do both, its not one or the other, is there some sort of solution/workaround?\r\n\r\nExample:\r\nProject A reference Project B via project reference\r\nProject A is later on outputted as a nuget\r\n\r\nProject C reference project A\r\n\r\nI expected both A and C projects to receive BuildTransitive .prop files",
        "createdAt": "2021-05-17T16:43:29Z",
        "updatedAt": "2021-05-17T16:43:29Z",
        "author": {
          "login": "yfital"
        }
      },
      {
        "body": "> Can you give more details?\r\n\r\nSee https://github.com/dotnet/msbuild/issues/1054#issuecomment-847959047, there's a property that allows you to copy Content items transitively.\r\n\r\nIt's not possible for MSBuild to get .props and .targets from project references though. The issue is that MSBuild needs to first import these props and targets before it can start parsing your project. And so everything is imported by the time that a project reference is being looked at. Closing the issue, feel free to ask more questions though!\r\n\r\n@yfital See the link above for copying over items from transitive project references. Copying over a nupkg that's a `Content` item is possible. Importing dynamic props and targets that affect the build, however, is not.\r\n",
        "createdAt": "2021-06-02T16:51:22Z",
        "updatedAt": "2021-06-02T16:51:22Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "Related: https://github.com/NuGet/Home/issues/6624\r\n\r\n> It's not possible for MSBuild to get .props and .targets from project references though\r\n\r\nIt's possible when you declare the imports to these props and targets in the first restore evaluation pass. NuGet does this to import props and targets files from nuget packages. The evaluation kicked-off by NuGet restore doesn't include those as NuGet then creates import files to import for subsequent evaluations: nuget.g.props and nuget.g.targets.\r\n\r\nAs we already support this for PackageReferences, I don't see a strong reason why we couldn't do the same for ProjectReferences. That said, this might make more sense to fix on the NuGet side which is the component that triggers those separate restore evaluations.",
        "createdAt": "2023-10-26T08:05:47Z",
        "updatedAt": "2023-10-26T08:05:47Z",
        "author": {
          "login": "ViktorHofer"
        }
      },
      {
        "body": "@ViktorHofer I don't understand. How can restore import files that don't exist? If we wait for them to exist then it's not exactly restore any more.",
        "createdAt": "2023-10-26T19:55:43Z",
        "updatedAt": "2023-10-26T19:55:43Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> How can restore import files that don't exist? If we wait for them to exist then it's not exactly restore any more.\r\n\r\nBased on the issue description I would expect those asset files (i.e. props and targets under a build / buildTransitive) folder to already exist. Do you mean the generated import files? NuGet creates those as part of the restore run, i.e. nuget.g.props and nuget.g.targets which are then getting imported by subsequent evaluations.",
        "createdAt": "2023-10-27T07:40:53Z",
        "updatedAt": "2023-10-27T07:40:53Z",
        "author": {
          "login": "ViktorHofer"
        }
      },
      {
        "body": "I'm thinking of the _copies_ of those files in the output folder, which may not match the ones that are available at restore time, depending on a variety of details.",
        "createdAt": "2023-10-30T18:21:41Z",
        "updatedAt": "2023-10-30T18:21:41Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I have the same problem of referencing project as if it was a NuGet package (aka reference its `props` and `targets` automatically).\r\n\r\nI come up with the following workaround to generate `.proj.g.targets` and `.proj.g.props` that can be recognized by the MSBuild.\r\n\r\n```xml\r\n<!-- Directory.Solution.targets -->\r\n\r\n<Project>\r\n    <!--\r\n    This target is used to redirect to project-spesific restore targets on solution-level restore. \r\n    -->\r\n    <Target Name=\"ImportProjectReferenceBuildFiles\" AfterTargets=\"Restore\">\r\n        <MSBuild Projects=\"@(ProjectReference)\" Targets=\"Restore\" />\r\n    </Target>\r\n\r\n</Project>\r\n```\r\n\r\n```xml\r\n<!-- Directory.Build.targets -->\r\n\r\n<Project>\r\n    <!--\r\n    This target is designed to gather information about referenced projects and generate import statements for .props and .targets files. \r\n    It uses `MSBuildProjectExtensionsPath` auto import feature like NuGet does to import the generated .props file.\r\n    -->\r\n    <Target\r\n            Name=\"ImportProjectReferenceBuildFiles\"\r\n            BeforeTargets=\"Restore;BeforeBuild\"\r\n            Inputs=\"@(ProjectReference);$(MSBuildThisFileFullPath)\"\r\n            Outputs=\"$(MSBuildProjectExtensionsPath)\\$(MSBuildProjectName).csproj.proj.g.props;$(MSBuildProjectExtensionsPath)\\$(MSBuildProjectName).csproj.proj.g.targets\"\r\n    >\r\n        <!-- Collecting .props and .targets files for the ProjectReferences -->\r\n        <ItemGroup>\r\n            <!-- Check for .props files in the build directory of the ProjectReferences -->\r\n            <_Props Include=\"@(ProjectReference->'%(RootDir)%(Directory)build\\%(Filename).props')\" Condition=\"Exists('%(RootDir)%(Directory)build\\%(Filename).props')\" />\r\n\r\n            <!-- Check for .targets files in the build directory of the ProjectReferences -->\r\n            <_Targets Include=\"@(ProjectReference->'%(RootDir)%(Directory)build\\%(Filename).targets')\" Condition=\"Exists('%(RootDir)%(Directory)build\\%(Filename).targets')\" />\r\n        </ItemGroup>\r\n\r\n        <!-- Creating groups to hold the XML content for import statements -->\r\n        <ItemGroup Condition=\"@(_Props) != '' or @(_Targets) != ''\">\r\n            <_Lines Include=\"&lt;Project&gt;\" />\r\n        </ItemGroup>\r\n\r\n        <ItemGroup>\r\n            <!-- Include for .props files -->\r\n            <_PropsLines Include=\"&lt;Project&gt;\" />\r\n            <_PropsLines Include=\"&lt;Import Project='\" Condition=\"@(_Props) != ''\" />\r\n            <_PropsLines Include=\"@(_Props->'%(Identity);')\" Condition=\"@(_Props) != ''\" />\r\n            <_PropsLines Include=\"' /&gt;\" Condition=\"@(_Props) != ''\" />\r\n            <_PropsLines Include=\"&lt;/Project&gt;\" />\r\n        </ItemGroup>\r\n\r\n        <ItemGroup>\r\n            <!-- Include for .targets files -->\r\n            <_TargetsLines Include=\"&lt;Project&gt;\" />\r\n            <_TargetsLines Include=\"&lt;Import Project='\" Condition=\"@(_Targets) != ''\" />\r\n            <_TargetsLines Include=\"@(_Targets->'%(Identity);')\" Condition=\"@(_Targets) != ''\" />\r\n            <_TargetsLines Include=\"' /&gt;\" Condition=\"@(_Targets) != ''\" />\r\n            <_TargetsLines Include=\"&lt;/Project&gt;\" />\r\n        </ItemGroup>\r\n\r\n        <ItemGroup Condition=\"@(_Props) != '' or @(_Targets) != ''\">\r\n            <_Lines Include=\"&lt;/Project&gt;\" />\r\n        </ItemGroup>\r\n\r\n        <!-- Write the collected props and targets imports to a file -->\r\n        <WriteLinesToFile File=\"$(MSBuildProjectExtensionsPath)\\$(MSBuildProjectName).csproj.proj.g.props\" Lines=\"@(_PropsLines)\" Overwrite=\"true\" />\r\n        <WriteLinesToFile File=\"$(MSBuildProjectExtensionsPath)\\$(MSBuildProjectName).csproj.proj.g.targets\" Lines=\"@(_TargetsLines)\" Overwrite=\"true\" />\r\n        \r\n    </Target>\r\n    \r\n    <!--\r\n    Because most IDEs do not reload the project file up until after it has been modified, we need to force a reload of the project file by making a dummy change to it.\r\n    -->\r\n    <Target Name=\"ForceProjectReload\" AfterTargets=\"ImportProjectReferenceBuildFiles\">\r\n        <Touch Files=\"$(MSBuildProjectFullPath)\">\r\n            <Output TaskParameter=\"TouchedFiles\" ItemName=\"FilesTouched\"/>\r\n        </Touch>\r\n    </Target>\r\n\r\n</Project>\r\n```",
        "createdAt": "2023-11-11T08:07:17Z",
        "updatedAt": "2023-11-11T08:07:17Z",
        "author": {
          "login": "oformaniuk"
        }
      },
      {
        "body": "Here's somewhat improved version to perform `props` and `targets` discovery recursively:\r\n\r\n```xml\r\n<Project>\r\n\r\n    <!--\r\n    This target is designed to gather information about referenced projects and generate import statements for .props and .targets files. \r\n    It uses `MSBuildProjectExtensionsPath` auto import feature like NuGet does to import the generated .props file.\r\n    -->\r\n    <Target\r\n            Name=\"ImportProjectReferenceBuildFiles\"\r\n            BeforeTargets=\"Restore;BeforeBuild\"\r\n            Inputs=\"@(ProjectReference);$(MSBuildThisFileFullPath)\"\r\n            Outputs=\"$(MSBuildProjectExtensionsPath)\\$(MSBuildProjectName).csproj.proj.g.props;$(MSBuildProjectExtensionsPath)\\$(MSBuildProjectName).csproj.proj.g.targets\"\r\n    >\r\n        <CallTarget\r\n                Targets=\"CollectImportProjectReferenceProps\"\r\n                Condition=\"'@(ProjectReference)' != ''\"\r\n        >\r\n            <Output TaskParameter=\"TargetOutputs\" ItemName=\"_ProjectProps\"/>\r\n        </CallTarget>\r\n\r\n        <CallTarget\r\n                Targets=\"CollectImportProjectReferenceTargets\"\r\n                Condition=\"'@(ProjectReference)' != ''\"\r\n        >\r\n            <Output TaskParameter=\"TargetOutputs\" ItemName=\"_ProjectTargets\"/>\r\n        </CallTarget>\r\n        \r\n        <!-- Collecting .props and .targets files for the ProjectReferences tree -->\r\n        <MSBuild\r\n                Projects=\"@(ProjectReference)\"\r\n                Targets=\"CollectImportProjectReferenceProps\"\r\n                Properties=\"_MSBuildProjectExtensionsPath=$(MSBuildProjectExtensionsPath);ImportOutput='false'\"\r\n                Condition=\"'@(ProjectReference)' != ''\"\r\n        >\r\n            <Output TaskParameter=\"TargetOutputs\" ItemName=\"_ReferenceProps\"/>\r\n        </MSBuild>\r\n\r\n        <MSBuild\r\n                Projects=\"@(ProjectReference)\"\r\n                Targets=\"CollectImportProjectReferenceTargets\"\r\n                Properties=\"_MSBuildProjectExtensionsPath=$(MSBuildProjectExtensionsPath)\"\r\n                Condition=\"'@(ProjectReference)' != ''\"\r\n        >\r\n            <Output TaskParameter=\"TargetOutputs\" ItemName=\"_ReferenceTargets\"/>\r\n        </MSBuild>\r\n        \r\n        <ItemGroup>\r\n            <!-- Deduplicating items -->\r\n            <__Props Include=\"@(_ProjectProps);@(_ReferenceProps)\" />\r\n            <__Targets Include=\"@(_ProjectTargets);@(_ReferenceTargets)\" />\r\n            <_Props Include=\"@(__Props->Distinct())\" />\r\n            <_Targets Include=\"@(__Targets->Distinct())\" />\r\n        </ItemGroup>\r\n        \r\n        <!-- Creating groups to hold the XML content for import statements -->\r\n        <ItemGroup Condition=\"@(_Props) != '' or @(_Targets) != ''\">\r\n            <_Lines Include=\"&lt;Project&gt;\" />\r\n        </ItemGroup>\r\n\r\n        <ItemGroup>\r\n            <!-- Include for .props files -->\r\n            <_PropsLines Include=\"&lt;Project&gt;\" />\r\n            <_PropsLines Include=\"&lt;Import Project='\" Condition=\"@(_Props) != ''\" />\r\n            <_PropsLines Include=\"@(_Props->'%(Identity);')\" Condition=\"@(_Props) != ''\" />\r\n            <_PropsLines Include=\"' /&gt;\" Condition=\"@(_Props) != ''\" />\r\n            <_PropsLines Include=\"&lt;/Project&gt;\" />\r\n        </ItemGroup>\r\n\r\n        <ItemGroup>\r\n            <!-- Include for .targets files -->\r\n            <_TargetsLines Include=\"&lt;Project&gt;\" />\r\n            <_TargetsLines Include=\"&lt;Import Project='\" Condition=\"@(_Targets) != ''\" />\r\n            <_TargetsLines Include=\"@(_Targets->'%(Identity);')\" Condition=\"@(_Targets) != ''\" />\r\n            <_TargetsLines Include=\"' /&gt;\" Condition=\"@(_Targets) != ''\" />\r\n            <_TargetsLines Include=\"&lt;/Project&gt;\" />\r\n        </ItemGroup>\r\n\r\n        <ItemGroup Condition=\"@(_Props) != '' or @(_Targets) != ''\">\r\n            <_Lines Include=\"&lt;/Project&gt;\" />\r\n        </ItemGroup>\r\n\r\n        <PropertyGroup>\r\n            <_MSBuildProjectExtensionsPath Condition=\"'$(_MSBuildProjectExtensionsPath)' == ''\">$(MSBuildProjectExtensionsPath)</_MSBuildProjectExtensionsPath>\r\n        </PropertyGroup>\r\n        \r\n        <!-- Write the collected props and targets imports to a file -->\r\n        <WriteLinesToFile File=\"$(_MSBuildProjectExtensionsPath)\\$(MSBuildProjectName).csproj.proj.g.props\" Lines=\"@(_PropsLines)\" Overwrite=\"true\" />\r\n        <WriteLinesToFile File=\"$(_MSBuildProjectExtensionsPath)\\$(MSBuildProjectName).csproj.proj.g.targets\" Lines=\"@(_TargetsLines)\" Overwrite=\"true\" />\r\n        \r\n    </Target>\r\n\r\n    <Target Name=\"CollectImportProjectReferenceProps\" Outputs=\"@(_ProjectProps)\">\r\n        \r\n        <!-- Collecting .props and .targets files for the ProjectReferences -->\r\n        <ItemGroup>\r\n            <!-- Check for .props files in the build directory of the ProjectReferences -->\r\n            <_ProjectProps Include=\"@(ProjectReference->'%(RootDir)%(Directory)build\\%(Filename).props')\" Condition=\"Exists('%(RootDir)%(Directory)build\\%(Filename).props')\" />\r\n        </ItemGroup>\r\n        \r\n    </Target>\r\n\r\n    <Target Name=\"CollectImportProjectReferenceTargets\" Outputs=\"@(_ProjectTargets)\">\r\n\r\n        <!-- Collecting .props and .targets files for the ProjectReferences -->\r\n        <ItemGroup>\r\n            <!-- Check for .targets files in the build directory of the ProjectReferences -->\r\n            <_ProjectTargets Include=\"@(ProjectReference->'%(RootDir)%(Directory)build\\%(Filename).targets')\" Condition=\"Exists('%(RootDir)%(Directory)build\\%(Filename).targets')\" />\r\n        </ItemGroup>\r\n\r\n    </Target>\r\n    \r\n    <!--\r\n    Because most IDEs do not reload the project file up until after it has been modified, we need to force a reload of the project file by making a dummy change to it.\r\n    -->\r\n    <Target Name=\"ForceProjectReload\" AfterTargets=\"ImportProjectReferenceBuildFiles\">\r\n        <Touch Files=\"$(MSBuildProjectFullPath)\">\r\n            <Output TaskParameter=\"TouchedFiles\" ItemName=\"FilesTouched\"/>\r\n        </Touch>\r\n    </Target>\r\n\r\n</Project>\r\n```",
        "createdAt": "2023-11-14T22:45:40Z",
        "updatedAt": "2023-11-14T22:48:54Z",
        "author": {
          "login": "oformaniuk"
        }
      },
      {
        "body": "Is there a way this kind of thing is typically handled for test projects? I'm surprised this hasn't come up when trying to test the assets (content, props, targets) of a sibling project. Sure, you could transfer assets to the test project, but I'd think that would defeat the purpose of some of the test scenarios.",
        "createdAt": "2024-10-23T02:17:13Z",
        "updatedAt": "2024-10-23T02:17:13Z",
        "author": {
          "login": "tdg5"
        }
      }
    ]
  }
}