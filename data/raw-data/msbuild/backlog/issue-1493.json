{
  "number": 1493,
  "title": "MSBuild 15 Sdk Design",
  "body": "MSBuild will allow third-party-defined and dynamically-delivered extensions of the build process via the new \u201cSdk\u201d concept. This will extend the experience delivered with RC.2 to include an acquisition process.\r\n\r\n## Changes to project files\r\n\r\nAn Sdk can be consumed in two ways: with [implicit top and bottom imports](https://github.com/Microsoft/msbuild/issues/1392) at through the `Sdk` attribute on the `Project` element:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n...\r\n</Project>\r\n```\r\n\r\nand through a [modified `<Import>` element](https://github.com/Microsoft/msbuild/issues/1400) with the `Sdk` attribute:\r\n\r\n```xml\r\n<Project>\r\n  <Import Project=\"Sdk.props\" Sdk=\"Microsoft.NET.Sdk/1.0.0\" />\r\n...\r\n  <Import Project=\"Sdk.targets\" Sdk=\"Microsoft.NET.Sdk/1.0.0\" />\r\n</Project>\r\n```\r\n\r\nThe former mechanism is syntactic sugar for the latter, with an `Sdk.props` import at the top of the project and an `Sdk.targets` import at its bottom.\r\n\r\n## User experience\r\n\r\nWhen a user opens an Sdk-using project in an IDE, the IDE will try to evaluate the project. MSBuild will coordinate with the IDE to fetch and integrate all required Sdks. The IDE will probably wish to display a progress bar for any required downloads.\r\n\r\nOn the command line, a `dotnet restore` or `msbuild.exe /t:Restore` invocation will fetch required Sdks before proceeding with the restore process, ensuring that only one user gesture is required to bring the project to a buildable state.\r\n\r\n## Sdk acquisition\r\n\r\nHow does MSBuild know how to acquire an Sdk when it needs to? Through a provider model. A caller of the MSBuild APIs can provide an instance of a new interface `ISdkResolver` which will be used to map the XML from above to files on the local filesystem.\r\n\r\n**Note: Although the acquisition could differ between builds the resolved SDK would be identical.**\r\n\r\n```C#\r\nstruct SdkReference\r\n{\r\n    public string Name;\r\n    public Version? Version;\r\n}\r\n\r\ninterface ISdkResolver\r\n{\r\n    public Dictionary<SdkReference, Path> Resolve(IEnumerable<SdkReference>);\r\n}\r\n```\r\n\r\nWe expect most `ISdkResolver` implementations to additionally have affordances for reporting progress back to a UI and to log using the MSBuild log interface. \r\n\r\n\ud83d\udea7 Exposing logging may require an interface change here.\r\n\r\n\ud83d\udea7 Do we need to pass path-to-project, so that something NuGet-like can walk up to find its feed configuration?\r\n\r\n## MSBuild evaluation changes\r\n\r\nMSBuild will collect Sdks needed for a given project early in its evaluation (before pass 1 expands imports). It will then unify Sdks specified within the project with those specified in the (optional) lineup file. This produces a list of Sdks that is then passed to `ISdkResolver.Resolve()`, producing a lookup table for Sdk imports.\r\n\r\n`Evaluator.GetCurrentDirectoryForConditionEvaluation` should return the Sdk directory if there is an `Sdk` attribute on an import, so that you can have something like `Condition=\"Exists('Sdk\\Sdk.props')\"` on an Sdk import.\r\n\r\nEvaluation pass 1 (properties and imports) then continues as usual. When considering an `Import` element with an `Sdk` attribute, the specified `Project` attribute is treated as a relative path from the base Sdk path looked up in the table generated in the new pre-pass-1 step.\r\n\r\n## Lineups\r\n\r\nAfter growing past being \u201csmall\u201d projects, most repos/solutions will want a simple way to manage the set of Sdks they use--for instance, to unify versions of Sdks available for projects within the repo. This will be accomplished by a lineup file, format TBD, that MSBuild will consider when putting together the list of available Sdks.\r\n\r\n\ud83d\udea7 What does this look like on disk?\r\n\r\nWe expect a few common patterns of use:\r\n* Small-scale \u201cdemo projects\u201d\r\n  * Consist of ~1 project.\r\n  * Do not have a lineup file.\r\n  * Specify Sdk version for any \u201cnon-core\u201d Sdk referenced.\r\n* Larger-scale projects\r\n  * Have many projects in a solution.\r\n  * Specify a lineup\r\n  * Do not specify versions in the project files themselves, only in the lineup.\r\n\r\n## Project Load\r\nWe'll need to add to [ProjectLoadSettings](https://github.com/Microsoft/msbuild/blob/cb8c727a898e4439a3cd18f329504e436b0b7c00/src/XMakeBuildEngine/Definition/ProjectLoadSettings.cs) so a user can opt out of SDK resolution.  They would need to specify both `IgnoreMissingImports` and a new `DoNotResolveSdks` if they wanted to open a project without getting errors.  But this would allow minimal property evaluation without resolving anything.\r\n\r\n# Concrete work items\r\n\r\n- [ ] Get feedback from VS folks\r\n  * Especially around UI needs for status updating. \r\n- [ ] Expose `ISdkResolver` definition for prototyping.\r\n- [ ] Implement Sdk-aware imports (#1400)\r\n- [ ] Implement Sdk-gathering (pass 0.5)\r\n- [ ] Augment build-starting methods to accept an `ISdkResolver`\r\n  * In `BuildParameters`? `BuildRequestData`?\r\n- [ ] Minimal `FilesystemSdkResolver` for prototyping and testing\r\n  * Maybe looks in NuGet cache folder? That'd get us a long way toward seeing what the once-everything-is-downloaded scenario looks like.\r\n- [ ] Implement `NuGetSdkResolver`: https://github.com/NuGet/Home/issues/5220\r\n  * Straw man implementation idea: write sdk names + package versions to a minimal project file, restore it out of proc, return paths \ud83d\udea7 magically.\r\n- [ ] Use resolvers in various scenarios\r\n  - [ ] Change MSBuild.exe to use a resolver\r\n  - [ ] Change `dotnet` CLI to invoke MSBuild with a resolver\r\n  - [ ] Change VS to invoke MSBuild with a resolver\r\n  - [ ] Change VS Code to invoke MSBuild with a resolver\r\n  - [ ] Change VS Mac to invoke MSBuild with a resolver\r\n  * \ud83d\udea7 Some of those could be helped by changing the default, if blocking evaluation without progress reporting is ok. Probably is for OmniSharp (out of proc) and CLI (synchronous command line build). UIs probably want advanced progress reporting + cancellability.",
  "state": "CLOSED",
  "createdAt": "2016-12-16T22:09:20Z",
  "updatedAt": "2024-02-21T17:23:16Z",
  "closedAt": "2018-01-25T22:05:43Z",
  "author": {
    "login": "AndyGerlicher"
  },
  "labels": [
    "User Experience",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Feature: Sdks"
  },
  "comments": {
    "nodes": [
      {
        "body": "How does this play with VS Code, JetBrains Rider, Xamarin, MonoDevelop, ...?",
        "createdAt": "2016-12-19T13:32:49Z",
        "updatedAt": "2016-12-19T13:32:49Z",
        "author": {
          "login": "maartenba"
        }
      },
      {
        "body": "@jviau We're designing a way for a UI to provide to MSBuild some logic that resolves an SDK.  The implication for VS is that it would want to present the user with a progress dialog while it restores packages  during project load.  Our design here means that VS would specify a class to MSBuild that we would create an instance of and call `Resolve`.  If a user loaded a solution with multiple projects, then `Resolve` would be called multiple times.  Would this work okay with VS?  Can you review the design here and give any feedback?",
        "createdAt": "2016-12-19T15:51:02Z",
        "updatedAt": "2016-12-19T15:51:02Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "@maartenba \r\n> How does this play with VS Code, JetBrains Rider, Xamarin, MonoDevelop, ...?\r\n\r\nWe have items near the bottom to involve VS Code, VS Mac and dotnet CLI to ensure they can pass a resolver to give the user a good experience.\r\n\r\nJetBrains Rider and MonoDevelop will need to implement the interface for displaying a progress dialog to the user.  I'm fairly certain they already have a custom MSBuild logger to handle log output like Visual Studio so we're hoping it will be easy for IDEs to make this happen for the SDK resolution.  We can probably pave the way with the ones we ship in VS that they can re-use or take as an example.",
        "createdAt": "2016-12-19T15:56:02Z",
        "updatedAt": "2016-12-19T15:56:02Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "@AndyGerlicher What do you think about making this more generic and extensible?  Right now it's specifically for resolving SDKs but do you think we'll ever want to resolve other project assets?  My thought was to have the logic be more centered around resolving assets, one of which would be an SDK.  Something like:\r\n\r\n```c#\r\npublic interface AssetResolver\r\n{\r\n    IEnumerable<IResolvedAsset> Resolve(IEnumerable<IAsset> assets);\r\n}\r\n\r\npublic enum AssetType\r\n{\r\n    None,\r\n    SDK,\r\n}\r\n\r\npublic interface IAsset\r\n{\r\n    AssetType AssetType { get; }\r\n    string Name { get; }\r\n    Version Version { get; }\r\n}\r\n\r\npublic interface IResolvedAsset : IAsset\r\n{\r\n    /// <summary>\r\n    /// The path to the resolved asset.\r\n    /// </summary>\r\n    string Path { get; }\r\n}\r\n```\r\n\r\nThoughts?",
        "createdAt": "2016-12-19T16:03:43Z",
        "updatedAt": "2016-12-19T16:03:43Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "I also looked at logging and it's going to be tricky.  The only thing available during project evaluation is the internal LoggingService so we'd need a new interface to expose to the caller or allow them to throw exceptions.  If we want them to be able to log messages and warnings we'll need to come up with something.",
        "createdAt": "2016-12-19T16:17:19Z",
        "updatedAt": "2016-12-19T16:17:19Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "This sounds like a very intriguing and valuable feature!\r\n\r\n>  a lineup file, format TBD\r\n\r\nPlease consider making this an XML file, to keep it consistent with the current ecosystem.  It would be confusing to introduce differing and inconsistent data formats, especially after moving from XML to JSON and then back to XML again.\r\n\r\nThe spirit of the request here isn't to favor a particular format, but rather to favor consistency.  I might be alone on this, however.  But to me, exploring a given a solution (VS or otherwise) and seeing two different data files in two different formats when they both simply describe data is not only maddeningly inconsistent, but inefficient as well.  That means you ultimately have two libraries/concerns in your solution that parse/save data, when it could be done with just one.\r\n\r\nOf course, [if you provide a strictly POCO-based model whereby the end user could describe their data in the format they prefer](https://github.com/Microsoft/msbuild/issues/613), then this is a non-issue. \ud83d\ude04  What strikes me about this feature is that the same sort of magic could eventually be used to download/install data-format preferences/serialization components as well -- something that has been discussed in https://github.com/Microsoft/msbuild/issues/613.",
        "createdAt": "2016-12-19T18:26:23Z",
        "updatedAt": "2016-12-19T18:26:23Z",
        "author": {
          "login": "Mike-E-angelo"
        }
      },
      {
        "body": "@jeffki Is he resolver ever an IDE-specific extension or is the IDE's only role to call into msbuild and show progress?",
        "createdAt": "2016-12-20T06:36:05Z",
        "updatedAt": "2016-12-20T06:36:05Z",
        "author": {
          "login": "maartenba"
        }
      },
      {
        "body": "@jeffkl I am a bit confused by the VS UI interaction. Is VS supposed to implement its own `ISdkResolver` that performs both progress UI **and** the sdk resolution? Or are you going to have a VS-agnostic implementation that performs only sdk resolution (then it can be re-used for the command line) and then CPS hooks up to events or something and is responsible for displaying the progress UI?",
        "createdAt": "2016-12-20T20:07:44Z",
        "updatedAt": "2016-12-20T20:07:44Z",
        "author": {
          "login": "jviau"
        }
      },
      {
        "body": "@jviau Yes Visual Studio's implementation of `ISdkResolver` would do the resolution and the UI.  We didn't think much of the resolvers could be re-used because Visual Studio might use the NuGet object model since it has NuGet assemblies while dotnet CLI might just run NuGet.exe and pipe it's output.  Does this sound doable for VS?",
        "createdAt": "2016-12-20T21:42:56Z",
        "updatedAt": "2016-12-20T21:42:56Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "@maartenba The IDE will new up a `Project` instance for evaluation properties and items and when it does, MSBuild will call the resolvers to acquire SDKs.  The project cannot be evaluated until the SDK exists on disk.  From the command-line, you'll see a log message that MSBuild is acquiring SDKs but we want the UIs to be able to present some progress to the user.  We were assuming that IDEs are already using custom loggers to get info from MSBuild to present to the user so we wanted to follow that same design for SDK resolvers.",
        "createdAt": "2016-12-20T21:48:24Z",
        "updatedAt": "2016-12-20T21:48:24Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "@jeffkl will this be a VS-wide implementation, or is it provided per `ProjectCollection`, `ProjectRootElement`, or `Project`? The design above says MSBuild will construct the object, but I think CPS would prefer to construct it and pass it to MSBuild - can we have that behavior available?",
        "createdAt": "2016-12-21T00:47:08Z",
        "updatedAt": "2016-12-21T00:47:08Z",
        "author": {
          "login": "jviau"
        }
      },
      {
        "body": "@jeffki so looking at the various responses the IDE would be responsible for \u00e1nd logging \u00e1nd resolving SDK's? Does that also imply a build server should perform both these tasks?",
        "createdAt": "2016-12-21T01:00:31Z",
        "updatedAt": "2016-12-21T01:00:31Z",
        "author": {
          "login": "maartenba"
        }
      },
      {
        "body": "@jviau We think resolvers would be like loggers so they would have a wide scope like `ProjectCollection` level or build episode.  I think VS should add the resolver to the project collection it uses so the same one is re-used.  \r\n\r\nMSBuild will be passed an instance of the resolver and call it to resolve any unresolved SDKs.  So yes CPS would construct it.",
        "createdAt": "2016-12-26T00:54:39Z",
        "updatedAt": "2016-12-26T00:54:39Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "@maartenba For command-line based builds, MSBuild will ship with a resolver that logs to the console.  So build servers will not need any resolvers.  The main issue is that UI applications would want to pop up their customer dialogs and may have their own way of acquiring SDKs.  ",
        "createdAt": "2016-12-26T00:56:07Z",
        "updatedAt": "2016-12-26T00:56:07Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "@jeffkl I'm concerned that IDE will be able to handle SDK resolving. That way MSBuild will have a different behaviour depending on environment it was started in. It may lead to subtle differences between builds inside IDE and on a build server.",
        "createdAt": "2016-12-26T17:36:57Z",
        "updatedAt": "2016-12-26T17:36:57Z",
        "author": {
          "login": "shalupov"
        }
      },
      {
        "body": "@shalupov I'll update the design to note that although different resolvers could run, the full closure of what they resolve would be identical.  In the case of an SDK, it's just a NuGet package so when building from the command-line the same NuGet package would be used as the one when building from an IDE.  The differences would be in how the end-user application acquires the package (uses its own copy of NuGet, downloads NuGet, uses just the web protocols to get the file) and how it presents progress (a progress dialog or logging to the console).",
        "createdAt": "2017-01-03T16:04:59Z",
        "updatedAt": "2017-01-03T16:04:59Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "> Lineups\r\n\r\n@AndyGerlicher can you explain how these files are different than using a `.props` file to share version numbers across all projects in a repo?  For example, in the https://github.com/dotnet/sdk, we have a DependencyVersions.props file that specifies the versions of our dependencies: https://github.com/dotnet/sdk/blob/master/build/DependencyVersions.props.  So to update the whole repo to a new NuGet version, we just change a single version number in a single file.\r\n\r\nOr are lineups only for managing `Sdk` versions and not other versions?",
        "createdAt": "2017-01-10T17:56:48Z",
        "updatedAt": "2017-01-10T17:56:48Z",
        "author": {
          "login": "eerhardt"
        }
      },
      {
        "body": "Will this changes allso apply to c++ project? ",
        "createdAt": "2017-01-10T18:07:32Z",
        "updatedAt": "2017-01-10T18:07:32Z",
        "author": {
          "login": "magol"
        }
      },
      {
        "body": "I'm super curious how this meshes with the concept of a nuget package in general. We, https://github.com/Microsoft/winobjc , just moved to ship our \"sdk\" as a nuget for folks so I'd be curious what the path looks like for sdk writers to move from a nuget to this new hotness.",
        "createdAt": "2017-03-16T07:37:34Z",
        "updatedAt": "2017-03-16T07:37:34Z",
        "author": {
          "login": "bbowman"
        }
      },
      {
        "body": "From API perspective, you shouldn't be returning a concrete `Dictionary<TKey, TValue>`, instead, `IReadOnlyDictionary<TKey, TValue>`.",
        "createdAt": "2017-03-20T23:40:57Z",
        "updatedAt": "2017-03-20T23:40:57Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "Just putting forth an idea for the \"lineup\" mechanism.\r\n\r\nYou could make projects in a solution share the same lineup perhaps using the SDK attribute:\r\n\r\nProject A:\r\n```\r\n<Project Sdk=\"Local\">\r\n</Project>\r\n```\r\n\r\nProject B:\r\n```\r\n<Project Sdk=\"Local\">\r\n</Project>\r\n```\r\n\r\nThen in a well known directory, relative to the project / solution dir, you'd have a matching `Local.Targets` file for msbuild to discover.\r\n\r\nThis could use the explicit or implicit form:\r\n\r\n```\r\n<Project>\r\n <Import Project=\"Sdk.props\" Sdk=\"Microsoft.NET.Sdk/1.0.0\" /> \r\n<Import Project=\"Foo.props\" Sdk=\"Foo/1.0.0\" /> \r\n<Import Project=\"Sdk.targets\" Sdk=\"Microsoft.NET.Sdk/1.0.0\" /> \r\n<Import Project=\"Foo.targets\" Sdk=\"Foo.Sdk/1.0.0\" />\r\n </Project>\r\n```\r\n This would act as the lineup file, i.e you can manage sdk version in one place.\r\n\r\nIf msbuild couldn't find a matching targets file, then it could just attempt to resolve the SDK using normal resolution.\r\n\r\nIf you needed to special case some projects in your giant solution, to use a different version of some of the SDK's, for those projects you could:\r\n\r\n```\r\n<Project Sdk=\"Another\">\r\n</Project>\r\n```\r\n\r\nAnd then you add `Another.targets` alongside your Local.targets..\r\n\r\n```\r\n<Project>\r\n <Import Project=\"Sdk.props\" Sdk=\"Microsoft.NET.Sdk/1.0.1\" /> \r\n<Import Project=\"Sdk.targets\" Sdk=\"Microsoft.NET.Sdk/1.0.1\" /> \r\n </Project>\r\n```",
        "createdAt": "2017-04-01T01:52:04Z",
        "updatedAt": "2017-04-01T16:45:00Z",
        "author": {
          "login": "dazinator"
        }
      },
      {
        "body": "@dazinator wouldn't that be exactly the same as the `Directory.Build.props`/`Directory.Build.targets` support that's already built-in?",
        "createdAt": "2017-04-05T14:02:00Z",
        "updatedAt": "2017-04-05T14:02:00Z",
        "author": {
          "login": "kzu"
        }
      },
      {
        "body": "Note on lineups: in addition to version unification, it might be helpful/required to be able to specify what resolver should be used to resolve a specified SDK.",
        "createdAt": "2017-05-15T14:48:44Z",
        "updatedAt": "2017-05-15T14:48:44Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Is it still supposed to keep ability to extend MSBuild process using properties like `ResolveReferencesDependsOn`? Should I report an issue or is this expected? After reviewing https://github.com/Microsoft/msbuild/issues/1392 I was able to extend build process by overriding target AfterResolveReferences using explicit references:\r\n```  \r\n  <Import Project=\"Sdk.targets\" Sdk=\"Microsoft.NET.Sdk.Web\" />\r\n\r\n  <Target Name=\"AfterResolveReferences\">\r\n    <Message Text=\"It Works!\" Importance=\"high\"/>\r\n  </Target>\r\n```\r\nHowever any changes in the property group didn't make any difference\r\n`<ResolveReferencesDependsOn>$(ResolveReferencesDependsOn);ChangesDoesNoteTakeEffect</ResolveReferencesDependsOn>`",
        "createdAt": "2017-05-16T15:44:37Z",
        "updatedAt": "2017-05-16T15:44:37Z",
        "author": {
          "login": "mkarpuk"
        }
      },
      {
        "body": "@mkarpuk Physically where in the project file did you define that property? The defaults are set in `Microsoft.Common.CurrentVersion.targets`, which is imported through the final import, so you'd have to do the change after an explicit import, much like you did while overriding the target.\r\n\r\nIs there a reason you don't want to inject your property using `BeforeTargets`? I would write your example as\r\n\r\n```csproj\r\n  <Target Name=\"EmitMessageBeforeResolveReferences\"\r\n          BeforeTargets=\"ResolveReferences\">\r\n    <Message Text=\"It Works!\" Importance=\"high\"/>\r\n  </Target>\r\n\r\n```\r\n\r\nAnd then it could be defined anywhere in the file.",
        "createdAt": "2017-05-16T15:55:13Z",
        "updatedAt": "2017-05-16T15:55:13Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I put `ResolveReferencesDependsOn` in the beginning of the file. Thank you! I didn't realized that property was defined in targets, not props.\r\n`BeforeTargets` also works, I have just converted from .xproj to new .csproj and explore new format. Everything was nice and clear except for property-based overrides which made me thinking that I don't understand something. Now you solved this, thanks again!",
        "createdAt": "2017-05-16T16:27:03Z",
        "updatedAt": "2017-05-16T16:27:03Z",
        "author": {
          "login": "mkarpuk"
        }
      },
      {
        "body": "#2850 implemented the NuGet parts of this, and the local-filesystem parts have been long completed (like, .NET Core SDK 1.0).\r\n\r\n@jeffkl I think we can close this as completed unless there's outstanding work on the progress-indication stuff.",
        "createdAt": "2018-01-25T18:17:25Z",
        "updatedAt": "2018-01-25T18:17:25Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald I'd like to start using custom SDKs in our repos. Is there a spec (or a sample) I can look at to see how this works end-to-end (covering lineups etc.)?",
        "createdAt": "2018-01-25T19:23:57Z",
        "updatedAt": "2018-01-25T19:23:57Z",
        "author": {
          "login": "tmat"
        }
      },
      {
        "body": "I agree, its time to put a \"fork\" in this one",
        "createdAt": "2018-01-25T22:05:43Z",
        "updatedAt": "2018-01-25T22:05:43Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "@tmat please see https://github.com/MicrosoftDocs/visualstudio-docs/blob/master/docs/msbuild/how-to-use-project-sdk.md for some documentation, feedback welcome!",
        "createdAt": "2018-01-25T22:06:09Z",
        "updatedAt": "2018-01-25T22:06:09Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "@jeffkl Thanks! This feature has a potential to significantly simplify our repos. Looking forward testing it out.",
        "createdAt": "2018-01-25T22:12:41Z",
        "updatedAt": "2018-01-25T22:12:41Z",
        "author": {
          "login": "tmat"
        }
      }
    ]
  }
}