{
  "number": 16,
  "title": "Support yaml/json",
  "body": "Opening this issue to get the discussion going -- xml is very verbose. Many project nowadays opt for configuring using YAML or json.\nIt would be great to have support for those in msbuild.\n",
  "state": "CLOSED",
  "createdAt": "2015-03-19T12:27:35Z",
  "updatedAt": "2024-02-21T17:32:14Z",
  "closedAt": "2015-12-09T23:13:34Z",
  "author": {
    "login": "hmemcpy"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "I don't believe yaml is in fact markup, but I'm all for json... Much clearer.\n",
        "createdAt": "2015-03-19T14:25:58Z",
        "updatedAt": "2015-03-19T14:25:58Z",
        "author": {
          "login": "ChaseFlorell"
        }
      },
      {
        "body": "json +1\n",
        "createdAt": "2015-03-19T15:47:17Z",
        "updatedAt": "2015-03-19T15:47:17Z",
        "author": {
          "login": "arbing"
        }
      },
      {
        "body": "json +1 here\n",
        "createdAt": "2015-03-19T17:20:51Z",
        "updatedAt": "2015-03-19T17:20:51Z",
        "author": {
          "login": "nilemarbarcelos"
        }
      },
      {
        "body": "json +1\u00b2\n",
        "createdAt": "2015-03-19T17:53:18Z",
        "updatedAt": "2015-03-19T17:53:18Z",
        "author": {
          "login": "WellMafra"
        }
      },
      {
        "body": "JSON would be totally in spirit of the \"new\" .NET, +1\n",
        "createdAt": "2015-03-19T17:53:46Z",
        "updatedAt": "2015-03-19T17:54:07Z",
        "author": {
          "login": "arthrp"
        }
      },
      {
        "body": "I'd be curious how a json formatted MSBuild project file would play with AspNet vNext's project.json.\n",
        "createdAt": "2015-03-19T18:24:18Z",
        "updatedAt": "2015-03-19T18:24:18Z",
        "author": {
          "login": "RichiCoder1"
        }
      },
      {
        "body": "json support will be great of course after getting msbuild xplat\n",
        "createdAt": "2015-03-19T18:48:53Z",
        "updatedAt": "2015-03-19T18:48:53Z",
        "author": {
          "login": "shahid-pk"
        }
      },
      {
        "body": "One important bit about json config is the (lack of)  comments,which are useful in a build configuration. How would json support that? \n",
        "createdAt": "2015-03-19T19:52:44Z",
        "updatedAt": "2015-03-19T19:52:44Z",
        "author": {
          "login": "hmemcpy"
        }
      },
      {
        "body": "@hmemcpy the fact that official JSON standard doesn't support comments doesn't mean a thing. JS comments can be easily handled by a JSON parser.It doesn't need to be \"Crockford's valid JSON\", you know.\n",
        "createdAt": "2015-03-19T23:02:31Z",
        "updatedAt": "2015-03-19T23:02:31Z",
        "author": {
          "login": "arthrp"
        }
      },
      {
        "body": "I think it would be helpful if someone converted an existing MSBuild solution (e.g. this repo) to json so we can see how it looks like :)\n",
        "createdAt": "2015-03-19T23:44:16Z",
        "updatedAt": "2015-03-19T23:44:16Z",
        "author": {
          "login": "akoeplinger"
        }
      },
      {
        "body": "Without being for or against this suggestion, the main thing we would need to keep in mind is alignment with Visual Studio and the project files. It's something we will definitely bring up for Visual Studio vNext, but I'm not sure that we would take a change right now for the current MSBuild incarnation as it would likely be fairly substantial.\n",
        "createdAt": "2015-03-20T00:59:48Z",
        "updatedAt": "2015-03-20T00:59:48Z",
        "author": {
          "login": "AndyGerlicher"
        }
      },
      {
        "body": ":-1: \n\nUnless someone plans to write a JSON 'schema validator' this will not happen. XML has all that built in.\n\nA better choice would be some JSON to MsBuild XML preprocessor task. Well anyone can do that, it does not have to be built into MsBuild.\n",
        "createdAt": "2015-03-20T05:17:45Z",
        "updatedAt": "2015-03-20T05:17:45Z",
        "author": {
          "login": "leppie"
        }
      },
      {
        "body": "@leppie \nJSON Schema and Schema validation is a thing. See ASP.NET's project.json:\nhttps://github.com/aspnet/Home/wiki/Project.json-file\n",
        "createdAt": "2015-03-20T13:21:12Z",
        "updatedAt": "2015-03-20T13:21:12Z",
        "author": {
          "login": "RichiCoder1"
        }
      },
      {
        "body": "YAML is a superset of JSON, so I'd rather see support for YAML (which would thus automatically include JSON support unless YAML-specific features like multiple documents in a single file are required). YAML is also a lot easier to hand-modify in case that matters for people (comes up for me very occasionally where I need to manually edit a .csproj because I accidentally did something derpy in VS that I couldn't fully revert).\n",
        "createdAt": "2015-03-20T22:57:43Z",
        "updatedAt": "2015-03-20T22:57:43Z",
        "author": {
          "login": "skizzerz"
        }
      },
      {
        "body": "@darrelmiller, I know what it means, but it's not really 'markup'. Just my opinion, but I'm not a fan. Invisible characters have no place as deliminators. Json support on the other hand aligns nicely with the vnext direction.\n\nAlso, extra data inside json wouldn't affect its purpose, so comments can easily just be extra data. When parsed, comments show up as properties.\n\n```\n{\"_comment\":\"I'm a comment. \"}\n```\n",
        "createdAt": "2015-03-21T06:16:17Z",
        "updatedAt": "2015-03-21T06:16:17Z",
        "author": {
          "login": "ChaseFlorell"
        }
      },
      {
        "body": "@ChaseFlorell I deleted my comment because I was wrong about what YAML stands for  :open_mouth: \nAnyway, I realize the momentum is going to be behind JSON, but having worked with both, I personally find YAML so much more pleasant.\n",
        "createdAt": "2015-03-21T13:49:02Z",
        "updatedAt": "2015-03-21T13:49:02Z",
        "author": {
          "login": "darrelmiller"
        }
      },
      {
        "body": "I hate to be the lone ranger here. :) (actually, I think @ChaseFlorell can back me up here if he is who I think he is. :smile:).  But I would **LOVE** to see MSBuild support Xaml.  Xaml already has built-in  designer and tooling support in VisualStudio, and has rich support for intellisense through add-ons such as ReSharper.  Not to mention, it is used everywhere in MSFT ecosystem these days (except ASP.NET, but I personally hope to see that change that as well. :smile:).  Xamarin is also blowing up with a bunch of Xaml adoption as well.  It's pretty ubiquitous and should definitely be considered here.\n\nXaml is thought of as presentation markup, but it is an object definition language that can be used anywhere.  Again, it comes with built-in rich tooling support _for free_. As a quick example, here are some POCOs that I've designed:\n![](http://content.screencast.com/users/Mike-EEE/folders/Jing/media/4ee0c807-fa29-4998-aa59-15005a4c553b/2015-03-26_0731.png).  \n\nAnd here is a a corresponding simple Xaml definition:\n![](http://content.screencast.com/users/Mike-EEE/folders/Jing/media/1b188564-10e8-4636-afec-27b16bc2557b/2015-03-26_0730.png),  \n\nWhen I select the root element with my mouse, this is what I see in the Properties Pane:\n![](http://content.screencast.com/users/Mike-EEE/folders/Jing/media/148cb19e-979b-4895-9908-c0a93df88f5c/2015-03-26_0654.png).\n\nAll for free, _right now_ in Visual Studio.  If you have ever worked with Blend, then you know those controls are Blend designer controls and comes with all the designer/tooling support with them (for instance, that enum is a dropdown with all of its supported values).  We can even create our own custom editors for properties if we so desired (and once the community grows, so will this desire, I'm sure :)).\n\nFinally, by using Xaml, you get to take advantage of the one unique component that nothing else in the entire world uses: **MARKUP EXTENSIONS**!  This is what makes Xaml so incredibly awesome and fun to work with.  \n\nI know some people find XML/Xaml as verbose, but I (and others) find it expressive and powerful.  I would also like to say that Xaml is NOT Xml.  It is its own animal altogether and should be considered separately in its own right, IMO.\n\nI would LOVEEEE to have this functionality with MSBuild!!!\n",
        "createdAt": "2015-03-26T09:56:21Z",
        "updatedAt": "2015-03-26T11:53:35Z",
        "author": {
          "login": "Mike-E-angelo"
        }
      },
      {
        "body": "Some additional considerations as well:\n\nXML was intended and designed to be _language-agnostic_.  I know that JSON is the new, shiny kid on on the block, but it violates this principle this just by its very name.  Also, the magic schema it is using is (in my view) suspect, as it introduces dynamic (unstructured/unknown/loose) properties that may or may not be consumed/understood/known by its consumers, possibly causing inadvertent side effects.  Finally, and this is nit-picky, but it also introduces unnecessary overhead to the file (in that it introduces data into the file that is intended to only be known by designers, that now potentially goes over the wire), which flies in the face of its \"lightweight/optimized\" value proposition.\n\nFurthermore, when using the current JSON schema mechanism, it references another artifact that lives on the system somewhere.  So now, from a tooling (and management) perspective, we have to account for 2 artifacts instead of one.  This is exactly how the .NET configuration mechanism worked and it was a burden to work with (even more so as it required you to create configuration mapping items altogether to map between the POCO and configuration elements, but I digress).\n\nUsing the class definition as the schema (as Xaml does) is _the_ way to go, as you only end up dealing with _one_ artifact and all tooling is derived from there (the class definition).  You are also ensured of proper, consistent, and congruent property casing which was also another annoying side effect of .NET xml configuration (and JSON Schemas) [e.g. \"PropertyName\" is defined in the class file while \"propertyName\" is defined in the Xml/JSON file].\n\nOnce JSON uses class definitions as schemas, then I feel it can start to be considered as a legitimate object definition \"markup\" (please kindly recall that JSON is actually **code**) language.  But then, at that point, it's being exactly like Xaml... so why not go with the option that has the more history/maturity and (most importantly) tooling support (this is what makes us _efficient_, after all!).\n\n... and then there's that whole _language-agnostic_ thing... oh, and markup extensions. :)\n\nI'm not trying to start a JSON vs Xaml fight (ok, maybe a little :innocent:), but I am trying to make sure all points of view are considered here before we all go chasing the new shiny toy.  Some of us have been around a while here and there are reasons why we do the things we do... so it's good to discuss these things and get them out and have all points considered. :)\n",
        "createdAt": "2015-03-26T10:35:00Z",
        "updatedAt": "2015-03-26T11:56:09Z",
        "author": {
          "login": "Mike-E-angelo"
        }
      },
      {
        "body": "I actually like the idea of XAML over JSON.  If I had to write MSBuild configurations in JSON, I would probably want to jump out a window.\n",
        "createdAt": "2015-03-26T15:11:01Z",
        "updatedAt": "2015-03-26T15:11:01Z",
        "author": {
          "login": "brianlagunas"
        }
      },
      {
        "body": "@Michael-DST \n\n> XML was intended and designed to be language-agnostic.\n\nFrom [json.org](): \"JSON is a text format that is completely language independent.\" (In fact they are both their own languages, hence the L in XML; but they are markup languages rather than general purpose languages.)\n\n>  Also, the magic schema [JSON] is using...\n\nNot sure what \"magic\" you are talking about. Just like XML, JSON can be schemaless, or it can be tied to a [schema](http://tools.ietf.org/html/draft-zyp-json-schema-03).\n\n> it also introduces unnecessary overhead to the file (in that it introduces data into the file that is intended to only be known by designers...\n\nNot sure what you are talking about here; what \"designers\"?\n\n> Furthermore, when using the current JSON schema mechanism, it references another artifact that lives on the system somewhere. So now, from a tooling (and management) perspective, we have to account for 2 artifacts instead of one... Using the class definition as the schema (as Xaml does) is the way to go, as you only end up dealing with one artifact and all tooling is derived from there (the class definition).\n\nIn both cases, there is a schema definition that lives separately from the markup; in XML/JSON its a schema file, in XAML its a class, but there are no fewer artifacts to deal with by using XAML. (Not to mention, doesn't using a class for the schema definition destroy the \"language agnostic\" characteristic you were advocating for?)\n\n> ...please kindly recall that JSON is actually code...\n\nNo, it's not. It may have started out that way, but [json.org](language definition for JSON) clearly specifies that only objects and scalar values are valid; arbitrary expressions are _not_ allowed.\n\n> ...why not go with the option that has the more history/maturity...\n\nXaml may have more history, but JSON is and will always be more widely supported in the software industry (and the same is true for XML). I don't know that I want a new developer to have to learn XAML AND MSBuild just to understand how our build works (see my following comment on build DSLs).\n\n>  ...and (most importantly) tooling support...\n\nTooling support - especially visual tooling, which seems to be what you are talking about - is definitely NOT the most important thing in a build tool. I value visual designers when they are appropriate, but a point-and-click designer for a build tool would just slow me down compared to a fast code editor with Intellisense.\n\nThe thing is, I am not necessarily opposed to XAML over XML for MSBuild. I used WPF heavily for several years, and really appreciated the power and expressiveness of XAML. But it _is_ verbose, and it _is_ complex, and there is a _steep_ learning curve compared to most markup languages. XAML would have to provide significant benefits _for the build system_ to be worth considering over XML, especially given that MSBuild needs to be approachable by any developer on any .NET project. In my opinion, you haven't provided any significant evidence of such benefits.\n",
        "createdAt": "2015-03-26T16:06:37Z",
        "updatedAt": "2015-03-26T16:06:37Z",
        "author": {
          "login": "eatdrinksleepcode"
        }
      },
      {
        "body": "I think it is worth considering that markup is not the language of choice for modern build systems. MSBuild was created at a time when Ant, NAnt, and Maven were some of the most popular build systems. But today, Gradle, Rake, and Grunt are becoming the tools of choice, and for good reason. Build systems based on code rather than markup use DSLs to make doing the simple things easy, while making the hard things possible, without jumping completely outside of the build system to do them. My own hard experience with both MSBuild and Maven has shown me the pain that results from pretending that the build isn't a software system of its own. We should treat it as such by using the best tools we have available for building software.\n\nMy opinion is that the best option for a new language for MSBuild would be the new C# scripting abilities being built into Roslyn.\n",
        "createdAt": "2015-03-26T16:21:39Z",
        "updatedAt": "2015-03-26T16:21:39Z",
        "author": {
          "login": "eatdrinksleepcode"
        }
      },
      {
        "body": "I would not be against MSBuild allowing C# like scripting for builds, especially along the lines of something like [Bau](https://github.com/bau-build/bau) or [Cake](https://github.com/cake-build/cake).\n",
        "createdAt": "2015-03-26T16:29:03Z",
        "updatedAt": "2015-03-26T16:29:03Z",
        "author": {
          "login": "RichiCoder1"
        }
      },
      {
        "body": "Cool.  Thank you for the discussion @eatdrinksleepcode. :)  I knew I was gonna rile someone up after I posted all that... I almost deleted it haha.\n\nTo start with, when I say language-agnostic, I mean it is agnostic from any other language from _itself_.  JSON's (original) intent is to be consumed by a JavaScript or JavaScript-aware client for serialization/conversion into a JavaScript application.  I realize it can be used in any application, but I am just looking at it from the perspective from other non-JS languages.  To me, it's about the equivalent as seeing a VBON (VB) or CSON (C#).  Sure, those would make sense in their two respective paradigms, but outside, of it... well, that's where we run into this area.  (To be sure, I am not saying those exist... but just saying that's what it is like.)\n\n> Not sure what \"magic\" you are talking about.  / Not sure what you are talking about here; what \"designers\"?\n\nMore succinctly, the consumers of the file format that provide design-support.  In this case, MSBuild (or Visual Studio).  When I say \"magic\" I am referring to the \"$schema\" attribute.  If I understand correctly, this points to another artifact altogether to that is the schema to describe the data, correct?  That means that 1) someone somewhere has to create that artifact at some point and 2) know where it is and reference it in their file.  The schema in Xaml is inferred from the class itself, so there's no other external artifact than the current file that you need to worry about.  That makes it easier to create/manage/maintain/etc.\n\n> Not to mention, doesn't using a class for the schema definition destroy the \"language agnostic\" characteristic you were advocating for?\n\nXaml is also still language agnostic in this case, as the class it is pointing to could have been compiled as C#, or VB, or even F#.   That is what is (one of the many things) awesome about it, IMO. :)\n\n> Tooling support - especially visual tooling, which seems to be what you are talking about - is definitely NOT the most important thing in a build tool.\n\nWell, I am not so sure about this.  There is so much to be done in this area, innovation-wise.  But at this point I am mostly talking about intellisense.  And the intellisense with Xaml (especially with ReSharper) is so much better than what is offered with Xml and JSON (at the moment, I'm sure it will get better).  The fact that so much has been done around its format in Visual Studio for presentation tooling (in WPF, etc) makes it all the better (again, I think there is so much innovation left to be done in this area to get to what I am talking about).\n\n> I don't know that I want a new developer to have to learn XAML AND MSBuild just to understand how our build works (see my following comment on build DSLs).\n\nI would like to make sure here that \"learning Xaml\" isn't being distorted by your perception of how complex _WPF_ is.  They are totally separate. Xaml is just XML, and I think as far as its object definition qualities go, developers can jump right in, as they can leverage the ubiquitousness (that's a word haha) of XML.\n\nWith all of this said, I am 100% with you about Roslyn and its new tooling.  What I personally would like to see done is a new \"Data AST (Abstract Syntax Tree) Format\" that is a new file format (call it .dast for the sake of this discussion).  When this file is opened in Visual Studio, it displays it to the developer in the format that the developer prefers it (JSON, XML, Xaml, Yaml, etc etc).  \n\nThat way, the data gets saved (in a particular format, which may or may not be proprietary), and then whenever it is opened, it is _presented_ in a preferred format, and is designed so accordingly.\n\nNot sure how viable that is short-term and what that means for MSBuild, however. :)  The thing you are fighting with me here on is that I (and you, it sounds) _know_ what the Xaml development/designer experience is like, and it's quite nice (especially with ReSharper).  JSON development/designer support is going to be a while before it gets up to Xaml-status (plus it suffers from multiple-artifact syndrome which I still think needs to be resolved elegantly).  I also feel that Xaml is a natural successor to the existing XML file format, especially since we are talking about a C#/VB/.NET where all of these projects have been built by MSBuild for over a decade (and again is benefiting from the same environment that currently already offers so much tooling support).\n\nAdmittedly, I am not aware of the other technologies you (or @RichiCoder1) reference, so I guess I have some research to do.  I just cringe whenever I see code that can be defined declaratively, and that's really what we're after here.\n\nI hope this clarifies my position.  Thank you again for your input.\n",
        "createdAt": "2015-03-26T17:14:19Z",
        "updatedAt": "2015-03-26T17:26:18Z",
        "author": {
          "login": "Mike-E-angelo"
        }
      },
      {
        "body": "Just thinking about this some more and to echo what @RichiCoder1 said... if you cleanly expose the API as C# (or even .NET) objects, then we Xamlites (I just made that up) can build Xaml around _that_.  It doesn't really need to be anything special, especially with what Xamarin is cooking up these days.  There's no reason not to support _both_ JSON and Xaml, I guess is what I am trying to say.  Heck, if you make JSON the official supported file type (not saying that you should :sweat_smile:, but if you do), I could see myself making a fork that enables the corresponding Xaml equivalent functionality, for starters.\n\n(FWIW, this is what I intend on doing with ASP.NET 5's  new configuration API, which is designed to support different configuration providers/formats.)\n\nAs long as the MSBuild team is aware of the want/need for multiple declarative file format support and provide the necessary design/hooks to easily consume their API in whatever format we prefer, that's what's really important here. :+1: \n",
        "createdAt": "2015-03-26T18:09:09Z",
        "updatedAt": "2015-03-26T18:09:09Z",
        "author": {
          "login": "Mike-E-angelo"
        }
      },
      {
        "body": "I like the XAML idea. I do think that the _class_ in this case _is_ an artifact. However, it is an artifact that also represents the internal .NET object. The System.Xaml.XamlReader class has a mature implementation that reads that in for us, with strong type checking. Because of this, the MsBuild system could pre-compile the build definition into _BAML_ (the binary representation of XAML). This could make the build system much faster, since BAML translates to an in-memory object more efficiently than runtime string parsing and schema checking.\n",
        "createdAt": "2015-03-27T02:12:55Z",
        "updatedAt": "2015-03-27T02:12:55Z",
        "author": {
          "login": "JohnTasler"
        }
      },
      {
        "body": "@eatdrinksleepcode is on the right track.+1 to C# scripting\n",
        "createdAt": "2015-03-27T02:38:52Z",
        "updatedAt": "2015-03-27T02:38:52Z",
        "author": {
          "login": "sam-source"
        }
      },
      {
        "body": "@Michael-DST An pluggable, language/format-agnostic API/interface for MSBuild would probably tops really, as this thread shows theres many different formats that people'd like to define builds in. That being said, that'd be no small task, and still probably require one or more built in build configuration parsers.\n",
        "createdAt": "2015-03-27T03:06:08Z",
        "updatedAt": "2015-03-27T03:06:08Z",
        "author": {
          "login": "RichiCoder1"
        }
      },
      {
        "body": "Yes, and now thinking about it, there really isn't a need for a proprietary file format (.dast) after all (although you could still create one from a branding/optimized/value perspective).  It really comes down to the data (saved/stored format) and the view (presentation format).  Roslyn offers pretty exciting improvements in this regard and can handle everything in between.  Once Visual Studio loads the file, it can run its own conversion process (via Roslyn) between the two formats.  \n\nIt will be an awesome day in technology when one can open up a .json file, have it render as .xaml via Roslyn conversion, edit/design as .xaml, and then when saved, it saves it as back as .json.  And vice versa. :) \n\n(Although, JSON does not support markup extensions -- ahem :innocent: -- so some additional thought would be required around that and other capability discrepancies.)\n\nAs an aside, I would be remiss if I didn't mention my vote on [Visual Studio for .ast code views](http://visualstudio.uservoice.com/forums/121579-visual-studio/suggestions/7066885-enable-abstract-syntax-tree-source-files-via-rosly).  I am beginning to feel that the .dast we are talking about here is an extension component of this concept.  You are right in saying that this is no small task, and I hope to inspire some light bulbs out there by mentioning it to get the ball rolling.  I feel this thread really underscores that we are \"[pawing at an elephant in a dark room](http://en.wikipedia.org/wiki/Blind_men_and_an_elephant)\" here that and this \"elephant\" is bound to be a legitimate GitHub project at some point -- either officially by MSFT or by someone with extra time on their hands (which is obviously not me at the moment :smile:).  If someone started it, I for one would totally support it.  This is a well-overdue feature for software development!\n",
        "createdAt": "2015-03-27T11:03:10Z",
        "updatedAt": "2015-03-27T11:03:10Z",
        "author": {
          "login": "Mike-E-angelo"
        }
      },
      {
        "body": "If it's simply a serialization format such as JSON or YAML, please make the serializer itself that's being used swappable through configuration, etc. Think about that for a second :) Configurable configuration ha.\n\nI also like the idea of being able to use C# directly, however I could see that making things a bit more difficult as the abstraction would have to be higher up than just the serializer.\n",
        "createdAt": "2015-03-27T20:01:14Z",
        "updatedAt": "2015-03-27T20:02:14Z",
        "author": {
          "login": "mikehaas763"
        }
      },
      {
        "body": "@arthur-peka, another markup langauge would undoubtedly be easier, as the current model is built with a markup language in mind. But just because it is easier does not mean it is the right direction for the future :)\n\nImplementing scripting language support may ultimately deserve its own proposal, but given that even implementing another markup language is considered \"distant future\", I don't think it is worth tracking scripting language support separately right now. I mostly just want people who are interested in and thinking about implementing something other than XML for MSBuild to have scripting in mind.\n",
        "createdAt": "2015-04-15T19:07:21Z",
        "updatedAt": "2015-04-15T19:07:21Z",
        "author": {
          "login": "eatdrinksleepcode"
        }
      },
      {
        "body": "@leppie, you can write JSON schema today, see https://github.com/json-schema/json-schema. @madskristensen has written handful of JSON schemas for various implementations: .jshintrc, .jscsrc, tslit.json, package.json (node.js) etc. which works with both VS2013 and VS2015. Also check this out https://github.com/madskristensen/JSON-Intellisense/blob/master/README.md,\n",
        "createdAt": "2015-05-16T22:32:14Z",
        "updatedAt": "2015-05-16T22:32:35Z",
        "author": {
          "login": "ghost"
        }
      },
      {
        "body": "No JSON, please.\n\nJSON is a data-interchange format. It was never \"designed\" to be used as a source format.\n\nJSON is hard to merge. JSON has odd syntactical requirements that insert noise in places that handily confuse merge tools. Remember, project files are basically part of the project's source, and so need to be as friendly to _all_ tools as possible, including merge tools.\n\nex: The need in JSON to put a trailing comma after every item in an array/object _except_ the last one means that merging two edits that both add items to the end of a list is _always_ a conflict, unnecessarily. Let's not then get started on the problems of users adding single-line arrays/objects and conflicts there-in (the same thing can happen with XML, but such single-line structures aren't nearly as idiomatic/common in XML as they are in JSON).\n\nThis is why projects like [HJSON](http://hjson.org/) exist. If you're arguing for a cleaner and more human-friendly file format, the mere existence of projects like HJSON should rather clearly indicate that JSON itself is a bad choice (in many ways, it's a step backwards from XML). HJSON also avoids the indentation madness of YAML, btw. And HJSON is just a dialect of JSON, so it's conceptually compatible with all the schema tools that people have tried to bolt on to JSON a posteriori ... I'm saying you should look into HJSON. :)\n\nAlso, XML is a perfectly fine language if used well. Unfortunately, msbuild's current schema is poorly designed and endemic to Microsoft's culture from the late 90's and early 00's. A rewrite and massive cleanup and redesign of the schema would do wonders without actually needing to support a new data format. Also, that macro language in msbuild... switching to a new data format won't fix that. Point being, if your complaint is that msbuild's specification is complicated and ugly, blame of XML is massively misplaced.\n",
        "createdAt": "2015-05-31T21:10:52Z",
        "updatedAt": "2015-05-31T21:10:52Z",
        "author": {
          "login": "seanmiddleditch"
        }
      },
      {
        "body": "Wow @seanmiddleditch that HJSON is indeed very telling, exactly as you put it.  Great find.  Does this mean we can make  HXaml and all will be right in the world? :)\n",
        "createdAt": "2015-05-31T21:50:02Z",
        "updatedAt": "2015-05-31T21:50:02Z",
        "author": {
          "login": "Mike-E-angelo"
        }
      },
      {
        "body": "@Michael-DST : sure. I don't know of any standard (I'm 93% sure there is one if you look hard enough), but there's almost more home-grown \"HXML\"-like formats than you can shake a stick at. Jade is the best standard I can think of here, though it's HTML-focused and relies on whitespace/indentation for structure.\n\nA human-readable dialect is still very much second fiddle to the actual schema itself, though. The most pleasant and concise syntax in the world is worthless if the structure itself is poor.\n\nConsider Google's [gyp](https://chromium.googlesource.com/external/gyp/+/master/docs/UserDocumentation.md), which is a JSON-based meta-project system (akin to [CMake](http://cmake.org)). I still think that Gyp has the hardest to read project files of all the tools of its ilk. Consider just the tail end of the sample `.gyp` file from that link:\n\n```\n         ],\n        }]\n      ],\n    },\n  ],\n}\n```\n\n---\n\nAnd before someone else mentions it: yes, there _are_ JSON-aware merge algorithms, but source data formats like Microsoft's project files need to be compatible with all the merge tools in common use, most of which can barely manage simple text adequately much less formats that require special merge algorithms.\n",
        "createdAt": "2015-06-01T00:00:20Z",
        "updatedAt": "2015-06-01T00:00:20Z",
        "author": {
          "login": "wgssmiddleditch"
        }
      },
      {
        "body": "For anyone who is interested, I have created a UserVoice vote on Visual Studio that mentions this great discussion and defines the problems with the current build system that need to be addressed:\nhttp://visualstudio.uservoice.com/forums/121579-visual-studio/suggestions/9347001-improve-reboot-visual-studio-project-system\n\nAdditionally, I have proposed a new idea/vote on UserVoice for an idea that would also address this problem from a developer perspective:\nhttp://visualstudio.uservoice.com/forums/121579-visual-studio/suggestions/10020525-enable-roslyn-powered-data-asts-and-data-views\n\nIn this vote, there is a blog post that explains the idea in more detail.  Thank you for any feedback and/or support. :)\n",
        "createdAt": "2015-10-03T14:26:07Z",
        "updatedAt": "2015-10-03T14:26:07Z",
        "author": {
          "login": "Mike-E-angelo"
        }
      },
      {
        "body": "This is a little late here, but I just got done making a simple app that demonstrates what I discussed above with Xaml-based application development.  Please see this file:\nhttps://github.com/DragonSpark/VoteReporter/blob/master/DevelopersWin.VoteReporter.Application/Program.xaml\n\nAnd (probably more importantly?) this file: https://github.com/DragonSpark/VoteReporter/blob/master/DevelopersWin.VoteReporter.Application/Program.xaml.cs\n\nHere is a good example of a Xaml-driven application (or at least my definition of it) -- or more succinctly a Xaml-driven Console Application (you can see in the code-behind above how the Main method is defined).  In this case, all of the \"steps\" of the application startup are encapsulated in System.Windows.Input.ICommand's and they are called in succession to execute very discrete and encapsulated commands. These commands are then defined in the Program.xaml file as Xaml elements that can be used to define all of the inputs and (what others might consider) configuration for the application.  \n\nThe power again is the markup extensions.  There are some really cool ones here that are being used, such as creating a DirectoryInfo object that is used by subsequent components via IoC: https://github.com/DragonSpark/VoteReporter/blob/master/DevelopersWin.VoteReporter.Application/Program.xaml#L22\n\nAdditionally, this line tells the application to pull all registered IInstaller's found within the current AppDomain and add them to the collection found within the InitializeDatabaseCommand:\nhttps://github.com/DragonSpark/VoteReporter/blob/master/DevelopersWin.VoteReporter.Application/Program.xaml#L44\n\nVery powerful stuff (I say, as I wrote it, LOL).  In any case, this is how I see/envision MSBuild vNext being implemented, and the new build projects looking very much like this.  It doesn't take much of a jump to see that ICommands could be build Tasks (or probably both? that is, Tasks implement ICommand?) and they can (should) be defined in very much the same way.  Anyways, I just had to share.  Thanks again for any consideration/discussion.\n",
        "createdAt": "2015-11-08T07:00:02Z",
        "updatedAt": "2015-11-08T07:00:02Z",
        "author": {
          "login": "Mike-E-angelo"
        }
      },
      {
        "body": "Hi,\nBeing a user of msbuild myself, I think it is good that you are deciding to possibly use json/yaml.\nI went online and converted a msbuild c++ project which looked like this:\n\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<Project DefaultTargets=\"Build\" ToolsVersion=\"14.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n  <ItemGroup Label=\"ProjectConfigurations\">\n    <ProjectConfiguration Include=\"Debug|x64\">\n      <Configuration>Debug</Configuration>\n      <Platform>x64</Platform>\n    </ProjectConfiguration>\n    <ProjectConfiguration Include=\"Release|x64\">\n      <Configuration>Release</Configuration>\n      <Platform>x64</Platform>\n    </ProjectConfiguration>\n  </ItemGroup>\n  <PropertyGroup Label=\"Globals\">\n    <ProjectGuid>{74CF4537-8047-617D-4D23-0353B4FC702F}</ProjectGuid>\n    <Keyword>Win32Proj</Keyword>\n    <RootNamespace>pem</RootNamespace>\n    <IgnoreWarnCompileDuplicatedFilename>true</IgnoreWarnCompileDuplicatedFilename>\n    <PreferredToolArchitecture>x64</PreferredToolArchitecture>\n  </PropertyGroup>\n  <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.Default.props\"/>\n  <PropertyGroup Label=\"Configuration\">\n    <ConfigurationType>DynamicLibrary</ConfigurationType>\n  </PropertyGroup>\n  <PropertyGroup Label=\"Locals\">\n    <PlatformToolset>v140</PlatformToolset>\n  </PropertyGroup>\n  <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.props\"/>\n  <Import Project=\"$(VCTargetsPath)\\BuildCustomizations\\masm.props\"/>\n  <ImportGroup Label=\"ExtensionSettings\"/>\n  <ImportGroup Label=\"PropertySheets\">\n    <Import Condition=\"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')\" Label=\"LocalAppDataPlatform\" Project=\"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props\"/>\n  </ImportGroup>\n  <PropertyGroup Label=\"UserMacros\"/>\n  <PropertyGroup>\n    <ExecutablePath>$(ExecutablePath);$(MSBuildProjectDirectory)\\..\\bin\\;$(MSBuildProjectDirectory)\\..\\bin\\</ExecutablePath>\n    <IgnoreImportLibrary>true</IgnoreImportLibrary>\n    <IntDir>$(Configuration)\\obj\\$(ProjectName)\\</IntDir>\n    <LinkIncremental Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">false</LinkIncremental>\n    <LinkIncremental Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\">true</LinkIncremental>\n    <OutDir>$(SolutionDir)$(Configuration)\\</OutDir>\n    <TargetExt Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\">.node</TargetExt>\n    <TargetExt Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\">.node</TargetExt>\n    <TargetExt Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">.node</TargetExt>\n    <TargetExt Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">.node</TargetExt>\n    <TargetName>$(ProjectName)</TargetName>\n    <TargetPath>$(OutDir)\\$(ProjectName).node</TargetPath>\n  </PropertyGroup>\n  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\">\n    <ClCompile>\n      <AdditionalIncludeDirectories>C:\\Users\\Kishan Sambhi\\.node-gyp\\4.2.2\\include\\node;C:\\Users\\Kishan Sambhi\\.node-gyp\\4.2.2\\src;C:\\Users\\Kishan Sambhi\\.node-gyp\\4.2.2\\deps\\uv\\include;C:\\Users\\Kishan Sambhi\\.node-gyp\\4.2.2\\deps\\v8\\include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>\n      <BasicRuntimeChecks>EnableFastChecks</BasicRuntimeChecks>\n      <BufferSecurityCheck>true</BufferSecurityCheck>\n      <CompileAsWinRT>false</CompileAsWinRT>\n      <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>\n      <DisableSpecificWarnings>4351;4355;4800;4251;%(DisableSpecificWarnings)</DisableSpecificWarnings>\n      <ExceptionHandling>false</ExceptionHandling>\n      <MinimalRebuild>false</MinimalRebuild>\n      <OmitFramePointers>false</OmitFramePointers>\n      <Optimization>Disabled</Optimization>\n      <PrecompiledHeader>NotUsing</PrecompiledHeader>\n      <PreprocessorDefinitions>NODE_GYP_MODULE_NAME=pem;WIN32;_CRT_SECURE_NO_DEPRECATE;_CRT_NONSTDC_NO_DEPRECATE;_HAS_EXCEPTIONS=0;BUILDING_V8_SHARED=1;BUILDING_UV_SHARED=1;BUILDING_NODE_EXTENSION;DEBUG;_DEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n      <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n      <StringPooling>true</StringPooling>\n      <SuppressStartupBanner>true</SuppressStartupBanner>\n      <TreatWarningAsError>false</TreatWarningAsError>\n      <WarningLevel>Level3</WarningLevel>\n    </ClCompile>\n    <Link>\n      <AdditionalDependencies>kernel32.lib;user32.lib;gdi32.lib;winspool.lib;comdlg32.lib;advapi32.lib;shell32.lib;ole32.lib;oleaut32.lib;uuid.lib;odbc32.lib;DelayImp.lib;&quot;C:\\Users\\Kishan Sambhi\\.node-gyp\\4.2.2\\$(Configuration)\\node.lib&quot;</AdditionalDependencies>\n      <AdditionalOptions>/ignore:4199 %(AdditionalOptions)</AdditionalOptions>\n      <AllowIsolation>true</AllowIsolation>\n      <DataExecutionPrevention>true</DataExecutionPrevention>\n      <DelayLoadDLLs>iojs.exe;node.exe;%(DelayLoadDLLs)</DelayLoadDLLs>\n      <GenerateDebugInformation>true</GenerateDebugInformation>\n      <GenerateMapFile>true</GenerateMapFile>\n      <MapExports>true</MapExports>\n      <OutputFile>$(OutDir)$(ProjectName).node</OutputFile>\n      <RandomizedBaseAddress>true</RandomizedBaseAddress>\n      <SuppressStartupBanner>true</SuppressStartupBanner>\n      <TargetExt>.node</TargetExt>\n      <TargetMachine>MachineX64</TargetMachine>\n    </Link>\n    <ResourceCompile>\n      <AdditionalIncludeDirectories>C:\\Users\\Kishan Sambhi\\.node-gyp\\4.2.2\\include\\node;C:\\Users\\Kishan Sambhi\\.node-gyp\\4.2.2\\src;C:\\Users\\Kishan Sambhi\\.node-gyp\\4.2.2\\deps\\uv\\include;C:\\Users\\Kishan Sambhi\\.node-gyp\\4.2.2\\deps\\v8\\include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>\n      <PreprocessorDefinitions>NODE_GYP_MODULE_NAME=pem;WIN32;_CRT_SECURE_NO_DEPRECATE;_CRT_NONSTDC_NO_DEPRECATE;_HAS_EXCEPTIONS=0;BUILDING_V8_SHARED=1;BUILDING_UV_SHARED=1;BUILDING_NODE_EXTENSION;DEBUG;_DEBUG;%(PreprocessorDefinitions);%(PreprocessorDefinitions)</PreprocessorDefinitions>\n    </ResourceCompile>\n  </ItemDefinitionGroup>\n  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">\n    <ClCompile>\n      <AdditionalIncludeDirectories>C:\\Users\\Kishan Sambhi\\.node-gyp\\4.2.2\\include\\node;C:\\Users\\Kishan Sambhi\\.node-gyp\\4.2.2\\src;C:\\Users\\Kishan Sambhi\\.node-gyp\\4.2.2\\deps\\uv\\include;C:\\Users\\Kishan Sambhi\\.node-gyp\\4.2.2\\deps\\v8\\include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>\n      <AdditionalOptions>/MP %(AdditionalOptions)</AdditionalOptions>\n      <BufferSecurityCheck>true</BufferSecurityCheck>\n      <CompileAsWinRT>false</CompileAsWinRT>\n      <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>\n      <DisableSpecificWarnings>4351;4355;4800;4251;%(DisableSpecificWarnings)</DisableSpecificWarnings>\n      <ExceptionHandling>false</ExceptionHandling>\n      <FavorSizeOrSpeed>Speed</FavorSizeOrSpeed>\n      <FunctionLevelLinking>true</FunctionLevelLinking>\n      <InlineFunctionExpansion>AnySuitable</InlineFunctionExpansion>\n      <IntrinsicFunctions>true</IntrinsicFunctions>\n      <OmitFramePointers>true</OmitFramePointers>\n      <Optimization>Full</Optimization>\n      <PrecompiledHeader>NotUsing</PrecompiledHeader>\n      <PreprocessorDefinitions>NODE_GYP_MODULE_NAME=pem;WIN32;_CRT_SECURE_NO_DEPRECATE;_CRT_NONSTDC_NO_DEPRECATE;_HAS_EXCEPTIONS=0;BUILDING_V8_SHARED=1;BUILDING_UV_SHARED=1;BUILDING_NODE_EXTENSION;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n      <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n      <RuntimeTypeInfo>false</RuntimeTypeInfo>\n      <StringPooling>true</StringPooling>\n      <SuppressStartupBanner>true</SuppressStartupBanner>\n      <TreatWarningAsError>false</TreatWarningAsError>\n      <WarningLevel>Level3</WarningLevel>\n      <WholeProgramOptimization>true</WholeProgramOptimization>\n    </ClCompile>\n    <Lib>\n      <AdditionalOptions>/LTCG %(AdditionalOptions)</AdditionalOptions>\n    </Lib>\n    <Link>\n      <AdditionalDependencies>kernel32.lib;user32.lib;gdi32.lib;winspool.lib;comdlg32.lib;advapi32.lib;shell32.lib;ole32.lib;oleaut32.lib;uuid.lib;odbc32.lib;DelayImp.lib;&quot;C:\\Users\\Kishan Sambhi\\.node-gyp\\4.2.2\\$(Configuration)\\node.lib&quot;</AdditionalDependencies>\n      <AdditionalOptions>/ignore:4199 %(AdditionalOptions)</AdditionalOptions>\n      <AllowIsolation>true</AllowIsolation>\n      <DataExecutionPrevention>true</DataExecutionPrevention>\n      <DelayLoadDLLs>iojs.exe;node.exe;%(DelayLoadDLLs)</DelayLoadDLLs>\n      <EnableCOMDATFolding>true</EnableCOMDATFolding>\n      <GenerateDebugInformation>true</GenerateDebugInformation>\n      <GenerateMapFile>true</GenerateMapFile>\n      <LinkTimeCodeGeneration>UseLinkTimeCodeGeneration</LinkTimeCodeGeneration>\n      <MapExports>true</MapExports>\n      <OptimizeReferences>true</OptimizeReferences>\n      <OutputFile>$(OutDir)$(ProjectName).node</OutputFile>\n      <RandomizedBaseAddress>true</RandomizedBaseAddress>\n      <SuppressStartupBanner>true</SuppressStartupBanner>\n      <TargetExt>.node</TargetExt>\n      <TargetMachine>MachineX64</TargetMachine>\n    </Link>\n    <ResourceCompile>\n      <AdditionalIncludeDirectories>C:\\Users\\Kishan Sambhi\\.node-gyp\\4.2.2\\include\\node;C:\\Users\\Kishan Sambhi\\.node-gyp\\4.2.2\\src;C:\\Users\\Kishan Sambhi\\.node-gyp\\4.2.2\\deps\\uv\\include;C:\\Users\\Kishan Sambhi\\.node-gyp\\4.2.2\\deps\\v8\\include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>\n      <PreprocessorDefinitions>NODE_GYP_MODULE_NAME=pem;WIN32;_CRT_SECURE_NO_DEPRECATE;_CRT_NONSTDC_NO_DEPRECATE;_HAS_EXCEPTIONS=0;BUILDING_V8_SHARED=1;BUILDING_UV_SHARED=1;BUILDING_NODE_EXTENSION;%(PreprocessorDefinitions);%(PreprocessorDefinitions)</PreprocessorDefinitions>\n    </ResourceCompile>\n  </ItemDefinitionGroup>\n  <ItemGroup>\n    <None Include=\"..\\binding.gyp\"/>\n  </ItemGroup>\n  <ItemGroup>\n    <ClCompile Include=\"..\\src\\pem.cc\"/>\n    <ClCompile Include=\"C:\\Users\\Kishan Sambhi\\AppData\\Roaming\\npm\\node_modules\\node-gyp\\src\\win_delay_load_hook.c\"/>\n  </ItemGroup>\n  <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.targets\"/>\n  <Import Project=\"$(VCTargetsPath)\\BuildCustomizations\\masm.targets\"/>\n  <ImportGroup Label=\"ExtensionTargets\"/>\n</Project>\n```\n\nto json and yaml\nJSON:\n\n```\n{\n  \"Project\": {\n    \"-xmlns\": \"http://schemas.microsoft.com/developer/msbuild/2003\",\n    \"-DefaultTargets\": \"Build\",\n    \"-ToolsVersion\": \"14.0\",\n    \"ItemGroup\": [\n      {\n        \"-Label\": \"ProjectConfigurations\",\n        \"ProjectConfiguration\": [\n          {\n            \"-Include\": \"Debug|x64\",\n            \"Configuration\": \"Debug\",\n            \"Platform\": \"x64\"\n          },\n          {\n            \"-Include\": \"Release|x64\",\n            \"Configuration\": \"Release\",\n            \"Platform\": \"x64\"\n          }\n        ]\n      },\n      {\n        \"None\": { \"-Include\": \"..\\\\binding.gyp\" }\n      },\n      {\n        \"ClCompile\": [\n          { \"-Include\": \"..\\\\src\\\\pem.cc\" },\n          { \"-Include\": \"C:\\\\Users\\\\Kishan Sambhi\\\\AppData\\\\Roaming\\\\npm\\\\node_modules\\\\node-gyp\\\\src\\\\win_delay_load_hook.c\" }\n        ]\n      }\n    ],\n    \"PropertyGroup\": [\n      {\n        \"-Label\": \"Globals\",\n        \"ProjectGuid\": \"{74CF4537-8047-617D-4D23-0353B4FC702F}\",\n        \"Keyword\": \"Win32Proj\",\n        \"RootNamespace\": \"pem\",\n        \"IgnoreWarnCompileDuplicatedFilename\": \"true\",\n        \"PreferredToolArchitecture\": \"x64\"\n      },\n      {\n        \"-Label\": \"Configuration\",\n        \"ConfigurationType\": \"DynamicLibrary\"\n      },\n      {\n        \"-Label\": \"Locals\",\n        \"PlatformToolset\": \"v140\"\n      },\n      { \"-Label\": \"UserMacros\" },\n      {\n        \"ExecutablePath\": \"$(ExecutablePath);$(MSBuildProjectDirectory)\\\\..\\\\bin\\\\;$(MSBuildProjectDirectory)\\\\..\\\\bin\\\\\",\n        \"IgnoreImportLibrary\": \"true\",\n        \"IntDir\": \"$(Configuration)\\\\obj\\\\$(ProjectName)\\\\\",\n        \"LinkIncremental\": [\n          {\n            \"-Condition\": \"'$(Configuration)|$(Platform)'=='Release|x64'\",\n            \"#text\": \"false\"\n          },\n          {\n            \"-Condition\": \"'$(Configuration)|$(Platform)'=='Debug|x64'\",\n            \"#text\": \"true\"\n          }\n        ],\n        \"OutDir\": \"$(SolutionDir)$(Configuration)\\\\\",\n        \"TargetExt\": [\n          {\n            \"-Condition\": \"'$(Configuration)|$(Platform)'=='Debug|x64'\",\n            \"#text\": \".node\"\n          },\n          {\n            \"-Condition\": \"'$(Configuration)|$(Platform)'=='Debug|x64'\",\n            \"#text\": \".node\"\n          },\n          {\n            \"-Condition\": \"'$(Configuration)|$(Platform)'=='Release|x64'\",\n            \"#text\": \".node\"\n          },\n          {\n            \"-Condition\": \"'$(Configuration)|$(Platform)'=='Release|x64'\",\n            \"#text\": \".node\"\n          }\n        ],\n        \"TargetName\": \"$(ProjectName)\",\n        \"TargetPath\": \"$(OutDir)\\\\$(ProjectName).node\"\n      }\n    ],\n    \"Import\": [\n      { \"-Project\": \"$(VCTargetsPath)\\\\Microsoft.Cpp.Default.props\" },\n      { \"-Project\": \"$(VCTargetsPath)\\\\Microsoft.Cpp.props\" },\n      { \"-Project\": \"$(VCTargetsPath)\\\\BuildCustomizations\\\\masm.props\" },\n      { \"-Project\": \"$(VCTargetsPath)\\\\Microsoft.Cpp.targets\" },\n      { \"-Project\": \"$(VCTargetsPath)\\\\BuildCustomizations\\\\masm.targets\" }\n    ],\n    \"ImportGroup\": [\n      { \"-Label\": \"ExtensionSettings\" },\n      {\n        \"-Label\": \"PropertySheets\",\n        \"Import\": {\n          \"-Condition\": \"exists('$(UserRootDir)\\\\Microsoft.Cpp.$(Platform).user.props')\",\n          \"-Label\": \"LocalAppDataPlatform\",\n          \"-Project\": \"$(UserRootDir)\\\\Microsoft.Cpp.$(Platform).user.props\"\n        }\n      },\n      { \"-Label\": \"ExtensionTargets\" }\n    ],\n    \"ItemDefinitionGroup\": [\n      {\n        \"-Condition\": \"'$(Configuration)|$(Platform)'=='Debug|x64'\",\n        \"ClCompile\": {\n          \"AdditionalIncludeDirectories\": \"C:\\\\Users\\\\Kishan Sambhi\\\\.node-gyp\\\\4.2.2\\\\include\\\\node;C:\\\\Users\\\\Kishan Sambhi\\\\.node-gyp\\\\4.2.2\\\\src;C:\\\\Users\\\\Kishan Sambhi\\\\.node-gyp\\\\4.2.2\\\\deps\\\\uv\\\\include;C:\\\\Users\\\\Kishan Sambhi\\\\.node-gyp\\\\4.2.2\\\\deps\\\\v8\\\\include;%(AdditionalIncludeDirectories)\",\n          \"BasicRuntimeChecks\": \"EnableFastChecks\",\n          \"BufferSecurityCheck\": \"true\",\n          \"CompileAsWinRT\": \"false\",\n          \"DebugInformationFormat\": \"ProgramDatabase\",\n          \"DisableSpecificWarnings\": \"4351;4355;4800;4251;%(DisableSpecificWarnings)\",\n          \"ExceptionHandling\": \"false\",\n          \"MinimalRebuild\": \"false\",\n          \"OmitFramePointers\": \"false\",\n          \"Optimization\": \"Disabled\",\n          \"PrecompiledHeader\": \"NotUsing\",\n          \"PreprocessorDefinitions\": \"NODE_GYP_MODULE_NAME=pem;WIN32;_CRT_SECURE_NO_DEPRECATE;_CRT_NONSTDC_NO_DEPRECATE;_HAS_EXCEPTIONS=0;BUILDING_V8_SHARED=1;BUILDING_UV_SHARED=1;BUILDING_NODE_EXTENSION;DEBUG;_DEBUG;%(PreprocessorDefinitions)\",\n          \"RuntimeLibrary\": \"MultiThreadedDebug\",\n          \"StringPooling\": \"true\",\n          \"SuppressStartupBanner\": \"true\",\n          \"TreatWarningAsError\": \"false\",\n          \"WarningLevel\": \"Level3\"\n        },\n        \"Link\": {\n          \"AdditionalDependencies\": \"kernel32.lib;user32.lib;gdi32.lib;winspool.lib;comdlg32.lib;advapi32.lib;shell32.lib;ole32.lib;oleaut32.lib;uuid.lib;odbc32.lib;DelayImp.lib;\\\"C:\\\\Users\\\\Kishan Sambhi\\\\.node-gyp\\\\4.2.2\\\\$(Configuration)\\\\node.lib\\\"\",\n          \"AdditionalOptions\": \"/ignore:4199 %(AdditionalOptions)\",\n          \"AllowIsolation\": \"true\",\n          \"DataExecutionPrevention\": \"true\",\n          \"DelayLoadDLLs\": \"iojs.exe;node.exe;%(DelayLoadDLLs)\",\n          \"GenerateDebugInformation\": \"true\",\n          \"GenerateMapFile\": \"true\",\n          \"MapExports\": \"true\",\n          \"OutputFile\": \"$(OutDir)$(ProjectName).node\",\n          \"RandomizedBaseAddress\": \"true\",\n          \"SuppressStartupBanner\": \"true\",\n          \"TargetExt\": \".node\",\n          \"TargetMachine\": \"MachineX64\"\n        },\n        \"ResourceCompile\": {\n          \"AdditionalIncludeDirectories\": \"C:\\\\Users\\\\Kishan Sambhi\\\\.node-gyp\\\\4.2.2\\\\include\\\\node;C:\\\\Users\\\\Kishan Sambhi\\\\.node-gyp\\\\4.2.2\\\\src;C:\\\\Users\\\\Kishan Sambhi\\\\.node-gyp\\\\4.2.2\\\\deps\\\\uv\\\\include;C:\\\\Users\\\\Kishan Sambhi\\\\.node-gyp\\\\4.2.2\\\\deps\\\\v8\\\\include;%(AdditionalIncludeDirectories)\",\n          \"PreprocessorDefinitions\": \"NODE_GYP_MODULE_NAME=pem;WIN32;_CRT_SECURE_NO_DEPRECATE;_CRT_NONSTDC_NO_DEPRECATE;_HAS_EXCEPTIONS=0;BUILDING_V8_SHARED=1;BUILDING_UV_SHARED=1;BUILDING_NODE_EXTENSION;DEBUG;_DEBUG;%(PreprocessorDefinitions);%(PreprocessorDefinitions)\"\n        }\n      },\n      {\n        \"-Condition\": \"'$(Configuration)|$(Platform)'=='Release|x64'\",\n        \"ClCompile\": {\n          \"AdditionalIncludeDirectories\": \"C:\\\\Users\\\\Kishan Sambhi\\\\.node-gyp\\\\4.2.2\\\\include\\\\node;C:\\\\Users\\\\Kishan Sambhi\\\\.node-gyp\\\\4.2.2\\\\src;C:\\\\Users\\\\Kishan Sambhi\\\\.node-gyp\\\\4.2.2\\\\deps\\\\uv\\\\include;C:\\\\Users\\\\Kishan Sambhi\\\\.node-gyp\\\\4.2.2\\\\deps\\\\v8\\\\include;%(AdditionalIncludeDirectories)\",\n          \"AdditionalOptions\": \"/MP %(AdditionalOptions)\",\n          \"BufferSecurityCheck\": \"true\",\n          \"CompileAsWinRT\": \"false\",\n          \"DebugInformationFormat\": \"ProgramDatabase\",\n          \"DisableSpecificWarnings\": \"4351;4355;4800;4251;%(DisableSpecificWarnings)\",\n          \"ExceptionHandling\": \"false\",\n          \"FavorSizeOrSpeed\": \"Speed\",\n          \"FunctionLevelLinking\": \"true\",\n          \"InlineFunctionExpansion\": \"AnySuitable\",\n          \"IntrinsicFunctions\": \"true\",\n          \"OmitFramePointers\": \"true\",\n          \"Optimization\": \"Full\",\n          \"PrecompiledHeader\": \"NotUsing\",\n          \"PreprocessorDefinitions\": \"NODE_GYP_MODULE_NAME=pem;WIN32;_CRT_SECURE_NO_DEPRECATE;_CRT_NONSTDC_NO_DEPRECATE;_HAS_EXCEPTIONS=0;BUILDING_V8_SHARED=1;BUILDING_UV_SHARED=1;BUILDING_NODE_EXTENSION;%(PreprocessorDefinitions)\",\n          \"RuntimeLibrary\": \"MultiThreaded\",\n          \"RuntimeTypeInfo\": \"false\",\n          \"StringPooling\": \"true\",\n          \"SuppressStartupBanner\": \"true\",\n          \"TreatWarningAsError\": \"false\",\n          \"WarningLevel\": \"Level3\",\n          \"WholeProgramOptimization\": \"true\"\n        },\n        \"Lib\": { \"AdditionalOptions\": \"/LTCG %(AdditionalOptions)\" },\n        \"Link\": {\n          \"AdditionalDependencies\": \"kernel32.lib;user32.lib;gdi32.lib;winspool.lib;comdlg32.lib;advapi32.lib;shell32.lib;ole32.lib;oleaut32.lib;uuid.lib;odbc32.lib;DelayImp.lib;\\\"C:\\\\Users\\\\Kishan Sambhi\\\\.node-gyp\\\\4.2.2\\\\$(Configuration)\\\\node.lib\\\"\",\n          \"AdditionalOptions\": \"/ignore:4199 %(AdditionalOptions)\",\n          \"AllowIsolation\": \"true\",\n          \"DataExecutionPrevention\": \"true\",\n          \"DelayLoadDLLs\": \"iojs.exe;node.exe;%(DelayLoadDLLs)\",\n          \"EnableCOMDATFolding\": \"true\",\n          \"GenerateDebugInformation\": \"true\",\n          \"GenerateMapFile\": \"true\",\n          \"LinkTimeCodeGeneration\": \"UseLinkTimeCodeGeneration\",\n          \"MapExports\": \"true\",\n          \"OptimizeReferences\": \"true\",\n          \"OutputFile\": \"$(OutDir)$(ProjectName).node\",\n          \"RandomizedBaseAddress\": \"true\",\n          \"SuppressStartupBanner\": \"true\",\n          \"TargetExt\": \".node\",\n          \"TargetMachine\": \"MachineX64\"\n        },\n        \"ResourceCompile\": {\n          \"AdditionalIncludeDirectories\": \"C:\\\\Users\\\\Kishan Sambhi\\\\.node-gyp\\\\4.2.2\\\\include\\\\node;C:\\\\Users\\\\Kishan Sambhi\\\\.node-gyp\\\\4.2.2\\\\src;C:\\\\Users\\\\Kishan Sambhi\\\\.node-gyp\\\\4.2.2\\\\deps\\\\uv\\\\include;C:\\\\Users\\\\Kishan Sambhi\\\\.node-gyp\\\\4.2.2\\\\deps\\\\v8\\\\include;%(AdditionalIncludeDirectories)\",\n          \"PreprocessorDefinitions\": \"NODE_GYP_MODULE_NAME=pem;WIN32;_CRT_SECURE_NO_DEPRECATE;_CRT_NONSTDC_NO_DEPRECATE;_HAS_EXCEPTIONS=0;BUILDING_V8_SHARED=1;BUILDING_UV_SHARED=1;BUILDING_NODE_EXTENSION;%(PreprocessorDefinitions);%(PreprocessorDefinitions)\"\n        }\n      }\n    ]\n  }\n}\n```\n\nYAML\n\n```\nProject: \n ItemGroup: \n  - \n   ProjectConfiguration: \n    - \n   Configuration: Debug\n     Platform: x64\n     _Include: \"Debug|x64\"\n    - \n   Configuration: Release\n     Platform: x64\n     _Include: \"Release|x64\"\n   _Label: ProjectConfigurations\n  - \n   None: \n    _Include: \"..\\\\binding.gyp\"\n  - \n   ClCompile: \n    - \n   _Include: \"..\\\\src\\\\pem.cc\"\n    - \n   _Include: \"C:\\\\Users\\\\Kishan Sambhi\\\\AppData\\\\Roaming\\\\npm\\\\node_modules\\\\node-gyp\\\\src\\\\win_delay_load_hook.c\"\n PropertyGroup: \n  - \n   ProjectGuid: \"{74CF4537-8047-617D-4D23-0353B4FC702F}\"\n   Keyword: Win32Proj\n   RootNamespace: pem\n   IgnoreWarnCompileDuplicatedFilename: true\n   PreferredToolArchitecture: x64\n   _Label: Globals\n  - \n   ConfigurationType: DynamicLibrary\n   _Label: Configuration\n  - \n   PlatformToolset: v140\n   _Label: Locals\n  - \n   _Label: UserMacros\n  - \n   ExecutablePath: \"$(ExecutablePath);$(MSBuildProjectDirectory)\\\\..\\\\bin\\\\;$(MSBuildProjectDirectory)\\\\..\\\\bin\\\\\"\n   IgnoreImportLibrary: true\n   IntDir: \"$(Configuration)\\\\obj\\\\$(ProjectName)\\\\\"\n   LinkIncremental: \n    - \n   _Condition: \"'$(Configuration)|$(Platform)'=='Release|x64'\"\n     __text: false\n     toString: \n    - \n   _Condition: \"'$(Configuration)|$(Platform)'=='Debug|x64'\"\n     __text: true\n     toString: \n   OutDir: \"$(SolutionDir)$(Configuration)\\\\\"\n   TargetExt: \n    - \n   _Condition: \"'$(Configuration)|$(Platform)'=='Debug|x64'\"\n     __text: \".node\"\n     toString: \n    - \n   _Condition: \"'$(Configuration)|$(Platform)'=='Debug|x64'\"\n     __text: \".node\"\n     toString: \n    - \n   _Condition: \"'$(Configuration)|$(Platform)'=='Release|x64'\"\n     __text: \".node\"\n     toString: \n    - \n   _Condition: \"'$(Configuration)|$(Platform)'=='Release|x64'\"\n     __text: \".node\"\n     toString: \n   TargetName: \"$(ProjectName)\"\n   TargetPath: \"$(OutDir)\\\\$(ProjectName).node\"\n Import: \n  - \n   _Project: \"$(VCTargetsPath)\\\\Microsoft.Cpp.Default.props\"\n  - \n   _Project: \"$(VCTargetsPath)\\\\Microsoft.Cpp.props\"\n  - \n   _Project: \"$(VCTargetsPath)\\\\BuildCustomizations\\\\masm.props\"\n  - \n   _Project: \"$(VCTargetsPath)\\\\Microsoft.Cpp.targets\"\n  - \n   _Project: \"$(VCTargetsPath)\\\\BuildCustomizations\\\\masm.targets\"\n ImportGroup: \n  - \n   _Label: ExtensionSettings\n  - \n   Import: \n    _Condition: \"exists('$(UserRootDir)\\\\Microsoft.Cpp.$(Platform).user.props')\"\n    _Label: LocalAppDataPlatform\n    _Project: \"$(UserRootDir)\\\\Microsoft.Cpp.$(Platform).user.props\"\n   _Label: PropertySheets\n  - \n   _Label: ExtensionTargets\n ItemDefinitionGroup: \n  - \n   ClCompile: \n    AdditionalIncludeDirectories: \"C:\\\\Users\\\\Kishan Sambhi\\\\.node-gyp\\\\4.2.2\\\\include\\\\node;C:\\\\Users\\\\Kishan Sambhi\\\\.node-gyp\\\\4.2.2\\\\src;C:\\\\Users\\\\Kishan Sambhi\\\\.node-gyp\\\\4.2.2\\\\deps\\\\uv\\\\include;C:\\\\Users\\\\Kishan Sambhi\\\\.node-gyp\\\\4.2.2\\\\deps\\\\v8\\\\include;%(AdditionalIncludeDirectories)\"\n    BasicRuntimeChecks: EnableFastChecks\n    BufferSecurityCheck: true\n    CompileAsWinRT: false\n    DebugInformationFormat: ProgramDatabase\n    DisableSpecificWarnings: \"4351;4355;4800;4251;%(DisableSpecificWarnings)\"\n    ExceptionHandling: false\n    MinimalRebuild: false\n    OmitFramePointers: false\n    Optimization: Disabled\n    PrecompiledHeader: NotUsing\n    PreprocessorDefinitions: \"NODE_GYP_MODULE_NAME=pem;WIN32;_CRT_SECURE_NO_DEPRECATE;_CRT_NONSTDC_NO_DEPRECATE;_HAS_EXCEPTIONS=0;BUILDING_V8_SHARED=1;BUILDING_UV_SHARED=1;BUILDING_NODE_EXTENSION;DEBUG;_DEBUG;%(PreprocessorDefinitions)\"\n    RuntimeLibrary: MultiThreadedDebug\n    StringPooling: true\n    SuppressStartupBanner: true\n    TreatWarningAsError: false\n    WarningLevel: Level3\n   Link: \n    AdditionalDependencies: \"kernel32.lib;user32.lib;gdi32.lib;winspool.lib;comdlg32.lib;advapi32.lib;shell32.lib;ole32.lib;oleaut32.lib;uuid.lib;odbc32.lib;DelayImp.lib;\\\"C:\\\\Users\\\\Kishan Sambhi\\\\.node-gyp\\\\4.2.2\\\\$(Configuration)\\\\node.lib\\\"\"\n    AdditionalOptions: \"/ignore:4199 %(AdditionalOptions)\"\n    AllowIsolation: true\n    DataExecutionPrevention: true\n    DelayLoadDLLs: \"iojs.exe;node.exe;%(DelayLoadDLLs)\"\n    GenerateDebugInformation: true\n    GenerateMapFile: true\n    MapExports: true\n    OutputFile: \"$(OutDir)$(ProjectName).node\"\n    RandomizedBaseAddress: true\n    SuppressStartupBanner: true\n    TargetExt: \".node\"\n    TargetMachine: MachineX64\n   ResourceCompile: \n    AdditionalIncludeDirectories: \"C:\\\\Users\\\\Kishan Sambhi\\\\.node-gyp\\\\4.2.2\\\\include\\\\node;C:\\\\Users\\\\Kishan Sambhi\\\\.node-gyp\\\\4.2.2\\\\src;C:\\\\Users\\\\Kishan Sambhi\\\\.node-gyp\\\\4.2.2\\\\deps\\\\uv\\\\include;C:\\\\Users\\\\Kishan Sambhi\\\\.node-gyp\\\\4.2.2\\\\deps\\\\v8\\\\include;%(AdditionalIncludeDirectories)\"\n    PreprocessorDefinitions: \"NODE_GYP_MODULE_NAME=pem;WIN32;_CRT_SECURE_NO_DEPRECATE;_CRT_NONSTDC_NO_DEPRECATE;_HAS_EXCEPTIONS=0;BUILDING_V8_SHARED=1;BUILDING_UV_SHARED=1;BUILDING_NODE_EXTENSION;DEBUG;_DEBUG;%(PreprocessorDefinitions);%(PreprocessorDefinitions)\"\n   _Condition: \"'$(Configuration)|$(Platform)'=='Debug|x64'\"\n  - \n   ClCompile: \n    AdditionalIncludeDirectories: \"C:\\\\Users\\\\Kishan Sambhi\\\\.node-gyp\\\\4.2.2\\\\include\\\\node;C:\\\\Users\\\\Kishan Sambhi\\\\.node-gyp\\\\4.2.2\\\\src;C:\\\\Users\\\\Kishan Sambhi\\\\.node-gyp\\\\4.2.2\\\\deps\\\\uv\\\\include;C:\\\\Users\\\\Kishan Sambhi\\\\.node-gyp\\\\4.2.2\\\\deps\\\\v8\\\\include;%(AdditionalIncludeDirectories)\"\n    AdditionalOptions: \"/MP %(AdditionalOptions)\"\n    BufferSecurityCheck: true\n    CompileAsWinRT: false\n    DebugInformationFormat: ProgramDatabase\n    DisableSpecificWarnings: \"4351;4355;4800;4251;%(DisableSpecificWarnings)\"\n    ExceptionHandling: false\n    FavorSizeOrSpeed: Speed\n    FunctionLevelLinking: true\n    InlineFunctionExpansion: AnySuitable\n    IntrinsicFunctions: true\n    OmitFramePointers: true\n    Optimization: Full\n    PrecompiledHeader: NotUsing\n    PreprocessorDefinitions: \"NODE_GYP_MODULE_NAME=pem;WIN32;_CRT_SECURE_NO_DEPRECATE;_CRT_NONSTDC_NO_DEPRECATE;_HAS_EXCEPTIONS=0;BUILDING_V8_SHARED=1;BUILDING_UV_SHARED=1;BUILDING_NODE_EXTENSION;%(PreprocessorDefinitions)\"\n    RuntimeLibrary: MultiThreaded\n    RuntimeTypeInfo: false\n    StringPooling: true\n    SuppressStartupBanner: true\n    TreatWarningAsError: false\n    WarningLevel: Level3\n    WholeProgramOptimization: true\n   Lib: \n    AdditionalOptions: \"/LTCG %(AdditionalOptions)\"\n   Link: \n    AdditionalDependencies: \"kernel32.lib;user32.lib;gdi32.lib;winspool.lib;comdlg32.lib;advapi32.lib;shell32.lib;ole32.lib;oleaut32.lib;uuid.lib;odbc32.lib;DelayImp.lib;\\\"C:\\\\Users\\\\Kishan Sambhi\\\\.node-gyp\\\\4.2.2\\\\$(Configuration)\\\\node.lib\\\"\"\n    AdditionalOptions: \"/ignore:4199 %(AdditionalOptions)\"\n    AllowIsolation: true\n    DataExecutionPrevention: true\n    DelayLoadDLLs: \"iojs.exe;node.exe;%(DelayLoadDLLs)\"\n    EnableCOMDATFolding: true\n    GenerateDebugInformation: true\n    GenerateMapFile: true\n    LinkTimeCodeGeneration: UseLinkTimeCodeGeneration\n    MapExports: true\n    OptimizeReferences: true\n    OutputFile: \"$(OutDir)$(ProjectName).node\"\n    RandomizedBaseAddress: true\n    SuppressStartupBanner: true\n    TargetExt: \".node\"\n    TargetMachine: MachineX64\n   ResourceCompile: \n    AdditionalIncludeDirectories: \"C:\\\\Users\\\\Kishan Sambhi\\\\.node-gyp\\\\4.2.2\\\\include\\\\node;C:\\\\Users\\\\Kishan Sambhi\\\\.node-gyp\\\\4.2.2\\\\src;C:\\\\Users\\\\Kishan Sambhi\\\\.node-gyp\\\\4.2.2\\\\deps\\\\uv\\\\include;C:\\\\Users\\\\Kishan Sambhi\\\\.node-gyp\\\\4.2.2\\\\deps\\\\v8\\\\include;%(AdditionalIncludeDirectories)\"\n    PreprocessorDefinitions: \"NODE_GYP_MODULE_NAME=pem;WIN32;_CRT_SECURE_NO_DEPRECATE;_CRT_NONSTDC_NO_DEPRECATE;_HAS_EXCEPTIONS=0;BUILDING_V8_SHARED=1;BUILDING_UV_SHARED=1;BUILDING_NODE_EXTENSION;%(PreprocessorDefinitions);%(PreprocessorDefinitions)\"\n   _Condition: \"'$(Configuration)|$(Platform)'=='Release|x64'\"\n _xmlns: \"http://schemas.microsoft.com/developer/msbuild/2003\"\n _DefaultTargets: Build\n _ToolsVersion: \"14.0\"\n```\n\nI think the json is a lot more simple.\nSo, heads up to json! :+1: \nWhat do think?\nYou can use this to decide.\nHappy coding!\n",
        "createdAt": "2015-12-05T13:10:43Z",
        "updatedAt": "2015-12-05T13:10:43Z",
        "author": {
          "login": "Gum-Joe"
        }
      },
      {
        "body": "Yaml is definitely more concise, that would be my preference from a human-readable perspective.  However, a bigger issue here really comes down to tooling (designer-friendly) and additional value-added features, such as markup extensions.\n\nAdditionally, the core problem here is that \"Project\" (the root element) does not translate to an actual CLR object.  This is a data (xml) document that is read in and parsed to create a CLR object, which is a terribly inefficient way of using XML, as it not only requires more code, but makes it more difficult to be designer-friendly.  So this above all would have to be addressed, first.\n\nIn any case, it would be great to see other serialization platforms embrace markup extensions, that would make this conversation easier. :)\n\nAlso, while I am dancing around the subject of Xaml, I would like to point out another project that is making its own Xaml engine with all sorts of cool extensions around its binding expressions to make it more developer-friendly.  You can see that here: https://grokys.github.io/perspex/perspex-alpha3/\n\nThis is a UI-specific implementation of a Xaml engine, OmniXaml, a Xaml-based serializer which can be found here: https://github.com/SuperJMN/OmniXAML/\n",
        "createdAt": "2015-12-05T13:24:49Z",
        "updatedAt": "2015-12-05T13:24:49Z",
        "author": {
          "login": "Mike-E-angelo"
        }
      },
      {
        "body": "Good argument @Michael-DST. I think those issues that you metioned should have been resolved by the time this issue is closed, but thanks for mentioning them. I totally agree with your opinion, but it is harder to see what is grouped together in yaml, whereas in json all you have to do is look for the closing bracket (`}`). The Xaml projects you mentioned look like it is possible they could be used.\n\nOne question: has anyone opened a pull request on this yet, or is it too distant?\n",
        "createdAt": "2015-12-05T13:35:14Z",
        "updatedAt": "2015-12-05T13:35:14Z",
        "author": {
          "login": "Gum-Joe"
        }
      },
      {
        "body": "Haha... well I say \"human-readable\" but as we have CLEARLY seen from this thread (and others), it depends on which human is doing the reading. ;)\n\nAs for pull requests, not that I know of... just [voting](http://visualstudio.uservoice.com/forums/121579-visual-studio/suggestions/9347001-improve-reboot-visual-studio-project-system) and talking.  MSBuild team has been  worryingly quiet around this discussion.\n",
        "createdAt": "2015-12-05T14:38:45Z",
        "updatedAt": "2015-12-05T14:38:45Z",
        "author": {
          "login": "Mike-E-angelo"
        }
      },
      {
        "body": "Ok :+1:\n",
        "createdAt": "2015-12-05T16:37:17Z",
        "updatedAt": "2015-12-05T16:37:17Z",
        "author": {
          "login": "Gum-Joe"
        }
      },
      {
        "body": "Thanks, @Gum-Joe, for going through the exercise of converting the msbuild XML to the proposed alternate formats.\n\nHowever, I really don't find the JSON or YAML to be any more readable than XML. Maybe it's because I've been using XML since the mid-90's. There is tons of tooling already for XML.\n\nJust my opinion.\n",
        "createdAt": "2015-12-06T08:36:45Z",
        "updatedAt": "2015-12-06T08:36:45Z",
        "author": {
          "login": "JohnTasler"
        }
      },
      {
        "body": "@JohnTasler, gyp (a build system) configurations (the [`.gyp` files](https://github.com/sass/node-sass/blob/228b39d/binding.gyp) which can also yield [dependency configs](https://github.com/sass/node-sass/blob/228b39d/src/libsass.gyp)) are in JSON and they are pretty self descriptive too.\n\nMSBuild can also take inspiration from the way we call / refer script in node.js `package.json` file, and have an equivalent to Grunt file in C# script to run MSBuild tasks on build events. This will separate nicely and this workflow is working in VS2015 today and developed by by [WebDev team at Microsoft](http://blogs.msdn.com/b/webdev/). It goes like this:\n- Open VS2015 and hit Ctrl+Shift+N and create any project (say C# console app).\n- Add a file called `package.json` at the root of the project.\n- Add a file called `Gruntfile.js` (or if you prefer gulf..) at the root of the project.\n- In `package.json`, add\n  \n  ``` json\n  {\n    \"name\": \"pretty-awesome\",\n    \"version\": \"0.0.1-alpha-001-prerelease\",\n    \"dependencies\": {\n      \"selenium-webdriver\": \"^2.0.3\",\n      \"grunt-something\": \"^x.x\"\n    }\n  }\n  ```\n- Then in Gruntfile you can write JS code and consume `selenium-webdriver` and `grunt-something` packages with the access to filesystem I/O, Buffers, System, Network, DB and the whole world! But at this point, if you want to run that JS code everytime you open the project, before/after building it or even at Cleaning the solution, you can do that by right clicking your grunt task in Task Runner Explorer window and it will add a hook comment in your `Gruntfile.js`. That comment (e.g. `/// <binding ProjectOpened='compile-coffeescripts-task' />`) in JS code is parsed by VS task runner feature which act like a broker between MSBuild and Node.js (listens to MSBuild's build events and trigger node.js tasks).\n- Now the way i abstracted out Task Runner of VS2015 = MSBuild-Node.js broker is not true. It is actually MSbuild and Windows shell contract. Meaning, if you want to run things beyond node.js/grunt/gulp/bower jobs, you can still do that. So with only `package.json` at your project root:\n  \n  ``` json\n  {\n    \"name\": \"pretty-awesome\",\n    \"version\": \"0.0.1-alpha-001-prerelease\",\n    \"scripts\": {\n      \"job1\": \"..\\\\..\\\\my-old-projects\\\\c-sharp\\\\bin\\\\Release\\\\FileSystemTasks.exe\",\n      \"job2\": \"C:\\\\temp\\\\writteninC-Cpp.exe\",\n      \"job3\": \"scriptcs path\\\\to\\\\some.csx\",\n      \"job4\": \"nodejs foo\\\\run-cs-linter-and-code-styler-for-all-cs-files-in-project.js\",\n      \"job5\": \"ruby abc.rb\",\n      \"job6\": \"perl download-somestuff-in-this-dir.pl\",\n      \"job7\": \"python read-whole-thesaurus-from-mongo-db.py\",\n    },\n    \"-vs-binding\": {\n      \"AfterBuild\": [ \"job1\", \"job2\" ],\n      \"Clean\": [ \"job3\" ]\n    }\n  }\n  ```\n  \n  (all these jobs can still have MSbuild bindings information in `.json` file which Task Runner will stamp that `-vs-binding` code for you if you right click these jobs in TRExplorer and select desired binding).\n\nThis means we virtually have a custom build system which can be written in [m]any language[s] and Task Runner will take care of interfacing with MSBuild. No scary MSBuild Tasks and long spaghetti XMLs. :)\n\nThis will be cool if MSBuild embrace this concept and come up with more polished conventions for more focused `msbuild.json`, so we can do everything in JSON explicitly which we are doing in XML.\n",
        "createdAt": "2015-12-06T10:02:06Z",
        "updatedAt": "2015-12-06T12:25:01Z",
        "author": {
          "login": "ghost"
        }
      },
      {
        "body": "> This will be cool if MSBuild embrace this concept and come up with more polished conventions for more focused msbuild.json, so we can do everything in JSON explicitly which we are doing in XML.\n\nThis is all really well and good @jasonwilliams200OK, and I am in agreement with your (general) goal, except [that veteran .NET/MSFT developers are saying that the JSON format does not suit them and adds confusion/inconsistency into their current project/solution structures](http://visualstudio.uservoice.com/forums/121579-visual-studio/suggestions/9347001-improve-reboot-visual-studio-project-system).  \n\nI think there's still some confusion regarding JSON vs. \"Spaghetti MSBuild XML\" (which I am in full agreement that it is).  It is spaghetti in that it does not represent a full-fidelity POCO object when serialized, and instead uses XDom-to-POCO mapping, which is a terrible, nasty way to define objects and utilize data within a solution.\n\nI am afraid that the same is the case for your package.json document sample above.  Case in point: the `-vs-binding` property.  Does this translate properly to a POCO .NET property?  If so, I would like to see how and where.  At the very least, there is some (attribute/metadata?) mapping going on as the \"-\" character is an illegal symbol for a .NET property.  This mapping is ultimately just as bad as XDom-to-POCO, because at the end of the day you are dealing with representative, loosely-typed data (higher total cost of ownership) versus serialized, strongly-typed data (lower TCO).\n\nDon't get me wrong, I see the appeal of JSON, but from a veteran MSFT developer point of view it still has a way to go before it beats the likes of Xaml.  If you are a new MSFT/web-based developer who hasn't had to do deal with Xaml/MSFT tech, I can understand (and envy) your bliss.  However, the veterans here are quite ingrained and satisfied in our approaches and it is this overlooked/neglected fact that is causing the friction in our community right now.\n\nThank you for your continued dialogue around this matter. :)\n",
        "createdAt": "2015-12-06T10:48:53Z",
        "updatedAt": "2015-12-06T10:48:53Z",
        "author": {
          "login": "Mike-E-angelo"
        }
      },
      {
        "body": "That sounds like a really good idea @jasonwilliams200OK, however, this issue has (unfortunately) been labeled as \"distant future\" and I can see why. Despite this, we could make our own repo, taking you idea. We could make our own compiler and task runner, using a minimal build.json to specify cpus, tasks and what to compile to where (like popular compilers and task-runners). It could also be cross-language, done by grouping the languages in the build.json. This removes the need for a solution and project file.\nHere is what I will do: Create a repo called \"buildup\" and start development of the idea I mentioned above. I will need help with making the compiler.\n\nHappy coding!\n",
        "createdAt": "2015-12-06T10:49:41Z",
        "updatedAt": "2015-12-06T10:49:41Z",
        "author": {
          "login": "Gum-Joe"
        }
      },
      {
        "body": "Hahah @Gum-Joe trying to make something happen in an open source repo. :) :+1: \n",
        "createdAt": "2015-12-06T10:50:57Z",
        "updatedAt": "2015-12-06T10:50:57Z",
        "author": {
          "login": "Mike-E-angelo"
        }
      },
      {
        "body": "Now live at Gum-Joe/buildup\n",
        "createdAt": "2015-12-06T10:52:49Z",
        "updatedAt": "2015-12-06T10:52:49Z",
        "author": {
          "login": "Gum-Joe"
        }
      },
      {
        "body": ":+1:\n",
        "createdAt": "2015-12-06T10:53:16Z",
        "updatedAt": "2015-12-06T10:53:16Z",
        "author": {
          "login": "Gum-Joe"
        }
      },
      {
        "body": "To be sure, that's: https://github.com/Gum-Joe/buildup\n\n:) :+1: \n",
        "createdAt": "2015-12-06T10:55:14Z",
        "updatedAt": "2015-12-06T10:55:14Z",
        "author": {
          "login": "Mike-E-angelo"
        }
      },
      {
        "body": "Yep :) :+1:\n",
        "createdAt": "2015-12-06T10:59:16Z",
        "updatedAt": "2015-12-06T10:59:16Z",
        "author": {
          "login": "Gum-Joe"
        }
      },
      {
        "body": "Will begin developing it as soon as possible\n",
        "createdAt": "2015-12-06T10:59:43Z",
        "updatedAt": "2015-12-06T10:59:43Z",
        "author": {
          "login": "Gum-Joe"
        }
      },
      {
        "body": "One thing: It should be cross-platform ( some platform-specific code) using g++-4.8 and Visual Studio 2015\n",
        "createdAt": "2015-12-06T11:07:44Z",
        "updatedAt": "2015-12-06T11:07:44Z",
        "author": {
          "login": "Gum-Joe"
        }
      },
      {
        "body": "Please contribute.\n",
        "createdAt": "2015-12-06T11:08:23Z",
        "updatedAt": "2015-12-06T11:08:23Z",
        "author": {
          "login": "Gum-Joe"
        }
      },
      {
        "body": "I need help\n",
        "createdAt": "2015-12-06T11:08:32Z",
        "updatedAt": "2015-12-06T11:08:32Z",
        "author": {
          "login": "Gum-Joe"
        }
      },
      {
        "body": "@Gum-Joe, can you please create a gitter channel for your repo buildup, to further this discussion? I have mentioned our discussion on CoreCLR channel: https://gitter.im/dotnet/coreclr. :)\n\nAlso slightly related stuff on gyp inspired concepts: https://github.com/aspnet/dnx/issues/3173.\n\nThe bonus point is in package.json, we get intellisense for free even in Community Edition of VS2015! The intellisense goes like this:\n- Type the dependency name and add colon `:` and open a double-quote, it will populate the latest package version from the npmjs.org.\n- In binding array under package.js, it parses the available tasks from the same package.json.\n\nSome of these features will come from this VS extension: https://github.com/madskristensen/NpmTaskRunner, which along with https://github.com/madskristensen/WebEssentials2015 are prototype projects (a play ground) for VS vNext features (Mads is the manager of VS web tooling webdev team). There is a lot that can be done by mix and match.\n\n@Michael-DST, regarding POCO mapping, I think WE2015 uses Roslyn to map code layout between C# and TypeScript to provide the features like \"right-click C# file in Solution Explorer, hover over Web Essentials and click Generate TypeScript interface\". There are other extensions to translate the whole .NET dll to form TS interface typings. The similar approaches can be used to reverse transform and generate POCO / DTOs types in C#.\n\nWe can even run `csc.exe`, `vbc.exe` and `cl.exe` or as part of `script` in pacakge.json before MSBuild even get a chance to step up. :smile: \n",
        "createdAt": "2015-12-06T12:46:55Z",
        "updatedAt": "2015-12-06T12:46:55Z",
        "author": {
          "login": "ghost"
        }
      },
      {
        "body": "@jasonwilliams200OK that is great from a new MSFT/web developer/TS perspective, but again it seems to lack any consideration and/or thought from a veteran/MSFT/C#/.NET perspective, hence the described friction/growing frustration from the veteran crowd.\n\nWhat the veteran .NET/MSFT crowd wants is to work in .NET/C#/Xaml and build their solutions as such -- NOT TypeScript/JSON.  Additionally, it seems as if you are confirming my suspicions that the package.json file is not made from a serialized .NET POCOs (lower TCO) but is meant to be loaded as a dynamic/schemaless object which is more expensive (higher TCO) to work with, as the schema has to be inferred from a loosely/dynamic-typed mechanism.\n\nPlease correct me if I am wrong here and/or if I am completely misunderstanding something.  It wouldn't be the first time this has happened. :)\n",
        "createdAt": "2015-12-06T13:33:07Z",
        "updatedAt": "2015-12-06T13:34:31Z",
        "author": {
          "login": "Mike-E-angelo"
        }
      },
      {
        "body": "@jasonwilliams200OK: I have created a gitter chat at https://gitter.im/Gum-Joe/buildup\n",
        "createdAt": "2015-12-06T13:39:22Z",
        "updatedAt": "2015-12-06T13:39:22Z",
        "author": {
          "login": "Gum-Joe"
        }
      },
      {
        "body": "@Michael-DST, I totally understand the rationale of sticking to MSBuild from veteran C# devs' perspective. I was just highlighting the fact that today with the virtue of MSBuild extensibility, we can work with those facets and offload many build related stuff to this JSON-driven manifest. Ultimately, my hope is MSBuild to provide JSON and YAML schemas to provide parallel support so we can write our build story in the data representation language of our choice. :).\n",
        "createdAt": "2015-12-06T14:18:54Z",
        "updatedAt": "2015-12-06T14:18:54Z",
        "author": {
          "login": "ghost"
        }
      },
      {
        "body": "OK great @jasonwilliams200OK.  Thank you for the engaged and thoughtful dialogue.  I am glad you hear the \"other\" side and I hope we can all land on a great solution that satisfies each side's (or role's/actor's/persona's) requirements.\n",
        "createdAt": "2015-12-06T14:27:35Z",
        "updatedAt": "2015-12-06T14:27:35Z",
        "author": {
          "login": "Mike-E-angelo"
        }
      },
      {
        "body": "Thanks everyone for the feedback, discussion, and insights. We\u2019re strongly considering more concise and expressive markup languages for future build engines. For MSBuild itself, the existing tooling ecosystem (Visual Studio and third-party) is too tied down to the existing XML format. We feel that the risks involved with a change in build-specification representation outweigh the benefits.\n",
        "createdAt": "2015-12-09T23:13:34Z",
        "updatedAt": "2015-12-09T23:13:34Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald thank you for adding and contribuiting to the discussion. :)  I was worried that no one was really paying attention to this, as dialogue from the MSBuild team has been sparse.  Am I understanding correctly that you will be sticking to the current XML paradigm/system and no modifications will be planned or made around this?\n",
        "createdAt": "2015-12-09T23:18:11Z",
        "updatedAt": "2015-12-09T23:18:30Z",
        "author": {
          "login": "Mike-E-angelo"
        }
      },
      {
        "body": "@Michael-DST That's correct.  We're happy to get proposals for (backward-compatible!) changes to project representation, but MSBuild's file format will remain XML (even if we wouldn't choose that if we were starting from scratch today--and I wouldn't!).\n",
        "createdAt": "2015-12-09T23:31:40Z",
        "updatedAt": "2015-12-09T23:31:40Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald Well that certainly is disappointing.  When you say you've considered the risks, I hope you have considered the risk in the form defections from MSBuild altogether for sticking with a format that is pushing (if not pushed over) a decade in age.  It does seem there is overwhelming demand and feedback for a switch in (or support for other) file format(s) and it is disappointing to say the least that the MSBuild team will not consider this for the foreseeable future.\n\nAt the very least this will reflect poorly on the MSBuild product line as the XML format will continue to be difficult to work with and will give it a dated/older, antiquated look and feel.  This makes it difficult to build upon and hampers its competitive appeal.\n\nIn addition to this, I guess the concern is that this seems like such a fundamental concern/issue and it is not getting the urgency/priority from the team.  I guess it would help to know what issues you have decided to work on instead to help better understand.\n\nOf course, this is just coming from my (opinionated _smile_) perspective.  I could be wrong and completely missing the pulse here.  Wouldn't be the first time. :P Thank you for any consideration and continued thoughts towards/around this.\n",
        "createdAt": "2015-12-10T00:31:59Z",
        "updatedAt": "2015-12-10T00:31:59Z",
        "author": {
          "login": "Mike-E-angelo"
        }
      },
      {
        "body": "@rainersigwald I guess that is a \"yes we considered it and we don't care.\" :P  Thinking that this should be called MSBuild vSame rather than vNext. :P \n\nI would like to take you up on your proposals fro backward-compatible project representation, however.  You can definitely represent anything in Xaml, and benefit from the built-in tooling available in Visual Studio due to it.  What would be the first step to this?  Would you like me to try to build you a Xaml-fied version of a MSBuild \"script\" and we can take it from there?  Trying to clarify what you mean by proposal. :)\n",
        "createdAt": "2016-01-15T12:17:07Z",
        "updatedAt": "2016-01-15T12:17:07Z",
        "author": {
          "login": "Mike-E-angelo"
        }
      },
      {
        "body": "@Michael-DST It might be helpful to think of this repo as \u201cMSBuild vSafe\u201d\u2014the focus here is on improving the existing MSBuild for its current users, but not making invasive, large-scale changes.\n\nWe don\u2019t have anything to announce right now, but you might be interested in [some](https://twitter.com/xjoeduffyx/status/686785616030240768) [things](http://research.microsoft.com/en-us/projects/tse/internships.aspx#ID15) that have been posted externally.\n",
        "createdAt": "2016-01-16T00:51:28Z",
        "updatedAt": "2016-01-16T00:51:28Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Haha thank you for your reply @rainersigwald.  It is much appreciated.  I do have to say that the idea of a team of interns building a build system does not inspire the greatest of confidence.  In fact, it is probably this exact approach/methodology/strategy that can be attributed to the reason why MSBuild vSafe is in such the state it is now. :P  It also sounds like there is talk about inventing a whole new language, and even referencing TypeScript, which is completely incompatible with .NET.  Internal MSFT teams **do** know about .NET, right?  It is hard to tell sometimes as it seems like there is always at least one team trying to skate uphill and create something completely new, different, and _completely incompatible_ with all of the work, effort, and knowledge invested in, well, what currently _works_.\n\nBtw, what I am proposing (using your words/suggestion here) is not a large-scale/invasive change, but a way that improves the current development process which I think we all can agree can stand some (read: a lot of) improvement.  MSBuild XML is the worst of the worst and truly gives the product a terrible name and developer experience.  Every respectable developer I know cringes at the thought of opening a .csproj file and wading through the mire of a schema-less, arbitrary elements that ultimately (if you're lucky) bind to obscure .NET counterparts somewhere that are nearly impossible to track down.\n\nIt would seem to me that if you are going to focus on improving the existing MSBuild for current users, that this area might be an area to consider in which to do exactly that.  With all of this said it does seem like I should bite my tongue until April before I pass any judgement (too late, I know haha).\n",
        "createdAt": "2016-01-16T01:27:04Z",
        "updatedAt": "2016-01-16T01:27:04Z",
        "author": {
          "login": "Mike-E-angelo"
        }
      },
      {
        "body": "This is more relevant than ever! ASP.NET Core project.json is going away and is instead planned to use msbuild. So why not bring the storm here, and demand JSON support for msbuild?\n",
        "createdAt": "2016-05-12T06:17:52Z",
        "updatedAt": "2016-05-12T06:17:52Z",
        "author": {
          "login": "Ciantic"
        }
      },
      {
        "body": "@Ciantic you mean JSON _or_ Xaml. :wink: :wink: :wink: \n",
        "createdAt": "2016-05-12T08:18:42Z",
        "updatedAt": "2016-05-12T08:18:42Z",
        "author": {
          "login": "Mike-E-angelo"
        }
      },
      {
        "body": "Given the new climate around project.json and MSBuild, I've created a new issue around this to further the conversation in a new light: https://github.com/Microsoft/msbuild/issues/613\n",
        "createdAt": "2016-05-12T13:49:36Z",
        "updatedAt": "2016-05-12T13:49:36Z",
        "author": {
          "login": "Mike-E-angelo"
        }
      },
      {
        "body": "@Mike-EEE \n\n> What the veteran .NET/MSFT crowd wants is to work in .NET/C#/Xaml and build their solutions as such -- NOT TypeScript/JSON\n\nUm wow. Well I **don't** want to build my solutions with Xaml actually. I **like** doing front ends in TypeScript/Angular, and I **don't** like WPF.\n\nWow, so I must not be a veteran developer.\n\nMy 21 years working development experience on the MS stack, developing COM, ATL, MFC, Win32, .NET from 1.0 beta onwards, experience writing thick client products, thin client apps, monster admin portals, websites. Writing Reactive Extensions systems, highly concurrent systems, trading engines, high performance trade costing systems, all that, and I'm still not a veteran.\n\nAll I need to do is say that I prefer Xaml to JSON and _then_ I'm a veteran developer.\n\nBecause veteran .NET developers only use One True Way\u2122, they don't pick and choose the best that they've found from a wide and deep experience. They only use C# and Xaml.\n\nSorry, but that's the same basic argument as the rest of the people on this thread who appear to believe that if you don't like MSBuild it's just because you don't understand it, and it can't be that you used it for years, and rejected it.\n",
        "createdAt": "2016-05-13T04:54:29Z",
        "updatedAt": "2016-05-13T04:54:29Z",
        "author": {
          "login": "shederman"
        }
      },
      {
        "body": "PS. I would rather use a non-MSBuild based Xaml build system than a MSBuild based JSON build system.\n",
        "createdAt": "2016-05-13T04:55:24Z",
        "updatedAt": "2016-05-13T04:55:24Z",
        "author": {
          "login": "shederman"
        }
      }
    ]
  }
}