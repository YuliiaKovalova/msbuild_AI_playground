{
  "number": 8622,
  "title": "[Bug]: Import fails when an expression evaluates to an empty string",
  "body": "### Issue Description\r\n\r\nAn import with an expression should not fail when the expression evaluates to an empty string.\r\n\r\nThe following previously worked but now fails with an MSB4020 error if `GetPathOfFileAbove` returns an empty string (because there are no matching files).\r\n\r\n```xml\r\n  <Import Project=\"$([MSBuild]::GetPathOfFileAbove('$(MSBuildThisFile)', '$(MSBuildThisFileDirectory)../'))\" />\r\n```\r\n\r\nThe example `Import` could be added to every `Directory.Build.props` and `Directory.Build.targets` file.\r\n\r\nThe result of an expression can't be predetermined. An 'empty set' result must be allowed by `Import` as a no-op.\r\n\r\nIf an 'empty set' result is an error, then, to be robust, every `Import` would need to be rewritten as something like the following:\r\n\r\n```xml\r\n  <PropertyGroup>\r\n    <FileToImport>$([MSBuild]::GetPathOfFileAbove('$(MSBuildThisFile)', '$(MSBuildThisFileDirectory)../'))</FileToImport>\r\n  </PropertyGroup>\r\n  <Import Project=\"$(FileToImport)\" Condition=\"Exists('$(FileToImport)')\" />\r\n```\r\n\r\nThere is a case for an empty string never being an error.\r\n\r\ne.g. Why should\r\n\r\n```xml\r\n  <Import Project=\"\" />\r\n```\r\n\r\nand \r\n\r\n```xml\r\n  <PropertyGroup>\r\n    <Empty></Empty>\r\n  </PropertyGroup>\r\n  <Import Project=\"$(Empty)\" />\r\n```\r\n\r\nhave different results? And, since the `Project` attribute accepts a set, why is the empty set special?\r\n\r\nIt would be cleaner and more consistent to accept an empty set as valid and handle it as a no-op, regardless of whether it is an explicit empty string or the result of evaluating an expression.\r\n\r\nTo support the cases where an error is desired, an explicit `ProjectMustExist` attribute could be added to the `Import`.\r\n\r\n### Steps to Reproduce\r\n\r\nWith a code tree create a Directory.Build.targets file with the following content:\r\n\r\n```xml\r\n<Project>\r\n  <Import Project=\"$([MSBuild]::GetPathOfFileAbove('$(MSBuildThisFile)', '$(MSBuildThisFileDirectory)../'))\" />\r\n</Project>\r\n```\r\n\r\nIn a directory above create a second Directory.Build.targets file but with empty content:\r\n\r\n```xml\r\n<Project>\r\n</Project>\r\n```\r\n\r\nBuild and note that the project/solution builds successfully.\r\n\r\nRemove or rename the second Directory.Build.targets file.\r\n\r\nBuild and note that the project/solution now fails with an MSB4020 error.\r\n\r\n### Expected Behavior\r\n\r\nThe following example should not fail regardless of the return value from `GetPathOfFileAbove`.\r\n\r\n```xml\r\n  <Import Project=\"$([MSBuild]::GetPathOfFileAbove('$(MSBuildThisFile)', '$(MSBuildThisFileDirectory)../'))\" />\r\n```\r\n\r\n\r\n\r\n### Actual Behavior\r\n\r\nWhen an expression is evaluated and the file is found to not exist, an MSB4020 is thrown. This breaks existing code.\r\n\r\n### Analysis\r\n\r\nThis is a regression.\r\n\r\nThis appears to be a design issue. It appears that at some point the importance of supporting the empty set was overlooked and the assumption was made that an empty value is an error that should be trapped.\r\n\r\n### Versions & Configurations\r\n\r\nMSBuild version 17.5.1+f6fdcf537 for .NET Framework\r\n17.5.1.16304",
  "state": "CLOSED",
  "createdAt": "2023-04-02T21:43:40Z",
  "updatedAt": "2023-08-11T22:48:47Z",
  "closedAt": "2023-04-04T14:13:48Z",
  "author": {
    "login": "jrdodds"
  },
  "labels": [
    "bug",
    "needs-triage"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "Forgind"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "I don't think I understand. Why do you think this should _not_ be an error?",
        "createdAt": "2023-04-03T14:58:55Z",
        "updatedAt": "2023-04-03T14:58:55Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "The `Project` attribute accepts a set of values. The set can have 0, 1, or more members. An `Import` of an empty set of projects is sensible, should be expected, should be allowed, and should be a no-op.\r\n\r\nIf an empty set is an error, then any expression that may be used for the `Project` attribute has to be deterministic enough to know that it will never return an empty set. That can be an impractical burden. And it means that the expression needs to be tested 'outside' of the `Project` attribute to prevent an error on an empty set.\r\n\r\nIt encourages code like the following:\r\n\r\n```xml\r\n<Import Project=\"$([MSBuild]::GetPathOfFileAbove('$(MSBuildThisFile)', '$(MSBuildThisFileDirectory)../'))\" Condition=\"'$([MSBuild]::GetPathOfFileAbove('$(MSBuildThisFile)', '$(MSBuildThisFileDirectory)../'))' != ''\" />\r\n```\r\n\r\nIn a code tree with `Directory.Build.targets` files at various levels with `Import`s to chain the files, moving the files up or down in the directory tree or removing a file could break the build. If, after the file moves and/or removes, the top-most file is trying to import from above, the build will fail.",
        "createdAt": "2023-04-03T15:36:23Z",
        "updatedAt": "2023-04-03T16:24:59Z",
        "author": {
          "login": "jrdodds"
        }
      },
      {
        "body": "What I am hearing is that you'd like a new feature that allows empty imports, and you think it's justified by reducing the need for duplicating the same expression in the `Condition`. Is that a fair summary?",
        "createdAt": "2023-04-03T16:37:16Z",
        "updatedAt": "2023-04-03T16:37:16Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "No, that doesn't summarize at all, but a new feature that allows empty imports is a compromise I can accept. :slightly_smiling_face:\r\n\r\nMy perspective is that the completeness and consistency of the set logic of the `Import` is broken because the empty set is disallowed. There is a comment in `BuildRequestDataFlags`:\r\n\r\n```c#\r\n        /// <summary>\r\n        /// When this flag is present, projects loaded during build will ignore missing imports (<see cref=\"ProjectLoadSettings.IgnoreMissingImports\"/> and <see cref=\"ProjectLoadSettings.IgnoreInvalidImports\"/>).\r\n        /// This is especially useful during a restore since some imports might come from packages that haven't been restored yet.\r\n        /// </summary>\r\n        IgnoreMissingEmptyAndInvalidImports = 1 << 6,\r\n```\r\n\r\nThat a restore operation needs to disable erring on an empty set of imports is an indicator to me that this is a defect.\r\n\r\nTo turn it around, why should providing an empty set to `Import` be an error?\r\n\r\nThanks",
        "createdAt": "2023-04-03T17:19:50Z",
        "updatedAt": "2023-04-03T17:20:48Z",
        "author": {
          "login": "jrdodds"
        }
      },
      {
        "body": "Huh, indeed Import/@Project appears to accept a semicolon-delimited list.\r\n\r\nmsbuild8622.msbuildproj:\r\n\r\n```XML\r\n<Project>\r\n  <Import Project=\"First.props;Second.props\"/>\r\n\r\n  <Target Name=\"dummy\" />\r\n</Project>\r\n```\r\n\r\nFirst.props:\r\n\r\n```XML\r\n<Project/>\r\n```\r\n\r\nSecond.props:\r\n\r\n```XML\r\n<Project/>\r\n```\r\n\r\n```\r\n$ dotnet msbuild msbuild8622.msbuildproj\r\nMSBuild version 17.6.0-preview-23108-10+51df47643 for .NET\r\n```\r\n\r\nThat seems an undocumented feature, though. The [Import element (MSBuild)](https://learn.microsoft.com/visualstudio/msbuild/import-element-msbuild?view=vs-2022) documentation says that the `Projects` attribute can include wildcards, but does not say anything about semicolons. The [ProjectImportElement.Project Property](https://learn.microsoft.com/dotnet/api/microsoft.build.construction.projectimportelement.project?view=msbuild-17) documentation does not add any details.\r\n\r\nBesides, it doesn't work right with the `Sdk` attribute; MSBuild locates only the first listed project from the directory of the SDK:\r\n\r\n```XML\r\n<Project>\r\n  <Import Sdk=\"Microsoft.NET.Sdk\" Project=\"Sdk.targets;Sdk.NuGet.targets\"/>\r\n\r\n  <Target Name=\"dummy\" />\r\n</Project>\r\n```\r\n\r\n```\r\n$ dotnet msbuild msbuild8622.msbuildproj\r\nMSBuild version 17.6.0-preview-23108-10+51df47643 for .NET\r\nC:\\Projects\\msbuild8622\\msbuild8622.msbuildproj(2,3): error MSB4019: The imported project \"C:\\Projects\\msbuild8622\\Sdk.NuGet.targets\" was not found. Confirm that the expression in the Import declaration \"C:\\Program Files\\dotnet\\sdk\\8.0.100-preview.1.23115.2\\Sdks\\Microsoft.NET.Sdk\\Sdk\\Sdk.targets;Sdk.NuGet.targets\" is correct, and that the file exists on disk.\r\n```\r\n\r\n<https://github.com/dotnet/msbuild/blob/51df47643a8ee2715ac67fab8d652b25be070cd2/src/Build/Evaluation/Evaluator.cs#L1772> <https://github.com/dotnet/msbuild/blob/51df47643a8ee2715ac67fab8d652b25be070cd2/src/Build/Evaluation/Evaluator.cs#L1883>",
        "createdAt": "2023-04-03T18:21:36Z",
        "updatedAt": "2023-04-03T18:21:36Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "Supporting a list of files was added with #2014 which is close to but shortly after the time when the SDK resolver support was added. It seems possible that these two PRs were works in process at the same time and the interaction between the two was missed.\r\n\r\nFailing with the SDK attribute is a different issue from the empty set issue.",
        "createdAt": "2023-04-03T19:10:45Z",
        "updatedAt": "2023-04-04T12:22:19Z",
        "author": {
          "login": "jrdodds"
        }
      },
      {
        "body": "This comment is an attempt to better explain the empty set issue as I see it. Hopefully this will help the discussion.\r\n\r\nMSBuild is a declarative language and it is a language and tool that provides an abstraction of a 'build' process.\r\n\r\nAssume that a set of files is declared, that the members of the set are variable from 'build' to 'build', and that it is valid and possible for the set to be empty. (Maybe the set declaration is an expression, maybe it is an Item collection with a wildcard in the `Include`.)\r\n\r\nA developer can declare the intent that this _\\<set\\>_ should be imported.\r\n\r\n```xml\r\n  <Import Project=\"<set>\" />\r\n```\r\n\r\nWhen _\\<set\\>_ is empty, MSBuild can resolve the declaration to import by performing no operation (no-op).\r\n\r\nGenerating an error on the empty set undermines the declaration, breaks the abstraction, and puts more work on the developer. To ensure a robust consistent build, the developer must add logic to do the work of testing for the empty set and performing no operation. This is counter-productive. MSBuild shouldn't add cognitive load.\r\n\r\nIf a path or name is incorrect and the file doesn't exist, an error is beneficial. But because a file spec was provided, it is not a case of an empty set.\r\n\r\nIt may seem sensible that importing nothing is an error, but what is the harm and what is the value-add or benefit of the error? I'm not asking that to be snarky. I just don't understand what the harm is and what the benefit is.",
        "createdAt": "2023-04-04T13:56:52Z",
        "updatedAt": "2023-04-04T13:56:52Z",
        "author": {
          "login": "jrdodds"
        }
      },
      {
        "body": "What concerns me is this sort of case:\r\n\r\n```XML\r\n<PropertyGroup>\r\n    <PathToCriticalImport>foo</PathToCriticalImport>\r\n</PropertyGroup>\r\n\r\n<Import Projects=\"$(PathToCrticalImport)\" />\r\n```\r\n\r\nIn case that was unclear, I missed an 'i' when importing PathToCriticalImport. As far as MSBuild is concerned, that's a valid property, though an empty one. Then we try to import that, and we fail. Should we throw an error?\r\n\r\nPer your suggestion here, the answer is no, but I think you'd agree the customer should somehow be informed that there's a typo. You suggested adding a `ProjectMustExist` attribute if we really do need it, but is that not cognitive load?\r\n\r\nWith current MSBuild, there is already a one-line solution to achieve what you want\u2014adding a Condition as you mentioned. I do think no-Condition imports should be considered as required to be nonempty as a difference between them and conditional imports.\r\n\r\nI will add that I consider the NuGet case very unusual. The Imports they ignore are important imports, and they should lead to errors if they never exist. The point is that they might not exist at the time they're evaluated because NuGet is still in the process of downloading all the PackageReferences. Outside of manually downloading files (like with our task), I don't see why a project file not existing should be considered ok.",
        "createdAt": "2023-04-04T14:13:48Z",
        "updatedAt": "2023-04-04T14:13:48Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "Ah, It's unfortunate that property name typos need an error like this to be caught but yes I see that benefit.\r\n\r\nYes, working around the legacy of what is in place adds cognitive load.\r\n\r\nThanks",
        "createdAt": "2023-04-04T14:31:50Z",
        "updatedAt": "2023-04-04T14:31:50Z",
        "author": {
          "login": "jrdodds"
        }
      }
    ]
  }
}