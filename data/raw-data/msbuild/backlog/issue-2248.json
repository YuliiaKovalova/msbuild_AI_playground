{
  "number": 2248,
  "title": "GenerateResource in UWP project Error when using stream resources in the resx files",
  "body": "[UWP-Win8.zip](https://github.com/Microsoft/msbuild/files/1106537/UWP-Win8.zip)\r\n\r\nWhen having UWP project which is reference a C# portable library that is using stream resources in the resx file and then compiling the UWP project will get the following error\r\n\r\n```\r\nError\t\tThe \"GenerateResource\" task failed unexpectedly.\r\nSystem.InvalidOperationException: Item named 'SerializedStream' of type 'System.IO.UnmanagedMemoryStream' cannot be added to the resource file because it is not serializable.\r\n   at Microsoft.Build.Tasks.ProcessResourceFiles.WriteResources(ReaderInfo reader, IResourceWriter writer)\r\n   at Microsoft.Build.Tasks.ProcessResourceFiles.WriteResources(ReaderInfo reader, String filename)\r\n   at Microsoft.Build.Tasks.ProcessResourceFiles.ProcessFile(String inFile, String outFileOrDir)\r\n   at Microsoft.Build.Tasks.ProcessResourceFiles.Run(TaskLoggingHelper log, ITaskItem[] assemblyFilesList, List`1 inputs, List`1 satelliteInputs, List`1 outputs, Boolean sourcePath, String language, String namespacename, String resourcesNamespace, String filename, String classname, Boolean publicClass, Boolean extractingResWFiles, String resWOutputDirectory)\r\n   at Microsoft.Build.Tasks.ProcessResourceFiles.Run(TaskLoggingHelper log, ITaskItem[] assemblyFilesList, List`1 inputs, List`1 satelliteInputs, List`1 outputs, Boolean sourcePath, String language, String namespacename, String resourcesNamespace, String filename, String classname, Boolean publicClass, Boolean extractingResWFiles, String resWOutputDirectory)\r\n   at Microsoft.Build.Tasks.GenerateResource.Execute()\r\n   at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute()\r\n   at Microsoft.Build.BackEnd.TaskBuilder.<ExecuteInstantiatedTask>d__26.MoveNext()\tUWP-Win8\tC:\\Program Files (x86)\\MSBuild\\Microsoft\\VisualStudio\\v14.0\\AppxPackage\\Microsoft.AppXPackage.Targets\t1189\t\r\n```\r\n\r\nI didn't notice getting same error if I create a desktop app instead. ",
  "state": "OPEN",
  "createdAt": "2017-06-27T19:33:54Z",
  "updatedAt": "2024-02-21T16:36:32Z",
  "closedAt": null,
  "author": {
    "login": "tarekgh"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "a side note, I am raising this issue because this scenario will become a valid scenario for netstandard 2.0 as we'll expose the API's that can read the stream resources (using ResourceManager class)",
        "createdAt": "2017-06-27T19:43:34Z",
        "updatedAt": "2017-06-27T19:43:34Z",
        "author": {
          "login": "tarekgh"
        }
      },
      {
        "body": "I think there are a lot of assumptions across the tooling that portable, .NET Standard, or .NET Core projects only support string resources. If you intend to change that you need to talk to at least there project system and CLI/SDK teams (and probably msbuild too).\n\nSent from my Windows 10 phone\n\nFrom: Tarek Mahmoud Sayed\nSent: Tuesday, June 27, 2017 9:43 PM\nTo: Microsoft/msbuild\nCc: Subscribed\nSubject: Re: [Microsoft/msbuild] GenerateResource in UWP project Error whenusing stream resources in the resx files (#2248)\n\na side note, I am raising this issue because this scenario will become a valid scenario for netstandard 2.0 as we'll expose the API's that can read the stream resources (using ResourceManager class)\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n\n",
        "createdAt": "2017-06-29T13:12:00Z",
        "updatedAt": "2017-06-29T13:12:00Z",
        "author": {
          "login": "dsplaisted"
        }
      },
      {
        "body": "> I think there are a lot of assumptions across the tooling that portable, .NET Standard, or .NET Core projects only support string resources.\r\n\r\nString resources are supported to be accessed through the PRI. but other resources should be supported inside the managed image which you can get into it using Assembly.GetManifestResourceStream. \r\nmsbuild task shouldn't fail anyway even if this resource is not supported as it shouldn't do anything with it. I opened the issue here so we can start fixing it in msbuild as the failing task belong to msbuild\r\n",
        "createdAt": "2017-06-29T16:12:56Z",
        "updatedAt": "2017-06-29T16:12:56Z",
        "author": {
          "login": "tarekgh"
        }
      }
    ]
  }
}