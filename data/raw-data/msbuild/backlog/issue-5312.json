{
  "number": 5312,
  "title": "System.Drawing.Common.dll is not added to Net Core build output",
  "body": "### Steps to reproduce\r\n\r\nCreate an application for .Net Core add System.Drawing.Common Nuget or Direct dll reference, and build. You will see that the dll is not in the output directory. \r\n\r\nThis issue causes runtime errors in Linux containers if you run Build and Publish processes on Windows machine or TFS server and then try to run them on Linux container.\r\nWhen processes that needs dll to run is called exception is thrown: \"System.IO.FileNotFoundException: Could not load file or assembly 'System.Drawing.Common'\", otherwise no build or deploy issues were observed.\r\n\r\nIssue observed after updating \r\nFrom: Microsoft (R) Build Engine version 16.4.0+e901037fe for .NET Core\r\nTo: Microsoft (R) Build Engine version 16.5.0+d4cbfca49 for .NET Core\r\n\r\nProject file\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp3.1</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Drawing.Common\" Version=\"4.7.0\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n\r\n```\r\n### Expected behavior\r\nSystem.Drawing.Common.dll is in output directory\r\n\r\n### Actual behavior\r\nSystem.Drawing.Common.dll is not added\r\n\r\nOS info:\r\nWindows 10, TFS server\r\n\r\nIf applicable, version of the tool that invokes MSBuild (Visual Studio, dotnet CLI, etc):\r\n Build Engine version 16.5.0+d4cbfca49 for .NET Core",
  "state": "CLOSED",
  "createdAt": "2020-04-24T09:37:23Z",
  "updatedAt": "2024-02-21T17:04:05Z",
  "closedAt": "2020-04-29T16:15:37Z",
  "author": {
    "login": "Persimus"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Hi @Persimus have you tried using https://msbuildlog.com to obtain a .binlog from your scenario and investigate it? You can search for `did not copy System.Drawing.Common.dll` in the log viewer.\r\n\r\nHere's a more detailed article about how to investigate issues like these:\r\nhttps://github.com/microsoft/msbuild/blob/master/documentation/wiki/ResolveAssemblyReference.md",
        "createdAt": "2020-04-26T04:49:33Z",
        "updatedAt": "2020-04-26T04:49:33Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "Thank you @KirillOsenkov for sharing the tool.\r\nIt seems that on 16.5 the System.Drawing.Common and some other libraries in my project are set to `CopyLocal = false` while I assume on older version 16.4 it was set to `CopyLocal = true`",
        "createdAt": "2020-04-28T07:36:11Z",
        "updatedAt": "2020-04-28T07:36:11Z",
        "author": {
          "login": "Persimus"
        }
      },
      {
        "body": "Hmm, this is interesting. I am able to reproduce, and indeed the files are not copied to output at all.\r\n\r\nNot sure how, if ever, it used to work before.\r\n\r\nI do see that `ResolvePackageAssets` adds the .dll to the `RuntimeCopyLocalItems`:\r\n![image](https://user-images.githubusercontent.com/679326/80533435-774bc780-8952-11ea-835e-c28439bdc660.png)\r\n\r\nAha, but I do see that if you set the `CopyLocalLockFileAssemblies` to true they will get copied:\r\n\r\n`msbuild /r /bl 1.csproj /p:CopyLocalLockFileAssemblies=true`\r\n\r\nOr, in the .csproj file:\r\n\r\n```\r\n<PropertyGroup>\r\n  <CopyLocalLockFileAssemblies>true</CopyLocalLockFileAssemblies>\r\n</PropertyGroup>\r\n```\r\n\r\nCan you try that and see if it works? Not sure if it's a bug or by-design, and whether it's documented anywhere.",
        "createdAt": "2020-04-28T20:21:40Z",
        "updatedAt": "2020-04-28T20:21:40Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "I've filed an issue here to clarify and document this behavior so it's not so confusing:\r\nhttps://github.com/microsoft/msbuild/issues/5321\r\n\r\nMeanwhile, @Persimus have you tried invoking `dotnet publish` or `msbuild /r /bl /t:Publish`? This should produce properly laid out output and copy all the necessary things.",
        "createdAt": "2020-04-28T20:26:30Z",
        "updatedAt": "2020-04-28T20:26:30Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "I think I need to elaborate as my issue is a bit more complex.\r\nI am using EPPlus package in one of my libraries to generate Excel file, it has a System.Drawing.Common as one of their dependencies. So my dependency tree look like this:\r\n\r\n- WebService\r\n  - ExcelLibrary  \r\n    - EPPlus\r\n      - System.Drawing.Common\r\n\r\nAt first (a year ago) I had some issues with System.Drawing.Common library not appearing in the publish (as I needed to be in Linux container) so I added to my ExcelLibrary, like this: \r\n\r\n- WebService\r\n  - ExcelLibrary \r\n    - System.Drawing.Common\r\n    - EPPlus\r\n      - System.Drawing.Common\r\n\r\nEverything worked fine, build on my machine and TFS build server generated dll and I pushed TFS published content directly into my pod as dlls in my deploy pipeline.\r\n\r\nSystem worked as intended until MSbuild 16.5 update, I am sure about cause of the problem because I have two almost identical builds an hour apart of which first worked fine and the second had missing dlls in its artifacts, only difference Build Engine version.\r\n\r\n**So now what I have tried, and what doesn't work:**\r\n- Adding `<RestoreProjectStyle>PackageReference</RestoreProjectStyle>` doesn't work.\r\n- Adding `<CopyLocalLockFileAssemblies>true</CopyLocalLockFileAssemblies>` to ExcelLibrary  works as it creates dll in libraries build directory, but doesn't move the dlls to the WebService, adding `<CopyLocalLockFileAssemblies>true</CopyLocalLockFileAssemblies>` to WebService doesn't change anything either, even though `packages.lock.json` are the same: \r\n`\"System.Drawing.Common\": {\r\n        \"type\": \"Transitive\",\r\n        \"resolved\": \"4.7.0\",\r\n        \"contentHash\": \"v+XbyYHaZjDfn0ENmJEV1VYLgGgCTx1gnfOBcppowbpOAriglYgGCvFCPr2EEZyBvXlpxbEsTwkOlInl107ahA==\",\r\n        \"dependencies\": {\r\n          \"Microsoft.NETCore.Platforms\": \"3.1.0\",\r\n          \"Microsoft.Win32.SystemEvents\": \"4.7.0\"\r\n        }\r\n      }`\r\n- Adding System.Drawing.Common Nuget to WebService doesn't work, also removing one from ExcelLibrary doesn't work.\r\n- Adding direct reference to System.Drawing.Common.dll for either WebService or ExcelLibrary doesn't work.\r\n- `dotnet build` or `dotnet publish`, and Visual Studio Build doesn't work \r\n- Weird combinations of above also don't work.\r\n\r\nAny additional possible solutions are welcome.\r\n",
        "createdAt": "2020-04-29T08:11:37Z",
        "updatedAt": "2020-04-29T08:13:31Z",
        "author": {
          "login": "Persimus"
        }
      },
      {
        "body": "@cdmihai ",
        "createdAt": "2020-04-29T15:58:18Z",
        "updatedAt": "2020-04-29T15:58:18Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "This issue was moved to dotnet/sdk#11489",
        "createdAt": "2020-04-29T16:15:36Z",
        "updatedAt": "2020-04-29T16:15:36Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}