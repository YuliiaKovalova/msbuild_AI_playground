{
  "number": 7518,
  "title": "Building vcxproj with P2P to multi-targeting csproj fails in Visual Studio build or CLI with BuildProjectReferences=false",
  "body": "### Issue Description\r\n\r\nvcxproj fails to set the `TargetFramework` global property on a P2P to a multi-targeting csproj when `BuildProjectReferences` is set to false, which VS does by default.\r\n\r\n### Steps to Reproduce\r\n\r\nRepro solution: [MTvcTest.zip](https://github.com/dotnet/msbuild/files/8414587/MTvcTest.zip)\r\n\r\n1. Create a VS solution\r\n2. Add a csproj (SDK style) that targets net6.0 and net472\r\n3. Add a vcxproj\r\n4. Add a P2P from the vcxproj to the csproj\r\n5. Build\r\n\r\n### Expected Behavior\r\n\r\nThe build succeeds in VS and msbuild.exe\r\n\r\n### Actual Behavior\r\n\r\nThe build succeeds at the command line and fails in VS. \r\nIt also fails at the CLI when `/p:buildprojectreferences=false` is specified.\r\nSee [binlog](https://microsoft-my.sharepoint.com/:u:/p/andarno/EWS3j458QutJuQLo4mE5TQgBnRJZfOFiCpbg1w6N3XMztg?e=jEdMHU).\r\n\r\n> \"C:\\temp\\MTvcTest\\VCApp\\VCApp.vcxproj\" (default target) (1) ->\r\n\"C:\\temp\\MTvcTest\\CSharpLib\\CSharpLib.csproj\" (GetTargetPath target) (2:4) ->\r\n  C:\\temp\\MTvcTest\\CSharpLib\\CSharpLib.csproj : error MSB4057: The target \"GetTargetPath\" does not exist in the project.\r\n\r\n### Analysis\r\n\r\nThe `TargetFramework` global property isn't set when invoking the P2P.\r\n\r\n\r\n### Versions & Configurations\r\n\r\nMicrosoft (R) Build Engine version 17.2.0-preview-22178-04+ce7523296 for .NET Framework\r\n",
  "state": "OPEN",
  "createdAt": "2022-04-05T03:25:15Z",
  "updatedAt": "2024-01-31T08:17:37Z",
  "closedAt": null,
  "author": {
    "login": "AArnott"
  },
  "labels": [
    "bug",
    "needs-design",
    "Partner request",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "The chain of events for SetTargetFramework not getting set:\r\n\r\n1. Microsoft.CppBuild.targets intentionally clears out TargetFrameworkMoniker (not super relevant for the provided binlog)\r\n<img width=\"652\" alt=\"image\" src=\"https://user-images.githubusercontent.com/4691428/163437423-b4beff43-f7bb-437d-a64d-5d42c62d5324.png\">\r\n\r\n2. Common.CurrentVersion.Targets tries to set `ReferringTargetFrameworkForProjectReferences` to `TargetFrameworkMoniker`, but it's empty.\r\nhttps://github.com/dotnet/msbuild/blob/18fc0b3dd9dfd7cbb83272f13de4a89e8aa30531/src/Tasks/Microsoft.Common.CurrentVersion.targets#L1705-L1708\r\n\r\n4. The `GetReferenceNearestTargetFrameworkTask` task doesn't run because it's conditioned on `ReferringTargetFrameworkForProjectReferences` having a value.\r\n\r\nhttps://github.com/dotnet/msbuild/blob/18fc0b3dd9dfd7cbb83272f13de4a89e8aa30531/src/Tasks/Microsoft.Common.CurrentVersion.targets#L1811\r\n\r\nWhat's inherently confusing here is setting `BuildProjectReferences` to false, but expecting P2P's to build?\r\n\r\n[The docs](https://docs.microsoft.com/en-us/visualstudio/msbuild/common-msbuild-project-properties) say setting it to false would prevent up-to-date checks, but does that mean they should still build?",
        "createdAt": "2022-04-14T17:12:43Z",
        "updatedAt": "2022-04-14T17:12:43Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "Team Triage: The error makes sense considering a multi-targeted app doesn't have a single defined output like a single-targeted project does. We agree that there should be a way around this though, as a vcxproj targeting a multi-targeted app is a reasonable scenario. Marking as needs-design.\r\n\r\nOne potential path would be to add a stub `GetTargetPath` to avoid the error, but we want to preserve some sort of error for customers who disable TF negotiation and ProjRef a multi-targeted project.",
        "createdAt": "2022-04-21T17:16:44Z",
        "updatedAt": "2022-04-21T17:16:44Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "Thanks for investigating, @BenVillalobos. \r\n\r\nThis isn't a multi-targeted app though. The app is a vcxproj (since that's the top-level project). It references a multi-targeted *library*, which is certainly expected to work. That library may be used by other projects in the solution, such that multi-targeting makes sense. The vcxproj should pick the best TargetFramework from that library based on the vcxproj's own TargetFramework.\r\n\r\nAs for expecting its referenced projects to build, yes. BuildProjectReferences=false is used in VS, and VS's solution build manager guarantees that projects all build in dependency order. BuildProjectReferences is there to prevent double-builds, or otherwise to make one project's build fast by assuming its dependencies have already been built. It's acceptable in such a case to error out if the required dependencies are not actually built yet (if you need to read the file from disk that the dependency should have produced already).\r\nBut choosing a best TargetFramework with which to invoke the csproj doesn't require the dll to be on disk anyway. csproj to csproj has no problem with this. Why does vcxproj?",
        "createdAt": "2022-05-06T14:09:39Z",
        "updatedAt": "2022-05-06T14:09:39Z",
        "author": {
          "login": "AArnott"
        }
      },
      {
        "body": "> The vcxproj should pick the best TargetFramework from that library based on the vcxproj's own TargetFramework.\r\n\r\nDo you actually want this `.vcxproj` to use the outputs of the library?\r\n\r\n**My 2c:** It sounds like the root of your problem is that you want your `.vcxproj` to act as a pseudo `dirs.proj` and doesn't necessarily care about _using_ the outputs of the csproj. If that's the case, the real solution here is to define a stub target for `GetTargetPath` in this scenario to avoid a failing build.\r\n\r\nIf you do want it to use the outputs, we need to design up a way for vcxproj's to pick a default, or define a way for the vcxproj to specify.",
        "createdAt": "2022-05-10T22:40:22Z",
        "updatedAt": "2022-05-10T22:41:38Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "> Do you actually want this .vcxproj to use the outputs of the library?\r\n\r\nIn my repro it does. It's perfectly legit for a vcxproj to reference an assembly, and this should Just Work as far as TFM negotiation. The really unexpected bit is that it _does_ work, unless BuildProjectReferences=false, which really suggests to me that something is broken here.",
        "createdAt": "2022-05-11T21:41:38Z",
        "updatedAt": "2022-05-11T21:41:38Z",
        "author": {
          "login": "AArnott"
        }
      }
    ]
  }
}