{
  "number": 1475,
  "title": "Conditioned item removes should be ignored when ShouldEvaluateForDesignTime is true",
  "body": "With VS2017:\r\n\r\n- Create a new .NET Core Console app (or .NET Standard Class Library)\r\n- Add a new folder to the project, named \"Folder\"\r\n- Add a new class inside the folder\r\n- Add the following to the project file, and save:\r\n\r\n```xml\r\n  <ItemGroup Condition=\"'true' == 'false'\">\r\n    <Compile Remove=\"Folder\\**\" />\r\n  </ItemGroup>\r\n```\r\n\r\nEXPECTED: Solution explorer still shows the folder and the source code file inside it\r\nACTUAL: The folder and source file disappear from solution explorer\r\n\r\nThis is probably because Visual Studio uses `ShouldEvaluateForDesignTime` = true when getting the `Compile` items to display in solution explorer.  When this property is true, conditions are ignored when evaluating items.  This was presumably done so that all source files would show up in solution explorer even if they were conditioned on a property such as the current configuration.\r\n\r\nNow that we've added support for `Remove` for items during evaluation, ignoring the conditions entirely is probably not the right thing to do.  When ShouldEvaluateForDesignTime is true, we should probably ignore any Removes that could be affected by a Condition.  That preserves the original intent of gathering all the items that might be included for different property values.",
  "state": "CLOSED",
  "createdAt": "2016-12-14T02:30:48Z",
  "updatedAt": "2024-02-21T17:23:25Z",
  "closedAt": "2017-01-30T17:18:46Z",
  "author": {
    "login": "dsplaisted"
  },
  "labels": [
    "bug",
    ".NET Core",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "cdmihai"
      }
    ]
  },
  "milestone": {
    "title": "Visual Studio 15 RTW"
  },
  "comments": {
    "nodes": [
      {
        "body": "I'm no longer certain that this is related to `ShouldEvaluateForDesignTime`, but there's certainly a bug somewhere.  Item `Remove`s that should be disabled by conditions seem to always apply when Visual Studio does its project evaluation.",
        "createdAt": "2017-01-13T21:37:46Z",
        "updatedAt": "2017-01-13T21:37:46Z",
        "author": {
          "login": "dsplaisted"
        }
      },
      {
        "body": "This problem manifests for both Remove and Update.\r\n\r\n`Project.Items` is supposed to contain the items with conditions evaluated. It should be equal to `ProjectInstance.Items`. The issue with these items is that both Remove and Update operate on these items, even if their condition is false.\r\n\r\n `Project.ItemsIgnoringConditions` is supposed to contain all the items, ignoring conditions. `ProjectInstance` does not have this. This item works as expected.\r\n\r\nThe problem appears because `LazyItemList.ComputeItems` executes the item operations on one single [`ImmutableList<ItemData>`](https://github.com/Microsoft/msbuild/blob/xplat/src/XMakeBuildEngine/Evaluation/LazyItemEvaluator.cs#L290) list. When the evaluator gets all the items from the LazyItemEvaluator, it constructs Items and ItemsIgnoringCondition from this list. This works fine with include operations which are additive / local, but not with remove / update which mutate other items.\r\n",
        "createdAt": "2017-01-22T00:40:52Z",
        "updatedAt": "2017-01-22T01:18:31Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "+@jviau for awareness. Does CPS use Items or ItemsIgnoringConditions?",
        "createdAt": "2017-01-22T00:42:41Z",
        "updatedAt": "2017-01-22T00:42:59Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "When displaying items on the solution explorer CPS uses `ProjectInstance.Items`",
        "createdAt": "2017-01-22T01:10:06Z",
        "updatedAt": "2017-01-22T01:10:06Z",
        "author": {
          "login": "jviau"
        }
      },
      {
        "body": "@davkean, @jviau , @lifengl, @rainersigwald \r\n\r\nHere is how I think `Remove` and `Update` should act on `Project.ItemsIgnoringCondition` (`IIC`). Let me know if this would break any scenarios for you:\r\n\r\n`Remove` operations should only apply to `IIC` if they have no Condition attribute. Otherwise, if conditions are present, Remove would take out items, thus breaking `IIC`'s contract of showing all items ignoring conditions.\r\n\r\n`Update` should behave the same: only the `Update` operations with no Condition attributes should go into `IIC`. Otherwise you can get weird things like the following example:\r\n\r\n```xml\r\n<Compile Condition=\u201dTFM == net46\u201d Update=\u201dFoo.cs\u201d Metadata1=\u201dnet46\u201d Metadata2=\u201d net46\u201d/>\r\n<Compile Condition=\u201dTFM == netstandard1.6\u201d Update=\u201dFoo.cs\u201d Metadata1=\u201d netstandard1.6\u201d />\r\n```\r\n\r\nIf we were to include the effect of `Update` operations that have Conditions on them (regardless whether the condition is true or false), then the above snippet would create the item `Foo.cs` with metadata {Metadata1=\u201d netstandard1.6\u201d, Metadata2=\u201d net46\u201d}.\r\n\r\nOn the other hand, the Metadata elements only evaluate if their condition is true, even for `IIC`\r\n\r\nAlso, because of our new lazy item evaluation, implementing this without compromising either memory or CPU is tricky. The approach I'm going with is to deffer computation of `ItemsIgnoringCondition` until someone calls it. Right now it's filled in just in time (and thus partially causing this bug). Then, when someone calls it, I'll rerun only the item evaluation phase of the evaluator to fill `IIC` in, and I'll parametirize item evaluation to do whatever funky processing we want for `Remove` and `Update` on `IIC`. Then I'll cache the results (in the same bit of memory that was used up until now for IIC, so no extra memory) and invalidate the cache when the project gets dirtied.\r\nSo, if there's no calls to `Project.ItemsIgnoringCondition`, then MSBuild evaluation will get faster and consume less memory.\r\n\r\n",
        "createdAt": "2017-01-26T21:32:17Z",
        "updatedAt": "2017-01-26T21:50:00Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "It turns out my proposed fix requires some changes that are too risky to do for the RTW lock-down, so I'm going to spread things out: I am going to fix `Project.Items` for RTW and leave `Project.ItemsIgnoringCondition` in a state where `Remove` and `Update` whose condition evaluates to false are not applied to it. Then I'll fix the latter for the following VS update.",
        "createdAt": "2017-01-27T00:16:22Z",
        "updatedAt": "2017-01-27T00:17:15Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "`Project.Items` fixed in #1617. #1616 tracks `Project.ItemsIgnoringCondition`",
        "createdAt": "2017-01-30T17:18:46Z",
        "updatedAt": "2017-01-30T17:18:46Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "@dsplaisted we ran into an issue that looks related: we can't use the following trick\r\n```\r\n\t<ItemGroup Condition=\"'$(TargetFramework)'=='net6.0'\">\r\n\t\t<Compile Remove=\"DesignTimeBase.cs\" />\r\n\t\t...\r\n```\r\nbecause VS doesn't show the file in Solution Explorer. Can you confirm that #1616 covers that, and if it's ever going to be solved?",
        "createdAt": "2022-08-18T05:31:21Z",
        "updatedAt": "2022-08-18T05:31:21Z",
        "author": {
          "login": "Leon99"
        }
      },
      {
        "body": "I'm not sure if that's the same issue.  I don't think we have any near term plans to make changes here.\r\n\r\nYou might look at how .NET Maui projects handle files which are specific to given target frameworks and try following that pattern.",
        "createdAt": "2022-08-18T17:36:25Z",
        "updatedAt": "2022-08-18T17:36:25Z",
        "author": {
          "login": "dsplaisted"
        }
      },
      {
        "body": "> You might look at how .NET Maui projects handle files which are specific to given target frameworks and try following that pattern.\r\n\r\nThanks for the idea @dsplaisted!\r\nCould you point me in the right direction? I can see a bunch of platform-specific files in the MAUI template project, but there's nothing in .csproj that would reference them:\r\n![image](https://user-images.githubusercontent.com/6840381/185517935-ee870569-bd96-4326-86f7-804b0d38c94d.png)\r\n",
        "createdAt": "2022-08-19T00:37:04Z",
        "updatedAt": "2022-08-19T00:37:04Z",
        "author": {
          "login": "Leon99"
        }
      },
      {
        "body": "@jonathanpeppers @Redth @mattleibow Could you point to some information on how .NET Maui apps handle files which are specific to a given TargetFramework, while ensuring they all appear in solution explorer?",
        "createdAt": "2022-08-19T14:36:43Z",
        "updatedAt": "2022-08-19T14:36:43Z",
        "author": {
          "login": "dsplaisted"
        }
      },
      {
        "body": "This is the latest we ended up with: https://github.com/dotnet/maui/pull/6681\r\n\r\n@tmeschter might also have some details.",
        "createdAt": "2022-08-19T14:45:11Z",
        "updatedAt": "2022-08-19T14:45:11Z",
        "author": {
          "login": "jonathanpeppers"
        }
      }
    ]
  }
}