{
  "number": 1185,
  "title": "Cannot update an imported file within a build",
  "body": "This was reported offline by @kzu. Thanks!\n\nIn this situation:\n1. A multi-project build with a \"coordinating\" project (like a `.sln` build).\n2. The coordinating project calls into leaf projects with one set of global properties to extract some information.\n3. The coordinating project updates files imported by leaf projects (think \"NuGet restore\").\n4. The coordinating project then builds leaf projects again with a different set of global properties (so they get fully re-evaluated/rebuilt).\n\nThe builds in step 4 do not pick up the new versions of files updated by step 3--they continue to use the file contents from their original form read in step 2.\n\nThis breaks multi-step restore + build in a single invocation, even though the evaluation and builds are separated by being in different global property spaces.\n\nThis is happening because of caching of imported file contents done by `ProjectRootElementCache`.  The cache can be set to invalidate its entries based on file timestamp checks by [constructor argument](https://github.com/Microsoft/msbuild/blob/68b96728bc2b7c554a37d12723e68e5d37768743/src/XMakeBuildEngine/Evaluation/ProjectRootElementCache.cs#L131), but this is not done by the [relevant call](https://github.com/Microsoft/msbuild/blob/cf7b9d2226e8466710972e0b3da53cd67ebba7f7/src/XMakeBuildEngine/Definition/ProjectCollection.cs#L256) in a command-line build, from this callstack:\n\n```\n    Microsoft.Build.dll!Microsoft.Build.Evaluation.ProjectRootElementCache.ProjectRootElementCache(bool autoReloadFromDisk) Line 137\n    Microsoft.Build.dll!Microsoft.Build.Evaluation.ProjectCollection.ProjectCollection(System.Collections.Generic.IDictionary<string, string> globalProperties, System.Collections.Generic.IEnumerable<Microsoft.Build.Framework.ILogger> loggers, System.Collections.Generic.IEnumerable<Microsoft.Build.Logging.ForwardingLoggerRecord> remoteLoggers, Microsoft.Build.Evaluation.ToolsetDefinitionLocations toolsetDefinitionLocations, int maxNodeCount, bool onlyLogCriticalEvents) Line 256\n    MSBuild.exe!Microsoft.Build.CommandLine.MSBuildApp.BuildProject(string projectFile, string[] targets, string toolsVersion, System.Collections.Generic.Dictionary<string, string> globalProperties, Microsoft.Build.Framework.ILogger[] loggers, Microsoft.Build.Framework.LoggerVerbosity verbosity, Microsoft.Build.CommandLine.DistributedLoggerRecord[] distributedLoggerRecords, bool needToValidateProject, string schemaFile, int cpuCount, bool enableNodeReuse, System.IO.TextWriter preprocessWriter, bool debugger, bool detailedSummary) Line 920\n    MSBuild.exe!Microsoft.Build.CommandLine.MSBuildApp.Execute(string commandLine) Line 545\n    MSBuild.exe!Microsoft.Build.CommandLine.MSBuildApp.Main() Line 202\n```\n\nThere's no way to specify that the cache _should_ check for updated targets within a build. Flipping that bit with a debugger produces the expected result (from the `MSBUILDDEBUGXMLCACHE=1` debug log):\n\n```\nP 8232 | Satisfied from XML cache: C:\\Program Files (x86)\\MSBuild\\Microsoft\\NuGet\\Microsoft.NuGet.targets\nP 8232 | Forgetting: S:\\NuGetizer\\src\\Build\\Sample\\Sample.nuget.targets\nP 8232 | Out of date dropped from XML cache: S:\\NuGetizer\\src\\Build\\Sample\\Sample.nuget.targets\nP 8232 | Adding: S:\\NuGetizer\\src\\Build\\Sample\\Sample.nuget.targets\nP 8232 | Satisfied from XML cache: C:\\Users\\raines\\.nuget\\packages\\GitInfo\\1.1.32\\build\\GitInfo.targets\n```\n",
  "state": "CLOSED",
  "createdAt": "2016-10-12T15:32:56Z",
  "updatedAt": "2024-02-21T17:25:15Z",
  "closedAt": "2019-11-04T21:42:05Z",
  "author": {
    "login": "rainersigwald"
  },
  "labels": [
    "needs-design",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Backlog"
  },
  "comments": {
    "nodes": [
      {
        "body": "I don't know why the default cache is constructed with `autoReloadFromDisk = false`. I can handwave at \"perf reasons\" but that doesn't _seem_ like it's an automatic deal killer. And `OutOfProcNode` [sets it to true](https://github.com/rainersigwald/msbuild/blob/68b96728bc2b7c554a37d12723e68e5d37768743/src/XMakeBuildEngine/BackEnd/Node/OutOfProcNode.cs#L163).\n\nIt seems like the fix here is to check timestamps by default.\n",
        "createdAt": "2016-10-12T15:38:01Z",
        "updatedAt": "2016-10-12T15:38:01Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rohit21agrawal this might be relevant to you too\n",
        "createdAt": "2016-10-12T15:38:48Z",
        "updatedAt": "2016-10-12T15:38:48Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Comments from standup today:\n- [ ] Provide an escape-hatch environment variable\n- [ ] Check on a large solution (Chromium?) to check perf impact of the extra up-to-date checks\n- [ ] [if perf implications] Could this be set as a property on the `MSBuild` task somehow?\n",
        "createdAt": "2016-10-20T17:50:47Z",
        "updatedAt": "2016-10-20T17:50:47Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": ":+1:!\n",
        "createdAt": "2016-10-20T18:53:06Z",
        "updatedAt": "2016-10-20T18:53:06Z",
        "author": {
          "login": "kzu"
        }
      },
      {
        "body": "Discovered additional considerations here after talking with some folks on the [Live Unit Testing](https://blogs.msdn.microsoft.com/visualstudio/2016/11/18/live-unit-testing-visual-studio-2017-rc/) team. They are deliberately taking a snapshot of a set of projects by loading them into the cache, and relying on that to ensure that project-to-project references see a consistent view of the world, even while the user is typing.\r\n\r\nUnfortunately, we now have conflicting desires: this issue, and the ability to take a snapshot. Since the legacy behavior allowed the LUT folks to get snapshots, I'm going to defer to that, meaning we can't solve this the \"easy way\" I proposed in the PR and need a more sophisticated design.",
        "createdAt": "2016-11-21T17:21:14Z",
        "updatedAt": "2016-11-21T17:21:14Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Hm. How about an explicit property (that doesn't sound as\"scary\" as\nMSBUILDDEBUGXMLCACHE) that triggers this \"live project updates\" behavior?\n\nOn Mon, Nov 21, 2016, 2:21 PM Rainer Sigwald notifications@github.com\nwrote:\n\n> Discovered additional considerations here after talking with some folks on\n> the Live Unit Testing\n> https://blogs.msdn.microsoft.com/visualstudio/2016/11/18/live-unit-testing-visual-studio-2017-rc/\n> team. They are deliberately taking a snapshot of a set of projects by\n> loading them into the cache, and relying on that to ensure that\n> project-to-project references see a consistent view of the world, even\n> while the user is typing.\n> \n> Unfortunately, we now have conflicting desires: this issue, and the\n> ability to take a snapshot. Since the legacy behavior allowed the LUT folks\n> to get snapshots, I'm going to defer to that, meaning we can't solve this\n> the \"easy way\" I proposed in the PR and need a more sophisticated design.\n> \n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> https://github.com/Microsoft/msbuild/issues/1185#issuecomment-262005321,\n> or mute the thread\n> https://github.com/notifications/unsubscribe-auth/AAKW683ysxOVI8ciqHqQzP28dDhPzf2hks5rAdMRgaJpZM4KU5LR\n> .\n> \n> ## \n\n## \n\n/kzu from mobile\n",
        "createdAt": "2016-11-21T17:52:07Z",
        "updatedAt": "2016-11-21T17:52:07Z",
        "author": {
          "login": "kzu"
        }
      },
      {
        "body": "Team triage: this is not really feasible. Closing.",
        "createdAt": "2019-11-04T21:42:05Z",
        "updatedAt": "2019-11-04T21:42:05Z",
        "author": {
          "login": "livarcocc"
        }
      }
    ]
  }
}