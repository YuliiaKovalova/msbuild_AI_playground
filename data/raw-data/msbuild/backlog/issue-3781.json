{
  "number": 3781,
  "title": "ImportsBefore mechanism not working from System Account",
  "body": "Might relate to #1830\r\n\r\nThe ImportsBefore file is not being picked up when MSBuild is launched using the System Account. From a user account, it works as expected.\r\n\r\nThe properties all seem correct with respect to what [Microsoft.CSharp.CurrentVersion.targets#L27](Microsoft.CSharp.CurrentVersion.targets#L27) expects, as shown during a `/v:diag` build:\r\n```\r\nMSBuildToolsVersion = 15.0\r\nMSBuildUserExtensionsPath = C:\\Windows\\system32\\config\\systemprofile\\AppData\\Local\\Microsoft\\MSBuild\r\nMSBuildVersion = 15.8.168\r\nImportUserLocationsByWildcardBeforeMicrosoftCSharpTargets = true\r\n```\r\n\r\n### Steps to reproduce\r\n\r\n1. Run [`psexec -i -s cmd.exe`](http://download.sysinternals.com/files/PSTools.zip)\r\n2. `\"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\MSBuild\\15.0\\Bin\\MSBuild.exe\" C:\\Project\\Project.csproj`\r\n\r\nProject file \r\n- `C:\\Project\\Project.csproj`\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<Project xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\r\n  <Import Project=\"$(MSBuildBinPath)\\Microsoft.CSharp.targets\" />\r\n</Project>\r\n```\r\n\r\nImportsBefore files (duplicated)\r\n- `C:\\Users\\%USERNAME%\\AppData\\Local\\Microsoft\\MSBuild\\15.0\\Microsoft.Common.targets\\ImportBefore\\Test.targets`\r\n- `C:\\Windows\\system32\\config\\systemprofile\\AppData\\Local\\Microsoft\\MSBuild\\15.0\\Microsoft.Common.targets\\ImportBefore\\Test.targets`\r\n```xml\r\n<Project xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\r\n  <Target Name=\"MyImportBeforeTarget\" BeforeTargets=\"CoreCompile\">\r\n    <Error Text=\"ImportsBefore feature is working as expected.\" />\r\n  </Target>\r\n</Project>\r\n```\r\n\r\n### Expected  behavior\r\n```\r\n\"C:\\Project\\Project.csproj\" (default target) (1) ->\r\n(MyImportBeforeTarget target) ->\r\n  C:\\Windows\\system32\\config\\systemprofile\\AppData\\Local\\Microsoft\\MSBuild\\15.0\\Microsoft.Common.targets\\ImportBefore\\Test.targets(3,5): error : ImportsBefore feature is working as expected. [C:\\Project\\Project.csproj]\r\n```\r\n\r\n### Actual behavior\r\n```\r\n\"C:\\Project\\Project.csproj\" (default target) (1) ->\r\n(CoreCompile target) ->\r\n  CSC : error CS5001: Program does not contain a static 'Main' method suitable for an entry point [C:\\Project\\Project.csproj]\r\n```\r\n\r\n### Environment data\r\n`msbuild /version` output:\r\n```\r\nMicrosoft (R) Build Engine version 15.8.168+ga8fba1ebd7 for .NET Framework\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n15.8.168.64424\r\n```\r\n\r\nOS info:\r\n\r\n* windows-1803-core\r\n* https://download.visualstudio.microsoft.com/download/pr/12210059/e64d79b40219aea618ce2fe10ebd5f0d/vs_BuildTools.exe with full install\r\n",
  "state": "CLOSED",
  "createdAt": "2018-09-21T17:02:30Z",
  "updatedAt": "2024-02-21T17:11:06Z",
  "closedAt": "2018-09-24T13:29:13Z",
  "author": {
    "login": "dbolkensteyn"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Digging a bit further into this: This indeed is related to #1830\r\n\r\nAccording to the [WoW64 Wikipedia article](https://en.wikipedia.org/wiki/WoW64), the `%SystemRoot%\\system32` folder is transparently translated into `%SystemRoot%\\SysWoW64` for 32-bits processes running on 64 bits Windows.\r\n\r\nHence, by placing the `Test.targets` file into  the `C:\\Windows\\SysWOW64\\config\\systemprofile\\AppData\\Local\\Microsoft\\MSBuild\\15.0\\Microsoft.Common.Targets\\ImportBefore` folder, it does get picked up by MSBuild.\r\n\r\nThe same Wikipedia article also mentions that 32 bits applications can access the native `%SystemRoot%\\system32` under `%SystemRoot%\\sysnative`.\r\n\r\nSo, I could copy my targets file to 32 bits path for MSBuild to find, or MSBuild could always look for target files under both the 32-bits and the 64-bits paths.\r\n\r\nOn my side I personally believe that the current behaviour is in fact acceptable. The integration is a bit complicated due to WoW64, and it's probably not MSBuild's role to attempt to fully abstract away those tiny details.\r\n\r\nWDYT @rainersigwald ?",
        "createdAt": "2018-09-24T08:55:31Z",
        "updatedAt": "2018-09-24T10:02:01Z",
        "author": {
          "login": "dbolkensteyn"
        }
      },
      {
        "body": "> On my side I personally believe that the current behaviour is in fact acceptable. The integration is a bit complicated due to WoW64, and it's probably not MSBuild's role to attempt to fully abstract away those tiny details.\r\n> \r\n> WDYT @rainersigwald ?\r\n\r\nThat's my position as well. I would rather not run code in every build to detect the relatively-rare running-as-System case, especially when the code would be working around intentional Windows behavior (even if I don't like that behavior). We get reports on this occasionally, which I'd like to fix, but changing the behavior in MSBuild-owned file accesses wouldn't fix everything--for example, you could write a file from 32-bit MSBuild and try to read it from a 64-bit process, and there's nothing we could do to fix that.",
        "createdAt": "2018-09-24T13:03:26Z",
        "updatedAt": "2018-09-24T13:03:26Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}