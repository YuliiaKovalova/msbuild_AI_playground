{
  "number": 9367,
  "title": "Add System.Text.Json and System.Memory as builtin implicit references",
  "body": "To use (even a simplest) JSON serialization in inline tasks (`UsingTask`), today we are expected to specify two additional references:\r\n\r\n```csproj\r\n  <UsingTask\r\n    TaskName=\"JsonShenanigans\"\r\n    TaskFactory=\"RoslynCodeTaskFactory\"\r\n    AssemblyName=\"Microsoft.Build.Tasks.Core\">\r\n    <Task>\r\n      <Reference Include=\"System.Text.Json\"/>\r\n      <Reference Include=\"System.Memory\"/>\r\n      <Using ...\r\n```\r\n\r\nIt would be nice to not require specifying these two references by promoting S.T.J assembly as a first-class citizen of `RoslynCodeTaskFactory`-based UsingTask.\r\n\r\nps - perhaps the entire set of current `Microsoft.NETCore.App` / Shared Framework references can be available implicitly in this scope if it does not violate any design principle? Requiring user to only specify `<Using Namespace=\"..\" />` to use anything out of SFX.",
  "state": "OPEN",
  "createdAt": "2023-10-28T15:40:06Z",
  "updatedAt": "2024-11-30T14:55:57Z",
  "closedAt": null,
  "author": {
    "login": "am11"
  },
  "labels": [
    "help wanted",
    "Area: Tasks",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "> It would be nice to not require specifying these two references by promoting S.T.J assembly as a first-class citizen of `RoslynCodeTaskFactory`-based UsingTask.\r\n\r\nIt makes sense to me that we could provide \"all the stuff we ourselves depend on\" as easy references in inline tasks, which would include these.\r\n\r\n> ps - perhaps the entire set of current `Microsoft.NETCore.App` / Shared Framework references can be available implicitly in this scope if it does not violate any design principle? Requiring user to only specify `<Using Namespace=\"..\" />` to use anything out of SFX.\r\n\r\nThis I'm less sure of, because it would mismatch between the .NET SDK MSBuild (on .NET 8+) and the VS MSBuild (on .NET 4.8), making it harder to ship cross-platform works-everywhere inline tasks (they'd need explicit references on Framework but not on Core).",
        "createdAt": "2023-10-30T13:50:40Z",
        "updatedAt": "2023-10-30T13:50:40Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> This I'm less sure of, because it would mismatch between the .NET SDK MSBuild (on .NET 8+) and the VS MSBuild (on .NET 4.8), making it harder to ship cross-platform works-everywhere inline tasks (they'd need explicit references on Framework but not on Core).\r\n\r\nIf we have the ability to restrict it for NETCoreApp, that might be good enough and future-proof. i.e. whichever NETCoreApp is being used by current SDK process running the MSBuild, inline-tasks can access its assemblies. I am not familiar with the internals of `RoslynCodeTaskFactory`, and thought it to be only compatible with .NET Core. :)",
        "createdAt": "2023-10-30T14:44:44Z",
        "updatedAt": "2023-10-30T14:57:35Z",
        "author": {
          "login": "am11"
        }
      },
      {
        "body": "Team triage: we'd be willing to add STJ and S.Memory to the default list, but we haven't seen much demand for this so we're not planning to do the work in the near term.",
        "createdAt": "2023-11-01T15:40:41Z",
        "updatedAt": "2023-11-01T15:40:41Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald Hi, can take this task?",
        "createdAt": "2024-11-27T07:16:05Z",
        "updatedAt": "2024-11-27T07:16:05Z",
        "author": {
          "login": "newmasterSG"
        }
      },
      {
        "body": "Hi, while I was working on resolving this issue, I faced with problem of building project. I had added STJ and Memory to defaultNamespaces, but I got error which means need to add STJ assembly to compiler process, also I changed Microsoft.Build.Utilities.Core.dll at folder dotnet/sdk but got another problem, which is not related to this issue. After I researched at google and at code, I understood that when you tried to run dotnet build or msbuild it caused failure at building task because the assembly or library must also be present at netstandart for cross-platform.",
        "createdAt": "2024-11-30T14:53:45Z",
        "updatedAt": "2024-11-30T14:53:45Z",
        "author": {
          "login": "newmasterSG"
        }
      },
      {
        "body": "Can you tell me what would be the best thing to do here?",
        "createdAt": "2024-11-30T14:55:56Z",
        "updatedAt": "2024-11-30T14:55:56Z",
        "author": {
          "login": "newmasterSG"
        }
      }
    ]
  }
}