{
  "number": 5882,
  "title": "Building custom MSBuild tasks extending TrackedVCToolTask",
  "body": "I have a few custom MSBuild tasks, that extend `Microsoft.Build.CPPTasks.TrackedVCToolTask` from `Microsoft.Build.CPPTasks.Common.dll`. Nothing fancy, just override some logic and add new properties.\r\n\r\nI need my tasks to work in both Visual Studio 2017 and Visual Studio 2019. Ideally I would like to build just one version of DLL, that can be loaded and used in both editions of Visual Studio.\r\n\r\nThe problem is that `Microsoft.Build.CPPTasks.Common.dll` is shipped with Visual Studio and different editions have different versions. Visual Studio 2017 has version `15.0.0.0`, while Visual Studio 2019 -- `16.*` (e.g. `16.8.0.0`).\r\n\r\nMSBuild in Visual Studio 2019 has a binding redirect for `Microsoft.Build.CPPTasks.Common.dll`, but only for `16.*` -- https://github.com/dotnet/msbuild/blob/master/src/MSBuild/app.config#L55-L59.\r\n\r\nVisual Studio 2017 doesn't even have a binding redirect, so the `Microsoft.Build.CPPTasks.Common.dll` in Visual Studio must always match the one I used for building my custom tasks library.\r\n\r\nSo currently I have to build two versions of `MyCustomTasks.dll`:\r\n* One referencing `CPPTasks 15.0.0.0` (for Visual Studio 2017)\r\n* One referencing `CPPTasks 16.0.0.0` (for Visual Studio 2019)\r\n\r\nQuestions:\r\n\r\n* Is it somehow possible to build just one version that can work with both versions of Visual Studio?\r\n\r\n* What is the recommended way of writing custom tasks that depend on `Microsoft.Build.CPPTasks.Common.dll`? It seems that this library is not even available in Nuget, so I have to build against the one in my Visual Studio, which also doesn't seem ideal.\r\n\r\n* Can I ship a specific version `Microsoft.Build.CPPTasks.Common.dll` along with my `MyCustomTasks.dll`? I can imagine there might be conflicts if MSBuild tried to load two different versions. Also I'm not sure if it's allowed from licensing perspective.\r\n\r\nThanks!",
  "state": "CLOSED",
  "createdAt": "2020-11-13T15:11:10Z",
  "updatedAt": "2021-11-18T00:56:29Z",
  "closedAt": "2021-11-18T00:56:29Z",
  "author": {
    "login": "werat"
  },
  "labels": [
    "bug",
    "needs-triage"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Discussion"
  },
  "comments": {
    "nodes": [
      {
        "body": "/cc: @yuehuang010",
        "createdAt": "2020-11-25T16:58:18Z",
        "updatedAt": "2020-11-25T16:58:18Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "Kind reminder :)",
        "createdAt": "2020-12-09T09:28:14Z",
        "updatedAt": "2020-12-09T09:28:14Z",
        "author": {
          "login": "werat"
        }
      },
      {
        "body": "Hi, @werat, officially you will need a different DLL for 15.0 and 16.0.  It don't guarantee any backwards compatibility on any of the API in the DLL.  That said, Miscrosoft.Build.CPPTask.Common.dll is a fairly mature DLL and very little changes between versions.  Your DLL could be referenced by name but might have issues during binding or runtime.  You will need to test thoroughly.  \r\n\r\nFelix Huang from Visual Studio C++.  ",
        "createdAt": "2020-12-16T18:35:42Z",
        "updatedAt": "2020-12-16T18:35:42Z",
        "author": {
          "login": "yuehuang010"
        }
      },
      {
        "body": "> What is the recommended way of writing custom tasks that depend on Microsoft.Build.CPPTasks.Common.dll? It seems that this library is not even available in Nuget, so I have to build against the one in my Visual Studio, which also doesn't seem ideal.\r\n\r\nThe dll is not in a Nuget, you will have to reference the Dll directly from the Visual Studio folder.\r\n\r\n> Can I ship a specific version Microsoft.Build.CPPTasks.Common.dll along with my MyCustomTasks.dll? I can imagine there might be conflicts if MSBuild tried to load two different versions. Also I'm not sure if it's allowed from licensing perspective.\r\nIt is untested and I would guess it would lead to many more problems.\r\n\r\nTry this path. 1) Try shipping one DLL referring the 15.0.  This should load in 16.0.  If there are breaking changings, then 2) ship two DLL, then use <Using> in the .targets to switch between the versions.\r\n\r\nThanks\r\nFelix",
        "createdAt": "2020-12-16T19:04:05Z",
        "updatedAt": "2020-12-16T19:04:17Z",
        "author": {
          "login": "yuehuang010"
        }
      },
      {
        "body": "Seems resolved, right?",
        "createdAt": "2021-11-18T00:56:29Z",
        "updatedAt": "2021-11-18T00:56:29Z",
        "author": {
          "login": "Forgind"
        }
      }
    ]
  }
}