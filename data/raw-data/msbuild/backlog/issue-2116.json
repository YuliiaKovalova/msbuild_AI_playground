{
  "number": 2116,
  "title": "In certain cases, errors in one target don't stop a subsequent target from running and generating errors",
  "body": "In the .NET SDK, we have targets that run early on in the build process to verify things like whether the target framework is valid or not.  If we generate errors in those targets, we would expect targets that depend on the target that is generating an error not to run and not to generate errors.  However, this is not what is happening.  This means that the error that specifies the root cause of the problem can be lost amidst the many subsequent errors that might be generated.\r\n\r\nSee https://github.com/dotnet/sdk/issues/798 for more context.\r\n\r\nHere are two minimal repros of the issue:\r\n\r\n# GetReferenceAssemblyPaths error\r\n\r\n```xml\r\n<Project xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\" DefaultTargets=\"Build\">\r\n  \r\n  <Target Name=\"_CheckForUnsupportedTargetFramework\"\r\n      BeforeTargets=\"_CheckForInvalidConfigurationAndPlatform;_CheckCompileDesignTimePrerequisite;GetFrameworkPaths;GetReferenceAssemblyPaths;GenerateBuildRuntimeConfigurationFiles\">\r\n    <Error Text=\"Error in _CheckForUnsupportedTargetFramework\" />\r\n  </Target>\r\n\r\n  <Target Name=\"_CheckForInvalidConfigurationAndPlatform\" BeforeTargets=\"$(BuildDependsOn);Build\" />\r\n  \r\n  <PropertyGroup>\r\n    <BuildDependsOn>\r\n      EntityDeploy;\r\n      CoreBuild;\r\n    </BuildDependsOn>\r\n  </PropertyGroup>\r\n  \r\n  <Target Name=\"Build\" DependsOnTargets=\"$(BuildDependsOn)\" Returns=\"$(TargetPath)\" />\r\n\r\n  <Target Name=\"CoreBuild\" DependsOnTargets=\"PrepareForBuild;GenerateBuildRuntimeConfigurationFiles\"/>\r\n\r\n  <Target Name=\"PrepareForBuild\" DependsOnTargets=\"GetReferenceAssemblyPaths\"/>\r\n  \r\n  <Target Name=\"GetReferenceAssemblyPaths\">\r\n    <Error Text=\"GetReferenceAssemblyPaths Error\" />\r\n  </Target>\r\n\r\n  <Target Name=\"EntityDeploy\" Condition=\"'@(EntityDeploy)' != ''\" />\r\n</Project>\r\n```\r\n\r\nIn this repro, I would hope that the error in `_CheckForUnsupportedTargetFramework` would prevent subsequent targets from being run.  Something about the `EntityDeploy` target being added to the start of `BuildDependsOn`, and possibly the fact that `BuildDependsOn` is being used both in `Build` as `DependsOnTargets` and in `_CheckForInvalidConfigurationAndPlatform` as `BeforeTargets` is causing `GetReferenceAssemblyPaths` to run even after a previous target has failed.\r\n\r\n# GenerateBuildRuntimeConfigurationFiles error\r\n\r\n```xml\r\n<Project xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\" DefaultTargets=\"Build\">\r\n  \r\n  <Target Name=\"_CheckForUnsupportedTargetFramework\"\r\n      BeforeTargets=\"_CheckForInvalidConfigurationAndPlatform;_CheckCompileDesignTimePrerequisite;GetFrameworkPaths;GetReferenceAssemblyPaths;GenerateBuildRuntimeConfigurationFiles\">\r\n    <Error Text=\"Error in _CheckForUnsupportedTargetFramework\" />\r\n  </Target>\r\n\r\n  <Target Name=\"_CheckForInvalidConfigurationAndPlatform\" BeforeTargets=\"$(BuildDependsOn);Build\" />\r\n  \r\n  <PropertyGroup>\r\n    <BuildDependsOn>\r\n      CoreBuild;\r\n    </BuildDependsOn>\r\n  </PropertyGroup>\r\n  \r\n  <Target Name=\"Build\" DependsOnTargets=\"$(BuildDependsOn)\" Returns=\"$(TargetPath)\" />\r\n\r\n  <Target Name=\"CoreBuild\" DependsOnTargets=\"PrepareForBuild;GenerateBuildRuntimeConfigurationFiles\">\r\n    <OnError ExecuteTargets=\"_CleanRecordFileWrites\" />\r\n  </Target>\r\n\r\n  <Target Name=\"PrepareForBuild\" DependsOnTargets=\"GetReferenceAssemblyPaths\"/>\r\n  \r\n  <Target Name=\"GetReferenceAssemblyPaths\">\r\n    \r\n  </Target>\r\n\r\n  <Target Name=\"_CheckForCompileOutputs\"/>\r\n  <Target Name=\"_CleanGetCurrentAndPriorFileWrites\" DependsOnTargets=\"_CheckForCompileOutputs\" />\r\n  <Target Name=\"_CleanRecordFileWrites\" DependsOnTargets=\"_CleanGetCurrentAndPriorFileWrites\"/>\r\n\r\n  <Target Name=\"GenerateBuildRuntimeConfigurationFiles\" BeforeTargets=\"_CheckForCompileOutputs\">\r\n    <Error Text=\"GenerateBuildRuntimeConfigurationFiles Error\" />\r\n  </Target>\r\n  \r\n</Project>\r\n```\r\n\r\nThis is more straightforward.  When I run this I'd expect to only get the error from `_CheckForUnsupportedTargetFramework`.  However, I also get the error from `GenerateBuildRuntimeConfigurationFiles`.  It looks like the `OnError` task in `CoreBuild` is causing `_CleanRecordFileWrites` and its dependencies to run after an error is encountered.  I'm not sure exactly how to fix this though.\r\n\r\n",
  "state": "CLOSED",
  "createdAt": "2017-05-19T22:04:52Z",
  "updatedAt": "2024-02-21T17:19:02Z",
  "closedAt": "2017-05-25T21:51:01Z",
  "author": {
    "login": "dsplaisted"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "AndyGerlicher"
      }
    ]
  },
  "milestone": {
    "title": "MSBuild 15.3"
  },
  "comments": {
    "nodes": [
      {
        "body": "```XML\r\n<Project>\r\n  <Target Name=\"Build\" DependsOnTargets=\"ProduceError1;ProduceError2\" />\r\n\r\n  <Target Name=\"ProduceError1\" Condition=\"false\" />\r\n\r\n  <Target Name=\"ProduceError2\">\r\n    <Error Text=\"Error2\" />\r\n  </Target>\r\n\r\n  <Target Name=\"_Error1\" BeforeTargets=\"ProduceError1\">\r\n    <Error Text=\"Error1\" />\r\n  </Target>\r\n\r\n</Project>\r\n```\r\n\r\nHaven't looked into what to do about it yet, but here's a more minimal repro. The issue here is the condition. Since the target `ProduceError1` never actually runs the `TargetBuilder` ends up pushing a `Dependencies` state to the `_targetsToBuild` stack which finds `_Error1` and runs it. If `ProduceError1` did run, it correctly doesn't try to find the dependencies or run them.\r\n",
        "createdAt": "2017-05-22T23:55:53Z",
        "updatedAt": "2017-05-23T18:35:00Z",
        "author": {
          "login": "AndyGerlicher"
        }
      }
    ]
  }
}