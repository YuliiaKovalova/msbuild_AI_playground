{
  "number": 6323,
  "title": "Source Generators fail in WinUI 3 projects because Csc is invoked without AnalyzerConfigFiles",
  "body": "**Describe the bug**\r\n\r\nA project reunion project fails to build when it contains code that relies on a Source Generator in any of the XAML code-behind files.\r\n\r\n**Steps to reproduce the bug**\r\n\r\n(based on @dotMorten's report https://github.com/microsoft/CsWin32/issues/219#issuecomment-811272354)\r\n\r\n**[Minimal repro solution](https://github.com/microsoft/CsWin32/files/6238327/App39.zip)**\r\n\r\nOr manual steps: \r\n\r\n1. Install Project Reunion Project Templates: https://marketplace.visualstudio.com/items?itemName=ProjectReunion.MicrosoftProjectReunion\r\n2. Create a new Blank App, Packaged (WinUI 3 in Desktop) project.\r\n3. Install the Microsoft.Windows.CsWin32 nuget package (0.1.422-beta)\r\n4. Add NativeMethods.txt and some interop methods to it.\r\n5. Open MainWindow.xaml.cs, and in the constructor add a pinvoke method call.\r\n6. Compile\r\n7. Observe errors in the error list\r\n![error list](https://user-images.githubusercontent.com/1378165/113185548-6e6f1000-920b-11eb-8c76-c237fc8e9bb5.png)\r\n\r\nUsing VS16.10.p1\r\n\r\n**Expected behavior**\r\n\r\nThe build is successful.\r\n\r\n**Analysis**\r\n\r\nExamining the build log I've found the problem: \r\nThe `XamlPreCompile` target as defined in `MSBuild\\Current\\Bin\\Microsoft.CSharp.CurrentVersion.targets` invokes the `Csc` task but omits AnalyzerConfigFiles that is normally passed in. As a result, the CsWin32 source generator is not getting the info it needs to generate the APIs referenced in the XAML code-behind.\r\n\r\nAs the faulty target is defined in `Microsoft.CSharp.CurrentVersion.targets`, this repo seemed the most appropriate place to file the issue.\r\n\r\n**Screenshots**\r\n\r\nThe `CoreCompile` target's invocation of Csc:\r\n![image](https://user-images.githubusercontent.com/3548/113191774-2d7ef780-921b-11eb-98a6-6beacbb2eb7d.png)\r\n\r\nXamlPreCompile target's invocation of Csc:\r\n![image](https://user-images.githubusercontent.com/3548/113191681-13ddb000-921b-11eb-8f68-b22a17482b10.png)",
  "state": "CLOSED",
  "createdAt": "2021-03-31T18:20:24Z",
  "updatedAt": "2024-02-21T17:01:40Z",
  "closedAt": "2021-05-17T15:15:28Z",
  "author": {
    "login": "AArnott"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "chsienki"
      }
    ]
  },
  "milestone": {
    "title": "MSBuild 16.10"
  },
  "comments": {
    "nodes": [
      {
        "body": "I tried adding the missing `@(EditorConfigFiles)` entry, as well as to the Target inputs, but didn't really make a difference. I wonder if there's more to it?\r\n![image](https://user-images.githubusercontent.com/1378165/113459517-a3759100-93ca-11eb-8c41-85ceec896701.png)\r\n\r\nFor some reason my log viewer doesn't show the task parameters",
        "createdAt": "2021-04-02T22:45:21Z",
        "updatedAt": "2021-04-02T22:47:06Z",
        "author": {
          "login": "dotMorten"
        }
      },
      {
        "body": "I believe this is fixed for WPF in .NET 6: https://github.com/dotnet/wpf/pull/4089\r\n\r\nEssentially the XAML compiler did not pass analyzers through in its compilation model. I _think_ setting `IncludePackageReferencesDuringMarkupCompilation` to true will fix this (see [known-issues](https://github.com/dotnet/core/blob/main/release-notes/6.0/known-issues.md)) Though the project reunion folks may need to change their targets to ensure the correct things are passed to the markup compiler (I am not familiar with how reunion wired things up).\r\n\r\nEither way I believe this is a bug for the https://github.com/microsoft/ProjectReunion repo",
        "createdAt": "2021-04-02T23:20:29Z",
        "updatedAt": "2021-04-02T23:34:10Z",
        "author": {
          "login": "jmarolf"
        }
      },
      {
        "body": "@jmarolf I just tried setting `IncludePackageReferencesDuringMarkupCompilation` and that didn't make a difference.",
        "createdAt": "2021-04-02T23:23:14Z",
        "updatedAt": "2021-04-02T23:23:14Z",
        "author": {
          "login": "dotMorten"
        }
      },
      {
        "body": "@jmarolf Thanks. Yes, I'm aware of the WPF fix and we have it documented here: https://github.com/microsoft/CsWin32/issues/7\r\nBut the workaround (or fix) wasn't effective for this.\r\n\r\nWhy would this go to the ProjectReunion team when the Csc task is invoked from Microsoft.CSharp.CurrentVersion.targets? Doesn't the roslyn team own that file?",
        "createdAt": "2021-04-02T23:25:16Z",
        "updatedAt": "2021-04-02T23:25:16Z",
        "author": {
          "login": "AArnott"
        }
      },
      {
        "body": "@AArnott But is this really the file that is the problem? I made the required changes, adding the missing entry, and still didn't resolve the issue.",
        "createdAt": "2021-04-02T23:29:06Z",
        "updatedAt": "2021-04-02T23:29:06Z",
        "author": {
          "login": "dotMorten"
        }
      },
      {
        "body": "@dotMorten maybe your `@(EditorConfigFiles)` list is empty. Passing in an empty list would be no better than before. The fix would have to include whatever was necessary to initialize that list.",
        "createdAt": "2021-04-02T23:31:33Z",
        "updatedAt": "2021-04-02T23:31:33Z",
        "author": {
          "login": "AArnott"
        }
      },
      {
        "body": "Sorry, I may have misunderstood. If someone call CSC and does not pass the source generators to that target there is nothing we can do: they need to update those targets to pass the right things to csc for generators to work. If you are seeing source generators being passed into the XAML compilers invocation of CSC then this is indeed our problem to solve.",
        "createdAt": "2021-04-02T23:36:35Z",
        "updatedAt": "2021-04-02T23:36:35Z",
        "author": {
          "login": "jmarolf"
        }
      },
      {
        "body": "And to clarify XamlPreCompile is not defined in this repo. This repo contains `Microsoft.CSharp.Core.targets`",
        "createdAt": "2021-04-02T23:38:41Z",
        "updatedAt": "2021-04-02T23:38:41Z",
        "author": {
          "login": "jmarolf"
        }
      },
      {
        "body": "Presumably, this should be transferedd to the MSbuild repo?\r\n\r\nhttps://github.com/dotnet/msbuild/blob/1cfebe4dd3b1bb26bbf76128ff5f9270b6c090bb/src/Tasks/Microsoft.CSharp.CurrentVersion.targets#L168-L194",
        "createdAt": "2021-04-02T23:41:26Z",
        "updatedAt": "2021-04-02T23:41:26Z",
        "author": {
          "login": "jmarolf"
        }
      },
      {
        "body": "@jmarolf Since we have this (extremely unfortunate) dependency in core targets, can we get someone from Roslyn to port the changes to CoreCompile to the `XamlPreCompile` task? And I guess add the updating to the to-do list for changing that target?\r\n\r\nhttps://github.com/dotnet/msbuild/blob/1cfebe4dd3b1bb26bbf76128ff5f9270b6c090bb/src/Tasks/Microsoft.CSharp.CurrentVersion.targets#L163-L169",
        "createdAt": "2021-04-14T15:34:54Z",
        "updatedAt": "2021-04-14T15:35:17Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "cc @chsienki -- looks like you did this semi-recently in #6096.",
        "createdAt": "2021-04-14T19:29:19Z",
        "updatedAt": "2021-04-14T19:29:19Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald Yeah, I can port the fix. We should probably do an audit of all the CSC tasks across the dotnet org and make sure we a) know about them all and b) they match.\r\n\r\nNow that we have arcade is there anyway we can ship a single 'include' proj file that each dependent repo uses to perform the actual invocation?",
        "createdAt": "2021-04-14T19:36:04Z",
        "updatedAt": "2021-04-14T19:36:04Z",
        "author": {
          "login": "chsienki"
        }
      },
      {
        "body": "team triage: right now we don't have an easy way to have a single source of truth. We don't think arcade helps with that unfortunately",
        "createdAt": "2021-04-21T15:14:58Z",
        "updatedAt": "2021-04-21T15:14:58Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "Any news on which deliverable will contain this fix? Seems to still be broken in Visual Studio 16.10p3 / latest .NET 5 SDK. Also tested with 6.0.100-preview.4.21255.9 to no avail.",
        "createdAt": "2021-05-14T22:50:00Z",
        "updatedAt": "2021-05-14T22:51:10Z",
        "author": {
          "login": "riverar"
        }
      },
      {
        "body": "Not sure if the commit @rainersigwald made was to fix this issue or is prep work, but I made those changes locally and it didn't resolve the error. (Goes back into cave.)",
        "createdAt": "2021-05-15T02:29:35Z",
        "updatedAt": "2021-05-15T02:29:35Z",
        "author": {
          "login": "riverar"
        }
      },
      {
        "body": "@riverar It should be fixed in VS 16.10 preview 4.\r\n\r\n> I made those changes locally and it didn't resolve the error.\r\n\r\nWhich changes, exactly? @chsienki was able to build a project after applying #6438, I believe.",
        "createdAt": "2021-05-17T14:18:30Z",
        "updatedAt": "2021-05-17T14:18:30Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald Same changes you referenced. But I made the changes to my `Microsoft.CSharp.CurrentVersion.targets` delivered via the dotnet SDK not Visual Studio. After making the Visual Studio targets change (`Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\\MSBuild\\Current\\Bin\\Microsoft.CSharp.CurrentVersion.targets`), I was able to validate the fix \ud83d\udc4d\r\n\r\n",
        "createdAt": "2021-05-17T15:31:15Z",
        "updatedAt": "2021-05-17T15:31:32Z",
        "author": {
          "login": "riverar"
        }
      },
      {
        "body": "\ud83c\udf89 Thanks for following up!",
        "createdAt": "2021-05-17T15:33:39Z",
        "updatedAt": "2021-05-17T15:33:39Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}