{
  "number": 5746,
  "title": "BenchmarkDotNet msbuild task benchmarks",
  "body": "Hi there,\r\n\r\nI am creating this issue to track the ideas and progress of adding BenchmarkDotNet-based benchmarks to msbuild.\r\n\r\nThe idea is to be able to benchmark MSBuild tasks independently and help catch regressions and improve performance.\r\n\r\nI started experimenting with this here https://github.com/mfkl/msbuild/tree/benchmark. Here's a basic example:\r\n\r\n```\r\n[GlobalSetup(Target = nameof(ConflictBetweenBackAndForeVersionsNotCopyLocal))]\r\npublic void ConflictBetweenBackAndForeVersionsNotCopyLocalSetup()\r\n{\r\n    t = new ResolveAssemblyReference\r\n    {\r\n        Assemblies = new ITaskItem[]\r\n        {\r\n            new TaskItem(\"D, Version=2.0.0.0, Culture=neutral, PublicKeyToken=aaaaaaaaaaaaaaaa\"),\r\n            new TaskItem(\"D, Version=1.0.0.0, Culture=neutral, PublicKeyToken=aaaaaaaaaaaaaaaa\")\r\n        },\r\n        BuildEngine = new MockEngine(),\r\n        SearchPaths = new string[] {\r\n            s_myLibrariesRootPath, s_myLibraries_V2Path, s_myLibraries_V1Path\r\n        }\r\n    };\r\n}\r\n\r\n[Benchmark]\r\npublic void ConflictBetweenBackAndForeVersionsNotCopyLocal()\r\n{\r\n    t.Execute();\r\n}\r\n```\r\n\r\nI've been looking at existing unit tests as a base to start this work. I think that time consuming tasks, like RAR (even more so with the current perf-focused RAR refactoring), are good candidate for writing benchmarks.\r\n\r\nIf you have any opinion about this, your thoughts are welcome.\r\n\r\nRegarding the infra, I'm not familiar with helix/arcade but it seems to be favored for perf tests in other dotnet projects. Feel free to let me know what would be the plan regarding this, I'm fine working on this locally for now though.\r\n\r\nBenchmarks can be ran with `dotnet run -c Release`\r\n\r\nRelevant:\r\nhttps://github.com/xamarin/xamarin-android/blob/master/tests/MSBuildDeviceIntegration/Tests/PerformanceTest.cs\r\nhttps://github.com/xamarin/xamarin-android/blob/master/tests/msbuild-times-reference/MSBuildDeviceIntegration.csv",
  "state": "OPEN",
  "createdAt": "2020-09-19T14:34:39Z",
  "updatedAt": "2024-01-31T08:23:00Z",
  "closedAt": null,
  "author": {
    "login": "mfkl"
  },
  "labels": [
    "needs-design",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "I'm intrigued! I see this as a very complicated issue because it could have a lot of nice benefits including easy perf testing, but I don't want our CI builds (or local builds) to take a lot longer because it's running perf tests, especially perf tests on code paths we didn't touch.\r\n\r\nI added the untriaged label because I think we need to talk about it. This could be a very impactful change, and I don't want to go in blind.",
        "createdAt": "2020-10-21T04:19:05Z",
        "updatedAt": "2020-10-21T04:19:05Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "> I don't want our CI builds (or local builds) to take a lot longer because it's running perf tests\r\n\r\nYes I agree, not all of these tests would/should necessarily be run on every commit. Once every few days or even weekly could already bring some feedback though :-)",
        "createdAt": "2020-10-21T04:22:04Z",
        "updatedAt": "2020-10-21T04:22:04Z",
        "author": {
          "login": "mfkl"
        }
      },
      {
        "body": "Hey, sorry I missed this when you filed it. Having perf tests is a great goal, but it's a high-complexity area and the core MSBuild team isn't planning to invest heavily in it in the near future. We're concerned about reliability, noise in measurements, and having a good testbed for measurements. We'd also like to make sure we use the .NET performance infrastructure as much as possible to avoid duplication and increase consistency with other dotnet repos. Unfortunately none of us know much about what that means at the moment!\r\n\r\nWe're glad you're excited to work on this but wanted to warn you that it may not get quick attention and we might be pretty picky about how it's implemented.",
        "createdAt": "2020-10-21T18:13:42Z",
        "updatedAt": "2020-10-21T18:13:42Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}