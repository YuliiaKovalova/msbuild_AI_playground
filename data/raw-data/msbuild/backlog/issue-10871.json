{
  "number": 10871,
  "title": "Common.targets doesn't promote TreatWarningsAsErrors to MSBuildTreatWarningsAsErrors",
  "body": "Common.targets does respect the \"plain property\" version of some warning-related settings:\n\nhttps://github.com/dotnet/msbuild/blob/69b3e7a43fb2fb26812b20807333cf6ca62167f2/src/Tasks/Microsoft.Common.CurrentVersion.targets#L668-L672\n\nbut it doesn't do the broader setting `MSBuildTreatWarningsAsErrors` in the same way.\n\nThis adds to the confusion about which settings to use.",
  "state": "OPEN",
  "createdAt": "2024-10-23T15:11:29Z",
  "updatedAt": "2025-01-13T19:09:38Z",
  "closedAt": null,
  "author": {
    "login": "rainersigwald"
  },
  "milestone": null,
  "assignees": {
    "nodes": [
      {
        "login": "rainersigwald"
      },
      {
        "login": "SimaTian"
      }
    ]
  },
  "labels": [
    "Priority:1",
    "triaged"
  ],
  "comments": {
    "nodes": [
      {
        "body": "We've implemented the intended solution [here](https://github.com/dotnet/msbuild/pull/10942). Then we had to roll it back due to breaking sdk tests [while updating msbuild dependencies.](https://github.com/dotnet/sdk/pull/44977)\nThe crux of the issue is the fact that some projects started to use non-prefixed version to selectively turn on TreatWarningsAsErrors - e.g. they have use case like TreatWarningsAsErrors only for this subproject. This is a legitimate use case.\nUnfortunately this leaves us in a weird state where our attempt to unify the behavior breaks more people than expected.\n\nCurrent status:\n\n-  we have a code change ready\n-  we have validated that it works\n- unfortunately it breaks lot of builds.\n\nThere are several possible ways forward:\n\n- We could unify everything except the TreatWarningsAsErrors which is the most commonly used \"subproject specific\" one. It would bring us somewhat closer to an unified world. I don't like this solution as it creates a weird \"exception inside an exception\" kind of state, possibly adding another layer of complexity to an already weird behavior.\n- We could break people - obviously, we don't want to do that.\n- We could create a build check, let it simmer, then break people with a changewave, then break people. This would require lot of babysitting, but maybe it could be a way forward, although not a straightforward one. Also, it still breaks people even if we soften the blow somewhat.\n- We can keep the status quo, since it is a minor annoyance for the most part. This might be bad for the nuget issue that initially gave us the motivation to attempt this unification.\n\n@baronfel, what do you think please?",
        "createdAt": "2024-12-09T18:52:02Z",
        "author": {
          "login": "SimaTian"
        }
      },
      {
        "body": "Adding @aortiz-msft for visibility and insight into the impact to NuGet",
        "createdAt": "2024-12-09T18:59:59Z",
        "author": {
          "login": "baronfel"
        }
      },
      {
        "body": "@nkolev92 ",
        "createdAt": "2024-12-10T03:40:10Z",
        "author": {
          "login": "aortiz-msft"
        }
      },
      {
        "body": "@SimaTian reached out to me offline about this. \n\nI am comfortable with the 1st proposed path forward in https://github.com/dotnet/msbuild/issues/10871#issuecomment-2529093862. \n\nMSBuildTreatWarningsAsErrors came after TreatWarningsAsErrors. It will always be a breaking change. I don't have data on how often MSB warnings exist in builds but feels like something that happens quite frequently in large repos. \n\nI think https://github.com/dotnet/msbuild/issues/10801 is way more important. \nCurrently it forces people to duplicate 3 properties. It seems like MSBuild is elevating errors that another component chose not to elevate.\nTo me naively seems like MSBuildTreatWarningsAsErrors and the other 3 MSBuild prefixed properties should've applied to MSB prefixed warnings only.  ",
        "createdAt": "2025-01-13T19:09:36Z",
        "author": {
          "login": "nkolev92"
        }
      }
    ]
  }
}