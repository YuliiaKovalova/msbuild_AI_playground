{
  "number": 9687,
  "title": "[Feature Request]: Remove duplicate (Unnecessary) Project Reference in .NET Solution",
  "body": "### Summary\r\n\r\nI have asked this [on Stackoverflow](https://stackoverflow.com/q/77895134), and here is the situation.\r\n\r\nI have a .NET solution which contains about 20 projects, and I am using a layered architecture. <br/>\r\n\r\nSuppose project `A` will reference Project `B`. <br/>\r\nProject `B` will reference projects `C`, `D`, `E` and `F.` <br/>.\r\nProjects `C`, `D`, `E` and `F` all reference the `G` project. <br/>\r\nand `G` project references `H` project.\r\n\r\nNow I have a path from project `A` to project `H` and I can use its types.\r\nWhat I wanted to do to avoid unnecessary `<ProjectReference>` tags.\r\n\r\nFor example, there is no need to reference the project `H` directly from `A`, `B`, `C`, `D`, `E`, and `F` projects, because all of them have reference to it indirectly by referencing `G` project.\r\n\r\nMS-build does not appear to produce any warning, about those duplicated (unnecessary)\r\n`<ProjectReference>` \r\n\r\nShould we have this feature?\r\n\r\n### Background and Motivation\r\n\r\nMotivation is the principle of Least Privileges, If anything changes at the bottom of the dependency graph (say project `H` removed), it would be better to the give error immediately, otherwise than project in above layer turn its dependency from unnecessary to required.\r\n\r\nI would really like to do that on the `csproj` level, even though I belive Msbuild do remove unnecessary project references internally without surfacing them to the user. I want to match my `csproj` files with the real situation.\r\n\r\nThat will remove the clutter from the `csproj` and will enhance the readability and the understandability of it, by removing project references that are just a not needed.\r\n\r\n### Proposed Feature\r\n\r\nGenerate warnings when unnecessary `<ProjectReference>` tag included in a project already has reference indirectly to that project mentioned in the in the `<ProjectReference>` tag\r\n\r\n### Alternative Designs\r\n\r\nnone",
  "state": "CLOSED",
  "createdAt": "2024-01-28T14:39:33Z",
  "updatedAt": "2024-02-23T10:01:56Z",
  "closedAt": "2024-02-23T10:01:56Z",
  "author": {
    "login": "HakamFostok"
  },
  "labels": [
    "Feature Request",
    "needs-more-info",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "JanKrivanek"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "In order to prevent breaking through the layering separation of SDK style projects you should be using `DisableTransitiveProjectReferences` (for ProjectReference) or `PrivateAssets` (for PackageReference). This will immediately uncover and prevent any unwanted bypassing of the layering. Any other option will not prevent the default transitive accessibility that can lead to unitended dependencies.\r\n\r\nMore info on controling the dependencies behavior through MSBuild: https://github.com/dotnet/msbuild/blob/main/documentation/wiki/Controlling-Dependencies-Behavior.md\r\n\r\nThis update applies specifically to your case: https://github.com/dotnet/msbuild/pull/9652/files#diff-b5dec84f84d1f113f1c8d8369daf2a8b4958736d3e02764f3bfbd42e42c4a917R9\r\n\r\n\r\nAll that being said - the explicit warning might actually flag good intentions that can be considered good practice (where required dependency is explicitly declared via ProjectReference, despite being accessible transitively). We might however soon give you a lever to flag the pattern in your projects - via allowing to author and mount custom MSBuild analyzers.",
        "createdAt": "2024-01-28T20:33:30Z",
        "updatedAt": "2024-01-28T20:33:30Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "Based on current description - this is intended and desired behavior, so closing as 'not a bug'",
        "createdAt": "2024-02-23T10:01:56Z",
        "updatedAt": "2024-02-23T10:01:56Z",
        "author": {
          "login": "JanKrivanek"
        }
      }
    ]
  }
}