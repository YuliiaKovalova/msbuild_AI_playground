{
  "number": 7112,
  "title": "Unable to have static-graph + isolated build + caching + // builds, working together",
  "body": "Hey, this is a followup of #7110\r\n\r\nSo, I'm trying to create a build server that would be responsible to maintain the compilation of a \"solution\" or a group of C# projects as efficiently as possible by coupling:\r\n- static graph\r\n- isolated builds\r\n- caching of results\r\n- parallelized builds\r\n\r\nI have also tried to play around `ProjectCachePlugin` to cover some of these aspects, but I'm hitting a restriction in the design of the caching that I'm not sure how to solve.\r\n\r\nThe main problem I have is `parallelized builds` in conjunction with the others.\r\n\r\nLet's take an example. I have this project dependencies:\r\n\r\n- ProjRoot\r\n  - LibA\r\n    - LibLeaf\r\n  - LibB\r\n    - LibLeaf\r\n  - LibC\r\n    - LibLeaf\r\n\r\nI would expect to issue a build + caching like this:\r\n\r\n- Build LibLeaf => store cache results `LibLeaf.cache`\r\n- Build LibA / LibB / LibC concurrently in isolate builds, with `LibLeaf.cache` input. Each build would produce `LibA.cache`, `LibB.cache`, `LibC.cache`\r\n- Build ProjRoot in isolate builds, don't cache the output, but use the cache from `LibA.cache`, `LibB.cache`, `LibC.cache`\r\n\r\nThe server would handle the caching state, would handle the life-sync with source on the disks (e.g like [up-to-date-check](https://github.com/dotnet/project-system/blob/main/docs/up-to-date-check.md) of VS) with the ultimate benefits that builds could be much faster than even VS today because all the results are cached, so changing one project would not require to recompute the results of project dependencies...\r\n\r\nFrom some [early results](https://twitter.com/xoofx/status/1466082683889586177) from the prototype I did with the existing isolate caching, it can speed up the build on a single csproj by e.g x10 times faster. It's a lot. Extend that to an entire graph and it could be a game changer.\r\n\r\nBut I have hit the limitation that I initially didn't caught in the [static-graph](https://github.com/dotnet/msbuild/blob/main/documentation/specs/static-graph.md) doc which is that isolate + cache can only happen in a `BuildManager` and the input and output cache is only setup-able per `BeginBuild`/`EndBuild`\r\n\r\nIt means that I can calculate all the above, only sequentially and single threaded, which is super limited.\r\n\r\nSo, instead, I have been trying to schedule the graph myself, by handling the scheduling similar to static-graph (so I copied the code [here](https://github.com/xoofx/BenchBuild/blob/59464264d09939c9a7a50d0d378524dbc65ce746/BenchBuild/Builder.cs#L192-L294)), I have added a way to serialize the results to disk ([here](https://github.com/xoofx/BenchBuild/blob/59464264d09939c9a7a50d0d378524dbc65ce746/BenchBuild/Builder.cs#L278)) and thought that I could rely on [project-cache](https://github.com/dotnet/msbuild/blob/main/documentation/specs/project-cache.md) through `ProjectCachePlugin` to load these serialized results.\r\n\r\nUnfortunately, I discovered that `ProjectCachePlugin`  are also only supported in the `BuildManager` scenario, which makes them useless in a parallel build.\r\n\r\nI would have hoped that I could have issued builds by attaching the input/output to a request (instead of Begin/EndBuild), and that it could execute on msbuild Nodes instead.\r\n\r\n```c#\r\nbuildManager.BeginBuild();\r\n\r\n// Iterate on projects per group in // (as it is done in static-graph scheduling\r\n// ....\r\nloop on batch-able groups {\r\n  loop on project on group {\r\n     var request = new BuildRequestData(...);\r\n     request.Inputs = ...;\r\n     request.OuputCache = ....;\r\n     buildManager.Execute(submission);\r\n     var submission = buildManager.PendBuildRequest(request);\r\n     submission.ScheduleAsync(...);\r\n  }\r\n}\r\nbuildManager.EndBuild();\r\n```\r\n\r\nThe only solution I see is to build my own kind of build server nodes to do that, by hosting a `BuildManager` and performing my own input/output in these nodes... but ouch, that's a bit more work than expected...\r\n\r\nSide notes: the current input/output caches load is super limited in a server by only providing file path loading, while I could also maintain a memory cache that could speed things further.\r\n\r\nThoughts?\r\n\r\ncc: @rainersigwald ",
  "state": "OPEN",
  "createdAt": "2021-12-02T19:43:15Z",
  "updatedAt": "2024-01-31T08:19:30Z",
  "closedAt": null,
  "author": {
    "login": "xoofx"
  },
  "labels": [
    "Area: Static Graph",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "> I would have hoped that I could have issued builds by attaching the input/output to a request (instead of Begin/EndBuild), and that it could execute on msbuild Nodes instead.\r\n\r\nSo I have hacked ([here](https://github.com/xoofx/msbuild/tree/fast-static-graph)) the input/output cache files per request instead of per BuildManager.Begin/EndBuild so that the caching can run on a node and It's working amazingly. \r\n\r\nI'm able to compile an entire graph of 100 C# projects in 3s while VS/msbuild would take today a bit more than 7s to build it.\r\n\r\nWould love to discuss with your team if we could bring such feature to msbuild.",
        "createdAt": "2021-12-03T13:49:40Z",
        "updatedAt": "2021-12-03T17:26:28Z",
        "author": {
          "login": "xoofx"
        }
      },
      {
        "body": "That feels like a natural next step for the implementation. The initial design was driven by a requirement from the higher-order build system that the individual project builds have process-level isolation (for I/O tracking via Detours), but I don't think that needs to be a hard requirement for the overall system forever. My only concern is along the lines of \"does this make it too easy to build a system that has underbuild problems because it doesn't fully understand inputs/outputs?\", which I don't (at the moment) think is a great reason not to make the change.",
        "createdAt": "2021-12-03T15:19:43Z",
        "updatedAt": "2021-12-03T15:19:43Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> That feels like a natural next step for the implementation. The initial design was driven by a requirement from the higher-order build system that the individual project builds have process-level isolation (for I/O tracking via Detours), but I don't think that needs to be a hard requirement for the overall system forever.\r\n\r\nI read that indeed - and to be honest I didn't fully understand why there was such a requirement. I also realized why they didn't need parallelizing in the nodes because likely they were parallelizing the `BuildManager` itself (which is not great imo)\r\n\r\n> My only concern is along the lines of \"does this make it too easy to build a system that has underbuild problems because it doesn't fully understand inputs/outputs?\", which I don't (at the moment) think is a great reason not to make the change.\r\n\r\nYeah, as always in such circumstances, with great power comes great responsibilities! \ud83d\ude05 ",
        "createdAt": "2021-12-03T15:31:10Z",
        "updatedAt": "2021-12-03T15:31:17Z",
        "author": {
          "login": "xoofx"
        }
      },
      {
        "body": "I have cleaned up my changes to msbuild and made a draft PR #7121 to open discussion.",
        "createdAt": "2021-12-04T10:17:09Z",
        "updatedAt": "2021-12-04T10:17:09Z",
        "author": {
          "login": "xoofx"
        }
      }
    ]
  }
}