{
  "number": 1061,
  "title": "Generalize how targets can be provided to cross-targeting build",
  "body": "To get things off the ground, I'm having to put an Import of Common\\ImportAfter*.NuGet.targets in CrossTargeting.targets. This is undue coupling to NuGet. We need to generalize, but can't import everything in that folder as the rest is not cross-targeting aware.\n",
  "state": "OPEN",
  "createdAt": "2016-09-21T22:02:39Z",
  "updatedAt": "2024-02-21T16:38:10Z",
  "closedAt": null,
  "author": {
    "login": "nguerrera"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Consider for Next Major Version"
  },
  "comments": {
    "nodes": [
      {
        "body": "So the core problem is:\n- Build logic that is needed in both inner and outer builds.\n- That isn\u2019t nuget-based\n- That can\u2019t come in from an import in common.props/targets, because those are too specific for the outer build.\n\nRight?\n\nShould we promote the concept of being a cross-targeting capable target? That is, import `$(MSBuildExtensionsPath)\\$(MSBuildToolsVersion)\\Microsoft.Common.CrossTargeting.targets\\ImportAfter\\*.targets` from `Microsoft.Common.CrossTargeting.targets`?\n\nIs it enough to have a generalized mechanism for the outer build only, or should these targets always also be included in the inner build? I know the NuGet targets are currently in both.\n",
        "createdAt": "2016-09-27T16:21:15Z",
        "updatedAt": "2016-09-27T16:21:15Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> Should we promote the concept of being a cross-targeting capable target? That is, import $(MSBuildExtensionsPath)\\$(MSBuildToolsVersion)\\Microsoft.Common.CrossTargeting.targets\\ImportAfter*.targets from Microsoft.Common.CrossTargeting.targets?\n\nYes. I think this is the simplest solution that removes all coupling and it's perfectly consistent with the inner-build case.\n\n> Is it enough to have a generalized mechanism for the outer build only, or should these targets always also be included in the inner build? I know the NuGet targets are currently in both.\n\nI think we should keep the CrossTargeting and Common (inner) ImportAfter separate. Often the outer target will just batch over the TargetFrameworks and dispatch to the inner builds, which is not something to repeat in the inner build. If something is written to handle both cases in the same file (as nuget is today) then they can go ahead an import the same file from both locations, but if we go the other way and do this on everyone's behalf, then we will force some to author tricky conditions to only run in the right cases.\n",
        "createdAt": "2016-09-27T17:03:39Z",
        "updatedAt": "2016-09-27T17:03:39Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "@emgarten is also asking for a way to provide targets via CustomAfterMicrosoftCommonTargets or similar to outer build.\n",
        "createdAt": "2016-09-27T22:54:40Z",
        "updatedAt": "2016-09-27T22:54:40Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "As @nguerrera mentioned, NuGet uses _CustomAfterMicrosoftCommonTargets_ to recursively walk through project to project references. Each project is loaded and a set of targets are added in and executed using _CustomAfterMicrosoftCommonTargets_. This is done as part of the outer loop, NuGet handles evaluating the inner loop itself.\n",
        "createdAt": "2016-09-27T23:07:20Z",
        "updatedAt": "2016-09-27T23:07:20Z",
        "author": {
          "login": "emgarten"
        }
      },
      {
        "body": "For @emgarten's scenario, I think a feature separate from actual common targets where you can provide a targets file to msbuild.exe invocation and it will import that at the very end would be better. Using CustomAfterMicrosoftCommonTargets has the potential to conflict with somebody else in the spaghetti of targets hijacking it from you. (EDIT: or you hijacking it from them.)\n",
        "createdAt": "2016-09-27T23:11:43Z",
        "updatedAt": "2016-09-27T23:17:35Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "@emgarten what if nuget.exe carried a tiny project file that just 1) imported some project by a variable passed in 2) imported your targets, then you build that and pass the user project to it.\n",
        "createdAt": "2016-09-27T23:31:43Z",
        "updatedAt": "2016-09-27T23:31:43Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "That seems like it would give the same result, I'll try it out.\n",
        "createdAt": "2016-09-28T00:00:00Z",
        "updatedAt": "2016-09-28T00:00:00Z",
        "author": {
          "login": "emgarten"
        }
      },
      {
        "body": "@nguerrera projects seem to be evaluated differently when using an import vs pass the project under the project attribute of an MSBuild element. I think the outer build will need to support _CustomAfterMicrosoftCommonTargets_ or a new property to handle this, but inorder to work download level it would be nice to keep this as _CustomAfterMicrosoftCommonTargets_ unless it causes other issues.\n",
        "createdAt": "2016-09-28T17:56:24Z",
        "updatedAt": "2016-09-28T17:56:24Z",
        "author": {
          "login": "emgarten"
        }
      },
      {
        "body": "This is blocking NuGet in two ways currently\n1. NuGet.exe isn't able to bring its own targets along and use them to recursively walk the p2p graph\n2. Pack is unable to run in the outer build (buildCrossTargeting folder is unusable so far) \n",
        "createdAt": "2016-09-28T23:14:07Z",
        "updatedAt": "2016-09-28T23:14:07Z",
        "author": {
          "login": "emgarten"
        }
      },
      {
        "body": "@emgarten Why does the p2p traversal need to have targets injected? Shouldn't they be installed in the global location (and thus provided to every project)?\n",
        "createdAt": "2016-09-28T23:22:55Z",
        "updatedAt": "2016-09-28T23:22:55Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> Shouldn't they be installed in the global location (and thus provided to every project)?\n\nThat could work, but today NuGet.exe brings its own copy and runs standalone. For scenarios where NuGet.exe is newer or has bug fixes it would be nice to keep the option of using any targets instead of just what MSBuild has.\n",
        "createdAt": "2016-09-28T23:40:34Z",
        "updatedAt": "2016-09-28T23:40:34Z",
        "author": {
          "login": "emgarten"
        }
      },
      {
        "body": "Ok, so the problem is that the outer build doesn't import `$(CustomAfterMicrosoftCommonTargets)` (because it doesn't import `Microsoft.Common.CurrentVersion.targets`), so you can't inject logic into the build.\n\nSounds like the easiest thing would be to provide a similar hook in `Common.CrossTargeting.targets`: a final import of `$(CustomAfterCrossTargetingTargets)`. Then NuGet can set both properties and satisfy both the inner and outer builds. Right?\n\nTangentially: I'm confused by the mention of `nuget.exe` here. I thought we were going to great lengths to make NuGet restore be driven by MSBuild.\n",
        "createdAt": "2016-09-29T14:54:45Z",
        "updatedAt": "2016-09-29T14:54:45Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "It sounds like we're approaching a consensus to mirror Microsoft.Common.targets hooks with analogous but distinct Microsfot.Common.CrossTargeting.hooks:\n1. Microsoft.Common.CrossTargeting/(ImportBefore|ImportAfter)\n2. $(Custom(Before|After)MicrosoftCommonCrossTargetingTargets)\n\nAnd anyone wanting to hook both can do so by using both paths or setting both variables.\n\nAre we all on the same page? Let's get this in soon if so. I've accumulated a lot of test debt (hoping to pay it down over next few days) in  other changes that had to be rushed in to msbuild to unblock this or that. I would prefer not add more to my plate. Is this something someone on the msbuild team can drive with high priority?\n",
        "createdAt": "2016-09-29T17:01:57Z",
        "updatedAt": "2016-09-29T17:03:29Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "Sounds good to me. I can work on it.\n",
        "createdAt": "2016-09-29T19:54:43Z",
        "updatedAt": "2016-09-29T19:54:43Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Reopening until the old mechanism is removed--but that's not urgent.\n",
        "createdAt": "2016-09-29T23:00:27Z",
        "updatedAt": "2016-09-29T23:00:27Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Not positive this fixes @rohit21agrawal's pack issues. Solves @emgarten's issues, we believe.\n",
        "createdAt": "2016-09-30T23:43:48Z",
        "updatedAt": "2016-09-30T23:43:48Z",
        "author": {
          "login": "rrelyea"
        }
      },
      {
        "body": "@emgarten @rainersigwald @rrelyea Is it possible to remove the old mechanism now. I am seeing duplicate imports of nuget targets warnings. This is a possible culprit. Or is that tracked elsewhere / caused by something else?\n",
        "createdAt": "2016-11-02T20:39:00Z",
        "updatedAt": "2016-11-02T20:39:00Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "Before removing the old mechanism NuGet needs to use the new one: https://github.com/NuGet/Home/issues/3860\n",
        "createdAt": "2016-11-02T21:12:20Z",
        "updatedAt": "2016-11-02T21:12:20Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "This didn't meet the RTW bar for NuGet, so we can't take it for RTW either.",
        "createdAt": "2017-01-25T22:41:58Z",
        "updatedAt": "2017-01-25T22:41:58Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I hope we'll be allowed to remove it later.",
        "createdAt": "2017-01-25T22:43:28Z",
        "updatedAt": "2017-01-25T22:43:28Z",
        "author": {
          "login": "nguerrera"
        }
      }
    ]
  }
}