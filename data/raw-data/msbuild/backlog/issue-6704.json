{
  "number": 6704,
  "title": "TaskParameterEventArgs may read items after a delay, after they've been mutated",
  "body": "I'm investigating a case where the `AssignProjectConfiguration` task has logged input `ProjectReference` items that shows the `BuildReference` and `ReferenceOutputAssembly` metadata. \r\n\r\nHowever that metadata is actually being set within the task itself, which tells me that [LogTaskParameter](https://source.dot.net/#Microsoft.Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/ItemGroupLoggingHelper.cs,5eb3bbf5a68d102b) is capturing the array of items to log, but doesn't actually log them until either the `TaskParameterEventArgs` is being serialized to be sent to the central node, or actually sent to the logger (both are asynchronous).\r\n\r\nFor proof I've inserted a new Print target immediately before AssignProjectConfiguration:\r\n![image](https://user-images.githubusercontent.com/679326/126738205-de7ea04d-ebed-4cff-ae1d-82d743352840.png)\r\n\r\nBut when logging the task parameters for AssignProjectConfiguration it already contains the metadata:\r\n![image](https://user-images.githubusercontent.com/679326/126738258-6dcd6a06-1d3e-4fe6-b14c-6c6dc9a0c819.png)\r\n\r\nWhich tells me that when the items are mutated by the task we observe that.\r\n\r\nAren't they backed by an immutable data structure? Could we take a snapshot of that? I'm afraid if not, we'll have to allocate to create an immutable snapshot at the moment of logging, and these allocations are huge and really undesirable. We'll lose a lot of hard won ground in performance and memory growth.",
  "state": "OPEN",
  "createdAt": "2021-07-23T04:46:36Z",
  "updatedAt": "2024-02-21T16:28:26Z",
  "closedAt": null,
  "author": {
    "login": "KirillOsenkov"
  },
  "labels": [
    "Area: Logging",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "KirillOsenkov"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": []
  }
}