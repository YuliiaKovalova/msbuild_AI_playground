{
  "number": 3586,
  "title": "Consider walking directories in up-to-date checks",
  "body": "@ccastanedaucf has observed (https://github.com/Microsoft/msbuild/pull/3547#issuecomment-410354029) significant time spent in up-to-date checks in https://github.com/Microsoft/msbuild/blob/680224d8ecf9a7da82c001d95db336fd9cfd12d8/src/Build/BackEnd/Components/RequestBuilder/TargetUpToDateChecker.cs#L937\r\n\r\nGit for Windows got a big speedup by implementing some caching around checks for individual file timestamps (with the `core.fscache` setting). See https://github.com/git-for-windows/git/blob/master/compat/win32/fscache.c and its history.\r\n\r\nThe gist of the idea is that it's faster to enumerate all files in a directory and get every file's modification timestamp than it is to get the timestamps on an individual basis. Since there's probably a fairly high degree of overlap in the directories of files we're checking for timestamps, I suspect we could get some benefit from this technique too.",
  "state": "CLOSED",
  "createdAt": "2018-08-07T18:31:35Z",
  "updatedAt": "2024-02-21T17:12:00Z",
  "closedAt": "2021-11-08T14:30:27Z",
  "author": {
    "login": "rainersigwald"
  },
  "labels": [
    "Area: Performance",
    "OS: Windows",
    "Priority:1",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "AR-May"
      }
    ]
  },
  "milestone": {
    "title": "VS 17.1"
  },
  "comments": {
    "nodes": [
      {
        "body": "@ccastanedaucf can you take a look at implementing this? Might help get Windows closer to Linux after #3547 is in.",
        "createdAt": "2018-08-07T18:33:54Z",
        "updatedAt": "2018-08-07T18:33:54Z",
        "author": {
          "login": "AndyGerlicher"
        }
      },
      {
        "body": "Would be nice if you could implement it over the existing [IFileSystem](https://github.com/Microsoft/msbuild/tree/master/src/Shared/FileSystem) :)\r\n\r\nAlso, this might be a very good use case for the fast allocation free directory enumeration introduced by @JeremyKuhne  https://blogs.msdn.microsoft.com/jeremykuhne/2018/03/09/custom-directory-enumeration-in-net-core-2-1/",
        "createdAt": "2018-08-07T20:20:05Z",
        "updatedAt": "2018-08-07T20:20:20Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "The above problems are a huge burden in some dotnet repos see #2843 ",
        "createdAt": "2018-08-08T17:15:05Z",
        "updatedAt": "2018-08-08T17:15:05Z",
        "author": {
          "login": "4creators"
        }
      },
      {
        "body": "@4creators This will probably help with that, but I'd be shocked if it was a very high percentage of the overall incremental build time in those repos.",
        "createdAt": "2018-08-08T17:49:03Z",
        "updatedAt": "2018-08-08T17:49:03Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@cdmihai small bench comparing methods of getting last write time for 10 files on Windows. Right now we use the equivalent of ```File.GetLastWriteTimeUtc```.\r\n```\r\n                       Method |      Mean |     Error |    StdDev |\r\n----------------------------- |----------:|----------:|----------:|\r\n     File_GetLastWriteTimeUtc | 257.60 us | 0.7359 us | 0.5745 us |\r\n DirectoryInfo_EnumerateFiles |  53.60 us | 1.1738 us | 1.4416 us |\r\n         FileSystemEnumerable |  44.68 us | 0.8567 us | 0.8414 us |\r\n```\r\n",
        "createdAt": "2018-08-08T17:56:48Z",
        "updatedAt": "2018-08-09T00:19:42Z",
        "author": {
          "login": "ccastanedaucf"
        }
      },
      {
        "body": "> small bench comparing methods of getting last write time for 10 files on Windows\r\n\r\nAllocations would be interesting to measure as well. Using DirectoryInfo requires allocating a FileSystemInfo around every result, which will also allocate strings to do so. With FileSystemEnumerable you can get zero allocations (outside of the enumerable itself).",
        "createdAt": "2018-08-08T18:14:13Z",
        "updatedAt": "2018-08-08T18:14:13Z",
        "author": {
          "login": "JeremyKuhne"
        }
      },
      {
        "body": "1000 files in same directory + memory allocations. Looks like ```FileSystemEnumerable``` has a constant  memory allocation for a given directory. \r\nEdit: wasn't actually enumerating past the first item on ```FileSystemEnumerable``` which explains why runtime didn't change, updated times/allocation. Still a huge difference and allocation stays constant.\r\n```\r\n                       Method |         Mean |       Error |      StdDev |   Gen 0 |  Gen 1 |  Gen 2 | Allocated |\r\n----------------------------- |-------------:|------------:|------------:|--------:|-------:|-------:|----------:|\r\n     File_GetLastWriteTimeUtc | 45,740.60 us | 666.3182 us | 590.6736 us |       - |      - |      - | 109.38 KB |\r\n DirectoryInfo_EnumerateFiles |  1,036.26 us |  19.6407 us |  18.3719 us | 56.6406 |      - |      - | 242.71 KB |\r\n         FileSystemEnumerable |     357.7 us |    5.823 us |    7.151 us |       - |      - |      - |     296 B |\r\n```",
        "createdAt": "2018-08-08T20:42:11Z",
        "updatedAt": "2018-08-09T00:22:10Z",
        "author": {
          "login": "ccastanedaucf"
        }
      },
      {
        "body": "> 1000 files in same directory + memory allocations\r\n\r\nCool. Shows a pretty big difference. :)\r\n\r\nI'm curious about the Allocated (1.71K) number. Is it measuring `GC.GetAllocatedBytesForCurrentThread` or `GetTotalmemory`? It is just a somewhat odd total for me to place.\r\n",
        "createdAt": "2018-08-08T20:54:26Z",
        "updatedAt": "2018-08-08T20:54:26Z",
        "author": {
          "login": "JeremyKuhne"
        }
      },
      {
        "body": "Looks like it's ETW allocation events: https://github.com/dotnet/BenchmarkDotNet/blob/36bf7c4ee053134d0bfeaf5d757c12afa332f1c2/src/BenchmarkDotNet.Diagnostics.Windows/MemoryDiagnoser.cs#L74",
        "createdAt": "2018-08-08T23:45:34Z",
        "updatedAt": "2018-08-08T23:45:34Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "microsoft/msbuild#3608 is an implementation of this that should be revisited if we move forward with this bug.",
        "createdAt": "2019-07-03T19:27:02Z",
        "updatedAt": "2019-07-03T19:27:02Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Another possible implementation to help with this: microsoft/msbuild#2848; it should also be looked at.",
        "createdAt": "2019-07-08T17:00:47Z",
        "updatedAt": "2019-07-08T17:00:47Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Has there been more data to help with a design for a solution to this problem?\r\n\r\nLooking at previous comments/PRs, native calls vs `DirectoryInfo_EnumerateFiles` vs `FileSystemEnumerable` are some of the possible options I guess.",
        "createdAt": "2020-08-03T17:34:22Z",
        "updatedAt": "2020-08-03T17:47:37Z",
        "author": {
          "login": "mfkl"
        }
      },
      {
        "body": "We are waiting for final measurements for PR #6974 from @rokonec. It is likely that this PR the issue with up-to-date checks would be mostly resolved and that further room for improvements would be too small.  ",
        "createdAt": "2021-11-01T15:46:55Z",
        "updatedAt": "2021-11-01T15:46:55Z",
        "author": {
          "login": "AR-May"
        }
      },
      {
        "body": "Closing, assuming that #6974 will be merged soon. Please reopen otherwise.",
        "createdAt": "2021-11-08T14:30:27Z",
        "updatedAt": "2021-11-08T14:30:27Z",
        "author": {
          "login": "ladipro"
        }
      }
    ]
  }
}