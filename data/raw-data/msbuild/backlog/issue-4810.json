{
  "number": 4810,
  "title": "No good way to investigate target dependency",
  "body": "Given a build break that requires investigating the target dependency graph, what's a good way of doing it?\r\n\r\nFor example, given the project:\r\n\r\n```xml\r\n<Project DefaultTargets=\"D\">\r\n    <Target Name=\"A\">\r\n        <Error Text=\"error\" />\r\n    </Target>\r\n    <Target Name=\"B\" DependsOnTargets=\"A\"/>\r\n    <Target Name=\"C\" DependsOnTargets=\"B\"/>\r\n    <Target Name=\"D\" DependsOnTargets=\"C\" />\r\n</Project>\r\n```\r\n\r\nAssuming that there's many targets, and it's not obvious how target `A` gets to execute given the entry target `D`, there's no good way of seeing the D->C->B->A chain. The logs don't say anything about `C`\r\n\r\nText log:\r\n```\r\n18:12:24.899     1>Target \"A: (TargetId:2)\" in project \"E:\\delete\\cannotTellOrder\\build.proj\" (target \"B\" depends on it):\r\n                   Using \"Error\" task from assembly \"Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\".\r\n                   Task \"Error\" (TaskId:2)\r\n                     Task Parameter:Text=error (TaskId:2)\r\n18:12:24.913     1>E:\\delete\\cannotTellOrder\\build.proj(3,9): error : error\r\n                   Done executing task \"Error\" -- FAILED. (TaskId:2)\r\n18:12:24.913     1>Done building target \"A\" in project \"build.proj\" -- FAILED.: (TargetId:2)\r\n18:12:24.914     1>Done Building Project \"E:\\delete\\cannotTellOrder\\build.proj\" (default targets) -- FAILED.\r\n```\r\n\r\nBinary log:\r\n![image](https://user-images.githubusercontent.com/2255729/66692422-0f9e8b00-ec53-11e9-88bd-d6976e812e37.png)\r\n\r\nOne solution is to print out the remaining target stack whenever a target fails.",
  "state": "OPEN",
  "createdAt": "2019-10-12T01:15:47Z",
  "updatedAt": "2024-02-21T16:30:33Z",
  "closedAt": null,
  "author": {
    "login": "cdmihai"
  },
  "labels": [
    "User Experience",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Should we add `BeforeTargets`, `DependsOnTargets` and `AfterTargets` on `TargetStartedEventArgs` and `TargetSkippedEventArgs`?",
        "createdAt": "2020-01-03T00:58:43Z",
        "updatedAt": "2020-01-03T00:58:43Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "> Should we add BeforeTargets, DependsOnTargets and AfterTargets on TargetStartedEventArgs and TargetSkippedEventArgs?\r\n\r\nDoes MSBuild even fire TargetSkipped events for targets C and D in this example? If it does, then yeah, the log viewer could reconstruct the dependency chain then.",
        "createdAt": "2020-01-03T01:05:16Z",
        "updatedAt": "2020-01-03T01:05:16Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "Hmm, you're right, it might not even raise any events for these yet. I think I'll file a separate issue for logging BeforeTargets, DependsOnTargets and AfterTargets... I think it would be useful to see what the final values for those are.",
        "createdAt": "2020-01-03T02:23:40Z",
        "updatedAt": "2020-01-03T02:23:40Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "I see I already have one: https://github.com/microsoft/msbuild/issues/4936",
        "createdAt": "2020-01-03T02:24:56Z",
        "updatedAt": "2020-01-03T02:24:56Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "I've added a viewer hyperlink to the parent target for each target:\r\n\r\n![image](https://user-images.githubusercontent.com/679326/71704157-72ed1480-2d8d-11ea-9b37-40c218b0e5bd.png)\r\n\r\n",
        "createdAt": "2020-01-03T02:26:55Z",
        "updatedAt": "2020-01-03T02:26:55Z",
        "author": {
          "login": "KirillOsenkov"
        }
      }
    ]
  }
}