{
  "number": 8864,
  "title": "[Bug]: MSB4028 \"XmlQuery\" task's outputs could not be retrieved from the \"Values\" parameter. Specified cast is not valid.",
  "body": "### Issue Description\r\n\r\nAfter upgrading Visual Studio from 17.5.4 to 17.6.2, I am now encountering an error in our project's build. We are using MSBuildTasks and have the following target:\r\n\r\n```\r\n\t<Target Name=\"SetConfig\">\r\n\t\t<XmlQuery XmlFileName=\"$(ProjectDir)\\test.xml\" XPath=\"//add\">\r\n\t\t\t<Output TaskParameter=\"Values\" ItemName=\"ConfigSettings\" />\r\n\t\t</XmlQuery>\r\n\t</Target>\r\n```\r\nWhen building/rebuilding the project, I get an error for this line stating the following:\r\n\r\n`MSB4028\tThe \"XmlQuery\" task's outputs could not be retrieved from the \"Values\" parameter. Specified cast is not valid.\t`\r\n\r\nI have included a zipped project with minimal code to reproduce the issue.\r\nPLEASE NOTE: In the attached sample project, I was not always able to reproduce by using Build in Visual Studio, but using **Rebuild** did consistently generate this error.\r\n\r\n[XmlQueryError.zip](https://github.com/dotnet/msbuild/files/11708386/XmlQueryError.zip)\r\n\r\n\r\n### Steps to Reproduce\r\n\r\n- Unzip XmlQueryError.zip (attached)\r\n- Open the project in Visual Studio (I'm using version 17.6.2)\r\n- Rebuild the project (Please Rebuild rather than Build)\r\n- Note that the build fails. \r\n\r\n\r\n### Expected Behavior\r\n\r\nAn error should not occur.\r\n\r\n### Actual Behavior\r\n\r\nThe build fails. The Output window states: XmlQueryError\\XmlQueryError.csproj(24,4): error MSB4028: The \"XmlQuery\" task's outputs could not be retrieved from the \"Values\" parameter. Specified cast is not valid.\r\n\r\n### Analysis\r\n\r\nThis same issue occurs on at least 3 separate solutions my company has. \r\nI've reproduced it using the following versions of MSBuildTasks: 1.4.0.88, 1.5.0.235.\r\nThe error does not occur in VS 17.5.x but does occur in VS 17.6.x\r\n\r\nSee: https://github.com/loresoft/msbuildtasks/blob/master/Source/MSBuild.Community.Tasks/Xml/XmlQuery.cs#L70\r\nThe Values property is any array `ITaskItem[]`.\r\n\r\n\r\n### Versions & Configurations\r\n\r\n_No response_",
  "state": "CLOSED",
  "createdAt": "2023-06-09T16:46:46Z",
  "updatedAt": "2024-02-21T14:04:43Z",
  "closedAt": "2023-06-29T15:23:30Z",
  "author": {
    "login": "jehhynes"
  },
  "labels": [
    "bug",
    "backlog",
    "regression",
    "Area: Engine",
    "Priority:2",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "I repro; likely related to https://github.com/dotnet/msbuild/issues/8645. The task in question references MSBuild 4.0 instead of 3.5 but that's still pretty stale. Unfortunately since it's 4.0 that means you lose the override-it-to-run-out-of-proc workaround for 3.5 tasks.",
        "createdAt": "2023-06-09T21:41:13Z",
        "updatedAt": "2023-06-09T21:41:13Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Depending on the details of your `XmlQuery` usage you may be able to work around this by switching to the built-in [`XmlPeek`](https://learn.microsoft.com/visualstudio/msbuild/xmlpeek-task).",
        "createdAt": "2023-06-09T21:43:14Z",
        "updatedAt": "2023-06-09T21:43:14Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Failing stack is\r\n\r\n```\r\nSystem.Core.dll!System.Linq.Enumerable.CastIterator<System.Collections.DictionaryEntry>(System.Collections.IEnumerable source) Line 2550\r\nSystem.Core.dll!System.Linq.Enumerable.WhereSelectEnumerableIterator<System.Collections.DictionaryEntry, System.Collections.Generic.KeyValuePair<string, string>>.MoveNext() Line 392\r\nSystem.Core.dll!System.Linq.Enumerable.WhereSelectEnumerableIterator<System.Collections.Generic.KeyValuePair<string, string>, Microsoft.Build.Execution.ProjectMetadataInstance>.MoveNext() Line 392\r\nMicrosoft.Build.dll!Microsoft.Build.Collections.CopyOnWritePropertyDictionary<Microsoft.Build.Execution.ProjectMetadataInstance>.ImportProperties.__Items|0() Line 294\r\nSystem.Collections.Immutable.dll!System.Collections.Immutable.ImmutableDictionary<string, Microsoft.Build.Execution.ProjectMetadataInstance>.AddRange(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, Microsoft.Build.Execution.ProjectMetadataInstance>> items, System.Collections.Immutable.ImmutableDictionary<string, Microsoft.Build.Execution.ProjectMetadataInstance>.MutationInput origin, System.Collections.Immutable.ImmutableDictionary<string, Microsoft.Build.Execution.ProjectMetadataInstance>.KeyCollisionBehavior collisionBehavior)\r\nSystem.Collections.Immutable.dll!System.Collections.Immutable.ImmutableDictionary<string, Microsoft.Build.Execution.ProjectMetadataInstance>.SetItems(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, Microsoft.Build.Execution.ProjectMetadataInstance>> items)\r\nMicrosoft.Build.dll!Microsoft.Build.Collections.CopyOnWritePropertyDictionary<Microsoft.Build.Execution.ProjectMetadataInstance>.ImportProperties(System.Collections.Generic.IEnumerable<Microsoft.Build.Execution.ProjectMetadataInstance> other) Line 290\r\nMicrosoft.Build.dll!Microsoft.Build.BackEnd.TaskExecutionHost.GatherTaskItemOutputs(bool outputTargetIsItem, string outputTargetName, Microsoft.Build.Framework.ITaskItem[] outputs, Microsoft.Build.Construction.ElementLocation parameterLocation, Microsoft.Build.Framework.TaskPropertyInfo parameter) Line 1461\r\nMicrosoft.Build.dll!Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.GatherTaskOutputs(string parameterName, Microsoft.Build.Construction.ElementLocation parameterLocation, bool outputTargetIsItem, string outputTargetName) Line 437\r\nMicrosoft.Build.dll!Microsoft.Build.BackEnd.TaskBuilder.GatherTaskOutputs(Microsoft.Build.BackEnd.ITaskExecutionHost taskExecutionHost, Microsoft.Build.BackEnd.TaskExecutionMode howToExecuteTask, Microsoft.Build.BackEnd.ItemBucket bucket) Line 1142\r\nMicrosoft.Build.dll!Microsoft.Build.BackEnd.TaskBuilder.ExecuteInstantiatedTask(Microsoft.Build.BackEnd.ITaskExecutionHost taskExecutionHost, Microsoft.Build.BackEnd.Logging.TaskLoggingContext taskLoggingContext, Microsoft.Build.BackEnd.TaskHost taskHost, Microsoft.Build.BackEnd.ItemBucket bucket, Microsoft.Build.BackEnd.TaskExecutionMode howToExecuteTask) Line 978\r\n```",
        "createdAt": "2023-06-09T21:56:23Z",
        "updatedAt": "2023-06-09T21:56:23Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "The [MSBuildTasks NuGet package](https://www.nuget.org/packages/MSBuildTasks/1.5.0.235) was last released in 2017. The project has been looking for a [new maintainer](https://github.com/loresoft/msbuildtasks/#maintainer-wanted) since 2019.\r\n\r\nThe tasks are built to .Net Framework v4.0. It appears that a .Net Framework application configuration file is being read with `XmlQuery`. Your project is .Net 6.0.\r\n\r\nLooking at the [source for `XmlQuery`](https://github.com/loresoft/msbuildtasks/blob/master/Source/MSBuild.Community.Tasks/Xml/XmlQuery.cs), it makes heavy use of adding metadata to the returned items.\r\n\r\n[`XmlPeek`](https://learn.microsoft.com/visualstudio/msbuild/xmlpeek-task) doesn't add metadata. It doesn't try to mimic returning an XML node.\r\n\r\nIf you just need to cherry pick specific values, changing to `XmlPeek` won't be too difficult. You can, for example, write an XPath that will return the value of the `value` attribute for `add` elements with a `key` attribute with a value of `key1` - e.g. `/configuration/add[@key='key1']/@value`.\r\n\r\nMapping the complete configuration file to an item collection might be implemented by using `XmlPeek` with an XPath that returns all the `key` values (`/configuration/add/@key`) and then batching to run `XmlPeek` to retrieve each `value` for each `key`.",
        "createdAt": "2023-06-11T01:36:27Z",
        "updatedAt": "2023-06-11T01:36:27Z",
        "author": {
          "login": "jrdodds"
        }
      },
      {
        "body": "@jrdodds Thanks for the workaround suggestions.",
        "createdAt": "2023-06-11T10:43:26Z",
        "updatedAt": "2023-06-11T10:43:26Z",
        "author": {
          "login": "jehhynes"
        }
      },
      {
        "body": "@rainersigwald Could the problem have been caused by this commit? https://github.com/dotnet/msbuild/commit/8ffc3fe3dc15b17ecf39a289deb5cd7fb65993a0\r\n\r\nPerhaps this should fallback to the prior behavior. Something like this:\r\n\r\n```\r\nnewItem.SetMetadataOnTaskOutput(output.CloneCustomMetadata().Cast<object>()\r\n    .Select(x =>\r\n        x is DictionaryEntry de ? new KeyValuePair<string, string>((string)de.Key, EscapingUtilities.Escape((string)de.Value)) :\r\n        x is KeyValuePair<string, string> kvp ? new KeyValuePair<string, string>(kvp.Key, EscapingUtilities.Escape(kvp.Value)) :\r\n        throw new Exception(\"Metadata item was neither DictionaryEntry nor KeyValuePair<string, string>\")\r\n    )\r\n);\r\n```",
        "createdAt": "2023-06-11T10:52:37Z",
        "updatedAt": "2023-06-11T11:02:45Z",
        "author": {
          "login": "jehhynes"
        }
      },
      {
        "body": "@jehhynes I don't think that code is being hit with `XmlQuery` because the `XmlQuery` task is returning `TaskItem` instances.\r\n\r\nI think it is going down this path: https://github.com/dotnet/msbuild/blob/c6daff1259eb3c2a42d53f664f82c3c8a66c6166/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs#LL1374C1-L1381C30",
        "createdAt": "2023-06-11T21:07:26Z",
        "updatedAt": "2023-06-11T21:07:26Z",
        "author": {
          "login": "jrdodds"
        }
      },
      {
        "body": "It appears to me that the output is ITaskItem which may or may not be a TaskItem.\r\n\r\n```\r\n        [Output]\r\n        public ITaskItem[] Values\r\n        {\r\n            get { return values.ToArray(); }\r\n        }\r\n```\r\n\r\nIn the Execute() method of XmlQuery (https://github.com/loresoft/msbuildtasks/blob/master/Source/MSBuild.Community.Tasks/Xml/XmlQuery.cs#L133), the case for XPathExpression.ReturnType of XPathResultType.NodeSet is adding values of type XmlNodeTaskItem which implements ITaskItem but does not inherit TaskItem (https://github.com/loresoft/msbuildtasks/blob/master/Source/MSBuild.Community.Tasks/Xml/XmlNodeTaskItem.cs#L14). \r\n\r\n```\r\ncase XPathResultType.NodeSet:\r\n    XPathNodeIterator nodes = navigator.Select(expression);\r\n    while (nodes.MoveNext())\r\n    {\r\n        values.Add(new XmlNodeTaskItem(nodes.Current, reservedMetaDataPrefix));\r\n    }\r\n```\r\n\r\n`public class XmlNodeTaskItem : ITaskItem`\r\n\r\nTherefore I think it would actually be following this path: https://github.com/dotnet/msbuild/blob/c6daff1259eb3c2a42d53f664f82c3c8a66c6166/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs#LL1398C45-L1398C45\r\n\r\n\r\n```\r\nif (outputAsProjectItem != null) //This would be null since XmlNodeTaskItem does not inherit TaskItem\r\n{\r\n    ...\r\n}\r\nelse //This would be entered\r\n{\r\n    if (output is ITaskItem2 outputAsITaskItem2) // This would not be entered since XmlNodeTaskItem does not inherit ITaskItem2\r\n    {\r\n        ...\r\n    }\r\n    else //This would be entered\r\n    {\r\n        // Not a ProjectItemInstance.TaskItem or even a ITaskItem2, so we have to fake it.\r\n        // Setting an item spec expects the escaped value, as does setting metadata.\r\n        newItem = new ProjectItemInstance(_projectInstance, outputTargetName, EscapingUtilities.Escape(output.ItemSpec), parameterLocationEscaped);\r\n\r\n        newItem.SetMetadataOnTaskOutput(output.CloneCustomMetadata()\r\n            .Cast<DictionaryEntry>()\r\n            .Select(x => new KeyValuePair<string, string>((string)x.Key, EscapingUtilities.Escape((string)x.Value))));\r\n    }\r\n}\r\n```\r\n",
        "createdAt": "2023-06-12T12:10:24Z",
        "updatedAt": "2023-06-12T12:18:38Z",
        "author": {
          "login": "jehhynes"
        }
      },
      {
        "body": "I had misread the class definition of `XmlNodeTaskItem` as inheriting from `TaskItem`.",
        "createdAt": "2023-06-12T12:20:25Z",
        "updatedAt": "2023-06-12T12:20:25Z",
        "author": {
          "login": "jrdodds"
        }
      },
      {
        "body": "I was very confused as to what was going on here. I asked internally and  @stephentoub helped me understand:\r\n\r\nIn the original code\r\n\r\nhttps://github.com/dotnet/msbuild/blob/698aac491aa62b8e01b696877467d14da469f3ea/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs#L1450-L1453\r\n\r\nC# will, per its [`foreach` rules](https://learn.microsoft.com/dotnet/csharp/language-reference/statements/iteration-statements#the-foreach-statement), call `GetEnumerator()` on the return value of `CloneCustomMetadata()`. Because that's an `IDictionary`, it gets [an implementation of `IDictionary.GetEnumerator()` which returns `DictionaryEntry` objects](https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2.system-collections-idictionary-getenumerator?view=net-7.0).\r\n\r\nInserting the LINQ changes things, because `Cast<T>` works on [`IEnumerable.GetEnumerator()`](https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2.system-collections-ienumerable-getenumerator?view=net-7.0), which [returns `KeyValuePair<TKey, TValue>` when the concrete returned value is a `Dictionary<TKey, TValue>`](https://referencesource.microsoft.com/#mscorlib/system/collections/generic/dictionary.cs,713).\r\n\r\nTo play around with this, check out this [minimized SharpLab repro](https://sharplab.io/#v2:C4LgTgrgdgNAJiA1AHwAIAYAEqCMA6AYQHsAbEgUwGNgBLIqAZwG4BYAKA2xwBZWOtceADI0oARz7t2UAIYBbcgwAOMyuUwAlGaPJgAIkUVRgAVShxdDYDPMBRKBAVgZwImGZSOAJi4B2dgDe7JghXABs2NyYALLaUAAUuOgA2gC6mDJgAOYMAJTBoUFsoSWYABpyJAByRBaoYQCSwORymAAemAC8mFDkAO7xuZLFpSEAZm7kqgAWmPF6NNR0smAAnvbAa5g0za2i7YQk9OQEEFZEctHk1nAuMoP5I6NFo6OCuACc8TsteADi1wAKqslOQHnxXpgAL6eSETMBTSizeJEABGACsqMBtrttlADgQjr1TudLtcZLdrINCDIrAAeBZLeiZdbGNYAPgeBWe3MhXDwn2+u3+QJBYNyQ15JRhT2h7Bl7FQAGY8c0wGNVOoGvUmi1AryGozaMytoTjiTXGSbndBnwFRwVagfBVqrVyDrcSBMNrGrt9bKlGAaAA3FzqI3LFl0pIwLjodmYBTWPR3Lo9fqDTABTDJABEMlz6W6udRuehwxKyu9EZNq0wZuJZ0tV2tVMeJRer1QvnTfUwNZWq2jOHQsaSnKTMhT1klsplMqAA==).",
        "createdAt": "2023-06-12T17:52:37Z",
        "updatedAt": "2023-06-12T17:52:37Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Team triage: we would like to write a test catching this issue.",
        "createdAt": "2023-06-13T13:52:45Z",
        "updatedAt": "2023-06-13T13:52:45Z",
        "author": {
          "login": "AR-May"
        }
      }
    ]
  }
}