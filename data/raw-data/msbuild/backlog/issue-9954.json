{
  "number": 9954,
  "title": "[Bug]: Valid BCP 47 tags in the resource file name not recognized",
  "body": "### Issue Description\n\nI was trying to add support of an uncommon language to my app with resource files, before I realized its language tag was not being recognized by MSBuild, and it was not generating the expected satellite assembly for that language.\n\n### Steps to Reproduce\n\n1. Create a project with three resource files: `Resources.resx`, `Resources.zh.resx`, and `Resources.yue.resx`.\r\n2. Build the project.\n\n### Expected Behavior\n\nThe satellite assemblies for both `zh` and `yue` are generated.\n\n### Actual Behavior\n\nThe satellite assembly for `zh` is generated, but the one for `yue` is not.\n\n### Analysis\n\nI suspect that the following code is causing this issue.\r\n\r\nhttps://github.com/dotnet/msbuild/blob/7ca3c98fad986066bbf2802c863236b4a0f4e34a/src/Tasks/CultureInfoCache.cs#L70\r\n\r\nA valid language code is not necessarily predefined.\r\n\n\n### Versions & Configurations\n\n_No response_",
  "state": "CLOSED",
  "createdAt": "2024-03-31T21:42:39Z",
  "updatedAt": "2024-04-26T15:58:24Z",
  "closedAt": "2024-04-26T15:58:24Z",
  "author": {
    "login": "PopSlime"
  },
  "labels": [
    "bug",
    "Priority:2",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "f-alizada"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Related to <https://github.com/dotnet/msbuild/issues/9882#issuecomment-2004041097> \u2014 projects should apparently set the `Culture` metadata to make sure that culture-specific resources are recognised as such in every build environment.",
        "createdAt": "2024-04-01T11:20:31Z",
        "updatedAt": "2024-04-01T11:20:31Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "@KalleOlaviNiemitalo is correct: the long-standing behavior of MSBuild is to attempt to detect localized resources based on the cultures available to _the OS that is running the build_. If you want to use specific culture that may not be defined in all of your build environments, specify it explicitly with `Culture` metadata to bypass the detection. And by extension since you can't completely control what your OS vendor does with cultures: it's a good idea to do that for all language-specific resources.",
        "createdAt": "2024-04-01T14:33:09Z",
        "updatedAt": "2024-04-01T14:33:09Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "As far as I can see, MSBuild is not handling this `Culture` metadata correctly as well at the moment. It still tries to infer the culture from the file name even if the `Culture`, `WithCulture`, and `DependentUpon` metadata is explicitly set, and even ends up failing the build if the `Culture` metadata mismatches with the culture inferred from the file name.",
        "createdAt": "2024-04-02T10:11:50Z",
        "updatedAt": "2024-04-02T10:11:50Z",
        "author": {
          "login": "PopSlime"
        }
      },
      {
        "body": "By the way, for now I have modified this logic, built it, and replaced the `Microsoft.Build.Tasks.Core.dll` locally and it worked perfectly on my project.\r\n\r\n![3d13c4e468c2efc95917e1ce056a90ca](https://github.com/dotnet/msbuild/assets/61138090/2dec2756-11da-40ee-82cb-231a86305941)\r\n",
        "createdAt": "2024-04-02T10:18:05Z",
        "updatedAt": "2024-04-02T10:18:05Z",
        "author": {
          "login": "PopSlime"
        }
      },
      {
        "body": "Hi everyone :) \r\n\r\n1.  Culture metadata is not respected during the identifying the culture info and is overriden even if presented. Code: https://github.com/dotnet/msbuild/blob/053feb0db1845c96e2e9a60e676039d1503b916f/src/Tasks/AssignCulture.cs#L134-L154\r\n2. Supporting Test: https://github.com/dotnet/msbuild/blob/053feb0db1845c96e2e9a60e676039d1503b916f/src/Tasks.UnitTests/AssignCulture_Tests.cs#L44-L58\r\n3. The Documentation says otherwise : https://learn.microsoft.com/en-us/visualstudio/msbuild/assignculture-task?view=vs-2022\r\n\r\nWe have discussed with @rainersigwald (thank you! ) some approaches: Order of the items more preferred to less \r\n\r\n1. Introduce a new 'Property': if set to 'true', the approach described in Documentation will run \r\n2. Introduce new metadata for EmbeddedResource \r\n3. Change the approach according to the documentation, but put the change behind the change wave\r\n\r\n@baronfel Could you please share your opinion on the approaches ? :) \r\nThank you in advance! \r\n",
        "createdAt": "2024-04-11T10:28:10Z",
        "updatedAt": "2024-04-11T10:28:10Z",
        "author": {
          "login": "f-alizada"
        }
      },
      {
        "body": "One hack would be to introduce a new property, say `CulturesInFileNames`, whose value is a list like `en-uk;de-de;ja-jp`.  Then pass that to the relevant tasks and, if not empty, recognise those and only those cultures in file names; completely ignore what the operating system or .NET Runtime supports.  Developers could then define this solution-wide in Directory.Build.props with little effort.",
        "createdAt": "2024-04-11T11:38:15Z",
        "updatedAt": "2024-04-11T11:38:15Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "@KalleOlaviNiemitalo that's a good idea! Pros: small change. Cons: doesn't fully resolve the \"is `cs` Czech or C#?\" problem we've run into so would still require setting `WithCulture=\"false\"` on some files. ",
        "createdAt": "2024-04-11T15:42:43Z",
        "updatedAt": "2024-04-11T15:42:43Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "There's some precedent for allow-lists of known resources - the `SatelliteResourceLanguages` property exists to 'filter' the resources for packages/dependencies of a project to a certain well-known set. Could we start looking at this property as an input to the culture-lookup? Potentially with @KalleOlaviNiemitalo's property as a more-specific override?",
        "createdAt": "2024-04-15T15:16:52Z",
        "updatedAt": "2024-04-15T15:16:52Z",
        "author": {
          "login": "baronfel"
        }
      },
      {
        "body": "Thank you @KalleOlaviNiemitalo, @baronfel, and @rainersigwald for your input!\r\nI was mostly thinking of addressing the inconsistency between the documentation and the actual implementation (to align the behavior). However, adding a new list of supported languages brings an additional parameter to the Task (list of cultures) that needs to be respected during the build. I believe this is out of the scope of this issue (please correct me if I'm wrong) :)\r\n\r\nAny approach introduced here will be opt-in, also the I think a good direction for the culture specific files is to have the Culture set explicitly (For reference: https://github.com/dotnet/msbuild/issues/9882). \r\n\r\nPlease feel free to correct me if I stated/understood something incorrectly :) \r\n",
        "createdAt": "2024-04-16T07:31:27Z",
        "updatedAt": "2024-04-16T07:31:27Z",
        "author": {
          "login": "f-alizada"
        }
      }
    ]
  }
}