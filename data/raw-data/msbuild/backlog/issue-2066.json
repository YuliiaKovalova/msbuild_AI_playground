{
  "number": 2066,
  "title": "Avoid re-evaluation when GetItemProvenance or GetAllGlobs are called",
  "body": "[GetItemProvenance](https://github.com/Microsoft/msbuild/blob/master/src/Build/Definition/Project.cs#L1341) and [GetAllGlobs](https://github.com/Microsoft/msbuild/blob/master/src/Build/Definition/Project.cs#L1113) require the [evaluated item elements](https://github.com/Microsoft/msbuild/blob/master/src/Build/Definition/Project.cs#L3073) to work on. These represent all the item elements that the Evaluator took into consideration, and was added to support the two globbing APIs. However, recording this extra data caused a performance regression due to the new array list growth.\r\n\r\nThe \"temporary\" solution is to not record the item element data by default, and have the two APIs [request it on demand](https://github.com/Microsoft/msbuild/blob/master/src/Build/Definition/Project.cs#L1383) by doing another re-evaluation. API users also have the option of requesting this extra data right from the very first evaluation by [setting a flag](https://github.com/Microsoft/msbuild/blob/master/src/Build/Definition/ProjectLoadSettings.cs#L40).\r\n\r\nThis solution is not ideal because it introduces surprise re-evaluations if the API callers missed setting the flag, and because it introduces hidden dependencies throughout the code, making it harder to understand. And the perf regression is still there, the only difference is that API callers choose when to take it.\r\n\r\nBetter solutions:\r\n- replace the growing List<ProjectItemElement> with a different data structure. Maybe a \"block array list\" which grows different from a `List`: rather than copying the small array into a larger array and disposing the old array (GC pressure, etc), keep the old array, allocate a (potentially larger) new array, and link the two. Memory pressure is still there but GC pressure should go away.\r\n- rather than keep adding new lists in the Evaluator when some bit of code requires some new bit of data, implement a visitor over the project root elements so that API callers can do partial evaluations and just get the info they need. Tracked in #2021. This way GetItemProvenance and GetAllGlobs can just re-walk the minimal import tree to get and cache the data they need.",
  "state": "OPEN",
  "createdAt": "2017-05-05T18:23:56Z",
  "updatedAt": "2024-02-21T16:36:51Z",
  "closedAt": null,
  "author": {
    "login": "cdmihai"
  },
  "labels": [
    "Area: Performance",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": []
  }
}