{
  "number": 2713,
  "title": "Long term effort for getting off Environment variables (for reproducible builds)",
  "body": "The fact that MSBuild initializes properties with environment variables is very bad for reproducible builds. CI servers often have different sets of environment variables set, and investigating on the CI server is usually hard.\r\n\r\nFor compatibility reasons, I doubt we'll ever get rid of reading environment, but I hope there can be \"Strict Mode\" where environment is not read at all. Builds could opt in to strict mode and use other means of initializing global state.\r\n\r\nExample: \r\nhttps://github.com/NuGet/NuGet.Client/blob/2aad8d25e66e9c3737b220631f3661bb6235d14b/src/NuGet.Core/NuGet.Build.Tasks/NuGet.targets#L555-L565\r\n\r\nImagine if the CI Server defines the VERSION environment variable and sets it to something like a Git SHA.\r\n\r\nYou get a build failure like this:\r\n```\r\n/Library/Frameworks/Mono.framework/Versions/5.8.0/lib/mono/xbuild/NuGet.targets(102,5): error : 'fbc5117dcb21f0d180c4b199d828d4f4b9d6f4a8' is not a valid version string. [/Users/builder/data/lanes/5668/fbc5117d/source/md-addins/MacSetup/build/BinaryChecker.proj]\r\n/Library/Frameworks/Mono.framework/Versions/5.8.0/lib/mono/xbuild/NuGet.targets(102,5): error : Parameter name: value [/Users/builder/data/lanes/5668/fbc5117d/source/md-addins/MacSetup/build/BinaryChecker.proj]\r\n```\r\n\r\nTracking it down from that failure to that line to NuGet.targets is highly non-trivial.",
  "state": "OPEN",
  "createdAt": "2017-11-09T22:15:12Z",
  "updatedAt": "2025-06-02T08:30:37Z",
  "closedAt": null,
  "author": {
    "login": "KirillOsenkov"
  },
  "milestone": {
    "title": "Consider for Next Major Version"
  },
  "assignees": {
    "nodes": [
      {
        "login": "xoofx"
      }
    ]
  },
  "labels": [
    "Area: Debuggability",
    "needs-design",
    "Feature: Warning Waves",
    "triaged"
  ],
  "comments": {
    "nodes": [
      {
        "body": "Example issue: https://github.com/NuGet/Home/issues/6154",
        "createdAt": "2017-11-09T22:59:30Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "#1144",
        "createdAt": "2017-11-10T04:39:55Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "Years ago when I got a new PC at work (an hp), as part of the default install of windows (from hp or internally not sure) there were a few environment variables that were set, one was `PLATFORM` which completely hosed visual studio until I figured it out.",
        "createdAt": "2017-11-10T16:40:52Z",
        "author": {
          "login": "david-driscoll"
        }
      },
      {
        "body": "Related: https://github.com/dotnet/sdk/issues/481\r\n\r\nAlso looks like some folks are using `VERSION` env vars on docker images that throw off builds. Was diagnosing the impact and workarounds with @niemyjski - e.g. `TreatAsLocalProperty`. ",
        "createdAt": "2017-11-10T16:47:41Z",
        "author": {
          "login": "dasMulli"
        }
      },
      {
        "body": "Just like `/noautoresponse`, I'd name this something like `/noenvironment` or `/novars` or (uglier?) `/noenvvars`",
        "createdAt": "2017-11-10T17:16:57Z",
        "author": {
          "login": "kzu"
        }
      },
      {
        "body": "Opting out of the specific behavior was what I was suggesting in #1144",
        "createdAt": "2017-11-10T17:20:26Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "Another example issue: https://github.com/NuGet/Home/issues/5614",
        "createdAt": "2017-12-13T15:37:43Z",
        "author": {
          "login": "sandyarmstrong"
        }
      },
      {
        "body": "Want to add my most recent pain point here. I've been working on moving the Roslyn infrastructure from Jenkins to VSTS. When defining my initial YAML file I made the fateful decision to name on of the YAML matrix variables \"configuration\".  \r\n\r\nAs a result this ended up adding an environment variable called \"configuration\" which was then present for our build and subsequent running of unit tests. The unit tests included a set of MSBuild integration tests which happily inherited this environment variable, set some defaults and ended up breaking our tests in a really subtle way. Took three days of digging to get to the bottom of this one.\r\n",
        "createdAt": "2018-07-17T18:17:33Z",
        "author": {
          "login": "jaredpar"
        }
      },
      {
        "body": "We talked this over, and we're interested in introducing:\r\n- explicit environment reads with a shorthand `[Env]::Get(\"Path\")` (same as the current `[System.Environment]::GetEnvironmentProperty()`)\r\n- a property lookup fallback mechanism. I think the order would be reserved properties -> global properties -> defined properties -> environment properties. Right now these just get dumped in a global scope in the right order.\r\n- option to turn off implicit environment reads\r\n- option to error on implicit environment reads\r\n- log implicit environment reads\r\n",
        "createdAt": "2018-08-07T22:57:20Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "> * option to turn off implicit environment reads\r\n> * option to error on implicit environment reads\r\n\r\nI'd love to see a mechanism for this to be controlled _without_ having to change how `msbuild` is invoked, preferably via some new reserved MSBuild properties (e.g. I would set these properties in `Directory.Build.props`).\r\n\r\nI realize this might have some tricky implications (e.g. setting the property conditionally based on an implicit environment read), but allowing this behavior only via command line options will only confuse the matter.\r\n\r\nPerhaps any condition expressions applied to reserved properties would _never_ allow implicit environment reads?\r\n\r\n```bash\r\nexport SOME_ENV_VAR=foo\r\n```\r\n\r\n```xml\r\n<PropertyGroup>\r\n  <MSBuildDisableImplicitEnvironmentProperties>true</MSBuildDisableImplicitEnvironmentProperties>\r\n  <MSBuildDisableImplicitEnvironmentProperties Condtion=\"'$(SOME_ENV_VAR)' != ''\">false</MSBuildDisableImplicitEnvironmentProperties>\r\n</PropertyGroup>\r\n```\r\n\r\nSince `MSBuildDisableImplicitEnvironmentProperties` is \"reserved\", `$(SOME_ENV_VAR)` would never be resolved via environment, and thus the original value of the property would remain `true`.",
        "createdAt": "2018-08-08T15:18:55Z",
        "author": {
          "login": "abock"
        }
      },
      {
        "body": "A problem with setting `MSBuildDisableImplicitEnvironmentProperties` is dealing with what happens _before_ that property is encountered. What if it's the last property defined in a project, after several environment reads?",
        "createdAt": "2018-08-08T15:30:51Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> A problem with setting MSBuildDisableImplicitEnvironmentProperties is dealing with what happens before that property is encountered. \r\n\r\nIndeed. I don't think it can realistically be done as a property. Unless the semantics were instead \"no more enviornment reads after this is set\" which doesn't seem as useful. \r\n\r\n> What if it's the last property defined in a project, after several environment reads?\r\n\r\nSo I'm going to say this and immediately duck: could it be in global.json? ",
        "createdAt": "2018-08-08T15:38:29Z",
        "author": {
          "login": "jaredpar"
        }
      },
      {
        "body": "Right, that's why I said it's a bit tricky \ud83d\ude04. This would almost need to be pre-processed.\r\n\r\nThe concern I have though is that I want my projects to define how MSBuild behaves - not the command line. The user experience for devs should just be `git clone` and then `msbuild` or `dotnet build` and not having to worry about which project needs which set of command line options passed to it.\r\n\r\nIn the Unix world, most projects can be built simply with `./configure && make`. I strive to provide a similar experience for my .NET projects as well.\r\n\r\nAnother alternative could simply be an \"implied\" response file.\r\n\r\n```bash\r\n\ud83d\udc49tree MyProject\r\nMyProject\r\n\u251c\u2500\u2500 Directory.Build.props\r\n\u251c\u2500\u2500 Directory.Build.rsp\r\n\u251c\u2500\u2500 Project.sln\r\n\u2514\u2500\u2500 README.md\r\n```\r\n\r\n```bash\r\n\ud83d\udc49cat MyProject/Directory.Build.rsp\r\n/nologo\r\n/disableImplicitEnvironmentProperties\r\n/strict\r\n/etc\r\n```\r\n",
        "createdAt": "2018-08-08T15:38:47Z",
        "author": {
          "login": "abock"
        }
      },
      {
        "body": "\ud83d\udcaf WOW, TIL\r\n\r\n```\r\n  @<file>            Insert command-line settings from a text file. To specify\r\n                     multiple response files, specify each response file\r\n                     separately.\r\n\r\n                     Any response files named \"msbuild.rsp\" are automatically\r\n                     consumed from the following locations:\r\n                     (1) the directory of msbuild.exe\r\n                     (2) the directory of the first project or solution buil\r\n```",
        "createdAt": "2018-08-08T15:39:10Z",
        "author": {
          "login": "abock"
        }
      },
      {
        "body": "> So I'm going to say this and immediately duck: could it be in global.json?\r\n\r\nThis would honestly be great, since we already have this file pretty much everywhere now. I love the new (to me, clearly) auto-response file, so perhaps we could do the same for global.json, just so there isn't yet another file at the root of the repo, etc.",
        "createdAt": "2018-08-08T15:41:10Z",
        "author": {
          "login": "abock"
        }
      },
      {
        "body": "@abock There is support for `Directory.Build.rsp`: https://docs.microsoft.com/en-us/visualstudio/msbuild/customize-your-build#add-arguments-to-command-line-msbuild-invocations-for-your-project (implemented by #2627).\r\n\r\n> global.json\r\n\r\n_hisses, skitters away_",
        "createdAt": "2018-08-08T15:54:55Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Just ran again into this issue, not the first time, but for example, someone in our company had the \"VERSION\" env variable setup... and it was messing the entire build, changing the implicit version of all of our assemblies, and breaking many of our tests.\r\n\r\nBut I have been through also many times in the past with some weird errors caused by similar env variable conflicting issues...\r\n\r\nSo I'm all for `/disableImplicitEnvironmentProperties` as suggested @abock\r\n\r\nI'm keen to open a PR if it is possible to bring that option.",
        "createdAt": "2020-07-02T10:27:49Z",
        "author": {
          "login": "xoofx"
        }
      },
      {
        "body": "@xoofx Sure, I'll assign this to you. Can you sketch a quick plan for the implementation you're thinking of before diving in all the way? Some possibly-not-obvious things to think about: API exposure (is it just a new `BuildParameter`?), node reuse (must not be kept in persistent state), reporting interaction with #5038.\r\n\r\nAlso note: if this is command-line driven, it will NOT apply to builds in Visual Studio. So it's still an improvement but might result in some confusing command-line vs. UI-driven build differences.",
        "createdAt": "2020-07-02T16:34:39Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> @xoofx Sure, I'll assign this to you. Can you sketch a quick plan for the implementation you're thinking of before diving in all the way? Some possibly-not-obvious things to think about: API exposure (is it just a new `BuildParameter`?), node reuse (must not be kept in persistent state), reporting interaction with #5038.\r\n\r\nI don't know yet, I haven't looked at the detail (I come to msbuild code base once every 2 years, so I'm not super fluent with it \ud83d\ude05 ). But assuming that this would add a new parameter `/disableImplicitEnvironmentProperties` that's what you mean by `BuildParameter`? \r\nOk for node reuse hope it won't be a trouble to disable that in that case.\r\nAnd yep for #5038, I saw that.\r\n\r\n> Also note: if this is command-line driven, it will NOT apply to builds in Visual Studio. So it's still an improvement but might result in some confusing command-line vs. UI-driven build differences.\r\n\r\nIndeed, but I would assume that we could then later bring support for that inside Visual Studio (e.g as an option in build properties page), separately from this PR,  right?\r\n",
        "createdAt": "2020-07-02T16:40:03Z",
        "author": {
          "login": "xoofx"
        }
      },
      {
        "body": "MSBuild's command-line parameters are defined in https://github.com/microsoft/msbuild/blob/master/src/MSBuild/CommandLineSwitches.cs. They're mostly used to influence the call to the MSBuild API that MSBuild.exe makes, like so:\r\n\r\nhttps://github.com/microsoft/msbuild/blob/96403c598a166e5a06933f78ace75528a1d1f3b0/src/MSBuild/XMake.cs#L1147-L1158\r\n\r\nSo implementing this would involve making it possible to express in the API, then connecting a new command line argument to that.\r\n\r\nYes, after it's implemented in the API we can separately request a VS UI option to set that flag in its own calls to our API.",
        "createdAt": "2020-07-02T16:43:39Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I don't like +1 posts/comments, but there hasn't been any activity in this issue for 18 months, so I'd just like to add my 2c that investigating issues with NuGet's CI is on occasion challenging. A command line option to tell MSBuild not to import environment variables would help make our CI yaml more clear about what parameters are used by the tasks.\r\n\r\nSorry about this notification that doesn't actually progress this feature request at all.",
        "createdAt": "2022-02-25T17:25:39Z",
        "author": {
          "login": "zivkan"
        }
      },
      {
        "body": "@rainersigwald curious, do we have a set of environment variables that are essentially necessary for MSBuild to be importing by default? For example I would say importing `%JAREDPAR_JOKE_OF_THE_DAY%` is not necessary because nothing in MSBuild fundamentally depends on that. I assume though there are a few, like `%PATH%`, for which it's reasonable to assume that build depends on hence should be imported. \r\n\r\nIf we had a known set I wonder if we could apply it to two problems:\r\n\r\n- The set of environment variables considered for builds\r\n- The set of environment variables captured by binary logs. Not capturing the world here by default would reduce the amount of verbiage we have to give to customers before asking for a binary log. Cause by default they wouldn't capture anything unnecessary. \r\n\r\nYeah both probably need switches to enable the behavior but seems like the list of environment variables for both cases could be the same. At least to my poorly trained eye \ud83d\ude04 ",
        "createdAt": "2022-02-25T18:37:49Z",
        "author": {
          "login": "jaredpar"
        }
      },
      {
        "body": "I think that ``%PATH%``, ``%CWD%``, ``%System%``, ``%WINDIR%``, ``%PROGRAMFILES%`` are among a few that are needed by msbuild things (perhaps more).",
        "createdAt": "2023-05-08T13:55:25Z",
        "author": {
          "login": "AraHaan"
        }
      },
      {
        "body": "One recent development in this space is that MSBuild now logs all environment variables that have been used during the build. Binlogs will only contain the used ones, so it\u2019s at least easier to audit.",
        "createdAt": "2023-05-08T16:07:56Z",
        "author": {
          "login": "KirillOsenkov"
        }
      }
    ]
  }
}