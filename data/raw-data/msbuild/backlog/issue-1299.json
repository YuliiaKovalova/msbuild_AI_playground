{
  "number": 1299,
  "title": "Make MSBuildAllProjects magically append on import",
  "body": "See https://github.com/dotnet/sdk/issues/277#issuecomment-257720464\r\n\r\nToday, every file has to add itself manually and many don't.\r\n\r\n@rainersigwald ",
  "state": "CLOSED",
  "createdAt": "2016-11-01T23:20:45Z",
  "updatedAt": "2024-02-21T17:24:37Z",
  "closedAt": "2018-08-14T21:27:40Z",
  "author": {
    "login": "nguerrera"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "MSBuild 16.0"
  },
  "comments": {
    "nodes": [
      {
        "body": "It should have done this from the start.\n",
        "createdAt": "2016-11-11T03:03:11Z",
        "updatedAt": "2016-11-11T03:03:11Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "@rainersigwald How would you design this if this was automatic? Should it remain as a property for specific targets (such as CoreCompile)? Or just an implicit input into every target? Or some other way?",
        "createdAt": "2017-06-15T01:42:46Z",
        "updatedAt": "2017-06-15T05:15:47Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "This issue is about just augmenting the property to avoid having to append to it manually.\r\n\r\nI don't think it should be treated as an implicit input to every target--that would be a full rebuild for every change to a property, which is correct (conservative) but inefficient. I'd rather see a more sophisticated up-to-date check that includes the consumed values like #701.",
        "createdAt": "2017-06-15T13:58:34Z",
        "updatedAt": "2017-06-15T13:58:34Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Possible perf issue observed by @lifengl (https://github.com/Microsoft/msbuild/issues/3004#issuecomment-366406033):\r\n\r\n> In the trace, this property uses about half of the memory used by evaluation model, about 150M memory, which is quite excessive, and almost has no use in the design time.\r\n> \r\n> ```\r\n> Name                                                                                                  \tInc %\t          Inc\t   Inc Ct\tExc %\t        Exc\t Exc Ct\t     Fold\tFold Ct\r\n> Microsoft.Build!Microsoft.Build.Evaluation.Project                                                   \t28.1\t  339,988,704\t3,931,804.750\t 0.0\t 37,928.055\t862.005\t        0\t     0\r\n> + Microsoft.Build!Microsoft.Build.Evaluation.Project+Data                                             \t28.0\t  339,090,400\t3,905,625.750\t 0.0\t106,888.563\t861.992\t        0\t     0\r\n> |+ mscorlib!List<Microsoft.Build.Evaluation.ProjectProperty>                                          \t15.7\t  190,223,296\t896,655.500\t 0.3\t3,801,356.250\t1,661.694\t3,780,692.250\t800.686\r\n> ||+ Microsoft.Build!Microsoft.Build.Evaluation.ProjectProperty+ProjectPropertyXmlBackedWithPredecessor\t13.8\t  166,770,416\t158,654.063\t 0.2\t2,584,567.750\t107,690.102\t        0\t     0\r\n> |||+ mscorlib!String (Bytes > 1K)                                                                     \t12.3\t  149,074,112\t31,419.730\t12.3\t149,074,112\t31,419.730\t        0\t     0\r\n> |||+ mscorlib!String (Bytes > 10K)                                                                    \t 1.2\t   14,496,685\t1,368.634\t 1.2\t 14,496,685\t1,368.634\t        0\t     0\r\n> |||+ Microsoft.Build!Microsoft.Build.Construction.ProjectPropertyElement                              \t 0.0\t  543,095.375\t18,021.219\t 0.0\t 23,927.461\t747.733\t        0\t     0\r\n> |||+ mscorlib!String                                                                                  \t 0.0\t   71,937.672\t  153.059\t 0.0\t 71,937.672\t153.059\t        0\t     0\r\n> ```",
        "createdAt": "2018-02-20T15:52:07Z",
        "updatedAt": "2018-02-20T15:52:07Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "We also have this for our non-msbuild up-to-date checker: https://github.com/dotnet/project-system/issues/3744. The property is used as an input to it and we allocate 4% during solution open just splitting it up. I'd like a better way to handle this - such as just being able to get the \"latest\" import.",
        "createdAt": "2018-07-18T03:16:31Z",
        "updatedAt": "2018-07-18T03:17:00Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "@jeffkl, what about reviving #3038 but scoping it down to only the known pattern? If users append something else to it, then the optimization gets turned off.",
        "createdAt": "2018-08-07T23:26:46Z",
        "updatedAt": "2018-08-07T23:26:46Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "IIRC a problem there was that a common target (maybe not common.targets) had the bad pattern so most existing project files wouldn't get the optimization.",
        "createdAt": "2018-08-08T14:54:01Z",
        "updatedAt": "2018-08-08T14:54:01Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> so most existing project files wouldn't get the optimization.\r\n\r\nI thought it was just c++. @jeffkl do you remember what broke the optimization? Could we fix that instead? :)",
        "createdAt": "2018-08-08T16:45:07Z",
        "updatedAt": "2018-08-08T16:45:07Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "We think of `MSBuildAllProjects` as just imports.  However, our own targets add `$(MSBuildProjectFullPath).user`.  So having it be just imports does not work. \r\n\r\nhttps://github.com/Microsoft/msbuild/blob/master/src/Tasks/Microsoft.Common.CurrentVersion.targets#L537",
        "createdAt": "2018-08-08T16:51:35Z",
        "updatedAt": "2018-08-08T16:51:35Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "What if we ignore this particular breakage of the pattern? `$(MSBuildProjectFullPath).user` is added only when it is imported. This means that the approach in #3038 would end up including the .user file because it tracks imported projects, so it won't break this particular violation of the pattern.",
        "createdAt": "2018-08-08T17:30:06Z",
        "updatedAt": "2018-08-08T17:30:42Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "What am I missing the .user example? It is an import - what would break by it?",
        "createdAt": "2018-08-09T00:23:25Z",
        "updatedAt": "2018-08-09T00:23:25Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "Also, it doesn't appear that this: https://github.com/Microsoft/msbuild/pull/3038/files#diff-56a0887c6185e284af9f399c27a85c13R719 actually resolves the memory issue that @lifengl raised.",
        "createdAt": "2018-08-09T00:26:57Z",
        "updatedAt": "2018-08-09T00:26:57Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "Here's the rundown of MSBuildAllProjects currently.  I have a .NET Core project created with `dotnet new` which targets `net46` and `netstandard2.0`.\r\n\r\nThere are three evaluations and `MSBuildAllProjects` is set the following number of times:\r\n\r\n| Build Phase            | Assignment Count | Final Length | Total Length | \r\n|------------------------|------------------|--------------|--------------|\r\n| Outer                  | 15               | 1,702        | 13,887       |\r\n| Inner - net46          | 38               | 4,453        | 86,655       |\r\n| Inner - netstandard2.0 | 35               | 4,155        | 74,515       |\r\n\r\nThis means the property is set a total of 88 times.  Every reassignment is a new allocation which leads to GC pressure.  Obviously the numbers will vary a little depending on the paths to the imports.  MSBuild currently checks the datetime on each file to determine if the target is up-to-date and in the above example it could be looking at 38 files until it find one that is older.  In the case when everything is up-to-date, its checking every single import.\r\n\r\nWith the above data, I am leaning towards deprecating `MSBuildAllProjects` and introducing a new property named `MSBuildNewestProject` which represents the path to the newest project in the import graph.  Targets can then use `$(MSBuildNewestProject)` as an input to trigger execution if any project has changed.  It feels like the intent of the MSBuildAllProjects property would live on without the overhead.  Making MSBuildAllProjects magically contain all imports does not fully address the issue with it.\r\n\r\nhttps://github.com/Microsoft/msbuild/pull/3593",
        "createdAt": "2018-08-09T14:43:45Z",
        "updatedAt": "2018-08-09T14:43:45Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "@davkean True, this does not completely solve @lifengl's issue in https://github.com/Microsoft/msbuild/issues/3004#issue-297968315. The issue was that the opportunistic intern cache ends up capturing these large strings, as well as their entire history (every time it is appended, it gets captured in the cache). Jeff's PR eliminates the intermediary property values from getting in the cache, but does not eliminate the final value from getting there. For that, we'd need to redo our property lookup a bit and add a layer of generated properties that get instantiated only when read. Would fit as a nice extension of the property lookup mechanism mentioned in https://github.com/Microsoft/msbuild/issues/2713#issuecomment-411229035",
        "createdAt": "2018-08-09T16:59:29Z",
        "updatedAt": "2018-08-09T20:52:45Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "@jeffkl additionally projects with many custom build scripts are likely to have assignments to `MSBuildAllProjects` too. In my codebase, more than 10 additional assignments happen in a typical build of a single project.",
        "createdAt": "2018-08-10T00:42:29Z",
        "updatedAt": "2018-08-10T00:42:29Z",
        "author": {
          "login": "steffenloesch"
        }
      },
      {
        "body": "Is it so bad to do it in a breaking manner (with some command-line escape hatch) that completely ignores assignments to `MSBuildAllProjects` and inserts `MSBuildNewestProject` wherever `$(MSBuildAllProjects)` is used by user targets?",
        "createdAt": "2018-08-10T15:52:16Z",
        "updatedAt": "2018-08-10T15:52:16Z",
        "author": {
          "login": "dasMulli"
        }
      },
      {
        "body": "After some discussion, we've landed on the following design:\r\n\r\n1. Keep track of the last modified project or import\r\n2. Prepend the path to `MSBuildAllProjects`\r\n3, Stop setting `MSBuildAllProjects` in the targets that ship with MSBuild\r\n4. Go to other SDKs and stop setting `MSBuildAllProjects`\r\n\r\nEventually `MSBuildAllProjects` should become just the last modified import.  Existing targets do not need to be updated to maximize back compat.  Any SDK that needs to be backwards compatible can add a Condition when setting `MSBuildAllProjects`:\r\n\r\n```xml\r\n<PropertyGroup>\r\n  <MSBuildAllProjects Condition=\" '$(MSBuildVersion)' == '' Or '$(MSBuildVersion)' < '16.0' \">\r\n      $(MSBuildAllProjects);$(MSBuildThisFileFullPath)\r\n  </MSBuildAllProjects>\r\n</PropertyGroup>\r\n```",
        "createdAt": "2018-08-14T14:35:27Z",
        "updatedAt": "2018-08-14T21:41:15Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "@jeffkl Unless I'm misunderstanding your intent, wouldn't the condition in https://github.com/Microsoft/msbuild/issues/1299#issuecomment-412894038 need to be checking for `< 16.0` instead? You should only need to set `MSBuildAllProjects` if you're on MSBuild 15 or less, right?",
        "createdAt": "2018-08-14T21:37:07Z",
        "updatedAt": "2018-08-14T21:37:07Z",
        "author": {
          "login": "bording"
        }
      },
      {
        "body": "@bording yes, you are correct.  I have updated the comment!",
        "createdAt": "2018-08-14T21:41:37Z",
        "updatedAt": "2018-08-14T21:41:37Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "@jeffkl That's a string comparison right? MSBuild doesn't support version checks, if I remember correctly.",
        "createdAt": "2018-08-14T22:51:53Z",
        "updatedAt": "2018-08-14T22:51:53Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "What release did this make? If I understand the change, we don't need to do anything here: https://github.com/dotnet/project-system/issues/3744 to react this right?",
        "createdAt": "2018-08-14T22:52:34Z",
        "updatedAt": "2018-08-14T22:54:45Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "@davkean I think (?) it does, at least based on code like https://github.com/Microsoft/msbuild/blob/master/src/Build/Evaluation/Conditionals/GreaterThanOrEqualExpressionNode.cs#L35\r\nhttps://github.com/Microsoft/msbuild/blob/master/src/Build/Evaluation/Conditionals/NumericComparisonExpressionNode.cs#L47",
        "createdAt": "2018-08-14T23:05:53Z",
        "updatedAt": "2018-08-14T23:05:53Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "Ah, looks like I'm conflating the old .NET Framework version checks which start with \"v4.0\".",
        "createdAt": "2018-08-14T23:08:45Z",
        "updatedAt": "2018-08-14T23:08:45Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "@jeffkl What build will this appear in?",
        "createdAt": "2018-08-29T01:55:42Z",
        "updatedAt": "2018-08-29T01:55:42Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "This went into master which will ship with dev16.",
        "createdAt": "2018-08-29T15:30:23Z",
        "updatedAt": "2018-08-29T15:30:23Z",
        "author": {
          "login": "jeffkl"
        }
      }
    ]
  }
}