{
  "number": 1454,
  "title": "Satellite assemblies are not produced for registered custom cultures when using .NET Core msbuild",
  "body": "Moving from https://github.com/dotnet/sdk/issues/387 (originally https://github.com/dotnet/cli/issues/4050) on behalf of  @ryanbrandenburg.\r\n\r\n-----\r\n\r\n## Steps to reproduce\r\n1. Register a custom culture using something like sysglobl.dll and:\r\n\r\n```\r\nvar car1 = new CultureAndRegionInfoBuilder(\"ru-US\", CultureAndRegionModifiers.None);\r\ncar1.LoadDataFromCultureInfo(CultureInfo.CreateSpecificCulture(\"ru-RU\"));\r\ncar1.LoadDataFromRegionInfo(new RegionInfo(\"en-US\"));\r\n\r\ncar1.CultureEnglishName = \"Russion (United States)\";\r\ncar1.CultureNativeName = \"\u0440\u0443\u0441\u0441\u043a\u0438\u0439 (\u0421\u0428\u0410)\";\r\ncar1.CurrencyNativeName = \"\u0414\u043e\u043b\u043b\u0430\u0440 (\u0421\u0428\u0410)\";\r\ncar1.RegionNativeName = \"\u0421\u0428\u0410\";\r\n\r\n// Register the culture.\r\ntry\r\n{\r\n    car1.Register();\r\n}\r\ncatch (InvalidOperationException)\r\n{\r\n    // Swallow the exception: the culture already is registered.\r\n}\r\n```\r\n1. Create a new ASP.NET Core Web Application (.NET Core)\r\n2. Create two resources, one named `Resource.en-US.resx` and one named `Resource.ru-US.resx`\r\n3. Build the project.\r\n4. Open bin/Debug/net451\r\n5. Observe that a en-US folder is present and has a dll and that ru-US is missing\r\n## Expected  behavior\r\n\r\nAny culture which will work with `new CultureInfo(\"culture-NAME\")` (which custom cultures do once registered as above) should create a folder and dll which can be used in localization.\r\n## Actual behavior\r\n\r\nSatellite assemblies are only created for original cultures, not for custom cultures.\r\n## Environment data\r\n\r\n`dotnet --info` output:\r\n.NET Command Line Tools (1.0.0-preview2-003121)\r\n\r\nProduct Information:\r\n Version:            1.0.0-preview2-003121\r\n Commit SHA-1 hash:  1e9d529bc5\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.10586\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n",
  "state": "CLOSED",
  "createdAt": "2016-12-07T23:37:54Z",
  "updatedAt": "2024-09-02T12:16:47Z",
  "closedAt": "2024-09-02T12:16:46Z",
  "author": {
    "login": "nguerrera"
  },
  "labels": [
    "Partner request"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "f-alizada"
      }
    ]
  },
  "milestone": {
    "title": "VS 17.11"
  },
  "comments": {
    "nodes": [
      {
        "body": "(Moving https://github.com/dotnet/sdk/issues/387#issuecomment-265608133)\r\n\r\nThis will work fine if you build using desktop MSBuild / Visual Studio, but .NET Core MSBuild has this.\r\n\r\nThis can be worked around with a custom target that lets any culture through:\r\n\r\n``` XML\r\n  <Target Name=\"AssignCustomCultures\" AfterTargets=\"SplitResourcesByCulture\">\r\n    <ItemGroup>\r\n      <EmbeddedResource Condition=\"$([System.IO.Path]::HasExtension(%(Filename)))\">\r\n        <Culture>$([System.IO.Path]::GetExtension(%(Filename)).TrimStart('.'))</Culture>\r\n        <WithCulture>true</WithCulture>\r\n      </EmbeddedResource>\r\n    </ItemGroup>\r\n  </Target>\r\n```\r\n\r\nThis approach has the advantage that it is not dependent on what is registered on the build machine.",
        "createdAt": "2016-12-07T23:39:35Z",
        "updatedAt": "2016-12-07T23:43:29Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "@rainersigwald Thoughts? Should msbuild be more lenient about culture names to allow for custom cultures? I'm not too keen on relying on the build machine having registered a custom culture, but that does at least work with desktop msbuild. However, I don't know if .NET Core BCL provides enough to replicate that.",
        "createdAt": "2016-12-07T23:42:39Z",
        "updatedAt": "2016-12-07T23:42:39Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "I remember talking about this when @cdmihai implemented the current mechanism but I don't know enough about the problem space to have a good opinion off the bat.\r\n\r\nSpeaking from the hip, it seems like we should either always allow arbitrary cultures or stick to some sort of list. I agree that registering the culture by changing OS state on the build machine is kind of an icky way to enable this.",
        "createdAt": "2016-12-07T23:47:09Z",
        "updatedAt": "2016-12-07T23:47:09Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "On Full Framework MSBuild populates a list of all valid culture names [via `CultureInfo.GetCultures`](https://github.com/Microsoft/msbuild/blob/xplat/src/XMakeTasks/CultureInfoCache.cs#L26). That method does not exist on .Net Core, so we just use the [hardcoded list FF gave us](https://github.com/Microsoft/msbuild/blob/xplat/src/XMakeTasks/CultureInfoCache.cs#L49).\r\n\r\nWe hit this in MSBuild's own build because we have a resource named `Strings.Shared.Resx`. This caused a runtime crash with missing resources on .Net Core because the resource was assigned the \"Shared\" culture. It works on FF because FF successfully rejects \"Shared\" as a culture.\r\n\r\nHere's one solution: accept everything on .net core, and introduce a `ThisIsNotACulture` metadata for `EmbeddedResource` which tells the `AssignCulture` task to interpret it as neutral.",
        "createdAt": "2016-12-08T00:00:15Z",
        "updatedAt": "2016-12-08T00:00:55Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "P.S.: We went with the hardcoded list to mimic the FF behaviour as close as possible. If universal strings failed for our build, then it could fail for others too. Maybe we'll get the API back with ns2.0",
        "createdAt": "2016-12-08T00:04:44Z",
        "updatedAt": "2016-12-08T00:04:44Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "How about making the list a property or items that the user can amend.",
        "createdAt": "2016-12-08T00:51:40Z",
        "updatedAt": "2016-12-08T00:51:40Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "Btw, the first thing I tried was to explicitly give WithCulture=true, Culture=ru-US to a static item but AssignCulture wacks that, which is why my workaround evolved in to a target.\r\n\r\nAnother approach would be to respect explicit WithCulture metadata as implying that no check is required.",
        "createdAt": "2016-12-08T00:57:56Z",
        "updatedAt": "2016-12-08T00:57:56Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "Yup, sounds like we have to implement something that respects current metadata to ignore / enforce file name based culture inference. Or as you said, look into extending the hardcoded list of cultures.\r\n\r\nIn terms of planning, when should this change go in? How often is it that users create their own custom cultures?",
        "createdAt": "2016-12-08T18:46:57Z",
        "updatedAt": "2016-12-08T18:48:26Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "I don't know about the usage but I suspect it's low. Given that there is a workaround of setting metadata in a custom rather, I'd think we could get away with vNext.",
        "createdAt": "2016-12-08T19:04:15Z",
        "updatedAt": "2016-12-08T19:04:15Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "Is there a bug here? GenerateSatelliteAssemblies only runs where MSBuildRuntimeType != Core but ComputeIntermediateSatelliteAssemblies which is dependent on it runs in all cases.\r\n\r\nI've tried following the above bit am still hitting the same issue.",
        "createdAt": "2017-03-13T12:15:49Z",
        "updatedAt": "2017-03-13T12:15:49Z",
        "author": {
          "login": "adsurg"
        }
      },
      {
        "body": "@nguerrera, ping in case you're not still following this.",
        "createdAt": "2017-03-13T12:34:49Z",
        "updatedAt": "2017-03-13T12:34:49Z",
        "author": {
          "login": "adsurg"
        }
      },
      {
        "body": "It's an evil, hacky workaround, but dropping the line\r\n```  <Target Name=\"ComputeIntermediateSatelliteAssemblies\"></Target>```\r\ninto the problem project file seems to get past this for now.",
        "createdAt": "2017-03-13T14:30:03Z",
        "updatedAt": "2017-03-13T14:32:44Z",
        "author": {
          "login": "adsurg"
        }
      },
      {
        "body": "@adsurg It's not clear what you are working around. Can you open a new issue with repro steps and the precise failure that you're seeing. It is not clear that this is the same as the root issue, which is about custom cultures. There are targets that are core runtime only for satellite only because core msbuild doesn't support building satellites with its own targets, but anything that does not run on core has an alternate on full framework msbuild that does run.",
        "createdAt": "2017-03-13T15:48:08Z",
        "updatedAt": "2017-03-13T15:55:05Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "@nguerrera \r\nHi Nick, \r\nI tried with vs build and it doesn't generate the custom culture dll.\r\nI tried the workaround you proposed. Adding that target on the xproj and it gives me \r\n\"Invalid static method invocation syntax: \r\n\"[System.IO.Path]::HasExtension()\". Method 'System.IO.Path.HasExtension' not found. \"\r\n\r\nI think I am missing something. Do you have any idea?\r\n",
        "createdAt": "2018-05-14T20:13:22Z",
        "updatedAt": "2018-05-14T20:13:22Z",
        "author": {
          "login": "alberto-riggi"
        }
      },
      {
        "body": "This issue is not limited to the custom cultures but also to the cultures that can be created by the framework but not enumerated with CultureInfo.GetCultures. for example, on Windows 10, you can create any culture even if the OS doesn't have data for (something like yy-YY). also on Linux if using one of the aliased cultures.",
        "createdAt": "2018-10-16T17:00:16Z",
        "updatedAt": "2018-10-16T17:00:16Z",
        "author": {
          "login": "tarekgh"
        }
      },
      {
        "body": "Hi \r\n\r\nThis issue is still happening. \r\n\r\nSatellite assemblies for custom cultures are still not generated.\r\n\r\nUsing the provided workaround generates the satellite assemblies for the referenced projects, but they are not copied to the main executable project. \r\n\r\nTo make this more misleading, if you have a webapi project with custom culture resources in the main project, you can access those resources without any problem. In this case they're embedded resources and not satellite assemblies. But if you have a referenced assembly, it generates satellite assemblies only for known cultures, but not custom cultures.\r\n\r\n> (Moving [dotnet/sdk#387 (comment)](https://github.com/dotnet/sdk/issues/387#issuecomment-265608133))\r\n> \r\n> This will work fine if you build using desktop MSBuild / Visual Studio, but .NET Core MSBuild has this.\r\n> \r\n> This can be worked around with a custom target that lets any culture through:\r\n> \r\n> ```\r\n>   <Target Name=\"AssignCustomCultures\" AfterTargets=\"SplitResourcesByCulture\">\r\n>     <ItemGroup>\r\n>       <EmbeddedResource Condition=\"$([System.IO.Path]::HasExtension(%(Filename)))\">\r\n>         <Culture>$([System.IO.Path]::GetExtension(%(Filename)).TrimStart('.'))</Culture>\r\n>         <WithCulture>true</WithCulture>\r\n>       </EmbeddedResource>\r\n>     </ItemGroup>\r\n>   </Target>\r\n> ```\r\n\r\n",
        "createdAt": "2020-05-25T11:33:09Z",
        "updatedAt": "2020-05-25T11:33:09Z",
        "author": {
          "login": "marcoregueira"
        }
      },
      {
        "body": "Can you use the [Copy](https://docs.microsoft.com/en-us/visualstudio/msbuild/copy-task?view=vs-2019) task to move them right after they're generated?",
        "createdAt": "2020-05-25T16:53:30Z",
        "updatedAt": "2020-05-25T16:53:30Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "to fix this, msbuild has to change the way depending on culture enumerated list and instead try to validate the culture by trying to create it. CultureInfo.GetCultureInfo can be used as it caches the previously created culture anyway. ",
        "createdAt": "2020-05-25T19:14:27Z",
        "updatedAt": "2020-05-25T19:14:27Z",
        "author": {
          "login": "tarekgh"
        }
      },
      {
        "body": "Given that the issue has been present for 3 1/2 years, how likely is a fix at this point?",
        "createdAt": "2020-06-08T14:08:43Z",
        "updatedAt": "2020-06-08T14:08:43Z",
        "author": {
          "login": "keab42"
        }
      },
      {
        "body": "> Can you use the [Copy](https://docs.microsoft.com/en-us/visualstudio/msbuild/copy-task?view=vs-2019) task to move them right after they're generated?\r\n\r\nNot really well. I can make it to work partially. But as far as I have seen, I need to add the task from nguerrera above, to every project that has those resources, then add the copy command to all projects in cascade, and a command for each dependency using project paths.\r\n\r\nI made the test for a couple of projects in a solution and for some reason it worked for one of them but not for the other with identical configurations. No idea why, but the process seems so time and work consuming and prone to failure that doesn't seem a good idea to go ahead putting it to work.\r\n\r\nMaybe I missed something, and is easier than it looks... \r\n",
        "createdAt": "2020-06-09T09:44:46Z",
        "updatedAt": "2020-06-09T09:44:46Z",
        "author": {
          "login": "marcoregueira"
        }
      },
      {
        "body": "Came across another case of folks running into this issue: https://docs.microsoft.com/en-us/answers/questions/611607/how-to-add-custom-culture-ex-en-mxenglish-mexico-i.html\r\n\r\nI'd really like to see us do a focused push on tackling the issues folks are having in this area (localization in .NET Core) as it's definitely a recurring topic every release.",
        "createdAt": "2021-11-04T19:54:51Z",
        "updatedAt": "2021-11-04T19:54:51Z",
        "author": {
          "login": "DamianEdwards"
        }
      },
      {
        "body": "I've posted an example repro ASP.NET Core project that demonstrates this issue at https://github.com/DamianEdwards/CustomCultureExample\r\n\r\nThe repro site is running at https://dedward-customcultureissue.azurewebsites.net/ on Linux and it repros there too.",
        "createdAt": "2021-11-04T21:46:52Z",
        "updatedAt": "2021-11-04T22:19:57Z",
        "author": {
          "login": "DamianEdwards"
        }
      },
      {
        "body": "Any news on this one?",
        "createdAt": "2023-04-25T16:00:48Z",
        "updatedAt": "2023-04-25T16:00:48Z",
        "author": {
          "login": "BartoszCichecki"
        }
      },
      {
        "body": "There are some conflicting constraints that will keep us from getting to a perfect solution, but we can do better than requiring the workaround above.\r\n\r\nThe _ideal_ solution would have no project-file impact, and a target would determine the culture for each `.resx` file.\r\n\r\nThe general pattern is `ResourceFilename.culture.resx`. But it's perfectly acceptable to have neutral resources in `ResourceFilename.resx`, and it's also ok for the name to include multiple segments/namespaces/whatever.\r\n\r\nSo if you have `A.B.C.resx`, it's ambiguous between:\r\n\r\n1. Resources for `A.B.C`, with no culture, and\r\n2. Resources for `A.B` in culture `C`.\r\n\r\nThe existing [`AssignCulture` task](https://learn.microsoft.com/visualstudio/msbuild/assignculture-task) uses a heuristic to disambiguate: if `C` is a valid culture, assume it's a culture. That's great unless you have resources with C# code in them in a `Foo.cs.resx` which looks like a valid alias for `cs-CZ`, so you can explicitly specify `WithCulture=\"false\"` as of #5824 to explicitly say \"don't detect a culture here, treat as neutral\".\r\n\r\nBut there's no means to do the opposite and specify that \"`C` is not a culture known to the system at build time, but it will be a culture registered and usable at runtime for this app\".\r\n\r\nI can see two options for that, not mutually exclusive:\r\n\r\n1. Extend `AssignCulture` to respect a manually-specified culture, and require custom culture resource files to manually specify that culture, for example\r\n\r\n```diff\r\ndiff --git a/WebApplication116/CustomCultureWebApp.csproj b/WebApplication116/CustomCultureWebApp.csproj\r\nindex e0b8c8f..b99c807 100644\r\n--- a/WebApplication116/CustomCultureWebApp.csproj\r\n+++ b/WebApplication116/CustomCultureWebApp.csproj\r\n@@ -18,4 +18,10 @@\r\n     </AssemblyAttribute>\r\n   </ItemGroup>\r\n   </Target>\r\n+\r\n+  <ItemGroup>\r\n+    <EmbeddedResource Update=\"Pages\\Index.en-MX.resx\">\r\n+      <Culture>en-MX</Culture>\r\n+    </EmbeddedResource>\r\n+  </ItemGroup>\r\n </Project>\r\n```\r\n\r\n2. Define a list of known custom cultures, and respect it in `AssignCulture`, for example\r\n\r\n```diff\r\ndiff --git a/WebApplication116/CustomCultureWebApp.csproj b/WebApplication116/CustomCultureWebApp.csproj\r\nindex e0b8c8f..e1e7a6c 100644\r\n--- a/WebApplication116/CustomCultureWebApp.csproj\r\n+++ b/WebApplication116/CustomCultureWebApp.csproj\r\n@@ -4,6 +4,7 @@\r\n     <TargetFramework>net6.0</TargetFramework>\r\n     <Nullable>enable</Nullable>\r\n     <ImplicitUsings>enable</ImplicitUsings>\r\n+    <KnownCustomCultures>en-MX;ja-MX</KnownCustomCultures>\r\n   </PropertyGroup>\r\n```\r\n\r\nI think doing _both_ would have the best UX. The normal project diff could look like the latter there but enable more flexibility.",
        "createdAt": "2023-05-09T21:15:47Z",
        "updatedAt": "2023-05-09T21:15:47Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald these proposals look good. Curious though, what would be problematic about just checking whether the `C` in your example above (i.e. that last dot-separated segment before the .resx extension) is a semantically valid culture identifier, and if so, assume it's a culture, with the same workaround (`WithCulture=\"false\"`) for cases where it isn't?",
        "createdAt": "2023-05-10T00:15:13Z",
        "updatedAt": "2023-05-10T00:15:13Z",
        "author": {
          "login": "DamianEdwards"
        }
      },
      {
        "body": "Would you accept a PR for this?\r\nI could nearly match @rainersigwald example except in option 1 for backwards compatibility you would need to specify `<WithCulture>true</WithCulture>`\r\n\r\n```diff\r\n  <ItemGroup>\r\n    <EmbeddedResource Update=\"Pages\\Index.en-MX.resx\">\r\n      <Culture>en-MX</Culture>\r\n+     <WithCulture>true</WithCulture>\r\n    </EmbeddedResource>\r\n  </ItemGroup>\r\n```\r\n\r\nBy doing that the existing unit tests pass without changes and custom cultures are supported\r\n\r\n`<KnownCustomCultures>` works great as well",
        "createdAt": "2024-04-26T05:57:55Z",
        "updatedAt": "2024-04-26T05:57:55Z",
        "author": {
          "login": "blanchardglen"
        }
      },
      {
        "body": "@danroth27 You mentioned I could ping you if somethings an issue for my organization that developing heavily with Blazor. This one is a blocking issue for a non profit application my organization built helping thousands of users in smaller cultures. It would help us immensely if this ticket could get some love. Thanks Dan!",
        "createdAt": "2024-05-13T12:21:35Z",
        "updatedAt": "2024-05-13T12:21:35Z",
        "author": {
          "login": "DaleCam"
        }
      },
      {
        "body": "@f-alizada this will be addressed by https://github.com/dotnet/msbuild/pull/10095 right?",
        "createdAt": "2024-05-13T14:38:52Z",
        "updatedAt": "2024-05-13T14:38:52Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Recent PR that got merged: https://github.com/dotnet/msbuild/pull/10026 introduces the possibility to specify the property for the Task `RespectAlreadyAssignedItemCulture`. When set to `true` the metadata Culture recognized by the MSBuild. \r\nhowever the default value of this property is `false`. \r\nCurrently work in progress to enable this by default for SDK. ",
        "createdAt": "2024-05-14T06:57:45Z",
        "updatedAt": "2024-05-14T06:57:45Z",
        "author": {
          "login": "f-alizada"
        }
      },
      {
        "body": "> (Moving [dotnet/sdk#387 (comment)](https://github.com/dotnet/sdk/issues/387#issuecomment-265608133))\r\n> \r\n> This will work fine if you build using desktop MSBuild / Visual Studio, but .NET Core MSBuild has this.\r\n> \r\n> This can be worked around with a custom target that lets any culture through:\r\n> \r\n> ```\r\n>   <Target Name=\"AssignCustomCultures\" AfterTargets=\"SplitResourcesByCulture\">\r\n>     <ItemGroup>\r\n>       <EmbeddedResource Condition=\"$([System.IO.Path]::HasExtension(%(Filename)))\">\r\n>         <Culture>$([System.IO.Path]::GetExtension(%(Filename)).TrimStart('.'))</Culture>\r\n>         <WithCulture>true</WithCulture>\r\n>       </EmbeddedResource>\r\n>     </ItemGroup>\r\n>   </Target>\r\n> ```\r\n> \r\n> This approach has the advantage that it is not dependent on what is registered on the build machine.\r\n\r\nUsing this method will cause ManifestResourceName to generate unexpected names in .NET 8 and .NET Framework, for example:\r\n\r\n`Controllers.WeatherForecastController.en-CN.resx => Controllers.WeatherForecastController.en-CN.en-CN.resx`\r\n\r\nIt is speculated that this is because MSBUILD cannot distinguish whether en-CN is ordinary characters or Culture.\r\n\r\nTherefore, you can use `<LogicalName>` to re-specify ManifestResourceName\r\n```xml\r\n<Target Name=\"AssignCustomCultures\" AfterTargets=\"SplitResourcesByCulture\">\r\n  <ItemGroup>\r\n    <EmbeddedResource Condition=\"'%(Filename)%(Extension)' == 'Controllers.WeatherForecastController.en-CN.resx'\">\r\n      <Culture>$([System.IO.Path]::GetExtension(%(Filename)).TrimStart('.'))</Culture>\r\n      <WithCulture>true</WithCulture>\r\n      <LogicalName>$(AssemblyName).Resources.Controllers.WeatherForecastController.$([System.IO.Path]::GetExtension(%(Filename)).TrimStart('.')).resources</LogicalName>\r\n    </EmbeddedResource>\r\n  </ItemGroup>\r\n</Target>\r\n```",
        "createdAt": "2024-07-03T07:59:23Z",
        "updatedAt": "2024-07-03T08:32:04Z",
        "author": {
          "login": "FatTigerWang"
        }
      },
      {
        "body": "Fixed by https://github.com/dotnet/sdk/pull/41042",
        "createdAt": "2024-09-02T12:16:46Z",
        "updatedAt": "2024-09-02T12:16:46Z",
        "author": {
          "login": "JanKrivanek"
        }
      }
    ]
  }
}