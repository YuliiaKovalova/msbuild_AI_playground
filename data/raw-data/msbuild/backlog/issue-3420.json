{
  "number": 3420,
  "title": "BuildSubmission.Execute() starts one MsBuild child process per project to compile (without re-usage)",
  "body": "_From @ocox1 on June 18, 2018 15:23_\n\nMy tool gives our developers the chance to compile all our projects (~1000 projects) on their local machines. So we have a build.proj with these nodes:\r\n\r\n  <ItemGroup>\r\n    <ProjectList Include=\"**\\*.vcxproj;**\\*.csproj\" />\r\n  </ItemGroup>\r\n  <Target Name=\"Build\" DependsOnTargets=\"Init\" Outputs=\"@(OutputList)\">\r\n    <MSBuild\r\n        Projects =\"@(ProjectList)\"\r\n        ContinueOnError =\"$(ContinueOnError)\" StopOnFirstFailure=\"$(StopOnFirstFailure)\" \r\n        Properties=\"Configuration=$(Configuration);RunFxCop=$(RunFxCop);ToolsVersion=15.0\"\r\n        Targets=\"Build\">\r\n      <Output TaskParameter=\"TargetOutputs\" ItemName=\"OutputList\" />\r\n    </MSBuild>\r\n  </Target>\r\n\r\nIn my application I try to compile these projects (contained in the ProjectList) by calling buildSubmission.Execute(). This worked fine with VisualStudio 2015 / MsBuild 14, but after migration to VisualStudio 2017 / MsBuild 15 (15.7.179) for every project from the ProjectList a new MsBuild instance is created in the background (1000 child processes in my case).\r\nAfter a short time I have to kill my application before my computer collapses because more and more resources are used (some processes crashes with OutOfMemory, Explorer.exe freezes...).\r\nIf I kill my application early enough, the MsBuild processes keep in memory for ~15 minutes.\r\n\r\nHere is a code snippet:\r\n\r\n\tProjectCollection projectCol = new ProjectCollection();\r\n\r\n\tBuildParameters buildParams = new BuildParameters(projectCol)\r\n\t{\r\n\t\tBuildThreadPriority = ThreadPriority.Highest,\r\n\t\tEnableNodeReuse = true,\r\n\t\tMaxNodeCount = Convert.ToInt32(Environment.GetEnvironmentVariable(\"NUMBER_OF_PROCESSORS\"))\r\n\t};\r\n\r\n\tBuildManager bm = new BuildManager();\r\n\tbm.BeginBuild(buildParams);\r\n\r\n\tBuildRequestData buildReq = new BuildRequestData(\r\n                                                                   projectPath, // path to build.proj\r\n                                                                   new Dictionary<string, string>\r\n                                                                                       { { \"Configuration\", \"Debug\" } }, // buildProperties\r\n                                                                   \"15.0\",\t// toolsVersion\r\n                                                                   new string[] { \"_Make\" }, // targetsToBuild\r\n                                                                   null);\r\n\tBuildSubmission buildSubmission = bm.PendBuildRequest(buildReq);\r\n\tbuildSubmission.Execute();\r\n\t//buildSubmission.ExecuteAsync(null, null);\t// same result with ExecuteAsync\r\n\r\n\t// clean up resources...\r\n\r\n![msbuildprocesses](https://user-images.githubusercontent.com/40359019/41545991-f71b369e-730b-11e8-9f75-ada970774946.png)\r\n\r\n\n\n_Copied from original issue: dotnet/project-system#3665_",
  "state": "OPEN",
  "createdAt": "2018-06-18T16:55:23Z",
  "updatedAt": "2024-02-21T16:33:42Z",
  "closedAt": null,
  "author": {
    "login": "Pilchie"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Additional information:\r\n- NUMBER_OF_PROCESSORS is 8 in my case.\r\n- If I set MaxNodeCount=1, only one MsBuild sub-process is started as expected, but the compile time is significantly higher than with version 14 and usage of multi-core.\r\n- sample project is available and can be provided to reproduce the behaviour (as well as the build.prj file) ",
        "createdAt": "2018-06-19T07:11:51Z",
        "updatedAt": "2018-06-19T07:11:51Z",
        "author": {
          "login": "ocox1"
        }
      },
      {
        "body": "Attached are the demo project and my build.prj file.\r\n[MsBuildConsole.zip](https://github.com/Microsoft/msbuild/files/2114235/MsBuildConsole.zip)\r\n[MyBuild.zip](https://github.com/Microsoft/msbuild/files/2114229/MyBuild.zip)\r\n\r\n",
        "createdAt": "2018-06-19T07:22:31Z",
        "updatedAt": "2018-06-19T07:23:04Z",
        "author": {
          "login": "ocox1"
        }
      },
      {
        "body": "Can you let us know if https://docs.microsoft.com/en-us/visualstudio/msbuild/updating-an-existing-application does not help you resolve this?",
        "createdAt": "2018-06-28T19:25:35Z",
        "updatedAt": "2018-06-28T19:25:35Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Thanks @rainersigwald for your response. I tried the proposed way. The results are inconsistent - therefore it took a while for my answer:\r\n- the original mentioned issue (several hundreds of MsBuild instances in memory) seems to be solved\r\nBUT:\r\n- If I compile all my ~1100 projects some of them fail (details below)\r\n- If I repeat compilation of my ~1100 projects others or the same projects fail\r\n- If I change my build definition to compile only the previously failed projects, these projects succeed always\r\n- If I open a CMD.exe window and call MsBuild.exe with my build definition as command line parameter, building all my ~1100 projects succeeds\r\n==> All my projects seems to be all right in general.\r\n==> There is a difference by calling MsBuild.exe from command line and by using the MsBuild API.\r\n==> When I used VisalStudio 2015 + the according MsBuild version in the past the usage of the MsBuild API succeeded\r\n==> If I use MsBuild 15 API now like in the similar way (see my initial attached sample application), building my ~1100 projects succeeds (but there is the initial problem: only 1 CPU may be used).\r\n==> If I follow your suggested way to use Microsoft.Build.Locator compiling my ~1100 projects fails with sporadic(?) failures\r\n\r\nThere are the following 5 failure hotspots for project build failures:\r\n\r\n1. task \"MarkupCompilePass1\" failes with:\r\nC:\\WINDOWS\\Microsoft.NET\\Framework\\v4.0.30319\\Microsoft.WinFx.targets(268,9): error MC1000: Unknown build error, 'Object reference not set to an instance of an object.' \r\n(The project contains WPF xaml files in this case, but other WPF projects succeeds).\r\n\r\n2. Done executing task \"GenerateResource\" -- FAILED.\r\nDone building target \"CoreResGen\" in project \"XYZ.csproj\" -- FAILED.\r\n\r\n3. Target ResolveComReferences:\r\nC:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\MSBuild\\15.0\\Bin\\Microsoft.Common.CurrentVersion.targets(2725,5): error MSB4061: The \"ResolveComReference\" task could not be instantiated from \"Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\". Could not load file or assembly 'Microsoft.Build, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. The system cannot find the file specified.\r\nC:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\MSBuild\\15.0\\Bin\\Microsoft.Common.CurrentVersion.targets(2725,5): error MSB4060: The \"ResolveComReference\" task has been declared or used incorrectly, or failed during construction. Check the spelling of the task name and the assembly name.\r\n\r\n4. Target _CopyFilesMarkedCopyLocal:\r\nC:\\WINDOWS\\Microsoft.NET\\Framework\\v4.0.30319\\Microsoft.WinFx.targets(268,9): error MC1000: Unknown build error, 'Object reference not set to an instance of an object.' \r\n\r\n5. Target GenerateTargetFrameworkMonikerAttribute:\r\nSkipping target \"GenerateTargetFrameworkMonikerAttribute\" because all output files are up-to-date with respect to the input files.\r\nC:\\WINDOWS\\Microsoft.NET\\Framework\\v4.0.30319\\Microsoft.WinFx.targets(268,9): error MC1000: Unknown build error, 'Object reference not set to an instance of an object.' \r\n\r\nAs you see this is a mixture of failure reasons, but failed project may compile successfully in next run.\r\nAnd I'm sure my ~1100 projects are not the root cause of these compiler failures. But probably these 5 failure hotspots point in the right direction to solve the problem.\r\n",
        "createdAt": "2018-07-18T10:13:59Z",
        "updatedAt": "2018-07-18T10:13:59Z",
        "author": {
          "login": "ocox1"
        }
      }
    ]
  }
}