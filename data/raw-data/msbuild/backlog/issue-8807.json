{
  "number": 8807,
  "title": "[Bug]: Input file \"*.CoreCompileInputs.cache\" is newer than output file \"*.pdb\"",
  "body": "### Issue Description\n\nbinlog:\r\n\r\n[build-4.8.0-feature.breaking-changes.549-netcoremobile-net7-UWP.zip](https://github.com/dotnet/msbuild/files/11584159/build-4.8.0-feature.breaking-changes.549-netcoremobile-net7-UWP.zip)\r\n\n\n### Steps to Reproduce\n\nSearch for \"is newer than output file\" in the binlog. You can see for example the `net7.0-macos` build for Uno.UI.netcoremobile is done twice. The second Csc task execution says:\r\n\r\n> Input file \"obj\\Uno.UI.netcoremobile\\Release\\net7.0-macos\\Uno.UI.netcoremobile.csproj.CoreCompileInputs.cache\" is newer than output file \"obj\\Uno.UI.netcoremobile\\Release\\net7.0-macos\\Uno.UI.pdb\".\r\n\n\n### Expected Behavior\n\nnet7.0-macos should be done only once, ie, the second execution should be up to date and skipped.\n\n### Actual Behavior\n\nIt's built twice.\n\n### Analysis\n\n_No response_\n\n### Versions & Configurations\n\n_No response_",
  "state": "CLOSED",
  "createdAt": "2023-05-28T09:20:38Z",
  "updatedAt": "2024-02-21T14:04:53Z",
  "closedAt": "2023-09-15T08:53:07Z",
  "author": {
    "login": "Youssef1313"
  },
  "labels": [
    "bug",
    "needs-more-info",
    "stale",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "There is a race condition in your build, between\r\n\r\n`Uno.UI.Build.csproj (BuildCIMobile) -> Uno.UI-netcoremobile-only.slnf (Restore;Build) -> Uno.UI.netcoremobile.csproj -> Uno.UI.netcoremobile.csproj net7.0-macos`\r\n\r\nand\r\n\r\n`Uno.UI.Build.csproj (BuildCIMobile) -> Uno.UI-netcoremobile-only.slnf (Restore;Build) -> SamplesApp.netcoremobile.csproj -> SamplesApp.netcoremobile.csproj net7.0-macos -> SamplesApp.netcoremobile.csproj net7.0-macos (_BuildRidSpecificAppBundle) -> Uno.UI.Foldable.netcoremobile.csproj net7.0-macos -> Uno.UI.netcoremobile.csproj net7.0-macos`\r\n\r\nThe latter carries some additional global properties, inherited from `_RunRidSpecificBuild` in `dotnet\\packs\\Microsoft.macOS.Sdk\\13.0.2036\\targets\\Xamarin.Shared.Sdk.targets` https://github.com/xamarin/xamarin-macios/blob/1ca3c6ad8a27f76dc08903dbe0b1599027ee17cc/dotnet/targets/Xamarin.Shared.Sdk.targets#L338-L350\r\n\r\nYou should not rely on incremental build to resolve this build race condition and should instead work to eliminate the race. It's not clear to me from the log whether it's a bug in the macOS workload, or in your code. @rolfbjarne may have an opinion.\r\n\r\nWRT the rebuild, it looks correct to me--when passed the additional global properties, there's an additional source file `C:\\a\\1\\s\\src\\Uno.UI\\Mixins\\macOS\\FrameworkElementMixins.g.cs` added to the compilation, so it should in fact build again.",
        "createdAt": "2023-06-06T17:40:09Z",
        "updatedAt": "2023-06-06T17:40:09Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald I'm somewhat confused. I see `C:\\a\\1\\s\\src\\Uno.UI\\Mixins\\macOS\\FrameworkElementMixins.g.cs` is passed to both Csc invocations:\r\n\r\n![image](https://github.com/dotnet/msbuild/assets/31348972/c540b8e1-adfd-4e16-97cd-b201159e8d58)\r\n\r\n![image](https://github.com/dotnet/msbuild/assets/31348972/746d0dec-02d2-48f7-967a-d669a63a7cff)\r\n",
        "createdAt": "2023-06-06T18:06:58Z",
        "updatedAt": "2023-06-06T18:06:58Z",
        "author": {
          "login": "Youssef1313"
        }
      },
      {
        "body": "Ah, you're right--the problem there is that in one invocation it's added after `_GenerateCompileDependencyCache` looks at the compiler inputs. Try changing `MixinGeneration.targets`:\r\n\r\n```diff\r\n <Target Name=\"GenerateMixins\"\r\n \t\t  Inputs=\"@(MixinInput)\"\r\n \t\t  Outputs=\"@(MixinOutput)\"\r\n-\t\t  BeforeTargets=\"DispatchToInnerBuilds;Build;CoreCompile\"\r\n+\t\t  BeforeTargets=\"DispatchToInnerBuilds;Build;BeforeCompile\"\r\n \t\t  Condition=\"'$(DesignTimeBuild)' != 'true'\">\r\n```",
        "createdAt": "2023-06-06T18:52:26Z",
        "updatedAt": "2023-06-06T18:52:26Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "We build once for each RuntimeIdentifier, so if RuntimeIdentifiers=osx-arm64;osx-x64, we'll run the build twice (this is what `_RunRidSpecificBuild` does). Each of those builds should be separate, but it seems there are RID-agnostic generated files (the path does not include the RID):\r\n\r\n```xml\r\n<MixinOutput Include=\"$(MSBuildThisFileDirectory)Mixins\\macOS\\FrameworkElementMixins.g.cs\" Condition=\"$(IsMacOS)\" />\r\n```\r\n\r\nSo I'm guessing these files get re-generated for each build, even though they don't need to be.",
        "createdAt": "2023-06-06T18:56:14Z",
        "updatedAt": "2023-06-06T18:56:14Z",
        "author": {
          "login": "rolfbjarne"
        }
      },
      {
        "body": "@rainersigwald Some builds don't seem to run BeforeCompile at all, so this change causes GenerateMixins to not be run as well. Is it okay to include both `CoreCompile` and `BeforeCompile`?",
        "createdAt": "2023-06-06T20:34:09Z",
        "updatedAt": "2023-06-06T20:34:09Z",
        "author": {
          "login": "Youssef1313"
        }
      },
      {
        "body": "Or probably run before `CoreCompile;_GenerateCompileDependencyCache`, which is a better guarantee?",
        "createdAt": "2023-06-06T20:35:18Z",
        "updatedAt": "2023-06-06T20:35:37Z",
        "author": {
          "login": "Youssef1313"
        }
      },
      {
        "body": "> Some builds don't seem to run BeforeCompile at all,\r\n\r\nDo you happen to have an example? I find that a bit surprising.\r\n\r\n> Is it okay to include both `CoreCompile` and `BeforeCompile`?\r\n\r\nYes; it'll run before whichever one runs first.\r\n\r\n> Or probably run before `CoreCompile;_GenerateCompileDependencyCache`, which is a better guarantee?\r\n\r\nThis is more accurate, but the leading underscore indicates that `_GenerateCompileDependencyCache` is an internal implementation detail of common.targets, so I recommend hooking the public extension point `BeforeCompile`.",
        "createdAt": "2023-06-06T20:40:25Z",
        "updatedAt": "2023-06-06T20:40:25Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald Sure.\r\n\r\n[build-wasm-uitest-net6-4.9.0-PullRequest-12557-81804-12557.1737.zip](https://github.com/dotnet/msbuild/files/11668927/build-wasm-uitest-net6-4.9.0-PullRequest-12557-81804-12557.1737.zip)\r\n\r\n![image](https://github.com/dotnet/msbuild/assets/31348972/5981b7df-30c5-4b4e-bd2b-928a2b6ae5d7)\r\n",
        "createdAt": "2023-06-06T20:42:12Z",
        "updatedAt": "2023-06-06T20:43:35Z",
        "author": {
          "login": "Youssef1313"
        }
      },
      {
        "body": "@rainersigwald could you take a look?",
        "createdAt": "2023-08-02T15:24:31Z",
        "updatedAt": "2023-08-02T15:24:31Z",
        "author": {
          "login": "AR-May"
        }
      },
      {
        "body": "@Youssef1313 Thanks!\r\n\r\nIt looks like `Uno.UI.Wasm.csproj` and `Uno.UI.Wasm.Tests.csproj` add an explicit dependency to `CoreCompile` to a property `<CompileTypeScriptDependsOn>CoreCompile;...`, which I think is causing `CoreCompile` to run earlier than it normally would.\r\n\r\nYou could try making that `Compile` instead, which should enforce `BeforeCompile` running . . . or you could stick with `_GenerateCompileDependencyCache`.",
        "createdAt": "2023-08-02T16:09:55Z",
        "updatedAt": "2023-08-02T16:09:55Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "This issue is marked as stale because feedback has been requested for 30 days with no response. Please respond within 14 days or this issue will be closed due to inactivity.",
        "createdAt": "2023-09-15T00:01:06Z",
        "updatedAt": "2023-09-15T00:01:06Z",
        "author": {
          "login": "ghost"
        }
      }
    ]
  }
}