{
  "number": 7576,
  "title": "Build Issue: Failing Unit Tests on macOS ARM64",
  "body": "### Issue Description\r\nOn macOS with Apple Silicon (ARM64) unit tests fail. The issues starts with the commit for PR #7550 on April 19.\r\n\r\nOn macOS with Intel the issue doesn't occur which is why the PR checks passed.\r\n\r\n### Steps to Reproduce\r\nClone the repo to a host running macOS on an Apple Silicon processor.\r\nRun\r\n```\r\n./build.sh --test\r\n```\r\n\r\nThe build will fail. The log shows 8 unit tests are failing in Microsoft.Build.Engine.UnitTests.dll.\r\n\r\n### Expected Behavior\r\nAll unit tests are expected to pass. And if the main branch is reverted to the commit before the PR commit, all unit tests do pass\r\n\r\n### Actual Behavior\r\n8 unit tests fail in Microsoft.Build.Engine.UnitTests.dll\r\n\r\n### Analysis\r\nThe issues starts with the commit for PR #7550 on April 19.\r\n\r\n### Versions & Configurations\r\n```\r\n% dotnet --version                                                     \r\n6.0.202\r\n```\r\nBuild with HEAD set to 67deba37\r\n```\r\n% dotnet ./artifacts/bin/bootstrap/net6.0/MSBuild/MSBuild.dll --version\r\nMicrosoft (R) Build Engine version 17.3.0-dev-22225-01+67deba370 for .NET\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n17.3.0.22501\r\n```\r\nBuild with HEAD set to cff0b1f2 (current as of creating this issue)\r\n```\r\n% dotnet ./artifacts/bin/bootstrap/net6.0/MSBuild/MSBuild.dll --version\r\nMicrosoft (R) Build Engine version 17.3.0-dev-22226-01+cff0b1f26 for .NET\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n17.3.0.22601\r\n```\r\n\r\n### Summary of Failed Unit Tests ###\r\n\r\n1. Microsoft.Build.Engine.UnitTests.BackEnd.TaskHostFactory_Tests.TaskNodesDieAfterBuild\r\n   - Shouldly.ShouldAssertException : False\\n    should be\\nTrue\\n    but was not\r\n2. Microsoft.Build.UnitTests.BackEnd.BuildManager_Tests.TaskInputLoggingIsExposedToTasks(taskFactory: \\\"TaskHostFactory\\\", taskInputLoggingEnabled: False)\r\n   - Assert.Equal() Failure\\nExpected: Success\\nActual:   Failure\r\n3. Microsoft.Build.UnitTests.BackEnd.BuildManager_Tests.TaskInputLoggingIsExposedToTasks(taskFactory: \\\"TaskHostFactory\\\", taskInputLoggingEnabled: True)\r\n   - Assert.Equal() Failure\\nExpected: Success\\nActual:   Failure\r\n4. Microsoft.Build.UnitTests.EscapingInProjects_Tests.SimpleScenarios.EscapedWildcardsShouldNotBeExpanded_InTaskHost\r\n   - Shouldly.ShouldAssertException : False\\n    should be\\nTrue\\n    but was not\\n\\nAdditional Info:\\n    Build failed.  See test output (Attachments in Azure Pipelines) for details\r\n5. Microsoft.Build.UnitTests.EscapingInProjects_Tests.SimpleScenarios.ItemTransformContainingSemicolon_InTaskHost\r\n   - Assert.True() Failure\\nExpected: True\\nActual:   False\r\n6. Microsoft.Build.UnitTests.EscapingInProjects_Tests.SimpleScenarios.SemicolonInPropertyPassedIntoStringParam_UsingTaskHost\r\n   - Assert.True() Failure\\nExpected: True\\nActual:   False\r\n7. Microsoft.Build.UnitTests.XmakeAttributesTest.TestArchitectureValuesMatch\r\n   - Assert.True() Failure\\nExpected: True\\nActual:   False\r\n8. Microsoft.Build.UnitTests.XmakeAttributesTest.TestMergeArchitectureValues\r\n   - Assert.Equal() Failure\\n          \u2193 (pos 0)\\nExpected: x64\\nActual:   arm64\\n          \u2191 (pos 0)",
  "state": "CLOSED",
  "createdAt": "2022-04-26T11:59:46Z",
  "updatedAt": "2024-02-21T14:08:59Z",
  "closedAt": "2023-03-01T04:14:29Z",
  "author": {
    "login": "jrdodds"
  },
  "labels": [
    "bug",
    "Area: Tests",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "AR-May"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Better buy me a fancy new Mac so I can get this fixed, boss . . . I've got room on my desk for an Ultra \ud83d\ude1c\r\n\r\n@jrdodds thanks for the report! There might be more details in the test XML output, which should be in `artifacts/TestResults/Debug/Microsoft.Build.Engine.UnitTests_net6.0_x64.xml` (though the `x64` part might be different?) after a test run. Would you mind sharing that? I think some of these we could solve without hardware access but some I don't understand by looking at just the failed assertion, so I'd like to have more clues.",
        "createdAt": "2022-04-26T14:30:03Z",
        "updatedAt": "2022-04-26T14:30:03Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Attached a .zip with both the html and xml files.\r\n[Microsoft.Build.Engine.UnitTests_net6.0_x64.zip](https://github.com/dotnet/msbuild/files/8564168/Microsoft.Build.Engine.UnitTests_net6.0_x64.zip)\r\n",
        "createdAt": "2022-04-26T14:39:05Z",
        "updatedAt": "2022-04-26T14:39:05Z",
        "author": {
          "login": "jrdodds"
        }
      },
      {
        "body": "I think comm traces would be useful in figuring this out. Any chance you could grab some from one of the tests, preferably EscapedWildcardsShouldNotBeExpanded_InTaskHost? That would mean setting `MSBUILDDEBUGCOMM` to 1 and `MSBUILDDEBUGPATH` to somewhere you can find at the start of the test. If you do it with using (TestEnvironment...), make sure to break before it exits so the traces are still there.",
        "createdAt": "2022-06-06T22:14:37Z",
        "updatedAt": "2022-06-06T22:14:37Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "@Forgind Yes I can try to capture traces for this issue.",
        "createdAt": "2022-06-08T17:51:51Z",
        "updatedAt": "2022-06-08T17:51:51Z",
        "author": {
          "login": "jrdodds"
        }
      },
      {
        "body": "@Forgind I tried to capture traces but it didn't seem to work and I haven't had an opportunity to investigate.\r\n\r\nI found the gist [Debugging Node Communication in MSBuild](https://gist.github.com/BenVillalobos/85aa750daa7017791a3e3fdd6746934d) but I think I need more detail. Is there another article or tutorial or document that explains how to use `MSBUILDDEBUGCOMM` and `MSBUILDDEBUGPATH`?\r\n\r\nThanks\r\n",
        "createdAt": "2022-06-29T00:55:24Z",
        "updatedAt": "2022-06-29T00:55:24Z",
        "author": {
          "login": "jrdodds"
        }
      },
      {
        "body": "@BenVillalobos, that gist could do with some expansion \ud83d\ude09\r\n\r\nJust for context, in several methods involved in node communication such as NodeProviderOutOfProcBase.GetNodes or NodeEndpointOutOfProcBase.PacketPumpProc, we call CommunicationUtilities.Trace. That method checks MSBUILDDEBUGCOMM (as cached in Traits) and chooses to log if it is 1. It logs it to MSBUILDDEBUGPATH if it is set and otherwise follows a series of fallbacks. Easier to avoid that, so it's useful to set MSBUILDDEBUGPATH and make sure it's somewhere you can write to.\r\n\r\nThe best structure for temporarily setting an environment variable in our unit tests is with a TestEnvironment, which looks like this:\r\n```C#\r\nusing (TestEnvironment env = TestEnvironment.Create());\r\nenv.SetEnvironmentVariable(name, value);\r\n...\r\n```\r\n\r\nThis automatically unsets the environment variable after the test. One potential issue is that Traits are initialized early: when the process starts. Fortunately, we have an exception in tests where it makes a new Traits object every time it's accessed.\r\n\r\nI mentioned that TestEnvironments unset the environment variable. They also unset other state. That includes that (I think) they would delete the trace files after it exits scope. For that reason, if this were me, I'd break on one of the last things in a test (some ShouldBe-type statement) and look at the path you'd set with MSBUILDDEBUGPATH. There should be a number of traces there.\r\n\r\nDoes that help?",
        "createdAt": "2022-06-29T21:50:17Z",
        "updatedAt": "2022-06-29T21:50:17Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "Is this still an issue you're hitting? Were you ever able to retrieve logs?",
        "createdAt": "2022-08-25T23:34:08Z",
        "updatedAt": "2022-08-25T23:34:08Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "I just retested with `./build.sh -test` and this is still an issue.\r\n\r\nI will work on retrieving the logs. I haven't retried with the more detailed instructions.",
        "createdAt": "2022-08-26T13:45:24Z",
        "updatedAt": "2022-08-26T13:45:24Z",
        "author": {
          "login": "jrdodds"
        }
      },
      {
        "body": "@AR-May accidentally told me that it was possible to test in this environment, so assigning over :)",
        "createdAt": "2022-09-06T16:59:03Z",
        "updatedAt": "2022-09-06T16:59:03Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I saw PR #8073 had been merged. I tested and can confirm that two tests that were failing are now passing: `Microsoft.Build.UnitTests.XmakeAttributesTest.TestArchitectureValuesMatch` and `Microsoft.Build.UnitTests.XmakeAttributesTest.TestMergeArchitectureValues`.\r\n\r\nI also see a new failing test `Microsoft.Build.Engine.UnitTests.BackEnd.TaskHostFactory_Tests.VariousParameterTypesCanBeTransmittedToAndRecievedFromTaskHost` which reports \"Shouldly.ShouldAssertException : False\\n    should be\\nTrue\\n    but was not\"",
        "createdAt": "2022-10-25T22:31:43Z",
        "updatedAt": "2022-10-25T22:32:05Z",
        "author": {
          "login": "jrdodds"
        }
      },
      {
        "body": "That test uses a task host explicitly, which likely indicates the code for starting up or (more likely?) connecting to a task host doesn't work on arm. I suspect there's something that explicitly looks for an x86/x64 process and doesn't find it or advertises itself as an x86/x64 process when it isn't.",
        "createdAt": "2022-10-26T18:55:48Z",
        "updatedAt": "2022-10-26T18:55:48Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "Yes, I have the same idea that something is wrong when we try to connect to the task host, indeed. Unfortunately, I cannot see the issue in the code at this moment and I was not able to debug it step-by-step yet. I am trying to get there. \r\n\r\nAlso, btw, there are some tests failing in windows for me as well. It seems like behavior in CI and behavior on my windows machine are different.",
        "createdAt": "2022-11-01T12:19:51Z",
        "updatedAt": "2022-11-01T12:19:51Z",
        "author": {
          "login": "AR-May"
        }
      },
      {
        "body": "> That test uses a task host explicitly, which likely indicates the code for starting up or (more likely?) connecting to a task host doesn't work on arm.\r\n\r\nI suspect it would be closer to the logic of actually transmitting the data\r\n\r\nSome places that _might_ be relevant:\r\nhttps://github.com/dotnet/msbuild/blob/main/src/Shared/TaskHostConfiguration.cs\r\nhttps://github.com/dotnet/msbuild/blob/main/src/MSBuild/OutOfProcTaskHostNode.cs",
        "createdAt": "2022-11-01T16:51:56Z",
        "updatedAt": "2022-11-01T16:51:56Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "Something went wrong during my attempt to set up the debugging and now msbuild repo fails to build on my machine. I had to switch to other issues, unfortunately. I might return to this issue later, when I have more time to fix builds on my arm64 machine.  ",
        "createdAt": "2022-12-09T09:25:01Z",
        "updatedAt": "2022-12-09T09:25:01Z",
        "author": {
          "login": "AR-May"
        }
      },
      {
        "body": "Retested locally and confirmed all unit tests complete successfully.",
        "createdAt": "2023-03-02T14:06:34Z",
        "updatedAt": "2023-03-02T14:06:34Z",
        "author": {
          "login": "jrdodds"
        }
      }
    ]
  }
}