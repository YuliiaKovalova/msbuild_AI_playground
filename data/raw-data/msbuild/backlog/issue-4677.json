{
  "number": 4677,
  "title": "Behavioral inconsistency with BuildProjectReferences=false",
  "body": "## Steps to reproduce\r\n\r\nDownload and unzip the following:\r\n[repro.zip](https://github.com/microsoft/msbuild/files/3557286/repro.zip)\r\n\r\n### Scenario 1\r\n\r\n1. Navigate to `c\\`\r\n2. Run `msbuild`\r\n3. Notice the contents of `c\\bin` include `a.txt`, `b.txt`, `c.txt`\r\n4. Delete `c\\bin`\r\n5. Run `msbuild /p:BuildProjectReferences=false`\r\n6. Notice the contents of `c\\bin` include `b.txt`, `c.txt`. **`a.txt` is missing!**\r\n\r\n### Scenario 2\r\n\r\n1. Open `repro.sln`\r\n2. In VS, build the Solution\r\n3. Notice the contents of `c\\bin` include `a.txt`, `b.txt`, `c.txt`\r\n4. Delete `c\\bin`\r\n5. In VS, build just the C project\r\n6. Notice the contents of `c\\bin` include `b.txt`, `c.txt`. **`a.txt` is missing!**\r\n\r\n### Root Cause\r\nThe root cause for this issue is because of the following:\r\n* Target `GetCopyToOutputDirectoryItems` is called on `@(_MSBuildProjectReferenceExistent)`\r\n* `@(_MSBuildProjectReferenceExistent)` is populated by the `_SplitProjectReferencesByFileExistence` target, which uses `@(ProjectReferenceWithConfiguration)`\r\n* `@(ProjectReferenceWithConfiguration)` is populated by the `AssignProjectConfiguration` target. However, the `_SplitProjectReferencesByFileExistence` does not declare that it depends on `AssignProjectConfiguration`!!!\r\n* When building a project, `AssignProjectConfiguration` happens to execute before `_SplitProjectReferencesByFileExistence`, so all is good.\r\n* When `BuildProjectReferences=true`, project references are recursively built so `GetCopyToOutputDirectoryItems` will have already been called on the project reference and the results would be cached\r\n* When `BuildProjectReferences=false`, project references are not recursively built so the recursive call to `GetCopyToOutputDirectoryItems` ends up calling `_SplitProjectReferencesByFileExistence`, which sees that `@(ProjectReferenceWithConfiguration)` is empty. Effectively this makes `GetCopyToOutputDirectoryItems` only go \"1 level deep\" when `BuildProjectReferences=false`\r\n\r\nOther notes:\r\n* VS adds `BuildProjectReferences=false`, but because it uses the target result cache within the same build session, `GetCopyToOutputDirectoryItems` is cached from the dependencies and works correctly. However when building a specific project, the dependencies might not be built and thus would not be populated.\r\n* A possible fix is just to have `_SplitProjectReferencesByFileExistence` depend on `AssignProjectConfiguration`\r\n\r\n### Environment data\r\nMSBuild version: 16\r\nOS info: Win10",
  "state": "CLOSED",
  "createdAt": "2019-08-29T20:59:57Z",
  "updatedAt": "2024-02-21T17:07:20Z",
  "closedAt": "2019-12-10T21:21:02Z",
  "author": {
    "login": "dfederm"
  },
  "labels": [
    "Area: Common Targets",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Discussion"
  },
  "comments": {
    "nodes": [
      {
        "body": "This is related to (possibly the same as?) #1054.\r\n\r\nOne possible path forward would be to add explicit controls to either:\r\n* Be transitive all the time, or\r\n* Never be transitive.\r\n\r\nThen you could at least opt into a reasonable behavior.\r\n\r\nTo always be transitive, we think a target like this could work:\r\n\r\n```xml\r\n<Target Name=\"EnsureContentIsTransitive\"\r\n        DependsOnTargets=\"AssignProjectConfiguration;_SplitProjectReferencesByFileExistence\"\r\n        Condition=\" '$(MSBuildCopyContentTransitively)' == 'true' \" />\r\n```\r\n\r\nI'm scared of changing the confusing existing/default behavior, even though I agree it's confusing and bad. But I can't concretely point to a scenario that would break (if you _can_ I'd love to hear about it!).",
        "createdAt": "2019-09-09T20:54:50Z",
        "updatedAt": "2019-09-09T20:54:50Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}