{
  "number": 5387,
  "title": "Desktop MSBuild doesn't always close all of its streams",
  "body": "### Steps to reproduce\r\n\r\nClone https://github.com/wixtoolset/Tools, and run `appveyor.cmd`. The issue started happening in https://github.com/wixtoolset/Tools/commit/ba0069bf9572d26a9deac77bac3613bc2f96e01a. The issue was worked around in the next commit by disabling node reuse.\r\n\r\nSpecifically, the tests in WixToolsetTest.MSBuild hang (`dotnet test -c Release src\\test\\WixToolsetTest.MSBuild`). You have to run the whole script in order to run those tests. The tests do not hang when run inside of Visual Studio.\r\n\r\n### Expected behavior\r\n\r\nWhenever `msbuild.exe` is launched by the user, it closes its output and error streams before exiting so that the user can capture all of its output and know the process has completed.\r\n\r\n### Actual behavior\r\n\r\nThe `msbuild.exe` does not close its output and error streams before exiting, causing our tests to hang since they are waiting for the streams to close.\r\n\r\n### Environment data\r\n`msbuild /version` output:\r\n\r\nMicrosoft (R) Build Engine version 16.5.0+d4cbfca49 for .NET Framework\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n16.5.0.12403\r\n\r\nOS info:\r\n\r\nWindows 10 Version 10.0.18363\r\n\r\nIf applicable, version of the tool that invokes MSBuild (Visual Studio, dotnet CLI, etc):\r\n\r\nhttps://github.com/wixtoolset/WixBuildTools/blob/223b2845955d4d6604cfd014cf9aa536ca1eb0a2/src/WixBuildTools.TestSupport/ExternalExecutable.cs\r\n",
  "state": "OPEN",
  "createdAt": "2020-05-31T05:53:59Z",
  "updatedAt": "2024-02-21T16:29:22Z",
  "closedAt": null,
  "author": {
    "login": "rseanhall"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Discussion"
  },
  "comments": {
    "nodes": [
      {
        "body": "This was fun to think about! Until I was able to build a solid theory about what went wrong, when I got sad.\r\n\r\nBackground:\r\n\r\n1. MSBuild behaves as you describe in most cases: child process worker nodes are created without connections to its output streams.\r\n1. That means that MSBuild can create long-lived processes (for node reuse) and still return as expected.\r\n1. But https://github.com/Microsoft/vstest/issues/1503 meant that this caused a lot of confusion when running tests in `dotnet test` scenarios, becuase VSTest wanted to write directly to stdout.\r\n1. As a result, we added an environment-variable escape hatch\r\nhttps://github.com/microsoft/msbuild/blob/a936b97e30679dcea4d99c362efa6f732c9d3587/src/Shared/Traits.cs#L251-L254\r\n1. `dotnet test` sets this before invoking MSBuild\r\n1. Build/test of your test project then invokes tests (inheriting the environment)\r\n1. The test runner then runs your tests, which spawn MSBuild (inheriting the environment)\r\n1. Your tests run MSBuild in multiproc mode, launching worker nodes (that share stdout/stderr because of the escape hatch)\r\n1. `Process.WaitForExit` waits for grandchild exit instead of just child.\r\n\r\nYou're testing build tasks, right? In that case, you should specify `-nodeReuse:false` _anyway_, because otherwise a long-lived worker node might lock your task assembly under test.\r\n\r\nHowever, it should also be possible to unset `MSBUILDENSURESTDOUTFORTASKPROCESSES` before launching MSBuild in your test to get the \"right\" behavior back.\r\n",
        "createdAt": "2020-06-03T16:14:06Z",
        "updatedAt": "2020-06-03T16:14:06Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Yes, we're testing build tasks. I guess this issue comes down to \"Who is the user in this scenario?\"\r\n\r\nSince we are the ones running `dotnet test` are we responsible for knowing about these shenanigans and disabling the escape hatch? Or was this escape hatch designed incorrectly such that child processes are unknowing opted in to this behavior? Or is `dotnet test` responsible for ensuring that the test runner is run without the escape hatch enabled?",
        "createdAt": "2020-06-04T00:38:07Z",
        "updatedAt": "2020-06-04T00:38:07Z",
        "author": {
          "login": "rseanhall"
        }
      }
    ]
  }
}