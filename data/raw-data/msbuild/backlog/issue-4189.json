{
  "number": 4189,
  "title": "PerformanceSummary is difficult to interpret with nesting, plain wrong with recursion",
  "body": "`msbuild /m:1 /clp:PerformanceSummary` the following..\r\n\r\n``` xml\r\n<Project>\r\n  <Target Name=\"A\">\r\n     <MSBuild Projects=\"$(MSBuildProjectFile)\" Targets=\"B\" />\r\n  </Target>\r\n\r\n  <Target Name=\"B\">\r\n      <Exec Command=\"ping -n 5 localhost\" />\r\n      <MSBuild Projects=\"$(MSBuildProjectFile)\" Targets=\"C\" />\r\n  </Target>\r\n\r\n  <Target Name=\"C\">\r\n      <Exec Command=\"ping -n 10 localhost\" />\r\n      <MSBuild Projects=\"$(MSBuildProjectFile)\" Targets=\"D\" />\r\n  </Target>\r\n\r\n  <Target Name=\"D\">\r\n      <Exec Command=\"ping -n 20 localhost\" />\r\n  </Target>\r\n</Project>\r\n```\r\n\r\n...and you'll get something like this:\r\n\r\n```\r\nMicrosoft (R) Build Engine version 16.0.440-preview+gc689feb344 for .NET Framework\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\nProject Performance Summary:\r\n    111984 ms  D:\\Temp\\ProfilingRepro\\Repro.csproj        4 calls\r\n              32320 ms  B                                          1 calls\r\n              28213 ms  C                                          1 calls\r\n              19109 ms  D                                          1 calls\r\n\r\nTarget Performance Summary:\r\n    19109 ms  D                                          1 calls\r\n    28212 ms  C                                          1 calls\r\n    32320 ms  B                                          1 calls\r\n    32341 ms  A                                          1 calls\r\n\r\nTask Performance Summary:\r\n    32314 ms  Exec                                       3 calls\r\n    79650 ms  MSBuild                                    3 calls\r\n\r\nTime Elapsed 00:00:32.36\r\n```\r\n\r\nThe call tree is A (~ 0 seconds exclusive) -> B  (~4 seconds exclusive) -> C  (~9 seconds exclusive)-> D (~19 seconds exclusive). \r\n\r\nThe project is obviously contrived, but demonstrates things you can observe with real nested project references and multi-targeting.\r\n\r\nThe first problem is that only inclusive times are reported. Without also reporting exclusive times or providing any visualization of the tree, these are easy to misinterpret.\r\n\r\nIt gets much worse when the nesting involves any recursion\r\n\r\n>     111984 ms  D:\\Temp\\ProfilingRepro\\Repro.csproj        4 calls\r\n>      79650 ms  MSBuild                                    3 calls\r\n\r\nHuh?  The whole single proc build took ~32s, how did 4 builds of Repro.csproj take ~112s? Ditto for 3 calls to MSBuild taking ~79s?\r\n\r\nThe answer is that we're incorrectly double counting:\r\n\r\nRepro.csproj ~= (D ~= 19s) + (C ~= 9s+ 19s) + (B ~= 4s + 9s + 19s) + (A ~= 0s + 4s + 9s + 19s). \r\nMSBuild ~= (D ~= 19s) + (C ~= 9s + 19s) + (B ~= 4s + 9s + 19s)\r\n",
  "state": "OPEN",
  "createdAt": "2019-02-20T04:45:50Z",
  "updatedAt": "2024-02-21T16:31:55Z",
  "closedAt": null,
  "author": {
    "login": "nguerrera"
  },
  "labels": [
    "Area: Debuggability",
    "needs-design",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Another related thing is that evaluation cost is attributed to the first target that causes it, and also reported separately. I think it would be useful to see Target costs exclusive of evaluation. See https://github.com/aspnet/AspNetCore/issues/12942#issuecomment-519554818",
        "createdAt": "2019-08-08T15:00:58Z",
        "updatedAt": "2019-08-08T15:00:58Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "The output used to call out double counting but that message seems to have been removed.",
        "createdAt": "2019-08-10T15:58:44Z",
        "updatedAt": "2019-08-10T15:58:44Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "@danmosemsft Hmm, at least calling it out would be a good (re)start! Do you know where I might find the original message so we can put it back?",
        "createdAt": "2019-08-10T16:14:36Z",
        "updatedAt": "2019-08-10T16:14:36Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "Related: #3135",
        "createdAt": "2020-08-17T19:57:29Z",
        "updatedAt": "2020-08-17T19:57:29Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}