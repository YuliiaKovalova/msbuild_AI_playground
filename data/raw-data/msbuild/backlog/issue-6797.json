{
  "number": 6797,
  "title": "Build output of OutputType Exe is transitively copied even if ReferenceOutputAssembly False",
  "body": "<!-- This is a template that helps us provide quicker feedback. Please use any relevant sections and delete anything you don't need. -->\r\n\r\n### Issue Description\r\nBuild output of OutputType Exe is transitively copied even if ReferenceOutputAssembly False.\r\n\r\n### Steps to Reproduce\r\nA.csproj\r\n```\r\n<OutputType>Exe</OutputType>\r\n```\r\n\r\nB.csproj\r\n```\r\n<ProjectReference Include=\"A.csproj\">\r\n  <ReferenceOutputAssembly>False</ReferenceOutputAssembly>\r\n</ProjectReference>\r\n```\r\n\r\nC.csproj\r\n```\r\n<ProjectReference Include=\"B.csproj\" />\r\n```\r\n\r\nRun `dotnet build C`\r\n\r\n### Expected Behavior\r\nThere is no `A.exe` in output the  dir of B or C\r\n\r\n### Actual Behavior\r\nThere are `A.{exe,deps.json,runtimeconfig.json,runtimeconfig.dev.json}` in the output dir of B or C\r\n\r\n`MSBuildCopyContentTransitively = False` helps to some extent. It removes other files except the exe.\r\n\r\nPrivateAssets all, IncludeAssets none, ExcludeAssets all doesn't help.\r\n### Analysis\r\n\r\n### Versions & Configurations\r\n.NET 5.0.400\r\nMSBuild 16.11.0\r\n\r\n### Attach a binlog\r\n<!--\r\n* If providing us a project that reproduces the issue proves difficult, consider including a binlog.\r\n* Click [here](https://aka.ms/msbuild/binlog) for details on sharing binary logs.\r\n* Click [here](https://github.com/microsoft/msbuild/blob/master/documentation/wiki/Binary-Log.md) for more information on binary logs.\r\n    NOTE: Binlogs can contain sensitive information. Don't attach anything you don't want to be public.\r\n\r\n*   To view the contents of the binlogs yourself, you may wish to use a tool like https://msbuildlog.com/.\r\n-->",
  "state": "OPEN",
  "createdAt": "2021-08-31T02:12:54Z",
  "updatedAt": "2024-01-31T08:20:37Z",
  "closedAt": null,
  "author": {
    "login": "foriequal0"
  },
  "labels": [
    "bug",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "What I've observed so far:\r\nA.exe does appear in B\\bin\\Debug\\net6.0 and C\\bin\\Debug\\net6.0.\r\nReferenceOutputAssembly only appears to be used (within MSBuild) in the ResolveProjectReferences target.\r\nI ran `dotnet clean` on each of the three projects, then manually deleted their obj and bin folders just to be sure. Then I captured a binlog from the build and found that the ResolveProjectReferences target _was skipped_ for all three projects, supposedly because it had already built successfully. That feels erroneous to me, so my current best idea is that if we can figure out why it's skipping ResolveProjectReferences, this bug will be easy to resolve.",
        "createdAt": "2021-10-28T20:11:53Z",
        "updatedAt": "2021-10-28T20:11:53Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "Looking this over with our team, I'd been misreading the binlog, and ResolveProjectReferences wasn't always being skipped, just called multiple times per project, and it was always skipped after the first time, which makes more sense.\r\n\r\nIt seems like the real problem is that, since A.dll can't be run directly, it has to wrap it in apphost.exe. Apphost.exe is not a content item made from building A, so it isn't covered by MSBuildCopyContentTransitively = False.\r\n\r\nThe difficulty is that it isn't clear for any given file whether it's Content whose copying we should suppress or not. Of note, this is how it has behaved in the past, which can make it difficult to change.\r\n\r\nI'm a little unclear as to why where MSBuildCopyContentTransitively is used, we can't add a Remove like for [here](https://github.com/dotnet/msbuild/blob/24b33188f385cee07804cc63ec805216b3f8b72f/src/Tasks/Microsoft.Common.CurrentVersion.targets#L4891), appending:\r\n```XML\r\n<_AppHostItemToRemove Include=\"@(_RecursiveTargetForContentCopying -> WithMetadataValue('TargetPath', '$(ProjectName).exe'))\" />\r\n<_RecursiveTargetForContentCopying Remove=\"@(_AppHostItemToRemove)\" />\r\n```",
        "createdAt": "2021-11-04T18:10:51Z",
        "updatedAt": "2021-11-04T18:10:51Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "Bumping this as I'm still seeing this behaviour (with only A.csproj and B.csproj as per [OP](https://github.com/dotnet/msbuild/issues/6797#issue-983366106)) in MSBuild 17.0.0+c9eb9dd64 (SDK 6.0.101+3a25a7f1cc).",
        "createdAt": "2022-07-29T02:25:29Z",
        "updatedAt": "2022-07-29T02:25:29Z",
        "author": {
          "login": "jmlane"
        }
      },
      {
        "body": "@foriequal0 @jmlane It seems from your repro that you need to build project `A` first. I have a similar case where I need to build the executable project first and then the rest. I hit this too. I'm using project dependencies within the solution file to work around this. That way, you don't need to use project reference.",
        "createdAt": "2022-07-29T10:30:19Z",
        "updatedAt": "2022-07-29T10:30:19Z",
        "author": {
          "login": "Nirmal4G"
        }
      }
    ]
  }
}