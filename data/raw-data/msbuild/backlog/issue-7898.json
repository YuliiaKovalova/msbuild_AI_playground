{
  "number": 7898,
  "title": "Assembly manifest issues when building with OutputPath",
  "body": "<!-- This is a template that helps us provide quicker feedback. Please use any relevant sections and delete anything you don't need. -->\r\n\r\n### Issue Description\r\nI have a solution that has a mix of EXEs and DLLs that I want to build to a single folder to deploy. I use the OutputPath property in msbuild to accomplish this. The issue I'm having is, when there different nuget packages referencing different versions of the same DLL, it likely ends up with one EXE ending up in a situation crashing at runtime because the assembly version doesn't match what it is expecting. Normally binding redirects are automatically added to fix this, but that only works when there is a versioning conflict in  the references of a single EXE. To illistrate, consider 3 files: EXE1, DLL A, and DLL B:\r\n\r\nEXE1 references A v2.0.0\r\nEXE1 references B v3.0.0 references A v3.0.0\r\n\r\nEXE1 will end up with a binding redirect pointing to A v3.0.0 and all is fine. \r\n\r\nHowever introducing EXE2:\r\n\r\nEXE2 references A v2.0.0\r\nEXE1 references A v2.0.0\r\nEXE1 references B v3.0.0 references A v3.0.0\r\n\r\nEXE1 redirects to A v3.0.0, but EXE2 is still expecting A v2.0.0. Normally this is fine if the EXEs are built to separate folders, but combined into one folder, now there's an issue. If EXE1 is copied last, it will copy A v3.0.0, and EXE2 will crash because it was expecting A v2.0.0. A similar issue would happen if they are copied in reverse.\r\n\r\n### Steps to Reproduce\r\n<!--\r\n\r\n* Include as much of the following as possible:\r\n\r\n* A minimal sample project that reproduces the issue.\r\n* Your zipped project.\r\n* IDE / CLI steps to create the project and reproduce the behaviour.\r\n* Your command line invocation\r\n\r\nIf providing steps to reproduce the issue proves difficult, consider attaching a binlog:\r\n[Details on sharing binary logs](https://aka.ms/msbuild/binlog)\r\n[More information on binary logs](https://github.com/dotnet/msbuild/blob/main/documentation/wiki/Binary-Log.md)\r\nNOTE: Binary logs capture environment information. Ensure it does not include any information you don't want to be public before you attach one.\r\nIf you want to share one just with Microsoft, you can [report a problem through Visual Studio](https://developercommunity.visualstudio.com/report) and share it privately with Microsoft.\r\n-->\r\n[ProjectBuildOrderProblem.zip](https://github.com/dotnet/msbuild/files/9383520/ProjectBuildOrderProblem.zip)\r\n\r\nThe reproduction (attached) is pretty simple. I have 2 >NET Framework 4.6.2 EXEs\r\nEXE ProjectBuildOrderProblem uses System.Runtime.CompilerServices.Unsafe, Version=4.0.4.1 because seemingly that's the default for 4.6.2\r\nEXE ProjectBuildOrderProblem2 uses System.Runtime.CompilerServices.Unsafe, Version=6.0.0.0 because it references System.Collections.Immutable, Version=6.0.0.0 which references System.Runtime.CompilerServices.Unsafe, Version=6.0.0.0\r\n\r\nTo build:\r\nmsbuild /restore ProjectBuildOrderProblem.sln /p:OutDir=\"\\<pathtoextractedzip\\>\\Output\"\r\nNote that \\<pathtoextractedzip\\> needs to be replaced with the path to where the zip is extracted.\r\n\r\nAfter that, just run ProjectBuildOrderProblem.exe and it should crash.\r\n\r\n### Expected Behavior\r\nIdeally, a binding redirect would be inserted for ProjectBuildOrderProblem that points to System.Runtime.CompilerServices.Unsafe, Version=6.0.0.0. A compile error explaining the conflict would be acceptable. A runtime error isn't great because it will only be thrown when the reference is actually needed, so even simply opening the EXEs wouldn't be enough to detect the issue in a real project.\r\n\r\n### Actual Behavior\r\nThe runtime error\r\n\r\n```System.IO.FileLoadException: Could not load file or assembly 'System.Runtime.CompilerServices.Unsafe, Version=4.0.4.1, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. The located assembly's manifest definition does not match the assembly reference. (Exception from HRESULT: 0x80131040)```\r\n\r\nis raised.\r\n\r\n### Analysis\r\n<!--\r\n* If you have an idea where the problem might lie, let us know that here.\r\n* Please include any pointers to code, relevant changes, or related issues you know of.\r\n-->\r\n\r\n### Versions & Configurations\r\n<!--\r\n* In a Visual Studio developer command prompt, run `msbuild -version` and paste the output here.\r\n* If applicable, include the version of the tool that invokes MSBuild (Visual Studio, dotnet CLI, etc):\r\n\r\n* Post any other relevant configuration settings here.\r\n*   OS, architecture, etc.\r\n-->\r\n\r\nMSBuild version\r\n```Microsoft (R) Build Engine version 17.2.1+52cd2da31 for .NET Framework\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n17.2.1.25201\r\n```\r\n\r\n",
  "state": "CLOSED",
  "createdAt": "2022-08-19T16:16:06Z",
  "updatedAt": "2022-10-01T05:17:53Z",
  "closedAt": "2022-09-29T19:41:16Z",
  "author": {
    "login": "ptsoccer"
  },
  "labels": [
    "bug",
    "needs-triage"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "> Ideally, a binding redirect would be inserted for ProjectBuildOrderProblem that points to System.Runtime.CompilerServices.Unsafe, Version=6.0.0.0\r\n\r\nHave you tried manually adding the binding redirect to your app.config?\r\n\r\nBuilding multiple projects like this, with no relation between the two (eg `ProjectReference`) makes it difficult for our `ResolveAssemblyReference` task to figure this out for you.",
        "createdAt": "2022-09-15T18:01:06Z",
        "updatedAt": "2022-09-15T18:01:06Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "Yeah that works, but it's nearly impossible to tell that these bindings need to occur. I've ended up adding a new project that references every other project to create the bindings, then copy those bindings to every other project.\r\n\r\nI guess my main confusion is it wasn't really that obvious that this msbuild parameter wasn't supported as well beyond .NET framework.",
        "createdAt": "2022-09-16T13:58:20Z",
        "updatedAt": "2022-09-16T13:58:20Z",
        "author": {
          "login": "ptsoccer"
        }
      },
      {
        "body": "Team Triage: Unfortunately there's no \"nice\" way to handle this scenario.  \r\n\r\n> Ideally, a binding redirect would be inserted for ProjectBuildOrderProblem that points to System.Runtime.CompilerServices.Unsafe, Version=6.0.0.0\r\n\r\nUltimately, there's a single `System.Runtime.CompilerServices.Unsafe.dll` **because everything points to the same folder**.\r\n\r\n> A compile error explaining the conflict would be acceptable.\r\n\r\nThis is also tough because during each project's build everything is fine. Then the build outputs get copied and there's no way to know what will happen after that.\r\n\r\n> A runtime error isn't great because it will only be thrown when the reference is actually needed, so even simply opening the EXEs wouldn't be enough to detect the issue in a real project.\r\n\r\nAgreed \ud83d\ude15 None of this is ideal, but due to the nature of how things work in this build process there isn't much that can be done.\r\n\r\nA possible path forward:\r\nIn theory you could have this particular dll output to specific folders within the output directory by modifying your build. Then you can modify each app.config to point to that specific folder within the output directory.\r\n\r\nI don't think there's anything we can do to make this scenario better, unless there's another suggestion we haven't thought of. Closing this for now. Feel free to continue the conversation here and reopen though!",
        "createdAt": "2022-09-29T19:41:16Z",
        "updatedAt": "2022-09-29T19:41:16Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "I don't particularly want to reopen the issue, but just to ask: Is this effectively saying that compiling multiple EXEs to the same folder is not supported?",
        "createdAt": "2022-09-29T19:44:06Z",
        "updatedAt": "2022-09-29T19:44:06Z",
        "author": {
          "login": "ptsoccer"
        }
      },
      {
        "body": "SDK could provide a tool that reads the metadata and config files from a directory and verifies that the assembly versions match. Developers and CI systems could then run that after all projects have been built. If the tool finds any conflicts, developers could resolve them with NuGet central package version management.",
        "createdAt": "2022-10-01T05:17:53Z",
        "updatedAt": "2022-10-01T05:17:53Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      }
    ]
  }
}