{
  "number": 541,
  "title": "XPlat AssignCulture task incorrectly categorizes some EmbeddedResources as culture-specific",
  "body": "We've noticed that some of the embedded resources in some of our tests in corefx are not being passed through to csc.exe. This led me to discover that MSBuild was categorizing EmbeddedResource's as culture-specific if they had any period in their file name. In theory, this task is supposed to be splitting the last part of the filename, and then determining if that part is equal to some culture string, i.e. `MyAssembly.en-us.dll` -> `en.us` -> valid culture. However, it seems to be accepting any string as a valid culture. In our case, we have an EmbeddedResource named `Interop.Mock01.dll`. MSBuild is assigning the culture \"Mock01\" to this assembly, even though that is clearly an invalid culture.\n\nI'm pretty sure the issue is due do differences in code in Culture.cs, line 74. \n\n``` CSharp\nif ((cultureName != null) && (cultureName.Length > 1))\n                {\n                    // ... strip the \".\" to make \"en-US\"\n                    cultureName = cultureName.Substring(1);\n                    validCulture = CultureInfoCache.IsValidCultureString(cultureName);\n                }\n```\n\nThis is different from the desktop code:\n\n``` CSharp\n        if (text != null && text.Length > 1)\n        {\n            // ... strip the \".\" to make \"en-US\"\n                    cultureName = cultureName.Substring(1);\n                    validCulture = CultureStringUtilities.IsValidCultureString(cultureName);\n        }\n```\n\nI'm pretty sure this is causing us to consider culture strings that are actually invalid (i.e. \"Mock01\" and \"Impl\") as valid. I haven't analyzed all of the code paths this stuff goes through, but it seems very likely, especially given how much code is #if'd in CultureInfoCache.cs.\n",
  "state": "CLOSED",
  "createdAt": "2016-03-23T22:55:33Z",
  "updatedAt": "2024-02-21T17:28:43Z",
  "closedAt": "2016-03-28T22:46:46Z",
  "author": {
    "login": "mellinoe"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Can you try with package version 00022? I believe that the change #504 that @cdmihai made recently should address this. We used to just do `new CultureInfo(culture)` but that like you mentioned will accept any string in .NET Core. We now have a hard coded list to make it behave more like the desktop version.\n",
        "createdAt": "2016-03-24T16:57:39Z",
        "updatedAt": "2016-03-24T16:57:39Z",
        "author": {
          "login": "AndyGerlicher"
        }
      },
      {
        "body": "It sounds like that will definitely fix this issue. When I was looking through the code I did notice that it had been changed semi-recently, but I wasn't aware of how old the version we are using in corefx was. We're planning on moving to version 00022 soon, so once we do that I will verify that this issue is fixed.\n",
        "createdAt": "2016-03-24T19:12:47Z",
        "updatedAt": "2016-03-24T19:12:47Z",
        "author": {
          "login": "mellinoe"
        }
      },
      {
        "body": "@AndyGerlicher We updated to version 00022 and it seems to have fixed the issue. Thanks!\n",
        "createdAt": "2016-03-28T22:46:46Z",
        "updatedAt": "2016-03-28T22:46:46Z",
        "author": {
          "login": "mellinoe"
        }
      }
    ]
  }
}