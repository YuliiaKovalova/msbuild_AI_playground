{
  "number": 3788,
  "title": "MSBuild disables hard linking when building in Visual Studio",
  "body": "Consider these two property groups inside of MS.Common.CurrentVersion.targets:\r\n\r\n- https://github.com/Microsoft/msbuild/blob/90506c8f6c5e4b82a09bafa6ae62a41e9e7367bb/src/Tasks/Microsoft.Common.CurrentVersion.targets#L4171-L4175\r\n- https://github.com/Microsoft/msbuild/blob/90506c8f6c5e4b82a09bafa6ae62a41e9e7367bb/src/Tasks/Microsoft.Common.CurrentVersion.targets#L4154\r\n\r\nThese will unconditionally override some of the hard link settings when building inside of Visual Studio. This means that hard links are pretty much useless in VS which is typically the primary build scenario for developers. \r\n\r\nHere is data from the [Roslyn repository](https://github.com/dotnet/roslyn) on how much benefit we get from this on the command line at least:\r\n\r\n| | Build Time | Binaries Size Explorer | Binaries Size DU |\r\n|-|-|-|-|\r\n| No hard link | 4:00 | 13.9GB | 14.9GB |\r\n| Hard links | 3:28 | 13.8GB | 1.5GB |\r\n",
  "state": "OPEN",
  "createdAt": "2018-09-25T19:30:27Z",
  "updatedAt": "2024-02-21T16:32:52Z",
  "closedAt": null,
  "author": {
    "login": "jaredpar"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "From original ancient commit notes:\r\n\r\n> Changeset 1114670: Fix: 665545 PERF: Change copy-local to use Hardlinks, where possible.\r\n> \r\n> NOTE: This is *off* and is only available to command-line builds even when enabled through set CreateHardLinksForCopyFilesToOutputDirectoryIfPossible=true or setting the property in a project / targets import. i.e. It will always be *off* when inside VS no matter what you set CreateHardLinksForCopyFilesToOutputDirectoryIfPossible to because VS loves to arbitrarily lock assemblies in the output directory.\r\n\r\nand a comment on that internal bug\r\n\r\n> This will be disabled by default, and forcibly disabled when in Visual Studio (VS loves to lock assemblies for some bonkers reason).\r\n\r\nSo presumably it actively caused VS build problems in 2009. That is at the very least ripe for reevaluation.",
        "createdAt": "2018-09-25T19:36:45Z",
        "updatedAt": "2018-09-25T19:36:45Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I'm going to \"fix\" this locally and experiment a bit. No errors won't mean too much but if I get an immediate issue I'll report back.",
        "createdAt": "2018-09-25T20:48:04Z",
        "updatedAt": "2018-09-25T20:48:04Z",
        "author": {
          "login": "jaredpar"
        }
      },
      {
        "body": "Thanks!! I modified this file in my MSBuild directory and it's been working perfectly so far. The only question I have is: will this file need to be updated after every VS update?",
        "createdAt": "2018-10-07T19:33:00Z",
        "updatedAt": "2018-10-07T19:33:29Z",
        "author": {
          "login": "Neme12"
        }
      },
      {
        "body": "> I modified this file in my MSBuild directory and it's been working perfectly so far. \r\n\r\nMan I've had a bit of trouble getting this to work for me. What changes did you make? Just commenting out the two property groups around hard linking?",
        "createdAt": "2018-10-08T00:07:13Z",
        "updatedAt": "2018-10-08T00:07:13Z",
        "author": {
          "login": "jaredpar"
        }
      },
      {
        "body": "I removed the `'$(BuildingInsideVisualStudio)' == 'true' or ` part in all places in the file.",
        "createdAt": "2018-10-08T05:32:42Z",
        "updatedAt": "2018-10-08T05:33:20Z",
        "author": {
          "login": "Neme12"
        }
      },
      {
        "body": "Okay. Sounds like its' definitely a PEBKAC issue on my part then.",
        "createdAt": "2018-10-08T14:45:38Z",
        "updatedAt": "2018-10-08T14:45:38Z",
        "author": {
          "login": "jaredpar"
        }
      },
      {
        "body": "Hi guys, any updates on when VS would stop preventing CreateHardLinksForCopyFilesToOutputDirectoryIfPossible  from working correctly? Speeding up the build would be awesome for many developers.",
        "createdAt": "2019-01-27T21:21:11Z",
        "updatedAt": "2019-01-27T21:21:11Z",
        "author": {
          "login": "voltcode"
        }
      },
      {
        "body": "Regarding performance:\r\n\r\nBack a few years ago we've set the build to use hard links if possible to increase performance.\r\nI've now found that this wasn't active anymore in our console build (use `fsutil hardlink list MyFile.exe` to see list of hardlinks [note that 1 hard link is the normal case, so for hard linking to work there should be at least 2 entries being listed]).\r\n\r\nI've adapted MS.Common.CurrentVersion.targets to use hard links by default.\r\nAgain, i've verified that this works using `fsutil hardlink list MyFile.exe`. All nuget dependencies were copied by hard links.\r\n\r\nThe performance improvement measured approximates to *zero*. Really, I've double checked.\r\n\r\nNote: \r\nBuild contains 100+ projects and a total artifact size of over 8GiBis. Of those I expect more than 80% to be hard linked.\r\nThe disk used is a Samsung 960 EVO 500GB (m.2).\r\n\r\nMeasurements;\r\n- run three builds without hard-linking, they took 1:20, 1:14 and 1:19. \r\n - three builds with hard-linking: 1:19, 1:17, 1:16.\r\n\r\n--------\r\n\r\nI still consider hard-linking beneficial because it can reduce Total Bytes Written significantly and thus prolong the life of an SSD.\r\n\r\n-------\r\n\r\nHere's a patch with the changes I made. I use MSBuild 15 (VS2017). Base-path on my machine is: C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\MSBuild\\15.0\\Bin\r\n\r\n[hardlink.patch.zip](https://github.com/microsoft/msbuild/files/3255590/hardlink.patch.zip)\r\n\r\nIt would be interesting to see if others can confirm my findings.\r\n\r\n@jaredpar \r\nWhat was the hardware (disk) you ran your tests on?",
        "createdAt": "2019-06-05T04:43:07Z",
        "updatedAt": "2019-06-05T05:18:17Z",
        "author": {
          "login": "BrunoJuchli"
        }
      },
      {
        "body": "> NOTE: This is _off_ and is only available to command-line builds even when enabled through set CreateHardLinksForCopyFilesToOutputDirectoryIfPossible=true or setting the property in a project / targets import. i.e. It will always be _off_ when inside VS no matter what you set CreateHardLinksForCopyFilesToOutputDirectoryIfPossible to because VS loves to arbitrarily lock assemblies in the output directory.\r\n\r\nIs it possible to give us an option to override this behavior?\r\nFor example slightly change the condition\r\n`'$(BuildingInsideVisualStudio)' == 'true'`\r\nto\r\n`('$(BuildingInsideVisualStudio)' == 'true' and '$(BuildingInsideVisualStudio_AllowHardLinks)' != 'true')`\r\n\r\nIt will allow us to define these properties at solution level in Directory.Build.props and we won't have to patch Microsoft.Common.CurrentVersion.targets every time Visual Studio is updated.",
        "createdAt": "2020-11-13T12:49:18Z",
        "updatedAt": "2020-11-13T12:49:18Z",
        "author": {
          "login": "ExtraClock"
        }
      },
      {
        "body": "> I'm going to \"fix\" this locally and experiment a bit. No errors won't mean too much but if I get an immediate issue I'll report back.\r\n\r\n@jaredpar I know this is an old thread but were you successful with disabling the no hardlinking behavior in VS? Should we again consider changing this and/or add a flag to override the behavior as proposed above?",
        "createdAt": "2021-05-20T16:03:03Z",
        "updatedAt": "2021-05-20T16:03:03Z",
        "author": {
          "login": "ViktorHofer"
        }
      },
      {
        "body": "The dotnet/roslyn repository has a setting we use to control hard linking behavior: `$(ROSLYNUSEHARDLINKS)`. This is used in our CI because it gets our build size down to a point where we can run on stock azure VM images (IIRC they have a ~10 Gig limit that we violate without hard links). This is a successful use for us though. \r\n\r\nI don't think we ever followed up though on VS though because this MSBuild target is essentially preventing us from using them.\r\n\r\nMy estimation is that the best path forward would be to have a property that lets you override this that repos like Roslyn could experiment with to find the problems. \r\n",
        "createdAt": "2021-05-20T16:09:56Z",
        "updatedAt": "2021-05-20T16:09:56Z",
        "author": {
          "login": "jaredpar"
        }
      },
      {
        "body": "Thanks for the feedback. I just noticed that even outside of VS hard linking is disabled by default: https://github.com/dotnet/msbuild/blob/4adc47707f27d0dce03cee9e4651d599e7ff265f/src/Tasks/Microsoft.Common.CurrentVersion.targets#L4489.\r\n\r\nWould be great to better understand why that is so.",
        "createdAt": "2021-05-20T16:12:01Z",
        "updatedAt": "2021-05-20T16:12:01Z",
        "author": {
          "login": "ViktorHofer"
        }
      },
      {
        "body": "The reason for that, I imagine, is that hard linking will actively corrupt builds that are not authored correctly. Consider builds which have the following operations for a single file on disk: write, copy, write. Basically a build that is incorrect due to double writes to the same location. \r\n\r\nThat build will possibly complete successfully without hard linking if there are no other race conditions. The same build would fail with hard linking because the second write modifies the copied file in adddition to the original location. That's because the copy turns into a link, not a copy. Hence enabling this by default can easily turn functioning builds (but authored incorrectly) into non-functioning builds. ",
        "createdAt": "2021-05-20T16:16:32Z",
        "updatedAt": "2021-05-20T16:16:32Z",
        "author": {
          "login": "jaredpar"
        }
      },
      {
        "body": "Is there an argument to be made for using a filesystem that supports [copy-on-write](https://docs.microsoft.com/en-us/windows-server/storage/refs/block-cloning) so that this is taken care of by the OS instead?\r\n\r\nWe had a similar problem to what @jaredpar described when building a ClickOnce project because the files would get signed _after_ they were copied (which meant that the hashes of the originals then changed)",
        "createdAt": "2021-05-20T18:15:03Z",
        "updatedAt": "2021-05-20T18:15:03Z",
        "author": {
          "login": "MatthewSteeples"
        }
      },
      {
        "body": "> Is there an argument to be made for using a filesystem that supports [copy-on-write](https://docs.microsoft.com/en-us/windows-server/storage/refs/block-cloning) so that this is taken care of by the OS instead?\r\n\r\nThis sounds ideal, but we can't force everyone to use ReFS, sadly.",
        "createdAt": "2023-04-20T20:49:12Z",
        "updatedAt": "2023-04-20T20:49:12Z",
        "author": {
          "login": "Forgind"
        }
      }
    ]
  }
}