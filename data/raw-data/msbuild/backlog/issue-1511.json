{
  "number": 1511,
  "title": "Preventing SDKs from automatically adding assemblies",
  "body": "Consider as an example here the VS SDK.  When installed on a machine it will cause new references to be available to programs by default.  \r\n\r\nThis is certainly convenient for many simple applications.  It allows for references to be added with no alterations to the standard MSBuild project file. \r\n\r\nThis is decidedly inconvenient though for more complex applications.  In particular those where predictability of the build is more important than little conveniences like this.  For such projects it would be nice to opt-out of automatically inserting references to the build.  That helps ensure builds are consistent from machine to machine.\r\n\r\nTake the [following PR](https://github.com/dotnet/roslyn/pull/16142) as an example of why this important.  There are two commits here.  The [first of which](https://github.com/dotnet/roslyn/pull/16142/commits/a202711501e26a514309b65f2554d2e03e441940) builds clean on a machine with Dev14, but fails on a machine with Dev15.  This happens because the Dev15 SDK inserts extra references that causes conflicts with the change.  It took the [second commit](https://github.com/dotnet/roslyn/pull/16142/commits/453b5a3cb927a37a4d1f2306c49cbcc3f5945a09) to cleanup the Dev15 SDK errors.  \r\n\r\nIdeally we could avoid this problem by having a clean / predictable build option for MSBuild that ignored global state like the VS SDK. ",
  "state": "CLOSED",
  "createdAt": "2017-01-02T03:15:49Z",
  "updatedAt": "2024-02-21T17:23:06Z",
  "closedAt": "2019-10-07T20:37:16Z",
  "author": {
    "login": "jaredpar"
  },
  "labels": [
    "Area: Documentation",
    "Area: Task: Resolve Assembly References (RAR)",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "MSBuild 16.5"
  },
  "comments": {
    "nodes": [
      {
        "body": "This would be fantastic - as a (hopefully short) aside, one of my long term goals for the VSSDK reference story is to get completely out of installing any reference assemblies at all but it doesn't seem reachable in the near future - it would break many existing projects. We (our team) need to do better to support deterministic building and the best tool for that right now is NuGet.\r\n\r\nHaving said that, I also know that usage of `AssemblysFolderEx` in the registry is pretty widespread - I would be in support of a build option that allows the assembly search path to be configurable. Also, I believe this is similarly proposed in #772.",
        "createdAt": "2017-01-05T03:25:32Z",
        "updatedAt": "2017-01-05T03:25:32Z",
        "author": {
          "login": "AlexEyler"
        }
      },
      {
        "body": "I've made some progress here by customizing the `AssemblySearchPaths` property:\r\n\r\n> https://github.com/dotnet/roslyn/pull/16249\r\n\r\nBeen able to remove GAC, AssemblyFoldersEx, AssemblyFolders and a couple of other items from our search so far.\r\n\r\nIt's workable and gets me close to the proposal.  The problem though is I feel like this is still very undocumented.  The original value for `AssemblySearchPaths` is the following:\r\n\r\n``` xml\r\n    <AssemblySearchPaths Condition=\" '$(AssemblySearchPaths)' == ''\">\r\n      {CandidateAssemblyFiles};\r\n      $(ReferencePath);\r\n      {HintPathFromItem};\r\n      {TargetFrameworkDirectory};\r\n      {Registry:$(FrameworkRegistryBase),$(TargetFrameworkVersion),$(AssemblyFoldersSuffix)$(AssemblyFoldersExConditions)};\r\n      {AssemblyFolders};\r\n      {GAC};\r\n      {RawFileName};\r\n      $(OutDir)\r\n    </AssemblySearchPaths>\r\n ```\r\n\r\nThere are [some comments](https://referencesource.microsoft.com/#MSBuildFiles/C/ProgramFiles(x86)/MSBuild/14.0/bin_/amd64/Microsoft.Common.CurrentVersion.targets,543) explaining the meaning of some of these values.  For others though the only way I could discern what they did was to simply delete them, rebuild and see what broke.  Would be nice to better understand what these values mean. \r\n\r\n\r\n",
        "createdAt": "2017-01-05T17:14:17Z",
        "updatedAt": "2017-01-05T17:14:17Z",
        "author": {
          "login": "jaredpar"
        }
      },
      {
        "body": "@jaredpar What if we introduce a boolean property for controlling this?  Let's say it's called `RestrictAssemblySearchPaths` and when you set it to `true`, then the default `AssemblySearchPaths` is your narrowed down list.  This would allow users to toggle it for code bases where they only want references to come from packages or the build itself.  Users could still override the search paths with a custom list but a toggle like this would probably satisfy the major scenarios.",
        "createdAt": "2017-01-05T17:28:20Z",
        "updatedAt": "2017-01-05T17:28:20Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "@jeffkl that might work.  I'm still a bit uncertain though exactly what I've narrowed my list down to.  I have some ideas on what they are but that's mostly based on what broke when I deleted them.  Maybe it would help to understand a bit better what these mean and what type of references are expected in those locations. ",
        "createdAt": "2017-01-05T18:57:24Z",
        "updatedAt": "2017-01-05T18:57:24Z",
        "author": {
          "login": "jaredpar"
        }
      },
      {
        "body": "There is documentation for the include paths in the SearchPaths section of https://docs.microsoft.com/en-us/visualstudio/msbuild/resolveassemblyreference-task, but it's a bit stale (`{AssemblyFolders}` isn't actually restricted to Visual Studio.NET 2003, for instance).",
        "createdAt": "2018-04-17T16:12:42Z",
        "updatedAt": "2018-04-17T16:12:42Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "This doc item could also be more visible. In fact it documents AssemblySearchPaths project property, but MSBuild docs merely acknowledge its existence. A simple link would be fine.",
        "createdAt": "2018-09-15T19:19:01Z",
        "updatedAt": "2018-09-15T19:19:01Z",
        "author": {
          "login": "simonthum"
        }
      },
      {
        "body": "We've talked about it but I didn't see it written down here:\r\n\r\nIn addition to a big \"don't look in the machine-dependent locations\" flag, we should also have an off-switch property for each location. That way, even a project that uses one of the \"bad\" locations can shut off the others.",
        "createdAt": "2019-02-26T21:16:26Z",
        "updatedAt": "2019-02-26T21:16:26Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I have no idea how we didn't notice this until now but I'm going to mark this as a duplicate (we had almost the exact same discussion there).",
        "createdAt": "2019-10-07T20:37:08Z",
        "updatedAt": "2019-10-07T20:37:08Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Duplicate of #772",
        "createdAt": "2019-10-07T20:37:16Z",
        "updatedAt": "2019-10-07T20:37:16Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}