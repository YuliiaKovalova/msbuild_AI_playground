{
  "number": 833,
  "title": "Support for Ubuntu 16.04",
  "body": "Hi. It's been a few week since .NET Core was released, and it works fine on Ubuntu 16.04.\nTherefore, it should be possible to update MSBuild to also support it.\n\nCurrently, installing libunwind8 on this version of Ubuntu does not seem to solve the problem.\nSample run:\n\n```\n$ uname -a\nLinux jurocha-pad 4.4.0-31-generic #50-Ubuntu SMP Wed Jul 13 00:07:12 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux\n$ sudo apt install libunwind8\n$ git clone https://github.com/Microsoft/msbuild.git --branch xplat\n$ cd msbuild\n$ ./cibuild.sh \nUnsupported target detected: . Configuring as if for CoreCLR\nUnsupported host detected: . Configuring as if for CoreCLR\nInstalling dotnet cli...\nRestoring BuildTools version 1.0.25-prerelease-00410-01...\nFailed to initialize CoreCLR, HRESULT: 0x80131500\n$ cat init-tools.log \nRunning: /home/jurocha/Desktop/msbuild/init-tools.sh\nInstalling 'https://dotnetcli.blob.core.windows.net/dotnet/beta/Binaries/1.0.0-rc2-002547/dotnet-dev-ubuntu-x64.1.0.0-rc2-002547.tar.gz' to '/home/jurocha/Desktop/msbuild/Tools/dotnetcli/dotnet.tar'\nRunning: /home/jurocha/Desktop/msbuild/Tools/dotnetcli/dotnet restore \"/home/jurocha/Desktop/msbuild/Tools/1.0.25-prerelease-00410-01/project.json\" --packages /home/jurocha/Desktop/msbuild/packages --source https://dotnet.myget.org/F/dotnet-buildtools/api/v3/index.json\n```\n\nMaybe the .NET Core dependency can be bumped to the same version as the official release?\n",
  "state": "CLOSED",
  "createdAt": "2016-07-28T03:28:17Z",
  "updatedAt": "2024-02-21T17:26:56Z",
  "closedAt": "2016-10-17T22:07:21Z",
  "author": {
    "login": "JunielKatarn"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "jeffkl"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "I think the problem is that we're downloading and using a fairly old version of the dotnet CLI as the initial bootstrapper to build us the first time. I bet MSBuild would work after bootstrapping.\n\nConveniently, we will be updating our Build Tools dependency in the not-too-distant future for another reason (fixes to NuGet packaging). @jeffkl when you're done with that can you briefly see if my guess is correct and that fixes our build on 16.04? If it doesn't we'll need to investigate further.\n",
        "createdAt": "2016-07-28T14:38:00Z",
        "updatedAt": "2016-07-28T14:38:00Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Okay here's the problem, we're statically setting the Runtime Identifier (RID) to `ubuntu.14.04` [here](https://github.com/Microsoft/msbuild/blob/xplat/dir.props#L192).  We really should be detecting the RID via the [RuntimeEnvironment](https://github.com/dotnet/core-setup/blob/master/src/Microsoft.DotNet.PlatformAbstractions/RuntimeEnvironment.cs#L9) class in .NET Core.\n\nWe can also get the correct RID in our `cibuild.sh` in the same way that `init-tools.sh` does [here](https://github.com/Microsoft/msbuild/blob/xplat/init-tools.sh#L20).\n\nThe second option would be a lot easier to implement but the first option is a better long term solution.  There is no MSBuild task for getting the RuntimeEnvironment so we'd either have to write our own or expose a static method.\n",
        "createdAt": "2016-10-13T19:58:46Z",
        "updatedAt": "2016-10-13T19:58:46Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "I vote go the second way and then let the magic of the CLI solve this for us long-term.\n",
        "createdAt": "2016-10-13T20:03:18Z",
        "updatedAt": "2016-10-13T20:03:18Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Greetings. I just tried this change, but it still fails. Here are the init-tools.log contents:\n\n```\nRunning: /home/user/ws/msbuild/init-tools.sh\nInstalling 'https://dotnetcli.blob.core.windows.net/dotnet/Sdk/1.0.0-preview3-003686/dotnet-dev-ubuntu.16.04-x64.1.0.0-preview3-003686.tar.gz' to '/home/user/ws/msbuild/Tools/dotnetcli/dotnet.tar'\nRunning: /home/user/ws/msbuild/Tools/dotnetcli/dotnet restore \"/home/user/ws/msbuild/Tools/1.0.26-prerelease-00826-05/project.json\" --no-cache --packages /home/user/ws/msbuild/packages --source https://dotnet.myget.org/F/dotnet-buildtools/api/v3/index.json --legacy-packages-directory\nlog  : Restoring packages for /home/user/ws/msbuild/Tools/1.0.26-prerelease-00826-05/project.json...\nerror: Unable to load the service index for source https://dotnet.myget.org/F/dotnet-buildtools/api/v3/index.json.\nerror:   The type initializer for 'System.Net.Http.CurlHandler' threw an exception.\nerror:   The type initializer for 'Http' threw an exception.\nerror:   The type initializer for 'HttpInitializer' threw an exception.\nerror:   Unable to load DLL 'System.Net.Http.Native': The specified module could not be found.\nerror:    (Exception from HRESULT: 0x8007007E)\nRunning: /home/user/ws/msbuild/packages/Microsoft.DotNet.BuildTools/1.0.26-prerelease-00826-05/lib/init-tools.sh /home/user/ws/msbuild /home/user/ws/msbuild/Tools/dotnetcli/dotnet /home/user/ws/msbuild/Tools\n```\n\n(Note: Using a standard Ubuntu 16.04, x64 installation).\n\nPlease reopen this issue.\n",
        "createdAt": "2016-10-17T22:34:51Z",
        "updatedAt": "2016-10-17T22:34:51Z",
        "author": {
          "login": "JunielKatarn"
        }
      },
      {
        "body": "@emgarten or @eerhardt do either of you know what could the error above this or who would know?  It's working fine in [our CI](https://ci.dot.net/job/Microsoft_msbuild/job/master/job/_Ubuntu16.04_CoreCLR_prtest/8/console) and on my local machine.\n",
        "createdAt": "2016-10-18T14:06:09Z",
        "updatedAt": "2016-10-18T14:07:00Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "@JunielKatarn - Do you have all the prereqs installed on the machine?  See https://github.com/dotnet/core/blob/master/Documentation/prereqs.md\n",
        "createdAt": "2016-10-18T14:30:09Z",
        "updatedAt": "2016-10-18T14:30:09Z",
        "author": {
          "login": "eerhardt"
        }
      },
      {
        "body": "I didn't know about the full dependency list (was only aware of libunwind8*).\nIt builds successfully after installing all the list.\nThanks!\n",
        "createdAt": "2016-10-18T21:44:36Z",
        "updatedAt": "2016-10-18T21:44:36Z",
        "author": {
          "login": "JunielKatarn"
        }
      },
      {
        "body": "Please mention full dependencies list here:\r\n\r\nhttps://github.com/Microsoft/msbuild/wiki/Building-Testing-and-Debugging-on-.Net-Core-MSBuild",
        "createdAt": "2017-08-03T09:37:59Z",
        "updatedAt": "2017-08-03T09:37:59Z",
        "author": {
          "login": "anotherbugmaster"
        }
      },
      {
        "body": "@anotherbugmaster Good catch; I [updated the instructions](https://github.com/Microsoft/msbuild/wiki/Building-Testing-and-Debugging-on-.Net-Core-MSBuild/86f39a42156c5a7d3538412f6f0146e9b5c2a6f0). The easiest way to get going now is to just install the .NET Core SDK, which brings in the appropriate dependencies.",
        "createdAt": "2017-08-03T15:39:44Z",
        "updatedAt": "2017-08-03T15:39:44Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}