{
  "number": 5887,
  "title": "MsBuild threats empty string value in property as null",
  "body": "### Issue Description\r\n`MsBuild` threats empty string value in property as null. Essentially it means that you are not able to pass an empty string as a value and there is no way to differentiate between an empty string and a default `null` value\r\n\r\n### Steps to Reproduce\r\nI have a task configuration property `RelativePathOverride` defined like this:\r\n\r\n```\r\n  <PropertyGroup>\r\n    <RelativePathOverride>..\\..\\</RelativePathOverride>\r\n  </PropertyGroup>\r\n```\r\n\r\nand then used as\r\n\r\n```\r\n  <Target Name=\"CustomTaskTarget\" AfterTargets=\"PostBuildEvent\">\r\n    <SimpleTask RelativePathOverride=\"$(RelativePathOverride)\"/> \r\n  </Target>\r\n```\r\n\r\nThe task code is following:\r\n\r\n```\r\npublic class SimpleTask : Task\r\n{\r\n    public string RelativePathOverride { get; set; }\r\n    \r\n    public override bool Execute()\r\n    {\r\n        Log.LogMessage(MessageImportance.High, $\"RelativePathOverride: {RelativePathOverride ?? \"NULL\"}\");\r\n\r\n        if (RelativePathOverride == null)\r\n        {\r\n            // default value\r\n            RelativePathOverride = \"..\\\\\";\r\n        }\r\n\r\n    }\r\n}\r\n```\r\n\r\nThis works fine. However, the problem is that when I provide the empty value for the `RelativePathOverride` property then it's defaulted to `null` as well!\r\n\r\n```\r\n  <PropertyGroup>\r\n    <RelativePathOverride></RelativePathOverride>\r\n  </PropertyGroup>\r\n```\r\n\r\nThis is wrong, because Empty value and null are completely different values. null means that there is no value at all, on the other hand, empty string means that sting has a value that happens to be of length 0.\r\n\r\n### Expected Behavior\r\nEmpty value is passed as empty string to task property.\r\n\r\n### Actual Behavior\r\nEmpty value is passed as `null` to task property.\r\n\r\n### Analysis\r\nNo idea where there problem is, sorry. Also, this functionality been used for ages by other people so I guess nobody really considers this a defect.\r\n\r\nIn my logic - I want the empty value to be an empty value! This is very important because we are talking about a relative path. NULL value means that there is NO override provided, so the default will be hardcoded to `..\\`. But since empty property value is also threated as null then this corrupts my logic..\r\n\r\n### Versions & Configurations\r\n- msbuild: 16.7.0.37604\r\n- Microsoft Visual Studio Professional 2019: Version 16.7.7\r\n-     <PackageReference Include=\"Microsoft.Build.Framework\" Version=\"16.7.0\" />\r\n-     <PackageReference Include=\"Microsoft.Build.Utilities.Core\" Version=\"16.7.0\" />\r\n- win 10 enterprise: Version 10.0.18363 Build 18363\r\n",
  "state": "CLOSED",
  "createdAt": "2020-11-16T11:53:14Z",
  "updatedAt": "2020-11-18T17:16:32Z",
  "closedAt": "2020-11-18T17:16:32Z",
  "author": {
    "login": "pavlexander"
  },
  "labels": [
    "bug",
    "needs-triage"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "This is happening \"by design\". It enables defining task invocations like\r\n\r\n```xml\r\n<MyTask Option=\"$(MyOption)\" />\r\n```\r\n\r\nwhile not having to differentiate between null and empty string in the task body. As you point out, that is a potentially useful distinction--but since it hasn't been supported, adding the distinction now would be a breaking change for all the tasks that don't make it today.\r\n\r\nIn addition, since there's no way to _unset_ a property besides setting it to the empty string, this change would make it harder to override behavior defined via properties.\r\n",
        "createdAt": "2020-11-16T21:35:36Z",
        "updatedAt": "2020-11-16T21:35:36Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald I understand.. Since it's a breaking change - would it be not possible to introduce a new property attribute to indicate that empty string values are allowed?\r\n\r\nPersonally, it will be faster for me to do a workaround at this point. But we could still improve the product whilst moving forward! So, maybe you could not threat this topic as a bug fix request but a feature request? :)",
        "createdAt": "2020-11-17T08:55:00Z",
        "updatedAt": "2020-11-17T08:55:00Z",
        "author": {
          "login": "pavlexander"
        }
      },
      {
        "body": "Team Triage: Closing this out, as the change to make this happen would be fairly large when the workaround is a null check. If you feel strongly about this, feel free to start a discussion over in our [Discussion](https://github.com/dotnet/msbuild/discussions) page",
        "createdAt": "2020-11-18T17:16:32Z",
        "updatedAt": "2020-11-18T17:16:32Z",
        "author": {
          "login": "benvillalobos"
        }
      }
    ]
  }
}