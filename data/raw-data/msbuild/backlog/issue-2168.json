{
  "number": 2168,
  "title": "Very high memory consumption during build (4GB) with binary log enabled",
  "body": "_From @rynowak on June 4, 2017 1:1_\n\nApologies if this is not the right place. Please redirect me if you want me to put this info somewhere else.\r\n\r\n/cc @rainersigwald \r\n\r\n**Repo Steps**:\r\n\r\nclone https://github.com/aspnet/Mvc\r\nrun build.cmd\r\n\r\n**dotnet --info**\r\n```\r\n.NET Command Line Tools (2.0.0-preview2-006215)\r\n\r\nProduct Information:\r\n Version:            2.0.0-preview2-006215\r\n Commit SHA-1 hash:  e67962b0de\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.14393\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Users\\rynowak\\.dotnet\\x64\\sdk\\2.0.0-preview2-006215\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0-preview1-002111-00\r\n  Build    : 1ff021936263d492539399688f46fd3827169983\r\n```\r\n\r\n**Here's a dump**\r\n![image](https://cloud.githubusercontent.com/assets/1430011/26758026/a30a9118-4886-11e7-9406-0818abafcf86.png)\r\n\r\n\r\n[dotnet.zip](https://github.com/dotnet/sdk/files/1050051/dotnet.zip)\r\n\r\n\n\n_Copied from original issue: dotnet/sdk#1299_",
  "state": "CLOSED",
  "createdAt": "2017-06-04T21:10:40Z",
  "updatedAt": "2024-02-21T17:18:44Z",
  "closedAt": "2021-03-04T03:16:13Z",
  "author": {
    "login": "nguerrera"
  },
  "labels": [
    "Area: Performance",
    "Area: Logging",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "KirillOsenkov"
      }
    ]
  },
  "milestone": {
    "title": "MSBuild 16.10"
  },
  "comments": {
    "nodes": [
      {
        "body": "_From @rynowak on June 4, 2017 1:5_\n\nZooming in more specifically on the highest category, it looks like there's some truly large amounts of text that are being passed around as `string` in the messages. We're not doing anything exotic in our build that I know of.\r\n\r\n**strings > 100K**\r\n![image](https://cloud.githubusercontent.com/assets/1430011/26758034/fdaff1ee-4886-11e7-8088-1dda247a25b2.png)\r\n",
        "createdAt": "2017-06-04T21:10:41Z",
        "updatedAt": "2017-06-04T21:10:41Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "Yikes. Taking a look.",
        "createdAt": "2017-06-04T21:10:41Z",
        "updatedAt": "2017-06-04T21:10:41Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "First observation: working set is about 4X better if I remove the binary logger from the command line args. cc @KirillOsenkov ",
        "createdAt": "2017-06-04T21:10:41Z",
        "updatedAt": "2017-06-04T21:10:41Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "_From @KirillOsenkov on June 4, 2017 18:39_\n\nOuch. Can you try and see if /bl:ProjectImports=None will make it better? Not sure which version of the binary logger you're using.",
        "createdAt": "2017-06-04T21:10:42Z",
        "updatedAt": "2017-06-04T21:10:42Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "I believe this version does not have that feature:\r\n\r\n```\r\n> dotnet msbuild @D:\\Src\\Mvc/artifacts/msbuild/msbuild.rsp\r\nC:\\Users\\nicholg\\.dotnet\\x64\\sdk\\2.0.0-preview2-006341\\MSBuild.dll /nologo /bl:D:\\Src\\Mvc/artifacts/msbuild/msbuild.binlog;ProjectImports=None /clp:Summary /Logger:Microsoft.DotNet.Tools.MSBuild.MSBuildLogger,C:\\Users\\nicholg\\.dotnet\\x64\\sdk\\2.0.0-preview2-006341\\dotnet.dll /m /m /p:RepositoryRoot=D:\\Src\\Mvc/ /v:m D:\\Src\\Mvc\\.build/KoreBuild.proj\r\nMSBUILD : Logger error MSB1029: The binary logger expects a single parameter (the output file name). 2 parameters were passed: \"D:\\Src\\Mvc/artifacts/msbuild/msbuild.binlog;ProjectImports=None\".\r\n'dotnet msbuild @D:\\Src\\Mvc/artifacts/msbuild/msbuild.rsp' failed with exit code: 1\r\nAt D:\\Src\\Mvc\\.build\\KoreBuild.ps1:14 char:9\r\n\r\n\r\nD:\\Src\\Mvc>C:\\Users\\nicholg\\.dotnet\\x64\\dotnet.exe msbuild /version\r\nMicrosoft (R) Build Engine version 15.3.246.41955 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n15.3.246.41955\r\n```",
        "createdAt": "2017-06-04T21:10:42Z",
        "updatedAt": "2017-06-04T21:10:42Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "Can't find symbols, but I was able to take a look at the huge strings using windbg:\r\n\r\n```\r\n0:047> .loadby sos coreclr\r\n```\r\n\r\n``` \r\n0:047> !DumpHeap -type System.String -min 100000\r\n         Address               MT     Size\r\n000002881177c340 00007ff8557f23e8  2212542 \r\n<snip>\r\n```\r\n\r\n```\r\n0:047> !DumpObj /d 000002881177c340\r\nName:        System.String\r\nMethodTable: 00007ff8557f23e8\r\nEEClass:     00007ff854f8a0d8\r\nSize:        2212542(0x21c2be) bytes\r\nFile:        C:\\Users\\nicholg\\.dotnet\\x64\\shared\\Microsoft.NETCore.App\\2.0.0-preview2-25402-02\\System.Private.CoreLib.dll\r\nString:      <String is invalid or too large to print>\r\n\r\nFields:\r\n              MT    Field   Offset                 Type VT     Attr            Value Name\r\n00007ff855810aa8  4000218        8         System.Int32  1 instance          1106258 m_stringLength\r\n00007ff8557f2578  4000219        c          System.Char  1 instance               54 m_firstChar\r\n00007ff8557f23e8  400021a       78        System.String  0   shared           static Empty\r\n```\r\n\r\n```\r\n0:013> .writemem d:\\temp\\hugestring.txt 000002881177c340+c 000002881177c340+c+0n2068198\r\nWriting 1f8ee7 bytes.................................................................\r\n```\r\n\r\nhugestring.txt:\r\n```\r\nTask Parameter:\r\n    Inputs=\r\n        55d01c43-1951-403d-86fa-a00cb72112c0\r\n                AdditionalProperties=Configuration=Debug; Platform=AnyCPU;;Configuration=Debug;BuildNumber=t0048fd9dc;CommitHash=b1bc67e92e3d32e7a69072ebc2994f4d37a77743;GitBranch=dev\r\n                Configuration=Debug\r\n                MSBuildSourceProjectFile=D:\\Src\\Mvc\\src\\Microsoft.AspNetCore.Mvc\\Microsoft.AspNetCore.Mvc.csproj\r\n                MSBuildSourceTargetName=_GenerateRestoreProjectPathItemsPerFramework\r\n                OriginalItemSpec=D:\\Src\\Mvc\\src\\Microsoft.AspNetCore.Mvc.Core\\Microsoft.AspNetCore.Mvc.Core.csproj\r\n                Platform=AnyCPU\r\n                ProjectUniqueName=D:\\Src\\Mvc\\src\\Microsoft.AspNetCore.Mvc.Core\\Microsoft.AspNetCore.Mvc.Core.csproj\r\n                SkipNonexistentProjects=False\r\n                ToolsVersion=\r\n                Type=RestoreSpec\r\n        21a14d29-6ff1-44a9-a8ec-d49a7ea0f128\r\n                AdditionalProperties=Configuration=Debug; Platform=AnyCPU;;Configuration=Debug;BuildNumber=t0048fd9dc;CommitHash=b1bc67e92e3d32e7a69072ebc2994f4d37a77743;GitBranch=dev\r\n                Configuration=Debug\r\n                MSBuildSourceProjectFile=D:\\Src\\Mvc\\src\\Microsoft.AspNetCore.Mvc.ApiExplorer\\Microsoft.AspNetCore.Mvc.ApiExplorer.csproj\r\n                MSBuildSourceTargetName=_GenerateRestoreProjectPathItemsPerFramework\r\n                OriginalItemSpec=D:\\Src\\Mvc\\src\\Microsoft.AspNetCore.Mvc.Abstractions\\Microsoft.AspNetCore.Mvc.Abstractions.csproj\r\n                Platform=AnyCPU\r\n                ProjectUniqueName=D:\\Src\\Mvc\\src\\Microsoft.AspNetCore.Mvc.Abstractions\\Microsoft.AspNetCore.Mvc.Abstractions.csproj\r\n                SkipNonexistentProjects=False\r\n                ToolsVersion=\r\n                Type=RestoreSpec\r\n\r\n<snip - continues for 2 MB!>\r\n```\r\n\r\nLooks like each task parameter is logged as single system.string and there is a huge set of items being passed to a NuGet restore target, which all get concatenated to log as a single parameter. There are a bunch of these on the LOH. \r\n```\r\n0:013> !gcroot 000002881177c340\r\nThread 66f0:\r\n    000000e1561fdf80 00007ff861a87cc5 Microsoft.Build.Execution.BuildSubmission.Execute()\r\n        rsi: \r\n            ->  0000028800066968 Microsoft.Build.Execution.BuildSubmission\r\n            ->  0000028800059258 Microsoft.Build.Execution.BuildManager\r\n            ->  000002880005f9f8 Microsoft.Build.BackEnd.ConfigCache\r\n            ->  0000028800060348 System.Collections.Generic.Dictionary`2[[System.Int32, System.Private.CoreLib],[Microsoft.Build.BackEnd.BuildRequestConfiguration, Microsoft.Build]]\r\n            ->  000002887d1ac580 System.Collections.Generic.Dictionary`2+Entry[[System.Int32, System.Private.CoreLib],[Microsoft.Build.BackEnd.BuildRequestConfiguration, Microsoft.Build]][]\r\n            ->  00000288000685f8 Microsoft.Build.BackEnd.BuildRequestConfiguration\r\n            ->  0000028800076dd0 Microsoft.Build.Execution.ProjectInstance\r\n            ->  0000028800052c68 Microsoft.Build.Evaluation.Toolset\r\n            ->  0000028800213e68 Microsoft.Build.Execution.TaskRegistry\r\n            ->  000002880023ac70 System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib],[Microsoft.Build.Collections.HybridDictionary`2[[Microsoft.Build.Execution.TaskRegistry+RegisteredTaskIdentity, Microsoft.Build],[Microsoft.Build.Execution.TaskRegistry+RegisteredTaskRecord, Microsoft.Build]], Microsoft.Build]]\r\n            ->  00000288009cf710 System.Collections.Generic.Dictionary`2+Entry[[System.String, System.Private.CoreLib],[Microsoft.Build.Collections.HybridDictionary`2[[Microsoft.Build.Execution.TaskRegistry+RegisteredTaskIdentity, Microsoft.Build],[Microsoft.Build.Execution.TaskRegistry+RegisteredTaskRecord, Microsoft.Build]], Microsoft.Build]][]\r\n            ->  000002880023acc0 Microsoft.Build.Collections.HybridDictionary`2[[Microsoft.Build.Execution.TaskRegistry+RegisteredTaskIdentity, Microsoft.Build],[Microsoft.Build.Execution.TaskRegistry+RegisteredTaskRecord, Microsoft.Build]]\r\n            ->  000002880023ace0 System.Collections.Generic.KeyValuePair`2[[Microsoft.Build.Execution.TaskRegistry+RegisteredTaskIdentity, Microsoft.Build],[Microsoft.Build.Execution.TaskRegistry+RegisteredTaskRecord, Microsoft.Build]]\r\n            ->  0000028800235510 Microsoft.Build.Execution.TaskRegistry+RegisteredTaskRecord\r\n            ->  000002880023ab68 Microsoft.Build.Execution.TaskFactoryWrapper\r\n            ->  000002880023a188 Microsoft.Build.BackEnd.AssemblyTaskFactory\r\n            ->  00000288f8fc18f0 Microsoft.Build.BackEnd.Logging.TaskLoggingContext\r\n            ->  00000288000604f8 Microsoft.Build.BackEnd.Logging.LoggingService\r\n            ->  0000028800065328 System.Threading.Tasks.Dataflow.BufferBlock`1[[System.Object, System.Private.CoreLib]]\r\n            ->  0000028800065a40 System.Threading.Tasks.Dataflow.Internal.SourceCore`1[[System.Object, System.Private.CoreLib]]\r\n            ->  0000028800065c10 System.Threading.Tasks.SingleProducerSingleConsumerQueue`1[[System.Object, System.Private.CoreLib]]\r\n            ->  000002887b750e48 System.Threading.Tasks.SingleProducerSingleConsumerQueue`1+Segment[[System.Object, System.Private.CoreLib]]\r\n            ->  0000028887a71240 System.Threading.Tasks.SingleProducerSingleConsumerQueue`1+Segment[[System.Object, System.Private.CoreLib]]\r\n            ->  000002881270a370 System.Object[]\r\n            ->  00000288fba1d490 Microsoft.Build.Framework.BuildMessageEventArgs\r\n            ->  000002881177c340 System.String\r\n```\r\n",
        "createdAt": "2017-06-04T21:10:42Z",
        "updatedAt": "2017-06-04T21:10:42Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "There are multiple layers of perf issues here. This pattern of giant item-sets being passed around to represent nuget data probably has to go at some point. But I think the high-order bit is to investigate why these huge strings appear to be *leaking*, which is why I've moved this to msbuild for the next look.",
        "createdAt": "2017-06-04T21:14:54Z",
        "updatedAt": "2017-06-04T21:17:55Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "Thanks so much for your analysis @nguerrera. This is because we enable MSBUILDLOGTASKINPUTS. Maybe we should add a switch to disable it. Definitely a binary logger problem :(",
        "createdAt": "2017-06-04T21:42:09Z",
        "updatedAt": "2017-06-04T21:42:09Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "It's super useful to see task inputs in the viewer. Can you stream them to the log instead of making a big string for each of them?",
        "createdAt": "2017-06-04T23:01:42Z",
        "updatedAt": "2017-06-04T23:01:42Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "Also, is this just the inefficiency of LOH GC or is msbuild holding on to these strings unnecessarily?",
        "createdAt": "2017-06-04T23:03:59Z",
        "updatedAt": "2017-06-04T23:03:59Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "A few questions that will help us investigate:\r\nIt seems that the build script is a series of commands, to restore, build and then run unit-tests.\r\n\r\nCan we isolate a command line that calls MSBuild and exhibits this behavior? How do I turn unit-tests off? Are we already seeing the memory growth during NuGet restore? Before the actual build starts?\r\n\r\nIs this all reusing a single builder for restore and then build? When and where is msbuild.rsp being regenerated? Thanks!",
        "createdAt": "2017-06-05T19:39:26Z",
        "updatedAt": "2017-06-05T19:39:26Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "This appears to be the contents of `msbuild.rsp` during the command with the radical memory growth.\r\n```\r\n/nologo\r\n/m\r\n/p:RepositoryRoot=\"D:\\k\\Mvc/\"\r\n/bl:\"D:\\k\\Mvc/artifacts/msbuild/msbuild.binlog\"\r\n/clp:Summary\r\n\"D:\\k\\Mvc\\.build/KoreBuild.proj\"\r\n\"\"\r\n```",
        "createdAt": "2017-06-05T19:44:32Z",
        "updatedAt": "2017-06-05T19:44:32Z",
        "author": {
          "login": "rynowak"
        }
      },
      {
        "body": "That's what I'm seeing too. If I wanted to turn off the /bl switch in there, how do I do that?",
        "createdAt": "2017-06-05T19:51:08Z",
        "updatedAt": "2017-06-05T19:51:08Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "Seeing weirdness in this area:\r\nhttp://source.dot.net/#Microsoft.Build/BackEnd/Components/Logging/LoggingService.cs,1066\r\n\r\nLooks like the _loggingQueue is holding onto a GB of stuff:\r\nhttp://source.dot.net/#Microsoft.Build/BackEnd/Components/Logging/LoggingService.cs,c2da823e79bf8922,references\r\n\r\n/cc @rainersigwald @AndyGerlicher ",
        "createdAt": "2017-06-05T19:52:29Z",
        "updatedAt": "2017-06-05T19:52:29Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "You could turn off `/bl` by editing `.build/KoreBuild.ps1` - that's where the `.rsp` is generated",
        "createdAt": "2017-06-05T19:53:08Z",
        "updatedAt": "2017-06-05T19:53:08Z",
        "author": {
          "login": "rynowak"
        }
      },
      {
        "body": "The event args instances are held by the SingleProducerSingleConsumerQueue<object> which is in the `_loggingQueue`. Now to determine why is the queue so long - does it take too long for the logger to drain items?\r\n\r\n![image](https://cloud.githubusercontent.com/assets/679326/26803778/5383e318-49fa-11e7-8fa1-977b74004313.png)\r\n",
        "createdAt": "2017-06-05T21:21:57Z",
        "updatedAt": "2017-06-05T21:21:57Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "I'm seeing even worse memory problems if I use a diagnostic-level text log (5 GB commit size). So it's nothing specific to the binary logger.",
        "createdAt": "2017-06-05T21:37:24Z",
        "updatedAt": "2017-06-05T21:38:19Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "OK I have a change to the BinaryLogger that keeps memory consumption under 800 MB by processing the incoming events as quickly as possible and having a custom queue on the logger side. \r\n\r\nHow do I turn off the tests? Build.cmd doesn't accept any parameters?",
        "createdAt": "2017-06-05T22:07:30Z",
        "updatedAt": "2017-06-05T22:07:30Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "@rynowak @nguerrera can you guys do me a favor?\r\n\r\n 1. Download https://github.com/KirillOsenkov/MSBuildStructuredLog/releases/download/v1.1.68/StructuredLogger.dll\r\n 2. Change `C:\\Mvc\\.build\\KoreBuild.ps1` line 130 to: `/logger:BinaryLogger,C:\\Temp\\StructuredLogger.dll;C:\\temp\\mvc.binlog`\r\n\r\nand see what kind of difference this makes for you. Note the build duration and peak working set/commit memory.",
        "createdAt": "2017-06-05T22:45:46Z",
        "updatedAt": "2017-06-05T22:46:01Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "So this is super weird. Even if you use the same binary logger that's in the .dll, it still is different for me:\r\n`/logger:BinaryLogger,C:\\Users\\kirillo\\.dotnet\\x64\\sdk\\2.0.0-preview2-006341\\Microsoft.Build.dll;C:\\temp\\mvcbuiltin.binlog`\r\n\r\nMaybe I'm just not cleaning in between test runs?",
        "createdAt": "2017-06-05T22:52:27Z",
        "updatedAt": "2017-06-05T22:52:27Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "I found that I had to delete the artifacts directory to get a fair test.",
        "createdAt": "2017-06-05T23:09:29Z",
        "updatedAt": "2017-06-05T23:09:29Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "OK I now know why passing\r\n`/logger:BinaryLogger,C:\\Users\\kirillo\\.dotnet\\x64\\sdk\\2.0.0-preview2-006341\\Microsoft.Build.dll;C:\\temp\\mvcbuiltin.binlog`\r\nresults in ~800 MB but passing\r\n`/bl:C:\\temp\\mvcbl.log` results in 5 GB.\r\n\r\nHere's the problem: when passing /bl we set the overall verbosity to Diagnostic here:\r\nhttp://source.dot.net/#MSBuild/XMake.cs,2734\r\n\r\nAnd here if the verbosity is Diagnostic, we enable logTaskInputs:\r\nhttp://source.dot.net/#MSBuild/XMake.cs,959\r\n\r\nThat's why using the file logger with diag verbosity results in 5GB usage as well.\r\n\r\nWithout logging task inputs, the compressed binary log is ~25 MB (557 MB uncompressed). With logging task inputs, the compressed binary log is ~160 MB (3.5 GB uncompressed).",
        "createdAt": "2017-06-05T23:18:56Z",
        "updatedAt": "2017-06-05T23:18:56Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "> How do I turn off the tests? Build.cmd doesn't accept any parameters?\r\n\r\nRun `build.cmd /t:Package` That will stop at producing package stage and will not run tests.\r\nIs there a work-around apart from disabling BinaryLogger?\r\nThis caused #2164 to happen. i.e. If system does not have high amount of RAM available, it crashes during compilation. (specifically Ubuntu)",
        "createdAt": "2017-06-07T21:58:37Z",
        "updatedAt": "2017-06-07T22:46:58Z",
        "author": {
          "login": "smitpatel"
        }
      },
      {
        "body": "Yes the workaround is to change this line:\r\nhttps://github.com/aspnet/KoreBuild/blob/dev/build/KoreBuild.ps1#L130\r\n\r\nfrom:\r\n```\r\n/bl:\"$msbuildLogFilePath\"\r\n```\r\n\r\nto:\r\n```\r\n/logger:BinaryLogger,C:\\Users\\kirillo\\.dotnet\\x64\\sdk\\2.0.0-preview2-006341\\Microsoft.Build.dll;\"$msbuildLogFilePath\"\r\n```\r\n\r\nYou'll need to replace the path to Microsoft.Build.dll on the build machine, I don't know how to do that from Powershell (what variable is available to find the location of MSBuild being used for the build?)",
        "createdAt": "2017-06-07T22:57:15Z",
        "updatedAt": "2017-06-07T22:57:15Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "#2164 does not reproduce when logger is removed so root cause is logging only for those failure. \r\nUsing work-around provided by @KirillOsenkov above is good to use and gets successful build.",
        "createdAt": "2017-06-08T16:59:59Z",
        "updatedAt": "2017-06-08T16:59:59Z",
        "author": {
          "login": "smitpatel"
        }
      },
      {
        "body": "To fix memory consumption here we need to fix the following issues:\r\n\r\n * https://github.com/dotnet/msbuild/issues/6007\r\n * https://github.com/KirillOsenkov/MSBuildStructuredLog/issues/231\r\n * https://github.com/dotnet/msbuild/issues/2200\r\n * https://github.com/dotnet/msbuild/issues/5316",
        "createdAt": "2021-01-12T00:41:26Z",
        "updatedAt": "2021-01-12T00:41:26Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "I think the memory consumption is fixed by #6155.",
        "createdAt": "2021-03-04T03:16:13Z",
        "updatedAt": "2021-03-04T03:16:13Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "Awesome! Saw some tweets go by and decided to check if my bug was still open and if I could finally close it. \ud83d\ude00",
        "createdAt": "2021-05-21T15:42:59Z",
        "updatedAt": "2021-05-21T15:42:59Z",
        "author": {
          "login": "nguerrera"
        }
      }
    ]
  }
}