{
  "number": 5058,
  "title": "Is There Any Documentation That Describes How Parallel Builds Work?",
  "body": "We are trying to tune our build servers to speed up build times and we are looking for documentation on how Parallel Builds actually work in MSBuild; with special focus to C#.\r\n\r\nThere is not a wiki page, and I am not smart enough to chase this in code. If I could be given a pointer on where to start I can dig from there. There is good discussion on #74 which gives a little background (but focuses more on C++), are there other places that do a more in-depth dive?\r\n\r\nHistorically we have naively assumed that looking at our dependency graph in a breadth-first manner would give us a good gauge for optimal core/worker allocation. However we do not believe that this accurately depicts what MSBuild does. Rather it appears that MSBuild, when given a solution file, will attempt to crawl the dependency tree in a depth-first manner. It is unclear if this is by design or just an artifact of the current implementation.\r\n\r\nWhat we are trying to find is a way to determine a rough estimate (simply by evaluating the dependency tree, without building) on the value of adding N+1 cores to an existing build instance. Is that even possible?",
  "state": "OPEN",
  "createdAt": "2020-01-15T17:29:25Z",
  "updatedAt": "2024-02-21T16:30:03Z",
  "closedAt": null,
  "author": {
    "login": "aolszowka"
  },
  "labels": [
    "Area: Documentation",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Backlog"
  },
  "comments": {
    "nodes": [
      {
        "body": "Based on https://github.com/microsoft/msbuild/pull/4964#discussion_r358955339\r\n\r\n> MSBuild /m /graph will build bottom up, in parallel, allowing users to squeeze some extra parallelism juice.\r\n\r\nHow was this derived? Is there documentation on this? \r\n\r\nThe only thing I can find is the documentation here: https://docs.microsoft.com/en-us/visualstudio/msbuild/msbuild-command-line-reference?view=vs-2019#arguments\r\n\r\n> Causes MSBuild to construct and build a project graph. Constructing a graph involves identifying project references to form dependencies. Building that graph involves attempting to build project references prior to the projects that reference them, differing from traditional MSBuild scheduling.\r\n\r\nInterestingly enough this causes our third party libraries which extend MSBuild to fail. I'll be working with our vendor and report back with our results.\r\n\r\nFWIW it does appear to increase utilization, at least for the C# portions of our build.\r\n\r\n**EDIT Finding More documentation here: https://github.com/microsoft/msbuild/blob/master/documentation/specs/static-graph.md ",
        "createdAt": "2020-03-04T21:33:28Z",
        "updatedAt": "2020-03-04T22:35:49Z",
        "author": {
          "login": "aolszowka"
        }
      }
    ]
  }
}