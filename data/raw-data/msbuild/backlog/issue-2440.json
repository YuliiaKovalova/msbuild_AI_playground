{
  "number": 2440,
  "title": "5% of a build is due ResolveAssemblyReferences's cache checking",
  "body": "See: https://github.com/dotnet/sdk/issues/1496.\r\n\r\nThis is probably going to be all RAR, how do we make this play nicely with incremental?",
  "state": "CLOSED",
  "createdAt": "2017-08-16T08:44:29Z",
  "updatedAt": "2024-02-21T17:17:12Z",
  "closedAt": "2017-10-12T21:25:20Z",
  "author": {
    "login": "davkean"
  },
  "labels": [
    "Area: Performance",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Here's where most of the time is spent:\r\n\r\n![image](https://user-images.githubusercontent.com/1103906/29359688-0187e738-82c3-11e7-8db8-80c739d1b491.png)\r\n\r\nWhy are we computing closure? ",
        "createdAt": "2017-08-16T10:39:46Z",
        "updatedAt": "2017-08-16T10:39:57Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "I assumed computing the closure only occurred when FindDependencies is on, turns out we always compute the closure. The shear number of assemblies coming in, is killing us here.",
        "createdAt": "2017-08-16T10:50:43Z",
        "updatedAt": "2017-08-16T10:51:35Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "I can see that 5% of our build is just doing a QueryAttributes in GetFileState: \r\n\r\n![image](https://user-images.githubusercontent.com/1103906/29360437-39905c34-82c6-11e7-8bda-c22aeb259a63.png)\r\n\r\nIs this a broken cache?\r\n",
        "createdAt": "2017-08-16T11:02:45Z",
        "updatedAt": "2017-08-16T11:02:45Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "Okay, I can see very quickly that we're doing a GetLastWriteFileUtcTime on a given file, 10s and 10s of times. Why, I don't know yet.\r\n\r\n",
        "createdAt": "2017-08-16T11:51:12Z",
        "updatedAt": "2017-08-16T11:51:12Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "First stack:\r\n```\r\n>\tMicrosoft.Build.dll!Microsoft.Build.Shared.NativeMethodsShared.GetLastWriteFileUtcTime(string fullPath) Line 867\tC#\tSymbols loaded.\r\n \tMicrosoft.Build.dll!Microsoft.Build.BackEnd.TargetUpToDateChecker.IsAnyOutOfDate<string>(out Microsoft.Build.BackEnd.DependencyAnalysisLogDetail dependencyAnalysisDetailEntry, string projectDirectory, System.Collections.Generic.IList<string> inputs, System.Collections.Generic.IList<string> outputs) Line 1011\tC#\tSymbols loaded.\r\n \tMicrosoft.Build.dll!Microsoft.Build.BackEnd.TargetUpToDateChecker.PerformDependencyAnalysisIfDiscreteOutputs(System.Collections.Generic.Dictionary<string, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IList<Microsoft.Build.Execution.ProjectItemInstance>>> itemVectorsInTargetInputs, System.Collections.Generic.Dictionary<string, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IList<Microsoft.Build.Execution.ProjectItemInstance>>> itemVectorTransformsInTargetInputs, System.Collections.Generic.Dictionary<string, string> discreteItemsInTargetInputs, System.Collections.Generic.List<string> targetOutputItemSpecs) Line 792\tC#\tSymbols loaded.\r\n \tMicrosoft.Build.dll!Microsoft.Build.BackEnd.TargetUpToDateChecker.PerformDependencyAnalysis(Microsoft.Build.BackEnd.ItemBucket bucket, out Microsoft.Build.Collections.ItemDictionary<Microsoft.Build.Execution.ProjectItemInstance> changedTargetInputs, out Microsoft.Build.Collections.ItemDictionary<Microsoft.Build.Execution.ProjectItemInstance> upToDateTargetInputs) Line 242\tC#\tSymbols loaded.\r\n \tMicrosoft.Build.dll!Microsoft.Build.BackEnd.TargetEntry.ExecuteTarget(Microsoft.Build.BackEnd.ITaskBuilder taskBuilder, Microsoft.Build.BackEnd.BuildRequestEntry requestEntry, Microsoft.Build.BackEnd.Logging.ProjectLoggingContext projectLoggingContext, System.Threading.CancellationToken cancellationToken) Line 448\tC#\tSymbols loaded.\r\n \tMicrosoft.Build.dll!Microsoft.Build.BackEnd.TargetBuilder.ProcessTargetStack(Microsoft.Build.BackEnd.ITaskBuilder taskBuilder) Line 465\tC#\tSymbols loaded.\r\n\r\n```",
        "createdAt": "2017-08-16T11:52:03Z",
        "updatedAt": "2017-08-16T11:52:03Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "Second stack:\r\n\r\n```\r\n>\tMicrosoft.Build.Tasks.Core.dll!Microsoft.Build.Shared.NativeMethodsShared.GetLastWriteFileUtcTime(string fullPath) Line 867\tC#\tSymbols loaded.\r\n \tMicrosoft.Build.Tasks.Core.dll!Microsoft.Build.Tasks.SystemState.GetFileState(string path) Line 376\tC#\tSymbols loaded.\r\n \tMicrosoft.Build.Tasks.Core.dll!Microsoft.Build.Tasks.SystemState.GetRuntimeVersion(string path) Line 453\tC#\tSymbols loaded.\r\n \tMicrosoft.Build.Tasks.Core.dll!Microsoft.Build.Tasks.AssemblyInformation.IsWinMDFile(string fullPath, Microsoft.Build.Tasks.GetAssemblyRuntimeVersion getAssemblyRuntimeVersion, Microsoft.Build.Shared.FileExists fileExists, out string imageRuntimeVersion, out bool isManagedWinmd) Line 251\tC#\tSymbols loaded.\r\n \tMicrosoft.Build.Tasks.Core.dll!Microsoft.Build.Tasks.Reference.FullPath.set(string value) Line 661\tC#\tSymbols loaded.\r\n \tMicrosoft.Build.Tasks.Core.dll!Microsoft.Build.Tasks.ReferenceTable.NameAssemblyFileReference(Microsoft.Build.Tasks.Reference reference, string assemblyFileName) Line 418\tC#\tSymbols loaded.\r\n \tMicrosoft.Build.Tasks.Core.dll!Microsoft.Build.Tasks.ReferenceTable.SetPrimaryFileItem(Microsoft.Build.Framework.ITaskItem referenceAssemblyFile) Line 846\tC#\tSymbols loaded.\r\n \tMicrosoft.Build.Tasks.Core.dll!Microsoft.Build.Tasks.ReferenceTable.SetPrimaryItems(Microsoft.Build.Framework.ITaskItem[] referenceAssemblyFiles, Microsoft.Build.Framework.ITaskItem[] referenceAssemblyNames, System.Collections.ArrayList exceptions) Line 490\tC#\tSymbols loaded.\r\n \tMicrosoft.Build.Tasks.Core.dll!Microsoft.Build.Tasks.ReferenceTable.ComputeClosure(Microsoft.Build.Tasks.DependentAssembly[] remappedAssembliesValue, Microsoft.Build.Framework.ITaskItem[] referenceAssemblyFiles, Microsoft.Build.Framework.ITaskItem[] referenceAssemblyNames, System.Collections.ArrayList exceptions) Line 1634\tC#\tSymbols loaded.\r\n \tMicrosoft.Build.Tasks.Core.dll!Microsoft.Build.Tasks.ResolveAssemblyReference.Execute(Microsoft.Build.Shared.FileExists fileExists, Microsoft.Build.Shared.DirectoryExists directoryExists, Microsoft.Build.Tasks.GetDirectories getDirectories, Microsoft.Build.Tasks.GetAssemblyName getAssemblyName, Microsoft.Build.Tasks.GetAssemblyMetadata getAssemblyMetadata, Microsoft.Build.Shared.GetRegistrySubKeyNames getRegistrySubKeyNames, Microsoft.Build.Shared.GetRegistrySubKeyDefaultValue getRegistrySubKeyDefaultValue, Microsoft.Build.Tasks.GetLastWriteTime getLastWriteTime, Microsoft.Build.Tasks.GetAssemblyRuntimeVersion getRuntimeVersion, Microsoft.Build.Shared.OpenBaseKey openBaseKey, Microsoft.Build.Tasks.GetAssemblyPathInGac getAssemblyPathInGac, Microsoft.Build.Tasks.IsWinMDFile isWinMDFile, Microsoft.Build.Tasks.ReadMachineTypeFromPEHeader readMachineTypeFromPEHeader) Line 2194\tC#\tSymbols loaded.\r\n \tMicrosoft.Build.Tasks.Core.dll!Microsoft.Build.Tasks.ResolveAssemblyReference.Execute() Line 2912\tC#\tSymbols loaded.\r\n \tMicrosoft.Build.dll!Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute() Line 631\tC#\tSymbols loaded.\r\n \tMicrosoft.Build.dll!Microsoft.Build.BackEnd.TaskBuilder.ExecuteInstantiatedTask(Microsoft.Build.BackEnd.ITaskExecutionHost taskExecutionHost, Microsoft.Build.BackEnd.Logging.TaskLoggingContext taskLoggingContext, Microsoft.Build.BackEnd.TaskHost taskHost, Microsoft.Build.BackEnd.ItemBucket bucket, Microsoft.Build.BackEnd.TaskExecutionMode howToExecuteTask) Line 787\tC#\tSymbols loaded.\r\n \tMicrosoft.Build.dll!Microsoft.Build.BackEnd.TaskBuilder.InitializeAndExecuteTask(Microsoft.Build.BackEnd.Logging.TaskLoggingContext taskLoggingContext, Microsoft.Build.BackEnd.ItemBucket bucket, System.Collections.Generic.IDictionary<string, string> taskIdentityParameters, Microsoft.Build.BackEnd.TaskHost taskHost, Microsoft.Build.BackEnd.TaskExecutionMode howToExecuteTask) Line 659\tC#\tSymbols loaded.\r\n \tMicrosoft.Build.dll!Microsoft.Build.BackEnd.TaskBuilder.ExecuteBucket(Microsoft.Build.BackEnd.TaskHost taskHost, Microsoft.Build.BackEnd.ItemBucket bucket, Microsoft.Build.BackEnd.TaskExecutionMode howToExecuteTask, System.Collections.Generic.Dictionary<string, string> lookupHash) Line 434\tC#\tSymbols loaded.\r\n \tMicrosoft.Build.dll!Microsoft.Build.BackEnd.TaskBuilder.ExecuteTask(Microsoft.Build.BackEnd.TaskExecutionMode mode, Microsoft.Build.BackEnd.Lookup lookup) Line 331\tC#\tSymbols loaded.\r\n \tMicrosoft.Build.dll!Microsoft.Build.BackEnd.TaskBuilder.ExecuteTask(Microsoft.Build.BackEnd.Logging.TargetLoggingContext loggingContext, Microsoft.Build.BackEnd.BuildRequestEntry requestEntry, Microsoft.Build.BackEnd.ITargetBuilderCallback targetBuilderCallback, Microsoft.Build.Execution.ProjectTargetInstanceChild taskInstance, Microsoft.Build.BackEnd.TaskExecutionMode mode, Microsoft.Build.BackEnd.Lookup inferLookup, Microsoft.Build.BackEnd.Lookup executeLookup, System.Threading.CancellationToken cancellationToken) Line 180\tC#\tSymbols loaded.\r\n \tMicrosoft.Build.dll!Microsoft.Build.BackEnd.TargetEntry.ProcessBucket(Microsoft.Build.BackEnd.ITaskBuilder taskBuilder, Microsoft.Build.BackEnd.Logging.TargetLoggingContext targetLoggingContext, Microsoft.Build.BackEnd.TaskExecutionMode mode, Microsoft.Build.BackEnd.Lookup lookupForInference, Microsoft.Build.BackEnd.Lookup lookupForExecution) Line 818\tC#\tSymbols loaded.\r\n \tMicrosoft.Build.dll!Microsoft.Build.BackEnd.TargetEntry.ExecuteTarget(Microsoft.Build.BackEnd.ITaskBuilder taskBuilder, Microsoft.Build.BackEnd.BuildRequestEntry requestEntry, Microsoft.Build.BackEnd.Logging.ProjectLoggingContext projectLoggingContext, System.Threading.CancellationToken cancellationToken) Line 483\tC#\tSymbols loaded.\r\n \tMicrosoft.Build.dll!Microsoft.Build.BackEnd.TargetBuilder.ProcessTargetStack(Microsoft.Build.BackEnd.ITaskBuilder taskBuilder) Line 465\tC#\tSymbols loaded.\r\n\r\n```\r\n\r\nthird stack:\r\n\r\n```\r\n>\tMicrosoft.Build.Tasks.Core.dll!Microsoft.Build.Shared.NativeMethodsShared.GetLastWriteFileUtcTime(string fullPath) Line 867\tC#\tSymbols loaded.\r\n \tMicrosoft.Build.Tasks.Core.dll!Microsoft.Build.Tasks.SystemState.GetFileState(string path) Line 376\tC#\tSymbols loaded.\r\n \tMicrosoft.Build.Tasks.Core.dll!Microsoft.Build.Tasks.SystemState.GetAssemblyName(string path) Line 424\tC#\tSymbols loaded.\r\n \tMicrosoft.Build.Tasks.Core.dll!Microsoft.Build.Tasks.ReferenceTable.SetPrimaryAssemblyReferenceItem(Microsoft.Build.Framework.ITaskItem referenceAssemblyName) Line 624\tC#\tSymbols loaded.\r\n \tMicrosoft.Build.Tasks.Core.dll!Microsoft.Build.Tasks.ReferenceTable.SetPrimaryItems(Microsoft.Build.Framework.ITaskItem[] referenceAssemblyFiles, Microsoft.Build.Framework.ITaskItem[] referenceAssemblyNames, System.Collections.ArrayList exceptions) Line 504\tC#\tSymbols loaded.\r\n \tMicrosoft.Build.Tasks.Core.dll!Microsoft.Build.Tasks.ReferenceTable.ComputeClosure(Microsoft.Build.Tasks.DependentAssembly[] remappedAssembliesValue, Microsoft.Build.Framework.ITaskItem[] referenceAssemblyFiles, Microsoft.Build.Framework.ITaskItem[] referenceAssemblyNames, System.Collections.ArrayList exceptions) Line 1634\tC#\tSymbols loaded.\r\n \tMicrosoft.Build.Tasks.Core.dll!Microsoft.Build.Tasks.ResolveAssemblyReference.Execute(Microsoft.Build.Shared.FileExists fileExists, Microsoft.Build.Shared.DirectoryExists directoryExists, Microsoft.Build.Tasks.GetDirectories getDirectories, Microsoft.Build.Tasks.GetAssemblyName getAssemblyName, Microsoft.Build.Tasks.GetAssemblyMetadata getAssemblyMetadata, Microsoft.Build.Shared.GetRegistrySubKeyNames getRegistrySubKeyNames, Microsoft.Build.Shared.GetRegistrySubKeyDefaultValue getRegistrySubKeyDefaultValue, Microsoft.Build.Tasks.GetLastWriteTime getLastWriteTime, Microsoft.Build.Tasks.GetAssemblyRuntimeVersion getRuntimeVersion, Microsoft.Build.Shared.OpenBaseKey openBaseKey, Microsoft.Build.Tasks.GetAssemblyPathInGac getAssemblyPathInGac, Microsoft.Build.Tasks.IsWinMDFile isWinMDFile, Microsoft.Build.Tasks.ReadMachineTypeFromPEHeader readMachineTypeFromPEHeader) Line 2194\tC#\tSymbols loaded.\r\n \tMicrosoft.Build.Tasks.Core.dll!Microsoft.Build.Tasks.ResolveAssemblyReference.Execute() Line 2912\tC#\tSymbols loaded.\r\n \tMicrosoft.Build.dll!Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute() Line 631\tC#\tSymbols loaded.\r\n \tMicrosoft.Build.dll!Microsoft.Build.BackEnd.TaskBuilder.ExecuteInstantiatedTask(Microsoft.Build.BackEnd.ITaskExecutionHost taskExecutionHost, Microsoft.Build.BackEnd.Logging.TaskLoggingContext taskLoggingContext, Microsoft.Build.BackEnd.TaskHost taskHost, Microsoft.Build.BackEnd.ItemBucket bucket, Microsoft.Build.BackEnd.TaskExecutionMode howToExecuteTask) Line 787\tC#\tSymbols loaded.\r\n \tMicrosoft.Build.dll!Microsoft.Build.BackEnd.TaskBuilder.InitializeAndExecuteTask(Microsoft.Build.BackEnd.Logging.TaskLoggingContext taskLoggingContext, Microsoft.Build.BackEnd.ItemBucket bucket, System.Collections.Generic.IDictionary<string, string> taskIdentityParameters, Microsoft.Build.BackEnd.TaskHost taskHost, Microsoft.Build.BackEnd.TaskExecutionMode howToExecuteTask) Line 659\tC#\tSymbols loaded.\r\n \tMicrosoft.Build.dll!Microsoft.Build.BackEnd.TaskBuilder.ExecuteBucket(Microsoft.Build.BackEnd.TaskHost taskHost, Microsoft.Build.BackEnd.ItemBucket bucket, Microsoft.Build.BackEnd.TaskExecutionMode howToExecuteTask, System.Collections.Generic.Dictionary<string, string> lookupHash) Line 434\tC#\tSymbols loaded.\r\n \tMicrosoft.Build.dll!Microsoft.Build.BackEnd.TaskBuilder.ExecuteTask(Microsoft.Build.BackEnd.TaskExecutionMode mode, Microsoft.Build.BackEnd.Lookup lookup) Line 331\tC#\tSymbols loaded.\r\n \tMicrosoft.Build.dll!Microsoft.Build.BackEnd.TaskBuilder.ExecuteTask(Microsoft.Build.BackEnd.Logging.TargetLoggingContext loggingContext, Microsoft.Build.BackEnd.BuildRequestEntry requestEntry, Microsoft.Build.BackEnd.ITargetBuilderCallback targetBuilderCallback, Microsoft.Build.Execution.ProjectTargetInstanceChild taskInstance, Microsoft.Build.BackEnd.TaskExecutionMode mode, Microsoft.Build.BackEnd.Lookup inferLookup, Microsoft.Build.BackEnd.Lookup executeLookup, System.Threading.CancellationToken cancellationToken) Line 180\tC#\tSymbols loaded.\r\n \tMicrosoft.Build.dll!Microsoft.Build.BackEnd.TargetEntry.ProcessBucket(Microsoft.Build.BackEnd.ITaskBuilder taskBuilder, Microsoft.Build.BackEnd.Logging.TargetLoggingContext targetLoggingContext, Microsoft.Build.BackEnd.TaskExecutionMode mode, Microsoft.Build.BackEnd.Lookup lookupForInference, Microsoft.Build.BackEnd.Lookup lookupForExecution) Line 818\tC#\tSymbols loaded.\r\n \tMicrosoft.Build.dll!Microsoft.Build.BackEnd.TargetEntry.ExecuteTarget(Microsoft.Build.BackEnd.ITaskBuilder taskBuilder, Microsoft.Build.BackEnd.BuildRequestEntry requestEntry, Microsoft.Build.BackEnd.Logging.ProjectLoggingContext projectLoggingContext, System.Threading.CancellationToken cancellationToken) Line 483\tC#\tSymbols loaded.\r\n \tMicrosoft.Build.dll!Microsoft.Build.BackEnd.TargetBuilder.ProcessTargetStack(Microsoft.Build.BackEnd.ITaskBuilder taskBuilder) Line 465\tC#\tSymbols loaded.\r\n\r\n```",
        "createdAt": "2017-08-16T11:54:19Z",
        "updatedAt": "2017-08-16T12:08:22Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "Okay I can see why this is happening; we have a cache in SystemState.GetFileState - but we always check the modified date time to see if we throw the cache away, even if we only checked 10ms ago. That is the cost. Our invalidation code is costing 4.9% of a build.",
        "createdAt": "2017-08-16T11:58:45Z",
        "updatedAt": "2017-08-16T11:58:45Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "I'm going to spitball some quick ideas since RAR is by far the biggest time sink in my build right now.\r\n\r\nI need to set up a workbench to test out ideas for myself but at first glance I see a few options to soften the impact on the file system.\r\n\r\n**Option 1 : Throttle GetFileState cache invalidation to n per second.**\r\n\r\nThis option is easy to implement and would cut the IO traffic significantly but has obvious drawbacks. \r\n\r\n**Option 2 : Use FileSystemWatcher(s)**\r\n\r\nThe idea is to use a watcher to monitor each file in the cache to see if it changes and then push those updates into the backend of the cache. \r\n\r\nAdvantages :\r\n- '*In theory*' this keeps the cache evergreen and eliminates the time stamp check. \r\n\r\nDrawbacks :\r\n- The FSW isn't bulletproof and can drop updates, but I believe that with filtering and eager asynchronous event handling this isn't much of an issue (I've used a dataflow ActionBlock to implement this nicely)\r\n\r\n- Dubious reliability on non-local disks (e.g. file shares, mapped drives...).\r\n\r\n- Scalability. I have no idea how many files are in this cache, if it is hundreds or thousands then we must combine watchers and filter the aggregate data. This gets messy and increases the chance of missing and update.\r\n\r\n- XPlat reliability is an unknown. It might be just fine, but I don't have insight into implementation specifics on non-windows platforms.\r\n\r\n**Option 3 : Lock files active in the cache**\r\n\r\nMight be an unacceptable change, but if the state of files involved in the build is static then the cache will always be up to date eliminating the need for the lock. If the build is expected to modify some of the files in the cache, then perhaps inheritable files locks are a solution.",
        "createdAt": "2017-09-06T19:51:34Z",
        "updatedAt": "2017-09-06T19:51:34Z",
        "author": {
          "login": "AlgorithmsAreCool"
        }
      },
      {
        "body": "Sounds good, make note that the build does produce some of the assemblies in the cache - think project-to-project references.",
        "createdAt": "2017-09-06T22:41:45Z",
        "updatedAt": "2017-09-06T22:41:45Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "Before I get started, do you see any issue with locking the cached files? I'm thinking I like option 3 the best at the moment.",
        "createdAt": "2017-09-07T00:28:32Z",
        "updatedAt": "2017-09-07T00:28:32Z",
        "author": {
          "login": "AlgorithmsAreCool"
        }
      },
      {
        "body": "I see no problem if the state does not change over the lifetime of a single RAR call. Over multiple RAR calls, however, will be problematic.",
        "createdAt": "2017-09-07T00:31:35Z",
        "updatedAt": "2017-09-07T00:31:35Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "Changed this bug to be about the cache checking, https://github.com/dotnet/core-setup/issues/3297 is tracking other performance overhead.",
        "createdAt": "2017-10-11T23:09:52Z",
        "updatedAt": "2017-10-11T23:09:52Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "Fixed in: https://github.com/davkean/msbuild/commit/99d4c838624293725bfbfd1ae75405ec1bb99c4a.",
        "createdAt": "2017-10-12T21:25:20Z",
        "updatedAt": "2017-10-12T21:25:20Z",
        "author": {
          "login": "davkean"
        }
      }
    ]
  }
}