{
  "number": 7465,
  "title": "_CleanPackageFiles target fails sporadically when (re)building",
  "body": "<!-- This is a template that helps us provide quicker feedback. Please use any relevant sections and delete anything you don't need. -->\r\n\r\n### Issue Description\r\n<!--\r\n* Please include a clear and concise description of the problem.\r\n-->\r\n\r\nWhen rebuilding our 80+ project solutions we sporadically get the following error on the `_CleanPackageFiles` target:\r\n\r\n`MSB3061 Unable to delete file \"C:\\Projects\\MyProject\\src\\MyProject\\obj\\MyPlatform\\Debug\\MyProject.MyPlatform.3.0.0-debug.nuspec\". Access to the path 'C:\\Projects\\MyProject\\src\\MyProject\\obj\\MyPlatform\\Debug\\MyProject.MyPlatform.3.0.0-debug.nuspec' is denied.`\r\n\r\nThis issue happens for seemingly random projects in our solution.\r\n\r\n### Steps to Reproduce\r\n<!--\r\n* Include as much of the following as possible:\r\n\r\n* A minimal sample project that reproduces the issue.\r\n* Your zipped project.\r\n* IDE / CLI steps to create the project and reproduce the behaviour.\r\n* Your command line invocation\r\n\r\nIf providing steps to reproduce the issue proves difficult, consider attaching a binlog:\r\n[Details on sharing binary logs](https://aka.ms/msbuild/binlog)\r\n[More information on binary logs](https://github.com/dotnet/msbuild/blob/main/documentation/wiki/Binary-Log.md)\r\nNOTE: Binary logs capture environment information. Ensure it does not include any information you don't want to be public before you attach one.\r\nIf you want to share one just with Microsoft, you can [report a problem through Visual Studio](https://developercommunity.visualstudio.com/report) and share it privately with Microsoft.\r\n-->\r\n\r\nExecute the following MSBuild command until the issue presents itself (Build runs with `Configuration` set to `Debug` and `Platform` set to `any cpu` by default):\r\n\r\n`msbuild MySolution.MyPlatform.sln /bl -t:Rebuild -m --restore`\r\n\r\nThe impacted projects have `IsPackable` and `GeneratePackageOnBuild` set to true and `PackageOutputPath` set to `$(RepositoryRootDirectory)nuget\\nupkg\\$(Configuration)\\`. Furthermore, the projects have `TargetFrameworks` set to `net48;netcoreapp3.1;net6.0`.\r\n\r\nThe issue can also be reproduced by opening the solution in Visual Studio and rebuilding the solution. This yields more consistent results.\r\n\r\nAdditional information:\r\n\r\nWe have multiple solutions targeting the same projects but for a different platform so we use a `Directory.Build.props` file that modifies the following MSBuild variables to allow for everything to compile to a separate output folder (`BuildForPlatform` is set per project or in a nested Directory.Build.props file based on requirements and `MySolutionPlatform` is determined by the solution name):\r\n\r\n```\r\n<!-- BEGIN Sets project output paths for platform-specific projects -->\r\n  <PropertyGroup Condition=\"'$(BuildForPlatform)'=='true'\">\r\n    <MSBuildProjectExtensionsPath>obj\\$(MySolutionPlatform)</MSBuildProjectExtensionsPath>\r\n    <BaseIntermediateOutputPath>obj\\$(MySolutionPlatform)\\</BaseIntermediateOutputPath>\r\n    <BaseOutputPath>bin\\$(MySolutionPlatform)</BaseOutputPath>\r\n    <DefaultItemExcludes>$(DefaultItemExcludes);bin/**;obj/**</DefaultItemExcludes>\r\n    <PackageId>$(MSBuildProjectName).$(MySolutionPlatform)</PackageId>\r\n  </PropertyGroup>\r\n  <!-- END -->\r\n```\r\n\r\nWe build our solutions in parallel using the `-m` MSBuild switch or by setting `maximum number of parallel project builds` in Visual Studio.\r\n\r\n### Expected Behavior\r\n<!--\r\n* The expected output or behavior.\r\n-->\r\n\r\nAs happens sometimes, the solution will be rebuilt and all NuGet packages are generated as expected.\r\n\r\n### Actual Behavior\r\n<!--\r\n* The actual output or behavior.\r\n-->\r\n\r\nRebuilding one of the projects fails with the error mentioned above, causing a cascading failure for all projects depending on the project causing the issue. We've verified this behavior using both Visual Studio and the MSBuild command line. The issue happens more often when building using Visual Studio but we've also seen occurrences when using MSBuild, especially when building on our build server. \r\n\r\n### Analysis\r\n<!--\r\n* If you have an idea where the problem might lie, let us know that here.\r\n* Please include any pointers to code, relevant changes, or related issues you know of.\r\n-->\r\n\r\nI generated a `.binlog` file and did some analysis and the issue might be caused by the `_CleanPackageFiles` target running for each target framework during the inner build, which are built in parallel. This seems weird as the `Pack` is only executed once (after all inner builds are completed, which makes sense). I've submitted the binlog as a Visual Studio issue (see: https://developercommunity.visualstudio.com/t/Binlog-for-https:githubcomdotnetmsb/1691529?entry=myfeedback)\r\n\r\n### Versions & Configurations\r\n<!--\r\n* In a Visual Studio developer command prompt, run `msbuild -version` and paste the output here.\r\n* If applicable, include the version of the tool that invokes MSBuild (Visual Studio, dotnet CLI, etc):\r\n\r\n* Post any other relevant configuration settings here.\r\n*   OS, architecture, etc.\r\n-->\r\n\r\nMSBuild version: `17.1.0.7609`\r\nOS: `Windows 10 Enterprise 21H2`\r\n",
  "state": "CLOSED",
  "createdAt": "2022-03-14T12:28:54Z",
  "updatedAt": "2022-03-31T16:32:47Z",
  "closedAt": "2022-03-31T16:32:47Z",
  "author": {
    "login": "wouterroos"
  },
  "labels": [
    "bug",
    "needs-triage"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "MSBuild Team Triage: We believe this is an issue with NuGet. Your inner builds of Copper.Discovery.Interface are all trying to delete the nupkg and nuspec files.\r\n\r\nThe first one deletes the files\r\nThe second one gives the error\r\nThe third one doesn't see the files because they got deleted.\r\n\r\nTo the NuGet team: It sounds like these targets should clean these files in the outer build. That, or setting `TreatErrorsAsWarnings` to true when calling the delete task for this clean up operation.\r\n",
        "createdAt": "2022-03-31T16:32:03Z",
        "updatedAt": "2022-03-31T16:32:03Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "This issue was moved to NuGet/Home#11710",
        "createdAt": "2022-03-31T16:32:46Z",
        "updatedAt": "2022-03-31T16:32:46Z",
        "author": {
          "login": "benvillalobos"
        }
      }
    ]
  }
}