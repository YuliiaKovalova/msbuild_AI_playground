{
  "number": 7131,
  "title": "The property function StableStringHash is relatively weak on some input",
  "body": "Hey,\r\nI'm starting to use the property function `StableStringHash`  `$(MSBuildProjectName)-$([MSBuild]::StableStringHash($(MSBuildProjectFile)).ToString(\"x8\"))` for hashing a project filepath for the purpose that when you want to output to an intermediate folder that is shared (in a different `obj/*` location), you need to have a unique filename for the project folder.\r\n\r\nBut while looking at the generated hashes, I'm seeing a weird pattern in some numbers, where a single character change was not causing enough shuffle of the bits, which indicates that the hash algorithm is weak:\r\n\r\n```\r\nLibChild3_30-5e56f133\r\nLibChild3_31-66f1f133\r\nLibChild3_32-5220f133\r\nLibChild3_33-5abbf133\r\nLibChild3_34-7c62f133\r\nLibChild3_35-84fdf133\r\nLibChild3_36-6f8cf133\r\nLibChild3_4-a48ac640 \r\nLibChild3_5-f243a77b \r\nLibChild3_6-091903ca \r\nLibChild3_7-56d1e505 \r\nLibChild3_8-5e70f9dc \r\nLibChild3_9-ac29db17 \r\n```\r\n\r\nYou could see that `LibChild3_30` and all up to `LibChild3_36` are sharing the same 16 bits `f133`, while the other below from `LibChild3_4` to `LibChild3_9` are changing as you would expect.\r\n\r\nSo first, I found that I made a mistake, and I should have used `MSBuildProjectFullPath` instead of `MSBuildProjectFile`... as it was only hashing the filename but not the fullpath (and if we have a same project filename in different folders, we still want this to hash properly the folder)\r\n\r\nBut still, it doesn't look good at all...\r\n\r\nSo looking at the code:\r\n\r\nhttps://github.com/dotnet/msbuild/blob/cd95fa922d0466b53163f93a32895f53df202f4b/src/Shared/CommunicationsUtilities.cs#L655-L682\r\n\r\nand hashing simple strings like this:\r\n\r\n```\r\n$([MSBuild]::StableStringHash('10'))   => cdbab78f\r\n$([MSBuild]::StableStringHash('11'))   => cdb9b78f\r\n$([MSBuild]::StableStringHash('100'))  => b7435729\r\n$([MSBuild]::StableStringHash('101'))  => 59eacbc4\r\n$([MSBuild]::StableStringHash('1000')) => 00f35729\r\n$([MSBuild]::StableStringHash('1001')) => 758e5729\r\n```\r\n\r\nAnd we can see that the algorithm is messing with string with a length that is even here. Hashing `10` vs `11` is generating `cdbab78f` and `cdb9b78f`, and just changed by a few bits (!)\r\n\r\nI don't know where this algorithm comes from, but it doesn't look good as it is bit shifting+xor, instead of better approaches like xor+multiply_by_prime_number for simple hash. For example it could use [FNV-1A](https://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function#FNV-1a_hash) and it would provide a much better hash.\r\n\r\nBut, I assume that now that `StableStringHash` is out, we cannot really change it right? (as programs are relying on it being stable... \ud83e\udd14 )\r\n\r\nSo one possible way to workaround it is to `hash(str + hash(str))` and that's probably what I'm gonna do... ",
  "state": "CLOSED",
  "createdAt": "2021-12-07T21:28:32Z",
  "updatedAt": "2024-03-18T14:01:52Z",
  "closedAt": "2024-03-18T14:01:51Z",
  "author": {
    "login": "xoofx"
  },
  "labels": [
    "help wanted",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "JanKrivanek"
      }
    ]
  },
  "milestone": {
    "title": "Backlog"
  },
  "comments": {
    "nodes": [
      {
        "body": "> But, I assume that now that `StableStringHash` is out, we cannot really change it right? (as programs are relying on it being stable... \ud83e\udd14 )\r\n\r\nI think the contract is that it's stable _for a single version of MSBuild_ and particularly between .NET Core and .NET Framework implementations. I think I'd be comfortable changing the implementation to have better spread.\r\n\r\nThough \"did we document that sufficiently to actually follow through on breaking it?\" is a good question.",
        "createdAt": "2021-12-07T21:51:03Z",
        "updatedAt": "2021-12-07T21:51:03Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> Though \"did we document that sufficiently to actually follow through on breaking it?\" is a good question.\r\n\r\nHow convenient: we haven't actually documented it on the public docs page https://docs.microsoft.com/en-us/visualstudio/msbuild/property-functions?view=vs-2022\r\n\r\nOn the one hand: \ud83d\ude14. But it's convenient here!",
        "createdAt": "2021-12-07T21:56:06Z",
        "updatedAt": "2021-12-07T21:56:06Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> On the one hand: \ud83d\ude14. But it's convenient here!\r\n\r\nhehe, indeed, I found it only from the issue #4986 while looking for a property function hash...\r\n\r\nSo question is: could we upgrade the StableStringHash to something even better, more like what the hash task is doing (e.g using SHA1) and returning a string? (and so that it would not use anymore the `CommunicationsUtilities.GetHashCode()`...\r\n\r\nA non cryptographic 32bit hash will be always too weak for any kind of uniqueness usage, while using such function in properties is more likely its primary usage (e.g computing a folder name based on a few selected properties)\r\n\r\nA cryptographic hash like SHA1 is definitely much slower, but much safer, and I don't expect that we use such functions thousands of time in a single build.\r\n\r\nSo, could it be e.g SHA1 or should we restrict it to return a single int and move to e.g FNV-1A?",
        "createdAt": "2021-12-08T04:41:46Z",
        "updatedAt": "2021-12-08T04:41:46Z",
        "author": {
          "login": "xoofx"
        }
      },
      {
        "body": "Team triage: Looks like this hash isn't used a lot, so this probably isn't high priority.",
        "createdAt": "2022-01-06T17:40:07Z",
        "updatedAt": "2022-01-06T17:40:07Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "Waiting for C# Dev Kit 1.3.x to age out (https://marketplace.visualstudio.com/items?itemName=ms-dotnettools.csdevkit), then we'll merge & ship `StableStringHash` overloads (including the one using FNV)",
        "createdAt": "2024-02-22T13:27:01Z",
        "updatedAt": "2024-02-22T13:27:01Z",
        "author": {
          "login": "JanKrivanek"
        }
      }
    ]
  }
}