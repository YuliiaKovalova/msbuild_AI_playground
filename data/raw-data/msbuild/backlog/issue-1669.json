{
  "number": 1669,
  "title": "Add a property with path of host of msbuild",
  "body": "Add a property with full path of host of msbuild\r\n\r\nI can currently run msbuild with\r\n\r\n- `msbuild.exe` (net40)\r\n- `dotnet msbuild.dll` (netcore)\r\n- `mono msbuild.exe` (too i think, for net40)\r\n\r\nIt's useful in target file to know who is invoking msbuild, because maybe i need to run some commands in my target files, and i want to use same host.\r\n\r\nFor example i want to run a clitool or another command in a target file\r\n\r\n```xml\r\n<Target Name=\"MyTarget\">\r\n    <Exec Command='dotnet mytool arg1 arg2' />\r\n</Target>\r\n```\r\n\r\nBut that will run dotnet in `PATH` (global.json cannot always be used, because i can overriden in PATH, like in CI server)\r\n\r\n```\r\nset PATH=/path/to/v1/dotnet\r\n/path/to/v2/dotnet msbuild /t:MyTarget\r\n```\r\n\r\nthat will run `mytool` with v1 dotnet, and i dont know how to be sure is executed with v2 dotnet\r\n\r\nSame for mono.\r\n\r\nIf a `$(DotnetHost)` exists, it's possibile to do `$(DotnetHost) mycmd.dll` or `$(DotnetHost) mycmd.exe` (netcore vs net40) and that will run\r\n\r\n- ` mycmd.exe` on win, because $(DotnetHost) is ''\r\n- `/path/to/dotnet.exe mycmd.dll` on .net core win\r\n- `/path/to/dotnet mycmd.dll` on .net core unix/mac\r\n- `/path/to/mono mycmd.exe` on mono\r\n\r\nI think that property should be added from msbuild, not sdk, because i can use msbuild without sdk (for simple script automation)\r\n\r\nthat also resolve workaround like (from `dotnet run` target file [in dotnet/sdk](https://github.com/dotnet/sdk/blob/4fb9f58664b1d516564ee8d3c3a5de79b9a82955/src/Tasks/Microsoft.NET.Build.Tasks/build/Microsoft.NET.Publish.targets#L523-L526) ) \r\n\r\n```xml\r\n    <PropertyGroup>\r\n      <_DotNetHostExecutableName>dotnet</_DotNetHostExecutableName>\r\n      <_DotNetHostExecutableName Condition=\"$(RuntimeIdentifier.StartsWith('win'))\">$(_DotNetHostExecutableName).exe</_DotNetHostExecutableName>\r\n    </PropertyGroup>\r\n```\r\n\r\nThere is `$(MSBuildSDKsPath)` but is a subdirectory inside sdk, and i dont know if i can be sure layout will be always the same, to use relative path. And anyway doesnt fix mono or msbuild.exe\r\n\r\nrelated to https://github.com/Microsoft/msbuild/issues/720 too i think, roslyn csc workaround embeddeing a .cmd/.sh inside sdk (who resolve dotnet using relative path), but that cannot be done by others.\r\n\r\nAtm in f# (i need to run `dotnet fsc.dll`, with full path), i am using `MSBuildExtensionsPath` but i know is not future proof/hack\r\n\r\n```xml\r\n<_FscTask_FscToolExe>dotnet.exe</_FscTask_FscToolExe>\r\n<_FscTask_FscToolPath>$(MSBuildExtensionsPath)/../..</_FscTask_FscToolPath>\r\n```\r\n\r\n",
  "state": "CLOSED",
  "createdAt": "2017-02-03T11:25:04Z",
  "updatedAt": "2024-02-21T17:22:06Z",
  "closedAt": "2020-04-29T16:28:54Z",
  "author": {
    "login": "enricosada"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "We went around and around on this in #720 and decided to do the easy thing (nothing) for now.\r\n\r\n@eerhardt It looks like you might have changed your mind and now be in favor of an MSBuild feature to get the host?",
        "createdAt": "2017-02-06T15:44:56Z",
        "updatedAt": "2017-02-06T15:44:56Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> @eerhardt It looks like you might have changed your mind and now be in favor of an MSBuild feature to get the host?\r\n\r\n?? I'm not sure what I've changed my mind \"from\" or \"to\". \ud83d\ude09 \r\n\r\nIt would seem to me, for this specific issue, to give F# the same level of specialty as we do for C#.  We are already bundling the F# SDK into the CLI.  It would make sense to add the same functionality for F# as we do for C#:\r\n\r\nhttps://github.com/dotnet/cli/blob/rel/1.0.0/src/dotnet/commands/dotnet-msbuild/MSBuildForwardingApp.cs#L29\r\nhttps://github.com/dotnet/cli/blob/rel/1.0.0/src/dotnet/commands/dotnet-msbuild/MSBuildForwardingApp.cs#L109-L113\r\n\r\n@piotrpMSFT @livarcocc - how do you guys imagine F# compiler should work when running in the CLI?\r\n\r\nEither that, or we need to generalize this so C# doesn't need to be special cased in the CLI.\r\n",
        "createdAt": "2017-02-06T15:59:22Z",
        "updatedAt": "2017-02-06T15:59:22Z",
        "author": {
          "login": "eerhardt"
        }
      },
      {
        "body": "Also, as i said before, it's not a problem specific to fsc (that's just an example), it's for normal targets who want to run dotnet from msbuild (build orchestration, scripts, etc). \r\nBut for sure is really high in my priority list for finalize F#, because can create [bug](https://github.com/dotnet/netcorecli-fsc/issues/65)\r\n\r\nQUESTION: If i want to run a `dotnet something` inside my target file? \r\ni cannot do `<Exec Command=\"dotnet new -t lib\" />` because i cannot trust `PATH`\r\n\r\n- maybe a specific version of dotnet is executed with full path `/path/to/dotnet msbuild /t:MyTarget`, happen a lot with installations in CI (download -> unzip)\r\n- maybe global.json is used\r\n\r\nSo ihmo is not about sdk, cli at all. It's about msbuild. before there was only one host, now there are more, so i need to know with one. \r\nI know easy is ignore it, but mostly because the sdk/cli bundle everything, so you dont see the issue often.\r\n\r\n> @piotrpMSFT @livarcocc - how do you guys imagine F# compiler should work when running in the CLI?\r\n\r\nI add my 5c.\r\n\r\nMy working solution for f# (work is done, i'll send a pr really soon to update templates) is to:\r\n\r\n- publish the fsc compiler as normal framework dependent netcoreapp console app (fsc.dll)\r\n- put it inside nuget package [FSharp.Compiler.Tools](https://www.nuget.org/packages/FSharp.Compiler.Tools/) (who already exists/used for f#, but contains net40 only atm, will be updated with netcoreapp too)\r\n- That `FSharp.Compiler.Tools` package is referenced by Sdk package currently used for F# [FSharp.NET.Sdk](https://www.nuget.org/packages/FSharp.NET.Sdk/)\r\n- I can know the full fsc.dll path inside the package because in the `FSharp.Compiler.Tools` package i define a property `FscPath`, auto-imported by props file.\r\n- in the target `CoreCompile` inside `FSharp.NET.Sdk` i just `<Exec Command='dotnet \"$(FscPath)\" --fsc-args' />`\r\n\r\nWorking example in [this package](https://www.myget.org/F/netcorecli-fsc-preview4-fsctask/api/v2/package/Microsoft.FSharp.Compiler.Sdk.netcore/1.0.0-rc-170113), but is not final name, after feedback/todo from https://github.com/Microsoft/visualfsharp/pull/2250\r\n\r\nIt works really well, minimal package size (FDD) and xplat. no special invoker (`RunCsc.cmd`/`.sh`, who  hardcode dotnet path btw, using relative position, because is important know the good path).\r\nPackage contains both net40 and netcoreapp1.0, so i can run net40 when msbuild.exe or netcoreapp when is `dotnet msbuild` if i want (not atm).\r\nNo hack, just using current msbuild extensibility (auto-import of props).\r\n\r\n**Please do not embeed f# it in CLI, no special cases**. is not needed.\r\n\r\nCurrent packaing for f# is better than c# one ihmo:\r\n\r\n- I can replace the f# compiler package just changing the package version inside fsproj.\r\n- with c# you are stuck to CscPath property (that works too for f# obv, with FscPath), but a package  is better, we are doing package as first class right? not local paths to gac/special folder anymore:\r\n  - for versioning\r\n  -  i can PIN the specific fsc package version, or use experiemental built version (no hack, just change a `  <PackageReference Include=\"Microsoft.FSharp.Compiler.Sdk.netcore\" Version=\"myversion\" />` and dev feed maybe\r\n  - easier to use/change for users (no download, local file system FscPath)\r\n  - contains fsharp.build.dll with Fsc msbuild task, so always aligned to fsc\r\n  - each fsproj can choose what fsc use, default latest stable obv \r\n  - default fsc package is referenced in fsharp.net.sdk package, so is not needed inside fsproj\r\n\r\n",
        "createdAt": "2017-02-08T10:11:48Z",
        "updatedAt": "2017-02-08T10:11:48Z",
        "author": {
          "login": "enricosada"
        }
      },
      {
        "body": "@rainersigwald so no possibility to have it in .net core sdk 1.0 right?\r\n",
        "createdAt": "2017-02-10T01:52:56Z",
        "updatedAt": "2017-02-10T01:52:56Z",
        "author": {
          "login": "enricosada"
        }
      },
      {
        "body": "No, sorry.\n",
        "createdAt": "2017-02-10T02:07:43Z",
        "updatedAt": "2017-02-10T02:07:43Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "FWIW I agree we need something like this as well. There are various things we need to be able to run on the same host as msbuild so it runs in the same context as msbuild. ",
        "createdAt": "2017-03-14T23:32:06Z",
        "updatedAt": "2017-03-14T23:32:06Z",
        "author": {
          "login": "weshaggard"
        }
      },
      {
        "body": "Team triage: We've made it this long without this, so we don't plan to do it. Hosts are changing quite a bit with apphosts now, too.",
        "createdAt": "2020-04-29T16:28:54Z",
        "updatedAt": "2020-04-29T16:28:54Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}