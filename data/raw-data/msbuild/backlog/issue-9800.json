{
  "number": 9800,
  "title": "[Feature Request]: Terminal Logger output display should use relative paths for directories in the same 'repo root'",
  "body": "### Summary\n\nI have a repo where I'm using the SDK Artifacts layout, which puts outputs in a layout like\r\n\r\n```\r\n<root>\r\n- artifacts\r\n  - publish\r\n    - <project>\r\n      - <target>\r\n- src\r\n  - <project>\r\n```\r\n\r\nWhen I publish one of these projects from its src directory, the output path link is fully-qualified:\r\n\r\n![image](https://github.com/dotnet/msbuild/assets/573979/b53cd751-bb83-4404-8ccb-161d782ceb2c)\r\n\r\nSince this location is in the same 'repo' I'd prefer to see this path using relative pathing: `../../artifacts/publish/msbuild-versioning-sample/release_osx-x64`\n\n### Background and Motivation\n\nWe already use relative pathing for directories _under_ the current working directory, and it seems natural to me to use relative paths for all repo-local locations. The hard part might be deciding what is repo-local, since MSBuild doesn't really have a core concept of a repo root. Maybe Sourcebuild can be of use here, since it's properties can tell us a repo root?\n\n### Proposed Feature\n\nIf the `SourceRoot` Item is present (which it should be after the `InitializeSourceControlInformation` Target has finished) then use it as a basis for computing relative paths _if_ the project isn't a direct ancestor of the path being made relative to display the outputs.\n\n### Alternative Designs\n\n_No response_",
  "state": "OPEN",
  "createdAt": "2024-02-28T16:53:45Z",
  "updatedAt": "2024-10-09T21:54:54Z",
  "closedAt": null,
  "author": {
    "login": "baronfel"
  },
  "labels": [
    "Feature Request",
    "triaged",
    "Area: Terminal Logger"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "baronfel"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "There can be more than one SourceRoot item:\r\n\r\n* NuGet adds SourceRoot items based on $(NuGetPackageFolders): <https://github.com/NuGet/NuGet.Client/pull/3430>.  Because the paths listed in $(NuGetPackageFolders) typically do not depend on the project being built, I don't think these should be converted to relative.\r\n* Perhaps it can also happen with Git submodules.  In that case, relative paths would be OK.\r\n\r\nI think what it should do is check whether there is at least one SourceRoot item such that both the current working directory and the referenced file are within it.  If so, convert the path to relative; else keep it absolute.\r\n\r\nRoslyn recognizes the GenerateFullPaths property; Microsoft.CSharp.Core.targets passes it to the Csc task, and if the value is true, then the diagnostic messages from Csc include the full paths of files.  Perhaps Terminal Logger should also recognize this property.\r\n",
        "createdAt": "2024-03-02T12:07:54Z",
        "updatedAt": "2024-03-02T12:10:55Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "Yeah, there can be - that's why in [this PR](https://github.com/dotnet/msbuild/pull/9805) I've tried to find the _best_ one using a heuristic of \"the SourceRoot item that the sourcelink targets have added source control provider metadata to\". I do like your proposed enhancements of a) keep all sourceRoots and determine the best one at rendering time using comparisons, and b) enable/disable the functionality based on the `GenerateFullPaths` property - that's really useful!",
        "createdAt": "2024-03-02T17:22:57Z",
        "updatedAt": "2024-03-20T17:37:39Z",
        "author": {
          "login": "baronfel"
        }
      },
      {
        "body": "I've attempted to use GenerateFullPaths, but for some reason setting that to false (the default is true, set by the Common props) completely destroys the TL output, so I'm going to punt on that feature in the linked PR. ",
        "createdAt": "2024-03-20T17:38:22Z",
        "updatedAt": "2024-03-20T17:38:22Z",
        "author": {
          "login": "baronfel"
        }
      }
    ]
  }
}