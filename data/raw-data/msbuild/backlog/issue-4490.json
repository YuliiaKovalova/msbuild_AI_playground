{
  "number": 4490,
  "title": "BeforeBuild should be available in outer builds",
  "body": "### Steps to reproduce\r\n\r\nI have a *Bump Assembly Versions* project which to this point has worked fine for single target projects. However, in multi-target projects, I am noticing that I may see a *+N* or sometimes a *+N-1* increment, depending on the bump instructions, i.e. like one of the interior platforms unwound its build asynchronously last. This is incorrect, I only want there to be at most a *+1* when there is an increment involved. So... Is there a target I can trigger against that represents the overall build and not each target framework?",
  "state": "OPEN",
  "createdAt": "2019-07-03T23:28:18Z",
  "updatedAt": "2024-02-21T16:31:04Z",
  "closedAt": null,
  "author": {
    "login": "mwpowellhtx"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Discussion"
  },
  "comments": {
    "nodes": [
      {
        "body": "@rainersigwald Any ideas on this one, good sir?",
        "createdAt": "2019-07-04T18:53:27Z",
        "updatedAt": "2019-07-04T18:53:27Z",
        "author": {
          "login": "mwpowellhtx"
        }
      },
      {
        "body": "Short of having to do more bookkeeping on the version(s) involved, that is. I could open that can of worms in my tool, but I would rather simply trigger on a single build event for the build *as a whole* instead of for *each of the targets* involved during the build.",
        "createdAt": "2019-07-04T18:55:17Z",
        "updatedAt": "2019-07-04T18:55:17Z",
        "author": {
          "login": "mwpowellhtx"
        }
      },
      {
        "body": "That or separate my single multi-targeted project file to several individually targets project files, each of which having its own uniquely tracked version numbers, but this does not seem like an especially great workaround, to me. ... Kind of defeats the purpose of it being multi-targeted in the first place; never mind the packaging headache that would occur.",
        "createdAt": "2019-07-04T19:04:55Z",
        "updatedAt": "2019-07-04T19:05:51Z",
        "author": {
          "login": "mwpowellhtx"
        }
      },
      {
        "body": "Maybe you would find the `buildMultiTargeting` folder useful? I can't find official documentation at all, but these links might help (Ctrl+F for `buildMultiTargeting` on each page):\r\n\r\nhttps://natemcmaster.com/blog/2017/07/05/msbuild-task-in-nuget/#step-4---shipping-your-task-in-a-nuget-package\r\nhttps://oren.codes/2017/01/04/multi-targeting-the-world-a-single-project-to-rule-them-all/#how-it-works",
        "createdAt": "2019-07-04T20:27:33Z",
        "updatedAt": "2019-07-04T20:28:00Z",
        "author": {
          "login": "jnm2"
        }
      },
      {
        "body": "@jnm2 Will have to look into that a bit further, thank you for the tidbits.",
        "createdAt": "2019-07-04T20:34:54Z",
        "updatedAt": "2019-07-04T20:34:54Z",
        "author": {
          "login": "mwpowellhtx"
        }
      },
      {
        "body": "I'm going to answer the question you're asking, but I'm a bit concerned based on your description of the symptoms that it may not be the root cause of your problem, so we may have to follow up again.\r\n\r\nIf you're not already delivering this target in a NuGet package, consider making the target conditional.\r\n\r\nThe condition isn't trivial, because there are a few interesting cases:\r\n\r\n1. The project has a single target.\r\n2. The project multitargets, and this instance of the project is the \"outer\" build that calls the individual ones.\r\n3. The project multitargets and this instance of the project is one of the \"inner\" builds with a specific `TargetFramework`.\r\n\r\nCommon.targets provides `$(IsCrossTargetingBuild)` for the third case, but we don't have a single propery for \"this project multitargets\". We generally use:\r\n\r\n1. `'$(TargetFrameworks)' == ''`\r\n1. `'$(TargetFrameworks)' != '' and '$(TargetFramework)' == ''`\r\n1. `'$(TargetFrameworks)' != '' and '$(TargetFramework)' != ''`\r\n\r\nsee the definition of `IsCrossTargetingBuild` itself:\r\n\r\nhttps://github.com/microsoft/msbuild/blob/07d3c25a1461dfba3fcc1cc9b28cb8accd4e32b9/src/Tasks/Microsoft.Managed.targets#L19-L21\r\n\r\nIf you know the project multitargets and want the smallest possible thing, you can use `Condition=\" '$(TargetFramework)' == '' \"`.",
        "createdAt": "2019-07-05T14:46:35Z",
        "updatedAt": "2019-07-05T14:46:35Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald I'm not sure I understand, so this will yield a single overall build, that in turn would trigger my version bump once and only once? If I understand correctly, would yield multiple subordinate packages organized by the parent package?\r\n\r\n[For reference](/mwpowellhtx/BumpAssemblyVersions/blob/master/src/BumpAssemblyVersions/build/netstandard/BumpAssemblyVersions.targets), currently the bump tasking is invoked [``BeforeTargets=\"BeforeBuild\"``](/mwpowellhtx/BumpAssemblyVersions/blob/master/src/BumpAssemblyVersions/build/netstandard/BumpAssemblyVersions.targets#L7).",
        "createdAt": "2019-07-05T17:59:21Z",
        "updatedAt": "2019-07-05T17:59:21Z",
        "author": {
          "login": "mwpowellhtx"
        }
      },
      {
        "body": "Thanks for linking to your code. I see now that you're providing a NuGet package, so the right thing to do is to use the `buildCrossTargeting` folder, which handles the conditionality for you (NuGet imports it only for the \"outer\" build). @jnm2 was right on target.\r\n\r\n> so this will yield a single overall build\r\n\r\nI don't think I understand this. \"Build\" is used for a lot of things (formally and informally) in MSBuild-land; can you ask this question without using that word, please?\r\n\r\n> If I understand correctly, would yield multiple subordinate packages organized by the parent package?\r\n\r\nI don't understand this question, can you rephrase?",
        "createdAt": "2019-07-05T18:12:36Z",
        "updatedAt": "2019-07-05T18:12:36Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald Sounds like ``buildCrossTargeting`` is the right path for me to investigate. Basically, I want to bump once and only once; that is, once regardless whether the subscribing project is single- or multi-targeting.",
        "createdAt": "2019-07-05T18:14:59Z",
        "updatedAt": "2019-07-05T18:14:59Z",
        "author": {
          "login": "mwpowellhtx"
        }
      },
      {
        "body": "@rainersigwald So the current target would work in the single-targeting use case under the, ``Condition=\"'$(IsCrossTargetingBuild)' != 'true'\"``. However, what would the analog outer loop target be when ``Condition=\"'$(IsCrossTargetingBuild)' == 'true'\"``?",
        "createdAt": "2019-07-05T18:27:43Z",
        "updatedAt": "2019-07-05T18:27:43Z",
        "author": {
          "login": "mwpowellhtx"
        }
      },
      {
        "body": "@rainersigwald I've dug into these a bit and I still do not see anything that jumps out at me as being a *once and only once* cross targets analog to the ``BeforeBuild`` target. Can you confirm? Better yet, inform me as to what those target(s) might be? With the goal being a resilient version bumping strategy that bumps once and only once, regardless of whether single- or multi-targeting.",
        "createdAt": "2019-07-05T22:39:44Z",
        "updatedAt": "2019-07-05T22:39:44Z",
        "author": {
          "login": "mwpowellhtx"
        }
      },
      {
        "body": "@rainersigwald Perhaps we could trigger on ``GetAllRuntimeIdentifiers`` at a level or two prior to even the ``Build`` targets?",
        "createdAt": "2019-07-05T22:47:17Z",
        "updatedAt": "2019-07-05T22:47:17Z",
        "author": {
          "login": "mwpowellhtx"
        }
      },
      {
        "body": "You could use `BeforeTargets=\"DispatchToInnerBuilds\"` but we should expose `BeforeBuild` in that case too. Updating the bug title.",
        "createdAt": "2019-07-05T23:02:26Z",
        "updatedAt": "2019-07-05T23:02:26Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald Good name for it. Agreed; is there anything we can do in the near term? At the moment I basically have bumping disabled, bypassing, my multi-target projects. Not a great workaround, manually bumping, but better than if we bump multiple times over a single outer build.\r\n\r\n*Edit*: So if I take that correctly, that is a refactor of ``BeforeBuild`` to the outer build scope?\r\n\r\n*Edit*: Or at least identifying a ``CrossTargetBeforeBuild`` target name.",
        "createdAt": "2019-07-05T23:06:25Z",
        "updatedAt": "2019-07-05T23:20:15Z",
        "author": {
          "login": "mwpowellhtx"
        }
      },
      {
        "body": "Attached build events, logged via messaging.\r\n\r\n[vs-ide-msbuild-event-messages.txt](https://github.com/microsoft/msbuild/files/3364172/vs-ide-msbuild-event-messages.txt)\r\n\r\nAlong the lines of:\r\n\r\n```Xml\r\n<Target Name=\"PreBeforeBuild\" BeforeTargets=\"BeforeBuild\">\r\n  <Message Text=\"PreBeforeBuild\" Importance=\"high\" />\r\n</Target>\r\n\r\n<Target Name=\"PreDispatchToInnerBuilds\" BeforeTargets=\"DispatchToInnerBuilds\">\r\n  <Message Text=\"PreDispatchToInnerBuilds\" Importance=\"high\" />\r\n</Target>\r\n```\r\n\r\nThat could work, gauging by the order of logged events.",
        "createdAt": "2019-07-05T23:13:03Z",
        "updatedAt": "2019-07-05T23:13:03Z",
        "author": {
          "login": "mwpowellhtx"
        }
      },
      {
        "body": "@rainersigwald This is a qualified *might* work... Apparently ``IsCrossTargetingBuild`` is never defined when we meet the ``BeforeBuild`` target, regardless whether the project was a multi-target build. So my question shifts to a slightly different one, is there a target preceding BeforeBuild for single-target builds? And/or a better indicator, perhaps we need to test for existence of files, that sort of thing. Kind of a kludge workaround, but I do not know of a better way to signal when this happens.\r\n\r\nLog attached, one single targeted, one multi-targeted, lines of interest highlighted with ``^``s:\r\n\r\n[vs-ide-msbuild-event-messages-3.txt](https://github.com/microsoft/msbuild/files/3364952/vs-ide-msbuild-event-messages-3.txt)\r\n",
        "createdAt": "2019-07-06T19:06:36Z",
        "updatedAt": "2019-07-06T19:06:36Z",
        "author": {
          "login": "mwpowellhtx"
        }
      },
      {
        "body": "One approach seems to have some promise, involving ``TargetFrameworks``:\r\n\r\n[vs-ide-msbuild-event-messages-4.txt](https://github.com/microsoft/msbuild/files/3364955/vs-ide-msbuild-event-messages-4.txt)\r\n",
        "createdAt": "2019-07-06T19:14:07Z",
        "updatedAt": "2019-07-06T19:14:07Z",
        "author": {
          "login": "mwpowellhtx"
        }
      },
      {
        "body": "@rainersigwald As I mentioned a qualified *might* work. Another key property when ``DispatchToInnerBuilds`` occurs as the absence of ``ProjectPath``. This is also key for my targets. However, ``MSBuildProjectFullPath`` does appear to exist, so we may be able to leverage that property instead.\r\n\r\n*Edit*: however, this also raises a bit of a question for me, does this mean that key *Properties* or *Items* would not be available during the outer build? This is also an essential part of my bump versions strategy.",
        "createdAt": "2019-07-08T17:47:50Z",
        "updatedAt": "2019-07-08T17:49:55Z",
        "author": {
          "login": "mwpowellhtx"
        }
      },
      {
        "body": "@rainersigwald This is turning into a [really curious case](/mwpowellhtx/Code.Generation.Roslyn/tree/master/src/Code.Generation.Roslyn.Tasks), indeed. I think that the inner/outer loop issue is part of it, but I do not think that is the entirety of the issue, having some difficulty pinpointing the other variable(s) influencing the apparent lack of a version bump going on.\r\n\r\nI've reported a couple of key metrics if it helps. Continuing to dig into it further:\r\n\r\n[msbuild-bumpassemblyversions-not-working.txt](https://github.com/microsoft/msbuild/files/3369712/msbuild-bumpassemblyversions-not-working.txt)\r\n\r\n*Edit*: It is almost as though *Directory.Build.props*, when my bump targets would be included, is being partially, if not completely, ignored, at that step in the outer build loop. Otherwise, version bumping is working *just fine* for single-targeted projects.",
        "createdAt": "2019-07-08T18:13:24Z",
        "updatedAt": "2019-07-08T18:15:57Z",
        "author": {
          "login": "mwpowellhtx"
        }
      },
      {
        "body": "My workaround seems to be along these lines, at the project level:\r\n\r\n```Xml\r\n<Import Project=\"..\\packages\\bumpassemblyversions\\$(BumpAssemblyVersionsVersion)\\build\\BumpAssemblyVersions.targets\" Condition=\"'$(TargetFrameworks)' != '' And Exists('..\\packages\\BumpAssemblyVersions\\$(BumpAssemblyVersionsVersion)\\build\\BumpAssemblyVersions.targets')\" />\r\n```\r\n\r\nWhere:\r\n\r\n```Xml\r\n<BumpAssemblyVersionsVersion>1.3.0</BumpAssemblyVersionsVersion>\r\n```",
        "createdAt": "2019-07-08T18:47:33Z",
        "updatedAt": "2019-07-08T18:47:33Z",
        "author": {
          "login": "mwpowellhtx"
        }
      }
    ]
  }
}