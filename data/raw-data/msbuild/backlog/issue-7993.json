{
  "number": 7993,
  "title": "MSBuild Server fallback mechanism doesn't work when Mutex throws exception",
  "body": "The `MSBuildClientApp.TryLaunchServer` method returns `false` in case server node couldn't be started (and build is then done without server). However, there was reported issue, when mutex logic failed with unhandled IOException.\r\n\r\n```\r\nUnhandled exception: System.IO.IOException: Connection timed out : 'Global\\msbuild-server-launch-BSVTwDRbqiZ8pAK9bysU7lvA2UC4yhR_+Bc8sTbm8Jw'\r\n         at System.Threading.Mutex.CreateMutexCore(Boolean initiallyOwned, String name, Boolean& createdNew)\r\n         at Microsoft.Build.Experimental.MSBuildClient.TryLaunchServer()\r\n         at Microsoft.Build.Experimental.MSBuildClient.Execute(CancellationToken cancellationToken)\r\n         at Microsoft.Build.CommandLine.MSBuildClientApp.Execute(String[] commandLine, String msbuildLocation, CancellationToken cancellationToken)\r\n         at Microsoft.Build.CommandLine.MSBuildApp.Main(String[] args)\r\n         at Microsoft.DotNet.Cli.Utils.MSBuildForwardingAppWithoutLogging.ExecuteInProc(String[] arguments)\r\n```\r\n\r\nHotfix should be easy - insert mutex logic to existing `try/catch` block. We should also find out why is it time-outing.\r\n\r\nhttps://github.com/dotnet/runtime/issues/75391\r\nhttps://github.com/dotnet/runtime/issues/75867\r\n",
  "state": "CLOSED",
  "createdAt": "2022-09-21T08:58:54Z",
  "updatedAt": "2024-02-21T14:07:35Z",
  "closedAt": "2022-10-10T14:14:24Z",
  "author": {
    "login": "MichalPavlik"
  },
  "labels": [
    "bug",
    "Area: Performance",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "rokonec"
      },
      {
        "login": "AR-May"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "There is one more:\r\n```\r\nUnhandled exception: System.IO.IOException: Connection timed out : 'Global\\msbuild-server-running-4Sfg2G4Im0xBRwnhFTml_ht8QRnhMk5UNm+og0DzA0g'\r\n         at System.Threading.Mutex.OpenExistingWorker(String name, Mutex& result)\r\n         at System.Threading.Mutex.TryOpenExisting(String name, Mutex& result)\r\n         at Microsoft.Build.Execution.ServerNamedMutex.WasOpen(String mutexName)\r\n```\r\n",
        "createdAt": "2022-10-05T12:59:32Z",
        "updatedAt": "2022-10-05T12:59:32Z",
        "author": {
          "login": "AR-May"
        }
      }
    ]
  }
}