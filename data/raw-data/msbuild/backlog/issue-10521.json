{
  "number": 10521,
  "title": "[Feature Request]: `WriteLinesToFile` should support specifying a UTF8 encoding that doesn't write a BOM",
  "body": "### Summary\n\n`WriteLinesToFile` accepts an `Encoding` metadata that is a name that's passed to `System.Text.Encoding.GetEncoding`. There is no BCL name for `UTF-8 with no BOM`, so users cannot easily request files be written in this encoding.\n\n### Background and Motivation\n\nBOMs are not generally considered good things to require these days, and many systems (especially those that interact with Linux hosts/tools) have moved away from them because said tools don't handle BOMs well.\r\n\r\nWe should at least have a supported and documented way to skip BOM emission.\n\n### Proposed Feature\n\nWe should support a string like `UTF8-no-bom` or similar for the `Encoding` metadata of the `WriteLinesToFile` Task so that users have an accepted way to write without BOMs. And/or the runtime should provide a named lookup that does the same.\n\n### Alternative Designs\n\n_No response_",
  "state": "OPEN",
  "createdAt": "2024-08-14T17:12:42Z",
  "updatedAt": "2024-12-10T19:25:23Z",
  "closedAt": null,
  "author": {
    "login": "baronfel"
  },
  "labels": [
    "help wanted",
    "Feature Request",
    "Priority:3",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "@baronfel Hi, can I take this issue?",
        "createdAt": "2024-11-26T20:03:30Z",
        "updatedAt": "2024-11-26T20:03:30Z",
        "author": {
          "login": "newmasterSG"
        }
      },
      {
        "body": "Yes, that would be great - though we will likely need to coordinate with @terrajobst about what the name for a proper 'UTF8 without BOM' encoding might be for the whole platform to help ensure consistency.\n",
        "createdAt": "2024-11-26T20:16:32Z",
        "updatedAt": "2024-11-26T20:16:32Z",
        "author": {
          "login": "baronfel"
        }
      },
      {
        "body": "The WriteLinesToFile task already uses UTF-8 without BOM if the Encoding parameter is not set.  I disagree with \"users cannot easily request files be written in this encoding\".\n\n<https://github.com/dotnet/msbuild/blob/43a24969a23bd2dd76cd26be26210e2afcd0595e/src/Tasks/FileIO/WriteLinesToFile.cs#L21-L22>\n<https://github.com/dotnet/msbuild/blob/43a24969a23bd2dd76cd26be26210e2afcd0595e/src/Tasks/FileIO/WriteLinesToFile.cs#L83-L95>\n\nAFAICT, it worked like that already \"Initial code commit\":\n\n<https://github.com/dotnet/msbuild/blob/a6069f840ef13ffb7a8038f53c6740ff95751ba4/src/XMakeTasks/FileIO/WriteLinesToFile.cs#L86-L98>\n<https://github.com/dotnet/msbuild/blob/a6069f840ef13ffb7a8038f53c6740ff95751ba4/src/XMakeTasks/FileIO/WriteLinesToFile.cs#L113-L123>\n\nThis behaviour hasn't been documented at <https://learn.microsoft.com/en-us/visualstudio/msbuild/writelinestofile-task?view=vs-2022> though.",
        "createdAt": "2024-11-26T20:19:17Z",
        "updatedAt": "2024-11-26T20:19:17Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "Is this problem solved?",
        "createdAt": "2024-11-26T20:25:50Z",
        "updatedAt": "2024-11-26T20:25:50Z",
        "author": {
          "login": "newmasterSG"
        }
      },
      {
        "body": "@baronfel \n\n> Yes, that would be great - though we will likely need to coordinate with [@terrajobst](https://github.com/terrajobst) about what the name for a proper 'UTF8 without BOM' encoding might be for the whole platform to help ensure consistency.\n\nFWIW, in .NET we default to writing UTF8 without BOM:\n\n```C#\nFile.WriteAllText(\"P:\\\\test.default.txt\", message); // Writes UTF8 without BOM\nFile.WriteAllText(\"P:\\\\test.UTF8.txt\", message, Encoding.UTF8); // Writes UTF8 with BOM\nFile.WriteAllText(\"P:\\\\test.explicit.txt\", message, new UTF8Encoding(encoderShouldEmitUTF8Identifier: false)); Same as default\n```",
        "createdAt": "2024-11-26T20:30:35Z",
        "updatedAt": "2024-11-26T20:30:35Z",
        "author": {
          "login": "terrajobst"
        }
      },
      {
        "body": "May need this issue to close?",
        "createdAt": "2024-11-27T07:04:37Z",
        "updatedAt": "2024-11-27T07:04:37Z",
        "author": {
          "login": "newmasterSG"
        }
      },
      {
        "body": "This still needs a doc change.  <https://learn.microsoft.com/en-us/visualstudio/msbuild/writelinestofile-task?view=vs-2022#task-parameters> says:\n\n> `Encoding`\n>\n> Optional String parameter. Selects the character encoding, for example, \"Unicode\". Default is UTF-8.  See also [Encoding](https://learn.microsoft.com/en-us/dotnet/api/system.text.encoding).\n\nIt should say that the default is UTF-8 without BOM, but specifying \"UTF-8\" means Encoding.GetEncoding(\"UTF-8\"), which then includes a BOM.  One could also add a recommendation on whether to use a BOM.\n",
        "createdAt": "2024-11-27T08:51:47Z",
        "updatedAt": "2024-11-27T08:51:47Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "I'm uncomfortable with there not being an explicit way to declare UTF8 without BOM' via the Encoding metadata - that's why I wrote the issue in the first place. The presence of a default doesn't mean that we can skip the explicit version of that same default. \n\n@terrajobst that's why I tagged you here - we need a name for the concept and I didn't want to make names without some kind of discussion, because I could see other encoding-parsing places in the runtime wanting this level of explicitness. ",
        "createdAt": "2024-11-27T15:23:51Z",
        "updatedAt": "2024-11-27T15:23:51Z",
        "author": {
          "login": "baronfel"
        }
      },
      {
        "body": "Both VS Code and Sublime call it\n\n* UTF8 (`utf8`)\n* UTF8 with BOM  (`utf8bom`)\n\nVisual Studio calls it (File | Save As | Save with Encoding)\n\n* UTF8 with signature\n* UTF8 without signature\n\nThe .NET Encoding APIs refer to the BOM as `UTF8Identifier`.\n\nFor the MSBuild task I see two options:\n\n* Add another bool property, like `EmitUTF8Identifier`\n* Special encoding syntax\n\nIf you go with a secondary property, I'd follow the BCL naming conventions. If you go with a special string, I'd probably follow VS Code. Not sure how you feel about which value is the default; if you want `UTF8` to mean \"UTF8 with BOM\" then I'd probably go with `UTF8_no_bom` or something like this.\n\n/cc @GrabYourPitchforks @tarekgh \n",
        "createdAt": "2024-12-10T04:38:31Z",
        "updatedAt": "2024-12-10T04:38:31Z",
        "author": {
          "login": "terrajobst"
        }
      },
      {
        "body": "> The .NET Encoding APIs refer to the BOM as UTF8Identifier\n\nThat is right. I want to point out encoding support a property called [`Preamble`](https://learn.microsoft.com/en-us/dotnet/api/system.text.utf8encoding.preamble?view=net-9.0). This property was introduced in net core 3.0. So, it looks to me we preferred the name `Preamble`?\n\n> Add another bool property, like EmitUTF8Identifier\n\nI like this option more, but I prefer the name `EmitUTF8Bom` more. I know this is not consistent with previous names, but users recognize `BOM` more than other naming. ",
        "createdAt": "2024-12-10T18:06:59Z",
        "updatedAt": "2024-12-10T18:06:59Z",
        "author": {
          "login": "tarekgh"
        }
      },
      {
        "body": "Works for me.\n\nAny thoughts on what the default should be?",
        "createdAt": "2024-12-10T19:04:48Z",
        "updatedAt": "2024-12-10T19:04:56Z",
        "author": {
          "login": "terrajobst"
        }
      },
      {
        "body": "> Any thoughts on what the default should be?\n\nI prefer to turn off BOM by default. The reason stated above ` many systems (especially those that interact with Linux hosts/tools) have moved away from them because said tools don't handle BOMs well.` which I agree with.  ",
        "createdAt": "2024-12-10T19:25:23Z",
        "updatedAt": "2024-12-10T19:25:23Z",
        "author": {
          "login": "tarekgh"
        }
      }
    ]
  }
}