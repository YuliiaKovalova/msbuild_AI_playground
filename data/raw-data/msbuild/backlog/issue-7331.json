{
  "number": 7331,
  "title": "Satellite Assemblies not generated for some cultures (zh-CN) in .NET 6",
  "body": "<!-- This is a template that helps us provide quicker feedback. Please use any relevant sections and delete anything you don't need. -->\r\n\r\n### Issue Description\r\nThis appears to be a regression on Windows.  Starting in .NET 6, a satellite assemblies are not generated for some cultures.  For instance, a project with an embedded resource `resources.zh-CN.resx` will not generate a satellite assembly when using the .NET 6 SDK, but will when using the .NET 5 SDK.  I'm not sure if this is limited to `zh-CN` or not - though I suspect it's related to #3897.\r\n\r\nIf I build from Visual Studio (2022 17.1.0 Preview 2), the satellite assembly will be generated.  Building with the dotnet cli (SDK 6.0.101) will *not* generate the satellite assembly.\r\n\r\n### Steps to Reproduce\r\n<!--\r\n* Include as much of the following as possible:\r\n\r\n* A minimal sample project that reproduces the issue.\r\n* Your zipped project.\r\n* IDE / CLI steps to create the project and reproduce the behaviour.\r\n* Your command line invocation\r\n-->\r\n\r\nBuild the attached project: `dotnet build LocalizationTest.csproj`\r\n\r\n[LocalizationTest.zip](https://github.com/dotnet/msbuild/files/7930227/LocalizationTest.zip)\r\n\r\n### Expected Behavior\r\n<!--\r\n* The expected output or behavior.\r\n-->\r\n\r\nA satellite assembly will be generated into a `zh-CN` subfolder in the output folder.\r\n\r\n### Actual Behavior\r\n<!--\r\n* The actual output or behavior.\r\n-->\r\n\r\nNo satellite assembly is generated.\r\n\r\n### Versions & Configurations\r\n<!--\r\n* In a Visual Studio developer command prompt, run `msbuild -version` and paste the output here.\r\n* If applicable, include the version of the tool that invokes MSBuild (Visual Studio, dotnet CLI, etc):\r\n\r\n* Post any other relevant configuration settings here.\r\n*   OS, architecture, etc.\r\n-->\r\nWindows 11 (21H2 22000.132)\r\ndotnet SDK 5.0.400 correctly generates the satellite assembly\r\ndotnet SDK 6.0.101 does not\r\nVisual Studio 2022 (17.1.0 Preview 2) does generate the satellite assembly",
  "state": "OPEN",
  "createdAt": "2022-01-25T02:46:20Z",
  "updatedAt": "2024-01-31T08:18:44Z",
  "closedAt": null,
  "author": {
    "login": "nick-beer"
  },
  "labels": [
    "bug",
    "Area: Localization",
    "has-repro",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "This does look directly related to https://github.com/dotnet/msbuild/issues/3897, which will get more dev time once https://github.com/dotnet/msbuild/pull/6148 gets merged in. \r\n\r\nThank you for the repro!",
        "createdAt": "2022-01-27T17:48:14Z",
        "updatedAt": "2022-01-27T17:48:14Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "In the meantime, is there any advice on what my approach should be using the current runtime/SDK?  This is blocking my update of a very large repo to .NET 6 - lots of failing tests and localization is broken.\r\n\r\nSpecifically, I'm looking for guidance whether using `zh-CN` is ok/good long term, or if that's something we should ultimately be moving away from?",
        "createdAt": "2022-01-27T17:58:18Z",
        "updatedAt": "2022-01-27T17:58:18Z",
        "author": {
          "login": "nick-beer"
        }
      },
      {
        "body": "@nick-beer Using `zh-CN` should be fine in the long run (cc @tarekgh). Once we're on net6.0 we should be able to use the CultureInfo api's to detect cultures like `zh-CN` properly.",
        "createdAt": "2022-01-27T21:08:11Z",
        "updatedAt": "2022-01-27T21:08:11Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "I know that this is related but I'm also seeing now that `zh-CN` isn't returned from `CultureInfo.GetCultures(CultureTypes.AllCultures)`.  That doesn't seem like something that will be addressed by the issues you mentioned above - is that an intentional change in behavior since .NET 5?  I wasn't able to find it listed in the breaking changes.  Is that something I should open an issue for on the runtime repo?",
        "createdAt": "2022-01-27T23:35:19Z",
        "updatedAt": "2022-01-27T23:35:19Z",
        "author": {
          "login": "nick-beer"
        }
      },
      {
        "body": "@nick-beer I'm not too sure about the specifics here, I'd file an issue in the runtime repo.",
        "createdAt": "2022-01-27T23:40:24Z",
        "updatedAt": "2022-01-27T23:40:24Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "> I know that this is related but I'm also seeing now that zh-CN isn't returned from CultureInfo.GetCultures(CultureTypes.AllCultures)\r\n\r\nThis is intentional. the correct name of this culture is `zh-Hans-CN`. `zh-CN` is just an alias for that. This is the CLDR Unicode standard. @BenVillalobos I don't think we need to open issue for that in runtime repo as we need to follow whatever Unicode/ICU give us. We should stick with the following names in the culture enumeration:\r\n\r\n```\r\nzh                  Chinese\r\nzh-Hans             Chinese (Simplified)\r\nzh-Hans-CN          Chinese (Simplified, China)\r\nzh-Hans-HK          Chinese (Simplified, Hong Kong SAR)\r\nzh-Hans-MO          Chinese (Simplified, Macao SAR)\r\nzh-Hans-SG          Chinese (Simplified, Singapore)\r\nzh-Hant             Chinese (Traditional)\r\nzh-Hant-HK          Chinese (Traditional, Hong Kong SAR)\r\nzh-Hant-MO          Chinese (Traditional, Macao SAR)\r\nzh-Hant-TW          Chinese (Traditional, Taiwan)\r\n```",
        "createdAt": "2022-01-27T23:46:11Z",
        "updatedAt": "2022-01-28T00:43:32Z",
        "author": {
          "login": "tarekgh"
        }
      },
      {
        "body": "Thanks for the information.  As a summary:\r\n\r\n- msbuild will not recognize `zh-CN` until #3897 goes in.  I suspect that will not make it into .NET 6?\r\n- Runtime code using `GetCultures` will never (from .NET 6 onward) find `zh-CN`  (feels like this should be listed [here](https://docs.microsoft.com/en-us/dotnet/core/compatibility/6.0))\r\n\r\nThese are both significant breakages for our code base - we use `zh-CN` for most of our localized Chinese assets, and have a non-trivial amount of localization code that (in a way) depends on `zh-CN` being returned from `GetCultures` (because we're looking for resources that exist in a `zh-CN` subfolder).\r\n\r\nSo, it sounds like I will need to update all of our localized Chinese assets to use `zh-Hans-CN` rather than `zh-CN` if we want to update to .NET 6.  Ouch. I'm not missing anything, right?",
        "createdAt": "2022-01-28T00:47:00Z",
        "updatedAt": "2022-01-28T00:53:45Z",
        "author": {
          "login": "nick-beer"
        }
      },
      {
        "body": "@BenVillalobos is it possible we consider adding a small hack in msbuild for .NET 6.0 to manually add zh cultures to the list it enumerates? like `zh-CN`.\r\n\r\n@nick-beer do you localize to other simplified Chinese languages? if not, I would recommend you to use `zh-Hans` instead which make the localization work for any simplified Chinese culture (like `zh-Hans-HK` in addition to `zh-CN`).",
        "createdAt": "2022-01-28T01:07:44Z",
        "updatedAt": "2022-01-28T01:07:44Z",
        "author": {
          "login": "tarekgh"
        }
      },
      {
        "body": "I wouldn't be totally opposed to the hack, but I expect that we can get the aliasing work in MSBuild in for SDK 6.0.300, corresponding with VS 17.3.",
        "createdAt": "2022-01-28T14:46:15Z",
        "updatedAt": "2022-01-28T14:46:15Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@tarekgh - thanks for the information.  `zh-Hans` is right for us.\r\n\r\nI'll keep my eye out for the aliasing changes in 6.0.300 (or later?), though I suspect we'll need to perform similar work in our runtime code that depends on `GetCultures` (or drop `zh-CN` altogether...).",
        "createdAt": "2022-01-28T15:06:21Z",
        "updatedAt": "2022-01-28T15:06:21Z",
        "author": {
          "login": "nick-beer"
        }
      },
      {
        "body": "Is there some known hack that could give me both the list of aliased cultures and non-aliased cultures? Using a union of these two lists might work to avoid this breaking change.",
        "createdAt": "2022-05-31T10:53:50Z",
        "updatedAt": "2022-05-31T10:53:50Z",
        "author": {
          "login": "amandal1810"
        }
      },
      {
        "body": "> Is there some known hack that could give me both the list of aliased cultures and non-aliased cultures? Using a union of these two lists might work to avoid this breaking change.\r\n\r\nI don't think there is a hack for that. I am wondering why you don't localize with language tags like `zh-Hans` and `zh-Hant` which should cover all Chinese cultures Simplified and Traditional cases? You don't need any hacks I guess at that time.",
        "createdAt": "2022-05-31T16:52:11Z",
        "updatedAt": "2022-05-31T16:52:46Z",
        "author": {
          "login": "tarekgh"
        }
      },
      {
        "body": "@tarekgh - I just noticed `CultureInfo.GetCultureInfo(\"zh-CN\", predefinedOnly: true)` returns a valid culture (effectively zh-Hans-CN?).  I found it unexpected that `zh-CN` is considered \"predefined\" but is not returned from `GetCultures`.  Is that basically because `zh-CN` is a known, \"predefined\" alias, but not an actual culture name as defined by ICU?  Is this a bug in `GetCultureInfo`?",
        "createdAt": "2023-02-15T17:15:52Z",
        "updatedAt": "2023-02-15T17:15:52Z",
        "author": {
          "login": "nick-beer"
        }
      },
      {
        "body": "`zh-CN` is not a culture by itself, it is just an alias to the other culture `zh-Hans-CN`. Returning both cultures from `GetCultures` is wrong because it can cause other problems. Like users in the UI list the culture display names and they will get a duplicates entry at that time.",
        "createdAt": "2023-02-15T17:25:28Z",
        "updatedAt": "2023-02-15T17:25:59Z",
        "author": {
          "login": "tarekgh"
        }
      },
      {
        "body": "The behavior of `GetCultures` makes sense to me. I was surprised that `zh-CN` is accepted as \"predefined\" via `GetCultureInfo`.  Because it's not returned from `GetCultures`, I would not have expected it to be \"predefined\" as determined by `GetCultureInfo`.  Mostly, just curious if that's expected behavior from `GetCultureInfo`.",
        "createdAt": "2023-02-15T17:41:23Z",
        "updatedAt": "2023-02-15T17:41:23Z",
        "author": {
          "login": "nick-beer"
        }
      },
      {
        "body": "`predefined` means there is a real culture data backing the specific culture name. This is the case for `zh-CN` which happens to have real data to support this culture name. The behavior you are seeing in `GetCultures` and `GetCultureInfo` is expected and correct. Let me know if you have any more questions I can help with. Thanks!",
        "createdAt": "2023-02-15T17:45:33Z",
        "updatedAt": "2023-02-15T17:45:51Z",
        "author": {
          "login": "tarekgh"
        }
      },
      {
        "body": "For everyone's convenience I'd like to spell out the issue and its fix since it took us a considerable amount of head scratching and reading to figure this one out.\r\n\r\n1. The issue stems from a switch from [NLS](https://learn.microsoft.com/en-us/windows/win32/intl/national-language-support) to [ICU](https://icu.unicode.org/). There are differences in locales between these two standards, including `zh-Hans`/`zh-CN`, `zh-Hant/zh-TW` and others.\r\n\r\n2. The issue **used** to exist in only Unix-based environments (See #3897) since only they were [using ICU before .NET 5](https://learn.microsoft.com/en-us/dotnet/core/extensions/globalization-icu):\r\n\r\n> Before .NET 5, the .NET globalization APIs used different underlying libraries on different platforms. On Unix, the APIs used [International Components for Unicode (ICU)](https://icu.unicode.org/), and on Windows, they used [National Language Support (NLS)](https://learn.microsoft.com/en-us/windows/win32/intl/national-language-support). This resulted in some behavioral differences in a handful of globalization APIs when running applications on different platforms.\r\n\r\n3. At some point Windows started incorporating ICU and it became the default for .NET 5 (and above) [for these versions](https://learn.microsoft.com/en-us/dotnet/core/extensions/globalization-icu#icu-on-windows):\r\n \r\n![image](https://github.com/dotnet/msbuild/assets/10195391/1de89b0f-e9a8-41a9-bfaa-905113b90939)\r\n\r\nThis point especially created a lot of head scratching for us since we have CI pipelines on different versions of Windows, some of which produced valid Satellite Assemblies while others didn't.\r\n\r\n4. This was documented in the .NET 5's list of breaking changes [here](https://learn.microsoft.com/en-us/dotnet/core/compatibility/5.0) under the title \"[Use ICU libraries on Windows](https://learn.microsoft.com/en-us/dotnet/core/compatibility/globalization/5.0/icu-globalization-api)\". Honestly, for a change this big I would have expected very clear warnings/errors from the tooling. Silently ignoring locales which were perfectly valid a minute ago is completely unreasonable. But unfortunately, this is quite typical of dotnet tooling in my experience. The official IDE does one thing, msbuild.exe another thing, and `dotnet build` a third thing and it all depends on the exact version of both Windows and the SDK. Moreover, the fix (#7853) went in only into .NET 7 despite .NET 6 being an LTS release. So, a workaround is needed \"only\" for the LTS release and only for recent versions of Windows.\r\n\r\n5. To fix the problem short-term you can switch back to NLS using one of the methods described [here](https://learn.microsoft.com/en-us/dotnet/core/extensions/globalization-icu):\r\n\r\nSolution 1 (in the project file):\r\n```\r\n<ItemGroup>\r\n  <RuntimeHostConfigurationOption Include=\"System.Globalization.UseNls\" Value=\"true\" />\r\n</ItemGroup>\r\n```\r\n\r\nSolution 2 (runtimeconfig.json):\r\n\r\n```\r\n{\r\n  \"runtimeOptions\": {\r\n     \"configProperties\": {\r\n       \"System.Globalization.UseNls\": true\r\n      }\r\n  }\r\n}\r\n```\r\n\r\nSolution 3(env variable, which I think is the only way to fix the issue at build time):\r\n\r\n`DOTNET_SYSTEM_GLOBALIZATION_USENLS=1` or `DOTNET_SYSTEM_GLOBALIZATION_USENLS=true`",
        "createdAt": "2023-09-08T15:14:23Z",
        "updatedAt": "2023-09-08T20:28:06Z",
        "author": {
          "login": "maltalex"
        }
      },
      {
        "body": "Hi, `zh-CN` is an alias of `zh-hans-CN` , and there is more alias. So I created a map configuration that transform `zh-CN` to `zh-hans-CN` and so on. This would solve this problem.",
        "createdAt": "2023-09-22T12:15:24Z",
        "updatedAt": "2023-09-22T12:15:24Z",
        "author": {
          "login": "codelovercc"
        }
      }
    ]
  }
}