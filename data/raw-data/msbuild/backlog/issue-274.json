{
  "number": 274,
  "title": "MSBuid Target fires when project has been modified",
  "body": "I want do some work with compiled DLL after compilation and before build ended. I write next Test.targets:\n\n``` xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<Target Name=\"TrueFakeTarget\" AfterTargets=\"AfterCompile\" DependsOnTargets=\"$(CoreCompile)\">\n    <Message Text=\"### AfterCompile ###\" Importance=\"high\" />\n    <Exec Command=\"calc.exe\"/>\n</Target>\n```\n\nAnd .csproj file:\n\n``` xml\n <?xml version=\"1.0\" encoding=\"utf-8\"?>\n<Project ToolsVersion=\"14.0\" DefaultTargets=\"Build\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n  <Import Project=\"$(MSBuildExtensionsPath)\\$(MSBuildToolsVersion)\\Microsoft.Common.props\" Condition=\"Exists('$(MSBuildExtensionsPath)\\$(MSBuildToolsVersion)\\Microsoft.Common.props')\" />\n  <PropertyGroup>\n    <Configuration Condition=\" '$(Configuration)' == '' \">Debug</Configuration>\n    <Platform Condition=\" '$(Platform)' == '' \">AnyCPU</Platform>\n    <ProjectGuid>{17321175-38FF-44EF-8573-82CBC0BA60D8}</ProjectGuid>\n    <OutputType>Exe</OutputType>\n    <AppDesignerFolder>Properties</AppDesignerFolder>\n    <RootNamespace>TestAfterCompile</RootNamespace>\n    <AssemblyName>TestAfterCompile</AssemblyName>\n    <TargetFrameworkVersion>v4.5.2</TargetFrameworkVersion>\n    <FileAlignment>512</FileAlignment>\n    <AutoGenerateBindingRedirects>true</AutoGenerateBindingRedirects>\n    <NuGetPackageImportStamp>\n    </NuGetPackageImportStamp>\n  </PropertyGroup>\n  <PropertyGroup Condition=\" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' \">\n    <PlatformTarget>AnyCPU</PlatformTarget>\n    <DebugSymbols>true</DebugSymbols>\n    <DebugType>full</DebugType>\n    <Optimize>false</Optimize>\n    <OutputPath>bin\\Debug\\</OutputPath>\n    <DefineConstants>DEBUG;TRACE</DefineConstants>\n    <ErrorReport>prompt</ErrorReport>\n    <WarningLevel>4</WarningLevel>\n  </PropertyGroup>\n  <PropertyGroup Condition=\" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' \">\n    <PlatformTarget>AnyCPU</PlatformTarget>\n    <DebugType>pdbonly</DebugType>\n    <Optimize>true</Optimize>\n    <OutputPath>bin\\Release\\</OutputPath>\n    <DefineConstants>TRACE</DefineConstants>\n    <ErrorReport>prompt</ErrorReport>\n    <WarningLevel>4</WarningLevel>\n  </PropertyGroup>\n  <ItemGroup>\n    <Reference Include=\"Accessibility\" />\n    <Reference Include=\"CustomMarshalers\" />\n    <Reference Include=\"ISymWrapper\" />\n    <Reference Include=\"Microsoft.Activities.Build\" />\n    <Reference Include=\"Microsoft.Build\" />\n    <Reference Include=\"Microsoft.Build.Engine\" />\n    <Reference Include=\"System\" />\n    <Reference Include=\"System.Core\" />\n    <Reference Include=\"System.Xml.Linq\" />\n    <Reference Include=\"System.Data.DataSetExtensions\" />\n    <Reference Include=\"Microsoft.CSharp\" />\n    <Reference Include=\"System.Data\" />\n    <Reference Include=\"System.Net.Http\" />\n    <Reference Include=\"System.Xml\" />\n  </ItemGroup>\n  <ItemGroup>\n    <Compile Include=\"Program.cs\" />\n    <Compile Include=\"Properties\\AssemblyInfo.cs\" />\n  </ItemGroup>\n  <ItemGroup>\n    <None Include=\"App.config\" />\n  </ItemGroup>\n  <Import Project=\"$(MSBuildToolsPath)\\Microsoft.CSharp.targets\" />\n  <Import Project=\"$(SolutionDir)\\Test.targets\" />\n</Project>\n```\n\nAfter compile works perfect, but when you change project, for example, add file, add references target fires again.\n\nHow to prevent target execution if project was not compiled??\n",
  "state": "CLOSED",
  "createdAt": "2015-10-14T08:09:04Z",
  "updatedAt": "2024-02-21T17:30:23Z",
  "closedAt": "2016-06-01T19:45:25Z",
  "author": {
    "login": "alex-samuilov"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Incremental build in MSBuild is per-target, not per project.  I'm not quite sure what you meant by \"add references target fires again\"--I'm assuming you mean your custom target `TrueFakeTarget`.  If you want it to only run when an input file has changed, you'll need to define `Inputs` and `Outputs` attributes.\n\nThis MSDN page has information and examples of getting incremental builds working in MSBuild: https://msdn.microsoft.com/en-us/library/ms171483.aspx.\n",
        "createdAt": "2015-10-16T16:03:05Z",
        "updatedAt": "2015-10-16T16:03:05Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald, thank you for answer. My task is modify intermediate assembly that usually locates in \"obj\" folder. For this I wrote TrueFakesTarget, which runs when compilation completed. \nAnd target runs after compilation, but it's also runs when I modify project (add .cs or reference). Can I prevent run target when I just modify project??\n",
        "createdAt": "2015-10-19T04:51:18Z",
        "updatedAt": "2015-10-19T04:51:18Z",
        "author": {
          "login": "alex-samuilov"
        }
      },
      {
        "body": "The problem you're seeing isn't that the target runs when the project is modified, it's that the target runs _anytime MSBuild runs on the project_.  It looks like it's only running when the project is modified because Visual Studio does a \"fast up-to-date check\" and often doesn't invoke MSBuild when things haven't changed, but always does a full build when the project file changes.\n\nThe solution is still to add `Inputs` and `Outputs` to your target to define when it should be executed.\n\nHowever, I do think you'll have another problem:  adding a source file or a reference to a project will cause the project to be recompiled (with at minimum a new command line), so I'm not sure what level of incremental behavior you expect.\n\nBoth of these questions may be addressed by posting your actual target XML here.  Maybe the simplification for this example is causing me to miss something.\n",
        "createdAt": "2015-10-19T16:13:55Z",
        "updatedAt": "2015-10-19T16:13:55Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald, I add inputs and outputs to my target. But it still runs on any change in project. Also I remove .target file and add all contents of .target file to .csproj file.\nTest project: https://www.dropbox.com/s/jqfp5aneaqoyocj/TestAfterCompile.zip?dl=0\n",
        "createdAt": "2015-10-20T07:24:44Z",
        "updatedAt": "2015-10-20T07:24:44Z",
        "author": {
          "login": "alex-samuilov"
        }
      },
      {
        "body": "In that zip file, there's a target defined as:\n\n``` xml\n  <Target Name=\"TrueFakeTarget\" AfterTargets=\"AfterCompile\" Inputs=\"\\obj\\Debug\\$(TargetFileName)\" Outputs=\"$(TargetPath)\">\n    <Message Text=\"### AfterCompile ###\" Importance=\"high\" />\n    <Exec Command=\"calc.exe\" />\n  </Target>\n```\n\nThe leading backslash in the Inputs attribute is a path rooted at the current drive, so that's going to wind up looking for `c:\\obj\\Debug\\TestAfterCompile.exe` or similar.\n\nI still don't know exactly what you hope to accomplish with your target, but you might find this better:\n\n``` xml\n  <Target Name=\"TrueFakeTarget\" AfterTargets=\"AfterCompile\" Inputs=\"@(IntermediateAssembly)\" Outputs=\"$(TargetPath)\">\n    <Message Text=\"### AfterCompile ###\" Importance=\"high\" />\n    <Exec Command=\"calc.exe\" />\n  </Target>\n```\n\nNote the `@(IntermediateAssembly)` item reference rather than reconstructing an intermediate path.\n\nHowever, this _still_ won't do what you want, because any change to the project file invalidates the output of CoreCompile.  That's because `C:\\Program Files (x86)\\MSBuild\\14.0\\bin\\Microsoft.CSharp.Core.targets` defines the CoreCompile task like so:\n\n``` xml\n  <Target\n          Name=\"CoreCompile\"\n          Inputs=\"$(MSBuildAllProjects);\n                @(Compile);\n                @(_CoreCompileResourceInputs);\n                $(ApplicationIcon);\n                $(AssemblyOriginatorKeyFile);\n                @(ReferencePath);\n                @(CompiledLicenseFile);\n                @(LinkResource);\n                @(EmbeddedDocumentation);\n                $(Win32Resource);\n                $(Win32Manifest);\n                @(CustomAdditionalCompileInputs);\n                $(ResolvedCodeAnalysisRuleSet)\"\n          Outputs=\"@(DocFileItem);\n                 @(IntermediateAssembly);\n                 @(_DebugSymbolsIntermediatePath);\n                 $(NonExistentFile);\n                 @(CustomAdditionalCompileOutputs)\"\n          Returns=\"@(CscCommandLineArgs)\"\n          DependsOnTargets=\"$(CoreCompileDependsOn)\"\n    >\n```\n\nWhich includes `$(MSBuildAllProjects)` as an input.\n\nWhy?  Because you could, for example, change preprocessor definitions or optimization options between builds, causing a project change but no source file changes.  In those case, you still need to recompile to get the right outputs!\n\nWhen trying to debug incremental build issues, I recommend looking at a diagnostic-level log (from the command line or inside VS).  In this case, I saw these messages, pointing me to what I explained above:\n\n```\nTarget \"CoreCompile: (TargetId:44)\" in file \"C:\\Program Files (x86)\\MSBuild\\14.0\\bin\\Microsoft.CSharp.Core.targets\" from project \"C:\\Users\\raines\\Downloads\\TestAfterCompile\\TestAfterCompile\\TestAfterCompile\\TestAfterCompile.csproj\" (target \"Compile\" depends on it):                                                                                                                                      \nBuilding target \"CoreCompile\" completely.\nInput file \"C:\\Users\\raines\\Downloads\\TestAfterCompile\\TestAfterCompile\\TestAfterCompile\\TestAfterCompile.csproj\" is newer than output file \"obj\\Debug\\TestAfterCompile.pdb\".                           \n```\n\n```\nTarget \"TrueFakeTarget: (TargetId:49)\" in project \"C:\\Users\\raines\\Downloads\\TestAfterCompile\\TestAfterCompile\\TestAfterCompile\\TestAfterCompile.csproj\" (target \"Compile\" depends on it):\nBuilding target \"TrueFakeTarget\" completely.\nInput file \"obj\\Debug\\TestAfterCompile.exe\" is newer than output file \"C:\\Users\\raines\\Downloads\\TestAfterCompile\\TestAfterCompile\\TestAfterCompile\\bin\\Debug\\TestAfterCompile.exe\".\n```\n",
        "createdAt": "2015-10-23T22:31:28Z",
        "updatedAt": "2015-10-23T22:31:28Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Closing this on the assumption that the above was enough information.\n",
        "createdAt": "2016-06-01T19:45:25Z",
        "updatedAt": "2016-06-01T19:45:25Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}