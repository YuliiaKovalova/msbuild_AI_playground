{
  "number": 1888,
  "title": "MSBuild 2017 can't find azure sdk targets file",
  "body": "Hi,\r\n\r\nI'm not quite sure if this is an Azure SDK related issue or a MSBuild issue, so please just close this issue if it's not MSBuild related.\r\n\r\nMy build server (TeamCity Professional 10.0.5 (build 42677)) currently can't build my Azure solution (several C# projects and one F# project), because MSBuild tries to find the `Microsoft.WindowsAzure.targets` in the directory:\r\n\r\n```\r\n\"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\MSBuild\\Microsoft\\VisualStudio\\v15.0\\Windows Azure Tools\\2.9\\\r\n```\r\n\r\nBut it is actually in the directory:\r\n\r\n```\r\n\"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\[VisualStudioVersion]\\MSBuild\\Microsoft\\VisualStudio\\v15.0\\Windows Azure Tools\\2.9\\\r\n```\r\n`[VisualStudioVersion]` can have the following values \"Community\", \"Professional\" ,\"Enterprise\"\r\n\r\nThis issue can be resolved by copying the whole content of the directory, but then I get another error in my F# project:\r\n\r\n> MSB4057: The target \"GetTargetFrameworkProperties\" does not exist in the project.\r\n\r\nThis issue can be resolved by adding the `/p:VisualStudioVersion=15.0` flag to the `MSBuild` task in TeamCity. \r\n\r\n---\r\n\r\nSo yes everything works for me now, but I felt like I should report this. I don't think replacing all files in `C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\` is the way to go. The `/p:VisualStudioVersion=15.0` flag in TeamCity also feels more like a workaround and not like a solution.\r\n\r\nI've already created a question on SO (http://stackoverflow.com/questions/42832371 ), but with now response so far.",
  "state": "CLOSED",
  "createdAt": "2017-03-20T10:27:10Z",
  "updatedAt": "2024-02-21T17:20:32Z",
  "closedAt": "2017-03-20T15:18:50Z",
  "author": {
    "login": "Robar666"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Based on **`BuildTools`** in the path in the location that is being searched for, you have the Build Tools for Visual Studio 2017 package installed, as well as a full install of VS. If you have VS installed, you don't need Build Tools.\r\n\r\nIs your build script invoking the MSBuild.exe from Build Tools directly? If so, you probably just need to invoke the MSBuild.exe from the VS installation where you checked the Azure box in the installer instead.\r\n\r\nIf TeamCity is finding that version of MSBuild for you, you might need to uninstall Build Tools so that it can find a more appropriate one.\r\n\r\n(The root cause of this issue is that Visual Studio now supports side-by-side installations, for example to allow testing [an Update Preview](https://blogs.msdn.microsoft.com/visualstudio/2017/03/16/visual-studio-2017-update-preview-and-windows-10-creators-update-sdk/) without disrupting your primary installation. But the installations may have had different installer options checked, so they may not be all be able to open or build every project. Here, the Build Tools installation is distinct from the VS installations, and doesn't have the Azure targets installed.)",
        "createdAt": "2017-03-20T13:29:03Z",
        "updatedAt": "2017-03-20T13:29:03Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Yep you are right, the TeamCity agent seems to start MSBuild from build tools:\r\n\r\n> /msbuildPath:C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\MSBuild\\15.0\\bin\\amd64\\MSBuild.exe\r\n\r\nI probably need to restart my TeamCity agent to find the correct MSBuild version, after i removed build tools.\r\n\r\n---\r\n\r\nIs there a way to just install the BuildTools with the Azure and F# targets? Those options are not available during the `BuildTools` installation, at least I'm not seeing them. This would be nice because otherwise I always have to install a full VS on the TeamCity agents.",
        "createdAt": "2017-03-20T14:39:23Z",
        "updatedAt": "2017-03-20T14:42:39Z",
        "author": {
          "login": "Robar666"
        }
      },
      {
        "body": "> Those options are not available during the `BuildTools `installation, at least I'm not seeing them.\r\n\r\nThey're really not there. The first release of this Build Tools installer doesn't have nearly enough checkboxes. Teams at Microsoft are trying to improve that for the future (but filing bugs on individual SDKs would help with that--we the MSBuild team don't know every SDK that delivers targets and can't do all the work ourselves, since it often involves splitting up the SDK VSIX into a \"build extension\" part relevant to Build Tools and a \"UI stuff\" part needed for full VS workloads). See for example #1697 for the .NET Core SDK.\r\n\r\nFor now, the guidance remains that you need to install full VS unless Build Tools works for you already.\r\n\r\nI'm going to close this issue since MSBuild itself is working as designed.",
        "createdAt": "2017-03-20T15:18:50Z",
        "updatedAt": "2017-03-20T15:18:50Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "If someone comes here looking for the solution to the similar problem for VS 2019, to resolve this, just pass the following argument to the msbuild.exe command line:\r\n\r\n`\r\n/p:VisualStudioVersion=16.0\r\n`\r\nIt will pickup the targets file from the correct folder with this. Also, the path for msbuild.exe with VS 2019 is:\r\n\r\nC:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\\MSBuild\\Current\\Bin\\amd64\\msbuild.exe\r\n\r\n",
        "createdAt": "2019-04-23T20:35:02Z",
        "updatedAt": "2019-04-23T20:35:02Z",
        "author": {
          "login": "vdevappa"
        }
      }
    ]
  }
}