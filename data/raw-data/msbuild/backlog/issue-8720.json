{
  "number": 8720,
  "title": "[Bug]: Projects with long descriptions (>~16k) don't emit FileVersion in the produced DLLs",
  "body": "### Issue Description\n\nWhen compiling a versioned csproj with a Description property that is bigger than 16k, the FileVersion (+ other attributes) of the DLL stop being emitted.\r\n\r\nI've attached a repro where the `ConsoleApp4` project has a description of length 17k while `ConsoleApp5` has 16k. When compiling the two DLLs and comparing their file attributes:\r\n\r\n<img width=\"269\" alt=\"image\" src=\"https://user-images.githubusercontent.com/20319862/235643198-63fd3258-0981-4add-8876-fd180c5a91cd.png\">\r\n\r\n<img width=\"255\" alt=\"image\" src=\"https://user-images.githubusercontent.com/20319862/235643236-de9cb716-8aa9-42fa-923b-aec712880d45.png\">\r\n\r\nI am not sure why this is happening but if the Description property has a limit shouldn't it be enforced with an error during the build rather than silently passing with missing info in the built DLL?\r\n\r\nMy use case here is I want to bundle the CHANGELOG.md file when I publish packages, so it's reasonable to add a `Substring`, to the `Description` but should I have to do that?\n\n### Steps to Reproduce\n\nSteps to reproduce: \r\n1. Run `dotnet build` on the root of the solution\r\n2. Look at the generated DLLs and the respective bin/Debug folders\r\n\r\n[BugRepro.zip](https://github.com/dotnet/msbuild/files/11372201/BugRepro.zip)\r\n\n\n### Expected Behavior\n\nThe File version / Product version should be populated in ConsoleApp4.dll\n\n### Actual Behavior\n\nThe File version / Product version is empty in ConsoleApp4.dll\n\n### Analysis\n\n_No response_\n\n### Versions & Configurations\n\nmsbuild -version\r\nMSBuild version 17.5.1+f6fdcf537 for .NET Framework\r\n17.5.1.16304\r\n\r\ndotnet --version\r\n7.0.203",
  "state": "OPEN",
  "createdAt": "2023-05-02T10:34:59Z",
  "updatedAt": "2024-01-31T08:14:30Z",
  "closedAt": null,
  "author": {
    "login": "remoba"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Roslyn generates the Win32 version resource from assembly attributes, in [src/Compilers/Core/Portable/CvtRes.cs](https://github.com/dotnet/roslyn/blob/Visual-Studio-2022-Version-17.5/src/Compilers/Core/Portable/CvtRes.cs).  In the resource format, [StringFileInfo](https://learn.microsoft.com/windows/win32/menurc/stringfileinfo) includes `WORD wLength`, so the total size of all version strings for a single language cannot exceed 64k bytes. I'm surprised that you already hit a limit at 16k characters.\r\n\r\nIn your [BugRepro.zip](https://github.com/dotnet/msbuild/files/11372201/BugRepro.zip), the version resource of `ConsoleApp4/bin/Debug/net7.0/ConsoleApp4.dll` includes a [String](https://learn.microsoft.com/windows/win32/menurc/string-str) structure with szKey = L\"Comments\" and Value = a long string, starting at file offset 0x4d34. I suppose the \"Properties\" dialog box just refuses to display that.\r\n\r\nThe GetAssemblyAttributes target in [Microsoft.NET.GenerateAssemblyInfo.targets](https://github.com/dotnet/sdk/blob/v7.0.203/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.GenerateAssemblyInfo.targets) generates AssemblyDescriptionAttribute from the Description property. I think you should set the PackageDescription property rather than Description, so that it applies only to the NuGet package and not to the assembly; or even include the change log as a file in the package and refer to it via [PackageReadmeFile](https://learn.microsoft.com/nuget/reference/msbuild-targets#packagereadmefile).",
        "createdAt": "2023-05-02T11:20:33Z",
        "updatedAt": "2023-05-02T20:12:32Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "@KalleOlaviNiemitalo Thank you, I will try your suggested workarounds and update here.\r\n\r\nNote that my main concern is that devs will be able to see the changelog in the NuGet Manager view in Visual Studio (This is why I am bundling the changelog file in the Description property and not just the PackageReleaseNotes), hopefully using PackageReadmeFile will work in this sense.",
        "createdAt": "2023-05-02T12:09:34Z",
        "updatedAt": "2023-05-02T12:09:34Z",
        "author": {
          "login": "remoba"
        }
      },
      {
        "body": "Can confirm using PackageDescription works just as well and doesn't have this limit so I will switch over to using it. Packaging with `PackageReadmeFile` doesn't seem to show up in the VS NuGet Manager view or in the Azure DevOps feed view so I don't think it fits my scenario.\r\n\r\nI can close this since my problem is resolved but in general don't you think the build process should produce an error (or at least a warning) in cases where the mentioned limit is reached?",
        "createdAt": "2023-05-02T13:27:50Z",
        "updatedAt": "2023-05-02T13:27:50Z",
        "author": {
          "login": "remoba"
        }
      },
      {
        "body": "I'm not sure what the actual limit is, and whether it applies to the single string or perhaps to the total size of the version resource. The C# compiler was able to write the version resource, but Windows did not display it.  Does Windows document a limit?",
        "createdAt": "2023-05-02T14:47:50Z",
        "updatedAt": "2023-05-02T14:47:50Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "I mean, if Windows has a limit but does not document it, then it could change between versions of Windows, and it would seem wrong to hardcode that limit in .NET.\r\n\r\nI suppose something in .NET SDK could warn if the description, or the whole version resource, is suspiciously large. The warning threshold could then be set much lower than 16k characters.  For example, 500 characters would already be very inconvenient to scroll in the Properties dialog box.",
        "createdAt": "2023-05-02T14:58:54Z",
        "updatedAt": "2023-05-02T14:58:54Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "Some developers might have to include lot of text in the LegalCopyright or LegalTrademarks strings of the version resource in order to satisfy lawyers, even if they know that users won't be easily able to read all the text from there.  Those developers could just disable the new warning, though.",
        "createdAt": "2023-05-02T18:49:15Z",
        "updatedAt": "2023-05-02T18:49:15Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      }
    ]
  }
}