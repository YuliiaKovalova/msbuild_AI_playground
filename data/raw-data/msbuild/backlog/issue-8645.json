{
  "number": 8645,
  "title": "Unable to build WiX3 projects",
  "body": "### Issue Description\n\n[Ported from [AB#1790945](https://devdiv.visualstudio.com/0bdbc590-a062-4c3f-b0f6-9383f67865ee/_workitems/edit/1790945)]\r\n\r\nTasks that run in a .NET 3.5 task host and return metadata fail with MSB4028.\r\n\n\n### Steps to Reproduce\n\n- Install NetFx3.5\r\n- Install VS 2022 Preview 3 (I\u2019m on VisualStudio.17.int.d17.6/17.6.0-pre.3.0+33603.384.d17.6)\r\n- Install WiX311 toolset (https://github.com/wixtoolset/wix3/releases/tag/wix3112rtm)\r\n- Open VS developer command prompt and go to the folder where the WiX project is\r\n- `msbuild`\n\n### Expected Behavior\n\nProject build fine\n\n### Actual Behavior\n\n```\r\nerror MSB4028: The \u201cGenerateCompileWithObjectPath\u201d task\u2019s outputs could not be retrieved from the \u201cCompileWithObjectPath\u201d parameter. Specified cast is not valid.\r\n```\n\n### Analysis\n\nStack at break:\r\n\r\n```\r\n \tSystem.Core.dll!System.Linq.Enumerable.CastIterator<System.Collections.Generic.KeyValuePair<string, string>>(System.Collections.IEnumerable source) Line 1039\tC#\r\n \tSystem.Core.dll!System.Linq.Enumerable.WhereSelectEnumerableIterator<System.Collections.Generic.KeyValuePair<string, string>, System.Collections.Generic.KeyValuePair<string, string>>.MoveNext() Line 396\tC#\r\n \tSystem.Core.dll!System.Linq.Enumerable.WhereSelectEnumerableIterator<System.Collections.Generic.KeyValuePair<string, string>, Microsoft.Build.Execution.ProjectMetadataInstance>.MoveNext() Line 396\tC#\r\n>\tMicrosoft.Build.dll!Microsoft.Build.Collections.CopyOnWritePropertyDictionary<Microsoft.Build.Execution.ProjectMetadataInstance>.ImportProperties.__Items|0() Line 294\tC#\r\n \tSystem.Collections.Immutable.dll!System.Collections.Immutable.ImmutableDictionary<string, Microsoft.Build.Execution.ProjectMetadataInstance>.AddRange(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, Microsoft.Build.Execution.ProjectMetadataInstance>> items, System.Collections.Immutable.ImmutableDictionary<string, Microsoft.Build.Execution.ProjectMetadataInstance>.MutationInput origin, System.Collections.Immutable.ImmutableDictionary<string, Microsoft.Build.Execution.ProjectMetadataInstance>.KeyCollisionBehavior collisionBehavior) Line 956\tC#\r\n \tSystem.Collections.Immutable.dll!System.Collections.Immutable.ImmutableDictionary<string, Microsoft.Build.Execution.ProjectMetadataInstance>.SetItems(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, Microsoft.Build.Execution.ProjectMetadataInstance>> items) Line 337\tC#\r\n \tMicrosoft.Build.dll!Microsoft.Build.Collections.CopyOnWritePropertyDictionary<Microsoft.Build.Execution.ProjectMetadataInstance>.ImportProperties(System.Collections.Generic.IEnumerable<Microsoft.Build.Execution.ProjectMetadataInstance> other) Line 290\tC#\r\n \tMicrosoft.Build.dll!Microsoft.Build.BackEnd.TaskExecutionHost.GatherTaskItemOutputs(bool outputTargetIsItem, string outputTargetName, Microsoft.Build.Framework.ITaskItem[] outputs, Microsoft.Build.Construction.ElementLocation parameterLocation, Microsoft.Build.Framework.TaskPropertyInfo parameter) Line 1399\tC#\r\n \tMicrosoft.Build.dll!Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.GatherTaskOutputs(string parameterName, Microsoft.Build.Construction.ElementLocation parameterLocation, bool outputTargetIsItem, string outputTargetName) Line 432\tC#\r\n \tMicrosoft.Build.dll!Microsoft.Build.BackEnd.TaskBuilder.GatherTaskOutputs(Microsoft.Build.BackEnd.ITaskExecutionHost taskExecutionHost, Microsoft.Build.BackEnd.TaskExecutionMode howToExecuteTask, Microsoft.Build.BackEnd.ItemBucket bucket) Line 1142\tC#\r\n \tMicrosoft.Build.dll!Microsoft.Build.BackEnd.TaskBuilder.ExecuteInstantiatedTask(Microsoft.Build.BackEnd.ITaskExecutionHost taskExecutionHost, Microsoft.Build.BackEnd.Logging.TaskLoggingContext taskLoggingContext, Microsoft.Build.BackEnd.TaskHost taskHost, Microsoft.Build.BackEnd.ItemBucket bucket, Microsoft.Build.BackEnd.TaskExecutionMode howToExecuteTask) Line 978\tC#\r\n \tMicrosoft.Build.dll!Microsoft.Build.BackEnd.TaskBuilder.InitializeAndExecuteTask(Microsoft.Build.BackEnd.Logging.TaskLoggingContext taskLoggingContext, Microsoft.Build.BackEnd.ItemBucket bucket, System.Collections.Generic.IDictionary<string, string> taskIdentityParameters, Microsoft.Build.BackEnd.TaskHost taskHost, Microsoft.Build.BackEnd.TaskExecutionMode howToExecuteTask) Line 660\tC#\r\n \tMicrosoft.Build.dll!Microsoft.Build.BackEnd.TaskBuilder.ExecuteBucket(Microsoft.Build.BackEnd.TaskHost taskHost, Microsoft.Build.BackEnd.ItemBucket bucket, Microsoft.Build.BackEnd.TaskExecutionMode howToExecuteTask, System.Collections.Generic.Dictionary<string, string> lookupHash) Line 443\tC#\r\n \tMicrosoft.Build.dll!Microsoft.Build.BackEnd.TaskBuilder.ExecuteTask(Microsoft.Build.BackEnd.TaskExecutionMode mode, Microsoft.Build.BackEnd.Lookup lookup) Line 332\tC#\r\n \tMicrosoft.Build.dll!Microsoft.Build.BackEnd.TaskBuilder.ExecuteTask(Microsoft.Build.BackEnd.Logging.TargetLoggingContext loggingContext, Microsoft.Build.BackEnd.BuildRequestEntry requestEntry, Microsoft.Build.BackEnd.ITargetBuilderCallback targetBuilderCallback, Microsoft.Build.Execution.ProjectTargetInstanceChild taskInstance, Microsoft.Build.BackEnd.TaskExecutionMode mode, Microsoft.Build.BackEnd.Lookup inferLookup, Microsoft.Build.BackEnd.Lookup executeLookup, System.Threading.CancellationToken cancellationToken) Line 184\tC#\r\n \tMicrosoft.Build.dll!Microsoft.Build.BackEnd.TargetEntry.ProcessBucket(Microsoft.Build.BackEnd.ITaskBuilder taskBuilder, Microsoft.Build.BackEnd.Logging.TargetLoggingContext targetLoggingContext, Microsoft.Build.BackEnd.TaskExecutionMode mode, Microsoft.Build.BackEnd.Lookup lookupForInference, Microsoft.Build.BackEnd.Lookup lookupForExecution) Line 805\tC#\r\n \tMicrosoft.Build.dll!Microsoft.Build.BackEnd.TargetEntry.ExecuteTarget(Microsoft.Build.BackEnd.ITaskBuilder taskBuilder, Microsoft.Build.BackEnd.BuildRequestEntry requestEntry, Microsoft.Build.BackEnd.Logging.ProjectLoggingContext projectLoggingContext, System.Threading.CancellationToken cancellationToken) Line 501\tC#\r\n \tMicrosoft.Build.dll!Microsoft.Build.BackEnd.TargetBuilder.ProcessTargetStack(Microsoft.Build.BackEnd.ITaskBuilder taskBuilder) Line 485\tC#\r\n \tMicrosoft.Build.dll!Microsoft.Build.BackEnd.TargetBuilder.BuildTargets(Microsoft.Build.BackEnd.Logging.ProjectLoggingContext loggingContext, Microsoft.Build.BackEnd.BuildRequestEntry entry, Microsoft.Build.BackEnd.IRequestBuilderCallback callback, string[] targetNames, Microsoft.Build.BackEnd.Lookup baseLookup, System.Threading.CancellationToken cancellationToken) Line 165\tC#\r\n \tMicrosoft.Build.dll!Microsoft.Build.BackEnd.RequestBuilder.BuildProject() Line 1228\tC#\r\n```\n\n### Versions & Configurations\n\nWorking version of msbuild: MSBuild version 17.6.0-preview-23122-03+f93b24b5a for .NET Framework - 17.6.0.12203)\r\n\r\nBroken version of msbuild: (MSBuild version 17.6.0+61dd65684 for .NET Framework; 17.6.0.18004)\r\n",
  "state": "CLOSED",
  "createdAt": "2023-04-07T16:01:02Z",
  "updatedAt": "2024-02-21T14:05:21Z",
  "closedAt": "2023-04-12T22:20:27Z",
  "author": {
    "login": "rainersigwald"
  },
  "labels": [
    "bug",
    "regression",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "rainersigwald"
      }
    ]
  },
  "milestone": {
    "title": "VS 17.6"
  },
  "comments": {
    "nodes": [
      {
        "body": "This is a regression caused by #8240.\r\n\r\nWe're iterating over a `System.Collections.Hashtable` in this case rather than a dictionary, because `output` in \r\n\r\nhttps://github.com/dotnet/msbuild/blob/cfc1d400eafec60a34d6e0ac4b0979054c03227a/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs#L1398-L1400\r\n\r\nis a `Microsoft.Build.Utilities.TaskItem` from `Microsoft.Build.Utilities, Version=2.0.0.0`, not the modern one. So it's still an `IDictionary` but doesn't work with the cast.\r\n",
        "createdAt": "2023-04-07T16:01:39Z",
        "updatedAt": "2023-04-07T16:24:51Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "It turns out this doesn't happen when the net3.5-targeted tasks run in a taskhost, only when they run in-proc. So there's a workaround: force them to run out-of-proc. The sample project can be worked around with:\r\n\r\n```diff\r\ndiff --git a/SetupProject1.wixproj b/SetupProject1.wixproj\r\nindex 3c21849..290cbfe 100644\r\n--- a/SetupProject1.wixproj\r\n+++ b/SetupProject1.wixproj\r\n@@ -26,6 +26,8 @@\r\n   <Target Name=\"EnsureWixToolsetInstalled\" Condition=\" '$(WixTargetsImported)' != 'true' \">\r\n     <Error Text=\"The WiX Toolset v3.11 build tools must be installed to build this project. To download the WiX Toolset, see https://wixtoolset.org/releases/v3.11/stable\" />\r\n   </Target>\r\n+  <UsingTask TaskName=\"GenerateCompileWithObjectPath\" AssemblyFile=\"$(WixTasksPath)\" Override=\"true\" Runtime=\"CLR2\" />\r\n+  <UsingTask TaskName=\"WixAssignCulture\" AssemblyFile=\"$(WixTasksPath)\" Override=\"true\" Runtime=\"CLR2\" />\r\n   <!--\r\n \tTo modify your build process, add your task inside one of the targets below and uncomment it.\r\n \tOther similar extension points exist, see Wix.targets.\r\n```",
        "createdAt": "2023-04-07T16:19:07Z",
        "updatedAt": "2023-04-07T16:19:07Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "fyi @marcin-krystianc -- but I want to be super clear that this isn't about blame or anything, just letting you know.",
        "createdAt": "2023-04-07T16:24:59Z",
        "updatedAt": "2023-04-07T16:25:14Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}