{
  "number": 6710,
  "title": "Investigate leveraging ArrayPool",
  "body": "We are introducing ArrayPool in #6705.\r\n\r\nBy quick analyze I have identified following areas which might leverage from buffers pool.\r\n\r\n- [x] `InterningBinaryReader._buffer` - Since _buffer is used only in `ReadString` we can simplify code, delete _buffer and its initialization from call stacks and just `Rent\\Return` buffer of destination string size in the `ReadString` method.\r\n- [x] Avoid `BinaryReader.ReadBytes` and related `Translate(ref byte[] byteArray)` - good candidate is `TargetResult.TranslateItems`\r\n- [x] Consider using `RecyclableMemoryStream` (or some equivalent using `ArrayPool.Shared`) in places where our current usage of `MemoryStream` is allocating a  lot.\r\n- [x] Others - yet to be identified.\r\n",
  "state": "CLOSED",
  "createdAt": "2021-07-26T13:20:08Z",
  "updatedAt": "2024-02-21T14:12:24Z",
  "closedAt": "2021-11-15T19:26:19Z",
  "author": {
    "login": "rokonec"
  },
  "labels": [
    "backlog",
    "Area: Performance",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "rokonec"
      }
    ]
  },
  "milestone": {
    "title": "VS 17.1"
  },
  "comments": {
    "nodes": [
      {
        "body": "Although we can replace `public void Translate(ref byte[] byteArray)` by `public void Translate(ref byte[] byteArray, ref int length)` its actual allocation portion is < 0.09%",
        "createdAt": "2021-11-12T18:43:48Z",
        "updatedAt": "2021-11-12T18:43:48Z",
        "author": {
          "login": "rokonec"
        }
      },
      {
        "body": "Using `RecyclableMemoryStream` would not bring as much gain as originally though. Our code already uses somehow shared MemoryStream in most hot places. \r\n\r\nWe would more leverage from using reusable `BinaryReader` and/or `BinaryWritter` as we create both classes for every packet and both classes lazy allocates couple of working buffers.",
        "createdAt": "2021-11-12T18:56:24Z",
        "updatedAt": "2021-11-12T18:56:24Z",
        "author": {
          "login": "rokonec"
        }
      },
      {
        "body": "I have not identified other places where using ArrayPool<T> would bring measurable performance benefit.",
        "createdAt": "2021-11-12T18:58:00Z",
        "updatedAt": "2021-11-12T18:58:00Z",
        "author": {
          "login": "rokonec"
        }
      },
      {
        "body": "@ladipro @AR-May\r\nPlease check my conclusion. Lets discuss sometimes if we want to invest into reusable `BinaryReader` and/or `BinaryWritter` as started above.",
        "createdAt": "2021-11-12T19:17:03Z",
        "updatedAt": "2021-11-12T19:17:03Z",
        "author": {
          "login": "rokonec"
        }
      },
      {
        "body": "@rokonec thank you, what you wrote makes perfect sense. Is it possible to quantify the impact of building a reusable `BinaryReader` and `BinaryWriter`? In terms of % of allocations saved when building a large solution, or something similar.",
        "createdAt": "2021-11-15T08:10:38Z",
        "updatedAt": "2021-11-15T08:10:38Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "@ladipro I was mislead by `dotMemory` tool I am evaluating. I expected percentage was from overall memory but it was from given type - in this case `byte[]`\r\nI have measured it again and and it is bellow 0.1% of memory usage I do not longer recommend to invest into it. \r\n\r\nSorry for this mistake.",
        "createdAt": "2021-11-15T19:26:14Z",
        "updatedAt": "2021-11-15T20:49:54Z",
        "author": {
          "login": "rokonec"
        }
      }
    ]
  }
}