{
  "number": 3137,
  "title": "Avoid crosstalk between same-MSBuild-but-different-SDKs nodes",
  "body": "~We should add the environment variables `DOTNET_HOST_PATH` and `DOTNET_ROOT` to the node-compatibility handshake computation.~\r\n\r\n### Steps to reproduce\r\n\r\n* Have two copies of the .NET Core SDK that use the same version of MSBuild but that aren't identical\r\n* Run a build with copy A (created nodes will wait for reuse after the build completes)\r\n* Run a build with copy B\r\n\r\n### Expected  behavior\r\n\r\nThe build in copy B's dotnet host does not reuse nodes from copy A\r\n\r\n### Actual behavior\r\n\r\nThis will be mostly true now, because the handshake includes `AssemblyTimestamp` which is `LastWriteTime` which will _probably_ be distinct, but isn't necessarily.\r\n",
  "state": "CLOSED",
  "createdAt": "2018-03-27T15:12:03Z",
  "updatedAt": "2024-02-21T17:13:56Z",
  "closedAt": "2019-11-14T21:45:44Z",
  "author": {
    "login": "rainersigwald"
  },
  "labels": [
    ".NET Core",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "MSBuild 16.5"
  },
  "comments": {
    "nodes": [
      {
        "body": "@viktorhofer and I just noticed this with two clones of repositories which have a local copy of a CLI (eg: .dotnet folder).  One repo will reuse nodes from another, resulting in errors if they consume different task DLLs (or different SDKs).  I've also had to field a number of issues from various teams hitting similar problems.\r\n\r\nCan you just use the full path to msbuild assembly rather than considering environment variables?",
        "createdAt": "2019-05-14T20:53:38Z",
        "updatedAt": "2019-05-14T20:53:38Z",
        "author": {
          "login": "ericstj"
        }
      },
      {
        "body": "I have a somewhat related situation where the mentioned MSBUILD_ISOLATION_KEY proposal might work/be useful.\r\n\r\nMSBuild.exe A.sln with different projects\r\n    MSBuild.exe  Node 1\r\n    MSBuild.exe  Node 2\r\n    MSBuild.exe  Node 3\r\n       Cmd.exe running an external command that calls MSBuild\r\n           MSBuild.exe for B.sln\r\n\r\nIs it possible to have MSBuild for B.sln to connect to/reuse Node 1 and 2 for building B.sln instead of spawning its own child nodes?\r\n\r\nOr would this break things in weird ways?",
        "createdAt": "2019-09-20T12:54:04Z",
        "updatedAt": "2019-09-20T12:54:04Z",
        "author": {
          "login": "japj"
        }
      },
      {
        "body": "@japj, is the `msbuild.exe` invocation for `B.sln` happening inside a task started by the `A.sln` build? If so, you should already be fine, because nodes 1, 2, and 3 should still be busy and not accepting new connections for the duration of the `A.sln` build.",
        "createdAt": "2019-09-20T14:41:45Z",
        "updatedAt": "2019-09-20T14:41:45Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Also, I think you might be interested in microsoft/msbuild#4337 :)",
        "createdAt": "2019-09-20T14:42:54Z",
        "updatedAt": "2019-09-20T14:42:54Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Interesting, I think #4337 would solve our problem.  We could use the path to the local .dotnet folder as the salt.  Seems like a reasonable arcade change.",
        "createdAt": "2019-09-20T16:36:43Z",
        "updatedAt": "2019-09-20T16:36:43Z",
        "author": {
          "login": "ericstj"
        }
      }
    ]
  }
}