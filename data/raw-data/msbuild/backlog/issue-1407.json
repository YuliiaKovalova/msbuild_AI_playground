{
  "number": 1407,
  "title": "Hard linking and NuGet cache",
  "body": "Recently we decided to measure the impact of using hard linking in the [dotnet/roslyn repo](https://github.com/dotnet/roslyn).  The benefits were substantial: \r\n\r\n| | Build Time | Output Dir Size|\r\n| --- | --- | --- | \r\n| No hard linking | 3:38 | 6.27 GB | \r\n| Hard linking | 2:40 | 0.84 GB |\r\n\r\nYet even with these benefits there is still significant push back on the team on adopting hard linking.  The reason is that much of the savings generated above come from hard linking into NuGet assets that come from the NuGet cache.  The NuGet cache is modifiable by the developer who ran the build.  Hence when using hard links it means the developer can easily corrupt their NuGet cache by modifying the content in the build output directory.\r\n\r\nCorruption of the NuGet cache is incredibly frustrating for developers.  It results in hard to track down errors and, because it's shared amongst repos, allows for changes in one repo to inadvertently affect the build of another repo. \r\n\r\nOn the surface this may seem like a rare case but in practice it's quite common:\r\n\r\n- Developer runs a test script that copies files into the output directory.  \r\n- Developer incorrectly modifies a build script such that double writes occur during build. \r\n\r\nAny of these can inadvertently target a file which is in reality a hard link to the NuGet cache and in turn silently corrupt it.  In fact this is pretty much what happened every time in the past when we enabled hard linking.  It's frustrating because it has a real impact on developer productivity (faster builds) but can't enable it due to fragility. \r\n\r\nAfter talking this over with a few people I wanted to make the following suggestion feature for hard linking:\r\n\r\n> Provide an option to allow hard linking within the output directory.\r\n\r\nThis means that hard links would only point to files within the output directory.  The first time an asset was copied into the output directory a full copy would occur.  The second time a hard link to that copy would occur. \r\n\r\nThis would give a substantial benefit to larger projects while avoiding some of the pitfalls of full hard linking:\r\n\r\n- Deleting the output directory would fix any corruption issues.\r\n- No cross repo contamination. \r\n\r\nSeems like the best compromise for performance and reliability. \r\n",
  "state": "CLOSED",
  "createdAt": "2016-11-29T22:55:29Z",
  "updatedAt": "2024-02-21T17:23:54Z",
  "closedAt": "2019-11-04T21:19:57Z",
  "author": {
    "login": "jaredpar"
  },
  "labels": [
    "backlog",
    "Feature Request",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Backlog"
  },
  "comments": {
    "nodes": [
      {
        "body": "Shame we can't have some kind of copy-on-write hard link so the corruption can't happen.",
        "createdAt": "2016-11-29T23:02:47Z",
        "updatedAt": "2016-11-29T23:02:47Z",
        "author": {
          "login": "DamianEdwards"
        }
      },
      {
        "body": "@jaredpar what about having NuGet cache per solution directory and hardlinking to it? In case of an error it can be easily cleaned and re-restored, on other hand initial restore would take a bit longer.",
        "createdAt": "2016-11-29T23:09:18Z",
        "updatedAt": "2016-11-29T23:09:18Z",
        "author": {
          "login": "pakrym"
        }
      },
      {
        "body": "Yeah, ReFS copy-on-write will fix everything for this . . . too bad that's a tiny subset of MSBuild uses \ud83d\ude1e\r\n\r\nThis sounds like two related requests:\r\n\r\n* An argument to the `Copy` task along the lines of `AllowHardlinksOnlyToDestinationsUnder=\"path\"`\r\n* Knowledge of the \"whole build\" output root, so you can hardlink outputs of other projects within your build (solution/repo root/whatever).\r\n\r\nRight now a project knows its own obj and bin directories, but that's not the right granularity for the scenario you're describing.",
        "createdAt": "2016-11-29T23:12:20Z",
        "updatedAt": "2016-11-29T23:12:20Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald ah didn't realize that was a possibility with ReFS.  Yes that would definitely be a better option here. ",
        "createdAt": "2016-11-29T23:17:27Z",
        "updatedAt": "2016-11-29T23:17:27Z",
        "author": {
          "login": "jaredpar"
        }
      },
      {
        "body": "@jaredpar I thought it was (or was planned) but I can't find any corroboration for that . . .",
        "createdAt": "2016-11-29T23:18:13Z",
        "updatedAt": "2016-11-29T23:18:13Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@pakrym we discussed that but it's only a solution for local developers.  In our CI environment we need to use a global cache that persists between runs in order to keep our CI system running at a decent pace.  Otherwise we're downloading 1+GB of NuGet packages per run. \r\n",
        "createdAt": "2016-11-29T23:18:40Z",
        "updatedAt": "2016-11-29T23:18:40Z",
        "author": {
          "login": "jaredpar"
        }
      },
      {
        "body": "@jaredpar set ACLs on hardlinks to be read-only, so it will crash anything that tries to modify files :)",
        "createdAt": "2016-11-29T23:21:00Z",
        "updatedAt": "2016-11-29T23:21:00Z",
        "author": {
          "login": "pakrym"
        }
      },
      {
        "body": "@pakrym too many star wars fans here that use the \"force\" when copying \ud83d\ude04 ",
        "createdAt": "2016-11-29T23:21:43Z",
        "updatedAt": "2016-11-29T23:21:43Z",
        "author": {
          "login": "jaredpar"
        }
      },
      {
        "body": "@jaredpar I'm talking about security permission, it should stop `-Force` as well",
        "createdAt": "2016-11-29T23:26:11Z",
        "updatedAt": "2016-11-29T23:26:11Z",
        "author": {
          "login": "pakrym"
        }
      },
      {
        "body": "@jaredpar this is promising for your scenario: https://blogs.windows.com/buildingapps/2016/12/02/symlinks-windows-10\r\n\r\nI filed #1430 to see if anything's broken.",
        "createdAt": "2016-12-03T20:44:26Z",
        "updatedAt": "2016-12-03T20:44:26Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Hi !\r\n\r\nDo we have any updates here?",
        "createdAt": "2019-01-16T11:40:46Z",
        "updatedAt": "2019-01-16T11:40:46Z",
        "author": {
          "login": "imanushin"
        }
      },
      {
        "body": "Team Triage: this is something that we don't believe we will get to in the medium to longer term. So, closing this issue for now.",
        "createdAt": "2019-11-04T21:19:57Z",
        "updatedAt": "2019-11-04T21:19:57Z",
        "author": {
          "login": "livarcocc"
        }
      }
    ]
  }
}