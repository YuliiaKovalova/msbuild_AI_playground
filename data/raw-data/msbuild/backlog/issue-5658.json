{
  "number": 5658,
  "title": "Resource Names Case Insensitive - Why?",
  "body": "I am working in a project that need to have localization.\r\n\r\nWhen compiles, I get a warn that I have duplicate resourne names.\r\n\r\nLookng the resource, they are not duplicate, the problem is that it uses case-insensitive, causing resources name like 'total' be the same of 'TOTAL' or 'Total'.\r\n\r\n```\r\n  <data name=\"Total\">\r\n    <value>Total</value>\r\n  </data>\r\n  <data name=\"TOTAL\">\r\n    <value>TOTAL</value>\r\n  </data>\r\n```\r\n\r\nIs this correct to behave like this ? How can I do an work around? I have a list of more than 200 duplicates and will me impossible to do by hand this... would be possible to do a bypass on this check?\r\n\r\nI am using .Net Core 2.2 on my Mac OSx and I have an API project that gets the SharedResource from another project (Class library)\r\n\r\nHere is the call:\r\n\r\nhttps://github.com/dotnet/msbuild/blob/df645299a158c787f9884fca2bcd8c295318193f/src/Tasks/GenerateResource.cs#L2090\r\n\r\nHere is where I think the problem is: \r\n\r\nhttps://github.com/dotnet/msbuild/blob/df645299a158c787f9884fca2bcd8c295318193f/src/Tasks/GenerateResource.cs#L1467",
  "state": "OPEN",
  "createdAt": "2020-08-15T20:32:50Z",
  "updatedAt": "2025-02-17T09:23:49Z",
  "closedAt": null,
  "author": {
    "login": "PtkFerraro"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "Area: Task: GenerateResource",
    "triaged"
  ],
  "comments": {
    "nodes": [
      {
        "body": "Thanks for filing the issue. The change seems like a relatively easy fix, my concern is how this affects customers who have grown to expect this behavior. Consider that it's been this way for 8 years.\r\n\r\nShould we choose to create a workaround: The only way I see working around this is checking if an environment variable is set. Such as `MSBUILDCASESENSITIVERESOURCES`. When set we can change the string comparer to `StringComparer.Ordinal`",
        "createdAt": "2020-08-19T17:55:52Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "Many parts of MSBuild are case-insensitive, and changing them all to be sometimes case sensitive would cause a lot of confusion up front. Having a mix of case-sensitive and case-insensitive parts is probably even worse over the long term.\r\n\r\nThe easiest workaround I can think of is to write a script that modifies the names to be more substantially different\u2014perhaps adding a random string, a hash, or a set of flags (0000 for all lower-case vs. 0110 for the middle two letters upper-case, for example) to each resource name. Would that work for you?",
        "createdAt": "2020-08-19T21:58:11Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "@Forgind That\u00b4s what I did. I have a script that grabs all localizer words and generates a spreadsheet. I made a change to add a hash in the end.\r\n\r\nI am wondering why in C# (Case Sensitive) on machines Linux/Mac (Case Sensiteve),  the MSBUILd uses Insensitive for some parts...\r\n\r\ncheers\r\n",
        "createdAt": "2020-08-21T00:29:11Z",
        "author": {
          "login": "PtkFerraro"
        }
      },
      {
        "body": "I don't have a great answer for you; perhaps someone has a better idea. The biggest issue in my mind is that a build should succeed or fail in exactly the same way on any OS. It's relatively easy to find examples in which, if we always took into account your OS's casing preferences, that wouldn't be true, and it could cause very confusing errors.\r\n\r\nA second aspect is that there are certain parts of MSBuild (like properties) that are always case-insensitive. That design decision was likely made with Windows in mind. Having some parts of MSBuild always case-insensitive and other parts depend on your OS is confusing, but trying to make everything depend on your OS would be a major breaking change at this point. I wish I could give you a better answer.",
        "createdAt": "2020-08-21T19:43:33Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "+1. Major issue. It is absolutely necessary to differentiate the casing.",
        "createdAt": "2025-02-17T09:23:48Z",
        "author": {
          "login": "VassilisM"
        }
      }
    ]
  }
}