{
  "number": 7466,
  "title": "MSBuild hangs and eventually times out for OOP builds queued from .NET 6 process running in VS apphost",
  "body": "### Issue Description\r\n\r\nI have a .NET console app that uses the MSBuildLocator and executes out-of-proc builds using the MSBuild `BuildManager`. \r\nWhen my console app is executed or debugged from VS, this build hangs before it begins. About 2 minutes later the build fails with an exception about a failure to spawn and communicate with the child process.\r\n\r\nThe MSBUILDDEBUGCOMM log is here: [MSBuild_CommTrace_PID_115004.txt](https://github.com/dotnet/msbuild/files/8246257/MSBuild_CommTrace_PID_115004.txt)\r\n\r\n@rainersigwald looked at this and gave me a workaround, which is to set the `UseAppHost` msbuild property to `false` in my project file. ",
  "state": "CLOSED",
  "createdAt": "2022-03-14T15:31:20Z",
  "updatedAt": "2024-02-21T14:09:21Z",
  "closedAt": "2022-08-10T23:37:50Z",
  "author": {
    "login": "AArnott"
  },
  "labels": [
    "bug",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": ".NET 7.0"
  },
  "comments": {
    "nodes": [
      {
        "body": "The workaround of setting `UseAppHost` is ineffective when the project builds as a dotnet CLI tool, since the `dotnet tool install` command creates a new apphost .exe.\r\nSo to solve that, I'm adding this to my Main method:\r\n\r\n```cs\r\n// HACKHACK: https://github.com/dotnet/msbuild/issues/7466 requires us to have dotnet.exe as our process name.\r\n// Although we set UseAppHost in the project file, the \"dotnet tool\" installer creates an .exe stub for us,\r\n// so we have to escape that by spawning dotnet.exe with our own managed assembly as an argument.\r\nif (!string.Equals(\"dotnet\", Path.GetFileNameWithoutExtension(Environment.ProcessPath)))\r\n{\r\n    Console.WriteLine(\"Redirecting to dotnet.exe...\");\r\n    ProcessStartInfo psi = new ProcessStartInfo(\"dotnet\");\r\n    psi.ArgumentList.Add(Assembly.GetExecutingAssembly().Location);\r\n    foreach (string arg in args)\r\n    {\r\n        psi.ArgumentList.Add(arg);\r\n    }\r\n\r\n    Process? p = Process.Start(psi);\r\n    Assumes.NotNull(p);\r\n    await p.WaitForExitAsync();\r\n    return p.ExitCode;\r\n}\r\n```\r\n\r\nObviously blindly invoking `dotnet` and hoping it's on PATH (and the right one) is not good.",
        "createdAt": "2022-04-06T18:27:00Z",
        "updatedAt": "2022-04-06T18:27:30Z",
        "author": {
          "login": "AArnott"
        }
      },
      {
        "body": "You can do what the `dotnet` and `AppHost` does internally using the `C` APIs from `hostfxr` lib but that may be overkill.\n\nThis calls for a `.NETLocator` similar to `MSBuildLocator`!",
        "createdAt": "2022-04-23T02:59:55Z",
        "updatedAt": "2022-04-23T02:59:55Z",
        "author": {
          "login": "Nirmal4G"
        }
      },
      {
        "body": "Yes, this is the negative symptom that would be resolved by microsoft/MSBuildLocator#111.",
        "createdAt": "2022-04-25T13:54:53Z",
        "updatedAt": "2022-04-25T13:54:53Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}