{
  "number": 11168,
  "title": "Roslyn crashes when reporting an error with an \"unusual\" compilation unit name",
  "body": "**Version Used**:  .NET 9.0.100\n\n**Steps to Reproduce**:\n\n1. Create a new console application (`dotnet new console`)\n2. Edit Program.cs to:\n\n```csharp\n#line 100 \":invalid:\"\nint x = 5.0;\n```\n\n3. Run `dotnet build`\n\n**Expected Behavior**:\n\nNormal error messages without a crash.\n\n**Actual Behavior**:\n\n```text\nC:\\Program Files\\dotnet\\sdk\\9.0.100\\Roslyn\\Microsoft.CSharp.Core.targets(89,5): error MSB6006: \"csc.dll\" exited with code 1.\n```\n\n**Notes**:\n\n- Visual Studio indicates csc.dll exiting with code 1 as well\n- This is not reproducible in SharpLab - I suspect it's injecting its own `#line` directives\n- Changing `\":invalid:\"` to `\"valid\"` produces normal error messages.\n- Names of `\".\"`, `\"..\"` and `\"...\"` produce some interesting results\n- Changing the code to only produce a warning (e.g. just `int x = 5;` which results in CS0219) when using `\":invalid:\"` is weird - the build succeeds without issuing a warning at all\n",
  "state": "OPEN",
  "createdAt": "2024-12-12T12:39:04Z",
  "updatedAt": "2025-01-09T17:54:58Z",
  "closedAt": null,
  "author": {
    "login": "jskeet"
  },
  "milestone": {
    "title": "Backlog"
  },
  "assignees": {
    "nodes": []
  },
  "labels": [
    "triaged",
    "gathering-feedback"
  ],
  "comments": {
    "nodes": [
      {
        "body": "> Normal error messages without a crash.\n\nThe compiler is not crashing here, it is exiting normally and displaying the correct diagnostics. Can see this by looking at the binary log of this build \n\n![Image](https://github.com/user-attachments/assets/828864ad-10d3-4290-801e-bb67dc83c874)\n\n@rainersigwald, @baronfel this appears to be a behavior of msbuild. When this code is executed by the compiler it will produce the following diagnostics: \n\n```txt\nC:\\Users\\jaredpar\\temp\\console\\:invalid:(100,9): error CS0266: Cannot implicitly convert type 'double' to 'int'. An explicit conversion exists (are you missing a cast?)\nC:\\Users\\jaredpar\\temp\\console\\:invalid:(100,5): warning CS0219: The variable 'x' is assigned but its value is never used\n```\n\nThe compiler produces these and exits normally but the result of build is as displayed in the bug report\n\n>  error MSB6006: \"csc.dll\" exited with code 1.\n\nI _suspect_ this is because the problem matcher code in MSBuild does not recognize the output as a compiler diagnostic. Suspect that the inclusion of `:` in the file path name is breaking the matching code. As a result msbuild doesn't detect any diagnostics and falls back to the generic error message. \n\nThis is overall a bit of a gray area. What is legal / illegal differs based on the file system. Even the set returned from `Path.GetInvalidFileNameChars` is not guaranteed to be complete so the compiler / msbuild couldn't fully account for bad characters. In similar cases we've pushed the burden onto customers to only use names / patterns that are valid for the file system they're working on. \n\n",
        "createdAt": "2024-12-17T00:17:58Z",
        "author": {
          "login": "jaredpar"
        }
      },
      {
        "body": "Apologies for misdiagnosing this as a crash - I assume the \"exited with code 1\" output is basically suppressed (by both VS and `dotnet`) when that \"host\" has already reported errors?\n\nThanks for looking into it - and to be clear, I don't personally think this is worth spending much time on. It's a corner case of \"people who have too much time on their hands writing deliberately weird code\". I just wanted to report it while it looked like a crash.",
        "createdAt": "2024-12-17T07:56:13Z",
        "author": {
          "login": "jskeet"
        }
      },
      {
        "body": "> Apologies for misdiagnosing this as a crash \n\nIt fooled me too for the same reason. I threw it up under [complog replay](https://github.com/jaredpar/complog) to see what the crash was and got the diagnostic output instead. \n\n>  I just wanted to report it while it looked like a crash.\n\nDefinitely appreciate crash reports, even on obscure cases. :smile:",
        "createdAt": "2024-12-17T16:17:12Z",
        "author": {
          "login": "jaredpar"
        }
      },
      {
        "body": "> I _suspect_ this is because the problem matcher code in MSBuild does not recognize the output as a compiler diagnostic.\n\nExactly! Contrast http://www.regexstorm.net/tester?p=%5e%5cs*%28%28%28%3f%3cORIGIN%3e%28%28%28%5cd%2b%3e%29%3f%5ba-zA-Z%5d%3f%3a%5b%5e%3a%5d*%29%7c%28%5b%5e%3a%5d*%29%29%29%3a%29%7c%28%29%29%28%3f%3cSUBCATEGORY%3e%28%28%29%7c%28%5b%5e%3a%5d*%3f+%29%29%29%28%3f%3cCATEGORY%3e%28error%7cwarning%29%29%28+%5cs*%28%3f%3cCODE%3e%5b%5e%3a+%5d*%29%29%3f%5cs*%3a%28%3f%3cTEXT%3e.*%29%24&i=C%3a%5cUsers%5cjaredpar%5ctemp%5cconsole%5c%3ainvalid%3a%28100%2c9%29%3a+error+CS0266%3a+Cannot+implicitly+convert+type+%27double%27+to+%27int%27.+An+explicit+conversion+exists+%28are+you+missing+a+cast%3f%29%0d%0a\n\nwith\n\nhttp://www.regexstorm.net/tester?p=%5e%5cs*%28%28%28%3f%3cORIGIN%3e%28%28%28%5cd%2b%3e%29%3f%5ba-zA-Z%5d%3f%3a%5b%5e%3a%5d*%29%7c%28%5b%5e%3a%5d*%29%29%29%3a%29%7c%28%29%29%28%3f%3cSUBCATEGORY%3e%28%28%29%7c%28%5b%5e%3a%5d*%3f+%29%29%29%28%3f%3cCATEGORY%3e%28error%7cwarning%29%29%28+%5cs*%28%3f%3cCODE%3e%5b%5e%3a+%5d*%29%29%3f%5cs*%3a%28%3f%3cTEXT%3e.*%29%24&i=C%3a%5cUsers%5cjaredpar%5ctemp%5cconsole%5casdf.cs%28100%2c9%29%3a+error+CS0266%3a+Cannot+implicitly+convert+type+%27double%27+to+%27int%27.+An+explicit+conversion+exists+%28are+you+missing+a+cast%3f%29%0d%0a\n\nI'm willing to consider replacing some of those `[^:]` around [here](https://github.com/dotnet/msbuild/blob/34c4f2bcc50620744da98c36582f71fea97652a1/src/Shared/CanonicalError.cs#L59-L61) with a more robust system but we'd have to consider backtracking cost.\n\nI think that's probably more reasonable than changing Roslyn to report these differently as of now. @jaredpar want to move this to MSBuild?",
        "createdAt": "2024-12-17T17:47:58Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}