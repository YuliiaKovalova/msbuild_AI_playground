{
  "number": 514,
  "title": "Cannot build msbuild on MAC",
  "body": "I try build CI branch on my Mac. I run \"sh cibuild.sh --target Mono --host Mono\" and I got error:\n\n```\nMicrosoft.Build.Framework -> /Users/mfilippov/Projects/msbuild/bin/Debug-MONO/Output/Microsoft.Build.Framework.dll\n/Users/mfilippov/Projects/msbuild/targets/DeployDependencies.proj(80,5): error MSB4018: The \"PrereleaseResolveNuGetPackageAssets\" task failed unexpectedly.\n/Users/mfilippov/Projects/msbuild/targets/DeployDependencies.proj(80,5): error MSB4018: This is an unhandled exception from a task -- PLEASE OPEN A BUG AGAINST THE TASK OWNER.\n/Users/mfilippov/Projects/msbuild/targets/DeployDependencies.proj(80,5): error MSB4018: System.ArgumentNullException: Value cannot be null.\n/Users/mfilippov/Projects/msbuild/targets/DeployDependencies.proj(80,5): error MSB4018: Parameter name: name\n/Users/mfilippov/Projects/msbuild/targets/DeployDependencies.proj(80,5): error MSB4018:   at System.Resources.ResourceManager.GetString (System.String name, System.Globalization.CultureInfo culture) [0x0011a] in /private/tmp/source-mono-mac-4.2.0-branch-c6sr1/bockbuild-mono-4.2.0-branch/profiles/mono-mac-xamarin/build-root/mono-4.2.2/external/referencesource/mscorlib/system/resources/resourcemanager.cs:1299 \n/Users/mfilippov/Projects/msbuild/targets/DeployDependencies.proj(80,5): error MSB4018:   at System.Resources.ResourceManager.GetString (System.String name) [0x00000] in /private/tmp/source-mono-mac-4.2.0-branch-c6sr1/bockbuild-mono-4.2.0-branch/profiles/mono-mac-xamarin/build-root/mono-4.2.2/external/referencesource/mscorlib/system/resources/resourcemanager.cs:1195 \n/Users/mfilippov/Projects/msbuild/targets/DeployDependencies.proj(80,5): error MSB4018:   at Microsoft.Build.Utilities.TaskLoggingHelper.LogErrorFromResources (System.String subcategoryResourceName, System.String errorCode, System.String helpKeyword, System.String file, Int32 lineNumber, Int32 columnNumber, Int32 endLineNumber, Int32 endColumnNumber, System.String messageResourceName, System.Object[] messageArgs) [0x00000] in /private/tmp/source-mono-mac-4.2.0-branch-c6sr1/bockbuild-mono-4.2.0-branch/profiles/mono-mac-xamarin/build-root/mono-4.2.2/mcs/class/Microsoft.Build.Utilities/Microsoft.Build.Utilities/TaskLoggingHelper.cs:175 \n/Users/mfilippov/Projects/msbuild/targets/DeployDependencies.proj(80,5): error MSB4018:   at Microsoft.Build.Utilities.TaskLoggingHelper.LogErrorFromResources (System.String messageResourceName, System.Object[] messageArgs) [0x00000] in /private/tmp/source-mono-mac-4.2.0-branch-c6sr1/bockbuild-mono-4.2.0-branch/profiles/mono-mac-xamarin/build-root/mono-4.2.2/mcs/class/Microsoft.Build.Utilities/Microsoft.Build.Utilities/TaskLoggingHelper.cs:161 \n/Users/mfilippov/Projects/msbuild/targets/DeployDependencies.proj(80,5): error MSB4018:   at (wrapper remoting-invoke-with-check) Microsoft.Build.Utilities.TaskLoggingHelper:LogErrorFromResources (string,object[])\n/Users/mfilippov/Projects/msbuild/targets/DeployDependencies.proj(80,5): error MSB4018:   at Microsoft.DotNet.Build.Tasks.PrereleaseResolveNuGetPackageAssets.Execute () <0x39c67b0 + 0x00097> in <filename unknown>:0 \n/Users/mfilippov/Projects/msbuild/targets/DeployDependencies.proj(80,5): error MSB4018:   at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute () <0x373b218 + 0x0004d> in <filename unknown>:0 \n/Users/mfilippov/Projects/msbuild/targets/DeployDependencies.proj(80,5): error MSB4018:   at Microsoft.Build.BackEnd.TaskBuilder+<ExecuteInstantiatedTask>d__26.MoveNext () <0x3735ff8 + 0x007c6> in <filename unknown>:0 \n```\n",
  "state": "CLOSED",
  "createdAt": "2016-03-07T23:42:29Z",
  "updatedAt": "2024-02-21T17:28:56Z",
  "closedAt": "2016-03-22T21:57:30Z",
  "author": {
    "login": "mfilippov"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "This exception is because of a bug in Mono, but the real issue is that the build is broken for msbuild on mono/osx. Once that is fixed, you won't hit the above issue. I am trying to fix that.\n",
        "createdAt": "2016-03-08T15:01:43Z",
        "updatedAt": "2016-03-08T15:01:43Z",
        "author": {
          "login": "radical"
        }
      },
      {
        "body": "@cdmihai :\nI have been trying to look at the build breakage on mono/OSX.\n- The first issue that it complains about is:\n\n`MSBUILD : error : Couldn't find the required information in the lock file. Make sure you have .NETFramework,Version=v4.5.1 mentioned in your targets. [/Users/ankit/dev/msbuild/targets/DeployDependencies.proj]`\n\nIf we add an entry for `net451` in `targets/runtimeDependencies/project.json` then it hits the next issue.\n- mcs errors out because some assemblies are getting added twice. The extra references are coming from `PrereleaseResolveNuGetPackageAssets`, for the the `../Utilities/UnitTests/..` project. Digging a bit more reveals that this is because the `project.lock.json` for this project, for `net451` has entries like:\n\n```\n      \"System.Diagnostics.Debug/4.0.10\": {\n        \"type\": \"package\",\n        \"dependencies\": {\n          \"System.Runtime\": \"4.0.0\"\n        },\n        \"compile\": {\n          \"ref/dotnet/System.Diagnostics.Debug.dll\": {}\n        }\n      },\n```\n\nNote the `ref/dotnet/System.Diagnostics.Debug.dll` for `compile` in above. IIUC, because of this `PrereleaseResolveNuGetPackageAssets` adds it to the references.\n\nIn case of `net46` however, the same entry looks like:\n\n```\n      \"System.Diagnostics.Debug/4.0.10\": {\n        \"type\": \"package\",\n        \"compile\": {\n          \"ref/net46/_._\": {}\n        },\n        \"runtime\": {\n          \"lib/net46/_._\": {}\n        }\n      },\n```\n\nAnd the `_._` seems to indicate that the reference is supplied from another source (like GAC?) [[1]](https://github.com/aspnet/Home/issues/744#issuecomment-145582934), so, the task does not add this to the references.\n\nBased on this, if we just change the `NuGetTargetMoniker` in `dir.props` from `.NETFramework,Version=v4.5.1` to `.NETFramework,Version=v4.6` and no changes to the `targets/runtimeDependencies/project.json`, then it seems to build fine. AFAICS, it is using the correct assemblies, even when 4.6 isn't available (like released mono).\n\nI'm not sure what the correct fix would be. What and where would it need to be fixed so that we get those `_._` entries for `net451` too? What does the moniker change really mean? I seem to be too nuget illiterate to understand it. Feel free to point me to resources/docs/code for understanding this. \n",
        "createdAt": "2016-03-08T21:23:26Z",
        "updatedAt": "2016-03-08T21:23:54Z",
        "author": {
          "login": "radical"
        }
      },
      {
        "body": "Does this make sense? Should I open a PR with, effectively, this change?\nIt does fix the build and does not break any tests.\n\n```\ndiff --git a/dir.props b/dir.props\nindex 2c14378..afc251d 100644\n--- a/dir.props\n+++ b/dir.props\n@@ -159,7 +159,7 @@\n     <PlatformTarget>$(RuntimeArchitecture)</PlatformTarget>\n     <ImportGetNuGetPackageVersions Condition=\"'$(OS)' != 'Windows_NT'\">false</ImportGetNuGetPackageVersions>\n     <NuGetTargetMoniker Condition=\"'$(NetCoreBuild)' == 'true'\">DNXCore,Version=v5.0</NuGetTargetMoniker>\n-    <NuGetTargetMoniker Condition=\"'$(MonoBuild)' == 'true'\">.NETFramework,Version=v4.5.1</NuGetTargetMoniker>\n+    <NuGetTargetMoniker Condition=\"'$(MonoBuild)' == 'true'\">.NETFramework,Version=v4.6</NuGetTargetMoniker>\n     <NuGetTargetMoniker Condition=\"'$(NetCoreBuild)' != 'true' and '$(MonoBuild)' != 'true'\">.NETFramework,Version=v4.6</NuGetTargetMoniker>\n   </PropertyGroup>\n```\n",
        "createdAt": "2016-03-09T18:48:36Z",
        "updatedAt": "2016-03-09T18:48:36Z",
        "author": {
          "login": "radical"
        }
      },
      {
        "body": "Looking at the actual nuget package for `System.Diagnostics.Debug` version `4.0.10`, it only has a `ref/net46/_._` and nothing for net45. But there is a newer version (`4.0.11-rc2-23712`) of the package which has `ref/net45/_._` instead. IIUC, this fixes our issue, since it means \"resolve from the GAC\". And so we don't get an extra reference.\n\nIt's the same case for the other packages like `System.IO` etc. I guess, if we switch to these newer versions then it should fix it. Or since, switching to 4.6 fixes this, I think that is an acceptable fix for the issue. It will match what we are doing on Windows too.\n\nThanks to @akoeplinger for help with the above!\n",
        "createdAt": "2016-03-09T21:08:58Z",
        "updatedAt": "2016-03-09T21:09:26Z",
        "author": {
          "login": "radical"
        }
      },
      {
        "body": "This was fixed by PR #519 . This issue can be closed.\n",
        "createdAt": "2016-03-22T17:34:43Z",
        "updatedAt": "2016-03-22T17:34:43Z",
        "author": {
          "login": "radical"
        }
      }
    ]
  }
}