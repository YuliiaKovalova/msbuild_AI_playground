{
  "number": 7000,
  "title": "ProjectReference of an executable project : ChildProcess.dll not copied if SelfContained = true",
  "body": "### Issue Description\r\nI have two projects : `RootProject` and `ChildProcess`. Both are executables, and `RootProject` starts `ChildProcess.exe` as part of its work.\r\nWhen I want to publish the `RootProject` with a self-contained deployment (`dotnet publish -r win-x64`), the `ChildProcess.exe` is correctly put into the output folder, but not `ChildProcess.dll`.\r\n\r\nI'm using this to reference the project:\r\n\r\nhttps://github.com/jeremyVignelles/ReproProjectReferences/blob/4260b1e29dfd50e78f101ca759212bb7ff1be99a/RootProject/RootProject.csproj#L8\r\n\r\nI had issues referencing the project, because if I don't set the RuntimeIdentifier, the command `dotnet publish -r win-x64` fails with the error:\r\n\r\n```\r\nC:\\Program Files\\dotnet\\sdk\\5.0.402\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.targets(993,5): error NETSDK1150: le projet r\u00e9f\u00e9renc\u00e9 \u00ab\u00a0..\\ChildProcess\\ChildProcess.csproj\u00a0\u00bb est un ex\u00e9cutable qui n'est pas autonome.  Un ex\u00e9cutable non autonome ne peut pas \u00eatre r\u00e9f\u00e9renc\u00e9 par un ex\u00e9cutable autonome. [D:\\Projects\\Tests\\TestProjectReferences\\RootProject\\RootProject.csproj]\r\n```\r\n\r\nI got the workaround idea from this issue : https://github.com/dotnet/sdk/issues/10625#issuecomment-697646664 : set a \"default\" rid in the csporj.\r\n\r\nGiven the message, I suppose that referencing executables is a valid scenario to reference an executable this way, but I was unable to find any document mentionning this, all I'm doing is trial and error.\r\n\r\n### Steps to Reproduce\r\n- clone https://github.com/jeremyVignelles/ReproProjectReferences\r\n- run one of these tests : \r\n   - `dotnet run -p RootProject/RootProject.csproj`\r\n   - `dotnet run -r win-x64 -p RootProject/RootProject.csproj`\r\n   - Open Visual Studio and run the `RootProject`\r\n   - `dotnet publish -r win-x64 RootProject/RootProject.csproj && RootProject/bin/Debug/net5.0/win-x64/publish/RootProject.exe `\r\n\r\n### Expected Behavior\r\n\r\n`Hello world` should be displayed in all cases\r\n\r\n### Actual Behavior\r\nIt works fine with Visual Studio (the dll is copied), but I get an error from `ChildProcess.exe` in all other cases:\r\n```\r\nThe application to execute does not exist: 'D:\\Projects\\Tests\\TestProjectReferences\\RootProject\\bin\\Debug\\net5.0\\win-x64\\ChildProcess.dll'.\r\n```\r\n\r\nIndeed, there is no such file in the output folder.\r\n\r\n### Workaround\r\n\r\nI created a workaround branch, to edit the RootProject.csproj, that you can see here : https://github.com/jeremyVignelles/ReproProjectReferences/blob/workaround/RootProject/RootProject.csproj\r\n\r\nBasically, I'm referencing the .dll I need in a `<None`, after the references have been resolved. It seems however, that Visual Studio doesn't create the `ChildProcess\\bin\\$(Configuration)\\$(TargetFramework)\\$(RuntimeIdentifier)\\publish\\` folder, but can successfully copy the .dll in the output folder.\r\n\r\n### Environment\r\n\r\n.NET SDK 5.0.402\r\nVS 2019 (16.11.0)\r\n\r\n### Ask us questions\r\n\r\nWhy is the .dll file not copied in the first place, when I run it from the CLI ? Am I missing something?\r\n\r\nWhy doesn't VS create the publish folder, and how come does it copy the dll files that are not copied by the dotnet CLI?\r\n\r\n\r\n",
  "state": "CLOSED",
  "createdAt": "2021-10-29T09:54:01Z",
  "updatedAt": "2024-02-21T14:11:11Z",
  "closedAt": "2023-01-31T16:19:24Z",
  "author": {
    "login": "jeremyVignelles"
  },
  "labels": [
    "Priority:2",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Team Triage: It looks like you have `ReferenceOutputAssembly=\"false\"` set on your project reference. This prevents the output of your projectreference from being copied over. If you remove that, does it successfully copy over the `.dll`?\r\n\r\nhttps://docs.microsoft.com/en-us/visualstudio/msbuild/common-msbuild-project-items?#projectreference",
        "createdAt": "2021-11-11T17:51:59Z",
        "updatedAt": "2021-11-11T17:52:37Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "@BenVillalobos : Thanks for your reply.\r\n\r\nI just moved to VS2022 and .net 6 , and it seems to be still failing with `dotnet run --project RootProject/RootProject.csproj` .\r\n\r\nI tried your suggestion about removing `ReferenceOutputAssembly` (see [here](https://github.com/jeremyVignelles/ReproProjectReferences/blob/a101e48708874e455b6c4cd5ea21f3190fd5c94b/RootProject/RootProject.csproj#L8) ) but that didn't change anything, the dll is still not copied.\r\n\r\nAs far as I understand the `ReferenceOutputAssembly` property tells the compiler that all types from the ChildProcess are now available to be called from the RootProject, which effectively leaks types. I don't want that behavior, as the two processes are independent and only communicate through IPC.",
        "createdAt": "2021-11-12T14:39:57Z",
        "updatedAt": "2021-11-12T14:39:57Z",
        "author": {
          "login": "jeremyVignelles"
        }
      },
      {
        "body": "Any update on this ? Did you have a chance to reproduce the issue locally?",
        "createdAt": "2022-03-02T16:18:40Z",
        "updatedAt": "2022-03-02T16:18:40Z",
        "author": {
          "login": "jeremyVignelles"
        }
      },
      {
        "body": "It does repro. I suspect it's because ChildProcess builds using the Publish target. This probably leads to that `.dll` not being included somewhere down the chain (which sounds odd)\r\n\r\nThe workaround you have is the one I would have suggested, I'll bring this up in bug triage tomorrow, there may be another way to accomplish this.",
        "createdAt": "2022-03-10T00:19:16Z",
        "updatedAt": "2022-03-10T00:19:16Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "Notes from the investigations:\r\n\r\n- the issue is still reproduced on the repro project mentioned in the issue description\r\n- the issue is not reproduced when `Targets = \"Publish\"` is not set on `ProjectReference` - the mentioned commands are executed as expected, https://github.com/jeremyVignelles/ReproProjectReferences/blob/a101e48708874e455b6c4cd5ea21f3190fd5c94b/RootProject/RootProject.csproj#L8\r\n- the difference in behavior is \r\n   - when no `Targets` are set on `ProjectReference`\r\n      - in `ResolveProjectReference` task, `MSBuild` task on ChildProcess, `MSBuild` task is completed on `Build` target,  dll is added to `OutputItems`, `_ResolvedProjectReferecncePaths`\r\n      - later on those items are processed in `_CopyFilesMarekdCopyLocal`, task `Copy` and copied to published directory of `RootProject`\r\n   - when no `Targets` are set to `Publish`\r\n      - in `ResolveProjectReference` task, `MSBuild` task on ChildProcess,  `MSBuild` task has additionally `Publish` target, there is no `OutputItems`\r\n      - `ChildProcess.exe` is copied in `GetCopyToOutputDirectoryItems`, but `dll` is never copied.\r\n\r\nLet's clarify further steps on next triage.",
        "createdAt": "2023-01-27T12:38:46Z",
        "updatedAt": "2023-01-27T12:38:46Z",
        "author": {
          "login": "vlada-shubina"
        }
      },
      {
        "body": "@jeremyVignelles could you please answer couple of questions to help us to assess this issue better:\r\n\r\n- is `Targets = Publish` on `ProjectReference` intentional?\r\n- if so, could you please explain your use case?\r\n\r\nThanks ",
        "createdAt": "2023-01-31T14:25:56Z",
        "updatedAt": "2023-01-31T14:25:56Z",
        "author": {
          "login": "vlada-shubina"
        }
      },
      {
        "body": "It's been a year and l'm not working for the same company anymore, so I can't be sure.\n\nThe idea was that I wanted an exe file I could call from the parent process. Presumably, If I didn't set that target, the .exe file was never generated, and the dll was referenced as a dll rather than an executable.\n\nI really needed an executable I could spawn for my use case",
        "createdAt": "2023-01-31T14:36:33Z",
        "updatedAt": "2023-01-31T14:36:33Z",
        "author": {
          "login": "jeremyVignelles"
        }
      },
      {
        "body": "Thank you for quick reply. \r\n\r\nThis use case sounds reasonable but after test on both .NET SDK 5.0.4xx and current .NET SDK 7.0.1xx, the executable is created during `Build` so specifying `Targets=Publish` is not needed, and the given cases are works as expected.\r\n\r\nI created https://github.com/dotnet/msbuild/issues/8376, so we can document this use case better.\r\n\r\nI'm closing this issue, please feel free to comment if you need to reopen it.",
        "createdAt": "2023-01-31T16:19:24Z",
        "updatedAt": "2023-01-31T16:19:24Z",
        "author": {
          "login": "vlada-shubina"
        }
      }
    ]
  }
}