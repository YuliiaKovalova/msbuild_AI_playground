{
  "number": 6134,
  "title": "How to make a ProjectReference TargetFramework-agnostic?",
  "body": "### Issue Description\r\n- I have a solution with\r\n   1. A project that builds an MSBuild build task (which instruments a built assembly)\r\n      This targets `net472` and `netcoreapp2.1` (for use with `MSBuild.exe` and `dotnet build`, respectively)\r\n   2. Several projects that use that build task:\r\n      - these target `net472`, `netcoreapp2.1` and `netcoreapp3.1`\r\n      - they have a `ProjectReference` pointing to it, with `ReferenceOutputAssembly=\"False\"` on it\r\n      - they import a .targets file to use it\r\n        - this is hooked as `AfterTargets=\"CopyFilesToOutputDirectory\"` so that it can operate on a clean assembly under `bin`\r\n- Solution-level build ordering is _not_ used (it is a goal that all projects build correctly even without the solution present)\r\n\r\nThis all builds perfectly fine under normal circumstances.\r\n\r\nThere are two issues:\r\n- despite the `ReferenceOutputAssembly=\"False\"`, there are warnings issued if the referenced project does not target a compatible framework (e.g. if the build task project only targets `net472`, the referencing projects complain because of their netcoreapp targets)\r\n- when building using `msbuild -m`, it may happen that applying the build task fails because it has not been built yet\r\n  - msbuild in use, so the net472 assembly of the build task will be used\r\n  - build task gets built for netcoreapp2.1\r\n  - referencing project gets built for netcoreapp3.1 <-- _too early! need net472 build of build task_\r\n  - so: there seems to be an assumption that, even with `ReferenceOutputAssembly=\"False\"`, the build scheduling can treat the project reference as target-framework specific\r\n\r\n### Expected Behavior\r\n1. no diagnostics about target frameworks of a project referenced with `ReferenceOutputAssembly=\"False\"`\r\n2. build scheduling waits for full build of referenced project before building a referencing project\r\n\r\n### Actual Behavior\r\n1. diagnostics issued\r\n2. build scheduling may build a referencing project too early\r\n\r\n### Ask us questions\r\nIs there a way to ensure build order at the project level instead of at the project+target level?\r\n",
  "state": "CLOSED",
  "createdAt": "2021-02-09T15:27:02Z",
  "updatedAt": "2021-02-26T13:00:49Z",
  "closedAt": "2021-02-26T13:00:49Z",
  "author": {
    "login": "Zastai"
  },
  "labels": [
    "needs-triage"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "ladipro"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Team Triage: Can you provide a minimal project that reproduces this behavior? What are the exact warnings/errors you're seeing? ",
        "createdAt": "2021-02-10T16:25:33Z",
        "updatedAt": "2021-02-10T16:26:37Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "I'll have a look - it should not be too hard to contrive an small scale case.\r\n",
        "createdAt": "2021-02-10T16:41:50Z",
        "updatedAt": "2021-02-10T16:41:50Z",
        "author": {
          "login": "Zastai"
        }
      },
      {
        "body": "I have created https://github.com/Zastai/msbuild-6134/ as a test case.\r\n\r\nWhile this reproduces the spurious warning about mismatched framework, I have so far been unable to reproduce the build scheduling issue. Will try again tomorrow or over the weekend.",
        "createdAt": "2021-02-10T18:19:34Z",
        "updatedAt": "2021-02-10T18:19:34Z",
        "author": {
          "login": "Zastai"
        }
      },
      {
        "body": "Looks like the `Exec` I used to make the build task project take some time was causing \"correct\" scheduling as a side-effect.\r\nAfter adding ` YieldDuringToolExecution=\"true\"` to it, the issue is now entirely reproducible.\r\n\r\nSimply running\r\n\r\n```powershell\r\nrm -r */bin, */obj; dotnet build -m\r\n```\r\n\r\nreproduces the issue.\r\nYou see the build task building its `net472` target, then the consumer for the `net472` target - but because `dotnet build` was used, the build targets want to use the build task's `netcoreapp2.1` output. ",
        "createdAt": "2021-02-17T15:59:09Z",
        "updatedAt": "2021-02-17T15:59:09Z",
        "author": {
          "login": "Zastai"
        }
      },
      {
        "body": "@Zastai thank you for the repro. I was able to make your scenario work by adding the `SetTargetFramework` metadatum to the `ProjectReference` item to explicitly specify which target of build-task it's depending on. I wouldn't say the framework mismatch warning is spurious. On the contrary, it's very relevant because it's explaining why the task has not been built when you need it.\r\n\r\nHere's how I modified the `ProjectReference`. Also note I replaced `ReferenceBuildOutput` with `ReferenceOutputAssembly` as the former is not a well-known metadatum and would have no effect.\r\n\r\n```xml\r\n    <ProjectReference\r\n        Include=\"..\\build-task\\build-task.csproj\"\r\n        ReferenceOutputAssembly=\"False\"\r\n        SetTargetFramework=\"TargetFramework=netcoreapp2.1\" />  \r\n```\r\n\r\nLet me know if this resolves your issue.",
        "createdAt": "2021-02-26T11:06:59Z",
        "updatedAt": "2021-02-26T11:06:59Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "Yes, the `ReferenceOutputAssembly` was my mistake when setting up the test repo; my real-world case uses it correctly.\r\n\r\nLooks like I managed to miss the documentation for `SetTargetFramework`; it's slightly odd that it needs to include the `TargetFramework=` part, but \ud83e\udd37.\r\n\r\nSo in order to handle both core and desktop, I would need\r\n```xml\r\n<ProjectReference Include=\"..\\build-task\\build-task.csproj\" ReferenceOutputAssembly=\"False\">\r\n  <SetTargetFramework Condition=\" '$(MSBuildRuntimeType)' == 'Full' \">TargetFramework=net472</SetTargetFramework>\r\n  <SetTargetFramework Condition=\" '$(MSBuildRuntimeType)' != 'Full' \">TargetFramework=netcoreapp2.1</SetTargetFramework>\r\n</ProjectReference>\r\n```\r\nWhile it's a bit more verbose than I would like, it does work.\r\nAnd I suppose I could put it in the .targets file to avoid repeating it.\r\n\r\nThanks for the assistance.",
        "createdAt": "2021-02-26T13:00:49Z",
        "updatedAt": "2021-02-26T13:00:49Z",
        "author": {
          "login": "Zastai"
        }
      }
    ]
  }
}