{
  "number": 5939,
  "title": "[RAR as Service] Re-evaluate the choice of serialization technology",
  "body": "StreamJsonRpc, as originally chosen to use for cross-process RAR request serialization, has proven problematic and ended up being the primary reason for reverting the work. It brings in a bunch of dependent assemblies: StreamJsonRpc, Nerdbank.Streams, MessagePack, MessagePack.Annotations. Surprisingly also Microsoft.VisualStudio.Threading, Microsoft.VisualStudio.Validation because of its close ties with Visual Studio.\r\n- The dependencies raise eyebrows - Why do I need \"VisualStudio\" in my .NET SDK package, it's adding size, etc. - and will add burden going forward synchronizing the dependencies with anything else running inside VS.\r\n- There is a known issue with another VS component which mistakenly loads Microsoft.VisualStudio.Threading from MSBuild directory (it's not uncommon to have this directory on the assembly load path), the proposed solution to which would be to move the assembly to a subdirectory under MSBuild.\r\n\r\nAlternative solutions:\r\n- Stick with the insecure BinaryFormatter for now. Sooner or later MSBuild will have to move over to something else anyways and adding this one use-case shouldn't incur much additional cost.\r\n- Hand-write a custom serializer (no external dependecies!).\r\n- Pick another existing serialization library: Protocol buffers, Bond, ...\r\n\r\nWhat should be the criteria on which to pick the protocol?\r\n- Perf, security, protocol actively maintained, easy to deploy (needs runtime dependencies or not), homogeneity (with MSBuild and other .NET tools), adoption cost, \u2026\r\n\r\nNext steps: Define criteria, assign weights, investigate and measure to fill out a table, and come up with the winner.\r\n",
  "state": "CLOSED",
  "createdAt": "2020-12-07T14:05:27Z",
  "updatedAt": "2024-02-21T17:02:04Z",
  "closedAt": "2021-02-01T08:07:07Z",
  "author": {
    "login": "ladipro"
  },
  "labels": [
    "Area: Performance",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "MSBuild 16.10"
  },
  "comments": {
    "nodes": [
      {
        "body": "We have decided to keep using the existing serialization technology based on BinaryFormatter and have the parent User Story focused only on RAR and not on this orthogonal problem. BinaryFormatter will be replaced in all of MSBuild IPC later.",
        "createdAt": "2021-02-01T08:07:07Z",
        "updatedAt": "2021-02-01T08:07:07Z",
        "author": {
          "login": "ladipro"
        }
      }
    ]
  }
}