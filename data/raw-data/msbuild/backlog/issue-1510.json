{
  "number": 1510,
  "title": "_GetProjectReferenceTargetFrameworkProperties is extremely slow for F# projects",
  "body": "The _GetProjectReferenceTargetFrameworkProperties target appears to take a significant amount of time to complete. This is in relation to F# projects, I can't seem to reproduce the issue with C# projects. I've exacerbated the issue by creating a solution of 100 projects, where by each project has a reference to all of the previous projects (e.g. Project4 references Project1, Project2 and Project3) as a minimal reproduction.\r\n\r\n```\r\nMSBuild: Target Performance Summary:\r\nMSBuild:         0 ms  BeforeCompile                              1 calls\r\nMSBuild:         0 ms  SetWin32ManifestProperties                 1 calls\r\nMSBuild:         0 ms  BeforeResolveReferences                    1 calls\r\nMSBuild:         0 ms  AfterResolveReferences                     1 calls\r\nMSBuild:         0 ms  _AfterCompileWinFXInternal                 1 calls\r\nMSBuild:         0 ms  _ComputeNonExistentFileProperty            1 calls\r\nMSBuild:         0 ms  AfterCompile                               1 calls\r\nMSBuild:         0 ms  PrepareProjectReferences                   1 calls\r\nMSBuild:         0 ms  GetFrameworkPaths                          1 calls\r\nMSBuild:         0 ms  ResolveReferences                          1 calls\r\nMSBuild:         0 ms  AfterCompileWinFX                          1 calls\r\nMSBuild:         1 ms  GetReferenceAssemblyPaths                  1 calls\r\nMSBuild:         1 ms  DesignTimeXamlMarkupCompilation            1 calls\r\nMSBuild:         1 ms  ResolveSDKReferences                       1 calls\r\nMSBuild:         1 ms  _SetEmbeddedWin32ManifestProperties        1 calls\r\nMSBuild:         1 ms  ExpandSDKReferences                        1 calls\r\nMSBuild:         1 ms  Compile                                    1 calls\r\nMSBuild:         2 ms  DesignTimeMarkupCompilation                1 calls\r\nMSBuild:         2 ms  PrepareForBuild                            1 calls\r\nMSBuild:         2 ms  GenerateTargetFrameworkMonikerAttribute    1 calls\r\nMSBuild:         2 ms  ImplicitlyExpandDesignTimeFacades          1 calls\r\nMSBuild:         2 ms  ResolveAssemblyReferences                  1 calls\r\nMSBuild:         2 ms  GetTargetFrameworkProperties              68 calls\r\nMSBuild:         4 ms  _GenerateCompileInputs                     1 calls\r\nMSBuild:         4 ms  GetTargetPath                             68 calls\r\nMSBuild:         4 ms  _SplitProjectReferencesByFileExistence     1 calls\r\nMSBuild:         4 ms  AssignProjectConfiguration                 1 calls\r\nMSBuild:         5 ms  _GenerateCompileDependencyCache            1 calls\r\nMSBuild:         7 ms  CoreCompile                                1 calls\r\nMSBuild:        23 ms  GetInstalledSDKLocations                   1 calls\r\nMSBuild:     49632 ms  ResolveProjectReferences                   1 calls\r\nMSBuild:     107337 ms  _GetProjectReferenceTargetFrameworkProperties  68 calls\r\nMSBuild: \r\nMSBuild: Task Performance Summary:\r\nMSBuild:         0 ms  GetReferenceAssemblyPaths                  1 calls\r\nMSBuild:         0 ms  Hash                                       1 calls\r\nMSBuild:         0 ms  GetFrameworkPath                           1 calls\r\nMSBuild:         0 ms  MakeDir                                    1 calls\r\nMSBuild:         0 ms  FindAppConfigFile                          1 calls\r\nMSBuild:         0 ms  CallTarget                                 1 calls\r\nMSBuild:         0 ms  ResolveAssemblyReference                   1 calls\r\nMSBuild:         1 ms  Fsc                                        1 calls\r\nMSBuild:         2 ms  WriteLinesToFile                           1 calls\r\nMSBuild:         4 ms  ResolveNonMSBuildProjectOutput             1 calls\r\nMSBuild:         4 ms  AssignProjectConfiguration                 1 calls\r\nMSBuild:     156729 ms  MSBuild                                   69 calls\r\n```\r\n\r\nThe fact that this happens with F# and not C# leads me to believe there's something in the C# common targets that is missing from the F# common targets that improves the performance of this target.\r\n\r\nIt is also worth noting that the _ResolveReferenceDependencies property is set to true, although setting it to false has minimal effect.\r\n\r\nSee microsoft/visualfsharp#2107 for more details.",
  "state": "CLOSED",
  "createdAt": "2017-01-02T00:36:20Z",
  "updatedAt": "2024-02-21T17:23:07Z",
  "closedAt": "2017-04-26T19:03:10Z",
  "author": {
    "login": "saul"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "This issue looks like it's in the same area as #1276, cc @rainersigwald",
        "createdAt": "2017-01-02T00:38:19Z",
        "updatedAt": "2017-01-02T00:38:19Z",
        "author": {
          "login": "saul"
        }
      },
      {
        "body": "I do suspect this is a duplicate of #1276, but as I mentioned there (https://github.com/Microsoft/msbuild/issues/1276#issuecomment-285534271), I think it's mostly that this target gets blamed for initial blocked-waiting time, rather than is truly slow. If you see evidence to the contrary on F# projects specifically please let us know and we can reopen this issue.",
        "createdAt": "2017-04-26T19:03:10Z",
        "updatedAt": "2017-04-26T19:03:10Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}