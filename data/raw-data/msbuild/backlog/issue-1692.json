{
  "number": 1692,
  "title": "IsGlobalProperty Property Function",
  "body": "The ability to detect a property as being globally overridden enables SDKs to exert greater control over the behavior of multi-project or sln builds. A global property will influence the behavior of both referring projects and referenced projects. Unlike statically evaluated properties, global properties may have unintended consequences for referred projects. \r\n\r\nFor example, consider RuntimeIdentifiers. If one tries to build a portable project while specifying a RuntimeIdentifier through a global override then the build should fail since restore would not have brought down appropriate assets. We should error out and help users fix their build setup. On the other hand, if a non-portable project references a portable project then users will build the non-portable project with a global override for Runtime Identifier. This global property will be passed along to the referenced project which will subsequently fail to build because it believes itself to be in a bad configuration.\r\n\r\nBy enabling detection of global properties, SDKs can provide their own policies around the passing of global properties to referenced projects. In the example above, if the referring project knows that it is being built with a global property that can put referenced projects in an unbuildable state then it can communicate to those projects that they can choose to ignore this global configuration. Without the ability to detect global properties, the referenced project must assume that it was misconfigured and therefore fail to build.\r\n\r\nThere is a workaround to this feature ask, currently in PR to the .NET SDK:\r\n``` \r\n    <!-- We need to determine if the RuntimeIdentifier was globally set. This check takes advantage of the fact that global properties cannot be overwritten. -->\r\n    <PropertyGroup>\r\n      <!-- First, backup the value of the RuntimeIdentifier -->\r\n      <GlobalRuntimeIdentifier>$(RuntimeIdentifier)</GlobalRuntimeIdentifier>\r\n      <!-- Now set the RuntimeIdentifier to a bogus value. If it is global, this change will be ignored. -->\r\n      <RuntimeIdentifier>__________</RuntimeIdentifier>\r\n    </PropertyGroup>\r\n\r\n    <!-- If the RuntimeIdentifier was not set globally, put back its local value. -->\r\n    <PropertyGroup Condition=\" '$(RuntimeIdentifier)' != '$(GlobalRuntimeIdentifier)'\">\r\n      <RuntimeIdentifier>$(GlobalRuntimeIdentifier)</RuntimeIdentifier>\r\n      <!-- Null out the GlobalRuntimeIdentifier since RuntimeIdentifier is not set globally. -->\r\n      <GlobalRuntimeIdentifier></GlobalRuntimeIdentifier>\r\n    </PropertyGroup>\r\n  \r\n    <!-- If the RuntimeIdentifier was set globally, pass it to GetTargetFrameworkProperties. -->\r\n    <PropertyGroup Condition=\" '$(GlobalRuntimeIdentifier)' != '' \">  \r\n  <AdditionalPropertiesForGetTargetFrameworkProperties>;ReferringRuntimeIdentifier=$(GlobalRuntimeIdentifier)</AdditionalPropertiesForGetTargetFrameworkProperties>\r\n    </PropertyGroup>\r\n```\r\n\r\nHowever, as can be seen above, the workaround requires quite a bit of code and depends on an implementation detail of global properties that is not obvious to most.",
  "state": "CLOSED",
  "createdAt": "2017-02-11T20:02:46Z",
  "updatedAt": "2024-02-21T17:21:58Z",
  "closedAt": "2020-02-10T22:00:09Z",
  "author": {
    "login": "TheRealPiotrP"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Notes from looking into this a few days ago:\r\n\r\n>looks like it's not trivial to build a property function for `IsGlobalProperty`. The [part of the engine that evaluates property functions](https://github.com/Microsoft/msbuild/blob/487db4a80806347f2f5ec8e41c7cf428dab06c92/src/Build/Evaluation/Expander.cs#L3006) doesn't have a direct link back to the project, only an `IPropertyProvider` interface that doesn't distinguish between global and local properties. It's still possible but not super easy\r\n\r\nThe engine could either pass something down to that level that has a link back to something that knows about global properties, or [`IPropertyProvider`](https://github.com/Microsoft/msbuild/blob/487db4a80806347f2f5ec8e41c7cf428dab06c92/src/Build/Evaluation/IPropertyProvider.cs) could be augmented to have a `bool IsGlobal` or similar.\r\n\r\nI'm not willing to do either for v15.1 RTW, but I don't have a moral objection to either in the longer term. Since this is in core property-evaluation code, an implementation would need to be careful about the memory and compute performance impact of carrying the extra data around.",
        "createdAt": "2017-02-13T16:03:28Z",
        "updatedAt": "2017-02-13T16:03:28Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "This can now be implemented as a custom task using #4925, so I'm going to close this.",
        "createdAt": "2020-02-10T22:00:09Z",
        "updatedAt": "2020-02-10T22:00:09Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}