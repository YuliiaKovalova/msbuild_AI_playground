{
  "number": 8816,
  "title": "AssemblyLoadsTracker should only turn on for msbuild.exe and dotnet build",
  "body": "When hosting MSBuild inside a .NET desktop application, we saw this exception:\r\n\r\n```\r\nMicrosoft.Build.Framework.InternalErrorException: MSB0001: Internal MSBuild Error: must be valid\r\n   at void Microsoft.Build.Shared.ErrorUtilities.ThrowInternalError(string message, Exception innerException, params object[] args)\r\n   at void Microsoft.Build.BackEnd.Logging.LoggingContext.LogBuildEvent(BuildEventArgs buildEvent)\r\n   at void Microsoft.Build.BackEnd.Components.RequestBuilder.AssemblyLoadsTracker.CurrentDomainOnAssemblyLoad(object sender, AssemblyLoadEventArgs args)\r\n   at void AssemblyLoadEventHandler.Invoke(object sender, AssemblyLoadEventArgs args)\r\n   at void AppDomain.OnAssemblyLoadEvent(RuntimeAssembly LoadedAssembly)\r\n   at RuntimeAssembly System.Reflection.RuntimeAssembly._nLoad(AssemblyName fileName, string codeBase, Evidence assemblySecurity, RuntimeAssembly locationHint, ref StackCrawlMark stackMark, IntPtr pPrivHostBinder, bool throwOnFileNotFound, bool forIntrospection, bool suppressSecurityChecks)\r\n   at RuntimeAssembly System.Reflection.RuntimeAssembly.nLoad(AssemblyName fileName, string codeBase, Evidence assemblySecurity, RuntimeAssembly locationHint, ref StackCrawlMark stackMark, IntPtr pPrivHostBinder, bool throwOnFileNotFound, bool forIntrospection, bool suppressSecurityChecks)\r\n   at RuntimeAssembly System.Reflection.RuntimeAssembly.InternalLoadAssemblyName(AssemblyName assemblyRef, Evidence assemblySecurity, RuntimeAssembly reqAssembly, ref StackCrawlMark stackMark, IntPtr pPrivHostBinder, bool throwOnFileNotFound, bool forIntrospection, bool suppressSecurityChecks)\r\n   at Assembly System.Reflection.Assembly.Load(AssemblyName assemblyRef)\r\n```\r\n\r\nOur guess is that since our app hosts MSBuild, the AssemblyLoadsTracker is installed. \r\n\r\nIt should probably only get activated when it detects that it's running in msbuild.exe or dotnet.exe. We probably don't want this functionality when running inside third-party apps hosting MSBuild (for example Visual Studio!). Since VS can load a ton of third-party assemblies too.",
  "state": "CLOSED",
  "createdAt": "2023-05-30T21:45:53Z",
  "updatedAt": "2024-02-21T14:04:50Z",
  "closedAt": "2023-07-03T18:32:45Z",
  "author": {
    "login": "KirillOsenkov"
  },
  "labels": [
    "backlog",
    "Priority:1",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "rokonec"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "I'm suggesting a higher priority here - as it is a new feature (so has higher chance of disruption of unthought scenarios).\r\n\r\nAs a side effect it'd solve #8784 as well. On the other hand, this still can happen to be usefull in visual studio - we should probably allow explicit opt-in in such case (so the #8784 still might need to be investigated).\r\n\r\nOther option is explicit opt-in in all build scenarios",
        "createdAt": "2023-06-05T07:03:50Z",
        "updatedAt": "2023-06-05T07:03:50Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "Triage recommendation:\r\n* Turn assembly logging by default only for cases where entrypoint is the `main` in `XMake.cs` (this involves msbuild.exe, CLI, nodes)\r\n* Make it possible to opt-in for assembly loads logging in other cases (API calls) - trait/envvar/etc.\r\n* Grace handle missing/invalid build context to prevent the posted crash",
        "createdAt": "2023-06-06T14:13:18Z",
        "updatedAt": "2023-06-06T14:13:18Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "![image](https://github.com/dotnet/msbuild/assets/679326/46175d61-240c-41de-997d-db3f956296f9)\r\n",
        "createdAt": "2023-06-06T18:59:20Z",
        "updatedAt": "2023-06-06T18:59:20Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "Would `Grace handle missing/invalid build context to prevent the posted crash` be enough? I see nothing wrong on logging assembly loads for VS (if there is any) use case by default, as long as it is not crashing.",
        "createdAt": "2023-06-08T11:18:58Z",
        "updatedAt": "2023-06-08T11:18:58Z",
        "author": {
          "login": "rokonec"
        }
      },
      {
        "body": "It\u2019s not clear which build/logger it should go to. A host app may have multiple BuildManager sessions, and there might be race conditions when one build is shutdown and another is started. But we can try! I\u2019m happy to test a fix, I have an app I host MSBuild in.",
        "createdAt": "2023-06-08T16:30:35Z",
        "updatedAt": "2023-06-08T16:30:35Z",
        "author": {
          "login": "KirillOsenkov"
        }
      }
    ]
  }
}