{
  "number": 8108,
  "title": "MSBuild fails to report errors during restore on Directory.Packages.props",
  "body": "<!-- This is a template that helps us provide quicker feedback. Please use any relevant sections and delete anything you don't need. -->\r\n\r\n### Issue Description\r\n\r\nWhen running `dotnet restore`, msbuild is failing to report errors in importing the Directory.Packages.props due to syntactic errors. This misleads the user into thinking that they have package version issues, when in fact their package versions may be fine, but they have syntax errors in their package versions.\r\n\r\n### Steps to Reproduce\r\n1. ensure dotnet sdk 6.0.402 is installed and the only installed 6.x version.\r\n2. clone the project at https://github.com/erinlah-ms/bug-repros/tree/main/repro-cpm-nowarn\r\n3. dotnet restore /bl\r\n\r\n<!--\r\n* Include as much of the following as possible:\r\n\r\n* A minimal sample project that reproduces the issue.\r\n* Your zipped project.\r\n* IDE / CLI steps to create the project and reproduce the behaviour.\r\n* Your command line invocation\r\n\r\nIf providing steps to reproduce the issue proves difficult, consider attaching a binlog:\r\n[Details on sharing binary logs](https://aka.ms/msbuild/binlog)\r\n[More information on binary logs](https://github.com/dotnet/msbuild/blob/main/documentation/wiki/Binary-Log.md)\r\nNOTE: Binary logs capture environment information. Ensure it does not include any information you don't want to be public before you attach one.\r\nIf you want to share one just with Microsoft, you can [report a problem through Visual Studio](https://developercommunity.visualstudio.com/report) and share it privately with Microsoft.\r\n-->\r\n\r\n### Expected Behavior\r\n\r\nExpect error `Directory.Packages.props(10,3): error MSB4085: A <Choose> must contain\r\nat least one <When>`\r\n\r\n### Actual Behavior\r\n\r\nThe following misleading error appears. (Note, in the real world use case, user received dozens of Nu1202 and Nu1701 errors that mislead user into wasting time trying to figure out where the bad package versions were being imported.)\r\n\r\n```\r\nrepro-cpm-nowarn.csproj : error NU1604: Project dependency Microsoft.NE\r\nTFramework.ReferenceAssemblies does not contain an inclusive lower bound. Include a lower bound in the dependency versi\r\non to ensure consistent restore results.\r\n```\r\n\r\n\r\n### Analysis\r\n\r\nSuspect this relates to the `<RestoreContinueOnError Condition=\" '$(RestoreContinueOnError)' == '' \">WarnAndContinue</RestoreContinueOnError>` setting. This setting instructs msbuild to defer certain kinds of error processing during the 'restore' target used by nuget. However, this setting can result in msbuild failing to process inputs to the restore process, as is the case in this bug.\r\n\r\n### Versions & Configurations\r\n\r\nOS: Windows\r\n\r\ndotnet/msbuild versions:\r\n```\r\n$ dotnet --version\r\n6.0.402\r\n\r\n$ dotnet msbuild --version\r\nMSBuild version 17.3.2+561848881 for .NET\r\n17.3.2.46306\r\n```\r\n\r\n<!--\r\n* In a Visual Studio developer command prompt, run `msbuild -version` and paste the output here.\r\n* If applicable, include the version of the tool that invokes MSBuild (Visual Studio, dotnet CLI, etc):\r\n\r\n* Post any other relevant configuration settings here.\r\n*   OS, architecture, etc.\r\n-->\r\n",
  "state": "OPEN",
  "createdAt": "2022-10-31T16:55:04Z",
  "updatedAt": "2024-01-31T08:15:51Z",
  "closedAt": null,
  "author": {
    "login": "ghost"
  },
  "labels": [
    "bug",
    "Feature Request",
    "Partner request",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "This is currently because of how I programmed `/restore` and `/t:restore` to evaluate projects to ignore missing and invalid imports:\r\n\r\nhttps://github.com/dotnet/msbuild/blob/main/src/MSBuild/XMake.cs#L1597\r\n\r\nThe idea at the time was that restore might bring down an import that was missing, empty, or \"invalid\" and then the build will succeed or fail based on that.  This works well when you run `/restore` because a build happens immediately afterwards but `/t:restore` just \"succeeds\" even if you have bad XML or you get strange warnings from other parts of restore.\r\n\r\nSimilar to when I added a new flag `FailOnUnresolvedSdk`, we should probably consider adding two new flags for just missing and invalid but still give an error during restore if there is bad XML.",
        "createdAt": "2022-10-31T17:06:43Z",
        "updatedAt": "2022-10-31T17:06:43Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "@jeffkl Thanks for responding. Yes, the error on invalid / schema nonconforming xml would be appreciated.\r\n\r\nI just worry that this sort of bugs will keep cropping up as long as the basic design conflict remains unaddressed - validating project validity before executing restore, vs ignoring invalidity caused by incomplete package restore.\r\n\r\nJust floating an idea: consider more explicit phasing here and disable PackageReference imports during restore. They're a nasty source of potential nondeterminism during incremental build (second restore has different effect than first restore). I got the impression that the point of RestoreContinueOnError was to pave over issues importing .props/.targets imported from PackageReferences, and making the non-import explicit during restore would address this while also improving incremental determinism.",
        "createdAt": "2022-10-31T18:51:43Z",
        "updatedAt": "2022-10-31T18:53:03Z",
        "author": {
          "login": "ghost"
        }
      }
    ]
  }
}