{
  "number": 8580,
  "title": "[Bug]: Transitive ProjectReference Does Not Respect Build Configuration",
  "body": "### Issue Description\r\n\r\nI have three projects A, B and C:\r\n\r\nProject A:\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n    <PropertyGroup>\r\n        <TargetFramework>net6.0</TargetFramework>\r\n        <ImplicitUsings>enable</ImplicitUsings>\r\n        <Nullable>enable</Nullable>\r\n    </PropertyGroup>\r\n\r\n    <ItemGroup>\r\n        <ProjectReference Include=\"..\\ProjectB\\ProjectB.csproj\" />\r\n    </ItemGroup>\r\n\r\n</Project>\r\n```\r\n\r\nProject B:\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n    <PropertyGroup>\r\n        <TargetFramework>net6.0</TargetFramework>\r\n        <ImplicitUsings>enable</ImplicitUsings>\r\n        <Nullable>enable</Nullable>\r\n    </PropertyGroup>\r\n\r\n    <ItemGroup>\r\n        <ProjectReference Include=\"..\\ProjectC\\ProjectC.csproj\" />\r\n    </ItemGroup>\r\n\r\n</Project>\r\n```\r\n\r\nProject C:\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n    <PropertyGroup>\r\n        <TargetFramework>net6.0</TargetFramework>\r\n        <ImplicitUsings>enable</ImplicitUsings>\r\n        <Nullable>enable</Nullable>\r\n    </PropertyGroup>\r\n\r\n</Project>\r\n```\r\n\r\nIn a solution, I have added Project A, and - since I have a project reference on it - Project B - but not Project C, since I don't have a direct dependency on that. When now building the solution, the following output appears:\r\n\r\n```\r\n\u279c  dotnet build -c Release                                                                                                                                                                                                                                                                          [0] : took 2s\r\nMicrosoft (R) Build Engine version 17.0.1+b177f8fa7 for .NET\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Determining projects to restore...\r\n  All projects are up-to-date for restore.\r\n  ProjectC -> /home/mn/code/issue/ProjectC/bin/Debug/net6.0/ProjectC.dll\r\n  ProjectB -> /home/mn/code/issue/ProjectB/bin/Release/net6.0/ProjectB.dll\r\n  ProjectA -> /home/mn/code/issue/ProjectA/bin/Release/net6.0/ProjectA.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n```\r\n\r\nAs you can see, Projects A and B respect the `Release` configuration of the build, while Project C does not and instead puts the generated `DLL` into the `Debug` directory. Is there something I am missing in my setup? Why does it not work as I would expect it (Project C is actually built considering the `Release` config)?\r\n\r\n### Steps to Reproduce\r\n\r\nBuild the solution with the `Release` configuration, i.e.\r\n\r\n`dotnet build -c Release`\r\n\r\n### Expected Behavior\r\n\r\nAll projects are adding their output into their respective `Release` subdirectories\r\n\r\n### Actual Behavior\r\n\r\nProject C has its output in the `Debug` subdirectory\r\n\r\n### Analysis\r\n\r\n_No response_\r\n\r\n### Versions & Configurations\r\n\r\n_No response_",
  "state": "CLOSED",
  "createdAt": "2023-03-21T07:55:49Z",
  "updatedAt": "2025-02-21T01:32:38Z",
  "closedAt": "2023-03-24T08:20:33Z",
  "author": {
    "login": "mneundorfer"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "bug",
    "needs-triage"
  ],
  "comments": {
    "nodes": [
      {
        "body": "Project A does not have a direct dependency but Project B does. As a work-around, add Project C to your solution.\r\n\r\nI haven't tried to reproduce this bug but I can say that in Legacy projects a `ProjectReference` to a project that is not in the solution is (or was) an error.",
        "createdAt": "2023-03-21T12:41:20Z",
        "author": {
          "login": "jrdodds"
        }
      },
      {
        "body": "Team triage: MSBuild gets the projects configuration for the build from the solution file. In case it could not do that (for example, when project is not added to the solution), the project's configuration defaults to `Debug`. So, this is intended behavior and not a bug. The work-around described above, adding project C to the solution, is actually the real fix. ",
        "createdAt": "2023-03-21T16:13:01Z",
        "author": {
          "login": "AR-May"
        }
      },
      {
        "body": "Thanks for the replies!\r\n\r\nSince the solution itself does not cause any obvious errors like described by @jrdodds, it at least feels a little bit inconsistent if on the other hand it is required to introduce a direct dependency to an otherwise transitive dependency\r\n\r\nThen again, maybe my approach is flaky in the first place: I have a set of common libs which internally depend on each other (B->C), and want to avoid having to `PackageReference` all of them into my application A. Maybe there's a better approach I just don't see?",
        "createdAt": "2023-03-21T16:30:09Z",
        "author": {
          "login": "mneundorfer"
        }
      },
      {
        "body": "It's fine for A to have a `ProjectReference` to B, and for B to have a `ProjectReference` to C. The project file for A shouldn't and doesn't need to know about B's dependencies. The dependencies can change over time and will be resolved at the time of the build.",
        "createdAt": "2023-03-21T16:43:01Z",
        "author": {
          "login": "jrdodds"
        }
      },
      {
        "body": "Sorry, that's a typo above - of course I meant `ProjectReference`\r\n\r\nBut what you describe is exactly my issue: I don't want to have a `ProjectReference` from A to C. But this results in the behavior described in this issue, and later on makes the `dotnet publish -c Release --no-build` fail. Because the assemblies for Project C cannot be found where they are expected (they don't exist in `bin/Release`, but only in `bin/Debug`)",
        "createdAt": "2023-03-21T17:07:08Z",
        "author": {
          "login": "mneundorfer"
        }
      },
      {
        "body": "**There is no reason for Project A to have a `ProjectReference` to C.**\r\n\r\n- The solution (.sln) file should list all three projects: A, B, and C.\r\n- Project A should have a `ProjectReference` to B.\r\n- Project B should have a `ProjectReference` to C.\r\n\r\nThe solution file maps a 'solution level' configuration to a 'project level' configuration. The default 'Release' configuration of the solution file will indicate that Project A (Release), Project B (Release), and Project C (Release) should be used.",
        "createdAt": "2023-03-21T17:24:11Z",
        "author": {
          "login": "jrdodds"
        }
      },
      {
        "body": "Mhh.. Still I would argue that the first bullet point kind of violates the rule of not having to know about a projects transitive dependencies. Sure, Project A does not need to know in this case - but whoever creates the solution must know about it.\r\n\r\nAnyways, I can live with the provided workaround/fix. Thanks for the support!",
        "createdAt": "2023-03-22T08:51:25Z",
        "author": {
          "login": "mneundorfer"
        }
      },
      {
        "body": "I think that the `ProjectReference` should inherit the `Configuration` value of the `Project` that references it. \r\nIn fact, that is what happens if instead of compiling the solution file it compiles 'ProjectA' directly.\r\n\r\nIt seems a great incoherence that solution and project builds behave so differently.\r\n\r\nPlease, reconsider reopening this issue and fixing it.",
        "createdAt": "2023-06-28T10:48:25Z",
        "author": {
          "login": "ADD-David-Antolin"
        }
      },
      {
        "body": "Hi, in our solution(s) we are experiencing the same. It gets even more confusing if \"Project C\" has a conditional dependency that are only used in case of a specific build configurations.\r\n\"dotnet restore\" doesn't know about \"Build Configurations\", it fails when the `-c` switch is used. So I run a \"dotnet restore\" on the solution and it restores some packages but not necessarily those that are needed when I later run the \"dotnet build\" WITH specifying the build configuration. Thus, the build fails since assemblies are missing.\r\nI would highly advocate passing down the specified build configuration to transitive ProjectReferences.\r\n\r\nI also agree that not all projects only used as indirect dependencies should be part of the solution file. Only direct dependencies should need to be specified. This would also match Visual Studio behaviours when convertig NuGet references from the `packages.config` format to `PackageReferences` in the .csproj files. It advises you to only specify direct dependencies and drops all those which are only indirect. Some consistency would be nice!\r\n\r\nSpeaking of PackageReferences: That's also a possible workaround to using ProjectReferences. It just makes chaning stuff over lots of different projects and debugging it harder.",
        "createdAt": "2023-10-19T15:17:04Z",
        "author": {
          "login": "jachstet-sea"
        }
      },
      {
        "body": "Hi, I'm doing\n```\ndotnet publish --self-contained -c Release -r linux-x64 --force\n```\nto publish a release package, but ProjectReference is building into bin/Debug folder, like\n```\n  PHPDeserializer succeeded (0.0s) \u2192 c:\\code\\php-deserializer\\PHPDeserializer\\bin\\Debug\\netstandard2.0\\PHPDeserializer.dll\n```\nAnd one more issue, the new dotnet 9 publish does not print the final publish folder at the end, but rather in the middle of the verbose. It is very hard to find it",
        "createdAt": "2025-02-21T01:32:36Z",
        "author": {
          "login": "szmcdull"
        }
      }
    ]
  }
}