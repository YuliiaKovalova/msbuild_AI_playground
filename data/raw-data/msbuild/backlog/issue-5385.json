{
  "number": 5385,
  "title": "Consider loading task assemblies using Assembly.Load(byte[])",
  "body": "A common problem is MSBuild node processes locking a task assembly file on disk and lingering, thus preventing the deletion or update of the file. \r\n\r\nConsider reading the raw bytes from disk and loading using that, to avoid holding the .dll locked. Need to investigate whether there will be performance or other implications.\r\n\r\nhttps://source.dot.net/#System.Private.CoreLib/Assembly.cs,b2d43e31d338b43c\r\n\r\nTo me the locked task .dll happens often enough that it would be warranted.",
  "state": "OPEN",
  "createdAt": "2020-05-30T20:56:44Z",
  "updatedAt": "2024-02-21T16:29:23Z",
  "closedAt": null,
  "author": {
    "login": "KirillOsenkov"
  },
  "labels": [
    "needs-design",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Backlog"
  },
  "comments": {
    "nodes": [
      {
        "body": "I think there would be loading-of-dependency implications. Right now those come from the task's directory.\r\n\r\nThe best workaround for the locking problem at the moment is to specify to run the task in an isolated process with `UsingTask TaskFactory=\"TaskHostFactory\"`. That has perf implications due to IPC overhead, of course. But I don't think there's any no-compromises approach in .NET.",
        "createdAt": "2020-06-03T15:42:28Z",
        "updatedAt": "2020-06-03T15:42:28Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "What if we just flip nodereuse to false by default? How much are we really gaining by reusing nodes?",
        "createdAt": "2020-06-03T20:39:38Z",
        "updatedAt": "2020-06-03T20:39:38Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "> What if we just flip nodereuse to false by default? How much are we really gaining by reusing nodes?\r\n\r\nI fully agree with that. We ran into this because we had different versions of a build task assembly in different branches. Building one branch after another lead to usage of wrong version because of reusing a node where the assembly was already loaded.\r\n\r\nWe finally found out that disabling node reuse is the right choice for us but why on earth is the default for this \"ON\"? You can't assume that node reuse is safe at least if there are custom build task assemblies. This contradicts reproducable builds.\r\n\r\nOr is there a way to define rules about node reuse so the new build knows it can't use nodes from a previous build in another branch?",
        "createdAt": "2022-11-15T07:31:47Z",
        "updatedAt": "2022-11-15T07:31:47Z",
        "author": {
          "login": "csharper2010"
        }
      },
      {
        "body": "> Or is there a way to define rules about node reuse so the new build knows it can't use nodes from a previous build in another branch?\r\n\r\nSpecify `TaskFactory=\"TaskHostFactory\"` in the `UsingTask` that references your task. Then it will be run in a fresh process that is never reused across builds.",
        "createdAt": "2022-11-15T14:53:19Z",
        "updatedAt": "2022-11-15T14:53:19Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}