{
  "number": 9197,
  "title": "Analyzer: Task built in current build referenced without TaskHostFactory",
  "body": "It's fairly common for a repo to have need of a custom task to do something. In those cases it's easiest to define the task as a project within the repo and reference it in other projects that use it. But there's a common problem, which is that the default `UsingTask` configuration optimizes for the next build and keeps referenced assemblies in memory, locking their underlying files. This means that it's hard to change the task source code, because if it builds it tries to overwrite the (locked by the previous build) output .dll.\r\n\r\nThe [pattern to fix this](https://github.com/rainersigwald/build-task-in-solution-demo) is to specify `TaskHostFactory` to run the \"private\" task in a separate process, which ends (and frees filesystem locks) before the next build. But that's not _obvious_ and if you don't do it you can be frustrated and work around by closing/reopening Visual Studio all the time or running builds with `-nodeReuse:false` (at perf cost).\r\n\r\nIt would be nice to have a nudge to use `TaskHostFactory`, if you don't. I think we could detect the case by \"is the referenced assembly in a `UsingTask` the output of another project in this build?\"\r\n\r\n(inspired by a conversation with @MichalPavlik about inline-task UX)",
  "state": "OPEN",
  "createdAt": "2023-08-31T14:39:38Z",
  "updatedAt": "2024-07-10T21:00:59Z",
  "closedAt": null,
  "author": {
    "login": "rainersigwald"
  },
  "labels": [
    "Feature: Warning Waves",
    "BuildCheck Suggestion",
    "triaged",
    "Area: BuildCheck"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "On MSBuild 17.3.2+561848881, I tried two `UsingTask` elements referencing different task types in the same `AssemblyFile` and having `TaskFactory=\"TaskHostFactory\"` in each, but `dotnet build` failed:\r\n\r\n> error MSB4062: The \"[REDACTED]\" task could not be loaded from the assembly [REDACTED].dll. The assembly 'Microsoft.Build.Utilities.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' has already loaded been loaded into this MetadataLoadContext. Confirm that the <UsingTask> declaration is correct, that the assembly and all its dependencies are available, and that the task contains a public class that implements Microsoft.Build.Framework.ITask.\r\n\r\nThe error was apparently caused by <https://github.com/dotnet/msbuild/issues/7920>, which has been fixed in MSBuild v17.4.1.  I then changed the PackageReference to:\r\n\r\n```XML\r\n    <ItemGroup>\r\n      <PackageReference Include=\"Microsoft.Build.Utilities.Core\" Version=\"15.9.20\">\r\n        <ExcludeAssets>runtime</ExcludeAssets>\r\n      </PackageReference>\r\n    </ItemGroup>\r\n```\r\n\r\nand MSBuild successfully loaded the tasks.\r\nPerhaps the analyzer or related documentation should say something about that.",
        "createdAt": "2023-09-04T06:34:04Z",
        "updatedAt": "2023-09-04T07:08:07Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      }
    ]
  }
}