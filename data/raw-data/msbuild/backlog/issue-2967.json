{
  "number": 2967,
  "title": "Build does not include NuGet transitive references from project reference",
  "body": "I'm using VS2017 and ProjectReference/PackageReference to manage my dependencies.\r\n\r\nI have a .NET Core 2.0 console app that references a multi-target project in the same solution, which in turn references two NuGet packages in a company/private NuGet gallery.\r\n\r\nThe project reference targets .NET 4.5, 4.6, and Standard 2.0.\r\n\r\nIn VS2017 everything restores, runs, and debugs correctly.\r\n\r\nWhen I try to use the CLI to build the project, it builds correctly; however, the output path only contains two assemblies: the console app and the project reference.\r\n\r\nThe two assemblies that come the two NuGet packages are missing.\r\n\r\nI tried editing the project reference CSPROJ to use different combinations of <PrivateAssets> and <IncludeAssets> elements for the two NuGets, but it's not working.\r\n\r\nI've also tried doing the same for the project reference in the console app.\r\n\r\nI've tried using \"msbuild\" and \"dotnet msbuild\". Same results.\r\n\r\nI must be missing something because I can't believe there's no way to tell the builder to include the two NuGet assemblies in the output path.\r\n\r\nI've attached a ZIP file with two very simple projects to reproduce the issue.\r\n\r\nThis is an example of the CLI command I'm using.\r\n\"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Professional\\MSBuild\\15.0\\Bin\\MSBuild.exe\" \"<Console App Path>\\ConsoleApp1.csproj\" /p:Configuration=Release /p:OutputPath=\"<Build Output Path>\"\r\n\r\n[ConsoleApp1.zip](https://github.com/Microsoft/msbuild/files/1704574/ConsoleApp1.zip)\r\n",
  "state": "CLOSED",
  "createdAt": "2018-02-07T20:07:28Z",
  "updatedAt": "2024-02-21T17:14:33Z",
  "closedAt": "2018-02-07T21:55:18Z",
  "author": {
    "login": "eoneillcarrillo"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "I'm closing this issue.\r\n\r\nThere wasn't really any issue at all. I was treating my .NET Core project like a regular project and using msbuild directly when I should've been using \"dotnet publish\" all along.\r\n\r\nI also just learned that \"msbuild /t:publish\" should do the same work as \"dotnet publish\".",
        "createdAt": "2018-02-07T21:55:16Z",
        "updatedAt": "2018-02-07T21:55:16Z",
        "author": {
          "login": "eoneillcarrillo"
        }
      }
    ]
  }
}