{
  "number": 4348,
  "title": "Cannot resolve dll after upgrading to VS2019",
  "body": "### Steps to reproduce\r\n[SupercalifragilisticexpialidociousLongConsoleApp.zip](https://github.com/Microsoft/msbuild/files/3136969/SupercalifragilisticexpialidociousLongConsoleApp.zip)\r\n\r\nRestore packages with e.g. \r\n```\r\nnuget restore C:\\SupercalifragilisticexpialidociousLongConsoleApp\\SupercalifragilisticexpialidociousLongConsoleApp.sln\r\n```\r\n\r\nBuilding with VS 2017 *works*\r\n```\r\n& '.\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\MSBuild\\15.0\\Bin\\MSBuild.exe' C:\\SupercalifragilisticexpialidociousLongConsoleApp\\SupercalifragilisticexpialidociousLongConsoleApp.sln\r\n```\r\n\r\nBuilding with VS 2019 *fails*\r\n```\r\n& '.\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Professional\\MSBuild\\Current\\Bin\\MSBuild.exe' C:\\SupercalifragilisticexpialidociousLongConsoleApp\\SupercalifragilisticexpialidociousLongConsoleApp.sln\r\n```\r\n### Expected  behavior\r\nBuilding the solution should still work in VS2019\r\n\r\n### Actual behavior\r\nVS2019 shows the following warnings/erros:\r\n```\r\nError\tCS1061\t'RetryManager' does not contain a definition for 'GetDefaultAzureStorageRetryPolicy' and no accessible extension method 'GetDefaultAzureStorageRetryPolicy' accepting a first argument of type 'RetryManager' could be found (are you missing a using directive or an assembly reference?)\r\nWarning\t\tThe referenced component 'Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling' could not be found.\r\nWarning\t\tThe referenced component 'Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.WindowsAzure.Storage' could not be found.\r\nWarning\t\tCould not resolve this reference. Could not locate the assembly \"Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.WindowsAzure.Storage, Version=6.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL\". Check to make sure the assembly exists on disk. If this reference is required by your code, you may get compilation errors.\r\n```\r\n\r\n### Environment data\r\n`msbuild /version` output:\r\n```\r\nMicrosoft (R) Build Engine version 16.0.461+g6ff56ef63c for .NET Framework\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n16.0.461.62831\r\n```\r\nOS info: \r\n`Windows 10 Version 1809 OS Build 17763.437`\r\n\r\n### Additional info:\r\nFrom what I could see, the problem is related to resolving the package dlls using `HintPath`.\r\nWhen the csproj is located at:\r\n`C:\\SupercalifragilisticexpialidociousLongConsoleApp\\SupercalifragilisticexpialidociousLongConsoleApp`\r\nwith a `HintPath` of\r\n`..\\packages\\EnterpriseLibrary.TransientFaultHandling.6.0.1304.0\\lib\\portable-net45+win+wp8\\Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.dll`\r\n\r\nthe concatenated length is above 260 (or some close number) characters.\r\nFor the real solution I was debugging, the solution became compilable once I shortened the name of a folder, such that the concatenated length was less than 260 characters.",
  "state": "CLOSED",
  "createdAt": "2019-05-02T07:21:56Z",
  "updatedAt": "2024-02-21T17:08:30Z",
  "closedAt": "2019-06-17T17:06:20Z",
  "author": {
    "login": "jnyrup"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "MSBuild 16.2"
  },
  "comments": {
    "nodes": [
      {
        "body": "Interesting. Do you have the long-path registry key set in Windows? Details on that are at https://github.com/Microsoft/msbuild/issues/53#issuecomment-459062618.",
        "createdAt": "2019-05-02T15:00:23Z",
        "updatedAt": "2019-05-02T15:00:23Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "* The group policy `Enable Win32 long paths` is set to `not configured`\r\n* The registry key `Computer\\HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\FileSystem\\LongPathsEnabled` it set to `0`",
        "createdAt": "2019-05-02T15:08:22Z",
        "updatedAt": "2019-05-02T15:08:22Z",
        "author": {
          "login": "jnyrup"
        }
      },
      {
        "body": "I have reported the same problem on the Visual Studio Developer Community forum in this post https://developercommunity.visualstudio.com/content/problem/526583/change-in-max-allowed-filepath-length-when-referen.html . I have experienced the same, that the location of the .csproj file plays a role, not only the path to the referenced assembly. My scenario is the same, when using a nuget package with the old package.config format, where the hintpath can get pretty long dependent on the package name. As stated in the above forum thread I have also tried enabling the long-path registry and this fixed the problem on Windows 10. But some of our machines are still on Windows 7 where that solution is not possible. ",
        "createdAt": "2019-05-24T07:00:10Z",
        "updatedAt": "2019-05-24T07:00:10Z",
        "author": {
          "login": "sokiha"
        }
      },
      {
        "body": "The same problem. Unfortunately, our CI machines are still on Windows 7 and there is no workaround at the moment.\r\nUsing `bisect` I have found the breaking change was likely introduced in #3700.\r\nSeems like something is wrong with cached `FileExists`.",
        "createdAt": "2019-05-27T00:19:17Z",
        "updatedAt": "2019-05-27T00:19:17Z",
        "author": {
          "login": "shivinsky"
        }
      },
      {
        "body": "If that is the breaking change, I see where there is a behavior difference from changing the ```FileExists``` cache to use ```getLastWriteTime()``` instead of ```fileExists()```. For reference, the ```fileExists()``` and ```getLastWriteTime()``` delegates propagated to that class via RAR are respectively:\r\nhttps://github.com/microsoft/msbuild/blob/103f944e00db6622521710026a5e0b451502160a/src/Shared/FileUtilities.cs#L895\r\nhttps://github.com/microsoft/msbuild/blob/103f944e00db6622521710026a5e0b451502160a/src/Shared/NativeMethodsShared.cs#L965\r\n\r\nThey both make a call to the same native method to check for file existence; however, the former will attempt to shorten the path if greater than MAX_PATH.\r\n\r\nI wonder if all paths here may need a call to ```AttemptToShortenPath``` at some point too; I noticed (in both before/after the breaking commit) the methods for retrieving assembly metadata don't shorten the path anywhere, and include calls to ```getLastWriteTime()```. So only shortening the path on ```FileExists``` may result in inconsistent results, although it would match the previous behavior.",
        "createdAt": "2019-05-28T13:58:23Z",
        "updatedAt": "2019-05-28T13:58:23Z",
        "author": {
          "login": "ccastanedaucf"
        }
      },
      {
        "body": "I confirm that there is problem with compilation of Project which references some DLL dependencies, when combined path (of Project and DLLs) exceeds `MAX_PATH` 260 chars.\r\n\r\n1. In my setup, we have problematic Project under (96 chars):\r\n`C:\\Users\\dominikj\\ja83\\yAaVcJ5C\\WdkPBmb9QM03\\a7xi4UgAjKkMMEBAT\\HEGQLaKcMuEAffV6wT8B46d2pBgpwUzEr`\r\n2. And full path of dependency is (188 chars):\r\n`C:\\Users\\dominikj\\ja83\\yAaVcJ5C\\BhDztgbAEe\\Packages\\EnterpriseLibrary.TransientFaultHandling.Data.6.0.1304.1\\lib\\NET45\\Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.Data.dll`\r\n3. Project's `csproj` have got `HintPath` for dependency (165 chars):\r\n`..\\..\\..\\BhDztgbAEe\\Packages\\EnterpriseLibrary.TransientFaultHandling.Data.6.0.1304.1\\lib\\NET45\\Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.Data.dll`\r\n4. So then, combined path's length is greater than limit (262 chars): \r\n`C:\\Users\\dominikj\\ja83\\yAaVcJ5C\\WdkPBmb9QM03\\a7xi4UgAjKkMMEBAT\\HEGQLaKcMuEAffV6wT8B46d2pBgpwUzEr\\..\\..\\..\\BhDztgbAEe\\Packages\\EnterpriseLibrary.TransientFaultHandling.Data.6.0.1304.1\\lib\\NET45\\Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.Data.dll`\r\n\r\nWhen I try to compile it by Visual Studio 2019, or explicitly via MSBuild (16.1.76+g14b0a930a7) console execution, I got error: _The type 'ReliableSqlConnection' is defined in an assembly that is not referenced. You must add a reference to assembly 'Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.Data, Version=6.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'._\r\n\r\nHowever, when I move my sources under some shorter location (just 3 chars less), or just use previous MSBuild (15.9.21+g9802d43bc3) from VS2017 (via IDE or console), everything compiles fine with my setup.\r\n\r\nThankfully solution presented in https://github.com/microsoft/msbuild/issues/53#issuecomment-459062618 with `Enable Win32 long paths` solves my issue, but still, it works in previous MSBuild version without any changes.",
        "createdAt": "2019-06-11T10:05:52Z",
        "updatedAt": "2019-06-11T10:05:52Z",
        "author": {
          "login": "DominikJaniec"
        }
      },
      {
        "body": "I think #4414 by @mfilippov is a decent path forward here. @ccastanedaucf, can you take a look at it when you get a chance?",
        "createdAt": "2019-06-11T20:01:29Z",
        "updatedAt": "2019-06-11T20:01:29Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@mfilippov's #4414 should fix this; that should go out with 16.2 (but we missed preview 3).",
        "createdAt": "2019-06-17T17:06:20Z",
        "updatedAt": "2019-06-17T17:06:20Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}