{
  "number": 2795,
  "title": "Allow CopyToOutputDirectory to have a custom destination path",
  "body": "The destination of `CopyToOutputDirectory` attribute in msbuild is fixed, there are various questions about how to change the destination path:\r\n\r\nhttps://stackoverflow.com/questions/10204370/can-i-specify-the-output-path-for-the-msbuild-content-tag\r\nhttps://stackoverflow.com/questions/18591107/copytooutputdirectory-override-destination-path\r\nhttps://stackoverflow.com/questions/5915610/msbuild-project-file-copy-item-to-specific-location-in-output-directory\r\nhttps://stackoverflow.com/questions/1014207/copy-to-output-directory-copies-folder-structure-but-only-want-to-copy-files/21534669#21534669\r\n\r\nThe simplest accepted answer requires a custom msbuild task or command running after the build. Please add an additional `OutputDirectory` attribute. \r\n\r\nProject file\r\n```xml\r\n<Project>\r\n  <ItemGroup>\r\n    <None Include=\"../folder1/**/*.*\" CopyToOutputDirectory=\"PreserveNewest\" OutputDirectory=\"folder2\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nDirectory contents:\r\n```\r\n/\r\n- folder1/\r\n     - a.cs\r\n- proj/\r\n     - proj.csproj\r\n```\r\n\r\nCommand line\r\n```\r\nmsbuild proj/proj.csproj\r\n```\r\n### Expected  behavior\r\n\r\nOutput directory contents:\r\n```\r\nbin/Debug/\r\n- folder2/\r\n        - a.cs\r\n```\r\n\r\n### Actual behavior\r\n\r\nOutput directory contents:\r\n```\r\nbin/Debug/\r\n- a.cs  \r\n```\r\n",
  "state": "CLOSED",
  "createdAt": "2017-12-10T09:50:17Z",
  "updatedAt": "2024-02-21T17:15:18Z",
  "closedAt": "2017-12-10T10:41:01Z",
  "author": {
    "login": "yufeih"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "This currently works by using the `Link` metadata on the items:\r\n\r\n```xml\r\n<ItemGroup>\r\n  <None Include=\"../folder1/**/*\" Link=\"folder2\\%(RecursiveDir)%(Filename)%(Extension)\" CopyToOutputDirectory=\"PreserveNewest\"  />\r\n</ItemGroup>\r\n```\r\n\r\nSDK-based projects (default for .NET Core and .NET Standard) now support `LinkBase` metadata as per https://github.com/dotnet/sdk/pull/1246.\r\n\r\n> If setting the Link metadata automatically, the value will be set to `%(LinkBase)\\%(RecursiveDir)%(Filename)%(Extension)`. If LinkBase or RecursiveDir are not defined, then those pieces will be left out of the value. So `<Compile Include=\"..\\Shared\\**\\*.cs\" LinkBase=\"Shared\" />` would show the items under the \"Shared\" folder in solution explorer, instead of the root, and would preserve any heirarchy under the shared folder.\r\n\r\nhttps://stackoverflow.com/questions/45800697/new-csproj-format-how-to-specify-entire-directory-as-linked-file-to-a-subdi/45802399#45802399\r\n\r\nI patched up the code from the SDK (minus a fix when referencing shared projects added later on) to be usable in classic projects in https://stackoverflow.com/questions/44423582/link-additional-files-in-visual-studio/44427519#44427519\r\n\r\nThe downside of using the `Link` metadata is that the items will be shown in the solution explorer under the constructed path which may or may not be what the user wants. Maybe the `AssignTargetPaths` task could be extended to check if there is already a `TargetPath` metadata on the items it processes. This is useful since in contrast to `ContentWithTargetPath`, `_NoneWithTargetPath` is private by convention. This could allow for additional `TargetPathBase` logic similar to `LinkBase` but without interfering with logic coming from the SDK.\r\n\r\nPersonally, I'm fine with the way `Link` and especially the SDK's `LinkBase` work, I just wished `LinkBase` would have been implemented in MSBuild directly.\r\n\r\nExample showing usage of both ways: \r\n[linktest.zip](https://github.com/Microsoft/msbuild/files/1545501/linktest.zip)\r\n",
        "createdAt": "2017-12-10T10:22:33Z",
        "updatedAt": "2017-12-10T10:23:58Z",
        "author": {
          "login": "dasMulli"
        }
      },
      {
        "body": "Thanks @dasMulli , `LinkBase` does solve the problem of linking files outside the project dir.\r\n\r\n",
        "createdAt": "2017-12-10T10:35:37Z",
        "updatedAt": "2017-12-10T10:35:37Z",
        "author": {
          "login": "yufeih"
        }
      },
      {
        "body": "The link element behaves strangely for me in a .net 4.6.2 project.\r\n\r\nI have a few files in a \"wwwroot/build\" folder that, when the project builds, i want to output to the /bin/Release/wwwroot folder. In my .csproj file i added the following:\r\n\r\n```\r\n<PropertyGroup>\r\n\t\t<AssignTargetPathsDependsOn>\r\n\t\t\t$(AssignTargetPathsDependsOn);\r\n\t\t\tNpmBuildFiles;\r\n\t\t</AssignTargetPathsDependsOn>\r\n\t</PropertyGroup>\r\n\t\r\n\t<!-- Gets the files build by 'npm run build' -->\r\n\t<Target Name=\"NpmBuildFiles\" DependsOnTargets=\"NpmBuild\">\t\r\n\t\t<ItemGroup>\r\n\t\t\t<None Include=\"wwwroot/build/**/*\"\r\n\t\t\t\tLink=\"wwwroot\\%(RecursiveDir)%(Filename)%(Extension)\"\r\n\t\t\t\tCopyToOutputDirectory=\"PreserveNewest\"/>\r\n\t\t</ItemGroup>\r\n\t</Target>\r\n```\r\n\r\nHowever, after the build, the bin/Release/wwwroot folder contains a few files, but not all of them and some of them even files that do not exist in the wwwroot/build folder (but that do exist in the original wwwroot folder).\r\n\r\nThe msbuild output seems to indicate that a bunch of files are mapped onto a single file with the link element:\r\n\r\n```\r\nAdded Item(s): \r\n12>    None=\r\n12>        wwwroot\\build\\asset-manifest.json\r\n12>                CopyToOutputDirectory=PreserveNewest\r\n12>                Link=wwwroot\\app.config\r\n12>        wwwroot\\build\\favicon.ico\r\n12>                CopyToOutputDirectory=PreserveNewest\r\n12>                Link=wwwroot\\app.config\r\n12>        wwwroot\\build\\index.html\r\n12>                CopyToOutputDirectory=PreserveNewest\r\n12>                Link=wwwroot\\app.config\r\n12>        wwwroot\\build\\manifest.json\r\n12>                CopyToOutputDirectory=PreserveNewest\r\n12>                Link=wwwroot\\app.config\r\n12>        wwwroot\\build\\service-worker.js\r\n12>                CopyToOutputDirectory=PreserveNewest\r\n12>                Link=wwwroot\\app.config\r\n12>        wwwroot\\build\\static\\css\\main.fc2aea1a.css\r\n12>                CopyToOutputDirectory=PreserveNewest\r\n12>                Link=wwwroot\\app.config\r\n12>        wwwroot\\build\\static\\css\\main.fc2aea1a.css.map\r\n12>                CopyToOutputDirectory=PreserveNewest\r\n12>                Link=wwwroot\\app.config\r\n12>        wwwroot\\build\\static\\js\\main.00b5ebca.js\r\n12>                CopyToOutputDirectory=PreserveNewest\r\n12>                Link=wwwroot\\app.config\r\n12>        wwwroot\\build\\static\\js\\main.00b5ebca.js.map\r\n12>                CopyToOutputDirectory=PreserveNewest\r\n12>                Link=wwwroot\\app.config\r\n12>        wwwroot\\build\\static\\media\\flags.9c74e172.png\r\n12>                CopyToOutputDirectory=PreserveNewest\r\n12>                Link=wwwroot\\app.config\r\n12>        wwwroot\\build\\static\\media\\icons.674f50d2.eot\r\n12>                CopyToOutputDirectory=PreserveNewest\r\n12>                Link=wwwroot\\app.config\r\n12>        wwwroot\\build\\static\\media\\icons.912ec66d.svg\r\n12>                CopyToOutputDirectory=PreserveNewest\r\n12>                Link=wwwroot\\app.config\r\n12>        wwwroot\\build\\static\\media\\icons.af7ae505.woff2\r\n12>                CopyToOutputDirectory=PreserveNewest\r\n12>                Link=wwwroot\\app.config\r\n12>        wwwroot\\build\\static\\media\\icons.b06871f2.ttf\r\n12>                CopyToOutputDirectory=PreserveNewest\r\n12>                Link=wwwroot\\app.config\r\n12>        wwwroot\\build\\static\\media\\icons.fee66e71.woff\r\n12>                CopyToOutputDirectory=PreserveNewest\r\n12>                Link=wwwroot\\app.config\r\n12>Added Item(s): \r\n12>    None=\r\n12>        wwwroot\\build\\asset-manifest.json\r\n12>                CopyToOutputDirectory=PreserveNewest\r\n12>                Link=wwwroot\\.env\r\n12>        wwwroot\\build\\favicon.ico\r\n12>                CopyToOutputDirectory=PreserveNewest\r\n12>                Link=wwwroot\\.env\r\n12>        wwwroot\\build\\index.html\r\n12>                CopyToOutputDirectory=PreserveNewest\r\n12>                Link=wwwroot\\.env\r\n12>        wwwroot\\build\\manifest.json\r\n12>                CopyToOutputDirectory=PreserveNewest\r\n12>                Link=wwwroot\\.env\r\n12>        wwwroot\\build\\service-worker.js\r\n12>                CopyToOutputDirectory=PreserveNewest\r\n12>                Link=wwwroot\\.env\r\n12>        wwwroot\\build\\static\\css\\main.fc2aea1a.css\r\n12>                CopyToOutputDirectory=PreserveNewest\r\n12>                Link=wwwroot\\.env\r\n12>        wwwroot\\build\\static\\css\\main.fc2aea1a.css.map\r\n12>                CopyToOutputDirectory=PreserveNewest\r\n12>                Link=wwwroot\\.env\r\n12>        wwwroot\\build\\static\\js\\main.00b5ebca.js\r\n12>                CopyToOutputDirectory=PreserveNewest\r\n12>                Link=wwwroot\\.env\r\n12>        wwwroot\\build\\static\\js\\main.00b5ebca.js.map\r\n12>                CopyToOutputDirectory=PreserveNewest\r\n12>                Link=wwwroot\\.env\r\n12>        wwwroot\\build\\static\\media\\flags.9c74e172.png\r\n12>                CopyToOutputDirectory=PreserveNewest\r\n12>                Link=wwwroot\\.env\r\n12>        wwwroot\\build\\static\\media\\icons.674f50d2.eot\r\n12>                CopyToOutputDirectory=PreserveNewest\r\n12>                Link=wwwroot\\.env\r\n12>        wwwroot\\build\\static\\media\\icons.912ec66d.svg\r\n12>                CopyToOutputDirectory=PreserveNewest\r\n12>                Link=wwwroot\\.env\r\n12>        wwwroot\\build\\static\\media\\icons.af7ae505.woff2\r\n12>                CopyToOutputDirectory=PreserveNewest\r\n12>                Link=wwwroot\\.env\r\n12>        wwwroot\\build\\static\\media\\icons.b06871f2.ttf\r\n12>                CopyToOutputDirectory=PreserveNewest\r\n12>                Link=wwwroot\\.env\r\n12>        wwwroot\\build\\static\\media\\icons.fee66e71.woff\r\n12>                CopyToOutputDirectory=PreserveNewest\r\n12>                Link=wwwroot\\.env\r\n```\r\nThe files listed each time above the \"CopyToOutputDirectory\" are correct. The files that Link=... indicates obviously are not. However, wwwroot\\app.config and wwwroot\\.env are actual files i have present in my project, but i dont want to copy those to my output, just the contents of the build folder (which need to be put in the root of the wwwroot folder in /bin/Release since the build folder contains the actual files that need to be published).\r\n\r\n\r\n",
        "createdAt": "2018-02-08T09:04:36Z",
        "updatedAt": "2018-02-08T09:04:36Z",
        "author": {
          "login": "MJLHThomassen-Eurocom"
        }
      },
      {
        "body": "it's weird, as if the %(Filename)%(Extension) is only being evaluated only once and then being used for every item matching the include.",
        "createdAt": "2019-01-04T23:34:06Z",
        "updatedAt": "2019-01-04T23:34:06Z",
        "author": {
          "login": "benbenwilde"
        }
      },
      {
        "body": "For what it's worth, if I placed the `<ItemGroup><None ... /></ItemGroup>` within a target, I'm able to get the output processed without it showing up in my SDK based project. E.g.\r\n\r\n```\r\n    <ItemGroup>\r\n        <WebPackBuildOutput Include=\"..\\..\\WebPackOutput\\dist\\**\\*\" />\r\n    </ItemGroup>\r\n\r\n    <Target Name=\"WebPackOutputContentTarget\" BeforeTargets=\"BeforeBuild\">\r\n        <Message Text=\"FileWrites: @(WebPackBuildOutput)\" Importance=\"high\"/>\r\n        <ItemGroup>\r\n            <!-- Manually constructing Link metadata, works in classic projects as well -->\r\n            <None Include=\"@(WebPackBuildOutput)\" Link=\"dist\\%(RecursiveDir)%(Filename)%(Extension)\" CopyToOutputDirectory=\"PreserveNewest\" />\r\n        </ItemGroup>\r\n        \r\n    </Target>\r\n```",
        "createdAt": "2019-10-21T10:57:47Z",
        "updatedAt": "2019-10-21T10:57:47Z",
        "author": {
          "login": "Jaans"
        }
      },
      {
        "body": "I apologize for nudging such an old issue, but I thought I'd try my question here as opposed to opening another new issue.\r\n\r\nIn a .NET Core format `csproj`, I'm able to get `Link` working but not `LinkBase`. It is unclear to me why it does not work.\r\n\r\nWith `Link` (Works):\r\n\r\n```xml\r\n  <ItemGroup>\r\n    <None Include=\"TestInput/*\" CopyToOutputDirectory=\"PreserveNewest\" Link=\"LegacyLogsTesterInput/%(RecursiveDir)%(Filename)%(Extension)\" />\r\n  </ItemGroup>\r\n```\r\n\r\nWith `LinkBase` (Does *not* work):\r\n\r\n```xml\r\n  <ItemGroup>\r\n    <None Include=\"TestInput/*\" CopyToOutputDirectory=\"PreserveNewest\" LinkBase=\"LegacyLogsTesterInput\" />\r\n  </ItemGroup>\r\n```\r\n\r\nIn the former case, I observe that the directory `$(OutDir)LegacyLogsTesterInput` does exist. In the latter, it does not exist. On subtle detail I noticed in the [linked pull request](https://github.com/dotnet/sdk/pull/1246#issue-122125869) is this:\r\n\r\n> The item\u2019s FullPath is outside of the project directory\r\n\r\nDoes this mean that I cannot use `LinkBase` with items that are at or under the directory containing the `csproj`? Any info on why this isn't working?\r\n\r\nFor context, I'm trying to \"upgrade\" my copy logic from the below XML code to use `None` elements as shown above. The expectation is that the source files, which are located relative to the project, are copied to the defined output directory where the rest of the binaries go.\r\n\r\n```xml\r\n<Target Name=\"PostBuild\" BeforeTargets=\"PostBuildEvent\">\r\n  <Exec Command=\"xcopy /s /d /y &quot;$(ProjectDir)TestInput\\*&quot; &quot;$(OutDir)LegacyLogsTesterInput\\&quot;\" />\r\n</Target>\r\n```\r\n\r\nI'm using Visual Studio 2019 (latest updates as of this post).",
        "createdAt": "2020-11-02T19:16:46Z",
        "updatedAt": "2020-11-02T19:19:25Z",
        "author": {
          "login": "rcdailey"
        }
      },
      {
        "body": "The `LinkBase` metadata doesn't work on paths that are inside the project directory by design. I suggest opening an issue over at dotnet/sdk (where the [source code](https://github.com/dotnet/sdk/blob/44f381b62d466565639d51847c9127afbe7062a9/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.Sdk.DefaultItems.targets#L192-L247) for it resides) for discussion.",
        "createdAt": "2020-11-03T10:41:56Z",
        "updatedAt": "2020-11-03T10:42:19Z",
        "author": {
          "login": "dasMulli"
        }
      },
      {
        "body": "Why not allow user edit in UI?",
        "createdAt": "2021-01-27T17:36:51Z",
        "updatedAt": "2021-01-27T17:36:51Z",
        "author": {
          "login": "GF-Huang"
        }
      },
      {
        "body": "@Jaans Your method sadly doesn't seem to work transitively across project references.",
        "createdAt": "2021-02-19T10:21:53Z",
        "updatedAt": "2021-02-19T10:21:53Z",
        "author": {
          "login": "chtenb"
        }
      },
      {
        "body": "> The link element behaves strangely for me in a .net 4.6.2 project.\r\n> \r\n> I have a few files in a \"wwwroot/build\" folder that, when the project builds, i want to output to the /bin/Release/wwwroot folder. In my .csproj file i added the following:\r\n> \r\n> ```\r\n> <PropertyGroup>\r\n> \t\t<AssignTargetPathsDependsOn>\r\n> \t\t\t$(AssignTargetPathsDependsOn);\r\n> \t\t\tNpmBuildFiles;\r\n> \t\t</AssignTargetPathsDependsOn>\r\n> \t</PropertyGroup>\r\n> \t\r\n> \t<!-- Gets the files build by 'npm run build' -->\r\n> \t<Target Name=\"NpmBuildFiles\" DependsOnTargets=\"NpmBuild\">\t\r\n> \t\t<ItemGroup>\r\n> \t\t\t<None Include=\"wwwroot/build/**/*\"\r\n> \t\t\t\tLink=\"wwwroot\\%(RecursiveDir)%(Filename)%(Extension)\"\r\n> \t\t\t\tCopyToOutputDirectory=\"PreserveNewest\"/>\r\n> \t\t</ItemGroup>\r\n> \t</Target>\r\n> ```\r\n> \r\n> However, after the build, the bin/Release/wwwroot folder contains a few files, but not all of them and some of them even files that do not exist in the wwwroot/build folder (but that do exist in the original wwwroot folder).\r\n> \r\n> The msbuild output seems to indicate that a bunch of files are mapped onto a single file with the link element:\r\n> \r\n> ```\r\n> Added Item(s): \r\n> 12>    None=\r\n> 12>        wwwroot\\build\\asset-manifest.json\r\n> 12>                CopyToOutputDirectory=PreserveNewest\r\n> 12>                Link=wwwroot\\app.config\r\n> 12>        wwwroot\\build\\favicon.ico\r\n> 12>                CopyToOutputDirectory=PreserveNewest\r\n> 12>                Link=wwwroot\\app.config\r\n> 12>        wwwroot\\build\\index.html\r\n> 12>                CopyToOutputDirectory=PreserveNewest\r\n> 12>                Link=wwwroot\\app.config\r\n> 12>        wwwroot\\build\\manifest.json\r\n> 12>                CopyToOutputDirectory=PreserveNewest\r\n> 12>                Link=wwwroot\\app.config\r\n> 12>        wwwroot\\build\\service-worker.js\r\n> 12>                CopyToOutputDirectory=PreserveNewest\r\n> 12>                Link=wwwroot\\app.config\r\n> 12>        wwwroot\\build\\static\\css\\main.fc2aea1a.css\r\n> 12>                CopyToOutputDirectory=PreserveNewest\r\n> 12>                Link=wwwroot\\app.config\r\n> 12>        wwwroot\\build\\static\\css\\main.fc2aea1a.css.map\r\n> 12>                CopyToOutputDirectory=PreserveNewest\r\n> 12>                Link=wwwroot\\app.config\r\n> 12>        wwwroot\\build\\static\\js\\main.00b5ebca.js\r\n> 12>                CopyToOutputDirectory=PreserveNewest\r\n> 12>                Link=wwwroot\\app.config\r\n> 12>        wwwroot\\build\\static\\js\\main.00b5ebca.js.map\r\n> 12>                CopyToOutputDirectory=PreserveNewest\r\n> 12>                Link=wwwroot\\app.config\r\n> 12>        wwwroot\\build\\static\\media\\flags.9c74e172.png\r\n> 12>                CopyToOutputDirectory=PreserveNewest\r\n> 12>                Link=wwwroot\\app.config\r\n> 12>        wwwroot\\build\\static\\media\\icons.674f50d2.eot\r\n> 12>                CopyToOutputDirectory=PreserveNewest\r\n> 12>                Link=wwwroot\\app.config\r\n> 12>        wwwroot\\build\\static\\media\\icons.912ec66d.svg\r\n> 12>                CopyToOutputDirectory=PreserveNewest\r\n> 12>                Link=wwwroot\\app.config\r\n> 12>        wwwroot\\build\\static\\media\\icons.af7ae505.woff2\r\n> 12>                CopyToOutputDirectory=PreserveNewest\r\n> 12>                Link=wwwroot\\app.config\r\n> 12>        wwwroot\\build\\static\\media\\icons.b06871f2.ttf\r\n> 12>                CopyToOutputDirectory=PreserveNewest\r\n> 12>                Link=wwwroot\\app.config\r\n> 12>        wwwroot\\build\\static\\media\\icons.fee66e71.woff\r\n> 12>                CopyToOutputDirectory=PreserveNewest\r\n> 12>                Link=wwwroot\\app.config\r\n> 12>Added Item(s): \r\n> 12>    None=\r\n> 12>        wwwroot\\build\\asset-manifest.json\r\n> 12>                CopyToOutputDirectory=PreserveNewest\r\n> 12>                Link=wwwroot\\.env\r\n> 12>        wwwroot\\build\\favicon.ico\r\n> 12>                CopyToOutputDirectory=PreserveNewest\r\n> 12>                Link=wwwroot\\.env\r\n> 12>        wwwroot\\build\\index.html\r\n> 12>                CopyToOutputDirectory=PreserveNewest\r\n> 12>                Link=wwwroot\\.env\r\n> 12>        wwwroot\\build\\manifest.json\r\n> 12>                CopyToOutputDirectory=PreserveNewest\r\n> 12>                Link=wwwroot\\.env\r\n> 12>        wwwroot\\build\\service-worker.js\r\n> 12>                CopyToOutputDirectory=PreserveNewest\r\n> 12>                Link=wwwroot\\.env\r\n> 12>        wwwroot\\build\\static\\css\\main.fc2aea1a.css\r\n> 12>                CopyToOutputDirectory=PreserveNewest\r\n> 12>                Link=wwwroot\\.env\r\n> 12>        wwwroot\\build\\static\\css\\main.fc2aea1a.css.map\r\n> 12>                CopyToOutputDirectory=PreserveNewest\r\n> 12>                Link=wwwroot\\.env\r\n> 12>        wwwroot\\build\\static\\js\\main.00b5ebca.js\r\n> 12>                CopyToOutputDirectory=PreserveNewest\r\n> 12>                Link=wwwroot\\.env\r\n> 12>        wwwroot\\build\\static\\js\\main.00b5ebca.js.map\r\n> 12>                CopyToOutputDirectory=PreserveNewest\r\n> 12>                Link=wwwroot\\.env\r\n> 12>        wwwroot\\build\\static\\media\\flags.9c74e172.png\r\n> 12>                CopyToOutputDirectory=PreserveNewest\r\n> 12>                Link=wwwroot\\.env\r\n> 12>        wwwroot\\build\\static\\media\\icons.674f50d2.eot\r\n> 12>                CopyToOutputDirectory=PreserveNewest\r\n> 12>                Link=wwwroot\\.env\r\n> 12>        wwwroot\\build\\static\\media\\icons.912ec66d.svg\r\n> 12>                CopyToOutputDirectory=PreserveNewest\r\n> 12>                Link=wwwroot\\.env\r\n> 12>        wwwroot\\build\\static\\media\\icons.af7ae505.woff2\r\n> 12>                CopyToOutputDirectory=PreserveNewest\r\n> 12>                Link=wwwroot\\.env\r\n> 12>        wwwroot\\build\\static\\media\\icons.b06871f2.ttf\r\n> 12>                CopyToOutputDirectory=PreserveNewest\r\n> 12>                Link=wwwroot\\.env\r\n> 12>        wwwroot\\build\\static\\media\\icons.fee66e71.woff\r\n> 12>                CopyToOutputDirectory=PreserveNewest\r\n> 12>                Link=wwwroot\\.env\r\n> ```\r\n> \r\n> The files listed each time above the \"CopyToOutputDirectory\" are correct. The files that Link=... indicates obviously are not. However, wwwroot\\app.config and wwwroot.env are actual files i have present in my project, but i dont want to copy those to my output, just the contents of the build folder (which need to be put in the root of the wwwroot folder in /bin/Release since the build folder contains the actual files that need to be published).\r\n\r\nI think link support support single file",
        "createdAt": "2022-07-28T03:53:53Z",
        "updatedAt": "2022-07-28T03:53:53Z",
        "author": {
          "login": "Jasonlhy"
        }
      }
    ]
  }
}