{
  "number": 10313,
  "title": "[Bug]: XmlPeek Result output item not properly escaped",
  "body": "### Issue Description\r\n\r\nIt looks like XmlPeek Result output item metadata is not properly escaped.\r\n\r\n### Steps to Reproduce\r\n\r\nCreate an XML document `doc.xml` with text content that happens to use MSBuild special characters:\r\n\r\n```xml\r\n<Root>\r\n    <Key>abcdefg</Key>\r\n    <Key>a$(d)fg</Key>\r\n    <Key>a$(d.f)</Key>\r\n</Root>\r\n```\r\n\r\nRun `msbuild project.proj` project.proj that uses XmlPeek to query and print the three keys:\r\n\r\n```xml\r\n<Project xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\r\n    <Target Name=\"Build\">\r\n        <XmlPeek XmlInputPath=\"doc.xml\" Query=\"//Key/text()\">\r\n            <Output TaskParameter=\"Result\" PropertyName=\"Key\" />\r\n            <Output TaskParameter=\"Result\" ItemName=\"Keys\" />\r\n        </XmlPeek>\r\n        <Message Text=\"Key=$(Key)\" />\r\n        <Message Text=\"Keys (expanded)=@(Keys)\" />\r\n        <Message Text=\"Keys (individual)=%(Keys.Identity)\" />\r\n    </Target>\r\n</Project>\r\n```\r\n\r\n### Expected Behavior\r\n\r\nPrints verbatim text content from XML file. \r\n\r\n```\r\nKey=abcdefg;a$(d)fg;a$(d.f)\r\nKeys (expanded)=abcdefg;a$(d)fg;a$(d.f)\r\nKeys (individual)=abcdefg\r\nKeys (individual)=a$(d)fg\r\nKeys (individual)=a$(d.f)\r\n ```\r\n\r\n### Actual Behavior\r\n\r\nPrints verbatim text content for property and expanded item, but tries to interpret item metadata as MSBuild property. This is inconsistent and confusing.\r\n\r\n```\r\nKey=abcdefg;a$(d)fg;a$(d.f)\r\nKeys (expanded)=abcdefg;a$(d)fg;a$(d.f)\r\nKeys (individual)=abcdefg\r\nKeys (individual)=afg\r\n```\r\n\r\nand gives error:\r\n\r\n> error MSB4184: The expression \"\"\".f\" cannot be evaluated. Method 'System.String.f' not found.\r\n\r\n### Analysis\r\n\r\n_No response_\r\n\r\n### Versions & Configurations\r\n\r\n```\r\nMSBuild version 17.10.4+10fbfbf2e for .NET Framework\r\n17.10.4.21802\r\n```",
  "state": "CLOSED",
  "createdAt": "2024-07-01T16:15:25Z",
  "updatedAt": "2024-08-26T13:58:45Z",
  "closedAt": "2024-08-26T13:58:45Z",
  "author": {
    "login": "hickford"
  },
  "labels": [
    "bug",
    "Priority:2"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "AR-May"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "The bug does not occur with Item elements.  Of course, you have to escape the MSBuild special characters:\r\n\r\n```xml\r\n<Project xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\r\n    <Target Name=\"Build\">\r\n        <ItemGroup>\r\n            <Keys Include=\"abcdefg;a%24%28d%29fg;a%24%28d.f%29\" />\r\n        </ItemGroup>\r\n        <Message Text=\"Keys (expanded)=@(Keys)\" />\r\n        <Message Text=\"Keys (individual)=%(Keys.Identity)\" />\r\n    </Target>\r\n</Project>\r\n```",
        "createdAt": "2024-07-02T08:47:58Z",
        "updatedAt": "2024-07-02T08:47:58Z",
        "author": {
          "login": "hickford"
        }
      },
      {
        "body": "Here's the offending code: XmlPeek neglects to escape the item:\r\n\r\nhttps://github.com/dotnet/msbuild/blob/049835be350eb60f66b63e2e9adbd89094b4b127/src/Tasks/XmlPeek.cs#L153\r\n\r\nhttps://github.com/dotnet/msbuild/blob/049835be350eb60f66b63e2e9adbd89094b4b127/src/Utilities/TaskItem.cs#L73-L76",
        "createdAt": "2024-07-02T08:53:25Z",
        "updatedAt": "2024-07-02T10:27:14Z",
        "author": {
          "login": "hickford"
        }
      },
      {
        "body": "Hello @hickford! Sorry, I had more high priority issues to address, and this issue slipped from my attention. Thank you for suggesting the PR for the fix. I am a bit concerned for possible breaking changes here, the escaping in msbuild could be sometimes tricky. I will run this code on a bigger set of tests for additional tests coverage, to remove some of those worries.",
        "createdAt": "2024-08-02T14:18:24Z",
        "updatedAt": "2024-08-02T14:18:24Z",
        "author": {
          "login": "AR-May"
        }
      },
      {
        "body": "Hi @baronfel! Could you please take a look at this issue? \r\n\r\nI discussed it with @rainersigwald internally and we see some merit in having the suggested behavior as default for `XmlPeek` rather than current behavior that expands the values. We though worry that some customers may already be counting on current behavior, and it would be a breaking change for them. Another complication is that this escaping/unescaping behavior is difficult to work around. If `XmlPeek` reads unescaped data (current bahavior), you fail to escape it with \r\n```\r\n<Message Text=\"Keys (individual with escape)=$([MSBuild]::Escape(%(Keys.Identity)))\" />\r\n``` \r\nand vice versa, if we implement escaping in XmlPeek, we cannot count on expanding the data using \r\n```\r\n<Message Text=\"Keys (individual with escape)=$([MSBuild]::Unescape(%(Keys.Identity)))\" />\r\n```\r\n\r\nAnother work-around option for initial issue is, if we read unescaped data in XmlPeek (current behavior), one can always escape directly in the xml:\r\n```\r\n<Root>\r\n    <Key>abcdefg</Key>\r\n    <Key>a%24(d)fg</Key>\r\n    <Key>a%24(d.f)</Key>\r\n</Root>\r\n```\r\nAnd it would not be expanded with current behavior:\r\n```\r\n  Keys (individual)=abcdefg\r\n  Keys (individual)=a$(d)fg\r\n  Keys (individual)=a$(d.f)\r\n```\r\nBut the suggested behavior will mess up xml content above because escape operation is not idempotent:\r\n```\r\n  Keys (individual)=abcdefg\r\n  Keys (individual)=a%24(d)fg\r\n  Keys (individual)=a%24(d.f)\r\n```\r\n It is though reversable by applying unescape to the content:\r\n```\r\n<Message Text=\"Keys (individual with escape)=$([MSBuild]::Unescape(%(Keys.Identity)))\" />\r\n```\r\n\r\nSo we have 4 options that we may consider:\r\n1. Leave old behavior and document workarounds (you can escape the data in xml as work-around)\r\n2. Switch to the suggested behavior under a ChangeWave (but there would not be any option to trigger expanding items it seems, at least I have not yet found one)\r\n3. We can implement a parameter for `XmlPeek` that controls escaping and set old behavior as default.\r\n4. We can implement a parameter for `XmlPeek` that controls escaping and set suggested behavior as default.\r\n",
        "createdAt": "2024-08-05T12:06:23Z",
        "updatedAt": "2024-08-05T12:06:23Z",
        "author": {
          "login": "AR-May"
        }
      },
      {
        "body": "I haven't taken a deep look yet, but I want to take a look at [usages of XmlPeek](https://github.com/search?q=XmlPeek+%28path%3A*.*proj+OR+path%3A*.targets+OR+path%3A*.props%29&type=code) to help inform any decisions here.",
        "createdAt": "2024-08-07T14:37:52Z",
        "updatedAt": "2024-08-07T14:37:52Z",
        "author": {
          "login": "baronfel"
        }
      },
      {
        "body": "I might be misunderstanding the issue and discussion here - but why would we want XmlPeek to behave differently from rest of MSBuild data processing? It feels that escaping should be explicitly done by the user custom code (`[MSBuild]::Escape`) or explicitly requested (e.g. extending XmlPeek by adding additional property that request that xml data are not expanded). This way the implicit   recusive data processing can continue behaving as is. ",
        "createdAt": "2024-08-11T11:13:13Z",
        "updatedAt": "2024-08-11T11:13:13Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "@JanKrivanek On the contrary, the fix makes XmlPeek consistent with other tasks such as ReadLinesFromFile:\r\n\r\nhttps://github.com/dotnet/msbuild/blob/1b1df9e39b8c576d33d8964c7f4a64716fd46371/src/Tasks/FileIO/ReadLinesFromFile.cs#L61\r\n\r\nSo you can read arbitrary text and XML documents.",
        "createdAt": "2024-08-14T13:20:10Z",
        "updatedAt": "2024-08-14T14:15:48Z",
        "author": {
          "login": "hickford"
        }
      }
    ]
  }
}