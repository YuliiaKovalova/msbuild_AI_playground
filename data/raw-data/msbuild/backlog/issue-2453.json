{
  "number": 2453,
  "title": "long restore time when node_modules in project folder",
  "body": "I asked the question first on [StackOverflow](https://stackoverflow.com/questions/45763755/dotnet-core-2-build-time-incorrect?noredirect=1#comment78487805_45763755) but it was suggested that I should make an issue.\r\n\r\nI noticed that building in dotnet core 2 seemed a lot slower.    \r\nBut the timing after the build always showed 'only' 15 seconds.   \r\nI couldn't believe that so I timed it with `time`.\r\n\r\n    > time dotnet build\r\n    Microsoft (R) Build Engine version 15.3.409.57025 for .NET Core\r\n    Copyright (C) Microsoft Corporation. All rights reserved.\r\n    \r\n      hrm -> /Users/r/dev/hrm/bin/Debug/netcoreapp2.0/hrm.dll\r\n    \r\n    Build succeeded.\r\n        0 Warning(s)\r\n        0 Error(s)\r\n    \r\n    Time Elapsed 00:00:15.45\r\n    \r\n    real\t0m52.366s\r\n    user\t0m36.851s\r\n    sys\t0m15.458s\r\n\r\nThat seemed more correct. Almost a minute.  \r\nI then tried without restore and it was a lot faster:  \r\n\r\n    > time dotnet build --no-restore\r\n    Microsoft (R) Build Engine version 15.3.409.57025 for .NET Core\r\n    Copyright (C) Microsoft Corporation. All rights reserved.\r\n    \r\n      hrm -> /Users/r/dev/hrm/bin/Debug/netcoreapp2.0/hrm.dll\r\n    \r\n    Build succeeded.\r\n        0 Warning(s)\r\n        0 Error(s)\r\n    \r\n    Time Elapsed 00:00:15.39\r\n    \r\n    real\t0m15.795s\r\n    user\t0m11.397s\r\n    sys\t0m4.238s\r\n\r\nBut dotnet also shows 15 seconds.  \r\nCould it be that only building is counted in the timings?  \r\nNot sure why a restore is always slow when everything is already restored.\r\n\r\n(I'm using osx, my environment is set to development)\r\n\r\nI prefer to use `dotnet watch run` but that seems even slower.\r\nRunning `dotnet watch` to view the parameters is taking 12 seconds.\r\n\r\n    > time dotnet watch\r\n    Microsoft DotNet File Watcher 2.0.0-rtm-26452\r\n    \r\n    Usage: dotnet watch [options] [[--] <arg>...]\r\n    \r\n    Options:\r\n      ....\r\n    \r\n    \r\n    real\t0m12.631s\r\n    user\t0m8.880s\r\n    sys\t0m3.816s\r\n\r\nIs this only on my system?\r\n\r\nHere is the result from dotnet restore /clp:PerformanceSummary\r\n\r\n    > dotnet restore /clp:PerformanceSummary\r\n      Restore completed in 43.95 ms for /Users/roeland/dev/hrm/hrm.csproj.\r\n      Restore completed in 52.73 ms for /Users/roeland/dev/hrm/hrm.csproj.\r\n      Restore completed in 38.48 ms for /Users/roeland/dev/hrm/hrm.csproj.\r\n    \r\n    Project Evaluation Performance Summary:\r\n        36252 ms  /Users/roeland/dev/hrm/hrm.csproj          3 calls\r\n    \r\n    Project Performance Summary:\r\n        36424 ms  /Users/roeland/dev/hrm/hrm.csproj          9 calls\r\n                  24359 ms  Restore                                    1 calls\r\n                      1 ms  _IsProjectRestoreSupported                 2 calls\r\n                  12011 ms  _GenerateRestoreProjectPathWalk            1 calls\r\n                      1 ms  _GenerateRestoreProjectPathItemsPerFramework   1 calls\r\n                     43 ms  _GenerateRestoreGraphProjectEntry          1 calls\r\n                      0 ms  _GetRestoreSettingsPerFramework            1 calls\r\n                      6 ms  _GenerateProjectRestoreGraph               1 calls\r\n                      3 ms  _GenerateProjectRestoreGraphPerFramework   1 calls\r\n    \r\n    Target Performance Summary:\r\n            0 ms  _GenerateRestoreGraphProjectEntry          1 calls\r\n            0 ms  _GenerateProjectRestoreGraph               1 calls\r\n            0 ms  _GetRestoreTargetFrameworksAsItems         1 calls\r\n            0 ms  _GetRestoreProjectStyle                    2 calls\r\n            0 ms  CheckForImplicitPackageReferenceOverridesBeforeRestore   2 calls\r\n            0 ms  _CheckForUnsupportedNETCoreVersion         1 calls\r\n            0 ms  _IsProjectRestoreSupported                 1 calls\r\n            0 ms  _GetRestoreSettingsPerFramework            1 calls\r\n            0 ms  _GetProjectJsonPath                        2 calls\r\n            0 ms  _GetRestoreSettingsOverrides               1 calls\r\n            1 ms  _GenerateRestoreProjectPathWalk            1 calls\r\n            1 ms  _GenerateRestoreProjectPathItemsPerFramework   1 calls\r\n            1 ms  _GenerateRestoreSpecs                      1 calls\r\n            1 ms  _GenerateRestoreProjectSpec                1 calls\r\n            2 ms  _GenerateProjectRestoreGraphPerFramework   1 calls\r\n            2 ms  _GetRestoreTargetFrameworksOutput          1 calls\r\n            5 ms  _GenerateRestoreDependencies               1 calls\r\n           10 ms  _LoadRestoreGraphEntryPoints               1 calls\r\n           20 ms  _GenerateDotnetCliToolReferenceSpecs       1 calls\r\n           21 ms  _GetRestoreSettings                        1 calls\r\n           54 ms  _GenerateRestoreGraph                      1 calls\r\n          216 ms  Restore                                    1 calls\r\n        12007 ms  _GenerateRestoreProjectPathItems           1 calls\r\n        12014 ms  _GetAllRestoreProjectPathItems             1 calls\r\n        12058 ms  _FilterRestoreGraphProjectInputItems       1 calls\r\n    \r\n    Task Performance Summary:\r\n            1 ms  Message                                    3 calls\r\n            1 ms  ConvertToAbsolutePath                      2 calls\r\n            1 ms  GetRestorePackageReferencesTask            1 calls\r\n            1 ms  GetRestoreProjectReferencesTask            1 calls\r\n            2 ms  GetRestoreProjectFrameworks                1 calls\r\n            3 ms  RemoveDuplicates                           5 calls\r\n            4 ms  WarnForInvalidProjectsTask                 1 calls\r\n           18 ms  GetRestoreSettingsTask                     1 calls\r\n           20 ms  GetRestoreDotnetCliToolsTask               1 calls\r\n          216 ms  RestoreTask                                1 calls\r\n        36121 ms  MsBuild                                    9 calls\r\n\r\n",
  "state": "CLOSED",
  "createdAt": "2017-08-18T20:54:03Z",
  "updatedAt": "2024-02-21T17:17:08Z",
  "closedAt": "2017-08-21T14:43:32Z",
  "author": {
    "login": "roel4d"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "I turned out that node_modules is causing this. If I remove the folder, it is a lot faster. Is this a bug?",
        "createdAt": "2017-08-18T21:00:57Z",
        "updatedAt": "2017-08-18T21:00:57Z",
        "author": {
          "login": "roel4d"
        }
      },
      {
        "body": "This may be an instance of https://github.com/Microsoft/msbuild/issues/2392.\r\n\r\n@r03 you mentioned on SO that you're including a `node_modules` folder in your project so it will be included in the build output?\r\n\r\nThis has caused issues before (https://github.com/dotnet/cli/issues/5656) and has been \"fixed\" so that excluding `node_modules` folders in unexpected locations was optimised in the default items.",
        "createdAt": "2017-08-18T21:01:06Z",
        "updatedAt": "2017-08-18T21:01:06Z",
        "author": {
          "login": "dasMulli"
        }
      },
      {
        "body": "Can you share your project and where the `node_modules` folder is and what your intent is with that?",
        "createdAt": "2017-08-18T21:01:48Z",
        "updatedAt": "2017-08-18T21:01:48Z",
        "author": {
          "login": "dasMulli"
        }
      },
      {
        "body": "Also, which version of the `dotnet` cli are you using? (`dotnet --info` output)",
        "createdAt": "2017-08-18T21:07:07Z",
        "updatedAt": "2017-08-18T21:07:07Z",
        "author": {
          "login": "dasMulli"
        }
      },
      {
        "body": "Here is my project file:\r\n\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <Folder Include=\"wwwroot\\\" />\r\n  </ItemGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.All\" Version=\"2.0.0\" />\r\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore\" Version=\"2.0.0\" />\r\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore.SqlServer\" Version=\"2.0.0\" />\r\n    <PackageReference Include=\"Newtonsoft.Json\" Version=\"10.0.3\" />\r\n  </ItemGroup>\r\n\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n    <DotNetCliToolReference Include=\"Microsoft.DotNet.Watcher.Tools\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\r\n\r\nI only have a single webapi project with these subfolders:\r\n- ClientApp (VueJs with Quasar framework, webpack, ... and of course node_modules)\r\n- Controllers (web api's)\r\n- Data (Entities, Services, Context, ...)\r\n- Framework (reusable libraries, will probably move to separate project in the future)\r\n- Middleware (error handling, logging)\r\n\r\ndotnet version:\r\n\r\n```\r\n.NET Command Line Tools (2.0.0)\r\n\r\nProduct Information:\r\n Version:            2.0.0\r\n Commit SHA-1 hash:  cdcd1928c9\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  10.12\r\n OS Platform: Darwin\r\n RID:         osx.10.12-x64\r\n Base Path:   /usr/local/share/dotnet/sdk/2.0.0/\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n```",
        "createdAt": "2017-08-18T21:08:43Z",
        "updatedAt": "2017-08-18T21:08:43Z",
        "author": {
          "login": "roel4d"
        }
      },
      {
        "body": "So the node_modules folder is in `ClientApp/node_modules`?\r\n\r\nThis is weird, it should be excluded from the build by the glob pattern defined here: https://github.com/aspnet/websdk/blob/1fd3e2add57478aa29f99cbae06c8bf44c095588/src/ProjectSystem/Microsoft.NET.Sdk.Web.ProjectSystem.Targets/netstandard1.0/Microsoft.NET.Sdk.Web.ProjectSystem.props#L15",
        "createdAt": "2017-08-18T21:17:20Z",
        "updatedAt": "2017-08-18T21:17:20Z",
        "author": {
          "login": "dasMulli"
        }
      },
      {
        "body": "This is probably the more-specific #2000, where it's excluded but we still walk the whole directory.\r\n\r\nCan you try adding this to the project?\r\n\r\n```xml\r\n  <PropertyGroup>\r\n    <DefaultExcludesInProjectFolder>$(DefaultExcludesInProjectFolder);ClientApp\\node_modules\\**</DefaultExcludesInProjectFolder>\r\n  </PropertyGroup>\r\n```",
        "createdAt": "2017-08-18T21:18:37Z",
        "updatedAt": "2017-08-18T21:18:37Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I wonder if it is \"safe\" if NuGet passed sth like `EnableDefaultItems=false` to nested msbuild calls as a general perf optimisation.. ",
        "createdAt": "2017-08-18T21:26:38Z",
        "updatedAt": "2017-08-18T21:26:38Z",
        "author": {
          "login": "dasMulli"
        }
      },
      {
        "body": "Without the exclude: (old situation)\r\n\r\n```\r\nMicrosoft (R) Build Engine version 15.3.409.57025 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  hrm -> /Users/roeland/dev/hrm/bin/Debug/netcoreapp2.0/hrm.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:00:15.55\r\n\r\nreal\t0m54.049s\r\nuser\t0m38.214s\r\nsys\t0m15.642s\r\n```\r\nAfter the exclude:\r\n```\r\ntime dotnet build\r\nMicrosoft (R) Build Engine version 15.3.409.57025 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  hrm -> /Users/roeland/dev/hrm/bin/Debug/netcoreapp2.0/hrm.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:00:17.46\r\n\r\nreal\t0m55.652s\r\nuser\t0m40.653s\r\nsys\t0m16.243s\r\n```\r\nThe project file:\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <Folder Include=\"wwwroot\\\" />\r\n  </ItemGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.All\" Version=\"2.0.0\" />\r\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore\" Version=\"2.0.0\" />\r\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore.SqlServer\" Version=\"2.0.0\" />\r\n    <PackageReference Include=\"Newtonsoft.Json\" Version=\"10.0.3\" />\r\n  </ItemGroup>\r\n\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.0\" />\r\n    <DotNetCliToolReference Include=\"Microsoft.DotNet.Watcher.Tools\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n\r\n  <PropertyGroup>\r\n    <DefaultExcludesInProjectFolder>$(DefaultExcludesInProjectFolder);ClientApp\\node_modules\\**</DefaultExcludesInProjectFolder>\r\n  </PropertyGroup>\r\n\r\n</Project>\r\n```\r\nAfter `rm -rf ./ClientApp/node_modules/`:\r\n```\r\nMicrosoft (R) Build Engine version 15.3.409.57025 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  hrm -> /Users/roeland/dev/hrm/bin/Debug/netcoreapp2.0/hrm.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:00:04.88\r\n\r\nreal\t0m10.468s\r\nuser\t0m8.126s\r\nsys\t0m2.357s\r\n```\r\n",
        "createdAt": "2017-08-18T21:27:07Z",
        "updatedAt": "2017-08-18T21:27:07Z",
        "author": {
          "login": "roel4d"
        }
      },
      {
        "body": "@rainersigwald is the order of the excludes important? since this comes from an SDK props file, the project will only append to the patterns",
        "createdAt": "2017-08-18T21:29:24Z",
        "updatedAt": "2017-08-18T21:29:24Z",
        "author": {
          "login": "dasMulli"
        }
      },
      {
        "body": "If that is true, @r03 you could try this instead:\r\n\r\n```xml\r\n  <PropertyGroup>\r\n    <DefaultItemExcludes>ClientApp\\node_modules\\**;$(DefaultItemExcludes)</DefaultItemExcludes>\r\n  </PropertyGroup>\r\n```",
        "createdAt": "2017-08-18T21:34:27Z",
        "updatedAt": "2017-08-18T21:34:27Z",
        "author": {
          "login": "dasMulli"
        }
      },
      {
        "body": "yes, that works.\r\n\r\n```\r\nMicrosoft (R) Build Engine version 15.3.409.57025 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  hrm -> /Users/roeland/dev/hrm/bin/Debug/netcoreapp2.0/hrm.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:00:06.55\r\n\r\nreal\t0m12.061s\r\nuser\t0m10.693s\r\nsys\t0m2.584s\r\n```",
        "createdAt": "2017-08-18T21:36:10Z",
        "updatedAt": "2017-08-18T21:37:17Z",
        "author": {
          "login": "roel4d"
        }
      },
      {
        "body": "I didn't think order was important there. Boo!\r\n\r\nSince it worked once it was in a good order, I'm going to close this as a duplicate of #2000.",
        "createdAt": "2017-08-21T14:43:32Z",
        "updatedAt": "2017-08-21T14:43:32Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}