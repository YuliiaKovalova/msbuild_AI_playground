{
  "number": 6057,
  "title": "BinaryFormater serialization of on-disk RAR cache is slow",
  "body": "### Issue Description\r\nBinaryFormater serialization of on-disk RAR cache is slow.\r\nOptimizing deserialization time will likely be synergic with RAR pre-caching goals.\r\n\r\n### Steps to Reproduce\r\nIncremental rebuild or Roslyn repo.\r\n\r\n### Data\r\nFor Roslyn incremental build reading and parsing the RAR cache took almost 40% of RAR wall-clock time.\r\n![image](https://user-images.githubusercontent.com/25249058/105399102-761aa300-5c23-11eb-8ae6-fdec17987a3f.png)\r\n\r\n### Analysis\r\nWhen looking for optimal solution benchmark was create to measure serialization and deserialization of  real project RAR cached data.\r\n![SerializationBenchmarks](https://user-images.githubusercontent.com/25249058/105398521-c2191800-5c22-11eb-903e-aadd8920aea0.png)\r\n\r\nAfter evaluating pros and cons decision has been made to implement serialization as custom binary format, hand written code.\r\n\r\nDuring this decision following was considered:\r\n- CPU performance\r\n- memory performance\r\n- on-disk size\r\n- maintainability\r\n- security\r\n- estimated effort\r\n\r\n### Versions & Configurations\r\nMeasured at latest production dotnet 5.0.102 SDK.",
  "state": "CLOSED",
  "createdAt": "2021-01-21T19:05:17Z",
  "updatedAt": "2024-02-21T17:01:59Z",
  "closedAt": "2021-03-02T17:14:36Z",
  "author": {
    "login": "rokonec"
  },
  "labels": [
    "Area: Performance",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "rokonec"
      }
    ]
  },
  "milestone": {
    "title": "MSBuild 16.10"
  },
  "comments": {
    "nodes": [
      {
        "body": "@rokonec #6094 is in so closing this out.  Reactivate if you were using this to track any additional changes.",
        "createdAt": "2021-03-02T17:14:36Z",
        "updatedAt": "2021-03-02T17:14:36Z",
        "author": {
          "login": "marcpopMSFT"
        }
      }
    ]
  }
}