{
  "number": 6221,
  "title": "Project load setting IgnoreInvalidImports should apply to expressions that evaluate to empty",
  "body": "### Issue Description\r\nIn #2720, we were attempting to allow callers to the evaluation API to ignore invalid imports.  However, we missed the scenario that an import for an expression that evaluates to an empty string throws in a different part of the code.\r\n\r\nhttps://github.com/dotnet/msbuild/blob/63087cde532910d409b2f5f6d0694c1bcb8bfb74/src/Build/Evaluation/Evaluator.cs#L1933-L1936\r\n\r\nThis was an oversight and leads to inconsistent behavior when you have the following imports:\r\n```xml\r\n<Import Project=\"$(Foo)\" />\r\n<Import Project=\"$(Foo)\\bar.txt\" />\r\n```\r\n\r\nThe second import is correctly ignored because `\\bar.txt` doesn't exist, but the first import still throws since that uses a different code path.\r\n### Steps to Reproduce\r\n1. Create a project with an import of an expression that evaluates to an empty string\r\n  ```xml\r\n  <Import Project=\"$(Foo)\" />\r\n  <Import Project=\"$(Foo)\\bar.txt\" />\r\n  ```\r\n2. Load the project with the `ProjectLoadSetting.IgnoreInvalidImports`\r\n\r\n### Expected Behavior\r\nThe project is loaded and an event is logged indicating that the import was skipped.\r\n\r\n### Actual Behavior\r\nAn `InvalidProjectFileException` is thrown.\r\n\r\n### Analysis\r\n<!--\r\n* If you have an idea where the problem might lie, let us know that here.\r\n* Please include any pointers to code, relevant changes, or related issues you know of.\r\n-->\r\n\r\n### Versions & Configurations\r\n<!--\r\n* In a Visual Studio developer command prompt, run `msbuild -version` and paste the output here.\r\n* If applicable, include the version of the tool that invokes MSBuild (Visual Studio, dotnet CLI, etc):\r\n\r\n* Post any other relevant configuration settings here.\r\n*   OS, architecture, etc.\r\n-->\r\n\r\n### Attach a binlog\r\n<!--\r\n* If providing us a project that reproduces the issue proves difficult, consider including a binlog.\r\n* Click [here](https://aka.ms/msbuild/binlog) for details on sharing binary logs.\r\n* Click [here](https://github.com/microsoft/msbuild/blob/master/documentation/wiki/Binary-Log.md) for more information on binary logs.\r\n    NOTE: Binlogs can contain sensitive information. Don't attach anything you don't want to be public.\r\n\r\n*   To view the contents of the binlogs yourself, you may wish to use a tool like https://msbuildlog.com/.\r\n-->",
  "state": "CLOSED",
  "createdAt": "2021-03-03T22:05:36Z",
  "updatedAt": "2021-03-13T00:37:22Z",
  "closedAt": "2021-03-13T00:37:22Z",
  "author": {
    "login": "jeffkl"
  },
  "labels": [
    "bug",
    "needs-triage"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "jeffkl"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "@BenVillalobos please assign to me, I have a fix coded up already",
        "createdAt": "2021-03-03T22:06:28Z",
        "updatedAt": "2021-03-03T22:06:28Z",
        "author": {
          "login": "jeffkl"
        }
      }
    ]
  }
}