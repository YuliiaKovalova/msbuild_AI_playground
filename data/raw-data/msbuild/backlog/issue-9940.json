{
  "number": 9940,
  "title": "[Bug]: ExpressionShredder.GetReferencedItemNamesAndMetadata expression parser does not handle nested quotes",
  "body": "### Issue Description\r\n\r\nTask batching on item metadata does not handle complicated expressions like `@(a->'$(...)')` properly, leading to misdetection of metadata to batch on and/or build errors. The following minimal reproducible example illustrates the problem. I put additional explanations and analysis in MRE comments.\r\n\r\n### Steps to Reproduce\r\n\r\nUncomment the fragment creating `d` items to see the error.\r\n```xml\r\n<Project>\r\n<ItemGroup>\r\n<a Include='a1;a2'>\r\n  <n>m0</n>\r\n</a>\r\n<a Include='a3'>\r\n  <n>m1</n>\r\n</a>\r\n<b Include='b1'>\r\n  <n>m0</n>\r\n  <m>x1</m>\r\n</b>\r\n<b Include='b2'>\r\n  <n>m1</n>\r\n</b>\r\n</ItemGroup>\r\n\r\n<Target Name=\"Build\" >\r\n  <ItemGroup>\r\n    <c Include=\"@(a)\" Condition=\"'%(n)' != ''\">\r\n      <!-- 'm' is not picked up as a metadata item to batch on, because it is in quotes -->\r\n      <m>@(b->'%(m)')</m>\r\n    </c>\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <c>\r\n      <!-- this is the sort of thing I want to be able to do without the extra step of adding unchanged\r\n            'm' metadata from matching 'b' items to every 'c' item -->\r\n      <!-- note that if GetReferencedItemNamesAndMetadata's expression parser is fixed to no longer\r\n            pick up metadata names from inside the expression, one might need to add a dummy condition\r\n            to the item declaration to force batching on correct metadata(s) -->\r\n      <m>@(c->'$([System.String]::new('%(m)').Replace('x',%(n)))')</m>\r\n    </c>\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <d Include=\"@(a)\" Condition=\"'%(n)' != ''\">\r\n      <!-- 'm' is picked up as a metadata item to batch on, leading to error as 'a' items don't have it -->\r\n      <!-- the reason for this is that GetReferencedItemNamesAndMetadata stops parsing a quoted expression\r\n            at the first quote, does not find the closing brace there, restarts skipping the leading '@',\r\n            and keeps going until it finds the '%(m)' in the middle of the expression -->\r\n      <!--m>@(b->'$([System.String]::new('%(m)'))')</m-->\r\n    </d>\r\n  </ItemGroup>\r\n</Target>\r\n</Project>\r\n```\r\n\r\n### Expected Behavior\r\n\r\n`ExpressionShredder.GetReferencedItemNamesAndMetadata` correctly skips the whole quoted expression and does not pick up `m` as a metadata to batch on.\r\n\r\n### Actual Behavior\r\n\r\n`ExpressionShredder.GetReferencedItemNamesAndMetadata` mangles the expression and picks up `m` as a metadata to batch on. In the above MRE this produces a build error because `a` items do not have the `m` metadata.\r\n\r\n### Analysis\r\n\r\nThe reason for this is that `ExpressionShredder.GetReferencedItemNamesAndMetadata` stops parsing a quoted expression at the first closing quote, which happens to be in the middle of an expression. It does not find the closing brace there, restarts skipping the leading `@`, and keeps skipping leading characters of the expression until it finds and parses the `%(m)` in the middle of the expression.\r\n\r\n### Versions & Configurations\r\n\r\nVerified with `msbuild` 17.8.5 and with `msbuild` built from HEAD (2e6f2ff7ea311214255b6b2ca5cc0554fba1b345).",
  "state": "OPEN",
  "createdAt": "2024-03-27T21:23:38Z",
  "updatedAt": "2024-10-10T16:01:18Z",
  "closedAt": null,
  "author": {
    "login": "atykhyy"
  },
  "labels": [
    "bug",
    "backlog",
    "Area: Language",
    "Priority:3",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": []
  }
}