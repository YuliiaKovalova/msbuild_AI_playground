{
  "number": 10656,
  "title": "[Bug]: How msbuild tasks should handle CVE-2024-38095?",
  "body": "### Issue Description\n\nWhen building with NuGet audit enabled, MSBuild tasks targeting .NET Core will receive the following error: \r\n\r\n> Package 'System.Formats.Asn1' 7.0.0 has a known high severity vulnerability, https://github.com/advisories/GHSA-447r-wph3-92pm\r\n\r\nLooking at a `dotnet nuget why` of the package and will end up with the following:\r\n\r\n```\r\nProject 'SemanticSearch.BuildTask' has the following dependency graph(s) for 'System.Formats.Asn1':\r\n\r\n  [net8.0]\r\n   \u2502\r\n   \u2514\u2500 Microsoft.Build.Tasks.Core (v17.7.2)\r\n      \u251c\u2500 System.Security.Cryptography.Pkcs (v7.0.2)\r\n      \u2502  \u2514\u2500 System.Formats.Asn1 (v7.0.0)\r\n      \u2514\u2500 System.Security.Cryptography.Xml (v7.0.1)\r\n         \u2514\u2500 System.Security.Cryptography.Pkcs (v7.0.2)\r\n            \u2514\u2500 System.Formats.Asn1 (v7.0.0)\r\n\r\n  [net472]\r\n   \u2502\r\n   \u2514\u2500 No dependency graph(s) found for this target framework.\r\n```\r\n\r\nFrom the perspective of a MSBuild task I'm not sure how we can address this. This package comes from the .NET runtime. There is no way for us to really fix this at the msbuild task level given that the MSBuild host controls this dependency. Not sure how we can proceed here as we can't suppress this warning over the long term. \r\n\n\n### Steps to Reproduce\n\nCreate a new console project and add the following NuGet.config file \r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<configuration>\r\n  <packageSources>\r\n     <clear />\r\n    <add key=\"nuget.org\" value=\"https://api.nuget.org/v3/index.json\" />\r\n  </packageSources>\r\n  <auditSources>\r\n    <clear />\r\n    <add key=\"nuget.org\" value=\"https://api.nuget.org/v3/index.json\" />\r\n  </auditSources>\r\n</configuration>\r\n```\r\n\r\nThen run the following:\r\n\r\n```cmd\r\n> dotnet new classlib\r\n> cp ../NuGet.config .\r\n> dotnet add package Microsoft.Build.Tasks.Core\r\n> dotnet build\r\n```\r\n\r\nThat will produce the following warning:\r\n\r\n> Package 'System.Formats.Asn1' 7.0.0 has a known high severity vulnerability, https://github.com/advisories/GHSA-447r-wph3-92pm\n\n### Expected Behavior\n\nNo warning or a method of correctly addressing the warning in the library\n\n### Actual Behavior\n\nThat will produce the following warning:\r\n\r\n> Package 'System.Formats.Asn1' 7.0.0 has a known high severity vulnerability, https://github.com/advisories/GHSA-447r-wph3-92pm\n\n### Analysis\n\nN/A\n\n### Versions & Configurations\n\n_No response_",
  "state": "OPEN",
  "createdAt": "2024-09-12T00:07:18Z",
  "updatedAt": "2025-01-21T14:51:13Z",
  "closedAt": null,
  "author": {
    "login": "jaredpar"
  },
  "milestone": null,
  "assignees": {
    "nodes": [
      {
        "login": "rainersigwald"
      }
    ]
  },
  "labels": [
    "bug",
    "triaged"
  ],
  "comments": {
    "nodes": [
      {
        "body": "What I've done in runtime is cherry-pick the MSBuild assemblies when building tasks.  This allows us to reference them without bringing in the closure.  https://github.com/dotnet/runtime/pull/107639/files#diff-31e8e6d63141c9dcbc8ed1c2b019b92b199f2902d1856108c7effe8805542789R4\r\n\r\nIt's a temporary solution until we can get a better one like an MSBuild Task SDK, or some dedicated MSBuild task package.    https://github.com/microsoft/MSBuildSdks/issues/551.\r\n\r\nI think it's possible for MSBuild to produce separate packages just for tasks that might even be version agnostic as the surface area needed by a task rarely changes. ",
        "createdAt": "2024-09-12T01:11:54Z",
        "author": {
          "login": "ericstj"
        }
      },
      {
        "body": "@jaredpar most folks don't actually use `Asn1` and tasks tend to mark all of MSBuild references `ExcludeAssets=\"Runtime\"`.  I think the cheapest workaround here is to do \r\n```\r\n  <PackageReference Include=\"System.Formats.Asn1\" Version=\"$(SystemFormatsAsn1Version)\" ExcludeAssets=\"All\" PrivateAssets=\"All\" />\r\n```\r\nThat upgrades the version to one that's not vulnerable and prevents the task from seeing the higher version and potentially breaking out of the version from VS / MSBuild.  Since the package is entirely excluded the project upgrading it cannot witness the upgrade (for example as an assembly reference) - but it does prevent the vulnerable version from being pulled by NuGet.",
        "createdAt": "2024-09-12T16:22:32Z",
        "author": {
          "login": "ericstj"
        }
      },
      {
        "body": "Will the package still be downloaded? If so won't that still cause CG alerts that look at disk assets to be triggered? ",
        "createdAt": "2024-09-12T16:28:08Z",
        "author": {
          "login": "jaredpar"
        }
      },
      {
        "body": "The new package would be downloaded, avoiding the CVE alert.  In the above sample, I expect SystemFormatsAsn1Version to be set to the fixed version.\r\n\r\nTypically folks don't persist the MSBuild reference for tasks (using `PrivateAssets=\"All\"`) so consumers of the task aren't impacted regardless.  Of course for a component that actually persists the MSBuild reference this doesn't work - for example Microsoft.CodeAnalysis.Workspaces.MSBuild - but we have a different [solution](https://github.com/dotnet/roslyn/issues/75058) for that.",
        "createdAt": "2024-09-12T16:56:20Z",
        "author": {
          "login": "ericstj"
        }
      },
      {
        "body": "Another recommendation here -- try to remove your dependency on `Microsoft.Build.Tasks.Core` completely.  \r\n\r\nI suspect most people don't need this package reference.  It's mostly implementation Tasks - that's why it has heavy / highly-serviced dependencies.  There are a couple of non task types in here.  I wonder if we could push those down to make it easier on folks?\r\n\r\nLooking through all the types, these ones seem to be the types that aren't actual tasks and could be useful to push down.\r\n- CommandLineBuilderExtension\r\n- TaskExtension\r\n- ToolTaskExtension\r\n\r\nNot generally useful nor exchange:\r\n- ExtractedClassName\r\n- IFixedTypeInfo\r\n- Microsoft.Build.Tasks.Deployment.Bootstrapper namespace\r\n- Microsoft.Build.Tasks.Deployment.ManifestUtilities namespace\r\n- Microsoft.Build.Tasks.Hosting namespace\r\n- System.Deployment.Internal.CodeSigning namespace\r\n\r\nFor reference, here's the [API surface of Microsoft.Build.Tasks.Core](https://github.com/dotnet/source-build-reference-packages/blob/main/src/referencePackages/src/microsoft.build.tasks.core/17.8.3/ref/netstandard2.0/Microsoft.Build.Tasks.Core.cs).\r\n\r\ncc @rainersigwald ",
        "createdAt": "2024-09-13T16:16:57Z",
        "author": {
          "login": "ericstj"
        }
      },
      {
        "body": "> - try to remove your dependency on Microsoft.Build.Tasks.Core completely.\r\n\r\nNot realistic for roslyn. That assembly contains the `ICscHost*` and `IVbcHost*` interfaces which we have to use. ",
        "createdAt": "2024-09-13T16:35:24Z",
        "author": {
          "login": "jaredpar"
        }
      },
      {
        "body": "Yeah, and even so - that doesn't help with CVE-2024-38081 (Microsoft.IO.Redist) which is similar.  I think the [best option](https://github.com/dotnet/msbuild/issues/10656#issuecomment-2346735439) right now is `ExcludeAssets=\"All\" PrivateAssets=\"All\"`.  I bet that works for most people.",
        "createdAt": "2024-09-13T16:39:41Z",
        "author": {
          "login": "ericstj"
        }
      }
    ]
  }
}