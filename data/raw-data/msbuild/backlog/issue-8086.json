{
  "number": 8086,
  "title": "CS2002 warning for .resx code generation in .NET Core / VS Code",
  "body": "<!-- This is a template that helps us provide quicker feedback. Please use any relevant sections and delete anything you don't need. -->\r\n\r\n### Issue Description\r\n\r\nI'm trying to work out how to [use the strongly-typed resource (resx) generation](https://www.paraesthesia.com/archive/2022/09/30/strongly-typed-resources-with-net-core/) across both VS Code and Visual Studio. I found that if you put this in your .csproj things mostly work:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <ItemGroup>\r\n    <!--\r\n      Magic embedded resource incantation based on https://github.com/dotnet/msbuild/issues/4751\r\n\r\n      The EmbeddedResource entry seems to add the Designer files to Compile, so\r\n      if you don't first remove them from Compile you get warnings about\r\n      double-including source.\r\n    -->\r\n    <Compile Remove=\"**/*.Designer.cs\" />\r\n    <EmbeddedResource Update=\"MyResources.resx\">\r\n      <Generator>ResXFileCodeGenerator</Generator>\r\n      <LastGenOutput>MyResources.Designer.cs</LastGenOutput>\r\n      <StronglyTypedFileName>MyResources.Designer.cs</StronglyTypedFileName>\r\n      <StronglyTypedLanguage>CSharp</StronglyTypedLanguage>\r\n      <StronglyTypedNamespace>MyNamespace</StronglyTypedNamespace>\r\n      <StronglyTypedClassName>MyResources</StronglyTypedClassName>\r\n    </EmbeddedResource>\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nWhen you _build this_ it works great. No warnings, no errors, all the strongly-typed resources are available to your code. If the `.Designer.cs` file doesn't exist, it will get generated. No problem.\r\n\r\nWhat I've found is that the `<Compile Remove=\"**/*.Designer.cs\" />` is a problem _for OmniSharp code analysis_ because it follows MSBuild, but MSBuild somehow is including the `.Designer.cs` files magically even though they're listed as removed. Whenever you use the class (`MyNamespace.MyResources.SomeResource`) the OmniSharp code analysis says there's no such class.\r\n\r\nHowever, if you _remove_ that line, then when you build you get a warning:\r\n\r\n`CSC : warning CS2002: Source file '/path/to/MyNamespace/MyResources.Designer.cs' specified multiple times`\r\n\r\nI tried filing this as https://github.com/OmniSharp/omnisharp-vscode/issues/5396 but they noted it's an MSBuild issue.\r\n\r\nRelated issues here: #4751, #7609\r\n\r\n### Steps to Reproduce\r\n\r\n- Create a C# library project.\r\n- Create a .resx file with a single string in it.\r\n- In the .csproj file, add the above `<Compile>` and `<EmbeddedResource>` directives.\r\n- Build. You should see the .Designer.cs file get created.\r\n- Create a class that uses the strongly-typed resource class that was generated.\r\n- Build. It should build successfully.\r\n- Look at the analysis in VS Code on the class that uses the strongly-typed resource. You should see a red squiggly and an error saying \"The name 'XXXXX' does not exist in the current context\" indicating that the class doesn't exist. Note you may need to exit and restart VS Code to see this; sometimes there's a race condition or something that allows the analysis to work and see the class once. On subsequent analysis runs it doesn't work.\r\n- Edit the .csproj file. Remove the `<Compile Remove>` directive.\r\n- Build. The build will issue a warning that the .Designer.cs has been included twice.\r\n- Look at the analysis in VS Code on the class using the strongly-typed resource. The red squiggly should have disappeared.\r\n\r\n[**I have provided a repro project here** with a README that explains how to see the behavior.](https://github.com/tillig/msbuild-resx-repro-8086)\r\n\r\n### Expected Behavior\r\n\r\nI expect the analysis to see the class just like the build does - I should have consistent behavior between the build (only include the .Designer.cs file once) and the OmniSharp analysis (.Designer.cs still somehow included even though it's excluded from `<Compile>`).\r\n\r\nOmniSharp is following the MSBuild here, so they insist this is an MSBuild problem, and I tend to agree.\r\n\r\n### Actual Behavior\r\n\r\nThere's a difference between the build and the OmniSharp analysis. Either the build works, or I get no-red-squiggly, but I can't have both.\r\n\r\nOmniSharp is following the MSBuild here, so they insist this is an MSBuild problem, and I tend to agree. (I apologize for saying this multiple times; in cases like this where I mention \"I can see the problem illustrated via XYZ solution\" like OmniSharp, there has been a tendency in my experience to want to close the issue and redirect to that solution. It's not an OmniSharp bug. It's an MSBuild bug.)\r\n\r\n### Analysis\r\n\r\nI have not been able to figure out where it's happening, just that it is. Sorry.\r\n\r\n### Versions & Configurations\r\n\r\n- Mac OS Monterey\r\n- .NET 6.0.401\r\n- MSBuild 17.3.1.41501\r\n",
  "state": "CLOSED",
  "createdAt": "2022-10-24T16:56:00Z",
  "updatedAt": "2025-02-26T19:49:34Z",
  "closedAt": "2022-10-25T14:10:27Z",
  "author": {
    "login": "tillig"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "bug",
    "needs-triage"
  ],
  "comments": {
    "nodes": [
      {
        "body": "Not a maintainer of MSBuild, but you can theoretically set [EnableDefaultCompileItems](https://learn.microsoft.com/en-us/dotnet/core/project-sdk/msbuild-props#enabledefaultcompileitems) to false, and include the files you want explicitly.\r\n\r\nI think what's happening here is that the `Compile Remove` target is evaluated before the actual files are flushed to disk, and that causes some weird timing issue.\r\n\r\n[ResGen](https://source.dot.net/#MSBuildTarget=ResGen) is the target handling the generation of those `.resources.cs` files. The files theoretically should be injected by the target. A bit lower in [CoreResGen](https://source.dot.net/#MSBuildFiles/C/ProgramFiles/MicrosoftVisualStudio/2022/Enterprise/MSBuild/Current/Bin_/amd64/Microsoft.Common.CurrentVersion.targets,3285) it includes the generated `.resources.cs` into the build.\r\n\r\nI'm not sure how this would be an issue in msbuild itself.",
        "createdAt": "2022-10-24T18:00:59Z",
        "author": {
          "login": "Therzok"
        }
      },
      {
        "body": "If omnisharp evaluates those targets before resgen is actually run, those files won't exist on disk, so there would be no typesystem information.",
        "createdAt": "2022-10-24T18:02:44Z",
        "author": {
          "login": "Therzok"
        }
      },
      {
        "body": "Even if you generate the files, close out VS Code, then start it up again - with the files already there - if the `<Compile Remove>` is there, OmniSharp won't find them.\r\n\r\nI don't think having to switch to all-manual-control is a valid workaround here. I appreciate that it's technologically possible, but it defeats the purpose of _not_ having to do that. Seems like this should, as they say, \"just work.\"\r\n\r\nIt seems to be an MSBuild issue because of the CS2002 warning - I shouldn't have to _exclude_ the .Designer.cs files in order to get rid of a build warning. That warning happens whether the file _already exists_ or whether _it's just being created_. There shouldn't be a warning.\r\n\r\nIf there wasn't that warning, I could drop the `<Compile Remove>` part and things would \"just work.\" OmniSharp would work, MSBuild would work, all would be well.",
        "createdAt": "2022-10-24T18:16:53Z",
        "author": {
          "login": "tillig"
        }
      },
      {
        "body": "There are a few issues here. #4751 still tracks making it less awful.\r\n\r\nFirst, generated files should go in the `obj/` directory, so you should change this:\r\n\r\n```diff\r\n-      <StronglyTypedFileName>MyResources.Designer.cs</StronglyTypedFileName>\r\n+      <StronglyTypedFileName>$(IntermediateOutputPath)\\MyResources.Designer.cs</StronglyTypedFileName>\r\n```\r\n\r\nThat will remove the need to have `<Compile Remove=\"**/*.Designer.cs\" />`, because the default globs don't look into `obj`. Fixing that will resolve the `CS2002` warnings.\r\n\r\nSecond, you have two conflicting definitions for \"what part of the build should generate source for this resx?\". `<Generator>ResXFileCodeGenerator</Generator>` says \"Visual Studio should generate the file, into a file next to the original `.resx`\", while specifying `StronglyTyped*` indicates that the `GenerateResource` task in `CoreResGen` should do that. That causes Visual Studio to create/update `src/ResxRepro/MyResources.Designer.cs`. You can remove the `Generator`, or switch to `<Generator>MSBuild:Compile</Generator>` (per https://github.com/dotnet/msbuild/issues/4751#issuecomment-1268408929 by @arthri) to tell Visual Studio to stop doing that (or run a build when it thinks it needs to).\r\n\r\nThis unfortunately doesn't fix OmniSharp, because it's calling the build in an unusual way that avoids the dependencies that usually cause `CoreResGen` to run before `CoreCompile`. I'll comment and see if they can reactivate the bug you filed there. https://github.com/dotnet/msbuild/issues/4751#issuecomment-1268408929 by @arthri works around that by adding a dependency that is respected: `<CoreCompileDependsOn>PrepareResources;$(CompileDependsOn)</CoreCompileDependsOn>`.\r\n\r\nWith those changes, I think things work in both VSCode and VS:\r\n\r\n```diff\r\ndiff --git a/src/ResxRepro/ResxRepro.csproj b/src/ResxRepro/ResxRepro.csproj\r\nindex 4723193..05e1851 100644\r\n--- a/src/ResxRepro/ResxRepro.csproj\r\n+++ b/src/ResxRepro/ResxRepro.csproj\r\n@@ -3,27 +3,14 @@\r\n     <TargetFramework>net6.0</TargetFramework>\r\n     <ImplicitUsings>enable</ImplicitUsings>\r\n     <Nullable>enable</Nullable>\r\n+\r\n+    <CoreCompileDependsOn>PrepareResources;$(CompileDependsOn)</CoreCompileDependsOn>\r\n   </PropertyGroup>\r\n   <ItemGroup>\r\n-    <!--\r\n-      This 'Compile Remove' is the solution to removing the CS2002 warning.\r\n-\r\n-      If you leave it here, it seems like .Designer.cs files should not be\r\n-      included in compilation, but it is. With it here, there is no CS2002\r\n-      warning but tools like OmniSharp exclude the .Designer.cs files so\r\n-      analysis is wrong.\r\n-\r\n-      If you comment it out, you get the CS2002 warning that the .Designer.cs\r\n-      file is included multiple times but OmniSharp analysis starts working.\r\n-\r\n-      This is an inconsistency in how resource generation is addressed with\r\n-      respect to compilation.\r\n-    -->\r\n-    <Compile Remove=\"**/*.Designer.cs\" />\r\n     <EmbeddedResource Update=\"MyResources.resx\">\r\n-      <Generator>ResXFileCodeGenerator</Generator>\r\n+      <Generator>MSBuild:Compile</Generator>\r\n       <LastGenOutput>MyResources.Designer.cs</LastGenOutput>\r\n-      <StronglyTypedFileName>MyResources.Designer.cs</StronglyTypedFileName>\r\n+      <StronglyTypedFileName>$(IntermediateOutputPath)\\MyResources.Designer.cs</StronglyTypedFileName>\r\n       <StronglyTypedLanguage>CSharp</StronglyTypedLanguage>\r\n       <StronglyTypedNamespace>ResxRepro</StronglyTypedNamespace>\r\n       <StronglyTypedClassName>MyResources</StronglyTypedClassName>\r\n\r\n```",
        "createdAt": "2022-10-25T13:34:50Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I created a new branch in my repro - `issuecomment-1290568321` - that contains the above fixes. It does seem to get things to work well together, but having read through #4751 many times, I still never did put _all_ of that together.\r\n\r\nI guess this issue can be closed since, basically, it boils down to #4751 all over again. Thanks for the help, @rainersigwald !",
        "createdAt": "2022-10-25T14:10:27Z",
        "author": {
          "login": "tillig"
        }
      },
      {
        "body": "Related: [I have a blog article](https://www.paraesthesia.com/archive/2022/09/30/strongly-typed-resources-with-net-core/) that tries to summarize all this without folks having to troll through #4751 and I've updated that article with this info.",
        "createdAt": "2022-10-25T14:32:02Z",
        "author": {
          "login": "tillig"
        }
      },
      {
        "body": "@rainersigwald just for the record, you suggested:\n```diff\n+    <CoreCompileDependsOn>PrepareResources;$(CompileDependsOn)</CoreCompileDependsOn>\n```\nafaics this comes from [this comment](https://github.com/dotnet/msbuild/issues/4751#issuecomment-1268408929).\nThat's probably a typo: I would have expected the line to be\n```diff\n+    <CoreCompileDependsOn>PrepareResources;$(CoreCompileDependsOn)</CoreCompileDependsOn>\n```\nI am [not the only one](https://github.com/dotnet/msbuild/issues/4751#issuecomment-1501474840) who thinks the latter option was the intended one.\n\n@tillig FYI, this typo is also in the corrected version of your blog post.",
        "createdAt": "2025-01-27T14:21:11Z",
        "author": {
          "login": "lukasjuhrich"
        }
      },
      {
        "body": "@lukasjuhrich No, that is not an error! The problem was that if something (like an IDE) calls `CoreCompile` directly (instead of `Compile`), not everything was running. The change was to make all of the dependencies for `Compile` also (redundantly in the normal case) required for `CoreCompile`.",
        "createdAt": "2025-01-27T14:53:20Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald Oh wow, that is really nontrivial. Thanks for clarifying!\n\nBut wouldn't `<CoreCompileDependsOn>PrepareResources;$(CompileDependsOn);$(CoreCompileDependsOn)</CoreCompileDependsOn>` be the more resilient option? Any dependencies to `CoreCompile` which are not dependencies of `Compile` would otherwise be lost in this redeclaration.\n\nFor instance, in a blazor project I have before me, `CoreCompileDependsOn` has value `;_ComputeNonExistentFileProperty;ResolveCodeAnalysisRuleSet; _GenerateRazorAssemblyInfo`, and these dependencies would then not run with that fix.",
        "createdAt": "2025-01-28T09:49:01Z",
        "author": {
          "login": "lukasjuhrich"
        }
      },
      {
        "body": "I get an issue with Visual Studio when adding \n`\n<CoreCompileDependsOn>PrepareResources;$(CoreCompileDependsOn)</CoreCompileDependsOn>\n`\n\nCauses intellisense errors in xaml files for x:Name attribute \"Field is already declared\". It Compiles fine tho",
        "createdAt": "2025-02-26T19:49:33Z",
        "author": {
          "login": "berggrenmille"
        }
      }
    ]
  }
}