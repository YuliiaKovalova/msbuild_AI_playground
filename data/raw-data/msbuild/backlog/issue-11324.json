{
  "number": 11324,
  "title": "Public reference from project reference is copied twice when included with a Link",
  "body": "### Issue Description\n\nA library included as an item with a LinkBase, is copied twice if it is also referenced with Private=False in a project reference.\nIt is copied both to the root of the output directory as to the Link path.\n\nRatioanle:\nI have a library that uses Private=False references as these need to be referenced on runtime by the already installed libraries of another application.\nI have a Console application that references this library. In here, I want to copy these external references to a folder, so they are not automatically linked when running and I can decide on runtime to either use these copies or the ones that are already installed .\nI also have other projects, using this LibUsingExternalLib library, that don't need the copy to the folder. One of them is packaged with the external app\n\n\n### Steps to Reproduce\n\nConsoleApplication:\n```\n  <ItemGroup>\n    <Content Include=\"..\\Libs\\*\" LinkBase=\"libs\\\">\n      <CopyToOutputDirectory>Always</CopyToOutputDirectory>\n    </Content>\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\LibUsingExternalLib\\LibUsingExternalLib.csproj\" />\n  </ItemGroup>\n```\n\nLibUsingExternalLib:\n```\n  <ItemGroup>\n    <Reference Include=\"SomeExternalLib\">\n      <HintPath>..\\Libs\\SomeExternalLib.dll</HintPath>\n      <Private>False</Private>\n    </Reference>\n  </ItemGroup>\n```\n\n[PublicReferenceFromProjectReference.zip](https://github.com/user-attachments/files/18518583/PublicReferenceFromProjectReference.zip)\n\n### Expected Behavior\n\nOnly have the reference in the libs\\ folder\n\n### Actual Behavior\n\nThe reference is both in the root of the output directory as in the libs\\ folder\n\n### Analysis\n\nIt is the expected behavior if I:\n* also add a Private=False reference to SomeExternalLib in ConsoleApplication or\n* add the include content to LibUsingExternalLib instead of ConsoleApplication\n\nSo it seems include items that are referenced are somehow also added to the output folder, but the Private=False is somehow lost?\n\n### Versions & Configurations\n\n_No response_",
  "state": "OPEN",
  "createdAt": "2025-01-23T10:08:04Z",
  "updatedAt": "2025-02-12T10:45:02Z",
  "closedAt": null,
  "author": {
    "login": "labsin"
  },
  "milestone": null,
  "assignees": {
    "nodes": [
      {
        "login": "GangWang01"
      },
      {
        "login": "rainersigwald"
      }
    ]
  },
  "labels": [
    "triaged"
  ],
  "comments": {
    "nodes": [
      {
        "body": "By removing the reference to `SomeExternalLib` with `Private=False` in the project `ConsoleApplication` provided in the Steps to Reproduce, the issue was reproduced. Here is the binlog [Rerpo.zip](https://github.com/user-attachments/files/18765742/Rerpo.zip).\n\nSince the reference `SomeExternalLib` in the project `LibUsingExternalLib` is set with `Private=False`, it is expected that the assembly `SomeExternalLib.dll` will not be copied to the root of ConsoleApplication's output directory. Actual result was the opposite.\nThe content `<Content Include=\"..\\Libs\\*\" LinkBase=\"libs\\\">` in the ConsoleApplication caused this behavior. According to  https://github.com/dotnet/msbuild/blob/04b6e1b59df1004aeedc4703757a5c407c06c139/src/Tasks/Microsoft.Common.CurrentVersion.targets#L2431, CandidateAssemblyFilesResolver included the assembly `..\\Libs\\SomeExternalLib.dll` and would resolve the ConsoleApplication's transitive reference `SomeExternalLib` with the path from the content. It led to enter into if branch in the following code\nhttps://github.com/dotnet/msbuild/blob/04b6e1b59df1004aeedc4703757a5c407c06c139/src/Tasks/AssemblyDependency/ReferenceTable.cs#L1333-L1355, rather than else branch that would set the reference's property [`IsUnresolvable`](https://github.com/dotnet/msbuild/blob/04b6e1b59df1004aeedc4703757a5c407c06c139/src/Tasks/AssemblyDependency/Reference.cs#L794-L801) to be true and eventually set its CopyLocal state with `NoBecauseUnresolved` https://github.com/dotnet/msbuild/blob/04b6e1b59df1004aeedc4703757a5c407c06c139/src/Tasks/AssemblyDependency/Reference.cs#L972-L976.\nIt's not reasonable to remove the item `Content` from the parameter `CandidateAssemblyFiles` of task `ResolveAssemblyReference`.\n\n@rainersigwald do you have any idea to fix it?",
        "createdAt": "2025-02-12T10:44:59Z",
        "author": {
          "login": "GangWang01"
        }
      }
    ]
  }
}