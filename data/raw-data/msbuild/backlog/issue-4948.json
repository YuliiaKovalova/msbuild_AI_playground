{
  "number": 4948,
  "title": "Do not import .NET Framework's copy of `Microsoft.WinFX.targets` when building Sdk style projects. ",
  "body": "From https://github.com/dotnet/wpf/issues/2258#issuecomment-559708792 \r\n\r\n>In SDK style projects, we didn't intend for WPF specific functionality to be present unless Microsoft.NET.Sdk.WindowsDesktop SDK is used. Contrary to this intention, when MSBuild/Visual Studio is used for builds, .NET Framework's copy of WinFX.targets gets imported by default irrespective of the SDK being used. This happens even for Microsoft.NET.Sdk projects.\r\n\r\n>![image](https://user-images.githubusercontent.com/20246435/69856215-f7ee8680-1241-11ea-9382-97fd92db5723.png)\r\n\r\nThis results in inconsistent results for `Resource` items when built by `msbuild` vs. `dotnet`. For e.g., a `Microsoft.NET.Sdk` project with `Resource` items built using `msbuild` will invoke PresentationBuildTasks (the .NET Framework version) and embed the resource into the assembly. \r\n\r\nThe same project, when built using `dotnet` will not do this. \r\n\r\nA developer could perceive the `dotnet` behavior as a regression (as seen in https://github.com/dotnet/wpf/issues/2258), but in reality the `msbuild` behavior is unexpected. \r\n\r\n/cc @nguerrera, @dsplaisted, @livarcocc \r\n/cc @rladuca ",
  "state": "CLOSED",
  "createdAt": "2019-12-02T19:11:18Z",
  "updatedAt": "2024-02-21T17:05:58Z",
  "closedAt": "2020-04-08T16:08:39Z",
  "author": {
    "login": "vatsan-madhavan"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "benvillalobos"
      }
    ]
  },
  "milestone": {
    "title": "MSBuild 16.6 Preview 3"
  },
  "comments": {
    "nodes": [
      {
        "body": "This is limited to the case where the sdk project targets .NET Framework, right? \r\n\r\nI am not sure that we can \"fix\" this as it's a breaking change. Some people managed to use the in-box PBT with SDK projects. We would have had to have had the foresight to turn them off in v1 of the SDK to do this without breaking.\r\n\r\nMy suggestion would be to just document to use Microsoft.NET.Sdk.WindowsDesktop moving forward for these use cases, if we can get away with that.",
        "createdAt": "2019-12-02T21:50:01Z",
        "updatedAt": "2019-12-02T21:50:01Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "Well, that case also affects multitarget SDK projects where you have e.g. `net48` and `netcoreapp3.0` in the TargetFrameworks are an issue as well. This is kinda common when you start porting your libraries.\r\n\r\nIf this is fixed it must be done in a way that `Microsoft.NET.Sdk` multitarget projects exclude the Desktop WPF Rules for net48 and similar targets and includes the rules for `Microsoft.NET.Sdk.WindowsDesktop` projects. Otherwise you wouldn't be able to multitarget WPF libraries at all anymore.\r\n\r\nIf above is not possible then its preferable to be left in the current state.",
        "createdAt": "2019-12-03T08:24:55Z",
        "updatedAt": "2019-12-03T08:24:55Z",
        "author": {
          "login": "weltkante"
        }
      },
      {
        "body": "@nguerrera Is there a property that we can use to explicitly remove the .NET Framework targets? If compat is concern we can make it opt-out by setting the property.",
        "createdAt": "2019-12-11T19:15:56Z",
        "updatedAt": "2019-12-11T19:15:56Z",
        "author": {
          "login": "tmat"
        }
      }
    ]
  }
}