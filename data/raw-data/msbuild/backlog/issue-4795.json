{
  "number": 4795,
  "title": "Feature request: Simple way to express an order-only dependency.",
  "body": "Previously (net core 2.1), this worked:\r\n````\r\n  <ItemGroup>\r\n    <ProjectReference Include=\"..\\buildtool\\buildtool.csproj\" Properties=\"RuntimeIdentifier=\">\r\n      <ReferenceOutputAssembly>false</ReferenceOutputAssembly>\r\n    </ProjectReference>\r\n  </ItemGroup>\r\n````\r\nNow, it doesn't, and even all this doesn't work:\r\n````\r\n  <ItemGroup>\r\n    <ProjectReference Include=\"..\\buildtool\\buildtool.csproj\" ExcludeAssets=\"all\" Properties=\"RuntimeIdentifier=\">\r\n      <ReferenceOutputAssembly>false</ReferenceOutputAssembly>\r\n      <CopyToOutputDirectory>Never</CopyToOutputDirectory>\r\n      <CopyLocal>false</CopyLocal>\r\n      <SkipGetTargetFrameworkProperties>true</SkipGetTargetFrameworkProperties>\r\n      <ExcludeAssets>all</ExcludeAssets>\r\n    </ProjectReference>\r\n  </ItemGroup>\r\n````\r\n\r\nWhat's going on is I have a build tool in the solution, and `dotnet publish` is trying (incorrectly) to ship it. Almost minimized sample attached. If it were any smaller it wouldn't make any sense.\r\n[depbuildtool.zip](https://github.com/microsoft/msbuild/files/3708497/depbuildtool.zip)\r\n",
  "state": "OPEN",
  "createdAt": "2019-10-09T16:46:11Z",
  "updatedAt": "2025-06-02T08:29:26Z",
  "closedAt": null,
  "author": {
    "login": "jhudsoncedaron"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "backlog",
    "Priority:3",
    "triaged",
    "gathering-feedback"
  ],
  "comments": {
    "nodes": [
      {
        "body": "I can confirm that this behaviour is occuring, I have a synthetic project that only needs to be built but any\r\n```\r\n<None>\r\n<CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>\r\n<!-- or -->\r\n<CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>\r\n</None>\r\n```\r\nis copied to projects with reference to synthetic project\r\n```\r\n<ProjectReference>\r\n<ReferenceOutputAssembly>false</ReferenceOutputAssembly>\r\n</ProjectReference>\r\n```",
        "createdAt": "2020-08-05T12:06:28Z",
        "author": {
          "login": "teneko"
        }
      },
      {
        "body": "Thanks to a random stackoverflow post, we now know that `<Private>false</Private>` works, but this isn't very sensible. It tells the compiler the assembly is in the GAC, which it isn't.",
        "createdAt": "2020-08-05T15:10:09Z",
        "author": {
          "login": "jhudsoncedaron"
        }
      },
      {
        "body": "You made my day. Here the [SO post](https://stackoverflow.com/questions/26242937/what-does-the-private-setting-do-on-a-projectreference-in-a-msbuild-project-file) for reference: https://stackoverflow.com/questions/26242937/what-does-the-private-setting-do-on-a-projectreference-in-a-msbuild-project-file. `<Private>false</Private>` can be applied to `<ProjectReference />`.\r\n\r\nWhen you don't need any CopyTo[..]Directory functionality in synthetic project, an another workaround might be:\r\n```\r\n<Project>\r\n\r\n  <Import Sdk=\"Microsoft.NET.Sdk\" Project=\"Sdk.props\" />\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>netstandard2.0</TargetFramework>\r\n    <!-- ... -->\r\n  </PropertyGroup>\r\n\r\n  <Import Sdk=\"Microsoft.NET.Sdk\" Project=\"Sdk.targets\" />\r\n\r\n  <!--\r\n  Overrides that return empty @(AllItemsFullPathWithTargetPath)\r\n  -->\r\n\r\n  <!-- https://github.com/dotnet/msbuild/blob/116af13e6760ebbb8466174201f1ebbc8df11dfa/src/Tasks/Microsoft.Common.CurrentVersion.targets#L4561 -->\r\n  <Target Name=\"GetCopyToOutputDirectoryItems\" />\r\n  <!-- or -->\r\n  <!--  https://github.com/dotnet/msbuild/blob/116af13e6760ebbb8466174201f1ebbc8df11dfa/src/Tasks/Microsoft.Common.CurrentVersion.targets#L4624 -->\r\n  <Target Name=\"GetCopyToPublishDirectoryItems\" />\r\n\r\n</Project>\r\n```\r\nBut I am not sure which further implications this workaround may have.",
        "createdAt": "2020-08-05T20:17:12Z",
        "author": {
          "login": "teneko"
        }
      },
      {
        "body": "Hi, I want just to state, that `<Private>false</Private>` may not work when using `<MSBuild Projects=\"$(MSBuildProjectFullPath)\" Targets=\"Publish\" Properties=\"$(_MSBuildProperties)\" />` and project `$(MSBuildProjectFullPath)` have `ProjectReference`s that have `<None><CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory></None>`\r\n. I've read the source code around https://github.com/dotnet/sdk/blob/master/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.Publish.targets and found the solution. You need to define `_GetChildProjectCopyToPublishDirectoryItems=false` so a example would be: `<MSBuild Projects=\"$(MSBuildProjectFullPath)\" Targets=\"Publish\" Properties=\"TargetFramework=$(TargetFramework);_GetChildProjectCopyToPublishDirectoryItems=false\" />`",
        "createdAt": "2020-08-06T12:01:16Z",
        "author": {
          "login": "teneko"
        }
      },
      {
        "body": "cc @dsplaisted for the nuget/CLI/SDK sync",
        "createdAt": "2022-09-01T16:59:34Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "Investigated with @rainersigwald:\r\n\r\n**tl;dr;:** Strictly speaking `ReferenceOutputAssembly` is behaving as it should (preventing the output assembly to be referenced and pulled to output folder by referencing project). However it might feel unexpected when referencing application (`OutputType=exe`), as other supplementary files (`deps.json`, `runtimeconfig.json` and mainly `<app>.exe`) are still copied to output folder.\r\n\r\n**Workaround:** Specifying `<Private>false</Private>` metadata on such `ProjectReference` will make sure that those additional files (including the `exe`) are not pulle to output folder of referencing project. Note that it will as well block copying of any other files as for example those defined as `<None Include=\"my-config.cfg\" CopyToOutputDirectory=\"PreserveNewest\" />`\r\n\r\n------------------\r\n**Background:** The netcore application produces the `.dll` assembly, and few supplementary files (e.g. the `.exe` which is actually a native shim calling into the managed `.dll`), those supplementary files are added as `None` item by the [sdk `_ComputeNETCoreBuildOutputFiles` target](https://github.com/dotnet/sdk/blob/7ae63298117b56fedca0985ac712113354491756/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.Sdk.targets#L761-L816). This then down the road causes the files to be added to the output folder, as `None` items are not excluded when the `ReferenceOutputAssembly=true`, as it (as the names implies) concerns only to output assembly.\r\n\r\nChanging the behavior so that even the `None` items are excluded could break come other scenarios that currently work (keeping to copy items explicitly added by user).\r\n\r\n**Possible fix:** So the possible way of fixing this is to define another metadata (e.g. something like `BuildAfter` or `EnforceBuildPrecedenceOnly`), that would **only** caused the referenced project to build prior the current project, but wouldn't cause any (direct nor transitive) flow of outputs nor items.\r\n\r\n**Conclusion:**\r\nSuch a fix is questionable as it needs changes on users side and proper documentation as well - so it's similar to guiding users bit by this to use the `Private` metadata (despit it has above mentioned limitations - but such a usecase should be very niche).",
        "createdAt": "2023-02-23T20:29:10Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "@JanKrivanek : In .NET 6, `<Private>false</Private>` didn't work on a `<ProjectReference>` but only on a `<PackageRefernece>`. Are you telling me that works now?\r\n\r\nIn case anybody is wondering, the use case is there's a compiler in the build tree that outputs `.cs` files that are consumed by other projects. (In one case it actually edits the output DLL instead).",
        "createdAt": "2023-02-23T20:30:58Z",
        "author": {
          "login": "jhudsoncedaron"
        }
      },
      {
        "body": "@jhudsoncedaron It works - see https://github.com/dotnet/msbuild/issues/4371#issuecomment-1195950719 for more context.\r\nBtw. I'm seeing same behavior building from net7 and net6 (6.0.406), while targetting both of those.",
        "createdAt": "2023-02-23T20:43:33Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "@JanKrivanek : Ah. I just didn't have the rest of the items to set from the other thread.",
        "createdAt": "2023-02-23T20:45:20Z",
        "author": {
          "login": "jhudsoncedaron"
        }
      },
      {
        "body": "The current sequence to reference a project for dependency purposes but not actually reference a project in the output is:\r\n\r\n````\r\n  <ItemGroup>\r\n    <ProjectReference Include=\"../OtherProject/OtherProject.csproj\" Properties=\"RuntimeIdentifier=;SelfContained=false\">\r\n      <ReferenceOutputAssembly>false</ReferenceOutputAssembly>\r\n      <DisableTransitiveProjectReferences>true</DisableTransitiveProjectReferences>\r\n      <SkipGetTargetFrameworkProperties>true</SkipGetTargetFrameworkProperties>\r\n      <Private>false</Private>\r\n      <ExcludeAssets>all</ExcludeAssets>\r\n    </ProjectReference>\r\n  </ItemGroup>\r\n````\r\n\r\nEach of these settings does a different piece of what is necessary to get a pure build order dependency.\r\n\r\n* `Properties=\"RuntimeIdentifier=\"`: Sets the runtime identifier of the other project. You don't want to inherit it. (Blank is the any RID here; typing any doesn't work)\r\n* `Properties=\"SelfContained=false\"`: Sets whether or not to build the other target as self contained or not\r\n* `<ReferenceOutputAssembly>false</ReferenceOutputAssembly>` Don't reference the other assembly in your assembly\r\n* `<DisableTransitiveProjectReferences>true</DisableTransitiveProjectReferences>` Don't take references on any projects it references either.\r\n* `<SkipGetTargetFrameworkProperties>true</SkipGetTargetFrameworkProperties>` Don't care what the other assembly's .NET Runtime version is either.\r\n* `<Private>false</Private>` Don't copy the build output of the other target to your target\r\n* `<ExcludeAssets>all</ExcludeAssets>` Don't copy other files from the other target to your target (such as `.deps.json`, `.runtimesettings.json`, or anything from `Action=CopyToOutputDirectory`)\r\n\r\nI have to admit I'm starting to get disgusted because this list grows over time and isn't discoverable.",
        "createdAt": "2023-02-24T15:50:20Z",
        "author": {
          "login": "jhudsoncedaron"
        }
      },
      {
        "body": "We are switching to solution generation, and none of the solution generators we have found have support for sln-level ProjectDependencies.\r\n\r\nWe tried creating a shortcut OrderingOnly=\"true\" attribute and a custom BeforeTargets=\"BeforeBuild\" Target to update ProjectReferences with all the boilerplate described by @jhudsoncedaron but we are abandoning the effort.  We encountered problems that we believe are related to special treatment of ProjectReference items within msbuild and VS. One of our dependencies happens to cause a namespace ambiguity that fails the build when it is treated as an actual reference, so we know that `ReferenceOutputAssembly` is being treated as true at build time even when we set it false BeforeBuild.\r\n\r\nInterestingly, some kind of caching within VS allows our fix to work during a second VS build, but not on rebuild nor when using msbuild.exe. \r\n\r\nWe believe the issue is related to special treatment of ProjectReference items because we note in the .binlog that a single ProjectReference item creates many mirrored item types at project load time: AnnotatedProjects, ProjectReferenceWithConfiguration, _MSBuildProjectReference, _MSBuildProjectReferenceExistent, _ProjectReferenceTargetFrameworkPossibilities, _ProjectReferenceTargetFrameworkPossibilitiesOriginalItemSpec. Presumably one of these is actually used internally to handle the ReferenceOutputAssembly metadata, and our transformation occurs too late for that item to get updated appropriately.",
        "createdAt": "2023-12-13T01:13:48Z",
        "author": {
          "login": "chipplyman"
        }
      },
      {
        "body": "@jhudsoncedaron I find that SelfContained and SkipGetTargetFrameworkProperties cause problems .  Either of them will push the referenced project into a separate batch and a separate node in the dependency graph, causing it to build twice.\r\n\r\nYou can see this happening by searching the binlog for `CopyFilesToOutputDirectory under($project Foo)`.\r\n\r\nIn our ecosystem this double build tends to cause transient build failures during Rebuild, if the Clean of one instance runs concurrently with the Build of the other.  We have an `AfterTargets=\"Build\"` action that consumes the output directory, and it will sometimes find that the output files have been deleted out from under it.",
        "createdAt": "2023-12-22T17:10:14Z",
        "author": {
          "login": "chipplyman"
        }
      },
      {
        "body": "@chipplyman : There's a simple way to avoid this issue. Create a .sln file with only the final build targets in it, and build it with `dotnet build -p:ShouldUnsetParentConfigurationAndPlatform=false` I don't know why it works, but I know that it does.",
        "createdAt": "2024-01-02T15:14:30Z",
        "author": {
          "login": "jhudsoncedaron"
        }
      },
      {
        "body": "@jhudsoncedaron for us, it's simpler to just omit those problematic properties. They don't seem to have any impact on the build when omitted. That may be only because we're still singly targeting .net 4.8 but for now it works. ",
        "createdAt": "2024-01-02T15:51:56Z",
        "author": {
          "login": "chipplyman"
        }
      },
      {
        "body": "@chipplyman : Ah. In my case it will not build. You are certainly getting away with it by targeting .net 4.8.",
        "createdAt": "2024-01-02T15:53:41Z",
        "author": {
          "login": "jhudsoncedaron"
        }
      },
      {
        "body": "@jhudsoncedaron I just hope this discussion demonstrates to the msbuild team that there exists an urgent need for a project-level ordering-only dependency declaration feature.",
        "createdAt": "2024-01-02T15:57:58Z",
        "author": {
          "login": "chipplyman"
        }
      },
      {
        "body": "In some ways the Aspire AppHost is driven by this same concept. The AppHost uses ProjectReferences to service projects mostly as a way to 'track' the projects, and the only build-related thing it actually _uses_ is implicit - when `run`ing the AppHost project this implicitly causes the ProjectReferences to be built as well, so the AppHost can launch them. This could also be orchestrated by the AppHost similar to how Docker Compose and other orchestrators work.\r\n\r\ncc @DamianEdwards @davidfowl for awareness.",
        "createdAt": "2024-01-02T16:01:07Z",
        "author": {
          "login": "baronfel"
        }
      },
      {
        "body": "Hmm, random thought, what if we had something like a `<ProjectDependency />` item that effectively expanded to the `<ProjectReference />` pattern shown in https://github.com/dotnet/msbuild/issues/4795#issuecomment-1443879474? I'm \"dependent\" on this other project but I don't \"reference\" it.",
        "createdAt": "2024-01-02T21:30:56Z",
        "author": {
          "login": "DamianEdwards"
        }
      },
      {
        "body": "@DamianEdwards : I mean we could; but they still have to fix the .sln double build bug. (Bug doesn't exist when you build out of a project file; but there's no way to build n project files in a single build step where n > 1 except for a .sln file so most people just build their .sln file that has everything in it.)",
        "createdAt": "2024-01-02T21:32:54Z",
        "author": {
          "login": "jhudsoncedaron"
        }
      },
      {
        "body": "@chipplyman : SelfContained and SkipGetTargetFrameworkProperties are required to cross compile.",
        "createdAt": "2024-02-06T17:26:13Z",
        "author": {
          "login": "jhudsoncedaron"
        }
      },
      {
        "body": "Seems that the workaround [here](https://github.com/dotnet/msbuild/issues/4795#issuecomment-1443879474) does not work anymore. My referenced project uses a different `TargetFramework` than the referencing project.\r\nHonestly quite surprised this doesn't work easily. There are lots of use cases for a pure build order dependency that doesn't pull in all the assemblies / symbols.",
        "createdAt": "2024-05-23T10:33:31Z",
        "author": {
          "login": "lvde0"
        }
      },
      {
        "body": "I'm in the same boat as the OP. My solution contains an OutputType=EXE project that is referenced by another project to trigger custom (non-C#) source generation but I do not want the source generator EXE to appear in the output of the referencing project. Only the magic incantation in https://github.com/dotnet/msbuild/issues/4795#issuecomment-1443879474 works, but that's just gross.",
        "createdAt": "2024-12-16T20:41:05Z",
        "author": {
          "login": "doxxx"
        }
      },
      {
        "body": "Any updates on fixing this with a ProjectDependency element or something that is less error prone with different combination of project configurations?",
        "createdAt": "2024-12-20T02:14:49Z",
        "author": {
          "login": "jdom"
        }
      }
    ]
  }
}