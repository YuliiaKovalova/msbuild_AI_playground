{
  "number": 5066,
  "title": "Cache warnings on disk, and re-display on re-build",
  "body": "### Steps to reproduce\r\n\r\n1. Make a new project\r\n```shell\r\ndotnet new console --name TestWarn\r\n```\r\n2. Edit `Program.cs`\r\n```\r\nusing System;\r\n\r\nnamespace TestWarn\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            var x = 0;\r\n        }\r\n    }\r\n}\r\n```\r\n3. Build twice\r\nFirst build:\r\n```shell\r\ndotnet build\r\nMicrosoft (R) Build Engine version 16.4.0+e901037fe for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 29.64 ms for /.../TestWarn/TestWarn.csproj.\r\nProgram.cs(9,17): warning CS0219: The variable 'x' is assigned but its value is never used [/.../TestWarn/TestWarn.csproj]\r\n  TestWarn -> /.../TestWarn/bin/Debug/netcoreapp3.1/TestWarn.dll\r\n\r\nBuild succeeded.\r\n\r\nProgram.cs(9,17): warning CS0219: The variable 'x' is assigned but its value is never used [/.../TestWarn/TestWarn.csproj]\r\n    1 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:00:01.98\r\n```\r\nYou get warnings.\r\n\r\nSecond build:\r\n```shell\r\ndotnet build\r\nMicrosoft (R) Build Engine version 16.4.0+e901037fe for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 32.44 ms for /.../TestWarn/TestWarn.csproj.\r\n  TestWarn -> /.../TestWarn/bin/Debug/netcoreapp3.1/TestWarn.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:00:00.88\r\n```\r\nYou don't get warnings.\r\n\r\n### Expected  behavior\r\nYou get warnings again when you re-build like Rust's Cargo.\r\nIf you do the exact same thing on Rust (with Cargo >= 1.40), you can get warnings twice, even though it builds incrementally.\r\n\r\n```shell\r\ncargo new test-warn\r\ncd test-warn\r\ncat <<EOF > src/main.rs\r\nfn main() {\r\n   let x = 0;\r\n}\r\nEOF\r\n```\r\n```shell\r\ncargo build    \r\n   Compiling test-warn v0.1.0 (/.../test-warn)\r\nwarning: unused variable: `x`\r\n --> src/main.rs:2:9\r\n  |\r\n2 |     let x = 0;\r\n  |         ^ help: consider prefixing with an underscore: `_x`\r\n  |\r\n  = note: `#[warn(unused_variables)]` on by default\r\n\r\n    Finished dev [unoptimized + debuginfo] target(s) in 0.23s\r\n\r\ncargo build\r\nwarning: unused variable: `x`\r\n --> src/main.rs:2:9\r\n  |\r\n2 |     let x = 0;\r\n  |         ^ help: consider prefixing with an underscore: `_x`\r\n  |\r\n  = note: `#[warn(unused_variables)]` on by default\r\n\r\n    Finished dev [unoptimized + debuginfo] target(s) in 0.00s\r\n```\r\nCargo changelog: https://github.com/rust-lang/cargo/blob/master/CHANGELOG.md#added-2\r\n\r\nI prefer to separate the build step and the lint step for CI. `dotnet clean` between the steps won't be necessary if we cache warnings. I could make a workaround by saving the output and `grep`-ing it though, but this is a little bit fragile.\r\n\r\n### Environment data\r\n```shell\r\ndotnet --info\r\n.NET Core SDK(global.json \ubc18\uc601):\r\n Version:   3.1.100\r\n Commit:    cd82f021f4\r\n\r\n\ub7f0\ud0c0\uc784 \ud658\uacbd:\r\n OS Name:     Windows\r\n OS Version:  10.0.18363\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.1.100\\\r\n\r\nHost (useful for support):\r\n  Version: 3.1.0\r\n  Commit:  65f04fb6db\r\n\r\n.NET Core SDKs installed:\r\n  3.1.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.14 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.14 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.14 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n```\r\n\r\nI've made an issue on the dotnet Roslyn repo first https://github.com/dotnet/roslyn/issues/40986 but I've been suggested to move it to here.",
  "state": "CLOSED",
  "createdAt": "2020-01-22T01:33:16Z",
  "updatedAt": "2024-02-21T17:05:24Z",
  "closedAt": "2020-04-15T14:46:32Z",
  "author": {
    "login": "foriequal0"
  },
  "labels": [
    "Area: Debuggability",
    "blocked",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Backlog"
  },
  "comments": {
    "nodes": [
      {
        "body": "This is a great idea that unfortunately is very difficult to implement in MSBuild. The core problem is that the MSBuild engine itself isn't stateful; we don't have a place to store things like warnings. We've thought about adding such a store (#701) but haven't done so yet because it's a high-complexity problem.\r\n\r\nEven if we had a place to store the warnings, this is made more complicated by partial incremental builds of targets and other ingrained MSBuild behaviors.\r\n\r\nIDEs tend to harvest warnings in a different way so they have their own persistence story and wouldn't be helped by changing this at the MSBuild level.\r\n\r\nAs a result, I don't think we'll be able to do this in the foreseeable future.",
        "createdAt": "2020-01-27T20:38:54Z",
        "updatedAt": "2020-01-27T20:38:54Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Thank you for your reply! I understand that it is hard to do in the foreseeable future under the current design of the MSBuild. I always appreciate recent improvements to the MSBuild. I'll be looking forward to the day to make it possible.",
        "createdAt": "2020-01-29T01:08:50Z",
        "updatedAt": "2020-01-29T01:09:25Z",
        "author": {
          "login": "foriequal0"
        }
      },
      {
        "body": "Duplicate of #3046",
        "createdAt": "2020-04-15T14:46:32Z",
        "updatedAt": "2020-04-15T14:46:32Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}