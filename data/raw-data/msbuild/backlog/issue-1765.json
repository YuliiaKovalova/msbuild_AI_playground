{
  "number": 1765,
  "title": "MSBuild crashes if environment variable too long",
  "body": ".NET rejects env var values over 32KB with ArgumentException. MSBuild sets environment varibles in several places and in this place at least does not handle that nicely. In this particular callstack it should perhaps just not set that environment variable. Possibly it should fail at initialization though if there's an environment variable that is so long it wouldn't be able to reset it when the build is done.\r\n\r\nNote there's a (shorter) limit on env var name also.\r\n\r\nhttps://github.com/dotnet/coreclr/issues/9793\r\n```\r\n06:57:53 Starting Build at 6:57:53.56\r\n06:57:53 BUILD: Commencing CoreCLR Repo build\r\n06:57:53 BUILD: Checking prerequisites\r\n06:57:56 BUILD: Using environment: \"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\Common7\\Tools\\VsDevCmd.bat\"\r\n06:58:02 Installing .NET Version Manager to C:\\Users\\dotnet-bot.dnx\\bin\r\n06:58:02 Creating destination folder 'C:\\Users\\dotnet-bot.dnx\\bin' ...\r\n06:58:02 Installing 'dnvm.ps1' to 'C:\\Users\\dotnet-bot.dnx\\bin' ...\r\n06:58:02 Installing 'dnvm.cmd' to 'C:\\Users\\dotnet-bot.dnx\\bin' ...\r\n06:58:02 Adding C:\\Users\\dotnet-bot.dnx\\bin to Process PATH\r\n06:58:02 Adding C:\\Users\\dotnet-bot.dnx\\bin to User PATH\r\n06:58:06 Installing dotnet cli...\r\n06:58:13 Restoring BuildTools version 1.0.27-prerelease-01209-01...\r\n06:58:13 Initializing BuildTools ...\r\n06:58:52 Updating CLI NuGet Frameworks map...\r\n06:58:52 Done initializing tools.\r\n06:58:52 Running: D:\\j\\workspace\\x86_checked_w---b3a226f6\\Tools\\dotnetcli\\dotnet.exe D:\\j\\workspace\\x86_checked_w---b3a226f6\\Tools\\run.exe D:\\j\\workspace\\x86_checked_w---b3a226f6\\config.json build -Project=D:\\j\\workspace\\x86_checked_w---b3a226f6\\build.proj -generateHeaderWindows -NativeVersionHeaderFile=\"D:\\j\\workspace\\x86_checked_w---b3a226f6\\bin\\obj_version.h\" -BuildOS=Windows_NT -BuildType=Checked -BuildArch=x86\r\n06:58:52 Running: D:\\j\\workspace\\x86_checked_w---b3a226f6\\Tools\\msbuild.cmd /nologo /verbosity:minimal /clp:Summary /maxcpucount /nodeReuse:false /l:BinClashLogger,Tools/net45/Microsoft.DotNet.Build.Tasks.dll;LogFile=binclash.log D:\\j\\workspace\\x86_checked_w---b3a226f6\\build.proj /p:__BuildType=Checked /p:__BuildArch=x86 /p:__BuildOS=Windows_NT /t:GenerateVersionHeader /p:GenerateVersionHeader=true /p:NativeVersionHeaderFile=D:\\j\\workspace\\x86_checked_w---b3a226f6\\bin\\obj_version.h\r\n06:59:00\r\n06:59:00 Unhandled Exception: Microsoft.Build.Shared.InternalErrorException: MSB0001: Internal MSBuild Error: Environment variable name or value is too long.\r\n06:59:00 =============\r\n06:59:00 System.ArgumentException: Environment variable name or value is too long.\r\n06:59:00 at System.Environment.SetEnvironmentVariable(String variable, String value)\r\n06:59:00 at Microsoft.Build.BackEnd.InProcNode.HandleShutdown(Exception& exception)\r\n06:59:00 at Microsoft.Build.BackEnd.InProcNode.Run(Exception& shutdownException)\r\n06:59:00\r\n06:59:00 ---> System.ArgumentException: Environment variable name or value is too long.\r\n06:59:00 at System.Environment.SetEnvironmentVariable(String variable, String value)\r\n06:59:00 at Microsoft.Build.BackEnd.InProcNode.HandleShutdown(Exception& exception)\r\n06:59:00 at Microsoft.Build.BackEnd.InProcNode.Run(Exception& shutdownException)\r\n06:59:00 --- End of inner exception stack trace ---\r\n06:59:00 at Microsoft.Build.Shared.ErrorUtilities.ThrowInternalError(String message, Exception innerException, Object[] args)\r\n06:59:00 at Microsoft.Build.BackEnd.InProcNode.Run(Exception& shutdownException)\r\n06:59:00 at Microsoft.Build.BackEnd.NodeProviderInProc.InProcNodeThreadProc()\r\n06:59:00 at System.Threading.ThreadHelper.ThreadStart_Context(Object state)\r\n06:59:00 at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)\r\n06:59:00 at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)\r\n06:59:00 at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n06:59:00 at System.Threading.ThreadHelper.ThreadStart()\r\n06:59:01 Command execution failed with exit code -532462766.\r\n```",
  "state": "OPEN",
  "createdAt": "2017-02-28T16:51:27Z",
  "updatedAt": "2024-02-21T16:37:25Z",
  "closedAt": null,
  "author": {
    "login": "danmoseley"
  },
  "labels": [
    "help wanted",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Backlog"
  },
  "comments": {
    "nodes": [
      {
        "body": "I opened dotnet/corefx#16766 to accept longer variables but there will always be a limit and MSBuild should not crash. ",
        "createdAt": "2017-03-06T18:20:44Z",
        "updatedAt": "2017-03-06T18:20:44Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "@rainersigwald As we know that we have a limitation for environment variable values of 32,767 characters, should we first check and ignore the variable set if it has more than 32,767 characters?",
        "createdAt": "2020-07-28T16:39:13Z",
        "updatedAt": "2020-07-28T16:39:13Z",
        "author": {
          "login": "joseotavioq"
        }
      },
      {
        "body": "The .NET Core change was to not attempt to validate the length ourselves (which we can get wrong depending on the platform, etc), but instead handle any OS error from trying to set it. MSBuild should do the same.\r\n\r\nOn recent .NET Core, you should still get ArgumentException\r\nhttps://github.com/dotnet/runtime/blob/6072e4d3a7a2a1493f514cdf4be75a3d56580e84/src/libraries/System.Private.CoreLib/src/System/Environment.Variables.Windows.cs#L58-L61\r\n(Not sure about Unix)\r\n",
        "createdAt": "2020-07-28T16:48:21Z",
        "updatedAt": "2020-07-28T16:48:21Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "Handling ArgumentException will work just as well on .NET Framework as well, it's just that .NET will be throwing it based on its own (stricter) validation, vs .NET Core will be throwing it based on the OS rejecting it.",
        "createdAt": "2020-07-28T16:49:02Z",
        "updatedAt": "2020-07-28T16:49:02Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "What you do if you get the exception is a decision to make, I guess either fail the build, silently continue, or log it could not be set and continue -- I'm guessing the latter.",
        "createdAt": "2020-07-28T16:49:40Z",
        "updatedAt": "2020-07-28T16:49:40Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "@danmosemsft I was taking a look at the .NET Framework source code and I saw that it will throw the ArgumentException error if the value length is greater or _EQUAL_ to 32767.\r\n[https://referencesource.microsoft.com/#mscorlib/System/environment.cs,902](https://referencesource.microsoft.com/#mscorlib/System/environment.cs,902)\r\n\r\nLooking at the function `SetEnvironmentVariableW` documentation, which is used by .NET Core, we can see that the maximum size of a user-defined environment variable is 32,767 characters.\r\n\r\n**.NET Core implementation:** [https://github.com/dotnet/runtime/blob/master/src/libraries/Common/src/Interop/Windows/Kernel32/Interop.SetEnvironmentVariable.cs](https://github.com/dotnet/runtime/blob/master/src/libraries/Common/src/Interop/Windows/Kernel32/Interop.SetEnvironmentVariable.cs)\r\n\r\n**SetEnvironmentVariableW documentation:** [https://docs.microsoft.com/en-us/windows/win32/api/processenv/nf-processenv-setenvironmentvariablew](https://docs.microsoft.com/en-us/windows/win32/api/processenv/nf-processenv-setenvironmentvariablew)\r\n\r\nI tried to set a value with more than 32767 characters with .NET Core and I did not get an error.\r\n\r\nExample:\r\n```\r\nstring environmentVariableName = \"ABC\";\r\nSystem.Environment.SetEnvironmentVariable(environmentVariableName, new string('a', 999999));\r\nvar value = System.Environment.GetEnvironmentVariable(environmentVariableName);\r\n```\r\n\r\nAm I doing something wrong?",
        "createdAt": "2020-08-07T17:32:30Z",
        "updatedAt": "2020-08-07T17:50:56Z",
        "author": {
          "login": "joseotavioq"
        }
      },
      {
        "body": "My guess is that Windows raised the limit again. Feel free to offer an issue PR for their docs.\r\n\r\n```\r\nEnvironment.SetEnvironmentVariable(\"ABC\", new string('a', Int32.MaxValue/4))\r\nExpression has been evaluated and has no value\r\nEnvironment.GetEnvironmentVariable(\"ABC\").Length\r\n536870911\r\n```\r\n\r\nThis demonstrates why it was a good change to make the OS validate the length, rather than .NET. We'd have gotten it wrong again if we did it.",
        "createdAt": "2020-08-07T18:12:10Z",
        "updatedAt": "2020-08-07T18:12:10Z",
        "author": {
          "login": "danmoseley"
        }
      }
    ]
  }
}