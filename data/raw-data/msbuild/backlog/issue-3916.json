{
  "number": 3916,
  "title": "[question] how to handle FileWrites, IncrementalClean, and Clean",
  "body": "Xamarin.Android has a few targets that run after `Build`, for example:\r\n\r\n* `_GenerateJava` - takes `Foo.dll` -> `Foo.java` in `$(IntermediateOutputPath)`\r\n* `_CompileJava` - takes `Foo.java` -> `Foo.jar` in `$(IntermediateOutputPath)`\r\n* `_CompileDex` - takes `Foo.jar` -> `Foo.dex` in `$(IntermediateOutputPath)`\r\n\r\n_NOTE: these are simplified for illustration_\r\n\r\nWe have another target, `SignAndroidPackage`, that is invoked by IDEs when an APK needs to be produced. It depends on `Build`.\r\n\r\n`SignAndroidPackage` - takes `Foo.dll;Foo.dex` -> `Foo.apk`  in `$(OutputPath)`\r\n\r\n### Steps to reproduce\r\n\r\nClone this repository: https://github.com/jonathanpeppers/MSBuildIncrementalClean\r\n\r\nDirectory contents:\r\n```\r\nFoo.cs\r\nFoo.csproj\r\nXamarin.Android.targets\r\n```\r\n\r\nCommand line\r\n```\r\n.\\build.ps1\r\n```\r\n(script included)\r\n\r\n### Expected  behavior\r\n\r\nXamarin.Android should be able to generate intermediate files after `Build` that get added to `FileWrites` and `FileListAbsolute.txt`. A `Clean` should be able to delete these files as well.\r\n\r\n### Actual behavior\r\n\r\nThere are a lot of *weird hacks* in Xamarin.Android's MSBuild targets that get these scenarios mostly working:\r\n- Write to `$(CleanFile)` directly... :man_facepalming:\r\n- Add to `FileWrites` with wildcards\r\n- Add a new target to `$(CleanDependsOn)` that deletes known files our build produces.\r\n\r\nWe want to clean these up appropriately. Asking for guidance, thanks!\r\n\r\n### Environment data\r\n`msbuild /version` output: \r\n\r\n    Microsoft (R) Build Engine version 15.8.169+g1ccb72aefa for .NET Framework\r\n\r\nOS info: Windows 10\r\n\r\nIf applicable, version of the tool that invokes MSBuild (Visual Studio).\r\n",
  "state": "CLOSED",
  "createdAt": "2018-11-09T16:27:19Z",
  "updatedAt": "2024-02-21T17:10:39Z",
  "closedAt": "2020-07-10T17:09:41Z",
  "author": {
    "login": "jonathanpeppers"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "As far as I know, without having looked too much into this, just recording all the file writes in the `FileWrites` item should be enough, as long as the projects get to import `Microsoft.Common.CurrentVersion.Targets` which has a [target](https://github.com/Microsoft/msbuild/blob/8ee86726d01aef0ca2585568268b0533a38115de/src/Tasks/Microsoft.Common.CurrentVersion.targets#L4877-L4950) that[ dumps the written file paths](https://github.com/Microsoft/msbuild/blob/8ee86726d01aef0ca2585568268b0533a38115de/src/Tasks/Microsoft.Common.CurrentVersion.targets#L4868-L4873) in a file which gets read during clean. Clean is recursive, so as long as discoverable projects import the above project file, it should work. Studying this mechanism from a [binary log](http://msbuildlog.com/) could be useful.\r\n\r\nOne approach would be to remove all your hacks, implement the above, and understand / fix the issues preventing clean. Some of them could even be bugs in msbuild's common props / targets.",
        "createdAt": "2018-11-09T18:37:46Z",
        "updatedAt": "2018-11-09T18:45:04Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "Let me rephrase. I think I can make the two problems I have more clear.\r\n\r\n## Problem 1\r\n\r\nIf you add a target that needs to run after `Build`, such as:\r\n```xml\r\n<BuildDependsOn>\r\n  $(BuildDependsOn);\r\n  _SomeTarget;\r\n</BuildDependsOn>\r\n```\r\n\r\nIf `_SomeTarget` adds to `FileWrites`, the files aren't actually used because `IncrementalClean` runs during `Build`. You can fix this by adding `BeforeTargets=\"_CleanGetCurrentAndPriorFileWrites\"`, but that doesn't _seem_ right (because it's a private target). `BeforeTargets=\"IncrementalClean\"` wasn't enough.\r\n\r\nIs there a more appropriate way to run a target *after* `Build`?\r\n\r\nHere are binlogs from my linked example above: [problem1.zip](https://github.com/Microsoft/msbuild/files/2567420/problem1.zip)\r\n\r\n## Problem 2\r\n\r\nYou have a public target that runs in addition to `Build`, let's say named `SomeTarget`. It has `DependsOnTargets=\"Build\"`, and is invoked by the IDE, command-line, etc. It has the same issues as no. 1.\r\n\r\nIt also has the problem if it adds to `FileWrites`, a subsequent `Build` won't add any files generated by `SomeTarget` to `FileWrites`.\r\n\r\nWhat is the appropriate way to handle this problem? Add an additional target that runs when `Build` runs, that looks for intermediate outputs from `SomeTarget` and adds them to `FileWrites` proactively?\r\n\r\nHere are binlogs from my linked example above: [problem2.zip](https://github.com/Microsoft/msbuild/files/2567434/problem2.zip)\r\n",
        "createdAt": "2018-11-09T20:32:28Z",
        "updatedAt": "2018-11-09T20:50:45Z",
        "author": {
          "login": "jonathanpeppers"
        }
      },
      {
        "body": "I came up with a solution for this: https://github.com/jonathanpeppers/MSBuildIncrementalClean#solution\r\n\r\nIf anyone has input, that would be great!",
        "createdAt": "2019-02-05T20:17:59Z",
        "updatedAt": "2019-02-05T20:17:59Z",
        "author": {
          "login": "jonathanpeppers"
        }
      },
      {
        "body": "Potentially related: https://github.com/dotnet/msbuild/issues/9709",
        "createdAt": "2024-02-03T04:07:53Z",
        "updatedAt": "2024-02-03T04:07:53Z",
        "author": {
          "login": "KirillOsenkov"
        }
      }
    ]
  }
}