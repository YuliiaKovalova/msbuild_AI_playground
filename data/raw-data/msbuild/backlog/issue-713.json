{
  "number": 713,
  "title": "Private MSBuild backward compatibility",
  "body": "Given a project that\n- Already exists\n- Uses full-framework tasks and targets\n- Targets building for the full framework\n\nIn a world where MSBuild isn't installed and potentially comes in mutiple flavors (desktop/full framework, .NET Core, Mono), what is required to build this project?\n\nAt the moment, .NET Core MSBuild can't build a project that targets the full framework. Reasons this isn't trivial:\n- Can't load **tasks** that aren't .NET Core compatible (this could be alleviated by #711)\n- Can't use MSBuild **functionality that's tied to the desktop CLR**, like ResolveAssemblyReferences, binding redirects, and some toolset/helper things\n- A desire to make netcore MSBuild **work the same everywhere**--for example disallowing registry operations, even though they could work (on Windows)\n\nAt the same time, the `dotnet` CLI can currently build applications that target the full framework, and it would be good to preserve that behavior.\n\nOne possibility is to always use the full framework MSBuild on Windows--that code will handle building projects that target full framework (as it always has) and .NET Core (because there are no .NET Core-exclusive features of MSBuild).\n",
  "state": "CLOSED",
  "createdAt": "2016-06-21T14:28:10Z",
  "updatedAt": "2024-02-21T17:27:38Z",
  "closedAt": "2020-04-15T20:13:08Z",
  "author": {
    "login": "rainersigwald"
  },
  "labels": [
    "needs-design",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "We could do a short term / long term thing.\n\n**Short term**, due to VS release time constraints: the easiest thing (for MSBuild at least) is for dotnet CLI and VS to use the full framework MSBuild on Windows. This means they would both agree, and users would not get different builds from VS and command line (as long as CLI users match the msbuild command line to the configuration that VS does).\n\n**Long term**, we could do work towards 1 build engine: beefing up .Net Core msbuild until it is good enough in terms of feature parity. Things like switching to Roslyn for inline tasks and converting many ifdefs to runtime checks.\n",
        "createdAt": "2016-06-21T18:34:59Z",
        "updatedAt": "2016-06-21T18:34:59Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "Please preserve the use of the xbuild-frameworks folder that comes with mono, it provides the necessary framework lists to target full-framework/mono.\n",
        "createdAt": "2016-08-26T18:37:16Z",
        "updatedAt": "2016-08-26T18:37:16Z",
        "author": {
          "login": "borgdylan"
        }
      },
      {
        "body": "I'm not sure this makes sense any more, closing.",
        "createdAt": "2020-04-15T20:13:08Z",
        "updatedAt": "2020-04-15T20:13:08Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}