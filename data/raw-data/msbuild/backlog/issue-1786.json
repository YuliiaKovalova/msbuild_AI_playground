{
  "number": 1786,
  "title": "PathTooLongException with _GenerateBindingRedirectsIntermediateAppConfig",
  "body": "We just hit a `PathTooLongException` on EF because this variable was producing the following path.\r\n\r\n> C:\\Projects\\EntityFramework\\test\\Microsoft.EntityFrameworkCore.SqlServer.Design.FunctionalTests\\obj\\Debug\\netcoreapp1.1\\Microsoft.EntityFrameworkCore.SqlServer.Design.FunctionalTests.csproj.Microsoft.EntityFrameworkCore.SqlServer.Design.FunctionalTests.dll.config\r\n\r\nThat filename seems rather excessive. Does it really need ***both*** `$(MSBuildProjectFile)` and `$(TargetFileName)` in there?",
  "state": "CLOSED",
  "createdAt": "2017-03-02T23:08:07Z",
  "updatedAt": "2024-02-21T17:21:15Z",
  "closedAt": "2017-09-26T22:33:00Z",
  "author": {
    "login": "bricelam"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "MSBuild 15.5"
  },
  "comments": {
    "nodes": [
      {
        "body": "It doesn't seem like it at first glance.\r\n\r\nI've been spelunking through history trying to figure out why it's this way, and it seems to have been introduced in dev12 with `GenerateBindingRedirects`. I suspect it was named this way as a compromise between\r\n\r\n* The standard `$(IntermediateOutputPath)$(MSBuildProjectFile).`_`{filename}`_ pattern for project-singleton caches and\r\n* The standard app-config naming convention of `$(TargetFileName).config`\r\n\r\nThis does cause duplication in the standard case, and having a very long project name that's the same as the assembly name is not uncommon.\r\n\r\nI think we could change this variable to `$(IntermediateOutputPath)$(MSBuildProjectFile).app.config`. Anyone have an idea why not?\r\n\r\n(Obligatory \"the real problem is #53 and then don't worry about this\". Obligatory \"but we live in the current world\".)",
        "createdAt": "2017-03-03T17:15:26Z",
        "updatedAt": "2017-03-03T17:15:26Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Noticed another variant of this - the CLI happily creates the intermediate file with a path too long, but doesn't copy it to the output directory. Desktop .NET returns false for file existence, maybe that has something to do with it.",
        "createdAt": "2017-03-23T17:32:22Z",
        "updatedAt": "2017-03-23T17:32:22Z",
        "author": {
          "login": "pranavkm"
        }
      },
      {
        "body": "Why not ```$(IntermediateOutputPath)$(TargetFileName).config```?",
        "createdAt": "2017-06-29T01:31:25Z",
        "updatedAt": "2017-06-29T01:31:25Z",
        "author": {
          "login": "tmat"
        }
      },
      {
        "body": "That seems like a reasonable option, too. I don't know whether exe-name or project-name is a \"more unique\" key for those who take the painful road of sharing an obj directory.",
        "createdAt": "2017-06-29T01:38:32Z",
        "updatedAt": "2017-06-29T01:38:32Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "If the .exe/.dll name wasn't unique the assembly would collide in the shared obj directory.\r\n\r\nWorkaround:\r\n```\r\n<Target Name=\"WorkaroundAppConfigPathTooLong\"\r\n          BeforeTargets=\"GenerateBindingRedirects\">\r\n    <PropertyGroup>\r\n      <_GenerateBindingRedirectsIntermediateAppConfig>$(IntermediateOutputPath)$(TargetFileName).config</_GenerateBindingRedirectsIntermediateAppConfig>\r\n    </PropertyGroup>\r\n  </Target>\r\n```\r\n\r\nproduces:\r\n\r\n![image](https://user-images.githubusercontent.com/41759/27667745-c75fa18e-5c31-11e7-8904-d8c199c13f87.png)\r\n",
        "createdAt": "2017-06-29T01:44:14Z",
        "updatedAt": "2017-06-29T01:44:14Z",
        "author": {
          "login": "tmat"
        }
      },
      {
        "body": "@tmat for the time being, we've resorted to shortening our project names. Seems less hacky than changing an internal property.",
        "createdAt": "2017-06-29T02:17:55Z",
        "updatedAt": "2017-06-29T02:17:55Z",
        "author": {
          "login": "pranavkm"
        }
      },
      {
        "body": "I'm currently facing the same problem, and blogged about it [here](https://codeblog.jonskeet.uk/2017/08/30/diagnosing-a-vs-only-build-problem/) - mostly in terms of how I diagnosed it.\r\n\r\nThis does seem pretty unnecessarily long at the moment.",
        "createdAt": "2017-08-30T14:54:30Z",
        "updatedAt": "2017-08-30T14:54:30Z",
        "author": {
          "login": "jskeet"
        }
      },
      {
        "body": "Tomas' rationale is right. If TargetFileName weren't unique in obj then you'd already be hosed. Can we go with it and get this fixed in 15.5?",
        "createdAt": "2017-08-30T15:59:18Z",
        "updatedAt": "2017-08-30T15:59:18Z",
        "author": {
          "login": "nguerrera"
        }
      }
    ]
  }
}