{
  "number": 7028,
  "title": "Update IntelliSense XSD to support multiple metadata representations",
  "body": "You can represent item metadata either as subelements or as attributes of the item XML element. The XSD should provide equivalent IntelliSense for both (but doesn't today, because in XSD the representations are distinct).",
  "state": "OPEN",
  "createdAt": "2021-11-09T18:30:35Z",
  "updatedAt": "2024-01-31T08:19:49Z",
  "closedAt": null,
  "author": {
    "login": "rainersigwald"
  },
  "labels": [
    "Partner request",
    "For consideration",
    "Area: IntelliSense",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "There's also duplication (and IIRC inconsistent replication) of metadata across different item types (`Compile`, `EmbeddedResource`, `Content`, `Page`, `Resource`, `ApplicationDefinition`, `None`).\r\n\r\nIt might make sense to introduce a new type in the schema to represent common metadata for items that represent files in the project, including `Link`, `Visible`, `CopyToOutputDirectory`, etc.",
        "createdAt": "2021-11-09T22:59:26Z",
        "updatedAt": "2021-11-09T22:59:26Z",
        "author": {
          "login": "drewnoakes"
        }
      },
      {
        "body": "> It might make sense to introduce a new type in the schema to represent common metadata for items that represent files in the project, including `Link`, `Visible`, `CopyToOutputDirectory`, etc.\r\n\r\nDo you know offhand how to represent that in XSD? If not no need to look it up or anything, just checking :)\r\n\r\nI wonder if we may be able to use this to solve another issue we have which is that the XSDs are localized in the VS repo because there wasn't any tooling support for XSD localization in public at the time we open-sourced. But if the XSD was a generated artifact we could pull from standard loc infra XLF.\r\n\r\nOf course the real fix is #1774 or https://github.com/mhutch/MonoDevelop.MSBuildEditor, so maybe we shouldn't overengineer this.",
        "createdAt": "2021-11-09T23:13:23Z",
        "updatedAt": "2021-11-09T23:13:23Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> Do you know offhand how to represent that in XSD?\r\n\r\nThe code that inspired the idea is the definition of `SimpleItemType` in `Microsoft.Build.Core.xsd`:\r\n\r\nhttps://github.com/dotnet/msbuild/blob/2b604c3a38772f7d70b369e0ad0da32257ed1b35/src/MSBuild/MSBuild/Microsoft.Build.Core.xsd#L415-L454\r\n\r\nThat definition is then used in `Microsoft.Build.CommonTypes.xsd` via the `base` attribute, as per this example for `Compile` items:\r\n\r\nhttps://github.com/dotnet/msbuild/blob/2b604c3a38772f7d70b369e0ad0da32257ed1b35/src/MSBuild/MSBuild/Microsoft.Build.CommonTypes.xsd#L695-L701\r\n\r\nThe intermediary level would likely need both a `name` and `base`.",
        "createdAt": "2021-11-10T09:44:11Z",
        "updatedAt": "2021-11-10T09:44:11Z",
        "author": {
          "login": "drewnoakes"
        }
      },
      {
        "body": "Is the goal here just to make the two representations have the same content, or is it to use the base types so you only have to specify metadata valid for a particular item type in one place? The latter seems nicer, but it doesn't sound doable from what I see here; you can specify a base type that applies the same thing to everything that uses it, but if we have a specific set of things to add as metadata for an item, only that item would be able to extend the base type, so you haven't gained anything. The annotations and subelements have different formats, so you also can't replicate between the two of them. Am I missing something?",
        "createdAt": "2022-04-14T23:27:41Z",
        "updatedAt": "2022-04-14T23:27:41Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "The two representations are equivalent in MSBuild and should be equivalent in the intellisense. Making them have the same representation in the XSD would be nice. But I don't think it's required--we could instead make the canonical checked-in representation some other thing and generate an XSD with the correct doubling.",
        "createdAt": "2022-04-15T18:13:40Z",
        "updatedAt": "2022-04-15T18:13:40Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "That's an interesting idea and sounds very doable...but also much more like a BenVillalobos project than something for me \ud83d\ude09",
        "createdAt": "2022-04-15T20:31:20Z",
        "updatedAt": "2022-04-15T20:31:20Z",
        "author": {
          "login": "Forgind"
        }
      }
    ]
  }
}