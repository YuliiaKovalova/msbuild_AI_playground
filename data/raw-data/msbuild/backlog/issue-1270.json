{
  "number": 1270,
  "title": "Global optimizations for whitespace preservation",
  "body": "Consider doing more intelligent whitespace analysis to infer the \"average\" formatting from the whole project when inserting a new element. The current code only looks locally at its nearest siblings.\n\nFor example:\n\n``` xml\n<ItemGroup>\n\n  <Compile Include=\"A.cs\" />\n\n  <Compile Include=\"C.cs\" />\n\n  <Compile Include=\"Class1.cs\" />\n  <Compile Include=\"Class2.cs\" />\n  <Compile Include=\"Class3.cs\" />\n</ItemGroup>\n```\n\nAdding a new element here could look at the entire parent, and see that the most common formatting is a newline and two spaces (3 hits) and not two newlines and two space (2 hits).\n\n``` xml\n<ItemGroup>\n\n  <Compile Include=\"A.cs\" />\n\n  <Compile Include=\"B.cs\" />\n\n  <Compile Include=\"C.cs\" />\n\n  <Compile Include=\"Class1.cs\" />\n  <Compile Include=\"Class2.cs\" />\n  <Compile Include=\"Class3.cs\" />\n</ItemGroup>\n```\n\nHere, adding a new element finds two equal clusters, and then it can either apply a heuristic (use last cluster, use first cluster, use random cluster), or compute whitespace clusters from all the elements of the same type from the entire project file.\n\n``` xml\n<ItemGroup>\n\n  <Compile Include=\"Class1.cs\" />\n\n  <Compile Include=\"Class2.cs\" />\n\n  <Compile Include=\"Class3.cs\" />\n</ItemGroup>\n\n<ItemGroup/>\n```\n\nAdding the first element in the second, empty itemgroup could compute whitespace clusters of siblings from other itemgroups. In the above case, it would find one cluster with \"two newlines and two spaces\"  and use that.\n",
  "state": "CLOSED",
  "createdAt": "2016-10-27T17:34:33Z",
  "updatedAt": "2024-02-21T17:24:51Z",
  "closedAt": "2019-11-04T21:37:44Z",
  "author": {
    "login": "cdmihai"
  },
  "labels": [
    "Feature - Trivia (whitespace and comments)",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Backlog"
  },
  "comments": {
    "nodes": [
      {
        "body": "How about just applying the following simpler logic: Try to match indentation, but don't match extra blank lines around other elements.\n",
        "createdAt": "2016-10-27T18:16:05Z",
        "updatedAt": "2016-10-27T18:16:05Z",
        "author": {
          "login": "dsplaisted"
        }
      },
      {
        "body": "Are you referring to indentation as the entire leading whitespace of the referenceSibling, or as it's used in #1264 (the substring after the last newline in the referenceSibling's leading whitespace)? \n",
        "createdAt": "2016-10-27T22:38:39Z",
        "updatedAt": "2016-10-27T22:38:39Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "I mean a substring.  Depending on whether you're copying it from the previous or next sibling, it might be a substring coming from the beginning or the end of the whitespace you find.\n",
        "createdAt": "2016-10-28T22:42:28Z",
        "updatedAt": "2016-10-28T22:42:28Z",
        "author": {
          "login": "dsplaisted"
        }
      },
      {
        "body": "Team triage: this is not something that we are likely to get to in the medium to long term. Closing this.",
        "createdAt": "2019-11-04T21:37:44Z",
        "updatedAt": "2019-11-04T21:37:44Z",
        "author": {
          "login": "livarcocc"
        }
      }
    ]
  }
}