{
  "number": 2317,
  "title": "Implement a way to merge one item into another",
  "body": "Given item types A and B, there should be an easy way in MSBuild to merge B into A.\r\n\r\nPossible ways to do merging:\r\n1. Metadata merging\r\n   1. Additive: Apply the metadata from the elements of B[B\u2229A] to the elements A[B\u2229A]\r\n   2. Overwrite: Overwrite the metadata from the elements of B[B\u2229A] to the elements A[B\u2229A]\r\n2. Item merging: \r\n   1. Intersection: Merge (additive or overwrite) the metadata from the elements of B[B\u2229A] to the elements A[B\u2229A]\r\n   2. Union: Merge (additive or overwrite) the metadata from the elements of B[B\u2229A] to the elements A[B\u2229A], and insert the elements B\\A into A\r\n\r\nProbably the most useful merging is intersection item merging with additive metadata. Possible syntax implementations for only this type of merging:\r\n- reuse the current Update operation. If the Update query is an item reference, and there is no metadata defined, do merging instead.\r\n```xml\r\n<Foo Update=\"@(Bar)\"> // applies all the metadata from Bar into Foo\r\n<Foo Update=\"@(Bar)\" KeepMetadata=\"Tar\"> // applies only metadata named \"Tar\" from Bar into Foo\r\n<Foo Update=\"@(Bar)\" RemoveMetadata=\"Tar\"> // applies all metadata except \"Tar\" from Bar into Foo\r\n```\r\n\r\nThe drawback is that MSBuild currently treats `<Foo Update=\"@(Bar)\"/>` as a noop (i.e. for all items in Foo that match in Bar, do nothing), so we'll break the existing noop behaviour. Since it's a pretty benign behaviour, it probably doesn't happen too often.\r\n\r\n- add a new `Merge` operation\r\n```xml\r\n<Foo Merge=\"@(Bar)\"> // applies all the metadata from Bar into Foo\r\n<Foo Merge=\"@(Bar)\" KeepMetadata=\"Tar\"> // applies only metadata named \"Tar\" from Bar into Foo\r\n<Foo Merge=\"@(Bar)\" RemoveMetadata=\"Tar\"> // applies all metadata except \"Tar\" from Bar into Foo\r\n```\r\n\r\nThe advantages of `Merge`:\r\n- it disambiguates behaviour by item operations. This way each operation does something consistent (Update single metadata via a matching query Vs Merging all metadata of one item type into another item type).\r\n- it allows extensibility to the other merging types via configuration attributes (e.g. `<Foo Merge=\"@(Bar)\" MetadataMergeStrategy=\"overwrite\" ItemMergeStrategy=\"Union\">`)\r\n",
  "state": "OPEN",
  "createdAt": "2017-07-18T19:16:57Z",
  "updatedAt": "2024-02-21T16:36:22Z",
  "closedAt": null,
  "author": {
    "login": "cdmihai"
  },
  "labels": [
    "Area: Language",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Are there patterns for how any of these can be implemented today within targets, esp. _Intersection_ with merging of metadata? \r\n\r\n/cc @nguerrera, @rainersigwald ",
        "createdAt": "2019-03-19T18:33:53Z",
        "updatedAt": "2019-03-19T18:34:18Z",
        "author": {
          "login": "vatsan-madhavan"
        }
      },
      {
        "body": "I would implement a task @vatsan-madhavan. It's often possible to do it in pure MSBuild but IME the output is incomprehensible even to the author as of about half an hour after writing it.",
        "createdAt": "2019-03-19T19:27:34Z",
        "updatedAt": "2019-03-19T19:27:34Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}