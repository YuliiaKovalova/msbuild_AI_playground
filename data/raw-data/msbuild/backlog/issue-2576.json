{
  "number": 2576,
  "title": "Don't read comments when reading imports",
  "body": "In a trace of an evaluation of a large solution from a major partner, 1% of allocations during the evaluation is spent reading comments (their GC time is 25%, so we need to reduce allocations). For project file persistence we want to make sure to roundtrip comments - but for targets do we need them? \r\n\r\n![image](https://user-images.githubusercontent.com/1103906/31064991-74377e1c-a78d-11e7-92d6-876347dfbb4e.png)\r\n",
  "state": "CLOSED",
  "createdAt": "2017-10-02T05:20:02Z",
  "updatedAt": "2024-02-21T17:16:26Z",
  "closedAt": "2021-04-27T18:44:53Z",
  "author": {
    "login": "davkean"
  },
  "labels": [
    "backlog",
    "Area: Performance",
    "Priority:2",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "ladipro"
      }
    ]
  },
  "milestone": {
    "title": "MSBuild 16.10"
  },
  "comments": {
    "nodes": [
      {
        "body": "`XmlReaderSettings.IgnoreComments` controls this.",
        "createdAt": "2017-10-02T05:24:03Z",
        "updatedAt": "2017-10-02T05:24:03Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "Interestingly enough, we already have this concept - see `_loadAsReadOnly` in `XmlDocumentWithLocation`, that avoids the XmlNode allocations but not the string allocations as above.",
        "createdAt": "2017-10-02T05:46:08Z",
        "updatedAt": "2017-10-02T05:46:08Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "Hmm, looks like that's off by default, I'm also seeing XmlComment allocations:\r\n\r\n![image](https://user-images.githubusercontent.com/1103906/31065522-a9712764-a791-11e7-88a6-d3e4f051b957.png)\r\n",
        "createdAt": "2017-10-02T05:49:40Z",
        "updatedAt": "2017-10-02T05:49:40Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "@jeffkl Mentioned that we should take this even further and just turn on read-only mode across MSBuild process - we should never need read/write for that.",
        "createdAt": "2017-10-03T06:01:37Z",
        "updatedAt": "2017-10-03T06:01:37Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "@davkean @jeffkl So [XMake.cs](https://github.com/Microsoft/msbuild/blob/5df95761c73cd6b1b2c35a827ed168e32546388e/src/MSBuild/XMake.cs#L487) has this rather scary comment:\r\n\r\n``` C#\r\n// Indicate to the engine that it can toss extraneous file content\r\n// when it loads microsoft.*.targets. We can't do this in the general case,\r\n// because tasks in the build can (and occasionally do) load MSBuild format files\r\n// with our OM and modify and save them. They'll never do this for Microsoft.*.targets, though,\r\n// and those form the great majority of our unnecessary memory use.\r\nEnvironment.SetEnvironmentVariable(\"MSBuildLoadMicrosoftTargetsReadOnly\", \"true\");\r\n```\r\n\r\nIf build tasks are loading and modifying MSBuild files during the build, doesn't that preclude us from using \"read-only\" mode in the general case? Hopefully I'm missing something here.\r\n\r\nEven if it does we can update \"read-only\" mode to avoid allocating strings and nodes for XML comments and whitespace. That would at least help us in the case of loading Microsoft targets.\r\n",
        "createdAt": "2017-10-03T20:12:28Z",
        "updatedAt": "2017-10-03T20:13:46Z",
        "author": {
          "login": "tmeschter"
        }
      },
      {
        "body": "That does sound scary - maybe we can just expand the Microsoft.* targets check to include typically read-only locations; packages + program files, etc.",
        "createdAt": "2017-10-03T21:31:30Z",
        "updatedAt": "2017-10-03T21:31:30Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "We should also factor in shared projects - I'm sure we open those targets as read/write.",
        "createdAt": "2017-10-03T21:32:12Z",
        "updatedAt": "2017-10-03T21:32:12Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "Perhaps this bug can be split in 2; \r\n\r\n- apply the existing logic to the XML reading not just DOM\r\n- extend the existing logic to apply to more situations",
        "createdAt": "2017-10-03T22:00:45Z",
        "updatedAt": "2017-10-03T22:00:45Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "Reactivating as #4213  will reintroduce this, because #3584 caused a behavior break (#4210).",
        "createdAt": "2019-03-08T15:31:34Z",
        "updatedAt": "2019-03-08T15:31:34Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}