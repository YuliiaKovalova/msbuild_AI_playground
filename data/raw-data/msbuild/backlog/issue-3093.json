{
  "number": 3093,
  "title": "Add APIs to clear static caches",
  "body": "MSBuild API users doing a large number of evaluations / builds might need to do other non-msbuild related expensive work after they're done with msbuild. However, since MSBuild has a bunch of static caches (e.g. OpportunisticIntern) there's no easy way to clear these. Some users clear them via reflection. We could add static methods to ProjectCollection and BuildManager to clear these.",
  "state": "CLOSED",
  "createdAt": "2018-03-14T23:15:49Z",
  "updatedAt": "2024-02-21T17:14:03Z",
  "closedAt": "2021-04-16T18:24:04Z",
  "author": {
    "login": "cdmihai"
  },
  "labels": [
    "Area: Performance",
    "needs-more-info",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "MSBuild 16.10"
  },
  "comments": {
    "nodes": [
      {
        "body": "Related issue for MSBuild project builds which could be addressed as well: https://github.com/dotnet/coreclr/issues/16362, https://github.com/Microsoft/msbuild/issues/2993.\r\n\r\nRecent CoreCLR PR is a workaround for MSBuild ConfigCache problems with huuuge impact on build performance: https://github.com/dotnet/coreclr/pull/17161\r\n\r\nBuild time improvement is ~326% what translates into **build time reduction from 165 minutes to 38 minutes** !!! ",
        "createdAt": "2018-03-24T15:35:37Z",
        "updatedAt": "2018-03-24T15:56:03Z",
        "author": {
          "login": "4creators"
        }
      },
      {
        "body": "@4creators that is not related. Clearing static caches would only help when running individual, disconnected builds, which is not the case for coreclr tests.",
        "createdAt": "2018-03-24T17:13:43Z",
        "updatedAt": "2018-03-24T17:13:43Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Of course, some caching also has observable behavioral effects, eg., IIRC the ProjectRootElement cache also deduplicates them, which is important if you're editing. It would need to be dealt with carefully.",
        "createdAt": "2018-08-19T16:53:39Z",
        "updatedAt": "2018-08-19T16:53:39Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "@cdmihai Is this still considered an issue after 2 years, or shall we close it?",
        "createdAt": "2021-04-16T10:48:33Z",
        "updatedAt": "2021-04-16T10:48:33Z",
        "author": {
          "login": "rokonec"
        }
      },
      {
        "body": "Close the issue for now, and we'll reopen it if / when we notice this issue again. This will also become less of an issue for QuickBuild because it is moving msbuild project evaluation out of proc.\r\n\r\n@ladipro QB has this code snipped that uses reflection to clear the opportunistic intern caches https://dev.azure.com/mseng/Domino/_git/CloudBuild?path=%2Fprivate%2FBuildEngine%2FEnlistment.Library%2Fsrc%2FTraversal.cs&version=GBmaster&line=616&lineEnd=652&lineStartColumn=1&lineEndColumn=1&lineStyle=plain&_a=contents\r\nIs this still an issue after your rewrite of the string cache? Can your version get cleared more easily, or should QB just update its reflection code?",
        "createdAt": "2021-04-16T18:08:44Z",
        "updatedAt": "2021-04-16T18:08:44Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "@cdmihai the new cache will empty itself automatically when the process starts doing other things and the strings are no longer rooted. It would probably still be faster to remove everything in one go using code like this:\r\n\r\n```C#\r\nWeakStringCacheInterner.Instance.Dispose();\r\nWeakStringCacheInterner.Instance = new WeakStringCacheInterner();\r\n```\r\n\r\nBut I'd suggest to measure first to make sure that it's worth it. The type is internal so it would have to be done through reflection.",
        "createdAt": "2021-04-19T07:13:02Z",
        "updatedAt": "2021-04-19T07:13:02Z",
        "author": {
          "login": "ladipro"
        }
      }
    ]
  }
}