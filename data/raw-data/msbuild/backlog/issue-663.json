{
  "number": 663,
  "title": "Support MSBuild tasks of varying versions across projects",
  "body": "I have an MSBuild task assembly that has multiple assembly versions (acquired via NuGet package). I\u2019ve found that if an MSBuild node picks up one version of the assembly, it will use that version for all project builds instead of picking up another version of the assembly for another project that points at a different DLL location. This causes build breaks for the customer such as [this one](https://github.com/AArnott/Nerdbank.GitVersioning/issues/63). It can appear either in a single build (because distinct projects use distinct versions of the task assembly) or across multiple builds (because of `/nodereuse:true` being the default).\n\nCan MSBuild be taught to load each unique assembly version of an assembly that projects may have a `UsingTask` for?\n",
  "state": "CLOSED",
  "createdAt": "2016-05-27T15:30:06Z",
  "updatedAt": "2024-02-21T17:27:59Z",
  "closedAt": "2017-06-23T15:16:40Z",
  "author": {
    "login": "AArnott"
  },
  "labels": [
    "help wanted",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Spent some time this week looking into this. I don't think there's going to be an easy general fix, but there are a couple of things a task author can do to work around the funky behavior.\r\n\r\nAfter getting a `UsingTask` to associate a task with a specific assembly on disk, the actual loading of the assembly happens [in TypeLoader](https://github.com/Microsoft/msbuild/blob/993e4c683ad2c1546e37dea0ed50dcd7c2523338/src/Shared/TypeLoader.cs#L185) using `Assembly.UnsafeLoadFrom`. [`LoadFrom`'s documentation](https://msdn.microsoft.com/en-us/library/1009fa28(v=vs.110).aspx) mentions\r\n\r\n> The LoadFrom method has the following disadvantages. Consider using Load instead.\r\n> * If an assembly with the same identity is already loaded, LoadFrom returns the loaded assembly even if a different path was specified.\r\n\r\nUnfortunately, it seems to be using a broad definition of \"identity\" that does not always differentiate on version. If you have assemblies with the same name but different versions, the .NET assembly loader will return whichever was loaded first--as long as the assembly identity does not have a public key.\r\n\r\n## Workaround 1\r\n\r\nThe key phrase in the last sentence was _does not have a public key_. If the assembly is signed, the loader compares versions and will happily load different versions side by side. So one could start signing their task assembly (note that this [has downsides](https://github.com/dotnet/corefx/blob/master/Documentation/project-docs/strong-name-signing.md)).\r\n\r\n## Workaround 2\r\n\r\nAlter the `UsingTask `that refers to your task assembly to [force the task to run out-of-process](https://docs.microsoft.com/en-us/visualstudio/msbuild/how-to-configure-targets-and-tasks#task-factories) by adding `TaskFactory=\"TaskHostFactory\"`.\r\n\r\nWhen a new task host process starts, it won't have the task assembly loaded, so it will load the one specified for the project that's currently building.\r\n\r\nThis doesn't require changing the task, but does require MSBuild logic changes and will slightly slow down the build (due to the overhead of starting the task host node and IPCing to it to run the task).",
        "createdAt": "2017-06-22T23:29:30Z",
        "updatedAt": "2017-06-22T23:29:30Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Whoa. I already knew the CLR would only load multiple versions of the same assembly if it were strong-name signed. But I strongly name sign all my assemblies so I am amazed to see indeed that NB.GV isn't strong-name signed. \r\nThanks for the workaround. I'm happy to use that. I'll test this and close the issue after confirming it works.",
        "createdAt": "2017-06-23T01:20:15Z",
        "updatedAt": "2017-06-23T01:20:15Z",
        "author": {
          "login": "AArnott"
        }
      },
      {
        "body": "Confirmed. Strong-name signing the task assembly resolved the issue. Thank you!",
        "createdAt": "2017-06-23T15:16:40Z",
        "updatedAt": "2017-06-23T15:16:40Z",
        "author": {
          "login": "AArnott"
        }
      },
      {
        "body": "@rainersigwald the strategies outlined here seem applicable to only desktop MSBuild. What is the appropriate strategy for .NET Core?",
        "createdAt": "2018-11-09T23:21:10Z",
        "updatedAt": "2018-11-09T23:21:10Z",
        "author": {
          "login": "jaredpar"
        }
      },
      {
        "body": "My understanding is that the current answer is \"there's no good strategy that the user can use at this time\". That's bad. I believe the path forward is #1754, which is currently marked for consideration in the .NET Core 3.0 timeframe.",
        "createdAt": "2018-11-12T17:39:32Z",
        "updatedAt": "2018-11-12T17:39:32Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}