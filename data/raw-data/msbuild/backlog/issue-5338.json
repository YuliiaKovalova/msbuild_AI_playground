{
  "number": 5338,
  "title": "ProjectReference should negotiate SetPlatform metadata similar to SetTargetFramework",
  "body": "ProjectReference items should \"Just Work\" in an msbuild-only world. Today they tend to work only in the simple case, or only when building a solution (which supplies a solution configuration). A solution configuration prescribes what `SetConfiguration` and `SetPlatform` for a reference to some given project. But in the absence of an .sln file (e.g. building a very large repo by traversal projects), this context doesn't exist. Without it, P2Ps either fail or (worse?) succeed by over-building referenced projects with many different Platform global properties when they may have only needed to build for one (e.g. \"Any CPU\") despite that the referencing project may have been architecture specific.\r\n\r\nAny P2P needs to negotiate what the `SetPlatform` metadata should be. Sort of how `SetTargetFramework` does. Consider these scenarios:\r\n\r\n1. Native x64 project A references managed AnyCPU Project B. It should pass SetPlatform=AnyCPU instead of allowing B to inherit A's x64 platform.\r\n1. Native x64 project A references managed x86/x64 Project B. It should pass SetPlatform=x64.\r\n1. Managed x86 project A references managed x86/x64 project B. It should pass SetPlatform=x86.\r\n1. Managed AnyCPU project A references managed x86/x64 project B. The build should fail. Or at least emit a warning.\r\n1. Scenario 3 above evolves such that B is now an AnyCPU project. With no changes to Project A, A should now start passing SetPlatform=AnyCPU to B.\r\n\r\nThis sort of \"ask P2P what it offers first then invoke it with something compatible between the two of them\" is analogous to how SetTargetFramework works. And IMO it's the only way to make a large repo scale while still allowing each project and each P2P look and feel like an ordinary customer-centric project.\r\n\r\nWhile a .sln records all allowed solution configurations and the project configurations within each one, I don't want to create a massive .sln file. Instead, I just want that negotiation for the Platform property. If we can write that feature and ship it in the customer shipping targets, that might get us closer to removing the need for solution configurations. (not to get side tracked with that out of scope possible north star).",
  "state": "CLOSED",
  "createdAt": "2020-05-07T16:31:23Z",
  "updatedAt": "2024-02-21T17:03:56Z",
  "closedAt": "2021-07-30T06:56:52Z",
  "author": {
    "login": "AArnott"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "benvillalobos"
      }
    ]
  },
  "milestone": {
    "title": "VS 17.0"
  },
  "comments": {
    "nodes": [
      {
        "body": "In our repo, we also have projects with different ideas of what `$(Configuration)` should be. Our older projects want to see `chk_no_opt` or `ret` for example, but our newer projects adopt the standard `Debug` or `Release` terms. So having something pluggable where we can offer a translation table for `SetConfiguration` would be great too.",
        "createdAt": "2020-05-07T16:38:51Z",
        "updatedAt": "2020-05-07T16:38:51Z",
        "author": {
          "login": "AArnott"
        }
      },
      {
        "body": "For shipping Native Project, it should already be *similar* to the above rules.  Anycpu ==> Win32 instead of x64.\r\n\r\nInputting Platform|Native Project Interpenetration|P2P SetPlatform\r\n--------|-----|-------\r\nwin32|win32|win32\r\nx86|win32|x86\r\nx64|x64|x64\r\nanycpu|win32|anycpu\r\nother|other|other\r\n  ",
        "createdAt": "2020-05-28T04:27:01Z",
        "updatedAt": "2021-05-11T19:47:35Z",
        "author": {
          "login": "yuehuang010"
        }
      },
      {
        "body": "@AArnott would this also cover #4752 so we can capture renamed platforms even outside of SLN context?",
        "createdAt": "2021-05-04T10:21:19Z",
        "updatedAt": "2021-05-04T10:21:19Z",
        "author": {
          "login": "kaylumah"
        }
      },
      {
        "body": "\"Asking\" for what is available can't work for P2P as that would create two instance of the project.  First for asking and Second for getting the outputs since the properties would be different.  In another words, Asking and output must be done within the same project instance.  \r\n\r\nThis could be achieved by 1) P2P returning all outputs with metadata and letting the caller choose the data.  However, this is poor for performance as all possible configurations must be built.  2) Caller pass details of itself to allow the callee decide on outputs.  This could be bad for determinism, but if the Caller details could be enumerable and infinite, then it is possible to maintain determinism.  \r\n\r\nOption 2) is best as long as determinism is maintained.  Option 1) isn't bad for packages with caching or offline caching.  ",
        "createdAt": "2021-05-04T22:57:29Z",
        "updatedAt": "2021-05-04T22:57:29Z",
        "author": {
          "login": "yuehuang010"
        }
      },
      {
        "body": ">would this also cover #4752 so we can capture renamed platforms even outside of SLN context?\r\n\r\n@kaylumah I don't think so. My concern here is entirely within MSBuild projects, whereas that issue seems to want msbuild projects to understand more about how the solution that may have invoked them was invoked. I disagree with that issue an projects should worry about themselves and not the outer solution that wraps them.\r\n\r\n",
        "createdAt": "2021-05-08T19:47:10Z",
        "updatedAt": "2021-05-08T19:47:10Z",
        "author": {
          "login": "AArnott"
        }
      },
      {
        "body": "> \"Asking\" for what is available can't work for P2P as that would create two instance of the project.\r\n\r\n@yuehuang010, Why is that so bad? That's already what multi-targeting .NET SDK style projects do. \r\n\r\nIt *does* mean an additional msbuild evaluation, but again, for multi-targeting managed projects we're already paying that. And as you were willing to consider the referenced project building *everything*, that would involve many msbuild evaluations potentially and of course the actual build would be *incredibly* more expensive than one mere additional msbuild eval.",
        "createdAt": "2021-05-08T19:50:25Z",
        "updatedAt": "2021-05-08T19:50:25Z",
        "author": {
          "login": "AArnott"
        }
      },
      {
        "body": "Perf and Memory.  Evaluation takes about 200ms of wall time and extra copy of permanent memory per instance per project.  Wall time because its single threaded and blocking.  Memory will be permerment as instances are kept forever.  In another words, MSBuild would take double the memory usage.\r\n\r\nAnother issue is Determinism for Distributed builds.  While both model is solvable, \"Asking\" model implies a dependency on the output.  This makes any Determinism system have to predict the entire build graph because it could determine just one project.  ",
        "createdAt": "2021-05-11T19:43:37Z",
        "updatedAt": "2021-05-11T19:43:37Z",
        "author": {
          "login": "yuehuang010"
        }
      },
      {
        "body": "> \"Asking\" for what is available can't work for P2P as that would create two instance of the project.\r\n\r\nThere's always the option of piggybacking off of the `GetTargetFrameworks` msbuild call and having that return extra data to prevent an extra eval.",
        "createdAt": "2021-05-11T23:39:50Z",
        "updatedAt": "2021-05-11T23:39:50Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "> Perf and Memory\r\n\r\nThose are fair numbers, but back to my point: you were proposing that we avoid this regression by building the world instead as one option. That hardly even compares. How can you advise that we build the world in order to save 200ms and a few bytes of memory?",
        "createdAt": "2021-05-12T14:43:24Z",
        "updatedAt": "2021-05-12T14:43:24Z",
        "author": {
          "login": "AArnott"
        }
      },
      {
        "body": "@yuehuang010 This managed->unmanaged mapping looks correct but I'd like to double check. I took it from https://docs.microsoft.com/visualstudio/msbuild/assignprojectconfiguration-task. Does this look right to you?\r\n\r\n```xml\r\n  <PropertyGroup>\r\n    <DefaultToVcxPlatformMapping>AnyCPU=Win32;x86=Win32;x64=x64</DefaultToVcxPlatformMapping>\r\n  </PropertyGroup>\r\n```\r\n\r\nIf there's no immediate mapping, a warning is logged and it will attempt to build B without an explicit platform.\r\n\r\nSmall note: This is being designed be entirely opt in at first.",
        "createdAt": "2021-06-02T17:35:59Z",
        "updatedAt": "2021-06-02T17:42:37Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "The map won't work because the map is not reversible.  The original platform is lost once the platform switch to Win32.    This will be an issue when deciding what happens during unmanaged->managed as \"Win32\" could be mapped to either AnyCPU or x86.",
        "createdAt": "2021-06-02T19:54:59Z",
        "updatedAt": "2021-06-02T19:56:26Z",
        "author": {
          "login": "yuehuang010"
        }
      },
      {
        "body": "There's also a `VcxToDefaultPlatformMapping` defined in the link. We can account for that and allow it to be expanded on (users can append `x86=foo`). In this case, throwing a warning and trying a standard build makes sense.\r\n\r\nI see what you mean in terms of data loss. Project B is simply told \"Build using this global platform\", if we also append \"the parent's actual platform\" to global properties then we have even more evals.\r\n\r\n> as \"Win32\" could be mapped to either AnyCPU or x86.\r\n\r\nI think this is already configurable if you set `SetPlatform` metadata on a projectreference item it should carry through.",
        "createdAt": "2021-06-02T20:28:20Z",
        "updatedAt": "2021-06-02T20:28:20Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "I have already implemented this mapping for VCXProj above above.  Perhaps with VS2022, AnyCPU could toggle between x86 and x64.",
        "createdAt": "2021-06-02T20:50:14Z",
        "updatedAt": "2021-06-02T20:50:14Z",
        "author": {
          "login": "yuehuang010"
        }
      },
      {
        "body": "> The original platform is lost once the platform switch to Win32.\r\n\r\nI don't think the parent's platform should matter or have any influence on the \"grandchild\". A vcxproj should build a given platform for itself the same regardless of which project P2P's into it, and that includes its own P2Ps. If a Win32-platform vcxproj project has a reference to a csproj, it should build that csproj a particular way, period. If a win32 platform built with its P2Ps a particular way, then built again with its P2Ps another way, all because the win32 platform project was invoked by two distinct referencing projects with different platforms of their own, then we have an overbuild problem.\r\n\r\nAs for the mapping, I have serious reservations about mapping AnyCPU to Win32. If a csproj is AnyCPU, any reference it has to a native project should fail without an explicit SetPlatform set to override. When an AnyCPU csproj today references an x86 csproj today, we get a compiler warning because what you thought would be arch-agnostic is in fact going to fail on non-x86 architectures. IMO we should do no less for a reference from csproj to vcxproj. \r\nA csproj that is willing to commit to a particular CPU arch by way of a P2P should express it explicitly by setting its own platform to x86, IMO.",
        "createdAt": "2021-06-03T13:14:57Z",
        "updatedAt": "2021-06-03T13:14:57Z",
        "author": {
          "login": "AArnott"
        }
      }
    ]
  }
}