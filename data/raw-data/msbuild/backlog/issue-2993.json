{
  "number": 2993,
  "title": "MSBuild ConfigCache grows using all machine memory and causes DoS during dotnet/coreclr priority 1 tests build.",
  "body": "Initial issue was reported in https://github.com/dotnet/coreclr/issues/16362 and repro on Linux and Windows.\r\n\r\nMSBuild builds literally thousands of projects and during this process memory consumption systematically grows up to a point when all memory is exhausted where build process and OS hangs. The main culprit seems to be `BackEnd.ConfigCache` which does not have a size limit and does not age causing it to drop unused cached evaluation results.\r\n\r\n### Steps to reproduce\r\n\r\nOn Windows\r\n1. Clone https://github.com/dotnet/coreclr\r\n2. Build: `build x64 Checked -skiptests` (or any other platform configuration combination)\r\n3. Build priority 1 tests: `build-test x64 Checked -priority=1`\r\n\r\n### Expected  behavior\r\n\r\nBuild succeeds\r\n\r\n### Actual behavior\r\n\r\nBuild freezes and hangs build machine after exhausting all available memory. Tested on i7 4C/8T with 16 GB RAM\r\n\r\n### Environment data\r\n`msbuild /version` output:\r\n\r\n`15.5.180.51428`\r\n\r\nOS info:\r\n\r\n`Windows 10 1709 x64 Pro fully patched`\r\n\r\nIf applicable, version of the tool that invokes MSBuild (Visual Studio, dotnet CLI, etc):\r\n\r\n```\r\ndotnet --info\r\n.NET Command Line Tools (2.1.100-preview-007354)\r\n\r\nProduct Information:\r\n Version:            2.1.100-preview-007354\r\n Commit SHA-1 hash:  fb75d6a28d\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.100-preview-007354\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.5\r\n  Build    : 17373eb129b3b05aa18ece963f8795d65ef8ea54\r\n```\r\n\r\n\r\n",
  "state": "CLOSED",
  "createdAt": "2018-02-14T11:32:59Z",
  "updatedAt": "2024-02-21T17:14:29Z",
  "closedAt": "2021-04-16T10:40:06Z",
  "author": {
    "login": "4creators"
  },
  "labels": [
    "Area: Performance",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "MSBuild 16.10"
  },
  "comments": {
    "nodes": [
      {
        "body": "cc @rainersigwald ",
        "createdAt": "2018-02-14T20:28:14Z",
        "updatedAt": "2018-02-14T20:28:14Z",
        "author": {
          "login": "4creators"
        }
      },
      {
        "body": "Unfortunately, `ConfigCache` is not a cache in the sense that it's purgeable. All of its entries must continue to exist until the end of the build, or the build would not be correct.\r\n\r\nWe have code to manually page cache entries to disk if memory usage of a single MSBuild process exceeds ~3GB:\r\n\r\nhttps://github.com/Microsoft/msbuild/blob/b19a0906d1d20652f4ddb5fa9ce054b8692642f3/src/Build/BackEnd/Components/BuildRequestEngine/BuildRequestEngine.cs#L865-L879\r\n\r\nI attempted a repro based on your instructions and don't see the main MSBuild node getting particularly close to limit, though. How long does the repro take to fail for you?\r\n\r\nThis could be a situation where a more holistic \"how's the machine's memory usage?\" check would be better than our current one, but trying to outsmart paging is a dangerous game.\r\n\r\nThere are a couple of knobs that can be adjusted to change MSBuild's behavior in this regard:\r\n\r\n* `MSBUILDDEBUGFORCECACHING=1` causes MSBuild to always attempt to swap to disk. That would probably keep the memory usage much lower for you, but there's a serious CPU and I/O cost to doing this.\r\n* `MSBUILDENABLEAGGRESSIVECACHING=1` causes MSBuild to cache more when it decides to cache, which could reduce the I/O cost if caching intermittently but increase it if caching often (as when the prior flag is set).",
        "createdAt": "2018-02-15T00:13:36Z",
        "updatedAt": "2018-02-15T00:13:36Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> How long does the repro take to fail for you?\r\n\r\nWe are running on machines with 16GB of memory.  On Ubuntu16.o4, after several hours (between 3 and 16), the memory + swap exceeded 32GB.\r\n\r\nHow does `ulong memoryUseLimit = Convert.ToUInt64(memoryStatus.TotalVirtual * 0.8);` correlate to 3GB?\r\n\r\nWe are building ~12K csproj.  The config cache is storing >1MB per project?  Does this seem believable?  Or is there a leak.",
        "createdAt": "2018-02-15T14:10:52Z",
        "updatedAt": "2018-02-15T14:10:52Z",
        "author": {
          "login": "sdmaclea"
        }
      },
      {
        "body": "> I attempted a repro based on your instructions and don't see the main MSBuild node getting particularly close to limit\r\n\r\nBy setting swap file to 800 MB on 16GB RAM machine main node of MSBuild hits 3 GB after roughly 50 min. At 1:05 h build totally stalls with the following process structure:\r\n\r\n![capture3](https://user-images.githubusercontent.com/801959/36265856-692d6682-1270-11e8-915e-110548644833.PNG)\r\n\r\n\r\n",
        "createdAt": "2018-02-15T15:51:43Z",
        "updatedAt": "2018-02-15T15:51:43Z",
        "author": {
          "login": "4creators"
        }
      },
      {
        "body": "Using an unordered hash based dictionary for a structure of that size will have poor performance as it will nearly always page fault.\r\n\r\nIt might be better to disable the cache and force it to disk if it exceeds 10% of physical memory.",
        "createdAt": "2018-02-15T16:12:08Z",
        "updatedAt": "2018-02-15T16:12:08Z",
        "author": {
          "login": "sdmaclea"
        }
      },
      {
        "body": "On Linux, the MSBuild swap mechanism is not enabled. It wouldn't help anyway on a 64-bit process since it only triggers at `0.8 * {total addressable process memory}` which is huge in the 64-bit address space.\r\n\r\n> How does `ulong memoryUseLimit = Convert.ToUInt64(memoryStatus.TotalVirtual * 0.8);` correlate to 3GB?\r\n\r\nFor a 32-bit process on Windows, `TotalVirtual` is 4GB, so it's actually a bit higher than 3 GB but not too far off.\r\n\r\n> The config cache is storing >1MB per project? Does this seem believable? Or is there a leak.\r\n\r\nThat's not large enough to scream \"there's a problem\" to me. The stored state is every property and item computed in the project, which tends to be surprisingly large.\r\n\r\n> Using an unordered hash based dictionary for a structure of that size will have poor performance as it will nearly always page fault.\r\n\r\nOh man, I wish problems like that were anywhere near the top of our performance concerns.\r\n\r\n> It might be better to disable the cache and force it to disk if it exceeds 10% of physical memory.\r\n\r\nThat's an interesting possible additional trigger. It'd have to be \"additional\" to prevent OOMs on 32-bit MSBuild running on high-memory machines.",
        "createdAt": "2018-02-15T16:20:04Z",
        "updatedAt": "2018-02-15T16:20:04Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> That's not large enough to scream \"there's a problem\" to me. The stored state is every property and item computed in the project, which tends to be surprisingly large.\r\n\r\nActually this seems to be a reason for all problems. We build batches of hundreds of independent projects which may differ by couple of properties each - for instance in case of hardware intrinsics the differences are: code file path, output directory. \r\n\r\nThere is no reason to store whole evaluation result for each project but rather the evaluation diff between the base case (or rolling base case) and current project. Git implementation is a good example how to handle repetitive, rolling change.\r\n\r\nFurthermore, projects are entirely independent yet almost identical. One would expect huge speedup from caching common configuration but it seems that we do not get this.",
        "createdAt": "2018-02-15T16:54:00Z",
        "updatedAt": "2018-02-15T16:54:00Z",
        "author": {
          "login": "4creators"
        }
      },
      {
        "body": "Directory path compression might also be a win.  There are probably a lot of fully expanded paths in the properties.  Simple directory path hash ought to suffice.  Might compress 40 to 1.",
        "createdAt": "2018-02-15T17:04:02Z",
        "updatedAt": "2018-02-15T17:04:02Z",
        "author": {
          "login": "sdmaclea"
        }
      },
      {
        "body": "@rainersigwald we could really benefit from some constructive advice here -- because of the memory consumption issues, many CoreCLR developers avoid building tests. We have whittled our \"pri-0\" set way back (too far if you ask me) to try and keep normal dev inner loop somewhat tolerable. And things are considerably worse when not running on Windows.\r\n\r\nGiven how we use tests, we can't really bundle them up in to a relatively small number of assemblies with many tests per assembly like they do over in CoreFx. So what is the best way to build thousands of small projects without running into these issues?",
        "createdAt": "2018-02-22T03:43:01Z",
        "updatedAt": "2018-02-22T03:43:01Z",
        "author": {
          "login": "AndyAyersMS"
        }
      },
      {
        "body": "@rainersigwald Is there any advice you can offer?  dotnet/coreclr's build process is incredibly inefficient, and it's wasting not only developer time, but automation resources as well.  An msbuild fix would be nice, but it's not going to help short term, so we're pretty much resigned to the fact that we need to change something on our side for now.  We'd just like to understand what our options are, if any.",
        "createdAt": "2018-03-02T00:00:57Z",
        "updatedAt": "2018-03-02T00:00:57Z",
        "author": {
          "login": "RussKeldorph"
        }
      },
      {
        "body": "@RussKeldorph We may be best served by running a separate instance of msbuild on each csproj.  It would definitely fix the cache issue.  However we would be faced with start up costs.\r\n\r\nThe `gc_reliability_framework` runs several apps in a single host.  Perhaps we could use it as a framework for running a separate `msbuild` instance for each `csproj`.  It might reduce the startup costs because msbuild would already be loaded.",
        "createdAt": "2018-03-02T04:36:21Z",
        "updatedAt": "2018-03-02T04:36:21Z",
        "author": {
          "login": "sdmaclea"
        }
      },
      {
        "body": "@sdmaclea Yeah, I was thinking is worst case we would manually divide the projects up into groups and run each group under a single instance to get the benefits of startup sharing without letting an instance go overboard with its allocations.  I was just wondering if there were better options than that.",
        "createdAt": "2018-03-02T16:15:58Z",
        "updatedAt": "2018-03-02T16:15:58Z",
        "author": {
          "login": "RussKeldorph"
        }
      },
      {
        "body": "Do the projects have ProjectReferences or are they generally standalone? If they're generally standalone (it looks like they are, though most depend on `CoreCLRTestLibrary`), it should be effective to batch them arbitrarily and build say a couple hundred per MSBuild.exe invocation.\r\n\r\nOr maybe break into 16 batches and split by first hex character of hash of relative file name? That'd be doable with all MSBuild built-ins.\r\n\r\nYou could write a program to use the MSBuild API to build the batches and avoid startup overhead, but I doubt that's a major player in your scenario unless you start invoking every project individually.",
        "createdAt": "2018-03-02T16:48:30Z",
        "updatedAt": "2018-03-02T16:48:30Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> it should be effective to batch them arbitrarily and build say a couple hundred per MSBuild.exe invocation\r\n\r\nThis PR [Improve Windows test build performance by building projects in groups - 4x less memory 326% faster build](https://github.com/dotnet/coreclr/pull/17161) achieves just that using discussed ConfigCache workaround.\r\n\r\nHowever, IMO there should be a better way to manage MSBuild ConfigCache during builds with APIs which could be exposed both at MSBuild commandline and into project files. They should allow for exploiting new MSBuild features:\r\n\r\n- ConfigCache aging mechanism\r\n- forced ConfigCache cleanup\r\n- arbitrary capping of ConfigCache size\r\n\r\nThese APIs should work across all nodes used during build - if triggered on any build node they should trigger the same action across all nodes.\r\n\r\n",
        "createdAt": "2018-03-24T15:50:29Z",
        "updatedAt": "2018-03-24T15:51:18Z",
        "author": {
          "login": "4creators"
        }
      },
      {
        "body": "@4creators I think you're overindexing on a bad name. `ConfigCache` _is not a cache_. Every entry within it **must** be present for the entire lifetime of the build, or the build could be incorrect.",
        "createdAt": "2018-03-24T17:26:08Z",
        "updatedAt": "2018-03-24T17:26:08Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Closing: Workaround seems to have helped.  Please reopen if it remains relevant.",
        "createdAt": "2021-04-16T10:40:06Z",
        "updatedAt": "2021-04-16T10:40:06Z",
        "author": {
          "login": "rokonec"
        }
      }
    ]
  }
}