{
  "number": 1097,
  "title": "Cannot use MSBuild API from a dotnet-CLI project tool",
  "body": "Using MSBuild API for in-proj project evaluation in a dotnet-CLI project tool throws this excpetion:\n\n```\nUnhandled Exception: System.TypeInitializationException: The type initializer for 'BuildEnvironmentHelperSingleton' threw an exception. ---> System.InvalidOperationException: Could not determine a valid location to MSBuild. Try running this process from the Developer Command Prompt for Visual Studio.\n   at Microsoft.Build.Shared.ErrorUtilities.ThrowInvalidOperation(String resourceName, Object[] args)\n   at Microsoft.Build.Shared.BuildEnvironmentHelper.Initialize()\n   at Microsoft.Build.Shared.BuildEnvironmentHelper.BuildEnvironmentHelperSingleton..cctor()\n```\n\nIIUC the problem is that BuildEnvironmentHelperSingleton looks in `AppContext.BaseDirectory` (and a few other locations) for MSBuild.exe. When dotnet-CLI invokes a project tool, the AppContext.BaseDirectory will be `$(NuGetPackages)/.tools/$(ToolName)/$(ToolVersion)/netcoreapp1.0/`. The only content NuGet/CLI will put into this directory is the *.deps.json file and project.lock.json file for the tool.\n\nUsing Microsoft.Build.Runtime 15.1.262-preview5.\n\ncc @piotrpMSFT\n",
  "state": "CLOSED",
  "createdAt": "2016-09-27T17:12:34Z",
  "updatedAt": "2024-02-21T17:25:38Z",
  "closedAt": "2018-09-28T12:55:21Z",
  "author": {
    "login": "natemcmaster"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "jeffkl"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "I'll need to know more about the layout of these project tools.  Who is the best person to give me a primer in order to come up with a fix?\n\ncc @eerhardt\n",
        "createdAt": "2016-09-27T17:44:20Z",
        "updatedAt": "2016-09-27T17:44:20Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "I'll ping you offline.\n",
        "createdAt": "2016-09-27T18:22:33Z",
        "updatedAt": "2016-09-27T18:22:33Z",
        "author": {
          "login": "NTaylorMullen"
        }
      },
      {
        "body": "I see two options:\n1. Use the CLI's MSBuild toolset (this isn't currently easy to find, on purpose)\n2. Distribute an MSBuild toolset with the tool.\n\nThe latter is how standalone applications would work. What's creating this `$(NuGetPackages)/.tools` layout, and why doesn't it match what would happen with a published application?\n",
        "createdAt": "2016-10-05T23:08:51Z",
        "updatedAt": "2016-10-05T23:08:51Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> What's creating this $(NuGetPackages)/.tools layout, and why doesn't it match what would happen with a published application?\n\nNuGet creates the .tools folder during restore. CLI reads the csproj/.tools folder to launch the tool.  AFAIK there aren't any plans to change this. cref https://github.com/NuGet/Home/issues/3462. cc @emgarten @eerhardt\n\nRegardless of how a CLI tools finds or distributes MSBuild, we need some sort of API so that BuildEnvironmentHelper.Initialize knows where to find MSBuild.exe.\n",
        "createdAt": "2016-10-06T00:00:45Z",
        "updatedAt": "2016-10-06T00:00:45Z",
        "author": {
          "login": "natemcmaster"
        }
      },
      {
        "body": "@piotrpMSFT - do you have any opinions on option 1 above?\n\n@jeffkl - we've discussed before enabling MSBuild to \"run out of a NuGet cache\", in order for every tool to not need its own private copy of MSBuild.  Has any progress been made in this area?\n",
        "createdAt": "2016-10-07T15:08:43Z",
        "updatedAt": "2016-10-07T15:08:43Z",
        "author": {
          "login": "eerhardt"
        }
      },
      {
        "body": "@eerhardt The blockers for making MSBuild run out of the NuGet cache remain: either smarter loading behavior (load our assemblies out of a folder whose layout we totally control) or a full-featured \"find files from the nuget cache\" feature baked into the framework. Neither seems forthcoming.\n",
        "createdAt": "2016-10-07T15:11:23Z",
        "updatedAt": "2016-10-07T15:11:23Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "There are possible changes coming soon to NuGet/CLI which may solve this issue independently of changes to MSBuild. \n\ncc @yishaigalatzer @rrelyea  - the discussion we had about location of a CLI tool's .deps.json file.\n",
        "createdAt": "2016-10-10T20:21:13Z",
        "updatedAt": "2016-10-10T20:21:13Z",
        "author": {
          "login": "natemcmaster"
        }
      },
      {
        "body": "In our meeting this morning, we discussed this and the answer was:\n\nThe CLI will set an environment variable when invoking a tool that will point to the location of it's MSBuild install.  The CLI Tool can read this environment variable to find out the path to MSBuild's installation.\n",
        "createdAt": "2016-10-10T20:38:31Z",
        "updatedAt": "2016-10-10T20:38:31Z",
        "author": {
          "login": "eerhardt"
        }
      },
      {
        "body": "\ud83d\udd14 Any update on this? Running into the same issue.\n",
        "createdAt": "2016-11-17T02:39:08Z",
        "updatedAt": "2016-11-17T02:39:08Z",
        "author": {
          "login": "mishra14"
        }
      },
      {
        "body": "In preview3, the SDK will set the env variable MSBUILD_EXE_PATH to the location of MSBuild.dll.\n\nFWIW, in most cases, CLI tools are better off invoking \"dotnet-msbuild\" with a custom target instead of invoking MSBuild APIs directly.\n",
        "createdAt": "2016-11-17T03:05:39Z",
        "updatedAt": "2016-11-17T03:05:39Z",
        "author": {
          "login": "natemcmaster"
        }
      },
      {
        "body": "Got it to work, thanks to @rainersigwald :)\n\nIn powershell - \n1. $ENV:MSBUILD_EXE_PATH=\"C:\\Program Files\\dotnet\\sdk\\1.0.0-preview4-004079\\MSBuild.dll\"\n2. $ENV:MSBUILDEXTENSIONSPATH=\"C:\\Program Files\\dotnet\\sdk\\1.0.0-preview4-004079\"\n\nHere C:\\Program Files\\dotnet\\sdk\\1.0.0-preview4-004079 is the install path for dotnet sdk on my machine\n",
        "createdAt": "2016-11-18T01:57:22Z",
        "updatedAt": "2016-11-18T01:57:22Z",
        "author": {
          "login": "mishra14"
        }
      },
      {
        "body": "@mishra14 this is very fragile. The code makes assumptions on where CLI installs MSBuild.dll which are quite certain to be broken in upcoming releases. As @natemcmaster says, the CLI already has an environment variable which it passes to processes it creates to identify the msbuild exe path. Even this should only be used in critical scenarios where invoking `dotnet msbuild` simply won't work. \n\nI know the self-created environment variable you suggest is straightforward and works at the moment, but do expect it to fail from release to release.\n",
        "createdAt": "2016-11-18T02:21:09Z",
        "updatedAt": "2016-11-18T02:21:09Z",
        "author": {
          "login": "TheRealPiotrP"
        }
      },
      {
        "body": "@piotrpMSFT : @rainersigwald mentioned that the workaround `$ENV:MSBUILDEXTENSIONSPATH=\"C:\\Program Files\\dotnet\\sdk\\1.0.0-preview4-004079\"` is needed due to a bug in current msbuild release but should be fixed in the next release (rc2?). \n\n`$ENV:MSBUILD_EXE_PATH=\"C:\\Program Files\\dotnet\\sdk\\1.0.0-preview4-004079\\MSBuild.dll\"` on the otherhand should be set by dotnet sdk. But did not on my machine. Maybe, I am missing something?\n",
        "createdAt": "2016-11-18T02:25:16Z",
        "updatedAt": "2016-11-18T02:25:16Z",
        "author": {
          "login": "mishra14"
        }
      },
      {
        "body": "It's a subtlety. Dotnet SDK does not set any persistent environment variables. It only passes some environment variables to processes that it itself creates. Tools that need access to this value from the CLI need to be invoked by the CLI, giving the product the opportunity to redefine its own internal layout/implementation without breaking existing extensions :)\n",
        "createdAt": "2016-11-18T02:35:46Z",
        "updatedAt": "2016-11-18T02:35:46Z",
        "author": {
          "login": "TheRealPiotrP"
        }
      },
      {
        "body": "@piotrpMSFT It's worse than that. When you're _developing_ the tool, you can't rely on the CLI setting that variable, because it's not set in `dotnet run` invocations, just tool invocations. Once the tool is packaged, referred to as a tool, and run through the CLI, it should get the CLI's preferred `MSBUILD_EXE_PATH`. But is there an easy way to edit-compile-debug in that environment?\n\n(the need for `MSBUILDEXTENSIONSPATH` is fixed by #1336)\n",
        "createdAt": "2016-11-18T16:55:32Z",
        "updatedAt": "2016-11-18T16:55:32Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@mishra14 using `dotnet run` should work if your app is a `netcoreapp1.0`.  Are you getting error when running your app via `dotnet run` or when you run it as a tool?\n\nAre you getting the error that MSBuild cannot find itself?\n\n```\nSystem.InvalidOperationException: Could not determine a valid location to MSBuild. Try running this process from the Developer Command Prompt for Visual Studio.\n```\n\nOr are you getting a different error?\n\nThe `dotnet run` scenario should work because we look in the `AppContext.BaseDirectory` and should be able to locate assembly dependencies via NuGet.  However, as a tool, the `AppContext.BaseDirectory` is where the tool marker was written to and is not correct.  But I believe the dotnet CLI will set `MSBUILD_EXE_PATH` when the tool is run which means it should work too.  I need more info on what error you're getting...\n",
        "createdAt": "2016-11-18T19:25:05Z",
        "updatedAt": "2016-11-18T19:25:05Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "@jeffkl : I have dotnet core sdk preview4 installed.\n\n```\nPS C:\\Users\\anmishr\\Documents\\visual studio 2017\\Projects\\ConsoleApp1\\ConsoleApp1> dotnet --info\n.NET Command Line Tools (1.0.0-preview4-004079)\n\nProduct Information:\n Version:            1.0.0-preview4-004079\n Commit SHA-1 hash:  43dfa6b8ba\n\nRuntime Environment:\n OS Name:     Windows\n OS Version:  10.0.14393\n OS Platform: Windows\n RID:         win10-x64\n```\n\nAre you getting the error that MSBuild cannot find itself? Yes\n",
        "createdAt": "2016-11-18T19:36:12Z",
        "updatedAt": "2016-11-18T19:36:12Z",
        "author": {
          "login": "mishra14"
        }
      },
      {
        "body": "@livarcocc can comment on where we expose the env var. If adding it to `run` prevents folks from assuming things about the CLI install layout, maybe we need to do that...\n",
        "createdAt": "2016-11-18T19:43:48Z",
        "updatedAt": "2016-11-18T19:43:48Z",
        "author": {
          "login": "TheRealPiotrP"
        }
      },
      {
        "body": "@mishra14 are you getting the error when you do `dotnet run`?  Can you check to see if files like MSBuild.dll, Microsoft.Common.targets are in your output folder.\n",
        "createdAt": "2016-11-18T19:44:59Z",
        "updatedAt": "2016-11-18T19:44:59Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "We only expose it in the ProjectToolsCommandResolver and ProjectDependenciesCommandResolver right now. I think exposing it during run may make sense for people developing tools.\n",
        "createdAt": "2016-11-18T19:48:19Z",
        "updatedAt": "2016-11-18T19:48:19Z",
        "author": {
          "login": "livarcocc"
        }
      },
      {
        "body": "@jeffkl : \n\n_are you getting the error when you do dotnet run?_: Yes on dotnet run and also from within dev15.\n\n_Can you check to see if files like MSBuild.dll, Microsoft.Common.targets are in your output folder:_ No. I thinks that why I needed to set the env vars. So that dotnet could pick up the correcxt place where msbuild exists.\n",
        "createdAt": "2016-11-18T19:48:52Z",
        "updatedAt": "2016-11-18T19:48:52Z",
        "author": {
          "login": "mishra14"
        }
      },
      {
        "body": "@mishra14 What packages are you referencing?  The `Microsoft.Build.Runtime` package should place stuff in your output folder so that `dotnet run` works.  If those files aren't there, this might be a bug in NuGet.\n",
        "createdAt": "2016-11-18T19:51:42Z",
        "updatedAt": "2016-11-18T19:51:42Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "@jeffkl : I do have runtime. \n\n```\n<Project ToolsVersion=\"15.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n  <Import Project=\"$(MSBuildExtensionsPath)\\$(MSBuildToolsVersion)\\Microsoft.Common.props\" />\n  <PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>netcoreapp1.0</TargetFramework>\n  </PropertyGroup>\n  <ItemGroup>\n    <Compile Include=\"**\\*.cs\" />\n    <EmbeddedResource Include=\"**\\*.resx\" />\n  </ItemGroup>\n  <ItemGroup>\n    <PackageReference Include=\"Microsoft.Build.Runtime\">\n      <Version>15.1.0-preview-000370-00</Version>\n    </PackageReference>\n    <PackageReference Include=\"Microsoft.NETCore.App\">\n      <Version>1.0.1</Version>\n    </PackageReference>\n    <PackageReference Include=\"Microsoft.NET.Sdk\">\n      <Version>1.0.0-alpha-20161104-2</Version>\n      <PrivateAssets>All</PrivateAssets>\n    </PackageReference>\n  </ItemGroup>\n  <Import Project=\"$(MSBuildToolsPath)\\Microsoft.CSharp.targets\" />\n</Project>\n```\n",
        "createdAt": "2016-11-18T20:08:31Z",
        "updatedAt": "2016-11-18T20:08:31Z",
        "author": {
          "login": "mishra14"
        }
      },
      {
        "body": "@emgarten is this a bug in NuGet?  The project.assets.json has the correct stuff:\n\n``` json\n\"Microsoft.Build.Runtime/15.1.0-preview-000370-00\": {\n  \"type\": \"package\",\n  \"dependencies\": {\n    \"Microsoft.Build\": \"[15.1.0-preview-000370-00]\",\n    \"Microsoft.Build.Framework\": \"[15.1.0-preview-000370-00]\",\n    \"Microsoft.Build.Tasks.Core\": \"[15.1.0-preview-000370-00]\",\n    \"Microsoft.Build.Utilities.Core\": \"[15.1.0-preview-000370-00]\"\n  },\n  \"contentFiles\": {\n    \"contentFiles/any/netcoreapp1.0/15.0/Microsoft.Common.props\": {\n      \"buildAction\": \"None\",\n      \"codeLanguage\": \"any\",\n      \"copyToOutput\": true,\n      \"outputPath\": \"15.0/Microsoft.Common.props\"\n    },\n    \"contentFiles/any/netcoreapp1.0/MSBuild.dll\": {\n      \"buildAction\": \"None\",\n      \"codeLanguage\": \"any\",\n      \"copyToOutput\": true,\n      \"outputPath\": \"MSBuild.dll\"\n    },\n    \"contentFiles/any/netcoreapp1.0/MSBuild.runtimeconfig.json\": {\n      \"buildAction\": \"None\",\n      \"codeLanguage\": \"any\",\n      \"copyToOutput\": true,\n      \"outputPath\": \"MSBuild.runtimeconfig.json\"\n    },\n    \"contentFiles/any/netcoreapp1.0/Microsoft.CSharp.CrossTargeting.targets\": {\n      \"buildAction\": \"None\",\n      \"codeLanguage\": \"any\",\n      \"copyToOutput\": true,\n      \"outputPath\": \"Microsoft.CSharp.CrossTargeting.targets\"\n    },\n    // (etc)\n  }\n},\n```\n\nBut the files are not in the output folder after doing `dotnet build`.  Or is this logic part of the SDK?\n\n```\nC:\\Users\\jeffkl\\Downloads\\msbuildruntimerepro>dotnet new\n```\n\n``` diff,xml\n<Project ToolsVersion=\"15.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n  <Import Project=\"$(MSBuildExtensionsPath)\\$(MSBuildToolsVersion)\\Microsoft.Common.props\" />\n\n  <PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>netcoreapp1.0</TargetFramework>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <Compile Include=\"**\\*.cs\" />\n    <EmbeddedResource Include=\"**\\*.resx\" />\n  </ItemGroup>\n\n  <ItemGroup>\n    <PackageReference Include=\"Microsoft.NETCore.App\">\n      <Version>1.0.1</Version>\n    </PackageReference>\n    <PackageReference Include=\"Microsoft.NET.Sdk\">\n      <Version>1.0.0-alpha-20161104-2</Version>\n      <PrivateAssets>All</PrivateAssets>\n    </PackageReference>\n+   <PackageReference Include=\"Microsoft.Build.Runtime\">\n+     <Version>15.1.0-preview-000370-00</Version>\n+   </PackageReference>\n  </ItemGroup>\n\n  <Import Project=\"$(MSBuildToolsPath)\\Microsoft.CSharp.targets\" />\n</Project>\n\n```\n\n```\nC:\\Users\\jeffkl\\Downloads\\msbuildruntimerepro>dotnet restore\n  Restoring packages for C:\\Users\\jeffkl\\Downloads\\msbuildruntimerepro\\msbuildruntimerepro.csproj...\n  Writing lock file to disk. Path: C:\\Users\\jeffkl\\Downloads\\msbuildruntimerepro\\obj\\project.assets.json\n  Generating MSBuild file C:\\Users\\jeffkl\\Downloads\\msbuildruntimerepro\\obj\\msbuildruntimerepro.csproj.nuget.g.targets.\n  Generating MSBuild file C:\\Users\\jeffkl\\Downloads\\msbuildruntimerepro\\obj\\msbuildruntimerepro.csproj.nuget.g.props.\n  Restore completed in 1124.0981ms for C:\\Users\\jeffkl\\Downloads\\msbuildruntimerepro\\msbuildruntimerepro.csproj.\n\n  NuGet Config files used:\n      C:\\Users\\jeffkl\\AppData\\Roaming\\NuGet\\NuGet.Config\n\n  Feeds used:\n      https://api.nuget.org/v3/index.json\n\nC:\\Users\\jeffkl\\Downloads\\msbuildruntimerepro>dotnet build /v:m\nMicrosoft (R) Build Engine version 15.1.0.0\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n  msbuildruntimerepro -> C:\\Users\\jeffkl\\Downloads\\msbuildruntimerepro\\bin\\Debug\\netcoreapp1.0\\msbuildruntimerepro.dll\n\nC:\\Users\\jeffkl\\Downloads\\msbuildruntimerepro>tree /f bin\\Debug\\netcoreapp1.0\nFolder PATH listing\nVolume serial number is 4E82-251B\nC:\\USERS\\JEFFKL\\DOWNLOADS\\MSBUILDRUNTIMEREPRO\\BIN\\DEBUG\\NETCOREAPP1.0\n    msbuildruntimerepro.deps.json\n    msbuildruntimerepro.dll\n    msbuildruntimerepro.pdb\n    msbuildruntimerepro.runtimeconfig.dev.json\n    msbuildruntimerepro.runtimeconfig.json\n\nNo subfolders exist\n```\n",
        "createdAt": "2016-11-18T21:28:29Z",
        "updatedAt": "2016-11-18T21:28:29Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "Okay this is currently blocked by https://github.com/NuGet/Home/issues/3683 because our contentFiles are not being copied to the output directory.  The workaround is to set `MSBUILD_EXE_PATH` for now...\n",
        "createdAt": "2016-11-18T23:02:08Z",
        "updatedAt": "2016-11-18T23:02:08Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "@jeffkl What's the current state of this for a tool? My understanding is that it should work fine since `dotnet` will set `MSBUILD_EXE_PATH` to its MSBuild root and allow a project to have standard dependencies on our DLLs and evaluate a project using the CLI's toolset--right? I think @natemcmaster thinks otherwise . . .",
        "createdAt": "2016-12-07T23:22:13Z",
        "updatedAt": "2016-12-07T23:22:13Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I haven't tested lately. We decided that ASP.NET Core CLI tools should not use MSBuild APIs for project evaluation. AFAIK the only tool using MSBuild object model programmatically is `dotnet-prop` (https://github.com/simonech/dotnet-prop).\r\n\r\nInstead, ASP.NET Core CLI tools accomplish indirect project evaluation by abusing the imports from `MSBuildProjectExtensionsPath` . This allows us to inject targets into a project. See https://github.com/aspnet/DotNetTools/pull/206 for a brief description of how dotnet-watch implements that.",
        "createdAt": "2016-12-07T23:36:03Z",
        "updatedAt": "2016-12-07T23:36:03Z",
        "author": {
          "login": "natemcmaster"
        }
      },
      {
        "body": "I'm not sure, I should probably set up a repro so I can test solutions.\r\n\r\nWe didn't really want people taking a dependency on `MSBUILD_EXE_PATH` but it should fix the problem for now.  Longer term we talked about NuGet being able to resolve assets other than reference assemblies.  Another option is to put MSBuild.exe next to Microsoft.Build.dll in the appropriate package.  I just need to take the time to set this up so I can test it all...",
        "createdAt": "2016-12-08T15:21:09Z",
        "updatedAt": "2016-12-08T15:21:09Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "Ping on a really old thread. At this point, all of the tools I have created workaround this limitation by invoking a new MSBuild process instead of calling on MSBuild API directly. It's a less-than-ideal programming experience though. \r\n\r\nI recently saw this: https://github.com/daveaglick/Buildalyzer. Is this kind of API something MSBuild would every provide as a 1st class thing? If not, I suugest we just close this as \"wontfix\" and invite tool authors to use something like https://github.com/daveaglick/Buildalyzer if they want to use MSBuild in-proc.",
        "createdAt": "2018-02-14T03:07:35Z",
        "updatedAt": "2018-02-14T03:07:35Z",
        "author": {
          "login": "natemcmaster"
        }
      }
    ]
  }
}