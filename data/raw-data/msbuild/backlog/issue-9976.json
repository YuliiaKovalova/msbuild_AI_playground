{
  "number": 9976,
  "title": ".NET Framework MSBuild doesn't cast `char` to `string` in property functions",
  "body": "Consider\r\n\r\n```xml\r\n<Project>\r\n  <Target Name=\"Go\">\r\n    <Warning Text=\"$(P.EndsWith($([System.IO.Path]::DirectorySeparatorChar)))\" />\r\n  </Target>\r\n</Project>\r\n```\r\n\r\nThis works with .NET 8 MSBuild:\r\n\r\n```sh-session\r\n\u276f dotnet msbuild .\\test.proj -p:P=\\Some\\Path\\\r\nMSBuild version 17.10.0-preview-24162-02+0326fd7c9 for .NET\r\n  test succeeded with warnings (0.0s)\r\n    S:\\repro\\dotnet\\razor\\pull\\10220\\test.proj(3,5): warning : True [S:\\repro\\dotnet\\razor\\pull\\10220\\test.proj]\r\n\r\nBuild succeeded with warnings in 0.0s\r\n\r\n\u276f dotnet msbuild .\\test.proj -p:P=\\Some\\Path\r\nMSBuild version 17.10.0-preview-24162-02+0326fd7c9 for .NET\r\n  test succeeded with warnings (0.0s)\r\n    S:\\repro\\dotnet\\razor\\pull\\10220\\test.proj(3,5): warning : False [S:\\repro\\dotnet\\razor\\pull\\10220\\test.proj]\r\n\r\nBuild succeeded with warnings in 0.0s\r\n```\r\n\r\nBut `MSBuild.exe` doesn't like it:\r\n\r\n```sh-session\r\n\u276f msbuild .\\test.proj -p:P=\\Some\\Path\\\r\n  test failed with 1 error(s) (0.0s)\r\n    S:\\repro\\dotnet\\razor\\pull\\10220\\test.proj(3,14): error MSB4186: Invalid static method invocation syntax: \"P.EndsWith($([System.IO.Path]::DirectorySeparatorChar))\". Object of type 'System.Char' cannot be converted to type 'System.String'. Static method invocation should be of the form: $([FullTypeName]::Method()), e.g. $([System.IO.Path]::Combine(`a`, `b`)). Check that all parameters are defined, are of the correct type, and are specified in the right order.\r\n\r\nBuild failed with 1 error(s) in 0.0s\r\n```\r\n\r\n(seen while investigating https://github.com/dotnet/razor/pull/10220)\r\n\r\n## Workaround\r\n\r\nYou can wrap the char-generating method:\r\n\r\n```diff\r\ndiff --git a/test.proj b/test.proj\r\nindex 87fa27a..d08cd98 100644\r\n--- a/test.proj\r\n+++ b/test.proj\r\n@@ -1,5 +1,5 @@\r\n <Project>\r\n   <Target Name=\"Go\">\r\n-    <Warning Text=\"$(P.EndsWith($([System.IO.Path]::DirectorySeparatorChar)))\" />\r\n+    <Warning Text=\"$(P.EndsWith($([System.String]::new($([System.IO.Path]::DirectorySeparatorChar)))))\" />\r\n   </Target>\r\n </Project>\r\n```",
  "state": "OPEN",
  "createdAt": "2024-04-05T14:46:40Z",
  "updatedAt": "2024-10-10T16:01:18Z",
  "closedAt": null,
  "author": {
    "login": "rainersigwald"
  },
  "labels": [
    "bug",
    "backlog",
    "Area: Language",
    "Priority:2",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "The logic in LateBindExecute looks wonky: it first searches for a method that has the correct number of parameters and where all parameters are strings; then if it finds one, it calls that via MethodInfo.Invoke even if the arguments are not strings.  If it did _not_ find such a method, then it would use CoerceArguments, which can convert Char to String via Convert.ChangeType.\r\n\r\nOn .NET Core 2.0 and greater, String.EndsWith(Char) already exists; I guess Type.InvokeMember calls that and LateBindExecute is not entered.\r\n",
        "createdAt": "2024-04-05T16:20:46Z",
        "updatedAt": "2024-04-05T16:20:46Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "This works too:\r\n\r\n```XML\r\n<Project>\r\n  <Target Name=\"Go\">\r\n    <Warning Text=\"$(P.EndsWith($([System.IO.Path]::DirectorySeparatorChar), 'StringComparison.Ordinal'))\" />\r\n  </Target>\r\n</Project>\r\n```\r\n\r\nbecause there is no String.EndsWith(String, String) method and thus LateBindExecute resorts to String.EndsWith(String, StringComparison) and goes to the CoerceArguments path.",
        "createdAt": "2024-04-05T16:25:56Z",
        "updatedAt": "2024-04-05T16:25:56Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "Would it be possible to change the language so that quoting the argument as in `$(P.EndsWith('$([System.IO.Path]::DirectorySeparatorChar)'))` always coerces it to String?",
        "createdAt": "2024-04-05T16:33:23Z",
        "updatedAt": "2024-04-05T16:33:23Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "Maybe? I certainly tried that while investigating this so I like the general idea. I haven't thought through the implications though.",
        "createdAt": "2024-04-05T16:37:09Z",
        "updatedAt": "2024-04-05T16:37:09Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}