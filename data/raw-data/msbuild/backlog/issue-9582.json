{
  "number": 9582,
  "title": "Microsoft.Build.Evaluation.Project doesnt work correctly when TargetFrameworks (extra s) property is defined",
  "body": "### Issue Description\n\nWe are targetting our projects with multiple TFMs as net48 and net8.0. For that reason we have TargetFrameworks defined in project files instead of TargetFramework. TargetFramework property is not defined at all. Such projects compile just fine (two different binaries are produced) and VS is loading and showing those projects correctly as well. However we have additional tools which are internally using Microsoft.Build.Evaluation.Project instances and accessing collections like Items. If projects are defined with TargetFramework (no extra s) property. Such collection contains all items like compilation items (source files), content items etc. However when exactly same project is defined with TargetFrameworks (extra s), such collection no longer contains any of the items (compile, content etc.). And this is causing failure of our in-house tooling.  It seems that when TargetFrameworks is defined, project is no longer handled as SDK style projects and none of the imports and logic works anymore for such projects. Small repro solution attached together with images of Items collection for both cases.\r\n\r\n[TFMIssue.zip](https://github.com/dotnet/msbuild/files/13810616/TFMIssue.zip)\r\n![TargetFramework](https://github.com/dotnet/msbuild/assets/4748314/1837e897-b8c3-42c5-a84e-7ea7f7c09774)\r\n![TargetFrameworks](https://github.com/dotnet/msbuild/assets/4748314/cf0dd8a2-8c79-4ccc-9c18-06ea326c9673)\r\n\n\n### Steps to Reproduce\n\nDefine project with TargetFRameworks property defined and TargetFramewok missing completely. Create instance of Microsoft.Build.Evaluation.Project by loading such project. Items collection (and similar) will not contain any compile, content etc items.\r\n![TargetFrameworks](https://github.com/dotnet/msbuild/assets/4748314/baa95bc1-1042-4295-b0de-52e0bba85e43)\r\n\n\n### Expected Behavior\n\nWhen TargetFRamewoks property is defined (TargetFRamework missing). Instance of Microsoft.Build.Evaluation.Project should still provide compilation, content etc items in Items (and similar) collections.\r\n![TargetFramework](https://github.com/dotnet/msbuild/assets/4748314/2262c0ba-1155-4091-94e1-3897e4ab7656)\r\n\n\n### Actual Behavior\n\nWhen TargetFRamewoks property is defined (TargetFRamework missing). Instance of Microsoft.Build.Evaluation.Project doesnt provide information's about compile, content etc items associated with project definition.\n\n### Analysis\n\n_No response_\n\n### Versions & Configurations\n\nVisual Studio 2022 17.8.3",
  "state": "OPEN",
  "createdAt": "2024-01-02T14:06:16Z",
  "updatedAt": "2024-03-14T15:15:53Z",
  "closedAt": null,
  "author": {
    "login": "payn-git"
  },
  "labels": [
    "bug",
    "Area: Documentation",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "In your [TFMIssue.zip](https://github.com/dotnet/msbuild/files/13810616/TFMIssue.zip), `TargetFrameworksTest\\TargetFrameworksTest.csproj` does not declare any `Compile` items; it relies on default items.  If `$(IsCrossTargetingBuild)' == 'true'`, then `Sdks\\Microsoft.NET.Sdk\\Sdk\\Sdk.targets` imports `Microsoft.NET.Sdk.CrossTargeting.targets` rather than `Microsoft.NET.Sdk.targets`, which thus won't import `Microsoft.NET.Sdk.DefaultItems.targets`, which then won't set the `EnableDefaultItems` etc. properties that `Microsoft.NET.Sdk.DefaultItems.props` checks.\r\n\r\nI don't think MSBuild or .NET SDK should be changed to add default items in a crosstargeting build, because doing so would slow down the evaluation and is not necessary when the application that hosts MSBuild does not examine the items.\r\n\r\nI think your tools should enumerate the `TargetFrameworks`, evaluate the project for each `TargetFramework`, and merge the item lists.",
        "createdAt": "2024-01-02T14:35:49Z",
        "updatedAt": "2024-01-02T14:35:49Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "Thnx for the response,\r\n\r\nI have few questions.\r\n\r\n- are you expecting that content of those collections will be different ? I understand that things like references etc. might be but I would not expect that items like compile\\content etc will be different between different TFMs. At least Im not aware about case when e.g. cs file will be included when framework is net48 but will not be included when framework is net8.0\r\n- in your suggestion. how exactly that supposed to be done in code ? I dont see any APIs on Project level which allow to reevaluate it for specific framework... Can you maybe point me in right direction ?",
        "createdAt": "2024-01-02T15:08:41Z",
        "updatedAt": "2024-01-02T15:08:41Z",
        "author": {
          "login": "payn-git"
        }
      },
      {
        "body": "What @KalleOlaviNiemitalo is the correct way. To evaluate a project as a specific TFM you'd re-evaluate projects file using the overload that has a collection of global properties, and fill that properties collection with the TargetFramework property (while also unsettling the TargetFrameworks property for maximum compatibility).\n\nThere's no helper for this because this entire dance is an SDK concept, not an MSBuild concept. And it's very common for all kinds of Items and Properties to be conditional on TargetFramework values! ",
        "createdAt": "2024-01-02T15:24:21Z",
        "updatedAt": "2024-01-02T15:24:21Z",
        "author": {
          "login": "baronfel"
        }
      },
      {
        "body": "A project can do e.g. `<Compile Include=\"PluginLoader.netfx.cs\" Condition=\"$(TargetFrameworkIdentifier) == '.NETFramework'\" />` and then the set of Compile items would depend on TargetFramework.  But if your projects don't do that, then I suppose your tools don't need to support that.",
        "createdAt": "2024-01-02T15:30:00Z",
        "updatedAt": "2024-01-02T15:30:00Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "Thnx for your replies. Based on Microsoft own SDK default include items documentation,  those items dont depends on TFMs and therefore I don\u2019t see why that should affect if they are or are not visible in Project instance. More over in example provided by you (which is valid one), I can still see that cs file included in Items collection regardless if TargetFramework property is set or not even if item is conditioned. This is caused by fact that item is not longer included over default includes (which are all missing) but is explicitly listed in project itself as it have to have condition defined. Such included will be visible regardless of TFMs. Which is adding even more to whole confusion. Also that\u2019s the behavior of Visual Studio UI as well. Such conditioned item is visible in project as its part of the project and fact if it might be used in compilation for specific TFM is kind of irrelevant. I would expect same behavior in Project instance. Items are listed as those are valid Project items and they might or might not be used during compilation or in output.",
        "createdAt": "2024-01-02T17:58:36Z",
        "updatedAt": "2024-01-02T17:58:36Z",
        "author": {
          "login": "payn-git"
        }
      },
      {
        "body": "@ghogen fyi",
        "createdAt": "2024-03-14T15:15:51Z",
        "updatedAt": "2024-03-14T15:15:51Z",
        "author": {
          "login": "AR-May"
        }
      }
    ]
  }
}