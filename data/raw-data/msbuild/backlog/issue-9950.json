{
  "number": 9950,
  "title": "[Bug]: New Terminal Logger Prints Progress Poorly Formatted in Some Terminals",
  "body": "### Issue Description\n\nThe newest version of .NET 9 implements a new console logger, which displays build status in a more \"real-time\" format by overwriting the progress line. This looks great, however, it does not work properly in some specific terminals, like for example the Emacs Terminal (not Emacs Shell).\n\n### Steps to Reproduce\n\nIn the terminals that don't like the new logger, building any dotnet app reproduces the issue. I'm using this command for mine: `dotnet build -c Release -o out`\r\n\r\nIt is worth mentioning that we can get around this issue by passing the flag `-tl:false` to the dotnet command.\n\n### Expected Behavior\n\nDisplays only one line of progress in a clean format:\r\n\r\n```text\r\nRestore complete (0.5s)\r\nYou are using a preview version of .NET. See: https://aka.ms/dotnet-support-policy\r\n  TestApp succeeded (1.9s) \u2192 out/TestApp.dll\r\n\r\nBuild succeeded in 2.6s\r\n```\n\n### Actual Behavior\n\nIn said terminals, the carriage return seems to be getting messed up and the output looks like this:\r\n\r\n```text\r\n\u001b]9;4;3;\u001b\\\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  csproj                                                                                                          (0.0s)\r\n\r\n                                                                                                                  (0.0s)\r\n\r\n                                                                                                                  (0.1s)\r\n\r\n                                                                                                                  (0.1s)\r\n\r\n                                                                                                                  (0.2s)\r\n\r\n                                                                                                                  (0.2s)\r\n\r\n                                                                                                                  (0.2s)\r\n\r\n                                                                                                                  (0.3s)\r\n\r\n                                                                                                                  (0.3s)\r\n\r\n                                                                                                                  (0.3s)\r\n\r\n                                                                                                                  (0.4s)\r\n\r\n                                                                                                                  (0.4s)\r\n\r\n                                                                                                                  (0.4s)\r\n\r\n                                                                                                                  (0.5s)\r\n\r\nRestore complete (0.5s)\r\n\r\n  csproj                                                                                                          (0.5s)\r\n\r\n                                                                                                                  (0.5s)\r\n\r\nYou are using a preview version of .NET. See: https://aka.ms/dotnet-support-policy\r\n\r\n  TestApp                                                                              ProcessFrameworkReferences (0.0s)\r\n\r\n\r\n  TestApp                                                                            ResolveOffByDefaultAnalyzers (0.1s)\r\n\r\n  TestApp                                                                    FindReferenceAssembliesForReferences (0.1s)\r\n\r\n  TestApp                                                                                CoreGenerateAssemblyInfo (0.1s)\r\n\r\n  TestApp                                                                                             CoreCompile (0.2s)\r\n\r\n                                                                                                                  (0.2s)\r\n\r\n                                                                                                                  (0.2s)\r\n\r\n  TestApp                                                                                          _CreateAppHost (0.3s)\r\n\r\n                                                                                                                  (0.3s)\r\n\r\n                                                                                                                  (0.3s)\r\n\r\n                                                                                                                  (0.4s)\r\n\r\n  TestApp                                                                                           GetTargetPath (0.4s)\r\n\r\n  TestApp                                                                  GenerateBuildRuntimeConfigurationFiles (0.4s)\r\n\r\n  TestApp succeeded (0.4s) \u2192 \u001b]8;;file:///media/ivdiazsa/DataDrive/Development/for-experiments/AssemblyReflection/TestApp/out\u001b\\out/TestApp.dll\u001b]8;;\u001b\\\r\n\r\n\r\nBuild succeeded in 1.2s\r\n\u001b]9;4;0;\u001b\\\r\n```\n\n### Analysis\n\n_No response_\n\n### Versions & Configurations\n\nThis is my dotnet installation (output of `dotnet --info`):\r\n\r\n```text\r\n.NET SDK:\r\n Version:           9.0.100-preview.2.24157.14\r\n Commit:            f7466905f9\r\n Workload version:  9.0.100-manifests.04914b26\r\n MSBuild version:   17.10.0-preview-24127-03+6f44380e4\r\n\r\nRuntime Environment:\r\n OS Name:     ubuntu\r\n OS Version:  22.04\r\n OS Platform: Linux\r\n RID:         linux-x64\r\n Base Path:   /home/ivdiazsa/dotnet/sdk/9.0.100-preview.2.24157.14/\r\n\r\n.NET workloads installed:\r\nThere are no installed workloads to display.\r\n\r\nHost:\r\n  Version:      9.0.0-preview.2.24128.5\r\n  Architecture: x64\r\n  Commit:       8e5e748c5c\r\n\r\n.NET SDKs installed:\r\n  6.0.420 [/home/ivdiazsa/dotnet/sdk]\r\n  7.0.407 [/home/ivdiazsa/dotnet/sdk]\r\n  8.0.202 [/home/ivdiazsa/dotnet/sdk]\r\n  9.0.100-preview.2.24157.14 [/home/ivdiazsa/dotnet/sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.App 6.0.28 [/home/ivdiazsa/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 7.0.17 [/home/ivdiazsa/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 8.0.3 [/home/ivdiazsa/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 9.0.0-preview.2.24128.4 [/home/ivdiazsa/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 6.0.28 [/home/ivdiazsa/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 7.0.17 [/home/ivdiazsa/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 8.0.3 [/home/ivdiazsa/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 9.0.0-preview.2.24128.5 [/home/ivdiazsa/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nOther architectures found:\r\n  None\r\n\r\nEnvironment variables:\r\n  DOTNET_ROOT       [/home/ivdiazsa/dotnet]\r\n\r\nglobal.json file:\r\n  Not found\r\n\r\nLearn more:\r\n  https://aka.ms/dotnet/info\r\n\r\nDownload .NET:\r\n  https://aka.ms/dotnet/download\r\n```",
  "state": "CLOSED",
  "createdAt": "2024-03-28T17:27:57Z",
  "updatedAt": "2024-05-21T07:53:51Z",
  "closedAt": "2024-05-21T07:53:51Z",
  "author": {
    "login": "ivdiazsa"
  },
  "labels": [
    "bug",
    "Priority:2",
    "triaged",
    "Area: Terminal Logger"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "AR-May"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Looks like we're just checking if `TERM` isn't `dumb` - Spectre.Console has a [series of expected TERM values](https://github.com/spectreconsole/spectre.console/blob/main/src/Spectre.Console/Internal/Backends/Ansi/AnsiDetector.cs#L12-L28) that they use for probing - should we use that to align more?",
        "createdAt": "2024-03-28T17:33:12Z",
        "updatedAt": "2024-03-28T17:33:12Z",
        "author": {
          "login": "baronfel"
        }
      },
      {
        "body": "> Looks like we're just checking if `TERM` isn't `dumb` - Spectre.Console has a [series of expected TERM values](https://github.com/spectreconsole/spectre.console/blob/main/src/Spectre.Console/Internal/Backends/Ansi/AnsiDetector.cs#L12-L28) that they use for probing - should we use that to align more?\r\n\r\nInteresting, you do have `eterm` listed there. I wonder if `eterm-color` is treated as a completely different one.\r\n\r\nAdding for more information:\r\n\r\n```bash\r\necho $TERM\r\neterm-color\r\n```",
        "createdAt": "2024-03-28T17:35:21Z",
        "updatedAt": "2024-03-28T17:37:32Z",
        "author": {
          "login": "ivdiazsa"
        }
      },
      {
        "body": "> > Looks like we're just checking if `TERM` isn't `dumb` - Spectre.Console has a [series of expected TERM values](https://github.com/spectreconsole/spectre.console/blob/main/src/Spectre.Console/Internal/Backends/Ansi/AnsiDetector.cs#L12-L28) that they use for probing - should we use that to align more?\r\n> \r\n> Interesting, you do have `eterm` listed there. I wonder if `eterm-color` is treated as a completely different one.\r\n> \r\n> Adding for more information:\r\n> \r\n> ```shell\r\n> echo $TERM\r\n> eterm-color\r\n> ```\r\n\r\nYes, eterm is listed there and actually \"eterm-color\" is an acceptable terminal type because of that. Which is probably not quite correct detection: this type only recognizes the ANSI codes that control coloring, and not the ones that moves cursor, for example (checked it in the Emacs Terminal). And it seems to me that both our projects need moves of the cursor. \r\n\r\nOverall, I think we need to improve our detection. I see two ways: either we do what Spectre.Console does and have a list of allowed terminal types for the Terminal Logger. Or we obtain the information via parsing the capabilities of a terminal using the `terminfo` database and comparing them to whatever capabilities we need for Terminal Logger to work. It might be quite tricky to do so though. I found that runtime [does something similar](https://github.com/dotnet/runtime/blob/404b286b23093cd93a985791934756f64a33483e/src/libraries/System.Console/src/System/TermInfo.cs).",
        "createdAt": "2024-04-09T11:55:19Z",
        "updatedAt": "2024-04-09T11:55:19Z",
        "author": {
          "login": "AR-May"
        }
      }
    ]
  }
}