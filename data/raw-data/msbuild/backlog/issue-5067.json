{
  "number": 5067,
  "title": "Allow Exec task to run several commands in parallel",
  "body": "Right now in our repo we have a series of relatively slow tasks that we run `<Exec>` on one by one. (This is the crossgen phase of the .NET libraries build). To make these run faster, we would like to run them in parallel. \r\n\r\nRight now to do that with MSBuild our only option is to use the `<MSBuild>` task, which would require passing all the necessary properties over, make a lot more noise in the log (new project and target events) and be harder to read and maintain. When you start passing global properties to MSBuild tasks the build gets more difficult to reason about.\r\n\r\nWhat would be ideal would be to be able to write\r\n```xml\r\n<Exec Commands=\"@(CrossgenCommands)\" ... usual parameters, same for all commands ...\r\n           ExecuteInParallel=\"true\"\r\n/>\r\n```\r\n\r\nExec (and ToolTask) are complicated - all those pipes and events - it is daunting to consider making all that understand parallelism. Fortunately it seems to me it is likely possible to do this with the \"adapter\" pattern in a rather straightforward way without modifying that code, as follows:\r\n\r\n1. If ExecuteInParallel is true, instead of continuing execution as normal, Exec would begin a `Parallel.For` style loop. Each loop:\r\n1. Instantiates an Exec task with the same IBuildEngineX passed in. (It seems that IBuildEngineX and TaskLoggingHelper are [thread safe](https://github.com/microsoft/msbuild/blob/master/src/Shared/TaskLoggingHelper.cs#L336).)\r\n1. Set ExecuteInParallel to false on the new task object. Set Command to the n'th command. Pass through all other parameters verbatim.\r\n1. Call Execute() on the task. \r\n1. Continue the loop.\r\n\r\nThis should cause all the commands to get executed with the right parameters, in some reasonable level of parallelism, with log messages interleaved. \r\n\r\nNotes:\r\n\r\n1. If it was desired to make clear in some way which messages come from which instantiation, that could be achieved by passing in a custom IBuildEngineX which contains a type derived from TaskLoggingHelper that wraps the real TaskLoggingHelper. But personally, I'd just be glad for the thing to run in parallel. And interleaved console output is what most of us look at every day, not strongly typed MSBuild logs.\r\n1. As an alternative approach, MSBuild could add a virtual `ExecuteInParallel` property on any task, and handle everything itself including scheduling - as dummy projects. But the above is simpler and could be replaced with this approach later.\r\n",
  "state": "OPEN",
  "createdAt": "2020-01-23T01:58:23Z",
  "updatedAt": "2024-02-21T16:30:01Z",
  "closedAt": null,
  "author": {
    "login": "danmoseley"
  },
  "labels": [
    "help wanted",
    "needs-design",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Backlog"
  },
  "comments": {
    "nodes": [
      {
        "body": "Oh, now I found https://github.com/microsoft/msbuild/issues/1780 by @KirillOsenkov . And I even commented there. But maybe the approach above being less elaborate is more plausible.",
        "createdAt": "2020-01-23T02:00:18Z",
        "updatedAt": "2020-01-23T02:00:18Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "Also, we control the implementation of Exec - we do not control the implementation of ToolTasks, in general: a concrete ToolTask may have static members that interfere with executing it in parallel. This need not be the case for Exec.",
        "createdAt": "2020-01-23T02:02:23Z",
        "updatedAt": "2020-01-23T02:02:23Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "Team triage: this seems reasonable as an extension to `Exec` or maybe a new `ParallelExec`. It's definitely less concerning than an attempt to allow fully general parallel execution.\r\n\r\nOne note: C++ has an implementation of parallel Make inside MSBuild in its [CustomBuild](https://devblogs.microsoft.com/cppblog/parallel-custom-build-tools-in-visual-studio-2017/) items. One could conceivably use that. Even if it made me very sad (the last part is not Team Triage \ud83d\ude01).",
        "createdAt": "2020-01-27T21:45:29Z",
        "updatedAt": "2020-01-27T21:45:29Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "There's a workaround possible today in a batch file with multiple `start` commands, no? (admittedly not the most graceful)\r\n\r\nFor instance, I have this:\r\n```\r\n    <Exec Command=\".\\build\\vs-prog.bat\" YieldDuringToolExecution=\"True\" ConsoleToMSBuild=\"true\" Condition=\"'$(Configuration)'=='Debug' \">\r\n      <Output TaskParameter=\"ConsoleOutput\" ItemName=\"OutputOfExec\" />\r\n    </Exec> \r\n```\r\nAnd the `vs-prog.bat` batch file has 2 `ping` commands like this:\r\n```\r\nstart \"Build Ping 1\" /b ping -n 5 192.168.1.1\r\n\r\nstart \"Build Ping 2\" /b ping -n 5  192.168.1.2\r\n```\r\nthe output in Visual Studio looks like this:\r\n```\r\n1>------ Build started: Project: Verilog45, Configuration: Debug Any CPU ------\r\n1>Build started 6/8/2020 8:56:36 AM.\r\n1>Build:\r\n1>  Building Verilog Files\r\n1>  .\\build\\vs-prog.bat\r\n1>  \"Calling \"C:\\WINDOWS\\Sysnative\\wsl.exe\" (make prog -f Makefile ULX3S) & ...\"\r\n1>  \"C:\\WINDOWS\"\r\n1>  \"Version \"\r\n1>  Done!\r\n1>  \r\n1>  Pinging 192.168.1.1 with 32 bytes of data:\r\n1>  \r\n1>  Pinging 192.168.1.2 with 32 bytes of data:\r\n1>  Reply from 192.168.1.108: Destination host unreachable.\r\n1>  Reply from 192.168.1.108: Destination host unreachable.\r\n1>  Reply from 192.168.1.108: Destination host unreachable.\r\n1>  Reply from 192.168.1.108: Destination host unreachable.\r\n1>  Reply from 192.168.1.108: Destination host unreachable.\r\n1>  Reply from 192.168.1.108: Destination host unreachable.\r\n1>  Reply from 192.168.1.108: Destination host unreachable.\r\n1>  Reply from 192.168.1.108: Destination host unreachable.\r\n1>  Reply from 192.168.1.108: Destination host unreachable.\r\n1>  \r\n1>  Ping statistics for 192.168.1.1:\r\n1>      Packets: Sent = 5, Received = 5, Lost = 0 (0% loss),\r\n1>  Reply from 192.168.1.108: Destination host unreachable.\r\n1>  \r\n1>  Ping statistics for 192.168.1.2:\r\n1>      Packets: Sent = 5, Received = 5, Lost = 0 (0% loss),\r\n1>\r\n1>Build succeeded.\r\n1>    0 Warning(s)\r\n1>    0 Error(s)\r\n1>\r\n1>Time Elapsed 00:00:13.70\r\n========== Build: 1 succeeded, 0 failed, 0 up-to-date, 0 skipped ==========\r\n```\r\nIt's even more interesting in DOS:\r\n```\r\nPinging 192.168.1.1 with 32 bytes of data:\r\n\r\nPinging 192.168.1.2 with 32 bytes of data:\r\neeReplply y ffrormo m1 9129.21.6186.81..11.018:0 8: DesDteisntaitniaotni ohno shto sutn ruenarcehaacbhlaeb.l\r\n.\r\n\r\n\r\nC:\\Users\\gojimmypi\\source\\repos\\Verilog45\\Verilog45>ReplyR efprloy m fr19o2m .119682..11.6810.81.: 108: DestDineasttiionbnt ihoonst h ounstr euacnrhaebalceh.a\r\ne.\r\nRReeppllyy  ffrroomm  119922..116688..11..110088::  DDeessttiinnaattiioonn  hhoosstt  uunnrreeaacchhaabbllee..\r\n\r\n.Reeppllyy  ffrroomm  119922..116688..11..110088::  DeDsetsitniantaitoino nh ohsots tu nurneraecahcahbalbel.e\r\n\r\nRReeppllyy  ffrroomm  119922..116688..11..110088::  DDeessttiinnaattiioonn  hhoosstt  uunnrreeaacchhaabbllee..\r\n```\r\nI've been fussing with this trying to figure out why my build burps out all the data all at once for a long running process, as noted [here](https://github.com/gojimmypi/VerilogLanguageExtension/pull/25#issuecomment-640307560). ",
        "createdAt": "2020-06-08T16:29:19Z",
        "updatedAt": "2020-06-08T16:29:19Z",
        "author": {
          "login": "gojimmypi"
        }
      }
    ]
  }
}