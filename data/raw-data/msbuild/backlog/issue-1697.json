{
  "number": 1697,
  "title": "Tracking: .NET Core Sdk in Build Tools Installer",
  "body": "After installing Build Tools for Visual Studio 2017 RC (download URL: [vs_BuildTools.exe](https://download.microsoft.com/download/6/2/3/6238C02B-A5EA-46D8-8F31-3B8E0F54DD3B/vs_BuildTools.exe)), MSBuild.exe cannot be directly used because the Sdks are missing. A workaround is to provide them thanks to the MSBuildSDKsPath variable:\r\n`$ set MSBuildSDKsPath=C:\\Program Files\\dotnet\\sdk\\1.0.0-rc4-004771\\Sdks`\r\n\r\nAre Build Tools supposed to be used for .NET Core?\r\nIf this is the case, then the MSBuildSDKsPath variable should be better documented.\r\nIf not (because they are replaced by .NET CLI?), it could be mentioned in [https://www.visualstudio.com/downloads/#d-build-tools](https://www.visualstudio.com/downloads/#d-build-tools).",
  "state": "CLOSED",
  "createdAt": "2017-02-14T15:35:56Z",
  "updatedAt": "2024-02-21T17:21:55Z",
  "closedAt": "2017-11-15T18:31:20Z",
  "author": {
    "login": "debanne"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "MSBuild 15.3"
  },
  "comments": {
    "nodes": [
      {
        "body": "No, the Build Tools installer doesn't currently cover .NET Core scenarios. At some point in the future I hope we can have a .NET Core checkbox within it, but that's not done at the moment.\r\n\r\nThe dotnet SDK installer (with the CLI) doesn't _replace_ the Build Tools installer, but it is the best current analog for it in some situations, like \"what should I install on my CI server?\" It is reasonable to install both.\r\n\r\n/cc @srivatsn ",
        "createdAt": "2017-02-14T15:52:08Z",
        "updatedAt": "2017-02-14T15:52:08Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Changing this to a tracking issue for \"there should be a .NET Core checkbox in the Build Tools installer\". The actual work will probably happen in the internal VS repo.",
        "createdAt": "2017-03-08T15:30:30Z",
        "updatedAt": "2017-03-08T15:30:30Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Related: https://github.com/NuGet/Home/issues/3660 (getting NuGet restore into the Build Tools installer).",
        "createdAt": "2017-03-09T15:29:18Z",
        "updatedAt": "2017-03-09T15:29:18Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "this is terrible. what's the point of the Build Tools installer, if it isn't to install tools required to build .NET projects?\r\n\r\nthis is a regression, too. building dotnet core apps worked fine with the v14 build tools. again, this is a breakage of an existing, deployed-to-production scenario.\r\n\r\nnow we have the v15 tools looking for \"Sdk.props\" in one directory, and the dotnet SDK isntalling it into some completely different directory.\r\n\r\nit's as if one hand isn't talking to the other.\r\n\r\nreally sloppy guys, really sloppy.",
        "createdAt": "2017-03-16T22:34:15Z",
        "updatedAt": "2017-03-16T22:34:15Z",
        "author": {
          "login": "Spongman"
        }
      },
      {
        "body": "The solution to using msbuild to compile vs2017 csproj files is to not use msbuild, but to use dotnet instead. So on the build server you need ot install the dotnet sdk, since it comes with the sdks needed by the new vs2017 csproj file, and it comes with nuget. The msbuild install does not.\r\n\r\nSo, instead of \r\n\r\n`\"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\MSBuild\\15.0\\Bin\\MSBuild.exe\" continuousIntegration.msbuild /t:deploy`\r\n\r\nUse \r\n\r\n`\"C:\\Program Files\\dotnet\\dotnet.exe\" msbuild continuousIntegration.msbuild /t:deploy`",
        "createdAt": "2017-03-21T10:08:29Z",
        "updatedAt": "2017-03-21T10:08:29Z",
        "author": {
          "login": "mariusGundersen"
        }
      },
      {
        "body": "What about asp.net core projects targeting .net framework (not .net core). Can such solutions be built with vs2017 built tools?",
        "createdAt": "2017-03-21T17:38:30Z",
        "updatedAt": "2017-03-21T17:38:30Z",
        "author": {
          "login": "evil-shrike"
        }
      },
      {
        "body": "Not out of the box. You have to copy/paste the sdk folder from a machine that has vs2017 installed to the ci machine, and then it's probably a good idea to put them in the location where msbuild is looking for them, instead of messing about with environment variables. ",
        "createdAt": "2017-03-21T17:42:35Z",
        "updatedAt": "2017-03-21T17:42:35Z",
        "author": {
          "login": "mariusGundersen"
        }
      },
      {
        "body": "> it's probably a good idea to put them in the location where msbuild is looking for them\r\n\r\nand where is it? \r\n",
        "createdAt": "2017-03-21T17:49:22Z",
        "updatedAt": "2017-03-21T17:49:27Z",
        "author": {
          "login": "evil-shrike"
        }
      },
      {
        "body": "Copy the contents of this folder:\r\n\r\n    C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\MSBuild\\Sdks\r\n\r\nTo \r\n\r\n    C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\MSBuild\\Sdks\r\n\r\n",
        "createdAt": "2017-03-23T10:28:37Z",
        "updatedAt": "2017-03-23T10:28:37Z",
        "author": {
          "login": "mariusGundersen"
        }
      },
      {
        "body": "Instead of copying over the SDK files, you should also be able to set an `MSBuildSDKsPath` environment variable to your `C:\\Program Files\\dotnet\\sdk\\1.0.0\\Sdk` folder in your CI setup (if the CLI is installed).",
        "createdAt": "2017-03-23T18:47:46Z",
        "updatedAt": "2017-03-23T18:48:06Z",
        "author": {
          "login": "dasMulli"
        }
      },
      {
        "body": "gotta say, msbuild's loose dependencies lead to so many headaches... it looked like the single responsibility principal was getting followed with the independent with the dotnet tools, but we just took a step back to the msblob that rules them all... who decided the csproj solution was fully baked? please tell them this is an absolute pain.",
        "createdAt": "2017-04-07T16:57:35Z",
        "updatedAt": "2017-04-07T16:57:35Z",
        "author": {
          "login": "ntregillus"
        }
      },
      {
        "body": "Please solve this problem: (1) Installing Visual Studio Professional Enterprise (2) Changing the path of 'C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\MSBuild\\Sdks' to 'C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Professional\\MSBuild\\Sdks' (Professional o Enterprise) (3) Build the solution",
        "createdAt": "2017-04-17T19:45:30Z",
        "updatedAt": "2017-04-17T19:45:30Z",
        "author": {
          "login": "ghost"
        }
      },
      {
        "body": "I think you are missing what the intent of my ask: I shouldn't need visual studio installed on my build machine: I should only need msbuild to build my project, not a full IDE",
        "createdAt": "2017-04-17T19:58:31Z",
        "updatedAt": "2017-04-17T19:58:31Z",
        "author": {
          "login": "ntregillus"
        }
      },
      {
        "body": "I agree with you @ntregillus , but for now is the most viable solution. Hope this can help you!",
        "createdAt": "2017-04-17T20:01:48Z",
        "updatedAt": "2017-04-17T20:01:48Z",
        "author": {
          "login": "ghost"
        }
      },
      {
        "body": "unfortunately it doesn't. I do not have enough licenses to install the IDE onto my build machine. Even if I could, I am not an administrator to install software on our build machine.... \r\n\r\nI will hold off on this nuget packaging for the core library until the standalone build tools can function independent of a IDE install.",
        "createdAt": "2017-04-17T20:09:00Z",
        "updatedAt": "2017-04-17T20:09:00Z",
        "author": {
          "login": "ntregillus"
        }
      },
      {
        "body": "Does this issue also prevent from even building a simple netstandard project (read \"a project using the new csproj format\") on a build machine without installing vs 2017 enterprise ?\r\n\r\nFor now, it requires to copy `C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\MSBuild\\Sdks` to build server and also `C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\Common7\\IDE\\CommonExtensions\\Microsoft\\NuGet` to enable /t:Restore target.",
        "createdAt": "2017-04-28T10:49:02Z",
        "updatedAt": "2017-04-28T12:52:53Z",
        "author": {
          "login": "tbolon"
        }
      },
      {
        "body": "No, i can still build vs2017 projects, using the msbuild tools. I have a number of .net core web apps that I would like to utilize this functionality for however",
        "createdAt": "2017-04-28T14:25:30Z",
        "updatedAt": "2017-04-28T14:25:30Z",
        "author": {
          "login": "ntregillus"
        }
      },
      {
        "body": "There's a reasonably clear path forward here for the 15.3/.NET CLI 2.0 timeframe. MSBuild has implemented SDK Resolvers #2002, which allow MSBuild and Visual Studio to use the .NET Core SDK installed in Program Files. It does require placing a resolver assembly in the MSBuild instance folder, though, and the work to do so even for the Build Tools installer isn't yet completed.",
        "createdAt": "2017-04-28T15:13:57Z",
        "updatedAt": "2017-04-28T15:13:57Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Is it still required to have he NuGet VSIX in the build tools to reasonably build for all combinations of packages.config/ProjectReference, classic/SDK-based csproj? While slacking with @tbolon, he mentioned copying `C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\Common7\\IDE\\CommonExtensions\\Microsoft\\NuGet` was necessary as well to get his build running..",
        "createdAt": "2017-04-28T15:17:13Z",
        "updatedAt": "2017-04-28T15:17:13Z",
        "author": {
          "login": "dasMulli"
        }
      },
      {
        "body": "Then there is `C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\MSBuild\\15.0\\SolutionFile\\ImportAfter\\Microsoft.NuGet.Solution.ImportAfter.targets` as well for restore on solutions to work.. don't know if it's in the build tools but it could be bad if that is out of sync with the individual project's SDK versions",
        "createdAt": "2017-04-28T15:19:32Z",
        "updatedAt": "2017-04-28T15:20:36Z",
        "author": {
          "login": "dasMulli"
        }
      },
      {
        "body": "@dasMulli Good point; that will still be required and is tracked by https://github.com/NuGet/Home/issues/3660. I'll continue bugging partner teams about this internally . . .",
        "createdAt": "2017-04-28T15:19:34Z",
        "updatedAt": "2017-04-28T15:19:34Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "For those who thinks that some of us is comparing apples to oranges speaking about `VS2017 Builds Tools` and `dotnet CLI`, saying that one is for \".NET Framework\" and another is for \".NET Core\".. here you are - a real scenario:\r\n- Azure Service Fabric project (*.sfproj, which is actually old-formatted csproj inside).\r\n- It hosts .NET Core project (new-format csproj)\r\n\r\nIt is maybe not mature enough tech-stack, but it's supported by Microsoft, everything is final version (not alpha/beta/release-candidate), and actually it works in general.\r\n\r\nBut guess what? This solution is compilable only through VS2017, which in some mysterious way combines both worlds from .NET Core and classic .NET projects. However if you are up to build it without VS2017 (like in CI build server) - then sorry, you have got serious problems. It really looks like left hand doesn't talk with right hand.\r\n\r\nAlready tried dozen of workarounds - like copying MSBuild/SDKs from VS2017 directly to CI server, and stuff like that, and still no fully working solution. The best solution so far is thanks to person mentioned about `MSBuildSDKsPath` environment variable - seems it works with VS2017 Build Tools, but still looks like total workaround, which might stop working after next .NET Core SDK version, and we still need to bother CI server administrators to help us fixing the build.\r\n\r\nMy related registered issue with some more details from Service Fabric perspective - https://github.com/Azure/service-fabric-issues/issues/258",
        "createdAt": "2017-05-04T15:05:54Z",
        "updatedAt": "2017-05-15T15:04:52Z",
        "author": {
          "login": "Aleksanderis"
        }
      },
      {
        "body": "@ntregillus , you said, _\"No, i can still build vs2017 projects, using the msbuild tools. I have a number of .net core web apps that I would like to utilize this functionality for however\"_, do you mean on build server?",
        "createdAt": "2017-06-06T16:39:18Z",
        "updatedAt": "2017-06-06T16:39:18Z",
        "author": {
          "login": "avikenjale"
        }
      },
      {
        "body": "@ntregillus, @avikenjale : we are using MSBUILD15 (tools & SDK) and not a complete visual studio as we are on Docker containers (Linux) [our build server is Linux, which creates a container from DOCKERFILE we have and then builds & tests the app on that server] and have no issues using it. So how someone can install full VS on non-windows environments just for the sake of build.\r\nPlease correct me if I have wrongly understood this. ",
        "createdAt": "2017-06-06T17:53:51Z",
        "updatedAt": "2017-06-06T17:53:51Z",
        "author": {
          "login": "deepak-khopade-isdr"
        }
      },
      {
        "body": "I had this issue setting up a CI build agent to build a .NET core web app with the .NET full framework, using MSBuild. To fix, I copied the folder 'C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Professional\\MSBuild\\Sdks\\Microsoft.NET.Sdk.Web' from my laptop to the build server at: 'C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\MSBuild\\Sdks\\Microsoft.NET.Sdk.Web'",
        "createdAt": "2017-06-12T00:38:47Z",
        "updatedAt": "2017-06-12T00:38:47Z",
        "author": {
          "login": "utilitydelta"
        }
      },
      {
        "body": "To mitigate this if using TeamCity set a build parameter of `env.MSBuildSDKsPath` to `C:\\Program Files\\dotnet\\sdk\\1.0.4\\Sdks`\r\n\r\n@ntregillus - To get around license requirements you should be able to use VS 2017 Community. I've got to say the state of building .Net is a joke\r\n",
        "createdAt": "2017-06-15T12:12:16Z",
        "updatedAt": "2017-06-15T12:12:16Z",
        "author": {
          "login": "fenneh"
        }
      },
      {
        "body": "yeah, unfortunately, i do not think the .net team is focusing on build tools, which is unfortunate since the industry is so CI focused these days.",
        "createdAt": "2017-06-15T14:32:34Z",
        "updatedAt": "2017-06-15T14:32:34Z",
        "author": {
          "login": "ntregillus"
        }
      },
      {
        "body": "This is a pain to figure out, when setting up CI!",
        "createdAt": "2017-06-16T08:20:42Z",
        "updatedAt": "2017-06-16T08:20:52Z",
        "author": {
          "login": "jetersen"
        }
      },
      {
        "body": "The next version of the BUILD Tools SKU will have an option to bring along the .NET Core SDK along with the Resolvers that @rainersigwald mentioned above. So, you will be able to invoke msbuild on your solution even if it contains .NET projects. The only requirement is that the .NET Core SDK be on your path, which the build SKU installer will do for you. The only missing piece at this point is having NuGet in the build SKU, which is being tracked by an issue that @rainersigwald referenced above.",
        "createdAt": "2017-06-23T15:58:13Z",
        "updatedAt": "2017-06-23T15:58:13Z",
        "author": {
          "login": "livarcocc"
        }
      },
      {
        "body": "Current NuGet tracking issue is https://github.com/NuGet/Home/issues/3660.",
        "createdAt": "2017-08-09T18:01:55Z",
        "updatedAt": "2017-08-09T18:01:55Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "On a similar problem with my machine, I had to reset the below file which was accidentally modified when I was trying to make my assemblies to be on net45 and core api targetting to net45. After that it was not building my solution and started to throw different errors, even after I reverted back everything to target with .net core. Tried deleting VS related cache/settings folders of my local user login, no result, then I was about to uninstall VS2017, before that found the below file had a modified timestamp and somehow got its original content. Now its fine to build and run my original solution which is targetting to .net core.\r\n\r\nC:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Professional\\MSBuild\\Sdks\\Microsoft.NET.Sdk\\build\\Microsoft.PackageDependencyResolution.targets",
        "createdAt": "2017-08-13T03:15:45Z",
        "updatedAt": "2017-08-13T03:15:45Z",
        "author": {
          "login": "se7vanj"
        }
      },
      {
        "body": "Milestone `MSBuild 15.3` is closed since 3 weeks ago and every issue but this one is resolved. Any ideas for when this issue will be resolved? ",
        "createdAt": "2017-09-14T07:49:20Z",
        "updatedAt": "2017-09-14T07:49:20Z",
        "author": {
          "login": "OskarKlintrot"
        }
      },
      {
        "body": "if I understand it correctly, NuGet 4.4 will be part of the VS 2017 15.4 build tools (https://github.com/NuGet/NuGet.Client/pull/1626) and SDK resolution already works when the .NET Core CLI (\"SDK\") is installed.",
        "createdAt": "2017-09-14T09:52:01Z",
        "updatedAt": "2017-09-14T09:52:01Z",
        "author": {
          "login": "dasMulli"
        }
      },
      {
        "body": "@matkoch",
        "createdAt": "2017-09-23T14:17:59Z",
        "updatedAt": "2017-09-23T14:17:59Z",
        "author": {
          "login": "matkoch"
        }
      },
      {
        "body": "Hey guys, been following this issue for a while, after installing the 15.4.1 it seems the issues are still there... Aka, no target restore nor sdk support for the new csproj format... Will we get a fix anytime soon?",
        "createdAt": "2017-10-24T12:45:22Z",
        "updatedAt": "2017-10-24T12:46:05Z",
        "author": {
          "login": "UncleFirefox"
        }
      },
      {
        "body": "Any news on this?",
        "createdAt": "2017-11-14T08:44:16Z",
        "updatedAt": "2017-11-14T08:44:16Z",
        "author": {
          "login": "joakimskoog"
        }
      },
      {
        "body": "I believe this is in now in VS 15.4.\r\n\r\n@AndyGerlicher can we close this now?",
        "createdAt": "2017-11-14T18:02:55Z",
        "updatedAt": "2017-11-14T18:03:06Z",
        "author": {
          "login": "livarcocc"
        }
      },
      {
        "body": "@joakimskoog as @UncleFirefox wrote at https://github.com/NuGet/NuGet.Client/pull/1626#issuecomment-339245174 check if the workloads you selected (cross-platform .net) also pull in the NuGet targets:\r\n\r\n> ![](https://user-images.githubusercontent.com/3224718/31986727-d557ca1a-b969-11e7-9cbe-51ec6f2857b2.png) ",
        "createdAt": "2017-11-14T18:23:12Z",
        "updatedAt": "2017-11-14T18:23:12Z",
        "author": {
          "login": "dasMulli"
        }
      }
    ]
  }
}