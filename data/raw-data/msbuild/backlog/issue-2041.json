{
  "number": 2041,
  "title": "Avoid a first-chance exception in ReferenceTable.cs when it's clearly not an assembly name",
  "body": "In this RAR stack:\r\n```\r\n>\tMicrosoft.Build.Tasks.Core.dll!Microsoft.Build.Tasks.ReferenceTable.TryConvertToAssemblyName Line 735\tC#\r\n \tMicrosoft.Build.Tasks.Core.dll!Microsoft.Build.Tasks.ReferenceTable.SetPrimaryAssemblyReferenceItem Line 540\tC#\r\n \tMicrosoft.Build.Tasks.Core.dll!Microsoft.Build.Tasks.ReferenceTable.SetPrimaryItems Line 496\tC#\r\n \tMicrosoft.Build.Tasks.Core.dll!Microsoft.Build.Tasks.ReferenceTable.ComputeClosure Line 1635\tC#\r\n \tMicrosoft.Build.Tasks.Core.dll!Microsoft.Build.Tasks.ResolveAssemblyReference.Execute Line 2182\tC#\r\n \tMicrosoft.Build.Tasks.Core.dll!Microsoft.Build.Tasks.ResolveAssemblyReference.Execute Line 2903\tC#\r\n \tMicrosoft.Build.dll!Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute Line 632\tC#\r\n\r\n```\r\n\r\nit is possible that finalName is an absolute or relative file path, such as `..\\..\\References\\VisualStudio\\Dev11\\Microsoft.Internal.VisualStudio.Shell.Interop.11.0.DesignTime\\Microsoft.Internal.VisualStudio.Shell.Interop.11.0.DesignTime.dll`\r\n\r\nThis code has a try/catch that tries to read it as an assembly name:\r\n`http://source.dot.net/#Microsoft.Build.Tasks.Core/AssemblyDependency/ReferenceTable.cs,735'\r\n\r\nIt would be quite cheap to check for some invalid chars such as \\ : / that can't appear in an assembly name. If any of those chars are present, skip directly to treating the string as a file name.",
  "state": "OPEN",
  "createdAt": "2017-05-01T23:20:13Z",
  "updatedAt": "2024-02-21T16:36:54Z",
  "closedAt": null,
  "author": {
    "login": "KirillOsenkov"
  },
  "labels": [
    "Area: Tasks",
    "Area: Task: Resolve Assembly References (RAR)",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "This sounds like a great idea. Is there a spec for what constitutes valid name characters? [The docs for `System.Reflection.AssemblyName`](https://msdn.microsoft.com/en-us/library/system.reflection.assemblyname(v=vs.110).aspx) mentions allowing `\\` as an escape character, but it seems to be only in the \"fully qualified name for a class\", which isn't the same thing.",
        "createdAt": "2017-05-02T18:57:14Z",
        "updatedAt": "2017-05-02T18:57:14Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I think it's safe to check for \\, / and : (which will give us enough to filter all file paths, which is what we want).",
        "createdAt": "2017-05-02T22:06:38Z",
        "updatedAt": "2017-05-02T22:06:38Z",
        "author": {
          "login": "KirillOsenkov"
        }
      }
    ]
  }
}