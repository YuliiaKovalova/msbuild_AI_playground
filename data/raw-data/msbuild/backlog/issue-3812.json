{
  "number": 3812,
  "title": "'copy local' references get skipped if they are only used in XAML",
  "body": "(Moved from `roslyn` project [as requested](\r\nhttps://github.com/dotnet/roslyn/issues/25349#issuecomment-41850305).)\r\n\r\nIf a second-level copy local project reference is only used in XAML (i.e., not in compiling code), MSBuild doesn't recognize that it needs to copy it to the output directory.\r\n\r\n### Steps to Reproduce\r\n\r\n1. create a solution with a WPF Windows application project (project **A**)\r\n2. add a WPF class library project (project **B**). Add a project reference so you can use B within A.\r\n3. in project B, reference a library that you will only use from within XAML, such as FontAwesome.WPF in our example. Make sure the library is set to **Copy Local**.\r\n4. in project B, create a user control like this:\r\n\r\n```xml\r\n<UserControl x:Class=\"DatabaseSelection\"\r\n             xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\r\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\r\n             xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" \r\n             xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\" \r\n             xmlns:fa=\"http://schemas.fontawesome.io/icons/\"\r\n             mc:Ignorable=\"d\" \r\n             d:DesignHeight=\"114\" d:DesignWidth=\"450\">\r\n\r\n    <fa:ImageAwesome Icon=\"UserSecret\" Margin=\"1\" />\r\n</UserControl>\r\n```\r\n\r\n5. in project A, use the user control somewhere.\r\n6. compile the solution. This will work.\r\n7. debug or run the solution. This fails.\r\n\r\n### Expected Behavior\r\nIn step 6, MSBuild should recognize that FontAwesome.WPF must be copied to project **A**'s output directory.\r\n\r\n### Actual Behavior\r\nMSBuild incorrectly believes that FontAwesome.WPF isn't actually being used and thus doesn't need copying. As a result, when actually trying to *run* the code, `PresentationFramework` tries and fails to load the library:\r\n\r\n```\r\nSystem.Windows.Markup.XamlParseException: 'Could not load file or assembly 'FontAwesome.WPF, PublicKeyToken=0758b07a11a4f466' or one of its dependencies. The system cannot find the file specified.'\r\n```\r\n\r\n### Workaround\r\nA dummy method somewhere within project **B** causes MSBuild to copy the library. For example:\r\n\r\n```csharp\r\n    private static void _FontAwesome_MSBuildXamlFix()\r\n    {\r\n        /*\r\n         * WORKAROUND\r\n         * we need this method so that FontAwesome.WPF.dll gets copied as part of the build process\r\n         * \r\n         * https://stackoverflow.com/a/18221455/1600\r\n         */\r\n\r\n        var type = typeof(FontAwesome.WPF.FontAwesome);\r\n        Console.WriteLine(type.FullName);\r\n    }\r\n```\r\n\r\n### Environment data\r\n\r\n#### `msbuild /version` output:\r\n\r\n    Microsoft (R) Build Engine version 15.8.169+g1ccb72aefa for .NET Framework\r\n    Copyright (C) Microsoft Corporation. All rights reserved.\r\n    \r\n    15.8.169.51996\r\n\r\n#### OS info:\r\n\r\nVersion 1809 (OS Build 17763.1)\r\n\r\n#### If applicable, version of the tool that invokes MSBuild (Visual Studio, dotnet CLI, etc):\r\n\r\nVS Enterprise 2017 15.8.5",
  "state": "OPEN",
  "createdAt": "2018-10-01T13:25:30Z",
  "updatedAt": "2024-02-21T16:32:43Z",
  "closedAt": null,
  "author": {
    "login": "chucker"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "@rainersigwald i don't know who to talk to about this, but this issue will be absolutely crucial once .NET Core 3.0 arrives. With NET Core 3.0 based WPF project files will be SDK-based, so there will be lots and lots of implications regarding referencing that someone ought to test and verify. Can you communicate this with the .NET Core 3.0 people?\r\n\r\nThe bug reported here is as old as my WPF experience dates - most people choose to use a ghetto-noop statement like this:\r\n```csharp\r\nprivate static void ForceInteractivityTriggersAssemblyToBeResolvedTransitively()\r\n{\r\n    Action<Type> noop = _ => { };\r\n    noop(typeof(System.Windows.Interactivity.EventTrigger));\r\n}\r\n```\r\n\r\nThis sample also gives a common example - Blend SDK - lots of WPF frameworks and apps use interaction triggers to route Controls with event handler but no command binding to the specific ICommand in the datacontext vm.",
        "createdAt": "2018-11-04T14:34:40Z",
        "updatedAt": "2018-11-04T14:36:40Z",
        "author": {
          "login": "MeikTranel"
        }
      }
    ]
  }
}