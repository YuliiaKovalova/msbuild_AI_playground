{
  "number": 9928,
  "title": "OutOfMemory exception on a task not reported for a particular task.",
  "body": "### Context\r\n\r\nInspired by: https://stackoverflow.microsoft.com/questions/394371\r\n\r\nExperience of having a task experiencing OOM:\r\n\r\n```\r\nBuild FAILED.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:19:29.61\r\nMSBUILD : error MSB1025: An internal failure occurred while running MSBuild.\r\nSystem.OutOfMemoryException: Exception of type 'System.OutOfMemoryException' was thrown.\r\n   at System.Text.StringBuilder.ToString()\r\n   at System.IO.StringWriter.ToString()\r\n   at Newtonsoft.Json.Linq.JToken.ToString(Formatting formatting, JsonConverter[] converters)\r\n   at Microsoft.Portal.Framework.ContentPackageGenerator.ContentPackageWriter.WriteDocument[T](PackageEntryPath documentPath, T newDocument, T existingDocument)\r\n   at Microsoft.Portal.Framework.ContentPackageGenerator.ContentPackageWriter.WriteProjectsDocument(EffectiveContentPackageProject projects)\r\n   at Microsoft.Portal.Framework.ContentPackageGenerator.PopulatePackage(ContentPackageWriter contentPackage)\r\n   at Microsoft.Portal.Framework.ContentPackageGenerator.GeneratePackage(IContentStore contentStore, Action`2 logger)\r\n   at Microsoft.Portal.Framework.GenerateContentPackageCore.Generate(ContentPackageGeneratorParameters parameters, Action`2 logger)\r\n   at Microsoft.Portal.Pdc.Core.DxBuild.GenerateContentPackage(DxBuildArgs args, ITaskLoggingHelper loggingHelper, String ContentPackageProjectFileWriterResult)\r\n   at Microsoft.Portal.Pdc.Core.DxBuild.Compile(DxBuildArgs args, ITaskLoggingHelper loggingHelper)\r\n   at Microsoft.Portal.Pdc.Core.DxBuildTask.ExecuteCore()\r\n   at Microsoft.Portal.Framework.PortalTaskBase.Execute()\r\n   at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute()\r\n   at Microsoft.Build.BackEnd.TaskBuilder.<ExecuteInstantiatedTask>d__26.MoveNext()\r\n\r\n```\r\n\r\nExperience of a task experiencing 'traditional exception':\r\n\r\n```\r\nerror MSB4018: The \"TaskThatReturnsDictionaryTaskItem\" task failed unexpectedly.\r\nThis is an unhandled exception from a task -- PLEASE OPEN A BUG AGAINST THE TASK OWNER.\r\nSystem.Exception: Hello there!\r\n   at Microsoft.Build.Engine.UnitTests.TaskThatReturnsDictionaryTaskItem.Execute() in C:\\src\\msbuild\\src\\Build.UnitTests\\BackEnd\\TaskThatReturnsDictionaryTaskItem.cs:line 24\r\n   at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute() in C:\\src\\msbuild\\src\\Build\\BackEnd\\TaskExecutionHost\\TaskExecutionHost.cs:line 561\r\n   at Microsoft.Build.BackEnd.TaskBuilder.<ExecuteInstantiatedTask>d__26.MoveNext() in C:\\src\\msbuild\\src\\Build\\BackEnd\\Components\\RequestBuilder\\TaskBuilder.cs:line 813\r\nDone executing task \"TaskThatReturnsDictionaryTaskItem\" -- FAILED.\r\nDone building target \"Build\" in project \"Temporary45a7acefae06435d83657c9bcf06a0df.csproj\" -- FAILED.\r\nDone building project \"Temporary45a7acefae06435d83657c9bcf06a0df.csproj\" -- FAILED.\r\nBuild FAILED.\r\n```\r\n\r\nThe case 2 is much more informative and actionable\r\n\r\n### Repro steps\r\n\r\n * Edit [`TaskThatReturnsDictionaryTaskItem`](https://github.com/dotnet/msbuild/blob/main/src/Build.UnitTests/BackEnd/TaskThatReturnsDictionaryTaskItem.cs)\r\n * Add `throw new Exception(\"Hello there!\");` into the Execute() method\r\n * Execute/Debug one of the unit tests in [`TaskExecutionHost_Tests`](https://github.com/dotnet/msbuild/blob/main/src/Build.UnitTests/BackEnd/TaskExecutionHost_Tests.cs) (e.g. `TestTaskDictionaryOutputItems`)\r\n * Change the exception in Execution method to `OutOfMemoryException`\r\n * Execute the test again and compare log outputs\r\n\r\n### Details\r\n\r\nWe handle OOM with special care (see https://github.com/dotnet/msbuild/blob/bf82a1313390df2692c23206e0846b205398188b/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs#L861) as it might be dangerous to try to perform some nontrivial processing. Though we should inspect the code and reevaluate - I believe we should be able to log more descritpive error with a low risk (as the mere fact of throwin OOM leads to GC and usually to nontrivial freed-up space)\r\n\r\n\r\n\r\n",
  "state": "CLOSED",
  "createdAt": "2024-03-26T12:38:37Z",
  "updatedAt": "2024-04-05T16:04:26Z",
  "closedAt": "2024-04-05T16:04:26Z",
  "author": {
    "login": "JanKrivanek"
  },
  "labels": [
    "Priority:2",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "JanKrivanek"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Catching an OOM is dangerous indeed--the docs say [you should always call `Environment.FailFast`](https://learn.microsoft.com/dotnet/api/system.outofmemoryexception?view=net-8.0#remarks) in such a handler.\r\n\r\nBut it sure would be nice to have better attribution here. Let's consult with some runtime-team friends before doing anything though.",
        "createdAt": "2024-03-26T13:57:37Z",
        "updatedAt": "2024-03-26T13:57:37Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}