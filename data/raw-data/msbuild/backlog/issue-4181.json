{
  "number": 4181,
  "title": "Unexpandable metadata can crash loggers",
  "body": "_This was reported internally over email._\r\n\r\nReduced repro:\r\n\r\nProject file\r\n```xml\r\n<Project>\r\n <ItemDefinitionGroup>\r\n  <Foo>\r\n   <MetadataFileName>a\\b\\%(Filename).c</MetadataFileName>\r\n  </Foo>\r\n </ItemDefinitionGroup>\r\n <ItemGroup>\r\n  <Foo Include=\"-in &quot;x\\y\\z&quot;\" />\r\n </ItemGroup>\r\n\r\n <Target Name=\"X\" />\r\n</Project>\r\n```\r\n\r\n```\r\ns:\\>msbuild test.proj -bl\r\nMicrosoft (R) Build Engine version 15.9.21+g9802d43bc3 for .NET Framework\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\nC:\\Program Files (x86)\\Microsoft Visual Studio\\Preview\\Enterprise\\MSBuild\\15.0\\bin\\msbuild.exe -bl test.proj\r\nBuild started 2/15/2019 5:37:02 PM.\r\nMSBUILD : error MSB4017: The build stopped unexpectedly because of an unexpected logger failure.\r\nMicrosoft.Build.Exceptions.InternalLoggerException: The build stopped unexpectedly because of an unexpected logger failure. ---> Microsoft.Build.Exceptions.InvalidProjectFileException: Cannot expand metadata in expression \"a\\b\\%(Filename).c\". The item metadata \"%(Filename)\" cannot be applied to the path \"-in \"x\\y\\z\"\". Illegal characters in path.\r\n   at Microsoft.Build.Shared.ProjectErrorUtilities.ThrowInvalidProject(String errorSubCategoryResourceName, IElementLocation elementLocation, String resourceName, Object[] args)\r\n   at Microsoft.Build.Evaluation.Expander`2.MetadataExpander.ExpandMetadataLeaveEscaped(String expression, IMetadataTable metadata, ExpanderOptions options, IElementLocation elementLocation)\r\n   at Microsoft.Build.Evaluation.Expander`2.ExpandIntoStringLeaveEscaped(String expression, ExpanderOptions options, IElementLocation elementLocation)\r\n   at Microsoft.Build.Execution.ProjectItemInstance.TaskItem.GetMetadataEscaped(String metadataName)\r\n   at Microsoft.Build.Execution.ProjectItemInstance.TaskItem.GetMetadata(String metadataName)\r\n   at Microsoft.Build.Logging.BuildEventArgsWriter.Write(ITaskItem item)\r\n   at Microsoft.Build.Logging.BuildEventArgsWriter.WriteItems(IEnumerable items)\r\n   at Microsoft.Build.Logging.BuildEventArgsWriter.Write(ProjectStartedEventArgs e)\r\n   at Microsoft.Build.Logging.BuildEventArgsWriter.Write(BuildEventArgs e)\r\n   at Microsoft.Build.Logging.BinaryLogger.Write(BuildEventArgs e)\r\n   at Microsoft.Build.Logging.BinaryLogger.EventSource_AnyEventRaised(Object sender, BuildEventArgs e)\r\n   at Microsoft.Build.Evaluation.ProjectCollection.ReusableLogger.AnyEventRaisedHandler(Object sender, BuildEventArgs e)\r\n   at Microsoft.Build.Framework.AnyEventHandler.Invoke(Object sender, BuildEventArgs e)\r\n   at Microsoft.Build.BackEnd.Logging.EventSourceSink.RaiseAnyEvent(Object sender, BuildEventArgs buildEvent)\r\n   --- End of inner exception stack trace ---\r\n   at Microsoft.Build.Exceptions.InternalLoggerException.Throw(Exception innerException, BuildEventArgs e, String messageResourceName, Boolean initializationException, String[] messageArgs)\r\n   at Microsoft.Build.BackEnd.Logging.EventSourceSink.RaiseAnyEvent(Object sender, BuildEventArgs buildEvent)\r\n   at Microsoft.Build.BackEnd.Logging.EventSourceSink.RaiseStatusEvent(Object sender, BuildStatusEventArgs buildEvent)\r\n   at Microsoft.Build.BackEnd.Logging.EventSourceSink.RaiseProjectStartedEvent(Object sender, ProjectStartedEventArgs buildEvent)\r\n   at Microsoft.Build.BackEnd.Logging.EventSourceSink.Consume(BuildEventArgs buildEvent)\r\n   at Microsoft.Build.BackEnd.Logging.EventSourceSink.Consume(BuildEventArgs buildEvent, Int32 sinkId)\r\n   at Microsoft.Build.BackEnd.Logging.EventRedirectorToSink.Microsoft.Build.Framework.IEventRedirector.ForwardEvent(BuildEventArgs buildEvent)\r\n   at Microsoft.Build.BackEnd.Logging.CentralForwardingLogger.EventSource_AnyEventRaised(Object sender, BuildEventArgs buildEvent)\r\n   at Microsoft.Build.BackEnd.Logging.EventSourceSink.RaiseAnyEvent(Object sender, BuildEventArgs buildEvent)\r\n```\r\n\r\nThis also reproduces with file or console loggers with verbosity cranked up\r\n\r\n```\r\nMicrosoft (R) Build Engine version 15.9.21+g9802d43bc3 for .NET Framework\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\nC:\\Program Files (x86)\\Microsoft Visual Studio\\Preview\\Enterprise\\MSBuild\\15.0\\bin\\msbuild.exe -v:diag test.proj\r\nBuild started 2/15/2019 5:48:29 PM.\r\nEnvironment at start of build:\r\nALLUSERSPROFILE = C:\\ProgramData\r\n...\r\n\r\nProject \"s:\\test.proj\" on node 1 (default targets).\r\nInitial Properties:\r\n__DOTNET_ADD_32BIT = 1\r\n...\r\n\r\nInitial Items:\r\nFoo\r\n    -in \"x\\y\\z\"\r\nMSBUILD : error MSB4017: The build stopped unexpectedly because of an unexpected logger failure.\r\nMicrosoft.Build.Exceptions.InternalLoggerException: The build stopped unexpectedly because of an unexpected logger failure. ---> Microsoft.Build.Exceptions.InvalidProjectFileException: Cannot expand metadata in expression \"a\\b\\%(Filename).c\". The item metadata \"%(Filename)\" cannot be applied to the path \"-in \"x\\y\\z\"\". Illegal characters in path.\r\n   at Microsoft.Build.Shared.ProjectErrorUtilities.ThrowInvalidProject(String errorSubCategoryResourceName, IElementLocation elementLocation, String resourceName, Object[] args)\r\n   at Microsoft.Build.Evaluation.Expander`2.MetadataExpander.ExpandMetadataLeaveEscaped(String expression, IMetadataTable metadata, ExpanderOptions options, IElementLocation elementLocation)\r\n   at Microsoft.Build.Evaluation.Expander`2.ExpandIntoStringLeaveEscaped(String expression, ExpanderOptions options, IElementLocation elementLocation)\r\n   at Microsoft.Build.Execution.ProjectItemInstance.TaskItem.GetMetadataEscaped(String metadataName)\r\n   at Microsoft.Build.Execution.ProjectItemInstance.TaskItem.GetMetadata(String metadataName)\r\n   at Microsoft.Build.BackEnd.Logging.ParallelConsoleLogger.OutputItems(String itemType, ArrayList itemTypeList)\r\n   at Microsoft.Build.BackEnd.Logging.BaseConsoleLogger.WriteItems(SortedList itemTypes)\r\n   at Microsoft.Build.BackEnd.Logging.ParallelConsoleLogger.WriteItems(BuildEventArgs e, IEnumerable items)\r\n   at Microsoft.Build.BackEnd.Logging.ParallelConsoleLogger.ProjectStartedHandler(Object sender, ProjectStartedEventArgs e)\r\n   at Microsoft.Build.Evaluation.ProjectCollection.ReusableLogger.ProjectStartedHandler(Object sender, ProjectStartedEventArgs e)\r\n   at Microsoft.Build.BackEnd.Logging.EventSourceSink.RaiseProjectStartedEvent(Object sender, ProjectStartedEventArgs buildEvent)\r\n   --- End of inner exception stack trace ---\r\n   at Microsoft.Build.Exceptions.InternalLoggerException.Throw(Exception innerException, BuildEventArgs e, String messageResourceName, Boolean initializationException, String[] messageArgs)\r\n   at Microsoft.Build.BackEnd.Logging.EventSourceSink.RaiseProjectStartedEvent(Object sender, ProjectStartedEventArgs buildEvent)\r\n   at Microsoft.Build.BackEnd.Logging.EventSourceSink.Consume(BuildEventArgs buildEvent)\r\n   at Microsoft.Build.BackEnd.Logging.EventSourceSink.Consume(BuildEventArgs buildEvent, Int32 sinkId)\r\n   at Microsoft.Build.BackEnd.Logging.EventRedirectorToSink.Microsoft.Build.Framework.IEventRedirector.ForwardEvent(BuildEventArgs buildEvent)\r\n   at Microsoft.Build.BackEnd.Logging.CentralForwardingLogger.EventSource_AnyEventRaised(Object sender, BuildEventArgs buildEvent)\r\n   at Microsoft.Build.BackEnd.Logging.EventSourceSink.RaiseAnyEvent(Object sender, BuildEventArgs buildEvent)\r\n```",
  "state": "CLOSED",
  "createdAt": "2019-02-15T23:52:53Z",
  "updatedAt": "2024-02-21T17:09:10Z",
  "closedAt": "2019-04-19T15:52:59Z",
  "author": {
    "login": "rainersigwald"
  },
  "labels": [
    "bug",
    "Area: Debuggability",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "rainersigwald"
      }
    ]
  },
  "milestone": {
    "title": "MSBuild 16.1"
  },
  "comments": {
    "nodes": [
      {
        "body": "The behavior here is different when running on .NET Core, because of the relaxed path-validation code there:\r\n\r\n```\r\n10:56:47.911     1>Initial Items:\r\n                   Foo\r\n                       -in \"x\\y\\z\"\r\n                           MetadataFileName = a\\b\\z\".c\r\n```\r\n\r\nIn that case, `Path.GetFileNameWithoutExtension(\"-in \\\"x\\\\y\\\\z\\\"\")` happily returns `z\"`, which expands just fine. I don't plan to change this behavior difference in the fix for this issue, so you'll see different output with different host runtimes (\ud83d\ude15).",
        "createdAt": "2019-02-19T17:10:02Z",
        "updatedAt": "2019-02-19T17:10:02Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}