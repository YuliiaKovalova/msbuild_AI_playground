{
  "number": 10726,
  "title": "BuildChecks Dogfooding: Collect info from sample repos",
  "body": "### Context\n\nAs part of https://github.com/dotnet/msbuild/issues/10548 we want to invest into dogfooding of buildchecks.\nAs a first step towards it - we need to proactively run and collect issues and perf impact on some sample repos.\n\n### Goals\n\n* Prepare a list of sample repos - ideally 4 bigger ones (e.g. [msbuild](https://github.com/dotnet/msbuild), [roslyn](https://github.com/dotnet/roslyn), [runtime](https://github.com/dotnet/runtime), [sdk](https://github.com/dotnet/sdk)) and 3 average ones (e.g. [templating](https://github.com/dotnet/templating), ~[debugger-contracts](https://github.com/dotnet/debugger-contracts)~ not on .net9, ~[crank](https://github.com/dotnet/crank)~ is on .net8)\n* Run build on those on a choosed version - make sure those are clean of errors. Collect 'wall clock time' perf stats for builds\n* Run the same builds on same versions of the repos with buildcheck opted in (`/check`)\n   * Collect and log the issues\n   * Collect the perfstats\n* Evaluate the perf impact and the blocking issues ",
  "state": "OPEN",
  "createdAt": "2024-09-30T09:57:13Z",
  "updatedAt": "2025-06-02T08:30:25Z",
  "closedAt": null,
  "author": {
    "login": "JanKrivanek"
  },
  "milestone": null,
  "assignees": {
    "nodes": [
      {
        "login": "YuliiaKovalova"
      }
    ]
  },
  "labels": [
    "Priority:2",
    "triaged",
    "Area: BuildCheck"
  ],
  "comments": {
    "nodes": [
      {
        "body": "# Build Check Dogfooding Results\n\n## Related PRs\n- Template Engine: [#8660](https://github.com/dotnet/templating/pull/8660)\n- Extensions: [#5810](https://github.com/dotnet/extensions/pull/5810)\n- SDK: [#45952](https://github.com/dotnet/sdk/pull/45952)\n- Roslyn: [#76756](https://github.com/dotnet/roslyn/pull/76756)\n- Runtime: [#111407](https://github.com/dotnet/runtime/pull/111407)\n- MSBuild: [#11280](https://github.com/dotnet/msbuild/pull/11280)\n\n## Summary of Findings\n- Total repositories analyzed: 6\n- Total issues detected: ~442+ issues (it's a minimum number, because for some of the repos e.g. rolsyn/runtime after enabling buildCheck were unable to finish build)\n- Most common error types: BC0201 and BC0202\n- Common infrastructure issue: \"ContextID XX should have been in the ID-to-project file mapping\" https://github.com/dotnet/msbuild/issues/11326\n- Some issues come from arcade (e.g. 11 BC0201 come from Tools.proj)\n\n## Detailed Analysis by Repository\n\n### Template Engine\n- Total issues: 80\n- Breakdown:\n  - BC0201: 22 issues\n  - BC0202: 37 issues\n  - BC0102: 20 issues\n  - BC0101: 1 issue\n- Performance impact:\n  - Without build check: ~1h 58min\n  - With build check: ~1h 49min\nNo visible perf degradation because CI runs with /bl enabled.\n\n### Extensions\n- Total issues: 50\n- Breakdown:\n  - BC0202: 40 issues\n  - BC0201: 10 issues\n- Notable: Infrastructure errors regarding ContextID mapping\n- Performance impact:\n  - Without build check: ~24 min\n  - With build check: ~22min\nNo visible perf degradation because CI runs with /bl enabled.\n\n### SDK\n- Total issues: 64\n- Breakdown:\n  - BC0201: 27 issues\n  - BC0202: 15 issues\n  - BC0102: 20 issues\n  - BC0101: 2 issues\n- Infrastructure challenges: ContextID mapping issues present\nIt's hard to evaluate the execution time due to the msbuild issue.\n\n### Roslyn\n- Total issues: 67 + 1 bug (https://github.com/dotnet/msbuild/issues/11319)\n- Breakdown:\n  - BC0201: 18 issues\n  - BC0202: 26 issues\n  - BC0102: 18 issues\n  - BC0101: 5 issues\n- No perf impact noticed (they have a separate CI step \"Correctness XXXX\" that represents a quality gate for the build.\n\n### Runtime\n- Total issues: 110+ (exact count unavailable due to build issues)\n- Notable: Widespread ContextID xxx mapping issues (in fact, these are everywhere)\nIt's hard to evaluate the execution time due to the msbuild issue.\n\n### MSBuild\n- Total issues: 71\n- Breakdown:\n  - BC0201: 20 issues\n  - BC0202: 20 issues\n  - BC0102: 20 issues\n  - BC0101: 1 issue\n  - BC0105: 10 issues\n- Performance impact:\n  - Without build check: ~2h 24min\n  - With build check: ~2h 16min\n  - Similar to Template Engine, showing slightly improved execution time with build check enabled\n\n## Common Patterns and Issues\n\n### Error Types Distribution\n1. BC0201: Most prevalent across all repositories\n2. BC0202: Second most common error type\n3. BC0102: Consistently present across multiple repositories\n4. BC0101: Less frequent but present in most repositories\n\n### Performance Impact\n- Contrary to expectations, repositories with complete timing data (Template Engine and MSBuild) showed slight improvements in build times with build check enabled\n- Template Engine: ~9 minute reduction (1h 58min \u2192 1h 49min)\n- MSBuild: ~8 minute reduction (2h 24min \u2192 2h 16min)\nNo visible perf degradation because CI runs with /bl enabled.\n\n### Infrastructure Challenges\n- Consistent ContextID mapping issues across multiple repositories\n- Larger size repositories experiencing build stability issues with the feature enabled\n- Need to investigate for the false positives.\n\n## Impact Assessment\nEnabling build check has successfully identified numerous potential issues across all repositories. While this has led to an increase in reported problems and longer build times, it represents an important step toward improving build quality and catching issues earlier in the development process.\n\n## Future actions\nI would definitely suggest to tackle the problems for the middle-size repos: arcade, extensions, Template engine and based on the results decide how to proceed with the larger ones.\n",
        "createdAt": "2025-01-22T13:00:29Z",
        "author": {
          "login": "YuliiaKovalova"
        }
      },
      {
        "body": "cc: @baronfel ",
        "createdAt": "2025-01-22T15:23:43Z",
        "author": {
          "login": "YuliiaKovalova"
        }
      },
      {
        "body": "The binlog examples used for analysis.\n[BuildCheckLogsExamples.zip](https://github.com/user-attachments/files/18507861/BuildCheckLogsExamples.zip)",
        "createdAt": "2025-01-22T15:32:52Z",
        "author": {
          "login": "YuliiaKovalova"
        }
      },
      {
        "body": "Could you elaborate on how you measured the performance impact please?\n\nI'm curious about how the performance gain came to be as it is rather counter-intuitive:\n  - I understand that the BuildChecks are piggy-backing on the Binlog as they use the same events. Is that accurate?\n    - if yes, then I would expect the overall speed to be ~same.\n    - now the difference in speed isn't too large, but it is consistently better for the Buildcheck run.\n  - was there some sort of refactor/overall improvement done as a part of buildchecks?\n    - if yes, why isn't it speeding up the Binlog only build? Can we maybe achieve that?\n  - across how many runs was the performance measured?\n    - if it was only one run, I'd chalk it up to variance and be perfectly happy\n    - However you're getting this result consistently across multiple repositories which makes this argument harder to make.\n - was there any delay between the buildcheck build and non-build check build?\n   - I would assume the pipeline starts completely clean. Is that always the case?\n - what was the order of runs?\n\nIf there is a performance upgrade, I'm happy. Even then I would like to know why is that happening, if for nothing else than as a learning opportunity.",
        "createdAt": "2025-01-27T13:02:20Z",
        "author": {
          "login": "SimaTian"
        }
      },
      {
        "body": "@SimaTian , the numbers were taken from CI runs.\n\n- Yes, BuildCheck uses the same events as binlogs.\n- BuildCheck was done on the top of existing event models. Can't recall having any optimizations applied (do you @JanKrivanek?)\n- The idea was to prove that for the repos where bin logs collection was already enabled, adding /check switch won't be much noticeable. I took numbers from 2-3 runs.\n- I believe the pipeline starts completely clean.\nIt's not a perf upgrade, the numbers sometimes were better because the build was interrupted due to build checks reporting the errors. \nIt need to be remeasured again once blocking issue is addressed: https://github.com/dotnet/msbuild/issues/11326",
        "createdAt": "2025-01-27T13:32:06Z",
        "author": {
          "login": "YuliiaKovalova"
        }
      },
      {
        "body": "Thank you for the clarification. I was confused by the\n> Similar to Template Engine, showing slightly improved execution time with build check enabled\n\nstatement.",
        "createdAt": "2025-01-27T17:18:00Z",
        "author": {
          "login": "SimaTian"
        }
      },
      {
        "body": "the blocking bugs were fixes, we need to upgrade to the sdk to the one from here: https://github.com/dotnet/arcade/pull/15514/checks?check_run_id=38096577169",
        "createdAt": "2025-03-03T16:48:07Z",
        "author": {
          "login": "YuliiaKovalova"
        }
      },
      {
        "body": "Arcade it on: https://github.com/dotnet/arcade/pull/15514\n",
        "createdAt": "2025-03-18T17:12:17Z",
        "author": {
          "login": "YuliiaKovalova"
        }
      }
    ]
  }
}