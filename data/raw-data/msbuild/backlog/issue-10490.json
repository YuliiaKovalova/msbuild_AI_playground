{
  "number": 10490,
  "title": "[Performance]: BuildEventArgsWriter.WriteProjectItems spends a large % CPU time on CopyOnWriteDictionary",
  "body": "### Issue Description\n\nWhile profiling BinaryReader/Writer, I have noticed a large % of time in creating CopyOnWriteDictionary/ImmutableDictionary.  This event is triggered from LogProjectEvaluationFinished() where it enumerates through all the items and metadata.  This is a lot of data but it should not be as much seen.  The time is spent in creating the list of metadata using CopyOnWriteDictionary/ImmutableDictionary but it discard shortly afterwards.  \r\n\n\n### Steps to Reproduce\n\nI used a medium to large solution of 200-300 projects to run the `clean` target (on an already cleaned build).  This focuses the time spent on Project Evaluations.\r\n\r\nMessage me if you like access to my specific solution.\n\n### Data\n\n\r\n![image](https://github.com/user-attachments/assets/32c32660-9abf-4cb7-b7b7-e01e1e374d36)\r\n![image](https://github.com/user-attachments/assets/a7713122-14c1-4305-b2d2-ba24b4df9dde)\r\n\n\n### Analysis\n\nI have commented out the writer of `foreach (var kvp in item.EnumerateMetadata())` in BuildEventArgsWriter.cs.  The repro improved from 10s to 6s.  It is hard to confirm if 6s is correct final performance, as there are a lot of Lazy or delayed evaluations, but it should be closer to 6s or 7s than 10s.\n\n### Versions & Configurations\n\n_No response_\n\n### Regression\n\n- [ ] yes\n- [X] no\n\n### Regression Details\n\nNo, but it is hard to confirm as this is my first time profiling this code path.",
  "state": "OPEN",
  "createdAt": "2024-08-06T19:50:04Z",
  "updatedAt": "2024-08-13T13:51:21Z",
  "closedAt": null,
  "author": {
    "login": "yuehuang010"
  },
  "labels": [
    "Area: Performance",
    "Priority:3",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "rainersigwald"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": []
  }
}