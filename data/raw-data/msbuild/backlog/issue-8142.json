{
  "number": 8142,
  "title": "Building solutions via CLI and passing targetframework as a global property leads to overbuilds",
  "body": "<!-- This is a template that helps us provide quicker feedback. Please use any relevant sections and delete anything you don't need. -->\r\n\r\n### Issue Description\r\n\r\nWhen invoking msbuild with -property:TargetFramework=XXX (for example net5.0) and the projects in the solution have only\r\na single target framework defined(for example <TargetFramework>net5.0</TargetFramework>), then this will trigger multiple concurrent builds and can cause file access problems\r\n\r\n### Steps to Reproduce\r\n\r\nI've included a simplified projects setup to reproduce the problem.\r\nSee the readme.md in the zip for details about msbuild commandline I used to reproduce the problem. The important part is -property:TargetFramework=net5.0\r\n\r\n[repro.zip](https://github.com/dotnet/msbuild/files/9955182/repro.zip)\r\n\r\n\r\n### Expected Behavior\r\nmsbuild shouldn't build twice the requested configuration even if only a single target framework is defined.\r\n\r\n### Actual Behavior\r\n\r\nE:\\github\\github-sharpmake>\"C:\\Program Files\\Microsoft Visual Studio\\2022\\Professional\\Msbuild\\Current\\Bin\\amd64\\MSBuild.exe\" -nologo -property:TargetFramework=net5.0 -property:Configuration=debug  -maxcpucount -verbosity:m E:\\repro\\consoleapp1\\ConsoleApp1\\ConsoleApp1.sln /t:Rebuild\r\n  ClassLibrary2 -> E:\\repro\\consoleapp1\\ClassLibrary2\\bin\\Debug\\net5.0\\ClassLibrary2.dll\r\n  ClassLibrary2 -> E:\\repro\\consoleapp1\\ClassLibrary2\\bin\\Debug\\net5.0\\ClassLibrary2.dll\r\n  ClassLibrary1 -> E:\\repro\\consoleapp1\\ClassLibrary1\\bin\\Debug\\net5.0\\ClassLibrary1.dll\r\n  ClassLibrary1 -> E:\\repro\\consoleapp1\\ClassLibrary1\\bin\\Debug\\net5.0\\ClassLibrary1.dll\r\n  ConsoleApp1 -> E:\\repro\\consoleapp1\\ConsoleApp1\\bin\\Debug\\net5.0\\ConsoleApp1.dll\r\n\r\nClassLibrary1 and 2 are built twice.\r\n\r\n\r\n### Analysis\r\nNo idea\r\n\r\n### Versions & Configurations\r\nI think the problem can occur on any platform. I've seen build errors caused by this on macos and windows.\r\n\r\nreproduced locally using pretty much latest msbuild. \r\n\r\nMicrosoft (R) Build Engine version 17.2.1+52cd2da31 for .NET Framework\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n17.2.1.25201\r\n\r\nProblem occured on macos when building using dotnet build on github ci(not sure which version)\r\n",
  "state": "OPEN",
  "createdAt": "2022-11-07T20:29:20Z",
  "updatedAt": "2024-01-31T08:15:44Z",
  "closedAt": null,
  "author": {
    "login": "jspelletier"
  },
  "labels": [
    "bug",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Investigation Notes:\r\n\r\nThis is a conflict between the solution build and the projectreference protocol.\r\n\r\nThe solution build is building each project with global property `TargetFramework=foo`, while the projectreference protocol (via ConsoleApp1 -> ClassLib -> ..) specifically undefines `TargetFramework` during the build. This leads to a new evaluation, project instance, and new build.\r\n\r\nAs for a solution, the ideal behavior is clearly that each project only gets built once. The only way to do that would either be to change how TargetFramework is passed during solution builds or changing the P2P protocol.\r\n\r\nAs for a workaround, if you build your projects starting with `ConsoleApp1.csproj`, you don't get any overbuild from the sln. @forgind experimented with adding `RemoveProperties=TargetFramework` to the MSBuild calls in the `.sln.metaproj`, and that worked around this issue but is by no means ideal.\r\n\r\n\r\nSide note: `GetReferenceNearestTargetFrameworkTask` could use more logging. I can see that it's undefining targetframework on projects, but not _why_.",
        "createdAt": "2022-11-10T18:28:52Z",
        "updatedAt": "2022-11-10T18:28:52Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "Hi,\r\n\r\nBut why is there no problems if the projects contains two frameworks versions and don't build any extra projects if I specify a target framework argument on the commandline?\r\n\r\nSadly, I don't think I can use this workaround as the sln contains several projects and some without direct relations to others(plugins) so I must build using the sln.\r\n\r\nHowever, I can remove the target framework argument when we have only a single framework defined in one of the csproj files of the sln but while this workaround works, someone could easily add back the argument in ci scripts without knowing about this and cause random build errors.\r\n\r\nThanks for the quick investigation. Was expecting weeks before someone checks this.",
        "createdAt": "2022-11-10T21:44:56Z",
        "updatedAt": "2022-11-10T21:44:56Z",
        "author": {
          "login": "jspelletier"
        }
      },
      {
        "body": "> But why is there no problems if the projects contains two frameworks versions and don't build any extra projects if I specify a target framework argument on the commandline?\r\n\r\nThis is likely due to the project ref protocol again, but I'm not 100% sure on the details here. I'm assuming you mean your projects have `<TargetFrameworks>foo;bar</>`, and you build via `msbuild /p:targetframework=foo`? Does every project have targetframeworks instead of targetframework?\r\n\r\nI assume this is because of the whole \"inner vs outer build\" logic we have when a project specifies `TargetFrameworks` over `TargetFramework`",
        "createdAt": "2022-11-10T22:23:57Z",
        "updatedAt": "2022-11-10T22:23:57Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "If building a project without the global property TargetFramework set would yield a different result than building with it set (as in this case, since building without it would mean foo;bar, whereas with it, it's just foo) then we have to keep the global property 100% of the time\u2014whether building with the .sln or via ProjectReference. That means it tries to build the same thing twice and exits early.\r\n\r\nIn other words, if you specify multiple TargetFrameworks, then we need to keep the global property.\r\nIf you specify no TargetFramework, then we need to keep the global property.\r\nOnly if you specify one TargetFramework, and it matches the global property can we dispense with it.\r\n\r\nYou happen to be hitting case 3, which is unfortunate. If you add other TargetFrameworks or remove it, I think you'll be ok.",
        "createdAt": "2022-11-10T23:55:24Z",
        "updatedAt": "2022-11-10T23:55:24Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "@BenVillalobos \r\nThe problem that I reported is when the csproj files in the sln have only a single framework version specified. For example,<TargetFramework>net5.0</TargetFramework> and you specify that framework version on the command line. However, if the csproj files have the plural version(TargetFrameworks) there is no problems if the argument is specified to restrict the build to a single framework version.\r\n\r\nMy guess is since this works when <TargetFrameworks>net5.0;net6.0</TargetFrameworks> is used this should be quite easy to fix.\r\n",
        "createdAt": "2022-11-11T14:31:56Z",
        "updatedAt": "2022-11-11T14:31:56Z",
        "author": {
          "login": "jspelletier"
        }
      },
      {
        "body": "The workaround is very straightforward, but the best fix I know of is more complicated and would hurt performance a little.",
        "createdAt": "2022-11-11T17:04:05Z",
        "updatedAt": "2022-11-11T17:04:05Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "I did some digging, turns out the P2P protocol _always_ undefines `TargetFramework ` when a project defines it. The goal there is to avoid an extra evaluation.\r\n\r\nhttps://github.com/dotnet/msbuild/blob/7a8b3369d4c368c01e9790fe26923e10829ca3a4/src/Tasks/Microsoft.Common.CurrentVersion.targets#L1881-L1887\r\n\r\nSo the core problem is solution builds have no concept of the P2P protocol and naively pass whatever global props you tell it to. A possible solution for this would be to have CLI solution builds have an equivalent `GetTargetFrameworks` call to extract information and define/undefine specific global props.\r\n\r\nGiven that this behavior is expected, you've got three options:\r\n- Don't pass TF via command line, and let the build do its thing. Not ideal if you want a specific TF to be built.\r\n- Pass TF via command line, but make sure each project has `TargetFrameworks` defined (even if it just has one TF). Projects that aren't built by the solution are safe to have `TargetFramework` defined.\r\n- Create a separate entrypoint project (a dirs.proj) that you use for CLI builds. This project would have to manually `ProjectReference` each project that would be built, but gets around the naive sln build.",
        "createdAt": "2022-11-11T18:03:39Z",
        "updatedAt": "2022-11-11T18:03:39Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "> Don't pass TF via command line, and let the build do its thing. Not ideal if you want a specific TF to be built.\r\n\r\nWhat downside do you see to this? If you specify a TF in the project file, we'll build it, just the same as if you specify it on the command line. If those two disagree, you're doing something wrong, and it will likely error.",
        "createdAt": "2022-11-11T18:07:34Z",
        "updatedAt": "2022-11-11T18:07:34Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "@Forgind It's not ideal if we're talking about projects with TFs `net5.0;net6.0` defined and you only want one to be built.",
        "createdAt": "2022-11-11T18:11:17Z",
        "updatedAt": "2022-11-11T18:11:17Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "If you have multiple target frameworks, and you specify it on the command line, you don't see this bug. So I see this as:\r\nIf you only have one TF, never specify it on the command line.\r\nIf you have multiple, you can specify it or not as you wish.\r\n\r\nBoth of those should be fully functional setups.",
        "createdAt": "2022-11-11T19:51:00Z",
        "updatedAt": "2022-11-11T19:51:00Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "Right, but the second case doesn't play well with solutions so I renamed the issue to make it more specific.",
        "createdAt": "2022-11-11T21:32:17Z",
        "updatedAt": "2022-11-11T21:32:17Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "I don't know how this is feasible in this codebase but If the non plural TargetFramework is specified in csproj, and a target framework is specified on commandline msbuild should validate the coherence(must be identical to what's in csproj) and display an error if param is different from what is in csproj files. Otherwise, the commandline param should be ignored.",
        "createdAt": "2022-11-14T14:18:59Z",
        "updatedAt": "2022-11-14T14:18:59Z",
        "author": {
          "login": "jspelletier"
        }
      },
      {
        "body": "> msbuild should validate the coherence(must be identical to what's in csproj) and display an error if param is different from what is in csproj files. Otherwise, the commandline param should be ignored.\r\n\r\nI think this is done today as a failure on restoring the project, assuming that project hadn't already been restored via `msbuild /restore /p:TargetFramework=NewTFForThatProject`",
        "createdAt": "2022-11-14T17:05:32Z",
        "updatedAt": "2022-11-14T17:05:32Z",
        "author": {
          "login": "benvillalobos"
        }
      }
    ]
  }
}