{
  "number": 2688,
  "title": "Failure in project reference target framework negotiation when ProjectReference items are duplicated",
  "body": "Build `A.csproj` in the below example.\r\n\r\n**EXPECTED**: Build succeeds\r\n**ACTUAL**:\r\n\r\n> C:\\git\\vstest\\tools\\dotnet\\sdk\\2.2.0-preview1-007460\\Sdks\\Microsoft.NET.Sdk\\build\\Microsoft.PackageDependencyResolution.targets(165,5): Assets file 'C:\\git\\vstest\\src\\Microsoft.TestPlatform.CrossPlatEngine\\obj\\project.assets.json' doesn't have a target for '.NETCoreApp,Version=v1.0'. Ensure that restore has run and that you have included 'netcoreapp1.0' in the TargetFrameworks for your project. [C:\\git\\vstest\\src\\Microsoft.TestPlatform.CrossPlatEngine\\Microsoft.TestPlatform.CrossPlatEngine.csproj]\r\n\r\nThe duplicated `ProjectReference` appears to be interfering with the logic in `_GetProjectReferenceTargetFrameworkProperties` which is supposed to set `SetTargetFramework` on the `AnnotatedProjects`.\r\n\r\n`A.csproj`:\r\n\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFrameworks>net46;netcoreapp1.0;netstandard1.4</TargetFrameworks>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <ProjectReference Include=\"..\\B\\B.csproj\" />\r\n    <ProjectReference Include=\"..\\B\\B.csproj\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\r\n\r\n`B.csproj`:\r\n\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFrameworks>net46;netstandard1.4</TargetFrameworks>\r\n  </PropertyGroup>\r\n\r\n</Project>\r\n```",
  "state": "OPEN",
  "createdAt": "2017-11-01T02:25:32Z",
  "updatedAt": "2025-05-21T18:37:06Z",
  "closedAt": null,
  "author": {
    "login": "dsplaisted"
  },
  "milestone": null,
  "assignees": {
    "nodes": [
      {
        "login": "rainersigwald"
      }
    ]
  },
  "labels": [],
  "comments": {
    "nodes": [
      {
        "body": "@AndyGerlicher I'm not sure how important it is that a project with duplicate references build successfully, but I think we should at least have a good error message.  Right now the failure mode has no relation to the root cause of the problem, and it was very difficult for @nguerrera and I to diagnose it.",
        "createdAt": "2017-11-01T18:25:51Z",
        "author": {
          "login": "dsplaisted"
        }
      },
      {
        "body": "This issue no more repro on windows with latest dotnet cli(.NET Command Line Tools (2.2.0-preview1-007853)). But on Ubuntu it is still causing build failure.\r\n\r\nIt will be very helpful if the error indicates the actual csproj rather than the projects referenced. \r\n ",
        "createdAt": "2017-12-28T08:16:09Z",
        "author": {
          "login": "smadala"
        }
      },
      {
        "body": "Just a note that it is also possible for this to manifest with failure to write to a file in use.",
        "createdAt": "2018-05-02T01:10:06Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "> This issue no more repro on windows with latest dotnet cli(.NET Command Line Tools (2.2.0-preview1-007853)). But on Ubuntu it is still causing build failure.\r\n> \r\n> It will be very helpful if the error indicates the actual csproj rather than the projects referenced.\r\n\r\nWe've just been hitting this as well, really confusing. Our Windows builds were fine when we added a duplicate project reference (one hard-coded in our config - the other generated from other tooling we've built). However, it was failing to resolve properly on linux in our GitHub Actions CI on Ubuntu with `dotnet build` (as it would make it appear as if the reference dll was missing, which it was... [even though we had a project reference to the dependent project]).\r\n\r\nIn case it helps in the future looking at the binlog (attached [msbuild.zip](https://github.com/dotnet/msbuild/files/12243858/msbuild.zip)) it was found as a Project Reference in the evaluation phase here (the Converters/src project):\r\n\r\n![image](https://github.com/dotnet/msbuild/assets/24302614/b0766de2-41ca-42f3-a6fe-c19f78032c11)\r\n\r\nBut then missing in the `ResolveProjectReferences` step:\r\n\r\n![image](https://github.com/dotnet/msbuild/assets/24302614/5dc9f5a9-221e-4653-a918-8a0b59125c9e)\r\n\r\nSo slightly different behavior than the original poster here, but end result of duplicated ProjectReference in project on a dotnet build on linux doesn't work, where same code/setup on Windows has no issues.",
        "createdAt": "2023-08-02T19:16:41Z",
        "author": {
          "login": "michael-hawker"
        }
      },
      {
        "body": "This has larger implications on our workflow than I realized. We need to add the reference in some cases when we're not building everything for local development. However, one of the projects being built may or may not include the same project reference we need for our 'shell'.\r\n\r\nTherefore, we have no way of knowing if a duplicate `ProjectReference` will be added within the target project that we're building around. This of course is fine on Windows locally, but will break when trying to build that single item within Codespaces...",
        "createdAt": "2023-08-03T17:00:03Z",
        "author": {
          "login": "michael-hawker"
        }
      },
      {
        "body": "This sounds like a task for #1777 or #804\r\n\r\nAs an interim, it is possible to write a custom target around `CheckForDuplicateItems` task (need [this fix](https://github.com/dotnet/sdk/issues/35693) though, for correctness) to error on duplicate `ProjectReference`s in a project.",
        "createdAt": "2023-09-26T09:02:56Z",
        "author": {
          "login": "stan-sz"
        }
      },
      {
        "body": "@stan-sz not sure if a linter truly helps.\r\n\r\nIn our case, we're sucking a bunch of different projects together into a larger build, some of them may have references to the same project and need them to build themselves. It's just at the parent level that we're trying to build that now thinks there are multiple references:\r\n\r\n```mermaid\r\ngraph TD;\r\n    A-->B;\r\n    A-->C;\r\n    B-->D;\r\n    C-->D;\r\n```\r\n\r\nSo, we can't remove the reference to D from either B or C as they need it to build.\r\n\r\nAt least I think that's what still going on here and is related to this underlying issue. I'm hitting this locally now trying to build a Windows App SDK/WinUI 3 app and seeing CS1704 An assembly with the same simple name has already been imported.",
        "createdAt": "2024-07-09T23:54:46Z",
        "author": {
          "login": "michael-hawker"
        }
      }
    ]
  }
}