{
  "number": 3097,
  "title": "Compile error when switching between branches from new format back to branch with old format",
  "body": "I'm trying to upgrade some libraries in a big solution, it's a step by step process, one lib at a time, so I'm using a separate branch along the way. When switching back to main branch to do some unrelated work I noticed nothing would compile anymore.\r\n\r\nNote I'm not sure if msbuild is the correct place to file this issue, the error comes from the nuget.target.\r\nPlease let me know where to file otherwise and I'll open an issue there.\r\n\r\n### Steps to reproduce\r\n - Create a new VS project (Class Library, .NET Framework) 4.5.2\r\n - Make sure it compiles, commit changes to git\r\n - create new branch \"convert\" (or whatever)\r\n - delete the assemblyinfo.cs\r\n - Unload project, replace all with\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netstandard2.0</TargetFramework>\r\n  </PropertyGroup>\r\n</Project>\r\n```\r\n- Reload, make sure it compiles\r\n- Commit to this branch\r\n- switch branches back to master (or whatever the branch was)\r\n- Try to compile\r\n- Get angry because it says \r\n```1>C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Professional\\MSBuild\\Microsoft\\NuGet\\15.0\\Microsoft.NuGet.targets(186,5): error : Your project is not referencing the \".NETFramework,Version=v4.5.2\" framework. Add a reference to \".NETFramework,Version=v4.5.2\" in the \"frameworks\" section of your project.json, and then re-run NuGet restore.```\r\n - I thought VS cached something, but even deleting the .vs folder completely and reoping the solution still leaves me unable to compile my project.\r\n - Note that switching to the netstandard branch again compiles fine\r\n\r\nOS info:\r\n\r\nWin 10, VS 15.6.2 Professional\r\n",
  "state": "OPEN",
  "createdAt": "2018-03-16T03:29:27Z",
  "updatedAt": "2024-02-21T16:34:34Z",
  "closedAt": null,
  "author": {
    "login": "chrisaut"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Backlog"
  },
  "comments": {
    "nodes": [
      {
        "body": "I think that deleting the \"obj\" folder should solve that, as it forces a new restore. I think that the problem is that project.assets.json is treated as up-to-date, although it's not, but not sure.",
        "createdAt": "2018-03-16T23:44:03Z",
        "updatedAt": "2018-03-16T23:44:03Z",
        "author": {
          "login": "jp2masa"
        }
      },
      {
        "body": "Yes, deleting the obj folder fixes this. Note specifically its the \"project.assets.json\" file inside there, this gets created as soon as I compile the netstandard version, switching back to regular .NET with this file present triggers this issue.\r\n\r\nPerhaps the simplest solution would be to ensure that a \"Clean\" operation actually deletes this file.",
        "createdAt": "2018-03-17T00:43:32Z",
        "updatedAt": "2018-03-17T00:43:32Z",
        "author": {
          "login": "chrisaut"
        }
      },
      {
        "body": "Not sure, but I think that \"project.assets.json\" is used by UWP projects too, so it can't be always removed, but maybe adding a check for \"project.json\" and removing \"project.assets.json\" if it doesn't exist would work.",
        "createdAt": "2018-03-17T01:21:47Z",
        "updatedAt": "2018-03-17T01:21:47Z",
        "author": {
          "login": "jp2masa"
        }
      },
      {
        "body": "Sorry to bump, but is this something the team is considering fixing or should we just live with it during the upgrading of projects? Should I report this somewhere else?",
        "createdAt": "2018-03-29T00:35:10Z",
        "updatedAt": "2018-03-29T00:35:10Z",
        "author": {
          "login": "chrisaut"
        }
      },
      {
        "body": "I usually just do a `git clean -xdf` after switching past that boundary, which is definitely suboptimal, but I don't think there's an easy way out of this.\r\n\r\n@nguerrera @rohit21agrawal can you think of anything we can do to make this smoother?",
        "createdAt": "2018-03-29T14:34:03Z",
        "updatedAt": "2018-03-29T14:34:03Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@chrisaut  doing a rebuild should also trigger a new restore as far as I remember",
        "createdAt": "2018-03-29T17:37:45Z",
        "updatedAt": "2018-03-29T17:37:45Z",
        "author": {
          "login": "rohit21agrawal"
        }
      },
      {
        "body": "@rohit21agrawal Unfortunatly not, doing a rebuild does not fix it. That's pretty much the first thing I tried. The user has to figure out that the project.assets.json is to blame and manually delete the file every time they switch branches.\r\n\r\nEdit: I've published the repo project here https://github.com/chrisaut/projupgraderepo\r\nIf you switch between the two branches, master will not build anymore until you delete project.assets.json\r\n\r\nFor me personally, now that I know what the culprit is I have simply written a bat file to recursively delete the file in all projects when needed, so it's not an urgent matter. It's just annoying, I'm sure, for others that run into this.",
        "createdAt": "2018-03-30T02:24:47Z",
        "updatedAt": "2018-03-30T02:29:43Z",
        "author": {
          "login": "chrisaut"
        }
      },
      {
        "body": "Been using this in `.git/hooks/post-checkout` which automatically deletes project.assets.json when you switch branches:\r\n\r\n\t#!/bin/sh\r\n\t# Args:\r\n\t#   $1: Ref of previous HEAD\r\n\t#   $2: Ref of new HEAD\r\n\t#   $3: Whether this is a file checkout (0) or branch checkout (1)\r\n\r\n\t# if this is a file checkout \u2013 do nothing\r\n\tif [ \"$3\" == \"0\" ]; then exit; fi\r\n\r\n\tfind -maxdepth 3 -type f -path \"*/obj/project.assets.json\" -delete\r\n\r\nYou might need to tweak `-maxdepth` according to how deeply you nest projects",
        "createdAt": "2019-10-05T10:41:06Z",
        "updatedAt": "2019-10-05T10:41:06Z",
        "author": {
          "login": "duncansmart"
        }
      },
      {
        "body": "We are having the same issue.  However, it's not just the \"obj\" folder.  It is also other items like projects in the solution that are left behind.  We are moving some legacy applications from VB.NET to C# and .NET Core and switching between branches causes the error in reported above but also leaves the local folder with mixed C# and VB folders.  We are using Azure Repos and Visual Studio 2019.\r\n\r\nExample:\r\n1. Create a new branch from existing VB solution that contains more than one projects.\r\n2. Check out the new branch\r\n3. Replace with C# files and remove outdated projects in solution.\r\n4. Check in.\r\n5. Checkout old VB branch - Error same as above regarding \"obj\" folder.\r\n6.  Switch back (check out) to new branch (1. above).\r\n7. Local folder now contains extra projects that were not removed during the check-out process.\r\n   In this case, the left over projects are from the VB branch that should have been removed when checking out C# branch.\r\n\r\nOur expectation on \"check-out\" between different branches that all files would be removed before the new branch is loaded.\r\nOur work around for now is to create a new repository instead of new branches.\r\n\r\nThanks\r\n\r\n\r\n",
        "createdAt": "2020-07-28T18:35:09Z",
        "updatedAt": "2020-07-28T18:35:09Z",
        "author": {
          "login": "yorkadam"
        }
      }
    ]
  }
}