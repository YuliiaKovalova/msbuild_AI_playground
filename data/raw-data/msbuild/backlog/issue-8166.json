{
  "number": 8166,
  "title": "Project targeting .NET 6 cannot use Microsoft.Build 17.4.0 nuget package.",
  "body": "I have a general question, \r\n\r\nMy project is targeting .NET 6, I won't be able to retarget it to the .NET 7 at least for a year.  \r\n\r\nI saw available updates for Microsoft.Build nuget package, but the new version of the package doesn't have [target](https://www.nuget.org/packages/Microsoft.Build#supportedframeworks-body-tab) for .NET 6. The net48 was used instead (with warnings).\r\n\r\nShould I stay on 17.3.2 ? The .NET 6 will be supported until November 2024, in case of any issue (e.g security) is there a plan to release a new 17.3.X version or I will be forced to retarged to the .NET 7?\r\n\r\nThanks",
  "state": "OPEN",
  "createdAt": "2022-11-15T13:22:47Z",
  "updatedAt": "2025-03-11T14:49:54Z",
  "closedAt": null,
  "author": {
    "login": "KubaOczko"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "needs-design",
    "triaged",
    "Area: MSBuildLocator"
  ],
  "comments": {
    "nodes": [
      {
        "body": "> Should I stay on 17.3.2 ?\r\n\r\nThat depends on what you're using MSBuild for. Can you describe what your project does? For instance, is it defining a task or a logger assembly? Is it using the API to evaluate or build projects?\r\n\r\nIf you want to be able to load and build projects that use the .NET 7 SDK, you must be on the .NET 7 runtime yourself (because that's a requirement for loading/using the SDK).\r\n\r\n> in case of any issue (e.g security) is there a plan to release a new 17.3.X version or I will be forced to retarged to the .NET 7?\r\n\r\nIn the event of a security issue, all supported versions of MSBuild will be updated. For MSBuild, NuGet package reference updates are generally less important than updating SDK/Visual Studio instances, because the package is generally used only at compile time--at runtime, the MSBuild assemblies should be provided by the host (if you have a task or logger), or located by MSBuildLocator. Of course, that's not to say that you shouldn't update if we issue an update :)",
        "createdAt": "2022-11-15T14:44:17Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> That depends on what you're using MSBuild for. Can you describe what your project does? For instance, is it defining a task or a logger assembly? Is it using the API to evaluate or build projects?\r\n\r\nWe are using the following classes from the package\r\n\r\n[SolutionFile](https://learn.microsoft.com/en-us/dotnet/api/microsoft.build.construction.solutionfile?view=msbuild-17-netcore)\r\n[ProjectInSolution ](https://learn.microsoft.com/en-us/dotnet/api/microsoft.build.construction.projectinsolution?view=msbuild-17-netcore)\r\n\r\nIt's used within our build pipeline to clean-up  a development source from the public one...\r\n\r\nTBH I don't understand what are the rules that define whether or not a package will be valid for the currently supported project (net6) within the dotnet ecosystem. All other packages generated from this repo are fine, thanks to the netstandard target. \r\n\r\nIt's not related just to this repo, we are seeing many issues across the dotnet repos/packages regarding nuget package targeting after the net7 release.  \r\n\r\nWe are building a framework based on the dotnet, so we are more in a B2B position, and we can't drop the net6 support easily...\r\n",
        "createdAt": "2022-11-15T20:04:52Z",
        "author": {
          "login": "KubaOczko"
        }
      },
      {
        "body": "@rainersigwald FWIW for .NET 8 we support three versions of modern .NET in dotnet/runtime libraries packages.\r\n- NetCoreAppCurrent (net8.0)\r\n- NetCoreAppPrevious (net7.0)\r\n- NetCoreAppMinimum (net6.0)\r\n\r\nWe build, package and ship all three versions intentionally to a) satisfy source build (always target the very latest) and b) \r\nsupport LTS and STS customers as those runtimes are still in support when we ship .NET 8.\r\n\r\nFor .NET 7 we included the net6.0 asset in the package as .NET 6 (LTS) was still in support when we shipped.\r\n\r\nWith the upcoming \"VMR - Virtual Monolithic Repository\" and source build constraints, we will likely aim for something similar to what we have in runtime (just with refined names) and then just filter out TFMs during a vertical source build, so that only `NetCoreAppCurrent` and `netstandard2.0` remain in projects.",
        "createdAt": "2022-12-01T08:08:31Z",
        "author": {
          "login": "ViktorHofer"
        }
      },
      {
        "body": "@ViktorHofer Our situtation is a bit different because we're not \"just a library\"; instead using our API is more like \"getting access to a build environment\". And that build environment is packaged with and expects a specific runtime--.NET SDK 7.0.100 cannot run on the .NET 6.0 runtime. So if you want to use APIs that are new to MSBuild-packaged-in-.NET-SDK-8.0, you must run on .NET 8. I don't think it makes sense to package a net6 version of MSBuild with those new APIs because you couldn't use them.",
        "createdAt": "2022-12-01T15:30:49Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Hey, \r\n\r\nwe're actually facing a simular issue in https://github.com/dspace-group/dscom/pull/155 .\r\n\r\nWe could actually narrow it down to a - from my point of view - NuGet misbehavior. - Well, ok, NuGet behaves correctly, but the specification of this concrete NuGet Package is questionable.\r\n\r\nThe NuGet package is shipped with five Assemblies, two in the lib folder marking runtime and compile time dependencies, three in the refs repository marking compile-time only dependencies according to https://learn.microsoft.com/en-us/nuget/create-packages/creating-a-package#create-the-nuspec-file . \r\n\r\nOur unit tests targets net6 and net48. So when running dotnet restore, the project.assets.json will be generated for net48 having two references - a runtime and a compile-time dependency. For net6, only a compile-time dependecy to .NET Standard will be generated leading to a FileNotFoundException at runtime.\r\n\r\nAt regular runtime, this will actually not affect behavior of the task, since the assembly will be loaded and provided by the MsBuild installation at run-time. Hence, for assemblies only relying on the .NET Standard interface of the task, the compile-time will succeed.\r\n\r\nAs a matter of fact, .NET Standard was the right solution outside of Multi-Targetting builds. In these days, it is only confusing.\r\n\r\nAs @rainersigwald mentioned:\r\n> So if you want to use APIs that are new to MSBuild-packaged-in-.NET-SDK-8.0, you must run on .NET 8. I don't think it makes sense to package a net6 version of MSBuild with those new APIs because you couldn't use them.\r\n\r\nI apparently do agree.\r\n\r\nBUT: Due to the described behavior, it is not detectable whether this package must be run with .NET 7 or .NET 6, as it complies to .NET Standard 2.0, which is fulfilled by .NET 6.\r\n\r\nFrom my point of view, there are three ways of dealing with this issue:\r\n\r\n1. Ignore all updates of dependencies. (Heavily not recommended and just for the sake of completeness).\r\n2. Give `dotnet restore` the ability to ignore netstandard compliant packages and face only runtime-compliant packages.\r\n3. For this particular case: Drop the .NET Standard 2.0 compatibility of the package, as it is [heavily misleading](https://andrewlock.net/stop-lying-about-netstandard-2-support/).\r\n\r\n@rainersigwald @ViktorHofer What is your opinion on this?",
        "createdAt": "2023-03-14T12:18:13Z",
        "author": {
          "login": "carstencodes"
        }
      }
    ]
  }
}