{
  "number": 29,
  "title": "Rewriting of msbuild files",
  "body": "I have run into this problem many times. I am not sure if its in the shared libs from msbuild or in visual studio. But when you for instance use wildcards and then write back a project file the wildcard gets replaced with a list of files (currently matching the wildcards) when you open and save with Visual Studio.\n\nNot sure where this code may be, if someone can point me to it I would be happy to investigate, create some unit tests, and likely send a PR\n\nCheers,\n\nGreg\n",
  "state": "CLOSED",
  "createdAt": "2015-03-20T13:11:17Z",
  "updatedAt": "2024-02-21T17:32:08Z",
  "closedAt": "2016-11-16T20:26:43Z",
  "author": {
    "login": "gregoryyoung"
  },
  "labels": [
    "help wanted",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "AFAIK it is Visual Studio that rewrites project files on load... Nothing we\ncan do from here :(\n\nRafael Teixeira\nO..:.)oooo\n\nOn Fri, Mar 20, 2015 at 10:11 AM, Greg Young notifications@github.com\nwrote:\n\n> I have run into this problem many times. I am not sure if its in the\n> shared libs from msbuild or in visual studio. But when you for instance use\n> wildcards and then write back a project file the wildcard gets replaced\n> with a list of files (currently matching the wildcards) when you open and\n> save with Visual Studio.\n> \n> Not sure where this code may be, if someone can point me to it I would be\n> happy to investigate, create some unit tests, and likely send a PR\n> \n> Cheers,\n> \n> Greg\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/Microsoft/msbuild/issues/29.\n",
        "createdAt": "2015-03-20T13:23:09Z",
        "updatedAt": "2015-03-20T13:23:09Z",
        "author": {
          "login": "monoman"
        }
      },
      {
        "body": "Related uservoice thread: https://visualstudio.uservoice.com/forums/121579-visual-studio/suggestions/4512873-vs-ide-should-support-file-patterns-in-project-fil\n",
        "createdAt": "2015-03-20T13:23:32Z",
        "updatedAt": "2015-03-20T13:23:32Z",
        "author": {
          "login": "shalupov"
        }
      },
      {
        "body": "I figured the code that did it could quite likely actually be in the\nmsbuild shared libraries that I believe VS actually uses?\n\nIts also totally possible it just uses that model and transforms from one\nto another.\n\nOn Fri, Mar 20, 2015 at 3:23 PM, Leonid Shalupov notifications@github.com\nwrote:\n\n> Related uservoice thread:\n> https://visualstudio.uservoice.com/forums/121579-visual-studio/suggestions/4512873-vs-ide-should-support-file-patterns-in-project-fil\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/Microsoft/msbuild/issues/29#issuecomment-84016737.\n\n## \n\nStudying for the Turing test\n",
        "createdAt": "2015-03-20T13:24:53Z",
        "updatedAt": "2015-03-20T13:24:53Z",
        "author": {
          "login": "gregoryyoung"
        }
      },
      {
        "body": "Most of the time, Visual Studio just uses the MSBuild APIs when interacting with MSBuild project files.  (Or e.g. shims created for the purpose of exposing the MSBuild APIs as COM-visible to native code project systems, which generally just pass through to the underlying MSBuild API). \n\nThe code that controls this will likely be somewhere in the Evaluation model (Microsoft.Build.Evaluation namespace, mostly in XMakeBuildEngine\\Definition and \\Evaluation).  Construction model is the other one that hosts use a lot for project manipulation, but since it's a very thin wrapper over the XML it doesn't try to do anything clever. \n\nI'd probably start looking at the Project.Add\\* and Remove\\* helper methods (XMakeBuildEngine\\Definition\\Project.cs), since IIRC those do clever things to try and convert \"add this logical item\" to \"this is the XML manipulation necessary\". \n\n(I have this very dim recollection that we have some wildcard checks in place to handle them gracefully on add, but not on remove, and that the latter was generally the root of the explosion problem, but I may be misremembering. :) )\n",
        "createdAt": "2015-03-20T20:04:20Z",
        "updatedAt": "2015-03-20T20:04:20Z",
        "author": {
          "login": "sarajoiner"
        }
      },
      {
        "body": "I wrote that code originally. It's likely by design, but of course feel free to change it as this was 10 years ago. \n\nIf I remember what it is supposed to do when there is an add, is to not modify the project if the add would be included by the wildcard anyway. So if you include src*.cs quite often MSbuild wouldn't edit it. That should still happen, if it's not then it's a regression and then it would be irritating and worth a fix for sure.\n\nIf there is a remove, it never adds Exclude for it -- as that could become messy. Instead it blows the wildcard up, and pulls that entry out. I can't remember whether it optimizes for the case where the file is deleted on disk as well, and not changing the project in that situation. Maybe it doesn't, since it doesn't get told.\n",
        "createdAt": "2015-03-21T00:31:33Z",
        "updatedAt": "2015-03-24T16:15:16Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "MSBuild team triage: We would consider this change with proper unit test coverage. This isn't a priority for us at the moment.\n",
        "createdAt": "2015-03-31T22:56:57Z",
        "updatedAt": "2015-03-31T22:56:57Z",
        "author": {
          "login": "AndyGerlicher"
        }
      },
      {
        "body": "@danmosemsft thanks for the background on this makes sense on the save of a removed item as well.\n",
        "createdAt": "2015-03-31T22:58:45Z",
        "updatedAt": "2015-03-31T22:58:45Z",
        "author": {
          "login": "gregoryyoung"
        }
      },
      {
        "body": "Visual Studio 2017 will be adding support for preserving wildcard items for .NET Core projects.  This means when your project has:\n\n``` xml\n<ItemGroup>\n    <Compile Include=\"**\\*.cs\" />\n</ItemGroup>\n```\n\nVisual Studio will leave the wildcard in your project when saving.\n\nI'm going to close this for now since the functionality is in Visual Studio.  We'll work with them about lighting up wildcard include support for full framework projects.\n",
        "createdAt": "2016-11-16T20:26:43Z",
        "updatedAt": "2016-11-16T20:26:43Z",
        "author": {
          "login": "jeffkl"
        }
      }
    ]
  }
}