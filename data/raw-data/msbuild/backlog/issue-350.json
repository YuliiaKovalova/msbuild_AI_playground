{
  "number": 350,
  "title": "Switch to csc satellite assembly generation for all projects",
  "body": "In order to build corefx repo using .Net Core version of msbuild, we require al.exe to run in .NetCore since we need to generate satellite assemblies. Today, if you try to build a project that needs this task will fail when trying to load it. There should be a workaround for the time being to disable the task from running, and once Al.exe is converted to net core it should be re-added back.\n\nFor this, I've used the .NetCore msbuild produced by https://github.com/dsplaisted/msbuild/tree/netcore-selfbuild\n",
  "state": "OPEN",
  "createdAt": "2015-11-16T19:50:32Z",
  "updatedAt": "2025-02-16T11:08:39Z",
  "closedAt": null,
  "author": {
    "login": "joperezr"
  },
  "milestone": {
    "title": "VSNext"
  },
  "assignees": {
    "nodes": []
  },
  "labels": [
    ".NET Core",
    "backlog",
    "triaged"
  ],
  "comments": {
    "nodes": [
      {
        "body": "cc @dsplaisted \n",
        "createdAt": "2015-11-16T19:51:05Z",
        "author": {
          "login": "joperezr"
        }
      },
      {
        "body": "It looks like this was needed for localization.  @weshaggard, what are your plans around enabling localization?  Will you need an equivalent to AL.exe on NET Core?\n",
        "createdAt": "2015-11-17T06:41:40Z",
        "author": {
          "login": "dsplaisted"
        }
      },
      {
        "body": "At this point we don't plan to ship satellite assemblies for RTM but we will eventually need support for producing them.\n",
        "createdAt": "2015-11-17T21:17:53Z",
        "author": {
          "login": "weshaggard"
        }
      },
      {
        "body": "@weshaggard Who needs to deliver xplat and .NET Core version of AL.exe's functionality?\n",
        "createdAt": "2015-11-17T21:41:20Z",
        "author": {
          "login": "dsplaisted"
        }
      },
      {
        "body": "That is a good question which I don't actually know an answer to at this point. I don't even know anything about AL.exe right now. \n",
        "createdAt": "2015-11-17T21:44:00Z",
        "author": {
          "login": "weshaggard"
        }
      },
      {
        "body": "@jaredpar",
        "createdAt": "2017-10-12T22:11:11Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "IMHO, we should move the Csc-based satellite assembly generation down into common targets. AL.exe is effectively abandoned, bugs like #1490 will never get fixed.\r\n\r\n",
        "createdAt": "2018-10-26T20:25:28Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "That seems reasonable to me, and 16.0/3.0 like a pretty good time for it, if we can fit it in.",
        "createdAt": "2018-10-26T20:29:39Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I don't believe this issue belongs in the msbuild repo given that AL.exe is not really owned by us. Now that we have dotnet/winforms, moving the issue there, I think that's the right repo.",
        "createdAt": "2019-03-13T22:47:29Z",
        "author": {
          "login": "livarcocc"
        }
      },
      {
        "body": "This issue was moved to dotnet/winforms#586",
        "createdAt": "2019-03-13T22:47:57Z",
        "author": {
          "login": "livarcocc"
        }
      },
      {
        "body": "AL is owned by @jaredpar's team, not winforms. ",
        "createdAt": "2019-03-13T22:49:08Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "Nothing is ever getting fixed in AL. We have the power to do what I suggested above in https://github.com/Microsoft/msbuild/issues/350#issuecomment-433533045",
        "createdAt": "2019-03-13T22:49:51Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "What options are available for doing satellite assembly generation cross platform? The [Create satellite assemblies for .NET apps](https://docs.microsoft.com/en-us/dotnet/core/extensions/create-satellite-assemblies) documentation steers us toward using al.exe.\r\n\r\nI am creating a dotnet tool that can be used to compile satellite assemblies. Ideally, there would be a NuGet package I can import to generate the assemblies similar to the command:\r\n\r\n```c#\r\nal -target:lib -culture:de -out:Example.resources.dll -template:Example.dll -embed:de.res  -embed:feature1.de.res -embed:feature2.de.res -keyfile:key.snk\r\n```\r\n\r\nIt is not particularly complicated, we are not even delay signing.\r\n\r\nThe title of this issue indicates to switch to using csc.exe. Is this included in the .NET 6 SDK? If so, where can it be found?\r\n\r\nWe don't have an issue with creating a `.csproj` file in order to use dotnet build and `new Process()` to pull this off (since we depend on the SDK anyway), I am just trying to figure out the right angle of attack to approach the issue.",
        "createdAt": "2022-03-21T19:13:26Z",
        "author": {
          "login": "NightOwl888"
        }
      },
      {
        "body": "> import to generate the assemblies similar to the command:\n> \n> al -target:lib -culture:de -out:Example.resources.dll -template:Example.dll -embed:de.res  -embed:feature1.de.res -embed:feature2.de.res -keyfile:key.snk\n\n```xml\n<Exec Command=\"\n&quot;$(DOTNET_HOST_PATH)&quot; &quot;$(RoslynTargetsPath)/bincore/csc.dll&quot; -target:library\n-culture:de -out:Example.resources.dll -embed:de.res -embed:feature1.de.res\n-embed:feature2.de.res -keyfile:key.snk\" />\n```\nin some post-build target",
        "createdAt": "2025-02-16T11:08:37Z",
        "author": {
          "login": "kasperk81"
        }
      }
    ]
  }
}