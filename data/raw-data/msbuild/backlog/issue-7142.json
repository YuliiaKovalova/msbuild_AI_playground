{
  "number": 7142,
  "title": "Remove TargetOutputItemsInstanceEnumeratorProxy",
  "body": "Similar to https://github.com/dotnet/msbuild/issues/6176 and the fix https://github.com/dotnet/msbuild/pull/7117 there is another place where we have an enumerator proxy to wrap items returned by targets.\r\n\r\nWe should investigate removing the enumerator proxy if it's not needed.\r\n\r\nHere's the declaration:\r\nhttps://github.com/dotnet/msbuild/blob/a59d7a533c9154e8aa99b823625e7eff199ddf1a/src/Build/BackEnd/Components/Logging/TargetLoggingContext.cs#L116-L168\r\n\r\nHere's where `BinaryLogger` has a fast path to \"unwrap\" it:\r\nhttps://github.com/dotnet/msbuild/blob/a59d7a533c9154e8aa99b823625e7eff199ddf1a/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs#L744-L753\r\n\r\nAlso see related:\r\nhttps://github.com/dotnet/msbuild/issues/6704\r\n\r\nRight now the collections that store the properties and items during the build are a weird combination of mutable, copy on write and immutable. Since items aren't truly immutable, we have the bug above where we capture the live data structure for logging instead of capturing an immutable snapshot. If the core data structures are truly immutable, we can give an immutable snapshot to loggers without any copying whatsoever, this will also avoid allocations.\r\n\r\nThe reason it is a problem is when we get a reference to the live collection, logging is asynchronous. The new `BuildEventArgs` object is added to a queue, and on another thread asynchronously it's being either sent to the main node or placed into the other queue for the loggers. In the main node, when a serialized `BuildEventArgs` comes in, it is deserialized and placed into a queue to dispatch to loggers. The problem arises when we capture the items live collection to log during task execution:\r\n\r\nhttps://source.dot.net/#Microsoft.Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/ItemGroupLoggingHelper.cs,5eb3bbf5a68d102b,references\r\n\r\nBy the time the `BuildEventArgs` is ready to be serialized and processed, the underlying items may have changed already (as the task may have mutated the items), so we don't log the exact values that were captured when the `TaskParameterEventArgs` was created. Had that items collection been a truly immutable snapshot, this wouldn't have happened. Also in that case there's no need to wrap or copy on write since the loggers wouldn't be able to change the items anyway.",
  "state": "OPEN",
  "createdAt": "2021-12-10T22:51:39Z",
  "updatedAt": "2024-02-21T16:28:14Z",
  "closedAt": null,
  "author": {
    "login": "KirillOsenkov"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": []
  }
}