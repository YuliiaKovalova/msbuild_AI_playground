{
  "number": 4696,
  "title": "Cannot change AssemblyName property on command line",
  "body": "From what I found out, -p properties are set recuresively in referenced projects. AssemblyName also changes ProjectId for all referenced projects, which makes restore fail and although build may still suceed, running the project ends in unknown types, because the library cannot be found.\r\n\r\n### Steps to reproduce\r\n\r\nCommand line\r\n```\r\ndotnet new console -n Project1\r\ndotnet new classlib -n Project2\r\ndotnet add Project1 reference Project2\r\ndotnet msbuild -r -p:AssemblyName=foo Project1\r\n\r\n```\r\n### Expected  behavior\r\n\r\nThe project compiles normally.\r\n\r\n### Actual behavior\r\n\r\n```\r\nC:\\Program Files\\dotnet\\sdk\\2.2.401\\NuGet.targets(123,5): error : Ambiguous project name 'foo'. [C:\\Users\\David\\Documents\\Sandbox\\MsBuild\\Project1\\Project1.csproj]\r\n\r\n```\r\n\r\n### Environment data\r\n`dotnet msbuild /version` output:\r\n```\r\nMicrosoft (R) Build Engine version 16.2.32702+c4012a063 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n16.200.19.32702\r\n```\r\nOS info:\r\nWindows 10\r\n```\r\nMajor  Minor  Build  Revision\r\n-----  -----  -----  --------\r\n10     0      18362  0\r\n```\r\nIf applicable, version of the tool that invokes MSBuild (Visual Studio, dotnet CLI, etc):\r\ndotnet",
  "state": "CLOSED",
  "createdAt": "2019-09-05T12:43:58Z",
  "updatedAt": "2024-02-21T17:07:14Z",
  "closedAt": "2022-11-14T20:38:20Z",
  "author": {
    "login": "mladedav"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Discussion"
  },
  "comments": {
    "nodes": [
      {
        "body": "> -p properties are set recuresively in referenced projects\r\n\r\nThat's correct; doing this on the command line sets a [global property](https://docs.microsoft.com/en-us/visualstudio/msbuild/msbuild-properties?view=vs-2019#global-properties), which is inherited by all referenced projects by default. It's possible to set metadata on the `ProjectReference` items to tell the `MSBuild` task to avoid passing a specific property down, but I would not recommend making such a change to your projects for this problem.\r\n\r\nCan you elaborate about why you want to do this? There may be a different way to accomplish your goal.",
        "createdAt": "2019-09-09T21:03:49Z",
        "updatedAt": "2019-09-09T21:03:49Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "We would like to automatically build a dotnet core application and create a docker image around it. We need the name of the built assembly to put it in the CMD in docker. Unfortunately the AssemblyName is created with variables from different files and parsing it does not seem like an easy task. I had hoped to change just the AssemblyName for the entrypoint library.\r\n\r\nThe solution is built locally (because of a private NuGet feed), so the property cannot be changed before the build in docker. The whole solution could be potentially copied locally, but doing that just to change a single property in a single project file does not seem like a good solution to me either).\r\n\r\nCurrently we parse the output of dotnet publish to obtain the dll name, but again, I had hoped there would be a better approach.\r\n\r\nThank you for mentioning the global properties, I think I understand the issue now.",
        "createdAt": "2019-09-10T09:42:41Z",
        "updatedAt": "2019-09-10T09:42:41Z",
        "author": {
          "login": "mladedav"
        }
      },
      {
        "body": "Hi did you find any solution for this? I have a similar need of dotnet project automation and can't figure out how to find resulting dll file name. If I try using property injection, it affect the assemblyname at solution level and messes up the build. Please share your approach if you remember it. Thanks in advance.",
        "createdAt": "2022-11-04T14:52:22Z",
        "updatedAt": "2022-11-04T14:52:22Z",
        "author": {
          "login": "mohite-abhi"
        }
      },
      {
        "body": "we ended up partly parsing stdout from dotnet publish.",
        "createdAt": "2022-11-10T14:16:28Z",
        "updatedAt": "2022-11-10T14:16:28Z",
        "author": {
          "login": "mladedav"
        }
      },
      {
        "body": "What I would suggest that folks do is create a target that would run after the `Publish` target, then use the value of the already-computed MSBuild properties for the AssemblyName (and perhaps others like `TargetFile`, etc) to accurately track any changes to the project names and outputs.  You can see an example of this in the [dotnet/sdk-container-builds](https://github.com/dotnet/sdk-container-builds/blob/main/packaging/build/Microsoft.NET.Build.Containers.targets#L72-L77) repo, where we package projects into containers after publishing doing just this process.",
        "createdAt": "2022-11-10T14:50:16Z",
        "updatedAt": "2022-11-10T14:50:16Z",
        "author": {
          "login": "baronfel"
        }
      }
    ]
  }
}