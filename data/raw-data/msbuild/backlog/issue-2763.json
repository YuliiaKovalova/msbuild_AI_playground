{
  "number": 2763,
  "title": "Multitarget Issues: Msbuild doesn't work.  Visual Studio Build works but shouldn't.",
  "body": "### Steps to reproduce\r\n\r\nI created a multitarget library in VS 2017 using the SDK style csproj.  It include netstandard16, net35, portability profile24 (net45 and sl5).   I used DefineConstants to make a flag to turn off some of the properties in the AssemblyInfo.file in the portability target\r\n\r\nEverything was building in VS, but I could not get it to build with msbuild from the command line \\ TeamCity.  \r\nThe error was: \r\n```\r\nC:\\Program Files\\dotnet\\sdk\\2.0.3\\Sdks\\Microsoft.NET.Sdk\\Sdk\\Sdk.targets(41,3): error MSB4019: The imported project \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\MSBuild\\Microsoft\\Portable\\v4.0\\Microsoft.Portable.CSharp.targets\" was not found. Confirm that the path in the <Import> declaration is correct, and that the file exists on disk\r\n```\r\n\r\nI worked around this buy running the build out of the Visual Studio MsBuild directory.  This didn't work in TeamCity and I had to use the work around of copying the Portable\\ directory from Professional\\ to BuildTools\\ directory.\r\nAfter the build passed this step.  I had a few more errors\r\n\r\n```\r\nProperties\\AssemblyInfo.cs(24,12): error CS0246: The type or namespace name 'GuidAttribute' could not be found (are you missing a using directive or an assembly reference?)\r\nProperties\\AssemblyInfo.cs(24,12): error CS0246: The type or namespace name 'GuidAttribute' could not be found (are you missing a using directive or an assembly reference?)\r\n```\r\n\r\nThis was easy but strange.  It was failing at the .NET Core build (it is a little unclear what target is running, a small log message would help before each type of target).    I didn't include a package reference.   The weird part is that Visual Studio successfully built this project and Intellesense looked good!  If it had failed in VS I would have caught it earlier.  \r\n\r\nRelevant Project file Parts\r\n```xml\r\n   <TargetFrameworks>net35;netstandard2.0;portable-net45+sl5</TargetFrameworks>\r\n\r\n  <!--Some attributes in AssemblyInfo.cs don't work in Portable.  We use a feature toggle to turn them off. -->\r\n  <PropertyGroup Condition=\"'$(TargetFramework)' == 'netstandard2.0' OR '$(TargetFramework)' == 'net35'\">\r\n    <DefineConstants>$(DefineConstants);FEATURE_TOGGLE_NOTPORTABLE</DefineConstants>    \r\n  </PropertyGroup>\r\n\r\n  \r\n  <ItemGroup Condition=\"'$(TargetFramework)' == 'netstandard2.0'\">\r\n    <PackageReference Include=\"System.Runtime.Serialization.Primitives\" Version=\"4.3.0\" />\r\n    <!-- I missed this -->\r\n    <PackageReference Include=\"System.Runtime.InteropServices\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n```\r\n\r\n```\r\n#if FEATURE_TOGGLE_NOTPORTABLE\r\n[assembly: Guid(\"--Real Guid--\")]\r\n#endif\r\n```\r\n\r\nCommand line\r\n```\r\nmsbuild myProject.sln\r\n```\r\n\r\n### Expected  behavior\r\nBuild on msbuild from any path exactly like it does in VS.\r\nVS should fail to build if a dependency is missing.\r\n\r\n\r\n### Actual behavior\r\nmsbuild only works from the Visual Studio path\r\nVS actually builds the project without the required reference.\r\n\r\n### Environment data\r\n`msbuild /version` output:\r\nMicrosoft (R) Build Engine version 15.4.8.50001 for .NET Framework\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n15.4.8.50001\r\n\r\nOS info:\r\nWindows Server 2012 R2\r\n\r\nIf applicable, version of the tool that invokes MSBuild (Visual Studio, dotnet CLI, etc):\r\nVisual Studio 2017 15.3 -> 15.4.5 (I upgraded to see if that was the issue)\r\n",
  "state": "OPEN",
  "createdAt": "2017-11-29T23:27:24Z",
  "updatedAt": "2024-02-21T16:35:20Z",
  "closedAt": null,
  "author": {
    "login": "dbrownxc"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": []
  }
}