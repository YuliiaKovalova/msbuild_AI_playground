{
  "number": 8165,
  "title": "TargetFrameworks causes error when a space is in referenced project's path",
  "body": "### Issue Description\r\nSimply changing the tag `TargetFramework` to `TargetFrameworks` can cause msbuild to fail to build with the error message:\r\n\r\n> error NETSDK1005: Assets file 'project\\obj\\project.assets.json' doesn't have a target for 'net6.0-windows'. Ensure that restore has run and that you have included 'net6.0-windows' in the TargetFrameworks for your project.\r\n\r\nThis happens solely because of a space in path of a referenced project, and only when `TargetFrameworks` are used (even with only one moniker).\r\n\r\n### Steps to Reproduce\r\nEither see the attached full sample[^1] with log[^2] or follow the steps in an empty dir:\r\n\r\n1. `dotnet new classlib -o net6_win`\r\n2. `dotnet new classlib -o \"net6 spaced\"`\r\n3. `dotnet add net6_win reference \"net6 spaced\"`\r\n4. change `TargetFramework` to `net6.0-windows` in `net6_win\\net6_win.csproj`\r\n5. change `TargetFramework` to `TargetFrameworks` in `net6_win\\net6_win.csproj` //this causes the bug\r\n6. `msbuild /restore net6_win`\r\n\r\n\r\n\r\n### Expected Behavior\r\nThe projects build when the old `TargetFramework` tag is used, they should build with the new `TargetFrameworks` too.\r\n\r\n### Actual Behavior\r\nThe build fails only when there is a space on the path and when the new `TargetFrameworks` tag is used.\r\n\r\n### Analysis\r\n\r\nRemoving the space in the name of `net6 spaced.csproj` and in the project reference works around the bug.\r\n\r\n### Versions & Configurations\r\nMSBuild version 17.4.0+18d5aef85 for .NET Framework\r\n17.4.0.51802\r\nhappens with both net6.0 and net7.0\r\n\r\n### Attachments\r\n[^1]:[msbuild_test.zip](https://github.com/dotnet/msbuild/files/10010768/msbuild_test.zip)\r\n[^2]:[msbuild.log](https://github.com/dotnet/msbuild/files/10010786/msbuild.log)\r\n\r\n",
  "state": "OPEN",
  "createdAt": "2022-11-15T08:46:42Z",
  "updatedAt": "2024-01-31T08:15:40Z",
  "closedAt": null,
  "author": {
    "login": "JakubFojtik"
  },
  "labels": [
    "bug",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Backlog"
  },
  "comments": {
    "nodes": [
      {
        "body": "Team Triage: Thanks for the great bug report! In the .NET ecosystem it's unusual to have a space in your project file. The name of the project file is typically the name of the output assembly, which typically doesn't have spaces.  As a result, investigating this is not likely to be a high priority.",
        "createdAt": "2022-11-17T17:38:06Z",
        "updatedAt": "2022-11-17T17:38:06Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "I'm seeing this error when multi-targeting and overwriting the AssemblyName for one of the frameworks. Interestingly this only occurs when using \"dotnet msbuild\" without the -restore flag. If I use either \"dotnet build\" or \"dotnet msbuild -restore\" it works fine.\r\n\r\nExample csproj for project named \"MyAssembly\":\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFrameworks>net6.0;netstandard2.0</TargetFrameworks>\r\n    <Nullable>enable</Nullable>\r\n    <LangVersion>latest</LangVersion>\r\n  </PropertyGroup>\r\n\r\n  <PropertyGroup Condition=\"'$(TargetFramework)' == 'netstandard2.0'\">\r\n    <AssemblyName>MyAssembly.NetStandard2</AssemblyName>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"AWSSDK.Extensions.NETCore.Setup\" Version=\"3.7.2\" />\r\n    <PackageReference Include=\"AWSSDK.KeyManagementService\" Version=\"3.7.101\" />\r\n    <PackageReference Include=\"AWSSDK.SecurityToken\" Version=\"3.7.100.25\" />\r\n    <PackageReference Include=\"AwsSignatureVersion4\" Version=\"4.0.0\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc.WebApiCompatShim\" Version=\"2.2.0\" />\r\n    <PackageReference Include=\"Microsoft.Extensions.Configuration.Binder\" Version=\"7.0.0\" />\r\n    <PackageReference Include=\"Microsoft.IdentityModel.Tokens\" Version=\"6.25.0\" />\r\n    <PackageReference Include=\"Microsoft.IO.RecyclableMemoryStream\" Version=\"2.2.1\" />\r\n  </ItemGroup>\r\n\r\n  <ItemGroup Condition=\"'$(TargetFramework)' == 'netstandard2.0'\">\r\n    <PackageReference Include=\"BouncyCastle.NetCore\" Version=\"1.9.0\" />\r\n    <PackageReference Include=\"System.Text.Json\" Version=\"7.0.0\" />\r\n  </ItemGroup>\r\n\r\n  <ItemGroup Condition=\"'$(TargetFramework)' == 'net6.0'\">\r\n    <PackageReference Include=\"Microsoft.Extensions.Hosting.Abstractions\" Version=\"7.0.0\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\r\n\r\ndotnet msbuild output:\r\n```\r\nMSBuild version 17.4.0+18d5aef85 for .NET\r\nC:\\Program Files\\dotnet\\sdk\\7.0.100\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(267,5): error NETSDK1004: Assets file 'C:\\Example\\MyAssembly\\obj\\project.assets.json' not found. Run a NuGet package restore to generate this file. [C:\\Example\\MyAssembly\\MyAssembly.csproj::TargetFramework=netstandard2.0]\r\nC:\\Program Files\\dotnet\\sdk\\7.0.100\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(267,5): error NETSDK1004: Assets file 'C:\\Example\\MyAssembly\\obj\\project.assets.json' not found. Run a NuGet package restore to generate this file. [C:\\Example\\MyAssembly\\MyAssembly.csproj::TargetFramework=net6.0]\r\n```\r\n\r\ndotnet build output:\r\n```\r\nMSBuild version 17.4.0+18d5aef85 for .NET\r\n  Determining projects to restore...\r\n  Restored C:\\Example\\MyAssembly\\MyAssembly.csproj (in 830 ms).\r\n  2 of 3 projects are up-to-date for restore.\r\n  MyAssembly -> C:\\Example\\MyAssembly\\bin\\Debug\\netstandard2.0\\MyAssembly.NetStandard2.dll\r\n  MyAssembly -> C:\\Example\\MyAssembly\\bin\\Debug\\net6.0\\MyAssembly.dll\r\n\r\nBuild succeeded.\r\n\r\n    2 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:00:05.42\r\n```\r\n\r\nIn both cases I am running with clean bin/obj folders",
        "createdAt": "2022-11-30T23:21:21Z",
        "updatedAt": "2022-11-30T23:21:21Z",
        "author": {
          "login": "tomupson"
        }
      },
      {
        "body": "@tomupson Unless I'm wrong your error seems warranted to me. Without running restore you get an error: Run a NuGet package restore. The missing Target would then be caused by the whole file missing.",
        "createdAt": "2022-12-01T07:42:31Z",
        "updatedAt": "2022-12-01T07:42:31Z",
        "author": {
          "login": "JakubFojtik"
        }
      },
      {
        "body": "@JakubFojtik Upon further investigation, I think the problem is within the restore itself. project.assets.json contains this:\r\n```\r\n\"logs\": [\r\n    {\r\n      \"code\": \"NU1105\",\r\n      \"level\": \"Error\",\r\n      \"message\": \"Unable to read project information for 'MyAssembly': Sequence contains more than one element\"\r\n    }\r\n  ]\r\n  ```",
        "createdAt": "2022-12-03T14:57:18Z",
        "updatedAt": "2022-12-03T14:57:18Z",
        "author": {
          "login": "tomupson"
        }
      }
    ]
  }
}