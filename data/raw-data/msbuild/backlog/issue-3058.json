{
  "number": 3058,
  "title": "ResolveAssemblyReferences does not work with PackageReference",
  "body": "I've been trying to update som of our existing projects to use the new PackageReference format to include nuget packages. One of them is a WPF application using ClickOnce. \r\nWe been able to use workarounds found to make all project compile and run with the exception of projects with clickonce enabled.\r\n\r\nThe problem seems to be that libraries coming from nuget packages are marked included as \"Prerequisite (auto)\" in ClickOnce instead of \"Include (auto)\" which is problematic.\r\n\r\n1. This prevents them from beeing automatically included in the clickonce manifest\r\n2. This makes build fail when referencing libraries which are not strongly signed \r\n\r\nOthers seems to have this issue: I found this https://stackoverflow.com/questions/46736788/clickonce-application-with-packagereferences-auto-to-prerequisites which seems to concern the same issue.\r\n\r\nThis has previously been reported at https://github.com/NuGet/Home/issues/6116 but was closed since it was the wrong repository.\r\n\r\nIf might be possible to work around by checking the \"ReferenceCopyLocalPaths\" or \"_ReferencesFromNuGetPackages\" and mark instead of just checking the Private Flag.\r\n\r\nIt seems the Target `ResolveNuGetPackageAssets` is the origin of the References with Private=true which causes ResolveAssemblyReferences  to fail. See\r\nhttps://github.com/NuGet/NuGet.BuildTasks/blob/1d8af3499f94a32c1d128a42faceade39c1f4337/src/Microsoft.NuGet.Build.Tasks/ResolveNuGetPackageAssets.cs#L791\r\n\r\n\r\n### Steps to reproduce\r\n\r\nIn VS 2017 (15.4 or earlier) build the \"HttpClient.sln\" solution found att https://github.com/Daniel-Svensson/OpenRiaPlayground/tree/feature/clickonce_repro/HttpClient\r\n\r\nBuild log is availible at https://github.com/Daniel-Svensson/OpenRiaPlayground/raw/feature/clickonce_repro/HttpClient/clickonce_failure.buildlog\r\n\r\n\r\n### Expected  behavior\r\n\r\n1. The solution should build successfully\r\n2. The manifest file should include all nuget references as installd\r\n\r\n### Actual behavior\r\n\r\n1. Nuget references are market as Prerequisite\r\n\r\n```\r\nC:\\Users\\crmdas\\.nuget\\packages\\openriaservices.client.core\\4.5.0\\lib\\net45\\OpenRiaServices.DomainServices.Client.Web.dll\r\n    AssemblyType = Managed\r\n    CopyLocal = false\r\n    DependencyType = Prerequisite\r\n    FusionName = OpenRiaServices.DomainServices.Client.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=null\r\n    ImageRuntime = v4.0.30319\r\n    IsPrimary = true\r\n    NuGetIsFrameworkReference = false\r\n    NuGetPackageId = OpenRiaServices.Client.Core\r\n    NuGetPackageVersion = 4.5.0\r\n    NuGetSourceType = Package\r\n    OriginalItemSpec = C:\\Users\\crmdas\\.nuget\\packages\\openriaservices.client.core\\4.5.0\\lib\\net45\\OpenRiaServices.DomainServices.Client.Web.dll\r\n    Private = false\r\n    ReferenceAssembly = C:\\Users\\crmdas\\.nuget\\packages\\openriaservices.client.core\\4.5.0\\lib\\net45\\OpenRiaServices.DomainServices.Client.Web.dll\r\n    ReferenceSourceTarget = ResolveAssemblyReference\r\n    ResolvedFrom = {RawFileName}\r\n    Version = 4.0.0.0\r\n```\r\n2. Build fails if reference is not strong named \r\n\r\n```\r\nErrors\r\n    C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Professional\\MSBuild\\15.0\\Bin\\Microsoft.Common.CurrentVersion.targets(3743,5): error MSB3188: Assembly 'C:\\Users\\crmdas\\.nuget\\packages\\openriaservices.client.core\\4.5.0\\lib\\net45\\OpenRiaServices.DomainServices.Client.Web.dll' must be strong signed in order to be marked as a prerequisite. [C:\\Dev\\github\\Daniel-Svensson\\OpenRiaPlayground\\HttpClient\\WpfClient\\WpfClient.csproj]\r\n    C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Professional\\MSBuild\\15.0\\Bin\\Microsoft.Common.CurrentVersion.targets(3743,5): error MSB3188: Assembly 'C:\\Users\\crmdas\\.nuget\\packages\\openriaservices.client.core\\4.5.0\\lib\\net45\\OpenRiaServices.DomainServices.Client.dll' must be strong signed in order to be marked as a prerequisite. [C:\\Dev\\github\\Daniel-Svensson\\OpenRiaPlayground\\HttpClient\\WpfClient\\WpfClient.csproj]\r\n```\r\n\r\n### Environment data\r\n\r\nVisual Studio 2017 15.4+ ",
  "state": "CLOSED",
  "createdAt": "2018-03-07T09:39:22Z",
  "updatedAt": "2024-02-21T17:14:11Z",
  "closedAt": "2020-04-15T18:42:30Z",
  "author": {
    "login": "Daniel-Svensson"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "Forgind"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "If the ResolveAssemblyReference task is updated it should probably be straight forward to fix #3057 at the same time",
        "createdAt": "2018-03-07T09:40:19Z",
        "updatedAt": "2018-03-07T09:40:36Z",
        "author": {
          "login": "Daniel-Svensson"
        }
      },
      {
        "body": "@Daniel-Svensson Do you know if there's any workaround for this? I've seen some anecdotal evidence that this has been fixed in 15.8, but it hasn't: I'm running 15.8.4, have an Excel Add-in project using ClickOnce and have the exact same problem as above. The problem disappears if I revert back to `packages.config`.",
        "createdAt": "2018-09-18T14:05:33Z",
        "updatedAt": "2018-09-18T14:05:33Z",
        "author": {
          "login": "ddotlic"
        }
      },
      {
        "body": "@ddotlic most issues are resolved for me. We had some new issues which required workarounds but from the release notes it looks that the recently released15.8.5 might resolve them.",
        "createdAt": "2018-09-20T19:45:38Z",
        "updatedAt": "2018-09-20T19:45:38Z",
        "author": {
          "login": "Daniel-Svensson"
        }
      },
      {
        "body": "@Daniel-Svensson where recently means _today_ \ud83d\ude09 was waiting for it to come out, will verify if it solves the issue, thanks!",
        "createdAt": "2018-09-20T19:48:47Z",
        "updatedAt": "2018-09-20T19:48:47Z",
        "author": {
          "login": "ddotlic"
        }
      },
      {
        "body": "@Daniel-Svensson Well, shiiiit. This does **not** work for an Excel Add-In project deployed through ClickOnce. Build still fails with the (in)famous `Assembly <...> must be strong signed in order to be marked as prerequisite`.",
        "createdAt": "2018-09-21T16:26:45Z",
        "updatedAt": "2018-09-21T16:26:45Z",
        "author": {
          "login": "ddotlic"
        }
      },
      {
        "body": "I suggest you use the send feedback feature from within vs 2017 and report the bug with a repro. We reported one of the  issues resolved in 15.8.5 when 15.8.1 had just been released so it did not take that much time.\r\n\r\nAs to find a workaround I used the structured msbuild log viewer and looked at the different output and input to the ResolveAssemblyReferences task",
        "createdAt": "2018-09-22T12:16:09Z",
        "updatedAt": "2018-09-22T12:16:09Z",
        "author": {
          "login": "Daniel-Svensson"
        }
      },
      {
        "body": "@Daniel-Svensson thanks for both suggestions, I will definitely put them to good use. I was just disappointed because it looked like \u201cmy\u201d issue was resolved in 15.8.5 when in fact 4 similar issues were... cheers!",
        "createdAt": "2018-09-22T13:03:06Z",
        "updatedAt": "2018-09-22T13:03:06Z",
        "author": {
          "login": "ddotlic"
        }
      },
      {
        "body": "I've got the same issues with my excel vsto addin containing netstandard20 project references.\r\n\r\nYou've got two options \r\n1. using NuGet PackageManagement via PackageReference and running into `Assembly` <...> must be strong signed in order to be marked as prerequisite.``\r\n  Workaround [https://stackoverflow.com/a/51803308/727183] killing your ClickOnce\r\n2. using packages.config and miss nuget packages referenced by netstandard dependency in your output (probably issue #https://github.com/dotnet/standard/issues/529).\r\n\r\nVisual Studio 15.8.8, Excel Addin netframework 4.7.2\r\n\r\nMy Workaround - switch all project references to net472 - no issues",
        "createdAt": "2018-10-25T08:10:22Z",
        "updatedAt": "2018-10-25T11:41:44Z",
        "author": {
          "login": "Aurelianus"
        }
      },
      {
        "body": "> My Workaround - switch all project references to net472 - no issues\r\n\r\n@Aurelianus That's very useful info - I thought I tried that but maybe I didn't (almost by accident, my project is targeting 4.7.1 but no real reason for it). I've opened up an [issue for Visual Studio](https://developercommunity.visualstudio.com/content/problem/342184/cannot-use-packagereference-in-excel-net-add-in-pr.html) which is currently being \"Triaged\" (for weeks); I assume that we're relatively few encountering this so low priority.\r\n",
        "createdAt": "2018-10-29T09:09:50Z",
        "updatedAt": "2018-10-29T09:09:50Z",
        "author": {
          "login": "ddotlic"
        }
      },
      {
        "body": "> My Workaround - switch all project references to net472 - no issues\r\n\r\n@Aurelianus  What do you mean by \"all project references\" - I can only influence _my_ projects and they are set to 4.7.2.\r\n\r\nI cannot choose which framework has been chosen by the 3rd party NuGet packages... IOW, am still unable to make this work (sigh).",
        "createdAt": "2019-03-27T15:03:03Z",
        "updatedAt": "2019-03-27T15:03:03Z",
        "author": {
          "login": "ddotlic"
        }
      },
      {
        "body": "@ddotlic i mean that all subprojects referenced by <ProjectReference> have been reset to net472 targetframework. Thus i have no netstandard projects.\r\nThe problem is not related to PackagesReferences (nuget packages) thus you shouldn't notice these.",
        "createdAt": "2019-03-27T16:00:30Z",
        "updatedAt": "2019-03-27T16:00:30Z",
        "author": {
          "login": "Aurelianus"
        }
      },
      {
        "body": "@Aurelianus I don't see how you can \"guarantee\" that the referenced projects will use `net472` (unless all projects are under your control). \r\n\r\nWhile I can - and have - used `net472` when referencing them, all of the problematic ones resolve to `net46`, `net471` and whatnot (whatever was provided by the author of the library).\r\n\r\nIOW, there's no issue with netstandard, we're squarely in the land of the full .NET framework.",
        "createdAt": "2019-03-27T16:03:31Z",
        "updatedAt": "2019-03-27T16:03:31Z",
        "author": {
          "login": "ddotlic"
        }
      },
      {
        "body": "In my case I've got a big solution with most of the subprojects under my control.\r\nIf your foreign libs cause the issue you can probably add another compilation target (if they are open source).",
        "createdAt": "2019-03-27T17:12:08Z",
        "updatedAt": "2019-03-27T17:12:08Z",
        "author": {
          "login": "Aurelianus"
        }
      },
      {
        "body": "@Aurelianus yeah, I _could_ provide PRs for the affected packages but it\u2019s silly - it inflates package size for no other benefit apart from mine \ud83d\ude1e so they\u2019d rightfully refuse. The issue really ought to get fixed...",
        "createdAt": "2019-03-27T19:41:19Z",
        "updatedAt": "2019-03-27T19:41:19Z",
        "author": {
          "login": "ddotlic"
        }
      },
      {
        "body": "The Visual Studio issue on this was closed because it didn't get enough attention in form of comments and votes...",
        "createdAt": "2019-09-30T14:29:07Z",
        "updatedAt": "2019-09-30T14:29:07Z",
        "author": {
          "login": "filmor"
        }
      },
      {
        "body": "Feedback issue: [AB#690368](https://devdiv.visualstudio.com/0bdbc590-a062-4c3f-b0f6-9383f67865ee/_workitems/edit/690368) & DTS issue: [AB#1048917](https://devdiv.visualstudio.com/0bdbc590-a062-4c3f-b0f6-9383f67865ee/_workitems/edit/1048917) are likely related to this core issue.\r\nThis stack overflow info may also be relevant: https://stackoverflow.com/questions/46736788/clickonce-application-with-packagereferences-auto-to-prerequisites",
        "createdAt": "2020-01-13T20:21:13Z",
        "updatedAt": "2020-01-13T21:52:22Z",
        "author": {
          "login": "rrelyea"
        }
      },
      {
        "body": "Ran into this issue just now myself. Was updating my VSTO projects and now they don't work after being published. ",
        "createdAt": "2020-02-06T15:25:08Z",
        "updatedAt": "2020-02-06T15:25:08Z",
        "author": {
          "login": "Welchen"
        }
      },
      {
        "body": "I think the fix @sujitnayak made for [AB#1052258](https://devdiv.visualstudio.com/0bdbc590-a062-4c3f-b0f6-9383f67865ee/_workitems/edit/1052258) will solve this. That will ship with 16.6 preview 3, so if you're still seeing this problem after that, let me know.",
        "createdAt": "2020-04-01T19:01:24Z",
        "updatedAt": "2020-04-01T19:01:25Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "Closing, assuming this is resolved.",
        "createdAt": "2020-04-15T18:42:30Z",
        "updatedAt": "2020-04-15T18:42:30Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "As mentioned, the fix to support PackageReferences in VSTO Addin projects in available in the preview channel - Visual Studio 2019 16.6 Preview 3. ",
        "createdAt": "2020-04-16T23:01:37Z",
        "updatedAt": "2020-04-16T23:01:37Z",
        "author": {
          "login": "sujitnayak"
        }
      }
    ]
  }
}