{
  "number": 2100,
  "title": "Long UI delays when working in Visual Studio",
  "body": "This may not be the responsibility of this project, but I'm hoping you can help me get it to the right person.\r\n\r\n### Steps to reproduce:\r\n\r\n* Build [PerfView](https://github.com/Microsoft/perfview)\r\n* Launch PerfView.exe from the build directory\r\n* Open PerfView in Visual Studio 2017 (15.2)\r\n* Expand PerfView in Solution Explorer, and double click on of the unresolved references (I double clicked on DiagnosticsHub.Packaging.Interop\r\n\r\n:memo: I'm having a hard time reproducing this after closing PerfView (which unlocked the file MSBuild was trying to write to). However, when the IDE did get into this state, restarting Visual Studio did not help the situation. Only closing the application I was running from the solution output helped.\r\n\r\n### Results:\r\n\r\n* Long UI hangs while MSBuild attempts to copy files to a location which is not writable because the application is open.\r\n* Source files in the PerfView project open in the Miscellaneous Files project, with many IDE features not working\r\n\r\nI took a 30 second trace with PerfView. The attached results show blocked time for the UI thread at nearly 20 seconds inside of MSBuild.\r\n\r\nHere is the first half of the delay (10 seconds total):\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1408396/26022249/e2296f0e-3765-11e7-95a4-4f8c3cc3dc02.png)\r\n\r\nHere is the second half of the delay (9.5 seconds total):\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1408396/26022254/04ec2306-3766-11e7-9505-a624dcd660dc.png)\r\n\r\nHere is the exported view:\r\n\r\n[HungVS.View1.perfView.zip](https://github.com/Microsoft/msbuild/files/998321/HungVS.View1.perfView.zip)",
  "state": "CLOSED",
  "createdAt": "2017-05-13T03:55:48Z",
  "updatedAt": "2024-02-21T17:19:06Z",
  "closedAt": "2017-05-13T20:54:16Z",
  "author": {
    "login": "sharwell"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "This isn't a bug in MSBuild but it is a great exercise in debugging the complex stack that is Visual Studio.\r\n\r\nIt's not a bug in MSBuild because we do synchronous builds and builds take time, so our callers should avoid calling MSBuild on the UI thread. And it's by design that the `Copy` task retries and sleeps between retries.\r\n\r\nBut of course it's not a design intention to hang VS! So what's going wrong here?\r\n\r\nThe callstack shows that the legacy C# project system (`csproj!`) is doing work in response to a UI request, and invoking a build in MSBuild to get some information out of it. That build is then invoking the `Copy` task, which is waiting in its retry logic (because as you pointed out the file is locked).\r\n\r\nI expect `csproj!CLanguageReferences::ResolveReferencesWithMSBuild` to be calling the `ResolveReferences` target, which doesn't normally do any `Copy` operations--it's about looking up inputs to the compiler, not producing output. So I start to suspect a custom target (or possibly a bug in common targets, but that seems less likely at this point).\r\n\r\nThat's all I could tell from the callstacks, so I cloned the repo and took a look around. I preprocessed the `PerfView.csproj` file to see its full, expanded build logic, and saw that indeed there is a target hooked in before `ResolveAssemblyReferences` (which is before/part of `ResolveReferences`), and that target does some copies. That target is delivered from a PerfView-specific package, so I filed a bug describing the problem and proposing a fix at https://github.com/Microsoft/perfview/issues/198.\r\n\r\n@tmeschter might be interested in this synchronous build during UI drawing, but I suspect that since it's in the legacy project system (the key clue is the `csproj!` callstack) the real fix here--getting the build off the UI thread--will come as part of moving to the [new project system](https://github.com/dotnet/project-system).\r\n\r\nI'm going to close this issue, but I'm happy to discuss the debugging steps I described above if you (or anyone!) have questions.",
        "createdAt": "2017-05-13T20:54:13Z",
        "updatedAt": "2017-05-13T20:54:13Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}