{
  "number": 1831,
  "title": "XNA projects fail with error loading Framework 15.1",
  "body": "I'm getting an error when compiling an XNA Content Project using MSBuild 15. I have no problems when using MSBuild 14.\r\n\r\nThe error message is:\r\n\r\n`Error loading pipeline assembly \"C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.0\\Microsoft.Build.Framework.dll\".\tXNAVS2017\tC:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\MSBuild\\Microsoft\\XNA Game Studio\\v4.0\\Microsoft.Xna.GameStudio.ContentPipeline.targets\t78\t\r\n`\r\n\r\nThis is strange since the file Microsoft.Build.Framework.dll is present in that directory and the MSBuild log seems to indicate the file was located succesfully. So I'm not sure why it won't load.\r\n\r\nThe fusion log seems to indicate a problem under MSBuild 15, but not under MSBuild 14.\r\n[fusion_msbuild14.txt](https://github.com/Microsoft/msbuild/files/831643/fusion_msbuild14.txt)\r\n[fusion_msbuild15.txt](https://github.com/Microsoft/msbuild/files/831645/fusion_msbuild15.txt)\r\n\r\nTo reproduce this problem create an empty XNA Windows Game project and add an existing bitmap file to the content project. (Just to make sure the content project isn't skipped). Then build it using the following parameters:\r\n\r\n`& 'C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\MSBuild\\15.0\\Bin\\MSBuild.exe' .\\MyXnaProject.sln /p:platform=x86 /p:configuration=Debug \r\n`\r\nThe version of MSBuild that I'm using is\r\n\r\n`Microsoft (R) Build Engine version 15.1.548.43366`\r\n\r\nI've attached a log with full diagnostics and a small reproduction project\r\n\r\n[msbuild.txt](https://github.com/Microsoft/msbuild/files/831607/msbuild.txt)\r\n[Repo.zip](https://github.com/Microsoft/msbuild/files/831661/Repo.zip)\r\n\r\n\r\n",
  "state": "CLOSED",
  "createdAt": "2017-03-09T16:27:43Z",
  "updatedAt": "2024-02-21T17:20:56Z",
  "closedAt": "2017-03-10T19:36:06Z",
  "author": {
    "login": "roy-t"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "I tried to make sense of the fusion logs and I think I've narrowed down the problem.\r\n\r\nVersion 4.0 of Microsoft.Build.Framework.dll is loaded succesfully\r\n\r\n```\r\nLOG: Attempting download of new URL file:///C:/Program Files (x86)/Reference Assemblies/Microsoft/Framework/.NETFramework/v4.0/Microsoft.Build.Framework.dll.\r\nLOG: Assembly download was successful. Attempting setup of file: C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.0\\Microsoft.Build.Framework.dll\r\n```\r\n\r\nBut then an Assembly Redirect is found:\r\n```\r\nLOG: Redirect found in application configuration file: 4.0.0.0 redirected to 15.1.0.0.\r\nLOG: Post-policy reference: Microsoft.Build.Framework, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\r\n```\r\n\r\nFinding this new version fails:\r\n\r\n```\r\nBind result: hr = 0x80070002. The system cannot find the file specified.\r\n```\r\n\r\nThe Assembly Redirect is defined in \r\n```\r\nC:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\MSBuild\\15.0\\Bin\\MSBuild.exe.config\r\n\r\n<dependentAssembly>\r\n          <assemblyIdentity name=\"Microsoft.Build.Framework\" culture=\"neutral\" publicKeyToken=\"b03f5f7f11d50a3a\" />\r\n          <bindingRedirect oldVersion=\"0.0.0.0-99.9.9.9\" newVersion=\"15.1.0.0\" />\r\n        </dependentAssembly>\r\n```\r\n\r\nThe path to the v15 version of Microsoft.Build.Framework.dll is\r\n```\r\nC:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\MSBuild\\15.0\\Bin\\Microsoft.Build.Framework.dll\r\n```\r\nSo I guess the question now is how do I make sure that it can be found?\r\n\r\n",
        "createdAt": "2017-03-10T11:09:54Z",
        "updatedAt": "2017-03-10T11:14:40Z",
        "author": {
          "login": "roy-t"
        }
      },
      {
        "body": "I've created a **workaround**. But I'm not sure if this is the proper way to go.\r\n\r\nOpen the Developer Command Prompt for VS 2017 as administrator and execute the following commands:\r\n\r\n```\r\ncd C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\MSBuild\\15.0\\Bin\r\ngacutil /i Microsoft.Build.Framework.dll\r\n```\r\n\r\nThis adds the newest version of Microsoft.Build.Framework to the Global Assembly Cache, which allows the correct version of the DLL to be found after the Binding Redirect happens.  After this I can build an XNA content project without problems. But I'm pretty sure this is not the ideal way to make this work and I'm not sure if there are any negative implications.\r\n\r\nNote that the GAC already contains v14, 4, 3.5, and 2.0 version of Microsoft.Build.Framework, was it an oversight to not add v15? It seems to me this is not an XNA related issue, but that any project referencing an older version of Microsoft.Build.Framework will fail due to this binding redirect.",
        "createdAt": "2017-03-10T11:35:19Z",
        "updatedAt": "2017-03-10T12:23:27Z",
        "author": {
          "login": "roy-t"
        }
      },
      {
        "body": "I agree that that's the proximate cause of the issue.\r\n\r\nGACing the Framework assembly will indeed work around the issue, but it scares me for a few reasons. The biggest negative implications I anticipate are around updates to MSBuild/Visual Studio (the version you've GACed will be used, instead of the updated version, so you'll have to manually re-GAC after any update) and around multiple installs of Visual Studio (the GACed version will always be used instead of the right local version).\r\n\r\nMSBuild 15 is intentionally not GACed. This is part of the new VS installation process and isolation model that enables faster installation and update and side-by-side installations. This doesn't affect everything that refers to an older version of Framework, because generally the assembly loader will see that the assembly is already loaded and use that. I suspect that the XNA pipeline is using an isolated AppDomain that doesn't set up the right load policy.",
        "createdAt": "2017-03-10T16:52:22Z",
        "updatedAt": "2017-03-10T16:52:22Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@roy-t We're glad you were able to create a work around to fix your issue. \r\n\r\nHowever, please be advised that XNA hasn\u2019t been officially supported in years. The open-source effort, MonoGames, recreates most of what XNA was doing, but the XNA team was disbanded before Xbox One launched.\r\n\r\nAlso, for reasons @rainersigwald laid out, we do not officially \"support\" or recommend this workaround.\r\n\r\nThanks,\r\nMSBuild team",
        "createdAt": "2017-03-10T19:36:06Z",
        "updatedAt": "2017-03-10T19:36:06Z",
        "author": {
          "login": "Sarabeth-Jaffe-Microsoft"
        }
      },
      {
        "body": "You point out the danger of putting the Microsoft.Build.Framework.dll file in the GAC, because it could break VS when it is updated. Wouldn't this only cause a problem if the version of the dll stays exactly the same? I'm assuming the version of the dll will increase when VS2017 SP1 is released.",
        "createdAt": "2017-03-16T12:13:43Z",
        "updatedAt": "2017-03-16T12:13:43Z",
        "author": {
          "login": "wldevries"
        }
      },
      {
        "body": "@Sarabeth-Jaffe-Microsoft We are well aware that XNA has been dropped for some years, but there's several big projects around that still require maintenance. We're in the process to move on, but there's clients that refuse to move, but they keep asking for updates and patches, so we have no option than to keep working with the old XNA.\r\n\r\nMany legacy XNA projects cannot be ported to MonoGame easily because, although both platforms surface API are equivalent, the content processing pipelines of both frameworks are wildly different, and in some cases are not fully equivalent, specially when handling 3D models, to the point you would require, in many cases, to redo the assets from scratch, and these assets are precisely the most expensive part of our project.",
        "createdAt": "2017-04-06T10:52:56Z",
        "updatedAt": "2017-04-06T11:01:17Z",
        "author": {
          "login": "vpenades"
        }
      },
      {
        "body": "We are in the exact same situation, MonoGame is fine for multiplatform development but doesn't come close to XNA in terms of features and stability.\r\n\r\n@rainersigwald could you explain the dangers of placing Microsoft.Build.Framework.dll in the GAC and is there a blog post that explains the reasoning behind the change in the build tooling?",
        "createdAt": "2017-04-11T09:54:53Z",
        "updatedAt": "2017-04-11T09:54:53Z",
        "author": {
          "login": "wldevries"
        }
      },
      {
        "body": "Any update on this @rainersigwald @roy-t ?  Seems to have been closed with no solution?",
        "createdAt": "2017-06-08T11:57:51Z",
        "updatedAt": "2017-06-08T11:57:51Z",
        "author": {
          "login": "SimonDarksideJ"
        }
      },
      {
        "body": "silently ignored..",
        "createdAt": "2017-06-08T12:27:12Z",
        "updatedAt": "2017-06-08T12:27:12Z",
        "author": {
          "login": "wldevries"
        }
      },
      {
        "body": "@DDReaper (Hey Simon ;) ) did you see the workaround posted in this thread? Here is a full explanation: https://gist.github.com/roy-t/2f089414078bf7218350e8c847951255",
        "createdAt": "2017-06-08T12:32:12Z",
        "updatedAt": "2017-06-08T12:32:12Z",
        "author": {
          "login": "roy-t"
        }
      },
      {
        "body": "Will check it out.  \r\nSeems the VS2017 plugin for MSXNA seems to have stalled at the mo.  With the demise of CodePlex, this is a slight worry :S",
        "createdAt": "2017-06-08T17:53:40Z",
        "updatedAt": "2017-06-08T17:53:40Z",
        "author": {
          "login": "SimonDarksideJ"
        }
      },
      {
        "body": "Hmm my fix relies on the 2015 version of MSXNA, the VS2017 version doesn't seem to do anything useful. Oh well, luckily I've switched to Monogame for my personal projects. At work though we rely on XNA with 20+ projects.. I'll make sure we have a backed up copy of MSXNA2015 there before codeplex goes down. :/",
        "createdAt": "2017-06-08T20:58:48Z",
        "updatedAt": "2017-06-08T20:58:48Z",
        "author": {
          "login": "roy-t"
        }
      },
      {
        "body": "Same here, if it does go. Sure enough I'll be creating another new repository to keep it in the running.\r\nI use it as a huge source of reference, given how close MonoGame and XNA are.\r\n\r\nI'm all MonoGame for new projects but a huge amount of XNA content still exists which can be utilised for MG.\r\n\r\nI've already archived the entire XNAGameStudio educational library (https://github.com/DDReaper/XNAGameStudio) and in the process of MonoGame'fying it all.  Also now 20% through archiving all of Ziggywares content to the site and there are some real gems there.",
        "createdAt": "2017-06-08T21:20:55Z",
        "updatedAt": "2017-06-08T21:20:55Z",
        "author": {
          "login": "SimonDarksideJ"
        }
      }
    ]
  }
}