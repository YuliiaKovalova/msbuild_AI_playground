{
  "number": 8507,
  "title": "Investigate and list ProjectReference and PackageReference behavioral divergences",
  "body": "## Motivation\r\n\r\n#8398 needs investigation of what we can support (and how) in converting between the two.\r\nThere might be possible inconsitencies between [`PackageReference`](https://learn.microsoft.com/en-us/nuget/consume-packages/package-references-in-project-files) and [`ProjectReference`](https://learn.microsoft.com/en-us/visualstudio/msbuild/common-msbuild-project-items?view=vs-2022#projectreference) items metadata (and even behavior with same metadata - e.g. `SetTargetFramework` has different behavior for the two: https://github.com/NuGet/Home/issues/12436, `PrivateAssets` as well: https://github.com/dotnet/msbuild/issues/4371#issuecomment-815793382, etc.).\r\n\r\n## Expected outputs\r\n- List of supported metadata for `PackageReference` and `ProjectReference` - stressing out the differences\r\n- List of metadata that leads to different behavior for the two.\r\n- The investigation would ideally create a repo or branch with minimal samples of the findings\r\n- List of identified existing open workitems/bugs related to difference of behavior of the two\r\n",
  "state": "CLOSED",
  "createdAt": "2023-02-28T13:39:40Z",
  "updatedAt": "2024-02-21T16:59:27Z",
  "closedAt": "2023-05-30T05:29:49Z",
  "author": {
    "login": "JanKrivanek"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "JaynieBai"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "At some point I did some digging about issues that contain this type of information and creating an issue for a future investigation. I don't think my issue has anything you don't know, but figured I'd share it:\r\n\r\n```\r\nPackageReference has PrivateAssets/ExcludeAssets/Include assets capabilities and those are respected. \r\nThose also easily translate into the dependencies in the generated package. \r\n\r\nProjectReferences *do not* have the same equivalent experience. Realistically only the ReferenceOutputAssembly and PrivateAssets=all metadata work. \r\n\r\nBasically, there's absolutely no way to express a \"runtime only\" ProjectReference, the same way you can express a PackageReference. This feature covers the rethinking of all this metadata. \r\nShould project ref support all this metadata the same way PackageReference does? Should it? Gotchas/caveats?\r\n\r\nSee Re: How to express a package dependency without the weight of a P2P ref?\r\n\r\nProject/PackageReference story\r\n\r\nhttps://github.com/NuGet/Home/issues?q=is%3Aissue+ReferenceOutputAssembly+is%3Aopen\r\nhttps://github.com/dotnet/sdk/search?q=ReferenceOutputAssembly&type=Issues\r\nhttps://github.com/microsoft/msbuild/search?q=ReferenceOutputAssembly&type=Issues\r\n```",
        "createdAt": "2023-02-28T18:22:47Z",
        "updatedAt": "2023-02-28T18:22:47Z",
        "author": {
          "login": "nkolev92"
        }
      },
      {
        "body": "I forwarded the e-mail my write-up references :) ",
        "createdAt": "2023-02-28T18:29:09Z",
        "updatedAt": "2023-02-28T18:29:09Z",
        "author": {
          "login": "nkolev92"
        }
      },
      {
        "body": "# PackageReference Metadata Lists\r\nTag | Description | Default Value\r\n-- | -- | --\r\nName | The display name of the reference | Optional string\r\nVersion | that's used when restoring packages | Optional string, but if not set, it will have warning NU1604\r\nAliases | When an alias is specified, all assemblies coming from the annotated package will need to be referenced with an alias. |Optional string\r\nNoWarn | hide specific warnings, either project-wide or package-wide. | Optional string\r\nIncludeAssets | These assets will be consumed | all\r\nExcludeAssets | These assets will not be consumed | none\r\nPrivateAssets | These assets will be consumed but won't flow to the parent project | contentfiles;analyzers;build\r\nGeneratePathProperty | It generates a variable for each package that contains the full path to the package version being used, when it's true. The variable format prepends Pkg to the package name and replaced any period (.) with an underscore (_). That makes the variable for Prism.Core into PkgPrism_Core.| false\r\n\r\n# ProjectReference Metadata Lists\r\nTag | Description | Default Value\r\n-- | -- | --\r\nAliases | When an alias is specified, all references coming from the project will need to be referenced with an alias. | Optional string\r\nName | The display name of the reference | Optional string\r\nGlobalPropertiesToRemove | Names of properties to remove when building the referenced project, for example RuntimeIdentifier;PackOnBuild | Optional string[]\r\nProject | A GUID for the reference | Optional string\r\nOutputItemType |  Item type to emit target outputs into. Default is blank. If the Reference metadata is set to \"true\" (default) then target outputs will become references for the compiler. | Optional string\r\nReferenceOutputAssembly | If set to false, does not include the output of the referenced project as a [Reference](https://learn.microsoft.com/en-us/visualstudio/msbuild/common-msbuild-project-items?view=vs-2022#reference) of this project, but still ensures that the other project builds before this one | true\r\nPrivate | Specifies whether the reference should be copied to the output folder. This attribute matches the\u00a0Copy Local\u00a0property of the reference that's in the Visual Studio IDE. | Optional Boolean\r\nSetConfiguration | Sets the global property\u00a0Configuration\u00a0for the referenced project, for example\u00a0Configuration=Release. | Optional string\r\nSetPlatform | Sets the global property\u00a0Platform\u00a0for the referenced project, for example\u00a0Platform=AnyCPU. | Optional string. \r\nSetTargetFramework | Sets the global property\u00a0TargetFramework\u00a0for the referenced project, for example\u00a0TargetFramework=netstandard2.0. | Optional string\r\nSkipGetTargetFrameworkProperties | If\u00a0true, builds the referenced project without negotiating the most compatible\u00a0TargetFramework\u00a0value. | false\r\nPlatformLookupTable | Some cases of ProjectReferences require a $(PlatformLookupTable) to correctly determine what a referenced project should build as. References between managed and unmanaged projects also get a default lookup table that can be opted out of by setting the property UseDefaultPlatformLookupTables to false. Details in [References between managed and unmanaged projects](https://github.com/dotnet/msbuild/blob/main/documentation/ProjectReference-Protocol.md#references-between-managed-and-unmanaged-projects) | Optional string\r\nTargets | Semicolon separated list of targets in the referenced projects that should be built. Default is the value of $(ProjectReferenceBuildTargets) which defaults to empty, indicating the default targets. | Optional string[]\r\nIncludeAssets | These transitive reference assets will be consumed. | all\r\nExcludeAssets | These transitive reference assets will not be consumed | none\r\nPrivateAssets | These direct and transitive reference assets will be consumed, but won't flow to the downstream project|  contentfiles;analyzers;build\r\n",
        "createdAt": "2023-03-27T10:35:04Z",
        "updatedAt": "2023-03-28T07:15:48Z",
        "author": {
          "login": "JaynieBai"
        }
      },
      {
        "body": "# Differences between PackageReference and ProjectReference\r\nTag | PackageReference | ProjectReference | IsSame | Comments\r\n-- | -- | -- | -- | -- |\r\nName | \u2611\ufe0f | \u2611\ufe0f | \u2705||\r\nAliases | \u2611\ufe0f | \u2611\ufe0f | \u2705||\r\nVersion | \u2611\ufe0f| \u274c | ||\r\nNoWarn | \u2611\ufe0f|\u2611\ufe0f|\u2705| 1. NoWarn on a package reference does not apply transitively to its dependencies https://github.com/NuGet/Home/issues/5740 2.  projectReference. https://github.com/NuGet/Home/issues/8093. |\r\nGeneratePathProperty| \u2611\ufe0f | \u274c||\r\nIncludeAssets | \u2611\ufe0f | \u2611\ufe0f | \u274c| 1. In package reference, IncludeAssets works for transitive and direct references 2. In project reference, IncludeAssets  works for transitive references |\r\nExcludeAssets | \u2611\ufe0f | \u2611\ufe0f| \u274c| 1. In package reference, ExcludeAssets works for transitive and direct references 2. In project reference, ExcludeAssets works for transitive references |\r\nPrivateAssets | \u2611\ufe0f| \u2611\ufe0f | \u2705||\r\nGlobalPropertiesToRemove | \u274c | \u2611\ufe0f|||\r\nProject| \u274c | \u2611\ufe0f|||\r\nOutputItemType | \u274c | \u2611\ufe0f|||\r\nReferenceOutputAssembly| \u274c | \u2611\ufe0f|||\r\nPrivate | \u274c | \u2611\ufe0f|||\r\nSetConfiguration |\u274c | \u2611\ufe0f||https://github.com/NuGet/Home/issues/7868#issuecomment-519277759|\r\nSetPlatform | \u274c | \u2611\ufe0f||https://github.com/NuGet/Home/issues/7868#issuecomment-519277759|\r\nSetTargetFramework | \u274c | \u2611\ufe0f||https://github.com/NuGet/Home/issues/7868#issuecomment-519277759 https://github.com/NuGet/Home/issues/12436|\r\nSkipGetTargetFrameworkProperties | \u274c | \u2611\ufe0f||https://github.com/NuGet/Home/issues/7868#issuecomment-519277759|\r\nPlatformLookupTable | \u274c | \u2611\ufe0f||https://github.com/NuGet/Home/issues/7868#issuecomment-519277759|\r\nTargets| \u274c | \u2611\ufe0f|||\r\n\r\nAppart from those metadata differences - other group of differences is nuget support for [additional assets](https://learn.microsoft.com/en-us/nuget/consume-packages/package-references-in-project-files#controlling-dependency-assets) - especially `build`, `buildMultitargeting`, `buildTransitive`, `analyzers`, that are not supported by `ProjectReference` and do not have existing available workaround analogy.\r\n\r\nAttach some examples for ExcludeAssets IncludeAssets and PrivateAssets in excel\r\n[InvestigationExamples.xlsx](https://github.com/dotnet/msbuild/files/11110401/InvestigationExamples.xlsx)",
        "createdAt": "2023-03-28T08:43:36Z",
        "updatedAt": "2023-03-31T10:03:48Z",
        "author": {
          "login": "JaynieBai"
        }
      },
      {
        "body": "Hey @JaynieBai \r\n\r\nExcellent list!\r\n\r\nI think the NoWarn part for ProjectReference might not be 100% correct. \r\nProjectReference do support NoWarn too. The issue linked is closed as a dup for transitive packages. \r\n\r\nAre you seeing anything different in your tests?",
        "createdAt": "2023-03-28T20:18:58Z",
        "updatedAt": "2023-03-28T20:18:58Z",
        "author": {
          "login": "nkolev92"
        }
      },
      {
        "body": "> Hey @JaynieBai\r\n> \r\n> Excellent list!\r\n> \r\n> I think the NoWarn part for ProjectReference might not be 100% correct. ProjectReference do support NoWarn too. The issue linked is closed as a dup for transitive packages.\r\n> \r\n> Are you seeing anything different in your tests?\r\n\r\nThanks for pointing it out.  I didn't find any direct warnings about project reference currently. But it couldn't suppress transitive warning and referenced project warning now. So mark it not supported temporarily.",
        "createdAt": "2023-03-29T02:51:37Z",
        "updatedAt": "2023-03-29T06:54:16Z",
        "author": {
          "login": "JaynieBai"
        }
      },
      {
        "body": "Not sure what you mean by ` I didn't find any direct warnings about project reference currently`\r\n\r\nI think NoWarn is equivalent for ProjectReference and PackageReference. \r\n\r\nThe lack of transitive support is a big change and it applies to more than just NoWarn.",
        "createdAt": "2023-03-29T18:47:28Z",
        "updatedAt": "2023-03-29T18:47:28Z",
        "author": {
          "login": "nkolev92"
        }
      },
      {
        "body": "Taks an example from https://github.com/JanKrivanek/msbuild/blob/doc/dependencies-behavior/documentation/wiki/Controlling-Dependencies-Behavior.md#access-to-transitive-project-references\r\nRepository Project defination: \r\n```<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>net7.0</TargetFramework>\r\n    <ImplicitUsings>enable</ImplicitUsings>\r\n    <Nullable>enable</Nullable>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Newtonsoft.Json\"/>\r\n  </ItemGroup>\r\n\r\n  <ItemGroup>\r\n    <ProjectReference Include=\"..\\Domain\\Domain.csproj\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\r\n```using Newtonsoft.Json;\r\nnamespace Repository\r\n{\r\n    public class Persona\r\n    {\r\n        private Domain.PersonTable _tbl;\r\n    }\r\n}\r\n```\r\nBuild it and there will generate following warnings.  \r\n![image](https://user-images.githubusercontent.com/26814373/228762857-77c9b4e6-9e27-4744-97fe-42393bdf0f95.png)\r\n\r\nIn Service Project definition.\r\n```<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net7.0</TargetFramework>\r\n    <ImplicitUsings>enable</ImplicitUsings>\r\n    <Nullable>enable</Nullable>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n\t  <ProjectReference Include=\"..\\Repository\\Repository.csproj\">\r\n\t\t  <NoWarn>NU1701;NU1602</NoWarn>\r\n\t  </ProjectReference>\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\r\n> Not sure what you mean by ` I didn't find any direct warnings about project reference currently`\r\n\r\nNU1701;NU1602 is transitive reference warning.  I can't find a warning that is generated from projectReference. And in https://learn.microsoft.com/en-us/nuget/reference/errors-and-warnings. It specifies NoWarn scope as Project, PackageReference",
        "createdAt": "2023-03-30T07:45:09Z",
        "updatedAt": "2023-03-30T07:45:31Z",
        "author": {
          "login": "JaynieBai"
        }
      },
      {
        "body": "Attach some examples for ExcludeAssets IncludeAssets and PrivateAssets in excel\r\n[InvestigationExamples.xlsx](https://github.com/dotnet/msbuild/files/11110401/InvestigationExamples.xlsx)\r\n",
        "createdAt": "2023-03-30T10:18:47Z",
        "updatedAt": "2023-03-30T10:18:47Z",
        "author": {
          "login": "JaynieBai"
        }
      },
      {
        "body": "If you take a project that targets net5.0 and add a project reference to a project that targets net472, you'll get a NU1702 which should be suppressible. \r\n\r\nI've created an issue to fix the doc to make it clearer: https://github.com/NuGet/docs.microsoft.com-nuget/pull/3038. \r\n",
        "createdAt": "2023-03-30T17:30:37Z",
        "updatedAt": "2023-03-30T17:30:37Z",
        "author": {
          "login": "nkolev92"
        }
      },
      {
        "body": "OK, so the bug for ProjectReference NoWarn is https://github.com/NuGet/Home/issues/8093. ",
        "createdAt": "2023-03-30T17:55:18Z",
        "updatedAt": "2023-03-30T17:55:18Z",
        "author": {
          "login": "nkolev92"
        }
      },
      {
        "body": "Discussed offline with @JanKrivanek about transitive assembly references.\r\n\r\nFrom @JaynieBai \r\nWhen project A has an assembly reference. And project B references project A. But assembly reference is not in the project B dependency lists, B can't reference the transitive assembly. But for package reference and project reference, B can reference the transitive references.  How to let projectB reference projectA assembly without setting the assembly in the project B again?\r\n\r\nFrom @JanKrivanek \r\n    Hi Jenny - transitive project and package references were added within the .net sdk style project as a feature primarily for the compiler. It might be that it was never intended to be extended to Assembly References as well - we'll check with @rainersigwald  - as he likely has the background info.",
        "createdAt": "2023-04-10T10:25:02Z",
        "updatedAt": "2023-04-10T10:25:39Z",
        "author": {
          "login": "JaynieBai"
        }
      },
      {
        "body": "Assembly references in .NET are generally required to be transitive. At runtime, if you call code from B that uses a type from A, the .NET assembly loader will fail if A cannot be loaded.\r\n\r\nAt _build_ time, the compiler may or may not need the full transitive closure--it will definitely need to see A if the public API of B returns a type from A, but if the use of A is all internal implementation details of B, the compiler may be able to succeed without access to A. However, the contract of the compiler is that you _should_ pass the full closure, and if you don't and a new compiler requires more assemblies to do deeper analysis on the same code, that is not considered a breaking change in the compiler.\r\n\r\nAll of that has been the same for a very long time; there's no change introduced in .NET Core or the .NET SDK compared to (for example) a set of VS2010 projects.\r\n\r\nPrior to SDK-enabled transitive project references, the closure was computed entirely within `ResolveAssemblyReferences` per-project. RAR will attempt to find the transitive closure of references unless instructed otherwise.\r\n\r\nIn a fully old-school project what would happen is:\r\n\r\n1. A builds, and produces `A.dll` in a folder, say `A\\bin\\debug\\A.dll`\r\n2. B builds, referencing `A.dll` from that folder _and copying it to `B\\bin\\debug\\A.dll`_\r\n3. Something that references A builds\r\n   a. ResolveProjectReferences returns the path to `B\\bin\\debug\\B.dll`\r\n   b. RAR looks at `B.dll` and sees that it has a reference to A\r\n   c. RAR looks \"next to\" `B.dll` and finds `A.dll`\r\n   d. MSBuild gives both `A.dll` and `B.dll` to the compiler\r\n   e. this project then copies both to _its_ bin directory so they're available at runtime.\r\n\r\nA big difference between this approach and the SDK's default transitive ProjectReferences is how `A.dll` is presented to RAR and whether it's marked as a direct reference.",
        "createdAt": "2023-04-10T14:30:48Z",
        "updatedAt": "2023-04-10T14:30:48Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@JaynieBai - do you plan any other work on this task? Or can this be closed? (Feels complete from my point of view. And thanks again for the help!)",
        "createdAt": "2023-05-29T12:14:44Z",
        "updatedAt": "2023-05-29T12:14:44Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "I don't have any plan for this work now. So, I think we can close that.",
        "createdAt": "2023-05-30T02:01:48Z",
        "updatedAt": "2023-05-30T02:01:48Z",
        "author": {
          "login": "JaynieBai"
        }
      }
    ]
  }
}