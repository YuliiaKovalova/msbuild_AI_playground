{
  "number": 515,
  "title": "Re-enable tests that dispose the InProcNodeProvider",
  "body": "Various tests dispose the `NodeProviderInProc` instance from the global component host in the following fashion:\n\n``` C#\n// Since we're creating our own BuildManager, we need to make sure that the default \n// one has properly relinquished the inproc node\nNodeProviderInProc nodeProviderInProc = ((IBuildComponentHost)BuildManager.DefaultBuildManager).GetComponent(BuildComponentType.InProcNodeProvider) as NodeProviderInProc;\nif (nodeProviderInProc != null)\n{\n    nodeProviderInProc.Dispose();\n}\n```\n\nThis tends to cause failures in other unrelated tests that end up trying to use the disposed instance, generally surfacing as a null reference, for example:\n\n```\n         System.NullReferenceException: Object reference not set to an instance of an object.\n            at Microsoft.Build.BackEnd.NodeProviderInProc.InProcNodeEndpoint_OnLinkStatusChanged(INodeEndpoint endpoint, LinkStatus status) in c:\\git\\msbuild\\src\\XMakeBuildEngine\\BackEnd\\Components\\Communications\\NodeProviderInProc.cs:line 417\n            at Microsoft.Build.BackEnd.NodeEndpointInProc.RaiseLinkStatusChanged(LinkStatus newStatus) in c:\\git\\msbuild\\src\\XMakeBuildEngine\\BackEnd\\Components\\Communications\\NodeEndpointInProc.cs:line 261\n            at Microsoft.Build.BackEnd.NodeEndpointInProc.ChangeLinkStatus(LinkStatus newStatus) in c:\\git\\msbuild\\src\\XMakeBuildEngine\\BackEnd\\Components\\Communications\\NodeEndpointInProc.cs:line 319\n            at Microsoft.Build.BackEnd.NodeEndpointInProc.SetPeerNodeConnected() in c:\\git\\msbuild\\src\\XMakeBuildEngine\\BackEnd\\Components\\Communications\\NodeEndpointInProc.cs:line 279\n            at Microsoft.Build.BackEnd.NodeEndpointInProc.Listen(INodePacketFactory factory) in c:\\git\\msbuild\\src\\XMakeBuildEngine\\BackEnd\\Components\\Communications\\NodeEndpointInProc.cs:line 176\n            at Microsoft.Build.BackEnd.InProcNode.Run(Exception& shutdownException) in c:\\git\\msbuild\\src\\XMakeBuildEngine\\BackEnd\\Node\\InProcNode.cs:line 155\n```\n\nFor now, I am disabling all these tests.  We may want to go back and find a better way to test this behavior or just delete the tests.\n\nInstances of this include:\n- `Scheduler_Tests`\n- `TargetEntry_Tests.AfterTargetsShouldReportFailedBuild`\n- `SolutionProjectGenerator_Tests.BadFrameworkMonkierExpectBuildToFail`\n- `SolutionProjectGenerator_Tests.BadFrameworkMonkierExpectBuildToFail2`\n",
  "state": "OPEN",
  "createdAt": "2016-03-07T23:53:40Z",
  "updatedAt": "2025-05-20T11:30:13Z",
  "closedAt": null,
  "author": {
    "login": "dsplaisted"
  },
  "milestone": null,
  "assignees": {
    "nodes": [
      {
        "login": "YuliiaKovalova"
      }
    ]
  },
  "labels": [
    ".NET Core",
    "CoreCLR-test",
    "triaged"
  ],
  "comments": {
    "nodes": [
      {
        "body": "I've been looking into this a little to help with #5604. I'm entirely new to this codebase and have no idea what's changed in the 4.5 years since this issue was created, so I may be missing lots of things, but:\r\n\r\nEnabling the 25 tests tagged with this issue doesn't seem to cause any problems in my test runs (running build.cmd and cibuild_bootstrapped_msbuild.ps1), other than one of the currently disabled tests (`SolutionProjectGenerator_Tests.BadFrameworkMonkierExpectBuildToFail2`) now failing due to changes in the method(s) it tests. This looks easy to fix.\r\n\r\nI may just be ignorant, but in the codebase as it is now I can't see why these tests should dispose the `DefaultBuildManager`'s `NodeProviderInProc` (in this way, at least) before they are run. Removing this disposal seems to cause no issues. Also:\r\n\r\n* As far as I can see, each `BuildManager` instance should have its own `NodeProviderInProc` instance.\r\n* The only obvious thing I can see that may cross between separate instances is the private *static* field `Semaphore InProcNodeOwningOperatingEnvironment`; but this is only used if the environment variable `MSBUILDINPROCENVCHECK` is set, which is only set in 3 test suites which also use `TestEnvironment` to revert this change. As long as these tests don't run in parallel, that seems fine.\r\n* There are several other tests that instantiate their own `BuildManager` without doing this strange disposal. However, those all use `TestEnvironment` which will dispose `DefaultBuildManager` if it has been instantiated. Some of them then also manually dispose it on top of that..\r\n\r\nThe first two points seem like enough reason to just drop the strange disposal and my local testing indicates that no more is needed. But to be extra safe (and more consistent) we could add `TestEnvironment` instances to the currently-disabled tests as well.\r\n\r\nCan someone more familiar say if this sounds reasonable?",
        "createdAt": "2020-09-11T06:26:56Z",
        "author": {
          "login": "benbryant0"
        }
      }
    ]
  }
}