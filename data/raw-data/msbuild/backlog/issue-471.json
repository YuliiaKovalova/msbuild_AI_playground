{
  "number": 471,
  "title": "Unable to pass in Property values containing a semicolon or comma in .Net Core MSBuild",
  "body": "In corefx repo, we pass in a special property in our outerloop jenkins runs that contains a colon ';' on the property name. With Full MSBuild, the behavior is that given the colon is found inside a quoted string, then it just assumes that the colon is part of the string. However, in .Net Core the behavior is different, since what it tries to do is to use the colon as the end of the string, and assumes that everything after the colon is a different switch. For example, if you have the following target:\n\n``` xml\n<Target Name=\"TestTarget\">\n    <ItemGroup>\n      <IParam Include=\"$(Param)\" />\n    </ItemGroup>\n    <Message Text=\"The param passed was: @(IParam)\" />\n  </Target>\n```\n\nYou get the following when using full msbuild:\n\n```\nmsbuild build.proj /p:Param=\"Hello;World\" /t:TestTarget\nProject \"C:\\Users\\joperezr\\Desktop\\repo\\corefx\\build.proj\" on node 1 (TestTarget target(s)).\nTestTarget:\n  The param passed was: Hello;World\n```\n\nThis is the result when running the same target in .Net Core MSBuild:\n\n```\nCorerun.exe MSBuild.exe build.proj /p:Param=\"Hello;World\" /t:TestTarget\nMSBUILD : error MSB1006: Property is not valid.\nSwitch: World\n```\n",
  "state": "OPEN",
  "createdAt": "2016-02-08T19:07:30Z",
  "updatedAt": "2024-05-29T15:09:13Z",
  "closedAt": null,
  "author": {
    "login": "joperezr"
  },
  "labels": [
    ".NET Core"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Hey @rainersigwald could you please take a look at this to see if it's a known issue? Currently this is the reason why our new outerloop runs in corefx are failing, we could obviously work around it by modifying the properties we pass in, but I believe that this is a bug and hopefully not a very hard one to fix\n",
        "createdAt": "2016-02-08T19:11:12Z",
        "updatedAt": "2016-02-08T19:11:12Z",
        "author": {
          "login": "joperezr"
        }
      },
      {
        "body": "Looks like it's a bug in our command-line quote handling to me, and I think we should fix it. This is the error we throw when you attempt to define a property at the command line but don't give an `=value` part:\n\n```\no:\\msbuild>msbuild /p:blah build.proj /nologo\nMSBUILD : error MSB1006: Property is not valid.\nSwitch: blah\n```\n\nSo I think what's happening here is we're disregarding the quotes and splitting at the semicolon as though it was outside the quotes (and interpreting `World` as a new property, with no given value).\n\nSide note: that error message is confusing! #472\n",
        "createdAt": "2016-02-08T20:56:53Z",
        "updatedAt": "2016-02-08T20:56:53Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Just to give an update, we're not sure exactly how to fix this quite yet. An easy workaround is to escape the quotes:\n`msbuild build.proj /p:Param=\\\"Hello;World\\\" /t:TestTarget`\n\nThe issue is [here](https://github.com/Microsoft/msbuild/blob/xplat/src/XMakeCommandLine/XMake.cs#L212-L218). We previously used Environment.CommandLine which kept the quotes, the string array does not. Since Environment.CommandLine is [not supported in .NET Core](https://github.com/dotnet/coreclr/blob/43b39a73cbf832ec13ec29ed356cb75834e7a8d7/src/mscorlib/src/System/Environment.cs#L320-L347) right now, we will have to modify our logic to handle this case.\n",
        "createdAt": "2016-02-09T17:16:47Z",
        "updatedAt": "2016-02-09T17:16:47Z",
        "author": {
          "login": "AndyGerlicher"
        }
      },
      {
        "body": "@AndyGerlicher I can try escaping the quotes for now, and will change that once we have an actual fix.\n",
        "createdAt": "2016-02-09T20:39:05Z",
        "updatedAt": "2016-02-09T20:39:05Z",
        "author": {
          "login": "joperezr"
        }
      },
      {
        "body": "We've discussed this at length in team meeting and triage. It seems the core issue here is we have custom parsing logic that differs from the command line parameter parsing logic, and they're somewhat incompatible and mutually exclusive between .NET Core and full .NET.\n\nIn Windows, we get the command line as passed in and parse it. Since this is not available in .NET Core we do something slightly different. Some options:\n1. Modify our parsing logic to be smarter about arg splitting. Since we don't have to do anything to split them this would likely be easier, but probably not 100% compatible and diverge us more from the full Framework version. Not ideal. I imagine there was also a reason why this was done in this way in the first place, but that might be over optimistic.\n2. Implement platform specific logic to try to get the proper string and use that. This is easy in Windows/cmd.exe, but not so with every platform and command processor out there. I don't want builds to fail like this in only certain scenarios for something like quotes in the command line.\n3. Try to fix this scenario, recognizing that with the loss of fidelity from the users string -> parsed args there will likely be further issues found in the future.\n4. Do nothing and escape quotes when using the .NET Core version and you need them to appear.\n\nNone of these are very good, for now we're going to stick with option 4. If someone has a better idea please speak up.\n\nNote that Environment.CommandLine isn't available by design, the issue is here https://github.com/dotnet/coreclr/issues/3103 for the discussion.\n",
        "createdAt": "2016-02-11T20:42:10Z",
        "updatedAt": "2016-02-11T20:42:10Z",
        "author": {
          "login": "AndyGerlicher"
        }
      },
      {
        "body": "I'm having this same issue. However escaping the string doesn't help. I am using Powershell if that matters.\r\n\r\n```\r\n[string]$frameworks_to_test = \"netcoreapp1.0,net451\"\r\n\r\n$testFrameworks = $frameworks_to_test.Replace(',', ';')\r\n\r\n\t\t\t&dotnet msbuild $solutionFile /t:Build `\r\n\t\t\t\t/p:Configuration=$configuration `\r\n\t\t\t\t/p:AssemblyVersion=$assemblyVersion `\r\n\t\t\t\t/p:InformationalVersion=$pv `\r\n\t\t\t\t/p:Product=$product_name `\r\n\t\t\t\t/p:Company=$company_name `\r\n\t\t\t\t/p:Copyright=$copyright `\r\n\t\t\t\t/p:TestFrameworks=\\\"$testFrameworks\\\"\r\n```\r\n\r\nI still get the \"property is not valid\" error.\r\n\r\nI am using the .NET Core SDK 2.0 to build and have verified that is what it is using with the dotnet --version command.\r\n\r\n",
        "createdAt": "2017-08-23T15:08:20Z",
        "updatedAt": "2017-08-23T15:08:20Z",
        "author": {
          "login": "NightOwl888"
        }
      },
      {
        "body": "This is still a problem with on-premise TFS update 2, when using msbuild it does not quote properly during the Xamarin.iOS build task using the Codesignkey property. The issue is not specific to just commas or semicolons, I attempted to just specify `/p:Codesignkey=iPhone Distribution` and I still receive the same error:\r\n`MSBUILD : error MSB1008: Only one project can be specified.\r\nSwitch: Distribution`",
        "createdAt": "2017-09-22T22:48:37Z",
        "updatedAt": "2017-09-22T22:50:24Z",
        "author": {
          "login": "ckrempp91"
        }
      },
      {
        "body": "Alternative workaround would be to keep whole thing in single quote \r\n`'/p:Param=\"Hello;World'`. \r\n\r\nWe get same problem with latest Xamarin on Mono: \r\nmsbuild with parameter `/p:CodesignKey=\"iPhone Distribution: Some Company, LLC\"` fails with exactly same error. But works with  `'/p:CodesignKey=\"iPhone Distribution: Some Company, LLC\"'`",
        "createdAt": "2017-10-19T15:08:15Z",
        "updatedAt": "2017-10-19T15:08:15Z",
        "author": {
          "login": "alexsorokoletov"
        }
      },
      {
        "body": "Not sure which of the issues (this or 472) is the root one, I posted detailed info into #472.",
        "createdAt": "2017-10-21T14:23:01Z",
        "updatedAt": "2017-10-21T14:23:01Z",
        "author": {
          "login": "alexsorokoletov"
        }
      },
      {
        "body": "@danmosemsft found a very nice workaround in https://github.com/Microsoft/msbuild/issues/2999#issuecomment-366101535\r\n\r\n> Note I discovered a workaround; MSBuild escaping works here. Comma is `%2c` so\r\n> ```sh-session\r\n> dan@danmose2:~/dotnetU$ dotnet msbuild  /p:\"aaa=bbb,ccc\" /v:diag | grep \"ccc\"\r\n> Switch: ccc\r\n> dan@danmose2:~/dotnetU$ dotnet msbuild  /p:\"aaa=bbb%2cccc\" /v:diag | grep \"ccc\"\r\n> /usr/share/dotnet/sdk/2.1.3/MSBuild.dll /Logger:Microsoft.DotNet.Tools.MSBuild.MSBuildLogger,/usr/share/dotnet/sdk/2.1.3/dotnet.dll /m /p:aaa=bbb%2cccc /v:m /v:diag ./dotnetU.csproj\r\n>                    aaa = bbb,ccc\r\n> ```\r\n\r\nSemicolon `;` is `%3B`.",
        "createdAt": "2018-02-16T15:34:58Z",
        "updatedAt": "2018-02-16T15:34:58Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "How do I escape this?:\r\n`.$msbuild /t:Build /t:Publish /p:TargetDatabaseName=$Database /p:TargetConnectionString=$connectionString /p:SqlPublishProfilePath=$SettingsFileName /p:Variables:ProjectDir=$ProjectDir $ProjectFileName`\r\nThe last /p gives:\r\nMSBUILD : error MSB4177: Invalid property. The name \"Variables:ProjectDir\" contains an invalid character \":\".\r\n\r\nThe property name is for building db projects using MS tools.\r\n\r\nNOTE: The property name -- Variables:ProjectDir (with a COLON in it)",
        "createdAt": "2018-04-19T01:21:52Z",
        "updatedAt": "2018-04-19T05:51:35Z",
        "author": {
          "login": "jeffmounce"
        }
      },
      {
        "body": "Have you tried something like this '/p:CodesignKey=\"iPhone Distribution: Some Company, LLC\"'\r\n\r\nHelped me. ",
        "createdAt": "2018-04-19T02:08:58Z",
        "updatedAt": "2018-04-19T02:08:58Z",
        "author": {
          "login": "alexsorokoletov"
        }
      },
      {
        "body": "@jeffmounce Colons are not valid in MSBuild property names. How did you identify that property? What kind of project uses it?",
        "createdAt": "2018-04-19T14:36:12Z",
        "updatedAt": "2018-04-19T14:36:12Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "SQL DB Project.\r\nhttps://msdn.microsoft.com/en-us/library/hh550080(v=vs.103).aspx\r\n(search for \"/Variables:\")\r\n\r\nTo pass through parameters to sqlpackage, you simply append /p: to them and they pass through.\r\n",
        "createdAt": "2018-04-19T15:21:04Z",
        "updatedAt": "2018-04-19T15:21:04Z",
        "author": {
          "login": "jeffmounce"
        }
      },
      {
        "body": "@jeffmounce\r\n\r\n> To pass through parameters to sqlpackage, you simply append /p: to them and they pass through.\r\n\r\nMSBuild doesn't have a mechanism to do that: MSBuild logic cannot enumerate defined properties, so it can't detect arbitrary properties. Where did you get that information?",
        "createdAt": "2018-04-19T15:24:55Z",
        "updatedAt": "2018-04-19T15:24:55Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "There are many such posts around the net about this. Such as:\r\nhttps://social.msdn.microsoft.com/Forums/sqlserver/en-US/e8975bc0-e1a3-4d53-a286-4832b8491301/working-with-msbuild-in-order-to-build-and-deploy-a-database-project?forum=ssdt\r\n\r\nBut it sounds like the answer is \"you can't do that.\" \r\nSo, I ask, \"How do I build an SSDT project using msbuild and pass SQLCMD variables?\"",
        "createdAt": "2018-04-19T15:40:01Z",
        "updatedAt": "2018-04-19T15:40:01Z",
        "author": {
          "login": "jeffmounce"
        }
      },
      {
        "body": "> How do I build an SSDT project using msbuild and pass SQLCMD variables?\r\n\r\nThat's a great question for the SSDT folks. I don't know offhand the best way to contact them; I'd try [their forum](https://social.msdn.microsoft.com/Forums/en-US/home?forum=ssdt) or asking for documentation at their [docs site](https://docs.microsoft.com/en-us/sql/ssdt/changelog-for-sql-server-data-tools-ssdt?view=sql-server-2017).",
        "createdAt": "2018-04-19T15:52:59Z",
        "updatedAt": "2018-04-19T15:52:59Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Unfortunately, `%3B` does not get split into items in an ItemGroup like a normal semicolon (even though it appears like one).\r\n\r\nWorkaround for PowerShell seems to be:\r\n\r\n    /p:Param=\\`\"Hello`;World\\`\"\r\n\r\n(slash and backtick before quotes, backtick before semicolon)",
        "createdAt": "2022-06-04T00:00:07Z",
        "updatedAt": "2022-06-04T00:00:07Z",
        "author": {
          "login": "JVimes"
        }
      },
      {
        "body": "## msbuild command\r\nThat is working in Powershell\r\n```\r\nmsbuild \"/t:restore\" \"/t:build\" \"/p:LibraryFrameworks=`\"net6.0;net7.0`\"\" \r\n# note: backtick and quote\r\n```\r\n\r\n## dotnet command\r\nIn powershell, that is working for dotnet command\r\n```\r\n## as said by @JVimes \r\ndotnet build \"/p:LibraryFrameworks=\\`\"net6.0;net7.0\\`\"\"\r\n##note:  slash and backtick before quotes. (NO NEED for backtick before semicolon)\r\n```\r\nIn cmd console, that is working for dotnet command\r\n```\r\ndotnet build \"/p:LibraryFrameworks=\"\"net6.0;net7.0\"\"\"\r\n::note: use double quote , and quote all string \"/p.......\"\r\n```\r\n\r\n@rainersigwald , There is a variation between dotnet command and msbuild command.",
        "createdAt": "2022-12-02T20:05:34Z",
        "updatedAt": "2022-12-02T20:25:27Z",
        "author": {
          "login": "moh-hassan"
        }
      },
      {
        "body": "> Alternative workaround would be to keep whole thing in single quote `'/p:Param=\"Hello;World'`.\r\n> \r\n> We get same problem with latest Xamarin on Mono: msbuild with parameter `/p:CodesignKey=\"iPhone Distribution: Some Company, LLC\"` fails with exactly same error. But works with `'/p:CodesignKey=\"iPhone Distribution: Some Company, LLC\"'`\r\n\r\nThis was the exact work around for the issue we had. Thank you for posting this. Here is our bash command that we used in our pipeline(our company name has a comma in the signing identity): \r\n\r\n**'-p:CodesignKey=\"$(APPLE_CERTIFICATE_SIGNING_IDENTITY)\"'**\r\n\r\n```yaml\r\n- task: Bash@3\r\n  displayName: Build app and publish ipa file\r\n  inputs:\r\n    targetType: inline\r\n    script: dotnet publish --no-restore -r ios-arm64 -c Release -p:ArchiveOnBuild=true -p:ApplicationId=$(AppStore.CFBundleIdentifier) '-p:CodesignKey=\"$(APPLE_CERTIFICATE_SIGNING_IDENTITY)\"' -p:CodesignProvision=$(APPLE_PROV_PROFILE_UUID)\r\n```",
        "createdAt": "2023-08-23T15:38:22Z",
        "updatedAt": "2023-08-24T01:19:36Z",
        "author": {
          "login": "Mr-Horse"
        }
      },
      {
        "body": "That is a workaround for that issue, which is caused by both the bash/sh interpreter and msbuild.  \r\nOtherwise still having the issue in 2024... Incredible.\r\n\r\n ```\r\n          #Workaround https://github.com/dotnet/msbuild/issues/471\r\n          signIdentityEscaped=$(echo \"$CERTIFICATE_NAME\" | sed 's/,/%2C/g')\r\n          signIdentityEscaped=$(echo \"$signIdentityEscaped\" | sed 's/;/%3B/g')\r\n          signIdentityEscaped=$(echo \"$signIdentityEscaped\" | sed 's/ /%20/g')\r\n\r\n\r\n          $DOTNET_BIN publish -f net8.0-ios \\\r\n            -c Release \\\r\n            -p:RuntimeIdentifier=ios-arm64 \\\r\n            -p:BuildIpa=True \\\r\n            -p:ApplicationVersion=$UPDATED_BUILD_NUMBER \\\r\n            -p:CodesignKey=\"$signIdentityEscaped\" \\\r\n            -p:CodesignProvision=\"$PROVISIONING_PROFILE_UUID\" \\\r\n            -o \"$CM_BUILD_DIR/artifacts\"\r\n ```\r\n\r\nI use that shell code in codemagic yaml for a maui app. But that should work in any CI/CD using a mac.",
        "createdAt": "2024-04-09T12:22:02Z",
        "updatedAt": "2024-05-29T15:09:13Z",
        "author": {
          "login": "softlion"
        }
      }
    ]
  }
}