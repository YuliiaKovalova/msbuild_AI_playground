{
  "number": 2015,
  "title": "ResolveAssemblyReference is slow on .NET Core with many references",
  "body": "`ResolveAssemblyReferences` runs unconditionally even on incremental builds (because the user may have installed a targeting pack or, for full-framework scenarios, GACed an assembly). This makes it performance-sensitive.\r\n\r\nWith the advent of .NET Core micro-assemblies, it has become common to pass many, many references to RAR. This exacerbates performance problems.\r\n\r\n@rynowak was kind enough to run a profiler to see this:\r\n![image](https://cloud.githubusercontent.com/assets/3347530/25451941/75f2335e-2a89-11e7-8120-2932673c8ebe.png)",
  "state": "OPEN",
  "createdAt": "2017-04-26T19:13:50Z",
  "updatedAt": "2024-02-21T16:36:55Z",
  "closedAt": null,
  "author": {
    "login": "rainersigwald"
  },
  "labels": [
    "Area: Performance",
    "Area: Task: Resolve Assembly References (RAR)",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Backlog"
  },
  "comments": {
    "nodes": [
      {
        "body": "One thing of note: MSBuild only calls that `AssemblyName` constructor because `AssemblyName.Clone()` isn't available in .NET Standard 1.x. One possible improvement here would be to move to .NET Core 2.0.",
        "createdAt": "2017-04-26T19:14:47Z",
        "updatedAt": "2017-04-26T19:14:47Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "To add a little more detail we really have a project that's taking this long to build (referring to the 95sec spent in `UnifyAssemblyNameVersions`).\r\n\r\nYou may want to check out https://github.com/aspnet/Mvc/tree/dev/test/Microsoft.AspNetCore.Mvc.FunctionalTests in general as example of a really complicated dotnet core package that's updated to the bleeding edge.",
        "createdAt": "2017-04-26T19:57:51Z",
        "updatedAt": "2017-04-26T19:57:51Z",
        "author": {
          "login": "rynowak"
        }
      },
      {
        "body": "There's an ask from the ASP.NET team to not even run ResolveAssemblyReference in some cases.  See https://github.com/dotnet/sdk/issues/1193",
        "createdAt": "2017-05-16T16:12:41Z",
        "updatedAt": "2017-05-16T16:12:41Z",
        "author": {
          "login": "eerhardt"
        }
      },
      {
        "body": "I think you should look at a couple options:\r\n1. Caching immutable data (like metadata about a file inside a nuget package / targeting pack) to avoid recalculation from multiple processes / projects / rebuilds.\r\n2. Identifying a fast path to skip RAR entirely and populate its outputs from a cache file in OBJ.\r\n\r\nI think #2 is doable if we look at the right set of inputs/outputs and potentially change AssemblySearchPaths for some project types.\r\n",
        "createdAt": "2017-05-22T22:27:24Z",
        "updatedAt": "2017-05-22T22:27:24Z",
        "author": {
          "login": "ericstj"
        }
      },
      {
        "body": "There is a cache in RAR but we can't use it in Core because it depends on BinarySerialization which isn't accessible to us.\r\n\r\nI'm fairly hesitant to build any assumptions about nuget immutability into RAR.",
        "createdAt": "2017-05-22T22:31:35Z",
        "updatedAt": "2017-05-22T22:31:35Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Isn't binary serialization available in `netcoreapp2.0` now, as part of `netstandard2.0`?",
        "createdAt": "2017-05-22T22:36:11Z",
        "updatedAt": "2017-05-22T22:36:11Z",
        "author": {
          "login": "DamianEdwards"
        }
      },
      {
        "body": "@DamianEdwards Yes, but we're not targeting that. We'd like to but it's a lot of work and we can't do it for 15.3.",
        "createdAt": "2017-05-22T22:36:46Z",
        "updatedAt": "2017-05-22T22:36:46Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald can you not light-up on it in the same way you did for the change above? Or is not really factored to enable that easily right now?",
        "createdAt": "2017-05-22T22:37:57Z",
        "updatedAt": "2017-05-22T22:37:57Z",
        "author": {
          "login": "DamianEdwards"
        }
      },
      {
        "body": "@DamianEdwards I don't think so, because binary serialization requires source attributes, which can't be discovered via reflection.",
        "createdAt": "2017-05-22T22:40:00Z",
        "updatedAt": "2017-05-22T22:40:00Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "What other serialization options do we have?",
        "createdAt": "2017-05-22T22:50:38Z",
        "updatedAt": "2017-05-22T22:50:38Z",
        "author": {
          "login": "kieranmo"
        }
      },
      {
        "body": "I'm going to spend tomorrow on some prototyping and profiling on this.",
        "createdAt": "2017-05-22T23:02:19Z",
        "updatedAt": "2017-05-22T23:02:19Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald thanks",
        "createdAt": "2017-05-22T23:04:08Z",
        "updatedAt": "2017-05-22T23:04:08Z",
        "author": {
          "login": "DamianEdwards"
        }
      },
      {
        "body": "@DamianEdwards what's the best scenario to hammer on? A `dotnet new web` project with sdk 2, and incremental `dotnet build`s? On my machine RAR doesn't seem like a significant part of that (1 ms of the 1 s build) while NuGet operations take the time:\r\n\r\n```\r\n        9 ms  CheckForImplicitPackageReferenceOverrides   1 calls\r\n       20 ms  ProduceContentAssets                       1 calls\r\n       99 ms  GenerateRuntimeConfigurationFiles          1 calls\r\n      149 ms  ResolvePackageFileConflicts                1 calls\r\n      239 ms  ResolvePackageDependencies                 1 calls\r\n```",
        "createdAt": "2017-05-22T23:07:49Z",
        "updatedAt": "2017-05-22T23:07:49Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald try `dotnet new mvc`. Here's the result on my machine (all from the CLI using `dotnet build`):\r\n\r\n## 1st build ##\r\n```\r\n   9 ms  CoreGenerateAssemblyInfo                   1 calls\r\n  32 ms  CheckForImplicitPackageReferenceOverrides   1 call\r\n  32 ms  _CopyOutOfDateSourceItemsToOutputDirectory   1 cal\r\n  33 ms  RunProduceContentAssets                    1 calls\r\n  47 ms  _ComputeLockFileReferences                 1 calls\r\n  67 ms  GenerateBuildRuntimeConfigurationFiles     1 calls\r\n  81 ms  ResolveLockFileReferences                  1 calls\r\n 108 ms  _ComputeLockFileCopyLocal                  1 calls\r\n 123 ms  GenerateBuildDependencyFile                1 calls\r\n 172 ms  RunResolvePackageDependencies              1 calls\r\n 246 ms  _HandlePackageFileConflicts                1 calls\r\n 905 ms  ResolveAssemblyReferences                  1 calls\r\n1388 ms  CoreCompile                                1 calls\r\n```\r\n\r\n## 2nd build ##\r\n```\r\n  8 ms  CoreCompile                                1 calls\r\n 11 ms  CheckForImplicitPackageReferenceOverrides   1 calls\r\n 33 ms  RunProduceContentAssets                    1 calls\r\n 52 ms  _ComputeLockFileReferences                 1 calls\r\n 69 ms  GenerateBuildRuntimeConfigurationFiles     1 calls\r\n 80 ms  ResolveLockFileReferences                  1 calls\r\n108 ms  _ComputeLockFileCopyLocal                  1 calls\r\n147 ms  _HandlePackageFileConflicts                1 calls\r\n186 ms  RunResolvePackageDependencies              1 calls\r\n960 ms  ResolveAssemblyReferences                  1 calls\r\n```\r\n\r\n## 3rd build ##\r\n```\r\n  8 ms  CoreCompile                                1 calls\r\n 12 ms  CheckForImplicitPackageReferenceOverrides   1 calls\r\n 34 ms  RunProduceContentAssets                    1 calls\r\n 46 ms  _ComputeLockFileReferences                 1 calls\r\n 66 ms  GenerateBuildRuntimeConfigurationFiles     1 calls\r\n 79 ms  ResolveLockFileReferences                  1 calls\r\n119 ms  _ComputeLockFileCopyLocal                  1 calls\r\n140 ms  _HandlePackageFileConflicts                1 calls\r\n182 ms  RunResolvePackageDependencies              1 calls\r\n950 ms  ResolveAssemblyReferences                  1 calls\r\n```",
        "createdAt": "2017-05-23T05:31:34Z",
        "updatedAt": "2017-05-23T05:31:34Z",
        "author": {
          "login": "DamianEdwards"
        }
      },
      {
        "body": "Or use this project if you want a really fun one \ud83d\ude06 \r\n\r\nhttps://github.com/aspnet/Mvc/tree/dev/test/Microsoft.AspNetCore.Mvc.FunctionalTests",
        "createdAt": "2017-05-23T07:37:26Z",
        "updatedAt": "2017-05-23T07:37:26Z",
        "author": {
          "login": "rynowak"
        }
      },
      {
        "body": "Here's what I've figured out so far:\r\n\r\n* A `dotnet new mvc` project passes **307** assemblies to RAR. That's a lot.\r\n* It also checks for the existence of ~5000 files.\r\n* Passing `FindDependencies=false` reduces overall time in RAR by ~half.\r\n* Profiling indicates no glaring hotspots, though there's plenty of room for improvement. Time is roughly evenly split between \r\n  * I/O (reading files to get assembly versions, checking for existence)\r\n  * RAR internals\r\n  * Calling `AssemblyName.Clone()` via reflection (even after #2016)\r\n* Using full-framework MSBuild (with the existing caching strategy) improves performance significantly (~30%) but not enough.\r\n\r\nThere are a couple of options to shorten this:\r\n* Spend a ton of time improving perf.\r\n  * Looking around, I think there are plenty of things that can be rewritten or cached in a static.\r\n  * But probably not (say) a 10x speedup.\r\n* Build a total-inputs:total-outputs cache into RAR.\r\n  * This is very hard in the general case, because arbitrary machine state not directly input to RAR can affect outputs: changing the registry, GACing files, installing a .NET SDK.\r\n* See if we can avoid calling RAR entirely.\r\n\r\nI spoke to a source who was involved with RAR in the past (you can't escape if you're still in DevDiv, but I can keep your name out of the press!) who thought that the best option might be to teach the NuGet-resolution targets to emit directly to the items that are RAR outputs (like `@(ReferencePath)`), instead of resolving from NuGet assets file -> items pointing to paths on disk -> RAR -> different set of items pointing to paths on disk.\r\n\r\nRAR does basically three things, none of which are super interesting for NuGet references:\r\n* Find a file given a string.\r\n  * But NuGet references are already resolved to an absolute path.\r\n* Find dependencies and satellite assemblies.\r\n  * Should be described in the package.\r\n* Version unification and conflict resolution\r\n  * Handled in [`ResolvePackageFileConflicts`](https://github.com/dotnet/sdk/blob/4293c538d3542192b0f7bf5b186ccd64f4d98c45/src/Tasks/Microsoft.NET.Build.Tasks/ConflictResolution/ResolvePackageFileConflicts.cs) in the SDK.\r\n\r\nWe can't eliminate RAR altogether, because when targeting a full framework TFM you can use references that don't come from NuGet (like `<Reference Include=\"System.Configuration\" />` or direct reference to a path on disk). But we could filter the list to elide packages that come from NuGet.\r\n\r\nI prototyped this with an injected task:\r\n```csproj\r\n<Target Name=\"AdjustRAR\" BeforeTargets=\"ResolveAssemblyReferences\" Condition=\"'$(AdjustRAR)' != 'false'\">\r\n  <ItemGroup>\r\n    <ReferencePath Include=\"@(Reference)\" Condition=\"'%(NuGetSourceType)' == 'Package'\" />\r\n    <Reference Remove=\"@(Reference)\"  Condition=\"'%(NuGetSourceType)' == 'Package'\" />\r\n  </ItemGroup>\r\n</Target>\r\n```\r\n\r\nFor an MVC template project, that completely eliminates RAR:\r\n```\r\n        9 ms  CoreCompile                                1 calls\r\n       10 ms  AdjustRAR                                  1 calls\r\n       10 ms  _CheckForUnsupportedTargetFramework        1 calls\r\n       18 ms  CheckForImplicitPackageReferenceOverrides   1 calls\r\n       45 ms  FindReferenceAssembliesForReferences       1 calls\r\n       45 ms  RunProduceContentAssets                    1 calls\r\n       65 ms  _ComputeLockFileReferences                 1 calls\r\n       85 ms  GenerateBuildRuntimeConfigurationFiles     1 calls\r\n      128 ms  ResolveLockFileReferences                  1 calls\r\n      155 ms  _ComputeLockFileCopyLocal                  1 calls\r\n      203 ms  _HandlePackageFileConflicts                1 calls\r\n      267 ms  RunResolvePackageDependencies              1 calls\r\n```\r\n\r\nOk, so great. What are the risks here? We need to sync with the SDK and NuGet teams about:\r\n* Are there situations where \"the package paths are sufficient\" aren't true? Can we detect them easily?\r\n* What metadata from RAR do we need to preserve (by teaching the NuGet package resolution logic about it)?",
        "createdAt": "2017-05-24T20:24:10Z",
        "updatedAt": "2017-05-24T20:24:10Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald great info. That number of assemblies is much higher than expected (by about 67%). Could you share the list?",
        "createdAt": "2017-05-24T21:05:17Z",
        "updatedAt": "2017-05-24T21:05:17Z",
        "author": {
          "login": "DamianEdwards"
        }
      },
      {
        "body": "Also, you say: \r\n\r\n> We can't eliminate RAR altogether, because when targeting a full framework TFM you can use references that don't come from NuGet (like <Reference Include=\"System.Configuration\" /> or direct reference to a path on disk). But we could filter the list to elide packages that come from NuGet.\r\n\r\nCould we eliminate it in the cases the project is **not** targeting a full framework TFM then?",
        "createdAt": "2017-05-24T21:08:03Z",
        "updatedAt": "2017-05-24T21:08:03Z",
        "author": {
          "login": "DamianEdwards"
        }
      },
      {
        "body": "> Could we eliminate it in the cases the project is not targeting a full framework TFM then?\r\n\r\nWhat I'm hoping is that we can run it only for references that don't come in via NuGet. In the common non-full-framework-targeting case, then, it won't run at all--that's what I see with my target from above.",
        "createdAt": "2017-05-24T21:25:04Z",
        "updatedAt": "2017-05-24T21:25:04Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "You need to run it for full framework on the nuget assemblies as well.  It'll find version conflicts and emit bindingRedirects.",
        "createdAt": "2017-05-24T21:36:53Z",
        "updatedAt": "2017-05-24T21:36:53Z",
        "author": {
          "login": "ericstj"
        }
      },
      {
        "body": "@DamianEdwards \r\n\r\n> Could you share the list?\r\n\r\n<details><summary>RAR outputs of `dotnet new mvc`</summary>\r\n\r\n```\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.aspnetcore.antiforgery\\2.0.0-preview1-final\\lib\\netcoreapp2.0\\Microsoft.AspNetCore.Antiforgery.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.aspnetcore.authentication.abstractions\\2.0.0-preview1-final\\lib\\netcoreapp2.0\\Microsoft.AspNetCore.Authentication.Abstractions.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.aspnetcore.authentication.cookies\\2.0.0-preview1-final\\lib\\netcoreapp2.0\\Microsoft.AspNetCore.Authentication.Cookies.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.aspnetcore.authentication.core\\2.0.0-preview1-final\\lib\\netcoreapp2.0\\Microsoft.AspNetCore.Authentication.Core.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.aspnetcore.authentication\\2.0.0-preview1-final\\lib\\netcoreapp2.0\\Microsoft.AspNetCore.Authentication.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.aspnetcore.authentication.facebook\\2.0.0-preview1-final\\lib\\netcoreapp2.0\\Microsoft.AspNetCore.Authentication.Facebook.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.aspnetcore.authentication.google\\2.0.0-preview1-final\\lib\\netcoreapp2.0\\Microsoft.AspNetCore.Authentication.Google.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.aspnetcore.authentication.jwtbearer\\2.0.0-preview1-final\\lib\\netcoreapp2.0\\Microsoft.AspNetCore.Authentication.JwtBearer.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.aspnetcore.authentication.microsoftaccount\\2.0.0-preview1-final\\lib\\netcoreapp2.0\\Microsoft.AspNetCore.Authentication.MicrosoftAccount.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.aspnetcore.authentication.oauth\\2.0.0-preview1-final\\lib\\netcoreapp2.0\\Microsoft.AspNetCore.Authentication.OAuth.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.aspnetcore.authentication.openidconnect\\2.0.0-preview1-final\\lib\\netcoreapp2.0\\Microsoft.AspNetCore.Authentication.OpenIdConnect.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.aspnetcore.authentication.twitter\\2.0.0-preview1-final\\lib\\netcoreapp2.0\\Microsoft.AspNetCore.Authentication.Twitter.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.aspnetcore.authorization\\2.0.0-preview1-final\\lib\\netcoreapp2.0\\Microsoft.AspNetCore.Authorization.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.aspnetcore.cookiepolicy\\2.0.0-preview1-final\\lib\\netcoreapp2.0\\Microsoft.AspNetCore.CookiePolicy.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.aspnetcore.cors\\2.0.0-preview1-final\\lib\\netcoreapp2.0\\Microsoft.AspNetCore.Cors.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.aspnetcore.cryptography.internal\\2.0.0-preview1-final\\lib\\netstandard1.3\\Microsoft.AspNetCore.Cryptography.Internal.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.aspnetcore.cryptography.keyderivation\\2.0.0-preview1-final\\lib\\netstandard1.3\\Microsoft.AspNetCore.Cryptography.KeyDerivation.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.aspnetcore.dataprotection.abstractions\\2.0.0-preview1-final\\lib\\netstandard1.3\\Microsoft.AspNetCore.DataProtection.Abstractions.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.aspnetcore.dataprotection.azurestorage\\2.0.0-preview1-final\\lib\\netstandard1.5\\Microsoft.AspNetCore.DataProtection.AzureStorage.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.aspnetcore.dataprotection\\2.0.0-preview1-final\\lib\\netstandard1.3\\Microsoft.AspNetCore.DataProtection.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.aspnetcore.dataprotection.extensions\\2.0.0-preview1-final\\lib\\netstandard1.3\\Microsoft.AspNetCore.DataProtection.Extensions.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.aspnetcore.diagnostics.abstractions\\2.0.0-preview1-final\\lib\\netcoreapp2.0\\Microsoft.AspNetCore.Diagnostics.Abstractions.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.aspnetcore.diagnostics\\2.0.0-preview1-final\\lib\\netcoreapp2.0\\Microsoft.AspNetCore.Diagnostics.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.aspnetcore.diagnostics.entityframeworkcore\\2.0.0-preview1-final\\lib\\netcoreapp2.0\\Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.aspnetcore.diagnostics.identity.service\\1.0.0-preview1-final\\lib\\netcoreapp2.0\\Microsoft.AspNetCore.Diagnostics.Identity.Service.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.aspnetcore\\2.0.0-preview1-final\\lib\\netcoreapp2.0\\Microsoft.AspNetCore.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.aspnetcore.hosting.abstractions\\2.0.0-preview1-final\\lib\\netcoreapp2.0\\Microsoft.AspNetCore.Hosting.Abstractions.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.aspnetcore.hosting\\2.0.0-preview1-final\\lib\\netcoreapp2.0\\Microsoft.AspNetCore.Hosting.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.aspnetcore.hosting.server.abstractions\\2.0.0-preview1-final\\lib\\netcoreapp2.0\\Microsoft.AspNetCore.Hosting.Server.Abstractions.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.aspnetcore.html.abstractions\\2.0.0-preview1-final\\lib\\netstandard1.0\\Microsoft.AspNetCore.Html.Abstractions.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.aspnetcore.http.abstractions\\2.0.0-preview1-final\\lib\\netcoreapp2.0\\Microsoft.AspNetCore.Http.Abstractions.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.aspnetcore.http\\2.0.0-preview1-final\\lib\\netcoreapp2.0\\Microsoft.AspNetCore.Http.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.aspnetcore.http.extensions\\2.0.0-preview1-final\\lib\\netcoreapp2.0\\Microsoft.AspNetCore.Http.Extensions.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.aspnetcore.http.features\\2.0.0-preview1-final\\lib\\netcoreapp2.0\\Microsoft.AspNetCore.Http.Features.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.aspnetcore.httpoverrides\\2.0.0-preview1-final\\lib\\netcoreapp2.0\\Microsoft.AspNetCore.HttpOverrides.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.aspnetcore.identity\\2.0.0-preview1-final\\lib\\netcoreapp2.0\\Microsoft.AspNetCore.Identity.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.aspnetcore.identity.entityframeworkcore\\2.0.0-preview1-final\\lib\\netcoreapp2.0\\Microsoft.AspNetCore.Identity.EntityFrameworkCore.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.aspnetcore.identity.service.abstractions\\1.0.0-preview1-final\\lib\\netcoreapp2.0\\Microsoft.AspNetCore.Identity.Service.Abstractions.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.aspnetcore.identity.service.core\\1.0.0-preview1-final\\lib\\netcoreapp2.0\\Microsoft.AspNetCore.Identity.Service.Core.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.aspnetcore.identity.service\\1.0.0-preview1-final\\lib\\netcoreapp2.0\\Microsoft.AspNetCore.Identity.Service.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.aspnetcore.identity.service.entityframeworkcore\\1.0.0-preview1-final\\lib\\netcoreapp2.0\\Microsoft.AspNetCore.Identity.Service.EntityFrameworkCore.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.aspnetcore.identity.service.integratedwebclient\\1.0.0-preview1-final\\lib\\netcoreapp2.0\\Microsoft.AspNetCore.Identity.Service.IntegratedWebClient.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.aspnetcore.identity.service.mvc\\1.0.0-preview1-final\\lib\\netcoreapp2.0\\Microsoft.AspNetCore.Identity.Service.Mvc.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.aspnetcore.jsonpatch\\2.0.0-preview1-final\\lib\\netcoreapp2.0\\Microsoft.AspNetCore.JsonPatch.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.aspnetcore.localization\\2.0.0-preview1-final\\lib\\netcoreapp2.0\\Microsoft.AspNetCore.Localization.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.aspnetcore.localization.routing\\2.0.0-preview1-final\\lib\\netcoreapp2.0\\Microsoft.AspNetCore.Localization.Routing.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.aspnetcore.middlewareanalysis\\2.0.0-preview1-final\\lib\\netcoreapp2.0\\Microsoft.AspNetCore.MiddlewareAnalysis.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.abstractions\\2.0.0-preview1-final\\lib\\netcoreapp2.0\\Microsoft.AspNetCore.Mvc.Abstractions.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.apiexplorer\\2.0.0-preview1-final\\lib\\netcoreapp2.0\\Microsoft.AspNetCore.Mvc.ApiExplorer.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.core\\2.0.0-preview1-final\\lib\\netcoreapp2.0\\Microsoft.AspNetCore.Mvc.Core.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.cors\\2.0.0-preview1-final\\lib\\netcoreapp2.0\\Microsoft.AspNetCore.Mvc.Cors.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.dataannotations\\2.0.0-preview1-final\\lib\\netcoreapp2.0\\Microsoft.AspNetCore.Mvc.DataAnnotations.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc\\2.0.0-preview1-final\\lib\\netcoreapp2.0\\Microsoft.AspNetCore.Mvc.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.formatters.json\\2.0.0-preview1-final\\lib\\netcoreapp2.0\\Microsoft.AspNetCore.Mvc.Formatters.Json.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.formatters.xml\\2.0.0-preview1-final\\lib\\netcoreapp2.0\\Microsoft.AspNetCore.Mvc.Formatters.Xml.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.localization\\2.0.0-preview1-final\\lib\\netcoreapp2.0\\Microsoft.AspNetCore.Mvc.Localization.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.razor\\2.0.0-preview1-final\\lib\\netcoreapp2.0\\Microsoft.AspNetCore.Mvc.Razor.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.razor.extensions\\2.0.0-preview1-final\\lib\\netstandard1.3\\Microsoft.AspNetCore.Mvc.Razor.Extensions.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.razorpages\\2.0.0-preview1-final\\lib\\netcoreapp2.0\\Microsoft.AspNetCore.Mvc.RazorPages.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.taghelpers\\2.0.0-preview1-final\\lib\\netcoreapp2.0\\Microsoft.AspNetCore.Mvc.TagHelpers.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.viewfeatures\\2.0.0-preview1-final\\lib\\netcoreapp2.0\\Microsoft.AspNetCore.Mvc.ViewFeatures.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.aspnetcore.owin\\2.0.0-preview1-final\\lib\\netcoreapp2.0\\Microsoft.AspNetCore.Owin.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.aspnetcore.razor\\2.0.0-preview1-final\\lib\\netstandard1.3\\Microsoft.AspNetCore.Razor.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.aspnetcore.razor.language\\2.0.0-preview1-final\\lib\\netstandard1.3\\Microsoft.AspNetCore.Razor.Language.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.aspnetcore.razor.runtime\\2.0.0-preview1-final\\lib\\netstandard1.5\\Microsoft.AspNetCore.Razor.Runtime.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.aspnetcore.responsecaching.abstractions\\2.0.0-preview1-final\\lib\\netcoreapp2.0\\Microsoft.AspNetCore.ResponseCaching.Abstractions.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.aspnetcore.responsecaching\\2.0.0-preview1-final\\lib\\netcoreapp2.0\\Microsoft.AspNetCore.ResponseCaching.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.aspnetcore.responsecompression\\2.0.0-preview1-final\\lib\\netcoreapp2.0\\Microsoft.AspNetCore.ResponseCompression.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.aspnetcore.rewrite\\2.0.0-preview1-final\\lib\\netcoreapp2.0\\Microsoft.AspNetCore.Rewrite.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.aspnetcore.routing.abstractions\\2.0.0-preview1-final\\lib\\netcoreapp2.0\\Microsoft.AspNetCore.Routing.Abstractions.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.aspnetcore.routing\\2.0.0-preview1-final\\lib\\netcoreapp2.0\\Microsoft.AspNetCore.Routing.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.aspnetcore.server.httpsys\\2.0.0-preview1-final\\lib\\netcoreapp2.0\\Microsoft.AspNetCore.Server.HttpSys.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.aspnetcore.server.iisintegration\\2.0.0-preview1-final\\lib\\netcoreapp2.0\\Microsoft.AspNetCore.Server.IISIntegration.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.aspnetcore.server.kestrel.core\\2.0.0-preview1-final\\lib\\netcoreapp2.0\\Microsoft.AspNetCore.Server.Kestrel.Core.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.aspnetcore.server.kestrel\\2.0.0-preview1-final\\lib\\netcoreapp2.0\\Microsoft.AspNetCore.Server.Kestrel.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.aspnetcore.server.kestrel.https\\2.0.0-preview1-final\\lib\\netcoreapp2.0\\Microsoft.AspNetCore.Server.Kestrel.Https.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.aspnetcore.server.kestrel.transport.abstractions\\2.0.0-preview1-final\\lib\\netcoreapp2.0\\Microsoft.AspNetCore.Server.Kestrel.Transport.Abstractions.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.aspnetcore.server.kestrel.transport.libuv\\2.0.0-preview1-final\\lib\\netcoreapp2.0\\Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.aspnetcore.server.kestrel.transport.sockets\\2.0.0-preview1-final\\lib\\netcoreapp2.0\\Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.aspnetcore.session\\2.0.0-preview1-final\\lib\\netcoreapp2.0\\Microsoft.AspNetCore.Session.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.aspnetcore.staticfiles\\2.0.0-preview1-final\\lib\\netcoreapp2.0\\Microsoft.AspNetCore.StaticFiles.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.aspnetcore.websockets\\2.0.0-preview1-final\\lib\\netcoreapp2.0\\Microsoft.AspNetCore.WebSockets.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.aspnetcore.webutilities\\2.0.0-preview1-final\\lib\\netcoreapp2.0\\Microsoft.AspNetCore.WebUtilities.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.azure.keyvault\\2.2.1-preview\\lib\\netstandard1.4\\Microsoft.Azure.KeyVault.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.azure.keyvault.webkey\\2.0.5\\lib\\netstandard1.4\\Microsoft.Azure.KeyVault.WebKey.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.codeanalysis.csharp\\2.0.0\\lib\\netstandard1.3\\Microsoft.CodeAnalysis.CSharp.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.codeanalysis.common\\2.0.0\\lib\\netstandard1.3\\Microsoft.CodeAnalysis.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.codeanalysis.razor\\2.0.0-preview1-final\\lib\\netstandard1.3\\Microsoft.CodeAnalysis.Razor.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\Microsoft.CSharp.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.data.edm\\5.8.2\\lib\\netstandard1.1\\Microsoft.Data.Edm.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.data.odata\\5.8.2\\lib\\netstandard1.1\\Microsoft.Data.OData.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.data.sqlite.core\\2.0.0-preview1-final\\lib\\netstandard1.2\\Microsoft.Data.Sqlite.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.dotnet.platformabstractions\\2.0.0-preview1-002111\\lib\\netstandard1.3\\Microsoft.DotNet.PlatformAbstractions.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.entityframeworkcore.design\\2.0.0-preview1-final\\lib\\netstandard1.3\\Microsoft.EntityFrameworkCore.Design.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.entityframeworkcore\\2.0.0-preview1-final\\lib\\netstandard1.3\\Microsoft.EntityFrameworkCore.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.entityframeworkcore.inmemory\\2.0.0-preview1-final\\lib\\netstandard1.3\\Microsoft.EntityFrameworkCore.InMemory.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.entityframeworkcore.relational.design\\2.0.0-preview1-final\\lib\\netstandard1.3\\Microsoft.EntityFrameworkCore.Relational.Design.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.entityframeworkcore.relational\\2.0.0-preview1-final\\lib\\netstandard1.3\\Microsoft.EntityFrameworkCore.Relational.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.entityframeworkcore.sqlite.design\\2.0.0-preview1-final\\lib\\netstandard1.3\\Microsoft.EntityFrameworkCore.Sqlite.Design.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.entityframeworkcore.sqlite.core\\2.0.0-preview1-final\\lib\\netstandard1.3\\Microsoft.EntityFrameworkCore.Sqlite.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.entityframeworkcore.sqlserver.design\\2.0.0-preview1-final\\lib\\netstandard1.3\\Microsoft.EntityFrameworkCore.SqlServer.Design.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.entityframeworkcore.sqlserver\\2.0.0-preview1-final\\lib\\netstandard1.3\\Microsoft.EntityFrameworkCore.SqlServer.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.extensions.caching.abstractions\\2.0.0-preview1-final\\lib\\netstandard1.0\\Microsoft.Extensions.Caching.Abstractions.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.extensions.caching.memory\\2.0.0-preview1-final\\lib\\netstandard1.3\\Microsoft.Extensions.Caching.Memory.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.extensions.caching.redis\\2.0.0-preview1-final\\lib\\netstandard1.5\\Microsoft.Extensions.Caching.Redis.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.extensions.caching.sqlserver\\2.0.0-preview1-final\\lib\\netstandard1.2\\Microsoft.Extensions.Caching.SqlServer.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.extensions.configuration.abstractions\\2.0.0-preview1-final\\lib\\netstandard1.0\\Microsoft.Extensions.Configuration.Abstractions.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.extensions.configuration.azurekeyvault\\2.0.0-preview1-final\\lib\\netstandard1.5\\Microsoft.Extensions.Configuration.AzureKeyVault.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.extensions.configuration.binder\\2.0.0-preview1-final\\lib\\netstandard1.1\\Microsoft.Extensions.Configuration.Binder.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.extensions.configuration.commandline\\2.0.0-preview1-final\\lib\\netstandard1.1\\Microsoft.Extensions.Configuration.CommandLine.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.extensions.configuration\\2.0.0-preview1-final\\lib\\netstandard1.1\\Microsoft.Extensions.Configuration.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.extensions.configuration.dockersecrets\\2.0.0-preview1-final\\lib\\netstandard1.3\\Microsoft.Extensions.Configuration.DockerSecrets.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.extensions.configuration.environmentvariables\\2.0.0-preview1-final\\lib\\netstandard1.3\\Microsoft.Extensions.Configuration.EnvironmentVariables.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.extensions.configuration.fileextensions\\2.0.0-preview1-final\\lib\\netstandard1.3\\Microsoft.Extensions.Configuration.FileExtensions.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.extensions.configuration.ini\\2.0.0-preview1-final\\lib\\netstandard1.3\\Microsoft.Extensions.Configuration.Ini.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.extensions.configuration.json\\2.0.0-preview1-final\\lib\\netstandard1.3\\Microsoft.Extensions.Configuration.Json.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.extensions.configuration.usersecrets\\2.0.0-preview1-final\\lib\\netstandard1.3\\Microsoft.Extensions.Configuration.UserSecrets.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.extensions.configuration.xml\\2.0.0-preview1-final\\lib\\netstandard1.3\\Microsoft.Extensions.Configuration.Xml.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.extensions.dependencyinjection.abstractions\\2.0.0-preview1-final\\lib\\netstandard1.0\\Microsoft.Extensions.DependencyInjection.Abstractions.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.extensions.dependencyinjection\\2.0.0-preview1-final\\lib\\netstandard1.1\\Microsoft.Extensions.DependencyInjection.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.extensions.dependencymodel\\2.0.0-preview1-002111\\lib\\netstandard1.6\\Microsoft.Extensions.DependencyModel.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.extensions.diagnosticadapter\\2.0.0-preview1-final\\lib\\netstandard1.1\\Microsoft.Extensions.DiagnosticAdapter.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.extensions.fileproviders.abstractions\\2.0.0-preview1-final\\lib\\netstandard1.0\\Microsoft.Extensions.FileProviders.Abstractions.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.extensions.fileproviders.composite\\2.0.0-preview1-final\\lib\\netstandard1.0\\Microsoft.Extensions.FileProviders.Composite.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.extensions.fileproviders.embedded\\2.0.0-preview1-final\\lib\\netstandard1.5\\Microsoft.Extensions.FileProviders.Embedded.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.extensions.fileproviders.physical\\2.0.0-preview1-final\\lib\\netstandard1.3\\Microsoft.Extensions.FileProviders.Physical.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.extensions.filesystemglobbing\\2.0.0-preview1-final\\lib\\netstandard1.3\\Microsoft.Extensions.FileSystemGlobbing.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.extensions.hosting.abstractions\\2.0.0-preview1-final\\lib\\netcoreapp2.0\\Microsoft.Extensions.Hosting.Abstractions.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.extensions.localization.abstractions\\2.0.0-preview1-final\\lib\\netstandard1.0\\Microsoft.Extensions.Localization.Abstractions.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.extensions.localization\\2.0.0-preview1-final\\lib\\netstandard1.3\\Microsoft.Extensions.Localization.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.extensions.logging.abstractions\\2.0.0-preview1-final\\lib\\netstandard1.1\\Microsoft.Extensions.Logging.Abstractions.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.extensions.logging.console\\2.0.0-preview1-final\\lib\\netstandard1.3\\Microsoft.Extensions.Logging.Console.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.extensions.logging.debug\\2.0.0-preview1-final\\lib\\netstandard1.3\\Microsoft.Extensions.Logging.Debug.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.extensions.logging\\2.0.0-preview1-final\\lib\\netstandard1.1\\Microsoft.Extensions.Logging.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.extensions.logging.eventsource\\2.0.0-preview1-final\\lib\\netstandard1.3\\Microsoft.Extensions.Logging.EventSource.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.extensions.logging.tracesource\\2.0.0-preview1-final\\lib\\netstandard1.3\\Microsoft.Extensions.Logging.TraceSource.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.extensions.objectpool\\2.0.0-preview1-final\\lib\\netstandard1.3\\Microsoft.Extensions.ObjectPool.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.extensions.options.configurationextensions\\2.0.0-preview1-final\\lib\\netstandard1.1\\Microsoft.Extensions.Options.ConfigurationExtensions.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.extensions.options\\2.0.0-preview1-final\\lib\\netstandard1.1\\Microsoft.Extensions.Options.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.extensions.primitives\\2.0.0-preview1-final\\lib\\netstandard1.0\\Microsoft.Extensions.Primitives.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.extensions.webencoders\\2.0.0-preview1-final\\lib\\netstandard1.1\\Microsoft.Extensions.WebEncoders.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.identitymodel.clients.activedirectory\\3.13.5\\lib\\netstandard1.4\\Microsoft.IdentityModel.Clients.ActiveDirectory.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.identitymodel.clients.activedirectory\\3.13.5\\lib\\netstandard1.4\\Microsoft.IdentityModel.Clients.ActiveDirectory.Platform.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.identitymodel.logging\\1.1.3\\lib\\netstandard1.4\\Microsoft.IdentityModel.Logging.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.identitymodel.protocols\\2.1.3\\lib\\netstandard1.4\\Microsoft.IdentityModel.Protocols.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.identitymodel.protocols.openidconnect\\2.1.3\\lib\\netstandard1.4\\Microsoft.IdentityModel.Protocols.OpenIdConnect.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.identitymodel.tokens\\5.1.3\\lib\\netstandard1.4\\Microsoft.IdentityModel.Tokens.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.net.http.headers\\2.0.0-preview1-final\\lib\\netcoreapp2.0\\Microsoft.Net.Http.Headers.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.rest.clientruntime.azure\\3.3.6\\lib\\netstandard1.4\\Microsoft.Rest.ClientRuntime.Azure.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.rest.clientruntime\\2.3.7\\lib\\netstandard1.4\\Microsoft.Rest.ClientRuntime.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\Microsoft.VisualBasic.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.visualstudio.web.browserlink\\2.0.0-preview1-final\\lib\\netcoreapp2.0\\Microsoft.VisualStudio.Web.BrowserLink.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\Microsoft.Win32.Primitives.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.win32.registry\\4.4.0-preview1-25305-02\\ref\\netstandard2.0\\Microsoft.Win32.Registry.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\windowsazure.storage\\8.1.1\\lib\\netstandard1.3\\Microsoft.WindowsAzure.Storage.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\mscorlib.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\netstandard.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\newtonsoft.json.bson\\1.0.1\\lib\\netstandard1.3\\Newtonsoft.Json.Bson.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\newtonsoft.json\\10.0.1\\lib\\netstandard1.3\\Newtonsoft.Json.dll\r\nC:\\Users\\raines\\.nuget\\packages\\remotion.linq\\2.1.1\\lib\\netstandard1.0\\Remotion.Linq.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\sqlitepclraw.bundle_green\\1.1.5\\lib\\netcoreapp\\SQLitePCLRaw.batteries_green.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\sqlitepclraw.bundle_green\\1.1.5\\lib\\netcoreapp\\SQLitePCLRaw.batteries_v2.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\sqlitepclraw.core\\1.1.5\\lib\\netstandard1.1\\SQLitePCLRaw.core.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\sqlitepclraw.provider.e_sqlite3.netstandard11\\1.1.5\\lib\\netstandard1.1\\SQLitePCLRaw.provider.e_sqlite3.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\stackexchange.redis.strongname\\1.2.3\\lib\\netstandard1.5\\StackExchange.Redis.StrongName.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.AppContext.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.Buffers.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.Collections.Concurrent.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.Collections.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.Collections.Immutable.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.Collections.NonGeneric.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.Collections.Specialized.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.ComponentModel.Annotations.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.ComponentModel.Composition.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.ComponentModel.DataAnnotations.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.ComponentModel.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.ComponentModel.EventBasedAsync.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.ComponentModel.Primitives.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.ComponentModel.TypeConverter.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.Console.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.Core.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.Data.Common.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.Data.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\system.data.sqlclient\\4.4.0-preview1-25305-02\\ref\\netstandard2.0\\System.Data.SqlClient.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.Diagnostics.Contracts.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.Diagnostics.Debug.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.Diagnostics.DiagnosticSource.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.Diagnostics.FileVersionInfo.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.Diagnostics.Process.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.Diagnostics.StackTrace.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.Diagnostics.TextWriterTraceListener.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.Diagnostics.Tools.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.Diagnostics.TraceSource.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.Diagnostics.Tracing.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.Drawing.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.Drawing.Primitives.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.Dynamic.Runtime.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.Globalization.Calendars.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.Globalization.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.Globalization.Extensions.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\system.identitymodel.tokens.jwt\\5.1.3\\lib\\netstandard1.4\\System.IdentityModel.Tokens.Jwt.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\system.interactive.async\\3.1.1\\lib\\netstandard1.3\\System.Interactive.Async.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.IO.Compression.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.IO.Compression.FileSystem.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.IO.Compression.ZipFile.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.IO.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.IO.FileSystem.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.IO.FileSystem.DriveInfo.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.IO.FileSystem.Primitives.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.IO.FileSystem.Watcher.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.IO.IsolatedStorage.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.IO.MemoryMappedFiles.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.IO.Pipes.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.IO.UnmanagedMemoryStream.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.Linq.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.Linq.Expressions.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.Linq.Parallel.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.Linq.Queryable.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.Net.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.Net.Http.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.Net.HttpListener.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.Net.Mail.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.Net.NameResolution.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.Net.NetworkInformation.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.Net.Ping.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.Net.Primitives.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.Net.Requests.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.Net.Security.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.Net.ServicePoint.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.Net.Sockets.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.Net.WebClient.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.Net.WebHeaderCollection.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.Net.WebProxy.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.Net.WebSockets.Client.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.Net.WebSockets.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.Numerics.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.Numerics.Vectors.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.ObjectModel.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.Reflection.DispatchProxy.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.Reflection.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.Reflection.Emit.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.Reflection.Emit.ILGeneration.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.Reflection.Emit.Lightweight.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.Reflection.Extensions.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.Reflection.Metadata.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.Reflection.Primitives.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.Reflection.TypeExtensions.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.Resources.Reader.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.Resources.ResourceManager.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.Resources.Writer.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\system.runtime.compilerservices.unsafe\\4.4.0-preview1-25219-04\\ref\\netstandard2.0\\System.Runtime.CompilerServices.Unsafe.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.Runtime.CompilerServices.VisualC.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.Runtime.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.Runtime.Extensions.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.Runtime.Handles.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.Runtime.InteropServices.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.Runtime.InteropServices.RuntimeInformation.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.Runtime.InteropServices.WindowsRuntime.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.Runtime.Loader.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.Runtime.Numerics.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.Runtime.Serialization.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.Runtime.Serialization.Formatters.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.Runtime.Serialization.Json.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.Runtime.Serialization.Primitives.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.Runtime.Serialization.Xml.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\system.security.accesscontrol\\4.4.0-preview1-25305-02\\ref\\netstandard2.0\\System.Security.AccessControl.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.Security.Claims.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.Security.Cryptography.Algorithms.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.Security.Cryptography.Cng.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.Security.Cryptography.Csp.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.Security.Cryptography.Encoding.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.Security.Cryptography.Primitives.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.Security.Cryptography.X509Certificates.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.Security.Principal.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\system.security.principal.windows\\4.4.0-preview1-25305-02\\ref\\netstandard2.0\\System.Security.Principal.Windows.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.Security.SecureString.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.ServiceModel.Web.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\system.spatial\\5.8.2\\lib\\netstandard1.1\\System.Spatial.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.Text.Encoding.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.Text.Encoding.Extensions.dll\r\nC:\\Users\\raines\\.nuget\\packages\\system.text.encodings.web\\4.3.0\\lib\\netstandard1.0\\System.Text.Encodings.Web.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.Text.RegularExpressions.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.Threading.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.Threading.Overlapped.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.Threading.Tasks.Dataflow.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.Threading.Tasks.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.Threading.Tasks.Extensions.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.Threading.Tasks.Parallel.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.Threading.Thread.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.Threading.ThreadPool.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.Threading.Timer.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.Transactions.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.Transactions.Local.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.ValueTuple.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.Web.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.Web.HttpUtility.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.Windows.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.Xml.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.Xml.Linq.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.Xml.ReaderWriter.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.Xml.Serialization.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.Xml.XDocument.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.Xml.XmlDocument.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.Xml.XmlSerializer.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.Xml.XPath.dll\r\nC:\\Users\\raines\\.dotnet\\NuGetFallbackFolder\\microsoft.netcore.app\\2.0.0-preview1-002111-00\\ref\\netcoreapp2.0\\System.Xml.XPath.XDocument.dll\r\n```\r\n\r\n</details>",
        "createdAt": "2017-05-24T21:39:15Z",
        "updatedAt": "2017-05-24T21:39:15Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald ahh that makes sense. The ASP.NET Core assemblies account for ~180 of those, the rest are from `Microsoft.NETCore.App` and `NETStandard.Library`",
        "createdAt": "2017-05-24T21:49:53Z",
        "updatedAt": "2017-05-24T21:49:53Z",
        "author": {
          "login": "DamianEdwards"
        }
      },
      {
        "body": "> You need to run it for full framework on the nuget assemblies as well. It'll find version conflicts and emit bindingRedirects.\r\n\r\nI thought version conflicts for NuGet-delivered assemblies were handled by [`ResolvePackageFileConflicts`](https://github.com/dotnet/sdk/blob/97f1e2100c920a5a83a98c87df79787ab799a8fa/src/Tasks/Microsoft.NET.Build.Tasks/ConflictResolution/ResolvePackageFileConflicts.cs). @dsplaisted am I misunderstanding the intention there?",
        "createdAt": "2017-05-24T22:12:27Z",
        "updatedAt": "2017-05-24T22:12:27Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I'm not talking about conflicts of actual references.  I'm talking about transitive references.  Consider that library A (1.0.0.0) > B (1.0.0.0), and app references A (1.0.0.0) and B (2.0.0.0).  RAR will only see A (1.0.0.0) and B (2.0.0.0) but it needs to discover that a bindingRedirect is needed for B.  It does that and emits and suggested redirect which gets written to the app.config.\r\n\r\nResolvePackageFileConflicts does not examine transitive references, it's only about handling conflicts in direct references because RAR doesn't touch those.\r\n\r\nOn desktop the loader is strict and requires you to tell it to redirect a lower version to a higher version.\r\n\r\nOn .NET Core the loader will automatically load a higher version.\r\n\r\nI guess by bypassing RAR we do lose out on the case where someone has explicitly chosen a lower version.  Consider the case where A (1.0.0.0) > B (2.0.0.0), but the app referenced B (1.0.0.0).  This would cause a ref-def mismatch at runtime even on .NET core.  RAR catches this today and we'd lose that by bypassing RAR.  Not sure we care because typically this means a package bug, or someone has explicitly downgraded a package (which NuGet should emit a warning for), but that's something to consider.",
        "createdAt": "2017-05-24T22:25:58Z",
        "updatedAt": "2017-05-24T22:31:12Z",
        "author": {
          "login": "ericstj"
        }
      },
      {
        "body": "@ericstj Isn't that a malformed NuGet scenario? The A-1.0 package should have a reference to B-1.0, which is then resolved by NuGet's logic?\r\n\r\nI don't understand what the design intention there is for binding redirects--that would be handled better by RAR. But is that what actually happens in a project today?",
        "createdAt": "2017-05-24T22:28:30Z",
        "updatedAt": "2017-05-24T22:28:30Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> @ericstj Isn't that a malformed NuGet scenario? The A-1.0 package should have a reference to B-1.0, which is then resolved by NuGet's logic?\r\n\r\nSure, but then the app references B 2.0 because it wants to use that.  Nuget does the right thing and gives the app B 2.0.  It's up to RAR to write the redirect.  It does this today.  See \r\nhttps://github.com/Microsoft/msbuild/blob/6851538897f5d7b08024a6d8435bc44be5869e53/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs#L853\r\nhttps://github.com/Microsoft/msbuild/blob/6851538897f5d7b08024a6d8435bc44be5869e53/src/Tasks/AssemblyDependency/GenerateBindingRedirects.cs\r\n\r\nFeel free to take this part of the discussion offline.  Net result is that RAR is  required on desktop for all references.  I think for other frameworks there might be some lee-way but we would lose some of the build time checks and push those off to runtime.  Might be acceptable.",
        "createdAt": "2017-05-24T22:34:55Z",
        "updatedAt": "2017-05-24T22:36:43Z",
        "author": {
          "login": "ericstj"
        }
      },
      {
        "body": "Ah, I see now--NuGet coughs up a (package-conflict-resolved) A-1.0 and B-2.0 assemblies, which are then fed into RAR, which explores the transitive assembly dependencies of A, finds B-1.0, adds that to the closure of assemblies, and then applies its own assembly-conflict resolution logic to choose B-2.0 _and_ recommend a binding redirect.\r\n\r\nThat's a great case, thanks.\r\n\r\nI think that means we're back to \"attempt to cache outputs for unchanged inputs\". This hasn't been done historically, because the \"inputs\" to RAR include things like the GAC, registry keys, and arbitrary filesystem locations--so it's effectively impossible to build the cache key.\r\n\r\nBut for SDK projects, the really problematic inputs of GAC and registry are already disabled. I think I can live with requiring an explicit user-requested rebuild after installing a .NET SDK (that could change where a reference to `System` came from). If anyone thinks that would be unacceptable, or sees another machine-state change that would cause problems, please holler.\r\n\r\nI'd expect new caching behavior to be put behind an opt-in parameter to RAR, so non-new-SDK projects see no difference, and the SDK can opt in (and if we discover a late-breaking bug, a user could opt back out again).",
        "createdAt": "2017-05-24T22:59:14Z",
        "updatedAt": "2017-05-24T22:59:14Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald do you have a plan on how/when this would make its way in?",
        "createdAt": "2017-05-25T19:44:19Z",
        "updatedAt": "2017-05-25T19:44:19Z",
        "author": {
          "login": "DamianEdwards"
        }
      },
      {
        "body": "I'm planning to prototype the caching strategy ASAP. Will try to have a more concrete idea of timeline by EOD Tuesday, which we can use to plan for release windows.",
        "createdAt": "2017-05-25T19:47:45Z",
        "updatedAt": "2017-05-25T19:47:45Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald many thanks! Do we have a rough idea of what would be cached and thus how much time we're looking at saving?",
        "createdAt": "2017-05-26T00:47:52Z",
        "updatedAt": "2017-05-26T00:47:52Z",
        "author": {
          "login": "DamianEdwards"
        }
      },
      {
        "body": "> I think that means we're back to \"attempt to cache outputs for unchanged inputs\".\r\n\r\nSkipping RAR for references that already have a path assigned seemed promising for .NET Core projects.  Would it be worth doing that unless the project targets .NET Framework, while on .NET Framework everything would still need to go through RAR in order to generate binding redirects?",
        "createdAt": "2017-05-26T05:32:10Z",
        "updatedAt": "2017-05-26T05:32:10Z",
        "author": {
          "login": "dsplaisted"
        }
      },
      {
        "body": "If it achieves a good gain then I think we should.",
        "createdAt": "2017-05-26T14:06:41Z",
        "updatedAt": "2017-05-26T14:06:41Z",
        "author": {
          "login": "DamianEdwards"
        }
      },
      {
        "body": "Any update on this?",
        "createdAt": "2017-05-30T18:19:57Z",
        "updatedAt": "2017-05-30T18:19:57Z",
        "author": {
          "login": "DamianEdwards"
        }
      },
      {
        "body": "So my understanding is there are three interesting cases here:\r\n* .NET **Core**: assembly unification and binding redirects aren't interesting because of loader behavior.\r\n* .NET Framework **DLLs**: don't currently generate binding redirects\r\n* .NET Framework **EXEs**: generate binding redirects, so need the full rigamarole.\r\n\r\nSkipping RAR is extremely fast and appears to work in the first case, but it does produce some differences. For example, RAR produces `@(ReferenceSatellitePaths)` which is passed to `GenerateDepsFile`--which is presumably important.\r\n\r\n@dsplaisted do you have a feel for whether that torpedos the skip-it-entirely-for-Core plan? I suspect it does but not with great confidence.",
        "createdAt": "2017-05-30T21:22:33Z",
        "updatedAt": "2017-05-30T21:22:33Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Just had a phone call with @DamianEdwards @AndyGerlicher @nguerrera @dsplaisted @davidfowl and @livarcocc. Please add anything I don't note below.\r\n\r\ntl;dr: we should explore the general caching plan from https://github.com/Microsoft/msbuild/issues/2015#issuecomment-303875723\r\n\r\n140 of the references in the template MVC project I've been playing with come from the `microsoft.netcore.app` package. Several of us were surprised by this since we hoped that would reduce to just `netstandard.dll` (or at least much less).\r\n\r\nWe decided that just skipping RAR entirely wasn't a good idea because of the need to find associated files and concern about unknown consequences.\r\n\r\nWe thought about caching dependencies at a per-assembly granularity, but are concerned that it wouldn't actually be faster than reading them from a file.\r\n\r\nThere's existing code that attempts to stop walking dependencies when it encounters Framework assemblies, but it's not in use with NuGet-delivered references. We could potentially annotate (some?) references and trim the exploration from there. But that might not help, since NuGet gives RAR a flat list of dependencies, including all of the \"framework\" ones.\r\n\r\nThe primary scenario at the moment is an MVC project with .cs code churn (and static references). Invalidating the cache if a ProjectReference rebuilt seems acceptable, especially since [reference assemblies](https://github.com/dotnet/roslyn/blob/master/docs/features/refout.md) should reduce churn on references in the not-too-distant future.\r\n\r\nThe caching would be (pseudocode):\r\n```\r\nif ( hash(inputList) == cache.inputHash ):\r\n    foreach previousOutput in cache.previousOutputs:\r\n        if ( lastWriteTime(previousOutput) >= cache.previousTimestamp ):\r\n            return fullRAR(inputList)\r\n    return cache.previousOutputs\r\nreturn fullRAR(inputList)\r\n```",
        "createdAt": "2017-06-07T23:11:17Z",
        "updatedAt": "2017-06-07T23:11:17Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> But that might not help, since NuGet gives RAR a flat list of dependencies, including all of the \"framework\" ones.\r\n\r\nWe could just as well deliver these via targets that nuget installs.  That's similar to what we're doing elsewhere and the project-system is doing work to support that.  Just to let you know that is on the table, and could be considered as additional work if it would help the first-build case.",
        "createdAt": "2017-06-08T16:12:08Z",
        "updatedAt": "2017-06-08T16:12:08Z",
        "author": {
          "login": "ericstj"
        }
      },
      {
        "body": "For awareness: in #2215 I backed out the read-assemblies-only-once part of #2192, because on full framework it caused locks to be held on files after returning from RAR. We plan to try to get a fixed version back in in the 15.3 timeframe.",
        "createdAt": "2017-06-13T19:27:34Z",
        "updatedAt": "2017-06-13T19:27:34Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Hey,\r\nSo I'm hitting the exact same problem with our compilation pipeline at Unity. We are typically providing our own .NET framework facades, along all the assemblies of the engine...etc., so that's roughly 90 assembly references in each csproj. \r\nWith around 20 projects in a solution, and if nothing changed, each project having exactly the same set of references, the build will still take 6 seconds to complete (!). That's huge (for \"nothing changed\")\r\nThe main reason is coming from `ResolveAssemblyReference` that is taking from 200ms to 250ms per project to resolve the assemblies.\r\nWorse is that all these assembly references have `<Private>False</Private>` so not sure what is the point of having ResolveAssemblyReference running over them...\r\n\r\nDo you have any suggestion on how to workaround this? (I tried the trick \"AdjustRAR\" above by @rainersigwald but it doesn't compile after that, maybe something has changed in the target files since then...)",
        "createdAt": "2018-11-30T15:06:50Z",
        "updatedAt": "2018-11-30T15:10:13Z",
        "author": {
          "login": "xoofx"
        }
      },
      {
        "body": "When you say you are providing your own assemblies, are you generating a bunch of reference items, acquiring them from nuget package assets, or something else?\r\n\r\nIf you are generating reference items, can you try adding ExternallyResolved=true metadata to them?",
        "createdAt": "2018-11-30T15:20:09Z",
        "updatedAt": "2018-11-30T15:32:03Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "https://github.com/Microsoft/msbuild/pull/2716",
        "createdAt": "2018-11-30T15:22:20Z",
        "updatedAt": "2018-11-30T15:22:20Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "> When you say you are providing your own assemblies, are you generating a bunch of reference items, acquiring them from nuget packahe assets, or sething else?\r\n\r\nYes, a bunch of `<Reference>`",
        "createdAt": "2018-11-30T15:23:24Z",
        "updatedAt": "2018-11-30T15:23:24Z",
        "author": {
          "login": "xoofx"
        }
      },
      {
        "body": "> If you are generating reference items, can you try adding ExternallyResolved=true metadata to them?\r\n\r\nHan, maybe exactly what I'm looking for, gonna try that, thanks \ud83d\udc4d ",
        "createdAt": "2018-11-30T15:24:26Z",
        "updatedAt": "2018-11-30T15:24:26Z",
        "author": {
          "login": "xoofx"
        }
      },
      {
        "body": "Ok, so using `ExternallyResolved`  is actually helping to reducing the compilation to 3.2 seconds... with 1.2 seconds is spend for `ResolveAssemblyReference`, which is around 60ms per csproj. That still quite a lot. I haven't checked, but what is remaining that `ResolveAssemblyReference` has to do on these assembly references?",
        "createdAt": "2018-11-30T15:48:44Z",
        "updatedAt": "2018-11-30T16:04:38Z",
        "author": {
          "login": "xoofx"
        }
      },
      {
        "body": "From the profiling, I'm getting this now:\r\n\r\n![image](https://user-images.githubusercontent.com/715038/49304898-edce6680-f4cd-11e8-906f-0d88bd8c562d.png)\r\n\r\nCouldn't the StateFile be cached in memory? It would save maybe half of the time for `ResolveAssemblyReference` so in my case, I have around 35 projects * 40ms is saving still almost 1.5 seconds per \"nothing-changed\" build",
        "createdAt": "2018-11-30T17:34:39Z",
        "updatedAt": "2018-11-30T17:34:39Z",
        "author": {
          "login": "xoofx"
        }
      },
      {
        "body": "The state file for each project is around 600 to 700Kb on the disk, so likely quite laborious to load, as I'm running everything inside the same process, it might not reflect how things are working with node reuse (not sure an inprocess cache would be relevant actually...) ",
        "createdAt": "2018-11-30T17:40:48Z",
        "updatedAt": "2018-11-30T17:40:48Z",
        "author": {
          "login": "xoofx"
        }
      },
      {
        "body": "Relevant: #3914, #3868",
        "createdAt": "2018-11-30T17:50:44Z",
        "updatedAt": "2018-11-30T17:50:44Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "The ```StateFile``` cache currently uses the .NET ```BinaryFormatter``` for serialization, which is slow and space-inefficient for large data sets. There's a PR in #3868 to change the backing serialization format that should dramatically improve the ```StateFile``` read times. There's a similar perf trace in there which shows it cutting the ```ResolveAssemblyReference``` time for a solution by about half.",
        "createdAt": "2018-11-30T17:50:58Z",
        "updatedAt": "2018-11-30T17:51:33Z",
        "author": {
          "login": "ccastanedaucf"
        }
      },
      {
        "body": "@xoofx, curious why you are building everything single proc.",
        "createdAt": "2018-11-30T17:57:17Z",
        "updatedAt": "2018-11-30T17:57:17Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "> @xoofx, curious why you are building everything single proc.\r\n\r\nIt's for testing. Running things with a regular msbuild doesn't bring any differences. Projects have many dependencies between them, so lots of them can't run concurrently... likely msbuild with nodereuse is actually fighting to build these projects. Also I measured that launching the msbuild exe from the command line on an empty projects takes a 500-800ms (on a single project), while running things in-proc in a loop goes down to 100-150ms (that's likely mostly `AssemblyResolveReferences`)\r\n\r\n> The StateFile cache currently uses the .NET BinaryFormatter for serialization, which is slow and space-inefficient for large data sets. There's a PR in #3868 to change the backing serialization format that should dramatically improve the StateFile read times. There's a similar perf trace in there which shows it cutting the ResolveAssemblyReference time for a solution by about half.\r\n\r\nGreat! Though, checking a simple ConsoleApp with new SDK and the cache file is only 80Kb, while `AssemblyResolveReferences` has all the SDK ref assemblies to reference... wondering why there is such a difference, maybe my setup is making something different (they are not SDK or regular TargetFrameworkDir files, but only `<Reference>`)...  700Kb for a dependency that doesn't bring much value for the assemblies listed is quite annoying (assemblies are not copied, the assembly list is not duplicated, there are no conflicts.... in the end they are just passed to csc as-is...etc.)",
        "createdAt": "2018-11-30T18:35:39Z",
        "updatedAt": "2018-11-30T18:35:39Z",
        "author": {
          "login": "xoofx"
        }
      },
      {
        "body": "Wondering if #3914 could help also to fine grained the granularity of the cache data to share them between projects. In my case, most of these 800KB per project are exactly the same and could be actually shared.  Do you think that would be relevant?",
        "createdAt": "2018-11-30T18:54:12Z",
        "updatedAt": "2018-11-30T18:54:12Z",
        "author": {
          "login": "xoofx"
        }
      },
      {
        "body": "Currently #3914 works via a per-project cache of the full inputs/outputs of the task execution, but I've been toying with adding more granularity on cache-miss via keeping some of ```StateFile``` in memory within the RAR-service, and just skipping serialization all together in that case.",
        "createdAt": "2018-11-30T19:14:47Z",
        "updatedAt": "2018-11-30T19:14:47Z",
        "author": {
          "login": "ccastanedaucf"
        }
      },
      {
        "body": "So I have JSonified the SystemState files and made a diff between the projects, extracting for example the diff between two assemblies that are the same:\r\n\r\n![image](https://user-images.githubusercontent.com/715038/49314720-9939e400-f4eb-11e8-8560-bb9e897efed5.png)\r\n\r\nSo basically, it is almost the same information (minor difference here with culture info). So we have this repeated almost 90 times per project (one for each assembly), duplicated across 35 projects. 700Ko x 35 projects => 24Mo of data, that are actually the same in memory.\r\n\r\nThat's why I'm wondering why this could not be shared: having a global cache of data for all metadata for each assembly, and per project referencing those via a key... that would take a lot less spaces, reloading would be more efficient. You could store even per assembly information on the disk (via content based addressing objectid - ala git for example) and store minimal information per project then (list of assembly objectid )... @ccastanedaucf what do you think?",
        "createdAt": "2018-11-30T21:10:39Z",
        "updatedAt": "2018-11-30T21:10:39Z",
        "author": {
          "login": "xoofx"
        }
      },
      {
        "body": "Note also that if you think in terms of CPU cache efficiency, sharing these assembly metadatas will make a significant difference when processing these references, considering that they take likely quite some spaces in memory, with many strings all around...",
        "createdAt": "2018-11-30T21:32:57Z",
        "updatedAt": "2018-11-30T21:32:57Z",
        "author": {
          "login": "xoofx"
        }
      },
      {
        "body": "@xoofx Thanks for bringing this up; since #3868 may take some effort to get in since it adds some new dependencies (and doesn't solve the underlying problem of massive amounts of duplicated data), I've done some work in #3989 to distribute the data across projects and reduce the amount stored on disk and kept in memory.",
        "createdAt": "2018-12-06T02:55:15Z",
        "updatedAt": "2018-12-06T02:55:15Z",
        "author": {
          "login": "ccastanedaucf"
        }
      },
      {
        "body": "> @xoofx Thanks for bringing this up; since #3868 may take some effort to get in since it adds some new dependencies (and doesn't solve the underlying problem of massive amounts of duplicated data), I've done some work in #3989 to distribute the data across projects and reduce the amount stored on disk and kept in memory.\r\n\r\nThat's great, thanks for trying to implement the idea \ud83d\udc4d \r\n\r\nI'm going probably to continue investigating a bit more, `ResolveAssemblyReferences` is now around 40ms per project in my case, but this is still too much imo. ",
        "createdAt": "2018-12-06T10:30:22Z",
        "updatedAt": "2018-12-06T10:30:22Z",
        "author": {
          "login": "xoofx"
        }
      },
      {
        "body": "Now that a few of these changes are in, I've taken some quick sample performance summaries building a couple .NET Core projects using the current tip of mater https://github.com/Microsoft/msbuild/commit/b630e674c729787d57a485ef5338915643eb1cea to show improvements we've made in RAR times since 15.9, although there's still plenty of room for improvement. These are all 3rd builds, incremental no-op. Included single-proc since multi-proc timings are added cumulatively across processes, but still useful to see. \r\n\r\n### MSBuild 15.9\r\n\r\n**WebLargeCore Single-Proc**\r\n```\r\nTarget Performance Summary:\r\n    16923 ms  Build                                    130 calls\r\n\r\nTask Performance Summary:\r\n     5289 ms  ResolveAssemblyReference                 129 calls\r\n```\r\n\r\n\r\n**WebLargeCore Multi-Proc**\r\n```\r\nTarget Performance Summary:\r\n     6568 ms  Build                                    130 calls\r\n\r\nTask Performance Summary:\r\n     9855 ms  ResolveAssemblyReference                 129 calls\r\n```\r\n\r\n**OrchardCore Single-Proc**\r\n\r\n```\r\nTarget Performance Summary:\r\n    19573 ms  Build                                    133 calls\r\n\r\nTask Performance Summary:\r\n     6471 ms  ResolveAssemblyReference                 132 calls\r\n```\r\n\r\n**OrchardCore Multi-Proc**\r\n```\r\nTarget Performance Summary:\r\n     7888 ms  Build                                    133 calls\r\n\r\nTask Performance Summary:\r\n    13469 ms  ResolveAssemblyReference                 132 calls\r\n```\r\n\r\n### MSBuild Master\r\n\r\n**WebLargeCore Single-Proc** _(-44% RAR time)_\r\n```\r\nTarget Performance Summary:\r\n    13996 ms  Build                                    130 calls\r\n\r\nTask Performance Summary:\r\n     2976 ms  ResolveAssemblyReference                 129 calls\r\n\r\n```\r\n\r\n\r\n**WebLargeCore Multi-Proc**\r\n```\r\nTarget Performance Summary:\r\n     5329 ms  Build                                    130 calls\r\n\r\nTask Performance Summary:\r\n     6154 ms  ResolveAssemblyReference                 129 calls\r\n```\r\n\r\n**OrchardCore Single-Proc** _(-47% RAR time)_\r\n\r\n```\r\nTarget Performance Summary:\r\n    15618 ms  Build                                    133 calls\r\n\r\nTask Performance Summary:\r\n     3398 ms  ResolveAssemblyReference                 132 calls\r\n```\r\n\r\n**OrchardCore Multi-Proc**\r\n```\r\n\r\nTarget Performance Summary:\r\n     6039 ms  Build                                    133 calls\r\n\r\nTask Performance Summary:\r\n     7147 ms  ResolveAssemblyReference                 132 calls\r\n```\r\n",
        "createdAt": "2018-12-12T20:31:03Z",
        "updatedAt": "2018-12-12T20:31:03Z",
        "author": {
          "login": "ccastanedaucf"
        }
      },
      {
        "body": "I think if NuGet implemented https://github.com/NuGet/Home/issues/7617, some global targets provided by them could hook into that and do that per-nuget immutability caching/optimization at restore time, ideally only once, without having MSBuild know anything about how that's done. For example, they could emit additional `obj` targets (but in the package install path, rather than the user's `obj`, since they would be immutable for a given package), so that even `Rebuild` would benefit from it.\r\n\r\nIt would also allow package authors to extend the same mechanism, as explained in that issue.\r\n",
        "createdAt": "2018-12-13T15:22:46Z",
        "updatedAt": "2018-12-13T15:23:09Z",
        "author": {
          "login": "kzu"
        }
      },
      {
        "body": "@kzu I don't think I'm seeing the connection between that comment and RAR performance; can you elaborate?",
        "createdAt": "2018-12-13T15:42:38Z",
        "updatedAt": "2018-12-13T15:42:38Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald basically, do what was suggested only once and at restore time: \r\n\r\n> who thought that the best option might be to teach the NuGet-resolution targets to emit directly to the items that are RAR outputs (like @(ReferencePath)), instead of resolving from NuGet assets file -> items pointing to paths on disk -> RAR -> different set of items pointing to paths on disk.\r\n\r\n;). That part could leverage the same extension point for `AfterRestore` proposed in that issue.",
        "createdAt": "2018-12-14T03:27:47Z",
        "updatedAt": "2018-12-14T03:27:47Z",
        "author": {
          "login": "kzu"
        }
      },
      {
        "body": "I see. I don't think that's a viable option here because RAR needs to see all references in order to do version unification and generate binding redirects, and the inputs to that could change outside of Restore (via `Reference` item changes or transitive reference changes from `ProjectReference`s).",
        "createdAt": "2018-12-14T15:23:33Z",
        "updatedAt": "2018-12-14T15:23:33Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "microsoft/msbuild#3868 has a good perf improvement in RAR cache serialization, but we're not sure the Bond serialization is the best approach. We should consider reviving it at some point in the future.",
        "createdAt": "2019-07-03T19:36:32Z",
        "updatedAt": "2019-07-03T19:36:32Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> we're not sure the Bond serialization is the best approach. \r\n\r\nWhat are the downsides of it? Have you explored other alternatives?",
        "createdAt": "2020-06-19T10:00:18Z",
        "updatedAt": "2020-06-19T10:00:18Z",
        "author": {
          "login": "mfkl"
        }
      },
      {
        "body": "@ladipro, heads up on this one.  We should link it to our RAR user story.",
        "createdAt": "2020-12-04T20:29:13Z",
        "updatedAt": "2020-12-04T20:29:13Z",
        "author": {
          "login": "donJoseLuis"
        }
      },
      {
        "body": "I just collected some data from a dotnet/runtime libraries build with ~1400 evaluations (outer + inner builds). I crossed out the tasks that are dotnet/runtime specific (a fix for ValidatePackage no-op build times is tracked via https://github.com/dotnet/sdk/issues/23517). \r\n\r\n![image](https://user-images.githubusercontent.com/7412651/152515810-7fa4732c-4add-4f63-9701-c0990b397b5a.png)\r\n\r\nAssuming RAR only runs in inner-builds, this should represent the time it takes RAR to serve ~1100 inner builds. I was looking into speeding up incremental builds in dotnet/runtime libs and I believe the highest impact contributors on the msbuild side are:\r\n- **Project evaluation** (55% of the overall fully incremental build). Once during static graph restore and then again during the actual build.\r\n- RAR (17%)\r\n- ResolveTargetingPackAssets (2.5%)\r\n- ResolvePackageFileConflicts (2%)\r\n\r\n23% are dotnet/runtime specific and must be fixed by ourselves. Just wanted to share this data in case it helps.",
        "createdAt": "2022-02-04T11:00:12Z",
        "updatedAt": "2022-02-04T11:00:12Z",
        "author": {
          "login": "ViktorHofer"
        }
      }
    ]
  }
}