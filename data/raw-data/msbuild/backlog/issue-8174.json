{
  "number": 8174,
  "title": "Issue on build projects on weak virtual hardware after upgrading to .NET 7",
  "body": "### Issue Description\r\n\r\nWhen I up my docker-compose file with **two or more** .net projects it stuck at build step.\r\nAt this time, all memory and CPU are occupied.\r\nIn log i see:\r\n => => # MSBuild version 17.4.0+18d5aef85 for .NET\r\n => => #   Determining projects to restore...\r\n => => #   All projects are up-to-date for restore.\r\n\r\nat this point it stuck.\r\n\r\nWhen i try up docker-compose file with **one** .net projects - everything works fine.\r\n\r\nI have not been able to reproduce the problem on my local machine, but it was always reproduced on a virtual cloud machine.\r\nWe use DigitalOcean Droplet on the Basic tariff plan.\r\nThe configuration is:\r\n- Shared CPU 1 cpu\r\n- 1 GB Memory\r\n- 25 GB Disk\r\n- Ubuntu 22.04 x64\r\n\r\nPreviously we used .Net 6 and MSBuild version 17.3.2+561848881 for .NET. and there were no problems.\r\n\r\n\r\n<!--\r\n* Please include a clear and concise description of the problem.\r\n-->\r\n\r\n### Steps to Reproduce\r\n\r\nTo reproduce the problem, I created 2 test solutions in Visual Studio 2022.\r\n\r\nFirst for .Net 6 and Second for .Net 7.\r\n\r\nThey contain 2 default \"Worker Service\" type projects.\r\nWith default docker files (as it create VS2022):\r\n\r\n.NET 6:\r\n>   FROM mcr.microsoft.com/dotnet/runtime:6.0 AS base\r\n>   WORKDIR /app  \r\n>   FROM mcr.microsoft.com/dotnet/sdk:6.0 AS build\r\n>   WORKDIR /src\r\n>   COPY [\"WorkerService1/WorkerService1.csproj\", \"WorkerService1/\"]\r\n>   RUN dotnet restore \"WorkerService1/WorkerService1.csproj\"\r\n>   COPY . .\r\n>   WORKDIR \"/src/WorkerService1\"\r\n>   RUN dotnet build \"WorkerService1.csproj\" -c Release -o /app/build  \r\n>   FROM build AS publish\r\n>   RUN dotnet publish \"WorkerService1.csproj\" -c Release -o /app/publish /p:UseAppHost=false  \r\n>   FROM base AS final\r\n>   WORKDIR /app\r\n>   COPY --from=publish /app/publish .\r\n>   ENTRYPOINT [\"dotnet\", \"WorkerService1.dll\"]\r\n\r\n.NET 7:\r\n> FROM mcr.microsoft.com/dotnet/runtime:7.0 AS base\r\n> WORKDIR /app\r\n> FROM mcr.microsoft.com/dotnet/sdk:7.0 AS build\r\n> WORKDIR /src\r\n> COPY [\"WorkerService1/WorkerService1.csproj\", \"WorkerService1/\"]\r\n> RUN dotnet restore \"WorkerService1/WorkerService1.csproj\"\r\n> COPY . .\r\n> WORKDIR \"/src/WorkerService1\"\r\n> RUN dotnet build \"WorkerService1.csproj\" -c Release -o /app/build\r\n> FROM build AS publish\r\n> RUN dotnet publish \"WorkerService1.csproj\" -c Release -o /app/publish /p:UseAppHost=false\r\n> FROM base AS final\r\n> WORKDIR /app\r\n> COPY --from=publish /app/publish .\r\n> ENTRYPOINT [\"dotnet\", \"WorkerService1.dll\"]\r\n\r\nSecond service is identical.\r\n\r\nAnd default docker-compose file (same for both solutions):\r\n\r\n> version: '3.4'\r\n> \r\n> services:\r\n>   workerservice1:\r\n>     image: ${DOCKER_REGISTRY-}workerservice1\r\n>     build:\r\n>       context: .\r\n>       dockerfile: WorkerService1/Dockerfile> \r\n>   workerservice2:\r\n>     image: ${DOCKER_REGISTRY-}workerservice2\r\n>     build:\r\n>       context: .\r\n>       dockerfile: WorkerService2/Dockerfile\r\n\r\nThe test solution for .NET 6 works fine when I start \r\n`\r\ndocker-compose up\r\n`\r\n\r\nSolution for .NET 7 stuck  just like my project.\r\n\r\n\r\n**This is reproduced only on a weak virtual machine, which I wrote about above.**\r\n\r\n",
  "state": "CLOSED",
  "createdAt": "2022-11-16T09:48:15Z",
  "updatedAt": "2024-02-21T14:07:04Z",
  "closedAt": "2023-06-09T19:01:39Z",
  "author": {
    "login": "k3yz1"
  },
  "labels": [
    "needs-more-info",
    "stale",
    "closed-by-bot",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Can you try running msbuild with a higher verbosity? Try adding `/v:d` to your msbuild calls.",
        "createdAt": "2022-11-17T17:27:51Z",
        "updatedAt": "2022-11-17T17:27:51Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "thanks for the answer Ben, I'm attaching logs.\r\n\r\npay attention:\r\n\r\n.NET 7 build:\r\n245.1 Time Elapsed 00:04:03.37\r\n\r\n.NET 6 build:\r\n14.46 Time Elapsed 00:00:13.17\r\n\r\nthese are absolutely identical default projects.\r\n\r\nmy project also build, after 40 minutes of waiting.\r\n\r\n[log for .NET6 build](https://1drv.ms/u/s!AqvlCiQ1270xhZxkmj3BhYVLC-FunQ?e=wJC4kt)\r\n[log for .NET7 build](https://1drv.ms/u/s!AqvlCiQ1270xhZxlBw49tNMha_SdXQ?e=f8Q5KA)\r\n\r\n",
        "createdAt": "2022-11-17T19:05:16Z",
        "updatedAt": "2022-11-17T20:41:22Z",
        "author": {
          "login": "k3yz1"
        }
      },
      {
        "body": "The problem is solved by adding a swap file.\r\n\r\nThe question remains - why the build worked before switching to .NET 7?",
        "createdAt": "2022-11-22T09:26:00Z",
        "updatedAt": "2022-11-22T09:26:00Z",
        "author": {
          "login": "k3yz1"
        }
      },
      {
        "body": "It could be related to the issue https://github.com/dotnet/runtime/issues/75049. Could you try again with the recent .NET SDK?",
        "createdAt": "2023-04-25T14:49:23Z",
        "updatedAt": "2023-04-25T14:49:23Z",
        "author": {
          "login": "AR-May"
        }
      },
      {
        "body": "This issue is marked as stale because feedback has been requested for 30 days with no response. Please respond within 14 days or this issue will be closed due to inactivity.",
        "createdAt": "2023-05-26T00:01:38Z",
        "updatedAt": "2023-05-26T00:01:38Z",
        "author": {
          "login": "ghost"
        }
      },
      {
        "body": "This issue was closed due to inactivity. If you can still reproduce this bug, please comment with the requested information, detailed steps to reproduce the problem, or any other notes that might help in the investigation.",
        "createdAt": "2023-06-09T19:01:40Z",
        "updatedAt": "2023-06-09T19:01:40Z",
        "author": {
          "login": "ghost"
        }
      }
    ]
  }
}