{
  "number": 2273,
  "title": "Exec task fails in Windows Nano Server docker containers using MSBuild 15.3",
  "body": "Something in the Exec task is failing to launch basic command line processes in MSBuild 15.3, but only when running in Nano Server docker containers. This worked fine in MSBuild 15.1.\r\n\r\n**Repro**\r\nInstall [Docker for Windows](https://store.docker.com/editions/community/docker-ce-desktop-windows) and ensure \"Windows containers\" are used (not Linux containers).\r\n\r\nCreate a dockerfile like this and a file named `test.proj`.\r\n```Dockerfile\r\nFROM microsoft/dotnet-nightly:2.0.0-preview3-sdk-nanoserver\r\nWORKDIR /app\r\nCOPY test.proj .\r\nRUN dotnet msbuild test.proj\r\n```\r\n```xml\r\n<!-- test.proj -->\r\n<Project>\r\n    <Target Name=\"Build\">\r\n        <Exec Command=\"dir\" />\r\n    </Target>\r\n</Project>\r\n```\r\n\r\nExecute\r\n```\r\ndocker build .\r\n```\r\n\r\n**Expected**\r\nBuild target runs and executed the \"dir\" command.\r\n\r\n**Actual**\r\nThe `dotnet msbuild test.proj` command fails with:\r\n```\r\nC:\\app\\test.proj(3,9): error MSB6004: The specified task executable location \"C:\\Users\\ContainerAdministrator\\cmd.exe\" is invalid.\r\n```\r\n\r\n**Details**\r\n\r\nMSBuild version: 15.3.246.41955 for .NET Core\r\nDocker base image: `microsoft/nanoserver:10.0.14393.1358`\r\nOS: Windows 10\r\nDocker: 17.06\r\nEnvironment variables inside the container:\r\n```\r\nPATH = C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\Users\\ContainerAdministrator\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Program Files\\dotnet;\r\nUSERPROFILE = C:\\Users\\ContainerAdministrator\r\n```\r\n\r\nYou can gather logs by launching a container with a volume mount to the folder containing the test.proj file.\r\n```\r\ndocker run --rm -v \"$(get-location):C:/app\" -it -w C:/app microsoft/dotnet-nightly:2-sdk\r\nC:\\app> dotnet msbuild test.proj /bl\r\n```\r\n\r\ncmd.exe itself runs run, and is located in `C:\\Windows\\system32\\cmd.exe`.\r\nThere is no file named `C:\\Users\\ContainerAdministrator\\cmd.exe`\r\n\r\nFull diagnostic log:\r\n[msbuild-2-sdk.txt](https://github.com/Microsoft/msbuild/files/1136947/msbuild-2-sdk.txt)\r\n\r\n**For comparision**\r\nThis works just fine using MSBuild 15.1. Example\r\n```Dockerfile\r\nFROM microsoft/dotnet:1-sdk\r\n\r\nWORKDIR /app\r\nCOPY test.proj .\r\nRUN dotnet msbuild test.proj\r\n```\r\n[msbuild-1-sdk.txt](https://github.com/Microsoft/msbuild/files/1136953/msbuild-1-sdk.txt)\r\n",
  "state": "CLOSED",
  "createdAt": "2017-07-10T20:25:26Z",
  "updatedAt": "2024-02-21T17:18:11Z",
  "closedAt": "2017-07-13T17:35:58Z",
  "author": {
    "login": "natemcmaster"
  },
  "labels": [
    ".NET Core",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "rainersigwald"
      }
    ]
  },
  "milestone": {
    "title": "MSBuild 15.3"
  },
  "comments": {
    "nodes": [
      {
        "body": "A clue:\r\n`Environment.GetFolderPath(Environment.SpecialFolder.System)` returns an empty string in Nano on .NET Core 2.0.0-preview3-25502-01. https://github.com/dotnet/corefx/issues/22049",
        "createdAt": "2017-07-10T21:04:14Z",
        "updatedAt": "2017-07-10T21:35:56Z",
        "author": {
          "login": "natemcmaster"
        }
      },
      {
        "body": "Yeah, that sure looks like the problem.",
        "createdAt": "2017-07-10T21:39:23Z",
        "updatedAt": "2017-07-10T21:39:23Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I'm less sure now. We have our own implementation of the locate-the-special-folder code.\r\n\r\nI made this local change:\r\n\r\n```diff\r\ndiff --git a/src/Shared/FileUtilities.GetFolderPath.cs b/src/Shared/FileUtilities.GetFolderPath.cs\r\nindex 315354fc..613cafbd 100644\r\n--- a/src/Shared/FileUtilities.GetFolderPath.cs\r\n+++ b/src/Shared/FileUtilities.GetFolderPath.cs\r\n@@ -35,6 +35,8 @@ namespace Microsoft.Build.Shared\r\n                                                       Win32Native.SHGFP_TYPE_CURRENT, /* dwFlags:   [in] retrieve current path */\r\n                                                       sb);                            /* pszPath:   [out]resultant path */\r\n \r\n+            Console.WriteLine($\"ShGetFolderPath for {folder} returned {hresult} and gave up {sb.ToString()}\");\r\n+\r\n             String s;\r\n             if (hresult < 0)\r\n             {\r\ndiff --git a/src/Utilities/ToolTask.cs b/src/Utilities/ToolTask.cs\r\nindex 38dcad86..985ccc6b 100644\r\n--- a/src/Utilities/ToolTask.cs\r\n+++ b/src/Utilities/ToolTask.cs\r\n@@ -619,6 +619,8 @@ namespace Microsoft.Build.Utilities\r\n                 // Otherwise, try to find the tool ourselves.\r\n                 pathToTool = GenerateFullPathToTool();\r\n \r\n+                Console.WriteLine($\"** {pathToTool}\");\r\n+\r\n                 // We have no toolpath, but we have been given an override\r\n                 // for the tool exe, fix up the path, assuming that the tool is in the same location\r\n                 if (pathToTool != null && !String.IsNullOrEmpty(_toolExe))\r\n```\r\n\r\nAnd get this output when plunking current 15.3 bits on top of CLI 1.0.4: \r\n\r\n```\r\nShGetFolderPath for LocalApplicationData returned 0 and gave up C:\\Users\\ContainerAdministrator\r\nShGetFolderPath for LocalApplicationData returned -2147024693 and gave up C:\\Users\\ContainerAdministrator\r\nShGetFolderPath for ApplicationData returned 0 and gave up C:\\Users\\ContainerAdministrator\r\nShGetFolderPath for ProgramFiles returned -2147024693 and gave up C:\\Users\\ContainerAdministrator\r\nShGetFolderPath for ProgramFilesX86 returned 0 and gave up C:\\Users\\ContainerAdministrator\r\nShGetFolderPath for System returned 0 and gave up C:\\Users\\ContainerAdministrator\r\n** C:\\Users\\ContainerAdministrator\\cmd.exe\r\nC:\\app\\test.proj(3,9): error MSB6004: The specified task executable location \"C:\\Users\\ContainerAdministrator\\cmd.exe\" is invalid.\r\n```\r\n\r\nThat should isolate against the runtime, but it's still failing.",
        "createdAt": "2017-07-10T22:55:46Z",
        "updatedAt": "2017-07-10T22:55:46Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Worked on MSBuild `v15.3.118.39484`\r\n\r\n```\r\nC:\\app>dotnet msbuild test.proj\r\nMicrosoft (R) Build Engine version 15.3.118.39484\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\nShGetFolderPath for LocalApplicationData returned 0 and gave up C:\\Users\\ContainerAdministrator\r\nShGetFolderPath for LocalApplicationData returned -2147024693 and gave up C:\\Users\\ContainerAdministrator\r\nShGetFolderPath for ApplicationData returned 0 and gave up C:\\Users\\ContainerAdministrator\r\nShGetFolderPath for ProgramFiles returned -2147024693 and gave up C:\\Users\\ContainerAdministrator\r\nShGetFolderPath for ProgramFilesX86 returned 0 and gave up C:\\Users\\ContainerAdministrator\r\nShGetFolderPath for System returned -2147024693 and gave up C:\\Users\\ContainerAdministrator\r\n** cmd.exe\r\n```",
        "createdAt": "2017-07-10T22:57:48Z",
        "updatedAt": "2017-07-10T22:58:43Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Apparently a regression from c113d5be19016ceef76b55107e6b16e0b920aabd (thanks, `git bisect`!). Investigating why.",
        "createdAt": "2017-07-10T23:03:27Z",
        "updatedAt": "2017-07-10T23:03:27Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Related: https://github.com/dotnet/corefx/issues/19110. CoreFX has similar calls and is getting bad results too--though that doesn't explain why this apparently started failing with a specific commit in MSBuild.",
        "createdAt": "2017-07-11T17:02:09Z",
        "updatedAt": "2017-07-11T17:02:09Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "We can work around the problem by changing `Exec.GenerateFullPathToTool` to return `%ComSpec%` instead of `ToolLocationHelper.GetPathToSystemFile(\"cmd.exe\")`. I'm not sure of the impact of changing the other calls, and would like to avoid doing this on any other environment given how late it is in the release, so I'm trying to find a good way to do that _only_ on Nano Server.",
        "createdAt": "2017-07-11T18:32:43Z",
        "updatedAt": "2017-07-11T18:32:43Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Thanks @rainersigwald. I've verified this has been fixed in the aspnetcore Nano Server docker images.",
        "createdAt": "2017-07-13T17:23:46Z",
        "updatedAt": "2017-07-13T17:23:46Z",
        "author": {
          "login": "natemcmaster"
        }
      }
    ]
  }
}