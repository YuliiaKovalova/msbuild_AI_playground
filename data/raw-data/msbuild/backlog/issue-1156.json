{
  "number": 1156,
  "title": "Cannot consume nightly builds using NuGet wildcard syntax",
  "body": "Problem: the versioning schema of MSBuild nightly builds breaks support for wildcards. The nightlies -- currently versioned as `15.1.$(BuildNumber)-preview5` -- cannot be referenced using `\"15.1.*\"` because the packages contain the \"-preview5\" preversion suffix. \n\n> Unable to resolve 'Microsoft.Build.Runtime (>= 15.1.0)'\n\nThis means we have to manually edit dependency versions for every pre-release build.\n\nSuggestion:\nUse the versioning format used by .NET Core. `15.1.0-preview5-$(BuildNumber)`. This would allow consumers to reference prerelease versions using wildcards `\"15.1.0-*\"`.\n",
  "state": "CLOSED",
  "createdAt": "2016-10-04T17:43:21Z",
  "updatedAt": "2024-02-21T17:25:24Z",
  "closedAt": "2016-10-24T17:02:47Z",
  "author": {
    "login": "natemcmaster"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "jeffkl"
      }
    ]
  },
  "milestone": {
    "title": "Visual Studio 15 RC"
  },
  "comments": {
    "nodes": [
      {
        "body": "Related to #557 Versioning scheme for package, assembly, and file versions\n",
        "createdAt": "2016-10-04T17:50:00Z",
        "updatedAt": "2016-10-04T17:50:18Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "@natemcmaster are you sure it doesn't work for you to reference `15.1.*-*`?\r\n\r\nAlso, how do you feel about the fact that when these prerelease packages make a breaking change that your code, without any changes, is suddenly unbuildable and you don't have documentation on what you referenced when it was buildable? It seems that would give you a fire drill every time it happened. I'm curious what you're building that would prefer to consume arbitrary versions of packages rather than something of a solid foundation that you upgrade after you've proven it can build.",
        "createdAt": "2017-01-31T18:02:28Z",
        "updatedAt": "2017-01-31T18:02:33Z",
        "author": {
          "login": "AArnott"
        }
      },
      {
        "body": "`NuGet.targets(97,5): error : '15.1.*-*' is not a valid version string.`\r\n\r\nYes, I'm sure.\r\n\r\n> how do you feel about the fact that when these prerelease packages make a breaking change\r\n\r\nWe only use floating versions on our dev branch. When we branch for release, we pin to stable versions. We are okay with breaking changes on our dev feed because we want to be made aware of breaking changes ASAP. We use a very small amount of MSBuild API, and it is rarely broken by using floating versions.\r\n\r\nAlso, when we build, NuGet resolves the floating version and stamps the resolved version into the nuget package we produce. If we ever did need to reproduce an old build, we can look at the artifacts to find which version was used.",
        "createdAt": "2017-01-31T18:17:13Z",
        "updatedAt": "2017-01-31T18:17:23Z",
        "author": {
          "login": "natemcmaster"
        }
      },
      {
        "body": "Thanks for that info. Interesting. \r\n\r\nFWIW, I don't find the argument compelling. If MSBuild rarely breaks you, floating versions doesn't sound that important either.",
        "createdAt": "2017-01-31T21:19:03Z",
        "updatedAt": "2017-01-31T21:19:03Z",
        "author": {
          "login": "AArnott"
        }
      },
      {
        "body": "> If MSBuild rarely breaks you, floating versions doesn't sound that important either.\r\n\r\nTo clarify, API changes in MSBuild from build to build don't break us, but if we don't have the latest packages (which floating version helps us do automatically), then we end up with forced-package downgrades, and that's what break us. \r\n\r\nThis may be a point-in-time thing though. Once we have stable RTM builds, we can pin to those versions.",
        "createdAt": "2017-01-31T21:22:38Z",
        "updatedAt": "2017-01-31T21:22:38Z",
        "author": {
          "login": "natemcmaster"
        }
      }
    ]
  }
}