{
  "number": 2746,
  "title": "Migrating tasks from old csproj to new csproj format",
  "body": "I'm currently in a process of migrating old csprojs to a new format. In some of them I have a msbuild task to replace app.config with app.debug/release.config (depending on build configuration).\r\nIn old csproj code to achieve that looks as follows:\r\n\r\n```xml\r\n<UsingTask TaskName=\"TransformXml\" AssemblyFile=\"$(MSBuildExtensionsPath32)\\Microsoft\\VisualStudio\\v$(VisualStudioVersion)\\Web\\Microsoft.Web.Publishing.Tasks.dll\" />\r\n  <Target Name=\"AfterCompile\" Condition=\"Exists('App.$(Configuration).config')\">\r\n    <!--Generate transformed app config in the intermediate directory-->\r\n    <TransformXml Source=\"App.config\" Destination=\"$(IntermediateOutputPath)$(TargetFileName).config\" Transform=\"App.$(Configuration).config\" />\r\n    <!--Force build process to use the transformed configuration file from now on.-->\r\n    <ItemGroup>\r\n      <AppConfigWithTargetPath Remove=\"App.config\" />\r\n      <AppConfigWithTargetPath Include=\"$(IntermediateOutputPath)$(TargetFileName).config\">\r\n        <TargetPath>$(TargetFileName).config</TargetPath>\r\n      </AppConfigWithTargetPath>\r\n    </ItemGroup>\r\n  </Target>\r\n```\r\n\r\nCurrently I have a piece of code like this which in fact doesn't work, but project compiles with it:\r\n\r\n```xml\r\n<UsingTask TaskName=\"TransformXml\" AssemblyFile=\"$(MSBuildExtensionsPath32)\\Microsoft\\VisualStudio\\v$(VisualStudioVersion)\\Web\\Microsoft.Web.Publishing.Tasks.dll\" />\r\n<Target Name=\"AfterCompile\" AfterTargets=\"Build\">\r\n  <TransformXml Source=\"App.config\" Destination=\"$(IntermediateOutputPath)$(TargetFileName).config\" Transform=\"App.$(Configuration).config\" />\r\n  <ItemGroup>\r\n    <AppConfigWithTargetPath Remove=\"App.config\" />\r\n    <AppConfigWithTargetPath Include=\"$(IntermediateOutputPath)$(TargetFileName).config\">\r\n      <TargetPath>$(TargetFileName).config</TargetPath>\r\n    </AppConfigWithTargetPath>\r\n  </ItemGroup>\r\n</Target>\r\n```\r\n\r\nSo the question is, is it supported in new csproj format? \r\nIf yes, how I could port such task(s)?\r\nIf no, would it be supported in future?\r\n\r\nOS info:\r\nVisual studio 15.4.4\r\n",
  "state": "CLOSED",
  "createdAt": "2017-11-24T06:42:58Z",
  "updatedAt": "2024-02-21T17:15:32Z",
  "closedAt": "2017-12-22T06:24:31Z",
  "author": {
    "login": "MNie"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "@MNie How are you including this target in the project?\r\n\r\nI suspect this is an issue where you're trying to override a target, but defining it _before_ the target you want to override. This has always been possible but is exacerbated by Sdk-style automatic import of `.targets` at the _very end_ of the file.\r\n\r\nIf that's the case, there are more details at https://github.com/Microsoft/msbuild/issues/1680, including other suggestions. I suggest going to a custom target name, maybe something like `ApplyConfigurationConfigFile`, with the appropriate `BeforeTargets` to hook it into the build process.",
        "createdAt": "2017-12-20T17:48:21Z",
        "updatedAt": "2017-12-20T17:48:21Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Hi @rainersigwald\r\nI try to rename target and right now fragment of my csproj file which should replace config files looks like this:\r\n```xml\r\n<Import Project=\"$(MSBuildExtensionsPath)\\Microsoft\\VisualStudio\\v15.0\\Web\\Microsoft.Web.Publishing.targets\" />\r\n<Message Text=\"Inside BeforeBuild\" Importance=\"high\" />\r\n<UsingTask TaskName=\"TransformXml\" AssemblyFile=\"$(MSBuildExtensionsPath32)\\Microsoft\\VisualStudio\\v15.0\\Web\\Microsoft.Web.Publishing.Tasks.dll\" />\r\n<Target Name=\"ApplyConfigurationConfigFile\" BeforeTargets=\"Build\">\r\n  <ItemGroup>\r\n    <AppConfigWithTargetPath Remove=\"App.config\" />\r\n    <AppConfigWithTargetPath Include=\"$(IntermediateOutputPath)$(TargetFileName).config\">\r\n      <TargetPath>$(TargetFileName).config</TargetPath>\r\n    </AppConfigWithTargetPath>\r\n  </ItemGroup>\r\n  <Message Text=\"Inside BeforeBuild\" Importance=\"high\" />\r\n  <TransformXml Source=\"App.config\" Destination=\"$(IntermediateOutputPath)$(TargetFileName).config\" Transform=\"App.$(Configuration).config\" />\r\n  <Message Text=\"Inside BeforeBuild\" Importance=\"high\" />\r\n</Target>\r\n```\r\nIn property group I add following element:\r\n```xml\r\n<BuildDependsOn>BeforeBuild</BuildDependsOn>\r\n```\r\nThe result is that I see an information in output window:\r\n![image](https://user-images.githubusercontent.com/7689103/34256140-2d6ad442-e654-11e7-8bf5-a1712d669fc6.png)\r\n\r\nBut task doesn't replace values in app.config file..",
        "createdAt": "2017-12-21T12:40:16Z",
        "updatedAt": "2017-12-21T12:40:16Z",
        "author": {
          "login": "MNie"
        }
      },
      {
        "body": "@MNie `BeforeTargets=\"Build\"` is probably too late (`Build` is actually, confusingly, one of the very _last_ targets to execute in most projects). Can you instead do `AfterTargets=\"PrepareForBuild\"`? That is what [assigns `AppConfigWithTargetPath`](https://github.com/Microsoft/msbuild/blob/5213af78d17613417e5b715e7f83100dc1574ad6/src/Tasks/Microsoft.Common.CurrentVersion.targets#L1056-L1075), so it seems reasonable to me to tweak it immediately afterward.\r\n\r\n> In property group I add following element:\r\n> ```xml\r\n><BuildDependsOn>BeforeBuild</BuildDependsOn>\r\n> ```\r\n\r\nThis should [already be the case](https://github.com/Microsoft/msbuild/blob/5213af78d17613417e5b715e7f83100dc1574ad6/src/Tasks/Microsoft.Common.CurrentVersion.targets#L777-L778). May I ask why you did this?\r\n",
        "createdAt": "2017-12-21T21:49:10Z",
        "updatedAt": "2017-12-21T21:49:10Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald \"May I ask why you did this?\" I try everything to make it works :) Finally I remove this element cause it doesn't change nothign. It seems that my problem was an invalid attribute depending `when` the task should run. If I change to `AfterTargets=\"PrepareForBuild\"` it works like a charm :). Thank you very much!\r\n\r\nSo finally to answer my own question, how to migrate msbuild task which previously looks like this:\r\n```xml\r\n<UsingTask TaskName=\"TransformXml\" AssemblyFile=\"$(MSBuildExtensionsPath32)\\Microsoft\\VisualStudio\\v$(VisualStudioVersion)\\Web\\Microsoft.Web.Publishing.Tasks.dll\" />\r\n<Target Name=\"AfterCompile\" Condition=\"Exists('App.$(Configuration).config')\">\r\n  <!--Generate transformed app config in the intermediate directory-->\r\n  <TransformXml Source=\"App.config\" Destination=\"$(IntermediateOutputPath)$(TargetFileName).config\" Transform=\"App.$(Configuration).config\" />\r\n  <!--Force build process to use the transformed configuration file from now on.-->\r\n  <ItemGroup>\r\n    <AppConfigWithTargetPath Remove=\"App.config\" />\r\n    <AppConfigWithTargetPath Include=\"$(IntermediateOutputPath)$(TargetFileName).config\">\r\n      <TargetPath>$(TargetFileName).config</TargetPath>\r\n    </AppConfigWithTargetPath>\r\n  </ItemGroup>\r\n</Target>\r\n```\r\n\r\nYou have to change `Target` to be suitable with new approach (in this situation **AfterTargets=\"PrepareForBuild\"**) so the `new` part of csproj should looks like this:\r\n```xml\r\n<UsingTask TaskName=\"TransformXml\" AssemblyFile=\"$(MSBuildExtensionsPath32)\\Microsoft\\VisualStudio\\v$(VisualStudioVersion)\\Web\\Microsoft.Web.Publishing.Tasks.dll\" />\r\n<Target Name=\"ApplyConfigurationConfigFile\" AfterTargets=\"PrepareForBuild\" Condition=\"Exists('App.$(Configuration).config')\">\r\n  <ItemGroup>\r\n    <AppConfigWithTargetPath Remove=\"App.config\" />\r\n    <AppConfigWithTargetPath Include=\"$(IntermediateOutputPath)$(TargetFileName).config\">\r\n      <TargetPath>$(TargetFileName).config</TargetPath>\r\n    </AppConfigWithTargetPath>\r\n  </ItemGroup>\r\n  <TransformXml Source=\"App.config\" Destination=\"$(IntermediateOutputPath)$(TargetFileName).config\" Transform=\"App.$(Configuration).config\" />\r\n</Target>\r\n```\r\n@rainersigwald one more time many thanks for help, and wish you a Merry Christmas :)",
        "createdAt": "2017-12-22T06:24:31Z",
        "updatedAt": "2017-12-22T08:29:40Z",
        "author": {
          "login": "MNie"
        }
      },
      {
        "body": "Glad that worked! One thing to note if you are doing the adoption gradually is that the new hooks should work fine with the old projects, too, so you can switch this independently of moving to Sdk-style imports.",
        "createdAt": "2017-12-22T15:36:22Z",
        "updatedAt": "2017-12-22T15:36:22Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "For anyone who stumbles upon this like I have: looks like the transform files are not taken into account by the `FastUpToDate` check (at least when they have Build Action = None, like they should). This causes a problem, because when the only file that is changed is e.g. `App.Debug.config`, the project is not rebuilt during subsequent builds.\r\n\r\nThis can be fixed by adding this to the csproj:\r\n\r\n    <ItemGroup Condition=\"Exists('App.$(Configuration).config')\">\r\n      <CustomAdditionalCompileInputs Include=\"App.$(Configuration).config\" />\r\n    </ItemGroup>\r\n\r\nBoth this and the target from https://github.com/Microsoft/msbuild/issues/2746#issuecomment-353531239 can even be put in `Directory.Build.targets` and they automatically apply to all projects.\r\n\r\n(thanks goes to https://github.com/dotnet/project-system/issues/4100#issuecomment-428899648 for inspiration)",
        "createdAt": "2018-12-03T12:07:59Z",
        "updatedAt": "2018-12-03T12:07:59Z",
        "author": {
          "login": "jjanuszkiewicz"
        }
      },
      {
        "body": "I was not able to get `CustomAdditionalCompileInputs` to work. `UpToDateCheckBuilt` works fantastically, however. I was also able to use the `TransformXml` task from `Microsoft.NET.Sdk.Publish` (just add it to your project's SDK list, then there is no need to use `UsingTask`).\r\n\r\n    <Project Sdk=\"Microsoft.NET.Sdk.Worker;Microsoft.NET.Sdk.Publish\">\r\n      ...\r\n    \r\n      <Target Name=\"ApplyConfigurationConfigFile\" AfterTargets=\"PrepareForBuild\" Condition=\"Exists('App.$(Configuration).config')\">\r\n        <ItemGroup>\r\n          <AppConfigWithTargetPath Remove=\"App.config\" />\r\n          <AppConfigWithTargetPath Include=\"$(IntermediateOutputPath)$(TargetFileName).config\" TargetPath=\"$(TargetFileName).config\" />\r\n          <UpToDateCheckBuilt Include=\"$(IntermediateOutputPath)$(TargetFileName).config\" Original=\"App.config\" />\r\n          <UpToDateCheckBuilt Include=\"$(IntermediateOutputPath)$(TargetFileName).config\" Original=\"App.$(Configuration).config\" />\r\n        </ItemGroup>\r\n        <TransformXml Source=\"App.config\" Transform=\"App.$(Configuration).config\" Destination=\"$(IntermediateOutputPath)$(TargetFileName).config\" />\r\n      </Target>\r\n      \r\n      <ItemGroup>\r\n        <Content Remove=\"App.config\" />\r\n        <Content Remove=\"App.*.config\" />\r\n        <None Include=\"App.config\" />\r\n        <None Include=\"App.*.config\" />\r\n      </ItemGroup>\r\n    \r\n      ...\r\n    </Project>",
        "createdAt": "2020-06-12T21:03:29Z",
        "updatedAt": "2020-06-12T21:03:29Z",
        "author": {
          "login": "Taudris"
        }
      },
      {
        "body": "A few years later, it's now even easier to perform App.config transforms thanks to the [Microsoft.VisualStudio.SlowCheetah](https://www.nuget.org/packages/Microsoft.VisualStudio.SlowCheetah/) NuGet package. Here's how to modify your csproj to enable transformations: add the `Microsoft.VisualStudio.SlowCheetah` pacakge and update your App.config original and configuration-specific files metadata with `TransformOnBuild` and repectively `IsTransformFile`.\r\n\r\n```xml\r\n<ItemGroup>\r\n  <PackageReference Include=\"Microsoft.VisualStudio.SlowCheetah\" Version=\"3.2.26\" PrivateAssets=\"all\" />\r\n  <None Update=\"App.config\">\r\n    <TransformOnBuild>true</TransformOnBuild>\r\n  </None>\r\n  <None Update=\"App.*.config\">\r\n    <DependentUpon>App.config</DependentUpon>\r\n    <IsTransformFile>true</IsTransformFile>\r\n  </None>\r\n</ItemGroup>\r\n```",
        "createdAt": "2021-03-23T09:23:46Z",
        "updatedAt": "2021-03-23T09:23:46Z",
        "author": {
          "login": "0xced"
        }
      },
      {
        "body": "> A few years later, it's now even easier to perform App.config transforms thanks to the [Microsoft.VisualStudio.SlowCheetah](https://www.nuget.org/packages/Microsoft.VisualStudio.SlowCheetah/) NuGet package. Here's how to modify your csproj to enable transformations: add the `Microsoft.VisualStudio.SlowCheetah` pacakge and update your App.config original and configuration-specific files metadata with `TransformOnBuild` and repectively `IsTransformFile`.\r\n> \r\n> ```\r\n> <ItemGroup>\r\n>   <PackageReference Include=\"Microsoft.VisualStudio.SlowCheetah\" Version=\"3.2.26\" PrivateAssets=\"all\" />\r\n>   <None Update=\"App.config\">\r\n>     <TransformOnBuild>true</TransformOnBuild>\r\n>   </None>\r\n>   <None Update=\"App.*.config\">\r\n>     <DependentUpon>App.config</DependentUpon>\r\n>     <IsTransformFile>true</IsTransformFile>\r\n>   </None>\r\n> </ItemGroup>\r\n> ```\r\n\r\nSweet Jesus Halelujah! There's so many packages out there one cannot possible know all the important ones and this package is definitely one of the most important of them all. \r\n\r\nThank you very much!\r\n\r\nBtw. the previous answers did not work for me because for some reason the transformation removed assemblyBinding nodes in 4.6.1 project and the application was confused what packages to load.",
        "createdAt": "2021-11-13T02:36:19Z",
        "updatedAt": "2021-11-13T02:36:19Z",
        "author": {
          "login": "OndrejValenta"
        }
      },
      {
        "body": "> > A few years later, it's now even easier to perform App.config transforms thanks to the [Microsoft.VisualStudio.SlowCheetah](https://www.nuget.org/packages/Microsoft.VisualStudio.SlowCheetah/) NuGet package. Here's how to modify your csproj to enable transformations: add the `Microsoft.VisualStudio.SlowCheetah` pacakge and update your App.config original and configuration-specific files metadata with `TransformOnBuild` and repectively `IsTransformFile`.\r\n> > ```\r\n> > <ItemGroup>\r\n> >   <PackageReference Include=\"Microsoft.VisualStudio.SlowCheetah\" Version=\"3.2.26\" PrivateAssets=\"all\" />\r\n> >   <None Update=\"App.config\">\r\n> >     <TransformOnBuild>true</TransformOnBuild>\r\n> >   </None>\r\n> >   <None Update=\"App.*.config\">\r\n> >     <DependentUpon>App.config</DependentUpon>\r\n> >     <IsTransformFile>true</IsTransformFile>\r\n> >   </None>\r\n> > </ItemGroup>\r\n> > ```\r\n> \r\n> Sweet Jesus Halelujah! There's so many packages out there one cannot possible know all the important ones and this package is definitely one of the most important of them all.\r\n> \r\n> Thank you very much!\r\n> \r\n> Btw. the previous answers did not work for me because for some reason the transformation removed assemblyBinding nodes in 4.6.1 project and the application was confused what packages to load.\r\n\r\nAlso, even with VS 2022, I recommend installing the SlowCheetah extension, right click the app.config and \"Add Transform\". I believe it adds more accurate (per file) transformations to you project file.",
        "createdAt": "2022-03-03T13:47:39Z",
        "updatedAt": "2022-03-03T13:47:39Z",
        "author": {
          "login": "timvdh"
        }
      }
    ]
  }
}