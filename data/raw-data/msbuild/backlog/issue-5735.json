{
  "number": 5735,
  "title": "The <PackageReference /> is incorrect when building for multi-target platform",
  "body": "### Issue Description\r\n\r\nI want to build a WPF project separately for X64 and x86, and they will refer to different packages, *.csproj file like below:\r\n\r\n```xml\r\n  <Platforms>x64;x86</Platforms>\r\n\r\n  <ItemGroup Condition=\"'$(Platform)'=='x64'\">\r\n    <ProjectReference Include=\"..\\ClassLibrary.x64\\ClassLibrary.x64.csproj\" />\r\n    <PackageReference Include=\"DotNetBrowser64\" Version=\"1.21.5\" />\r\n  </ItemGroup>\r\n  <ItemGroup Condition=\"'$(Platform)'=='x86'\">\r\n    <ProjectReference Include=\"..\\ClassLibrary.x86\\ClassLibrary.x86.csproj\" />\r\n    <PackageReference Include=\"DotNetBrowser32\" Version=\"1.21.5\" />\r\n  </ItemGroup>\r\n```\r\n\r\nIf I build with Visual Studio 2019, and output files will be exactly correct. But when I use the following command in `Developer PowerShell for VS 2019`, it will references `DotNetBrowser64` package for the x86 project: (On my other machine,  it will reference `DotNetBrowser32` package for the x64 project)\r\n\r\n```cmd\r\n// In *.sln file dir\r\n> msbuild -p:Configuration='Release' -p:Platform='x86' -t:Rebuild\r\n\r\n// Version Info\r\n> msbuild -version\r\n< Microsoft (R) Build Engine version 16.7.0+b89cb5fde for .NET Framework\r\n< Copyright (C) Microsoft Corporation. All rights reserved.\r\n```\r\n\r\n`<ProjectReference />` (`ClassLibrary.x86.dll`) is correct, but `<PackageReference />` (`DotNetBrowser64.dll`) is incorrect:\r\n\r\n![image](https://user-images.githubusercontent.com/8541016/92986050-a66e6a00-f4ea-11ea-823b-9bb890ebc4da.png)\r\n\r\n### Steps to Reproduce\r\n\r\n1. New WPF project in VS2019, and migrate to sdk-style *.csproj by [CsprojToVs2017](https://github.com/hvanbakel/CsprojToVs2017).\r\n2. Modify the *csproj file to import some package, see attachment for detail.\r\n3. Build by VS2019 and `msbuild` commands respectively.\r\n\r\n### Expected Behavior\r\n\r\nWhen built with MSBuild in cmd, powershell or cake script, it can output the same results as the VS2019 GUI build.\r\n\r\n### Versions & Configurations\r\n\r\n- VS: Microsoft Visual Studio Enterprise 2019 Version 16.7.3\r\n- MSBuild: Microsoft (R) Build Engine version 16.7.0+b89cb5fde for .NET Framework\r\n\r\n![image](https://user-images.githubusercontent.com/8541016/92986366-b6874900-f4ec-11ea-8f69-2fff5e1f6e05.png)\r\n\r\n### Attach\r\n\r\nMini reproduction demo: [MultiTargetErrorMiniDemo.zip](https://github.com/dotnet/msbuild/files/5212139/MultiTargetErrorMiniDemo.zip)\r\n",
  "state": "CLOSED",
  "createdAt": "2020-09-12T03:42:45Z",
  "updatedAt": "2020-09-17T01:46:44Z",
  "closedAt": "2020-09-17T01:46:44Z",
  "author": {
    "login": "DingpingZhang"
  },
  "labels": [
    "bug",
    "needs-triage"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Team Triage: Nuget doesn't support conditional references on anything other than `TargetFramework`. Try adding `-restore` to the msbuild command line.",
        "createdAt": "2020-09-16T15:40:28Z",
        "updatedAt": "2020-09-16T15:40:28Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "> Try adding -restore to the msbuild command line.\r\n\r\n@BenVillalobos Thanks for your suggestion! it works for me.",
        "createdAt": "2020-09-17T01:46:44Z",
        "updatedAt": "2020-09-17T01:46:44Z",
        "author": {
          "login": "DingpingZhang"
        }
      }
    ]
  }
}