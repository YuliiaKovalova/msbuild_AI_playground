{
  "number": 2427,
  "title": "MSBuild ToolsVersions missing from hklm\\software\\Microsoft\\MSBuild\\ToolsVersions registry key",
  "body": "All previous versions of MSBuild left a registry entry in `hklm\\software\\Microsoft\\MSBuild\\ToolsVersions` you could use to enumerate what versions of MSBuild are installed and where to find them.\r\n\r\nVisual Studio 2017 doesn't create a `hklm\\software\\Microsoft\\MSBuild\\ToolsVersions\\15.0` so our build tool doesn't see that it is installed.\r\n\r\nAccording to [MSBuild Toolset (ToolsVersion)](https://docs.microsoft.com/en-us/visualstudio/msbuild/msbuild-toolset-toolsversion):\r\n\r\nbq. Toolset properties specify the paths of the tools. MSBuild uses the value of the ToolsVersion attribute in the project file to locate the corresponding registry key, and then uses the information in the registry key to set the Toolset properties. For example, if ToolsVersion has the value 12.0, then MSBuild sets the Toolset properties according to this registry key: HKLM\\Software\\Microsoft\\MSBuild\\ToolsVersions\\12.0.\r\n\r\nMSBuild 15.0 breaks this contract.",
  "state": "CLOSED",
  "createdAt": "2017-08-14T21:53:43Z",
  "updatedAt": "2024-02-21T17:17:18Z",
  "closedAt": "2018-03-27T16:37:21Z",
  "author": {
    "login": "splatteredbits"
  },
  "labels": [
    "Area: Documentation",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "MSBuild 15.5"
  },
  "comments": {
    "nodes": [
      {
        "body": "Assigned label documentation for us to track.\r\n\r\nThis is by design. You can install multiple versions of Visual Studio side by side so we can no longer keep ToolsVersions in the global registry. The definition for 15.0 is now stored in the MSBuild app.config [here](https://github.com/Microsoft/msbuild/blob/master/src/MSBuild/app.config#L72-L111). We will make sure documentation is updated to reflect this.",
        "createdAt": "2017-08-15T22:24:47Z",
        "updatedAt": "2017-08-15T22:24:47Z",
        "author": {
          "login": "AndyGerlicher"
        }
      },
      {
        "body": "How do find that file?\r\n",
        "createdAt": "2017-08-15T22:31:49Z",
        "updatedAt": "2017-08-15T22:31:49Z",
        "author": {
          "login": "splatteredbits"
        }
      },
      {
        "body": "@splatteredbits can you describe what you're trying to do at a high level?",
        "createdAt": "2017-08-15T22:34:23Z",
        "updatedAt": "2017-08-15T22:34:23Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I'm authoring a build tool. Users can choose what version of MSBuild to use, e.g. `14.0`, `4.0`, etc. I need to know if that version is installed or not and where I can find `MSBuild.exe`. I don't want to do string math, e.g. `Path.Combine(rootPath, \"MSBuild\\15.0\\Bin\\MSBuild.exe\")`. I want to be able to lookup where a given version of MSBuild is installed so all I have to do is `Path.Combine(rootPath, \"MSBuild.exe\")`. When I have to do more than that, Visual Studio's installation logic has leaked into my build tool.",
        "createdAt": "2017-08-15T22:54:43Z",
        "updatedAt": "2017-08-15T23:03:46Z",
        "author": {
          "login": "splatteredbits"
        }
      },
      {
        "body": "@AndyGerlicher Aren't all versions of Visual Studio side-by-side? I've got 2013, 2015, and 2017 installed at the moment. Why can't the VS2017 installer create a `hklm\\software\\Microsoft\\MSBuild\\ToolsVersions\\15.0` with an `MSBuildToolsPath` that points to `C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Professional\\MSBuild\\15.0\\Bin\\amd64` (or wherever MSBuild.exe is installed)?\r\n\r\nWhat if I'm on a 32-bit OS? Is there still a `C:\\Program Files\\Microsoft Visual Studio\\2017\\Professional\\MSBuild\\15.0\\Bin\\amd64` directory? Or should I use `C:\\Program Files\\Microsoft Visual Studio\\2017\\Professional\\MSBuild\\15.0\\Bin`? What edition of Visual Studio is installed? What if I can't use the `VSSetup` PowerShell module because I'm using Java or C# or some other tool?\r\n\r\nWithout the registry key, I have to worry about and code solutions that handle the architecture of the OS along with all the editions of Visual Studio. Ugh. That's a pretty leaky abstraction.",
        "createdAt": "2017-08-15T22:57:36Z",
        "updatedAt": "2017-08-15T23:01:10Z",
        "author": {
          "login": "splatteredbits"
        }
      },
      {
        "body": "This a critical issue. Previous version of Build Tools for Visual Studio 2017 was working fine but new version released recently (I suppose it follow 15.3 Visual Studio update) returns an exception `Microsoft.Build.Exceptions.InvalidProjectFileException: the tools version \"15.0\" is unrecognized. Available tools versions are \"2.0\", \"3.5\", \"4.0\".`\r\nWhen using this code:\r\n```csharp\r\nvar projectCollection = new Microsoft.Build.Evaluation.ProjectCollection();\r\nvar project = new Microsoft.Build.Evaluation.Project(null, null, projectCollection);\r\n```\r\nWe have a product where we ask users to either install Visual Studio or Build Tools for Visual Studio 2017. Now if new users try to use our product they will fail to build their project because of this issue.\r\n\r\nI tried on a fresh VM with nothing installed. It was working fine until VS 15.3 was released and now it fails.",
        "createdAt": "2017-08-16T10:55:18Z",
        "updatedAt": "2017-08-18T01:31:15Z",
        "author": {
          "login": "Kryptos-FR"
        }
      },
      {
        "body": "@AndyGerlicher You said:\r\n\r\n> This is by design. You can install multiple versions of Visual Studio side by side so we can no longer keep ToolsVersions in the global registry. The definition for 15.0 is now stored in the MSBuild app.config here. We will make sure documentation is updated to reflect this.\r\n\r\nWhat's the point of having every tool builder ship their own copy of MS Build? Why can't it work if we just ask users to install the one provided by either Visual Studio or Build Tools for Visual Studio (btw what's the point of this package if it can't be used in the end)?\r\n\r\nAs a tool maker if we have to ship a version of MS Build ourselves it means:\r\n* it's one more dependency to deal with that we will rather not have to\r\n* for each update of MS Build we need to make an update of our tool to ship the new version, whereas if we could use the one provided by either VS or Build Tools (handled by the VS installer) we won't have to worry about it\r\n* why breaking the behavior between 15.2 and 15.3? Isn't an API supposed to keep working between minor versions? 15.2 was able to find tool version \"15\" but 15.3 is not capable. What a strange and unexpected regression.\r\n* this breaking change was completely unexpected for a lot of people including other .net teams (see the issue in docfx).",
        "createdAt": "2017-08-17T07:06:30Z",
        "updatedAt": "2017-08-18T01:31:00Z",
        "author": {
          "login": "Kryptos-FR"
        }
      },
      {
        "body": "@Kryptos-FR ~~Can you please file a new issue on the behavior change between 15.2 and 15.3?~~ That is distinct from the original bug here. Please include details about how you're referencing MSBuild and what you deploy with your application.\r\n\r\nTo be clear, you should NOT need to ship MSBuild yourself.\r\n\r\nEDIT: no need for a new bug, we have #2369.",
        "createdAt": "2017-08-17T12:00:16Z",
        "updatedAt": "2017-08-17T13:20:32Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald Can you take a look at my last comment on this https://github.com/dotnet/roslyn/issues/15056  issue. It seems to me that its related. Not sure whether its a Roslyn issue or msbuild issue. ",
        "createdAt": "2017-08-17T12:42:52Z",
        "updatedAt": "2017-08-17T12:42:52Z",
        "author": {
          "login": "sanilpaul"
        }
      },
      {
        "body": "@splatteredbits \r\n\r\n> Aren't all versions of Visual Studio side-by-side? I've got 2013, 2015, and 2017 installed at the moment.\r\n\r\nWhat's new is that you can have multiple side-by-side VS2017s. For example, you might have both the preview channel and the stable channel installed on a machine.\r\n\r\n> Why can't the VS2017 installer create a `hklm\\software\\Microsoft\\MSBuild\\ToolsVersions\\15.0` with an `MSBuildToolsPath` that points to `C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Professional\\MSBuild\\15.0\\Bin\\amd64` (or wherever MSBuild.exe is installed)?\r\n\r\nBecause there might be many MSBuild instances on a machine with ToolsVersion 15.0, but there's only one registry location.\r\n\r\n> What if I'm on a 32-bit OS? Is there still a `C:\\Program Files\\Microsoft Visual Studio\\2017\\Professional\\MSBuild\\15.0\\Bin\\amd64` directory?\r\n\r\nWe do install 64-bit MSBuild everywhere, but it won't work on 32-bit machines.\r\n\r\n> Or should I use `C:\\Program Files\\Microsoft Visual Studio\\2017\\Professional\\MSBuild\\15.0\\Bin`? \r\n\r\nIt sounds like you're conflating two different questions here: locating MSBuild, and deciding whether to invoke 64-bit or 32-bit MSBuild. Since the introduction of 64-bit MSBuild, it's been something that users can choose to use. On 64-bit Windows, the Developer Command Prompt for Visual Studio puts 32-bit MSBuild on the `PATH`. Generally tooling (like VSTS build) provides a selectable option for MSBuild architecture. This is because MSBuild accepts user plugins (in the form of tasks) which may be architecture-specific, so a given project may build _only_ with one or the other architecture of MSBuild.\r\n\r\n> What if I can't use the `VSSetup` PowerShell module because I'm using Java or C# or some other tool?\r\n\r\nThe Visual Studio setup folks have provided \"Setup Configuration APIs\" at a low level (COM) so you can call it from anywhere. The [VSSetup](https://github.com/Microsoft/vssetup.powershell) repo can be used as a guide to calling them from C#, and links to previously-published samples in C++. I assume it's possible to call COM from Java, though I haven't tried.\r\n\r\nThe [`vswhere`](https://github.com/Microsoft/vswhere) command-line tool is also included at a fixed location when Visual Studio 15.2 or higher is installed.",
        "createdAt": "2017-08-17T13:12:53Z",
        "updatedAt": "2017-08-17T13:12:53Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@sanilpaul Yes, that sounds like what @Kryptos-FR is seeing, and #2369 is the bug for that.",
        "createdAt": "2017-08-17T13:23:25Z",
        "updatedAt": "2017-08-17T13:23:25Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald Thanks for the answer. I'll continue the discussion on #2369.\r\n\r\nI was under the impression that now it was necessary to ship MSBuild because of https://github.com/Microsoft/msbuild/blob/master/documentation/consuming-nuget-package.md#microsoftbuildruntime\r\nThis documentation might need some clarification.",
        "createdAt": "2017-08-18T01:17:56Z",
        "updatedAt": "2017-08-18T01:17:56Z",
        "author": {
          "login": "Kryptos-FR"
        }
      },
      {
        "body": "Just wanted to give an update on this issue. I published a package for a utility helper to find MSBuild.\r\n\r\nPackage: https://dotnet.myget.org/feed/msbuild/package/nuget/Microsoft.Build.MSBuildLocator\r\nSource: https://github.com/Microsoft/MSBuildLocator/\r\n\r\nYou can look at the [sample app](https://github.com/Microsoft/MSBuildLocator/blob/master/samples/BuilderApp/Program.cs) that builds in that repo for usage. I tried to make it as simple as possible to query for installed locations and \"register\" (add assembly resolver). This should allow you to reference our NuGet package for compile time and not have to ship MSBuild binaries with an app that wants to build or evaluate using our API and the installed toolset.\r\n\r\nPlease do give feedback in that repo if it works or doesn't for your needs. Thanks!",
        "createdAt": "2017-09-14T16:25:23Z",
        "updatedAt": "2017-09-14T16:25:23Z",
        "author": {
          "login": "AndyGerlicher"
        }
      },
      {
        "body": "I had the same question and filed for help in MSDN forums and no one answered. My question was:\r\n\"Where in the registry is MSBuildToolsPath defined for VS2017?\r\nFor VS2015 it isComputer\\HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\MSBuild\\ToolsVersions\\14.0 and MSBUILD path points to C:\\Program Files (x86)\\MSBuild\\14.0\\Bin\r\nFor VS2017 the MSBUUILD path is C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Professional\\MSBuild\\15.0\\Bin\r\nBut I don\u2019t see that path defined in the registry. Please help\"\r\nThe reason why I wanted this was to define my own path variable. In my csproj file I have statements like:\r\n![extpath](https://user-images.githubusercontent.com/23228929/43101875-5b4cffa2-8e7e-11e8-8e50-0c14105d2bc9.JPG)\r\n\r\nI do not want to modify my csproj file but just wanted to define ExtendedTargetsPath to point to MSBuildToolsPath. I was doing this redefinition in the registry for VS2015 and it had worked. Hence I was looking for the reg entry for VS2017. \r\n**Just now I found the solution. The solution is** just add this one line in MSBuild.exe.config \r\n![extpath1](https://user-images.githubusercontent.com/23228929/43102456-0e4052d4-8e80-11e8-8d95-b0db20692e52.JPG)\r\n\r\nWould this new information help SplatterBits for your issue. ",
        "createdAt": "2018-07-23T20:40:27Z",
        "updatedAt": "2018-07-23T20:55:30Z",
        "author": {
          "login": "agvardha"
        }
      }
    ]
  }
}