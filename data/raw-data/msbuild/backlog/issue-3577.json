{
  "number": 3577,
  "title": "OOM when generating binlog for boost.hana",
  "body": "It reproes using 15.8 preview 6 (I didn't try older versions).\r\n    Microsoft (R) Build Engine version 15.8.166+gd4e8d81a88 for .NET Framework\r\n\r\n1. Clone https://github.com/xiangfan-ms/hana\r\n2. Create build folder and enter build folder\r\n2. Generate the solution (-DBOOST_ROOT may be optional to repro OOM)\r\n```\r\ncmake .. -DBOOST_ROOT=[path_to_boost_167] -D\"CMAKE_CXX_FLAGS=/EHsc /Zc:ternary /bigobj /we4667\" -DBOOST_HANA_ENABLE_STRING_UDL=false\r\n```\r\n4. Build the solution\r\n```\r\nmsbuild /noconlog /t:Rebuild /p:Configuration=Debug /p:Platform=\"Win32\" /m /bl:hana.binlog;ProjectImports=None Boost.Hana.sln /flp:v=n;logfile=hana.log\r\n\r\nUnhandled Exception: OutOfMemoryException.\r\n```\r\n\r\nIt doesn't OOM if I don't generate binlog. According to the log file, the OOM happens at the very early stage of the build.\r\n",
  "state": "CLOSED",
  "createdAt": "2018-08-03T18:48:59Z",
  "updatedAt": "2024-02-21T17:12:05Z",
  "closedAt": "2021-03-04T03:26:31Z",
  "author": {
    "login": "xiangfan-ms"
  },
  "labels": [
    "Area: Debuggability",
    "Area: Performance",
    "Area: Logging",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "KirillOsenkov"
      }
    ]
  },
  "milestone": {
    "title": "MSBuild 16.10"
  },
  "comments": {
    "nodes": [
      {
        "body": "Call stack,\r\n\r\n```\r\n>\tMicrosoft.Build.dll!Microsoft.Build.InterningBinaryReader.ReadString()\tUnknown\r\n \tMicrosoft.Build.Framework.dll!Microsoft.Build.Framework.BuildEventArgs.CreateFromStream(System.IO.BinaryReader reader, int version)\tUnknown\r\n \tMicrosoft.Build.Framework.dll!Microsoft.Build.Framework.LazyFormattedBuildEventArgs.CreateFromStream(System.IO.BinaryReader reader, int version)\tUnknown\r\n \tMicrosoft.Build.Framework.dll!Microsoft.Build.Framework.BuildMessageEventArgs.CreateFromStream(System.IO.BinaryReader reader, int version)\tUnknown\r\n \tMicrosoft.Build.dll!Microsoft.Build.Shared.LogMessagePacketBase.ReadFromStream(Microsoft.Build.BackEnd.INodePacketTranslator translator)\tUnknown\r\n \tMicrosoft.Build.dll!Microsoft.Build.Shared.LogMessagePacketBase.Translate(Microsoft.Build.BackEnd.INodePacketTranslator translator)\tUnknown\r\n \tMicrosoft.Build.dll!Microsoft.Build.BackEnd.LogMessagePacket.FactoryForDeserialization(Microsoft.Build.BackEnd.INodePacketTranslator translator)\tUnknown\r\n \tMicrosoft.Build.dll!Microsoft.Build.BackEnd.NodePacketFactory.PacketFactoryRecord.DeserializeAndRoutePacket(int nodeId, Microsoft.Build.BackEnd.INodePacketTranslator translator)\tUnknown\r\n \tMicrosoft.Build.dll!Microsoft.Build.BackEnd.NodePacketFactory.DeserializeAndRoutePacket(int nodeId, Microsoft.Build.BackEnd.NodePacketType packetType, Microsoft.Build.BackEnd.INodePacketTranslator translator)\tUnknown\r\n \tMicrosoft.Build.dll!Microsoft.Build.BackEnd.NodeManager.DeserializeAndRoutePacket(int nodeId, Microsoft.Build.BackEnd.NodePacketType packetType, Microsoft.Build.BackEnd.INodePacketTranslator translator)\tUnknown\r\n \tMicrosoft.Build.dll!Microsoft.Build.BackEnd.NodeProviderOutOfProcBase.NodeContext.ReadAndRoutePacket(Microsoft.Build.BackEnd.NodePacketType packetType, byte[] packetData, int packetLength)\tUnknown\r\n \tMicrosoft.Build.dll!Microsoft.Build.BackEnd.NodeProviderOutOfProcBase.NodeContext.BodyReadComplete(System.IAsyncResult result)\tUnknown\r\n```",
        "createdAt": "2018-08-03T18:57:43Z",
        "updatedAt": "2018-08-03T19:16:25Z",
        "author": {
          "login": "xiangfan-ms"
        }
      },
      {
        "body": "Is the OOM node the entry-point or one of the workers? Can you also try without `/m`?",
        "createdAt": "2018-08-03T18:59:04Z",
        "updatedAt": "2018-08-03T18:59:04Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "On my machine, it was the entrypoint node, and it ran for a while without `/m`, suggesting less of a problem.\r\n\r\nWhich makes sense if that stack is actually representative of the problem, since it's in IPC string translation.\r\n\r\nConceivably related to https://github.com/Microsoft/msbuild/issues/3210 but that shouldn't cause an OOM crash, just GC pauses.",
        "createdAt": "2018-08-03T19:18:00Z",
        "updatedAt": "2018-08-03T19:18:00Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Yes, it appears to work if I remove /m.\r\nNew call stack after I disable JMC (I don't have the text form because VS also hangs during the debugging :-) ):\r\n\r\n![image](https://user-images.githubusercontent.com/25832891/43661573-a3613b90-9717-11e8-8883-fa0ee0b27e74.png)\r\n",
        "createdAt": "2018-08-03T19:20:46Z",
        "updatedAt": "2018-08-03T19:20:46Z",
        "author": {
          "login": "xiangfan-ms"
        }
      },
      {
        "body": "Took some memory dumps with `procdump.exe -n 3 -ma 29208` and compared them\r\n\r\nFrom one dump:\r\n\r\nName | Inc % | Inc\r\n-- | -- | --\r\n`Microsoft.Build.Framework!Microsoft.Build.Framework.BuildMessageEventArgs` | 74.2 | 870,234,752\r\n\\+ `LIB <<System.Threading.Tasks.Dataflow!Tasks.Dataflow.BufferBlock>>` | 74.2 | 870,234,752\r\n\\|+ `Microsoft.Build!Microsoft.Build.BackEnd.Logging.LoggingService` | 74.2 | 870,234,752\r\n\\|\\|+ `Microsoft.Build!Microsoft.Build.BackEnd.Logging.NodeLoggingContext` | 74.2 | 870,234,752\r\n\\|\\|\\|+ `Microsoft.Build!Microsoft.Build.BackEnd.InProcNode` | 74.2 | 870,234,752\r\n\r\nSo it seems like the logger is lagging, causing messages to pile up. We have a throttling mechanism, but it looks like it's only opted into sometimes. I'll try to debug in to see if the scenario that's overflowing it opts in (and the throttle is broken) or if it doesn't (and we need to opt it into throttling).",
        "createdAt": "2018-08-03T20:28:21Z",
        "updatedAt": "2018-08-03T20:29:13Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "It's the latter:\r\n\r\n```\r\n0:084> !DumpObj /d 02daca48\r\nName:        System.Threading.Tasks.Dataflow.Internal.BoundingStateWithPostponedAndTask`1[[System.Object, mscorlib]]\r\nMethodTable: 05334b68\r\nEEClass:     57c423a0\r\nSize:        28(0x1c) bytes\r\nFile:        C:\\Program Files (x86)\\Microsoft Visual Studio\\Preview\\Enterprise\\MSBuild\\15.0\\Bin\\System.Threading.Tasks.Dataflow.dll\r\nFields:\r\n      MT    Field   Offset                 Type VT     Attr    Value Name\r\n648cf2dc  400014b        4         System.Int32  1 instance   200000 BoundedCapacity\r\n648cf2dc  400014c        8         System.Int32  1 instance   199999 CurrentCount\r\n00000000  400014d        c                       0 instance 02daca64 PostponedMessages\r\n648cf2dc  400014e       10         System.Int32  1 instance        0 OutstandingTransfers\r\n64915c7c  400014f       14 ...eading.Tasks.Task  0 instance bcbb4fe0 TaskForInputProcessing\r\n```\r\n\r\nNote that we're at capacity . . . but events keep getting asynchronously added to the queue via the in-proc node, like so:\r\n\r\n```\r\n>\tMicrosoft.Build.dll!Microsoft.Build.BackEnd.Logging.LoggingService.ProcessLoggingEvent(object buildEvent, bool allowThrottling) Line 1076\tC#\r\n \tMicrosoft.Build.dll!Microsoft.Build.BackEnd.Logging.LoggingService.LogCommentFromText(Microsoft.Build.Framework.BuildEventContext buildEventContext, Microsoft.Build.Framework.MessageImportance importance, string message, object[] messageArgs) Line 98\tC#\r\n \tMicrosoft.Build.dll!Microsoft.Build.BackEnd.Logging.LoggingService.LogCommentFromText(Microsoft.Build.Framework.BuildEventContext buildEventContext, Microsoft.Build.Framework.MessageImportance importance, string message) Line 65\tC#\r\n \tMicrosoft.Build.dll!Microsoft.Build.BackEnd.Logging.LoggingContext.LogCommentFromText(Microsoft.Build.Framework.MessageImportance importance, string message) Line 130\tC#\r\n \tMicrosoft.Build.dll!Microsoft.Build.BackEnd.TaskExecutionHost.InternalSetTaskParameter(Microsoft.Build.Framework.TaskPropertyInfo parameter, object parameterValue) Line 1319\tC#\r\n \tMicrosoft.Build.dll!Microsoft.Build.BackEnd.TaskExecutionHost.SetValueParameter(Microsoft.Build.Framework.TaskPropertyInfo parameter, System.Type parameterType, string expandedParameterValue) Line 712\tC#\r\n \tMicrosoft.Build.dll!Microsoft.Build.BackEnd.TaskExecutionHost.InitializeTaskScalarParameter(Microsoft.Build.Framework.TaskPropertyInfo parameter, System.Type parameterType, string parameterValue, Microsoft.Build.Construction.ElementLocation parameterLocation, out bool taskParameterSet) Line 1190\tC#\r\n \tMicrosoft.Build.dll!Microsoft.Build.BackEnd.TaskExecutionHost.SetTaskParameter(string parameterName, string parameterValue, Microsoft.Build.Construction.ElementLocation parameterLocation, bool isRequired, out bool parameterSet) Line 1046\tC#\r\n \tMicrosoft.Build.dll!Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.SetTaskParameters(System.Collections.Generic.IDictionary<string, System.Tuple<string, Microsoft.Build.Construction.ElementLocation>> parameters) Line 336\tC#\r\n \tMicrosoft.Build.dll!Microsoft.Build.BackEnd.TaskBuilder.ExecuteInstantiatedTask(Microsoft.Build.BackEnd.ITaskExecutionHost taskExecutionHost, Microsoft.Build.BackEnd.Logging.TaskLoggingContext taskLoggingContext, Microsoft.Build.BackEnd.TaskHost taskHost, Microsoft.Build.BackEnd.ItemBucket bucket, Microsoft.Build.BackEnd.TaskExecutionMode howToExecuteTask) Line 742\tC#\r\n \tMicrosoft.Build.dll!Microsoft.Build.BackEnd.TaskBuilder.InitializeAndExecuteTask(Microsoft.Build.BackEnd.Logging.TaskLoggingContext taskLoggingContext, Microsoft.Build.BackEnd.ItemBucket bucket, System.Collections.Generic.IDictionary<string, string> taskIdentityParameters, Microsoft.Build.BackEnd.TaskHost taskHost, Microsoft.Build.BackEnd.TaskExecutionMode howToExecuteTask) Line 656\tC#\r\n \tMicrosoft.Build.dll!Microsoft.Build.BackEnd.TaskBuilder.ExecuteBucket(Microsoft.Build.BackEnd.TaskHost taskHost, Microsoft.Build.BackEnd.ItemBucket bucket, Microsoft.Build.BackEnd.TaskExecutionMode howToExecuteTask, System.Collections.Generic.Dictionary<string, string> lookupHash) Line 431\tC#\r\n \tMicrosoft.Build.dll!Microsoft.Build.BackEnd.TaskBuilder.ExecuteTask(Microsoft.Build.BackEnd.TaskExecutionMode mode, Microsoft.Build.BackEnd.Lookup lookup) Line 328\tC#\r\n \tMicrosoft.Build.dll!Microsoft.Build.BackEnd.TaskBuilder.ExecuteTask(Microsoft.Build.BackEnd.Logging.TargetLoggingContext loggingContext, Microsoft.Build.BackEnd.BuildRequestEntry requestEntry, Microsoft.Build.BackEnd.ITargetBuilderCallback targetBuilderCallback, Microsoft.Build.Execution.ProjectTargetInstanceChild taskInstance, Microsoft.Build.BackEnd.TaskExecutionMode mode, Microsoft.Build.BackEnd.Lookup inferLookup, Microsoft.Build.BackEnd.Lookup executeLookup, System.Threading.CancellationToken cancellationToken) Line 177\tC#\r\n \tMicrosoft.Build.dll!Microsoft.Build.BackEnd.TargetEntry.ProcessBucket(Microsoft.Build.BackEnd.ITaskBuilder taskBuilder, Microsoft.Build.BackEnd.Logging.TargetLoggingContext targetLoggingContext, Microsoft.Build.BackEnd.TaskExecutionMode mode, Microsoft.Build.BackEnd.Lookup lookupForInference, Microsoft.Build.BackEnd.Lookup lookupForExecution) Line 834\tC#\r\n \tMicrosoft.Build.dll!Microsoft.Build.BackEnd.TargetEntry.ExecuteTarget(Microsoft.Build.BackEnd.ITaskBuilder taskBuilder, Microsoft.Build.BackEnd.BuildRequestEntry requestEntry, Microsoft.Build.BackEnd.Logging.ProjectLoggingContext projectLoggingContext, System.Threading.CancellationToken cancellationToken) Line 508\tC#\r\n \tMicrosoft.Build.dll!Microsoft.Build.BackEnd.TargetBuilder.ProcessTargetStack(Microsoft.Build.BackEnd.ITaskBuilder taskBuilder) Line 462\tC#\r\n \tMicrosoft.Build.dll!Microsoft.Build.BackEnd.TargetBuilder.BuildTargets(Microsoft.Build.BackEnd.Logging.ProjectLoggingContext loggingContext, Microsoft.Build.BackEnd.BuildRequestEntry entry, Microsoft.Build.BackEnd.IRequestBuilderCallback callback, string[] targetNames, Microsoft.Build.BackEnd.Lookup baseLookup, System.Threading.CancellationToken cancellationToken) Line 165\tC#\r\n \tMicrosoft.Build.dll!Microsoft.Build.BackEnd.RequestBuilder.BuildProject() Line 1120\tC#\r\n \tMicrosoft.Build.dll!Microsoft.Build.BackEnd.RequestBuilder.BuildAndReport() Line 747\tC#\r\n \tMicrosoft.Build.dll!Microsoft.Build.BackEnd.RequestBuilder.RequestThreadProc(bool setThreadParameters) Line 694\tC#\r\n \tMicrosoft.Build.dll!Microsoft.Build.BackEnd.RequestBuilder.StartBuilderThread.AnonymousMethod__45_2() Line 631\tC#\r\n \tmscorlib.dll!System.Threading.Tasks.Task<System.Threading.Tasks.Task>.InnerInvoke() Line 680\tC#\r\n \tmscorlib.dll!System.Threading.Tasks.Task.Execute() Line 2498\tC#\r\n \tmscorlib.dll!System.Threading.Tasks.Task.ExecutionContextCallback(object obj) Line 2861\tC#\r\n \tmscorlib.dll!System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state, bool preserveSyncCtx) Line 954\tC#\r\n \tmscorlib.dll!System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state, bool preserveSyncCtx) Line 902\tC#\r\n \tmscorlib.dll!System.Threading.Tasks.Task.ExecuteWithThreadLocal(ref System.Threading.Tasks.Task currentTaskSlot) Line 2827\tC#\r\n \tmscorlib.dll!System.Threading.Tasks.Task.ExecuteEntry(bool bPreventDoubleExecution) Line 2756\tC#\r\n \tmscorlib.dll!System.Threading.Tasks.TaskScheduler.TryExecuteTask(System.Threading.Tasks.Task task) Line 458\tC#\r\n \tMicrosoft.Build.dll!Microsoft.Build.BackEnd.RequestBuilder.DedicatedThreadsTaskScheduler.InjectThread.AnonymousMethod__6_0() Line 1378\tC#\r\n \tmscorlib.dll!System.Threading.ThreadHelper.ThreadStart_Context(object state) Line 74\tC#\r\n \tmscorlib.dll!System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state, bool preserveSyncCtx) Line 954\tC#\r\n \tmscorlib.dll!System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state, bool preserveSyncCtx) Line 902\tC#\r\n \tmscorlib.dll!System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state) Line 891\tC#\r\n \tmscorlib.dll!System.Threading.ThreadHelper.ThreadStart() Line 111\tC#\r\n```",
        "createdAt": "2018-08-03T22:03:43Z",
        "updatedAt": "2018-08-03T22:03:43Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Why are there so many events (I assume there are more than 199999 events based on your previous reply)? There are ~1000 projects, but each project often contains just one file and involves only compile and link (and most of them haven't reached the point of compilation yet when OOM happens).",
        "createdAt": "2018-08-03T22:13:31Z",
        "updatedAt": "2018-08-03T22:13:31Z",
        "author": {
          "login": "xiangfan-ms"
        }
      },
      {
        "body": "The binary log captures _all_ events, so a log of arbitrary fidelity can be replayed out of it. So it's expected to have a bajillion events, but if the writer can't keep up we should just slow down the build, not crash.",
        "createdAt": "2018-08-03T22:23:01Z",
        "updatedAt": "2018-08-03T22:23:01Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I see.\r\nOne concern is that if generating binlog causes observable overhead (like slowing down the build), it may introduce misinterpretation when I analyze binlog to understand my build.\r\n\r\nMaybe we want to output the waiting time (if it is noticeable compared with the total build time) due to throttling for informational purpose?",
        "createdAt": "2018-08-03T22:32:09Z",
        "updatedAt": "2018-08-03T22:32:09Z",
        "author": {
          "login": "xiangfan-ms"
        }
      },
      {
        "body": "First attempt at solution (always throttle the log events) resulted in a deadlock:\r\n\r\n![image](https://user-images.githubusercontent.com/3347530/43729450-ef8de9c0-996d-11e8-87be-4bbcc170f1a4.png)\r\n\r\nBut I'm not sure where the lock is held.",
        "createdAt": "2018-08-06T16:44:42Z",
        "updatedAt": "2018-08-06T16:44:42Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Ah, got it: \r\n![image](https://user-images.githubusercontent.com/3347530/43733819-791ee39e-997b-11e8-852d-147d5a8f8992.png)\r\n\r\n`BuildManager.ProcessPacket` holds `BuildManager._syncLock` and is trying to log that a project has started, but can't because the log-event queue is full. Then, later, the logging queue processor hits a `ProjectFinishedEventArgs` and tries to raise the `OnProjectFinished` event in response, which tries to take `BuildManager._syncLock` again, deadlocking the system.",
        "createdAt": "2018-08-06T18:26:49Z",
        "updatedAt": "2018-08-06T18:26:49Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "This should be mostly mitigated by #6155 \r\n\r\nPlease open a new issue if you're still seeing problems after MSBuild 16.10.",
        "createdAt": "2021-03-04T03:26:30Z",
        "updatedAt": "2021-03-04T03:26:30Z",
        "author": {
          "login": "KirillOsenkov"
        }
      }
    ]
  }
}