{
  "number": 5776,
  "title": "Performance problems with large winforms project -- with repro",
  "body": "**Visual Studio Version**:\r\n16.8.0 Preview 3.2\r\n\r\n**Summary**:\r\nIn a \"large\" winforms project (500+ forms/usercontrols) the project becomes not workable because of performance problems. I added a generated project with a large amount of (empty) forms to show the problem.\r\n\r\nCommands like \"Add new class\" in this project takes on my machine about 19 seconds to complete. \"Deleting\" this class file takes 36 seconds.\r\n\r\nThese timings seem to be linearly dependent on the amount of forms/usercontrols in the project. In my actual large LOB winforms project, which contains about half of the forms/usercontrols, these commands take resp. 9 and 17 seconds.\r\n\r\n[LargeWinforms.zip](https://github.com/dotnet/project-system/files/5323385/LargeWinforms.zip)\r\n\r\nI added a class \"Form.cs\" to the root of this project, this class subtypes System.Windows.Forms.Form and marks it with DesignerCategory(\"code\").\r\n\r\nIf you include this Form.cs in the project, and wait for the background process to complete. Now the performance problems are gone: adding the new class is fast. You can visibly see the difference in the file 'PerformanceProblem1.csproj.user' -- it will have no more <SubType> entries for each Form.\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Open the uploaded solution.\r\n\r\n2. Add new class to the root folder.\r\n\r\n3. Delete this new file from the root folder.\r\n\r\n**Expected Behavior**:\r\nI expect simple commands like \"Add new class\" to take at most 2 seconds. My LOB project is migrated from an \"old-style\" project using NET471 -- in this project it takes less than 2 seconds for adding and deleting (tested with the same Visual Studio version).\r\n\r\n**Actual Behavior**:\r\nAdding a new class takes, depending on the amount of forms, 19 seconds. And deleting it twice as long.\r\n\r\n**User Impact**:\r\nThis winforms project is unusable for my team -- I will not be able to convince any of my team to migrate to .NET5.0.",
  "state": "CLOSED",
  "createdAt": "2020-10-04T14:53:31Z",
  "updatedAt": "2024-02-21T14:16:44Z",
  "closedAt": "2021-01-09T01:16:32Z",
  "author": {
    "login": "msneijders"
  },
  "labels": [
    "bug",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "Forgind"
      }
    ]
  },
  "milestone": {
    "title": "MSBuild 16.9"
  },
  "comments": {
    "nodes": [
      {
        "body": "Thanks for the bug and awesome repro, I'll dig in to find the cause.",
        "createdAt": "2020-10-05T01:37:08Z",
        "updatedAt": "2020-10-05T01:37:08Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "Thanks, you've uncovered a flaw in the algorithm that MSBuild uses to handle Updates in items, which you can see from this evaluation profile here: https://gist.github.com/davkean/02e813d6ba893dbce17dbc8bb17cef7f. Each one of those updates in the user file takes ~10ms.\r\n\r\nAs a workaround (because I'm assuming that you applying `DesignerCategory(\"code\")` to your base class is not viable), apply the following to the project file:\r\n\r\n``` XML\r\n  <ItemGroup>\r\n    <Compile Update=\"**\\*.cs\">\r\n      <SubType>Form</SubType>\r\n    </Compile>\r\n  </ItemGroup>\r\n```\r\n\r\nChange the glob syntax to match whatever convention you have for your Forms. Clearly this is not a long term solution and I raise this issue with our team sync-up tomorrow.",
        "createdAt": "2020-10-05T02:06:14Z",
        "updatedAt": "2020-10-05T02:06:14Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "Your workaround works nicely -- with the subtyped DesignerCategory(\"code\") marked Form and your csproj workaround the project feels just as fast as a small project, and the winforms designer opens.",
        "createdAt": "2020-10-05T07:16:54Z",
        "updatedAt": "2020-10-05T07:16:54Z",
        "author": {
          "login": "msneijders"
        }
      },
      {
        "body": "Added untriaged label to make sure we pick it up in the bug triage meeting.",
        "createdAt": "2020-10-05T23:17:20Z",
        "updatedAt": "2020-10-05T23:17:20Z",
        "author": {
          "login": "Forgind"
        }
      }
    ]
  }
}