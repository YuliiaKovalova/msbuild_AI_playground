{
  "number": 7956,
  "title": "MSBuildFileSystemBase is partialy honoured when used to load imports",
  "body": "<!-- This is a template that helps us provide quicker feedback. Please use any relevant sections and delete anything you don't need. -->\r\n\r\n### Issue Description\r\n<!--\r\n* Please include a clear and concise description of the problem.\r\n-->\r\n\r\nWhen creating a `Project` we can pass a custom file system implementation (`MSBuildFileSystemBase`) through the `EvaluationContext`\r\n\r\nThe file system is used internally, among other things, to check for file existence and load references.\r\n\r\nWhen checking for file existence the custom file system is indeed used:\r\n\r\nhttps://github.com/dotnet/msbuild/blob/a3b647d766676a735211a42aa0726d1d940ed13d/src/Build/Evaluation/Evaluator.cs#L2074\r\n\r\nHowever, when loading the nested referenced project:\r\n\r\nhttps://github.com/dotnet/msbuild/blob/a3b647d766676a735211a42aa0726d1d940ed13d/src/Build/Evaluation/Evaluator.cs#L2191-L2198\r\n\r\nThere's no use of the file system to load the project which will cause an exception as it will use the default file system.\r\n\r\nNote that we use the custom filesystem to check if the file exists **but use a different file system** to load it!\r\n\r\n### Expected Behavior\r\n<!--\r\n* The expected output or behavior.\r\n-->\r\n`Project` should use the `MSBuildFileSystemBase` provided to it in the `EvaluationContext` to access the file system.\r\n\r\n### Actual Behavior\r\n<!--\r\n* The actual output or behavior.\r\n-->\r\n`Project` use the `MSBuildFileSystemBase` provided to it in the `EvaluationContext` to check if files exists but it will load the files using the default file systme.\r\n\r\n### Analysis\r\n<!--\r\n* If you have an idea where the problem might lie, let us know that here.\r\n* Please include any pointers to code, relevant changes, or related issues you know of.\r\n-->\r\nIt's clear that `ProjectRootElement` or any project element does not resolve imports so it does not care about the FS.  \r\n\r\nHowever, the evaluator should not load the project with a path, instead it should load using a provided `ProjectRootElement` directly.  (I.E create the project from `ProjectRootElement` and not from the path)  \r\n\r\n> An alternative is to  accept an handler to load it if it's not in the `projectRootElementCache`.\r\n\r\nIt is should be straight forward:\r\n\r\n```cs\r\n               // fs: MSBuildFileSystemBase\r\n               var projectCollection = new ProjectCollection();\r\n                \r\n                using var reader = new XmlTextReader(fs.GetFileStream(pathToFile, FileMode.Open, FileAccess.Read, FileShare.None));\r\n                var projectRootElement = ProjectRootElement.Create(reader, projectCollection);\r\n\r\n                 // We must re-set the location so internal imports will follow the right path.\r\n                //  The default in this cause is the main process directory (`PWD`)\r\n                 projectRootElement.FullPath = pathToFile;\r\n\r\n                return Project.FromProjectRootElement(projectRootElement, new ProjectOptions\r\n                {\r\n                    LoadSettings = ProjectLoadSettings.Default,\r\n                    ProjectCollection = projectCollection,\r\n                    EvaluationContext = EvaluationContext.Create(EvaluationContext.SharingPolicy.Shared, fs),\r\n                });\r\n``` \r\n\r\n### Versions & Configurations\r\n<!--\r\n* In a Visual Studio developer command prompt, run `msbuild -version` and paste the output here.\r\n* If applicable, include the version of the tool that invokes MSBuild (Visual Studio, dotnet CLI, etc):\r\n\r\n* Post any other relevant configuration settings here.\r\n*   OS, architecture, etc.\r\n-->\r\nChecked with 17.2 (net6). Code implies its the same form 16.9 (net5.0) and for `main` branch.\r\n\r\n",
  "state": "OPEN",
  "createdAt": "2022-09-10T21:08:44Z",
  "updatedAt": "2024-01-31T08:16:19Z",
  "closedAt": null,
  "author": {
    "login": "shlomiassaf"
  },
  "labels": [
    "bug",
    "Area: Performance",
    "Area: Evaluation",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Backlog"
  },
  "comments": {
    "nodes": [
      {
        "body": "As for use cases, we would like to implement a virtual file system that will load projects from a git commit so we can analyse the diff between 2 commits or between the working directory and any commit.\r\n\r\nThis is implemented but the missing bit is the inability to control loading of nested project within a `csproj`.\r\n\r\nFor example, we get to a point where the project wants to load `Directory.Build.props` from the `csproj` library.   \r\nIn the working directory it's not there but in the **commit it is**.\r\n\r\nThe commit based file system will report `Directory.Build.props` is present but loading it will fail.\r\n\r\n",
        "createdAt": "2022-09-10T21:12:27Z",
        "updatedAt": "2022-09-10T21:15:20Z",
        "author": {
          "login": "shlomiassaf"
        }
      },
      {
        "body": "This seems like a reasonable request. We would need to investigate performance implications here.",
        "createdAt": "2022-09-15T17:34:16Z",
        "updatedAt": "2022-09-15T17:34:16Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "@BenVillalobos Maybe one would need to opt-in for that, first phase, via parameter or something\r\nSo it will not get noticed or have an impact",
        "createdAt": "2022-09-15T18:02:26Z",
        "updatedAt": "2022-09-15T18:02:26Z",
        "author": {
          "login": "shlomiassaf"
        }
      }
    ]
  }
}