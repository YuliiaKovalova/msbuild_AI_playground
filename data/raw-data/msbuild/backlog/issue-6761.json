{
  "number": 6761,
  "title": "Aggressively cache data on system/immutable files",
  "body": "### Issue Description\r\n\r\nFiles in directories that are considered \"system\" are treated the same way as files in regular project directories when it comes to metadata checks such as existence and time of last modification. We should take advantage of the fact that these files are not to be modified and cache their metadata.\r\n\r\n### Sub-issues\r\n- [x] [Investigate the impact.](https://github.com/dotnet/msbuild/issues/6822)\r\n\r\n\r\n### Steps to Reproduce\r\n\r\nOpen a multi-project solution in VS and build it. Witness many files from the NuGet cache and the SDK directories checked repeatedly.\r\n\r\n### Analysis\r\n\r\nThe files may be mutated on system-wide events like VS upgrade but MSBuild processes are terminated so there should be no issue keeping the data cached in memory.\r\n\r\n### Versions & Configurations\r\n\r\n17.0.0-preview-21377-02+38eec6f7a\r\n\r\n### Regression?\r\n\r\nNo.",
  "state": "CLOSED",
  "createdAt": "2021-08-16T12:41:48Z",
  "updatedAt": "2024-02-21T14:11:58Z",
  "closedAt": "2021-11-25T13:25:03Z",
  "author": {
    "login": "ladipro"
  },
  "labels": [
    "Area: Performance",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "rokonec"
      }
    ]
  },
  "milestone": {
    "title": "VS 17.1"
  },
  "comments": {
    "nodes": [
      {
        "body": "@AR-May would you be interested in taking this? Maybe create a separate sub-issue to track the investigation (size <= 3). We'd like to know what percentage of [GetLastWriteFileUtcTime](https://github.com/dotnet/msbuild/blob/e923c2b80f00ec373b1f35108d4aaa45b280aa8c/src/Shared/NativeMethodsShared.cs#L1080) calls would be eliminated from an incremental build if we cached the result for SDK files and for files from the NuGet cache:\r\n1. From first build (cache is empty).\r\n2. From second build (cache in build nodes is populated from first build).\r\n\r\nLet's put aside the problem of reliably detecting if a given file path falls into this bucket, i.e. feel free to hard-code it for now. Use larger solutions such as MSBuild and OrchardCore.",
        "createdAt": "2021-09-06T21:30:00Z",
        "updatedAt": "2021-09-06T21:30:00Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "For the Visual Studio fast up-to-date check, one of the biggest wins came from excluding the contents of reference assembly packs.\r\n\r\nOn my machine for example, `C:\\Program Files\\dotnet\\packs\\Microsoft.NETCore.App.Ref\\5.0.0\\ref\\net5.0` contains 152 DLL files. `Microsoft.AspNetCore.App.Ref\\5.0.0` adds a further 131.\r\n\r\nWe use the following class to classify files for this and other purposes. The implementation may be a useful reference.\r\n\r\nhttps://github.com/dotnet/project-system/blob/6dcc31fa39ad6c922bfd73af553e37e7cdfd8b80/src/Microsoft.VisualStudio.ProjectSystem.Managed/ProjectSystem/ProjectFileClassifier.cs",
        "createdAt": "2021-09-06T22:09:01Z",
        "updatedAt": "2021-09-06T22:09:01Z",
        "author": {
          "login": "drewnoakes"
        }
      },
      {
        "body": "@ladipro Sure, I will take a look.",
        "createdAt": "2021-09-07T09:06:30Z",
        "updatedAt": "2021-09-07T09:06:30Z",
        "author": {
          "login": "AR-May"
        }
      }
    ]
  }
}