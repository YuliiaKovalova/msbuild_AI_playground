{
  "number": 4581,
  "title": "GenerateResource has incomplete handling for ResXFileRef",
  "body": "Copied from https://github.com/dotnet/corefx/issues/39980, filed by @Symbai\r\n\r\nAccessing a resource file throws a `System.MissingMethodException: Constructor on type 'System.Byte[]' not found.`\r\n\r\nPlease see linked issue for repro.\r\n\r\nResX contains\r\n```xml\r\n  <data name=\"TestFile\" type=\"System.Resources.ResXFileRef, System.Windows.Forms\">\r\n    <value>..\\Resources\\TestFile;System.Byte[], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>\r\n  </data>\r\n```\r\n\r\nGenerateResource is treating this as an Activator resource and adding it via AddActivatorResource. \r\nhttps://github.com/microsoft/msbuild/blob/d31fdbf016616835b237d2846f3f1535560bb2d5/src/Tasks/ResourceHandling/FileStreamResource.cs#L44\r\n\r\nHere's the relevant desktop code: https://referencesource.microsoft.com/#System.Windows.Forms/winforms/Managed/System/Resources/ResXFileRef.cs,313\r\n```c#\r\nif(toCreate.Equals(typeof(byte[]))) {\r\n    created = temp;\r\n} else {\r\n    MemoryStream memStream = new MemoryStream(temp);\r\n    if(toCreate.Equals(typeof(MemoryStream))) {\r\n        return memStream;\r\n    } else if(toCreate.Equals(typeof(System.Drawing.Bitmap)) && fileName.EndsWith(\".ico\")) {\r\n        // we special case the .ico bitmaps because GDI+ destroy the alpha channel component and\r\n        // we don't want that to happen\r\n        Icon ico = new Icon(memStream);\r\n        created = ico.ToBitmap();\r\n    } else {\r\n        created = Activator.CreateInstance(toCreate, BindingFlags.Instance | BindingFlags.Public | BindingFlags.CreateInstance, null, new Object[] {memStream}, null);\r\n    }\r\n}\r\n```\r\nIt looks like we missed a special case for `byte[]`.  There is also a special case here for `MemoryStream` that is likely also relevant.",
  "state": "CLOSED",
  "createdAt": "2019-08-05T18:26:32Z",
  "updatedAt": "2024-02-21T17:07:40Z",
  "closedAt": "2019-08-20T16:35:07Z",
  "author": {
    "login": "ericstj"
  },
  "labels": [
    ".NET Core",
    "Area: Task: GenerateResource",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "rainersigwald"
      }
    ]
  },
  "milestone": {
    "title": "MSBuild 16.3"
  },
  "comments": {
    "nodes": [
      {
        "body": "/cc @rainersigwald @livarcocc ",
        "createdAt": "2019-08-05T18:27:04Z",
        "updatedAt": "2019-08-05T18:27:04Z",
        "author": {
          "login": "ericstj"
        }
      },
      {
        "body": "Investigate `MemoryStream`/`UnmanagedMemoryStream` magic (definitely some in StronglyTypedResourceBuilder).",
        "createdAt": "2019-08-05T23:08:56Z",
        "updatedAt": "2019-08-05T23:08:56Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@ericstj do you know if things will work if I instantiate a `MemoryStream` in .NET Core and pass that as a live object to `AddResource`, and then try to access it at runtime in .NET Framework? Or will the type names/assemblies mismatch and cause problems?\r\n\r\n(Likewise the other possible combinations of building on `{netcoreapp,net472}` and targeting `{netcoreapp,netstandard,netXX}`)\r\n\r\nmicrosoft/msbuild#4607 has a fix for `byte[]`, and it'd be easy enough to wrap it with a `MemoryStream` but I don't understand the implications.",
        "createdAt": "2019-08-12T18:56:42Z",
        "updatedAt": "2019-08-12T18:56:42Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "It should work if you call [one](https://docs.microsoft.com/en-us/dotnet/api/system.resources.resourcewriter.addresource?view=netframework-4.8#System_Resources_ResourceWriter_AddResource_System_String_System_IO_Stream_) the stream [overloads](https://docs.microsoft.com/en-us/dotnet/api/system.resources.resourcewriter.addresource?view=netframework-4.8#System_Resources_ResourceWriter_AddResource_System_String_System_IO_Stream_System_Boolean_).  For these type name isn't stored, but its treated as a primitive type and will provide an UMS at runtime.",
        "createdAt": "2019-08-13T13:43:25Z",
        "updatedAt": "2019-08-13T13:43:25Z",
        "author": {
          "login": "ericstj"
        }
      }
    ]
  }
}