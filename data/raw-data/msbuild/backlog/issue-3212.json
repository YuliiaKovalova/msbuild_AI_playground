{
  "number": 3212,
  "title": "Need a performace and unified way to compare versions",
  "body": "In msbuild condition. msbuild build will try to [parse it as dec or hex ]( https://github.com/Microsoft/msbuild/blob/e8b480c373eadd9daa975c6e96e4dbbabcd9a4fe/src/Build/Evaluation/Conditionals/NumericComparisonExpressionNode.cs#L44)first. So _2.11_ will be smaller than _2.2_.\r\n\r\n```xml\r\n<Project ToolsVersion=\"15.0\" DefaultTargets=\"Try\">\r\n  <Target Name=\"Try\">\r\n   <Error Condition=\" '2.11' &lt; 2.2 \"\r\n           Text='unexpected' />\r\n  </Target>\r\n</Project>\r\n```\r\n\r\nAt the same time. If appending 0 at the end as in _2.2.0_, it will cause parse as number fail and consider it as Version. However, Version class's comparison does not consider _2.1_ and _2.1.0_ to be equal.[ In fact ](\r\nhttps://msdn.microsoft.com/en-us/library/s3bf0xb2(v=vs.110).aspx)_2.1 < 2.1.0_. This will also occur in Property Function. \r\n\r\n```xml\r\n<Project ToolsVersion=\"15.0\" DefaultTargets=\"Try\">\r\n  <Target Name=\"Try\">\r\n   <Error Condition=\" '2.1' &lt; 2.1.0 \"\r\n           Text='unexpected' />\r\n  </Target>\r\n</Project>\r\n```\r\n\r\nIt is different behavior of [NuGet version](https://docs.microsoft.com/en-us/nuget/reference/package-versioning).\r\n\r\n\r\n\r\nAlso there is performance concern.\r\n",
  "state": "CLOSED",
  "createdAt": "2018-04-19T22:09:48Z",
  "updatedAt": "2024-02-21T17:13:31Z",
  "closedAt": "2019-11-14T21:07:26Z",
  "author": {
    "login": "wli3"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "nguerrera"
      }
    ]
  },
  "milestone": {
    "title": "MSBuild 16.5 Preview 1 (Sprint 161)"
  },
  "comments": {
    "nodes": [
      {
        "body": "cc @dsplaisted @nguerrera @rainersigwald I hope we can discuss it on next Monday's sync meeting",
        "createdAt": "2018-04-19T22:10:48Z",
        "updatedAt": "2018-04-19T22:10:48Z",
        "author": {
          "login": "wli3"
        }
      },
      {
        "body": "What's the performance concern? Something you've measured, or just theoretical?",
        "createdAt": "2018-04-19T22:13:17Z",
        "updatedAt": "2018-04-19T22:13:17Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@nguerrera do you have concrete example?",
        "createdAt": "2018-04-19T22:15:15Z",
        "updatedAt": "2018-04-19T22:15:15Z",
        "author": {
          "login": "wli3"
        }
      },
      {
        "body": "Before we can say what the performance issue is (if any), I think we have to say what the code we would write would be.\r\n\r\n1. Is there an evaluation-friendly way to compare versions without falling prey to 2.1 < 2.1.0 (System.Version annoyance) or 2.11 < 2.2 (Version interpreted as float).\r\n2. If it exists, is (1) reasonable to maintain?\r\n3. If it exists, is (1) reasonably fast compared to what we have now.",
        "createdAt": "2018-04-19T22:17:47Z",
        "updatedAt": "2018-04-19T22:22:24Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "@wli3 This is on the agenda for Monday's meeting",
        "createdAt": "2018-04-19T22:19:59Z",
        "updatedAt": "2018-04-19T22:19:59Z",
        "author": {
          "login": "dsplaisted"
        }
      },
      {
        "body": "(edit description according to above)",
        "createdAt": "2018-04-19T22:23:16Z",
        "updatedAt": "2018-04-19T22:23:16Z",
        "author": {
          "login": "wli3"
        }
      },
      {
        "body": "The answer @wli3 figured out to 1 is:\r\n\r\nhttps://github.com/dotnet/sdk/issues/2158#issuecomment-382610785\r\n\r\n```\r\n$([System.Version]::Parse(\"2.11\").CompareTo($([System.Version]::Parse(\"2.2\")))) < 0\r\n```\r\n\r\nThis seems pretty reasonable to me, and I have no reason to suspect it'd be a significant performance bottleneck--that's why I was asking \"measured or theoretical?\".",
        "createdAt": "2018-04-19T22:24:02Z",
        "updatedAt": "2018-04-19T22:24:02Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "If the answers to my questions: are:\r\n\r\n1. yes, use this...\r\n2. yes\r\n3. yes\r\n\r\nThen, great we'll change our code to that. If there's a no in there, then we may need an msbuild feature.",
        "createdAt": "2018-04-19T22:24:06Z",
        "updatedAt": "2018-04-19T22:24:06Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "Try \r\n```\r\n$([System.Version]::Parse(\"2.1\").CompareTo($([System.Version]::Parse(\"2.1.0\")))) < 0",
        "createdAt": "2018-04-19T22:25:02Z",
        "updatedAt": "2018-04-19T22:25:02Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "I think we first have to normalize both sides to four parts.\r\n",
        "createdAt": "2018-04-19T22:25:26Z",
        "updatedAt": "2018-04-19T22:26:55Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "Somewhat separate, but we would also like there to be a way to compare semantic/nuget versions. We set $(NETCoreSdkVersion) currently based on that and we would like customers to be able to reason about it with minimum versions. Currently, Roslyn has code that is enforcing it as an exact version, and I'd like to get them to change it to a min version, but it occurs to me that I don't know how to write that.",
        "createdAt": "2018-04-19T22:30:59Z",
        "updatedAt": "2018-04-19T22:30:59Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "Can we get NuGet's `SemanticVersion` put into `System`? I don't want to add another dependency or reimplement semver in MSBuild :(",
        "createdAt": "2018-04-19T22:37:50Z",
        "updatedAt": "2018-04-19T22:37:50Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Ah, already proposed: dotnet/corefx#13526.",
        "createdAt": "2018-04-19T22:38:24Z",
        "updatedAt": "2018-04-19T22:38:24Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "If we had System.SemanticVersion, would we want to hardcode it in, as general enough? Or provide a way in which different package managers could plugin their own version comparers? I think there's little chance of having other package managers (using something else other than semver) with tight msbuild integration right? :)\r\n\r\n",
        "createdAt": "2018-04-19T22:57:19Z",
        "updatedAt": "2018-04-19T22:58:12Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "I'd say we expose the \".NET Framework way\". That's what we've done historically with `System.Version` but it doesn't behave according to modern expectations (witness `2.1` vs `2.1.0`). If we get `System.SemanticVersion`, that would just be a continuation. We'd probably have to add some syntax to invoke it directly since we can't hijack the existing direct-comparison syntax, since 4-part versions aren't allowed in semver.",
        "createdAt": "2018-04-20T16:35:27Z",
        "updatedAt": "2018-04-20T16:35:27Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Pragmatically, I'd want a single type / msbuild expression that supports 4 parts as an extension to semver. But I am not inclined to get into that debate. :(",
        "createdAt": "2018-04-20T17:40:51Z",
        "updatedAt": "2018-04-20T17:40:51Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "For 16.0, I propose\r\n\r\n```\r\n$([MSBuild]::CompareVersions($(left), $(right)))\r\n```\r\n\r\nThat:\r\n\r\n* `Version.Parse()`s each side\r\n* Pads the resulting object with `.0` to reach 4 parts\r\n* Returns `System.Version.CompareTo()` on the results.\r\n\r\nThink this would be totally useless without support for prerelease semvers? Speak up, please!",
        "createdAt": "2018-08-17T17:49:26Z",
        "updatedAt": "2018-08-17T17:49:26Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I think this would be helpful without the prerelease semvers, but adding prerelease semvers is even better. Otherwise, we have to split, and if it's a property that might be, we always have to copy/test for it. Think .NET Core SDK version, which has prereleases and not.",
        "createdAt": "2018-08-17T17:52:51Z",
        "updatedAt": "2018-08-17T17:53:34Z",
        "author": {
          "login": "clairernovotny"
        }
      },
      {
        "body": "I think it would be helpful if `CompareVersions` would first drop the prerelease specifiers before parsing versions.  That way all prereleases of a given release are treated as equivalent in version to the RTM, but that may actually be a good thing.  It means you can't write logic testing if you are on a given prerelease or later, but it also means that you can test that the version is greater than or equal to the RTM version, and still have that logic work when that version is in prerelease.",
        "createdAt": "2018-08-17T17:57:53Z",
        "updatedAt": "2018-08-17T17:57:53Z",
        "author": {
          "login": "dsplaisted"
        }
      },
      {
        "body": "How about `CompareVersions(string left, string right, bool stripAfterHypen = false)`?\r\n\r\nBut maybe it's sufficient to always do that, and doc the behavior.",
        "createdAt": "2018-08-17T17:58:07Z",
        "updatedAt": "2018-08-17T17:58:59Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> But maybe it's sufficient to always do that, and doc the behavior.\r\n\r\nI think I'd prefer that or something that will read better than a literal true in code review. CompareVersionsIgnoringPrerelease or something.",
        "createdAt": "2018-08-17T18:31:01Z",
        "updatedAt": "2018-08-17T18:31:01Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "Do we also need to worry about versions with '+' and no '-', such as `15.8.166+gd4e8d81a88`\r\n\r\nCould we get away with stripping after first non-digit-or-dot?\r\n\r\nAlso, can you allow leading v so that we can compare directly against TargetFrameworkVersion without our ugly _TargetFrameworkVersionWithoutV?",
        "createdAt": "2018-08-17T18:41:26Z",
        "updatedAt": "2018-08-17T18:41:26Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "> Also, can you allow leading v so that we can compare directly against TargetFrameworkVersion without our ugly _TargetFrameworkVersionWithoutV?\r\n\r\n\ud83d\udc4d",
        "createdAt": "2018-08-17T18:48:50Z",
        "updatedAt": "2018-08-17T18:48:50Z",
        "author": {
          "login": "dsplaisted"
        }
      },
      {
        "body": "Putting a note here that we will support `$(_TargetFrameworkVersionWithoutV)` outside the SDK. People use it already. But when we do a feature that compare against `$(TargetFrameworkVersion)` directly, we should encourage folks to do that. ",
        "createdAt": "2019-06-07T20:50:09Z",
        "updatedAt": "2022-08-26T17:22:33Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "(Putting that note here because I just approved a PR that uses it and points here.)",
        "createdAt": "2019-06-07T20:50:40Z",
        "updatedAt": "2019-06-07T20:50:40Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "@nguerrera ~was frustrated by this again~ volunteered to take a look at this.",
        "createdAt": "2019-10-01T14:52:35Z",
        "updatedAt": "2019-10-01T14:52:35Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": ">[All components of the version must be integers greater than or equal to 0. Metadata restricts the major, minor, build, and revision components for an assembly to a maximum value of UInt16.MaxValue - 1. If a component exceeds this value, a compilation error occurs.](https://docs.microsoft.com/en-us/dotnet/api/system.reflection.assemblyversionattribute?redirectedfrom=MSDN&view=netcore-3.1#remarks)\r\n\r\nThis implementation does not have such restrictions and can be used to compare, e.g. `AssemblyInformationalVersion` semvers.",
        "createdAt": "2020-04-24T00:28:21Z",
        "updatedAt": "2020-04-24T00:29:02Z",
        "author": {
          "login": "EdwardBlair"
        }
      }
    ]
  }
}