{
  "number": 674,
  "title": "Assembly search path in UsingTask",
  "body": "Consider the following case:\n\n``` XML\n<UsingTask TaskName=\"Foo\" AssemblyFile=\"$(foo)\\task.dll\" />\n```\n\n`task.dll` depends on `reference.dll`.\n\nCurrently all of the dependencies of `task.dll` will need to be in the same folder as task.dll (standard .NET loader). This generally works well, but may not always ideal for deployment of multiple components. This was encountered internally when the `reference.dll` was removed from the GAC.\n\nI propose that we add an additional attribute to specify search paths for assemblies. For example:\n\n``` XML\n<UsingTask TaskName=\"Foo\" AssemblyFile=\"$(foo)\\task.dll\" AssemblySearchPaths=\"$(foo2)\"/>\n```\n",
  "state": "CLOSED",
  "createdAt": "2016-06-03T05:58:33Z",
  "updatedAt": "2024-02-21T17:27:54Z",
  "closedAt": "2016-06-13T22:22:09Z",
  "author": {
    "login": "AndyGerlicher"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Closing this. This is a breaking change in the schema and shouldn't be necessary. In many cases using this pattern would leave a task dll in a non-working state and requires additional knowledge to use. This is akin to deploying an exe and requiring path(s) to dependencies to be passed in that you might not know where they are. In some cases this would be good (perhaps NuGet with target + dll), but in many cases not. If anyone feels strongly against this feel free to discuss.\n",
        "createdAt": "2016-06-13T22:22:09Z",
        "updatedAt": "2016-06-13T22:22:09Z",
        "author": {
          "login": "AndyGerlicher"
        }
      },
      {
        "body": "I wish to control the search paths of the UsingTask as i am building my custom MSBuild task which depends on other NuGet packages, my task is packed inside its own NuGet package, so all other dependencies are out of the folder with my assembly.\r\nCurrently i did a trick with copying all referenced assemblies of the project which is using my task to the folder with my assembly and in the .targets file i call UsingTask from that folder.\r\nBut copying all the files is kinda heavy operation...\r\n`<PropertyGroup> \r\n <Libs>$([MSBuild]::NormalizeDirectory($([System.IO.Path]::GetDirectoryName($([System.IO.Path]::GetDirectoryName($([MSBuild]::NormalizeDirectory($(MSBuildThisFileDirectory)))))))\\lib\\$(TargetFramework)))</Libs>\r\n</PropertyGroup>\r\n<Copy SourceFiles=\"@(ReferencePathWithRefAssemblies)\" DestinationFolder=\"$(Libs)\" />`\r\nMight be there is another workaround with this?",
        "createdAt": "2020-06-07T13:10:33Z",
        "updatedAt": "2020-06-08T07:41:40Z",
        "author": {
          "login": "Snoopy-hub"
        }
      },
      {
        "body": "@Snoopy-hub no, copying assemblies to the task location is the best current solution. #5037 would make it possible in a future .NET (Core) release.",
        "createdAt": "2020-06-08T20:25:03Z",
        "updatedAt": "2020-06-08T20:25:03Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}