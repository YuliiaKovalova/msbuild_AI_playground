{
  "number": 858,
  "title": "Nail down issues related to assembly loading",
  "body": "This is related to issue #658. The fix for that issue is minimal, as we do a very simple examination of the files next to task assemblies when looking for dependencies.\n\nThere are a couple potential issues with this approach that we may want to address.\n1. Assembly identity issues.\n   Say we have the following four files on disk:\n   - Alpha\\AlphaTasks.dll\n   - Alpha\\Utility.dll\n   - Beta\\BetaTasks.dll\n   - Beta\\Utility.dll\n   \n   Assume the two copies of Utility.dll have the same simple name, but different versions (or public key tokens) and different contents. Since we only consider the simple name when trying to find and load a dependency, both AlphaTasks and BetaTasks will both end up using the same Utility--either the one from Alpha or the one from Beta--even though that is not what they expect to happen. Which one is selected will depend entirely on whether AlphaTasks or BetaTasks is loaded first.\n   \n   We could decide to take the full assembly name into account when satisfying dependencies, and thus ensure both AlphaTasks and BetaTasks get the copies of Utility.dll they expect.\n2. Support for satellite assemblies.\n   Right now if a task assembly or dependency needs to load a satellite assembly (to retrieve a localized resource, for example) we don't know to look for them in culture-specific subdirectories like en-US and de-DE.\n   \n   I'm not actually sure if this is an issue in .Net Core or if localized resources are handled in some other way.\n",
  "state": "CLOSED",
  "createdAt": "2016-08-03T21:55:48Z",
  "updatedAt": "2024-02-21T17:26:47Z",
  "closedAt": "2016-10-11T17:18:33Z",
  "author": {
    "login": "tmeschter"
  },
  "labels": [
    ".NET Core",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Visual Studio 15 RC"
  },
  "comments": {
    "nodes": [
      {
        "body": "Another scenario that would be great to enable is when a Build Task assembly's dependencies come from other NuGet packages.\n\nFor example, in the .NET Core SDK Build Tasks we are dependent on a bunch of NuGet assemblies, and on Microsoft.Extensions.DependencyModel.  With the current support, we need to package all our dependencies into a single .nupkg.  But it would be great if our .nupkg could just list Microsoft.Extensions.DependencyModel in its \"dependencies\", and MSBuild knew to look in that NuGet package location as well.\n",
        "createdAt": "2016-08-08T15:11:55Z",
        "updatedAt": "2016-08-08T15:11:55Z",
        "author": {
          "login": "eerhardt"
        }
      },
      {
        "body": "@eerhardt Are you saying that tasks should have a new dependency fallback search from a deps.json (or deps.runtime.json, whichever is the one with runtime dependencies), like .net core apps do?\n\nIf so, shouldn't this fallback search mechanism get baked into dotnet.exe?\n",
        "createdAt": "2016-08-08T16:23:01Z",
        "updatedAt": "2016-08-08T16:25:23Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "I'm not trying to design it.  I'm just listing the scenario/issue. Packaging all my dependencies into my .nupkg doesn't feel like the correct thing to do.\n\nBut yes, basically you can imagine a .deps.json and runtimeconfig.json approach that works like .net core apps do.\n\nThere could be a feature in dotnet.exe that would allow \"merging\" .deps.json files between MSBuild and a Tasks assembly. But this approach would only work when MSBuild was running on .NET Core. dotnet.exe isn't invoked when MSBuild is running on the desktop .NET Framework.\n",
        "createdAt": "2016-08-08T16:57:10Z",
        "updatedAt": "2016-08-08T16:57:10Z",
        "author": {
          "login": "eerhardt"
        }
      }
    ]
  }
}