{
  "number": 636,
  "title": "dotnet build - the future?",
  "body": "Is dotnet build being replaced by MSBuild Xplat?\nDo we need mono for MSBuild Xplat on OSX/Linux if targeting core?\n",
  "state": "CLOSED",
  "createdAt": "2016-05-19T17:34:52Z",
  "updatedAt": "2024-02-21T17:28:10Z",
  "closedAt": "2016-11-21T07:48:52Z",
  "author": {
    "login": "mikes-gh"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Yes but that's in the xplat branch.  The msbuild in visual studio is hosted internally on tfs with a sort of manual copy process to master here and cannot be easily modified.  Does this mean aspnetcore RTM. will use msbuild xplat.  So visual studio will have 2 different versions of msbuild? \n",
        "createdAt": "2016-05-19T22:36:15Z",
        "updatedAt": "2016-05-19T22:36:15Z",
        "author": {
          "login": "mikes-gh"
        }
      },
      {
        "body": "Not a microsoftie but my impression is that the cli tooling will remain largely the same on the surface, internally though dotnet build will probably call msbuild. I'm pretty sure that msbuild will run on .net core and also be included in the .net core sdk, so it wont really be noticeable. They are also making a bunch of improvements to msbuild and the project system itself, to not list all the files for example. \n",
        "createdAt": "2016-05-20T19:10:39Z",
        "updatedAt": "2016-05-20T19:10:39Z",
        "author": {
          "login": "aL3891"
        }
      },
      {
        "body": "There will likely be more than one version of MSBuild for a while. The \"Desktop MSBuild\" or Full Framework MSBuild isn't going to run cross-platform and on .NET Core (there's also some information on our [Roadmap](https://github.com/microsoft/msbuild/wiki/Roadmap)). We have too many dependencies and legacy components (GAC, registry, ResolveAssemblyReference, TaskHost, etc.) that don't work well in .NET Core. We could eventually light up features at run-time, but it's not a priority right now. A bigger priority would be to build both of those (and the Mono configuration) out of a single branch which as pointed out isn't the case today.\n\nAs for Visual Studio, the MSBuild bits used in the internal builds of Visual Studio \"15\" right now are built from GitHub sources (currently master) and even include the commit id in the version number. You will be able to sync that exact version, modify, build, and use it in Visual Studio without too much trouble (right now I xcopy my build output).\n",
        "createdAt": "2016-05-21T04:59:42Z",
        "updatedAt": "2016-05-21T04:59:42Z",
        "author": {
          "login": "AndyGerlicher"
        }
      },
      {
        "body": "Appreciate the detailed reply.\n\n> As for Visual Studio, the MSBuild bits used in the internal builds of Visual Studio \"15\" right now are built from GitHub sources (currently master) \n\nI hadn't realised you were building from master now.  Good progress.\nNext step merging the branches \ud83d\udc4d \n",
        "createdAt": "2016-05-21T08:43:00Z",
        "updatedAt": "2016-05-21T08:43:00Z",
        "author": {
          "login": "mikes-gh"
        }
      },
      {
        "body": "I see a future where NuGet is the new GAC. working with msbuild and the coreclr to maintain the standard library. based on system type.  \n\nD \n",
        "createdAt": "2016-05-22T01:04:09Z",
        "updatedAt": "2016-05-22T01:04:09Z",
        "author": {
          "login": "dhusemann"
        }
      }
    ]
  }
}