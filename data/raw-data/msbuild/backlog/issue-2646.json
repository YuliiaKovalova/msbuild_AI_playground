{
  "number": 2646,
  "title": "ProduceReferenceAssembly with embedded resource",
  "body": "Currently CSC task always called if project is compiled for projects that contains Embedded resources.\r\nOutput:\r\n```\r\nTarget \"CoreCompile\" in file \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Professional\\MSBuild\\15.0\\Bin\\Roslyn\\Microsoft.CSharp.Core.targets\":\r\n  Building target \"CoreCompile\" completely.\r\n  Input file \"obj\\Debug\\net20\\ConsoleApp2.Resource1.resources\" is newer than output file \"obj\\Debug\\net20\\ConsoleApp2.exe\".\r\n```\r\nIt happens because GenerateResource task is called unconditionally, so even if API of referenced project has not been updated, CSC will still be called for all projects that contain embedded resources.",
  "state": "CLOSED",
  "createdAt": "2017-10-16T22:19:26Z",
  "updatedAt": "2024-02-21T17:16:14Z",
  "closedAt": "2021-05-25T03:48:19Z",
  "author": {
    "login": "iskiselev"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "For us, we looked into using `$(ProduceReferenceAssembly)` for Xamarin.Forms projects:\r\n- User edits XAML in a NetStandard Xamarin.Forms project: an `EmbeddedResource`\r\n- We *thought* the reference assembly would not change in this case--but it does.\r\n- If the reference assembly didn't change, we could skip parts of the Xamarin.Android build. This would improve our incremental build times for Xamarin.Forms applications.\r\n\r\nAny ideas on how to improve this behavior?",
        "createdAt": "2018-11-15T16:27:04Z",
        "updatedAt": "2018-11-15T16:27:04Z",
        "author": {
          "login": "jonathanpeppers"
        }
      },
      {
        "body": "@jaredpar @jcouv Is it expected that reference assemblies contain resources?",
        "createdAt": "2018-11-15T16:44:15Z",
        "updatedAt": "2018-11-15T16:44:15Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Let me start with @iskiselev's scenario:\r\n\r\nI don't know much about the `GenerateResource` task, but if it produces an updated output, then `CoreCompile` has no choice but to run.\r\nFrom what I can tell from the [documentation](https://docs.microsoft.com/en-us/visualstudio/msbuild/generateresource-task?view=vs-2017), `GenerateResource` has logic to skip work when it should:\r\n\r\n> Because .resx files may contain links to other resource files, it is not sufficient to simply compare .resx and .resources file timestamps to see if the outputs are up-to-date. Instead, the GenerateResource task follows the links in the .resx files and checks the timestamps of the linked files as well. \r\n\r\nThe question is why is `GenerateResource` producing an updated output in your case? Did one of its inputs (or linked inputs) get updated? Or does it have a bug?\r\n\r\n@rainersigwald Do you know who might be more knowledgeable about `GenerateResource`?",
        "createdAt": "2018-11-15T18:15:34Z",
        "updatedAt": "2018-11-15T18:15:34Z",
        "author": {
          "login": "jcouv"
        }
      },
      {
        "body": "It's me :) I agree with that assessment; having a repro might be nice.\r\n\r\nI'd like your input on @jonathanpeppers scenario as well; I would also have assumed that changing the content of an embedded resource wouldn't result in an updated ref assembly.",
        "createdAt": "2018-11-15T18:20:31Z",
        "updatedAt": "2018-11-15T18:20:31Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Regarding @jonathanpeppers's scenario:\r\n\r\nI checked with Neal and our recollection is that when producing both a main assembly and a ref assembly, resources should only get embedded into the main assembly.\r\nThis means that when you update a resource file, we should produce an updated main assembly and an _identical_ ref assembly.\r\n\r\nI will double check that behavior (ie. find a test that covers it).",
        "createdAt": "2018-11-15T18:53:05Z",
        "updatedAt": "2018-11-15T19:08:53Z",
        "author": {
          "login": "jcouv"
        }
      },
      {
        "body": "@jonathanpeppers I'll fork your issue over to the roslyn repo: https://github.com/dotnet/roslyn/issues/31197\r\n@rainersigwald Feel free to follow that issue if you're interested. (didn't tag you)",
        "createdAt": "2018-11-15T19:08:16Z",
        "updatedAt": "2018-11-15T19:08:16Z",
        "author": {
          "login": "jcouv"
        }
      },
      {
        "body": "Closing since there was no repro of the always-generating-new-resources problem.",
        "createdAt": "2021-05-25T03:48:19Z",
        "updatedAt": "2021-05-25T03:48:19Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I think this has been fixed for a while. Sometime in Dev16, I think.",
        "createdAt": "2021-05-25T11:45:27Z",
        "updatedAt": "2021-05-25T11:45:27Z",
        "author": {
          "login": "jonathanpeppers"
        }
      }
    ]
  }
}