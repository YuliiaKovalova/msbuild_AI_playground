{
  "number": 1675,
  "title": "Crash deserializing BuildEventArgs-derived type in logging node",
  "body": "[This was reported by an internal user via email]\r\n\r\nMicrosoft (R) Build Engine version 15.1.523.56541\r\nThis is part of VS 26119.0.d15rel\r\n\r\nGetting a repro only takes 2 minutes if you have the C++ tools and Windows 8.1 SDK installed:\r\n\r\nOpen a \"Developer Command Prompt for VS 2017 RC\"\r\n1) git clone https://github.com/lz4/lz4.git D:\\LZ4\\src\r\n2) cd D:\\LZ4\r\n3) devenv /upgrade .\\src\\visual\\vs2010\\lz4.sln\r\n4) msbuild /p:Configuration=Release;Platform=x64 .\\src\\visual\\VS2010\\lz4.sln /t:Rebuild /m /p:BuildInParallel=true\r\n\r\nThe last command yields a crash in msbuild.exe:\r\n\r\n```\r\nUnhandled Exception: System.ArgumentException: Object of type 'Microsoft.VisualStudio.CodeAnalysis.AnalysisResults.AnalysisMessage' cannot be converted to type 'Microsoft.VisualStudio.CodeAnalysis.AnalysisResults.AnalysisMessage'.\r\n   at System.RuntimeType.TryChangeType(Object value, Binder binder, CultureInfo culture, Boolean needsSpecialCast)\r\n   at System.RuntimeType.CheckValue(Object value, Binder binder, CultureInfo culture, BindingFlags invokeAttr)\r\n   at System.Reflection.RtFieldInfo.UnsafeSetValue(Object obj, Object value, BindingFlags invokeAttr, Binder binder, CultureInfo culture)\r\n   at System.Runtime.Serialization.FormatterServices.SerializationSetValue(MemberInfo fi, Object target, Object value)\r\n   at System.Runtime.Serialization.ObjectManager.CompleteObject(ObjectHolder holder, Boolean bObjectFullyComplete)\r\n   at System.Runtime.Serialization.ObjectManager.DoNewlyRegisteredObjectFixups(ObjectHolder holder)\r\n   at System.Runtime.Serialization.ObjectManager.RegisterObject(Object obj, Int64 objectID, SerializationInfo info, Int64 idOfContainingObj, MemberInfo member, Int32[] arrayIndex)\r\n   at System.Runtime.Serialization.Formatters.Binary.ObjectReader.RegisterObject(Object obj, ParseRecord pr, ParseRecord objectPr, Boolean bIsString)\r\n   at System.Runtime.Serialization.Formatters.Binary.ObjectReader.ParseObjectEnd(ParseRecord pr)\r\n   at System.Runtime.Serialization.Formatters.Binary.ObjectReader.Parse(ParseRecord pr)\r\n   at System.Runtime.Serialization.Formatters.Binary.__BinaryParser.Run()\r\n   at System.Runtime.Serialization.Formatters.Binary.ObjectReader.Deserialize(HeaderHandler handler, __BinaryParser serParser, Boolean fCheck, Boolean isCrossAppDomain, IMethodCallMessage methodCallMessage)\r\n   at System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Deserialize(Stream serializationStream, HeaderHandler handler, Boolean fCheck, Boolean isCrossAppDomain, IMethodCallMessage methodCallMessage)\r\n   at Microsoft.Build.BackEnd.NodePacketTranslator.NodePacketReadTranslator.TranslateDotNet[T](T& value)\r\n   at Microsoft.Build.Shared.LogMessagePacketBase.ReadFromStream(INodePacketTranslator translator)\r\n   at Microsoft.Build.Shared.LogMessagePacketBase.Translate(INodePacketTranslator translator)\r\n   at Microsoft.Build.BackEnd.LogMessagePacket.FactoryForDeserialization(INodePacketTranslator translator)\r\n   at Microsoft.Build.BackEnd.NodePacketFactory.PacketFactoryRecord.DeserializeAndRoutePacket(Int32 nodeId, INodePacketTranslator translator)\r\n   at Microsoft.Build.BackEnd.NodePacketFactory.DeserializeAndRoutePacket(Int32 nodeId, NodePacketType packetType, INodePacketTranslator translator)\r\n   at Microsoft.Build.BackEnd.NodeManager.DeserializeAndRoutePacket(Int32 nodeId, NodePacketType packetType, INodePacketTranslator translator)\r\n   at Microsoft.Build.BackEnd.NodeProviderOutOfProcBase.NodeContext.ReadAndRoutePacket(NodePacketType packetType, Byte[] packetData, Int32 packetLength)\r\n   at Microsoft.Build.BackEnd.NodeProviderOutOfProcBase.NodeContext.BodyReadComplete(IAsyncResult result)\r\n   at System.IO.Pipes.PipeStream.AsyncPSCallback(UInt32 errorCode, UInt32 numBytes, NativeOverlapped* pOverlapped)\r\n   at System.Threading._IOCompletionCallback.PerformIOCompletionCallback(UInt32 errorCode, UInt32 numBytes, NativeOverlapped* pOVERLAP)\r\n```",
  "state": "CLOSED",
  "createdAt": "2017-02-07T16:32:26Z",
  "updatedAt": "2024-02-21T17:22:05Z",
  "closedAt": "2023-07-18T20:42:07Z",
  "author": {
    "login": "rainersigwald"
  },
  "labels": [
    "bug",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Consider for Next Major Version"
  },
  "comments": {
    "nodes": [
      {
        "body": "I can repro this on MSBuild 15.1.545.13942, including under a debugger. Investigating.",
        "createdAt": "2017-02-07T16:32:57Z",
        "updatedAt": "2017-02-07T16:32:57Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Actually, my repro is very slightly different. The exception I get is\r\n\r\n```\r\nSystem.Runtime.Serialization.SerializationException: Unable to find assembly 'Microsoft.VisualStudio.CodeAnalysis, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.\r\n```\r\n\r\nWhich doesn't seem very true--that assembly (well, version `15.0.26205.0` on my machine) is loaded into the process that claims it can't find it.",
        "createdAt": "2017-02-07T20:06:38Z",
        "updatedAt": "2017-02-07T20:06:38Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "My current theory is that the original reporter had an incompatible version of `Microsoft.VisualStudio.CodeAnalysis` in the GAC, while I don't have one. That would explain the cast error and my failure to find the assembly.\r\n\r\nThis is occurring because the `NativeCodeAnalysis` task calls\r\n\r\n```C#\r\nCodeAnalysisWarningEventArgs e = ...;\r\nBuildEngine.LogWarningEvent(e);\r\n```\r\n\r\nwhere \r\n\r\n```c#\r\ninternal class CodeAnalysisWarningEventArgs : \r\n        BuildWarningEventArgs,\r\n        ICodeAnalysisEventArgs\r\n```\r\n\r\nThe worker node attempts to serialize the `BuildWarningEventArgs` across the process boundary to the main logging node, where we fail to deserialize it. That wasn't a problem in dev14 because that assembly was in the GAC so its types were available to any MSBuild.exe that wanted them.\r\n\r\nIdeally, MSBuild would be robust to this situation, but it doesn't look like there's an easy way to handle the deserialization error gracefully. I'm following up with an internal bug on the `NativeCodeAnalysis` task to stop using a derived type and instead just log a `BuildWarningEventArgs`.",
        "createdAt": "2017-02-08T21:15:41Z",
        "updatedAt": "2017-02-08T21:15:41Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "The larger problem of crashing on deserialization of a BuildEventArgs-derived type is still there, so I'm reopening and generalizing this issue.",
        "createdAt": "2017-02-17T16:18:04Z",
        "updatedAt": "2017-02-17T16:18:04Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I reproduced this with VS2022 (prior to the fix #6953) on https://github.com/lz4/lz4/commit/e2009622dd19556d31de498b68d8e555b7261251 with a command like\r\n\r\n```\r\nmsbuild /p:Configuration=Release;Platform=x64 D:\\LZ4\\src\\build\\VS2010\\lz4.sln /t:Rebuild /m /p:BuildInParallel=true -bl\r\n```",
        "createdAt": "2021-10-14T18:48:46Z",
        "updatedAt": "2021-10-14T18:48:46Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Superseded by #8823.",
        "createdAt": "2023-07-18T20:42:07Z",
        "updatedAt": "2023-07-18T20:42:07Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}