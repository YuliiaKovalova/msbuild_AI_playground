{
  "number": 2661,
  "title": "P2Ps should be allowed when ReferenceOutputAssembly=false even given TFM incompatibilities",
  "body": "_From @AArnott on March 3, 2017 18:40_\n\nWith VS2015 projects, I can have a P2P from a portable library to a net46 library by setting metadata on the project reference:\r\n\r\n```xml\r\n<ProjectReference Include=\"..\\SomeNet46Lib\\lib.csproj\">\r\n  <ReferenceOutputAssembly>false</ReferenceOutputAssembly>\r\n</ProjectReference>\r\n```\r\n\r\nBut with the .NET SDK projects, even with this metadata the build fails:\r\n\r\n> C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\d15rel\\MSBuild\\Sdks\\Microsoft.NET.Sdk\\build\\Microsoft.NET.Sdk.Common.targets(73,5): error : Project 'C:\\git\\pinvoke\\src\\CodeGeneration\\CodeGeneration.csproj'\r\ntargets '.NETFramework,Version=v4.6'. It cannot be referenced by a project that targets '.NETPortable,Version=v0.0,Profile=Profile92'. [C:\\git\\pinvoke\\src\\CodeGeneration\\CodeGeneration.csproj]\r\n\r\nThis blocks scenarios where a P2P exists merely for the sake of ensuring build ordering but without the assembly reference. In my particular scenario, the referenced project provides a binary that the build of the portable library picks up for code generation purposes.\n\n_Copied from original issue: dotnet/sdk#939_",
  "state": "OPEN",
  "createdAt": "2017-10-23T21:53:56Z",
  "updatedAt": "2024-02-21T16:35:32Z",
  "closedAt": null,
  "author": {
    "login": "nguerrera"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Backlog"
  },
  "comments": {
    "nodes": [
      {
        "body": "Workaround: Try also adding SkipGetTargetFrameworkProperties=true metadata to the reference.",
        "createdAt": "2017-10-23T21:53:57Z",
        "updatedAt": "2017-10-23T21:53:57Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "_From @AArnott on March 7, 2017 5:58_\n\nThanks @nguerrera. But that doesn't work either. That causes a referencing project A to build the referenced project B per A's TargetFramework value instead of B's TargetFramework.",
        "createdAt": "2017-10-23T21:53:58Z",
        "updatedAt": "2017-10-23T21:53:58Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "Ah, I believe this would only happen if A is multi targeted. Is it?\r\n\r\nTry adding UndefineProperties=\"TargetFramework\" metadata as well.\r\n\r\n",
        "createdAt": "2017-10-23T21:53:58Z",
        "updatedAt": "2017-10-23T21:53:58Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "_From @AArnott on March 7, 2017 18:39_\n\nYes, `A` is multi-targeted.\r\nAnd that additional metadata did the trick. Thanks.\r\n\r\nShould we leave the issue active for making this scenario simpler, and/or work the way it used to?",
        "createdAt": "2017-10-23T21:53:59Z",
        "updatedAt": "2017-10-23T21:53:59Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "> Should we leave the issue active for making this scenario simpler, and/or work the way it used to?\r\n\r\nYes, this should work without the extra metadata.",
        "createdAt": "2017-10-23T21:53:59Z",
        "updatedAt": "2017-10-23T21:53:59Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "_From @AArnott on April 11, 2017 13:31_\n\nThis is badly broken. The workaround causes nuget restore to fail in VS (command line is fine) and also is related to a build failure that only occurs on some non-Windows machines [including Travis CI Ubuntu](https://travis-ci.org/libgit2/libgit2sharp/jobs/220381005#L788).\r\n\r\nI tried replacing this with a \"project dependency\" encoded in the solution file, and that fixed most of the symptoms, until I tried `msbuild.exe my.sln` when I learned that msbuild translates that solution dependency into a project reference during the build (@andygerlicher when did this feature get added?), with `ReferenceOutputAssembly=false` set (just as I wanted to do with my original ProjectReference item) and that of course repeats the original problem and the build fails because a net40 project can't depend on a netstandard1.5 project. \r\n\r\nThis inability to influence build ordering is really causing some pain here. Please fix soon!",
        "createdAt": "2017-10-23T21:53:59Z",
        "updatedAt": "2017-10-23T21:53:59Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "_From @Sumo-MBryant on May 8, 2017 8:1_\n\nHas anyone found a workaround that is close to successful?\r\n\r\nFor a minimal netstandard1.X project reference to a netcoreapp1.X project:\r\n\r\n`SkipGetTargetFrameworkProperties` fails in `GenerateDepsFile` (https://github.com/dotnet/sdk/issues/1020)\r\n\r\nInterestingly enough when I restore and build from MSBuild directly the `project.assets.json` file is missing the project reference and builds successfully. When building from Visual Studio, the `project.assets.json` contains the reference with a broken framework `\"framework\": \"Unsupported,Version=v0.0\"` and fails to build.",
        "createdAt": "2017-10-23T21:54:00Z",
        "updatedAt": "2017-10-23T21:54:00Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "_From @AArnott on May 8, 2017 22:52_\n\nNo. I finally gave up and checked the binary into git so I didn't need a project reference. I tried for *days* but never found a way that got dotnet build, msbuild, and VS to all work correctly at once. \ud83d\ude26 ",
        "createdAt": "2017-10-23T21:54:00Z",
        "updatedAt": "2017-10-23T21:54:00Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "_From @rainersigwald on July 14, 2017 21:46_\n\nThis can be worked around by adding an outside-the-norm order dependency in MSBuild, by way of a custom call to the `MSBuild` task.\r\n\r\n```csproj\r\n<Target Name=\"WorkaroundSdk939\" BeforeTargets=\"ResolveProjectReferences\">\r\n  <MSBuild Project=\"..\\..\\the\\other.csproj\" />\r\n</Target>\r\n```\r\n\r\nNote that depending on your specific needs, you might need to be careful to preserve configuration and other normally-handled-for-you properties, or call a specific target.\r\n\r\n@AArnott \r\n\r\n> msbuild translates that solution dependency into a project reference during the build (@AndyGerlicher when did this feature get added?)\r\n\r\nThis appears to have been added to MSBuild in the dev11 timeframe. @cdmihai went into detail on the process in https://github.com/Microsoft/msbuild/issues/2274#issuecomment-314850707. The current team doesn't know why it's necessary.",
        "createdAt": "2017-10-23T21:54:01Z",
        "updatedAt": "2017-10-23T21:54:01Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "_From @AArnott on July 14, 2017 22:52_\n\n> Note that depending on your specific needs, you might need to be careful to preserve configuration and other normally-handled-for-you properties, or call a specific target.\r\n\r\nYa, that's what kills your proposed workaround in virtually all my scenarios. That would build the default configuration of the project, which could mean building all the target frameworks in debug mode, which is almost never what I would expect or need. Also, it would cause over-build, compiling twice etc. which can at least slow down the build, but also lead to symbols and DLLs not always matching up. It's a non-starter for me.\r\nI've tried being very particular about passing in the right global properties to this call, but I guess there's a reason the ResolveProjectReferences target and its predecessors are so complicated. It's very hard to mimic.",
        "createdAt": "2017-10-23T21:54:01Z",
        "updatedAt": "2017-10-23T21:54:01Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "_From @rainersigwald on August 7, 2017 13:41_\n\n@mhutch came up with an interesting workaround in https://github.com/Microsoft/msbuild/issues/2399#issuecomment-320470235: \r\n\r\n```xml\r\n<!-- workaround for https://github.com/Microsoft/msbuild/issues/2399 -->\r\n<Target Name=\"WorkaroundMSBuildIssue2399\" BeforeTargets=\"GetTargetFrameworkProperties\">\r\n  <PropertyGroup>\r\n    <ReferringTargetFramework>$(TargetFramework)</ReferringTargetFramework>\r\n  </PropertyGroup>\r\n</Target>\r\n```\r\n\r\nIn the referenced project.\r\n\r\nThat essentially disables the target-framework compatibility check for the referenced project, which could be somewhat dangerous (depending on the nature of other references to the project) but avoids this problem.",
        "createdAt": "2017-10-23T21:54:02Z",
        "updatedAt": "2017-10-23T21:54:02Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "_From @rainersigwald on August 23, 2017 18:47_\n\n## Workaround\r\n\r\nSet \r\n```xml\r\n<AddSyntheticProjectReferencesForSolutionDependencies>false</AddSyntheticProjectReferencesForSolutionDependencies>\r\n```\r\n\r\nin the project that has the `ProjectReference` to the incompatible project. This prevents the elevation of solution build dependencies to `ProjectReferences` in `AssignProjectConfiguration`.\r\n\r\n(Was poking around near this target for another reason and saw this.)",
        "createdAt": "2017-10-23T21:54:02Z",
        "updatedAt": "2017-10-23T21:54:02Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "Moving to msbuild because after the double-evaluation fix, this compatibility check happens there in the context of the caller.",
        "createdAt": "2017-10-23T21:54:03Z",
        "updatedAt": "2017-10-23T21:54:03Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "I would think SkipGetTargetFrameworkProperties=true metadata on ProjectReference would work now and that we should set this automatically when ReferenceOutputAssembly=false.",
        "createdAt": "2017-10-24T17:36:58Z",
        "updatedAt": "2017-10-24T17:39:01Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "I just tried SkipGetTargetFrameworkProperties workaround and it works for me. Thanks!  ",
        "createdAt": "2017-11-05T09:24:27Z",
        "updatedAt": "2017-11-05T09:24:27Z",
        "author": {
          "login": "rynowak"
        }
      },
      {
        "body": "Actually, I spoke too soon, it fails during pack:\r\n```\r\nC:\\Program Files\\dotnet\\sdk\\2.1.1-preview-007094\\Sdks\\Microsoft.NET.Sdk\\build\\Microsoft.PackageDependencyResolution.targ\r\nets(167,5): error : Assets file 'C:\\Users\\rynowak\\git\\rynowak\\Apparator\\src\\Apparator.Host\\obj\\project.assets.json' does\r\nn't have a target for '.NETStandard,Version=v2.0'. Ensure that restore has run and that you have included 'netstandard2.\r\n0' in the TargetFrameworks for your project. [C:\\Users\\rynowak\\git\\rynowak\\Apparator\\src\\Apparator.Host\\Apparator.Host.c\r\nsproj]\r\n```",
        "createdAt": "2017-11-05T09:25:55Z",
        "updatedAt": "2017-11-05T09:25:55Z",
        "author": {
          "login": "rynowak"
        }
      },
      {
        "body": "my workaround\r\n\r\n```\r\n<ProjectReference Include=\"..\\ProjectToBuildFirst\\ProjectToBuildFirst.csproj\"\r\n    PrivateAssets=\"All\"\r\n    Condition=\"$(TargetFramework)=='fake'\"/>\r\n```",
        "createdAt": "2017-12-18T00:42:32Z",
        "updatedAt": "2017-12-18T00:42:51Z",
        "author": {
          "login": "SimonCropp"
        }
      },
      {
        "body": "@SimonCropp what does that accomplish? MSBuild would never build your project reference in that case. Is it that at least it works within the IDE that makes this workaround attractive?",
        "createdAt": "2017-12-18T15:50:55Z",
        "updatedAt": "2017-12-18T15:50:55Z",
        "author": {
          "login": "AArnott"
        }
      },
      {
        "body": "FYI something in 15.5 seems to have broken my workaround while not resolving the original bug.\r\n\r\nFortunately setting  `AddSyntheticProjectReferencesForSolutionDependencies`  to True in the dependent project seems to work.",
        "createdAt": "2017-12-23T05:57:38Z",
        "updatedAt": "2017-12-23T05:57:38Z",
        "author": {
          "login": "mhutch"
        }
      },
      {
        "body": "Unfortunately, #2867 broke existing code, so reopening this.",
        "createdAt": "2018-01-31T17:35:06Z",
        "updatedAt": "2018-01-31T17:35:06Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Could it be that the smallest fix is to call [GetTargetFrameworks](https://github.com/Microsoft/msbuild/blob/master/src/Tasks/Microsoft.Common.CurrentVersion.targets#L1580) with the new msbuild task argument to ignore the call if the target does not exist? That way [_GetProjectReferenceTargetFrameworkProperties](https://github.com/Microsoft/msbuild/blob/master/src/Tasks/Microsoft.Common.CurrentVersion.targets#L1529) only picks a TFM for the dependencies that respond back. See https://github.com/Microsoft/msbuild/pull/2935#issuecomment-362024166 ",
        "createdAt": "2018-01-31T18:54:35Z",
        "updatedAt": "2018-01-31T18:54:59Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "@cdmihai we already do that; the problem arises when the project (correctly) responds with a list, but nothing in that list matches the current referencing TF.",
        "createdAt": "2018-01-31T19:42:32Z",
        "updatedAt": "2018-01-31T19:42:32Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Oh, ok. @AndyGerlicher suggested a new metadata on ProjectReference telling the sdk what to do.\r\n\r\n`AutoTargetFrameworkOverride=\"true\"` where the sdks chooses from the returned tfm list, like pick the first one. Half joking, we could add to the p2p contract saying that projects should order the returned list from most preferred to least preferred :)\r\nor\r\n`TargetFrameworkOverride=\"<user knows best tfm>\"`",
        "createdAt": "2018-02-01T01:32:59Z",
        "updatedAt": "2018-02-01T01:32:59Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "Apparently `TargetFrameworkOverride` already exists as `SetTargetFramework` :)",
        "createdAt": "2018-02-01T21:38:10Z",
        "updatedAt": "2018-02-01T21:38:10Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "It does, but the syntax is ugly SetTargetFramework=\"TargetFramework=net45\". Ideally it would just be TargetFramework=\"net45\", but I had a concern about that (potentially) tripping up the CPS project selector.",
        "createdAt": "2018-02-01T21:40:11Z",
        "updatedAt": "2018-02-01T21:40:11Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "I'm running VS 15.5.5 and I cannot reference a 2.0 project in a UWP app.  Any workaround to this?  Thanks.",
        "createdAt": "2018-02-03T20:56:36Z",
        "updatedAt": "2018-02-03T20:56:36Z",
        "author": {
          "login": "Joebeazelman"
        }
      },
      {
        "body": "this is in milestone 15.6. but i can repro in 15.7.66.2115 \r\n\r\n```\r\nMSBuild auto-detection: using msbuild version '15.7.66.2115' from 'C:\\Program Files (x86)\\Microsoft Visual Studio\\Preview\\Community\\MSBuild\\15.0\\bin'.\r\n....\r\n(_GetProjectReferenceTargetFrameworkProperties target) -> \r\n  C:\\Program Files (x86)\\Microsoft Visual Studio\\Preview\\Community\\MSBuild\\15.0\\Bin\\Microsoft.Common.CurrentVersion.targets(1603,5):\r\nerror : Project 'C:\\projects\\costura\\Costura.Fody\\Costura.Fody.csproj' targets 'net46;netstandard2.0'.\r\nIt cannot be referenced by a project that targets '.NETFramework,Version=v4.5.2'. [C:\\projects\\costura\\Costura\\Costura.csproj]\r\n  C:\\Program Files (x86)\\Microsoft Visual Studio\\Preview\\Community\\MSBuild\\15.0\\Bin\\Microsoft.Common.CurrentVersion.targets(1603,5):\r\nerror : Project 'C:\\projects\\costura\\Costura.Tasks\\Costura.Tasks.csproj' targets 'netstandard2.0;net46'.\r\nIt cannot be referenced by a project that targets '.NETFramework,Version=v4.5.2'. [C:\\projects\\costura\\Costura\\Costura.csproj]\r\n  C:\\Program Files (x86)\\Microsoft Visual Studio\\Preview\\Community\\MSBuild\\15.0\\Bin\\Microsoft.Common.CurrentVersion.targets(1603,5):\r\nerror : Project 'C:\\projects\\costura\\Costura.Template\\Costura.Template.csproj' targets 'net46'.\r\nIt cannot be referenced by a project that targets '.NETFramework,Version=v4.5.2'. [C:\\projects\\costura\\Costura\\Costura.csproj]\r\n    0 Warning(s)\r\n    3 Error(s)\r\n```",
        "createdAt": "2018-05-12T05:29:45Z",
        "updatedAt": "2018-05-12T05:30:13Z",
        "author": {
          "login": "SimonCropp"
        }
      },
      {
        "body": "@rainersigwald What's the plan for getting this fixed?\r\n\r\nIf I'm hitting this now, how am I supposed to work around it? I see https://github.com/Microsoft/msbuild/issues/2661#issuecomment-338808156, but how exactly am I supposed to be using that? Does that only work if I'm using solution-level dependencies, or is there a way to use a `ProjectReference` as well?\r\n\r\nI'm asking because I've been able to get it working with a solution-level dependency, but because of other, unrelated problems, I can't use solution-level dependencies right now. Is there a way to use a ProjectReference and still have my solution build with MSBuild?",
        "createdAt": "2018-05-17T20:03:38Z",
        "updatedAt": "2018-05-17T20:03:38Z",
        "author": {
          "login": "bording"
        }
      },
      {
        "body": "@rainersigwald any comments on the above question?",
        "createdAt": "2018-12-16T07:17:46Z",
        "updatedAt": "2018-12-16T07:17:46Z",
        "author": {
          "login": "SimonCropp"
        }
      },
      {
        "body": "Also running into this. I'm trying to build a `netcoreapp3.1` exe and include it in a NuGet package under `/tools`, e.g.:\r\n\r\n```xml\r\n<ItemGroup>\r\n  <None Include=\"..\\Faithlife.AssemblyEmbedder\\bin\\$(Configuration)\\netcoreapp3.1\\**\" Pack=\"true\" PackagePath=\"/tools/netcoreapp3.1/\" />\r\n</ItemGroup>\r\n```\r\n\r\nThis works fine but ideally I'd like to have a reference so that `Faithlife.AssemblyEmbedder` is always built before my NuGet package csproj. I have a dependency in the sln file but `dotnet pack` ignores that.\r\n\r\nCurrently my workaround is to just do a separate `dotnet build` before the `dotnet pack` to ensure the project is built before it's included.",
        "createdAt": "2020-05-27T18:32:45Z",
        "updatedAt": "2020-05-27T18:32:45Z",
        "author": {
          "login": "StephenCleary"
        }
      }
    ]
  }
}