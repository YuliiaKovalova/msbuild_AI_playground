{
  "number": 5171,
  "title": "Allow TFM/TPM checks in a concise, understandable way",
  "body": "As part of the spec for the [.NET 5 TFM work](https://github.com/dotnet/designs/pull/92) we identified an issue with TFM checks in conditions.\r\n\r\n<details>\r\n<summary>\r\nBackground on MSBuild evaluation\r\n</summary>\r\n\r\nIn SDK-style projects there are two kinds of MSBuild files that are automatically included into each project:\r\n\r\n* `*.props`: These files are included at the top of the user's project file and are used to define a set of default properties that the user's project file can use.\r\n\r\n* `*.targets`. These files are included at the bottom of the user's project file, usually meant to define build targets and additional properties/items that need to depend on properties defined by the user.\r\n\r\nFurthermore, MSBuild has a multi-pass evaluation model where properties are evaluated before items.\r\n\r\nWhy is all of this important? Because it controls which properties the user can rely on in their project file.\r\n\r\nOften, a user wants to express a condition like \"include this file if you're compiling for .NET 5 or higher\". Logically one would like to express it like this:\r\n\r\n```xml\r\n<ItemGroup Condition=\"'$(TargetFramework)' >= 'net5.0'`\">\r\n```\r\n\r\nbut this doesn't work because that would be a string comparison, not a version comparison. Instead, the user has to write it like this:\r\n\r\n```xml\r\n<ItemGroup Condition=\"'$(TargetFrameworkIdentifier)' == '.NETCoreApp' AND '$(TargetFrameworkVersion)' >= '3.0'\">\r\n```\r\n\r\nThis works for conditions on item groups because they are evaluated after properties. Since the user's project file defines the `TargetFramework` property, the SDK logic that expands it into the other properties such as `TargetFrameworkIdentifier` and `TargetFrameworkVersion` has to live in `*.targets`, i.e. at the bottom of the project file. That means these automatically expanded properties aren't available for the user when defining other properties. This happens to work for items because items are evaluated after all properties are evaluated.\r\n</details>\r\n\r\nDue to MSBuild evaluation order the user cannot define properties like this:\r\n\r\n```XML\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFrameworks>netstandard2.0;netcoreapp3.1</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n  <PropertyGroup Condition=\"'$(TargetFrameworkIdentifier)' == '.NETStandard'\">\r\n    <SomeProperty>Some .NET Standard specific value<SomeProperty>\r\n  </PropertyGroup>\r\n\r\n  <PropertyGroup Condition=\"'$(TargetFrameworkIdentifier)' == '.NETCoreApp'\">\r\n    <SomeProperty>Some .NET Core specific value<SomeProperty>\r\n  </PropertyGroup>\r\n\r\n</Project>\r\n```\r\n\r\nIn the past, we've seen people working this around by using string processing functions against the `TargetFramework` property, which is less than ideal.\r\n\r\n### Option using attributes\r\n\r\nIdeally, we'd expose functionality such that the user can do version checks:\r\n\r\n```XML\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFrameworks>netstandard2.0;netcoreapp3.1</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n  <PropertyGroup TargetFramework=\"netstandard\">\r\n    <SomeProperty>Some value that applies to all versions of .NET Standard<SomeProperty>\r\n  </PropertyGroup>\r\n\r\n  <PropertyGroup TargetFramework=\">=netcoreapp2.0\">\r\n    <SomeProperty>Some value that applies to .NET Core 2.0 and later<SomeProperty>\r\n  </PropertyGroup>\r\n\r\n  <PropertyGroup TargetFramework=\"==net5.0-ios13.0\">\r\n    <SomeProperty>Some value that only applies to .NET 5 + iOS 13.0<SomeProperty>\r\n  </PropertyGroup>\r\n\r\n  <PropertyGroup TargetPlatform=\"windows\">\r\n    <SomeProperty>Some value that applies to all version of Windows<SomeProperty>\r\n  </PropertyGroup>\r\n\r\n  <PropertyGroup TargetPlatform=\">=ios-12.0\">\r\n    <SomeProperty>Some value that applies to iOS 12.0 and later<SomeProperty>\r\n  </PropertyGroup>\r\n\r\n</Project>\r\n```\r\n\r\nThe idea is:\r\n\r\n* Property groups, properties, and item groups get new attributes `TargetFramework` and `TargetPlatform`.\r\n* The value can be prefixed with an optional conditional operator `==`, `!=`, `<`, `<=`, `>`, and `>=`. If the operator is omitted, `==` is assumed.\r\n* `TargetFramework` supports comparisons with a friendly TFM name. This can include an OS flavor for symmetry. If the `TargetFramework` property includes an OS flavor but the attribute doesn't, the comparison only applies to the TFM without the OS flavor. In other words a condition of `TargetFramework=\">=net5.0\"` will result in `true` if the project targets `net5.0`, `net6.0`, as well as `net6.0-android12.0`.\r\n\r\n### Option via new syntax\r\n\r\nWe could also invent new syntax that allows parsing of constitutes like this:\r\n\r\n```XML\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFrameworks>netstandard2.0;netcoreapp3.1</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n  <PropertyGroup Condition=\"$(TargetFramework::Identifier)=='netstandard'\">\r\n    <SomeProperty>Some value that applies to all versions of .NET Standard<SomeProperty>\r\n  </PropertyGroup>\r\n\r\n  <PropertyGroup Condition=\"$(TargetFramework::Name)>='netcoreapp2.0'\">\r\n    <SomeProperty>Some value that applies to .NET Core 2.0 and later<SomeProperty>\r\n  </PropertyGroup>\r\n\r\n  <PropertyGroup Condition=\"$(TargetFramework::Name)=='net5.0-ios13.0'\">\r\n    <SomeProperty>Some value that only applies to .NET 5 + iOS 13.0<SomeProperty>\r\n  </PropertyGroup>\r\n\r\n  <PropertyGroup Condition=\"$(TargetFramework::Platform)=='windows'\">\r\n    <SomeProperty>Some value that applies to all version of Windows<SomeProperty>\r\n  </PropertyGroup>\r\n\r\n  <PropertyGroup Condition=\"$(TargetFramework::Platform)>='ios-12.0'\">\r\n    <SomeProperty>Some value that applies to iOS 12.0 and later<SomeProperty>\r\n  </PropertyGroup>\r\n\r\n</Project>\r\n```\r\n\r\n### Option via functions\r\n\r\nWe could also just define new intrinsic functions on some type, but this will make using them a mouthful:\r\n\r\n```XML\r\n  <PropertyGroup Condition=\"`'$([MSBuild]::TargetFrameworkIdentifier($(TargetFramework)))' == '.NETStandard'`\">\r\n    <SomeProperty>Some value that applies to all versions of .NET Standard<SomeProperty>\r\n  </PropertyGroup>\r\n\r\n  <PropertyGroup Condition=\"`'$([MSBuild]::IsTargetFrameworkOrLater($(TargetFramework)))', 'net5.0'))`\">\r\n    <SomeProperty>Some value that applies to .NET 5 or later<SomeProperty>\r\n  </PropertyGroup>\r\n\r\n  <PropertyGroup Condition=\"`'$([MSBuild]::IsTargetPlatformOrLater($(TargetFramework)))', 'ios12.0'))`\">\r\n    <SomeProperty>Some value that applies to iOS 12 or later<SomeProperty>\r\n  </PropertyGroup>\r\n```\r\n\r\nI am not married to any of these ideas; I'm just spitballing here. Thoughts?",
  "state": "CLOSED",
  "createdAt": "2020-03-10T19:31:12Z",
  "updatedAt": "2024-07-09T17:34:41Z",
  "closedAt": "2020-07-15T21:09:56Z",
  "author": {
    "login": "terrajobst"
  },
  "labels": [
    ".NET Core",
    "needs-design",
    "Area: Language",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "sfoslund"
      }
    ]
  },
  "milestone": {
    "title": ".NET 5"
  },
  "comments": {
    "nodes": [
      {
        "body": "To summarize some of the concerns:\r\n\r\n* **Option via attributes**. Limited to specific properties, hard to express things `IsCompatibleWith()`. However, I like the terseness and that it looks declarative.\r\n* **Option via syntax**. @rainersigwald pointed out that we could make the existing `.` work too.\r\n* **Option via functions**. It's nice to have specific operations, so that we can do something like `IsCompatibleWith()`.\r\n\r\n@rainersigwald would something like this fly?\r\n\r\n```XML\r\n<PropertyGroup Condition=\"$IsCompatibleWith($(TargetFramework), 'ios12.0')\">\r\n    <SomeProperty>Some value that applies to iOS 12 or later<SomeProperty>\r\n</PropertyGroup>\r\n```\r\n\r\nBasically, could we allow top-level functions?",
        "createdAt": "2020-03-10T19:59:59Z",
        "updatedAt": "2020-03-10T20:00:37Z",
        "author": {
          "login": "terrajobst"
        }
      },
      {
        "body": "Yes, I think we could do\r\n\r\n```XML\r\n<PropertyGroup Condition=\"IsCompatibleWith($(TargetFramework), 'ios12.0')\">\r\n    <SomeProperty>Some value that applies to iOS 12 or later<SomeProperty>\r\n</PropertyGroup>\r\n```\r\n\r\nwhich differs from yours only in the initial `$`.\r\n\r\nRight now we have only `Exists` but it's extensible\r\n\r\nhttps://github.com/microsoft/msbuild/blob/06567a7988c47e0ffe1ae5ad8831b7dd783a79e0/src/Deprecated/Engine/Conditionals/FunctionCallExpressionNode.cs#L36-L41",
        "createdAt": "2020-03-10T22:32:35Z",
        "updatedAt": "2020-03-10T22:32:35Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I dig it!\r\n\r\n@dsplaisted @davkean @onovotny",
        "createdAt": "2020-03-10T22:36:39Z",
        "updatedAt": "2020-03-10T22:36:39Z",
        "author": {
          "login": "terrajobst"
        }
      },
      {
        "body": "I would add `RuntimeIdentifier` as a thing that people may need to build over and condition over, especially things like P/Invokes. For that, you may want to add to the `DefineConstants` property and that'd hit the same issue as above.",
        "createdAt": "2020-03-11T00:49:28Z",
        "updatedAt": "2020-03-11T00:49:28Z",
        "author": {
          "login": "clairernovotny"
        }
      },
      {
        "body": "What about these functions then?\r\n\r\nFunction                                                        | Result\r\n----------------------------------------------------------------|---------------------\r\nGetTargetFrameworkIdentifier('net45')                           | '.NETFramework'\r\nGetTargetFrameworkVersion('net45')                              | '4.5'\r\nGetTargetPlatformIdentifier('net45')                            | ''\r\nGetTargetPlatformIdentifier('net5.0-iso12.0')                   | 'ios'\r\nGetTargetPlatformVersion('net5.0-iso12.0')                      | '12.0'\r\nIsTargetFrameworkCompatible('net45', 'net46')                   | True\r\nIsTargetFrameworkCompatible('net46', 'net45')                   | False\r\nIsTargetFrameworkCompatible('net5.0', 'net5.0-ios')             | True\r\nIsTargetFrameworkCompatible('net5.0-ios12.0', 'net5.0-ios11.0') | False\r\nIsTargetPlatformCompatible('ios', 'net5.0-ios11.0')             | True\r\nIsTargetPlatformCompatible('ios', 'ios11.0')                    | True\r\nIsTargetPlatformCompatible('ios12.0', 'ios11.0')                | False\r\n\r\n@onovotny \r\n\r\n> I would add `RuntimeIdentifier` as a thing that people may need to build over and condition over, especially things like P/Invokes. For that, you may want to add to the `DefineConstants` property and that'd hit the same issue as above.\r\n\r\nYou mean as a function?",
        "createdAt": "2020-03-11T03:13:52Z",
        "updatedAt": "2020-03-11T03:13:52Z",
        "author": {
          "login": "terrajobst"
        }
      },
      {
        "body": "I am a little bit concerned by how many components are currently being forced to understand the new format (MSBuild, SDK, NuGet).\r\n\r\nPresumably you can calculate the properties from each identifier in `TargetFrameworks` before you dispatch to the inner build. On the other hand that would not solve the problem for projects that specify `TargetFramework` directly.\r\n\r\nJust thinking aloud I guess. From user perspective the proposed functions above would likely work.\r\n\r\nOne thing that MSBuild.Sdk.Extras does is an ability to dispatch to inner builds based on `RuntimeIdentifier`. Naturally you want to make conditions on the inner build based on the RID (eg. \"RID is Windows\" for \"rid == win-x64\"). I suppose that is what @onovotny wanted to point out above.",
        "createdAt": "2020-03-11T04:02:20Z",
        "updatedAt": "2020-03-11T04:04:04Z",
        "author": {
          "login": "filipnavara"
        }
      },
      {
        "body": "> Presumably you can calculate the properties from each identifier in `TargetFrameworks` before you dispatch to the inner build.\r\n\r\nWe can do that after dispatching it to the inner build too. Since, the property `TargetFramework` becomes global and is available in the beginning of the evaluation.\r\n\r\n> On the other hand that would not solve the problem for projects that specify `TargetFramework` directly.\r\n\r\nThere is no need for doing these comparisons (in the user side) if only `TargetFramework` is used. But custom functions could be useful in general if we're authoring MSBuild files.",
        "createdAt": "2020-03-11T15:39:41Z",
        "updatedAt": "2020-03-11T15:39:41Z",
        "author": {
          "login": "Nirmal4G"
        }
      },
      {
        "body": "@nirmal4g\r\n\r\n> > On the other hand that would not solve the problem for projects that specify `TargetFramework` directly.\r\n> \r\n> There is no need for doing these comparisons (in the user side) if only `TargetFramework` is used. But custom functions could be useful in general if we're authoring MSBuild files.\r\n\r\nWhile that's not totally unreasonable, it makes authoring props and targets harder because it bifurcates the world. Ideally, you should be able to write conditions that work regardless of whether the project is a single target build or or multi target build.",
        "createdAt": "2020-03-11T17:11:10Z",
        "updatedAt": "2020-03-11T17:11:47Z",
        "author": {
          "login": "terrajobst"
        }
      },
      {
        "body": "@filipnavara \r\n\r\n> I am a little bit concerned by how many components are currently being forced to understand the new format (MSBuild, SDK, NuGet).\r\n\r\nNote that this problem already exist today. The properties `TargetFramework`, `TargetFrameworkIdentifier`, `TargetFrameworkVersion`, `TargetFrameworkProfile`, `TargetPlatformIdentifier`,  `TargetPlatformVersion` all exist, and with it the parsing problems.",
        "createdAt": "2020-03-11T17:13:30Z",
        "updatedAt": "2020-03-11T17:13:30Z",
        "author": {
          "login": "terrajobst"
        }
      },
      {
        "body": "@terrajobst I do understand the properties exist today. The parsing currently happens in SDK and NuGet code as far as I can tell. This would introduce a third place with the parsing logic. Please correct me if I am wrong. I am just concerned that three places with the parsing logic starts to be too much to maintain, especially if you consider that not all these projects are necessarily distributed as single cohesive package today. Visual Studio was still using the NetFX version of MSBuild by the time .NET Core 3 was developed which resulted in incompatible behavior between builds in VS and builds in `dotnet build`. Similarly, NuGet has different release and build propagation cycle from the rest of dotnet today.",
        "createdAt": "2020-03-11T17:32:07Z",
        "updatedAt": "2020-03-11T17:32:07Z",
        "author": {
          "login": "filipnavara"
        }
      },
      {
        "body": "What about version ranges - for the docs platform, we have a concept of range, so instead of combining clauses, a range can be parsed\r\n\">= net45\"\r\n\">= net45 && < net5\"\r\n\"net45\" \r\nare all examples of ranges - a single IsInRange(\u2026) function handles all.\r\n",
        "createdAt": "2020-03-11T17:40:54Z",
        "updatedAt": "2020-03-11T17:40:54Z",
        "author": {
          "login": "ghogen"
        }
      },
      {
        "body": "@terrajobst\r\n\r\n> Ideally, you should be able to write conditions that work regardless of whether the project is a single target build or or multi target build.\r\n\r\n**I agree** but this approach seems way into the .NET world. We have C++ and other project types too.\r\nJust like **Tasks** we could add custom functions as an MSBuild concept. Then, we can add our custom functions to .NET SDK rather than in MSBuild itself.\r\n\r\n_**MSBuild** is an orchestration engine and should always be **that** and no more_.",
        "createdAt": "2020-03-11T17:59:45Z",
        "updatedAt": "2020-03-11T18:26:15Z",
        "author": {
          "login": "Nirmal4G"
        }
      },
      {
        "body": "@filipnavara \r\n\r\n> This would introduce a third place with the parsing logic. \r\n\r\nI wouldn't want to do this any way other than making the MSBuild functionality a thin wrapper over NuGet functionality. As you say, it's no good if the implementations diverge.\r\n\r\n> Visual Studio was still using the NetFX version of MSBuild by the time .NET Core 3 was developed which resulted in incompatible behavior between builds in VS and builds in `dotnet build`.\r\n\r\nCan you give an example? We work pretty hard to make sure MSBuild, NuGet, and SDK versions match across matching versions of the products (for example, VS 16.3 and SDK 3.0.100).",
        "createdAt": "2020-03-11T19:22:16Z",
        "updatedAt": "2020-03-11T19:22:16Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> > Visual Studio was still using the NetFX version of MSBuild by the time .NET Core 3 was developed which resulted in incompatible behavior between builds in VS and builds in `dotnet build`.\r\n> \r\n> Can you give an example? We work pretty hard to make sure MSBuild, NuGet, and SDK versions match across matching versions of the products (for example, VS 16.3 and SDK 3.0.100).\r\n\r\nI am not necessarily saying it is still happening. We were consuming .NET Core 3.0 since the very first previews. When building from VS it was using MSBuild that supported binary resources with the old code that does de/serialization. Meanwhile `dotnet build` supported only string resources, the support for pre-serialized resources was added in one of the very last previews (preview 8 or 9 iirc). It was likely more or less the same MSBuild version but it was compiled in different configuration against different runtime and behaved differently.",
        "createdAt": "2020-03-11T19:57:58Z",
        "updatedAt": "2020-03-11T19:57:58Z",
        "author": {
          "login": "filipnavara"
        }
      },
      {
        "body": "With something like `IsTargetFrameworkCompatible`, I don't think I'll ever remember which way the comparison goes.  Just like with `IsAssignableFrom`.  I'm not sure how to improve this though.\r\n\r\nAs for duplicated logic, I think this proposal will actually allow us to eliminate the duplication.  The MSBuild intrinsics would be implemented by calling APIs from NuGet.  Then we'd update the [logic in the SDK](https://github.com/dotnet/sdk/blob/master/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.TargetFrameworkInference.targets) which does its own `TargetFramework` parsing during evaluation to be implemented in terms of the MSBuild intrinsics.\r\n\r\n@rainersigwald @nkolev92 Are there still concerns with MSBuild depending on and loading NuGet assemblies?  I'm looking at the code and seeing comments like this:\r\nhttps://github.com/NuGet/NuGet.Client/blob/1c2681b16a0bb9be9271abe043a1cbf892761ef8/src/NuGet.Core/Microsoft.Build.NuGetSdkResolver/NuGetSdkResolver.cs#L23-L26\r\n\r\nAs well as this: https://github.com/microsoft/msbuild/blob/2d82e1a861d890fce68c8e2d42b569e5bbaf5687/src/Build/BackEnd/Components/SdkResolution/SdkResolverService.cs#L122-L126",
        "createdAt": "2020-03-26T02:12:28Z",
        "updatedAt": "2020-03-26T02:12:28Z",
        "author": {
          "login": "dsplaisted"
        }
      },
      {
        "body": "> Are there still concerns with MSBuild depending on and loading NuGet assemblies?\r\n\r\nYes, but I think they're resolvable:\r\n\r\n1. This will move the NuGet assembly DLL load into evaluation rather than execution, which will probably be flagged in VS perf systems. But I think it's justifiable for the new behavior.\r\n1. We've been continuously if sporadically moving in the direction that \"NuGet is required for MSBuild\". If we introduce an explicit reference and promote it through for example the Runtime package, I think we can just go with it. MSBuild repackagers might have to change to enable the new property functions. But they already couldn't _build_ SDK projects, even for design-time builds, because those need NuGet too. We could probably apply a special-case error to the property function too (haven't thought it all the way through).\r\n1. I'm worried about dependency flow and introducing a new point of incoherency (MSBuild's NuGet reference not matching SDK/installer). But we have that in various places and can manage it.",
        "createdAt": "2020-03-26T12:20:01Z",
        "updatedAt": "2020-03-26T12:20:01Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald @nkolev92\n\nAll these are .NET related, not just NuGet specific, so why not under `[DotNet]::`. It is easy to understand that way!\n\nPutting it under MSBuild, atleast for me, is not clear. Also once it's shipped, we can never change it, right? So, shouldn't these kind of decisions be made early on?\n\nAlso if there's a potential to have custom property functions in the future. Isn't it better to have an MSBuild language feature, so that internal/3rd party can provide custom functions along with the SDK package instead?",
        "createdAt": "2020-05-15T10:29:57Z",
        "updatedAt": "2020-05-15T10:29:57Z",
        "author": {
          "login": "Nirmal4G"
        }
      },
      {
        "body": "> so why not under `[DotNet]::`\r\n\r\nThat's a new concept that does not appear anywhere else. NuGet is the layer of the .NET stack where TargetFramework compatibility is defined.\r\n\r\n> Putting it under MSBuild, atleast for me, is not clear.\r\n\r\nIt is consistent with all the other property functions that expose non-BCL behavior. I think that's a strong argument in its favor.\r\n\r\n> custom property functions\r\n\r\nThis is not likely to happen:\r\n\r\n1. There's no obviously-correct design to make the functions available for binding.\r\n1. It would expand the ability to do hard-to-predict/hard-to-control things at evaluation time.",
        "createdAt": "2020-05-15T14:30:37Z",
        "updatedAt": "2020-05-15T14:30:37Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> It is consistent with all the other property functions that expose non-BCL behavior.\r\n\r\nThose existing properties can be used in C++ and other custom project types. These are .NET specific and have no meaning in other project types. Isn't it better to classify them as such.\r\n**The only reason I'm insisting on this because as you've said it yourself, We can't change once this ships, EVER!!**\r\n\r\n> I think that's a strong argument in its favor.\r\n\r\nYou're thinking in terms of `System.*` as BCL and `MSBuild.*` as non-BCL, I get that. I was going for the same thing but `MSBuild.*` is non-BCL but common to all project types and then...\r\n\r\n- `DotNet.*` is .NET specific.\r\n- `NuGet.*` is packaging specific.\r\n- `VisualC.*`/`Native.*` is C/C++ and native projects specific. (_if we were to have this in the future!_)\r\n\r\nThis is where it gets interesting, when more and more people embrace MSBuild (_Unless you don't want them to_) they could have their own project system with custom functions similar to what .NET is doing here. When and If C++ projects move to Sdk style, they could have custom functions to make project files easier to author.\r\n\r\n> There's no obviously-correct design to make the functions available for binding.\r\n\r\nWe could use attributes on a method call to detect the custom functions in the referenced lib. On top of my head, this is what I came up with...\r\n\r\nWith similar to existing task-declaration\r\n\r\n```xml\r\n<Project>\r\n\r\n  <!-- Example Task declaration -->\r\n  <UsingTask Name=\"Micosoft.Build.Tasks.MSBuild\" Assembly=\"Microsoft.Build.Tasks.dll\" />\r\n  <UsingTask Namespace=\"Micosoft.Build.Tasks\" Assembly=\"Microsoft.Build.Tasks.dll\" /> <!-- NEW: Import all tasks under this namespace -->\r\n\r\n  <!-- Similar to UsingTask -->\r\n  <UsingFunction Alias=\"MSBuild.GetVsInstallRoot()\" Name=\"VisualStudio.Build.Extensions.MSBuildFunctions.GetInstalledPath()\" Assembly=\"Microsoft.VisualStudio.Build.Extensions.dll\" />\r\n\r\n  <!-- [DotNet]:: -->\r\n  <UsingFunction Alias=\"DotNet\" Class=\"Microsoft.NET.Build.Extensions.MSBuildFunctions\" Assembly=\"Microsoft.NET.Build.Extensions.dll\" />\r\n\r\n  <!-- [MSBuild]:: -->\r\n  <UsingFunction Alias=\"MSBuild\" Class=\"Microsoft.Build.Evaluation.IntrinsicFunctions\" Assembly=\"Microsoft.Build.dll\" />\r\n\r\n  <!-- [SampleLib.MyClass]:: -->\r\n  <UsingFunction Class=\"SampleLib.MyClass\" Assembly=\"MSBuild.SampleLib.dll\" />\r\n\r\n<Project>\r\n```\r\n\r\n```cs\r\nusing MSBuild.Framework;\r\n\r\nnamespace SampleLib\r\n{\r\n  [IntrinsicFunctionContainer] // or something similar but you get the idea!\r\n  public static class MyClass\r\n  {\r\n  }\r\n}\r\n```\r\n\r\n> It would expand the ability to do hard-to-predict/hard-to-control things at evaluation time.\r\n\r\nTasks and Sdks are in the same boat. Yet, we did make them work!",
        "createdAt": "2020-05-15T18:26:03Z",
        "updatedAt": "2020-05-15T18:26:03Z",
        "author": {
          "login": "Nirmal4G"
        }
      },
      {
        "body": "Fixed in #5234 and #5429",
        "createdAt": "2020-07-15T21:09:55Z",
        "updatedAt": "2020-07-15T21:09:55Z",
        "author": {
          "login": "sfoslund"
        }
      },
      {
        "body": "Is the final design documented anywhere?",
        "createdAt": "2020-07-16T00:22:02Z",
        "updatedAt": "2020-07-16T00:22:02Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "@KirillOsenkov not formally, but we essentially went with [this comment](https://github.com/microsoft/msbuild/issues/5171#issuecomment-597422462). ",
        "createdAt": "2020-07-16T15:20:04Z",
        "updatedAt": "2020-07-16T15:20:04Z",
        "author": {
          "login": "sfoslund"
        }
      },
      {
        "body": "@sfoslund is there a doc bug/issue tracking the need to get this documented somewhere?",
        "createdAt": "2020-07-16T15:21:28Z",
        "updatedAt": "2020-07-16T15:21:28Z",
        "author": {
          "login": "clairernovotny"
        }
      },
      {
        "body": "@clairernovotny issue is here: MicrosoftDocs/visualstudio-docs#5599",
        "createdAt": "2020-07-16T15:35:55Z",
        "updatedAt": "2020-07-16T15:35:55Z",
        "author": {
          "login": "sfoslund"
        }
      },
      {
        "body": "Sorry for replying to a closed thread but I'm wondering if the following behavior is right:\r\n\r\n```\r\n  <Target Name=\"X\">\r\n    <Message Importance=\"high\" Text=\"net6.0 &lt;-- net5.0: $([MSBuild]::IsTargetFrameworkCompatible('net6.0', 'net5.0'))\" />\r\n    <Message Importance=\"high\" Text=\"net5.0 &lt;-- net472: $([MSBuild]::IsTargetFrameworkCompatible('net5.0', 'net472'))\" />\r\n    <Message Importance=\"high\" Text=\"net5.0 &lt;-- netstandard2.0: $([MSBuild]::IsTargetFrameworkCompatible('net5.0', 'netstandard2.0'))\" />\r\n    <Message Importance=\"high\" Text=\"netstandard2.0 &lt;-- net5.0: $([MSBuild]::IsTargetFrameworkCompatible('netstandard2.0', 'net5.0'))\" />\r\n  </Target>\r\n```\r\n\r\nOutput:\r\n```\r\n  net6.0 <-- net5.0: True\r\n  net5.0 <-- net472: False\r\n  net5.0 <-- netstandard2.0: True\r\n  netstandard2.0 <-- net5.0: False\r\n```\r\n\r\nIn the last case for example, shouldn't this be true?",
        "createdAt": "2020-10-27T11:27:35Z",
        "updatedAt": "2020-10-27T11:27:35Z",
        "author": {
          "login": "ViktorHofer"
        }
      },
      {
        "body": "Maybe I'm getting something wrong. What's the meaning of `target` and `candidate` of the passed in arguments of `$([MSBuild]::IsTargetFrameworkCompatible(target, candidate))`? ",
        "createdAt": "2020-10-27T13:13:36Z",
        "updatedAt": "2020-10-27T13:13:36Z",
        "author": {
          "login": "ViktorHofer"
        }
      },
      {
        "body": "Ah I see, it's the other way around. Target can reference candidate:\r\n\r\n```\r\n  <Target Name=\"X\">\r\n    <Message Importance=\"high\" Text=\"net6.0 --&gt; net5.0: $([MSBuild]::IsTargetFrameworkCompatible('net6.0', 'net5.0'))\" />\r\n    <Message Importance=\"high\" Text=\"net6.0 --&gt; net6.0: $([MSBuild]::IsTargetFrameworkCompatible('net6.0', 'net6.0'))\" />\r\n    <Message Importance=\"high\" Text=\"net6.0 --&gt; netcoreapp2.1: $([MSBuild]::IsTargetFrameworkCompatible('net6.0', 'netcoreapp2.1'))\" />\r\n    <Message Importance=\"high\" Text=\"netcoreapp2.1 --&gt; net6.0: $([MSBuild]::IsTargetFrameworkCompatible('netcoreapp2.1', 'net6.0'))\" />\r\n    <Message Importance=\"high\" Text=\"net5.0 --&gt; net472: $([MSBuild]::IsTargetFrameworkCompatible('net5.0', 'net472'))\" />\r\n    <Message Importance=\"high\" Text=\"net472 --&gt; net5.0: $([MSBuild]::IsTargetFrameworkCompatible('net472', 'net5.0'))\" />\r\n    <Message Importance=\"high\" Text=\"net472 --&gt; netstandard2.0: $([MSBuild]::IsTargetFrameworkCompatible('net472', 'netstandard2.0'))\" />\r\n    <Message Importance=\"high\" Text=\"net5.0 --&gt; netstandard2.0: $([MSBuild]::IsTargetFrameworkCompatible('net5.0', 'netstandard2.0'))\" />\r\n    <Message Importance=\"high\" Text=\"netstandard2.0 --&gt; net5.0: $([MSBuild]::IsTargetFrameworkCompatible('netstandard2.0', 'net5.0'))\" />\r\n    <Message Importance=\"high\" Text=\"netstandard2.0 --&gt; net472: $([MSBuild]::IsTargetFrameworkCompatible('netstandard2.0', 'net472'))\" />\r\n  </Target>\r\n```\r\n\r\nOutput:\r\n```\r\n--> means references\r\n\r\n  net6.0 --> net5.0: True\r\n  net5.0 --> net472: False\r\n  net6.0 --> netcoreapp2.1: True\r\n  netcoreapp2.1 --> net6.0: False\r\n  net472 --> net5.0: False\r\n  net472 --> netstandard2.0: True\r\n  net5.0 --> netstandard2.0: True\r\n  netstandard2.0 --> net5.0: False\r\n  netstandard2.0 --> net472: False\r\n```\r\n\r\n",
        "createdAt": "2020-10-27T13:15:30Z",
        "updatedAt": "2020-10-27T21:56:37Z",
        "author": {
          "login": "ViktorHofer"
        }
      },
      {
        "body": "> Maybe I'm getting something wrong. What's the meaning of `target` and `candidate` of the passed in arguments of `$([MSBuild]::IsTargetFrameworkCompatible(target, candidate))`?\r\n\r\nYeah, this was brough up before. Sadly, for a two argument function there isn't a canonical way to indicate who can reference whom...",
        "createdAt": "2020-10-27T16:13:50Z",
        "updatedAt": "2020-10-27T16:13:50Z",
        "author": {
          "login": "terrajobst"
        }
      },
      {
        "body": "Documentation that shows up when googling the function's name would already be sufficient :) Do we have a tracking issue for the documentation part?",
        "createdAt": "2020-10-27T16:20:20Z",
        "updatedAt": "2020-10-27T16:20:20Z",
        "author": {
          "login": "ViktorHofer"
        }
      },
      {
        "body": "Yes, documentation will be released along with 16.8, see this comment: https://github.com/dotnet/msbuild/issues/5171#issuecomment-659492775",
        "createdAt": "2020-10-27T21:13:47Z",
        "updatedAt": "2020-10-27T21:13:47Z",
        "author": {
          "login": "sfoslund"
        }
      }
    ]
  }
}