{
  "number": 1490,
  "title": "AL task invocation in GenerateSatelliteAssemblies attempts full signing when PublicSign is specified",
  "body": "### Repro steps\r\n* File -> New Project -> Console Application (.NET Framework)\r\n\r\n* Add localized resource file (e.g. String.fr.resx).\r\n\r\n* Properties -> Signature:\r\n  * check sign assembly\r\n  * add new snk (w/o password)\r\n  * check delay signing option\r\n\r\n* Edit project file and change DelaySign to PublicSign\r\n\r\n* Drop to command line and strip the private key from the snk\r\n  * sn -p file.snk file.public.snk\r\n  * del file.snk\r\n  * ren file.public.snk file.snk\r\n\r\n* Build \r\n\r\n### Expected result\r\n\r\nBuild succeeds and my main assembly and satellite are both public-signed.\r\n\r\n### Actual result\r\n```\r\nErreur\t\tLe fichier de cl\u00e9 '..\\file.snk' ne comporte pas la cl\u00e9 priv\u00e9e n\u00e9cessaire \u00e0 la signature\r\n```\r\n\r\n(Translation: \"The key file '...\\file.snk' does not contain the private key necessary for signing.\")\r\n\r\n@jaredpar @agocke @cdmihai \r\n",
  "state": "CLOSED",
  "createdAt": "2016-12-15T23:39:51Z",
  "updatedAt": "2024-02-21T17:23:18Z",
  "closedAt": "2019-03-13T22:53:34Z",
  "author": {
    "login": "nguerrera"
  },
  "labels": [
    "bug",
    "Future Release Bar-check",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "The AL.exe based satellite generation is already problematic because it does not work on CoreCLR. For that, we had to roll our own based on Roslyn in the SDK. I think a better long-term solution would be to have one cross-platform task that compiles the satellite assembly with Csc instead of AL. That way, when a new feature like public signing that needs to work for satellites comes in to the compiler, it will be trivial.",
        "createdAt": "2016-12-15T23:42:23Z",
        "updatedAt": "2016-12-15T23:42:23Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "Less than perfect workaround to *delay-sign* satellites while public-signing main assembly:\r\n\r\n``` XML\r\n<!-- \r\n    Workaround https://github.com/Microsoft/msbuild/issues/1490 (lack of support for public-signing satellites) by \r\n    delay-signing satellite assemblies when main assembly is public-signed.\r\n-->\r\n<Target Name=\"PrepareToDelaySignSatelliteAssemblies\" BeforeTargets=\"GenerateSatelliteAssemblies\">\r\n  <PropertyGroup>\r\n    <_DelaySignMainAssembly>$(DelaySign)</_DelaySignMainAssembly>\r\n    <DelaySign Condition=\"'$(PublicSign)' == 'true'\">true</DelaySign>\r\n  </PropertyGroup>\r\n</Target>\r\n<Target Name=\"CleanupAfterDelaySigningSatelliteAssemblies\" AfterTargets=\"GenerateSatelliteAssemblies\">\r\n  <PropertyGroup>\r\n    <DelaySign>$(_DelaySignMainAssembly)</DelaySign>\r\n  </PropertyGroup>\r\n</Target>\r\n```",
        "createdAt": "2017-01-03T21:12:49Z",
        "updatedAt": "2017-01-03T21:12:49Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "@nguerrera I assume this causes load failures when the main assembly tries to load the satellite assemblies?\r\n\r\nTo answer my own question. Yes, the satellite assemblies will fail to load. Making `<PublicSign>` useless for projects with satellite assemblies.",
        "createdAt": "2017-02-07T21:41:38Z",
        "updatedAt": "2017-02-07T23:06:31Z",
        "author": {
          "login": "paulvanbrenk"
        }
      },
      {
        "body": "@jaredpar",
        "createdAt": "2017-10-12T22:11:23Z",
        "updatedAt": "2017-10-12T22:11:23Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "Closing against #350. If we move to csc in common targets for satellite generation, and copy the implementation from Microsoft.NET.Sdk, this will get fixed. AL is never getting fixed.",
        "createdAt": "2019-03-13T22:53:20Z",
        "updatedAt": "2019-03-13T22:53:20Z",
        "author": {
          "login": "nguerrera"
        }
      }
    ]
  }
}