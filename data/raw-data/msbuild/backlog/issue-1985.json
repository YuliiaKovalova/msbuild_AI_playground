{
  "number": 1985,
  "title": "Feature Request - Ability to read build-time environment variables from runSettings.json file",
  "body": "Consider a `runSettings.json` file, that is added by ASP.NET Core template:\r\n\r\n```json\r\n{\r\n  \"iisSettings\": {\r\n    \"windowsAuthentication\": false,\r\n    \"anonymousAuthentication\": true,\r\n    \"iisExpress\": {\r\n      \"applicationUrl\": \"http://localhost:23045/\",\r\n      \"sslPort\": 0\r\n    }\r\n  },\r\n  \"profiles\": {\r\n    \"IIS Express\": {\r\n      \"commandName\": \"IISExpress\",\r\n      \"launchBrowser\": true,\r\n      \"environmentVariables\": {\r\n        \"ContextID\": \"CX1\",\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\r\n      }\r\n    },\r\n    \"ProfileCX1\": {\r\n      \"commandName\": \"Project\",\r\n      \"commandLineArgs\": \"--port=3000\",\r\n      \"launchBrowser\": true,\r\n      \"launchUrl\": \"http://localhost:3000\",\r\n      \"environmentVariables\": {\r\n        \"ContextID\": \"CX1\",\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\r\n      }\r\n    },\r\n    \"ProfileCX2\": {\r\n      \"commandName\": \"Project\",\r\n      \"commandLineArgs\": \"--port=3000\",\r\n      \"launchBrowser\": true,\r\n      \"launchUrl\": \"http://localhost:3000\",\r\n      \"environmentVariables\": {\r\n        \"ContextID\": \"CX2\",\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Staging\"\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nWhen this MVC project is set as a StartUp project in VS, it adds ProfileCX1 and ProfileCX2, along with IIS Express in run configurations. In the application code, we can access the environment variables, such as `ContextID` defined in the runSettings.json per Run configuration selection.\r\n\r\nIt would be very useful if the environment variables defined in this file are propagated to the build engine, so we can consume some globbing in csproj like:\r\n\r\n```xml\r\n    <ItemGroup>\r\n        <Compile Remove=\"**\\*\" />\r\n        <Compile Include=\"**\\*.cs\" />\r\n        <Compile Remove=\"**\\*.C*.cs\" />\r\n        <Compile Include=\"**\\*.$(ContextID).cs\" />\r\n        <None Update=\"Views\\**\\*;wwwroot\\**\\*\">\r\n            <CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>\r\n        </None>\r\n    </ItemGroup>\r\n```\r\n\r\nto potentially conditional compile all `<fileName>.<ContextID>.cs` files and exclude the other ContextIDs just by the change of run configuration selection in Visual Studio.\r\n\r\n#### Known workarounds to pass external environment variable to affect the build-time\r\n\r\n1. Modifying or setting environment variable before opening the solution. It's a hassle and requires us to open/close solution to build for other (elaborate) configurations.\r\n\r\n2. Using multiple `.SLN` files per contextID, which include single set of `<projectName>.<ContextID>.csproj`s where ContextID is defined as a property `<ContextID>CX1</ContextID>` in each project file followed by the aforementioned `ItemGroup`. There is a lot of duplication in this topology.\r\n\r\n3. Having a `.proj` file with an MSBuild task for SLN and passing the ContextID as property. This is an additional overhead and we cannot reliably just open the SLN in VS and build for certain configuration.",
  "state": "CLOSED",
  "createdAt": "2017-04-17T17:41:42Z",
  "updatedAt": "2024-02-21T17:19:53Z",
  "closedAt": "2017-11-07T20:16:06Z",
  "author": {
    "login": "am11"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "MSBuild Triage: we don't think it's appropriate to build knowledge of this ASP.NET-specific file format into MSBuild.\r\n\r\n@mlorbetske can you help route this feedback? ",
        "createdAt": "2017-04-18T22:39:24Z",
        "updatedAt": "2017-04-18T22:39:24Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@billhiebert any thoughts on this?",
        "createdAt": "2017-04-18T23:19:26Z",
        "updatedAt": "2017-04-18T23:19:26Z",
        "author": {
          "login": "mlorbetske"
        }
      }
    ]
  }
}