{
  "number": 6715,
  "title": "Consider \"install location\" in XML cache strategy",
  "body": "Currently, the ProjectRootElementCache uses this cache strategy:\r\n\r\nhttps://github.com/dotnet/msbuild/blob/d592862edb5896aef3c1e1526c08f3be0285ca98/src/Build/Evaluation/ProjectRootElementCache.cs#L20-L55\r\n\r\nHowever, in some scenarios ([internal link](https://microsoft.sharepoint.com/teams/snappy/_layouts/OneNote.aspx?id=%2Fteams%2Fsnappy%2FSiteAssets%2FVS%20Perf%20Notebook&wd=target%28SnappyJr%20Clusters.one%7C14604092-56E1-4364-9A06-93957270E2A0%2F21-07-22%20-%20Close%20VS%7C6658B127-26F9-4DEA-9DD5-33F98A59BD43%2F%29) but it's \"open OrchardCore after `git clean`\"), we can see MSBuild targets/props files read dozens of times (like maybe 40x). So the cache strategy doesn't seem to be working well for a real-world project.\r\n\r\nI did an experiment using the environment-variable flag that can tweak the strong cache size\r\n\r\nhttps://github.com/dotnet/msbuild/blob/d592862edb5896aef3c1e1526c08f3be0285ca98/src/Build/Evaluation/ProjectRootElementCache.cs#L117-L123\r\n\r\nSetting this to `2000` (from its default `50`) _dramatically_ reduces the bytes read of `.targets` files, so just upping the size is an option, but I think being smarter about it also makes sense.\r\n\r\nI think we could make the cache system smarter by making it aware of a couple of locations that are a) commonly used and b) highly unlikely to see changes during an MSBuild process lifetime.\r\n\r\nSpecifically, I think we should consider expanding the strong (that is, not garbage-collectible) cache to include any project file under\r\n\r\n1. The Visual Studio install root (if in a VS scenario), or\r\n2. A .NET SDK root.\r\n\r\nThe VS install root is easy to identify from `BuildEnvironment.VisualStudioInstallRootDirectory`, but the SDK root is harder to pinpoint and might need a bit of thought.\r\n\r\nWe should consider having this cache _in addition_ to the most-recently-used cache that already exists, because we wouldn't want to avoid caching things like `Directory.Build.targets` and NuGet build logic.\r\n\r\nNote that anything we do here to increase the strong cache size will increase memory footprint. I think the perf tradeoff is worth it on modern machines, but we might have to justify that.",
  "state": "CLOSED",
  "createdAt": "2021-07-28T20:47:50Z",
  "updatedAt": "2024-02-21T17:01:12Z",
  "closedAt": "2021-10-25T13:18:13Z",
  "author": {
    "login": "rainersigwald"
  },
  "labels": [
    "Area: Performance",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "rainersigwald"
      },
      {
        "login": "AR-May"
      }
    ]
  },
  "milestone": {
    "title": "VS 17.1"
  },
  "comments": {
    "nodes": [
      {
        "body": "During investigation of #6070 I have identified that root cause of major difference between framework and netcore project Evalution performance is too strict cache retention policy. Currently, simplified, we cache only 50 ProjectRootElements.\r\n\r\nBy increasing cache limit by setting env variable MSBUILDPROJECTROOTELEMENTCACHESIZE = 200 I have measured about 32% gain (1 - new/old)  for incremental build m:1 and 25% for incremental build m:4.\r\n\r\nI believe that by using 64 bit processes the risk of regression resulting into OOM is negligible and we can afford to enlarge cache to 200 or any other number which we deem optimal.\r\n\r\nConsidering \"install location\" would also help, but since we have, in my test scenarios, more than 50 XMLs in those \"system & SDK install locations\" we still have to enlarge max number of cached projects root elements.\r\nAlso we shall consider to reuse XML cache between builds, which would help incremental builds scenarios, and for that reason caching non system Project XMLs would help as well.\r\n\r\nTo me, simply enlarge default MSBUILDPROJECTROOTELEMENTCACHESIZE is both appealing and sufficient, for its simplicity and low risk.\r\n",
        "createdAt": "2021-08-25T18:52:02Z",
        "updatedAt": "2021-08-25T21:13:02Z",
        "author": {
          "login": "rokonec"
        }
      },
      {
        "body": "For a scenario \"open OrchardCore solution\" for old and new strong cache size (50 and 200 respectively) I measured amount of cache hits and cache misses and time spend in `Get` function. \r\nThe cache miss ratio dropped from ~70% to ~20%. \r\nMeanwhile time spend in Get function dropped from ~30 Sec to ~19 Sec. \r\nFurther improvement using the idea of install locations would remove ~half of the rest cache misses and new cache miss ratio would be ~10%. I do not expect it to be a good improvement timewise. Given the data, I would think that changing strong cache size mostly resolved performance issues with ProjectRootElementCache and further code improvement is not needed, due to unnecessary code complication.\r\n\r\nDuring the measurements we noticed that there is too big amount of \"Get\" calls per xml file. That's suspicious and we decided to spend some time on it and further investigate.  \r\n",
        "createdAt": "2021-10-22T11:14:11Z",
        "updatedAt": "2021-10-22T11:14:11Z",
        "author": {
          "login": "AR-May"
        }
      }
    ]
  }
}