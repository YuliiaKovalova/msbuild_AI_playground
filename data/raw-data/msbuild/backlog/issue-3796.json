{
  "number": 3796,
  "title": "Identify graph roots in the ProjectGraph",
  "body": "Exposing graph roots (which may not necessarily be the same as the entry points when multiple are supported, see #3795) can help consumers identify when there are disconnected graphs in the ProjectGraph.\r\n\r\nThis is a \"nice to have\" expressed by some potential consumers as they could figure this out themselves by traversing the full graph once. This work is only useful after #3795 is done. ",
  "state": "OPEN",
  "createdAt": "2018-09-26T16:35:28Z",
  "updatedAt": "2024-02-21T16:32:48Z",
  "closedAt": null,
  "author": {
    "login": "dfederm"
  },
  "labels": [
    "Area: Static Graph",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "So this is the subset of entry points that aren't transitively reachable from other entry points? In this graph, it'd be just `Entry1`?\r\n\r\n![image](https://user-images.githubusercontent.com/3347530/46095036-2d509d80-c181-11e8-89d8-a57ba7d18ba8.png)\r\n\r\n",
        "createdAt": "2018-09-26T16:42:20Z",
        "updatedAt": "2018-09-26T16:42:20Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald exactly. Nodes with no incoming edges. If we had the Referenc**ing**Projects it'd be `AllNodes.Where(node => node.ReferencingProjects.Count == 0)` (but obviously not implemented that way). Or, as you pointed out, use `EntryPoints` instead of `AllNodes` since a non-entrypoint could never be a graph root.",
        "createdAt": "2018-09-26T17:14:35Z",
        "updatedAt": "2018-09-26T17:16:02Z",
        "author": {
          "login": "dfederm"
        }
      }
    ]
  }
}