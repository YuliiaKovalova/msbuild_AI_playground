{
  "number": 1754,
  "title": "Each MSBuild task should exist in its own AssemblyLoadContext",
  "body": "Each MSBuild Task should load in its own AssemblyLoadContext. At least 3rd party tasks. This prevents build failures due to two independently developed tasks sharing a dependency but with different versions.\r\n\r\nAlso, the default AssemblyLoadContext should be very nearly empty, so that each Task can define its own dependencies instead of inheriting them from the default context. For example, Roslyn assemblies should *not* be in the default AssemblyLoadContext so that MSBuild tasks can use Roslyn assemblies of the version it was compiled against.\r\n\r\n@tmat summarized this well after [a discussion we had in another issue](https://github.com/Microsoft/msbuild/issues/1737#issuecomment-282571709).\r\n\r\nCC: @nguerrera ",
  "state": "CLOSED",
  "createdAt": "2017-02-27T02:18:16Z",
  "updatedAt": "2024-10-02T13:53:24Z",
  "closedAt": "2020-01-09T23:52:58Z",
  "author": {
    "login": "AArnott"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "rainersigwald"
      }
    ]
  },
  "milestone": {
    "title": "MSBuild 16.5 Preview 2 (Sprint 162, 163)"
  },
  "comments": {
    "nodes": [
      {
        "body": "cc @swaroop-sridhar ",
        "createdAt": "2018-08-01T20:51:19Z",
        "updatedAt": "2018-08-01T20:51:19Z",
        "author": {
          "login": "jeffschwMSFT"
        }
      },
      {
        "body": "@joperezr hit this with a task that was trying to use Roslyn and had to workaround it by turning it into an out of proc tool.",
        "createdAt": "2019-01-23T22:16:02Z",
        "updatedAt": "2019-01-23T22:16:02Z",
        "author": {
          "login": "ericstj"
        }
      },
      {
        "body": "See design proposal #4133 by @vitek-karas. Feedback welcome!",
        "createdAt": "2019-02-04T22:44:20Z",
        "updatedAt": "2019-02-04T22:44:20Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "FYI we just hit this again here: https://github.com/dotnet/corefx/pull/36103\r\n\r\nIn that case the task was trying to use a newer NuGet than MSBuild had in its deps file.  /cc @safern @tmat ",
        "createdAt": "2019-03-18T17:24:10Z",
        "updatedAt": "2019-03-18T17:24:10Z",
        "author": {
          "login": "ericstj"
        }
      },
      {
        "body": "@AArnott i assume this shouldnt be a problem for strong named task assemblies? since they should be able to be loaded side-by-side?",
        "createdAt": "2019-05-12T22:14:13Z",
        "updatedAt": "2019-05-12T22:14:13Z",
        "author": {
          "login": "SimonCropp"
        }
      },
      {
        "body": "@SimonCropp It is indeed a problem for strong-named assemblies. In fact all my task assemblies are always strong-named. The problem isn't just the task assembly itself, it's its whole dependency tree. And while all its dependency may be strong-name signed, the dependencies should still match exactly what the task is expecting. Some dependencies have a common assembly version across several actual versions, such that the first one would load in the CLR and the rest of the tasks that need that same dependency (but a different version) would reuse the same version as the first task asked for. That's a problem.",
        "createdAt": "2019-05-13T12:19:53Z",
        "updatedAt": "2019-05-13T12:19:53Z",
        "author": {
          "login": "AArnott"
        }
      },
      {
        "body": "Your ultimate test case is \"turtles all the way down\":\r\n\r\nCreate a `TaskRunner.exe` which loads an `interface ITask { Execute(string[] args); }` based on an `interface ITaskDefinition<T> where T : new, ITask  { Guid Key { get; set; } }`\r\n\r\nThis would allow you to correctly handle the scenario of:\r\n1. Installing a .NET Core CLI Tool as a local tool from an MSBuild Pre-Build step\r\n2. Running that .NET Core CLI Tool as a local tool from an MSBuild Post-Build step\r\n  a. With support for two scenarios:\r\n     1. Being able to reference an older version of a system dependency, such as [`System.ComponentModel.Annotations`](https://www.nuget.org/packages/System.ComponentModel.Annotations/#show-dependency-groups).  Consider my scenario, where a concrete `ITask` instance references via its implementation details the ability to provide user-friendly names for enumeration values.  **I LOVE THIS EXAMPLE** because I firmly believe Microsoft has wildly over-complicated this, and this NAILS the complexity issue.\r\n\ud83c\udf89 \ud83c\udf82 \ud83c\udf81 \r\n\r\nThis is exactly the problem we run into every day.  I get more support requests in FluentMigrator for this issue than all other issues combined.\r\n\r\nI'll try to push a sample project which demonstrates this issue.",
        "createdAt": "2019-11-05T01:16:59Z",
        "updatedAt": "2019-11-05T01:16:59Z",
        "author": {
          "login": "jzabroski"
        }
      },
      {
        "body": "in fody this is handled by spinning up a custom appdomain in .net and a custom load context in netcore. this domain/context is then cached per solution so that subsequent builds dont need to spin up a new domain/context. this avoids the performance problem with  AppDomainIsolatedTask, which forces a new appdomain for every run of the task, even if all the assemblies are the same. that and  AppDomainIsolatedTask  is not supported in netcore\r\n\r\ni suspect the majority of msbuild tasks (that have dependencies) have the same \"single appdomain\" bug and they have never noticed.\r\n\r\ni would very much like to remove this complexity from Fody.",
        "createdAt": "2019-11-05T01:24:22Z",
        "updatedAt": "2019-11-05T01:37:26Z",
        "author": {
          "login": "SimonCropp"
        }
      },
      {
        "body": "@SimonCropp Can you point me to the code you use in Fody?  I searched https://github.com/Fody/Fody/search?q=AppDomain&unscoped_q=AppDomain and I see:\r\n\r\n1. https://github.com/Fody/Fody/blob/9236ca84a1f660b067545bf3df5882fd0c0b7a9c/FodyCommon/IsolatedAssemblyLoadContext.cs\r\n2. https://github.com/Fody/Fody/blob/23b9e722dbd79990f3012c841f98d135f1c34e41/Fody/DomainAssemblyResolver.cs\r\n3.  https://github.com/Fody/Fody/blob/9236ca84a1f660b067545bf3df5882fd0c0b7a9c/FodyIsolated/InnerWeaver.cs\r\n\r\nI believe, based on your comments, you are only referring to IsolatedAssemblyLoadContext, but not to the resolution handlers you write in InnerWeaver and DomainAssemblyResolver.  I don't think putting each MSBuild task in its own AssemblyLoadContext will necessarily solve all your problems, because I think you'll end up with \"private diamond dependencies\" where people cannot independently separate interfaces from implementation.\r\n\r\nBenchmarkDotNet does similar nastiness, here, in the following sequence:\r\n\r\n1. [`BenchmarkRunnerDirty.RunWithDirtyAssemblyResolveHelper`](https://github.com/dotnet/BenchmarkDotNet/blob/2ba30330ec5ec8a9abe284c927277a6fe0fc5a0c/src/BenchmarkDotNet/Running/BenchmarkRunnerDirty.cs)\r\n2. [`DirtyAssemblyResolveHelper.HelpTheFrameworkToResolveTheAssembly`](https://github.com/dotnet/BenchmarkDotNet/blob/2ba30330ec5ec8a9abe284c927277a6fe0fc5a0c/src/BenchmarkDotNet/Helpers/DirtyAssemblyResolveHelper.cs)\r\n3. [`BenchmarkSwitcher.Run`](https://github.com/dotnet/BenchmarkDotNet/blob/2ba30330ec5ec8a9abe284c927277a6fe0fc5a0c/src/BenchmarkDotNet/Running/BenchmarkSwitcher.cs)\r\n    - Contains this lovely comment:\r\n      > ```c#\r\n      > // VS generates bad assembly binding redirects for ValueTuple for Full .NET Framework\r\n      > // we need to keep the logic that uses it in a separate method and create DirtyAssemblyResolveHelper first\r\n      > // so it can ignore the version mismatch ;)\r\n      > ```\r\n",
        "createdAt": "2019-11-05T01:46:36Z",
        "updatedAt": "2019-11-05T01:46:36Z",
        "author": {
          "login": "jzabroski"
        }
      },
      {
        "body": "@jzabroski fory has two contexts\r\n\r\n### the root task\r\n\r\nhttps://github.com/Fody/Fody/tree/master/Fody\r\n\r\ncontains no 3rd party dependencies and is loaded into the shared msbuild appdomain\r\n\r\nloads \"isolated\" here https://github.com/Fody/Fody/blob/master/Fody/Processor.cs#L128\r\n\r\ncontexts are cached per sln in a dictionary https://github.com/Fody/Fody/blob/master/Fody/Processor.cs#L27\r\n\r\n### an isolated part \r\n\r\nhttps://github.com/Fody/Fody/tree/master/FodyIsolated\r\n\r\ncan ref and load any 3rd part assemblies\r\n\r\nnote that fody is also a plugin based model. so the above give isolation for any weavers as well https://github.com/Fody/Home/blob/master/pages/addins.md\r\n\r\n",
        "createdAt": "2019-11-05T01:52:41Z",
        "updatedAt": "2019-11-05T01:52:41Z",
        "author": {
          "login": "SimonCropp"
        }
      },
      {
        "body": "I've encountered (maybe) related issues.\r\n\r\nwhen using `MessagePack.MSBuild.Tasks` and `MagicOnion.MSBuild.Tasks` which are custom task both using `Microsoft.CodeAnalysis.CSharp`\r\n\r\n```xml\r\n  <Target Name=\"GenerateMessagePack\" AfterTargets=\"Compile\">\r\n    <MessagePackGenerator Input=\".\\ChatApp.Shared.csproj\" Output=\"..\\ChatApp.Unity\\Assets\\Scripts\\Generated\\MessagePack.Generated.cs\" />\r\n  </Target>\r\n  <Target Name=\"GenerateMagicOnion\" AfterTargets=\"Compile\">\r\n    <MagicOnionGenerator Input=\".\\ChatApp.Shared.csproj\" Output=\"..\\ChatApp.Unity\\Assets\\Scripts\\Generated\\MagicOnion.Generated.cs\" />\r\n  </Target>\r\n```\r\n\r\n`dotnet build` shows following error.\r\n```\r\nCould not load file or assembly 'Microsoft.CodeAnalysis.CSharp, Version=3.4.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'. Could not find or load a specific file. \r\n```\r\n\r\nbecause `MessagePack.MSBuild.Tasks` depends `Microsoft.CodeAnalysis.CSharp 3.1.0` but `MagicOnion.MSBuild.Tasks` depends `3.4.0`.\r\n\r\nfor workaround, I've adjusted to use same version, it works.\r\nBut this versioning hell is painful.",
        "createdAt": "2020-01-06T14:25:28Z",
        "updatedAt": "2020-01-06T14:25:28Z",
        "author": {
          "login": "neuecc"
        }
      },
      {
        "body": "@neuecc Yeah, that problem should be resolved by this change. If you put a sample project up somewhere, I can confirm by testing #4916 against it before merging.",
        "createdAt": "2020-01-06T16:28:10Z",
        "updatedAt": "2020-01-06T16:28:10Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald thanks, I've pushed sample repo here https://github.com/neuecc/MSBuildAssemblyLoadIssue",
        "createdAt": "2020-01-07T08:03:19Z",
        "updatedAt": "2020-01-07T08:03:19Z",
        "author": {
          "login": "neuecc"
        }
      },
      {
        "body": "@neuecc Thanks!\r\n\r\n```sh-session\r\n$ dotnet build\r\nMicrosoft (R) Build Engine version 16.5.0-dev-20058-01+6d4c3b1e2 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 14.77 sec for S:\\play\\MSBuildAssemblyLoadIssue\\MSBuildAssemblyLoadIssue.csproj.\r\n  You are using a preview version of .NET Core. See: https://aka.ms/dotnet-core-preview\r\n[Out]S:\\play\\MSBuildAssemblyLoadIssue\\MagicOnion.Generated.cs\r\n  MSBuildAssemblyLoadIssue -> S:\\play\\MSBuildAssemblyLoadIssue\\bin\\Debug\\netstandard2.0\\MSBuildAssemblyLoadIssue.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:00:26.59\r\n```\r\n\r\n(That's with MSBuild from my PR)",
        "createdAt": "2020-01-08T20:01:30Z",
        "updatedAt": "2020-01-08T20:01:57Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> (That's with MSBuild from my PR)\r\n\r\n@rainersigwald I'm a little lost as to what the fix for this was?  I am running into an issue using FluentMigrator.MSBuild 6.1.0 (I am the author of this package, and the csproj file is based on the MSBuild guidance here: https://learn.microsoft.com/en-us/visualstudio/msbuild/tutorial-custom-task-code-generation?view=vs-2022#optional-support-multitargeting).  I get `error : While executing migrations the following error was encountered: Could not load file or assembly 'System.ComponentModel.Annotations, Version=4.2.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. The system cannot find the file specified.`\r\n\r\nI think the fix was to simply let MSBuild provide the _main `Microsoft.Build*` assemblies_? In which case, what should I do to get System.ComponentModel.Annotations to resolve?  I'm currently selecting netstandard2.0 as the target framework.  It seems like I have to select net8.0? Explicitly targeting net8.0 in FluentMigrator.MSBuild 6.1.1 yields ` error MSB4062: The \"FluentMigrator.MSBuild.Migrate\" task could not be loaded from the assembly D:\\source\\myproject\\tools\\packages\\FluentMigrator.MSBuild.6.1.1\\tasks\\net8.0\\FluentMigrator.MSBuild.dll. Could not load file or assembly 'System.Runtime, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies.`",
        "createdAt": "2024-10-02T01:04:11Z",
        "updatedAt": "2024-10-02T13:53:24Z",
        "author": {
          "login": "jzabroski"
        }
      },
      {
        "body": "@jzabroski please start a new issue for that.",
        "createdAt": "2024-10-02T13:40:17Z",
        "updatedAt": "2024-10-02T13:40:17Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}