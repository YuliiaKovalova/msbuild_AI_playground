{
  "number": 406,
  "title": "Wildcard expansion is silently disabled when a glob expansion encounters an I/O exception",
  "body": "This was reported as [a Connect issue](http://connect.microsoft.com/VisualStudio/feedback/details/2116449/msbuild-fails-to-find-files-in-directory-with-huge-sub-directory).\n\nThe repro is simple:\n\n``` xml\n<Project ToolsVersion=\"4.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n    <ItemGroup>\n        <MyItem Include=\"MyDir\\**\\*.*\" Exclude=\"MyDir\\node_modules\\**\\*.*;MyDir\\tmp\\**\\*.*\" />\n    </ItemGroup>\n\n    <Target Name=\"TestInputs\">\n        <Warning Text=\"Inputs = @(MyItem)\" />\n    </Target>\n</Project>\n```\n\nWhere there are files in `MyDir\\node_modules` that exceed `MAX_PATH`.  That returns:\n\n```\nC:\\Users\\raines\\Downloads>msbuild test.proj\nMicrosoft (R) Build Engine version 14.0.24720.0\nCopyright (C) Microsoft Corporation. All rights reserved.\n\nBuild started 12/16/2015 12:46:15 PM.\nProject \"C:\\Users\\raines\\Downloads\\test.proj\" on node 1 (default targets).\nC:\\Users\\raines\\Downloads\\test.proj(8,3): warning : Inputs = MyDir\\**\\*.*\nDone Building Project \"C:\\Users\\raines\\Downloads\\test.proj\" (default targets).\n\nBuild succeeded.\n```\n\nNote that the wildcards weren't actually expanded.\n\nThe original issue mentions an expectation that the `Exclude` element would prevent this from happening because that directory and all its contents are excluded. The reason that doesn't work is because we build the `Include` list fully first, then build the `Exclude` list, then do a subtraction. The failure occurs when building the `Include` list, so `Exclude` has no effect.\n",
  "state": "OPEN",
  "createdAt": "2015-12-16T20:49:00Z",
  "updatedAt": "2023-10-24T17:53:54Z",
  "closedAt": null,
  "author": {
    "login": "rainersigwald"
  },
  "labels": [
    "bug",
    "Feature - Globbing",
    "User Experience",
    "Breaking Change",
    "Feature: Warning Waves"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Consider for Next Major Version"
  },
  "comments": {
    "nodes": [
      {
        "body": "There are a couple of questions here.\n1. We have (until we figure out #53 for full-framework MSBuild) nice errors that we are supposed to emit when something goes over `MAX_PATH`.  Why didn't they fire here?\n2. Should we precompute the impact of the exclude list as this user seems to expect?\n\nFor 2, I think the answer is \"no\". Being able to do pattern-based set exclusions seems like an awful lot of work for fairly minimal gain.\n",
        "createdAt": "2015-12-16T21:19:19Z",
        "updatedAt": "2015-12-16T21:19:19Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Thanks for troubleshooting this! You're right about my expectations. At minimum MSBuild should report a meaningful error here, but yes, I do expect that excluding the directory will avoid any problems with it.\n\n\"Precomputing the impact of the exclude list\" is an implementation detail. From the user point of view, the ItemList is \"everything in MyDir, except node_modules\" - same as manually listing every other sub-directory in the include list (which works).\n\nYes, it is a problem with NPM that it builds a directory structure that exceeds MAX_PATH, but I have no control over that. All I can do is exclude the directory.\n",
        "createdAt": "2015-12-17T10:01:22Z",
        "updatedAt": "2015-12-21T09:20:37Z",
        "author": {
          "login": "shift-evgeny"
        }
      },
      {
        "body": "Thinking about it a bit more, it may not be that difficult to consider the `Exclude` list inline with `Include`, but I haven't looked at that corner of the code in a while. If it's easy we should do it.\n\nIf it's not easy, I think fixing the long-path behavior would be sufficient to avoid this problem--it's inefficient to add and then remove things from a list but would produce the desired behavior.\n",
        "createdAt": "2015-12-18T21:31:03Z",
        "updatedAt": "2015-12-18T21:31:03Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@shift-evgeny `Exclude` should now behave as you expect, thanks to improvements made for lazy item evaluation (#770). MSBuild now considers the exclude list while recursing through the include list and will stop when it hits an excluded directory.\n\nThis should already be available in VS \"15\" Preview 5.\n\nI'm not closing this issue because the bad doesn't-expand-wildcards behavior persists if you _don't_ have an exclude. But at least the obvious workaround for `node_modules` works now.\n",
        "createdAt": "2016-10-27T13:44:38Z",
        "updatedAt": "2016-10-27T13:44:38Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "The built-in `EmbeddedResource` stuff totally breaks because of this because it uses a wildcard like `**/*.resx` in `%ProgramFiles%\\Microsoft Visual Studio\\2017\\community\\msbuild\\Sdks\\Microsoft.NET.Sdk\\build\\Microsoft.NET.Sdk.DefaultItems.props`:\r\n\r\n```\r\n<EmbeddedResource Include=\"**/*.resx\" Exclude=\"$(DefaultItemExcludes);$(DefaultExcludesInProjectFolder)\" Condition=\" '$(EnableDefaultEmbeddedResourceItems)' == 'true' \" />\r\n```\r\n\r\nResulting in the `GenerateResource` task throwing this error:\r\n```\r\nMicrosoft.Common.CurrentVersion.targets(2867,5): error MSB3552: Resource file \"**/*.resx\" cannot be found.\r\n```\r\n\r\nhttps://github.com/dotnet/cli/issues/6561\r\n\r\nIf it's difficult to properly fix this, could you please at least update the `resx` stuff in `Microsoft.Common.CurrentVersion.targets` so it doesn't fail due to this problem?",
        "createdAt": "2017-05-10T06:05:35Z",
        "updatedAt": "2017-05-10T06:06:36Z",
        "author": {
          "login": "Daniel15"
        }
      },
      {
        "body": "Just started getting this error from Travis CI [here](https://travis-ci.org/RehanSaeed/Schema.NET/jobs/249300823). My path doesn't even seem that long. \r\n\r\n> /usr/share/dotnet/sdk/1.0.1/Microsoft.Common.CurrentVersion.targets(2865,5): error MSB3552: Resource file \"**/*.resx\" cannot be found. [/home/travis/build/RehanSaeed/Schema.NET/Source/Schema.NET/Schema.NET.csproj]\r\n\r\nI guess my solution is to somehow tell Travis CI to put my code in folder at a lower level?",
        "createdAt": "2017-07-02T16:43:25Z",
        "updatedAt": "2017-07-02T16:51:46Z",
        "author": {
          "login": "RehanSaeed"
        }
      },
      {
        "body": "One cause for that error in web apps is node_modules. Older versions of npm\nhad very deep directory structures. If you're using npm, you should ensure\nthat it's the latest version rather than an older version like npm2. You\ncan run \"npm install --global npm\" to upgrade it.\n\nSent from my phone.\n\nOn Jul 2, 2017 9:43 AM, \"Muhammad Rehan Saeed\" <notifications@github.com>\nwrote:\n\nJust started getting this error from Travis CI here\n<https://travis-ci.org/RehanSaeed/Schema.NET/jobs/249300823>. My path\ndoesn't even seem that long.\n\n/usr/share/dotnet/sdk/1.0.1/Microsoft.Common.CurrentVersion.targets(2865,5):\nerror MSB3552: Resource file \"**/*.resx\" cannot be found.\n[/home/travis/build/RehanSaeed/Schema.NET/Source/\nSchema.NET/Schema.NET.csproj]\n\nI guess my solution is to somehow tell Travis CI to put my code in folder\nat a lower level.\n\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\n<https://github.com/Microsoft/msbuild/issues/406#issuecomment-312502798>,\nor mute the thread\n<https://github.com/notifications/unsubscribe-auth/AAFnHRWNLx_ydPYoDzxayCOS0jDk8oyIks5sJ8i2gaJpZM4G221q>\n.\n",
        "createdAt": "2017-07-02T18:39:17Z",
        "updatedAt": "2017-07-02T18:39:17Z",
        "author": {
          "login": "Daniel15"
        }
      },
      {
        "body": "Not using npm, just a simple class library.",
        "createdAt": "2017-07-02T19:39:41Z",
        "updatedAt": "2017-07-02T19:39:41Z",
        "author": {
          "login": "RehanSaeed"
        }
      },
      {
        "body": "Try running `find .` in your build script (which will recursively list all the files in the directory) and see if there's any very long paths. A long path **anywhere** in the directory will break the wildcard expansion.",
        "createdAt": "2017-07-02T19:42:55Z",
        "updatedAt": "2017-07-02T19:42:55Z",
        "author": {
          "login": "Daniel15"
        }
      },
      {
        "body": "@Daniel15 Thanks for the suggestion. Just tried that and this is what I found:\r\n\r\nThe longest path from the project causing the build error is **110 characters**:\r\n> /home/travis/build/RehanSaeed/Schema.NET/Source/Schema.NET/health-lifesci/MedicalGuidelineContraindication.cs\r\n\r\nThe longest path from another project in the solution is **118 characters**:\r\n> /home/travis/build/RehanSaeed/Schema.NET/Source/Schema.NET.Tool/Overrides/AddNumberTypeToMediaObjectHeightAndWidth.cs\r\n\r\nThese paths are well short of the 260 character max path, unless I'm missing something about Linux or MacOS where I'm running the `dotnet build` command.",
        "createdAt": "2017-07-05T13:25:02Z",
        "updatedAt": "2017-07-05T13:25:02Z",
        "author": {
          "login": "RehanSaeed"
        }
      },
      {
        "body": "i am totally blocked by this.  I am also on osx and having the same results as @RehanSaeed \r\nlooks like msbuild / dotnet core are not actually ready for unix :-/",
        "createdAt": "2017-09-08T15:52:34Z",
        "updatedAt": "2017-09-08T15:52:34Z",
        "author": {
          "login": "cellvia"
        }
      },
      {
        "body": "@RehanSaeed   for what its worth,  it seems like some issue with the hidden keys folder thats generated when launching debug session.  \r\n\r\nto solve this: i created a keys folder (not hidden), and then within that a file with the same filename as the one that had been generated in the hidden .keys folder.  i left the file empty.\r\n\r\nnow every time i build / launch it works fine...",
        "createdAt": "2017-09-08T18:38:04Z",
        "updatedAt": "2017-09-08T18:38:04Z",
        "author": {
          "login": "cellvia"
        }
      },
      {
        "body": "VM Ubuntu 17.04\r\n.net core 2.0\r\n\r\ndotnet build throws same issue.\r\n\r\nbasically i cannot deploy to production.\r\non local machine (OSX) builds fine.\r\n\r\ni don't see any '.keys' folder.\r\n\r\nThanks in advance.",
        "createdAt": "2017-09-22T12:21:49Z",
        "updatedAt": "2017-09-22T12:21:49Z",
        "author": {
          "login": "rashidovich"
        }
      },
      {
        "body": "Having same issue on both osx and ubuntu. Getting the latest version of npm did not help. Moving the project to root in order to shorten the path also did not work. No keys file either. Won't build locally or as a docker build on osx or ubuntu, but builds fine in a windows environment both locally and as docker build. ",
        "createdAt": "2017-12-21T20:36:48Z",
        "updatedAt": "2017-12-21T20:36:48Z",
        "author": {
          "login": "dasjestyr"
        }
      },
      {
        "body": "Can you try running `find . -name '*\\\\*'` in your project directory?",
        "createdAt": "2017-12-21T20:47:09Z",
        "updatedAt": "2017-12-21T20:47:09Z",
        "author": {
          "login": "radical"
        }
      },
      {
        "body": "@radical not sure if you were talking to me, but if I run it, it just returns a single file which is an NServiceBus log file.",
        "createdAt": "2017-12-21T20:57:12Z",
        "updatedAt": "2017-12-21T20:57:12Z",
        "author": {
          "login": "dasjestyr"
        }
      },
      {
        "body": "@dasjestyr I hit this issue too and have a workaround. The problem is that the wildcard expansion is skipped if there is any error while trying to expand the wildcard. And the `\\` in the path here gets converted to `/` on !windows and that causes a failure later. My workaround really just skips such a directory, and so doesn't really solve the issue. https://gist.github.com/radical/27ab744e235badd5f7b24dbfc85ec9af \r\nI will try to look at a proper solution later. But anyone else should feel free to take a stab at it meanwhile :)",
        "createdAt": "2017-12-21T21:13:48Z",
        "updatedAt": "2017-12-21T21:13:48Z",
        "author": {
          "login": "radical"
        }
      },
      {
        "body": "@dasjestyr um btw, was it a file or a directory for you? My patch might need to be fixed to handle files too. But this is a hack anyway.",
        "createdAt": "2017-12-21T21:15:02Z",
        "updatedAt": "2017-12-21T21:15:02Z",
        "author": {
          "login": "radical"
        }
      },
      {
        "body": "@radical It returned: \"./DAS.Gateways.Services.Api/C:\\Logs\\DAS\\DAS.Infrastructure\\log-{Date}.log\"",
        "createdAt": "2017-12-21T21:23:06Z",
        "updatedAt": "2017-12-21T21:23:28Z",
        "author": {
          "login": "dasjestyr"
        }
      },
      {
        "body": "@dasjestyr It should be breaking only for a directory. Could you run`$ file ./DAS.Gateways.Services.Api/C:\\Logs\\DAS\\DAS.Infrastructure\\log-{Date}.log`?",
        "createdAt": "2017-12-21T21:35:34Z",
        "updatedAt": "2017-12-21T21:35:34Z",
        "author": {
          "login": "radical"
        }
      },
      {
        "body": "./DAS.Gateways.Services.Api/C:LogsDASDAS.Infrastructurelog-{Date}.log: cannot open `./DAS.Gateways.Services.Api/C:LogsDASDAS.Infrastructurelog-{Date}.log' (No such file or directory)",
        "createdAt": "2017-12-21T21:40:40Z",
        "updatedAt": "2017-12-21T21:41:00Z",
        "author": {
          "login": "dasjestyr"
        }
      },
      {
        "body": "You missed the `\\`es in the path. Just check if `C:\\Logs\\DAS\\DAS.Infrastructure\\log-{Date}.log` is a directory or a file. I just want to confirm that I have the correct issue and we don't need to dig more.",
        "createdAt": "2017-12-21T21:44:03Z",
        "updatedAt": "2017-12-21T21:44:03Z",
        "author": {
          "login": "radical"
        }
      },
      {
        "body": "Oh, it's a directory",
        "createdAt": "2017-12-21T21:45:35Z",
        "updatedAt": "2017-12-21T21:45:35Z",
        "author": {
          "login": "dasjestyr"
        }
      },
      {
        "body": "@cellvia , thanks for solution of fixing this issue!\r\nWhere I need to create  keys folder?",
        "createdAt": "2017-12-24T22:01:32Z",
        "updatedAt": "2017-12-24T22:01:32Z",
        "author": {
          "login": "olehdutko"
        }
      },
      {
        "body": "The globbing seems to fail if any part of the traversal fails. In my case the problem was that the project output directory contained an NTFS junction that wasn't traversable, giving the same error as if it was traversable but longer than MAX_PATH. So being over MAX_PATH is not the only problem that gives these symptoms.\r\n\r\nThis is probably hard to fix for the general case with MAX_PATH, but it would be great if the globbing could report sensible errors, or even recover from some problems (e.g diagnostics that describe it did not glob one subdirectory because access was denied or a path was too long)  ",
        "createdAt": "2019-05-09T08:51:16Z",
        "updatedAt": "2023-10-24T17:53:54Z",
        "author": {
          "login": "andersforsgren"
        }
      },
      {
        "body": "If MSBuild can detect when an item group evaluation has reached MAX_PATH, at least log a normal or diagnostic log saying \"ItemGroup evaluation for X reached MAX_PATH at C:\\longpath... and will be discarded\" so that the user sees this is happening to them.\r\n\r\nWe ran into this issue internally due to a misbehaving program that generated a very long path which then causes MSBuild to suddenly stop building inexplicably because it couldn't expand a dirs.proj with an `<ProjectReferences Include=\"src/**/*.csproj\">`. I wish I could get back a day of trying to figure why my build suddenly broke :) ",
        "createdAt": "2021-06-21T17:18:06Z",
        "updatedAt": "2021-06-21T17:18:06Z",
        "author": {
          "login": "ghidalgo3"
        }
      },
      {
        "body": "@rainersigwald Would you be opposed to adding diagnostic logs when this situation is detected? I can make the change and raise a PR if you don't have any objections and if it would not be a breaking change.",
        "createdAt": "2021-06-21T22:22:19Z",
        "updatedAt": "2021-06-21T22:22:19Z",
        "author": {
          "login": "ghidalgo3"
        }
      },
      {
        "body": "@ghidalgo3 No, that sounds good. But I'm not sure the logging context is available at all the right places. Feel free to take a shot at it and put up a draft PR.\r\n\r\nA message wouldn't be a breaking change, but we'll have to balance chattiness/usefulness. For MAX_PATH it's likely always nice. For \"couldn't expand and falling back to literal\" in general, a lot of times that's intentional and we shouldn't always message.",
        "createdAt": "2021-06-24T15:07:53Z",
        "updatedAt": "2021-06-24T15:07:53Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Let's reboot this issue given there is support beyond Win32 MAX PATH now in .NET\r\n\r\ncc @jaredpar ",
        "createdAt": "2023-02-16T01:07:36Z",
        "updatedAt": "2023-02-16T01:07:55Z",
        "author": {
          "login": "mjsabby"
        }
      },
      {
        "body": "Curious: this issue seems to predate us having pretty solid long path support in .NET. Now though it's a fairly established feature and supported by our build tools. Given the current state of our tech is there a reason why this still needs to be unsupported? Basically can wildcards now expand beyond `MAX_PATH`? Or is there some limitation here that stops that even with us having good long path support?",
        "createdAt": "2023-02-16T01:08:30Z",
        "updatedAt": "2023-02-16T01:08:30Z",
        "author": {
          "login": "jaredpar"
        }
      },
      {
        "body": "@mjsabby what made you comment on this? Exceeding MAX_PATH in a glob should not hit this problem any more (in a context where long paths are supported, i.e. on modern OS with long paths enabled and anywhere outside of Visual Studio's `devenv.exe`).",
        "createdAt": "2023-02-16T14:26:12Z",
        "updatedAt": "2023-02-16T14:26:12Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> Basically can wildcards now expand beyond `MAX_PATH`?\r\n\r\nYes, in any case where the long-path support works, which is still not everywhere.\r\n\r\nThis issue is still open because any other I/O exception still triggers the silent assume-they-meant-a-literal-string-with-`*`-in-it behavior. I'll rename for clarity.",
        "createdAt": "2023-02-16T14:37:39Z",
        "updatedAt": "2023-02-16T14:37:39Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "cc @JeremyKuhne as both wildcards and max path are his thing.",
        "createdAt": "2023-02-16T17:22:44Z",
        "updatedAt": "2023-02-16T17:22:44Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "We have discussed in internally and would like to consider this approach:\r\n\r\nIf exception is thrown during globing consider in \"non-glob\" only if that patterns does not fit \"high-confident-glob-pattern\"\r\n\r\nHigh confident glob patterns could consist of most common patterns which indicates intent was almost sure a glob. Examples:\r\n- **\\*.ext\r\n- subFolder\\**\\*.ext\r\n- subFolder\\*.*\r\n- etc...\r\n\r\nSo if ItemSpec will fits high-confident-glob-pattern and it will fail we can log error leading customer to self-solving it.\r\n\r\n",
        "createdAt": "2023-10-24T14:15:26Z",
        "updatedAt": "2023-10-24T14:15:26Z",
        "author": {
          "login": "rokonec"
        }
      }
    ]
  }
}