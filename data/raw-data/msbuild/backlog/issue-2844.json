{
  "number": 2844,
  "title": "Well-known metadata not available when dynamically creating items",
  "body": "Well-known item metadata is not available during item creation for dynamically defined items (items defined within a Target). I am not super familiar with msbuild but this was surprising to me.\r\n\r\n### Steps to reproduce\r\n \r\nProject file\r\n```xml\r\n<Project>\r\n\r\n    <!-- Regular ol' items containing metadata defined from well-known metadata. %(Filename) and other\r\n         well-known metadata exist during creation, so ArbitraryMetadata is defined with the value of\r\n         Filename as expected -->\r\n    <ItemGroup>\r\n        <MyFileItems Include=\"myfiles\\*\" ArbitraryMetadata=\"%(Filename)\" />\r\n    </ItemGroup>\r\n\r\n    <Target Name=\"MyTarget\">\r\n\r\n        <!-- Works as expected -->\r\n        <Message Importance=\"high\" Text=\"%(MyFileItems.Identity) -> %(MyFileItems.ArbitraryMetadata)\" />\r\n\r\n        <!-- Now dynamically (within the Target) define another item list the same way -->\r\n        <ItemGroup>\r\n            <MyDynamicFileItems Include=\"myfiles\\*\" ArbitraryMetadata=\"%(Filename)\" />\r\n        </ItemGroup>\r\n\r\n        <!-- Unexpected: ArbitraryMetdata is empty, because %(Filename) and all other well-known metadata\r\n             was not defined during creation -->\r\n        <Message Importance=\"high\" Text=\"%(MyDynamicFileItems.Identity) -> %(MyDynamicFileItems.ArbitraryMetadata)\" />\r\n\r\n        <!-- Note that %(Filename) and other well-known metadata *is* available now that the item list has\r\n             already been created -->\r\n         <Message Importance=\"high\" Text=\"%(MyDynamicFileItems.Identity) -> %(MyDynamicFileItems.Filename)\" />\r\n    </Target>\r\n\r\n</Project>\r\n```\r\n\r\nDirectory contents:\r\n```\r\n/\r\n- repro.proj\r\n- myfiles/\r\n     - file1\r\n     - file2\r\n     - file3\r\n```\r\n\r\nCommand line\r\n```\r\nmsbuild repro.proj /t:MyTarget\r\n```\r\n### Expected  behavior\r\nPrints:\r\n```\r\n  myfiles\\file1 -> file1\r\n  myfiles\\file2 -> file2\r\n  myfiles\\file3 -> file3\r\n  myfiles\\file1 -> file1\r\n  myfiles\\file2 -> file2\r\n  myfiles\\file3 -> file3\r\n  myfiles\\file1 -> file1\r\n  myfiles\\file2 -> file2\r\n  myfiles\\file3 -> file3\r\n```\r\n\r\n### Actual behavior\r\nPrints:\r\n```\r\n  myfiles\\file1 -> file1\r\n  myfiles\\file2 -> file2\r\n  myfiles\\file3 -> file3\r\n  myfiles\\file1 -> \r\n  myfiles\\file2 -> \r\n  myfiles\\file3 -> \r\n  myfiles\\file1 -> file1\r\n  myfiles\\file2 -> file2\r\n  myfiles\\file3 -> file3\r\n```\r\n\r\n### Environment data\r\n`msbuild /version` output:\r\n\r\n```\r\nMicrosoft (R) Build Engine version 15.4.8.50001 for .NET Framework\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n15.4.8.50001\r\n```\r\n\r\nOS info:\r\n`Microsoft Windows [Version 10.0.16299.192]`\r\n\r\nIf applicable, version of the tool that invokes MSBuild (Visual Studio, dotnet CLI, etc):\r\n\r\nI'm seeing this behavior everywhere - VS, dotnet, running msbuild manually.",
  "state": "OPEN",
  "createdAt": "2018-01-06T00:05:55Z",
  "updatedAt": "2024-02-21T16:35:05Z",
  "closedAt": null,
  "author": {
    "login": "nickwalkmsft"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "I've encountered this today when creating a target which would include content created in a previous target.\r\nThe `Filename` metadata was not available within the item group definition but it was available in the step right after.\r\n\r\n**Not working**\r\n```xml\r\n<Target Name=\"IncludeFrontendDist\" AfterTargets=\"YarnBuild\">\r\n  <ItemGroup>\r\n    <Content Include=\"$(SolutionDir)/../frontend/dist/*\">\r\n      <TargetPath>wwwroot/%(Filename)%(Extension)</TargetPath>\r\n      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>\r\n    </Content>\r\n  </ItemGroup>\r\n</Target>\r\n```\r\n\r\n**Working**\r\n```xml\r\n<Target Name=\"IncludeFrontendDist\" AfterTargets=\"YarnBuild\">\r\n  <ItemGroup>\r\n    <FrontendFiles Include=\"$(SolutionDir)/../frontend/dist/*\" />\r\n    <Content Include=\"@(FrontendFiles)\">\r\n      <TargetPath>wwwroot/%(FrontendFiles.Filename)%(FrontendFiles.Extension)</TargetPath>\r\n      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>\r\n    </Content>\r\n  </ItemGroup>\r\n</Target>\r\n```\r\n\r\nMoreover, due to this being an ASP.NET Core application with some Razor content, the error message was very confusing, because it was pulling `Filename` property from previously defined Content items.\r\n```\r\nTwo assets found targeting the same path with incompatible asset kinds:\r\n'..\\frontend\\dist\\file1.js' with kind 'All'\r\n'..\\frontend\\dist\\file2.js' with kind 'All'\r\nfor path 'PreviouslyInContent.cshtml'\r\n```",
        "createdAt": "2023-06-04T11:42:36Z",
        "updatedAt": "2023-06-04T11:42:36Z",
        "author": {
          "login": "manio143"
        }
      },
      {
        "body": "There was a warning added in <https://github.com/dotnet/msbuild/pull/8581>.  Does that trigger in your scenario?",
        "createdAt": "2023-06-04T13:11:32Z",
        "updatedAt": "2023-06-04T13:11:32Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "No, the warning was not shown. My MSBuild version (SDK 7.0.302) 17.6.1+8ffc3fe3d\r\nThat PR will make it into the next SDK release I think.",
        "createdAt": "2023-06-04T20:25:22Z",
        "updatedAt": "2023-06-04T20:25:22Z",
        "author": {
          "login": "manio143"
        }
      }
    ]
  }
}