{
  "number": 9662,
  "title": "[Bug]: .NET 9.0 Alpha build fails in Windows 1809 Docker containers with Terminal Logger error",
  "body": "### Issue Description\n\nWe're seeing this issue consistently with the latest .NET 9.0 alpha builds in our Windows Server Core 2019 and Nanoserver 1809 SDK images. The project is created with the `dotnet new web` command, and started failing with the SDK version 9.0.100-alpha.1.24058.1. The last known good SDK that we have is 9.0.100-alpha.1.24053.3.\r\n\r\n```\r\n MSBUILD : error MSB4015: The build stopped unexpectedly because the \"TerminalLog\r\n ger\" logger failed unexpectedly during shutdown.\\x1b[32X\\x1b[32C\r\n System.IO.IOException: The parameter is incorrect.\\x1b[30X\\x1b[30C\r\n    at System.ConsolePal.SetConsoleOutputEncoding(Encoding enc)\\x1b[18X\\x1b[18C\r\n    at System.Console.set_OutputEncoding(Encoding value)\\x1b[25X\\x1b[25C\r\n    at Microsoft.Build.Logging.TerminalLogger.TerminalLogger.Shutdown()\\x1b[10X\\x1b[10C\r\n    at Microsoft.Build.BackEnd.Logging.LoggingService.ShutdownLogger(ILogger logger)\r\n```\r\n\r\nPlease excuse the weird text formatting - I didn't want to cut anything off in case it's important.\r\n\r\n(here's a link to failing pipeline run that was pulled from: https://dev.azure.com/dnceng-public/public/_build/results?buildId=531306&view=logs&j=993563f7-f5c3-53cf-2b69-c3a3c7bb299e&t=4e281778-b663-5be4-ed90-ae0bb7f6fb0d&l=336)\n\n### Steps to Reproduce\n\nI am unable to reproduce this issue on my local machine, but we are experiencing it consistently in our CI. If there are any additional diagnostic steps you want me to perform, let me know.\n\n### Expected Behavior\n\nThe build completes successfully.\n\n### Actual Behavior\n\n```\r\n MSBUILD : error MSB4015: The build stopped unexpectedly because the \"TerminalLog\r\n ger\" logger failed unexpectedly during shutdown.\\x1b[32X\\x1b[32C\r\n System.IO.IOException: The parameter is incorrect.\\x1b[30X\\x1b[30C\r\n    at System.ConsolePal.SetConsoleOutputEncoding(Encoding enc)\\x1b[18X\\x1b[18C\r\n    at System.Console.set_OutputEncoding(Encoding value)\\x1b[25X\\x1b[25C\r\n    at Microsoft.Build.Logging.TerminalLogger.TerminalLogger.Shutdown()\\x1b[10X\\x1b[10C\r\n    at Microsoft.Build.BackEnd.Logging.LoggingService.ShutdownLogger(ILogger logger)\r\n```\n\n### Analysis\n\n_No response_\n\n### Versions & Configurations\n\n_No response_",
  "state": "CLOSED",
  "createdAt": "2024-01-18T18:28:02Z",
  "updatedAt": "2024-05-24T15:07:29Z",
  "closedAt": "2024-05-24T15:07:29Z",
  "author": {
    "login": "lbussell"
  },
  "labels": [
    "bug",
    "triaged",
    "Area: Terminal Logger"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "AR-May"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Looks like there are two bugs here:\r\n\r\n1. The crash\r\n2. We aren't detecting redirection and are junking up that output with control codes, when we shouldn't be.\r\n\r\nI would normally prioritize the crash but here that seems less bad than that we're using TL in this scenario at all.",
        "createdAt": "2024-01-18T18:41:47Z",
        "updatedAt": "2024-01-18T18:41:47Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Agree with Rainer's assessment - we don't intend for TL to run in CI scenarios generally speaking (though it would be fine for it to run in a Docker context for example if the user ran a 'docker run -it SOME_SDK_IMAGE' command).",
        "createdAt": "2024-01-18T18:56:51Z",
        "updatedAt": "2024-01-18T18:56:51Z",
        "author": {
          "login": "baronfel"
        }
      },
      {
        "body": "Maybe you want to condition on `DOTNET_RUNNING_IN_CONTAINER`?",
        "createdAt": "2024-01-18T21:40:11Z",
        "updatedAt": "2024-01-18T21:40:11Z",
        "author": {
          "login": "lbussell"
        }
      },
      {
        "body": "> 2. We aren't detecting redirection and are junking up that output with control codes, when we shouldn't be.\r\n\r\nThe logs were obtained with `docker logs <containername>` if that makes any difference there.\r\n",
        "createdAt": "2024-01-18T21:41:51Z",
        "updatedAt": "2024-01-18T21:42:13Z",
        "author": {
          "login": "lbussell"
        }
      },
      {
        "body": "> Maybe you want to condition on `DOTNET_RUNNING_IN_CONTAINER`?\r\n\r\nThis isn't general enough - we're trying to go for a capability-based detection approach. We check things like if a TTY is available, or if the StdOut has been redirected, or if the terminal that is present supports certain control codes. I want to figure out more about why the checks we have in place didn't work in this specific circumstance - it might be a category of detection that we've missed.",
        "createdAt": "2024-01-18T21:46:03Z",
        "updatedAt": "2024-01-18T21:46:03Z",
        "author": {
          "login": "baronfel"
        }
      },
      {
        "body": "@lbussell I am trying to repro or find more information about this bug. Unfortunately, the link to the CI build with repro in the description already expired. Do you have a more recent failed build? ",
        "createdAt": "2024-03-22T14:29:18Z",
        "updatedAt": "2024-03-22T14:29:18Z",
        "author": {
          "login": "AR-May"
        }
      },
      {
        "body": "I tried to repro this today and wasn't able to - I'll re-enable our test and re-open this issue if I see it again.",
        "createdAt": "2024-05-06T16:08:29Z",
        "updatedAt": "2024-05-06T16:08:29Z",
        "author": {
          "login": "lbussell"
        }
      },
      {
        "body": "@AR-May I spoke too soon. The problem still exists. Here it is in our CI [MSFT internal link]: https://dev.azure.com/dnceng/internal/_build/results?buildId=2445932&view=logs&j=8fbd142f-3569-5a30-ef1a-e765423f275f&t=c48e8e47-6fa0-5956-a580-dcc0382d12b7&l=452\r\n\r\nWe are reading the logs out of a Docker container, so there seems to be some weirdness with the formatting. If there are any specific troubleshooting steps you'd like me to do in this scenario, I can do that.",
        "createdAt": "2024-05-06T18:35:57Z",
        "updatedAt": "2024-05-06T18:35:57Z",
        "author": {
          "login": "lbussell"
        }
      },
      {
        "body": "So, I was able to repo the TL detection issue locally. Not a crash though.\r\n\r\nThe dotnet build is called inside the docker container running with \"-t\" option (which is for allocating a pseudo-TTY). The fact that it runs in the pipeline and the pipeline output is redirected does not matter. The StdOut is not redirected during the build in the docker because I think that docker captures logs using the terminal emulator without a redirection. \r\n\r\n@baronfel should we change our detection given what I found out? I cannot think of anything more targeted than \"do not run TL in the docker container\".",
        "createdAt": "2024-05-20T15:56:05Z",
        "updatedAt": "2024-05-20T15:56:05Z",
        "author": {
          "login": "AR-May"
        }
      },
      {
        "body": "I wouldn't suggest that - many actual-editor scenarios would use TL while in the context of a Docker container. For example, the VSCode editor supports a concept called [devcontainers](https://code.visualstudio.com/docs/devcontainers/containers) - these are broadly used to ensure a reproducible environment for contributors to a project.  As a result, we _should not_ do any sort of Docker-based disablement of TL.\r\n\r\nSince the build in question is 'driving' Docker-based builds and knows they don't want TL output, I'd suggest that for this specific use case @lbussell should use the parameters/knobs to disable TL for this one step - either the environment variable or the explicit parameter would do (though I expect the environment variable would be easier to pass).",
        "createdAt": "2024-05-20T16:02:05Z",
        "updatedAt": "2024-05-20T16:02:05Z",
        "author": {
          "login": "baronfel"
        }
      },
      {
        "body": "I agree, we will not want to disable it for all such scenarios. \r\n@lbussell You can find how to opt out of TL for you test case [on this page](https://learn.microsoft.com/en-us/dotnet/core/compatibility/sdk/9.0/terminal-logger#recommended-action).",
        "createdAt": "2024-05-20T16:09:48Z",
        "updatedAt": "2024-05-20T16:09:48Z",
        "author": {
          "login": "AR-May"
        }
      }
    ]
  }
}