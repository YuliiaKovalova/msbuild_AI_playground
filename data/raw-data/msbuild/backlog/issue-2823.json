{
  "number": 2823,
  "title": "msbuild doesn't copy c++ referenced content file into c# output dir",
  "body": "### Steps to reproduce\r\n\r\none solution including:\r\none c# project\r\none c++ project\r\nx64 solution configuration, including c++ as x64, and c# as Any Cpu (or x64 - doesn't matter)\r\nin the csproj file add:\r\n```xml\r\n<ProjectReference Include=\"..\\cpplinux\\cpplinux.vcxproj\">\r\n      <ReferenceOutputAssembly>false</ReferenceOutputAssembly>\r\n      <OutputItemType>Content</OutputItemType>\r\n      <CopyToOutputDirectory>Always</CopyToOutputDirectory>\r\n</ProjectReference>\r\n```\r\n\r\nCommand line\r\n```\r\nmsbuild solution.sln /m /t:rebuild /p:configuration=debug /p:platform=x64\r\n```\r\n### Expected  behavior\r\nthe native dll should be copied over to the output of the c# project\r\n\r\n### Actual behavior\r\nthe native dll is not copied over to the output of the c# project\r\n\r\n### Environment data\r\n`msbuild /version` output:\r\nMicrosoft (R) Build Engine version 15.3.409.57025 for .NET Framework\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n15.3.409.57025\r\n\r\nOS info:\r\n\r\nWindows 10, Visual Studio 2017\r\n\r\n\r\nMore info:\r\nIn visual studio - this works fine.\r\nI have reduced my debugging to `Microsoft.Common.CurrentVersion.targets`, to where `QUIRKING FOR DEV10` exists. Seems like adding `GetTargetPath` to the msbuild task that has the following comment -\r\n `Build referenced projects when building from the command line.` - makes it work.\r\nAlso, setting DesignTimeBuild to true - solves this, but dependencies are not built in the correct order - so in the end this is not a solution.\r\n",
  "state": "OPEN",
  "createdAt": "2017-12-25T11:20:07Z",
  "updatedAt": "2024-07-17T23:50:51Z",
  "closedAt": null,
  "author": {
    "login": "levhaikin"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "I changed:\r\n`Targets=\"%(_MSBuildProjectReferenceExistent.Targets)\"`\r\nto\r\n`Targets=\"%(_MSBuildProjectReferenceExistent.Targets);GetTargetPath\"`\r\n\r\nIt seems that it solved it, without doing any other harm (at least nothing I noticed). Could that be the root cause?",
        "createdAt": "2017-12-25T12:51:06Z",
        "updatedAt": "2017-12-25T15:07:59Z",
        "author": {
          "login": "levhaikin"
        }
      },
      {
        "body": "adding GetTargetPath breaks other things, such as multithreaded build execution.\r\nCurrent solution, that do seem to work is to add: `<Targets>Build;BuiltProjectOutputGroup</Targets>` to the `ProjectReference` section.\r\n\r\nIs that correct?",
        "createdAt": "2017-12-25T16:38:18Z",
        "updatedAt": "2017-12-25T16:38:18Z",
        "author": {
          "login": "levhaikin"
        }
      },
      {
        "body": "What's going on here?\r\nAnybody available from the MSBuild team?\r\n\r\n**Here an overview:**\r\n- This issue: https://github.com/Microsoft/msbuild/issues/2823\r\n- https://developercommunity.visualstudio.com/content/problem/26895/c-references-are-not-copied-to-target-location.html\r\n- https://blogs.msdn.microsoft.com/yingqin/2013/03/13/integrate-native-c-project-with-managed-c-projects/\r\n",
        "createdAt": "2018-03-31T14:10:11Z",
        "updatedAt": "2018-03-31T14:10:11Z",
        "author": {
          "login": "DoCode"
        }
      },
      {
        "body": "You can try this one, it worked for me both from command line and VS\r\n(msbuild 15.7.177.53362): \r\n**ProjectReference in csproj:** \r\n```\r\n    <ProjectReference Include=\"..\\MyVcx\\My.vcxproj\">\r\n      <Project>{ProjectGuid}</Project>\r\n      <Name>projectname</Name>\r\n    </ProjectReference>\r\n\r\n```\r\n**In My.vcxproj:** add\r\n```\r\n  <ItemGroup>\r\n....\r\n    <Content Include=\"$(TargetPath)\" >\r\n      <Link>%(Filename)%(Extension)</Link>\r\n      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>\r\n    </Content>\r\n...\r\n  <!-- You can also add this for PDB -->\r\n    <Content Include=\"$(TargetPath.Replace('.dll', '.pdb'))\" >\r\n      <Link>%(Filename)%(Extension)</Link>\r\n      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>\r\n    </Content>\r\n  </ItemGroup>\r\n```\r\n",
        "createdAt": "2018-12-14T16:40:52Z",
        "updatedAt": "2018-12-31T15:51:41Z",
        "author": {
          "login": "Alexander-Bartosh"
        }
      },
      {
        "body": "@Alexander-Bartosh's solution of adding a `<Content>` element worked a treat for me.",
        "createdAt": "2018-12-18T15:42:17Z",
        "updatedAt": "2018-12-18T15:42:17Z",
        "author": {
          "login": "Alexei-B"
        }
      },
      {
        "body": "@levhaikin I just hit this issue too, and came to the same conclusion and a solution as you did. Thanks for reporting it. Shame to see this still isn't fixed upstream!",
        "createdAt": "2024-07-17T23:50:50Z",
        "updatedAt": "2024-07-17T23:50:50Z",
        "author": {
          "login": "jeremy-visionaid"
        }
      }
    ]
  }
}