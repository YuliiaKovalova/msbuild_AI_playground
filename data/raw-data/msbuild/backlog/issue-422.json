{
  "number": 422,
  "title": "ToolTask.cs replaces all backslashes with forward-slashes in response files",
  "body": "See https://github.com/Microsoft/msbuild/blob/xplat/src/Utilities/ToolTask.cs#L1598\n\nFrom some comments in the file, it seems like this is just a temporary workaround to get things up and running x-plat (i.e. to quickly normalize all file paths): https://github.com/Microsoft/msbuild/blob/xplat/src/Utilities/ToolTask.cs#L1510\n\n``` CSharp\n// This is a hack..!\n```\n\nI just wanted to point out that I think this is causing us some issues when compiling VB projects for us in the corefx repo. The VB response file has some define constants in it, and the values for those contain strings that are escaped with backslashes. For example:\n\n```\n-define: \"CONFIG=\\\"Debug\\\"\n```\n\nWhen Tooltask runs, it normalizes it to this\n\n```\n-define: \"CONFIG=/\"Debug/\"\n```\n\nThis is no longer valid, and the VB compiler errors out. This is preventing us in corefx from building VB projects in x-plat builds. We only have one such project, so right now we just disabled the build for that when outside of Windows.\n",
  "state": "CLOSED",
  "createdAt": "2016-01-08T19:18:48Z",
  "updatedAt": "2024-02-21T17:29:25Z",
  "closedAt": "2017-05-22T18:03:53Z",
  "author": {
    "login": "mellinoe"
  },
  "labels": [
    ".NET Core",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "MSBuild 15.3"
  },
  "comments": {
    "nodes": [
      {
        "body": "https://github.com/Microsoft/msbuild/issues/137 for VB only is a subset of this.",
        "createdAt": "2017-05-18T21:21:51Z",
        "updatedAt": "2017-05-18T21:21:51Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "https://github.com/Microsoft/msbuild/pull/2114 provides two types of fix a mechanism for this: it avoids correcting slashes that precede a `\"` character (which fixes the immediate VB define problem), and it provides a new method `AdjustCommandsForOperatingSystem` that an OS-aware `ToolTask` can override to either apply tool-specific heuristics or do nothing.\r\n\r\nThis doesn't fully solve the problem, but I don't know how much better we can do.\r\n\r\n**Please comment on this issue if** you've found another tool that encounters this type of problem, or if you have an idea about how to make a fully general default implementation of `AdjustCommandsForOperatingSystem`.",
        "createdAt": "2017-05-22T18:03:53Z",
        "updatedAt": "2017-05-22T18:03:53Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}