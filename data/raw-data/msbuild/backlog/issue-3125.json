{
  "number": 3125,
  "title": "Consider testing command lines to identify worker nodes",
  "body": "See https://github.com/Microsoft/msbuild/pull/3106#discussion_r176604238\r\n\r\nCurrently, in .NET Core, MSBuild will find _all_ processes running in the `dotnet` host and attempt to connect to them as though they were MSBuilds. That shouldn't interfere with the other processes unless they have a named pipe named `MSBuild{pid}`, but it takes time during the node-connection process.\r\n\r\nWe should explore narrowing down the candidate processes beforehand. We could for example examine process command lines for `/nodereuse:true` and/or `MSBuild.dll`.\r\n\r\nQuestions that need to be answered:\r\n\r\n- [ ] How can this be done at all? AFAIK, there's no unified .NET API to get command lines of other processes on all platforms, so it might have to be platform-specific.\r\n- [ ] Is this faster than the current approach? Examining command lines will take some time.",
  "state": "OPEN",
  "createdAt": "2018-03-23T15:25:24Z",
  "updatedAt": "2024-02-21T16:34:27Z",
  "closedAt": null,
  "author": {
    "login": "rainersigwald"
  },
  "labels": [
    "help wanted",
    ".NET Core",
    "backlog",
    "Area: Performance",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "In terms of speed, writing to the pipe means IO and reading the commandline might mean some os calls, if it's not cached in .net.",
        "createdAt": "2018-03-23T18:02:56Z",
        "updatedAt": "2018-03-23T18:02:56Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "Since nodes creating is controlled by main node and nodes have incremental ID. We could create pipe name based on node HostContext data and node id and test existence of node by that named pipe. I did it similarly in my RAR service prototype.\r\nAlso having deterministic unique node string id would allowed us to test for named mutex which would be probably faster than named pipe probe.",
        "createdAt": "2021-04-16T10:56:49Z",
        "updatedAt": "2021-04-16T10:56:49Z",
        "author": {
          "login": "rokonec"
        }
      },
      {
        "body": "During implementation of this I would like to also address perf issue of GetCurrentProcess().SessionId which took up to 10ms on both sides of connection, delaying node creation by 20 ms.",
        "createdAt": "2021-04-16T10:58:09Z",
        "updatedAt": "2021-04-16T10:58:09Z",
        "author": {
          "login": "rokonec"
        }
      },
      {
        "body": "Another thing we can consider is spawning worker nodes as `msbuild.exe` even on .NET 5, instead of as `dotnet.exe path\\to\\msbuild.dll`. That would require sdk/installer work but would be more understandable in Task Manager/`ps`. But it wouldn't help here if we adopted your new name scheme.\r\n\r\n> We could create pipe name based on node HostContext data and node id and test existence of node by that named pipe.\r\n\r\nThis works great in the connecting-to-idle-node case, but how would we handle the \"a build is already running and started nodes but they're all busy and we need to connect to a new set\" case? Otherwise this sounds great and I wish I'd thought of it :)",
        "createdAt": "2021-04-16T14:32:23Z",
        "updatedAt": "2021-04-16T14:32:23Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "When you call NamedPipeClientStream.Connect(timeout: 0) it finishes relatively fast. As soon as it finds the other side is not waiting for connection, which they are not because they are working and will start wait for connection after its done.\r\nIf above is too slow, because every node have deterministic unique node string id, we can also check named computer wide mutex. Node would lock the mutex when is busy and unlock when is free and we would check if mutex is locked or not. We can have two mutexes one for node existence, other for node busy/free state.",
        "createdAt": "2021-04-16T14:59:35Z",
        "updatedAt": "2021-04-16T15:00:58Z",
        "author": {
          "login": "rokonec"
        }
      },
      {
        "body": "I expect attempting to connect with timeout 0 would be fine; my question was more: if we try to connect to `MSBuild_17.0.1_Node3` and it fails, we still want to make and connect to another node. What would the pipe name be?",
        "createdAt": "2021-04-16T15:09:36Z",
        "updatedAt": "2021-04-16T15:09:36Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "We have node id between 1..maxNodes. By scanning all known possible names MSBuild_17.0.1_Node{nodeId} we will know which reusable nodes are running and which are busy. If we need to acquire nodes when another paralel build uses them or they are broken we could have 'infinite' sequential scan:\r\n``` C#\r\nfor (int i=s_lastAcquiredNodeId; ;i++) {\r\n  var nodeUid = $\"MSBuild_17.0.1_Node{i}\";\r\n  if (isNodeProcessRunning(nodeUid)) \r\n    if (isNodeFree(nodeUid))\r\n      if(Acquire(nodeUid))\r\n        break;\r\n  else\r\n    if(CreateAndAcquire(nodeUid))\r\n      break;\r\n}\r\ns_lastAcquiredNodeId = i;\r\n\r\nVerify.Throw(s_acquiredNodes.Count() <= maxNodes);\r\n```\r\n",
        "createdAt": "2021-04-16T15:28:22Z",
        "updatedAt": "2021-04-16T15:30:51Z",
        "author": {
          "login": "rokonec"
        }
      },
      {
        "body": ">  I would like to also address perf issue of GetCurrentProcess().SessionId \r\n\r\nI'm guessing the issue is that `GetCurrentProcess()` is expensive. This is why eg we added Environment.GetProcessPath to replace getting the process. \r\n\r\nIf you need it I suppose one option is to write your own code for one or more OS. For Windows it might be faster to get Environment.ProcessId, which just wraps Win32 GetProcessId(), then pass it to Win32 ProcessIdToSessionId()\r\n\r\nhttps://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-processidtosessionid\r\n\r\nhttps://github.com/dotnet/runtime/blob/01b7e73cd378145264a7cb7a09365b41ed42b240/src/libraries/System.Diagnostics.Process/tests/Interop.cs#L58\r\n\r\nLinux would need something else. Again, no data just thinking aloud.",
        "createdAt": "2021-04-29T18:38:48Z",
        "updatedAt": "2021-04-29T18:38:48Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "@danmoseley GetCurrentProcess().SessionId is part of handshake of MSBuild node named pipe connection, however from the MSBuild code it is not obvious for what we actually need it. I believe we don't need it at all. Roslyn compiler service do not have it in its handshake.",
        "createdAt": "2021-04-30T07:28:58Z",
        "updatedAt": "2021-04-30T07:28:58Z",
        "author": {
          "login": "rokonec"
        }
      },
      {
        "body": "It's clearly not for security reasons as the handshake can't be trusted. I am curious whether enumerating processes as we do will even return processes from another session. In fact I'm am not sure whether one can have two concurrent sessions with the same user account.",
        "createdAt": "2021-04-30T14:24:11Z",
        "updatedAt": "2021-04-30T14:24:11Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "My guess, although I'm not sure, is that it was not added for a good reason, but merely because it seemed like it was easy to add so that it was not necessary to reason about whether it's necessary. So it could likely be removed.",
        "createdAt": "2021-04-30T14:25:51Z",
        "updatedAt": "2021-04-30T14:25:51Z",
        "author": {
          "login": "danmoseley"
        }
      }
    ]
  }
}