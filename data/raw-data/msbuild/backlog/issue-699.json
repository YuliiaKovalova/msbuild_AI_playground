{
  "number": 699,
  "title": "Remove boilerplate XML",
  "body": "**This issue is in the open design phase and is a part of the [project.json -> csproj](https://blogs.msdn.microsoft.com/dotnet/2016/05/23/changes-to-project-json/) conversion effort.**\n### Terser MSBuild syntax - Make the syntax less verbose (more compressed XML).\n\n**Can we remove:**\n- [x] XML tag (assume UTF8 unless specified)\n- [x] XML Namespace \n\n**Open Issues**\n- There may be impact to XML parsing/editing tools\n\nNote: there is much improvement to be done in the default template for MSBuild projects that does not involve Core MSBuild changes.\n\nSee: [roslyn-project-system feature](https://github.com/dotnet/roslyn-project-system/issues?q=is%3Aissue+is%3Aopen+label%3A%22Feature+-+Project+File+Cleanup%22)\n",
  "state": "CLOSED",
  "createdAt": "2016-06-15T23:20:47Z",
  "updatedAt": "2024-02-21T17:27:44Z",
  "closedAt": "2016-09-27T20:25:57Z",
  "author": {
    "login": "Sarabeth-Jaffe-Microsoft"
  },
  "labels": [
    "Feature - Project File Cleanup",
    "Feature Request",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Visual Studio 15 Preview 5"
  },
  "comments": {
    "nodes": [
      {
        "body": "Another thing we can do here is demote this message\n\n```\nProject file contains ToolsVersion=\"\". This toolset may be unknown or missing, in which case you may be able to resolve this by installing the appropriate version of MSBuild, or the build may have been forced to a particular ToolsVersion for policy reasons. Treating the project as if it had ToolsVersion=\"15.0\". For\n more information, please see http://go.microsoft.com/fwlink/?LinkId=293424.\n```\n\nTo a much lower verbosity.\n",
        "createdAt": "2016-07-08T16:43:37Z",
        "updatedAt": "2016-07-08T16:43:37Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Or remove the ToolsVersion warning entirely.\n",
        "createdAt": "2016-07-26T22:05:22Z",
        "updatedAt": "2016-07-26T22:05:22Z",
        "author": {
          "login": "mhutch"
        }
      },
      {
        "body": "What point is the ToolsVersion warning, when you ignore it now?\n",
        "createdAt": "2016-08-31T23:39:22Z",
        "updatedAt": "2016-08-31T23:39:22Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "Yeah, I'm convinced that we should get rid of it entirely.\n",
        "createdAt": "2016-08-31T23:40:24Z",
        "updatedAt": "2016-08-31T23:40:24Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@AndyGerlicher thoughts? ^\n",
        "createdAt": "2016-08-31T23:53:17Z",
        "updatedAt": "2016-08-31T23:53:17Z",
        "author": {
          "login": "Sarabeth-Jaffe-Microsoft"
        }
      },
      {
        "body": "Just a quick 2\u00a2 on this issue: I highly suggest _not_ removing the XML namespace, as that is what enables Visual Studio\u2019s excellent XML IntelliSense support. Whenever I hand-edit MSBuild, I rely on this IntelliSense to keep me sane and highly productive. (Hard-coding `*.csproj` et al in VS to enable this IntelliSense is also a bad idea, by the way, because MSBuild files don\u2019t always have a \"recognized\" extension, or even follow the `*.*proj` naming convention.)\n",
        "createdAt": "2016-09-18T00:42:56Z",
        "updatedAt": "2016-09-18T00:42:56Z",
        "author": {
          "login": "wjk"
        }
      },
      {
        "body": "> Just a quick 2\u00a2 on this issue: I highly suggest _not_ removing the XML namespace, as that is what enables Visual Studio\u2019s excellent XML IntelliSense support. Whenever I hand-edit MSBuild, I rely on this IntelliSense to keep me sane and highly productive. (Hard-coding `*.csproj` et al in VS to enable this IntelliSense is also a bad idea, by the way, because MSBuild files don\u2019t always have a \"recognized\" extension, or even follow the `*.*proj` naming convention.)\n\n@davkean, can you comment on what the intellisense experience will be like if you open an MSBuild file that doesn't have the XML namespace in it in Visual Studio?  \n",
        "createdAt": "2016-09-19T15:25:14Z",
        "updatedAt": "2016-09-19T15:25:14Z",
        "author": {
          "login": "dsplaisted"
        }
      },
      {
        "body": "FWIW, I'm not sure I've ever found the IntelliSense with the XSD to be useful as it only works for the elements defined in the XSD, which is a pretty tiny subset of what's actually available, and very rarely what I need.\n\nI actually ended up writing my own code completion engine for Xamarin Studio :)\n",
        "createdAt": "2016-09-19T16:46:01Z",
        "updatedAt": "2016-09-19T16:46:01Z",
        "author": {
          "login": "mhutch"
        }
      },
      {
        "body": "If I open page with xmlns: http://schemas.microsoft.com/developer/msbuild/2003 I get error: The resource you are looking for has been removed, had its name changed, or is temporarily unavailable.\n",
        "createdAt": "2016-09-19T16:47:03Z",
        "updatedAt": "2016-09-19T16:47:20Z",
        "author": {
          "login": "mfilippov"
        }
      },
      {
        "body": "@mhutch True, but it\u2019s better than nothing. Interestingly, the MSBuild schema is split over three files (the \"core\" MSBuild items, the items provided by in-box VS extensions, and a third that is mostly empty). This mostly empty schema is there so you can add your own properties/items and have them picked up by Visual Studio. Unfortunately, this file is machine-global and requires Administrator privileges to edit (not to mention it could be overwritten at any time by a VS update), so it\u2019s not an ideal solution. I suppose if you add the MSBuild schemas from this repo locally, you could edit them without any problems, but Visual Studio might give you grief regarding which schema to use (the one in the solution or the one installed by VS).\n\n@mfilippov That is to be expected. XML namespaces very rarely point to actual Web resources, even though they almost always look like they would. There is a file installed by Visual Studio that maps XML namespace strings to the XSD schema files that define the valid syntax for that namespace.\n",
        "createdAt": "2016-09-19T19:57:45Z",
        "updatedAt": "2016-09-19T19:57:45Z",
        "author": {
          "login": "wjk"
        }
      },
      {
        "body": "Right, but the best way is to scan the targets and build completion from that :)\n\n![MSBuild expression completion](https://pbs.twimg.com/media/Ciy0PGjWgAE-wlx.jpg:large)\n",
        "createdAt": "2016-09-19T22:00:11Z",
        "updatedAt": "2016-09-19T22:00:11Z",
        "author": {
          "login": "mhutch"
        }
      },
      {
        "body": "The JSON editor in Visual Studio provides a pretty reasonable approach to mapping schemas to instance documents without namespaces.\n![image](https://cloud.githubusercontent.com/assets/447694/18892122/41ec36f8-84d6-11e6-96ce-432c5ab47d2f.png)\n\nIt seems to sniff the document and detect the schema and if it can't, you can pick from a list of schemas VS knows about.\n",
        "createdAt": "2016-09-27T21:20:16Z",
        "updatedAt": "2016-09-27T21:20:16Z",
        "author": {
          "login": "darrelmiller"
        }
      },
      {
        "body": "MSBuild should arguably have support in a class of it's own either way. That's something that's been lacking for a while.\n",
        "createdAt": "2016-09-27T21:22:19Z",
        "updatedAt": "2016-09-27T21:22:19Z",
        "author": {
          "login": "RichiCoder1"
        }
      },
      {
        "body": "We planning on addressing this so that you can still get IntelliSense, https://github.com/dotnet/roslyn-project-system/issues/516 is tracking it.\n",
        "createdAt": "2016-09-28T02:30:38Z",
        "updatedAt": "2016-09-28T02:30:38Z",
        "author": {
          "login": "davkean"
        }
      }
    ]
  }
}