{
  "number": 11242,
  "title": "[Unhandled Exception]: System.ObjectDisposedException: This object is no longer valid because the MetadataLoadContext that created it has been disposed.",
  "body": "### Issue Description\n\n[Log](https://helixr1107v0xdcypoyl9e7f.blob.core.windows.net/dotnet-runtime-refs-pull-111152-merge-29f1d7d5f1b74e3cb8/Workloads-ST-Wasm.Build.Tests.PInvokeTableGeneratorTests/1/console.907215bb.log?helixlogtype=result)\n```\n[] MSBUILD : error MSB4166: UNHANDLED EXCEPTIONS FROM PROCESS 1842:\n[] MSBUILD : error MSB4166: =====================\n[] MSBUILD : error MSB4166: 1/7/2025 5:29:23 PM\n[] MSBUILD : error MSB4166: System.ObjectDisposedException: This object is no longer valid because the MetadataLoadContext that created it has been disposed.\n[] MSBUILD : error MSB4166:    at System.Reflection.MetadataLoadContext.DisposeCheck()\n[] MSBUILD : error MSB4166:    at System.Reflection.TypeLoading.Ecma.EcmaDefinitionType.ComputeDeclaringType()\n[] MSBUILD : error MSB4166:    at System.Reflection.TypeLoading.RoType.get_DeclaringType()\n[] MSBUILD : error MSB4166:    at System.Reflection.TypeLoading.RoDefinitionType.ComputeFullName()\n[] MSBUILD : error MSB4166:    at System.Reflection.TypeLoading.RoType.get_FullName()\n[] MSBUILD : error MSB4166:    at Microsoft.Build.Framework.LazyFormattedBuildEventArgs.WriteToStream(BinaryWriter writer)\n[] MSBUILD : error MSB4166:    at Microsoft.Build.Framework.BuildMessageEventArgs.WriteToStream(BinaryWriter writer)\n[] MSBUILD : error MSB4166:    at Microsoft.Build.Shared.LogMessagePacketBase.WriteToStream(ITranslator translator)\n[] MSBUILD : error MSB4166:    at Microsoft.Build.BackEnd.NodeEndpointOutOfProcBase.RunReadLoop(Stream localReadPipe, Stream localWritePipe, ConcurrentQueue`1 localPacketQueue, AutoResetEvent localPacketAvailable, AutoResetEvent localTerminatePacketPump)\n[] MSBUILD : error MSB4166: ===================\n```\n\n### Steps to Reproduce\n\nI don't know how to reproduce.\nIt happened only once AFAIK during `Wasm.Build.Tests.PInvokeTableGeneratorTests` of `dotnet/runtime` build. \n\nSince it happened on Helix machine I also don't have the detailed log.\n\n```\nmcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-22.04-helix-webassembly on a002M0D\n\n.NET SDK Version: 10.0.100-alpha.1.24622.2\n```\n\n### Actual Behavior\n\nNo exception\n\n### Analysis\n\n_No response_\n\n### Versions & Configurations\n\n_No response_",
  "state": "CLOSED",
  "createdAt": "2025-01-08T10:34:33Z",
  "updatedAt": "2025-01-20T08:52:57Z",
  "closedAt": "2025-01-20T08:52:57Z",
  "author": {
    "login": "pavelsavara"
  },
  "milestone": null,
  "assignees": {
    "nodes": [
      {
        "login": "JanKrivanek"
      }
    ]
  },
  "labels": [
    "Priority:2",
    "triaged"
  ],
  "comments": {
    "nodes": [
      {
        "body": "It's quite possible that there is parent msbuild process and multiple child msbuild processes running in parallel",
        "createdAt": "2025-01-08T10:42:24Z",
        "author": {
          "login": "pavelsavara"
        }
      },
      {
        "body": "Thank you @pavelsavara for reporting!\n\nOn a first look it doesn't seem like msbuild would do anything wrong here - this seems to go from the type system.\n\n@janvorli - would you be able to suggest who should have a look here?",
        "createdAt": "2025-01-09T12:26:39Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "@davidwrighton do you have any thoughts on this?",
        "createdAt": "2025-01-09T15:11:45Z",
        "author": {
          "login": "janvorli"
        }
      },
      {
        "body": "I don't see any way for it looks to me like the call to Convert.ToString(...) in the `LazyFormattedBuildEventArgs.WriteToStream` tail-called the `ToString()` function on an instance of `RoDefinitionType`, and the implementation of THAT function has tail-called `RoType.FullName`, and the actual MetadataLoadContext has been disposed. For whatever reason. My guess would be that the laziness here is causing a problem, and what's happening is that MetadataLoadContext is relying on a finalizer or something to trigger its Dispose, and the current codebase in msbuild which does this lazy error generation is just happening to get unlucky. If code is stuffing a `RoDefinitionType` (or any other `RoType` derived object) as a lazy argument this could happen. The fix would be to go to the code which calls the constructor of the `LazyFormattedBuildEventArgs` with a set of arguments which includes one of these types which cannot safely be used lazily, and to call ToString() then and there instead of having this code do the lazy handling. Alternatively, one could fix this by having msbuild have an allow list of types on which can `ToString()` can safely be called lazily, and eagerly call `ToString()` for cases where safety isn't known. Of course, all of this is speculation. I can't be confident in knowing if that is what actually happened without some sort of crash dump.",
        "createdAt": "2025-01-09T19:48:07Z",
        "author": {
          "login": "davidwrighton"
        }
      },
      {
        "body": "We could probably check to see if this is what is happening by building a custom copy of msbuild, that looked for creation of `LazyFormattedBuildEventArgs` holding as arguments instances of types from `System.Reflection.MetadataLoadContext`, and then triggering this build.",
        "createdAt": "2025-01-09T19:49:41Z",
        "author": {
          "login": "davidwrighton"
        }
      },
      {
        "body": "Looking closer - the args can be comming from tasks as well.\nLooking on the test class that encountered this (https://github.com/dotnet/runtime/blob/5a395ed2fd64cf1c65ad43d667327958f6f3d1b0/src/tasks/WasmAppBuilder/ManagedToNativeGenerator.cs) - it has couple custom tasks with some nontrivial type operations - so it might be comming from there as well.\n\nAnyways - it idealy should not bring down the whole build - I'll add some resiliency",
        "createdAt": "2025-01-15T14:42:22Z",
        "author": {
          "login": "JanKrivanek"
        }
      }
    ]
  }
}