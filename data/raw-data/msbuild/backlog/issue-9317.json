{
  "number": 9317,
  "title": "[Feature Request]: A Task to read a JSON value or array of values into an Item/Item list",
  "body": "### Summary\r\n\r\nIt's very common for various CLI tools or HTTP endpoints to represent structured data as JSON, which is part of the reason that MSBuild added a JSON output option for the 17.8 release.  We should lean into this and support easier ingestion of JSON payloads as MSBuild items.  Something like:\r\n\r\n\r\n\r\n### Background and Motivation\r\n\r\nThis would ease interop between other tools and MSBuild, making it easier to make integrations with other ecosystems.\r\n\r\n### Proposed Feature\r\n\r\n```xml\r\n<Target Name=\"ReadEnvVars\">\r\n\t<Exec Command=\"docker inspect mcr.microsoft.com/dotnet/sdk:8.0 --format=\\\"=\" \" >\r\n\t \t<Output TaskParameter=\"ConsoleOutput\" PropertyName=\"EnvVarLines\" />\r\n\t</Exec>\r\n\t<ReadJson Input=\"EnvVarLines\">\r\n\t\t<Output TaskParameter=\"GeneratedItems\" ItemName=\"ContainerEnvVar\" />\r\n\t</ReadJson>\r\n</Target>\r\n```\r\n\r\nThis target would read content like this:\r\n\r\n```\r\n[\r\n  \"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\",\r\n  \"APP_UID=1654\",\r\n  \"ASPNETCORE_HTTP_PORTS=8080\",\r\n  \"DOTNET_RUNNING_IN_CONTAINER=true\",\r\n  \"DOTNET_VERSION=8.0.0-rc.1.23419.4\",\r\n  \"ASPNET_VERSION=8.0.0-rc.1.23421.29\",\r\n  \"DOTNET_GENERATE_ASPNET_CERTIFICATE=false\",\r\n  \"DOTNET_NOLOGO=true\",\r\n  \"DOTNET_SDK_VERSION=8.0.100-rc.1.23463.5\",\r\n  \"DOTNET_USE_POLLING_FILE_WATCHER=true\",\r\n  \"NUGET_XMLDOC_MODE=skip\",\r\n  \"POWERSHELL_DISTRIBUTION_CHANNEL=PSDocker-DotnetSDK-Debian-12\"\r\n]\r\n```\r\n\r\nand injest it as a series of `Items` from the array.\r\n\r\n### Alternative Designs\r\n\r\n_No response_",
  "state": "OPEN",
  "createdAt": "2023-10-09T17:34:43Z",
  "updatedAt": "2024-01-31T08:13:00Z",
  "closedAt": null,
  "author": {
    "login": "baronfel"
  },
  "labels": [
    "backlog",
    "needs-design",
    "Feature Request",
    "Priority:3",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Team triage: we might consider adding a sample TaskFactory Task to the documentation. ",
        "createdAt": "2023-10-10T13:49:14Z",
        "updatedAt": "2023-10-10T13:49:14Z",
        "author": {
          "login": "AR-May"
        }
      },
      {
        "body": "This may be a first-party request, I'll track down a few teams to get feedback (this originally came out of a conversation with David Fowler re: some ASP.NET work). If a few teams would have use of it, we should consider more than just documentation.",
        "createdAt": "2023-10-10T13:52:53Z",
        "updatedAt": "2023-10-10T13:52:53Z",
        "author": {
          "login": "baronfel"
        }
      },
      {
        "body": "I'm pretty concerned about the task \"API\" shape you're describing. What would the behavior be if the JSON wasn't a flat list of strings?\r\n\r\nBasically, I'm concerned that this would become a weird standin for #8374, which I don't want to do until Runtime standardizes on a JSONPath equivalent.",
        "createdAt": "2023-10-10T14:27:49Z",
        "updatedAt": "2023-10-10T14:27:49Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I was thinking along similar lines last night after I submitted - what about the following instead:\r\n\r\n**Input**: `JSONValues: string[]` - the list of JSON structures to parse into Items\r\n**Input**: `IncludeKey: string?` - if the JSON structures are objects, this is the optional property key to use as the `Include` of the generated Item for that object. If none is provided an `Include` property must exist on the JSON object. Not inferring an `Include` should be an error.  \r\n**Processing**: the string must either be a JSON object or a JSON string - in the case of a string, an Item will be created with that `Include` value, while in the case of an object an `Item` will be created with the properties of the object being the `Metadata` of the Item, with the `Include` being chosen according to the property above.\r\n**Output**: `GeneratedItems: ITaskItem[]` - the items parsed from `JsonValues`.",
        "createdAt": "2023-10-10T14:34:44Z",
        "updatedAt": "2023-10-10T14:48:53Z",
        "author": {
          "login": "baronfel"
        }
      },
      {
        "body": "> **Input:** `ItemName: string` - the kind of Item to create.\r\n> **Output**: `GeneratedItems: ITaskItem[]` - the items (of type `ItemName`) parsed from `JsonValues`.\r\n\r\nI don't think this is expressible today; to get items out you need to explicitly map task output parameters to item names in the [`<Output` element](https://learn.microsoft.com/visualstudio/msbuild/output-element-msbuild).",
        "createdAt": "2023-10-10T14:47:38Z",
        "updatedAt": "2023-10-10T14:47:38Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Oh duh, I even had that in my initial design. Let me remove that part.",
        "createdAt": "2023-10-10T14:48:37Z",
        "updatedAt": "2023-10-10T14:48:37Z",
        "author": {
          "login": "baronfel"
        }
      },
      {
        "body": "Instead of a general purpose 'read any JSON', maybe there could be a task that understands a specific JSON structure that can represent an Item collection with items with metadata. Reading JSON that doesn't match the expected structure is an error. i.e. Instead of a complex parameter interface for the task, limit the acceptable JSON data.\r\n\r\n**Update:** Just adding a note that there would probably be an expectation that the task could be used to round-trip the output of the `-getProperty` and `-getItem` switches.",
        "createdAt": "2023-10-10T15:40:49Z",
        "updatedAt": "2023-10-10T16:21:52Z",
        "author": {
          "login": "jrdodds"
        }
      },
      {
        "body": "What @jrdodds is proposing is more in line with what I expected when we first talked about this offline @baronfel. But it would require an ecosystem-json\u27a1\ufe0fMSBuildy-json adapter, which isn't trivial.",
        "createdAt": "2023-10-10T16:07:41Z",
        "updatedAt": "2023-10-10T16:07:41Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}