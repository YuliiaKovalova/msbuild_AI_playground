{
  "number": 11329,
  "title": "Extend ItemGroup/PropertyGroup grammar to allow more user-friendly Conditions for common use cases",
  "body": "### Summary\n\nThe MSBuild `Condition` syntax is very powerful, but it's also very open-ended and hard to create tooling around. There is value in making syntax for common project- and MSBuild-logic constraints more easy-to-use, because a more-restricted but easier-to-use syntax would be both more understandable to users (especially casual MSBuild users) and could disallow entire categories of errors that exist today (e.g. typos in common `Condition` usage).\n\n### Background and Motivation\n\nConsider a user that wants to make a number of changes to Property values when they are targeting the `Release` configuration. For example, they might want to opt in to\n\n* embedded PDB generation\n* single-file publishing\n* AOT compilation\n* certain kinds of warnings/diagnostics\n\nToday, this is all doable. A user might write some code like\n\n```xml\n<PropertyGroup>\n  <PdbType Condition=\"'$(Configuration)' == 'Release'\">embedded</PdbType>\n  <PublishSingleFile>true</PublishSingleFile>\n  <PublishAot>true</PublishAot>\n  <NoWarn Condition=\"'$(Configuration)' == 'Release'\">$(NoWarn);MSB12345</NoWarn>\n</PropertyGroup>\n```\n\nThings to note here:\n* the user has duplicated the condition a few times\n* The user has made a decision to set some Properties unconditionally and some conditionally - why might that be?\n* The design of the features used (AOT, single-file publishing, etc) has to know about the impact of build-time vs publish-time, so the feature has been implemented with flags that are only 'checked' during Publishing - this requires some knowledge outside of the build!\n\n#### Making changes\n\nWhat if the user needs to add a pivot to the condition for any reason? Say for .NET 9 they need an additional NoWarn. The code might look like this:\n\n```diff\n<PropertyGroup>\n  <PdbType Condition=\"'$(Configuration)' == 'Release'\">embedded</PdbType>\n  <PublishSingleFile>true</PublishSingleFile>\n  <PublishAot>true</PublishAot>\n- <NoWarn Condition=\"'$(Configuration)' == 'Release'\">$(NoWarn);MSB12345</NoWarn>\n+ <NoWarn Condition=\"'$(Configuration)' == 'Release' and '$(TargetFramework)' == 'net9.0'\">$(NoWarn);MSB12345;NETSDK98765</NoWarn>\n</PropertyGroup>\n```\n\nThis change is hard to spot-check for most users.\n\n#### Consolidating changes\n\nExperienced MSBuild users might reach for a `Condition` on the PropertyGroup to reduce the amount of duplication on the properties, like so:\n\n```xml\n<PropertyGroup Condition=\"'$(Configuration)' == 'Release'\">\n  <PdbType>embedded</PdbType>\n  <PublishSingleFile>true</PublishSingleFile>\n  <PublishAot>true</PublishAot>\n  <NoWarn>$(NoWarn);MSB12345</NoWarn>\n</PropertyGroup>\n```\n\nThis is great! However, many users do not realize that Conditions can be applied to these nodes, and the problem of not being able to easily-classify the changes remains. If you need to add another TFM, now you either have two levels of Condition (one at the PropertyGroup, one on the NoWarn Property) or you have two PropertyGroups.\n\nWe need a syntax that is easy to use for common pivots that users experience daily.\n\n## Proposed Feature\n\nWe should extend the grammar of PropertyGroups and ItemGroups to allow for metadata to be set that the engine would interpret as an automatically-correct Conditions. I propose that the initial set of Properties we consider for this treatment be\n\n* TargetFramework\n* Configuration\n* RuntimeIdentifier\n* Platform\n\nWith these properties, users would be able to construct targeted PropertyGroups or ItemGroups that scope changes easily. An example of the above in this fashion:\n\n```xml\n<PropertyGroup Configuration=\"Release\">\n  <PdbType>embedded</PdbType>\n  <PublishSingleFile>true</PublishSingleFile>\n  <PublishAot>true</PublishAot>\n  <NoWarn>$(NoWarn);MSB12345</NoWarn>\n</PropertyGroup>\n```\n\nDuring parsing, the engine would read this attribute and generate a Condition on this PropertyGroup equivalent to `Condition=\"$(Configuration) == 'Release'\"`. Implicit conditions would be additive - setting both `Configuration=\"Release\"` and `TargetFramework=\"net8.0\"` would result in a compound Condition of `Condition=\"$(Configuration) == 'Release' and $(TargetFramework) == 'net8.0'\"`.\n\nThe Groups would be read and applied in-order in the file according to the existing MSBuild passes, so this change would be a purely-semantic transformation - no changes to passes or the resulting project would be intended here.\n\n## Open Questions\n\n#### Why only PropertyGroups/ItemGroups?\n\nProperties cannot have metadata today, and Items already have metadata that may clobber the existing properties - it would be hard to do this in a safe way.  It's natural to group changes to properties and items based on these properties, so this extension felt natural.\n\n#### Is this set of properties sufficient?\n\nWe've chosen the common user pivots today, but the syntax isn't limited to/exhaustive. This feels like a kind of change that we should start small on to keep the problem space limited/well-understood. An immediate suggestion to add might be \n\n* `LangVersion`\n\n#### Should we limit the set of properties at all?\n\nYes - if we make this change we'll be supporting the syntax forever. We need to be conservative in the set of values accepted here so that we have room to evolve in the future.\n\n#### Should we support comparisons on things other than Properties?\n\nItem-comparisons are common, but due to the grammar of MSBuild Item-based comparisons can only happen on ItemGroups - is this clear to users? Would it be a foot-gun?\n\n#### Should the TFM condition sematics be `Exactly Equal` or `IsTargetFrameworkCompatible`?\n\nThe other property checks use exact-matching, and this seems like a safer/more limited default. We could change to use an is-compatible check based on user feedback.\n\n#### How should this be represented in tooling/API?\n\nThe Object Model objects should have a fully-realized `Condition`, and there should be a new Well-Known metadata key on ItemGroups and PropertyGroups that provides a tooling-visible representation of the implicit Condition terms and their values.\n\n#### Other notes\n\nThis syntax is very regular and I think could be more easily understood and well-formed-synthesized by LLM tools. The MSBuild language is not well known today by these tools, so something that is more simple and likely to be correct is a plus.\n\n#### Could this be pluggable in some way?\n\nIt feels odd for MSBuild itself to know about specific Properties that may only be known to/used by a specific SDK. Could a given MSBuild SDK somehow provide this data?\n\n#### Should compound values be allowed in the property comparisons (e.g. `TargetFramework=\"net8.9;net9.0\"`)\n\n**No** - the intent of these comparisons is singular values only.\n\n## Alternative Designs\n\nThere are other ways to tackle this for sure - \n\n* have entirely different project file format (a la toml/ini/etc) that have a more natural pivoting syntax\n* make Property Functions for common conditions and keep the general `Condition` syntax intact",
  "state": "OPEN",
  "createdAt": "2025-01-24T15:09:37Z",
  "updatedAt": "2025-04-03T19:06:18Z",
  "closedAt": null,
  "author": {
    "login": "baronfel"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "Area: Language",
    "triaged"
  ],
  "comments": {
    "nodes": [
      {
        "body": "Make `<PropertyGroup TargetFramework=\"net8.0;net9.0\">` an error.",
        "createdAt": "2025-01-24T16:11:31Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "This proposal makes a meaningful step towards user bliss. I resonate with the motivation.\n\nA few points in favor of making the syntax `If.Configuration=\"Release\"`, or something in this vein:\n\n- The conditionality with `If.Xyz` is obvious. `Configuration=\"Release\"` is a little less obviously a condition, and possibly able to be interpreted as still entering the group, but with some variable set that can affect evaluation.\n- The length is still quite short, and the meaning of `If.` is easy to digest.\n- It removes worries about conflicting with metadata, so this would work for items and properties and other types of elements too.\n- It provides a clear opportunity to extend this syntax to other conditions besides a hardcoded set in the future. Maybe automatically, or maybe with opt in.\n\nFor example, right off the bat I would miss being able to use this new syntax with TargetFrameworkIdentifier.\n\nI also like the idea of `=\"net9.0\"` for exact match and `=\"net9.0+\"` for compatible match. It would be great if the design left room for future extensibility so that `If.MyOwnLibraryProp=\"net9.0+\"` could be translated to the appropriate condition clause, rather than assuming a wooden translation to `== 'net9.0+'`.",
        "createdAt": "2025-01-24T17:07:11Z",
        "author": {
          "login": "jnm2"
        }
      },
      {
        "body": "> Should compound values be allowed in the property comparisons (e.g. TargetFramework=\"net8.9;net9.0\")\n\nWhat will the experience be when `TargetFramework=\"$(MyVariable)\"` contains a semicolon?",
        "createdAt": "2025-01-24T17:08:40Z",
        "author": {
          "login": "jnm2"
        }
      },
      {
        "body": "Definitely yearning for `<PropertyGroup TargetPlatform=\"ios|maccatalyst\">` (`|` to match any) and `<PropertyGroup TargetPlatform=\"android\">`.\n\nProperties I'd like to see:\n- `TargetPlatform`\n- `TargetPlatformVersion`\n- `TargetFrameworkVersion`\n\nIdeally we'd be able to have conditions beside from just `=` like `>`, `<`, `!=` ?\n\nLots of ways that syntax could be invented around this.... \n\n@StephaneDelcroix may have some thoughts given this is xml based, as he's thought through a lot of similar patterns for XAML.\n",
        "createdAt": "2025-01-24T18:07:13Z",
        "author": {
          "login": "Redth"
        }
      },
      {
        "body": "The default LangVersion and TargetFrameworkVersion are set by .NET SDK after the project has been evaluated and TargetFramework is known.  So they are usable in ItemGroup conditions but generally not in PropertyGroup.  I do not want MSBuild to special-case `If.TargetFrameworkVersion=\"8.0\"` to guess the future value based on TargetFramework if TargetFrameworkVersion has not been set yet.  Such guessing would risk going wrong if the project uses custom TargetFramework not recognised by .NET SDK and will instead set TargetFrameworkVersion in some other way.  More about that in <https://github.com/NuGet/Home/issues/5154>.",
        "createdAt": "2025-01-24T19:23:44Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "We already have `When` in MSBuild:\n```xml\n <Choose>\n     <When Condition=\"$(Configuration)=='Test'\">\n        <PropertyGroup>\n            <DebugSymbols>true</DebugSymbols>\n            <DebugType>full</DebugType>\n            <Optimize>false</Optimize>\n            <DefineConstants>DEBUG;TRACE</DefineConstants>\n        </PropertyGroup>\n    </When>\n</Choose>\n```\n\nI think it would be intuitive to use `When.<PropertyName>=\"Value\"` instead of special casing those limited properties:\n\n```xml\n<PropertyGroup When.Configuration=\"Test\">\n    <DebugSymbols>true</DebugSymbols>\n    <DebugType>full</DebugType>\n    <Optimize>false</Optimize>\n    <DefineConstants>DEBUG;TRACE</DefineConstants>\n</PropertyGroup>\n```\n\nThis can even be extended to support multiple conditions:\n\n```xml\n<PropertyGroup>\n    <When>\n        <Configuration>Release</Configuration>\n        <Platform>x64</Platform>\n    </When>\n\n    <DebugSymbols>true</DebugSymbols>\n    <DebugType>full</DebugType>\n    <Optimize>false</Optimize>\n    <DefineConstants>DEBUG;TRACE</DefineConstants>\n</PropertyGroup>\n```",
        "createdAt": "2025-01-24T21:29:50Z",
        "author": {
          "login": "hez2010"
        }
      },
      {
        "body": "> This can even be extended to support multiple conditions:\n> ```xml\n> <PropertyGroup>\n>     <When>\n>         <Configuration>Release</Configuration>\n>         <Platform>x64</Platform>\n>     </When>\n> \n>     <DebugSymbols>true</DebugSymbols>\n>     <DebugType>full</DebugType>\n>     <Optimize>false</Optimize>\n>     <DefineConstants>DEBUG;TRACE</DefineConstants>\n> </PropertyGroup>\n\nI expected this to be a breaking change; I expected it to define a property `$(When)` with some XML contents. But it looks like that's specifically prevented: `error MSB4004: The \"When\" property is reserved, and cannot be modified.`\n\nStill, it looks so much like a regular property definition that I'm not a fan of this approach.",
        "createdAt": "2025-01-24T21:53:08Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "See also related #820.",
        "createdAt": "2025-01-24T21:59:10Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "my .02\u20ac\n\nIt's always a headache to invent a comparison DSL to extend XML... the issue we're trying to solve is pattern matching with property pattern, and in that context, 'When' (`<PropertyGroup When.Configuration=\"Release\">`) makes more sense than 'If', and both are clearer than `<PropertyGroup Configuration=\"Release\">` (unless it's a breaking change).\n\nMultiple conditions could indeed be specified like in https://github.com/dotnet/msbuild/issues/11329#issuecomment-2613410362, or simply using `<PropertyGroup When.Configuration=\"Release\" When.TargetPlatform=\"ios\">`\n\nAbout multiple values, I read `<PropertyGroup When.TargetPlatform=\"ios;maccatalyst\">` as `when target platform is in the list of values`, so the semicolon makes sense as liste separator, better than `|`. (`|` would mean a `&` syntax exists, but that can't be true).\n\nWhile we're inventing a syntax, we could have pattern matching `<PropertyGroup When.Configuration=\"R*\">`, `not` `<PropertyGroup When.Configuration=\"!Release\">` or comparison `<PropertyGroup When.TargetPlatformVersion=\">=9.0\">`\n\nIn any form, a feature like this would be a big win for developers with non-trivial cases, and would make conditions easier to read, and write.\n\n(feel free to delete those thoughts if they derail the OP's intend)",
        "createdAt": "2025-01-27T08:16:14Z",
        "author": {
          "login": "StephaneDelcroix"
        }
      },
      {
        "body": "Re tooling changes, consider also how <https://source.dot.net/> generated by <https://github.com/KirillOsenkov/SourceBrowser> searches for references to MSBuild properties and items.  If an MSBuild project is using the `When.TargetPlatform` attribute syntax, then the web user should be able to click that and navigate to TargetPlatform definitions.",
        "createdAt": "2025-01-27T09:08:22Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "I see that we're going the XAML way!",
        "createdAt": "2025-04-03T19:06:16Z",
        "author": {
          "login": "Nirmal4G"
        }
      }
    ]
  }
}