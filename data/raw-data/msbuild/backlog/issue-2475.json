{
  "number": 2475,
  "title": "FindRibbons task fails when including a .NET Standard 2.0 package",
  "body": "I am developing an Office add-in which is based on some packages that were recently moved to .NET Standard 2.0.\r\n\r\nFor one specific add-in I am experiencing an issue with the MSBuild task FindRibbons, included in Visual Studio Tools for Office.\r\n\r\nWhen I compile, I get this error:\r\n\r\n> The \"FindRibbons\" task failed unexpectedly.\r\n> System.IO.FileNotFoundException: Could not load file or assembly 'MyAssembly, Version=2017.8.17229.1332, Culture=neutral, PublicKeyToken=15f3938228f8c5ae' or one of its dependencies. The system cannot find the file specified.\r\n> File name: 'MyAssembly, Version=2017.8.17229.1332, Culture=neutral, PublicKeyToken=15f3938228f8c5ae'\r\n> Server stack trace: \r\n>    at System.Reflection.RuntimeAssembly._nLoad(AssemblyName fileName, String codeBase, Evidence assemblySecurity, RuntimeAssembly locationHint, StackCrawlMark& stackMark, IntPtr pPrivHostBinder, Boolean throwOnFileNotFound, Boolean forIntrospection, Boolean suppressSecurityChecks)\r\n>    at System.Reflection.RuntimeAssembly.nLoad(AssemblyName fileName, String codeBase, Evidence assemblySecurity, RuntimeAssembly locationHint, StackCrawlMark& stackMark, IntPtr pPrivHostBinder, Boolean throwOnFileNotFound, Boolean forIntrospection, Boolean suppressSecurityChecks)\r\n>    at System.Reflection.RuntimeAssembly.InternalLoadAssemblyName(AssemblyName assemblyRef, Evidence assemblySecurity, RuntimeAssembly reqAssembly, StackCrawlMark& stackMark, IntPtr pPrivHostBinder, Boolean throwOnFileNotFound, Boolean forIntrospection, Boolean suppressSecurityChecks)\r\n>    at System.Reflection.RuntimeAssembly.InternalLoad(String assemblyString, Evidence assemblySecurity, StackCrawlMark& stackMark, IntPtr pPrivHostBinder, Boolean forIntrospection)\r\n>    at System.Reflection.RuntimeAssembly.InternalLoad(String assemblyString, Evidence assemblySecurity, StackCrawlMark& stackMark, Boolean forIntrospection)\r\n>    at System.Reflection.Assembly.Load(String assemblyString)\r\n>    at System.UnitySerializationHolder.GetRealObject(StreamingContext context)\r\n>    at System.Runtime.Serialization.ObjectManager.ResolveObjectReference(ObjectHolder holder)\r\n>    at System.Runtime.Serialization.ObjectManager.DoFixups()\r\n>    at System.Runtime.Serialization.Formatters.Binary.ObjectReader.Deserialize(HeaderHandler handler, __BinaryParser serParser, Boolean fCheck, Boolean isCrossAppDomain, IMethodCallMessage methodCallMessage)\r\n>    at System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Deserialize(Stream serializationStream, HeaderHandler handler, Boolean fCheck, Boolean isCrossAppDomain, IMethodCallMessage methodCallMessage)\r\n>    at System.Runtime.Remoting.Channels.CrossAppDomainSerializer.DeserializeObject(MemoryStream stm)\r\n>    at System.Runtime.Remoting.Messaging.SmuggledMethodReturnMessage.FixupForNewAppDomain()\r\n>    at System.Runtime.Remoting.Channels.CrossAppDomainSink.SyncProcessMessage(IMessage reqMsg)\r\n> Exception rethrown at [0]: \r\n>    at System.Runtime.Remoting.Proxies.RealProxy.HandleReturnMessage(IMessage reqMsg, IMessage retMsg)\r\n>    at System.Runtime.Remoting.Proxies.RealProxy.PrivateInvoke(MessageData& msgData, Int32 type)\r\n>    at Microsoft.Build.Framework.ITask.Execute()\r\n>    at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute()\r\n>    at Microsoft.Build.BackEnd.TaskBuilder.<ExecuteInstantiatedTask>d__26.MoveNext()\r\n> Assembly manager loaded from:  C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\clr.dll\r\n> Running under executable  C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Professional\\MSBuild\\15.0\\Bin\\MSBuild.exe\r\n> --- A detailed error log follows. \r\n> === Pre-bind state information ===\r\n> LOG: DisplayName = MyAssembly, Version=2017.8.17229.1332, Culture=neutral, PublicKeyToken=15f3938228f8c5ae\r\n>  (Fully-specified)\r\n> LOG: Appbase = file:///C:/Program Files (x86)/Microsoft Visual Studio/2017/Professional/MSBuild/15.0/Bin/\r\n> LOG: Initial PrivatePath = NULL\r\n> Calling assembly : (Unknown).\r\n> LOG: This bind starts in default load context.\r\n> LOG: Using application configuration file: C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Professional\\MSBuild\\15.0\\Bin\\MSBuild.exe.Config\r\n> LOG: Using host configuration file: \r\n> LOG: Using machine configuration file from C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\config\\machine.config.\r\n> LOG: Post-policy reference: MyAssembly, Version=2017.8.17229.1332, Culture=neutral, PublicKeyToken=15f3938228f8c5ae\r\n> LOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2017/Professional/MSBuild/15.0/Bin/MyAssembly.DLL.\r\n> LOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2017/Professional/MSBuild/15.0/Bin/MyAssembly/MyAssembly.DLL.\r\n> LOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2017/Professional/MSBuild/15.0/Bin/MyAssembly.EXE.\r\n> LOG: Attempting download of new URL file:///C:/Program Files (x86)/Microsoft Visual Studio/2017/Professional/MSBuild/15.0/Bin/MyAssembly/MyAssembly.EXE.\r\n> \r\n\r\nInvestigating the issue brought me to calling `FindRibbons` from a console app so I could diagnose the issue.\r\n\r\nAn exception is thrown on `types = assembly.GetTypes()` in the `FindRibbons` class from `Microsoft.VisualStudio.Tools.Office.BuildTasks.dll` in the MSBuild folder `C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Professional\\MSBuild\\Microsoft\\VisualStudio\\v15.0\\OfficeTools`:\r\n\r\n> System.Reflection.ReflectionTypeLoadException:\r\n> LoaderExceptions[0]: {\"Could not load file or assembly 'System.ValueTuple, Version=0.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51' or one of its dependencies. The located assembly's manifest definition does not match the assembly reference. (Exception from HRESULT: 0x80131040)\":\"System.ValueTuple, Version=0.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51\"}\r\n\r\nAnd indeed, that file **with that version** doesn't exist. The `app.config` contains binding redirects though to version 4.0.2.0, which does exist in the same folder as the inspected assembly:\r\n\r\n```\r\n<dependentAssembly>\r\n  <assemblyIdentity name=\"System.ValueTuple\" publicKeyToken=\"CC7B13FFCD2DDD51\" culture=\"neutral\"/>\r\n  <bindingRedirect oldVersion=\"0.0.0.0-4.0.2.0\" newVersion=\"4.0.2.0\"/>\r\n</dependentAssembly>\r\n```\r\n\r\nIt seems the MSBuild task doesn't take the assembly binding redirects on the file in consideration. When I skip the `FindRibbons` task and pass in the correct values for the `RibbonTypesCollection` variable the vsto file gets generated correctly and the add-in runs as expected.\r\n\r\nIf I try to adjust the `FindRibbons` code to force loading the correct assembly from the `CurrentDomain_ReflectionOnlyAssemblyResolve`, I get the same exception when calling the method from my test app.\r\n\r\n(The code I have used to try to fix this in `CurrentDomain_ReflectionOnlyAssemblyResolve`, which didn't work:)\r\n\r\n```\r\ncatch (FileLoadException)\r\n{\r\n    this.InitializeMap();\r\n\r\n    string assemblyName = args.Name.Split(',').First() + \",\";\r\n\r\n    string str = this._assemblyFullNameToPathMap.Where(a => a.Key.StartsWith(assemblyName)).Select(k => k.Value).SingleOrDefault();\r\n\r\n    if (!string.IsNullOrEmpty(str))\r\n    {\r\n        return Assembly.ReflectionOnlyLoadFrom(str);\r\n    }\r\n\r\n    return Assembly.ReflectionOnlyLoad(AppDomain.CurrentDomain.ApplyPolicy(args.Name));\r\n}\r\n```\r\n\r\nI think this is the same issue as mentioned here: https://github.com/Microsoft/msbuild/issues/1309, but I am not sure. Also, this seems to become a bigger problem since there is no way out for developers forced to use .NET Standard 2.0 for interoperability reasons.\r\n\r\nIs there anything we can do to fix this? Is this something for the MSBuild team or the Office team?",
  "state": "CLOSED",
  "createdAt": "2017-08-25T12:23:25Z",
  "updatedAt": "2024-02-21T17:16:59Z",
  "closedAt": "2020-05-27T16:24:13Z",
  "author": {
    "login": "PatrickHofman"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "I have found a way to circumvent this issue. I just made a custom build of `Microsoft.VisualStudio.Tools.Office.BuildTasks` with only the `Microsoft.VisualStudio.Tools.Office.BuildTasks.FindRibbons` class inside.\r\n\r\nThis is the code for the `PathReflectionOnlyAssemblyResolver` class which is an inner class of `FindRibbons`:\r\n\r\n```\r\nprivate class PathReflectionOnlyAssemblyResolver\r\n{\r\n    private IDictionary<string, string> _assemblyFullNameToPathMap = new Dictionary<string, string>();\r\n    //\r\n    // BEGIN ADJUSTMENTS\r\n    //\r\n    private IDictionary<string, string> _assemblyNameToPathMap = new Dictionary<string, string>();\r\n    //\r\n    // END ADJUSTMENTS\r\n    //\r\n\r\n    private bool _mapInitialized;\r\n    private readonly string _path;\r\n\r\n    public PathReflectionOnlyAssemblyResolver(string path)\r\n    {\r\n        if (string.IsNullOrEmpty(path))\r\n        {\r\n            throw new ArgumentNullException(path);\r\n        }\r\n        this._path = path;\r\n    }\r\n\r\n    public Assembly CurrentDomain_ReflectionOnlyAssemblyResolve(object sender, ResolveEventArgs args)\r\n    {\r\n        //\r\n        // BEGIN ADJUSTMENTS\r\n        //\r\n        string assemblyName1 = args.Name.Split(',')[0];\r\n\r\n        this.InitializeMap();\r\n\r\n        if (this._assemblyNameToPathMap.TryGetValue(assemblyName1, out string str1))\r\n        {\r\n            return Assembly.ReflectionOnlyLoadFrom(str1);\r\n        }\r\n        //\r\n        // END ADJUSTMENTS\r\n        //\r\n\r\n        try\r\n        {\r\n            return Assembly.ReflectionOnlyLoad(args.Name);\r\n        }\r\n        catch (FileNotFoundException)\r\n        {\r\n            string str;\r\n            this.InitializeMap();\r\n            if (this._assemblyFullNameToPathMap.TryGetValue(args.Name, out str))\r\n            {\r\n                return Assembly.ReflectionOnlyLoadFrom(str);\r\n            }\r\n            return Assembly.ReflectionOnlyLoad(AppDomain.CurrentDomain.ApplyPolicy(args.Name));\r\n        }\r\n    }\r\n\r\n    private void InitializeMap()\r\n    {\r\n        if (!this._mapInitialized)\r\n        {\r\n            this._mapInitialized = true;\r\n            foreach (string str in Directory.GetFiles(this._path, \"*.dll\"))\r\n            {\r\n                try\r\n                {\r\n                    string fullName = System.Reflection.AssemblyName.GetAssemblyName(str).FullName;\r\n                    this._assemblyFullNameToPathMap.Add(fullName, str);\r\n\r\n                    //\r\n                    // BEGIN ADJUSTMENTS\r\n                    //\r\n                    string name = System.Reflection.AssemblyName.GetAssemblyName(str).Name;\r\n                    this._assemblyNameToPathMap.Add(name, str);\r\n                    //\r\n                    // END ADJUSTMENTS\r\n                    //\r\n                }\r\n                catch (Exception)\r\n                {\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nI understand that particularly the first lines in `CurrentDomain_ReflectionOnlyAssemblyResolve` are problematic, since they could cause a local scoped assembly to overrule the GAC for example, but that isn't an issue in my situation right now.\r\n\r\n- Build that file and name it `Fix.Microsoft.VisualStudio.Tools.Office.BuildTasks.dll`.\r\n\r\n- Copy the output file to `C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Professional\\MSBuild\\Microsoft\\VisualStudio\\v15.0\\OfficeTools`.\r\n\r\n- Open `Microsoft.VisualStudio.Tools.Office.targets` and change `<UsingTask TaskName=\"FindRibbons\" AssemblyFile=\"Microsoft.VisualStudio.Tools.Office.BuildTasks.dll\" />` to `<UsingTask TaskName=\"FindRibbons\" AssemblyFile=\"Fix.Microsoft.VisualStudio.Tools.Office.BuildTasks.dll\" />`.\r\n\r\n- Now compile your project again.\r\n\r\n- Profit!",
        "createdAt": "2017-08-25T13:23:59Z",
        "updatedAt": "2017-08-25T13:23:59Z",
        "author": {
          "login": "PatrickHofman"
        }
      },
      {
        "body": "Hi Patrick,\r\n\r\nVery helpful article as I am having the exact same issue. One thing I would be really grateful if you could tell me - where do I get the source code for microsoft.VisualStudio.Tools.Office.BuildTasks so that I can modify it and create a fix version?\r\n\r\nMany thanks,\r\n\r\nMartin",
        "createdAt": "2017-09-12T12:23:42Z",
        "updatedAt": "2017-09-12T12:23:42Z",
        "author": {
          "login": "martinhills2000"
        }
      },
      {
        "body": "HI, could you please explain how to run findribbons from the console app?",
        "createdAt": "2018-02-21T10:38:44Z",
        "updatedAt": "2018-02-21T10:38:44Z",
        "author": {
          "login": "mxvlshn"
        }
      },
      {
        "body": "@martinhills2000 You have to disassemble the assembly. Reflector would do.",
        "createdAt": "2018-02-21T10:40:47Z",
        "updatedAt": "2018-02-21T10:40:47Z",
        "author": {
          "login": "PatrickHofman"
        }
      },
      {
        "body": "@mxvlshn Not sure what you mean. You shouldn't run that from a console app.",
        "createdAt": "2018-02-21T10:41:14Z",
        "updatedAt": "2018-02-21T10:41:14Z",
        "author": {
          "login": "PatrickHofman"
        }
      },
      {
        "body": "Not much I can add to this report, but I can confirm the issue. Adding any .NET Standard NuGet to my Office VSTO plug-in causes this exact error.\r\n\r\nHaving a redirect in app.config does not help (and actually has to do with a separate issue where VSTO plug-ins ignore app.config binding redirects - presumably because they run inside the Outlook process?).\r\n\r\nNor does it help to set <AutoGenerateBindingRedirects> due to #1310 ",
        "createdAt": "2018-03-28T10:12:38Z",
        "updatedAt": "2018-03-28T10:12:38Z",
        "author": {
          "login": "Kazpers"
        }
      },
      {
        "body": "Team triage: closing due to age. If you're still seeing this problem, please let us know and we can reactivate it.",
        "createdAt": "2020-05-27T16:24:13Z",
        "updatedAt": "2020-05-27T16:24:13Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Thank you for the workaround\r\n",
        "createdAt": "2021-04-13T13:36:23Z",
        "updatedAt": "2021-04-13T13:36:23Z",
        "author": {
          "login": "ds-evo"
        }
      }
    ]
  }
}