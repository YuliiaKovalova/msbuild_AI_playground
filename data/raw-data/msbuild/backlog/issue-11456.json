{
  "number": 11456,
  "title": "forceConsistentCasingInFileNames TypeScrypt equivalent for dotnet",
  "body": "### Is your feature request related to a problem? Please describe.\n\nDotnet core is a cross-platform language, and increasingly we have teams with different operating systems.\n\nOn windows the filesystem is not case sensitive while on *nix it is, and this for dotnet build is a problem.\n\nIf on the filesystem for example we have the project `Foo.Bar.Lib/Foo.Bar.Lib.csproj` by another project as follows. \n\n```xml\n <ItemGroup>\n    <ProjectReference Includes=\"FOO.BAR.Lib/Foo.Bar.Lib.csproj\" />\n    <!--                        ^^^^^^^ wrong casing           -->\n  </ItemGroup>\n```\n\nThis on windows compiles while on Linux it does not.\n\n### Describe the solution you'd like\n\nAn option like [forceConsistentCasingInFileNames](https://www.typescriptlang.org/tsconfig/#forceConsistentCasingInFileNames) in TypeScript would be useful. \n\n### Additional context\n\nIn my case many developers are on windows, the CI has windows agents, and running the developers' local environment has docker components.\n\nResult: local build and ci build succeeds while there are build errors by launching docker build.",
  "state": "OPEN",
  "createdAt": "2025-02-17T11:18:13Z",
  "updatedAt": "2025-02-26T15:59:05Z",
  "closedAt": null,
  "author": {
    "login": "webartoli"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "Priority:2",
    "Area: NetSDK",
    "BuildCheck Suggestion",
    "triaged"
  ],
  "comments": {
    "nodes": [
      {
        "body": "buildcheck request I believe.",
        "createdAt": "2025-02-18T21:44:56Z",
        "author": {
          "login": "marcpopMSFT"
        }
      },
      {
        "body": "I've done several tests with this repo:\n\n```\nsrc\n` Foo.Bar.Lib/\n  ` Foo.Bar.Lib.csproj\n    Class.cs\n` Foo.Bar.Console/\n  ` Foo.Bar.Console.csproj\n    Class.cs\n```\n\nWhere Foo.Bar.Console.csproj file contains a reference with a different casing for the lib path:\n\n```xml\n <ItemGroup>\n    <ProjectReference Includes=\"FOO.BAR.Lib/Foo.Bar.Lib.csproj\" />\n    <!--                        ^^^^^^^ differs for casing     -->\n  </ItemGroup>\n```\n\nHere below the results:\n\n| Dotnet SDK | OS | File System | Result |\n|-------|---|---|---|\n| 8.0 LTS | Windows 11 24H2 | NTFS (Case insensitive) | \u2705 Build Success |\n| 8.0 LTS | macOS Sequoia | APFS (Case insensitive) | \u2705 Build Success |\n| 8.0 LTS | Microsoft Hosted AzureDevOps Agent Ubuntu 20.04 | ext4 (Case sensitive) | \u2705 Build Success |\n| 8.0 LTS | Official mcr.microsoft.com/dotnet/sdk:8.0 docker image | ext4 + overlay (Case sensitive) | \ud83d\udfe5 Build Failed |\n\nI would expect a consistent result that was either in both cases red or in both cases green. But not different outputs on such similar architectures.\n\nBut if different behavior are expected for different os I think it is critical to include a flag/settings that can check for this issue regardless of the OS under which it is run.\n\nParticularly in this scenario the CI marks as build succeeded but a local docker build fails and this is a serious issue.\n",
        "createdAt": "2025-02-19T08:01:01Z",
        "author": {
          "login": "webartoli"
        }
      }
    ]
  }
}