{
  "number": 6325,
  "title": "SolutionFilterName does not work in the IDE",
  "body": "### Steps to Reproduce\r\n\r\nI have created a solution filter, but the IDE does not set the SolutionFilterName variable. This value is available since I see it in the solution explorer.\r\n\r\nBased in this issue #6162\r\n\r\n### Expected Behavior\r\nThe SolutionFilterName variable is set to the name of the filter file.\r\n\r\n### Actual Behavior\r\nThe SolutionFilterName variable is not set at all.\r\n\r\n### Analysis\r\n<!--\r\n* If you have an idea where the problem might lie, let us know that here.\r\n* Please include any pointers to code, relevant changes, or related issues you know of.\r\n-->\r\n\r\n### Versions & Configurations\r\n Windows, VS 2019 16.10 P1 but I also saw this with P2\r\n\r\n### Attach a binlog\r\n<!--\r\n* If providing us a project that reproduces the issue proves difficult, consider including a binlog.\r\n* Click [here](https://aka.ms/msbuild/binlog) for details on sharing binary logs.\r\n* Click [here](https://github.com/microsoft/msbuild/blob/master/documentation/wiki/Binary-Log.md) for more information on binary logs.\r\n    NOTE: Binlogs can contain sensitive information. Don't attach anything you don't want to be public.\r\n\r\n*   To view the contents of the binlogs yourself, you may wish to use a tool like https://msbuildlog.com/.\r\n-->",
  "state": "CLOSED",
  "createdAt": "2021-04-04T17:34:16Z",
  "updatedAt": "2023-08-24T02:19:05Z",
  "closedAt": "2021-04-28T15:28:40Z",
  "author": {
    "login": "mattleibow"
  },
  "labels": [
    "bug",
    "needs-triage"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "Forgind"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Hello @mattleibow thanks for the report. This seems like something that should go to the Visual Studio team. This repo is for the .NET platform. Please click the feedback button in VS and report it there.",
        "createdAt": "2021-04-04T17:58:02Z",
        "updatedAt": "2021-04-04T17:58:02Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "Oh! Please disregard. I thought I was in the dotnet/runtime repo \u2639\ufe0f",
        "createdAt": "2021-04-04T17:58:55Z",
        "updatedAt": "2021-04-04T17:58:55Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "Maybe related, I notice that from the CLI the variable is not there as part of the restore step:  [msbuild.zip](https://github.com/dotnet/msbuild/files/6255383/msbuild.zip)\r\n\r\nI have some conditions based on the filter to select some TFMs. As a result the restore calculates the TFMs without the filter, and then builds with the filter.",
        "createdAt": "2021-04-04T21:26:59Z",
        "updatedAt": "2021-04-04T21:26:59Z",
        "author": {
          "login": "mattleibow"
        }
      },
      {
        "body": "Team Triage: Is the variable set via CLI outside of the restore step? Does this happen on a standard `msbuild <yourproject>` CLI build?",
        "createdAt": "2021-04-07T15:17:32Z",
        "updatedAt": "2021-04-07T15:17:32Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "This makes sense, since SolutionFile is where _solutionFilterFile is set, and that only happens when building a solution filter file from the command line. I'm assuming the binlog you sent was after opening a slnf in VS? If so, it seems that it's (correctly) identifying the solution file when parsing SolutionFileName, but I think the correct fix is also passing (and then setting) SolutionFilterFileName at the VS layer. I have a few guesses within the VS repo if you want to sync off GitHub, but I'm not very confident.\r\n\r\nAlso, I don't think it's Project System that sets it, but can you verify that @jjmew?",
        "createdAt": "2021-04-07T16:57:34Z",
        "updatedAt": "2021-04-07T16:57:34Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "Team triage: We decided this feature should not exist because we don't want build behavior to change based on a solution filter. Solution filters should reduce the amount of work a build does, but it should be a strict subset of the work a build of the connected solution file does. Closing as won't-fix.",
        "createdAt": "2021-04-28T15:28:40Z",
        "updatedAt": "2021-04-28T15:28:40Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "Right now this exists via a command line build. This makes it inconsistent.\r\n\r\nOne benefit of this feature is that I could have a few filters that focus on a subset. For example, I could have a big solution, but then have an iOS and a Windows filter. This way I can have a Windows filter that can run on windows and not try build an iOS app, and in the same way an iOS filter that excludes the Windows targets.",
        "createdAt": "2021-05-28T16:14:27Z",
        "updatedAt": "2021-05-28T16:14:27Z",
        "author": {
          "login": "mattleibow"
        }
      },
      {
        "body": "We actually removed support for this for command line builds as well in #6363.\r\n\r\nNote that support for solution filter files still exists, so you could build a solution filter file that refers to a few projects only relevant for iOS, for instance, and it would automatically include anything they directly depend on but not other projects. The difficulty is that although we want to support building a subset of a solution, we don't want to change how the projects that are built are built, which is something you could do with this extra property.",
        "createdAt": "2021-05-28T21:09:02Z",
        "updatedAt": "2021-05-28T21:09:02Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "> We decided this feature should not exist because we don't want build behavior to change based on a solution filter.\r\n\r\nBut I do. Scenario: We have a solution filter that only opens the unit test projects. When opening project using this filter, I want to create a switch that uses nuget package references instead of project references, so that I can properly run my unit test with generated nuget packages, and also validate that these work correctly.\r\n\r\nFor example\r\n```xml\r\n<ItemGroup Condition=\"'$(SolutionFilterName)'=='MySolutionFilter'\">\r\n    <PackageReference Include=\"MyProject\" Version=\"*\" />\r\n</ItemGroup>\r\n<ItemGroup Condition=\"'$(SolutionFilterName)'!='MySolutionFilter'\">\r\n    <ProjectReference Include=\"..\\MyProject\\MyProject.csproj\" />\r\n</ItemGroup>\r\n```\r\n\r\nThis makes it super easy for anyone to just open the test solution filter and run the unit tests with the latest build.\r\n\r\nCurrently we do this with a manually set switch, but would be much easier and less error-prone to tie it to the filter.",
        "createdAt": "2022-06-10T16:09:32Z",
        "updatedAt": "2022-06-10T16:10:02Z",
        "author": {
          "login": "dotMorten"
        }
      },
      {
        "body": "> But I do.\r\n\r\nIt is often very tempting! But it creates a lot of room for error. Here, I would worry about incremental build problems related to the switch between NuGet and project references that would be very difficult to track down. If this were the only possible way to use the information I might be tempted to think it wasn't terrible, but it's easy to create worse situations using the filter name, so I prefer to require manual opt-in (like you've built).",
        "createdAt": "2022-06-16T16:53:52Z",
        "updatedAt": "2022-06-16T16:53:52Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> We actually removed support for this for command line builds as well in #6363.\r\n> \r\n> Note that support for solution filter files still exists, so you could build a solution filter file that refers to a few projects only relevant for iOS, for instance, and it would automatically include anything they directly depend on but not other projects. The difficulty is that although we want to support building a subset of a solution, we don't want to change how the projects that are built are built, which is something you could do with this extra property.\r\n\r\nThis doesn't work as well as it relates to multi targeting. We could create a platform dependent permutation of every single project file we have but it'd be nice to be able to just key off of the opening `slnf` to modify the TFMs. \r\n\r\nCurrently the IDEs hit scenarios where they take a really long time to process a multi targeted `sln` so it'd be nice to be able to use the `SLNF` files to target a specific platform if that's the only platform you care about.  For example it currently takes 30 minutes for intellisense to process the MAUI repository because of how long the design time builds take iterating through all the TFMs\r\n\r\nOr maybe there's a different more integrated solution where you could somehow open the IDE and tell it to only care about X TFMs and then no-op the rest? \r\n\r\nWith the .NET MAUI repository we setup all our TFMS in a Directory.Build.Props here\r\nhttps://github.com/dotnet/maui/blob/main/Directory.Build.props#L68-L82\r\n\r\nSo, it'd be pretty easy for us to modify the TFMs given the right information",
        "createdAt": "2022-08-04T14:56:14Z",
        "updatedAt": "2022-08-04T15:23:22Z",
        "author": {
          "login": "PureWeen"
        }
      },
      {
        "body": "\ud83d\udc46would love to be able to simply focus on one platform this way",
        "createdAt": "2022-08-04T14:58:44Z",
        "updatedAt": "2022-08-04T14:58:44Z",
        "author": {
          "login": "dotMorten"
        }
      },
      {
        "body": "What we need is a concept of Build Profiles or Target Profiles for both solutions and projects respectively. But first we need to have a MSBuild native solution file format. Solution files are a concept tied to VS IDE only right now!",
        "createdAt": "2023-08-24T02:19:05Z",
        "updatedAt": "2023-08-24T02:19:05Z",
        "author": {
          "login": "Nirmal4G"
        }
      }
    ]
  }
}