{
  "number": 526,
  "title": "[RFC] Support fallback search paths for Target frameworks",
  "body": "Currently, target frameworks are looked up in the default location or a path specified by `$(TargetFrameworkRootPath)`. It would be useful to be able to look for these frameworks in more than one location. For example, in case of Xamarin products on OSX, mobile specific frameworks are installed in `/Library/Frameworks/Mono.framework/External/xbuild-frameworks` and the .net ones are installed in `/Library/Frameworks/Mono.framework/Versions/Current/lib/mono/xbuild-frameworks` .\n\nWith support for fallback search paths, a lookup for a target framework would follow the order:\n\n```\n    1. $(TargetFrameworkRootPath) or Default location is $(TargetFrameworkRootPath) is ''\n    2. Fallback search paths\n```\n\nThese fallback search paths can be set in app.config, per os, like:\n\n```\n<msbuildToolsets default=\"14.1\">\n  <toolset toolsVersion=\"14.1\">\n    <property name=\"TargetFrameworkRootPathSearchPathsOSX\" value=\"/tmp/foo;/tmp/bar\" />\n    <property name=\"TargetFrameworkRootPathSearchPathsWindows\" value=\"C:\\tmp\\foo;C:\\tmp\\bar\" />\n    ...\n```\n\nThis also depends on the issue #524 . \nI have a working patch for this approach.\n\nIf we don't want to add the new public overload from that issue, then the order could be:\n\n```\n    1. Default location (`$(TargetFrameworkRootPath)` being ignored :( )\n    2. Fallback search paths\n```\n\nI think the former approach, i.e., respect `$(TargetFrameworkRootPath)`, would be better.\n\nComments? Does this sound like something useful for master too?\n",
  "state": "CLOSED",
  "createdAt": "2016-03-15T20:07:08Z",
  "updatedAt": "2024-02-21T17:28:50Z",
  "closedAt": "2019-10-21T20:15:57Z",
  "author": {
    "login": "radical"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "I have opened a PR for this, #529 . Since I am not sure whether this approach is acceptable or not, the PR is still missing some tests.\n",
        "createdAt": "2016-03-17T22:37:23Z",
        "updatedAt": "2016-03-17T22:37:23Z",
        "author": {
          "login": "radical"
        }
      },
      {
        "body": "Any thoughts on this and #524 ?\n",
        "createdAt": "2016-04-05T22:32:47Z",
        "updatedAt": "2016-04-05T22:32:47Z",
        "author": {
          "login": "radical"
        }
      },
      {
        "body": "Another way to specify the search paths might be to make it consistent with the extensions path, like:\n\n```\n<msbuildFallbackSearchPaths>\n        <searchPaths os=\"windows\">\n                <property name=\"MSBuildExtensionsPath\" value=\"c:\\foo\\bar\"/>\n                <property name=\"MSBuildExtensionsPath32\" value=\"c:\\foo\\bar32\"/>\n\n                <property name=\"TargetFrameworkRootPath\" value=\"c:\\foo\\frmks\"/>\n        </searchPaths>\n       <searchPaths os=\"osx\">\n                <property name=\"MSBuildExtensionsPath\" value=\"/Library/Frameworks/Mono.framework/External/xbuild\"/>\n                <property name=\"MSBuildExtensionsPath32\" value=\"/Library/Frameworks/Mono.framework/External/xbuild\"/>\n\n                <property name=\"TargetFrameworkRootPath\" value=\"/Library/Frameworks/Mono.framework/External/xbuild-frameworks\"/>\n        </searchPaths>\n</msbuildFallbackSearchPaths>\n```\n\nThis would be consistent and easier to document+understand from the user pov.\n",
        "createdAt": "2016-04-11T13:19:24Z",
        "updatedAt": "2016-04-11T13:19:24Z",
        "author": {
          "login": "radical"
        }
      },
      {
        "body": "@radical we resolved this long ago, right?",
        "createdAt": "2019-10-21T20:15:57Z",
        "updatedAt": "2019-10-21T20:15:57Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Yep, resolved by https://github.com/microsoft/msbuild/pull/3277 .",
        "createdAt": "2019-10-22T09:35:32Z",
        "updatedAt": "2019-10-22T09:35:32Z",
        "author": {
          "login": "radical"
        }
      }
    ]
  }
}