{
  "number": 6732,
  "title": "SecurityUtilities chooses sha1 when signing using certificate signed with sha384",
  "body": "<!-- This is a template that helps us provide quicker feedback. Please use any relevant sections and delete anything you don't need. -->\r\n\r\n### Issue Description\r\nWhen using a certificate signed with sha384 to sign a file using the ManifestUtilities.SecurityUtilities class, it will choose the sha1 algorithm, which is considered deprecated in most contexts. \r\n\r\nWe encountered this issue when making a clickonce release package. The issue is also present when using mage.exe\r\n\r\nAs of june 1, most or all certificate authorities have started issuing certificates with a larger key size, and signed using sha384.\r\n\r\n### Steps to Reproduce\r\n<!--\r\n* Include as much of the following as possible:\r\n\r\n* A minimal sample project that reproduces the issue.\r\n* Your zipped project.\r\n* IDE / CLI steps to create the project and reproduce the behaviour.\r\n* Your command line invocation\r\n-->\r\nYou need:\r\n1. A certificate signed using the sha384 algorithm installed in your personal certificate store\r\n2. a file to be signed. in our case a clickonce manifest and application.\r\n\r\nUse the SecurityUtilities class to sign the file, something like below:\r\n```\r\nusing Microsoft.Build.Tasks.Deployment.ManifestUtilities;\r\nusing System;\r\n\r\nnamespace NovaSoftware.NsFrameworkTools.ClickOnceSigner\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            SecurityUtilities.SignFile(\"thumbprint of certificate\", new Uri(\"Uri to timestamp server\"), \"path to file\", \"4.7.2\");\r\n        }\r\n    }\r\n}\r\n```\r\nAnd then run the program.\r\n\r\n### Expected Behavior\r\nSecurityUtilities signs the file with at least sha256\r\n\r\n### Actual Behavior\r\nThe file is signed using sha1\r\n\r\n### Analysis\r\nThe SecurityUtilities class only chooses sha256 if the certificate used is signed with sha256, otherwise it defaults to sha1. Our understanding of how certificates work is that the algorithm used to signed the certificate should not affect the available signing algorithms when using the certificate.\r\n\r\n### Versions & Configurations\r\nThe issue is present in MSBuild main. We have investigated this in the v16.10 version.",
  "state": "CLOSED",
  "createdAt": "2021-08-04T11:15:08Z",
  "updatedAt": "2024-02-21T14:12:15Z",
  "closedAt": "2021-09-24T18:08:30Z",
  "author": {
    "login": "johan-e"
  },
  "labels": [
    "bug",
    "For consideration",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "sujitnayak"
      }
    ]
  },
  "milestone": {
    "title": "VS 17.0"
  },
  "comments": {
    "nodes": [
      {
        "body": "Team Triage: The check for which sha hash to use is located here:\r\n\r\nhttps://github.com/dotnet/msbuild/blob/4f8d57b40d49ab6b65f79a5963c1df26d3dcb68e/src/Tasks/ManifestUtil/SecurityUtil.cs#L610\r\n\r\nIt is reasonable to update this to, at the very least, not default to sha1.",
        "createdAt": "2021-08-05T16:54:15Z",
        "updatedAt": "2021-08-05T16:54:15Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "> It is reasonable to update this to, at the very least, not default to sha1.\r\n\r\n@sujitnayak does this sound reasonable?",
        "createdAt": "2021-08-05T17:01:47Z",
        "updatedAt": "2021-08-05T17:01:47Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "The current behavior is we default to SHA2 if the target framework supports it (.NET FX > 4.5) and the certificate signature algorithm is SHA256RSA. If not, we default to SHA1.\r\n\r\nTo make the desired change to default to the signature algorithm from the cert, we need to use a signtool.exe from Windows SDK 20236 or higher as described here: https://docs.microsoft.com/en-us/dotnet/framework/tools/signtool-exe.\r\n\r\nWe should consider making this change.\r\n\r\n",
        "createdAt": "2021-08-16T19:16:40Z",
        "updatedAt": "2021-08-16T19:16:55Z",
        "author": {
          "login": "sujitnayak"
        }
      },
      {
        "body": "The SecurityUtilities.SignFile is also used by ClickOnce to sign it's XML manifest file. We will need to determine if the ClickOnce runtime can handle manifest files that are signed with sha384/sha512 certs across all down-level OS's we support.",
        "createdAt": "2021-08-18T17:57:45Z",
        "updatedAt": "2021-08-18T17:57:45Z",
        "author": {
          "login": "sujitnayak"
        }
      }
    ]
  }
}