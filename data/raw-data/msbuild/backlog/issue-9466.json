{
  "number": 9466,
  "title": "[Broken Build]: Breaking Change in some sort of MSBuild order of operations prevents adding additional dlls to Analyzers and Tools",
  "body": "### Issue Description\n\nSome sort of build order or scoping change has made its way into the latest version of msbuild, \r\n\r\nThe standard way of adding something to an analyzer or tool is:\r\n```\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Configuration.ConfigurationManager\" GeneratePathProperty=\"true\"/>\r\n    <None Include=\"$(PkgSystem_Configuration_ConfigurationManager)\\lib\\$(TargetFramework)\\*.dll\" Pack=\"true\" PackagePath=\"analyzers/dotnet/cs\" Visible=\"false\"/>\r\n  </ItemGroup>\r\n```\r\n\r\nI was able to tap into the build order to create the following configuration, with a target that took place After \"ResolvePackageDependenciesForBuild\" and before \"GetTargetPathWithTargetPlatformMoniker\".\r\n\r\n```\r\n<ItemGroup>\r\n  <PackageReference Include=\"System.Configuration.ConfigurationManager\"/>\r\n  <PackageReferenceAsset Include=\"System.Configuration.ConfigurationManager\" PackagePath=\"analyzers/dotnet/cs\" PackageAsset=\"compile\"/>\r\n</ItemGroup>\r\n```\r\n\r\nNow, since upgrading to the latest version of .net 8, both of those options failed and I have to use 3 separate lines per reference.\r\n\r\n```  \r\n<ItemGroup>\r\n    <PackageReference Include=\"System.Configuration.ConfigurationManager\" GeneratePathProperty=\"true\"/>\r\n    <None Include=\"$(PkgSystem_Configuration_ConfigurationManager)\\lib\\$(TargetFramework)\\*.dll\" CopyToOutputDirectory=\"always\" Visible=\"false\"/>\r\n    <None Include=\"$(OutputPath)\\**\\System.Configuration.ConfigurationManager.dll\" Pack=\"true\" PackagePath=\"analyzers/dotnet/cs\" Visible=\"false\"/>\r\n  </ItemGroup>\r\n```\r\n\r\nThe problem is, in the first example I gave, when I replace $(PkgSystem_Configuration_ConfigurationManager)\\lib\\$(TargetFramework)\\*.dll with c:\\path\\to\\my\\System.Configuration.ConfigurationManager.dll, then it works and copies as expected. But apparently the GeneratePathProperty doesn't generate until after the copy. I say apparently cause it's hundreds of thousands of lines and I have been unable to track down what cause the ordering issue.\n\n### Steps to Reproduce\n\nCreate a net standard library with the following:\r\n\r\n```\r\n<PropertyGroup>\r\n    <IncludeBuildOutput>false</IncludeBuildOutput> <!-- Do not include the generator as a lib dependency -->\r\n    <!-- For NU5128 (Since net6.0 is the Framework, but there is no lib/ref directory -->\r\n    <SuppressDependenciesWhenPacking>true</SuppressDependenciesWhenPacking>\r\n</PropertyGroup>\r\n\r\n<ItemGroup>\r\n    <None Include=\"$(OutputPath)\\**\\$(AssemblyName).dll\" Pack=\"true\" PackagePath=\"analyzers/dotnet/cs\" Visible=\"false\"/>\r\n\r\n    <PackageReference Include=\"Newtonsoft.Json\" GeneratePathProperty=\"true\"/>\r\n    <None Include=\"$(PkgNewtonsoft_Json)\\lib\\$(TargetFramework)\\*.dll\" Pack=\"true\" PackagePath=\"analyzers/dotnet/cs\" Visible=\"false\"/>\r\n</ItemGroup>\r\n```\r\nThen, run DotNet pack.\n\n### Expected Behavior\n\nI expect that Newtonsoft.Json dll is packaged up in the /analyzers/dotnet/cs directory\n\n### Actual Behavior\n\nThe Newtonsoft.Json dll is not packaged up at all.\n\n### Ask us questions\n\nHere's my information:\r\n.NET SDK:\r\n Version:           8.0.100\r\n Commit:            57efcf1350\r\n Workload version:  8.0.100-manifests.6a1e483a\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\8.0.100\\\r\n\r\n.NET workloads installed:\r\n Workload version: 8.0.100-manifests.6a1e483a\r\nThere are no installed workloads to display.\r\n\r\nHost:\r\n  Version:      8.0.0\r\n  Architecture: x64\r\n  Commit:       5535e31a71\r\n\r\n.NET SDKs installed:\r\n  1.1.14 [C:\\Program Files\\dotnet\\sdk]\r\n  6.0.408 [C:\\Program Files\\dotnet\\sdk]\r\n  7.0.400 [C:\\Program Files\\dotnet\\sdk]\r\n  8.0.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.App 3.1.32 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 6.0.16 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 6.0.25 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 7.0.10 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 7.0.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 7.0.14 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 8.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.16 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.32 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 6.0.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 6.0.16 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 6.0.25 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 7.0.10 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 7.0.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 7.0.14 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 8.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.1.32 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 6.0.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 6.0.16 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 6.0.25 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 7.0.10 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 7.0.14 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 8.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nOther architectures found:\r\n  x86   [C:\\Program Files (x86)\\dotnet]\r\n    registered at [HKLM\\SOFTWARE\\dotnet\\Setup\\InstalledVersions\\x86\\InstallLocation]\r\n\r\nEnvironment variables:\r\n  Not set\r\n\r\nglobal.json file:\r\n  Not found\r\n\r\nLearn more:\r\n  https://aka.ms/dotnet/info\r\n\r\nDownload .NET:\r\n  https://aka.ms/dotnet/download\r\n",
  "state": "CLOSED",
  "createdAt": "2023-11-28T19:49:23Z",
  "updatedAt": "2024-03-06T09:21:24Z",
  "closedAt": "2024-03-06T09:21:24Z",
  "author": {
    "login": "EdLichtman"
  },
  "labels": [
    "needs-triage"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "GangWang01"
      },
      {
        "login": "JaynieBai"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "@EdLichtman What's the TargetFramework of your test project. \r\n\r\nI tested the following the project. It works as expected. Newtonsoft.Json.dll is copied to the packgepath\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>net6.0</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n<PropertyGroup>\r\n    <IncludeBuildOutput>false</IncludeBuildOutput> <!-- Do not include the generator as a lib dependency -->\r\n    <!-- For NU5128 (Since net6.0 is the Framework, but there is no lib/ref directory -->\r\n    <SuppressDependenciesWhenPacking>true</SuppressDependenciesWhenPacking>\r\n</PropertyGroup>\r\n\r\n<ItemGroup>\r\n    <None Include=\"$(OutputPath)\\**\\$(AssemblyName).dll\" Pack=\"true\" PackagePath=\"analyzers/dotnet/cs\" Visible=\"false\" />\r\n\r\n    <PackageReference Include=\"Newtonsoft.Json\" GeneratePathProperty=\"true\" Version=\"13.0.3\" />\r\n    <None Include=\"$(PkgNewtonsoft_Json)\\lib\\$(TargetFramework)\\*.dll\" Pack=\"true\" PackagePath=\"analyzers/dotnet/cs\" Visible=\"false\" />\r\n</ItemGroup>\r\n</Project>\r\n```",
        "createdAt": "2023-12-06T10:02:22Z",
        "updatedAt": "2023-12-19T06:52:58Z",
        "author": {
          "login": "JaynieBai"
        }
      },
      {
        "body": "This issue seems to have resolved itself. Do you guys issue nightly patches or something? I haven't updated my version of the SDK and I fought with this across 2 different computers, being able to reproduce on both for a good solid day. I'm incredibly confused as to how it could be working now without my having downloaded a new version.\r\n\r\nEdit:\r\nOh wait, I uninstalled version net8.0 locally! don't close the issue yet! Still testing",
        "createdAt": "2023-12-06T12:24:34Z",
        "updatedAt": "2023-12-06T12:30:17Z",
        "author": {
          "login": "EdLichtman"
        }
      },
      {
        "body": "Ok, to follow up, I re-installed version 8, with the same commit. The workload version is different though:\r\nWorkload version:  8.0.100-manifests.6c33ef20\r\ninstead of \r\nWorkload version: 8.0.100-manifests.6a1e483a\r\n\r\nI would like to know how it was fixed without any intervention on my part to download a new version.\r\n\r\nBut yes, the issue is no longer present on this workload version.",
        "createdAt": "2023-12-06T12:38:05Z",
        "updatedAt": "2023-12-06T12:38:05Z",
        "author": {
          "login": "EdLichtman"
        }
      },
      {
        "body": "Workload manifests can be updated out of band (typically any interaction with workloads via workload installs, update, etc will first update the manifests) but the manifests themselves have no build logic. Unless you actually installed a workload I'd expect zero change from them. ",
        "createdAt": "2023-12-06T13:29:44Z",
        "updatedAt": "2023-12-06T13:29:44Z",
        "author": {
          "login": "baronfel"
        }
      },
      {
        "body": "Hm... very weird. I need to test this out on my work computer with my custom libraries but i don't want to hold the ticket open longer than it needs to be held. I'll get back to you in a few hours and we'll see about closing the ticket",
        "createdAt": "2023-12-06T14:11:09Z",
        "updatedAt": "2023-12-06T14:11:09Z",
        "author": {
          "login": "EdLichtman"
        }
      },
      {
        "body": "Well, I guess it's working now. Very good.",
        "createdAt": "2023-12-06T14:26:22Z",
        "updatedAt": "2023-12-06T14:26:22Z",
        "author": {
          "login": "EdLichtman"
        }
      },
      {
        "body": "I was wrong. This is still broken. \r\n\r\nI will upload a binlog soon.\r\n\r\nThe problem stems from one of my targets breaking -- I added a target that converts something called \"PackageReferenceAsset\" into an automatic upload. But now, due to some change in the system, the target is broken. And when I do the usual, same thing happens. \r\n\r\nI just need approval before I can publish the binlog.",
        "createdAt": "2023-12-15T15:28:31Z",
        "updatedAt": "2023-12-15T15:28:31Z",
        "author": {
          "login": "EdLichtman"
        }
      },
      {
        "body": "OH!!! I'm starting to get onto something here...\r\n\r\n\r\nThere seems to be a specific distinction between how this works when you use `<TargetFrameworks>` versus when you use `<TargetFramework>`.\r\n\r\nI have a massive monorepo of libraries, and at the root I have `<TargetFrameworks>net6.0;net8.0</TargetFrameworks>`\r\n\r\nThen, in some places I have     \r\n```xml\r\n<TargetFrameworks/>\r\n<TargetFramework>netstandard2.0</TargetFramework>\r\n```\r\n\r\nAnd in this one particular place for which I opened the issue, I had:\r\n```xml\r\n    <TargetFrameworks>netstandard2.0</TargetFrameworks>\r\n```\r\n\r\nTry the build using TargetFrameworks instead of TargetFramework.\r\n\r\nIn fact, my target which converts the PackageReferenceAsset is also only broken under the scenario that `<TargetFrameworks>` is being used instead of `<TargetFramework>`.",
        "createdAt": "2023-12-15T17:15:46Z",
        "updatedAt": "2023-12-15T17:18:43Z",
        "author": {
          "login": "EdLichtman"
        }
      },
      {
        "body": "Thanks @rainersigwald for making my post cleaner by adding code visibility. I'm sorry I didn't do that initially.",
        "createdAt": "2023-12-15T17:19:34Z",
        "updatedAt": "2023-12-15T17:19:34Z",
        "author": {
          "login": "EdLichtman"
        }
      },
      {
        "body": "Also, this is the Targets I have that you can play around with that sparked this open defect.\r\n\r\nBasically, you add the following to your code:\r\n`<PackageReferenceAsset Include=\"Newtonsoft.Json\" Dependency=\"compile\" PackagePath=\"analyzers/dotnet/cs\"/>`\r\n\r\nAnd it will copy the dll into the PackagePath folder.\r\n\r\n```\r\n<!-- For every PackageReference with Pack=true, we include the TargetPathWithTargetPlatformMoniker\r\n       using a combination of these scripts -->\r\n    <!-- https://til.cazzulino.com/msbuild/how-to-include-package-reference-files-in-your-nuget-package -->\r\n    <!-- https://turnerj.com/blog/the-pain-points-of-csharp-source-generators -->\r\n    <!-- Adds all DependencyTargetPaths for all dependencies so we don't have to list each one. -->\r\n    <Target \r\n      Name=\"AddGenerationTimePackageAssets\" \r\n      BeforeTargets=\"GetTargetPathWithTargetPlatformMoniker\"\r\n      AfterTargets=\"ResolvePackageDependenciesForBuild\"\r\n      Condition=\"@(PackageReferenceAsset -&gt; Count()) &gt; 0 and '$(SkipAddGenerationTimePackageAssets)' != 'true'\"\r\n      Outputs=\"%(ResolvedCompileFileDefinitions.NuGetPackageId)\">\r\n      <!-- Find The current Package Reference -->\r\n      <ItemGroup>\r\n        <_NuGetPackageId Include=\"@(ResolvedCompileFileDefinitions -> '%(NuGetPackageId)')\" />\r\n      </ItemGroup>\r\n\r\n      <!-- find the PackageId for that reference -->\r\n      <PropertyGroup>\r\n        <_NuGetPackageId>@(_NuGetPackageId -&gt; Distinct())</_NuGetPackageId>\r\n      </PropertyGroup>\r\n\r\n      <!-- Find the PackageReferenceAsset dependencies that match this NuGet Package Id  -->\r\n      <ItemGroup>\r\n        <_PackageReferenceAssetDependency Include=\"@(PackageReferenceAsset -> WithMetadataValue('Identity', $(_NuGetPackageId)))\"/>\r\n      </ItemGroup> \r\n      <PropertyGroup>\r\n        <_PackageReferenceAssetDependencyCount>@(_PackageReferenceAssetDependency -&gt; Count())</_PackageReferenceAssetDependencyCount>\r\n        <_ShouldPackageAsset>False</_ShouldPackageAsset>\r\n        <_ShouldPackageAsset Condition=\"$(_PackageReferenceAssetDependencyCount) != 0\">True</_ShouldPackageAsset>\r\n      </PropertyGroup>\r\n\r\n      <Error Condition= \"'$(_ShouldPackageAsset)' == 'True' and '%(_PackageReferenceAssetDependency.Dependency)' != 'compile' \" Text=\"'%(_PackageReferenceAssetDependency.Identity)' PackageReferenceAsset was included but Dependency was set to '%(_PackageReferenceAssetDependency.Dependency)'. This configuration is not yet supported.\"/>\r\n\r\n      <!-- Resolve their path on disc for assets. -->\r\n      <ItemGroup Condition=\" '$(_ShouldPackageAsset)' == 'True' \">\r\n        <_ResolvedPackableCompileFileDefinitions Include=\"@(ResolvedCompileFileDefinitions -&gt; WithMetadataValue('NuGetPackageId', '$(_NuGetPackageId)'))\">\r\n          <PackagePath>@(_PackageReferenceAssetDependency -&gt; '%(PackagePath)')</PackagePath>\r\n        </_ResolvedPackableCompileFileDefinitions>\r\n      </ItemGroup>\r\n\r\n      <ItemGroup Condition=\" '$(_ShouldPackageAsset)' == 'True' \">\r\n        <!-- For Project References -->\r\n        <TargetPathWithTargetPlatformMoniker Include=\"@(_ResolvedPackableCompileFileDefinitions)\" IncludeRuntimeDependency=\"false\" />\r\n        <!-- For Package References -->\r\n        <None \r\n          Include=\"%(_ResolvedPackableCompileFileDefinitions.Identity)\" \r\n          Pack=\"true\" \r\n          PackagePath=\"%(_ResolvedPackableCompileFileDefinitions.PackagePath)\" \r\n          Visible=\"false\"/>\r\n      </ItemGroup>\r\n    </Target>\r\n\r\n    <Target\r\n    Name=\"AddGenerationTimeProjectAssets\" \r\n    BeforeTargets=\"GetTargetPathWithTargetPlatformMoniker\"\r\n    AfterTargets=\"AddGenerationTimePackageAssets\"\r\n    Condition=\"@(PackageReferenceAsset -&gt; Count()) &gt; 0 and '$(SkipAddGenerationTimeProjectAssets)' != 'true'\">\r\n      <!-- Find all package reference Assets and group them into a new Item -->\r\n      <ItemGroup>\r\n        <_ProjectReferenceAsset Include=\"@(PackageReferenceAsset)\"/>\r\n      </ItemGroup>\r\n      <!-- Remove any where the Identity is part of Resolved Compile File Definitions -->\r\n      <ItemGroup>\r\n        <_ProjectReferenceAsset Remove=\"@(TargetPathWithTargetPlatformMoniker -&gt; '%(NuGetPackageId)')\"></_ProjectReferenceAsset>\r\n      </ItemGroup>\r\n      <PropertyGroup>\r\n        <_ProjectReferenceAssetDependencyCount>@(_ProjectReferenceAsset -&gt; Count())</_ProjectReferenceAssetDependencyCount>\r\n        <_ShouldPackageAsset>False</_ShouldPackageAsset>\r\n        <_ShouldPackageAsset Condition=\"$(_ProjectReferenceAssetDependencyCount) != 0\">True</_ShouldPackageAsset>\r\n      </PropertyGroup>\r\n\r\n\r\n      <Error Condition= \"'$(_ShouldPackageAsset)' == 'True' and '%(_ProjectReferenceAsset.Dependency)' != 'compile' \" Text=\"'%(_ProjectReferenceAsset.Identity)' PackageReferenceAsset was included but Dependency was set to '%(_ProjectReferenceAsset.Dependency)'. This configuration is not yet supported.\"/>\r\n\r\n      <ItemGroup Condition=\" '$(_ShouldPackageAsset)' == 'True' \">\r\n        <None \r\n          Condition=\" '%(_ProjectReferenceAsset.Dependency)' == 'compile' \" \r\n          Include=\"$(OutputPath)\\**\\%(_ProjectReferenceAsset.Identity).dll\" \r\n          Pack=\"true\" \r\n          PackagePath=\"%(_ProjectReferenceAsset.PackagePath)\" \r\n          Visible=\"false\"\r\n        />\r\n      </ItemGroup>\r\n    </Target>\r\n\r\n    <ItemGroup>\r\n      <PackageReferenceAsset Update=\"*\" Visible=\"false\"/>\r\n    </ItemGroup>\r\n```",
        "createdAt": "2023-12-15T17:26:55Z",
        "updatedAt": "2023-12-15T17:26:55Z",
        "author": {
          "login": "EdLichtman"
        }
      },
      {
        "body": "> OH!!! I'm starting to get onto something here...\r\n> \r\n> There seems to be a specific distinction between how this works when you use `<TargetFrameworks>` versus when you use `<TargetFramework>`.\r\n> \r\n> I have a massive monorepo of libraries, and at the root I have `<TargetFrameworks>net6.0;net8.0</TargetFrameworks>`\r\n> \r\n> Then, in some places I have\r\n> \r\n> ```\r\n> <TargetFrameworks/>\r\n> <TargetFramework>netstandard2.0</TargetFramework>\r\n> ```\r\n> \r\n> And in this one particular place for which I opened the issue, I had:\r\n> \r\n> ```\r\n>     <TargetFrameworks>netstandard2.0</TargetFrameworks>\r\n> ```\r\n> \r\n> Try the build using TargetFrameworks instead of TargetFramework.\r\n> \r\n> In fact, my target which converts the PackageReferenceAsset is also only broken under the scenario that `<TargetFrameworks>` is being used instead of `<TargetFramework>`.\r\n\r\nWhen dealing with multiple target frameworks specified in `<TargetFrameworks>`, you can conditionally patch the corresponding assembly and copy it to the output path.  For example:\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\t<PropertyGroup>\r\n\t\t<TargetFrameworks>netstandard2.0;net6.0</TargetFrameworks>\r\n\t</PropertyGroup>\r\n\r\n\t<ItemGroup Condition=\"'$(TargetFramework)' == 'netstandard2.0'\">\r\n\t\t<PackageReference Include=\"Newtonsoft.Json\" GeneratePathProperty=\"true\" Version=\"13.0.3\" />\r\n\t\t<None Include=\"$(PkgNewtonsoft_Json)\\lib\\$(TargetFramework)\\*.dll\" Pack=\"true\" PackagePath=\"analyzers/dotnet/cs\" Visible=\"false\" CopyToOutputDirectory=\"PreserveNewest\" />\r\n\t</ItemGroup>\r\n\r\n\t<ItemGroup Condition=\"'$(TargetFramework)' == 'net6.0'\">\r\n\t\t<PackageReference Include=\"Newtonsoft.Json\" GeneratePathProperty=\"true\" Version=\"13.0.3\" />\r\n\t\t<None Include=\"$(PkgNewtonsoft_Json)\\lib\\$(TargetFramework)\\*.dll\" Pack=\"true\" PackagePath=\"analyzers/dotnet/cs\" Visible=\"false\" CopyToOutputDirectory=\"PreserveNewest\" />\r\n\t</ItemGroup>\r\n\t<ItemGroup>\r\n\t\t<None Include=\"$(OutputPath)\\**\\*.dll\" Pack=\"true\" PackagePath=\"analyzers/dotnet/cs\" Visible=\"false\" />\r\n\t</ItemGroup>\r\n</Project>\r\n```",
        "createdAt": "2023-12-20T07:06:15Z",
        "updatedAt": "2023-12-20T07:06:15Z",
        "author": {
          "login": "JaynieBai"
        }
      },
      {
        "body": "Wouldn't it be better and simpler to have one ItemGroup where  '$(TargetFramework)' != '' ? Or would that not work?\r\n\r\nIt seems to defeat the purpose when I'm trying to take a few lines and merge them into 1 if the suggestion is to have 6 lines per Package Reference... but since I'm only using the PackageReferenceAsset for Analyzers and build assets, which are netstandard in how I'm using them, I'm dealing with the workaround of just having TargetFramework.",
        "createdAt": "2024-01-04T01:34:01Z",
        "updatedAt": "2024-01-04T01:34:01Z",
        "author": {
          "login": "EdLichtman"
        }
      },
      {
        "body": "> Wouldn't it be better and simpler to have one ItemGroup where '$(TargetFramework)' != '' ? Or would that not work?\r\n\r\nSorry for the misunderstanding.  You can use one ItemGroup if all the targetFrameworks have the same intention. \r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\t<PropertyGroup>\r\n\t\t<TargetFrameworks>netstandard2.0;net6.0</TargetFrameworks>\r\n\t</PropertyGroup>\r\n\r\n\t<ItemGroup>\r\n\t\t<PackageReference Include=\"Newtonsoft.Json\" GeneratePathProperty=\"true\" Version=\"13.0.3\" />\r\n\t\t<None Include=\"$(PkgNewtonsoft_Json)\\lib\\$(TargetFramework)\\*.dll\" Pack=\"true\" PackagePath=\"analyzers/dotnet/cs\" Visible=\"false\" CopyToOutputDirectory=\"PreserveNewest\"/>\r\n\t</ItemGroup>\r\n\r\n\t<ItemGroup>\r\n\t\t<None Include=\"$(OutputPath)\\**\\*.dll\" Pack=\"true\" PackagePath=\"analyzers/dotnet/cs\" Visible=\"false\" />\r\n\t</ItemGroup>\r\n</Project>\r\n```",
        "createdAt": "2024-01-04T07:58:48Z",
        "updatedAt": "2024-01-04T07:58:48Z",
        "author": {
          "login": "JaynieBai"
        }
      },
      {
        "body": "Close the ticket since it sounds like a resolved issue.\r\nFeel free to reopen if it is still relevant.",
        "createdAt": "2024-03-06T09:21:24Z",
        "updatedAt": "2024-03-06T09:21:24Z",
        "author": {
          "login": "YuliiaKovalova"
        }
      }
    ]
  }
}