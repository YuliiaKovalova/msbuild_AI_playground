{
  "number": 3019,
  "title": "Solution parser fails when projects have similar names ",
  "body": "### Steps to reproduce\r\n\r\nAttempt to build this solution:\r\n\r\n```\r\nMicrosoft Visual Studio Solution File, Format Version 12.00\r\n# Visual Studio 15\r\nVisualStudioVersion = 15.0.27130.2010\r\nMinimumVisualStudioVersion = 10.0.40219.1\r\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"Project.Named.With.Dots\", \"Project.Named.With.Dots.csproj\", \"{FC2889D9-6050-4D2E-B022-979CCFEEAAAC}\"\r\nEndProject\r\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"Project_Named_With_Dots\", \"Project_Named_With_Dots.csproj\", \"{ED30D4A3-1214-410B-82BB-B61E5A9D05CA}\"\r\nEndProject\r\nGlobal\r\n\tGlobalSection(SolutionConfigurationPlatforms) = preSolution\r\n\t\tRelease|Any CPU = Release|Any CPU\r\n\tEndGlobalSection\r\n\tGlobalSection(ProjectConfigurationPlatforms) = postSolution\r\n\t\t{FC2889D9-6050-4D2E-B022-979CCFEEAAAC}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{FC2889D9-6050-4D2E-B022-979CCFEEAAAC}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{ED30D4A3-1214-410B-82BB-B61E5A9D05CA}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{ED30D4A3-1214-410B-82BB-B61E5A9D05CA}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\tEndGlobalSection\r\n\tGlobalSection(SolutionProperties) = preSolution\r\n\t\tHideSolutionNode = FALSE\r\n\tEndGlobalSection\r\n\tGlobalSection(ExtensibilityGlobals) = postSolution\r\n\t\tSolutionGuid = {C038ED6B-BFC1-4E50-AE2E-7993F6883D7F}\r\n\tEndGlobalSection\r\nEndGlobal\r\n```\r\n\r\n### Expected  behavior\r\n\r\nSuccessful build.\r\n\r\n### Actual behavior\r\n\r\n```\r\nBuild FAILED.\r\n\r\n         C:\\Users\\raines\\source\\repos\\SolutionWithConflictingNames\\SolutionWithConflictingNames.sln : Solution file error MSB5004: The solution file has two projects named \"Project_Named_With_Dots\".\r\n\r\n    0 Warning(s)\r\n    1 Error(s)\r\n\r\nTime Elapsed 00:00:00.05\r\n```\r\n\r\n### Environment data\r\n`msbuild /version` output: `Microsoft (R) Build Engine version 15.5.180.51428 for .NET Framework`\r\n\r\n(Related to #530 but different since the solution is entirely valid here and the conflict is within MSBuild.)",
  "state": "CLOSED",
  "createdAt": "2018-02-22T16:25:13Z",
  "updatedAt": "2024-02-21T17:14:20Z",
  "closedAt": "2020-08-14T17:03:19Z",
  "author": {
    "login": "rainersigwald"
  },
  "labels": [
    "bug",
    "Area: Solution (.sln)",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "@rainersigwald Jumping in here... Our project is blocked by this as we rely on AppVeyor to do CI and CMake generates project names exactly like this... Do you have a workaround on this issue? Many thanks!",
        "createdAt": "2019-12-31T21:31:29Z",
        "updatedAt": "2019-12-31T21:31:29Z",
        "author": {
          "login": "ProfFan"
        }
      },
      {
        "body": "@rainersigwald I can see 2 solutions here. Based on your experience, which one is better and has less impact? (or if you have another one)\r\n\r\n1. Remove the char '.' from the `s_charsToCleanse` char[] attribute ([line of code](https://github.com/microsoft/msbuild/blob/e0116872ef1bf48f1f527d69de64ad58cb7453e0/src/Build/Construction/Solution/ProjectInSolution.cs#L82));\r\n2. Change the value of `cleanCharacter` attribute to another character, like pipe '|' ([line of code](https://github.com/microsoft/msbuild/blob/e0116872ef1bf48f1f527d69de64ad58cb7453e0/src/Build/Construction/Solution/ProjectInSolution.cs#L92))",
        "createdAt": "2020-04-26T20:42:34Z",
        "updatedAt": "2020-04-26T20:43:06Z",
        "author": {
          "login": "joseotavioq"
        }
      },
      {
        "body": "@joseotavioq Unfortunately both have compat impact: either way we'd break people's build command lines that build on the current `.`->`_` behavior.\r\n\r\nThe only way I can think of that doesn't have that impact is to detect collisions caused solely by normalization and normalize in a different way somehow.",
        "createdAt": "2020-04-28T01:11:50Z",
        "updatedAt": "2020-05-13T21:59:42Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald I am trying to figure out a solution to this issue.\r\n\r\nI am thinking about generating the unique name concatenating the repeated normalized project name with the project Guid.\r\n\r\nFor example:\r\n- Project_Named_With_Dots_{FC2889D9-6050-4D2E-B022-979CCFEEAAAC}\r\n- Project_Named_With_Dots\r\n\r\nWhat do you think about it?\r\n\r\nHowever, when I was thinking about this solution, the following case came to me:\r\n\r\nWe have 2 projects with the same name that are going to be normalized.\r\n```\r\nProject('{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}') = 'Project.Named.With.Dots', 'Project.Named.With.Dots.csproj', '{FC2889D9-6050-4D2E-B022-979CCFEEAAAC}'\r\nEndProject\r\nProject('{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}') = 'Project_Named_With_Dots', 'Project_Named_With_Dots.csproj', '{ED30D4A3-1214-410B-82BB-B61E5A9D05CA}'\r\nEndProject\r\nProject('{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}') = 'Project.Named.With.Dots', 'Project.Named.With.Dots.csproj', '{6185CC21-BE89-448A-B3C0-D1C27112E595}'\r\nEndProject\r\n```\r\n\r\nWhat should we do in this case?\r\n1. Normalize both, as below, and continue without throwing an exception.\r\n- Project_Named_With_Dots_{FC2889D9-6050-4D2E-B022-979CCFEEAAAC}\r\n- Project_Named_With_Dots\r\n- Project_Named_With_Dots_{6185CC21-BE89-448A-B3C0-D1C27112E595}\r\n\r\n2. Return an error because there are two projects with exactly the same project name.\r\n",
        "createdAt": "2020-05-13T15:07:05Z",
        "updatedAt": "2020-05-13T15:07:05Z",
        "author": {
          "login": "joseotavioq"
        }
      },
      {
        "body": "I think it makes sense to support multiple colliding project names with their GUID suffix. I would do it for all three of the normalized project names in your example 1.\r\n\r\nDoing so would require that `CleanseProjectName` know enough about the solution to be able to apply that transformation. I'm not sure how much it's worth building that knowledge in.",
        "createdAt": "2020-05-13T22:14:00Z",
        "updatedAt": "2020-05-13T22:14:00Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "And what about the duplicated projects? In the example above, I showed two projects with the same non-normalized name (Project.Named.With.Dots) in the SLN file.",
        "createdAt": "2020-05-18T16:28:35Z",
        "updatedAt": "2020-05-18T16:28:35Z",
        "author": {
          "login": "joseotavioq"
        }
      },
      {
        "body": "@joseotavioq I'm fine with leaving that as an error per #530. But if you wanted to use the disambiguation code needed for this to fix that too, I think it'd be helpful.\r\n\r\nAll of this is more helpful for folk who just build solutions--I don't imagine too many people will be typing `-t:Project_Named_With_Dots_6185CC21-BE89-448A-B3C0-D1C27112E595` on the command line. But that's still helpful!",
        "createdAt": "2020-05-19T12:30:32Z",
        "updatedAt": "2020-05-19T12:30:32Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Hey @rainersigwald, I created a draft PR #5367. Could you please review the solution and see if it solves the problem?",
        "createdAt": "2020-05-22T19:00:41Z",
        "updatedAt": "2020-05-22T19:00:41Z",
        "author": {
          "login": "joseotavioq"
        }
      },
      {
        "body": "I use `-t:Project_Name:Build` pattern when I'm doing build on the command line. I have also used it on CI scripts.\r\n\r\nBut is there any possible way to change `-t:Project_Named_With_Dots_6185CC21-BE89-448A-B3C0-D1C27112E595` into something more command line friendly `-t:Project_Named_With_Dots_Alias2`?\r\n\r\n```sln\r\nProject('{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}') = 'Project.Named.With.Dots.Alias1', 'Project.Named.With.Dots.csproj', '{FC2889D9-6050-4D2E-B022-979CCFEEAAAC}'\r\nEndProject\r\nProject('{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}') = 'Project_Named_With_Dots', 'Project_Named_With_Dots.csproj', '{ED30D4A3-1214-410B-82BB-B61E5A9D05CA}'\r\nEndProject\r\nProject('{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}') = 'Project.Named.With.Dots.Alias2', 'Project.Named.With.Dots.csproj', '{6185CC21-BE89-448A-B3C0-D1C27112E595}'\r\nEndProject\r\n```\r\n\r\nIs this even possible with VS or MSBuild?",
        "createdAt": "2020-05-22T19:39:04Z",
        "updatedAt": "2020-05-22T19:39:04Z",
        "author": {
          "login": "Nirmal4G"
        }
      }
    ]
  }
}