{
  "number": 6482,
  "title": "When programmatically building a .vcxproj in .NETCORE, target evaluation fails due to missing namespace in Microsoft.Build.Utilities.Core.dll",
  "body": "### Issue Description\r\nBuilding a .vcxproj programmatically from a c# .netcore program fails due to a namespace that only exists in the framework version of the .dll\r\n\r\nERROR C:\\\\Program Files (x86)\\\\Microsoft Visual Studio\\\\2019\\\\Enterprise\\\\MSBuild\\\\Microsoft\\\\VC\\\\v160\\\\Microsoft.CppCommon.targets(192,5): The \\\"GetOutOfDateItems\\\" task failed unexpectedly.\r\nSystem.TypeLoadException: Could not load type 'Microsoft.Build.Utilities.CanonicalTrackedOutputFiles' from assembly 'Microsoft.Build.Utilities.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.\r\n   at Microsoft.Build.CPPTasks.GetOutOfDateItems.Execute()\r\n   at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute()\r\n   at Microsoft.Build.BackEnd.TaskBuilder.ExecuteInstantiatedTask(ITaskExecutionHost taskExecutionHost, TaskLoggingContext taskLoggingContext, TaskHost taskHost, ItemBucket bucket, TaskExecutionMode howToExecuteTask)\r\n\r\n### Steps to Reproduce\r\nUsing the following packages:\r\n\r\n.csproj\r\n\\<PackageReference Include=\"Microsoft.Build\" Version=\"16.9.0\" />\r\n\\<PackageReference Include=\"Microsoft.Build.Runtime\" Version=\"16.9.0\" />\r\n\\<PackageReference Include=\"Microsoft.Build.Tasks.Core\" Version=\"16.10.0-preview-21205-05\" />\r\n\\<PackageReference Include=\"Microsoft.Build.Utilities.Core\" Version=\"16.10.0-preview-21205-05\" />\r\n\r\nC#\r\n(.nuget\\packages\\microsoft.build\\16.9.0\\lib\\netcoreapp2.1\\Microsoft.Build.dll)\r\n// construct a project/projectCollection object with the appropriate env variables by setting Environment.SetVariable...\r\n// In .netcore, the registry and .exe.config options for building a ProjectCollection are ifdef'ed out\r\nvar isSuccess = project.Build(new string[] { \"Rebuild\" }, new ILogger[] { logger }\r\n\r\n.vcxproj\r\n\\<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n\\<Project DefaultTargets=\"Build\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\r\n  \\<ItemGroup Label=\"ProjectConfigurations\">\r\n    \\<ProjectConfiguration Include=\"Debug|Win32\">\r\n      \\<Configuration>Debug</Configuration>\r\n      \\<Platform>Win32</Platform>\r\n    \\</ProjectConfiguration>\r\n  \\</ItemGroup>\r\n  \\<PropertyGroup Label=\"Globals\">\r\n    \\<VCProjectVersion>16.0</VCProjectVersion>\r\n    \\<Keyword>Win32Proj</Keyword>\r\n    \\<ProjectGuid>{03d14b07-50ba-4cf4-b9e3-9c5f240fdef8}</ProjectGuid>\r\n    \\<RootNamespace>SimpleProject</RootNamespace>\r\n    \\<WindowsTargetPlatformVersion>10.0</WindowsTargetPlatformVersion>\r\n  \\</PropertyGroup>\r\n  \\<Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.Default.props\" />\r\n  \\<Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.props\" />\r\n  \\<Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.targets\" />\r\n  \\<ImportGroup Label=\"ExtensionTargets\" />\r\n\\</Project>\r\n### Expected Behavior\r\nThe target evaluates without failing, or there is a shim dll to include from another nuget package to resolve the issue\r\n\r\n### Actual Behavior\r\nTarget evaluation fails due to the dll load failure\r\n\r\n### Analysis\r\nThis failure makes sense because the CanonicalTrackedOutputFiles class only exists in the .netframework version of the dll because FEATURE_FILE_TRACKER is only defined when building that configuration.\r\nhttps://github.com/dotnet/msbuild/blob/9bcc06cbe19ae2482ab18eab90a82fd079b26897/src/Utilities/TrackedDependencies/CanonicalTrackedOutputFiles.cs\r\n\r\n#if FEATURE_FILE_TRACKER\r\n\r\nnamespace Microsoft.Build.Utilities\r\n{\r\n    /// \\<summary>\r\n    /// This class is the filetracking log interpreter for .write. tracking logs in canonical form\r\n    /// Canonical .write. logs need to be rooted, since the outputs need to be associated with an input.\r\n    /// \\</summary>\r\n    public class CanonicalTrackedOutputFiles\r\n    { \r\n.....\r\n\r\nHowever, I would expect some way to get around this missing class when trying to programmatically build in my .netcore app, or for the api to throw a notSupportedException if the scenario is not supposed to be supported.\r\n\r\n### Versions & Configurations\r\nMicrosoft (R) Build Engine version 16.9.0+5e4b48a27 for .NET Framework\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n16.9.0.16703\r\n\r\n### Attach a binlog",
  "state": "OPEN",
  "createdAt": "2021-05-25T04:49:03Z",
  "updatedAt": "2024-01-31T08:21:05Z",
  "closedAt": null,
  "author": {
    "login": "wShaw"
  },
  "labels": [
    "bug",
    ".NET Core",
    "Area: Engine",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Backlog"
  },
  "comments": {
    "nodes": [
      {
        "body": "Team Triage: We agree that the error should be some sort of NotSupportedException. However, the .NET SDK does not support building cpp projects",
        "createdAt": "2021-05-26T15:31:59Z",
        "updatedAt": "2021-05-26T15:32:54Z",
        "author": {
          "login": "benvillalobos"
        }
      }
    ]
  }
}