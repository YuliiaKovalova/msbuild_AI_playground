{
  "number": 1774,
  "title": "Language Service for MSBuild",
  "body": "Currently, MSBuild gets syntax highlighting in most cases by piggybacking on XML. In Visual Studio, there is also some code completion based on XSDs.\r\n\r\nThis is better than nothing but doesn't help with the particularly hard parts of MSBuild, like completion of property names or item transforms.\r\n\r\nIt would be nice if there was a broadly-compatible language service that worked in (at least) VS, VS Code, and VS Mac.",
  "state": "OPEN",
  "createdAt": "2017-03-01T17:02:59Z",
  "updatedAt": "2024-02-21T16:37:22Z",
  "closedAt": null,
  "author": {
    "login": "rainersigwald"
  },
  "labels": [
    "needs-design",
    "Feature Request",
    "For consideration",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Backlog"
  },
  "comments": {
    "nodes": [
      {
        "body": "We have been talking about this for years but I couldn't find an issue to track it.\r\n\r\nPrior art: @mhutch's https://github.com/mhutch/MonoDevelop.MSBuildEditor.",
        "createdAt": "2017-03-01T17:05:07Z",
        "updatedAt": "2017-03-01T17:05:07Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Strong desire: an indication of the common but hard-to-diagnose error \"you're using `$()` to reference an item/`@()` to reference a property\" when only one or the other but not both is defined.\r\n\r\nSimilarly, having visual disambiguation between an item name and a property name could be extremely helpful.",
        "createdAt": "2017-03-01T17:06:50Z",
        "updatedAt": "2017-03-01T17:09:27Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Not sure if it can be useful, but I have a full-fidelity XML parser with no dependencies:\r\nhttps://github.com/KirillOsenkov/XmlParser\r\n\r\nAlso the old internal MSBuild source code has a prototype-level MSBuild language service written using ANTLR:\r\n\\src\\xmake\\LanguageService\r\n\r\nFinally, it might be worth following up with XAML folks to see what we can reuse there. XAML language service is pretty powerful.\r\n\r\n/cc @piotrpMSFT @mlorbetske",
        "createdAt": "2017-03-01T18:58:15Z",
        "updatedAt": "2017-03-01T18:58:15Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "In my head, we'd plug into a project using our current evaluation model. I _think_ it exposes almost all of the information you'd need for both colorization and completion. I hope we wouldn't need to write a grammar from scratch that's a superset of XML. I'm a bit shocked that someone tried!",
        "createdAt": "2017-03-01T21:25:36Z",
        "updatedAt": "2017-03-01T21:25:36Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> \"you're using $() to reference an item/@() to reference a property\" when only one or the other but not both is defined.\r\n\r\nStuff like that could be in a /lint mode. Not necessarily possible for a langauge service to see statically.",
        "createdAt": "2017-03-01T21:25:55Z",
        "updatedAt": "2017-03-01T21:25:55Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "> /lint mode\r\n\r\nYeah, good somewhat orthogonal thought. Filed #1777.\r\n\r\nI think a reasonable language service could have enough information to do this, at least for outside-of-targets definitions . . . _if_ it was evaluating the project in the right environment, which is a big consideration for the language service. Should be easy enough to get \"the right environment\" when in VS, but potentially harder in other environments.",
        "createdAt": "2017-03-01T21:36:10Z",
        "updatedAt": "2017-03-01T21:36:10Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Hi - just saw this issue while searching for something else, and figured I'd leave this here for anyone who else who comes across it:\r\n\r\nhttps://github.com/tintoy/msbuild-project-tools-vscode/\r\n\r\nIt's LSP-compatible (currently works with VS Code and Eclipse) so feel free to reuse if it helps.",
        "createdAt": "2017-12-17T21:27:03Z",
        "updatedAt": "2017-12-17T21:27:03Z",
        "author": {
          "login": "tintoy"
        }
      },
      {
        "body": "(it also has support for parsing and interpreting MSBuild expressions)",
        "createdAt": "2017-12-17T21:30:28Z",
        "updatedAt": "2017-12-17T21:30:28Z",
        "author": {
          "login": "tintoy"
        }
      },
      {
        "body": "I think at this point @mhutch's language service is the clear winner in terms of functionality:\r\nhttps://twitter.com/mjhutchinson/status/941214242644086784",
        "createdAt": "2017-12-17T21:54:30Z",
        "updatedAt": "2017-12-17T21:54:30Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "Functionality looks the same to me but if that's what best fits your use-case then fair enough :)",
        "createdAt": "2017-12-17T21:57:54Z",
        "updatedAt": "2017-12-17T21:57:54Z",
        "author": {
          "login": "tintoy"
        }
      },
      {
        "body": "A language service needs a way to discover what items and properties to suggest. That shouldn't be the XSD. The XSD always was a big hack from day one. It is hard to read/grok, big and fat, non contextual, and relies on a single point of truth. In contrast the AvailableItemName concept has been successful because it allowed props/targets to add entries by convention in a simple decentralized way. \r\n\r\nWe could replace the XSDs with a similar convention rooted in the props files. For example `<AvailableItemNameFile Include=\"myitems.items\"/>` where `myitems.items` is MSBuild format using conventions to describe properties, items and metadata. The file is not `<Import>`ed so it does not add bloat to project load/build. But it linked from the props file so that it is contextual to the project being edited.",
        "createdAt": "2019-05-09T00:16:30Z",
        "updatedAt": "2019-05-09T00:16:30Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "@danmosemsft make sure you saw https://github.com/mhutch/MonoDevelop.MSBuildEditor. It has videos what it can do. It doesn't use XSD but uses custom logic to intelligently calculate available completion items.\r\n\r\nWe're going to port it to VS editor soon.",
        "createdAt": "2019-05-09T00:19:02Z",
        "updatedAt": "2019-05-09T00:19:02Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "Tagging @panopticoncentral who has been looking at this space lately too.",
        "createdAt": "2019-05-09T14:53:23Z",
        "updatedAt": "2019-05-09T14:53:23Z",
        "author": {
          "login": "Pilchie"
        }
      },
      {
        "body": "Hey, that looks great. I see it uses a json sidecar file - I guess that works too.",
        "createdAt": "2019-05-09T16:16:45Z",
        "updatedAt": "2019-05-09T16:16:45Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "@mhutch",
        "createdAt": "2019-05-09T16:46:49Z",
        "updatedAt": "2019-05-09T16:46:49Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "I'd love to hear comments on my MSBuild schema format. Hoping to finalize it soon so folks can start shipping sidecar schemas alongside their targets..",
        "createdAt": "2019-05-14T19:18:24Z",
        "updatedAt": "2019-05-14T19:18:24Z",
        "author": {
          "login": "mhutch"
        }
      }
    ]
  }
}