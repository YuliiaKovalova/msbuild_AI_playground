{
  "number": 3274,
  "title": "Problem with glob in item transformation.",
  "body": "I have problem with glob expanding in item transformation expression. Have you any IDEA how can i fix it?\r\n### Steps to reproduce\r\nProject file\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<Project xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\" ToolsVersion=\"15.0\">\r\n  <PropertyGroup>\r\n    <ParserGenOutputBase>C:\\Work\\test\\Core\\Psi\\Gen\\</ParserGenOutputBase>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PsiLanguageNames Include=\"TypeScript;JsDoc;JavaScript;Css\">\r\n      <Visible>False</Visible>\r\n      <LanguageName>%(Identity)</LanguageName>\r\n    </PsiLanguageNames>\r\n    <ParserGen Include=\"Src\\JavaScript\\Parsing.TypeScript\\TypeScript.psi\" />\r\n    <ParserGen Include=\"Src\\JavaScript\\Parsing.JsDoc\\JsDoc.psi\" />\r\n    <ParserGen Include=\"Src\\JavaScript\\Parsing\\JavaScript.psi\" />\r\n    <ParserGen Include=\"Src\\Css\\Parsing\\Css.psi\" />\r\n\r\n    <Compile Include=\"@(PsiLanguageNames->'$(ParserGenOutputBase)Parsing\\%(Identity)\\**\\*.cs')\">\r\n      <Link>Src\\Gen\\Css\\%(LanguageName)\\Psi\\Stub</Link>\r\n      <Visible>True</Visible>\r\n    </Compile>\r\n    \r\n  </ItemGroup>\r\n  <Target Name=\"Build\">\r\n    <Message Text=\"@(Compile)\" />\r\n  </Target>\r\n</Project>\r\n```\r\n\r\n### Expected  behavior\r\nGlob in \"Compile\" item group expanded in file list\r\n\r\n### Actual behavior\r\n\"Compile\" item group contains items with TransformedPath\\**\\*.cs include path.\r\n\r\n### Environment data\r\n`msbuild /version` output:\r\nMicrosoft (R) Build Engine version 15.6.85.37198 for .NET Framework\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n15.6.85.37198\r\nOS info:\r\nWindows\r\n\r\n",
  "state": "OPEN",
  "createdAt": "2018-05-07T10:17:27Z",
  "updatedAt": "2024-02-21T16:34:06Z",
  "closedAt": null,
  "author": {
    "login": "mfilippov"
  },
  "labels": [
    "Area: Documentation",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Any chance there are files in those directories with long paths, making this an instance of #406? ",
        "createdAt": "2018-05-07T14:50:34Z",
        "updatedAt": "2018-05-07T14:50:34Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald No, I checked it. I found the similar issue on StackOverflow: https://stackoverflow.com/questions/48868060/can-a-task-itemgroup-glob-files I think problem connected with the globe in item transformation.",
        "createdAt": "2018-05-07T14:54:31Z",
        "updatedAt": "2018-05-07T14:54:48Z",
        "author": {
          "login": "mfilippov"
        }
      },
      {
        "body": "@rainersigwald I think I could create a test for repro this issue.",
        "createdAt": "2018-05-07T14:55:28Z",
        "updatedAt": "2018-05-07T14:55:28Z",
        "author": {
          "login": "mfilippov"
        }
      },
      {
        "body": "Just stumbled over this issue. Having the exact same issue. It seems item transformation treats glob characters as literals.",
        "createdAt": "2021-08-12T15:20:41Z",
        "updatedAt": "2021-08-12T15:20:41Z",
        "author": {
          "login": "ViktorHofer"
        }
      },
      {
        "body": "The trick with the intermediate property from https://stackoverflow.com/questions/48868060/can-a-task-itemgroup-glob-files only work inside a target in case that helps root causing this.",
        "createdAt": "2021-08-12T15:26:44Z",
        "updatedAt": "2021-08-12T15:26:44Z",
        "author": {
          "login": "ViktorHofer"
        }
      },
      {
        "body": "@rainersigwald we just hit this w/ a transform in dotnet/aspnetcore and are applying the workaround. But, what's the status of this issue\u2754 It seems to occur with the 6.0.100 SDK.",
        "createdAt": "2021-11-23T00:20:22Z",
        "updatedAt": "2021-11-23T00:20:32Z",
        "author": {
          "login": "dougbu"
        }
      },
      {
        "body": "This is happening because MSBuild is escaping the return value of the item transformation, as it does with basically all property-function/transformation returns. Generally you can wrap with the `[MSBuild]::Unescape()` property function, but that doesn't work here because `error MSB4012: The expression \"$([MSBuild]::Unescape(@(Folders->'%(Identity)\\*.txt'))\" cannot be used in this context. Item lists cannot be concatenated with other strings where an item list is expected. Use a semicolon to separate multiple item lists.`\r\n\r\nWhich is true enough, I suppose. Perhaps we should consider adding an `Unescape` _item function_, though, since there's no way to do this at evaluation time. The first-flatten-it-to-a-property-then-create-an-item-from-that approach is a nice workaround in a target.",
        "createdAt": "2021-11-23T16:16:55Z",
        "updatedAt": "2021-11-23T16:16:55Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Even when you are in a target though, you can get into difficult scenarios where you can't use that property work around like the OP's example as the item included and its meta property are bound together by (in their case) both using \"LanguageName\".\r\n\r\nI have a similar issue with my own project where I tried doing this within a target:\r\n\r\n```xml\r\n<PropertyGroup>\r\n\t<_BuildVersioningInclude>@(_TargetFrameworks->'../TurnerSoftware.BuildVersioning.Tool/bin/$(Configuration)/%(Identity)/*')</_BuildVersioningInclude>\r\n\t<_BuildVersioningPackagePath>@(_TargetFrameworks->'tools/%(Identity)')</_BuildVersioningPackagePath>\r\n</PropertyGroup>\r\n<ItemGroup>\r\n\t<None Include=\"$(_BuildVersioningInclude)\" Pack=\"true\" PackagePath=\"$(_BuildVersioningPackagePath)\" />\r\n</ItemGroup>\r\n```\r\n\r\nThe end result was having each include have multiple package paths where I want one package path per include.\r\nReally what I want to do is this (below) but I can't for the same globbing issue.\r\n\r\n```xml\r\n<None Include=\"@(_TargetFrameworks->'../TurnerSoftware.BuildVersioning.Tool/bin/$(Configuration)/%(Identity)/*')\" Pack=\"true\" PackagePath=\"tools/%(_TargetFrameworks.Identity)\" />\r\n```",
        "createdAt": "2021-11-28T07:42:10Z",
        "updatedAt": "2021-11-28T07:43:39Z",
        "author": {
          "login": "Turnerj"
        }
      },
      {
        "body": "Hit this again because I forgot about the \"only works inside a target\" caveat @ViktorHofer mentioned [above](https://github.com/dotnet/msbuild/issues/3274#issuecomment-897734202). The case was simpler than an item transformation, underscoring @rainersigwald's \"basically all property-function/transformation returns\" point in [another comment](https://github.com/dotnet/msbuild/issues/3274#issuecomment-976790021).\r\n\r\n----\r\n\r\n``` msbuild\r\n<PropertyGroup>\r\n    <HelixContentPackageSource>$([MSBuild]::NormalizePath('$(ArtifactsShippingPackagesDir)', '*$(SharedFxVersion).nupkg'))</HelixContentPackageSource>\r\n</PropertyGroup>\r\n<ItemGroup>\r\n    <HelixContent Include=\"$(HelixContentPackageSource)\"/>\r\n</ItemGroup>\r\n```\r\n\r\nAccording to a binary log, `$(HelixContentPackageSource)` has a correct value e.g. `{...}\\artifacts\\packages\\Debug\\Shipping\\Microsoft.AspNetCore.App.*7.0.0-dev.nupkg` but the `@(HelixContent)` item added _also_ has an Asterix in it.\r\n\r\n(I had an easy way out (`$(ArtifactsShippingPackagesDir)*$(SharedFxVersion).nupkg`) in this case because `$(ArtifactsShippingPackagesDir)` is guaranteed to end with an appropriate slash. Still a gotcha that wasted part of my day.)",
        "createdAt": "2022-02-12T03:29:20Z",
        "updatedAt": "2022-02-12T03:35:10Z",
        "author": {
          "login": "dougbu"
        }
      }
    ]
  }
}