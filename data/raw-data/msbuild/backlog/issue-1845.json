{
  "number": 1845,
  "title": "Project references not always copied even when Private is transitively set to True",
  "body": "# Overview\r\nTake [the following solution][reprorepo], with emphasis on references:\r\n![References overview](https://cloud.githubusercontent.com/assets/8878006/23790767/c9ac4fc6-0580-11e7-85c8-49a08347f035.png)\r\nSolid lines denote project references with `Private` set to `True`.\r\nDashed lines denote project references with `Private` set to `False`.\r\nDash-dot lines denote project references with `Private` undefined.\r\n\r\n# Issue\r\nWith MSBuild 14.0, `ClassLibrary0` is not copied to `ConsoleApplication6`'s output directory.\r\nThis is consistent for builds from inside Visual Studio 2015, as well as from the command line.\r\n\r\n# Analysis\r\nUsing Kirill Osenkovs [MSBuild Structured Log Viewer][analysis-tool].\r\nIn the build of `ConsoleApplication6`, MSBuild realizes it needs `ClassLibrary0`. However, for whatever reasons it cannot find the reference:\r\n![build-analysis-1](https://cloud.githubusercontent.com/assets/8878006/23790766/c9ab9324-0580-11e7-9c94-299f5b3fe69e.png)\r\n\r\nA partial insight is given by this message when building `ClassLibrary2`.\r\n![build-analysis-2](https://cloud.githubusercontent.com/assets/8878006/23790765/c9ab7006-0580-11e7-825f-88aef0796b5d.png)\r\n\r\nWe now understand and accept that `ClassLibrary0` won't be copied to `ClassLibarary2`.\r\n\r\nNote that this means that the `Private` flag is actually [tri-state][quotegravell], which can be quite a surprise for Visual Studio users acustomed to the boolean `Copy Local` property.\r\n\r\nHowever, this doesn't explain why `ClassLibrary0` is not copied to `ConsoleApplication6`, since there is a complete chain of project references having `Private` set to `True` straight from `ConsoleApplication6` to `ClassLibrary0`.\r\n\r\n# Work-Around\r\nFrom the analysis, it's quite easy to fix the issue:\r\nSet `Private = True` for the project reference from `ClassLibrary2` to `ClassLibrary1`.\r\n\r\n[reprorepo]: https://github.com/chm-tm/msbuild-projectref-private-glitch\r\n[analysis-tool]: https://github.com/KirillOsenkov/MSBuildStructuredLog\r\n[quotegravell]: http://stackoverflow.com/questions/14923804/assembly-being-copied-local-when-it-shouldnt-be#comment20939785_14923854",
  "state": "OPEN",
  "createdAt": "2017-03-10T10:08:12Z",
  "updatedAt": "2024-02-21T16:37:11Z",
  "closedAt": null,
  "author": {
    "login": "chm-tm"
  },
  "labels": [
    "needs-design",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Consider for Next Major Version"
  },
  "comments": {
    "nodes": [
      {
        "body": "btw, I was testing this sample today and I've noticed that the transitive dependencies are only copied if there is a symbolic reference from a direct dependency.\r\nFor example , in the graph from above, if Lib1 has a symbolic ref to Lib0 (e.g. a field such as Lib0.Class1 _myField) then Lib3 ends up with Lib3.dll,Lib1.dll and Lib0.dll. \r\n\r\nHowever, if you comment that line (or declare it as a different type like an interface or System.Object) then Lib3 ends up with Lib3 and Lib1.dll. Lib0.dll doesn't get copied. \r\n\r\nI've find this behaviour particularly confusing. It makes it impossible to predict what dependencies are copied by simply looking at dependencies in the project file\r\n",
        "createdAt": "2017-11-16T10:39:17Z",
        "updatedAt": "2017-11-16T10:39:17Z",
        "author": {
          "login": "sebastianslutzky"
        }
      },
      {
        "body": "@sebastianslutzky This is why I've included symbolic references for each project reference. I just didn't want to mix different issues.",
        "createdAt": "2017-11-16T11:03:11Z",
        "updatedAt": "2017-11-16T11:03:26Z",
        "author": {
          "login": "chm-tm"
        }
      },
      {
        "body": "I've hit this as well. Thanks for the workaround!",
        "createdAt": "2020-06-13T14:56:14Z",
        "updatedAt": "2020-06-13T14:56:14Z",
        "author": {
          "login": "Nirmal4G"
        }
      }
    ]
  }
}