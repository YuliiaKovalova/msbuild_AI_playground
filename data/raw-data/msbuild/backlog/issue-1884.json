{
  "number": 1884,
  "title": "MSbuild looks for Microsoft.CSharp.Core.Targets in the wrong location",
  "body": "# Situation: \r\nWe have a test project that consumes Microsoft.Build.Runtime. But running on netcoreapp1.0, it cant seem to find `Microsoft.CSharp.Core.Targets` - \r\n\r\n`System.AggregateException : One or more errors occurred. (The imported project \"C:\\BuildAgent\\work\\8c88fbea7b978ad6\\NuGet.Client\\test\\NuGet.Core.FuncTests\\NuGet.XPlat.FuncTest\\bin\\Release\\netcoreapp1.0\\win7-x64\\Roslyn\\Microsoft.CSharp.Core.targets\" was not found. Confirm that the path in the <Import> declaration is correct, and that the file exists on disk. `\r\n\r\nAfter talking a bit with @rainersigwald and @jeffkl, we firgured that we need to add dependencies to `Microsoft.Net.Compilers.netcore` and `Microsoft.CodeAnalysis.Build.Tasks` that publish `Microsoft.CSharp.Core.Targets` at `$(OutputPath)$(TargetFramework)\\$(RuntimeIdentifier)\\Microsoft.CSharp.Core.targets`. \r\n\r\n# Problem: \r\nHowever msbuild expects the file at - `$(OutputPath)$(TargetFramework)\\$(RuntimeIdentifier)\\Roslyn\\Microsoft.CSharp.Core.targets`.\r\n\r\n# WorkAround: \r\nI had to add a post build step to xcopy the file.\r\n\r\nTHis should not be so hard for the end user. Not sure if msbuild should change the look up path or the package owners should change the publish path. Feel free to redirect the bug to the package owners, if needed.",
  "state": "CLOSED",
  "createdAt": "2017-03-17T19:01:57Z",
  "updatedAt": "2024-02-21T17:20:34Z",
  "closedAt": "2017-03-17T19:23:19Z",
  "author": {
    "login": "mishra14"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Duplicate of https://github.com/Microsoft/msbuild/issues/1810 \r\n\r\nI had mentioned you'll need to set `$(RoslynTargetsPath)`.  This is because the Roslyn team asked us to [not place Roslyn in the same folder as MSBuild](https://github.com/Microsoft/msbuild/pull/1339).\r\n\r\nThe property is set [in our app.config](https://github.com/Microsoft/msbuild/blob/6851538897f5d7b08024a6d8435bc44be5869e53/src/MSBuild/app.config#L86) and is used [here](https://github.com/Microsoft/msbuild/blob/6851538897f5d7b08024a6d8435bc44be5869e53/src/Tasks/Microsoft.CSharp.CurrentVersion.targets#L320).  \r\n\r\nIf MSBuild is installed on the machine and your tests run in a Visual Studio Developer Command Prompt, then you shouldn't need to do anything.  However, MSBuild 15.0 no longer places itself in the registry which makes it impossible for MSBuild to find itself.  This is because of a mandate by Visual Studio where you can have multiple side-by-side installations.  MSBuild in this case would be installed once per Visual Studio instance.  MSBuild now finds itself by looking at environment variables set by the VS command prompt.\r\n\r\nIf you want to fully redistribute MSBuild via a combination of our packages and all of the other packages needed to do full project evaluation, you will have to set `RoslynTargetsPath` before you load projects.  You could argue this is an issue with NuGet since all packages' `<contentFiles />` go to the the root of your output directory and you can't specify a subdirectory for certain packages.",
        "createdAt": "2017-03-17T19:23:19Z",
        "updatedAt": "2017-03-17T19:23:19Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "Hi @jeffkl @mishra14  I am building a webservice project on a TFS2017 server with TFS2017 build tools installed. I get the following error:\r\n\r\n`C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\MSBuild\\15.0\\Bin\\Microsoft.CSharp.CurrentVersion.targets(322,5): Error MSB4019: The imported project \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\MSBuild\\15.0\\Bin\\Roslyn\\Microsoft.CSharp.Core.targets\" was not found. Confirm that the path in the declaration is correct, and that the file exists on disk.`\r\n\r\nI tried manually copying the Microsoft.CSharp.Core.targets to the imported project folder location but still get the error. \r\n\r\nWhat steps do I need to take to make this work?",
        "createdAt": "2017-11-13T10:21:41Z",
        "updatedAt": "2017-11-13T10:21:41Z",
        "author": {
          "login": "doorman02"
        }
      },
      {
        "body": "I found a solution to this problem. I downloaded the Mono source from https://download.mono-project.com/sources/mono/mono-6.12.0.90.tar.xz, then I built and installed Mono. It installed to /usr/local/bin and all I had to do was to create a symlink from this version of Mono to version installed with apt by issueing this command:\r\nsudo ln -s /usr/local/lib/mono/msbuild/Current/bin/Roslyn /usr/lib/mono/msbuild/Current/bin/Roslyn",
        "createdAt": "2020-10-09T16:20:14Z",
        "updatedAt": "2020-10-09T16:20:14Z",
        "author": {
          "login": "johnbester"
        }
      }
    ]
  }
}