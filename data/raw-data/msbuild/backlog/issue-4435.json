{
  "number": 4435,
  "title": "GenerateProjectSpecificOutputFolder does not play nice with nuget package creation and multi-targetting",
  "body": "### Steps to reproduce\r\n\r\nCreate a VS solution with a Project file myproject.csproj, targetting multiple frameworks and creating a nuget package. \r\nFor example (derived from https://docs.microsoft.com/en-us/dotnet/standard/frameworks):\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFrameworks>netstandard2.0;net40;net45</TargetFrameworks>\r\n    <AssemblyName>MyProject</AssemblyName>\r\n    <PackageId>MyProject</PackageId>\r\n    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>\r\n  </PropertyGroup>\r\n\r\n  <!-- Conditionally obtain references for the .NET Framework 4.0 target -->\r\n  <ItemGroup Condition=\" '$(TargetFramework)' == 'net40' \">\r\n    <Reference Include=\"System.Net\" />\r\n  </ItemGroup>\r\n\r\n  <!-- Conditionally obtain references for the .NET Framework 4.5 target -->\r\n  <ItemGroup Condition=\" '$(TargetFramework)' == 'net45' \">\r\n    <Reference Include=\"System.Net.Http\" />\r\n    <Reference Include=\"System.Threading.Tasks\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\r\n\r\nThen build the solution from a VS developer command prompt using something like this:\r\n```\r\nmsbuild somesolution.sln /p:Configuration=Debug;OutDir=\"c:\\test\\debug\\\\\";GenerateProjectSpecificOutputFolder=true\r\n```\r\n\r\n### Expected  behavior\r\n1) The 3 dlls/outputs for netstandard2.0, net40 and net45 should be written to different directories, i.e. c:\\test\\debug\\myproject.net45 or c:\\test\\debug\\myproject\\net45 or c:\\test\\debug\\net45\\myproject.\r\n2) The generated .nupkg should appear in or under the c:\\test\\debug directory.\r\n\r\n### Actual behavior\r\n1) All 3 outputs are written into the same directory (c:\\test\\debug\\myproject), overwriting each other and creating build race conditions for larger solutions.\r\n2) The generated .nupkg only appears in the bin\\debug directory under the directory containing the .csproj, but nowhere under the outdir (c:\\test\\debug).\r\n\r\n### Workaround:\r\nAdd this to the .csproj:\r\n\r\n```xml\r\n    <ProjectName>$(AssemblyName).$(TargetFramework)</ProjectName>\r\n    <PackageOutputPath>$(OutDir)</PackageOutputPath>\r\n```\r\nThis creates directories c:\\test\\debug\\myproject.net45 etc. and places the .nupkg into c:\\test\\debug.\r\n\r\nIt would be nice if this could just work without customizing each .csproj.\r\n\r\n### Environment data\r\n\r\n`msbuild /version` output:\r\nMicrosoft (R) Build Engine version 16.1.76+g14b0a930a7 for .NET Framework\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n16.1.76.45076\r\n\r\nVS 2019 16.1.2, VS 2017 15.9.11\r\nAlso happens on the Azure DevOps VS2017 managed build agent as of June 2019.\r\n\r\nOS info: Windows 10\r\n\r\n",
  "state": "CLOSED",
  "createdAt": "2019-06-12T21:51:53Z",
  "updatedAt": "2024-02-21T17:08:07Z",
  "closedAt": "2019-06-12T23:49:59Z",
  "author": {
    "login": "MarkusHorstmann"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "This is a dup of https://github.com/dotnet/sdk/issues/867.",
        "createdAt": "2019-06-12T23:49:59Z",
        "updatedAt": "2019-06-12T23:49:59Z",
        "author": {
          "login": "livarcocc"
        }
      }
    ]
  }
}