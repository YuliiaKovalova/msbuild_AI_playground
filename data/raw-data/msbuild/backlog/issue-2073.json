{
  "number": 2073,
  "title": "Readonly resource files cause GenerateResources task to fail",
  "body": "Originally posted as a feedback item: https://developercommunity.visualstudio.com/content/problem/51550/compiling-a-readonly-restext-file-fails-for-net-st.html#\r\n\r\n> Compiling a read/only .restext file with the build action \"Embedded resource\" as part of a .NET Standard 1.6 class library project fails with the error message: error MSB3103: Invalid Resx file. Access to the path 'C:\\Code\\etc\\Text.restext' is denied. After changing the file attributes to read/write the project compiles without any errors. With Visual Studio 2015 it was no problem to create class libraries with embedded .restext files, even if the files were read/only due to source control. Now we would like to migrate our class libraries to Visual Studio 2017 and .NET Standard 1.6. This error, however, makes us stick with Visual Studio 2015 as it is just to much of a hazzle to manually change the read/only attribute of all .restext files before compiling. ",
  "state": "CLOSED",
  "createdAt": "2017-05-08T15:05:02Z",
  "updatedAt": "2024-02-21T17:19:16Z",
  "closedAt": "2017-05-09T16:45:16Z",
  "author": {
    "login": "rainersigwald"
  },
  "labels": [
    "bug",
    ".NET Core",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "rainersigwald"
      }
    ]
  },
  "milestone": {
    "title": "MSBuild 15.3"
  },
  "comments": {
    "nodes": [
      {
        "body": "I was able to reproduce this. In the debugger, this is the failure:\r\n\r\n```\r\nSystem.UnauthorizedAccessException occurred\r\n  HResult=0x80070005\r\n  Message=Access to the path 's:\\work\\readonly\\x.restext' is denied.\r\n  Source=<Cannot evaluate the exception source>\r\n  StackTrace:\r\n   at System.IO.Win32FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options, FileStream parent)\r\n```\r\n\r\nThat's happening inside a `File.Open()` call, which isn't doing anything fancy, and hasn't changed in MSBuild. `File.Open(filename, FileMode)` is [documented](https://docs.microsoft.com/en-us/dotnet/api/system.io.file.open?view=netframework-4.6#System_IO_File_Open_System_String_System_IO_FileMode_) to open the file in read/write mode. I suspect we just need to change that call to pass `FileAccess.Read`.",
        "createdAt": "2017-05-08T15:37:25Z",
        "updatedAt": "2017-05-08T15:37:25Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}