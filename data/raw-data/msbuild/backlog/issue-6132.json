{
  "number": 6132,
  "title": "Is it possible to allow remote projectreference from git repo?",
  "body": "In addition to building project and publish into package, sometimes it was more convenient to let the project reference another project directly and compile it along with the main project\r\n\r\nBut current method of projectreference require project to present in machine and reference it only locally. Which is inconvenient and require setup on each machine\r\n\r\nSo I think msbuild should allow referencing git repo in csproj. Internally you could pull git project into temp folder and do the same process as projectreference. But it should be standardize and allow us to build project with CI/CD by projectreference\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.BlazorWebAssembly\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\r\n  <ItemGroup>\r\n    <ProjectReference\r\n      Include=\"src/Blazor.Extensions.Canvas/Blazor.Extensions.Canvas.csproj\"\r\n      Repo=\"https://github.com/BlazorExtensions/Canvas.git\"      <!-- the source repo -->\r\n      Commit=\"3d9b5e6eccb0a66d34172f07ceeb8b7f4d82aaec\"      <!-- commit ID for versioning -->\r\n    />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIs it possible?",
  "state": "OPEN",
  "createdAt": "2021-02-08T13:57:02Z",
  "updatedAt": "2024-01-31T08:22:07Z",
  "closedAt": null,
  "author": {
    "login": "Thaina"
  },
  "labels": [
    "needs-design",
    "Feature Request",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Backlog"
  },
  "comments": {
    "nodes": [
      {
        "body": "It's a nice idea, but I don't think this would work well for any but the most basic projects.\r\n\r\nSpecifically, if the only part of the git repo you want is src/Blazor.Extensions.Canvas/Blazor.Extensions.Canvas.csproj, then it would be quick to pull down just that and continue your build\u2014but you could also do that beforehand or in a separate build step\u2014there's probably a way to do it with the DownloadFile task.\r\n\r\nIn the more normal case, you'd want a csproj plus everything it depends on, which is unknown before attempting to download it, so we would have to eagerly download the whole repo, which would take a lot of time. If you do want to go this route, it might be reasonable to clone the repo locally and just update it (git pull) as part of each build. Still slower than if you had it locally, but better.\r\n\r\nDoes that sound reasonable to you?",
        "createdAt": "2021-02-10T16:41:44Z",
        "updatedAt": "2021-02-10T16:42:07Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "@Forgind I wish that we could have the process you describe be standard automatic process of msbuild along with reference package from nuget\r\n\r\nAs I said, I wish we could let the msbuild clone project into temp folder of local machine. And by temp folder I means it could cache and share between project, only delete when space is required, and so it kept the shallow copy of specific version for rebuild, the same way we kept download package from nuget in local machine\r\n\r\nAnd the main point is, it then allow me to share my project to other machine, and do CI/CD job on the CI/CD server like github or bitbucket, with just an element of projectreference, in the same manner as nuget denpendency",
        "createdAt": "2021-02-10T17:55:00Z",
        "updatedAt": "2021-02-10T17:55:15Z",
        "author": {
          "login": "Thaina"
        }
      },
      {
        "body": "So to see if I understand correctly, you're proposing an MSBuild command that downloads just one file from a GitHub repo and puts it in the %temp% folder (in a folder like %TEMP%\\Canvas\\Blazor.Extensions.Canvas.csproj or %TEMP%\\Canvas\\src\\Blazor.Extensions.Canvas\\Blazor.Extensions.Canvas.csproj or on its own?) and save it there between builds, only deleting it if the computer is running out of memory?\r\n\r\nOne extra problem to consider is when we should assume it's out-of-date. If we aren't maintaining the full repo between builds, we'd essentially have to download it every time if we wanted to ensure that it's still up-to-date (or at least download a timestamp for it) and at that point, we may as well be using the DownloadFile task.",
        "createdAt": "2021-02-11T21:19:43Z",
        "updatedAt": "2021-02-11T21:19:43Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "@Forgind The repo should be considered outdated manually, like a specific version of nuget package, the commit ID is like the version itself. I consider this as constraint for this method of referencing, unless we have an ability to specified semver query with git commit\r\n\r\nBut I also have something in mind, maybe we could specified `Commit` attribute as `{anybranch}/HEAD` or `{anybranch}/{anytag}` and that would request to check remote server on every build and pull every change, or maybe on `dotnet restore` that will update repo to that version\r\n\r\n> downloads just one file\r\n\r\nWell, maybe not. I think we must load the shallow copy of the repo, which is all of the files in that commit. But in that repo it could contain any folder structure so we also need to specified where and which `csproj` we want to include\r\nThen again, if we have this kind of feature in msbuild. We then have ability to create repo and project separate from each other as one repo per project. And reference all dependency by its repo directly\r\n\r\n> or on its own?\r\n\r\nI think we should download into `%TEMP%/msbuildreference/github.com/BlazorExtensions/Canvas/{Commit}`. It would be like local centralized mirror that every project will be reused the same project of the same commit",
        "createdAt": "2021-02-12T01:52:13Z",
        "updatedAt": "2021-02-12T01:52:50Z",
        "author": {
          "login": "Thaina"
        }
      },
      {
        "body": "Using commit ID as a version could work as far as telling the build system when it's out-of-date, but it's clunky. Also, unless I'm following the repo closely, I presumably wouldn't know I should change the commit sha, nor would I know what to change it to. At that point, is it easier to have a separate task or just to run `git checkout <sha>` from the relevant repo whenever you need to?\r\n\r\nI'm starting to worry about the security aspects of this. If I specify that I want whatever code happens to be in, say, dotnet/msbuild:master, and the owner of msbuild:master is malicious, that owner could put whatever code they wanted there, and you would automatically download it and run it even if you don't change your code at all. Looking at specific commits sounds safer to me.\r\n\r\nHaving all the files in a commit doesn't necessarily mean you have all the files the files you need rely on. Like I can update Microsoft.Common.CurrentVersion.targets without touching any of the tasks it relies on, which would mean I would just be relying on the previous versions. Pulling in just the commit would miss that.\r\n\r\nI do like the \\Canvas\\{Commit} plan as far as preventing wrong version-type errors, but it would also make invalidating (and deleting) pseudo-repos hard. Git has an incredible branching structure so it only has to remember diffs when switching between commits. If we were to have a separate folder for each commit we asked for, that could be several almost-identical versions of the same repo side-by-side, which would waste a lot of memory. Deleting them is made difficult because they're shared\u2014you'd have to verify that no project references a particular commit before you could delete its folder. Otherwise, you'd risk downloading the same commit of the same repo every time you switched what you were working on.",
        "createdAt": "2021-02-12T22:35:45Z",
        "updatedAt": "2021-02-12T22:35:45Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "> Using commit ID as a version could work as far as telling the build system when it's out-of-date, but it's clunky. Also, unless I'm following the repo closely, I presumably wouldn't know I should change the commit sha, nor would I know what to change it to. At that point, is it easier to have a separate task or just to run git checkout <sha> from the relevant repo whenever you need to?\r\n\r\n> I'm starting to worry about the security aspects of this. If I specify that I want whatever code happens to be in, say, dotnet/msbuild:master, and the owner of msbuild:master is malicious, that owner could put whatever code they wanted there, and you would automatically download it and run it even if you don't change your code at all. Looking at specific commits sounds safer to me.\r\n\r\nThis two problem is the same as current nuget anyway isn't it?\r\nWhen you just specified strong version number. It then only pull that version even there is an update\r\nWhen you just specified semver. It then allow project to update to newest version conveniently, but it also allow repo owner to inject malicious code into their package and publish malicious new version that would be included in your project on build\r\nUsing commit ID or tag name is exactly the same tradeoff, at your own risk and trust\r\n\r\n> Having all the files in a commit doesn't necessarily mean you have all the files the files you need rely on. Like I can update Microsoft.Common.CurrentVersion.targets without touching any of the tasks it relies on, which would mean I would just be relying on the previous versions. Pulling in just the commit would miss that.\r\n\r\nYou then couldn't use that repo as `ProjectReference`. You might fork it into another repo of your own and cut the reliance on previous version. I think shallow copy have more size advantage for building on CI/CD and should be main priority than very specific project structure like that\r\n\r\nActually I am confused, did you think that shallow clone will only download a file that changed in one commit? No, it download the whole repo, every file and folder as you see in github. It just not download the whole history of that repo like normal clone\r\n\r\n> it would also make invalidating (and deleting) pseudo-repos hard\r\n\r\nWe should just use `cache clean` that clear all cached repo. We might have `cache clean unused` to list all project in every subfolders of current folder and let that function determine what repo that don't require anymore\r\n\r\n> Deleting them is made difficult\r\n\r\nNope, I just think caching and sharing is for convenient in daily or hourly development. but it not that important. We can clean it and redownload it in the same manner as using nuget. Clean all the cache and redownload it 2-3 times a week shouldn't hurt. Git repo should be strong enough to accept recloning eventually",
        "createdAt": "2021-02-13T04:25:14Z",
        "updatedAt": "2021-02-13T04:31:45Z",
        "author": {
          "login": "Thaina"
        }
      },
      {
        "body": "> In addition to building project and publish into package, sometimes it was more convenient to let the project reference another project directly and compile it along with the main project\r\n> \r\n> But current method of projectreference require project to present in machine and reference it only locally. Which is inconvenient and require setup on each machine\r\n> \r\n> So I think msbuild should allow referencing git repo in csproj. Internally you could pull git project into temp folder and do the same process as projectreference. But it should be standardize and allow us to build project with CI/CD by projectreference\r\n> \r\n> ```\r\n> <Project Sdk=\"Microsoft.NET.Sdk.BlazorWebAssembly\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\r\n>   <ItemGroup>\r\n>     <ProjectReference\r\n>       Include=\"src/Blazor.Extensions.Canvas/Blazor.Extensions.Canvas.csproj\"\r\n>       Repo=\"https://github.com/BlazorExtensions/Canvas.git\"      <!-- the source repo -->\r\n>       Commit=\"3d9b5e6eccb0a66d34172f07ceeb8b7f4d82aaec\"      <!-- commit ID for versioning -->\r\n>     />\r\n>   </ItemGroup>\r\n> </Project>\r\n> ```\r\n> \r\n> Is it possible?\r\n\r\nI would prefer to specify branch instead of commit hash as commit hashes always change.",
        "createdAt": "2021-02-13T04:50:09Z",
        "updatedAt": "2021-02-13T04:50:09Z",
        "author": {
          "login": "AraHaan"
        }
      },
      {
        "body": "@AraHaan commit hashes is for specific version that you want to target it permanently. It it a history record that will not changed unless the owner decide to force delete it",
        "createdAt": "2021-02-13T04:52:26Z",
        "updatedAt": "2021-02-13T04:52:26Z",
        "author": {
          "login": "Thaina"
        }
      },
      {
        "body": "> @AraHaan commit hashes is for specific version that you want to target it permanently. It it a history record that will not changed unless the owner decide to force delete it\r\n\r\nNot everyone wants to fix it to commit hashes however like me (I might pull in and have an AI update an zlib submodule for this very thing), infact why not JUST use submodules instead and then on the CI before it clones your repository to build it would have to set to clone recursively by default (which would also clone the submodule) and avoid having to ask for a feature like this. Even I locally pull the submodule as well before building too.\r\n\r\nEven in git having subprojects is a normal thing so that was why they invented submodules to begin with.\r\n\r\nNow it *could* be possible to make an msbuild task that looks inside of the .gitmodules file to look for submodules then run ``git submodule update`` to clone them if they are not already cloned (or update them if the .gitmodules targets a specific branch).",
        "createdAt": "2021-02-13T04:58:55Z",
        "updatedAt": "2021-02-13T05:03:30Z",
        "author": {
          "login": "AraHaan"
        }
      },
      {
        "body": "@AraHaan The branch is on my mind, not that it wouldn't possible, it just that hash would be default and safest way, there would be no chance of breaking change when pull from specific commit\r\n\r\nThink about this, you might target `master/head` and do some developing for hours. But when you decide to build it then restore another version, which the owner was also change many of his API, and your project require change again\r\n\r\nThat's why I think specific commit version should be default way, like nuget reference\r\n\r\n> submodules\r\n\r\nIt was a complicate setup to have both submodule and then reference from that submodule. If every of your project use the same submodule then it also redundant",
        "createdAt": "2021-02-13T05:05:40Z",
        "updatedAt": "2021-02-13T05:05:40Z",
        "author": {
          "login": "Thaina"
        }
      },
      {
        "body": "> @AraHaan The branch is on my mind, not that it wouldn't possible, it just that hash would be default and safest way, there would be no chance of breaking change when pull from specific commit\r\n> \r\n> Think about this, you might target `master/head` and do some developing for hours. But when you decide to build it then restore another version, which the owner was also change many of his API, and your project require change again\r\n> \r\n> That's why I think specific commit version should be default way, like nuget reference\r\n> \r\n> > submodules\r\n> \r\n> It was a complicate setup to have both submodule and then reference from that submodule. If every of your project use the same submodule then it also redundant\r\n\r\nI would make commit optimal however (for if you use projects that you do not maintain) with projectreference. Tbh my rule on my code is if I need to depend on things not in my code (Like System.Text.Json for example) that I install the nuget package instead and only reserve ProjectReferences to only code I own and that I would want to ship with my metapackage.",
        "createdAt": "2021-02-13T05:13:04Z",
        "updatedAt": "2021-02-13T05:13:04Z",
        "author": {
          "login": "AraHaan"
        }
      },
      {
        "body": "@AraHaan The main point of this feature is that you might start reference anyone's repo in github even today, not just only of your own. And sure, you can craft the tag and branch specifically for conveniently use this reference for your own project. But I think most reference would be from other people that don't have to make their repo structure for this reference specifically\r\n\r\nThat might be, eventually, but for all legacy repo we have now, it might not",
        "createdAt": "2021-02-13T05:25:37Z",
        "updatedAt": "2021-02-13T05:26:03Z",
        "author": {
          "login": "Thaina"
        }
      },
      {
        "body": "Even legacy repositories support submodules, I feel like this feature is more along the lines of \"I got a submodule but I am too lazy to register it in git as a submodule\" or \"I do not know how to register it as a submodule and I do not want to read git's docs on it\".\r\n\r\nBesides submodule updates are optional inside of git anyway, you do NOT have to run ``git submodule update`` to pull the latest changes to them if you do not want to, you could ``git submodule init`` to have it clone and checkout the submodule commit that the repository points too (unless that commit does not exist no more), or clone recursively to that commit.\r\n\r\nBesides that is what makers of git recommends for any programming language projects, to use submodules.",
        "createdAt": "2021-02-13T16:36:08Z",
        "updatedAt": "2021-02-13T16:40:03Z",
        "author": {
          "login": "AraHaan"
        }
      },
      {
        "body": "But ye I think and msbuild task for ``initing`` submodules (if anything in .gitmodules is found, or if .gitmodules is found and if they have *not* been initialized (cloned) yet), then a property that controls if another task gets run (that runs ``git submodule update``) only if they enable it.\r\n\r\nThis is because I still think *submodules* should be the way to go that would benefit projects of *ALL* sizes (yes even the .NET runtime repository as then they can break up the runtime projects into submodules inside of it however it would mean a lot more repositories would need to be maintained which is probably a no to more work for the .NET Team).",
        "createdAt": "2021-02-13T16:44:13Z",
        "updatedAt": "2021-02-13T16:48:02Z",
        "author": {
          "login": "AraHaan"
        }
      },
      {
        "body": "> Even legacy repositories support submodules\r\n\r\nMy argument was separated\r\n\r\nSubmodules is great and support legacy repo but it not easy to setup and also it made redundant when many project reference the same submodule. So we should have this feature in msbuild, This is one story\r\n\r\nArgument about legacy repo is response for your argument about using commit ID and why this feature should be made to support legacy repo, This is another story",
        "createdAt": "2021-02-13T16:48:47Z",
        "updatedAt": "2021-02-13T16:48:47Z",
        "author": {
          "login": "Thaina"
        }
      },
      {
        "body": "> \r\n> \r\n> > Even legacy repositories support submodules\r\n> \r\n> My argument was separated\r\n> \r\n> Submodules is great and support legacy repo but it not easy to setup and also it made redundant when many project reference the same submodule. So we should have this feature in msbuild, This is one story\r\n> \r\n> Argument about legacy repo is response for your argument about using commit ID and why this feature should be made to support legacy repo, This is another story\r\n\r\nSubmodules are actually easy when the documentations for them (shown when you ``git submodule -h``) are read thoroughly.\r\n\r\nAlthough if it is hard, maybe someone like me that knows how to make submodules could suggest adding an ``dotnet new submodule <repository url here>`` Which then adds a repository as a submodule and clones it.",
        "createdAt": "2021-02-13T16:51:03Z",
        "updatedAt": "2021-02-13T16:52:22Z",
        "author": {
          "login": "AraHaan"
        }
      },
      {
        "body": "@AraHaan \r\n\r\n> thoroughly\r\n\r\nThat's the point\r\n\r\ndocumentations of `ProjectReference` is easier",
        "createdAt": "2021-02-13T16:52:49Z",
        "updatedAt": "2021-02-13T16:52:49Z",
        "author": {
          "login": "Thaina"
        }
      },
      {
        "body": "> \r\n> \r\n> @AraHaan\r\n> \r\n> > thoroughly\r\n> \r\n> That's the point\r\n> \r\n> documentations of `ProjectReference` is easier\r\n\r\n``git submodule add {main-repo-url} {path to place the submodule at in the repository}`` (from [here](https://blog.tech-fellow.net/2019/05/09/effectively-work-with-git-submodules/))\r\n- clones and checks out the repository then adds it to .gitmodules and then stages that and the \"dir\" as a single file for commiting.\r\n\r\nI guess aliasing this using ``dotnet new`` could be done (but force the command to be run in the dir they want the submodule to be added in from their repository).",
        "createdAt": "2021-02-13T16:57:54Z",
        "updatedAt": "2021-02-13T17:02:39Z",
        "author": {
          "login": "AraHaan"
        }
      },
      {
        "body": "@AraHaan First, you need to learn about submodule\r\n\r\nNext, you need to learn where the submodule is\r\n\r\nThen you need to put `ProjectReference` from the path of submodule\r\n\r\nYou then need to maintain submodule in your repo and maintain reference in your project separately. If you don't need it anymore you need to uninstall reference than remove submodule\r\n\r\nAnd so on and so on and so on\r\n\r\nWhile `PackageReference` (and also my requesting feature) has all complication out of our sight, don't even have unneccessary submodule folder in our repo. `PackageReference` do anything behind our back with nuget server. Add or remove reference is as easy as one line of xml that everybody using C# can do, even without knowing anything about git\r\n\r\nWhile all of your explanation need to be tediously doing in the same pattern again and again and again for every project",
        "createdAt": "2021-02-13T17:18:50Z",
        "updatedAt": "2021-02-13T17:21:13Z",
        "author": {
          "login": "Thaina"
        }
      },
      {
        "body": "It's easy to manually remove an git submodule, simply delete the dir and it's entry inside of ``.gitmodules``.\r\n\r\nInfact maybe dotnet could have a command for that too, in this case ``dotnet submodule remove <submodule name>``, where it looks for it's entry inside of .gitmodules, then delete it, followed by the directory of the submodule and then stages those 2 changes.\r\n\r\nAnd that command could easily be an tool that anyone could make. All it would do is process the text inside of .gitmodules, obtain the directory of the submodule, then recurisively delete every file and folder inside of it, and then finally the submodule directory itself.",
        "createdAt": "2021-02-13T18:05:40Z",
        "updatedAt": "2021-02-13T18:09:25Z",
        "author": {
          "login": "AraHaan"
        }
      },
      {
        "body": "@AraHaan `all it would do` of you is seriously all a lot complicate than just `PackageReference` and people need to learn all that new things\r\n\r\nIt just easy for you. Not easy for everyone at all. Please understand this\r\n\r\nJust answer for yourself. All of your explanation so far, is it has anything easier than one line of `PackageReference` ?\r\n\r\nIf not, done, stop",
        "createdAt": "2021-02-13T18:12:30Z",
        "updatedAt": "2021-02-14T03:43:18Z",
        "author": {
          "login": "Thaina"
        }
      },
      {
        "body": "Hello, I'd like to second this feature request. Adding git dependencies pointing to a particular tag, branch, or commit, is a pretty common feature of package managers. This is especially helpful to avoid needing to self-host a nuget repository.\r\n\r\nThe arguments for preferring git dependencies over managing submodules in a codebase are very similar to the arguments of nuget dependencies vs vendoring submodules. Ultimately, supporting explicit git dependencies in msbuild lets us rely on the build system rather than vendoring dependencies in git itself. In some prior teams I've worked in, many developers were very inexperienced with git, and it was a constant pain for them to deal with submodules. Ideally the preference of msbuild git dependency vs vendoring submodules would be up to the user/team.\r\n\r\nSome good prior art for this\r\n* [rust cargo](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories)\r\n* [python poetry](https://python-poetry.org/docs/dependency-specification/#git-dependencies)\r\n\r\n",
        "createdAt": "2022-08-01T18:51:57Z",
        "updatedAt": "2022-08-01T19:00:13Z",
        "author": {
          "login": "TheButlah"
        }
      },
      {
        "body": "@jeffkl This could be a feature for MSBuild SDKs. Arcade supports this by having its own dependency management. But not everyone can use Arcade. This could provide a MSBuild based replacement.",
        "createdAt": "2022-08-02T00:12:34Z",
        "updatedAt": "2022-08-02T00:12:34Z",
        "author": {
          "login": "Nirmal4G"
        }
      },
      {
        "body": "I'd be helpful if we can do this. It's something that other stack can do it nowadays.\r\nSee another stack\r\n- F# with [paket](https://fsprojects.github.io/Paket/github-dependencies.html). \r\n- [Go](https://stackoverflow.com/questions/37105678/go-get-git-and-dependencies#answer-37106047)\r\n- Deno for [linking to external](https://deno.land/manual@v1.25.3/linking_to_external_code). It's not 100% similar, but the idea is the same, linking to remote dependency containing source code (not binary).",
        "createdAt": "2022-09-16T14:11:21Z",
        "updatedAt": "2022-09-16T14:11:21Z",
        "author": {
          "login": "fakhrulhilal"
        }
      },
      {
        "body": "I think a better option would be to consider this:\r\n\r\n- Implement a ``RepositoryProjectReference`` node, which contains the following metadata:\r\n  - ``Include`` - the path to the project file inside if it's repository (relative to the root of it's repository)\r\n  - ``RepoUrl`` - The git repository url to use to clone into in a user provided location (or to the solution directory if not set manually), where then the reference does a background build (using ``$(Configuration)`` of the project that referenced it), and then copy the built outputs from it to the ``obj`` folder of the project that references and implicitly add an ``Reference`` to it.*\r\n  - (optional) ``CommitHash`` - A commit hash to check out, default is to check out the tip of the default branch.\r\n\r\n\\* When the referenced project is built, it will copy the auto built external projectreference. Also with this it's possible for build to take forever because of it needing to clone large projects, also consider referenced projects that reference other projects similarly where there could be multiple nesting levels. How would this solve issues where one could run into MAX_PATH problems however?\r\n\r\nWhile this could be good and possible be used to replace what arcade similarly does, I feel that there will need to be more planning done to look into ways to avoid issues (esp on systems where there is no way to bypass MAX_PATH to make it unlimited or when the user does not have the bypass opt-in enabled on their system).\r\n\r\nAlternatively:\r\n- You could consider having github actions on those sub projects to run on every commit that creates new github releases (prereleases), while tags are stable ones which pushes the built code in the repos into nuget packages stored in each release (to bypass the storage limits on github packages by avoiding github packages).\r\n- An ``RepositoryPackageReference``, which contains the following metadata:\r\n  - ``Include`` - package name\r\n  - ``RepoUrl`` - the repo url to check for releases.\r\n  - (optional) ``Version`` - the version of the release to check for in github releases, when not provided the current stable/pre-release is selected automatically.\r\n  - (optional) ``PackageVersion`` - For when the version of the package itself might not match the optional ``Version`` from the github release (if both are not provided the assumed value would be the version obtained from the current stable/pre-release that it sees).\r\n\r\nBenefits on this:\r\n- This can be done on the nuget side easily, making it much easier to maintain on the msbuild side, however it might need a little bit of work on the msbuild side to pass the needed things for it on to nuget, where then it could do the actual work.\r\n- Would avoid needing to clone the repository, and the potential for clone failures due to ``MAX_PATH`` or other similar issues.\r\n- Would avoid cloning large repositories which could use up a developer's metered data (because not all developers have unlimited data internet).\r\n- Would avoid a lot of other issues that developers can encounter such as \"Out of Disc space\", etc.\r\n\r\nCon:\r\n- Would require the user to know how to use github actions to set it all up, however it is a simple setup.",
        "createdAt": "2022-09-16T21:42:38Z",
        "updatedAt": "2022-09-16T21:55:31Z",
        "author": {
          "login": "AraHaan"
        }
      },
      {
        "body": "@AraHaan \r\n\r\n`github actions` only limit to github. While pulling git repo with common git command is available for every git repo stored anywhere\r\n\r\nI want to add that. In unity there could be specified specific path to target folder and only use that to copy specific source folder\r\n\r\nAlso it might be better to specified branch and tag as optional parameter. Maybe instead of `CommitHash` it should be `Target` and `TargetType` as `Hash` / `Tag` / Branch",
        "createdAt": "2022-09-17T05:37:38Z",
        "updatedAt": "2022-09-17T05:38:12Z",
        "author": {
          "login": "Thaina"
        }
      }
    ]
  }
}