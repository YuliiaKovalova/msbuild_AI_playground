{
  "number": 2455,
  "title": "msbuild <project> /t:Restore;Build fails when referencing netstandard2.0",
  "body": "Using Visual Studio 2017 15.3 (final) and DotNet Core 2 SDK.\r\n\r\nmsbuild Project.csproj /t:Restore;Build\r\n\r\nproduces lots of these kinds of errors:\r\n\r\n  File.cs(109,59): error CS0012: The type 'Object' is defined in an assembly that is not referenced. You must add a reference to assembly 'netstandard, Version=2.0.0.0, Culture=neut\r\nral, PublicKeyToken=cc7b13ffcd2ddd51'. [C:\\....\\Project.csproj]\r\n\r\nHowever, running this works:\r\n\r\nmsbuild Project.csproj /t:Restore\r\nmsbuild Project.csproj /Build\r\n\r\nThe former does still work when referencing earlier netstandard with the same tooling.",
  "state": "CLOSED",
  "createdAt": "2017-08-20T09:43:15Z",
  "updatedAt": "2024-02-21T17:17:07Z",
  "closedAt": "2017-08-20T11:37:00Z",
  "author": {
    "login": "jahmai-ca"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Also, the same problem occurs using the MSBuild task. However, unlike running it from the command line, doing the following doesn't work:\r\n\r\n    <MSBuild Projects=\"$(ProjectFile)\" Targets=\"Restore\" />\r\n    <MSBuild Projects=\"$(ProjectFile)\" Targets=\"Build\" />\r\n",
        "createdAt": "2017-08-20T09:44:24Z",
        "updatedAt": "2017-08-20T09:44:24Z",
        "author": {
          "login": "jahmai-ca"
        }
      },
      {
        "body": "Note that calling `Restore` and `Build` targets in the same call is unsupported since restore will create files that need to be there doing project evaluation - but the project already has evaluated with those assets missing. That's the reason it has to be called separately.\r\n\r\nThere's a PR out (https://github.com/Microsoft/msbuild/pull/2414) introducing a `/restore` flag that would allow to do a restore + build in a single command line call (by causing a re-evaluation for the actual build).\r\n\r\nThe same rules apply when using the `<MSBuild>` task. The workaround would be to pass in a different set of global properties to force a re-evaluation after the restore has been completed:\r\n\r\n```\r\n<MSBuild Projects=\"$(ProjectFile)\" Targets=\"Restore\" Properties=\"_NeverMind=Me\" />\r\n<MSBuild Projects=\"$(ProjectFile)\" Targets=\"Build\" />\r\n```\r\n\r\n(I'd prefer passing properties to other calls like `Configuration=Release` or `VSTestLogger=trx`).\r\n\r\n That's what also what makes [my build scripts](https://gist.github.com/dasMulli/69f5303aa79a8cd4060e44891c90fd2d) work.",
        "createdAt": "2017-08-20T10:10:25Z",
        "updatedAt": "2017-08-20T10:10:25Z",
        "author": {
          "login": "dasMulli"
        }
      },
      {
        "body": "@dasMulli Your workaround of using different properties for each MSBuild task worked perfectly!",
        "createdAt": "2017-08-20T11:37:00Z",
        "updatedAt": "2017-08-20T11:37:00Z",
        "author": {
          "login": "jahmai-ca"
        }
      },
      {
        "body": "Note one danger of using different global properties; this causes reevaluation, which will work if the NuGet-restore-generated files do not exist for the restore call. If they exist, but are out of date and get updated by `Restore`, the second build will use the old one because the XML gets cached.\r\n\r\nThe only workaround for that is a separate msbuild.exe process.\r\n\r\nThat's the issue that's blocking #2414 at the moment.",
        "createdAt": "2017-08-21T15:03:09Z",
        "updatedAt": "2017-08-21T15:03:09Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I have updated https://github.com/Microsoft/msbuild/pull/2414 so that imports are reloaded from disk.  If the change goes in soon, it'll go out with the next release.",
        "createdAt": "2017-09-01T14:59:35Z",
        "updatedAt": "2017-09-01T14:59:35Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "You're right this doesn't work:\r\n```xml\r\n<MSBuild Projects=\"$(ProjectFile)\" Targets=\"Restore\" />\r\n<MSBuild Projects=\"$(ProjectFile)\" Targets=\"Build\" />\r\n```\r\nBut this works for me (notice the extra restore in the second entry):\r\n```xml\r\n<MSBuild Projects=\"$(ProjectFile)\" Targets=\"Restore\" />\r\n<MSBuild Projects=\"$(ProjectFile)\" Targets=\"Restore;Build\" />\r\n```\r\nThis oddly doesn't work:\r\n```xml\r\n<MSBuild Projects=\"$(ProjectFile)\" Targets=\"Restore;Restore;Build\" />\r\n```",
        "createdAt": "2018-02-01T21:39:59Z",
        "updatedAt": "2018-02-01T21:40:18Z",
        "author": {
          "login": "dotMorten"
        }
      },
      {
        "body": "I suggest making use of msbuild 15.5's `/restore` parameter (linked above) by modifying ci build projects to having a `Restore` and a `Build` target:\r\n\r\nso e.g.\r\n```xml\r\n<Project DefaultTargets=\"Build\">\r\n  <ItemGroup>\r\n    <CiBuildProject Include=\"**/*.csproj\" />\r\n  </ItemGroup>  \r\n  <Target Name=\"Restore\">\r\n    <MSBuild Projects=\"@(CiBuildProject)\" Targets=\"Restore\" />\r\n  </Target>\r\n  <Target Name=\"Build\">\r\n    <MSBuild Projects=\"@(CiBuildProject)\" Targets=\"Build\" />\r\n  </Target>\r\n</Project>\r\n```\r\n\r\nand then invoke it using one of:\r\n\r\n```\r\n> dotnet build ci.proj\r\n> dotnet msbuild /restore ci.proj\r\n> msbuild /restore ci.proj\r\n```",
        "createdAt": "2018-02-01T22:35:06Z",
        "updatedAt": "2018-02-01T22:35:18Z",
        "author": {
          "login": "dasMulli"
        }
      }
    ]
  }
}