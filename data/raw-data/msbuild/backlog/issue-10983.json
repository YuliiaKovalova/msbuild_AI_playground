{
  "number": 10983,
  "title": "No types defined for elements in XSD schema",
  "body": "### Issue Description\n\nIn XSD there are many elements which should likely have type=\"xs:string\", but they have no type at all, thus ur-type. Is it a bug, or a design choice?\nE.g.: https://github.com/dotnet/msbuild/blob/6cd445d84e59a36c7fbb6f50b7a5a62767a6da51/src/MSBuild/MSBuild/Microsoft.Build.CommonTypes.xsd#L24\n<xs:element name=\"Name\"> // Friendly display name (optional)\n\n### Steps to Reproduce\n\n-\n\n### Expected Behavior\n\n-\n\n### Actual Behavior\n\n-\n\n### Analysis\n\n_No response_\n\n### Versions & Configurations\n\n_No response_",
  "state": "CLOSED",
  "createdAt": "2024-11-17T07:44:29Z",
  "updatedAt": "2024-11-19T15:09:45Z",
  "closedAt": "2024-11-19T15:09:44Z",
  "author": {
    "login": "eZprava"
  },
  "labels": [],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "The type of the item metadata elements cannot be just xs:string because at least the Condition attribute must be allowed, perhaps Label too.  Syntax example:\n\n```xml\n<Project>\n  <ItemGroup>\n    <PackageReference Include=\"Microsoft.Data.SqlClient\">\n      <VersionOverride Condition=\"$(TargetFramework) == 'netstandard2.0'\">1.2.3</VersionOverride>\n    </PackageReference>\n  </ItemGroup>\n</Project>\n```\n\nI'm not sure about whether MSBuild allows child elements in item metadata elements.  It allows them in PropertyGroup/* elements; see GenericPropertyType in the schema.",
        "createdAt": "2024-11-17T08:50:52Z",
        "updatedAt": "2024-11-17T09:05:31Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "So it could be type derived from string which allows any attribute? I don't understand why one would need child elements in e.g. Name.",
        "createdAt": "2024-11-17T09:37:51Z",
        "updatedAt": "2024-11-17T09:37:51Z",
        "author": {
          "login": "eZprava"
        }
      },
      {
        "body": "Yeah, I don't think child elements are needed in Name metadata.\n\nAFAIK, these schemata are intended for Intellisense and online help in the Visual Studio IDE.  If the item metadata elements were given more restrictive types, then would that help for those purposes, or would the types be overridden by some Visual Studio feature anyway?",
        "createdAt": "2024-11-17T10:57:55Z",
        "updatedAt": "2024-11-17T10:57:55Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "I don't know about VS - I used XSD to generate C# classes from Microsoft.Build.xsd and found out that Name is object instead of string. So I was curious if there's some deeper reason why one element has type=\"msb:boolean\" while other has ur-type.",
        "createdAt": "2024-11-18T05:59:07Z",
        "updatedAt": "2024-11-18T05:59:07Z",
        "author": {
          "login": "eZprava"
        }
      },
      {
        "body": "If you want to read, modify, and write MSBuild project files programmatically in C#, the MSBuild API has classes like [Microsoft.Build.Construction.ProjectRootElement](https://learn.microsoft.com/dotnet/api/microsoft.build.construction.projectrootelement); see also [MSBuildLocator](https://aka.ms/msbuild/locator).\n\nOn the other hand, if your program does not need to build those projects, and needs to tolerate future extensions to MSBuild project syntax even when neither the program itself nor any installed version of MSBuild supports them, then System.Xml APIs (including deserialisation) may be a better choice than the MSBuild API.",
        "createdAt": "2024-11-18T07:10:14Z",
        "updatedAt": "2024-11-18T07:10:14Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "The MSBuild XML schema files have `targetNamespace=\"http://schemas.microsoft.com/developer/msbuild/2003\"`, and when you generate C# source code from these schemas, I think XmlSerializer will then require this XML namespace.  However, MSBuild itself does not require that namespace nowadays, and IIRC the project templates in .NET SDK do not have `xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\"`.  This may make the XSD-generated code unusable for projects that were created from those templates.\n\nThe classes in the Microsoft.Build.Construction namespace do not have this problem.",
        "createdAt": "2024-11-18T07:49:47Z",
        "updatedAt": "2024-11-18T07:51:09Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "Thanks, I'm not using XmlSerializer. I have my own library to generate C# classes and I used .NET Framework .csproj as test files, to see if it can be round-tripped using generated classes. I needed to add support for substitution groups, it's cleverly used in the schema, it was new to me. Now it works, I was just curious why the Name element has ur-type, that's all.",
        "createdAt": "2024-11-18T10:13:58Z",
        "updatedAt": "2024-11-18T10:13:58Z",
        "author": {
          "login": "eZprava"
        }
      },
      {
        "body": "Team Triage: @KalleOlaviNiemitalo answer is correct, the types are there to feed into intellisense and extra VS functions. Let us know if you have any more questions regarding this, but closing the issue for now.",
        "createdAt": "2024-11-19T15:09:44Z",
        "updatedAt": "2024-11-19T15:09:44Z",
        "author": {
          "login": "maridematte"
        }
      }
    ]
  }
}