{
  "number": 2754,
  "title": "Regression: Pack targets failing - trying to add pdb for embedded type",
  "body": "_From @onovotny on November 28, 2017 1:48_\n\nI\u2019m seeing a regression that\u2019s causing Ix.NET to fail with 2.0.3 and higher. I don\u2019t know when the break was introduced. Nothing in Ix has changed related to this:\r\nhttps://github.com/Reactive-Extensions/Rx.NET/tree/develop/Ix.NET/Source\r\n\r\nGetting errors like this:\r\n\"C:\\dev\\RxNET\\Ix.NET\\Source\\System.Interactive\\System.Interactive.csproj\" (pack target) (1) ->\r\n(GenerateNuspec target) ->\r\n  C:\\Program Files\\dotnet\\sdk\\2.1.1-preview-007165\\Sdks\\NuGet.Build.Tasks.Pack\\buildCrossTargeting\\NuGet.Build.Tasks.Pack.targets(204,5): err or : The file 'C:\\dev\\RxNET\\Ix.NET\\Source\\System.Interactive\\bin\\Release\\net45\\System.Interactive.pdb' to be packed was not found on disk. [C :\\dev\\RxNET\\Ix.NET\\Source\\System.Interactive\\System.Interactive.csproj]\r\n\r\nAnd the build log shows this:\r\n![image](https://user-images.githubusercontent.com/1427284/33298428-54458240-d3b4-11e7-9198-2a1278805e70.png)\r\n\r\nThis is in error because there are no symbols for DebugType = embedded. The build log clearly shows DebugType set to embedded.\r\n\r\n\r\n[msbuild.zip](https://github.com/NuGet/Home/files/1508255/msbuild.zip)\r\n\n\n_Copied from original issue: NuGet/Home#6230_",
  "state": "OPEN",
  "createdAt": "2017-11-28T02:06:31Z",
  "updatedAt": "2024-04-18T05:37:33Z",
  "closedAt": null,
  "author": {
    "login": "rohit21agrawal"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "_From @emgarten on November 28, 2017 2:0_\n\n@rohit21agrawal can you take a look?",
        "createdAt": "2017-11-28T02:06:32Z",
        "updatedAt": "2017-11-28T02:06:32Z",
        "author": {
          "login": "rohit21agrawal"
        }
      },
      {
        "body": "I will have to blame msbuild for this because if _GetDebugSymbolsWithTfm target (that resides in NuGet.Build.Tasks.Pack.targets) depends on DebugSymbolsProjectOutputGroup . The target outputs for DebugSymbolsProjectOutputGroup should have been an empty list for DebugType = embedded but instead it points to a non-existent pdb file on disk.",
        "createdAt": "2017-11-28T02:06:33Z",
        "updatedAt": "2017-11-28T02:06:33Z",
        "author": {
          "login": "rohit21agrawal"
        }
      },
      {
        "body": "I can repro this on 2.0.2 as well, though not on 2.0.0.",
        "createdAt": "2017-11-30T04:54:34Z",
        "updatedAt": "2017-11-30T04:54:34Z",
        "author": {
          "login": "livarcocc"
        }
      },
      {
        "body": "@rohit21agrawal I see that `_GetDebugSymbolsWithTfm` was a target that did not exist or at least was not called in the 2.0.0 case where this scenario worked. Is this because it did not exist or is it because there was some input that caused it to no be triggered in 2.0.0? Also, do you have coverage for this scenario on NuGet side?\r\n\r\nJust wondering if this is a regression caused by some code change in MSBuild or the SDK or if this is a code change in NuGet that exposed, perhaps, an existing issue in MSBuild or SDK and was never validated until now, by @onovotny. ",
        "createdAt": "2017-11-30T05:02:41Z",
        "updatedAt": "2017-11-30T05:02:41Z",
        "author": {
          "login": "livarcocc"
        }
      },
      {
        "body": "no there has been a code change in nuget to allow pdb files to be packed even when IncludeSymbols is not set (by adding .pdb extension to ``` AllowedOutputExtensionsInBuildOutputFolder ```) . As a result, _GetDebugSymbolsWithTfm is always called now.\r\n\r\nEarlier, we relied on DebugSymbolsProjectOutputGroup target , but only when IncludeSource or IncludeSymbols was set to true.\r\n\r\n\r\n",
        "createdAt": "2017-11-30T05:11:50Z",
        "updatedAt": "2017-11-30T05:11:50Z",
        "author": {
          "login": "rohit21agrawal"
        }
      },
      {
        "body": "The Ix.NET code hasn't changed since 2.0. I just haven't been developing that project lately. Did a CI build recently and discovered the failure due to the build agent being updated since before.",
        "createdAt": "2017-11-30T05:11:54Z",
        "updatedAt": "2017-11-30T05:11:54Z",
        "author": {
          "login": "clairernovotny"
        }
      },
      {
        "body": "@onovotny this happens because while building your DebugType is actually set to portable, when we calculate the outputs (you set that in your Directory.Build.props file).\r\n\r\nLater on, in your Directory.Build.targets, you set your DebugType to embedded, but I believe at that point the debug symbols have been calculated and pack fails.\r\n\r\nI manually set the DebugType to embedded in System.Interactive and pack succeeded. Now, this does not indicate that this isn't a bug in our ordering of things, we need to investigate more to figure that out.\r\n\r\nBut it seems that it should be possible for you to work around it by setting DebugType. Does this seem reasonable to you.\r\n\r\n@rohit21agrawal we need to figure out how to fix the regression, even though I don't believe it is mainstream, given that people who simply set their DebugType to embedded will continue to work.",
        "createdAt": "2017-11-30T05:48:33Z",
        "updatedAt": "2017-11-30T05:55:43Z",
        "author": {
          "login": "livarcocc"
        }
      },
      {
        "body": "We also should see if it makes sense for the target `DebugSymbolsProjectOutputGroup` to respect the DebugType set in `Directory.Build.targets`.\r\n\r\ncc @AndyGerlicher ",
        "createdAt": "2017-11-30T05:56:38Z",
        "updatedAt": "2017-11-30T05:56:38Z",
        "author": {
          "login": "livarcocc"
        }
      },
      {
        "body": "Yes, that workaround worked for now.",
        "createdAt": "2017-11-30T13:12:19Z",
        "updatedAt": "2017-11-30T13:12:19Z",
        "author": {
          "login": "clairernovotny"
        }
      },
      {
        "body": " To be clear, I didn\u2019t set it to portable in the props\u2026.it\u2019s only in the Directory.Build.targets.\r\n\r\nSomething in the SDK is setting it to portable \u201cfor me,\u201d and that may be part of the issue. I remember I had to set DebugType in the Directory.build.targets and not the props because if I used Directory.build.props, my value was overwritten by the SDK\u2019s default values.\r\n",
        "createdAt": "2017-12-01T19:01:04Z",
        "updatedAt": "2017-12-01T19:01:04Z",
        "author": {
          "login": "clairernovotny"
        }
      },
      {
        "body": "Setting it in `directory.build.props` works, and I think that's the best place for this, not in `directory.build.targets`. Probably got fixed by https://github.com/dotnet/sdk/commit/24db8f1c96dc2857fcecce7f274f1aa94f0017f8\r\n\r\nOpened https://github.com/Reactive-Extensions/Rx.NET/pull/451",
        "createdAt": "2017-12-01T21:26:53Z",
        "updatedAt": "2017-12-01T21:27:13Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "That's fair and putting in the props is a good solution to this. Still, the errors that can occur if it's in the targets aren't easy to diagnose. Also, I believe the VSTest SDK overrides this in the targets explicitly\r\n\r\nI still think it needs a proper fix since having incorrect info on the output group can lead to hard to figure out issues.",
        "createdAt": "2017-12-01T21:35:04Z",
        "updatedAt": "2017-12-01T21:35:51Z",
        "author": {
          "login": "clairernovotny"
        }
      },
      {
        "body": "This has been fixed in the vs test sdk as well.",
        "createdAt": "2017-12-01T21:36:03Z",
        "updatedAt": "2017-12-01T21:36:03Z",
        "author": {
          "login": "livarcocc"
        }
      },
      {
        "body": "@livarcocc good to hear, but if someone puts it in the targets, how would they know that is the cause? This doesn't seem that hard to accidently come across.",
        "createdAt": "2017-12-01T21:38:54Z",
        "updatedAt": "2017-12-01T21:38:54Z",
        "author": {
          "login": "clairernovotny"
        }
      },
      {
        "body": "Regarding debuggability, the log only shows the state at the end of evaluation. To look at what happens during evaluation you need to do a /pp build and follow the dependencies.",
        "createdAt": "2017-12-01T21:40:13Z",
        "updatedAt": "2017-12-01T21:40:35Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "Point is that people expect to be able to put properties in either props or targets. That this has an incorrect evaluation for the output group seems broken.",
        "createdAt": "2017-12-01T21:41:35Z",
        "updatedAt": "2017-12-01T21:41:35Z",
        "author": {
          "login": "clairernovotny"
        }
      },
      {
        "body": "This brings to question of what's the point of having separate top *props imports and bottom *targets imports. Historically, I think the intent was to completely separate props from targets.  But, if people expect to put properties in both props and targets, then the .net SDK would need to move all its sdk.props logic into sdk.targets. If we do that, might as well get rid of top imports altogether (leave them empty for back compat). And deprecate directory.build.props and sdk.props.",
        "createdAt": "2017-12-01T21:52:33Z",
        "updatedAt": "2017-12-01T21:53:47Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "There is a good reason why the DebugType might need to be in the targets -- what if it's a conditional?\r\n\r\nLike need to set DebugType to Full or embedded based on the `TargetFramework`? You can't do that in a props, but you can do that in a targets.\r\n\r\nThere's also a good reason for props vs targets, since props can default things, the project does what it needs and then the targets can take conditional actions based on the props + project settings.",
        "createdAt": "2017-12-01T21:54:34Z",
        "updatedAt": "2017-12-01T21:55:40Z",
        "author": {
          "login": "clairernovotny"
        }
      },
      {
        "body": "That gives a stronger case why directory.build.props is not that important, in favor of directory.build.targets. You can use the condition argument that you gave for any property or item that gets set in directory.build.props. And I think the implication for this is, that top imports might be useless. In which case we should really move everything from top props imports to bottom targets imports.",
        "createdAt": "2017-12-01T22:03:05Z",
        "updatedAt": "2017-12-01T22:03:05Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "But what if I need to set values in my props that are then used in the project file?",
        "createdAt": "2017-12-01T22:04:18Z",
        "updatedAt": "2017-12-01T22:04:18Z",
        "author": {
          "login": "clairernovotny"
        }
      },
      {
        "body": "True, there's that :), One way to do it is to design the all-bottom new SDK logic in such a way that the project file only needs to override values, never read. Otherwise, you can get into impossible situations where you want to specify a property in props so that it can be read in the project file, but at the same time you want to condition it on some SDK computed value.",
        "createdAt": "2017-12-01T22:09:32Z",
        "updatedAt": "2017-12-01T22:09:32Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "I guess I always read it as properties are evaluated top-down, before the items are evaluated. So by that reasoning, I should be able to put a property wherever I want and long as things respect values, it'd work.\r\n\r\nThe tricky part is knowing where the sdk.props/targets fits into the evaluation order.\r\n\r\nI don't have the issue number handy, but for my MSBuild.Sdk.Extras package, I don't have the right extensibility points as-is.\r\n\r\nI have to tell people to add:\r\n\r\n`<Import Project=\"$(MSBuildSDKExtrasTargets)\" Condition=\"Exists('$(MSBuildSDKExtrasTargets)')\" />`\r\ninto their project files because I need my nuget-provided targets to be injected after the project but before the SDK targets. The nuget package provides the property pointing to the location of the targets. I'd love to get rid of that nasty hack.",
        "createdAt": "2017-12-01T22:14:53Z",
        "updatedAt": "2017-12-01T22:14:53Z",
        "author": {
          "login": "clairernovotny"
        }
      },
      {
        "body": "> So by that reasoning, I should be able to put a property wherever I want and long as things respect values, it'd work.\r\n\r\nWhat makes it harder is the property dependency graph, and the fact that the final graph gets composed from layering the top_imports_property_graph + project_file_property_graph + bottom_imports_property_graph. This restricts the places where you can put your properties,  depending on what you want to happen. It seems that each placement strategy has its drawbacks, which unfortunately forces the user to understand everything.\r\n\r\n> MSBuild.Sdk.Extras package\r\n\r\nI guess the relationship between top and bottom imports is ambiguous, I don't even know it :). Opened #2767. Ideally, it would be nice if you could create an actual MSBuild sdk. Then the order would be more clear \r\n`<Project Sdk=\"Microsoft.SDK.Extras;Microsoft.Net.Sdk>\"`\r\n",
        "createdAt": "2017-12-01T22:38:47Z",
        "updatedAt": "2017-12-01T22:39:59Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "> Ideally, it would be nice if you could create an actual MSBuild sdk. \r\n\r\nYes, there's been an issue over here tracking putting this into the main one\r\nhttps://github.com/dotnet/sdk/pull/889\r\n\r\nMore importantly, there's no way to pull in an SDK from a NuGet package.\r\n\r\nAlso, that's still not enough. I need my props to go after the main SDK props and my targets before the main SDK targets. Not first and first.\r\n\r\nBasically, I need to consume the defaults/values from the main SDK in my props then provide values before the SDK targets.\r\n\r\nEffectively this:\r\n\r\nMSbuild SDK Props\r\nExtras SDK Props\r\nProject\r\nExtras targets\r\nMSBuild SDK targets\r\n",
        "createdAt": "2017-12-01T22:41:49Z",
        "updatedAt": "2017-12-01T22:43:37Z",
        "author": {
          "login": "clairernovotny"
        }
      },
      {
        "body": "I'm setting `<DebugType>embedded</DebugType>` via `Directory.build.props` for a solution containing 70+ projects. On each build approx. 1-5 **RANDOM** projects fail with this pack error.\r\n\r\nI need a robust build system and not a random number generator.",
        "createdAt": "2018-01-27T14:09:58Z",
        "updatedAt": "2018-01-27T14:09:58Z",
        "author": {
          "login": "springy76"
        }
      },
      {
        "body": "@springy76 \r\nCan you please open a separate issue with more repro info and diagnostic logs (`msbuild /bl`) for the failing projects?",
        "createdAt": "2018-01-29T18:19:05Z",
        "updatedAt": "2018-01-29T18:19:05Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "I know this is an old issue but it's still open. I'm experiencing this in two of my solutions, while four others work fine. Anyone know a workaround to remove the non-existant pdb paths from the copy list? ",
        "createdAt": "2019-12-04T17:46:34Z",
        "updatedAt": "2019-12-04T17:46:34Z",
        "author": {
          "login": "pinkfloydx33"
        }
      },
      {
        "body": "I'm also encountering this with a few .NET Standard 2.0 and .NET Framework 4.7.2 projects.\r\n\r\n**Update:**\r\nMoving\r\n```xml\r\n<PropertyGroup>\r\n    <DebugSymbols>true</DebugSymbols>\r\n    <DebugType>embedded</DebugType>\r\n    <AllowedOutputExtensionsInPackageBuildOutputFolder>$(AllowedOutputExtensionsInPackageBuildOutputFolder);.pdb</AllowedOutputExtensionsInPackageBuildOutputFolder>\r\n</PropertyGroup>\r\n```\r\nfrom `Directory.Build.targets` to `Directory.Build.props` seems to fix the issue.\r\n\r\nSo I guess this is related to some required build target being executed before the targets file is injected.\r\n\r\n**Edit:** I just saw that @cdmihai [already mentioned this work-around](https://github.com/dotnet/msbuild/issues/2754#issuecomment-348618585).",
        "createdAt": "2024-04-17T11:38:15Z",
        "updatedAt": "2024-04-18T05:37:33Z",
        "author": {
          "login": "ChristoWolf"
        }
      }
    ]
  }
}