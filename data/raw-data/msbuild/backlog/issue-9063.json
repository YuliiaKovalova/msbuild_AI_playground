{
  "number": 9063,
  "title": "[Terminal Logger]: Hook up TerminalLogger enablement in the .NET SDK ",
  "body": "### Summary\r\n\r\nWe should define an enablement mechanism for Terminal Logger in the .NET SDK to allow for easily enabling/disabling the logger.\r\n\r\n\r\n### Background and Motivation\r\n\r\nThe mechanism should\r\n\r\n* respect any explicit TerminalLogger setting the user has provided\r\n* let user-provided CLI arguments for managing TerminalLogger take precedence over any automatically-supplied arguments\r\n* be able to handle the various ways that MSBuild arguments are automatically injected into a build (specifically Directory.Build.rsp)\r\n\r\n\r\n### Proposed Feature\r\n\r\nBased on these requirements, we think the SDK enablement should\r\n\r\n* Check the MSBUILDTERMINALLOGGER environment variable, and if no user value for this variable has been set a default value should be applied\r\n* For the 8.0 SDK cycle, the default value of `off` should be used by the SDK\r\n* For the 9.0 SDK, the default value of `auto` should be used by the SDK\r\n\r\nIn addition, usage telemetry for the TerminalLogger feature should be emitted from the SDK to help gauge usage of the feature and validate the decision to turn it on by default. The telemetry should report:\r\n* the normalized user-set value (if any)\r\n* the value the SDK used (which should match the user-set value in all cases)\r\n* if TerminalLogger was valid to be used\r\n\r\nThis will help us detect cases where the user explicitly disable Terminal Logger when it would otherwise have been used - this is the value we'd like to minimize\r\n\r\n### Alternative Designs\r\n\r\nAnother take on the design would be to check the same variables/precedence, but inject the Terminal Logger arguments via CLI arguments. However, due to the precedence of MSBuild's response file handling, if a user disabled Terminal Logger via a response file the response file's arguments would be overridden by the arguments explicitly set by the SDK.\r\n\r\nFinally, we could also not pass through anything and set new defaults in MSBuild itself. We decided against this because we infer that the MSBuild.exe user base is less likely to use the feature, and the SDk user base is more likely to use the feature. It's also harder to collect usage telemetry for MSBuild.exe, so we would have a more difficult time justifying the feature's usage.\r\n\r\n- [x] Changes in MSBuild - #9119 \r\n- [x] Changes is SDK - https://github.com/dotnet/sdk/pull/34606\r\n- [x] Seed telemetry so it can be categorized (from dev machine should do)\r\n- [x] Categorize new telemetry\r\n- [ ] Update dotnet SDK used telemetry docs?\r\n- [x] Other Docs (document optin/out)",
  "state": "CLOSED",
  "createdAt": "2023-07-24T20:46:59Z",
  "updatedAt": "2024-02-01T14:45:46Z",
  "closedAt": "2024-02-01T14:45:46Z",
  "author": {
    "login": "baronfel"
  },
  "labels": [
    "Feature Request",
    "Priority:1",
    "triaged",
    "Area: Terminal Logger"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "baronfel"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "@baronfel Can we consider this issue as completed?",
        "createdAt": "2024-02-01T14:42:28Z",
        "updatedAt": "2024-02-01T14:42:28Z",
        "author": {
          "login": "rokonec"
        }
      },
      {
        "body": "Yep! I'll close it. ",
        "createdAt": "2024-02-01T14:45:40Z",
        "updatedAt": "2024-02-01T14:45:40Z",
        "author": {
          "login": "baronfel"
        }
      }
    ]
  }
}