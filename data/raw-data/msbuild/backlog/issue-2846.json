{
  "number": 2846,
  "title": "MSBuildToolsVersion when multi-targeting",
  "body": "### Steps to reproduce\r\n\r\nClone https://github.com/daveaglick/Buildalyzer and run the `CompilesProject` test in the `FrameworkTests` test project. The case for `SdkMultiTargetingProject` will fail.\r\n\r\n### Expected  behavior\r\n\r\nA multi-targeted project will successfully compile using the MSBuild APIs.\r\n\r\n### Actual behavior\r\n\r\nThe build fails:\r\n\r\n```\r\nProject \"E:\\Code\\Buildalyzer\\tests\\projects\\SdkMultiTargetingProject\\SdkMultiTargetingProject.csproj\" (Clean target(s)):\r\n\r\nTarget Clean:\r\n    __________________________________________________\r\n    Project \"E:\\Code\\Buildalyzer\\tests\\projects\\SdkMultiTargetingProject\\SdkMultiTargetingProject.csproj\" is building \"E:\\Code\\Buildalyzer\\tests\\projects\\SdkMultiTargetingProject\\SdkMultiTargetingProject.csproj\" (Clean target(s)):\r\n\r\n    C:\\Program Files\\dotnet\\sdk\\2.1.2\\Sdks\\Microsoft.NET.Sdk\\Sdk\\Sdk.props(29,3): error MSB4019: The imported project \"C:\\Program Files\\dotnet\\sdk\\2.1.2\\2.0\\Microsoft.Common.props\" was not found. Confirm that the path in the <Import> declaration is correct, and that the file exists on disk.\r\n\r\n    Done building project \"SdkMultiTargetingProject.csproj\" -- FAILED.\r\n```\r\n\r\n### Environment data\r\n\r\nUsing the 15.5.180 MSBuild APIs from NuGet.\r\n\r\n### More information\r\n\r\nIt looks to me like the problem with locating `Microsoft.Common.props` appears to be related to the tools version because the import in `Sdk.props` looks like:\r\n\r\n```\r\n<Import Project=\"$(MSBuildExtensionsPath)\\$(MSBuildToolsVersion)\\Microsoft.Common.props\" />\r\n```\r\n\r\nIt appears to me as though the tools version (as set via a Toolset in the MSBuild API as well as a `MSBuildToolsVersion` environment variable) is being \"reset\" for the inner builds when multi-targeting:\r\n\r\n![2018-01-07_16h47_52](https://user-images.githubusercontent.com/1020407/34678870-5e5ee66c-f462-11e7-920f-2de2e2c57530.png)\r\n\r\nI've verified `MSBuildToolsVersion` is getting set correctly in the outer build:\r\n\r\n![2018-01-07_16h27_01](https://user-images.githubusercontent.com/1020407/34679085-d72206a6-f462-11e7-863e-00830ebfa6c2.png)\r\n\r\nNon-multi-targeted builds work fine. I suspect there's something else that needs to be set to carry the tools version forward to the multi-targeted inner builds because obviously Visual Studio can get these to compile.\r\n\r\ncc @davkean ",
  "state": "CLOSED",
  "createdAt": "2018-01-08T15:58:45Z",
  "updatedAt": "2024-02-21T17:15:03Z",
  "closedAt": "2018-06-29T19:24:21Z",
  "author": {
    "login": "daveaglick"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "A similar issue seems to occur when not multi-targetting but using PackageReference instead of packages.config in a full framework project. See daveaglick/Buildalyzer#33. I'm observing the same behaviour where MSBuildToolsVersion isn't set when the GetTargetPaths target is run in a referenced project.",
        "createdAt": "2018-02-14T07:35:31Z",
        "updatedAt": "2018-02-14T07:35:31Z",
        "author": {
          "login": "jmezach"
        }
      },
      {
        "body": "I've figured this out: when you trigger a build with the MSBuild APIs using `ProjectInstance.Build()` it doesn't copy the `BuildParameters` from the `ProjectCollection` into the `BuildManager`. That means if you customized the toolset (as I was doing here), and inner builds from the same manager will revert to the default `BuildParameters` (and therefore the default toolset).\r\n\r\nTo get the `BuildParameters` to persist for other builds from the same manager, you have to trigger the build yourself without going through the `ProjectInstance` and instead call `BuildManager.Build()`.\r\n\r\nThis seems like suspect/buggy behavior to me. I would expect the `ProjectInstance.Build()` method to properly handle nested builds, but since I've figured out how to work around it I'll close the issue.",
        "createdAt": "2018-06-29T19:24:21Z",
        "updatedAt": "2018-06-29T19:24:21Z",
        "author": {
          "login": "daveaglick"
        }
      }
    ]
  }
}