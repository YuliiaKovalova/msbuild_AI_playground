{
  "number": 4315,
  "title": "Improve ToolTask's usage of response files",
  "body": "In relation to https://github.com/dotnet/sdk/pull/3121\r\n\r\nWe need a way to:\r\n1) Have a ToolTask implementor to specify a custom response file path (via a property override for example)\r\n2) Boolean property to enable the logging of the tool command using the @\"rspfile\" format (Ex: mytool.exe @\"temppath\\myrsp.rsp\") instead of the default list of raw arguments.\r\n\r\nRegarding the first point, there are some cases where we need to keep the response file around in the obj intermediates. This is especially useful in repros, where we need to quickly reproduce a tool failure for investigation, and it has proven useful when we ask our customers to submit us repros for external bug investigations.\r\n\r\nRegarding the second point, there are 2 aspects here:\r\n1) Aesthetic aspect: there are some tools that require *huge* commands, and can make it very hard to read the msbuild log. I'm not talking about enabling/disabling the logging here, which can be controlled by the msbuild logging verbosity (that's a different thing). I'm talking about logging the *exact* command that is being executed, which is based on a response file instead of the huge list of raw arguments. Not just would it be easier to copy/paste that command from the msbuild log for a targeted repro, but it would make the log so much easier to read. On another note, given that we can split various raw arguments over multiple lines in the response file, it makes the response file so much easier to read with a human eye compared to a huge string of concatenated raw arguments. Best example: all the /r arguments for the C# compiler. \r\n2) Correctness aspect: we need to know exactly the command that executed. If a tool fails because of a bug in response file argument parsing, there would be no way of easily reproducing that just by copying/pasting the raw arguments logged in the msbuild log.\r\n\r\nAn example of a tool where we really benefitted from keeping the rsp files and logging the rsp-based command can be found here: https://github.com/dotnet/sdk/pull/3121",
  "state": "OPEN",
  "createdAt": "2019-04-16T20:34:06Z",
  "updatedAt": "2024-02-21T16:31:29Z",
  "closedAt": null,
  "author": {
    "login": "fadimounir"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "cc @rainersigwald ",
        "createdAt": "2019-04-17T00:04:17Z",
        "updatedAt": "2019-04-17T00:04:17Z",
        "author": {
          "login": "fadimounir"
        }
      },
      {
        "body": "My 2cc, Response file can't be a fixed name for two reasons, 1) security as reusing a file could lead to wrong execution of the tool.  2) parallel build would conflict read/write access to the file.\r\nThere are solution to addresss #1 and #2, but once you implemented them, you are back to your original issue.  \r\n\r\nI do agree it may be helpful if there was a mode or tool that the build and logged \"rsp\" instead of full argument list.",
        "createdAt": "2019-04-17T22:14:09Z",
        "updatedAt": "2019-04-17T22:14:09Z",
        "author": {
          "login": "yuehuang010"
        }
      },
      {
        "body": "The scenarios make sense to me. But many times, the task being executed writes the response file. It seems you need a flag that tells the task to not delete it afterwards.\r\n\r\nBTW, it is my lasting regret that we made msbuild.exe default verbosity \"normal\" rather than \"minimal\". Most people just want to know the build is progressing, and any problems. They don't need to see the command lines being executed...",
        "createdAt": "2019-04-17T23:43:55Z",
        "updatedAt": "2019-04-17T23:43:55Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "> But many times, the task being executed writes the response file\r\n\r\nI think uses a random file name under the %temp% folder",
        "createdAt": "2019-04-18T03:02:09Z",
        "updatedAt": "2019-04-18T03:02:09Z",
        "author": {
          "login": "fadimounir"
        }
      },
      {
        "body": "> 1) security as reusing a file could lead to wrong execution of the tool.\r\n\r\nCould a ToolTask could specify a path to copy the rsp file to after execution instead of deleting it?\r\n\r\n> 2) parallel build would conflict read/write access to the file.\r\n\r\nIf we make this a virtual method instead of a property it should be clearer that it shouldn't be a constant path.",
        "createdAt": "2023-08-18T17:40:57Z",
        "updatedAt": "2023-08-18T17:40:57Z",
        "author": {
          "login": "jtschuster"
        }
      }
    ]
  }
}