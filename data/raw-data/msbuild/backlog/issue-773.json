{
  "number": 773,
  "title": "Exec.EnvironmentVariables fails to parse well-formed PATH",
  "body": "Consider the following target:\n\n``` XML\n  <Target Name=\"Test\" \n          DependsOnTargets=\"PrepareTests;\n                            BuildTestAssets;\n                            BuildTests;\">\n    <PropertyGroup>\n      <PathListSeparator>:</PathListSeparator>\n      <PathListSeparator Condition=\" '$(OSName)' == 'win' \">;</PathListSeparator>\n      <ExecPath>$(Stage2Directory)$(PathListSeparator)$(PATH)</ExecPath>\n      <TestArtifactsEnv>$(TestArtifactsDir)</TestArtifactsEnv>\n    </PropertyGroup>\n\n    <ItemGroup>\n      <TestTaskEnvironmentVariables Include=\"PATH=$(ExecPath)\" />\n      <TestTaskEnvironmentVariables Include=\"TEST_ARTIFACTS=$(TestArtifactsEnv)\" />\n    </ItemGroup>\n\n    <Message Text=\"PATH=$(ExecPath)\" />\n    <Message Text=\"TEST_ARTIFACTS=$(TestArtifactsEnv)\" />\n\n    <DotNetTest WorkingDirectory=\"$(TestDirectory)/%(ProjectsToTest.Identity)/\"\n                EnvironmentVariables=\"@(TestTaskEnvironmentVariables)\"\n                ToolPath=\"$(Stage2Directory)\"\n                Configuration=\"$(Configuration)\"\n                NoTrait=\"category=failing\"\n                Xml=\"$(TestResultXmlDir)/%(ProjectsToTest.Identity)-testResults.xml\" />\n  </Target>\n```\n\nThe target eventually invokes DotNetTest, which is a custom task derived from ToolTask. When running under CI on Windows this chunk produces the following output:\n\n```\n10:12:14 PATH=D:\\j\\workspace\\release_windo---5a97ca7c\\/artifacts/win81-x64/stage2;D:\\j\\workspace\\release_windo---5a97ca7c\\.dotnet_stage0\\x64;D:\\j\\workspace\\release_windo---5a97ca7c\\.dotnet_stage0\\x64;D:\\j\\workspace\\release_windo---5a97ca7c\\.dotnet_stage0\\x64\\;C:\\ProgramData\\Oracle\\Java\\javapath;C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\Program Files\\Microsoft SQL Server\\110\\Tools\\Binn\\;C:\\Program Files (x86)\\Microsoft SDKs\\TypeScript\\1.0\\;C:\\Program Files\\Microsoft SQL Server\\120\\Tools\\Binn\\;C:\\Program Files\\Microsoft\\Web Platform Installer\\;C:\\Program Files (x86)\\CMake\\bin;C:\\Strawberry\\c\\bin;C:\\Strawberry\\perl\\site\\bin;C:\\Strawberry\\perl\\bin;C:\\Program Files\\Java\\jre1.8.0_31\\bin;C:\\Program Files\\SourceGear\\Common\\DiffMerge\\;C:\\Python27;C:\\Program Files\\SourceGear\\Common\\DiffMerge\\;C:\\Program Files (x86)\\LLVM\\bin;C:\\Program Files (x86)\\Windows Kits\\10\\Windows Performance Toolkit\\;C:\\Program Files\\Git\\cmd;D:\\j\\workspace\\release_windo---5a97ca7c\\.dotnet_stage0\\x64\\shared\\Microsoft.NETCore.App\\1.0.0;D:\\j\\workspace\\release_windo---5a97ca7c\\.dotnet_stage0\\x64\\shared\\Microsoft.NETCore.App\\1.0.0\n\n10:12:14 TEST_ARTIFACTS=D:\\j\\workspace\\release_windo---5a97ca7c\\/artifacts/win81-x64/tests/artifacts\n\n10:12:14 D:\\j\\workspace\\release_windo---5a97ca7c\\build\\Microsoft.DotNet.Cli.Test.targets(27,5): error MSB6007: The \"D:\\j\\workspace\\release_windo---5a97ca7c\\.dotnet_stage0\\x64\" value passed to the Environment property is not in the format \"name=value\", where the value part may be empty. [D:\\j\\workspace\\release_windo---5a97ca7c\\build.proj]\n\n10:12:14 Done Building Project \"D:\\j\\workspace\\release_windo---5a97ca7c\\build.proj\" (default targets) -- FAILED.\n```\n\nI suspect that this is related to the Windows PATH item seperator `;` being the same as the MSBuild Item Group separator. However, I also suspect that this is  a common enough use case of EnvironmentVariables that its worth opening the issue and getting official guidance out for folks.\n",
  "state": "CLOSED",
  "createdAt": "2016-07-11T18:30:46Z",
  "updatedAt": "2024-02-21T17:27:10Z",
  "closedAt": "2016-11-28T17:47:25Z",
  "author": {
    "login": "TheRealPiotrP"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "jeffkl"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "I agree with your assessment. Is the behavior different if you set `PathListSeparator` to `%3B` instead?\n",
        "createdAt": "2016-07-11T18:33:55Z",
        "updatedAt": "2016-07-11T18:33:55Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Testing `%3b` now.\n",
        "createdAt": "2016-07-11T18:50:09Z",
        "updatedAt": "2016-07-11T18:50:09Z",
        "author": {
          "login": "TheRealPiotrP"
        }
      },
      {
        "body": "Failed with %3b as well. same message.\n",
        "createdAt": "2016-07-11T19:05:24Z",
        "updatedAt": "2016-07-11T19:05:24Z",
        "author": {
          "login": "TheRealPiotrP"
        }
      },
      {
        "body": "@piotrpMSFT the problem here is that the EnvironmentVariables property is a `string[]` so the task caller code splits the value using the `;` separator, as you surmised. \r\n\r\nOne viable workaround is to escape the semicolons in the PATH variable:\r\n\r\n``` xml\r\n  <Target Name=\"Build\">\r\n    <PropertyGroup>\r\n      <ExecPath>$(Stage2Directory):$(PATH)</ExecPath>\r\n      <ExecPath Condition=\" '$(OSName)' == 'win' \">$(Stage2Directory)%3B$(PATH.Replace(';', '%3B'))</ExecPath>\r\n      <TestArtifactsEnv>$(TestArtifactsDir)</TestArtifactsEnv>\r\n    </PropertyGroup>\r\n\r\n    <ItemGroup>\r\n      <TestTaskEnvironmentVariables Include=\"PATH=$(ExecPath)\" />\r\n      <TestTaskEnvironmentVariables Include=\"TEST_ARTIFACTS=$(TestArtifactsEnv)\" />\r\n    </ItemGroup>\r\n\r\n    <Exec Command=\"\r\n            @echo PATH: '%PATH%'\r\n            @echo.\r\n            @echo TEST_ARTIFACTS: '%TEST_ARTIFACTS%' \"\r\n          EnvironmentVariables=\"@(TestTaskEnvironmentVariables)\"\r\n          EchoOff=\"true\" />\r\n  </Target>\r\n```\r\n\r\nThe resulting output:\r\n\r\n```\r\nBuild started 11/22/2016 8:31:54 AM.\r\nProject \"c:\\Users\\jeffkl\\Desktop\\773.proj\" on node 1 (default targets).\r\nBuild:\r\n  PATH: 'D:\\MSBuild\\bin\\Debug\\Windows_NT_Deployment_Test;C:\\Program Files (x86)\\MSBuild\\14.0\\bin;C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0;C:\\Program Files\\Git\\cmd;C:\\Program File\r\n  s\\dotnet;C:\\Program Files (x86)\\Microsoft Team Foundation Server 2015 Power Tools\\;C:\\Program Files\\Microsoft\\Web Platform Installer\\;C:\\Program Files\\Git\\cmd;C:\\Users\\jeffkl\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Program Files\\CMake\\\r\n  bin;C:\\Users\\jeffkl\\Tools;\"C:\\Users\\jeffkl\\Desktop\\asdf---asdf;\"'\r\n\r\n  TEST_ARTIFACTS: 'D:\\MSBuild\\bin\\Bootstrap\\15.0\\Bin'\r\nDone Building Project \"c:\\Users\\jeffkl\\Desktop\\773.proj\" (default targets).\r\n```\r\n\r\nIt appears to work even if one of the directories in the path contain a `;`.  \r\n\r\n@rainersigwald I don't think we can do much about this since it could break a lot of backwards compatibility.  I think if you pass in an `ITaskItem[]` to a property that is a `string[]` that it should be populated from the full path of each item.",
        "createdAt": "2016-11-22T16:46:58Z",
        "updatedAt": "2016-11-22T16:46:58Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "I agree that we can't fix this without breaking existing builds.\r\n\r\n>  I think if you pass in an ITaskItem[] to a property that is a string[] that it should be populated from the full path of each item.\r\n\r\nWould that help here? In any case, I think that would break even more things.\r\n",
        "createdAt": "2016-11-22T16:51:27Z",
        "updatedAt": "2016-11-22T16:51:27Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> Would that help here? In any case, I think that would break even more things.\r\n\r\nI think so, unless the evaluation, shredding still took effect.  If the task builder changed the `ITaskItem[]` to `string[]` via something like:\r\n``` C#\r\nITaskItem[] items; // What was passed in\r\nstring[] values = items.Select(i => i.Identity);\r\ntask.EnvironmentVariables = values;\r\n```\r\nThen it would work since it wouldn't be trying to split anything right?",
        "createdAt": "2016-11-22T16:56:46Z",
        "updatedAt": "2016-11-22T16:56:46Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "I doubt we can change anything to make this better without breaking other scenarios.  Should we just close this since I found a viable workaround?",
        "createdAt": "2016-11-28T17:09:41Z",
        "updatedAt": "2016-11-28T17:09:41Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "I agree. WONTFIX.",
        "createdAt": "2016-11-28T17:47:25Z",
        "updatedAt": "2016-11-28T17:47:25Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}