{
  "number": 5438,
  "title": "Eliminate IInternable in favor of ReadOnlySpan<char> for OpportunisticIntern inputs",
  "body": "Most `IInternable` implementations can already be represented as `ReadOnlySpan<char>` and are thus redundant. The `StringBuilder` based implementations are problematic from performance point of view in that they're indexing into the `StringBuilder` as iterating over its characters could be an O(N^2) operation.\r\n\r\nWe should:\r\n- Delete IInternable.\r\n- Convert the non-`StringBuilder` uses to `ReadOnlySpan<char>`.\r\n- Figure out how to address `StringBuilder` implementations.\r\n  - On .NET Core we could use the new [GetChunks()](https://docs.microsoft.com/en-us/dotnet/api/system.text.stringbuilder.getchunks?view=netcore-3.1) method.\r\n  - Or we could simply convert the `StringBuilder` to string and verify that the perf win outweighs the cost of the string allocation.",
  "state": "CLOSED",
  "createdAt": "2020-06-17T15:49:16Z",
  "updatedAt": "2024-02-21T17:03:27Z",
  "closedAt": "2021-01-21T08:09:15Z",
  "author": {
    "login": "ladipro"
  },
  "labels": [
    "Area: Performance",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "ladipro"
      }
    ]
  },
  "milestone": {
    "title": "MSBuild 16.10"
  },
  "comments": {
    "nodes": [
      {
        "body": "Picking this one up. Here's my `StringBuilder` proposal:\r\n\r\nSince most uses of `StringBuilder` in MSBuild are \"append-only\" and simply compose the resulting string from smaller (sub-)strings, I'll implement a new data structure tentatively named `CharacterSpanBuilder`. Instead of copying the string contents around it will be keeping track of just references to the constituent strings. When done building, `CharacterSpanBuilder` will trivially return a collection of `ReadOnlySpan<char>` to be consumed by the interner.\r\n\r\nThe `ToString()` method will be provided as well and the new data structure should replace most uses of `StringBuilder` in the code base, with positive impact on ephemeral allocations.\r\n\r\nBefore:\r\n\r\n```C#\r\nStringBuilder sb = new StringBuilder(256);\r\nsb.Append(str1);\r\nsb.Append(str2, 0, someLength);\r\nreturn sb.ToString();\r\n```\r\n\r\nAfter:\r\n```C#\r\nCharacterSpanBuilder sb = new CharacterSpanBuilder(2);\r\nsb.Append(str1);\r\nsb.Append(str2, 0, someLength);\r\nreturn sb.ToString();\r\n```\r\n\r\nInstead of capacity in characters, the caller is supplying the capacity of the internal array of `{ string, int, int }` records, so typically orders of magnitude less bytes allocated.\r\n\r\n`CharacterSpanBuilder` may even be a struct passed around by \"ref\" and satisfy a reasonable number of records without allocating anything at all.",
        "createdAt": "2020-08-14T15:03:15Z",
        "updatedAt": "2020-08-14T15:03:15Z",
        "author": {
          "login": "ladipro"
        }
      }
    ]
  }
}