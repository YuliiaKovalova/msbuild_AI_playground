{
  "number": 5065,
  "title": "Detect OS architecture",
  "body": "Related to this: https://github.com/microsoft/msbuild/issues/2468 , but for [OS architecture](https://docs.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.runtimeinformation.osarchitecture?view=netframework-4.8#System_Runtime_InteropServices_RuntimeInformation_OSArchitecture) (X86/X64).\r\n\r\nCurrently, I have the following code as a workaround:\r\n\r\n```xml\r\n<Runtime Condition=\" $([MSBuild]::IsOsPlatform('Windows')) AND '$([System.Runtime.InteropServices.RuntimeInformation]::OSArchitecture)' == 'X64' \">win-x64</Runtime>\r\n<Runtime Condition=\" $([MSBuild]::IsOsPlatform('Windows')) AND '$([System.Runtime.InteropServices.RuntimeInformation]::OSArchitecture)' == 'X86' \">win-x86</Runtime>\r\n```\r\n\r\nIt could better to have `$([MSBuild]::IsOsArchitecture('X86'))` method available.\r\n\r\n/cc @rainersigwald ",
  "state": "CLOSED",
  "createdAt": "2020-01-22T00:01:20Z",
  "updatedAt": "2024-10-01T22:33:07Z",
  "closedAt": "2021-09-11T19:01:03Z",
  "author": {
    "login": "lijunle"
  },
  "labels": [
    "needs-more-info",
    "needs-triage",
    "stale",
    "closed-by-bot"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Can you elaborate on why you want to do this? In your example, why do you want to control the output you're building based on the architecture of the MSBuild process that's building it? In general, any MSBuild architecture should be able to produce any output architecture.",
        "createdAt": "2020-01-27T21:49:33Z",
        "updatedAt": "2020-01-27T21:49:33Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "It is a dev-tool to run on all OSes. In NuGet package, there are 4 binaries shipped - for win-x64, win-x86, macOS, Linux. When the MSBuild targets is invoked, it needs to select the correct binary based on the current OS and architecture.",
        "createdAt": "2020-01-27T21:56:00Z",
        "updatedAt": "2020-01-27T21:56:00Z",
        "author": {
          "login": "lijunle"
        }
      },
      {
        "body": "In general, now that dotnet core is multiplatform, it can be very handy to be able to define build constants and other such things based on the target platform/arch. All proper multiplatform build systems offer such capability.\r\n\r\nOf course, this is only useful in code which interacts with unmanaged/native libraries, but such libraries are plentiful and the need to use them arises rather often.",
        "createdAt": "2021-06-18T10:18:05Z",
        "updatedAt": "2021-06-18T10:18:05Z",
        "author": {
          "login": "oakad"
        }
      },
      {
        "body": "This issue is marked as stale because feedback has been requested for 30 days with no response. Please respond within 14 days or this issue will be closed due to inactivity.",
        "createdAt": "2021-08-28T00:01:18Z",
        "updatedAt": "2021-08-28T00:01:18Z",
        "author": {
          "login": "ghost"
        }
      },
      {
        "body": "This issue was closed due to inactivity. If you can still reproduce this bug, please comment with the requested information, detailed steps to reproduce the problem, or any other notes that might help in the investigation.",
        "createdAt": "2021-09-11T19:01:04Z",
        "updatedAt": "2021-09-11T19:01:04Z",
        "author": {
          "login": "ghost"
        }
      },
      {
        "body": "@rainersigwald \r\n\r\nCould this be reopened?\r\n\r\nI'd like to conditionally install NuGet packages based on the OS architecture, and a shorter condition would be nice. \ud83d\ude42",
        "createdAt": "2023-03-16T18:52:08Z",
        "updatedAt": "2023-03-16T18:52:08Z",
        "author": {
          "login": "glen-84"
        }
      },
      {
        "body": "> I'd like to conditionally install NuGet packages based on the OS architecture\r\n\r\nThat sounds unusual to me. You want to install different NuGet packages depending on the OS of the build machine, rather than the target?",
        "createdAt": "2023-03-30T15:30:06Z",
        "updatedAt": "2023-03-30T15:30:06Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "If you install, for example, [NetVips.Native](https://www.nuget.org/packages/NetVips.Native), it downloads binaries for multiple operating systems, which seems unnecessary.\r\n\r\nI have:\r\n\r\n```xml\r\n<ItemGroup>\r\n  <PackageReference Include=\"NetVips.Native.linux-x64\" Version=\"8.14.2\" Condition=\"$(IsLinuxX64) == true\" />\r\n  <PackageReference Include=\"NetVips.Native.osx-arm64\" Version=\"8.14.2\" Condition=\"$(IsOsxArm64) == true\" />\r\n  <PackageReference Include=\"NetVips.Native.win-x64\" Version=\"8.14.2\" Condition=\"$(IsWindowsX64) == true\" />\r\n</ItemGroup>\r\n\r\n<PropertyGroup>\r\n  <IsLinuxX64 Condition=\"$([MSBuild]::IsOsPlatform('Linux')) And $([System.Runtime.InteropServices.RuntimeInformation]::OSArchitecture) == X64\">true</IsLinuxX64>\r\n  <IsOsxArm64 Condition=\"$([MSBuild]::IsOsPlatform('OSX')) And $([System.Runtime.InteropServices.RuntimeInformation]::OSArchitecture) == Arm64\">true</IsOsxArm64>\r\n  <IsWindowsX64 Condition=\"$([MSBuild]::IsOsPlatform('Windows')) And $([System.Runtime.InteropServices.RuntimeInformation]::OSArchitecture) == X64\">true</IsWindowsX64>\r\n</PropertyGroup>\r\n```\r\n\r\nHow would I get the target OS/arch instead?",
        "createdAt": "2023-03-30T16:00:41Z",
        "updatedAt": "2023-03-30T16:00:41Z",
        "author": {
          "login": "glen-84"
        }
      },
      {
        "body": "I will simply leave this here: https://wiki.osdev.org/Target_Triplet :-)\r\n",
        "createdAt": "2023-03-31T03:17:10Z",
        "updatedAt": "2023-03-31T03:17:10Z",
        "author": {
          "login": "oakad"
        }
      },
      {
        "body": "I don't understand how that relates to my question.",
        "createdAt": "2023-03-31T18:15:49Z",
        "updatedAt": "2023-03-31T18:15:49Z",
        "author": {
          "login": "glen-84"
        }
      },
      {
        "body": "@rainersigwald Are you able to assist with the above question?",
        "createdAt": "2023-04-11T12:34:02Z",
        "updatedAt": "2023-04-11T12:34:02Z",
        "author": {
          "login": "glen-84"
        }
      },
      {
        "body": "> That sounds unusual to me. You want to install different NuGet packages depending on the OS of the build machine, rather than the target?\r\n\r\n@rainersigwald, we have this requirement too for downloading the correct dependent binary for things _not_ on Nuget.\r\n\r\n[dotnet-tailwind](https://github.com/codymullins/dotnet-tailwind) adds some build tasks to the project file:\r\n\r\n```xml\r\n<Target Name=\"Tailwind:Install\" AfterTargets=\"AfterBuild\">\r\n    <Message Importance=\"high\" Text=\"Installing Tailwind CLI\" />\r\n    <DownloadFile SkipUnchangedFiles=\"true\" DestinationFolder=\"$(MSBuildProjectDirectory)\" SourceUrl=\"https://github.com/tailwindlabs/tailwindcss/releases/download/v3.4.1/tailwindcss-windows-x64.exe\" Condition=\"$([MSBuild]::IsOSPlatform('Windows')) AND '$([System.Runtime.InteropServices.RuntimeInformation]::OSArchitecture)' == 'X64'\">\r\n      <Output TaskParameter=\"DownloadedFile\" PropertyName=\"TailwindExecutable\" />\r\n    </DownloadFile>\r\n  </Target>\r\n  <Target Name=\"Tailwind:InstallLinux\" AfterTargets=\"AfterBuild\">\r\n    <Message Importance=\"high\" Text=\"Installing Tailwind CLI\" />\r\n    <DownloadFile SkipUnchangedFiles=\"true\" DestinationFolder=\"$(MSBuildProjectDirectory)\" SourceUrl=\"https://github.com/tailwindlabs/tailwindcss/releases/download/v3.4.1/tailwindcss-linux-x64\" Condition=\"$([MSBuild]::IsOSPlatform('Linux')) AND '$([System.Runtime.InteropServices.RuntimeInformation]::OSArchitecture)' == 'X64'\">\r\n      <Output TaskParameter=\"DownloadedFile\" PropertyName=\"TailwindExecutable\" />\r\n    </DownloadFile>\r\n  </Target>\r\n  <Target Name=\"Tailwind:InstallMac\" AfterTargets=\"AfterBuild\">\r\n    <Message Importance=\"high\" Text=\"Installing Tailwind CLI\" />\r\n    <DownloadFile SkipUnchangedFiles=\"true\" DestinationFolder=\"$(MSBuildProjectDirectory)\" SourceUrl=\"https://github.com/tailwindlabs/tailwindcss/releases/download/v3.4.1/tailwindcss-macos-x64\" Condition=\"$([MSBuild]::IsOSPlatform('OSX')) AND '$([System.Runtime.InteropServices.RuntimeInformation]::OSArchitecture)' == 'X64'\">\r\n      <Output TaskParameter=\"DownloadedFile\" PropertyName=\"TailwindExecutable\" />\r\n    </DownloadFile>\r\n  </Target>\r\n  <Target Name=\"Tailwind:InstallMacArm\" AfterTargets=\"AfterBuild\">\r\n    <Message Importance=\"high\" Text=\"Installing Tailwind CLI\" />\r\n    <DownloadFile SkipUnchangedFiles=\"true\" DestinationFolder=\"$(MSBuildProjectDirectory)\" SourceUrl=\"https://github.com/tailwindlabs/tailwindcss/releases/download/v3.4.1/tailwindcss-macos-arm64\" Condition=\"$([MSBuild]::IsOSPlatform('OSX')) AND '$([System.Runtime.InteropServices.RuntimeInformation]::OSArchitecture)' == 'ARM64'\">\r\n      <Output TaskParameter=\"DownloadedFile\" PropertyName=\"TailwindExecutable\" />\r\n    </DownloadFile>\r\n  </Target>\r\n```",
        "createdAt": "2024-03-22T17:46:10Z",
        "updatedAt": "2024-03-22T17:46:10Z",
        "author": {
          "login": "codymullins"
        }
      },
      {
        "body": "I understand this requirement, but I think that what people is probably really asking for is \"detect _target_ OS architecture\" most of the time? :thinking: @rainersigwald is correct in questioning \"why detect the runtime architecture of MSBuild\" since that's typically the \"wrong question\" I think. But it would still be nice with an example of detecting the OS that the MSBuild process is currently targeting. :slightly_smiling_face: \r\n\r\nAfter some (well, quite a lot) of experimenting I ended up with something like this:\r\n\r\n```csproj\r\n<PropertyGroup Condition=\"$(RuntimeIdentifier.StartsWith('linux'))\">\r\n  <DefineConstants>$(DefineConstants);_LINUX</DefineConstants>\r\n</PropertyGroup>\r\n\r\n<PropertyGroup Condition=\"$(RuntimeIdentifier.StartsWith('win'))\">\r\n  <DefineConstants>$(DefineConstants);_WINDOWS</DefineConstants>\r\n</PropertyGroup>\r\n```\r\n\r\nPutting the above in my `Directory.Build.props` didn't work, but putting them straight in the relevant `.csproj` file worked fine. `Directory.Build.targets` also worked, so I'm guessing something (inside or outside of my solution) is overwriting the `DefineConstants` setting on the way if I put it in `Directory.Build.props` (which, as I understand it from https://learn.microsoft.com/en-us/visualstudio/msbuild/customize-by-directory?view=vs-2022&source=recommendations#import-order, is imported quite early in the build processing).\r\n\r\n**Note**, if you are using dependency projects, you need to add something like this to your _dependency_ `.csproj` file (inspired by https://github.com/dotnet/sdk/issues/10625#issuecomment-697646664). Otherwise the `RuntimeIdentifier` might be empty/unset when running the `dotnet publish` command, causing the logic above to fail.\r\n\r\n```xml\r\n<PropertyGroup>\r\n  <RuntimeIdentifiers>win-x64;linux-x64</RuntimeIdentifiers>\r\n</PropertyGroup>\r\n```\r\n\r\n----\r\n\r\n**TL;DR**: Put the above in your `.csproj` file or `Directory.Build.targets` to make these constants (`_LINUX` and `_WINDOWS`) be available in your code. I think it can quite easily be adjusted for macOS too.",
        "createdAt": "2024-08-06T11:27:24Z",
        "updatedAt": "2024-09-04T07:20:03Z",
        "author": {
          "login": "perlun"
        }
      },
      {
        "body": "@perlun That's only checking the OS, not the architecture.\r\n\r\n@rainersigwald Why was an issue with 9 up-votes closed without explanation?\r\n\r\n**Edit:** Okay this is really strange:\r\n\r\n![image](https://github.com/user-attachments/assets/b5306b11-c2a7-4e11-86e4-def08990b392)",
        "createdAt": "2024-08-09T11:59:59Z",
        "updatedAt": "2024-08-09T12:03:02Z",
        "author": {
          "login": "glen-84"
        }
      },
      {
        "body": "> @perlun That's only checking the OS, not the architecture.\r\n\r\n@glen-84 Yeah, good point. You should be able to adjust it by doing something like `RuntimeIdentifier.Contains('x64')` or similar (note, untested). Could that work?",
        "createdAt": "2024-09-04T07:20:53Z",
        "updatedAt": "2024-09-04T07:20:53Z",
        "author": {
          "login": "perlun"
        }
      },
      {
        "body": "(btw, I edited the MSBuild `<PropertyGroup>` stuff in my previous comment now after debugging it, since we found out that the original version didn't work. `NETCoreSdkPortableRuntimeIdentifier` seems to be set to `linux-x64` even when doing `-r win-x64` in the `dotnet publish` command line. This seems like a bug to me, I don't know if it's reported anywhere. :thinking:)",
        "createdAt": "2024-09-04T07:25:43Z",
        "updatedAt": "2024-09-04T07:26:14Z",
        "author": {
          "login": "perlun"
        }
      },
      {
        "body": "> @glen-84 Yeah, good point. You should be able to adjust it by doing something like `RuntimeIdentifier.Contains('x64')` or similar (note, untested). Could that work?\r\n\r\n`RuntimeIdentifier` is empty for me. As far as I know, this value is [set by the developer](https://learn.microsoft.com/en-us/dotnet/core/project-sdk/msbuild-props#runtimeidentifier).",
        "createdAt": "2024-09-15T09:12:05Z",
        "updatedAt": "2024-09-15T09:12:05Z",
        "author": {
          "login": "glen-84"
        }
      },
      {
        "body": "Sad this is closed because I also need this. The VS threading analyzer is super buggy on Apple Silicon and I just want to turn it off locally for people on this hardware. I understand that 99% of the time you care about the target platform/CPU architecture, but sometimes the host architecture is more important.",
        "createdAt": "2024-10-01T22:33:06Z",
        "updatedAt": "2024-10-01T22:33:06Z",
        "author": {
          "login": "doubleyewdee"
        }
      }
    ]
  }
}