{
  "number": 906,
  "title": "Make lazy evaluation even faster",
  "body": "There are a couple of optimizations that we can still do on the lazy item evaluator:\n- cache GetAllItems results: https://github.com/Microsoft/msbuild/blob/master/src/XMakeBuildEngine/Evaluation/LazyItemEvaluator.cs#L149\n- Remove and Update [can shortcuit](https://github.com/Microsoft/msbuild/blob/master/src/XMakeBuildEngine/Evaluation/LazyItemEvaluator.LazyItemOperation.cs#L243-L246) matching items if their itemspec refers to itself (e.g. `<Compile Remove=\"@(Compile)\">` or `<Compile Update=\"@(Compile)\">`)\n",
  "state": "CLOSED",
  "createdAt": "2016-08-16T21:15:59Z",
  "updatedAt": "2024-02-21T17:26:33Z",
  "closedAt": "2017-07-20T22:44:39Z",
  "author": {
    "login": "cdmihai"
  },
  "labels": [
    "Feature - Globbing",
    "Area: Performance",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Continuing the discussion from here: https://github.com/Microsoft/msbuild/pull/891#discussion_r74658336\n\n> Hmm, even then, the cache would be per LazyItemList instance. For example, the lists representing `[include]` and `[include;update]` would have 2 different GetItems caches because they are 2 objects. So another item pointing to the first list would not get affected by subsequent operations, since those would be in different lazylist objects.\n\nUsing your sample, there are three `LazyItemLists`.  We can call the first one `i2_1`, and it is produced by this:\n\n``` xml\n<i2 Include='a;b;c'>\n    <m1>m1_contents</m1>\n    <m2>m2_contents</m2>\n</i2>\n```\n\nThen we have `i`, which simply copies the contents of `i2_1`:\n\n``` xml\n<i Include='@(i2)'/>\n```\n\nThen we have `i2_2`, which modifies the metadata for the items coming from `i2_1`:\n\n``` xml\n<i2 Update='a;b;c'>\n    <m1>m1_updated</m1>\n    <m2>m2_updated</m2>\n</i2>\n```\n\nYour comment seems to refer to the fact that `i` and `i2_2` are separate objects with separate caches.  That is true, but they both refer to `i2_1`, which is a single instance.  So when `i` is evaluated, it will call GetItems for `i2_1`, which is stored in it's `_previous` field.  This will create the items for `i2_1` with the correct metadata, and if we implement caching then it will cache that list before returning it for `i` to use.\n\nThen when `i2_2` is evaluated, it will have a reference to the same instance of `LazyItemList` which represents `i2_1`.  This time it will return the cached value, which will be the same item instances that were used by `i`.  Then the evaluation of `i2_2` will update the metadata on those item instances, which will be the same ones that are in the `i` item list, meaning that it will change the metadata of the unrelated item list.\n\nHopefully this helps make it more clear.  A possible solution is to clone all the items before modifying their metadata.\n",
        "createdAt": "2016-08-16T21:35:27Z",
        "updatedAt": "2016-10-17T18:04:18Z",
        "author": {
          "login": "dsplaisted"
        }
      },
      {
        "body": "@cdmihai You did the second half of this for Update in #2326, right?",
        "createdAt": "2017-07-20T21:28:20Z",
        "updatedAt": "2017-07-20T21:28:20Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Closing as caching was done in #1192 and #2314 is tracking the Update / Remove optimizations",
        "createdAt": "2017-07-20T22:44:39Z",
        "updatedAt": "2017-07-20T22:44:39Z",
        "author": {
          "login": "cdmihai"
        }
      }
    ]
  }
}