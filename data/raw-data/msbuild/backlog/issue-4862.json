{
  "number": 4862,
  "title": "MissingManifestResourceException if Resourcefile contains multiple dots",
  "body": "_From @LokiMidgard on Wednesday, October 30, 2019 11:10:24 AM_\r\n\r\nWhen adding a `.resx` file beneth another file by naming it e.g. `MainWindow.xaml.resx` to put it under `MainWindow.xaml`, following exception occurs.\r\n\r\n```\r\nMissingManifestResourceException: Could not find the resource \"ResourceEditor.MainWindow.xaml.resources\" among the resources \"ResourceEditor.g.resources\", \"ResourceEditor.MainWindow.resources\" embedded in the assembly \"ResourceEditor\", nor among the resources in any satellite assemblies for the specified culture. Perhaps the resources were embedded with an incorrect name.\r\n```\r\n\r\nI assume the problem is that the `ResourceManager` is initilized in the generated code with\r\n```\r\nglobal::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager(\"ResourceEditor.MainWindow.xaml\", typeof(MainWindow_xaml).Assembly);\r\n```\r\n\r\ninstad of \r\n\r\n\r\n```\r\nglobal::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager(\"ResourceEditor.MainWindow\", typeof(MainWindow_xaml).Assembly);\r\n```\r\n\r\nOr the resource should be embedded with the name `ResourceEditor.MainWindow.xaml.resources`.\r\n\r\nI haven't found the code that embeddes the resources or genereate the code of the `resx` files yet.\r\nSo I couldn't investigate further.\r\n\r\n[Repo to reproduce](https://github.com/LokiMidgard/SampleProblemWithRegexGeneration)\r\n\r\n_Copied from original issue: dotnet/corefx#42218_",
  "state": "CLOSED",
  "createdAt": "2019-10-30T17:09:00Z",
  "updatedAt": "2024-02-21T17:06:20Z",
  "closedAt": "2022-11-15T18:31:20Z",
  "author": {
    "login": "tarekgh"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "benvillalobos"
      }
    ]
  },
  "milestone": {
    "title": "Discussion"
  },
  "comments": {
    "nodes": [
      {
        "body": "_From @tarekgh on Wednesday, October 30, 2019 5:04:08 PM_\r\n\r\n@LokiMidgard you are right. The resources embedded with the name \"ResourceEditor.MainWindow\" instead of \"ResourceEditor.MainWindow.xaml\" and then ResXFileCodeGenerator generate the code according to the input resource name ResourceEditor.MainWindow.xaml. This issue either msbuild issue or WinForm ResXFileCodeGenerator issue. I'll move this issue to msbuild first to have the first look and then can be moved to WinForm if believed the issue is not msbuild.\r\n\r\n```\r\n1>Target \"CreateManifestResourceNames\" in file \"F:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Preview\\MSBuild\\Current\\Bin\\Microsoft.CSharp.CurrentVersion.targets\":\r\n1>  Using \"CreateCSharpManifestResourceName\" task from assembly \"Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\".\r\n1>  Task \"CreateCSharpManifestResourceName\"\r\n1>    Task Parameter:\r\n1>        ResourceFiles=\r\n1>            MainWindow.xaml.resx\r\n1>                    CopyToOutputDirectory=Never\r\n1>                    Generator=ResXFileCodeGenerator\r\n1>                    LastGenOutput=MainWindow.xaml.Designer.cs\r\n1>                    OriginalItemSpec=MainWindow.xaml.resx\r\n1>                    TargetPath=MainWindow.xaml.resx\r\n1>                    Type=Resx\r\n1>                    WithCulture=false\r\n1>            obj\\Debug\\netcoreapp3.0\\ResourceEditor.g.resources\r\n1>                    CopyToOutputDirectory=Never\r\n1>                    GenerateResource=false\r\n1>                    OriginalItemSpec=obj\\Debug\\netcoreapp3.0\\ResourceEditor.g.resources\r\n1>                    OutputResource=obj\\Debug\\netcoreapp3.0\\ResourceEditor.g.resources\r\n1>                    TargetPath=obj\\Debug\\netcoreapp3.0\\ResourceEditor.g.resources\r\n1>                    Type=Resx\r\n1>                    WithCulture=false\r\n1>    Task Parameter:RootNamespace=ResourceEditor\r\n1>    Task Parameter:UseDependentUponConvention=True\r\n1>    Root namespace is 'ResourceEditor'.\r\n1>    Resource file 'MainWindow.xaml.resx' depends on 'MainWindow.xaml.cs'.\r\n1>    Resource file 'MainWindow.xaml.resx' gets manifest resource name 'ResourceEditor.MainWindow'.\r\n1>    Resource file 'obj\\Debug\\netcoreapp3.0\\ResourceEditor.g.resources' doesn't depend on any other file.\r\n1>    Resource file 'obj\\Debug\\netcoreapp3.0\\ResourceEditor.g.resources' gets manifest resource name 'ResourceEditor.obj.Debug.netcoreapp3._0.ResourceEditor.g.resources'.\r\n1>    Output Item(s): \r\n1>        _Temporary=\r\n1>            MainWindow.xaml.resx\r\n1>                    CopyToOutputDirectory=Never\r\n1>                    Generator=ResXFileCodeGenerator\r\n1>                    LastGenOutput=MainWindow.xaml.Designer.cs\r\n1>                    ManifestResourceName=ResourceEditor.MainWindow\r\n1>                    OriginalItemSpec=MainWindow.xaml.resx\r\n1>                    TargetPath=MainWindow.xaml.resx\r\n1>                    Type=Resx\r\n1>                    WithCulture=false\r\n1>            obj\\Debug\\netcoreapp3.0\\ResourceEditor.g.resources\r\n1>                    CopyToOutputDirectory=Never\r\n1>                    GenerateResource=false\r\n1>                    ManifestResourceName=ResourceEditor.obj.Debug.netcoreapp3._0.ResourceEditor.g.resources\r\n1>                    OriginalItemSpec=obj\\Debug\\netcoreapp3.0\\ResourceEditor.g.resources\r\n1>                    OutputResource=obj\\Debug\\netcoreapp3.0\\ResourceEditor.g.resources\r\n1>                    TargetPath=obj\\Debug\\netcoreapp3.0\\ResourceEditor.g.resources\r\n1>                    Type=Resx\r\n1>                    WithCulture=false\r\n1>  Done executing task \"CreateCSharpManifestResourceName\".\r\n\r\n```\r\n\r\n",
        "createdAt": "2019-10-30T17:09:01Z",
        "updatedAt": "2019-10-30T17:09:01Z",
        "author": {
          "login": "tarekgh"
        }
      },
      {
        "body": "@BenVillalobos has this been addressed by your changes already?",
        "createdAt": "2019-10-30T18:53:00Z",
        "updatedAt": "2019-10-30T18:53:00Z",
        "author": {
          "login": "livarcocc"
        }
      },
      {
        "body": "@LokiMidgard We're currently sorting this out. As a temporary solution for this issue you can manually opt out of the DependentUpon convention. You can do this by defining `<EmbeddedResourceUseDependentUponConvention>` as `false` for your project.\r\n\r\nBe aware that you may have to manually set `<DependentUpon>` for specific resource files that relied on the convention. If you do, set the `DependentUpon` value to the file it depends on. The convention would typically do: `Test.resx` depends on `Test.cs`\r\n",
        "createdAt": "2019-11-11T20:42:50Z",
        "updatedAt": "2019-11-11T20:42:50Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "Thank you.\r\n\r\nWe currently edit the generated file. And need to reedit it when we make a change to the resource file.\r\n\r\nI think for now thats good enogh. This way we will not foget to change it back after it is fixed.",
        "createdAt": "2019-11-12T07:43:29Z",
        "updatedAt": "2019-11-12T07:43:29Z",
        "author": {
          "login": "LokiMidgard"
        }
      },
      {
        "body": "I can't repro, looks like this is no longer an issue. Closing, please reopen if it is!",
        "createdAt": "2022-11-15T18:31:20Z",
        "updatedAt": "2022-11-15T18:31:46Z",
        "author": {
          "login": "benvillalobos"
        }
      }
    ]
  }
}