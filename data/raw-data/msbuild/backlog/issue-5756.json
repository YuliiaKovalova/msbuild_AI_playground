{
  "number": 5756,
  "title": "Change Waves Refactoring",
  "body": "<!-- This is a template that helps us provide quicker feedback. Please use any relevant sections and delete anything you don't need. -->\r\n\r\n### Issue Description\r\nChange Waves shipped with a few quirks. In rough order of importance:\r\n### To Do\r\n- [ ] Referencing `ChangeWaves` from traits produces `does not exist` errors, and when including it in the projects where it was previously unavailable, it produces the error `The type 'ChangeWaves' exists in both 'Microsoft.Build' .... and 'Microsoft.Build.Tasks.Core'`.\r\n - Now tracking here: https://github.com/dotnet/msbuild/issues/5903\r\n- [ ] The warnings that are thrown are currently thrown multiple times, rather than once per build.\r\n  - [ ] Warnings thrown from BuildManager.BeginBuild are not caught by VS at all.\r\n  - Related? https://github.com/dotnet/msbuild/issues/5056\r\n - Now being tracked here: https://github.com/dotnet/msbuild/issues/5902\r\n\r\n### Done\r\n- [x] Make ChangeWaves internal\r\n- [x] Update change wave docs (Tracking here: https://github.com/dotnet/msbuild/pull/5851)\r\n- [x] Assign a code to the warnings thrown by change waves.\r\n- [x] Throwing warnings is not correctly caught in build logs\r\n  - We believe this is an issue with the structured log viewer. Tracking here: https://github.com/KirillOsenkov/MSBuildStructuredLog/issues/399\r\n- [x] When testing change waves on existing functionality, there's a chance that a _new_ test will set the `MSBuildDisableFeaturesFromVersion` env var, and THEN an existing test runs (that is now conditioned on change waves), failing the existing test. This is worked around by calling `SetChangeWave(string.Empty)` on TestEnvironment's `Dispose` (or `Cleanup`) functions. We should call `BuildEnvironmentHelper.ResetInstance_ForUnitTestsOnly();` here as well.\r\n   - Fixed via https://github.com/dotnet/msbuild/pull/5755\r\n- [x] Convert change waves to use versions exclusively.\r\n- [x] Refer to https://github.com/dotnet/msbuild/pull/5710",
  "state": "CLOSED",
  "createdAt": "2020-09-25T06:44:47Z",
  "updatedAt": "2024-02-21T17:02:23Z",
  "closedAt": "2020-12-18T17:59:33Z",
  "author": {
    "login": "benvillalobos"
  },
  "labels": [
    "bug",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "benvillalobos"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": ">  Warnings thrown from BuildManager.BeginBuild do not show in Output window.\r\n\r\nThese warnings are not caught at all through VS. I tested this by capturing a binlog and replaying it with `-flp:v=diag` and `MSBuildDisableFeaturesFromVersion=16.5`. cmd line shows the proper warning, VS does not see this at all.",
        "createdAt": "2020-10-05T21:44:40Z",
        "updatedAt": "2020-10-05T21:44:40Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "> Referencing `ChangeWaves` from traits produces `does not exist` errors, and when including it in the projects where it was previously unavailable, it produces the error `The type 'ChangeWaves' exists in both 'Microsoft.Build' .... and 'Microsoft.Build.Tasks.Core'`.\r\n\r\nThis is an issue for developers that want set escape hatches and feature flags _based on_ a change wave, rather than placing the change wave check at the site of their feature, which I'm not entirely convinced is better. Unfortunately, devs don't have the choice and enabling that would be great.",
        "createdAt": "2020-10-05T21:56:04Z",
        "updatedAt": "2020-10-05T21:56:04Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "Could you perhaps also add some information on why \u201crisky features are developed under the same opt-out flag\u201d. \r\nThat confused me a bit, since if they are risky why not have it be opt-in until it is \u201csafe\u201d?",
        "createdAt": "2020-10-29T19:06:55Z",
        "updatedAt": "2020-10-29T19:06:55Z",
        "author": {
          "login": "japj"
        }
      },
      {
        "body": "@japj Unfortunately, some of what we work on are improvements that would never be considered safe because it may break some _very_ specific scenario. If there's something we think is worth the risk, whether it be for performance or functionality improvement, we found that Change Waves were a good middle ground between making necessary changes and warning customers of these changes.\r\n\r\nOpt-out is a better approach for us because we'd likely get limited feedback when a feature impacts customer builds. When a feature does impact a customer negatively, it's a quick switch to disable and allows time to adapt. The key aspect to Change Waves is that it smooths the transition for customers adapting to risky changes that the MSBuild team feels strongly enough to implement.",
        "createdAt": "2020-11-02T19:56:46Z",
        "updatedAt": "2020-11-02T19:56:46Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "This will be closed out when #5864 merges in, as the last two items have separate issues tracking them.",
        "createdAt": "2020-11-21T00:06:17Z",
        "updatedAt": "2020-11-21T00:06:17Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "Closed as of https://github.com/dotnet/msbuild/pull/5864.",
        "createdAt": "2020-12-18T17:59:29Z",
        "updatedAt": "2020-12-18T17:59:29Z",
        "author": {
          "login": "benvillalobos"
        }
      }
    ]
  }
}