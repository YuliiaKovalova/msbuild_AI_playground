{
  "number": 2008,
  "title": "Understanding Directory.Build.props",
  "body": "Looking at the [MSBuild 15.0 documentation](https://docs.microsoft.com/en-us/visualstudio/msbuild/what-s-new-in-msbuild-15-0) and interested in learning more about the following entry: \r\n\r\n> Directory.Build.props is a user-defined file that provides customizations to projects under a directory\r\n\r\nThis isn't very specific about what directories are considered for searching for a Directory.Build.props file.  Say for example I have the following directory layout:\r\n\r\n- `c:\\users\\jaredpar\\code\\test`\r\n    - `test.sln`\r\n    - `widget\\widget.csproj`\r\n\r\nAlso that `widget.csproj` is referenced in `test.sln`.  When I run `msbuild test.sln` and `widget.csproj` is built as a result, what directories are considered for finding `Directory.Build.props` and `Directory.Build.targets` files?  \r\n   \r\n",
  "state": "CLOSED",
  "createdAt": "2017-04-25T06:12:43Z",
  "updatedAt": "2024-02-21T17:19:40Z",
  "closedAt": "2017-04-25T16:01:01Z",
  "author": {
    "login": "jaredpar"
  },
  "labels": [
    "question",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "MSBuild walks the directory structure upwards from `$(MSBuildProjectFullPath)`, stopping at the first located file in each case. For your example:\r\n\r\n1. `c:\\users\\jaredpar\\code\\test\\widget`\r\n1. `c:\\users\\jaredpar\\code\\test`\r\n1. `c:\\users\\jaredpar\\code`\r\n1. `c:\\users\\jaredpar`\r\n1. `c:\\users`\r\n1. `c:\\`\r\n\r\nAs with most MSBuild behavior, the location of the solution file is irrelevant.",
        "createdAt": "2017-04-25T15:46:12Z",
        "updatedAt": "2017-04-25T15:46:12Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "That seems like it is introducing unnecessary fragility into my build environment.  Now the output, and possibly success or failure, of my build is dependent upon where on the machine a developer clones the repo.  Looking at a repo on Github is no longer enough to understand how a build works, have to consider every single directory structure the code is cloned into. \r\n\r\nIf there is a stray Directory.Build.props file in their home directory then builds will suddenly, and quite silently, start changing.  Will be quite difficult to track down.  \r\n\r\nThis can be done both by simple developer accident or by misunderstood design.  For the latter consider the act of including a .NET project via a submodule into your repo.  If the outer repo has a root Directory.Build.props then there's really no way to safely submodule in another repo.  Unless that repo has explicitly forbidden the use of any Directory.Build.props file.  \r\n\r\nConsider other tools which have a similar design of searching parent directories like editorconfig.  They have a mechanism to stop the madness.  Can put `root=true` to stop the searching.  That mean you can at least add an `.editorconfig` to the root of a repo, set `root=true` and regain the ability to understand how the repo functions.  \r\n\r\nIs there such a feature here?  Or do we just have to disable it entirely? \r\n",
        "createdAt": "2017-04-25T15:53:32Z",
        "updatedAt": "2017-04-25T15:53:32Z",
        "author": {
          "login": "jaredpar"
        }
      },
      {
        "body": "@jaredpar that's https://github.com/Microsoft/msbuild/issues/762; I copied your feedback over there.",
        "createdAt": "2017-04-25T16:01:01Z",
        "updatedAt": "2017-04-25T16:01:01Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@jaredpar I'm tracking this kind of feedback at #762.  The current feature is on or off and you cannot give it a directory to stop traversing up.  MSBuild will take the first one and give up and it would be up to you to import another one above it.  You can limit the search by adding a `Directory.Build.props` to your root folder.  If that project does not import anything else then it would assure your import graph to be what you expect.",
        "createdAt": "2017-04-25T16:01:31Z",
        "updatedAt": "2017-04-25T16:01:31Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "`Directory.Build.props` is now documented at https://docs.microsoft.com/en-us/visualstudio/msbuild/customize-your-build. Feedback is welcome!",
        "createdAt": "2017-06-26T18:44:47Z",
        "updatedAt": "2017-06-26T18:44:47Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald \r\n\r\n> Directory.Build.props is imported very early in Microsoft.Common.props, \r\n\r\nIs it imported before or after the 1.0 New SDK props? \r\n\r\nThat's fairly important as the 1.0 SDK overrides properties unconditionally. Hence if this happens before it's not useful in 1.0 SDK. ",
        "createdAt": "2017-06-26T21:28:39Z",
        "updatedAt": "2017-06-26T21:28:39Z",
        "author": {
          "login": "jaredpar"
        }
      },
      {
        "body": "@jaredpar More or less \"before\" -- the Sdk imports Common.props very early which imports D.B.props very early, so the unconditional overriding is indeed a problem there.",
        "createdAt": "2017-06-26T21:31:29Z",
        "updatedAt": "2017-06-26T21:31:29Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "What bits do I need in order to enable this feature? I add the file to my solution folder, i.e.\r\n\r\n```\r\nsrc\\**\\Some.Source\\\r\nsrc\\**\\Some.Tests\\\r\nMySolution.sln\r\nDirectory.Build.props\r\n```\r\n\r\nBut to no avail. Does not seem to work.\r\n\r\nThat or third party tooling does not quite know what to do with it, either.\r\n\r\nThat is, mine looks like:\r\n\r\n```Xml\r\n<Project>\r\n  <PropertyGroup>\r\n    <CodeGenerationRoslynPackagesVersion>0.4.49</CodeGenerationRoslynPackagesVersion>\r\n  </PropertyGroup>\r\n</Project>\r\n```\r\n\r\nBut I get messages like, ``Property 'CodeGenerationRoslynPackagesVersion' is not defined``.\r\n\r\nIs there anything else I need to do besides specify the file?",
        "createdAt": "2018-06-07T01:07:35Z",
        "updatedAt": "2018-06-07T01:07:35Z",
        "author": {
          "login": "mwpowellhtx"
        }
      },
      {
        "body": "Could we get a sample on that documentation page that shows how to discriminate around the project type?\r\n\r\nI'd like to setup my Directory.Build.props with default settings for my csproj/fsproj but I'm not sure how to figure that information from a msbuild file.",
        "createdAt": "2019-09-28T23:38:55Z",
        "updatedAt": "2019-09-28T23:38:55Z",
        "author": {
          "login": "smoothdeveloper"
        }
      },
      {
        "body": "@smoothdeveloper Yes, that's a good request. To answer quickly: compare `$(MSBuildProjectExtension)` against, for example, `\".csproj\"`.",
        "createdAt": "2019-09-30T14:39:26Z",
        "updatedAt": "2019-09-30T14:39:26Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald thanks a lot that does the trick!\r\n\r\n```xml\r\n    <PropertyGroup Condition=\"'$(MSBuildProjectExtension)' == '.fsproj'\">\r\n        ...\r\n```",
        "createdAt": "2019-10-06T10:45:28Z",
        "updatedAt": "2019-10-06T10:46:30Z",
        "author": {
          "login": "smoothdeveloper"
        }
      },
      {
        "body": "@rainersigwald I tried to use Directory.Build.props with .net framework project, but is did not work.\r\nIs it possible to use Directory.Build.props with .net framework? Or maybe I did not use it correctly.\r\nYou could refer to https://github.com/ChuckTest/ConcurrentTest/tree/test on branch test , I have tried to work with Directory.Build.props.",
        "createdAt": "2020-05-13T07:02:51Z",
        "updatedAt": "2020-05-13T07:02:51Z",
        "author": {
          "login": "chucklu"
        }
      },
      {
        "body": "@chucklu Yes, you can use `Directory.Build.props` with that kind of project. However, `Version` is a property that is used by the .NET Core SDK and isn't respected by the project you have there.",
        "createdAt": "2020-05-13T14:31:21Z",
        "updatedAt": "2020-05-13T14:31:21Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Thanks @rainersigwald, then which property I supposed to use for .net framework to control the version of the compiled assembly? Is there a documentation about the properties list can be used for .net framework or .net core?",
        "createdAt": "2020-05-13T14:39:16Z",
        "updatedAt": "2020-05-13T14:39:16Z",
        "author": {
          "login": "chucklu"
        }
      },
      {
        "body": "@chucklu there is no such property for projects that don't use the .NET Core SDK. Defining it as a property is a feature of that SDK.",
        "createdAt": "2020-05-14T11:50:56Z",
        "updatedAt": "2020-05-14T11:50:56Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}