{
  "number": 9501,
  "title": "ProjectImportedEventArgs missing from most projects",
  "body": "@tmat has sent me a binlog from \"17.9.0-preview-23570-02+bf9d6d46d\"\r\nD:\\Program Files\\Microsoft Visual Studio\\2022\\Preview\\MSBuild\\Current\\Bin\\amd64\\MSBuild.exe\r\n\r\nIt's missing ProjectImported events for all but a handful of projects:\r\n\r\nBuild.proj  id:51\r\nMicrosoft.CodeAnalysis.CSharp.Features.UnitTests.csproj net472 id:10601\r\nMicrosoft.CodeAnalysis.ExternalAccess.Copilot.csproj net472;net6.0 id:10501\r\nMicrosoft.CodeAnalysis.ExternalAccess.Copilot.csproj net472 id:10551\r\nRoslyn.sln.metaproj v4.0 id:101\r\nRoslyn.VisualStudio.Setup.csproj net472 id:2501\r\n\r\nPing me on teams and I can share the binlog internally.",
  "state": "CLOSED",
  "createdAt": "2023-12-06T00:36:58Z",
  "updatedAt": "2024-02-21T16:58:30Z",
  "closedAt": "2024-01-30T12:19:39Z",
  "author": {
    "login": "KirillOsenkov"
  },
  "labels": [
    "Area: Debuggability",
    "regression",
    "Area: Logging",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "AR-May"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "The binlog contains only about 1,200 import events, only for those 6 projects:\r\n\r\n![image](https://github.com/dotnet/msbuild/assets/679326/c0260375-7999-453b-a1c5-4ddfb251e428)\r\n\r\nCould it be that the ProjectImportedEventArgs are no longer sent across other node processes? Could this have regressed recently?",
        "createdAt": "2023-12-06T00:38:40Z",
        "updatedAt": "2023-12-06T00:38:40Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "Might the `MSBUILDLOGIMPORTS` env var be fiddled with in your env @tmat?",
        "createdAt": "2023-12-15T13:36:58Z",
        "updatedAt": "2023-12-15T13:36:58Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "The binlog should contain it if so?",
        "createdAt": "2023-12-15T16:02:46Z",
        "updatedAt": "2023-12-15T16:02:46Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "and some imports were logged",
        "createdAt": "2023-12-15T16:03:08Z",
        "updatedAt": "2023-12-15T16:03:08Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "> Might the `MSBUILDLOGIMPORTS` env var be fiddled with in your env @tmat?\r\n\r\nNot that I am aware of.",
        "createdAt": "2023-12-15T16:16:12Z",
        "updatedAt": "2023-12-15T16:16:12Z",
        "author": {
          "login": "tmat"
        }
      },
      {
        "body": "It was just a wild quick quess.\r\n\r\nFor some reason calls emiting `ProjectImportedEventArgs` are conddition via few various conditions - just about half of those check the trait that wraps that env var - so flipping it would filter only some. But unless the env var would be accessed as a property by the msbuild script it would not be dumped into binlog (the whole env is not dumped any more intentionally).\r\n\r\nAnyways - Alina is currently having few leads for next investigation steps, so please ignore my intervention here :-)\r\n\r\nUnless any of those turns promissing - then I suggest to quickly try to investigate if setting/unsetting repores the issue - as the env var is explicitly set by BinaryLogger - but just for current process - so that might answer why only the imports from inproc nodes are logged.",
        "createdAt": "2023-12-15T19:18:50Z",
        "updatedAt": "2023-12-15T19:24:31Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "No problem! I think we always log environment variables that start with MSBUILD, DOTNET and a third prefix that I don't remember.\r\n\r\nGood idea, if the other nodes don't set the env then it might not happen there! I think it's a regression but I might be wrong (if it's always been broken then I'll be very surprised about how come we've missed this all this time)",
        "createdAt": "2023-12-15T23:41:44Z",
        "updatedAt": "2023-12-15T23:41:44Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "Ah - didn't know about the logging of MSBUILD*,DOTNET* env vars - thanks for learning me something new today! :-)\r\n\r\nBuilding with `/m:1` leads to all project imports being logged.\r\nBuilding with `$env:MSBUILDNOINPROCNODE=1` leads to no project imports being logged\r\nOrdinary cases of building are somewhere in between (depending if/how much evaluations occured on extra nodes)\r\n\r\n<img width=\"611\" alt=\"image\" src=\"https://github.com/dotnet/msbuild/assets/3809076/68df11d6-8290-410e-b897-e215d3b083ae\">\r\n\r\nvs\r\n\r\n<img width=\"608\" alt=\"image\" src=\"https://github.com/dotnet/msbuild/assets/3809076/8ec18c45-4656-4e80-9e0d-013db9ee078d\">\r\n\r\n\r\n\r\n\r\nSo I believe the [`Trait`](https://github.com/dotnet/msbuild/blob/abc2f4620f6749289cafeed7c9a9a80eaeb38e28/src/Framework/Traits.cs#L211) is the culprit here.\r\n\r\nRegression or not - it's still worth fixing. I'd just like us to invest slightly more and introduce general way of communicating state (env, subscriptions, etc.) from main node to others - this way we wouldn't need to transmit (and ideally not even emit) events if there are no subscriber.\r\n\r\nAs a workaround - setting the trait globally (`SETX MSBUILDLOGIMPORTS \"1\"`) should do the trick (FYI @tmat)",
        "createdAt": "2023-12-16T17:16:37Z",
        "updatedAt": "2023-12-16T17:32:05Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "I'm not seeing ProjectImportedEventArgs in this list:\r\nhttps://github.com/dotnet/msbuild/pull/8917/files#diff-49f60fe36c5743a0285e9d27ce7c6e981d8dc73de8bfa23405a9fdbd2cf69eddR75\r\n\r\nCould it be that removing binary formatter impacted serialization of ProjectImportedEventArgs in node packet translator?\r\n\r\n@rokonec ",
        "createdAt": "2023-12-16T18:46:45Z",
        "updatedAt": "2023-12-16T18:46:45Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "As part of this issue let's verify that all node types mentioned here are being serialized properly:\r\nhttps://github.com/dotnet/msbuild/blob/abc2f4620f6749289cafeed7c9a9a80eaeb38e28/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs#L152C21-L152C21",
        "createdAt": "2023-12-16T18:51:52Z",
        "updatedAt": "2023-12-16T18:51:52Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "> As part of this issue let's verify that all node types mentioned here are being serialized properly: https://github.com/dotnet/msbuild/blob/abc2f4620f6749289cafeed7c9a9a80eaeb38e28/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs#L152C21-L152C21\r\n\r\nBtw. to make sure there are no BuildEventArgs left of off the roundtrip test (even in future) - we can easily enumerate all BuildEventArgs inheritors from the Microsoft.Build assembly. Similarly as we test the BuildException types serialization here: https://github.com/dotnet/msbuild/blob/main/src/Build.UnitTests/BackEnd/BinaryTranslator_Tests.cs#L247-L258",
        "createdAt": "2023-12-21T10:19:43Z",
        "updatedAt": "2023-12-21T10:19:43Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "Hey folks, any progress on this issue? A bit worried that we have incomplete information in the binlogs and it could be misleading and make investigations harder.",
        "createdAt": "2024-01-11T06:07:14Z",
        "updatedAt": "2024-01-11T06:07:14Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "@AR-May is on it - just currently OOF this week",
        "createdAt": "2024-01-11T06:25:34Z",
        "updatedAt": "2024-01-11T06:25:34Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "ah ok, no rush",
        "createdAt": "2024-01-11T08:22:23Z",
        "updatedAt": "2024-01-11T08:22:23Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "Back to work, on it!",
        "createdAt": "2024-01-15T10:11:11Z",
        "updatedAt": "2024-01-15T10:11:11Z",
        "author": {
          "login": "AR-May"
        }
      },
      {
        "body": "> Ah - didn't know about the logging of MSBUILD*,DOTNET* env vars - thanks for learning me something new today! :-)\r\n> \r\n> Building with `/m:1` leads to all project imports being logged. Building with `$env:MSBUILDNOINPROCNODE=1` leads to no project imports being logged Ordinary cases of building are somewhere in between (depending if/how much evaluations occured on extra nodes)\r\n> \r\n> <img alt=\"image\" width=\"611\" src=\"https://private-user-images.githubusercontent.com/3809076/291007166-68df11d6-8290-410e-b897-e215d3b083ae.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MDUzOTk1MjYsIm5iZiI6MTcwNTM5OTIyNiwicGF0aCI6Ii8zODA5MDc2LzI5MTAwNzE2Ni02OGRmMTFkNi04MjkwLTQxMGUtYjg5Ny1lMjE1ZDNiMDgzYWUucG5nP1gtQW16LUFsZ29yaXRobT1BV1M0LUhNQUMtU0hBMjU2JlgtQW16LUNyZWRlbnRpYWw9QUtJQVZDT0RZTFNBNTNQUUs0WkElMkYyMDI0MDExNiUyRnVzLWVhc3QtMSUyRnMzJTJGYXdzNF9yZXF1ZXN0JlgtQW16LURhdGU9MjAyNDAxMTZUMTAwMDI2WiZYLUFtei1FeHBpcmVzPTMwMCZYLUFtei1TaWduYXR1cmU9ZmI5N2ZhZmEyMDQ5MTMxNTAyYzMzZDEyYjdmODM5NjllYjRhZjkxZWM5NGI1ODg5ZTI5YThhYTM1M2IwNjA0YSZYLUFtei1TaWduZWRIZWFkZXJzPWhvc3QmYWN0b3JfaWQ9MCZrZXlfaWQ9MCZyZXBvX2lkPTAifQ.4YLbqs8QUh1uouMC0cyK2UaHA8hxrwwul3e9PASQV1c\">\r\n> vs\r\n> \r\n> <img alt=\"image\" width=\"608\" src=\"https://private-user-images.githubusercontent.com/3809076/291007077-8ec18c45-4656-4e80-9e0d-013db9ee078d.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MDUzOTk1MjYsIm5iZiI6MTcwNTM5OTIyNiwicGF0aCI6Ii8zODA5MDc2LzI5MTAwNzA3Ny04ZWMxOGM0NS00NjU2LTRlODAtOWUwZC0wMTNkYjllZTA3OGQucG5nP1gtQW16LUFsZ29yaXRobT1BV1M0LUhNQUMtU0hBMjU2JlgtQW16LUNyZWRlbnRpYWw9QUtJQVZDT0RZTFNBNTNQUUs0WkElMkYyMDI0MDExNiUyRnVzLWVhc3QtMSUyRnMzJTJGYXdzNF9yZXF1ZXN0JlgtQW16LURhdGU9MjAyNDAxMTZUMTAwMDI2WiZYLUFtei1FeHBpcmVzPTMwMCZYLUFtei1TaWduYXR1cmU9YmQ3Y2I4NjNiYzVlZGM5MDBhOThlNTAwZDIyN2E5M2IyMTUwZWE4NmU2OTMyOGMwZjhkOTc4NzcwNjIwNTg2YSZYLUFtei1TaWduZWRIZWFkZXJzPWhvc3QmYWN0b3JfaWQ9MCZrZXlfaWQ9MCZyZXBvX2lkPTAifQ.0WjXmccI7aLyP3CDiRmryotelzr7uu5axh4QHEDl8Wc\">\r\n> So I believe the [`Trait`](https://github.com/dotnet/msbuild/blob/abc2f4620f6749289cafeed7c9a9a80eaeb38e28/src/Framework/Traits.cs#L211) is the culprit here.\r\n> \r\n> Regression or not - it's still worth fixing. I'd just like us to invest slightly more and introduce general way of communicating state (env, subscriptions, etc.) from main node to others - this way we wouldn't need to transmit (and ideally not even emit) events if there are no subscriber.\r\n> \r\n> As a workaround - setting the trait globally (`SETX MSBUILDLOGIMPORTS \"1\"`) should do the trick (FYI @tmat)\r\n\r\nI agree, I managed to reproduce and debug the issue and I also believe the `Traits` class poses a problem, moreover, there should be a problem with any behavior that is controlled via environment variable that goes to `Traits` class (which is a lot). What happens is that the msbuild nodes get the `Traits` class created during the msbuild node creation and it is filled according to the env. variables on the initial build. So, when the new build reuses the old nodes, the main node sends the new configuration, including the environment variables, the old msbuild node sets these variables, but the values in the `Traits` class are not updated accordingly. \r\n\r\nIn the case of this issue, the `MSBUILDLOGIMPORTS` variable gets the new value that is not propagated to `Traits`. ",
        "createdAt": "2024-01-16T10:17:43Z",
        "updatedAt": "2024-01-16T13:50:51Z",
        "author": {
          "login": "AR-May"
        }
      }
    ]
  }
}