{
  "number": 7927,
  "title": "SdkResolverService throws \"System.InvalidOperationException: Collection was modified\" occasionally",
  "body": "I'm occasionally seeing the following exception:\r\n\r\n```\r\nSystem.InvalidOperationException: Collection was modified; enumeration operation may not execute.\r\n   at System.Collections.Generic.List`1.Enumerator.MoveNextRare()\r\n   at Microsoft.Build.BackEnd.SdkResolution.SdkResolverService.GetResolvers(IList`1 resolversManifests, LoggingContext loggingContext, ElementLocation sdkReferenceLocation)\r\n   at Microsoft.Build.BackEnd.SdkResolution.SdkResolverService.ResolveSdkUsingResolversWithPatternsFirst(Int32 submissionId, SdkReference sdk, LoggingContext loggingContext, ElementLocation sdkReferenceLocation, String solutionPath, String projectPath, Boolean interactive, Boolean isRunningInVisualStudio)\r\n   at Microsoft.Build.BackEnd.SdkResolution.SdkResolverService.ResolveSdk(Int32 submissionId, SdkReference sdk, LoggingContext loggingContext, ElementLocation sdkReferenceLocation, String solutionPath, String projectPath, Boolean interactive, Boolean isRunningInVisualStudio)\r\n   at Microsoft.Build.BackEnd.SdkResolution.CachingSdkResolverService.<>n__0(Int32 submissionId, SdkReference sdk, LoggingContext loggingContext, ElementLocation sdkReferenceLocation, String solutionPath, String projectPath, Boolean interactive, Boolean isRunningInVisualStudio)\r\n   at Microsoft.Build.BackEnd.SdkResolution.CachingSdkResolverService.<>c__DisplayClass3_0.<ResolveSdk>b__2()\r\n   at System.Lazy`1.ViaFactory(LazyThreadSafetyMode mode)\r\n--- End of stack trace from previous location ---\r\n   at System.Lazy`1.CreateValue()\r\n   at Microsoft.Build.BackEnd.SdkResolution.CachingSdkResolverService.ResolveSdk(Int32 submissionId, SdkReference sdk, LoggingContext loggingContext, ElementLocation sdkReferenceLocation, String solutionPath, String projectPath, Boolean interactive, Boolean isRunningInVisualStudio)\r\n   at Microsoft.Build.Evaluation.Evaluator`4.ExpandAndLoadImportsFromUnescapedImportExpressionConditioned(String directoryOfImportingFile, ProjectImportElement importElement, List`1& projects, SdkResult& sdkResult, Boolean throwOnFileNotExistsError)\r\n   at Microsoft.Build.Evaluation.Evaluator`4.ExpandAndLoadImports(String directoryOfImportingFile, ProjectImportElement importElement, SdkResult& sdkResult)\r\n   at Microsoft.Build.Evaluation.Evaluator`4.EvaluateImportElement(String directoryOfImportingFile, ProjectImportElement importElement)\r\n   at Microsoft.Build.Evaluation.Evaluator`4.PerformDepthFirstPass(ProjectRootElement currentProjectOrImport)\r\n   at Microsoft.Build.Evaluation.Evaluator`4.EvaluateImportElement(String directoryOfImportingFile, ProjectImportElement importElement)\r\n   at Microsoft.Build.Evaluation.Evaluator`4.PerformDepthFirstPass(ProjectRootElement currentProjectOrImport)\r\n   at Microsoft.Build.Evaluation.Evaluator`4.Evaluate()\r\n   at Microsoft.Build.Evaluation.Project.ProjectImpl.Reevaluate(ILoggingService loggingServiceForEvaluation, ProjectLoadSettings loadSettings, EvaluationContext evaluationContext)\r\n   at Microsoft.Build.Evaluation.Project.ProjectImpl.ReevaluateIfNecessary(ILoggingService loggingServiceForEvaluation, ProjectLoadSettings loadSettings, EvaluationContext evaluationContext)\r\n   at Microsoft.Build.Evaluation.Project.ProjectImpl.ReevaluateIfNecessary(ILoggingService loggingServiceForEvaluation, EvaluationContext evaluationContext)\r\n   at Microsoft.Build.Evaluation.Project.ProjectImpl.ReevaluateIfNecessary(EvaluationContext evaluationContext)\r\n   at Microsoft.Build.Evaluation.Project.ProjectImpl.Initialize(IDictionary`2 globalProperties, String toolsVersion, String subToolsetVersion, ProjectLoadSettings loadSettings, EvaluationContext evaluationContext)\r\n   at Microsoft.Build.Evaluation.Project..ctor(ProjectRootElement xml, IDictionary`2 globalProperties, String toolsVersion, String subToolsetVersion, ProjectCollection projectCollection, ProjectLoadSettings loadSettings, EvaluationContext evaluationContext, IDirectoryCacheFactory directoryCacheFactory)\r\n   at Microsoft.Build.Evaluation.Project.FromProjectRootElement(ProjectRootElement rootElement, ProjectOptions options)\r\n```\r\n\r\nSeems like there is a race condition in `SdkResolverService`.\r\n\r\nMSBuild version: 17.4.0-preview-22416-02 (pretty close to head of main as of this writing)",
  "state": "CLOSED",
  "createdAt": "2022-08-31T05:01:48Z",
  "updatedAt": "2025-03-20T14:56:29Z",
  "closedAt": "2025-03-20T14:56:29Z",
  "author": {
    "login": "dfederm"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "bug",
    "backlog",
    "triaged"
  ],
  "comments": {
    "nodes": [
      {
        "body": "FYI @dsplaisted ",
        "createdAt": "2022-08-31T05:02:20Z",
        "author": {
          "login": "dfederm"
        }
      },
      {
        "body": "My guess based on inspection the code is that this is the race:\r\n\r\n1. Multiple threads get to `ResolveSdkUsingResolversWithPatternsFirst` at the same time.\r\n2. Both thread 1 and thread 2 see `_generalResolversManifestsRegistry` is null and enter `RegisterResolversManifests`\r\n3. Thread 1 populates `_generalResolversManifestsRegistry` inside `RegisterResolversManifests`. Note that this is under a lock.\r\n4. Thread 1 returns from `RegisterResolversManifests`\r\n5. Thread 2 obtains the lock and creates `_generalResolversManifestsRegistry` again and starts to add to it.\r\n6. Thread 1 enteres the 2nd `GetResolvers` call which passes `_generalResolversManifestsRegistry`. Note! This is not under a lock!\r\n7. Thread 1 in `GetResolvers` starts to iterate the list passed in (`_generalResolversManifestsRegistry`)\r\n8. Thread 2 adds to `_generalResolversManifestsRegistry`\r\n9. Thread 1 continues to iterate the original `_generalResolversManifestsRegistry` and throws.\r\n\r\nSo ultimately, the bug is that `_generalResolversManifestsRegistry` is only locked when writing, but not when reading.",
        "createdAt": "2022-08-31T05:11:21Z",
        "author": {
          "login": "dfederm"
        }
      },
      {
        "body": "Code with the bug was introduced in #7597 by @AR-May ",
        "createdAt": "2022-08-31T05:14:01Z",
        "author": {
          "login": "dfederm"
        }
      },
      {
        "body": "@dfederm thank you for reporting the bug and for analysis. The scenario above should not be possible. The `_generalResolversManifestsRegistry ` is double-checked on creation: the `RegisterResolversManifests` has a check after a lock to prevent the second creation. So, thread 2 should just return from the function without rewriting the collection. After creation this collection was not supposed to be modified, so I thought it should be ok not to lock it on reading, since it happens only after a creation. I would dig into this.",
        "createdAt": "2022-08-31T10:35:40Z",
        "author": {
          "login": "AR-May"
        }
      },
      {
        "body": "I saw this on MSBuild version = \"17.8.3+195e7f5a3\" today\r\n\r\n```\r\nerror MSB4014: The build stopped unexpectedly because of an internal failure.\r\nSystem.InvalidOperationException: Collection was modified; enumeration operation may not execute.\r\n   at System.ThrowHelper.ThrowInvalidOperationException(ExceptionResource resource)\r\n   at System.Collections.Generic.List`1.Enumerator.MoveNextRare()\r\n   at Microsoft.Build.BackEnd.SdkResolution.SdkResolverService.ResolveSdkUsingResolversWithPatternsFirst(Int32 submissionId, SdkReference sdk, LoggingContext loggingContext, ElementLocation sdkReferenceLocation, String solutionPath, String projectPath, Boolean interactive, Boolean isRunningInVisualStudio, Boolean failOnUnresolvedSdk)\r\n   at Microsoft.Build.BackEnd.SdkResolution.SdkResolverService.ResolveSdk(Int32 submissionId, SdkReference sdk, LoggingContext loggingContext, ElementLocation sdkReferenceLocation, String solutionPath, String projectPath, Boolean interactive, Boolean isRunningInVisualStudio, Boolean failOnUnresolvedSdk)\r\n   at Microsoft.Build.BackEnd.SdkResolution.CachingSdkResolverService.<>c__DisplayClass3_0.<ResolveSdk>b__2()\r\n   at System.Lazy`1.CreateValue()\r\n   at System.Lazy`1.LazyInitValue()\r\n   at Microsoft.Build.BackEnd.SdkResolution.CachingSdkResolverService.ResolveSdk(Int32 submissionId, SdkReference sdk, LoggingContext loggingContext, ElementLocation sdkReferenceLocation, String solutionPath, String projectPath, Boolean interactive, Boolean isRunningInVisualStudio, Boolean failOnUnresolvedSdk)\r\n   at Microsoft.Build.BackEnd.SdkResolution.MainNodeSdkResolverService.PacketReceived(Int32 node, INodePacket packet)\r\n```\r\n\r\nand\r\n\r\n```\r\nerror MSB4014: The build stopped unexpectedly because of an internal failure.\r\nSystem.InvalidOperationException: Collection was modified; enumeration operation may not execute.\r\n   at System.ThrowHelper.ThrowInvalidOperationException(ExceptionResource resource)\r\n   at System.Collections.Generic.List`1.Enumerator.MoveNextRare()\r\n   at Microsoft.Build.BackEnd.SdkResolution.SdkResolverService.ResolveSdkUsingResolversWithPatternsFirst(Int32 submissionId, SdkReference sdk, LoggingContext loggingContext, ElementLocation sdkReferenceLocation, String solutionPath, String projectPath, Boolean interactive, Boolean isRunningInVisualStudio, Boolean failOnUnresolvedSdk)\r\n   at Microsoft.Build.BackEnd.SdkResolution.SdkResolverService.ResolveSdk(Int32 submissionId, SdkReference sdk, LoggingContext loggingContext, ElementLocation sdkReferenceLocation, String solutionPath, String projectPath, Boolean interactive, Boolean isRunningInVisualStudio, Boolean failOnUnresolvedSdk)\r\n   at Microsoft.Build.BackEnd.SdkResolution.CachingSdkResolverService.<>c__DisplayClass3_0.<ResolveSdk>b__2()\r\n   at System.Lazy`1.CreateValue()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Lazy`1.get_Value()\r\n   at Microsoft.Build.BackEnd.SdkResolution.CachingSdkResolverService.ResolveSdk(Int32 submissionId, SdkReference sdk, LoggingContext loggingContext, ElementLocation sdkReferenceLocation, String solutionPath, String projectPath, Boolean interactive, Boolean isRunningInVisualStudio, Boolean failOnUnresolvedSdk)\r\n   at Microsoft.Build.BackEnd.SdkResolution.MainNodeSdkResolverService.PacketReceived(Int32 node, INodePacket packet)\r\n   at System.Lazy`1.get_Value()\r\n   at Microsoft.Build.BackEnd.SdkResolution.CachingSdkResolverService.ResolveSdk(Int32 submissionId, SdkReference sdk, LoggingContext loggingContext, ElementLocation sdkReferenceLocation, String solutionPath, String projectPath, Boolean interactive, Boolean isRunningInVisualStudio, Boolean failOnUnresolvedSdk)\r\n   at Microsoft.Build.BackEnd.SdkResolution.MainNodeSdkResolverService.PacketReceived(Int32 node, INodePacket packet)\r\n```",
        "createdAt": "2024-02-29T09:52:03Z",
        "author": {
          "login": "japj"
        }
      },
      {
        "body": "From the source code, it looks like this could happen:\r\n\r\n1. on thread A, ResolveSdkUsingResolversWithPatternsFirst checks_generalResolversManifestsRegistry == null, gets true, and calls RegisterResolversManifests\r\n2. on thread A, RegisterResolversManifests locks _lockObject\r\n3. on thread A, RegisterResolversManifests checks _generalResolversManifestsRegistry != null, gets false, and proceeds\r\n4. on thread A, RegisterResolversManifests does other stuff and then assigns _generalResolversManifestsRegistry = new List<SdkResolverManifest>();\r\n5. on thread B, ResolveSdkUsingResolversWithPatternsFirst checks_generalResolversManifestsRegistry == null, and does not call RegisterResolversManifests, and does not lock _lockObject\r\n6. on thread B, ResolveSdkUsingResolversWithPatternsFirst does other stuff and then calls GetResolvers(_generalResolversManifestsRegistry, loggingContext, sdkReferenceLocation)\r\n7. on thread B, GetResolvers enters the foreach (var resolverManifest in resolversManifests) loop and gets an enumerator\r\n8. on thread A, RegisterResolversManifests calls _generalResolversManifestsRegistry.Add(manifest), which invalidates the enumerator\r\n9. on thread B, GetResolvers attempts to use the enumerator, which is now invalid and throws\r\n\r\nIn this scenario, the problem is that, although RegisterResolversManifests locks _lockObject to prevent other threads from initializing the manifest registries in parallel, it assigns the list to _generalResolversManifestsRegistry before it has finished adding the manifests to it. Other threads can then read the list reference from _generalResolversManifestsRegistry, assume that the list will no longer be modified, and attempt to enumerate it.  To fix this, RegisterResolversManifests should store the lists to local variables first, populate them there, and assign to fields only just before unlocking _lockObject.  I'm not sure whether these assignments would need to be `volatile` according to the memory model.",
        "createdAt": "2024-03-01T13:27:20Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "just a fyi, I ran into this again on a build today",
        "createdAt": "2024-04-10T11:37:46Z",
        "author": {
          "login": "japj"
        }
      },
      {
        "body": "we have seen this issue a few times as well in our builds",
        "createdAt": "2024-08-02T13:41:18Z",
        "author": {
          "login": "MaxClaessen"
        }
      },
      {
        "body": "I can confirm this problem still occurs with MSBuild version \"17.10.4+10fbfbf2e\"",
        "createdAt": "2024-09-30T13:51:42Z",
        "author": {
          "login": "jeroenjanssen-cpp"
        }
      },
      {
        "body": "I am also having this issue on 17.12.12+57101\n```\nC:\\cagnt03\\_work\\25\\s\\Directory.Build.props(18,9): error MSB4014: The build stopped unexpectedly because of an internal failure.\nSystem.InvalidOperationException: Collection was modified; enumeration operation may not execute.\n   at System.ThrowHelper.ThrowInvalidOperationException(ExceptionResource resource)\n   at System.Collections.Generic.List`1.Enumerator.MoveNextRare()\n   at Microsoft.Build.BackEnd.SdkResolution.SdkResolverService.GetResolvers(IList`1 resolversManifests, LoggingContext loggingContext, ElementLocation sdkReferenceLocation)\n   at Microsoft.Build.BackEnd.SdkResolution.SdkResolverService.ResolveSdkUsingResolversWithPatternsFirst(Int32 submissionId, SdkReference sdk, LoggingContext loggingContext, ElementLocation sdkReferenceLocation, String solutionPath, String projectPath, Boolean interactive, Boolean isRunningInVisualStudio, Boolean failOnUnresolvedSdk)\n   at Microsoft.Build.BackEnd.SdkResolution.CachingSdkResolverService.<>c__DisplayClass3_0.<ResolveSdk>b__2()\n   at System.Lazy`1.CreateValue()\n   at System.Lazy`1.LazyInitValue()\n   at Microsoft.Build.BackEnd.SdkResolution.CachingSdkResolverService.ResolveSdk(Int32 submissionId, SdkReference sdk, LoggingContext loggingContext, ElementLocation sdkReferenceLocation, String solutionPath, String projectPath, Boolean interactive, Boolean isRunningInVisualStudio, Boolean failOnUnresolvedSdk)\n   at Microsoft.Build.BackEnd.SdkResolution.MainNodeSdkResolverService.PacketReceived(Int32 node, INodePacket packet)\n```",
        "createdAt": "2025-03-20T12:00:35Z",
        "author": {
          "login": "BenjaminBrienen"
        }
      },
      {
        "body": "Closing as fixed in MSBuild 17.14, which will release in May 2025. We'll discuss backporting to older but still-supported MSBuild versions internally and make decisions based on cost+impact.",
        "createdAt": "2025-03-20T14:56:25Z",
        "author": {
          "login": "baronfel"
        }
      }
    ]
  }
}