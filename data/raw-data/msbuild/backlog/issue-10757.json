{
  "number": 10757,
  "title": "Integrate Microsoft.Extensions.Logging ILogger with MSBuild's logging abstractions",
  "body": "> Ok, thanks - that makes sense. Crazy that this was working for so long. Not sure what broke it, but clear I was depending on something I should not.\r\n> \r\n> Separately, there is basically no bridge to Microsoft DI, which makes writing MSBuild tasks that reference transitive projects difficult - so it's hard to modularize MSBuild. It turns out Coverlet uses Serilog MSBuildSink, but nothing exists for Microsoft.Extensions.Logging. I wrote a dumb one here : https://github.com/fluentmigrator/fluentmigrator/blob/main/src/FluentMigrator.MSBuild/MicrosoftBuildLogger.cs\r\n\r\nfrom @jzabroski in https://github.com/dotnet/msbuild/issues/10756\r\n\r\nThis is a recurring problem. The [SDK Containers](https://github.com/dotnet/sdk/blob/116fe7549a8f7f2417bb19fcb620874b7155ced8/src/Containers/Microsoft.NET.Build.Containers/Logging/MSBuildLogger.cs) have a simple version of an ILogger<->MEL.ILogger mapping, the SBOM targets do as well, and a number of MSBuild integrations I've written in the past for my own tools (Ionide/FSAutoComplete, Ionide/Proj-Info, etc) all have separate implementations.\r\n\r\nWe should develop and ship a 'blessed' ILogger implementation that interops with MEL.ILogger, and it should be able to handle MSBuild ILogger specific concepts like \r\n* codes\r\n* line numbers\r\n* file paths\r\n",
  "state": "OPEN",
  "createdAt": "2024-10-04T15:11:04Z",
  "updatedAt": "2024-10-10T15:56:55Z",
  "closedAt": null,
  "author": {
    "login": "baronfel"
  },
  "labels": [
    "backlog",
    "needs-design",
    "Area: Logging",
    "triaged",
    "gathering-feedback"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Looks like there are several copies of `Microsoft.Extensions.Logging` DLLs in VS already; I'd want to be careful to make sure that we don't add a \"must match\" constraint between MSBuild and VS. Otherwise I'd be ok adding this dependency.",
        "createdAt": "2024-10-04T15:20:56Z",
        "updatedAt": "2024-10-04T15:20:56Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I think we'd only need a dependency on the abstractions assembly, right? That might make navigating the dependency a bit easier. ",
        "createdAt": "2024-10-04T15:49:26Z",
        "updatedAt": "2024-10-04T15:49:26Z",
        "author": {
          "login": "baronfel"
        }
      },
      {
        "body": "@teo-tsirpanis  - Based on our chat yesterday, tagging you here if you wanted to follow/subscribe",
        "createdAt": "2024-10-04T15:58:04Z",
        "updatedAt": "2024-10-04T15:58:04Z",
        "author": {
          "login": "jzabroski"
        }
      },
      {
        "body": "> MSBuild ILogger specific concepts like\r\n\r\nI took a look yesterday at `Microsofts.Extensions.Logging` and there doesn't seem to be a way to arbitrarily extend log messages, in contrast with Serilog.",
        "createdAt": "2024-10-04T16:01:59Z",
        "updatedAt": "2024-10-04T16:01:59Z",
        "author": {
          "login": "teo-tsirpanis"
        }
      },
      {
        "body": "I've seen this handled a few different ways - mostly either by the State<T> features in MEL to encode the code/line/file information, or by specific named formatting parameters on the message format (which can be pulled out of the args). I think this is something of a weakness for MEL and MSBuild logging generally, and we might need something more like Serilog's Message templates to provide some of this context. ",
        "createdAt": "2024-10-04T16:09:07Z",
        "updatedAt": "2024-10-04T16:09:07Z",
        "author": {
          "login": "baronfel"
        }
      },
      {
        "body": "I mean, yes, I wish Serilog _was_ Microsoft.Extensions.Logging. MEL is meh.  \ud83e\uddba Hum...Christmas \ud83c\udf84 is around the corner. \ud83e\uddba \r\n\r\nWe use Serilog and provider our own ILog and ILoggingService abstractions where I work and those just call out to Serilog, which calls out to DataDog primarily.  ILog = short and sweet type name.  ILoggingService = tool to initialize logging, which is required for things like truly modular PowerShell modules written in C#, where you cannot guarantee the logging configuration is loaded on first call to ILog.\r\n\r\n",
        "createdAt": "2024-10-04T16:16:47Z",
        "updatedAt": "2024-10-04T16:16:47Z",
        "author": {
          "login": "jzabroski"
        }
      }
    ]
  }
}