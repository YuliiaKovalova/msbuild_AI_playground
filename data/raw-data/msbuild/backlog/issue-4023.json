{
  "number": 4023,
  "title": "CoreCompile incrementality breaks on parallel builds with inconsistent path casing on case-insensitive file systems",
  "body": "Discovered this while building a large internal repo and seeing ```CoreCompile``` execute at seemingly random on incremental parallel builds with zero changes, making build times range from anywhere between 20 seconds and 3 minutes.\r\n\r\n### Steps to reproduce\r\n\r\nMinimal repro: [compile-repro.zip](https://github.com/Microsoft/msbuild/files/2700813/compile-repro.zip)\r\n\r\n\r\n\r\n\r\nBefore the ```CoreCompile``` task is executed, all of the inputs are hashed via the ```Hash``` task and stored in a ```CoreCompileInputs.cache``` file. On an incremental build, the current hash is compared to the cached hash, and if matching, compilation is skipped.\r\n\r\nHowever if inputs are referenced with inconsistent casing, during a multi-proc build one of these casings will \"win\" over the others and be used for the remainder of the build graph. The ```Hash``` task will then produce a different hash although nothing has changed. This triggers recompilation for all dependees using a different casing whenever a new casing \"wins\".\r\n\r\nConsider the following build graph:\r\n```\r\n  ClassLibrary1\r\n   /    |    \\\r\nFoo     |     Bar\r\n   \\    |    /\r\n       Baz\r\n```\r\nAnd the paths specified in each project's items:\r\n\r\n```ClassLibrary1.csproj```:\r\n```csproj\r\n<ProjectReference Include=\"..\\baz\\Baz.csproj\" />\r\n<ProjectReference Include=\"..\\Foo\\Foo.csproj\" />\r\n<ProjectReference Include=\"..\\Bar\\Bar.csproj\" />\r\n```\r\n\r\n```Foo.csproj``` and ```Bar.csproj```:\r\n```csproj\r\n<ProjectReference Include=\"..\\Baz\\Baz.csproj\" />\r\n```\r\n\r\nIf ```-> Foo -> Baz``` or ```-> Bar -> Baz``` build first, ```Baz\\bin\\Debug\\net472\\Baz.dll``` will be the path passed to ```CoreCompile```.\r\n\r\nHowever if ```-> Baz``` builds first,  ```baz\\bin\\Debug\\net472\\Baz.dll``` will be used, generating a different hash and triggering recompilation, even though this resolves to the same path in a case-insensitive file system.\r\n\r\nThe included repro isn't large enough for there to be enough variance for this to pop up with ```/m``` (```-> Baz``` will always finish first), but you can simulate this easily.\r\n\r\nCommand line\r\n```\r\nmsbuild /t:restore ClassLibrary1\\ClassLibrary1.csproj\r\nmsbuild ClassLibrary1\\ClassLibrary1.csproj\r\nmsbuild Foo\\Foo.csproj\r\nmsbuild Bar\\Bar.csproj\r\nmsbuild ClassLibrary1\\ClassLibrary1.csproj\r\n```\r\n\r\nAnd watch as each of these builds recompile due to the different casings of ```Baz``` passed to ```Hash```. The last command will actually end up recompiling the entire graph, which shows how bad the worst case scenario is in a large repo.\r\n\r\nOn Linux where the file system is case-sensitive, this scenario behaves as expected. The build gives a warning that ```baz/Baz.csproj``` does not exist only for the project with the incorrect spelling and does not have a cascading effect on other projects in the graph. I'm guessing a ```FileExists()``` call catches this early.\r\n\r\n### Solutions\r\nNow the question is _where_ some change needs to be made. In general MSBuild tends to treat paths as case-insensitive when possible, such as cached directories and file exists checks. So the simplest solution may be adding a case-insensitive flag to the ```Hash``` task. Or syncing with the actual casing on-disk earlier in the build, although that seems potentially expensive.\r\n\r\n### Expected  behavior\r\nOn case-insensitive file systems, multi-proc incremental builds should not execute ```CoreCompile``` again on unchanged projects.\r\n\r\n### Actual behavior\r\nOn case-insensitive file systems, multi-proc incremental builds may execute ```CoreCompile``` on unchanged projects due to project build order and inconsistent path casing.\r\n\r\n\r\n### Environment data\r\n`msbuild /version` output: 16.0.256.5957\r\n\r\nOS info:\r\nWindows 10\r\nUbuntu 16.04\r\n",
  "state": "CLOSED",
  "createdAt": "2018-12-20T22:40:56Z",
  "updatedAt": "2024-02-21T17:10:00Z",
  "closedAt": "2019-01-09T23:37:47Z",
  "author": {
    "login": "ccastanedaucf"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": []
  }
}