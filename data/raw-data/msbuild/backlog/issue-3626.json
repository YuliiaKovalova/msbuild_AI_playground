{
  "number": 3626,
  "title": "Upgrading to MSBuild 15.8 causes incorrect TargetFramework property in ProjectReference builds",
  "body": "### Steps to reproduce\r\nYou'll need VS 2017 with C++ tools to do this.\r\n```\r\ngit clone https://github.com/aspnet/IISIntegration --branch namc/repro-netsdk1005\r\nbuild.cmd /bl /p:SkipTests=true\r\n```\r\n\r\n### Expected  behavior\r\nThis project builds just fine with MSBuild 15.7. It should continue to do so in 15.8.\r\n\r\nBuild log for compiling this project with the 2.1.302 SDK: \r\n[2_1_302.binlog.zip](https://github.com/Microsoft/msbuild/files/2295693/2_1_302.binlog.zip)\r\n\r\n### Actual behavior\r\nThe project fails to build\r\n\r\n> C:\\b\\w\\1973e9914e89f587.dotnet\\x64\\sdk\\2.1.400\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(198,5): error NETSDK1005: Assets file 'C:\\b\\w\\1973e9914e89f587\\modules\\IISIntegration\\src\\Microsoft.AspNetCore.Server.IIS\\obj\\project.assets.json' doesn't have a target for '.NETCoreApp,Version=v2.2'. Ensure that restore has run and that you have included 'netcoreapp2.2' in the TargetFrameworks for your project.\r\n\r\n\r\nBuild log for compiling this project with the 2.1.400 SDK: \r\n[2_1_400.binlog.zip](https://github.com/Microsoft/msbuild/files/2295685/2_1_400.binlog.zip)\r\n\r\nSome how a build of Microsoft.AspNetCore.Server.IIS.csproj is getting triggered with \"TargetFramework=netcoreapp2.2\" even though [this project only has `<TargetFramework>netstandard2.0</TargetFramework>`](https://github.com/aspnet/IISIntegration/blob/6440545c4a1a170de19ca80c1cf24ff346a005b1/src/Microsoft.AspNetCore.Server.IIS/Microsoft.AspNetCore.Server.IIS.csproj#L4).\r\n\r\n![image](https://user-images.githubusercontent.com/2696087/44243308-4b3ee180-a183-11e8-8da9-a9ab4367304b.png)\r\n\r\n\r\n### Environment data\r\n`dotnet msbuild -version`\r\n```\r\nMicrosoft (R) Build Engine version 15.8.166+gd4e8d81a88 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n15.8.166.59604\r\n```\r\nOS info: Windows 10\r\n\r\nIf applicable, version of the tool that invokes MSBuild (Visual Studio, dotnet CLI, etc): dotnet cli 2.1.400\r\n\r\ncc @rainersigwald @dsplaisted @nguerrera ",
  "state": "CLOSED",
  "createdAt": "2018-08-17T01:40:08Z",
  "updatedAt": "2024-02-21T17:11:49Z",
  "closedAt": "2018-10-01T15:10:30Z",
  "author": {
    "login": "natemcmaster"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "MSBuild 15.9"
  },
  "comments": {
    "nodes": [
      {
        "body": "@natemcmaster I get this before getting that far:\r\n\r\n```\r\nC:\\Users\\nicholg\\.dotnet\\buildtools\\korebuild\\2.2.0-preview1-20180816.6\\modules\\KoreBuild.Tasks\\module.targets(154,5): error : Could \r\nnot find an installation of Visual Studio that satisifies the specified requirements in D:\\Temp\\nate\\IISIntegration/korebuild.jsonExecute run.ps1 \r\ninstall vs to update or install the current vs installation. [C:\\Users\\nicholg\\.dotnet\\buildtools\\korebuild\\2.2.0-preview1-20180816.6\\KoreBuild.proj]\r\n```",
        "createdAt": "2018-08-17T01:49:47Z",
        "updatedAt": "2018-08-17T01:49:47Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "I have C++ workload in all VS 2017 instances on my box.",
        "createdAt": "2018-08-17T01:52:35Z",
        "updatedAt": "2018-08-17T01:52:35Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "From binlog and looking at sln, it appears to have something to do with a solution build order dependency specifed from StressTestWebSite -> Microsoft.AspNetCore.Server.IIS. This seems to generate a projectreference at a point in time that does not get the TFM negotiation. I don't know what changed around this.\r\n\r\n![image](https://user-images.githubusercontent.com/75470/44244026-bd64f580-a186-11e8-8aa9-ca0c44d0c3da.png)\r\n\r\n",
        "createdAt": "2018-08-17T02:00:53Z",
        "updatedAt": "2018-08-17T02:01:18Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "Possible related change: https://github.com/Microsoft/msbuild/pull/3315",
        "createdAt": "2018-08-17T02:10:42Z",
        "updatedAt": "2018-08-17T02:10:42Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "Here's a minimal repro of what I think is going on (haven't looked at the binlog above): \r\n[tf-repro.zip](https://github.com/Microsoft/msbuild/files/2296033/tf-repro.zip)\r\n\r\nWhen some project that is built with a `TargetFramework` global property has a solution dependency, the property is now passed along the synthetic p2p reference since there is no re-negoatiation of a compatible TF value.\r\n\r\nIn case of my repro, a simple multi-targeting lib with a build dependency on another single-targeting library will trigger it, since its inner builds will have a global `TargetFramework` property set that will be passed on over the synthetic p2p reference.",
        "createdAt": "2018-08-17T05:11:34Z",
        "updatedAt": "2018-08-17T05:12:50Z",
        "author": {
          "login": "dasMulli"
        }
      },
      {
        "body": "@dasMulli's analysis sounds right, which means that a workaround is available (as in https://github.com/Microsoft/msbuild/issues/2661#issuecomment-338808156).\r\n\r\nFor the repro project it can be applied as:\r\n\r\n```diff\r\ndiff --git a/tf-repro/LibMultiTargeting/LibMultiTargeting.csproj b/tf-repro/LibMultiTargeting/LibMultiTargeting.csproj\r\nindex f674eb3..3318e06 100644\r\n--- a/tf-repro/LibMultiTargeting/LibMultiTargeting.csproj\r\n+++ b/tf-repro/LibMultiTargeting/LibMultiTargeting.csproj\r\n@@ -2,6 +2,7 @@\r\n \r\n   <PropertyGroup>\r\n     <TargetFrameworks>netcoreapp2.1;netstandard2.0</TargetFrameworks>\r\n+    <AddSyntheticProjectReferencesForSolutionDependencies>false</AddSyntheticProjectReferencesForSolutionDependencies>\r\n   </PropertyGroup>\r\n \r\n </Project>\r\n```\r\n\r\nThe property can also be specified in a `Directory.Build.props`, and should not cause problems with earlier versions of MSBuild.",
        "createdAt": "2018-08-17T14:47:15Z",
        "updatedAt": "2018-08-17T14:47:15Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Thanks for taking a look so quickly. Can confirm that setting AddSyntheticProjectReferencesForSolutionDependencies=false works for my particular project. I'll add this so we can proceed with upgrading to the latest MSBuild.",
        "createdAt": "2018-08-17T16:44:06Z",
        "updatedAt": "2018-08-17T16:44:06Z",
        "author": {
          "login": "natemcmaster"
        }
      },
      {
        "body": "Fixed with #3628 for 15.9.",
        "createdAt": "2018-10-01T15:10:30Z",
        "updatedAt": "2018-10-01T15:10:30Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}