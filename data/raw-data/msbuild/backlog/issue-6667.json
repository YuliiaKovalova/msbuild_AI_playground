{
  "number": 6667,
  "title": "Consider caching toolset information in memory",
  "body": "### Issue Description\r\n\r\nFrom @rainersigwald:\r\nMSBuild stores \u201ctoolset\u201d information in the .exe.config, which is used to populate default properties and do some other configuration. Today we will read that once per `ProjectCollection` \u2014 we can consider caching it for process lifetime since \u201cmanually editing msbuild.exe.config\u201d is not a common/supported scenario and VS upgrades would always kill processes.\r\n\r\n### Steps to Reproduce\r\n\r\nCreate `ProjectCollection` and notice that several config files are read (machine.config, msbuild.exe.config).\r\n\r\n### Data\r\n\r\n| BytesRead(DuplicationFactor)  | FilePath  |\r\n|---|---|\r\n| 1,323,008(~80.8x) | C:\\Program Files\\Microsoft Visual Studio\\2022\\Preview\\MSBuild\\Current\\Bin\\amd64\\MSBuild.exe.config  | \r\n",
  "state": "CLOSED",
  "createdAt": "2021-07-13T16:12:27Z",
  "updatedAt": "2024-02-21T14:12:34Z",
  "closedAt": "2021-09-14T09:22:15Z",
  "author": {
    "login": "ladipro"
  },
  "labels": [
    "Area: Performance",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "rokonec"
      }
    ]
  },
  "milestone": {
    "title": "VS 17.0"
  },
  "comments": {
    "nodes": [
      {
        "body": "Caching the data would also affect reading machine.config which is read before the .exe.config.\r\n\r\n| BytesRead(DuplicationFactor)  | FilePath  |\r\n|---|---|\r\n| 1,966,080(~49.1x) | C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\Config\\machine.config | \r\n\r\n",
        "createdAt": "2021-07-14T07:43:09Z",
        "updatedAt": "2021-07-14T07:43:09Z",
        "author": {
          "login": "nohwnd"
        }
      },
      {
        "body": "@nohwnd isn't `machine.config` a CLR thing? I don't see how we could affect that.",
        "createdAt": "2021-07-14T11:03:57Z",
        "updatedAt": "2021-07-14T11:03:57Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Under devenv.exe I saw it loaded when the .exe.config was loaded by System.Configuration. So reducing the number of times the .exe.config gets loaded by ProjectCollection, will reduce the number of times machine.config gets loaded.",
        "createdAt": "2021-07-14T13:19:11Z",
        "updatedAt": "2021-07-14T13:19:11Z",
        "author": {
          "login": "nohwnd"
        }
      },
      {
        "body": "![MicrosoftTeams-image (3)](https://user-images.githubusercontent.com/5735905/125649091-3a01899e-5902-4e05-a293-89db1ac48fd8.png)\r\n\r\nThis is how it looks like in my toy project just calling `new ProjectCollection();`",
        "createdAt": "2021-07-14T15:29:33Z",
        "updatedAt": "2021-07-14T15:29:33Z",
        "author": {
          "login": "nohwnd"
        }
      },
      {
        "body": "Ah, interesting! We could probably avoid that by reading the configuration directly as XML rather than using `System.Configuration`; I don't _think_ we really care about the extra stuff that provides over straight XML (other than \"find the location of `MSBuild.exe.config`\" which is doable).",
        "createdAt": "2021-07-14T15:34:27Z",
        "updatedAt": "2021-07-14T15:34:27Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Is that worth doing if you will cache it per process? \r\n\r\nBut I don't see any other way to avoid it. The OpenMappedExeConfiguration offers user level, None is provided, and that load machine.config, the others just try to resolve other config paths. \r\n\r\n![MicrosoftTeams-image (2)](https://user-images.githubusercontent.com/5735905/125655932-32c0be63-d8b5-48ca-bda3-d45faf6ab3bc.png)\r\n",
        "createdAt": "2021-07-14T16:14:27Z",
        "updatedAt": "2021-07-14T16:14:27Z",
        "author": {
          "login": "nohwnd"
        }
      }
    ]
  }
}