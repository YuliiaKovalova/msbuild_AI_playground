{
  "number": 1228,
  "title": "preserveFormatting is not being honored for DeepCloned projects.",
  "body": "Run the application below passing to it the path to MSBuild.dll and a path to a csproj without the xml node and with an empty whitespace.\n\nBecause of the DeepClone below, when the project gets saved, a XML node is being added and the whitespace at the end of the csproj is being removed.\n\nIf we remove the call to DeepClone, this succeeds.\n\nThis is having an impact on Migrated projects though the CLI migrate command.\n\nProgram.cs\n\n```\nusing System;\nusing System.IO;\nusing Microsoft.Build.Construction;\nusing Microsoft.Build.Evaluation;\n\nnamespace ConsoleApplication\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            Environment.SetEnvironmentVariable(\"MSBUILD_EXE_PATH\", args[0]);\n\n            var templateProjPath = args[1];\n\n            var project = ProjectRootElement.Open(\n                templateProjPath,\n                ProjectCollection.GlobalProjectCollection,\n                preserveFormatting: true).DeepClone();\n\n            var outputProject = Path.Combine(AppContext.BaseDirectory, \"output.csproj\");\n\n            project.Save(outputProject);\n        }\n    }\n}\n```\n\nProject.json:\n\n```\n  {\n  \"version\": \"1.0.0-*\",\n  \"buildOptions\": {\n    \"debugType\": \"portable\",\n    \"emitEntryPoint\": true\n  },\n  \"dependencies\": {\n    \"Microsoft.Build\": \"15.1.319-preview5\",\n    \"Microsoft.Build.Runtime\": \"15.1.319-preview5\"\n  },\n  \"frameworks\": {\n    \"netcoreapp1.1\": {\n      \"dependencies\": {\n        \"Microsoft.NETCore.App\": {\n          \"type\": \"platform\",\n          \"version\": \"1.0.1\"\n        }\n      },\n      \"imports\": \"dnxcore50\"\n    }\n  }\n}\n```\n",
  "state": "CLOSED",
  "createdAt": "2016-10-21T06:22:06Z",
  "updatedAt": "2024-02-21T17:25:04Z",
  "closedAt": "2019-11-04T21:41:09Z",
  "author": {
    "login": "livarcocc"
  },
  "labels": [
    "Feature - Trivia (whitespace and comments)",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "jeffkl"
      }
    ]
  },
  "milestone": {
    "title": "Backlog"
  },
  "comments": {
    "nodes": [
      {
        "body": "cc @rainersigwald \n",
        "createdAt": "2016-10-21T06:23:35Z",
        "updatedAt": "2016-10-21T06:23:35Z",
        "author": {
          "login": "livarcocc"
        }
      },
      {
        "body": "This might be trickier than I thought.  In the first call `.Open()`, we're loading a file from disk and preserving the formatting.  In `DeepClone()`, we're recreating each element and attribute and copying it's value all in memory using typed objects. \n\nThink in order to clone a root element, we'll need to create a new `ProjectRootElement` instance by feeding the raw XML to the constructor wrapped by an `XmlReader`.  Does that sound correct @rainersigwald?  \n",
        "createdAt": "2016-10-24T21:48:56Z",
        "updatedAt": "2016-10-24T21:49:10Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "Uh, that's kind of awful. I'm not sure you can rely on the raw XML being correct--what if someone loads a project, manipulates it without saving, DeepClones it, and then tries to save--the saved copy should have the changes from before the clone.\n",
        "createdAt": "2016-10-24T21:56:44Z",
        "updatedAt": "2016-10-24T21:56:44Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "We've decided to hold off on fixing this for now and @livarcocc is going to investigate a workaround in `dotnet migrate`.  We will need to fix `DeepClone()` at some point though.\n",
        "createdAt": "2016-10-25T00:35:41Z",
        "updatedAt": "2016-10-25T00:35:41Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "@livarcocc from my testing, you don't need to call `DeepClone()`.  Opening the project gives you an in-memory instance of it which you can modify and save.  To start over again, you can open the project again, which worked for me.\n\n``` C#\nstatic void Main(string[] args)\n{\n    Environment.SetEnvironmentVariable(\"MSBUILD_EXE_PATH\", @\"D:\\MSBuild\\bin\\Bootstrap\\15.0\\Bin\\MSBuild.exe\");\n\n    const string projectPath = @\"D:\\Temp\\MSBuildTestApp\\PreserveFormatting\\test.proj\";\n\n    ProjectRootElement project1 = GetTemplate(projectPath);\n\n    project1.PropertyGroups.Last().AddProperty(\"Something\", \"else\");\n\n    project1.Save(\"test-saved1.proj\");\n\n    Console.WriteLine($\"Saved file to {project1.FullPath}\");\n\n    ProjectRootElement project2 = GetTemplate(projectPath);\n\n    project2.PropertyGroups.Last().AddProperty(\"AnotherProperty\", \"asdf\");\n\n    project2.Save(\"test-saved2.proj\");\n\n    Console.WriteLine($\"Saved file to {project2.FullPath}\");\n}\n\nstatic ProjectRootElement GetTemplate(string path, bool preserveFormatting = true)\n{\n    return ProjectRootElement.Open(path, ProjectCollection.GlobalProjectCollection, preserveFormatting: preserveFormatting);\n}\n```\n\nWhen I diff the projects, everything looks correct including the whitespace.\n",
        "createdAt": "2016-10-25T19:44:55Z",
        "updatedAt": "2016-10-25T19:44:55Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "Yes. I already tried these changes. However, I hit this: https://github.com/Microsoft/msbuild/issues/1242\n",
        "createdAt": "2016-10-25T20:07:23Z",
        "updatedAt": "2016-10-25T20:07:23Z",
        "author": {
          "login": "livarcocc"
        }
      },
      {
        "body": "Closing this as not high pri.",
        "createdAt": "2019-11-04T21:41:09Z",
        "updatedAt": "2019-11-04T21:41:09Z",
        "author": {
          "login": "livarcocc"
        }
      }
    ]
  }
}