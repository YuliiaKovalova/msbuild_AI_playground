{
  "number": 2779,
  "title": "upgraded to latest version",
  "body": "I'm getting a msbuild related error after upgrading to visual studio 2017:\r\n\r\nInvalid static method invocation syntax: \"[MSBuild]::IsRunningFromVisualStudio()\". Method '[MSBuild]::IsRunningFromVisualStudio' not found. Static method invocation should be of the form: $([FullTypeName]::Method()), e.g. $([System.IO.Path]::Combine('a', 'b'))\r\n\r\nPlease see this thread: https://github.com/Microsoft/msbuild/issues/2775\r\n\r\nIn the thread the proposed fix is to Upgrade to Microsoft.Build to v15.5.\r\n\r\nHow is msbuild upgraded to latest version?\r\n",
  "state": "CLOSED",
  "createdAt": "2017-12-06T12:17:26Z",
  "updatedAt": "2024-02-21T17:15:23Z",
  "closedAt": "2019-08-14T14:10:36Z",
  "author": {
    "login": "mmunchandersen"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Ran into the same issue. Had to switch from nuget.org to https://dotnet.myget.org/feed/msbuild/package/nuget/Microsoft.Build/15.5.179 and release an emergency upgrade for our product (Xenko).\r\n\r\nHowever, I would like to understand how are we supposed to handle MSBuild dependencies if it is not \"forward compatible\" when reading newer Visual Studio targets?\r\n\r\n* What should we assume in terms of upgrade, backward and forward compatibility for API and for Visual Studio MSBuild targets (that used new API in this case)?\r\n* Is it bad practice to embed/copy MSBuild assemblies?\r\n* Should we instead write an assembly resolver which would replicate some of the logic for locating the real MSBuild path?",
        "createdAt": "2017-12-09T10:27:11Z",
        "updatedAt": "2017-12-09T10:27:11Z",
        "author": {
          "login": "xen2"
        }
      },
      {
        "body": "Bump: Having the same forward-compat issues again: if our app is compiled against MSBuild 15.5.180, it can't load a project with latest VS installed. We have to upgrade it to MSBuild 15.6.82.\r\n\r\nWe get the following error: `Error: The \"FindDependenciesOfExternallyResolvedReferences\" parameter is not supported by the \"ResolveAssemblyReference\" task. Verify the parameter exists on the task, and it is a settable public instance property.`\r\n\r\nWe need guideline on how we are supposed to embed MSBuild to load/compile projects.",
        "createdAt": "2018-03-14T04:35:00Z",
        "updatedAt": "2018-03-14T04:35:15Z",
        "author": {
          "login": "xen2"
        }
      },
      {
        "body": "@xen2 Can you take a look at https://github.com/rainersigwald/visualstudio-docs/blob/msbuild-api/docs/msbuild/updating-an-existing-application.md? I'd love any feedback you have about it before I push it to docs.microsoft.com",
        "createdAt": "2018-03-14T15:00:03Z",
        "updatedAt": "2018-03-14T15:00:03Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald Thanks, exactly what I was looking for!\r\n(we were doing something similar manually, happy to switch to an official supported solution to solve this issue)",
        "createdAt": "2018-03-15T02:21:43Z",
        "updatedAt": "2018-03-15T02:21:43Z",
        "author": {
          "login": "xen2"
        }
      },
      {
        "body": "@rainersigwald Update: seems to work fine, doc was helpful!",
        "createdAt": "2018-03-16T02:22:03Z",
        "updatedAt": "2018-03-16T02:22:03Z",
        "author": {
          "login": "xen2"
        }
      }
    ]
  }
}