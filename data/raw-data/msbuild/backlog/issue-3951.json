{
  "number": 3951,
  "title": "Feature Request: AppDomain option for UsingTask",
  "body": "I'm developing a code generation tool. It's working in the form of a console app that's invoked via `Exec`. I explored making it a custom MSBuild task, but I'm running into the old issue where [Visual Studio locks the task assembly](https://stackoverflow.com/questions/3371545/visual-studio-2008-locks-custom-msbuild-task-assemblies), preventing the target project from being built more than once. There are some messy workarounds discussed in that Q&A, but I haven't had any success with them.\r\n\r\nMy understanding is that Visual Studio has an app domain that persists between builds. Either this is the [neutral app domain](https://docs.microsoft.com/en-us/dotnet/framework/app-domains/how-to-unload-an-application-domain) that cannot be unloaded, or some other app domain that either cannot be unloaded or just isn't. In any case, when `UsingTask` loads the task assembly, it gets loaded into that persistent app domain. The next time you try to build, `UsingTask` tries to copy the .dll again and finds it locked.\r\n\r\nI *think* the solution would be for `UsingTask` to have some option that tells it to load the task assembly in an unloadable app domain. Am I on the right track, and would this be feasible?",
  "state": "CLOSED",
  "createdAt": "2018-11-21T18:00:10Z",
  "updatedAt": "2024-02-21T17:10:24Z",
  "closedAt": "2018-11-25T17:06:52Z",
  "author": {
    "login": "kjkrum"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Discussion"
  },
  "comments": {
    "nodes": [
      {
        "body": "There are a couple of options to get isolation in your task:\r\n\r\n1. Since you're the task owner, you can inherit from [`AppDomainIsolatedTask `](https://docs.microsoft.com/en-us/dotnet/api/microsoft.build.utilities.appdomainisolatedtask?view=netframework-4.7.2).\r\n2. You can ask via the `UsingTask` to run in a separate _process_ by specifying [`TaskFactory=\"TaskHostFactory\"`](https://docs.microsoft.com/en-us/visualstudio/msbuild/how-to-configure-targets-and-tasks?view=vs-2017#task-factories).",
        "createdAt": "2018-11-21T18:28:30Z",
        "updatedAt": "2018-11-21T18:28:30Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald From a comment on the top rated answer on that Q&A:\r\n\r\n> I don't see how extending AppDomainIsolatedTask is supposed to work in this situation, since MSBuild has already loaded the assembly in the primary AppDomain by the time it tries to read the types.\r\n\r\nIn any case, extending `AppDomainIsolatedTask` was one of the first things I tried, and it did not solve the problem. But other attempted fixes may have interfered, so I'll try again with a fresh new project.",
        "createdAt": "2018-11-21T19:15:46Z",
        "updatedAt": "2018-11-21T19:15:46Z",
        "author": {
          "login": "kjkrum"
        }
      },
      {
        "body": "@rainersigwald Confirmed that extending `AppDomainIsolatedTask` does not solve the problem. However, there may be something else going on. If the target project (the one invoking the custom task) ever fails to build for any reason, then neither the target project nor the project containing the task can be rebuilt because the .dll is locked by a zombie MSBuild. Sometimes it's also locked by VS, seemingly at random.\r\n\r\nAlso, when I was working on this a couple days ago, I was invoking the custom task with the target `<Target Name=\"Whatever\" BeforeTargets=\"Build\">`. I've changed nothing, but now `Build` does not work - my task is simply not invoked. I have to use `PrepareForBuild`, which causes all sorts of other problems such as triggering code generation when the project is loaded.\r\n\r\nI'm starting to think that custom MSBuild tasks just plain don't work. People say Maven is complicated, but I've never spent more than a few hours getting it to do anything I want. I'm going on two weeks with  what should be a simple thing in MSBuild.",
        "createdAt": "2018-11-25T03:04:47Z",
        "updatedAt": "2018-11-25T03:08:56Z",
        "author": {
          "login": "kjkrum"
        }
      },
      {
        "body": "I found a blog post by a MS employee from another team explaining how to use custom MSBuild tasks. SO Q&As and the practically non-existent documentation led me down some wrong paths. I'm still running into problems with MSBuild semi-randomly not exiting and keeping the .dll locked, but I think it's just old bugs, not anything to do with app domains or node reuse as everyone seems to think, so I'm closing this issue.",
        "createdAt": "2018-11-25T17:06:21Z",
        "updatedAt": "2018-11-25T17:06:47Z",
        "author": {
          "login": "kjkrum"
        }
      },
      {
        "body": "@kjkrum Can you please elaborate a bit on your latest comment, or maybe just provide a link to the blog post you mentioned? I'm also having problems with Visual Studio holding a lock on my custom task dll and I'm tearing my hair out trying to coerce it into behaving.",
        "createdAt": "2018-12-03T19:22:55Z",
        "updatedAt": "2018-12-03T19:22:55Z",
        "author": {
          "login": "Inirit"
        }
      },
      {
        "body": "@Inirit I was referring to [Build Time Code Generation in MSBuild](https://mhut.ch/journal/2015/06/30/build-time-code-generation-in-msbuild). Unfortunately, this approach is plagued by [Visual Studio 2008 locks custom MSBuild Task assemblies](https://stackoverflow.com/questions/3371545/visual-studio-2008-locks-custom-msbuild-task-assemblies). It'll work for a few builds, or even all day, and then stop working seemingly at random, requiring restarting VS and killing rogue MSBuild processes after nearly every build. Maybe it works on Mono, but not on Windows.\r\n\r\nI ended up going back to generating code in a console app. [Bundling .NET build tools in NuGet](https://natemcmaster.com/blog/2017/11/11/build-tools-in-nuget/) shows how to tie it together. I've done this and it works very well. As far as I can tell, custom MSBuild tasks are completely unusable for this purpose due to bugs in MSBuild and/or Visual Studio.\r\n\r\nMy main reason for wanting to use an MSBuild task in the first place was nicer logging. I haven't tried it yet, but [MSBuild / Visual Studio aware error messages and message formats](https://blogs.msdn.microsoft.com/msbuild/2006/11/02/msbuild-visual-studio-aware-error-messages-and-message-formats/) might render that moot.",
        "createdAt": "2018-12-06T18:26:53Z",
        "updatedAt": "2018-12-06T18:31:57Z",
        "author": {
          "login": "kjkrum"
        }
      }
    ]
  }
}