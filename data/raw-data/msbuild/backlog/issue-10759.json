{
  "number": 10759,
  "title": "[Bug]: Insufficient permissions on %SystemRoot%\\TEMP results in nonspecific XamlTaskFactory error",
  "body": "### Issue Description\n\nIf permissions on `%SystemRoot%\\Temp` are revoked, invoking a custom Xaml task declared via `UsingTask` causes MSBuild to log a nonspecific error implicating the (perfectly valid) command invocation file/line location as its cause.\n\n### Steps to Reproduce\n\nI'm locally seeing this using VS and CUDA. I think the important thing is having a project with a Build Customisation set to some external thing which declares custom tasks via `UsingTask`, and then actually using those tasks in the project. In this instance it's `CudaCompile`.\r\n\r\n* In VS: File -> New -> Project -> CUDA 12.3 Runtime (or set up your test project with build customisation and task invocation)\r\n* Build the example project. It works fine.\r\n* Open cmd.exe as administrator and run `cacls C:\\Windows\\Temp /E /R everyone`\r\n* Rebuild the project (or Clean then Build).\r\n* Note the error described above.\r\n* Run `cacls C:\\Windows\\Temp /E /G everyone:F` in the admin cmd.exe\r\n* Rebuild again. Now it works again.\n\n### Expected Behavior\n\nIf `%SystemRoot%\\TEMP` doesn't have the requisite permissions, MSBuild should log an error saying so.\n\n### Actual Behavior\n\nMSBuild logs an error implicating an innocent task invocation.\n\n### Analysis\n\nHi all, thought I'd report a bug I ran into which was tricky to solve. I have found a workaround, but I think the logging could have been much more helpful. I also hope that writing something here will help others who run into this in future.\r\n\r\nAs a bit of background, somehow the permissions on my `C:\\Windows\\TEMP` directory were revoked. Some cursory googling suggests this can happen in Windows updates. I think in my case it might have been in the process of installing VS 2022, but I'm not sure. This caused my project builds which include `CUDA 12.3.targets` to fail in a mysterious way:\r\n\r\n```\r\nC:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\MSBuild\\Microsoft\\VC\\v160\\BuildCustomizations\\CUDA 12.3.targets(799,9): error MSB3686: Unable to create Xaml task.  Compilation failed.   [C:\\Users\\esther.okeefe\\source\\re\r\npos\\MSBuildBug\\MSBuildBug\\MSBuildBug.vcxproj]\r\nC:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\MSBuild\\Microsoft\\VC\\v160\\BuildCustomizations\\CUDA 12.3.targets(799,9): error MSB3686: Source file 'C:\\Windows\\TEMP\\k5qvwvgi.0.cs' could not be found [C:\\Users\\esther.okee\r\nfe\\source\\repos\\MSBuildBug\\MSBuildBug\\MSBuildBug.vcxproj]\r\nC:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\MSBuild\\Microsoft\\VC\\v160\\BuildCustomizations\\CUDA 12.3.targets(799,9): error MSB3686:  [C:\\Users\\esther.okeefe\\source\\repos\\MSBuildBug\\MSBuildBug\\MSBuildBug.vcxproj]\r\nC:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\MSBuild\\Microsoft\\VC\\v160\\BuildCustomizations\\CUDA 12.3.targets(799,9): error MSB4175: The task factory \"XamlTaskFactory\" could not be loaded from the assembly \"Microsoft.\r\nBuild.Tasks.v4.0, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\". Object reference not set to an instance of an object. [C:\\Users\\esther.okeefe\\source\\repos\\MSBuildBug\\MSBuildBug\\MSBuildBug.vcxproj]\r\n```\r\n\r\nThe file/line number given is a red herring, as the error has nothing to do with the particular file. Changing the permissions on the system temp folder is not something anyone would think to do manually, so if this issue ever crops up the user isn't going to have any idea what's going on.\r\n\r\nIn VS the error looks like this, which doesn't mention C:\\Windows\\TEMP and draws even more attention to the (actually perfectly innocent) file/line number:\r\n![image](https://github.com/user-attachments/assets/86c92c3b-5710-4548-9a3c-4de3858ad5d0)\r\n\r\nLooking at the MSBuild code I saw that setting `MSBUILDWRITEXAMLTASK=1` would [take a different code path](https://github.com/dotnet/msbuild/blob/c4d51a11b84b4aabd9e5da1e3099f2c7c85024fe/src/Tasks/XamlTaskFactory/XamlTaskFactory.cs#L137-L151), and indeed doing so avoids the error because it doesn't access `%SystemRoot%\\Temp`.\r\n\r\nThis led me to check the permissions on all my temp folders. Running `cacls C:\\Windows\\Temp /E /G everyone:F` from an administrator prompt resolved the issue, and running `cacls C:\\Windows\\Temp /E /R everyone` causes it to come back, whence the repro steps above.\n\n### Versions & Configurations\n\nMicrosoft (R) Build Engine version 16.10.2+857e5a733 for .NET Framework\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n16.10.2.30804",
  "state": "CLOSED",
  "createdAt": "2024-10-07T06:31:06Z",
  "updatedAt": "2024-11-28T12:28:19Z",
  "closedAt": "2024-11-28T12:28:16Z",
  "author": {
    "login": "esthermations"
  },
  "labels": [
    "bug",
    "help wanted",
    "Good First Issue",
    "needs-more-info",
    "stale",
    "closed-by-bot",
    "Priority:3",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "SimaTian"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Thank you for filing high quality bug!\r\n\r\nIt seems we are missing on opportunity to emit better error somewhere here: https://github.com/dotnet/msbuild/blob/d0a797e9ed0d218bcae30a986b9e14ed56339460/src/Tasks/XamlTaskFactory/XamlTaskFactory.cs#L186",
        "createdAt": "2024-10-08T14:08:43Z",
        "updatedAt": "2024-10-08T14:08:43Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "Hello,\n\nI couldn't reproduce the bug.\nCould you please provide us with a sample project that reproduces the issue and .binlog with the error? I suspect I'm failing to set up the Build Customisation properly or something.\nIt would also help us to see if the bug still persist on the newer version of msbuild tool if that is possible for your case.",
        "createdAt": "2024-10-09T15:26:01Z",
        "updatedAt": "2024-10-09T15:26:01Z",
        "author": {
          "login": "SimaTian"
        }
      },
      {
        "body": "Update:\nWith a setup like this:\nroot task\n```\n<Project xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n    <UsingTask TaskName=\"SimpleTask.SimpleTask\"\n        AssemblyFile=\"testTask1.dll\"/>\n\n    <Target Name=\"MyTarget\">\n        <SimpleTask MyProperty=\"testcontent.txt\"/>\n    </Target>\n</Project>\n```\nthe .dll file is based on this project:\n\n```\nusing System;\nusing Microsoft.Build.Framework;\nusing Microsoft.Build.Utilities;\nusing Microsoft.Build.Tasks;\nusing System.Collections.Generic;\n\nnamespace SimpleTask\n{\n    public class SimpleTask : Task\n    {\n        private string myProperty;\n        private XamlTaskFactory myfactory;\n\n        // The [Required] attribute indicates a required property.\n        // If a project file invokes this task without passing a value\n        // to this property, the build will fail immediately.\n        [Required]\n        public string MyProperty\n        {\n            get\n            {\n                return myProperty;\n            }\n            set\n            {\n                myProperty = value;\n            }\n        }\n\n        public override bool Execute()\n        {\n            // Log a high-importance comment\n            Log.LogMessage(MessageImportance.High,\n                \"The task was passed \\\"\" + myProperty + \"\\\".\");\n            myfactory = new XamlTaskFactory();\n            var taskParameters = new Dictionary<String, TaskPropertyInfo>();\n            myfactory.Initialize(\"mySampleTask\", taskParameters, myProperty, BuildEngine);\n            var myTask = myfactory.CreateTask(BuildEngine);\n            myTask.BuildEngine = BuildEngine;\n            myTask.Execute();\n            return true;\n        }\n    }\n}\n```\nsome portions could be simplified away. However the gist of it is that this is a task that uses XamlTaskFactory to create a subtask, that it then executes.\nWhen the .exe file is in an inaccessible folder, the error is:\n```\n C:\\Users\\<username>\\Documents\\tests\\customTask\\test.mycsproj(6,9): error MSB6004: The specified task executable location \"./test/mem.exe\" is invalid.\nHowever the build succeds. \n```\n\nWhen the XAML task itself is in an inaccessible folder, the error becomes:\n```error MSB4018: System.ArgumentException: Unable to create Xaml task.  File not found: C:/path_to_file```\n\nWhen the file is accessible and throws an unhandled exception, the error becomes:\n```\n Unhandled exception. System.AccessViolationException: you shall not pass\n     at Program.<Main>$(String[] args) in C:\\Users\\<username>\\source\\repos\\mem_fake\\mem_fake\\Program.cs:line 8\nC:\\Users\\<username>\\Documents\\tests\\customTask\\test.mycsproj(6,9): error MSB3721: The command \"\" exited with code -532462766.\n```\n\n\nWith the latest CUDA environment(12.6) + and its default project, the error didn't materialize even after manually deleting all permissions on the C:\\temp folder. Maybe there is some step or setting that I'm missing.\n",
        "createdAt": "2024-10-10T10:58:50Z",
        "updatedAt": "2024-10-10T10:58:50Z",
        "author": {
          "login": "SimaTian"
        }
      },
      {
        "body": "This issue is marked as stale because feedback has been requested for 30 days with no response. Please respond within 14 days or this issue will be closed due to inactivity.\n<!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. -->",
        "createdAt": "2024-11-13T17:32:40Z",
        "updatedAt": "2024-11-13T17:32:40Z",
        "author": {
          "login": "dotnet-policy-service[bot]"
        }
      },
      {
        "body": "This issue was closed due to inactivity. If you can still reproduce this bug, please comment with the requested information, detailed steps to reproduce the problem, or any other notes that might help in the investigation.\n<!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. -->",
        "createdAt": "2024-11-28T12:28:18Z",
        "updatedAt": "2024-11-28T12:28:18Z",
        "author": {
          "login": "dotnet-policy-service[bot]"
        }
      }
    ]
  }
}