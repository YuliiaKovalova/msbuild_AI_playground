{
  "number": 8038,
  "title": "[Feature] Directory.Solution.props and Directory.Solution.targets support in Visual Studio",
  "body": "Directory.Build.props/targets are awesome, but when you want to apply the setting to all csproj's thats in the Solution, and some csproj's are not rooted under the `.sln` directory, I need to copy the Directory.Build.props file, or even have to add my own SDK to handle this.\r\n\r\nHaving my own SDK to Import Solution wide props/targets files seem a bit excessive, and would be nice to have out of the box.\r\n\r\n/SomeSln/SomeSln.sln\r\n/SomeSln/SomeSln.Build.props\r\n/Foo/Bar/Bar.csproj - Includes `Solution.Build.props` when `Solution` is build",
  "state": "CLOSED",
  "createdAt": "2022-10-10T13:21:01Z",
  "updatedAt": "2024-02-21T14:07:25Z",
  "closedAt": "2022-10-27T16:35:09Z",
  "author": {
    "login": "hknielsen"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "<https://learn.microsoft.com/en-us/visualstudio/msbuild/customize-your-build?view=vs-2022#customize-the-solution-build> already documents Directory.Solution.props and Directory.Solution.targets as files automatically imported in a solution build. Making MSBuild also import those when building individual projects in a solution would likely break someone's solution build.\n\nI thought perhaps you can instead use Directory.Solution.props to set something that causes a custom value of CustomBeforeMicrosoftCommonProps to be passed to the project builds\u2026 but I don't see any obvious way to do that here <https://github.com/dotnet/msbuild/blob/62714bbea3d52c447cff642a936945e5bb7c91f3/src/Build/Construction/Solution/SolutionProjectGenerator.cs#L505-L540>",
        "createdAt": "2022-10-10T16:09:42Z",
        "updatedAt": "2022-10-10T16:09:42Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "@KalleOlaviNiemitalo \r\n>already documents Directory.Solution.props and Directory.Solution.targets\r\n\r\nWhat SDK is that imported by? I dont see my `Directory.Solution.props` getting imported when opening the Solution",
        "createdAt": "2022-10-12T14:00:25Z",
        "updatedAt": "2022-10-12T14:00:44Z",
        "author": {
          "login": "hknielsen"
        }
      },
      {
        "body": "@hknielsen are you using Visual Studio? The doc page says those files don't work in VS.",
        "createdAt": "2022-10-12T14:02:51Z",
        "updatedAt": "2022-10-12T14:02:51Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "@KalleOlaviNiemitalo ah yeah I see. Hmm yeah then that would not work for my case.\r\n\r\nI still think that it would be valuable to have a way to do Solution wide props/targets Imports. Directory.Build.props only work if you have all your csproj's rooted under the sln, I agree we cant change that, but would need something else, ie. `Solution.Build.props`\r\nJust like global.json are Solution wide, it seem like there's some inconsistencies.",
        "createdAt": "2022-10-12T14:13:13Z",
        "updatedAt": "2022-10-12T14:13:13Z",
        "author": {
          "login": "hknielsen"
        }
      },
      {
        "body": "You can do this manually today, by importing files based on `$(SolutionDir)` or `$(SolutionPath)`. However, you probably _don't_ want to do this. It introduces very confusing differences between builds:\r\n\r\n1. In the context of solution A, the project builds one way.\r\n2. In the context of solution B, the project builds another way.\r\n3. When built on its own, the solution builds a third way.\r\n\r\nThis is _especially_ confusing when working on both solutions or going back and forth, and with incremental builds: if the project is up to date and was last built in context A, will a build (without clean) in context B produce correct outputs, or a weird combination where some configuration from A apply to some outputs and some configuration from B applies to others?",
        "createdAt": "2022-10-13T16:45:10Z",
        "updatedAt": "2022-10-13T16:45:10Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> Just like global.json are Solution wide, it seem like there's some inconsistencies.\r\n\r\nThat's not quite correct, `global.json` applies to folders just like `Directory.Build.props` does; the difference is that if two projects in the same build are discovered to have different `global.json` the build fails.",
        "createdAt": "2022-10-13T16:46:11Z",
        "updatedAt": "2022-10-13T16:46:11Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Hi @rainersigwald thanks for taking your time to chime in :)\r\n\r\n>That's not quite correct, global.json applies to folders just like Directory.Build.props does\r\n\r\nglobal.json search paths is first in the SolutionFilePath for the global.json, if `global,json` is not there the resolver looks at the csproj directory\r\nhttps://github.com/NuGet/NuGet.Client/blob/dev/src/NuGet.Core/Microsoft.Build.NuGetSdkResolver/GlobalJsonReader.cs#L93\r\n\r\nSo if you have SolutionA, and SolutionB, including the same csproj's (sln at different locations), they could be compiled with ie. different SDK versions, if one have that liking.\r\n\r\n>However, you probably don't want to do this. It introduces very confusing differences between builds\r\n\r\nI agree and maybe its not as easy as first anticipated from my side.\r\nIm investigating how we can move from a custom Build/Compilation pipeline to MsBuild, using the custom logic we have today expressed in a MsBuild SDK.\r\nFor our users today, it is possible to have a project layout like:\r\n```\r\nFoo/Foo.sln\r\nFoo/Bar/Bar.csproj\r\nBaz/Baz.csproj\r\n```\r\nI would like to be able to include props and target files in `Baz/Baz.csproj`, if fx our SDK is not not used, but using elements that the SDK would deal with, I would like to give some helpful information to the user.\r\nWithout a solution wide Include, the best way I can see forward today is to generate a `Directory.Build.props` file in `Baz/` location, when Users does this",
        "createdAt": "2022-10-14T07:43:48Z",
        "updatedAt": "2022-10-14T07:43:48Z",
        "author": {
          "login": "hknielsen"
        }
      },
      {
        "body": "@rainersigwald - To come back to this. Why is it that `Directory.Solution.props` and `Directory.Solution.targets` is not picked up in Visual Studio? Seem like that would  solve all issues, and its already a supported feature by MsBuild.",
        "createdAt": "2022-10-19T07:23:45Z",
        "updatedAt": "2022-10-19T07:23:45Z",
        "author": {
          "login": "hknielsen"
        }
      },
      {
        "body": "The build in Visual Studio is quite a bit different from builds on the command line using MSBuild, mostly because Visual Studio (and `.sln`) predates MSBuild and can't assume that projects are MSBuild-based. The Visual Studio team is considering options here, but it's a high-risk area since many customers have 20+ year old solutions so we have to think about compatibility as well as \"it would be nicer if\".",
        "createdAt": "2022-10-19T14:33:17Z",
        "updatedAt": "2022-10-19T14:33:17Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Closing this since it isn't an MSBuild issue. You can file feedback at [Developer Community](https://developercommunity.visualstudio.com/spaces/8/index.html) so this can get routed to the VS team.",
        "createdAt": "2022-10-27T16:35:09Z",
        "updatedAt": "2022-10-27T16:35:09Z",
        "author": {
          "login": "benvillalobos"
        }
      }
    ]
  }
}