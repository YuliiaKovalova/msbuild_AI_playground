{
  "number": 1518,
  "title": "Throw an error if the Sdk attribute contains any expandable characters",
  "body": "Right now the Sdk value is treated as a literal string with no expansion.  If a user specifies something like:\r\n\r\n``` xml\r\n<Project Sdk=\"$(Property1)\" />\r\n```\r\n\r\nThen the value \"$(Property1)\" is passed to the resolver which would probably return a message stating that it couldn't be found.  We should instead check if the value contains expandable characters and throw an invalid project error.",
  "state": "OPEN",
  "createdAt": "2017-01-06T19:59:05Z",
  "updatedAt": "2023-10-02T20:44:31Z",
  "closedAt": null,
  "author": {
    "login": "jeffkl"
  },
  "labels": [],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Feature: Sdks"
  },
  "comments": {
    "nodes": [
      {
        "body": "What about Import tags' Sdk attribute?\r\n\r\nFor e.g.:\r\n```xml\r\n<Import Sdk=\"$(DynamicSdk)\" />\r\n```\r\n\r\nIt'll be useful in an injection scenario!\r\n\r\nDoes it work? If not, will it be supported?",
        "createdAt": "2017-09-14T22:02:36Z",
        "updatedAt": "2017-09-14T22:04:56Z",
        "author": {
          "login": "Nirmal4G"
        }
      },
      {
        "body": "At this time the `Sdk` attribute in an `<Import />` element is not expanded so using properties in its value will not work as expected.  The top implicit import when defining `<Project Sdk=\"Microsoft.NET.SDK` />` is evaluated before a user can define any properties so we decided to save the overhead.  However, if you change your projects to use explicit imports, then it might make sense to use properties.  You would still need to import another central file manually or define a property in every project to make it useful.\r\n\r\n```xml\r\n<Project>\r\n  <!-- common.props defines $(DynamicSdk) -->\r\n  <Import Project=\"..\\common.props\" />\r\n  <Import Project=\"Sdk\\Sdk.props\" Sdk=\"$(DynamicSdk)\" />\r\n    ...\r\n  <Import Project=\"Sdk\\Sdk.targets\" Sdk=\"$(DynamicSdk)\" />\r\n</Project>\r\n```\r\n\r\nEvery time you made a new project you'd have to hand edit it and add the imports.",
        "createdAt": "2017-09-15T14:22:42Z",
        "updatedAt": "2017-09-15T14:22:42Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "> You would still need to import another central file manually or define a property in every project to make it useful. Every time you made a new project you'd have to hand edit it and add the imports.\r\n\r\nWell, that may be so but not exactly.\r\n\r\n1. I can do this via another SDK meta-package that references all other SDKs.\r\n2. If I am using a local build then `Directory.Build.props` would be the best way to import the SDK properties.\r\n3. Another way is to have default SDK defined but override them through `msbuild my.proj /p:DynamicSdk=The.Sdk`\r\n\r\nThese are the ones I'm currently dealing with.\r\nThanks for the clarification.",
        "createdAt": "2017-09-15T16:29:28Z",
        "updatedAt": "2017-09-15T16:29:28Z",
        "author": {
          "login": "Nirmal4G"
        }
      },
      {
        "body": "> I can do this via another SDK meta-package that references all other SDKs.\r\n\r\nCan you explain this?\r\n> If I am using a local build then Directory.Build.props would be the best way to import the SDK properties.\r\n\r\n`Directory.Build.props` is imported by `Microsoft.Common.props` which is imported by `Sdk.props`.  Are you suggesting doing something like:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <Import Project=\"Sdk\\Sdk.props\" Sdk=\"$(DynamicSdk)\" />\r\n</Project>\r\n```\r\nIf you're adding an import to every project, it would be just as easy to just do:\r\n`<Import Project=\"$(DynamicImport)\" />`\r\n\r\n> Another way is to have default SDK defined but override them through msbuild my.proj /p:DynamicSdk=The.Sdk\r\n\r\nYou would still need to default `DynamicSdk` in case you didn't set a global property via the command-line.  Setting the property before the `<Import />` is evaluated would be tricky.  The only solution I could think of would be:\r\n\r\n`<Import Project=\"Sdk\\Sdk.props\" Sdk=\"$([MSBuild]::ValueOrDefault($(DynamicSdk), 'Microsoft.NET.Sdk))\" />`\r\n\r\nThat seems less then ideal",
        "createdAt": "2017-09-15T16:35:51Z",
        "updatedAt": "2017-09-15T16:35:51Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "> Directory.Build.props is imported by Microsoft.Common.props which is imported by Sdk.props. Are you suggesting doing something like:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <Import Project=\"Sdk\\Sdk.props\" Sdk=\"$(DynamicSdk)\" />\r\n</Project>\r\n```\r\n\r\nYes. But within the Base Sdk itself. For e.g. say I have two types of Packaging or Bundling targets like nuget. I would do this\r\n```xml\r\n<Project Sdk=\"Custom.NET.Sdk\">\r\n ...\r\n<BundlingSystem>CabBundler</BundlingSystem>\r\n ...\r\n</Project>\r\n```\r\n\r\n> Note: `Custom.NET.Sdk` imports Core SDK like Microsoft.NET.Sdk!\r\n\r\nThen in the Base SDK, I would resolve the above property to SDK name and set the property to that resolved Sdk package. For e.g. In the props and targets of the `Custom.NET.Sdk` I would do this\r\n```xml\r\n<Project>\r\n...\r\n<ResolvedBundlerSdk Condition=\"'$(BundlingSystem)' == 'CabBundler'\">Bundler.Cab.Sdk</ResolvedBundlerSdk>\r\n<Import Project=\"Sdk\\Sdk.props\" Sdk=\"$(ResolvedBundlerSdk)\" />\r\n...\r\n</Project>\r\n```\r\n\r\nLittle bit of something I'm working on.",
        "createdAt": "2017-09-15T17:00:18Z",
        "updatedAt": "2017-09-15T17:24:23Z",
        "author": {
          "login": "Nirmal4G"
        }
      },
      {
        "body": "_This is not setting different global SDKs but using different SDKs with specific functions within the master SDK without creating a duplicate set of targets as a nuget package._\r\n\r\nFor e.g.: NuGet team can have one master Sdk that does have all the tasks and targets but can also have a separate targets (Sdk) package that is referenced by the master package. And also by other teams that want the functionality like Packaging but disabling the other features that comes with master Sdk.\r\n\r\nhttps://github.com/dotnet/sdk/pull/889#issuecomment-285751303\r\nhttps://github.com/dotnet/sdk/pull/889#issuecomment-294282091\r\n",
        "createdAt": "2017-09-15T17:15:21Z",
        "updatedAt": "2017-09-15T17:15:21Z",
        "author": {
          "login": "Nirmal4G"
        }
      },
      {
        "body": ">  I can do this via another SDK meta-package that references all other SDKs.\r\n> Can you explain this?\r\n\r\n```xml\r\n<Project>\r\n...\r\n<Import Project=\"Sdk\\Sdk.targets\" Sdk=\"1.Sdk\" />\r\n<Import Project=\"Sdk\\Sdk.targets\" Sdk=\"2.Sdk\" />\r\n<Import Project=\"Sdk\\Sdk.targets\" Sdk=\"3.Sdk\" />\r\n...\r\n</Project>\r\n```\r\n**OR**\r\n```xml\r\n<Project>\r\n...\r\n<Sdk Name=\"1.Sdk\" Version=\"1.0\" />\r\n<Sdk Name=\"2.Sdk\" Version=\"2.1\" />\r\n<Sdk Name=\"3.Sdk\" Version=\"3.2\" />\r\n...\r\n</Project>\r\n```\r\nIf this is possible. Even cleaner!\r\n\r\n",
        "createdAt": "2017-09-15T17:54:08Z",
        "updatedAt": "2017-09-15T17:54:08Z",
        "author": {
          "login": "Nirmal4G"
        }
      }
    ]
  }
}