{
  "number": 3466,
  "title": "RAR logs two \\0 bytes at the end of ImageRuntime = v4.0.30319\\0\\0",
  "body": "@dsplaisted has reported a build where the log from RAR contains two zero bytes at the end of the ImageRuntime metadata value. Example:\r\n![image](https://user-images.githubusercontent.com/679326/42117171-119d2246-7bb0-11e8-9848-7eedb53f7973.png)\r\n\r\nWe need to investigate where those two zero bytes come from. I've seen this a few times in the logs. Present both in text logs and binlog.",
  "state": "CLOSED",
  "createdAt": "2018-06-29T22:21:46Z",
  "updatedAt": "2024-02-21T17:12:31Z",
  "closedAt": "2019-03-20T20:43:08Z",
  "author": {
    "login": "KirillOsenkov"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "See related https://github.com/KirillOsenkov/MSBuildStructuredLog/issues/177",
        "createdAt": "2018-06-29T22:26:49Z",
        "updatedAt": "2018-06-29T22:26:49Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "The problem is here\r\nhttps://github.com/Microsoft/msbuild/blob/b2db71bebaae4f54f7236ca303e2b0a14aca1a0d/src/Tasks/AssemblyDependency/AssemblyInformation.cs#L1010-L1023\r\n\r\nin ECMA335 it says about the length\r\n```\r\nNumber of bytes allocated to hold version string (including\r\nnull terminator), call this x.\r\nCall the length of the string (including the terminator) m (we\r\nrequire m <= 255); the length x is m rounded up to a multiple\r\nof four.\r\n```\r\nIn this case the length in the header is 12 including null which we are using verbatim but it was 11 rounded to 12.\r\n```\r\nsr.ReadBytes(length)\r\n{byte[12]}\r\n    [0]: 118\r\n    [1]: 52\r\n    [2]: 46\r\n    [3]: 48\r\n    [4]: 46\r\n    [5]: 51\r\n    [6]: 48\r\n    [7]: 51\r\n    [8]: 49\r\n    [9]: 57\r\n    [10]: 0\r\n    [11]: 0\r\n```\r\nWe should simply trim `\\0` here.\r\n\r\nThe code is otherwise working fine because aside from logging it is used as a `Version` which parses successfully because the last segment is consumed with `Int.Parse` and that due to compatibility reasons ignores trailing nulls.\r\nhttps://github.com/dotnet/coreclr/blob/b00f12ce4457fc013efce340011b4759e78f9948/src/System.Private.CoreLib/shared/System/Number.Parsing.cs#L1876",
        "createdAt": "2019-03-18T03:45:29Z",
        "updatedAt": "2019-03-18T03:45:29Z",
        "author": {
          "login": "danmoseley"
        }
      }
    ]
  }
}