{
  "number": 6182,
  "title": "Feature request: Make project evaluation result machine agnostic to push Project cache from local to the cloud/repo",
  "body": "Currently the project evaluation result contains machine and user specific information in the MSBuild.Project returned from an evaluation of the project file. \r\n\r\n**Context on caching**\r\nThe current plan is to have CPS cache the resulting evaluation result locally to speed up the consequent solution load by using this read-only copy of the project evaluation result. The cache gets read in CPS::PrepareProjects to create a read-only Project collection. The read-only Project is used during solution load to cater to all of the read lock based project evaluation access requests. More details on write and upgradeable lock handling below in Implementation. \r\n\r\n**Where is the cache stored now?**\r\nThe cache will be written locally in a custom binary format structure in the CPS code (can be moved into msbuild later if we see non-CPS users benefiting from it) that is heavily optimized towards the data types produced by the MSBuild.Project evaluation object. With the ProjectInstance as an indicator, the project evaluation will take upwards of 1.75MB. There will be efforts to compact this by customizing the serializer to data that interests CPS.\r\n\r\nThe cache will be stored in the .vs folder, mimicking the Project tree format with all the interned strings stored at the solution level and individual Project state with string indexes stored as individual project cache files. The consequent iteration of the cache is meant to converge with the design time build cache to further data deduplicate, but the first phase will be focused on minimizing cache contentions.\r\n\r\nMore details on the project evaluation caching is in [Improving solution load for CPS based project](https://microsoft.sharepoint.com/:w:/t/DD_VSIDE/EcYtMhB6iwZJlE83X0RS35kBeyjzVwwTQ0WfP16gzDsqtA?e=oGLYaC)\r\n\r\n**So what is the problem?**\r\nThe cache includes Project evaluation data that is not machine agnostic and hence cannot be moved to the cloud right now to be used across different consumers of the same project. \r\n\r\n**Ask**\r\nIt is quite possible that the project evaluation result will always contain machine specific information where the cache was created. The ask is to assess feasibility and minimize embedding machine specific information into the project evaluation result, perhaps isolate that into a separate object that can either reacquired via a cheap call into msbuild, GetMachineSpecificProjectEvaluationData or even cache that locally. ",
  "state": "OPEN",
  "createdAt": "2021-02-22T17:13:08Z",
  "updatedAt": "2024-01-31T08:21:57Z",
  "closedAt": null,
  "author": {
    "login": "arunchndr"
  },
  "labels": [
    "Partner request",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Backlog"
  },
  "comments": {
    "nodes": [
      {
        "body": "/cc: @cdmihai",
        "createdAt": "2021-06-16T15:17:04Z",
        "updatedAt": "2021-06-16T15:17:04Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "Related discussion on making MSBuild's build results cache file more maching agnostic: https://github.com/dotnet/msbuild/issues/5204#issuecomment-627431911.\r\n\r\nThis is one of the biggest hinderances in caching and distributing msbuild build artefacts (evaluations, target results, etc).\r\n\r\nI think the main barrier to fixing this is MSBuild's loose \"type system\". Everything is a string, so MSBuild cannot reason whether a variable (property or item) points to a path or not. Without rewriting MSBuild a bit the best we can do is have a post-processing phase where we iterate through all the properties and items in an evaluation or target result and if we detect absolute paths either make them relative or put in a placeholder that's filled in later on another machine.\r\n\r\nBeyond paths, there is a slew of other machine and user specific information that's problematic, for example:\r\n- references to environment variables. If two user machines have different environment variables then build artefacts cannot be shared\r\n- machine name flowing into properties / items\r\n- msbuild settings. Anything that VS sets in MSBuild APIs (BuildParameters, ProjectOptions, ProjectLoadSettings, etc) can affect the cache.",
        "createdAt": "2021-06-16T17:29:09Z",
        "updatedAt": "2021-06-16T17:34:40Z",
        "author": {
          "login": "cdmihai"
        }
      }
    ]
  }
}