{
  "number": 1054,
  "title": "IncrementalClean deletes transitively-acquired content in Visual Studio",
  "body": "[This is based on feedback from `connect.microsoft.com`.]\n\nIf you have:\n- A project that copies some files to the output directory (call it `ClassLibraryIndirect`)\n- A project that depends on `ClassLibraryIndirect` (call it `ClassLibraryDirect`)\n- A project that depends on `ClassLibraryDirect` (call it `IncrementalClean`)\n\nAnd you build using Visual Studio, some very surprising behavior can occur.\n\nDemo projects: https://github.com/rainersigwald/IncrementalCleanDemo\n\nOn the first (full) build of the main project, the output file is present in ClassLibraryIndirect's bin directory, **and** in IncrementalClean's--as expected. Content files should be transitively passed along. [Selected state](https://github.com/rainersigwald/IncrementalCleanDemo/commit/517e4e8e1a3acc16ec288ca320bf0d34ed039c3e).\n\nIf you make a change to the main project (to get VS's fast-up-to-date check to cause an actual build) and build just it again, the content file gets deleted from the main project's bin directory. [changes](https://github.com/rainersigwald/IncrementalCleanDemo/commit/e415ad7a74be41e78d910e424c941f5a9acded28)\n\nLooking through a diag-level log of the second build, the problem is that the [`IncrementalClean`](https://github.com/Microsoft/msbuild/blob/e7019886b3fd520b547a7353d78d106d72a4b828/src/XMakeTasks/Microsoft.Common.CurrentVersion.targets#L4463-L4520) target [deletes the file](https://github.com/rainersigwald/IncrementalCleanDemo/blob/e415ad7a74be41e78d910e424c941f5a9acded28/build-main-project-in-vs-again.log#L5188), because it incorrectly [thinks it's no longer an output](https://github.com/rainersigwald/IncrementalCleanDemo/commit/e415ad7a74be41e78d910e424c941f5a9acded28#diff-414497d138b9a3671970cce983188d2cL1).\n\nThis [does **not** happen](https://github.com/rainersigwald/IncrementalCleanDemo/commit/7a9717e0aa9fb07ce1769781cf98d866bd5ae290) when building from the command line using no special properties.\n\nBut it [**does** happen](https://github.com/rainersigwald/IncrementalCleanDemo/commit/5a3eba2d01f91a16a4463209fed638def3b6d566) when building from the command line setting the property `BuildProjectReferences=false`, which simulates Visual Studio's mechanism of building individual projects.\n\nWhether or not a project is built in isolation should not affect the outputs it produces.\n",
  "state": "CLOSED",
  "createdAt": "2016-09-21T15:30:37Z",
  "updatedAt": "2024-02-21T17:25:48Z",
  "closedAt": "2021-07-09T17:31:08Z",
  "author": {
    "login": "rainersigwald"
  },
  "labels": [
    "bug",
    "changewaves",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "benvillalobos"
      }
    ]
  },
  "milestone": {
    "title": "VS 17.0"
  },
  "comments": {
    "nodes": [
      {
        "body": "The proximate cause of this is that the transitive [`GetCopyToOutputDirectoryItems`]() target [doesn't include the indirect content file](https://github.com/rainersigwald/IncrementalCleanDemo/blob/e415ad7a74be41e78d910e424c941f5a9acded28/build-main-project-in-vs-again.log#L4266-L4269) in the latter build, while it [does](https://github.com/rainersigwald/IncrementalCleanDemo/blob/e415ad7a74be41e78d910e424c941f5a9acded28/build-main-project-in-vs.log#L9318-L9325) in the initial, successful build as well as the [successful full command-line build](https://github.com/rainersigwald/IncrementalCleanDemo/blob/7a9717e0aa9fb07ce1769781cf98d866bd5ae290/msbuild-main-project-build-again.log#L9860-L9867).\n\nThere's a [very confusing comment](https://github.com/Microsoft/msbuild/blob/e7019886b3fd520b547a7353d78d106d72a4b828/src/XMakeTasks/Microsoft.Common.CurrentVersion.targets#L4091-L4100) for `GetCopyToOutputDirectoryItems` that indicates that it isn't transitive--but clearly sometimes it is.\n",
        "createdAt": "2016-09-21T15:45:30Z",
        "updatedAt": "2016-11-18T00:17:51Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "We're hitting this too, trying to improve the way we perform the Pdb>Mdb in-place, and not getting them copied transitively :(",
        "createdAt": "2016-12-30T18:22:44Z",
        "updatedAt": "2016-12-30T18:22:44Z",
        "author": {
          "login": "kzu"
        }
      },
      {
        "body": "+1 this has been a thorn in our side at work for ages!",
        "createdAt": "2017-01-16T21:00:24Z",
        "updatedAt": "2017-01-16T21:00:24Z",
        "author": {
          "login": "abbottbd"
        }
      },
      {
        "body": "We are getting the same problem when using sonarqube for performing static code analysis which creates temporary files . Incremental clean deletes it before the entire solution is even completed building ",
        "createdAt": "2017-01-30T05:25:59Z",
        "updatedAt": "2017-01-30T05:25:59Z",
        "author": {
          "login": "aswinraaj"
        }
      },
      {
        "body": "+1 I'm hitting this daily in my inner development loop.",
        "createdAt": "2017-05-24T15:36:21Z",
        "updatedAt": "2017-05-24T15:36:21Z",
        "author": {
          "login": "jcouv"
        }
      },
      {
        "body": "We worked around this by moving all content files from each individual library, where we feel they naturally belong, to dumping all of them in our main app project. It's not pretty, but it works. We have spent way too much time investigating this and very frustrated to see the age of this problem and no update on fixing this.",
        "createdAt": "2017-05-24T16:04:08Z",
        "updatedAt": "2017-05-24T16:04:08Z",
        "author": {
          "login": "angularsen"
        }
      },
      {
        "body": "We've been hitting this as well and the easy workaround we found is to add:\r\n```\r\n<Target Name=\"IncrementalClean\" />\r\n```\r\nto a .targets file that's included in all projects. Disabling incremental clean is mostly harmless since we regularly do `git clean -xdff` anyway. A decent workaround.",
        "createdAt": "2017-07-05T20:30:42Z",
        "updatedAt": "2017-07-05T20:30:42Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "Another workaround is to flatten your dependency tree: ensure that there are direct ProjectReferences instead of relying on transitive copying behavior.",
        "createdAt": "2017-07-05T20:37:02Z",
        "updatedAt": "2017-07-05T20:37:02Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I can confirm that I was extremely surprised by this behaviour. The symptom is a failure to *pack*, since the PDB files which have been deleted aren't present as an input to nuget, which the pack targets require even if you aren't building a symbol package..",
        "createdAt": "2017-11-14T13:12:59Z",
        "updatedAt": "2017-11-14T13:13:50Z",
        "author": {
          "login": "gulbanana"
        }
      },
      {
        "body": "Actually I'm not totally sure it's the same issue, but it seems very similar. My problem is the same one that's described in this StackOverflow question: https://stackoverflow.com/questions/44175371/pdb-file-is-being-removed-by-target-incrementalclean",
        "createdAt": "2017-11-14T13:18:06Z",
        "updatedAt": "2017-11-14T13:19:20Z",
        "author": {
          "login": "gulbanana"
        }
      },
      {
        "body": "2018 and still going on. Was a fun one to track down.",
        "createdAt": "2018-05-21T22:20:07Z",
        "updatedAt": "2018-05-21T22:20:07Z",
        "author": {
          "login": "herrgruebner"
        }
      },
      {
        "body": "In our case we were using msbuild as part of a powershell script with the 'clean' parameter. We put a bit at the start of the script to blow away the output directory and got rid of the clean, which isn't great, but it works.",
        "createdAt": "2018-05-22T08:50:25Z",
        "updatedAt": "2018-05-22T08:50:25Z",
        "author": {
          "login": "herrgruebner"
        }
      },
      {
        "body": "Is there any plan to fix this issue in the near future?",
        "createdAt": "2018-07-08T10:49:23Z",
        "updatedAt": "2018-07-08T10:49:23Z",
        "author": {
          "login": "akoessler"
        }
      },
      {
        "body": "Just encountered this, is bugging some people at my organization, would love it if it were fixed! :)",
        "createdAt": "2018-07-16T19:41:51Z",
        "updatedAt": "2018-07-16T19:41:51Z",
        "author": {
          "login": "cclauson"
        }
      },
      {
        "body": "Hello,\r\n\r\nI spent some time debugging this in structured log viewer, and eventually reached the same conclusion that is described in this comment mentioned by @rainersigwald :\r\nhttps://github.com/Microsoft/msbuild/blob/e7019886b3fd520b547a7353d78d106d72a4b828/src/XMakeTasks/Microsoft.Common.CurrentVersion.targets#L4091-L4100\r\n(should have read this at the beginning...)\r\n\r\nSuccinctly, the target _SplitProjectReferencesByFileExistence consumes @(ProjectReferenceWithConfiguration), which is computed in the target AssignProjectConfiguration.  The bug occurs when _SplitProjectReferencesByFileExistence is run without first running AssignProjectConfiguration.\r\n\r\nAs a workaround, I'm currently putting the following code in a file which is imported by all my projects:\r\n`   <Target Name=\"ForceAssignProjectConfigurationBeforeSplitProjectReferencesByFileExistence_KLUDGE\"\r\n          BeforeTargets=\"_SplitProjectReferencesByFileExistence\"\r\n          DependsOnTargets=\"AssignProjectConfiguration\" />\r\n`\r\n\r\nAm not noticing any problems or performance degradation.  Unless I'm missing something, maybe the fix is to add DependsOnTargets=\"AssignProjectConfiguration\" to the _SplitProjectReferencesByFileExistence target in Microsoft.Common.CurrentVersion.targets?\r\n\r\nAlso, I tried @rainersigwald repro project here:\r\nhttps://github.com/rainersigwald/IncrementalCleanDemo\r\nHave confirmed that this approach fixes it.",
        "createdAt": "2018-07-19T22:53:51Z",
        "updatedAt": "2018-07-19T22:54:43Z",
        "author": {
          "login": "cclauson"
        }
      },
      {
        "body": "I'm having a similar issue. Upon a clean build, everything works fine. Once I rebuild, I see that all references are visible in explorer for a second, then are deleted. In fact, setting MSBuild output to verbose showed me that IncrementalClean was executed, leading me to this issue.\r\n\r\nI did not have any <Content/> files in my referred projects, so this was extremely brutal to track down.\r\n\r\nIn my case, the culprit was FodyWeavers. I used to run `Fody 3.2.9`. After upgrading to `Fody 3.2.13`, the problem started. \r\n\r\nAfter lots of investigation, I found out that the issue started with `Fody 3.2.12` where as with `Fody 3.2.11` it works fine. Symptom is that with `Fody 3.2.12`, the affected referred project always gets rebuilt, causing the issue. That's how I actually found out about Fody in the first place; I went through all projects in my solution, clicking \"rebuild\" and seeing if VS thinks they're up-to-date or are rebuilt. \r\n\r\nIn fact, it seems that this only happens if you're using `Packages.config`. `Fody 3.2.14` fixes this.\r\n\r\nI understand that this comment is not strictly related to the original issue, but as it was extremely hard to track down and during my research I also stumbled over this issue like many others having similar effects, I thought it's valid to publish my findings.",
        "createdAt": "2018-11-23T02:09:58Z",
        "updatedAt": "2018-11-23T02:13:28Z",
        "author": {
          "login": "Drachenkaetzchen"
        }
      },
      {
        "body": "> The proximate cause of this is that the transitive `GetCopyToOutputDirectoryItems` target [doesn't include the indirect content file](https://github.com/rainersigwald/IncrementalCleanDemo/blob/e415ad7a74be41e78d910e424c941f5a9acded28/build-main-project-in-vs-again.log#L4266-L4269) in the latter build, while it [does](https://github.com/rainersigwald/IncrementalCleanDemo/blob/e415ad7a74be41e78d910e424c941f5a9acded28/build-main-project-in-vs.log#L9318-L9325) in the initial, successful build as well as the [successful full command-line build](https://github.com/rainersigwald/IncrementalCleanDemo/blob/7a9717e0aa9fb07ce1769781cf98d866bd5ae290/msbuild-main-project-build-again.log#L9860-L9867).\r\n> \r\n> There's a [very confusing comment](https://github.com/Microsoft/msbuild/blob/e7019886b3fd520b547a7353d78d106d72a4b828/src/XMakeTasks/Microsoft.Common.CurrentVersion.targets#L4091-L4100) for `GetCopyToOutputDirectoryItems` that indicates that it isn't transitive--but clearly sometimes it is.\r\n\r\nThanks, it is worked!)\r\nUnexpected behavior msbuild break my brain)\r\nFor transit copying files is necessary, than in transit project have been at least one file with mark \"Copy if never/Copy always\"\r\n",
        "createdAt": "2018-11-29T10:56:23Z",
        "updatedAt": "2018-11-29T10:56:23Z",
        "author": {
          "login": "pasha-top"
        }
      },
      {
        "body": "Any plans to fix this **critical** issue anytime soon? @rainersigwald?",
        "createdAt": "2019-01-30T14:01:19Z",
        "updatedAt": "2019-01-30T14:01:19Z",
        "author": {
          "login": "superware"
        }
      },
      {
        "body": "Thanks @cclauson \r\n\r\nI used [`Directory.Build.props`](https://docs.microsoft.com/en-us/visualstudio/msbuild/customize-your-build?view=vs-2017) to apply this to all my csproj files at once, without having to edit them. \r\n\r\n```\r\n    <Project>\r\n      <Target \r\n        Name=\"ForceAssignProjectConfigurationBeforeSplitProjectReferencesByFileExistence_KLUDGE\" \r\n        BeforeTargets=\"_SplitProjectReferencesByFileExistence\" \r\n        DependsOnTargets=\"AssignProjectConfiguration\" />\r\n    </Project>\r\n```",
        "createdAt": "2019-02-05T19:50:57Z",
        "updatedAt": "2019-02-05T19:50:57Z",
        "author": {
          "login": "jeremysimmons"
        }
      },
      {
        "body": "Even after trying to apply the target in my top most Directory.Build.props it will still clean out my transitively acquired files from time to time. \r\n\r\nEdit: My situation is only different in that I'm using nuget packages that contain my indirect files. Here's my project structure.\r\n\r\nIndirectLibrary - Using EFCore Sqlite nuget 2.2.3 (outputs x64/x86 e_sqlite3.dlls in bin folder)\r\nDirectLibrary - Using Indirect\r\nGui - Depends on DirectLibrary\r\n\r\nIncremental clean even after the targets kludge doesn't stop IncrementalClean from deleting x64/e_sqlite3.dll and x86/e_sqlite3.dll",
        "createdAt": "2019-05-29T22:02:53Z",
        "updatedAt": "2019-05-30T14:12:05Z",
        "author": {
          "login": "hymccord"
        }
      },
      {
        "body": "I am experiencing essentially the same issue as InKahootz. \r\n\r\nThe issue is happening when an incremental build occurs on a project that does not contain the Nuget dependencies directly. The unmanaged DLLs for some reason are incorrectly removed by the IncrementalClean step -- they should be left alone.",
        "createdAt": "2019-08-22T14:37:02Z",
        "updatedAt": "2019-08-22T14:37:02Z",
        "author": {
          "login": "pratthinds"
        }
      },
      {
        "body": "Assigning to @rainersigwald and 16.5 P1 because it seems it is being fixed by #4865. If that's not the case, we can move this back to backlog and un-assign.",
        "createdAt": "2019-11-04T21:48:10Z",
        "updatedAt": "2019-11-04T21:48:10Z",
        "author": {
          "login": "livarcocc"
        }
      },
      {
        "body": "How and where do I use this fix? I'm still suffering from this problem and I can't find information on the newly introduced `MSBuildCopyContentTransitively `.\r\n\r\nI'm currently working around this issue by adding a dummy content file set to `CopyAlways` to the project that first introduces the content that needs to be copied transitively up the dependency tree. This then causes Visual Studio to always trigger all dependent projects to execute their post build steps etcetera, which prevents this bug from happening.",
        "createdAt": "2020-02-12T15:48:19Z",
        "updatedAt": "2020-02-12T16:20:39Z",
        "author": {
          "login": "chtenb"
        }
      },
      {
        "body": "I'm still experiencing this issue in Visual Studio Version 16.5.4. This issue is closed implying that it should be fixed. @rainersigwald Do I require to make changes to my project structure in order to have this fixed? Or should it work out of the box (which it doesn't, so that would imply I should make a new issue?)",
        "createdAt": "2021-02-18T14:54:36Z",
        "updatedAt": "2021-02-18T14:54:46Z",
        "author": {
          "login": "chtenb"
        }
      },
      {
        "body": "I can also confirm that it is not fixed",
        "createdAt": "2021-05-25T11:59:27Z",
        "updatedAt": "2021-05-25T11:59:27Z",
        "author": {
          "login": "kobbe"
        }
      },
      {
        "body": "It is now possible to opt into reasonable behavior: set the property `MSBuildCopyContentTransitively` to `true` in a `Directory.Build.props` file (or in individual projects--but you probably want this for your whole repo).\r\n\r\nHowever, with 17.0 coming up I think we should go ahead and flip the default to the reasonable behavior. Reopening and moving into that milestone.",
        "createdAt": "2021-05-25T15:17:40Z",
        "updatedAt": "2021-05-25T15:17:40Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "How do you set `MSBuildCopyContentTransitively` to `true` in `Directory.Build.props`? I can't any example.\r\n\r\nI used the solution from https://github.com/dotnet/msbuild/issues/4677 which worked:\r\n\r\n```\r\n<Target Name=\"EnsureContentIsTransitive\"\r\n        DependsOnTargets=\"AssignProjectConfiguration;_SplitProjectReferencesByFileExistence\"\r\n        Condition=\" '$(MSBuildCopyContentTransitively)' == 'true' \" />\r\n```\r\n\r\nEdit: It did not fix it (nor the fix below). I changed so we  do not do incremental builds instead.",
        "createdAt": "2021-05-26T09:57:52Z",
        "updatedAt": "2021-05-27T12:26:30Z",
        "author": {
          "login": "kobbe"
        }
      },
      {
        "body": "@kobbe I guess it would simply be:\r\n\r\n```xml\r\n<Project>\r\n  <PropertyGroup>\r\n    <MSBuildCopyContentTransitively>true</MSBuildCopyContentTransitively>\r\n  </PropertyGroup>\r\n</Project>\r\n```",
        "createdAt": "2021-05-26T18:23:04Z",
        "updatedAt": "2021-05-26T18:23:04Z",
        "author": {
          "login": "kzu"
        }
      },
      {
        "body": "> Another workaround is to flatten your dependency tree: ensure that there are direct ProjectReferences instead of relying on transitive copying behavior.\r\n\r\nTo flatten the project references you can use \r\n```\r\n    <PropertyGroup>\r\n        <DisableTransitiveProjectReferences>true</DisableTransitiveProjectReferences>\r\n    </PropertyGroup>\r\n```\r\nfrom https://github.com/dotnet/sdk/issues/11803\r\n\r\nWith that, all previous transitive references will give you errors, so just add those references explicitly",
        "createdAt": "2021-07-08T14:48:38Z",
        "updatedAt": "2021-07-08T14:49:14Z",
        "author": {
          "login": "jakubsuchybio"
        }
      },
      {
        "body": "@jakubsuchybio if you're _not_ setting that, you already have the dependency tree flattened by default, so you shouldn't hit this issue.",
        "createdAt": "2021-07-08T19:44:55Z",
        "updatedAt": "2021-07-08T19:44:55Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Well, I didn't have it set and it was not flattened, because after setting it a whole lot of projects had missing references. I'm currently in process of fixing rebuilding of the solution of 185+ projects. IncrementalClean doesn't work properly on our resources (images, files, unmanaged dlls, etc). When doing Clean All and then Build All, it works fine, but when trying Rebuild it always fails on some file could not been copied. I tried to discuss it with @KirillOsenkov, but so far with no luck. Maybe it is not IncrementalClean problem, because even when i override it with `<Target Name=\"IncrementalClean\" />` it still fails randomly.",
        "createdAt": "2021-07-09T15:40:53Z",
        "updatedAt": "2021-07-09T15:40:53Z",
        "author": {
          "login": "jakubsuchybio"
        }
      },
      {
        "body": "Feel free to send me a binlog privately and I can take a look",
        "createdAt": "2021-07-09T16:58:51Z",
        "updatedAt": "2021-07-09T16:58:51Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "Related but not the same: https://github.com/dotnet/msbuild/issues/9709",
        "createdAt": "2024-02-03T04:05:19Z",
        "updatedAt": "2024-02-03T04:05:19Z",
        "author": {
          "login": "KirillOsenkov"
        }
      }
    ]
  }
}