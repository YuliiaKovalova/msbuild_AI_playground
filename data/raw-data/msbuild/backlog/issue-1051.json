{
  "number": 1051,
  "title": "Pack3 task conflicts with existing DLLs loaded.",
  "body": "More details coming from @rohit21agrawal \n",
  "state": "CLOSED",
  "createdAt": "2016-09-20T22:06:37Z",
  "updatedAt": "2024-02-21T17:25:49Z",
  "closedAt": "2016-09-22T20:12:03Z",
  "author": {
    "login": "rrelyea"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "1) Install dotnet CLI from https://dotnetcli.blob.core.windows.net/dotnet/Sdk/1.0.0-preview3-003618/dotnet-dev-win-x64.1.0.0-preview3-003618.zip . By installing, i mean extract the downloaded zip into a directory.\n\n2) Run dotnet.exe restore on the attached project\n3) Run dotnet.exe build3 to build the project.\n4) Run dotnet.exe pack3 to pack - this will trigger a missing method exception. \n\nThis is because msbuild.exe loads up the wrong nuget.commands.dll - it should load the nuget.commands.dll from %(UserProfile).nuget\\packages\\nuget.build.tasks.pack\\3.6.0-beta.1.msbuild.10\\build\\netstandard1.3\\nuget.commands.dll\n\ninstead it loads the dll from dotnet-dev-win-x64.1.0.0-preview3-003618\\sdk\\1.0.0-preview3-003618\n\n[NetCoreCsproj.zip](https://github.com/Microsoft/msbuild/files/483736/NetCoreCsproj.zip)\n",
        "createdAt": "2016-09-20T22:34:49Z",
        "updatedAt": "2016-09-20T22:34:49Z",
        "author": {
          "login": "rohit21agrawal"
        }
      },
      {
        "body": "I\u2019ve gone through the repro, and the behavior described is By Design. Since there are two copies of NuGet.Commands.dll with the same identity, MSBuild is free to pick either one. It prefers the one located next to MSBuild.exe since that is generally going to produce better behavior. For example, when we need to load Microsoft.Build.Tasks.Core we really want to get the one that shipped with msbuild.exe, rather than another copy that we just happened to run across. In this particular case, however, this is the wrong choice.\n\nThe good news is that isolating MSBuild in its own directory (rather than mixing it it with all the other binaries in the SDK) should help as the \u201cwrong\u201d version of NuGet.Commands.dll will no longer be available to it.\n\nLong term we might consider isolating each task DLL and its dependencies so that you would be able to load both copies of NuGet.Commands.dll if need be, but that\u2019s tricky to get right. I don\u2019t see it happening in the Dev15 time frame.\n",
        "createdAt": "2016-09-22T20:12:03Z",
        "updatedAt": "2016-09-22T20:12:03Z",
        "author": {
          "login": "tmeschter"
        }
      }
    ]
  }
}