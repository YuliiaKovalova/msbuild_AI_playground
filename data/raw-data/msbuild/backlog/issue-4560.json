{
  "number": 4560,
  "title": ".NET Core Preview 7 - Child node \"2\" exited prematurely / StackOverflow Exception on Build ",
  "body": "# Issue Title\r\n\r\nChild node \"2\" exited prematurely / StackOverflow Exception on Build with .NET Core 3.0 Preview 7 when referencing a WPF Class Library Project from an ASP.NET Core 3.0 Project\r\n\r\n# General\r\n\r\nI have a project which has a shared Class Library Project that uses the Windows Desktop SDK, this library which is used by a WPF Desktop Project (to offer desktop based ui but with functionality in core class library) and a ASP.NET Core Project (to offer web-based ui but re-used all other functionality) and this built in .NET Core 3.0 Preview 6 but does not build in .NET Core 3.0 Preview 7 - this can be easily replicated by creating a Class Library project and modifying the .csproj as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.WindowsDesktop\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp3.0</TargetFramework>\r\n\t<UseWPF>true</UseWPF>\r\n  </PropertyGroup>\r\n</Project>\r\n```\r\n\r\nThen by creating a ASP.NET Core 3.0 Web Application and referencing this library, you don't need to create another project for WPF one as when referenced and built either a **Child node \"2\" exited prematurely** error will occur in **Visual Studio 2019 Preview 4** or a **StackOverflow** when doing **dotnet build** from the command line, this works in .NET Core Preview 6 without any errors but can be reproduced easily with just the two project types mentioned\r\n\r\nHere's an extract from a file that was created during a build but have seen various errors but this one has occurred the most since upgrading Visual Studio 2019 Preview to 16.3.0 Preview 1.0\r\n\r\n```\r\n2019-07-29 08:50:36.654|00006892|\r\nC:\\build\\aria-cpp-v1\\clienttelemetry\\src\\LogManagerImpl.cpp(626): class Microsoft::Applications::Telemetry::ILogger *__thiscall Microsoft::Applications::Telemetry::LogManagerImpl::Initialize(const class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > &,const struct Microsoft::Applications::Telemetry::LogConfiguration &) WARNING: Invalid in-ram queue size (20971520), adjusted to max ram queue size\r\n```",
  "state": "CLOSED",
  "createdAt": "2019-07-29T08:02:10Z",
  "updatedAt": "2024-02-21T17:07:44Z",
  "closedAt": "2019-10-07T20:17:32Z",
  "author": {
    "login": "peter-bull"
  },
  "labels": [
    "Area: Debuggability",
    "Area: Engine",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "MSBuild 16.4"
  },
  "comments": {
    "nodes": [
      {
        "body": "I can confirm this as well. Worked fine in Preview 6.\r\n\r\nAlso, the output window says \"Diagnostic information may be found in files in \"C:\\Users\\Lee.Dumond\\AppData\\Local\\Temp\\\" and will be named MSBuild_*.failure.txt\" but this file is  NOT appearing at all.",
        "createdAt": "2019-07-29T14:26:15Z",
        "updatedAt": "2019-07-29T14:26:15Z",
        "author": {
          "login": "LeeDumond"
        }
      },
      {
        "body": "Thanks for the report! I followed your instructions to create a repro zip: \r\n[msbuild4560.zip](https://github.com/microsoft/msbuild/files/3443020/msbuild4560.zip)\r\n\r\n\r\n```sh-session\r\n$ dotnet build\r\nMicrosoft (R) Build Engine version 16.3.0-preview-19369-03+db6ae5a0d for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 84.2 ms for S:\\repro\\microsoft\\msbuild\\issues\\4560\\WebApp\\WebApp.csproj.\r\n  You are using a preview version of .NET Core. See: https://aka.ms/dotnet-core-preview\r\n  LibWithWpf -> S:\\repro\\microsoft\\msbuild\\issues\\4560\\LibWithWpf\\bin\\Debug\\netcoreapp3.0\\LibWithWpf.dll\r\nStack overflow.\r\n```\r\n\r\nThere are several problems here:\r\n\r\n- [x] The stack overflow that's causing the problem: aspnet/AspNetCore#12693\r\n- [ ] \"Stack overflow\" has no diagnostic information whatsoever.\r\n- [ ] Whatever's causing the worker node crash (not reproduced via `dotnet build WebApp.csproj` in the repro, but reproduced via `dotnet build 4560.sln`)\r\n\r\nI think the latter two are related and caused by poor recovery from a `StackOverflowException`: the process just dies with `COR_E_STACKOVERFLOW` (`0x800703e9`), so we can't catch the exception and handle it to report a graceful error.\r\n\r\nUnder a debugger it's easier to see what's going on: infinite recursion in `Microsoft.NET.Sdk.Razor.Tasks.dll!Microsoft.AspNetCore.Razor.Tasks.ReferenceResolver.Resolve(Microsoft.AspNetCore.Razor.Tasks.ReferenceResolver.ClassifiedAssemblyItem classifiedItem)`. I created aspnet/AspNetCore#12693 to track that with the owners of the relevant task.\r\n\r\nI'm going to leave this open to see if we can do anything in MSBuild to make this more obvious, but I'm not optimistic at the moment since we were killed by the CLR when encountering the stack overflow.\r\n\r\n",
        "createdAt": "2019-07-29T16:15:40Z",
        "updatedAt": "2019-08-26T15:57:29Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Team triage: if anybody has a great idea for something concrete to do in this case, we can reactivate, but closing for now since we don't think there's a good way to recover from `StackOverflowException`.",
        "createdAt": "2019-10-07T20:17:32Z",
        "updatedAt": "2019-10-07T20:17:32Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}