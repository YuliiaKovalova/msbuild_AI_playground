{
  "number": 2811,
  "title": "MSBuild-task equivalent of \"msbuild.exe /restore /t:Target\"",
  "body": "https://github.com/Microsoft/msbuild/pull/2414 added support for `msbuild /restore /t:Target` which executes `/t:Restore` in a new build context before invoking `/t:Target`.\r\n\r\nIs it possible to perform the same behavior from the MSBuild task?\r\n\r\nFor example, i'd love to be able to do this\r\n```xml\r\n<Project>\r\n  <Target Name=\"CiBuild\">\r\n      <MSBuild Projects=\"MyProj.sln\"\r\n               Targets=\"Build\"\r\n               Restore=\"true\" />\r\n   </Target>\r\n</Project>\r\n```\r\n\r\ncc @jeffkl ",
  "state": "OPEN",
  "createdAt": "2017-12-15T00:57:39Z",
  "updatedAt": "2024-02-21T16:35:12Z",
  "closedAt": null,
  "author": {
    "login": "natemcmaster"
  },
  "labels": [
    "Feature Request",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "At this time, it is not possible to do this.  The logic for `/restore` is pretty proprietary to `MSBuild.exe` while the `<MSBuild />` task is using a completely different code path.  That said, anything is possible, however we do not currently have plans to implement this.",
        "createdAt": "2017-12-15T15:52:32Z",
        "updatedAt": "2017-12-15T15:52:32Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "That's what I feared, after taking a cursory glance at #2414. ",
        "createdAt": "2017-12-15T21:28:30Z",
        "updatedAt": "2017-12-15T21:28:30Z",
        "author": {
          "login": "natemcmaster"
        }
      },
      {
        "body": "Can you just turn that into two `MSBuild` task invocations and set different global properties? `Targets=\"Restore\" Properties=\"IsRestoring=true\"` then call `Build`.",
        "createdAt": "2017-12-16T05:29:44Z",
        "updatedAt": "2017-12-16T05:29:44Z",
        "author": {
          "login": "AndyGerlicher"
        }
      },
      {
        "body": "That's what we've done in the past to force project re-evaluation after restore. The main problem with that is mostly usability. It's not immediately obvious to devs new writing MSBuild--or even experienced ones--why you need separate MSBuild-task invocations, and why you need a \"dummy\" property on the restore one. ",
        "createdAt": "2017-12-16T06:47:19Z",
        "updatedAt": "2017-12-16T06:47:19Z",
        "author": {
          "login": "natemcmaster"
        }
      },
      {
        "body": "For CI projects, I've been moving them to having an explicit `Restore` target in them so I can call them through `msbuild /restore ci-build.proj` or just `dotnet build ci-build.proj`.\r\nhttps://gist.github.com/dasMulli/fdc9bf5c433175f8feb638d3eed41b68",
        "createdAt": "2017-12-16T07:44:18Z",
        "updatedAt": "2017-12-16T07:44:18Z",
        "author": {
          "login": "dasMulli"
        }
      },
      {
        "body": "> The main problem with that is mostly usability. It's not immediately obvious to devs new writing MSBuild--or even experienced ones--why you need separate MSBuild-task invocations, and why you need a \"dummy\" property on the restore one.\r\n\r\n+100 and TIL that it's not correct either. I'll let @rainersigwald explain why. ;)",
        "createdAt": "2018-04-24T00:51:38Z",
        "updatedAt": "2018-04-24T00:51:38Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "The reason it's not sufficient to use a global property is that MSBuild maintains a [ProjectRootElementCache](https://github.com/Microsoft/msbuild/blob/c448729511f1d9c62ff5fba5aa18bcc3ad4e31af/src/Build/Evaluation/ProjectRootElementCache.cs) of the parsed XML of imported files. It's there for performance (it would be slow and unnecessary to load `Microsoft.Common.CurrentVersion.targets` for every project in your build) but _also_ for consistency, ensuring that if you edit a common import mid-build you don't have half of your projects with the old version and half with the new version.\r\n\r\nSelf-contained demo of the problem:\r\n\r\n```csproj\r\n<Project DefaultTargets=\"Build\">\r\n <PropertyGroup>\r\n  <Import>import.props</Import>\r\n </PropertyGroup>\r\n\r\n <Import Project=\"$(Import)\" Condition=\"Exists($(Import))\" />\r\n\r\n <PropertyGroup>\r\n  <ReadValue Condition=\"'$(ReadValue)' == ''\">0</ReadValue>\r\n </PropertyGroup>\r\n\r\n\r\n <Target Name=\"Restore\">\r\n  <PropertyGroup>\r\n   <WriteValue>$([MSBuild]::Add($(ReadValue), 1))</WriteValue>\r\n </PropertyGroup>\r\n  <ItemGroup>\r\n   <IncludeLines Include=\"&lt;Project&gt;\" />\r\n   <IncludeLines Include=\" &lt;PropertyGroup&gt;\" />\r\n   <IncludeLines Include=\"  &lt;ReadValue&gt;$(WriteValue)&lt;/ReadValue&gt;\" />\r\n   <IncludeLines Include=\" &lt;/PropertyGroup&gt;\" />\r\n   <IncludeLines Include=\"&lt;/Project&gt;\" />\r\n  </ItemGroup>\r\n\r\n  <WriteLinesToFile File=\"$(Import)\"\r\n                    Lines=\"@(IncludeLines)\"\r\n                    Overwrite=\"true\" />\r\n\r\n  <Message Importance=\"High\" Text=\"Wrote value: $(WriteValue)\" />\r\n </Target>\r\n\r\n <Target Name=\"Build\">\r\n  <Message Importance=\"High\" Text=\"Read value: $(ReadValue)\" />\r\n </Target>\r\n\r\n <Target Name=\"BuildWithDifferentGlobalProperties\">\r\n  <MSBuild Projects=\"$(MSBuildThisFileFullPath)\"\r\n           Targets=\"Restore\"\r\n           Properties=\"_DummyProperty=Restore\" />\r\n  <MSBuild Projects=\"$(MSBuildThisFileFullPath)\"\r\n           Targets=\"Build\"\r\n           Properties=\"_DummyProperty=Build\" />\r\n </Target>\r\n</Project>\r\n```\r\n\r\n```\r\ns:\\repro\\Microsoft\\msbuild\\issues\\2811>msbuild /nologo /v:m demo-global-props-insufficient.proj /t:Build;Restore\r\n  Read value: 0\r\n  Wrote value: 1\r\n\r\ns:\\repro\\Microsoft\\msbuild\\issues\\2811>msbuild /nologo /v:m demo-global-props-insufficient.proj /t:Build;Restore\r\n  Read value: 1\r\n  Wrote value: 2\r\n\r\ns:\\repro\\Microsoft\\msbuild\\issues\\2811>msbuild /nologo /v:m demo-global-props-insufficient.proj /t:BuildWithDifferentGlobalProperties\r\n  Wrote value: 3\r\n  Read value: 2\r\n\r\ns:\\repro\\Microsoft\\msbuild\\issues\\2811>msbuild /nologo /v:m demo-global-props-insufficient.proj /t:BuildWithDifferentGlobalProperties\r\n  Wrote value: 4\r\n  Read value: 3\r\n\r\ns:\\repro\\Microsoft\\msbuild\\issues\\2811>msbuild /nologo /v:m demo-global-props-insufficient.proj /restore /t:Build\r\n  Wrote value: 5\r\n  Read value: 5\r\n\r\ns:\\repro\\Microsoft\\msbuild\\issues\\2811>msbuild /nologo /v:m demo-global-props-insufficient.proj /restore /t:Build\r\n  Wrote value: 6\r\n  Read value: 6\r\n```\r\n\r\nI'm not totally sure I buy the consistency argument for requiring the cache within a build, but I also don't know how to validate that relaxing it _won't_ break some VS customer somewhere.",
        "createdAt": "2018-04-24T21:50:37Z",
        "updatedAt": "2018-04-24T21:50:37Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "We had a bug for that I just ran across: https://github.com/Microsoft/msbuild/issues/1185, including a case where the \"snapshot\" behavior is required for correctness.",
        "createdAt": "2018-05-01T15:10:05Z",
        "updatedAt": "2018-05-01T15:10:05Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Any update on this issue? Is there a good workaround?",
        "createdAt": "2018-10-24T07:49:03Z",
        "updatedAt": "2018-10-24T07:49:03Z",
        "author": {
          "login": "msshapira"
        }
      },
      {
        "body": "Just wanted to say that I have wasted 2 days of time because `/t:restore;build` does not work reliably, before coming across this amazing comment https://github.com/Microsoft/msbuild/issues/3000#issuecomment-417675215 Judging by queries on Stack Overflow I am not the only one. Incidentally, I have not seen this documented anywhere in the official docs.\r\n\r\nThe suggested workaround of using `/restore` did not work either, I had to add a specific old-style build step of calling `nuget.exe` to do the restore. This was on a Bamboo CI server.\r\n\r\nIf `/t:restore`  and `/restore` cannot be made to work properly then you should remove them or print out a message recommending alternatives and then fail the build. At least that way people won't waste their time.\r\n",
        "createdAt": "2019-01-11T09:28:25Z",
        "updatedAt": "2019-01-11T09:28:25Z",
        "author": {
          "login": "PhilipDaniels"
        }
      },
      {
        "body": "@PhilipDaniels the problem is /t:restore **DOES** work properly; however it must be **the only task called** during that process; /t:restore;build **DOES NOT** work.\r\n\r\nThat is why we have several tasks that look like this:\r\n\r\n```xml\r\n  <Target Name=\"TIMSNETNuGetRestore\" DependsOnTargets=\"GetTIMSNETSolution\">\r\n    <Message Text=\"Restoring NuGet Packages for TIMSNET\" Importance=\"high\"/>\r\n\r\n    <!-- You're going to be super temped to combine this with BuildTIMSNET -->\r\n    <!-- However you cannot because of bugs in the context; see the common -->\r\n    <!-- \"Restore\" target in ComputersUnlimited.Build.All.msbuild          -->\r\n    <MSBuild\r\n      Projects=\"@(ProjectsToBuild)\"\r\n      Properties=\"PostBuildEvent=\"\r\n      Targets=\"Restore\"\r\n      BuildInParallel=\"true\" />\r\n  </Target>\r\n```\r\n\r\nAnd its caller\r\n\r\n```xml\r\n  <!--**********************************************************************-->\r\n  <!--* Restore (DO NOT CHANGE THIS NAME)                                  *-->\r\n  <!--*   This is the target that will be executed in its own context when *-->\r\n  <!--* you do an \"msbuild /restore\" and this is where all of the NuGet    *-->\r\n  <!--* packages should be restored.                                       *-->\r\n  <!--*                                                                    *-->\r\n  <!--* See the Following:                                                 *-->\r\n  <!--*    - https://github.com/Microsoft/msbuild/issues/2811              *-->\r\n  <!--*    - https://github.com/Microsoft/msbuild/issues/3000              *-->\r\n  <!--*      Specifically the @aolszowka comments                          *-->\r\n  <!--**********************************************************************-->\r\n  <Target Name=\"Restore\">\r\n    <CallTarget Targets=\"TIMSNETNuGetRestore\" />\r\n  </Target>\r\n```",
        "createdAt": "2019-01-11T14:16:09Z",
        "updatedAt": "2019-01-11T14:16:09Z",
        "author": {
          "login": "aolszowka"
        }
      },
      {
        "body": "> The suggested workaround of using `/restore` did not work either, I had to add a specific old-style build step of calling `nuget.exe` to do the restore. This was on a Bamboo CI server.\r\n\r\n@PhilipDaniels Can you please open a new issue describing what you did and what went wrong? That's expected to work.",
        "createdAt": "2019-01-11T22:14:45Z",
        "updatedAt": "2019-01-11T22:14:45Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> > The suggested workaround of using `/restore` did not work either, I had to add a specific old-style build step of calling `nuget.exe` to do the restore. This was on a Bamboo CI server.\r\n> \r\n> @PhilipDaniels Can you please open a new issue describing what you did and what went wrong? That's expected to work.\r\n\r\n@rainersigwald Done https://github.com/Microsoft/msbuild/issues/4071",
        "createdAt": "2019-01-14T10:07:00Z",
        "updatedAt": "2019-01-14T10:07:00Z",
        "author": {
          "login": "PhilipDaniels"
        }
      },
      {
        "body": "@rainersigwald @AndyGerlicher @jeffkl \r\n\r\n> At this time, it is not possible to do this. The logic for /restore is pretty proprietary to MSBuild.exe while the <MSBuild /> task is using a completely different code path. That said, anything is possible, however we do not currently have plans to implement this.\r\n\r\nAre we now, three years later, in a better position to support this? I just stumbled upon this as I was trying to avoid an unnecessary glob (which matters in large repos like dotnet/runtime).",
        "createdAt": "2020-03-05T14:45:18Z",
        "updatedAt": "2020-03-05T14:45:18Z",
        "author": {
          "login": "ViktorHofer"
        }
      },
      {
        "body": "@ViktorHofer No, the essential complexity remains. Can you elaborate on your \"unnecessary glob\" scenario? I don't see how that ties in to this.",
        "createdAt": "2020-03-05T15:23:58Z",
        "updatedAt": "2020-03-05T15:23:58Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@jeffkl @AndyGerlicher why is setting `IsRestoring` property needed? Where is it used?",
        "createdAt": "2023-01-03T05:45:10Z",
        "updatedAt": "2023-01-03T05:45:10Z",
        "author": {
          "login": "miloszkukla"
        }
      },
      {
        "body": "@miloszkukla MSBuild caches the evaluation of a project (all of the properties and items, etc) in memory for efficiency purposes.  When a restore is run, MSBuild evaluates everything first, NuGet reads everything, and runs a restore.  The restore itself can inject build logic and alter properties and items.  You don't want the project evaluation (all of properties and items, etc) from _before_ the restore to be used during the actual build because the restore might have made the project buildable.  To work around this, you must use a new evaluation of a project for the build.  The caching mechanism in MSBuild is based on the set of global properties.  So if you load a project with a global property \"PropertyA=One\" and then the same project with \"PropertyA=Two\", MSBuild will evaluate everything twice.  If you load the same project with the same global properties, the same property and items values are just fetched from the cache.\r\n\r\nSo setting any random global property for the restore is just a way to make sure that the evaluation of those properties is not re-used by the build and instead a new evaluation is run. ",
        "createdAt": "2023-01-04T17:03:20Z",
        "updatedAt": "2023-01-04T17:03:20Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "(When I try to build any other project my msbuild wants to restore the `gdal/build/swig/csharp` build which no longer exists.)\r\n\r\n> MSBuild caches the evaluation of a project (all of the properties and items, etc) in memory for efficiency purposes. When a restore is run, MSBuild evaluates everything first [..]\r\n\r\n@jeffkl Where are these settings stored and how may I completely reset the projects to restore?",
        "createdAt": "2023-07-14T21:51:25Z",
        "updatedAt": "2023-07-14T21:51:32Z",
        "author": {
          "login": "meerfrau"
        }
      }
    ]
  }
}