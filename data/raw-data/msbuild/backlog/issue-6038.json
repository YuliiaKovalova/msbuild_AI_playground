{
  "number": 6038,
  "title": "16.8 Project References issues with combination old and new csproj version",
  "body": "This is an issue copied from https://dev.azure.com/devdiv/DevDiv/_workitems/edit/1246579:\r\n\r\nWe upgrade our build servers to 16.8 , and had initially issues with the Nuget 5.8.0 demand thingy. That worked out but now to the next issue.\r\n\r\n\r\nWe have one .NET Standard 2.0 project with the new csproj format, that references a old-style csproj format project with a target of .NET 4.6.1. That 4.6.1 project has a couple of other project references that should\u2019ve been inherited.\r\n\r\n\r\nThis is how it should look in Visual Studio:\r\n\r\n! [bild.png] (https://aka.ms/dc/image?name=Bf8e8948a17544e5db3cafd81c768557a637408943276071043_20201113-205846-bild.png&tid=f8e8948a17544e5db3cafd81c768557a637408943276071043)\r\n\r\n\r\nThis is how it looks when I open the solution on the build server, with 16.8(.1):\r\n\r\n\r\n! [bild.png] (https://aka.ms/dc/image?name=Bc6ee6022f14f495fa7b137f758612a91637408944442751268_20201113-210043-bild.png&tid=c6ee6022f14f495fa7b137f758612a91637408944442751268)\r\n\r\n\r\nAs you see the inherited project references is not there and therefore the build fails.\r\n\r\n\r\nHowever, if I open the same project as Administrator, then it works flawlessly. But that is not a solution, since the \u201cVisual Studio Build\u201d task in Azure DevOps Server 2019 can\u2019t do that as far as I know.\r\n\r\n\r\nOne solution is to migrate all packages to the new csproj format, but doing that for 50+ packages is not a fun task when it should work as it did before in Visual Studio directly.",
  "state": "CLOSED",
  "createdAt": "2021-01-15T00:04:46Z",
  "updatedAt": "2024-02-21T17:02:00Z",
  "closedAt": "2021-01-15T15:48:39Z",
  "author": {
    "login": "Forgind"
  },
  "labels": [
    "bug",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Backlog"
  },
  "comments": {
    "nodes": [
      {
        "body": "Workaround:\r\nI tried for a couple of days was not able to recreate a project that didn't have sensitive information within it, so wasn't able to create that binary log.\r\n\r\nHowever, I did solve the problem by doing some more project references.\r\n\r\nPreviously:\r\n\r\nProject A -> Project B -> Project C\r\nNow:\r\n\r\nProject A -> Project B\r\nProject A -> Project C\r\n\r\nProject A was using features from Project C, and honestly, I do not know if it should've even been possible to use those features without referencing that project directly, but it did work for us previously. All this was from a solution with 51 projects, where the first projects was created about 10 years ago and parts of it have migrated and parts have not. So my guess is that the solution we built had remnants from 20+ different Visual Studio versions.",
        "createdAt": "2021-01-15T00:05:51Z",
        "updatedAt": "2021-01-15T00:05:51Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "Repro:\r\nI've encountered what appears to be the same issue and have repro steps (a repro solution is also attached below).\r\nCreate a .NET Framework class library using the old project format (Project C).\r\nCreate another .NET Framework class library using the old project format (Project B). Add Project C as a reference to Project B.\r\nAdd any NuGet package to Project B using the old packages.config format.\r\nCreate a .NET Standard class library (Project A). Add Project B as a reference to Project A. So the references should go Project A -> Project B -> Project C.\r\nIn a class in Project A reference a class from Project C\r\nCompile from the command line with the -restore option and you will get error CS0246 because Project A can't find Project C.\r\nIf you open Visual Studio the dependency tree under Project A won't show the child dependency similar to the image the original poster showed and if you open the class in Project A intellisense may show you the CS0246 error. If you build the solution in Visual Studio, however, it will resolve issues.\r\nRepro solution: [dotnet5buildissue.zip](https://developercommunity.visualstudio.com/storage/temp/165409-dotnet5buildissue.zip)\r\n\r\nThe problem seems to stem from the NuGet restore not building the dependency graph correctly when a project using the PackageReference format references a project using the packages.config format.\r\n\r\nAn easier workaround than converting to the new csproj format is to just migrate the references to the new PackageReference format.",
        "createdAt": "2021-01-15T00:06:28Z",
        "updatedAt": "2021-01-15T00:06:28Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "This issue appears to have been fixed with the Visual Studio 2019 version 16.8.4 release.\r\n\r\n\"Transitive project references are now respected when a PackageReference projects references packages.config projects with PackageReference dependencies.\"",
        "createdAt": "2021-01-15T15:32:02Z",
        "updatedAt": "2021-01-15T15:32:02Z",
        "author": {
          "login": "King42"
        }
      },
      {
        "body": "Ah, great! Thanks!",
        "createdAt": "2021-01-15T15:48:39Z",
        "updatedAt": "2021-01-15T15:48:39Z",
        "author": {
          "login": "Forgind"
        }
      }
    ]
  }
}