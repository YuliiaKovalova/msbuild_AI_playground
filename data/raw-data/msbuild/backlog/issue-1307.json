{
  "number": 1307,
  "title": "Include .config file when copying output files of a dependent project ",
  "body": "Consider scenario where project A references project B and project B has an App.config file. The build copies .dll/.exe and .pdb files of B to the output directory of A, but doesn't currently copy .dll.config/.exe.config files that may contain binding redirects and other configuration.\r\n\r\nI propose the build copies the configuration file as well, so that binding redirects are not lost. Since the latest CoreFX binaries heavily rely on presence of binding redirects having binding redirects flow seamlessly thru build system is becoming more and more important.",
  "state": "CLOSED",
  "createdAt": "2016-11-03T19:25:23Z",
  "updatedAt": "2024-02-21T17:24:33Z",
  "closedAt": "2016-12-07T20:08:15Z",
  "author": {
    "login": "tmat"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "jeffkl"
      }
    ]
  },
  "milestone": {
    "title": "MSBuild 15.1 RC.3"
  },
  "comments": {
    "nodes": [
      {
        "body": "/cc @ericstj \n",
        "createdAt": "2016-11-03T19:25:40Z",
        "updatedAt": "2016-11-03T19:25:53Z",
        "author": {
          "login": "tmat"
        }
      },
      {
        "body": "I think you can override this behavior by setting AllowedReferenceRelatedFileExtensions.\n\nIt sounds like @tmat is suggesting to add .config to [this list](https://github.com/Microsoft/msbuild/blob/fd25bc9c7deb56dbfe51621afb1021056f410241/src/XMakeTasks/Microsoft.Common.CurrentVersion.targets#L578-L582).\n",
        "createdAt": "2016-11-03T19:28:44Z",
        "updatedAt": "2016-11-03T19:28:44Z",
        "author": {
          "login": "ericstj"
        }
      },
      {
        "body": "Be aware that binding redirects are only loaded from the initial program's app.config.  For example, if you have `foo.exe` and `foo.exe.config` which loads `bar.dll`, the .NET Framework will not look for redirects within a `bar.dll.config`.  If `foo.exe` launches a `bar.exe` in a separate process, the binding redirects will be loaded.  I'm not sure from your example if you have EXEs referencing DLLs or other EXEs.\n\nAlso, if `bar.dll` has logic to read the config file using the standard API calls, it will be given the `foo.exe.config`.\n\n``` C#\nvar mySetting = ConfigurationManager.AppSettings[\"mysetting\"];\n```\n\nIf `bar.dll` has the logic to manually load it's own app.config, it can get to all of it's settings:\n\n``` C#\nvar appConfig = ConfigurationManager.OpenExeConfiguration(Assembly.GetExecutingAssembly().Location);\nvar mySetting = appConfig.AppSettings[\"mysetting\"];\n```\n\nBut again, binding redirects are only loaded from the initial `.exe.config` and as far as I know, there is no way for a class library to provide assembly redirects to its callers.  I think this is why the app.config was left out of the list of dependencies to copy.  But as @ericstj has said, you can easily add to the list in your project A.\n\n``` xml\n<AllowedReferenceRelatedFileExtensions>\n    .pdb;\n    .xml;\n    .pri;\n    .config\n</AllowedReferenceRelatedFileExtensions>\n```\n",
        "createdAt": "2016-11-03T19:41:41Z",
        "updatedAt": "2016-11-03T19:41:41Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "> Be aware that binding redirects are only loaded from the initial program's app.config. For example, if you have foo.exe and foo.exe.config which loads bar.dll, the .NET Framework will not look for redirects within a bar.dll.config.\n\nIt is true that .NET assembly binder only uses .exe.config, however other frameworks (like unit testing frameworks including xunit) do load binding redirects from .dll.config files next to unit test .dlls.\n\nAlso in some scenario a project adds a reference to another project in order to get the .exe copied to the output directory and then call create process on it.\n",
        "createdAt": "2016-11-03T20:24:29Z",
        "updatedAt": "2016-11-03T20:27:40Z",
        "author": {
          "login": "tmat"
        }
      },
      {
        "body": "I propose we add .dll.config and .exe.config to those extensions by default. \n",
        "createdAt": "2016-11-03T20:25:43Z",
        "updatedAt": "2016-11-03T20:25:43Z",
        "author": {
          "login": "tmat"
        }
      },
      {
        "body": "> binding redirects are only loaded from the initial .exe.config and as far as I know,\n\nBindingRedirects will be loaded from whichever config was configured for the AppDomain.  Most well behaved plugin hosts will provide a convention like `.dll.config` for plugins to specify their own config file.  Azure, MSTest, Xunit all do this.  MSBuild does not \ud83d\ude09 \n",
        "createdAt": "2016-11-03T21:48:18Z",
        "updatedAt": "2016-11-03T21:48:18Z",
        "author": {
          "login": "ericstj"
        }
      },
      {
        "body": "Can you point us to where these other systems do binding redirects for plugins?  I'd love to know more.\n",
        "createdAt": "2016-11-03T21:57:19Z",
        "updatedAt": "2016-11-03T21:57:19Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "What are you looking for?  The APIs they call?  I believe it's AppDomainSetup.ConfigurationFile but it's been a while since I looked at the code.   You can probably reach out to MSTest folks, Azure SDK, or go poke around the Xunit repo (keeping license in mind of course).\n",
        "createdAt": "2016-11-04T00:06:30Z",
        "updatedAt": "2016-11-04T00:06:30Z",
        "author": {
          "login": "ericstj"
        }
      },
      {
        "body": "It's important to note that MSBuild does not by default create a new AppDomain for task assemblies.\n",
        "createdAt": "2016-11-04T00:09:11Z",
        "updatedAt": "2016-11-04T00:09:11Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I'll start by saying that this is a bit of a tangent for this issue on related files.  Let me know if you have a better issue to move this discussion.\n\n> It's important to note that MSBuild does not by default create a new AppDomain for task assemblies.\n\nNoted: MSBuild has an architecture that prevents people from using the package ecosystem in .NET.  I understand this was done for performance, but sometimes you need an option that favors correctness at the expense of performance.\n\n@tmat and I were discussing the other day that it probably makes more sense for MSBuild to hook AssemblyResolve.  That way tasks don't have to worry about binding redirects.  You'd still hit issues with ordering where you encounter a task early that loads an older version of a library than one needed by a later task, but at least it would handle a common case where folks have conflicts within a task.  Right now tasks [themselves](https://github.com/dotnet/buildtools/blob/master/src/common/AssemblyResolver.cs) have to deal with this.  Other ideas: If you have a complete view of all task directories you could unify up front for all possible assemblies.  If you don't have a complete view you could do a look when you're about to instantiate a task to determine if it would have a conflict and open a new app domain if it would.\n",
        "createdAt": "2016-11-04T07:43:37Z",
        "updatedAt": "2016-11-04T07:43:37Z",
        "author": {
          "login": "ericstj"
        }
      },
      {
        "body": "> MSBuild has an architecture that prevents people from using the package ecosystem in .NET. I understand this was done for performance, but sometimes you need an option that favors correctness at the expense of performance.\n\nI don't think this is a fair characterization. The task-loading mechanisms were designed without consideration for the package ecosystem in .NET because they were designed over a decade ago and that ecosystem didn't exist then.\n\nIt's entirely reasonable to ask for improvements now that it _does_ exist. Let's move that discussion to #1312.\n",
        "createdAt": "2016-11-04T15:08:26Z",
        "updatedAt": "2016-11-04T15:08:26Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "WRT the subject of this issue, including .config sounds reasonable. My only concern is that it might be nice to be able to restrict it to `.dll.config` and `.exe.config` to avoid accidentally vacuuming up unrelated files.\n\n@tmat \n\n> Since the latest CoreFX binaries heavily rely on presence of binding redirects\n\nThis is news to me. Is there documentation on what's changing here available somewhere? Or a couple of key PRs for me to educate myself?\n",
        "createdAt": "2016-11-04T15:13:40Z",
        "updatedAt": "2016-11-04T15:13:40Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald +1 for .dll.config and .exe.config. That's what I ended up doing in a global .targets of Roslyn project file: https://github.com/dotnet/roslyn/pull/14879/commits/1977e1daa7bb541b73e218d1cfe01e983d4666df\n\n@ericstj Might be able to point out any documentation there is. I don't think there is much. It just simply happened as a side effect of some versioning decisions. It is not uncommon for packages to expose version `X.Y.Z.0` in `ref\\netstandard1.3` directory while the implementation assembly in `lib\\net46` or the assembly shipping in .NET FX 4.6.\\* is actually `X.Y.Z'.0` where `Z' < Z`.  \n",
        "createdAt": "2016-11-04T16:57:00Z",
        "updatedAt": "2016-11-04T16:58:58Z",
        "author": {
          "login": "tmat"
        }
      },
      {
        "body": "Ah, conveniently the list of extensions would be happy to have the double-extension part: https://github.com/Microsoft/msbuild/blob/master/src/XMakeTasks/AssemblyDependency/ReferenceTable.cs#L868-L878\n\n(I was a bit worried that we were calling `Path.GetExtension` somewhere which would have returned just `.config`.)\n",
        "createdAt": "2016-11-04T17:30:58Z",
        "updatedAt": "2016-11-04T17:30:58Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@krwq @piotrpMSFT @dsplaisted \n",
        "createdAt": "2016-11-10T21:15:32Z",
        "updatedAt": "2016-11-10T21:15:32Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "> @tmat and I were discussing the other day that it probably makes more sense for MSBuild to hook AssemblyResolve. That way tasks don't have to worry about binding redirects. \r\n\r\nWhy would we prefer this route vs. the route taken by Visual Studio?  Visual Studio has a similar style extension environment and approaches the problem by essentially dictating the version of .Net Standard it will run in it's process.  It then sets up the binding redirects appropriately.  \r\n\r\nThis means that in order for an extension to run correctly in Visual Studio it simply needs to use a version of Net Standard which is compatible with that of Visual Studio.  The global binding redirects take care of all the nasty resolve issues.  Extensions really don't have to worry about the redirects.  \r\n\r\n",
        "createdAt": "2016-12-05T23:01:06Z",
        "updatedAt": "2016-12-05T23:01:06Z",
        "author": {
          "login": "jaredpar"
        }
      },
      {
        "body": "The team discussed this and weren't quite completely for or against it.  We decided to error on the side of user request so I've sent a PR to include `.config` files.",
        "createdAt": "2016-12-05T23:07:16Z",
        "updatedAt": "2016-12-05T23:07:16Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "@jaredpar VS also has binding redirects in devenv.config file. Packages can define additional binding redirects that get merged into devenv.config.",
        "createdAt": "2016-12-05T23:11:12Z",
        "updatedAt": "2016-12-05T23:11:12Z",
        "author": {
          "login": "tmat"
        }
      },
      {
        "body": "@tmat i'm not sure the merging would have any value for MSBuild.\r\n\r\nThe value of merging in Visual Studio is so that different extensions can have a coherent view of their dependencies.  It allows extensions to deploy / override shared components in their VSIX and ensure that others extensions see the new version as well.  That's valuable in Visual Studio because extensions often communicate using shared assets.\r\n\r\nThat's not the case in MSBuild.  Extensions are pretty much independent and don't really communicate directly with each other.  Hence I don't see a lot of value in merging the config files. \r\n\r\n",
        "createdAt": "2016-12-05T23:44:14Z",
        "updatedAt": "2016-12-05T23:44:14Z",
        "author": {
          "login": "jaredpar"
        }
      },
      {
        "body": "@jaredpar Good point.",
        "createdAt": "2016-12-05T23:51:17Z",
        "updatedAt": "2016-12-05T23:51:17Z",
        "author": {
          "login": "tmat"
        }
      },
      {
        "body": "@jaredpar Although, suppose there is an extension that depends on a library A that depends on a library B and the extension also depends on library B but newer version. Then the extension itself needs binding redirect for B.",
        "createdAt": "2016-12-05T23:52:33Z",
        "updatedAt": "2016-12-05T23:52:33Z",
        "author": {
          "login": "tmat"
        }
      },
      {
        "body": "@tmat they shouldn't if each extension deploys the library separately + it has a strong name.  In that case the \"Load From\" context rules should cause everything to work.  In each case the CLR logic should essentially be the following:\r\n\r\n1. Is the assembly loaded?  If yes then done\r\n2. Can the assembly be loaded by the primary load context?  If yes then done\r\n3. Can the assembly be loaded from the directory that established the Load From context.\r\n\r\nIn the end this should cause the assembly to be loaded twice into the application: one copy from each extension directory. \r\n\r\nI actually recently had to debug this exact case in Visual Studio for loading Microsoft.ApplicationInsights :) ",
        "createdAt": "2016-12-05T23:57:42Z",
        "updatedAt": "2016-12-05T23:57:42Z",
        "author": {
          "login": "jaredpar"
        }
      },
      {
        "body": "I meant the case where there is a single extension, not multiple extensions. \r\n\r\n```\r\nMyExtension -> LibA -> LibB (v1)\r\nMyExtension -> LibB (v2)\r\n```\r\n\r\nLibB v1 needs to be redirected to v2. The directory where MyExtension is installed will have LibA and LibB (v2).",
        "createdAt": "2016-12-06T00:00:24Z",
        "updatedAt": "2016-12-06T00:01:49Z",
        "author": {
          "login": "tmat"
        }
      },
      {
        "body": "@tmat gotcha.  In that case yes they need to deal with assembly resolution in some way. ",
        "createdAt": "2016-12-06T00:01:56Z",
        "updatedAt": "2016-12-06T00:01:56Z",
        "author": {
          "login": "jaredpar"
        }
      },
      {
        "body": "This change appears to have broken several customers:\r\n\r\nhttps://developercommunity.visualstudio.com/content/problem/29031/dll-appconfig-being-built-in-vs-2017.html\r\nhttps://developercommunity.visualstudio.com/content/problem/19696/vs-always-copies-all-appconfig-files-to-output-fol.html\r\nhttps://developercommunity.visualstudio.com/content/problem/197297/class-library-config-files-included-with-client-ap.html\r\n\r\n# How to opt out\r\n\r\nDefine a property in your project\r\n\r\n```xml\r\n<!-- Redefine this list without .dll.config; see https://github.com/Microsoft/msbuild/issues/1307 -->\r\n<AllowedReferenceRelatedFileExtensions>.pdb;.xml;.pri</AllowedReferenceRelatedFileExtensions>\r\n```\r\n\r\nThat will prevent `*.dll.config` and `*.exe.config` from being copied.\r\n\r\nNote that doing this overrides a property defined in common targets, so it may cause problems in the future if the default list changes (to something that you do want).",
        "createdAt": "2018-02-13T19:46:37Z",
        "updatedAt": "2018-02-13T19:46:37Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald Just to add to the problems that occurred due to this change. In my case this change lead to config files suddenly being included (mostly used for EntityFramework 6 connection strings) which contained sensitive connection strings not meant to be deployed with the main executable.\r\n\r\nI recon this is a common occurrence when updating old projects since EF6 creates the app.config and those are often used for internal connection strings (for migrations or tests). This could possibly be a security issue.\r\n\r\nIs there any (security?) guidance that warns of that change in the documentation for breaking changes?",
        "createdAt": "2023-02-02T08:29:55Z",
        "updatedAt": "2023-02-02T08:30:54Z",
        "author": {
          "login": "ChristophHornung"
        }
      }
    ]
  }
}