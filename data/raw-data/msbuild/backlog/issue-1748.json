{
  "number": 1748,
  "title": "Out of proc nodes can end up using stale project evaluation data",
  "body": "The following failing test mimics a codepath in CPS:\r\n```c#\r\n        [Fact]\r\n        public void Test()\r\n        {\r\n            var mainProjectContents =\r\n@\"<Project>\r\n\r\n  <Target Name=\"\"BuildOther\"\" Outputs=\"\"@(ReturnValue)\"\">\r\n    <MSBuild Projects=\"\"{0}\"\" Targets=\"\"Foo\"\">\r\n      <Output TaskParameter=\"\"TargetOutputs\"\" ItemName=\"\"ReturnValue\"\" />\r\n    </MSBuild>\r\n  </Target>\r\n\r\n</Project>\";\r\n\r\n\r\n            var p2pProjectContents =\r\n@\"<Project>\r\n  <PropertyGroup>\r\n    <P>InitialValue</P>\r\n  </PropertyGroup>\r\n\r\n  <Target Name=\"\"Foo\"\" Outputs=\"\"$(P)\"\"/>\r\n\r\n</Project>\";\r\n\r\n            string p2pProjectPath = Path.GetTempFileName();\r\n            File.WriteAllText(p2pProjectPath, p2pProjectContents);\r\n\r\n            var collection = new ProjectCollection();\r\n\r\n            var mainRootElement = ProjectRootElement.Create(XmlReader.Create(new StringReader(string.Format(mainProjectContents, p2pProjectPath))), collection);\r\n\r\n            mainRootElement.FullPath = Path.GetTempFileName();\r\n            mainRootElement.Save();\r\n\r\n            var mainProject = new Project(mainRootElement, new Dictionary<string, string>(), MSBuildConstants.CurrentToolsVersion, collection);\r\n            var mainInstance = mainProject.CreateProjectInstance(ProjectInstanceSettings.Immutable).DeepCopy(isImmutable: false);\r\n\r\n            var manager = new BuildManager();\r\n\r\n            var request = new BuildRequestData(mainInstance, new[] { \"BuildOther\" });\r\n\r\n            var mockLogger = new MockLogger();\r\n            var parameters = new BuildParameters()\r\n            {\r\n                DisableInProcNode = true,\r\n                Loggers = new []{mockLogger}\r\n            };\r\n\r\n            manager.BeginBuild(parameters);\r\n\r\n            var submission = manager.PendBuildRequest(request);\r\n\r\n            var results = submission.Execute();\r\n            Assert.True(results.OverallResult == BuildResultCode.Success);\r\n            Assert.Equal(\"InitialValue\", results.ResultsByTarget[\"BuildOther\"].Items.First().ItemSpec);\r\n\r\n            // setup and build new instance\r\n\r\n            var p2pProject = new Project(p2pProjectPath, new Dictionary<string, string>(), MSBuildConstants.CurrentToolsVersion, collection);\r\n            var p2pInstance = p2pProject.CreateProjectInstance(ProjectInstanceSettings.Immutable).DeepCopy(isImmutable: false);\r\n\r\n            p2pInstance.SetProperty(\"P\", \"NewValue\");\r\n\r\n            mockLogger.ClearLog();\r\n\r\n            request = new BuildRequestData(p2pInstance, new[] { \"Foo\" });\r\n            submission = manager.PendBuildRequest(request);\r\n            results = submission.Execute();\r\n\r\n            Assert.True(results.OverallResult == BuildResultCode.Success);\r\n            Assert.Equal(\"NewValue\", results.ResultsByTarget[\"Foo\"].Items.First().ItemSpec);\r\n\r\n            manager.EndBuild();\r\n        }\r\n    }\r\n```\r\n\r\nIt fails in the last assert with:\r\n```\r\n      Assert.Equal() Failure\r\n                \u0019 (pos 0)\r\n      Expected: NewValue\r\n      Actual:   InitialValue\r\n                \u0018 (pos 0)\r\n```\r\n\r\nThe first build builds `mainProject`, and its P2P dependency, `p2pProject`. This causes the [ConfigCache](https://github.com/Microsoft/msbuild/blob/xplat/src/Build/BackEnd/Components/Caching/ConfigCache.cs) in both the main node and the out of proc node (OOP node) to have an entry for `p2pProject`.\r\n\r\nThe second build creates a new project instance over `p2pProject`, mutates it, and then builds it. However, the msbuild Scheduler [observes that it already has results for `p2pProject`](https://github.com/Microsoft/msbuild/blob/xplat/src/Build/BackEnd/Components/Scheduler/Scheduler.cs#L1554)  from the previous build and returns the cached results, thus not building the mutated `ProjectInstance` when it should have (communication with the OOP node is not even attempted).\r\n\r\nThe apparent fix for this is to use the flag `Microsoft.Build.Execution.BuildRequestDataFlags.ReplaceExistingProjectInstance` when constructing the `BuildRequestData`, which tells the `BuildManager` to [swap the old `ProjectInstance` with the new one and clear the results cache for that configuration](https://github.com/Microsoft/msbuild/blob/xplat/src/Build/BackEnd/BuildManager/BuildManager.cs#L1306-L1309). However, this does not work because only the caches in the main node are updated, while the ones in the OOP node get stale. This leads to the Scheduler requesting a build on the OOP node which then proceeds to build the stale `ProjectInstance` from the first build.\r\n\r\nPotential fixes:\r\n- Particular fix, by making `Microsoft.Build.Execution.BuildRequestDataFlags.ReplaceExistingProjectInstance` work across nodes. When this flag is used, the Scheduler needs to react and request that all OOP nodes that have that particular configuration get updated. Probably via a `Microsoft.Build.BackEnd.NodePacketType.BuildRequestConfiguration` packet.\r\n- More general fix, by making the node communication protocol account for syncing up stale configurations. This way, the BuildManager would not only keep [a record of what nodes have what configurations](https://github.com/Microsoft/msbuild/blob/xplat/src/Build/BackEnd/BuildManager/BuildManager.cs#L113), but would keep a record of what version of configurations each node has. Then, when the caches in the main root get updated, the scheduler calls all nodes with stale configurations and updates them. This would make the `ReplaceExistingProjectInstance` flag obsolete. Or as an optimization to reduce pipe chatter, it could only update a node before issuing builds to that node.\r\n- Update the project identity during a build so it's not just <global props, toolsversion, project path>. It should also take full state of items and properties into account\r\n  - Quick hack: add a dummy global property to project instance based builds to force new cache identity.",
  "state": "CLOSED",
  "createdAt": "2017-02-24T00:40:10Z",
  "updatedAt": "2024-02-21T17:21:32Z",
  "closedAt": "2017-04-20T20:01:29Z",
  "author": {
    "login": "cdmihai"
  },
  "labels": [
    "bug",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "cdmihai"
      }
    ]
  },
  "milestone": {
    "title": "MSBuild 15.3"
  },
  "comments": {
    "nodes": []
  }
}