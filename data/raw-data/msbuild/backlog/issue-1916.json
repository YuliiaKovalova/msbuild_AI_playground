{
  "number": 1916,
  "title": "On a ProjectReference, setting ReferenceOutputAssembly=false and Private=true does not copy the reference to the output without referencing it",
  "body": "As far as I can see, the problem is that if `ReferenceOutputAssembly` is set to `false`, then the project will not be added to `_ResolvedProjectReferencePaths`, which is what gets passed to RAR, so RAR never even has the reference to consider.\r\n\r\nI would expect ReferenceOutputAssembly to prevent the compiler from seeing the reference, but not prevent copying as a dependency (say, for reflection purposes).",
  "state": "OPEN",
  "createdAt": "2017-03-27T20:08:40Z",
  "updatedAt": "2024-07-18T00:03:41Z",
  "closedAt": null,
  "author": {
    "login": "agocke"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Refer to [this article from Kirill Osenkov](https://blogs.msdn.microsoft.com/kirillosenkov/2015/04/04/how-to-have-a-project-reference-without-referencing-the-actual-binary/) for a work around.",
        "createdAt": "2017-08-11T07:48:02Z",
        "updatedAt": "2017-08-11T07:48:02Z",
        "author": {
          "login": "chm-tm"
        }
      },
      {
        "body": "On a related note, in Visual Studio, you'll need to set the `DisableFastUpToDateCheck` property to `true` in order to maintain correct incremental builds. I tried to comment about this on @KirillOsenkov's [blog](https://blogs.msdn.microsoft.com/kirillosenkov/2015/04/04/how-to-have-a-project-reference-without-referencing-the-actual-binary/), but waiting forever for moderation. For this reason and because the whole `ReferenceOutputAssembly` stuff seems to be undocumented for now, I've put this information [on SO](https://stackoverflow.com/a/47132155/806690).",
        "createdAt": "2017-11-06T08:12:50Z",
        "updatedAt": "2017-11-06T08:12:50Z",
        "author": {
          "login": "chm-tm"
        }
      },
      {
        "body": "Oops, I went ahead and approved your comments. Turns out I had 41 comments waiting for moderation :( Software didn't let me know or I turned all notifications off... sorry about that.",
        "createdAt": "2017-11-06T16:28:44Z",
        "updatedAt": "2017-11-06T16:28:44Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "Found this and it's exactly my issue.  The workaround is not a solution as it doesn't copy the referenced projects dependencies.  I'm using VS2019 (Version 16.4.2) and am using another workaround but it bloats the output folder so it's not ideal.\r\n\r\nSo as I see it, we need the ability for Project A to reference Project B (where project B has nuget dependencies) in order to get it included in Project A's build output folder (including nuget dependencies) but for Project B to not be available to the compiler so Project A can't new up objects incorrectly.  If implemented correctly, Project A's output folder should be exactly the same as a build with Project B referenced with ReferenceOutputAssembly=true.\r\n\r\nPerhaps there's a way to accomplish this that I've been unable to find?",
        "createdAt": "2020-01-24T09:22:41Z",
        "updatedAt": "2020-01-24T09:22:41Z",
        "author": {
          "login": "cmclernon-fvs"
        }
      },
      {
        "body": "This issue is still open, so I assume it isn't fixed.\r\nAs it's pretty old, I wonder if people have found any new work-arounds, or if there are little-known MSBuild properties that can be used for the same effect, etc?\r\n\r\nI'm trying to build a project where the core module loads all other modules by reflection. So basically I want them to be built and published (copied) together, but I don't want a real dependency.\r\n\r\n@KirillOsenkov 's blog linked above is an interesting take on this problem, but it only copies the DLL (possibly PDB) from referenced project. If the referenced project itself has some unique dependencies, we need to copy them as well for the application to run properly --> that doesn't work with the technique described in the blog post.\r\n\r\nAs of 2023 has anything changed? What would be the best way to do this with .net 7?",
        "createdAt": "2023-03-21T15:55:13Z",
        "updatedAt": "2023-03-21T15:55:13Z",
        "author": {
          "login": "jods4"
        }
      },
      {
        "body": "I'm doing it like this. I'm not sure if there's a better way though.\r\nB.csproj\r\n```\r\n...\r\n <PropertyGroup>\r\n    <EnableDynamicLoading>true</EnableDynamicLoading>\r\n  </PropertyGroup>\r\n...\r\n```\r\nA.csproj\r\n```\r\n  <ItemGroup>\r\n    <ProjectReference Include=\"..\\B\\B.csproj\">\r\n      <!-- This project reference is to ensure B is built as dependency so we can copy it to a sub directory -->\r\n      <ReferenceOutputAssembly>false</ReferenceOutputAssembly>\r\n    </ProjectReference>\r\n  </ItemGroup>\r\n\r\n  <Target Name=\"CopyB\" AfterTargets=\"AfterResolveReferences\">\r\n    <ItemGroup Condition=\"$(TargetFramework.StartsWith('net7.0'))\">\r\n      <BFiles Include=\"..\\B\\bin\\$(Configuration)\\net7.0\\**\\*\" />\r\n      <Content Include=\"%(BFiles.Identity)\">\r\n        <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>\r\n        <Link>B\\%(BFiles.RecursiveDir)%(BFiles.FileName)%(BFiles.Extension)</Link>\r\n      </Content>\r\n    </ItemGroup>\r\n  </Target>\r\n```",
        "createdAt": "2024-03-31T07:09:36Z",
        "updatedAt": "2024-03-31T07:09:36Z",
        "author": {
          "login": "parched"
        }
      },
      {
        "body": "@parched Here's what I ended up doing, it's a little simpler and works with many dependencies:\r\n\r\n```xml\r\n<!-- \r\n  Start by adding \"weak\" references as normal ones.\r\n  Unfortunate side-effect is that in IDE code from those can be referenced, \r\n  but then full build would fail because of next step below.\r\n  \r\n  You can add individual ProjectReference as usual, or even grab many projects with a glob as shown here.\r\n  \r\n  The key is to tag \"weak\" projects that must be compiled and deployed together, \r\n  but not be a direct reference, with a custom property \"IsWeakReference\".\r\n-->\r\n<ProjectReference Include=\"../Modules/**/*.csproj\">\r\n  <IsWeakReference>true</IsWeakReference>\r\n</ProjectReference>\r\n\r\n<!--\r\n  The timing of this target is key to make this solution work. Goal is:\r\n  1. Automatically compile the \"weak\" references with main project, **without introducing a real reference.**\r\n     This preserves architecture layering and also avoids interference with things like Microsoft.NET.Sdk.Web SDK\r\n     that has a target that automatically adds ApplicationPartAttribute for each reference that itself references MVC.\r\n  2. Have the weak referenced compilation output copied in main project output (during build or publish).\r\n     A challenge here is to also include transitive references to nuget packages.\r\n\r\n  The solution has 3 parts:\r\n  1. Use MSBuild flag ReferenceOutputAssembly=false. \r\n     With this flag, MSBuild builds the weak references first, \r\n     but doesn't add them as actual references to the main project.\r\n  2. Use combination OutputItemType=Content and CopyToOutputDirectory to copy built projects output.\r\n     Unfortunately this does NOT copy transitive dependencies :(\r\n  3. To work-around that limitation, we first include the references as regular ones, \r\n     *without* ReferenceOutputAssembly=false.\r\n     During target AssignProjectConfiguration, .net SDK flattens transitive references,\r\n     so $(ProjectReferenceWithConfiguration) now contains both direct project references \r\n     and their transitive dependencies. This is key to getting all dlls copied in output.\r\n     At this step, before C# compilation is invoked, the configuration of modules references is modified\r\n     so that they're not referenced by compilation anymore (set ReferenceOutputAssembly=false)\r\n     and still copied to output (OutputItemType + CopyToOutputDirectory).\r\n-->\r\n<Target Name=\"SetModuleReferencesAsPrivate\" \r\n    AfterTargets=\"AssignProjectConfiguration\"\r\n    BeforeTargets=\"ResolveProjectReferences\">\r\n  <ItemGroup>\r\n    <ProjectReferenceWithConfiguration \r\n        Condition=\"%(ProjectReferenceWithConfiguration.IsWeakReference) == 'true'\">\r\n      <ReferenceOutputAssembly>false</ReferenceOutputAssembly>\r\n      <OutputItemType>Content</OutputItemType>\r\n      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>\r\n    </ProjectReferenceWithConfiguration>\r\n  </ItemGroup>\r\n</Target>\r\n```\r\n\r\nThat's some deep MS Build / .NET SDK trickery, but it has been working well for us.",
        "createdAt": "2024-04-02T08:42:07Z",
        "updatedAt": "2024-04-02T08:42:07Z",
        "author": {
          "login": "jods4"
        }
      },
      {
        "body": "Might also be worth mentioning here that some extra tinkering is required for C/C++ dependencies:\r\nhttps://github.com/dotnet/msbuild/issues/2823",
        "createdAt": "2024-07-18T00:03:11Z",
        "updatedAt": "2024-07-18T00:03:41Z",
        "author": {
          "login": "jeremy-visionaid"
        }
      }
    ]
  }
}