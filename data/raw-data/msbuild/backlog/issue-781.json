{
  "number": 781,
  "title": "Crossplat MSBuild and assumptions about the file system",
  "body": "There are some places in MSBuild that restrict what characters a path may have, assume the FS is case insensitive, impose limits on path lengths, etc. \nFor example, [this code](https://github.com/Microsoft/msbuild/blob/xplat/src/XMakeBuildEngine/Utilities/EngineFileUtilities.cs#L88-L91) ignores the expansion of some globs with escaped `*` characters in them. Unix paths can have `*` in them.\n\nWe should probably at some point decide whether MSBuild should keep Windows only path constraints on crossplat. One argument for preserving the same constraints over all OSes is that building the same crossplat project on multiple OSes should result in the same build output.\n",
  "state": "OPEN",
  "createdAt": "2016-07-14T23:53:43Z",
  "updatedAt": "2024-02-21T16:38:30Z",
  "closedAt": null,
  "author": {
    "login": "cdmihai"
  },
  "labels": [
    "xplat",
    "needs-design",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Another related thing to consider is case sensitivity.  MSBuild assumes that the file system is case insensitive.  Here are a few examples:\n- https://github.com/Microsoft/msbuild/blob/f90dcff1db3b10c3b136bed1a23ce710f7c579cd/src/Shared/FileMatcher.cs#L959\n- https://github.com/Microsoft/msbuild/blob/f90dcff1db3b10c3b136bed1a23ce710f7c579cd/src/Shared/FileMatcher.cs#L1223\n",
        "createdAt": "2016-07-15T20:21:59Z",
        "updatedAt": "2016-07-15T20:35:47Z",
        "author": {
          "login": "dsplaisted"
        }
      },
      {
        "body": "I'd vote for the following assumptions:\n- separators (e.g., path separators (`;`, `:`), path fragment separators (`/`, `\\`)):  MSBuild should be able to work with the _union_, so it should support both slashes and backslashes as path fragment separators\n- invalid path characters (windows has fewer legal path characters than unix): MSBuild should be able to support the _union_ of invalid path chars. Otherwise the same build specs would have different build behaviours depending on the OS. For example, a cross platform project using `<Compile Include=\"**/*.cs\">` would include `Progr*?am.cs` on unix builds and not include it on windows builds, leading to different build outputs.  Though by definition, those files can't exist on windows\n",
        "createdAt": "2016-09-01T00:31:17Z",
        "updatedAt": "2016-11-10T18:28:43Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "Another thing: [three-letter extension to prefix-of-extension mappings](https://github.com/rainersigwald/msbuild/blob/6fef01a8683f76a52d0a379bc12e5ee02d15b990/src/Shared/FileMatcher.cs#L1420-L1434). (On Windows, `*.csp` matches `anything.csproj` as well as `something.csp`.)\n\nThis could also be handled by an \"intersection\" strategy: while it's a bit odd for those matches to occur on *nix, it would be consistent with the Windows build.\n",
        "createdAt": "2016-09-09T15:08:24Z",
        "updatedAt": "2016-09-09T15:08:24Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}