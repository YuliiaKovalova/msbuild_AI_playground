{
  "number": 3986,
  "title": "Add support for COMReference items on .NET Core",
  "body": "### Steps to reproduce\r\n\r\nThe following [COM sample](https://github.com/dotnet/samples/tree/master/core/extensions/ExcelDemo) doesn't build from the `dotnet` command. It only builds from within Visual Studio.\r\n\r\nCommand line\r\n```\r\ndotnet build ExcelDemo.csproj\r\n```\r\n### Expected  behavior\r\n\r\nThe project should build\r\n\r\n### Actual behavior\r\n\r\nThere is a failure to find the `ResolveComReferences` task.\r\n\r\nSee dotnet/core#2104\r\nSee dotnet/samples#487",
  "state": "OPEN",
  "createdAt": "2018-12-05T17:39:17Z",
  "updatedAt": "2025-01-02T10:41:18Z",
  "closedAt": null,
  "author": {
    "login": "AaronRobinsonMSFT"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    ".NET Core",
    "Area: Tasks"
  ],
  "comments": {
    "nodes": [
      {
        "body": "Any update on this? I'd like to be able to build with COM references using a locally-installed .NET Core SDK without putting a dependency on VS2019.",
        "createdAt": "2019-07-02T02:53:14Z",
        "author": {
          "login": "dotMorten"
        }
      },
      {
        "body": "@dotMorten Just to set expectations and I will let @rainersigwald have the final say, but I am doubtful including full COM build support outside MSBuild will happen in the near future. There are too many dependencies between COM and Windows to reconcile in a reasonable way and since one of the primary goals of .NET Core SDK is to be as platform agnostic as possible, this tight coupling violates that principle. As I mentioned, @rainersigwald can comment better on how much work this would be and when it might occur, but I would be very surprised if this occurred in the .NET 3.0 timeframe.",
        "createdAt": "2019-07-02T04:41:35Z",
        "author": {
          "login": "AaronRobinsonMSFT"
        }
      },
      {
        "body": "Another ask: https://github.com/dotnet/cli/issues/12129\r\n\r\nI've heard this from a few other customers as well - e.g. creating WinForms Apps that interface with COM components supplied by hardware vendors.\r\n\r\nWhile using VS is workable, I think it should not be necessary.\r\n\r\n> There are too many dependencies between COM and Windows to reconcile in a reasonable way and since one of the primary goals of .NET Core SDK is to be as platform agnostic as possible, this tight coupling violates that principle\r\n\r\nThere are already platform-specific cases of tight coupling to windows, e.g. the logic to embed resources (Icons) into built .exe files for 3.0 GUI apps ([source](https://github.com/dotnet/core-setup/blob/d84e1f9751b0290c39acb0c9648b401a808ba64a/src/managed/Microsoft.NET.HostModel/AppHost/ResourceUpdater.cs)).\r\nBeing platform-specific for platform-specific use cases is fine or at least better than not having it work at all.\r\n\r\nSo I'd say it is not urgent but somewhat important in the long run. I'd like to see this work in .NET 5 or 6 when more businesses start to port their desktop apps to core.",
        "createdAt": "2019-08-03T18:33:04Z",
        "author": {
          "login": "dasMulli"
        }
      },
      {
        "body": "I just went out of my way to try and avoid a com reference I needed. It was a lot of work, but I did it because I'm realizing it's not just the library you build that requires vs2019, but it's contagious and will affect all downstream projects that reference that library.",
        "createdAt": "2019-08-04T13:46:45Z",
        "author": {
          "login": "dotMorten"
        }
      },
      {
        "body": "The dotnet CLI doesn't support it.  I'm currently investigating a workaround using [MSBuild for VS 2019 without the IDE](https://docs.microsoft.com/en-us/visualstudio/msbuild/msbuild?view=vs-2019), which I finally got to work with the following in my tasks.json file, using msbuild instead of dotnet\r\n```json\r\n    \"tasks\": [\r\n        {\r\n            \"label\": \"build\",\r\n            \"type\": \"shell\",\r\n            \"command\": \"msbuild\",\r\n            \"args\": [\r\n                \"/property:GenerateFullPaths=true\",\r\n                \"/t:build\",\r\n                \"/consoleloggerparameters:NoSummary\"\r\n            ],\r\n            \"group\": {\r\n                \"kind\": \"build\",\r\n                \"isDefault\": true\r\n            },\r\n            \"presentation\": {\r\n                \"reveal\": \"silent\"\r\n            },\r\n            \"problemMatcher\": \"$msCompile\"\r\n        }\r\n    ]\r\n```\r\n\r\nAnd in the csproj file, in my case, I needed to force the platform target to x86\r\n```xml\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp3.1</TargetFramework>\r\n    <PlatformTarget>x86</PlatformTarget>\r\n  </PropertyGroup>\r\n```",
        "createdAt": "2020-05-12T20:32:35Z",
        "author": null
      },
      {
        "body": "Moving a big application from .NET FW4.8 to .NET5 seems very feasible; this is one of the few roadblocks. \r\nSure, long term nobody wants COM-references but since the genie is out of the bottle with winforms and wpf not being cross platform but still included in .NET Core, fixing this is just more of the same! \r\nAny news on this @AaronRobinsonMSFT. ",
        "createdAt": "2020-06-30T13:00:14Z",
        "author": {
          "login": "JensNordenbro"
        }
      },
      {
        "body": ">Any news on this @AaronRobinsonMSFT.\r\n\r\n@JensNordenbro Not that I am aware of. Since support exists by using the .NET Framework version of MSBuild, there hasn't been the strong need to add support in the .NET Core SDK. Is using the .NET Framework MSBuild not a workable solution for your scenario?",
        "createdAt": "2020-06-30T19:38:29Z",
        "author": {
          "login": "AaronRobinsonMSFT"
        }
      },
      {
        "body": "I guess I could build the interop-assemblies using netfw msbuild and then consume them in .net5. \r\n\r\nThere seems to be some suggestions on improved COM-scenarios on .NET5 https://github.com/dotnet/runtime/blob/master/docs/design/features/COM-activation.md \r\nI guess if that journey is embarked upon this scenarion should be included. \r\n",
        "createdAt": "2020-07-01T08:26:10Z",
        "author": {
          "login": "JensNordenbro"
        }
      },
      {
        "body": "@dotMorten a pretty clean workaround would seem to be using `dotnet msbuild` instead.\r\nhttps://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-msbuild\r\n\r\n**Edit: this does _not_ resolve the problem**\r\nUnfortunately, this didn't fix my problem. Gave the same error.",
        "createdAt": "2020-07-16T20:10:15Z",
        "author": {
          "login": "jamers99"
        }
      },
      {
        "body": "We're also running into this as we port our large .NET Framework application. We've really liked the simplicity of `dotnet build` on our top level solution - it would be nice to be able to maintain that simplicity.",
        "createdAt": "2020-08-04T18:51:56Z",
        "author": {
          "login": "nick-beer"
        }
      },
      {
        "body": "I also tripped over the issue of `dotnet build` not supporting interop ([MSB4803](https://docs.microsoft.com/en-us/visualstudio/msbuild/resolvecomreference-task?view=vs-2019#msb4803-error)). I had the problem when using EF core's\r\n`dotnet ef dbcontext scaffold`\r\n\r\nwould be nice to see some elegant solution to being able to speak to office components with .net 5",
        "createdAt": "2020-12-01T13:56:18Z",
        "author": {
          "login": "janschreier"
        }
      },
      {
        "body": "Seems very counter-intuitive for me that .NET 5.0 does not support elements of .NET Framework.\r\n\r\nCan we hope to see COMReferences supported in .NET 5.0? Or do we have to keep hacking our way around it to use MSBuild?",
        "createdAt": "2021-01-06T00:50:47Z",
        "author": null
      },
      {
        "body": "Also add support for easy regfreecom",
        "createdAt": "2021-01-24T18:40:42Z",
        "author": {
          "login": "JensNordenbro"
        }
      },
      {
        "body": "I'm using DOT NET 6 and I also tripped over the issue of dotnet build not supporting interop (MSB4803). I had the problem when using EF core's\r\ndotnet ef dbcontext scaffold\r\n\r\n",
        "createdAt": "2021-11-25T17:12:14Z",
        "author": {
          "login": "wagenheimer"
        }
      },
      {
        "body": "and why dotnet pack also fail when I have COMreference and I pass '--no-build' command argument? I am not trying to build here, just pack? ",
        "createdAt": "2022-02-10T15:02:31Z",
        "author": {
          "login": "calvin-charles"
        }
      },
      {
        "body": "I just faced this now in my .NET 6.0 WPF application. Some context: my application needs to list the installed Windows Updates, for that I referenced the WUApi.dll. It works, the build works in my VS. Building in Azure pipeline using dotnet CLI it fails as you all already know. My workaround (probably you all have done the same):\r\n\r\n- Created a .NET 6.0 Library project and encapsulated the reference to WUApi.dll and  its call. This project I build with a MSBuild action.\r\n- Removed from my main WPF application all references to the COM lib and referenced the *built .NET 6 library*, not the project itself.\r\n\r\nLike I said, it's a workaround, it's not beautiful however it doesn't brake my main pipeline anymore.\r\n\r\n\r\n",
        "createdAt": "2023-03-10T14:13:18Z",
        "author": {
          "login": "quicoli"
        }
      },
      {
        "body": "@quicoli just as a side note: you can just use `tlbimp` from net framework to generate PIA (interop dll) which will be usable in net 6 project with simple : `tlbimp C:\\Windows\\System32\\wuapi.dll`. So, you will not need to write any wrapping class library code by hands.\r\nAdditional reference https://github.com/dotnet/runtime/issues/27698#issuecomment-442930605\r\nAnyway, I still hope that full-featured support of COM-scenarios will be added in net.",
        "createdAt": "2023-03-10T14:52:48Z",
        "author": {
          "login": "snechaev"
        }
      },
      {
        "body": "Hi Sergey\r\n\r\nYes, I did that  \ud83d\ude0a\r\n\r\nSent from Outlook for Android<https://aka.ms/AAb9ysg>\r\n________________________________\r\nFrom: Sergey Nechaev ***@***.***>\r\nSent: Friday, March 10, 2023 2:53:01 PM\r\nTo: dotnet/msbuild ***@***.***>\r\nCc: Paulo Quicoli ***@***.***>; Mention ***@***.***>\r\nSubject: Re: [dotnet/msbuild] Add support for COMReference items on .NET Core (#3986)\r\n\r\n\r\n@quicoli<https://github.com/quicoli> just as a side note: you can just use tlbimp from net framework to generate PIA (interop dll) which will be usable in net 6 project with simple : tlbimp C:\\Windows\\System32\\wuapi.dll. So, you will not need to write any wrapping class library code by hands.\r\nAdditional reference dotnet/runtime#27698 (comment)<https://github.com/dotnet/runtime/issues/27698#issuecomment-442930605>\r\nAnyway, I still hope that full-featured support of COM-scenarios will be added in net.\r\n\r\n\u2014\r\nReply to this email directly, view it on GitHub<https://github.com/dotnet/msbuild/issues/3986#issuecomment-1463917812>, or unsubscribe<https://github.com/notifications/unsubscribe-auth/AB775D5THB2NGL6EE2QG6JTW3M543ANCNFSM4GINSBJA>.\r\nYou are receiving this because you were mentioned.Message ID: ***@***.***>\r\n",
        "createdAt": "2023-03-10T14:56:11Z",
        "author": {
          "login": "quicoli"
        }
      },
      {
        "body": "Adding my support for this request. I have a really old dll I can't escape",
        "createdAt": "2023-03-12T18:40:30Z",
        "author": {
          "login": "mika76"
        }
      },
      {
        "body": "Same here, still not fixed",
        "createdAt": "2023-04-19T06:20:01Z",
        "author": {
          "login": "Blinchik91"
        }
      },
      {
        "body": "> and why dotnet pack also fail when I have COMreference and I pass '--no-build' command argument? I am not trying to build here, just pack?\r\n\r\nExactly this.\r\n\r\nDue to https://learn.microsoft.com/en-us/visualstudio/msbuild/resolvecomreference-task?view=vs-2022#msb4803-error,\r\nI use `msbuild` to build the project in a CI pipeline and this works fine, but then I can't create a NuGet package on the next step of the pipeline because the `--no-build` option of `dotnet pack` seems to be ignored, and the build is re-run.\r\n\r\nAs a workaround, I have updated our process to do the following:\r\n\r\n`msbuild -t:pack -p:PackageVersion=0.0.0.0 -p:Configuration=release`\r\n\r\n",
        "createdAt": "2023-07-11T20:43:55Z",
        "author": {
          "login": "xDaevax"
        }
      },
      {
        "body": "In one of my project in WPF with .NET 6.0 I installed the following NuGet https://www.nuget.org/packages/Microsoft.Office.Interop.Word\r\nIt didn't work because it wasn't supported by .NET Core, So I found a work around to pass it by COMReference to make it work. When I launch the application, everything seems to be working, but when I try \"dotnet build\" I get an error saying: \"The task \"ResolveComReference\" is not supported on the .NET Core version of MSBuild. Please use the .NET Framework version of MSBuild.\"\r\n\r\nWould be nice to be able to build COMReference in .NET Core, since WPF a more largely used frame then WinForms...",
        "createdAt": "2024-01-17T23:07:45Z",
        "author": {
          "login": "Dolotboy"
        }
      },
      {
        "body": "I know this is closed, but I ended up here trying to find a solution, I applied and tested but it was not what I was looking for. so, I'm sharing my \"solution\" or \"workaround\" about my situation.\r\n\r\nMy case was about a COM reference as part of a NET Framework project migrated to NET8. I was unable to build on an OSX environment.\r\nI could end up rewriting it or adding support to the new version, but it was more costly and time-consuming. So I created a mock library project and implemented the classes, methods, and properties to get a successful build.\r\n\r\nThe goal was not to run on Linux/OSX but to be able to develop and upgrade the ecosystem, this impacted the build of the artifact in the end, but our deployments to prod are executed on Windows, so no problem.\r\n\r\nSo, along with the mock lib project I implemented conditions and constants during the build of the project, so, if we are on Linux/OSX we just build using the mock project otherwise with the COM.\r\n\r\nIf you want to try, add the next lines to your .csproj file...\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net8.0</TargetFramework>\r\n    <ImplicitUsings>enable</ImplicitUsings>\r\n    <Nullable>disable</Nullable>\r\n    <GenerateAssemblyInfo>false</GenerateAssemblyInfo>\r\n    <IsWindows Condition=\"'$([System.Runtime.InteropServices.RuntimeInformation]::IsOSPlatform($([System.Runtime.InteropServices.OSPlatform]::Windows)))' == 'true'\">true</IsWindows>\r\n  </PropertyGroup>\r\n\r\n  <PropertyGroup Condition=\"'$(IsWindows)'=='true'\">\r\n    <DefineConstants>Windows</DefineConstants>\r\n  </PropertyGroup>\r\n\r\n  <Target Name=\"DisplayMessages\" BeforeTargets=\"Build\">\r\n    <Message Condition=\"'$(IsWindows)'=='true'\" Text=\"Building for Windows\" Importance=\"High\" />\r\n    <Message Condition=\"'$(IsWindows)'==''\" Text=\"Building for Linux/OSX\" Importance=\"High\" />\r\n  </Target>\r\n\r\n  <ItemGroup Condition=\"'$(IsWindows)'=='true'\">\r\n    <COMReference Include=\"YOUR-COM-OBJECT-NAME\">\r\n      <Guid>{YOUR-GUID}</Guid>\r\n      <VersionMajor>10</VersionMajor>\r\n      <VersionMinor>0</VersionMinor>\r\n      <Lcid>0</Lcid>\r\n      <WrapperTool>tlbimp</WrapperTool>\r\n      <Isolated>False</Isolated>\r\n      <EmbedInteropTypes>True</EmbedInteropTypes>\r\n    </COMReference>\r\n  </ItemGroup>\r\n\r\n  <ItemGroup Condition=\"'$(IsWindows)'==''\">\r\n    <ProjectReference Include=\"../MockCOMCore/MockCOMCore.csproj\">\r\n      <Name>MockCOMCore</Name>\r\n    </ProjectReference>\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\n```csharp\r\n#if Windows\r\n    using YOUR-OFFICIAL-COM;\r\n#else\r\n    using YOUR-OFFICIAL-COM = MockCOMCore;\r\n#endif\r\n```\r\n",
        "createdAt": "2024-05-15T23:50:28Z",
        "author": {
          "login": "oscarromero"
        }
      },
      {
        "body": "My problems started after updating project from NET 6 to NET 9.\nIt builds smoothly from VS2022 and fails when trying from `dotnet build` command. Any hope to skip this ugly episode?",
        "createdAt": "2025-01-01T19:34:28Z",
        "author": {
          "login": "kkkristo"
        }
      },
      {
        "body": "> My problems started after updating project from NET 6 to NET 9.\n> It builds smoothly from VS2022 and fails when trying from `dotnet build` command. Any hope to skip this ugly episode?\n\nI had this problem and there was nothing I could do, because .NET Core didn't support COM reference. So I created another project in .NET Framework, a library, used whatever COM I needed, builded it into a .DLL and referenced that project DLL into my .NET Core project and then I was able to dotnet build it",
        "createdAt": "2025-01-02T02:04:30Z",
        "author": {
          "login": "Dolotboy"
        }
      },
      {
        "body": "@Dolotboy \nThank you for elegant hint. I got stucked with Excel processing code and for sure looks better to me to refactor the code into separate library than build these classes from scratch basing  i.e. on OpenXML etc. Thanks again!\n",
        "createdAt": "2025-01-02T10:41:18Z",
        "author": {
          "login": "kkkristo"
        }
      }
    ]
  }
}