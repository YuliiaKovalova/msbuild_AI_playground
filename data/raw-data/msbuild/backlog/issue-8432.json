{
  "number": 8432,
  "title": "Quick post-mortem of recently implemented RAR optimizations",
  "body": "## Motivation\r\n\r\n#8422 strives to improve the performance of ResolveAssemblyReferences, which is a recurring theme. We should get a sense of how the work that's recently been done in this area moved the needle. We're specifically interested in retrospectively measuring RAR as used when building a modern .NET app.\r\n\r\n## Expected outputs\r\n\r\n- A list of RAR optimizations implemented (or attempted to be implemented) in the last ~3 years.\r\n- A quantitative assessment of complexity and perf impact for each of the optimizations.\r\n- A description of the methodology used for the above.",
  "state": "CLOSED",
  "createdAt": "2023-02-09T13:44:20Z",
  "updatedAt": "2024-02-21T16:59:35Z",
  "closedAt": "2023-02-13T12:29:09Z",
  "author": {
    "login": "ladipro"
  },
  "labels": [
    "triaged",
    "8.0"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "ladipro"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Measurements have been done with a micro-benchmark, directly executing the RAR task on a single thread in a tight loop. For each iteration the task was given parameters identical to those given when building a simple AspNetCore 7.0 project with `dotnet build` (297 assemblies passed as references + many more params). The benchmark is focused on the hot scenario, i.e. we assume dev inner loop in VS or on command-line with MSBuild server. The benchmark was made with the .NET build of MSBuild (as opposed to MSBuild.exe).\r\n\r\nThe following table has a list of commits under [src/Tasks/AssemblyDependency](https://github.com/dotnet/msbuild/tree/main/src/Tasks/AssemblyDependency) made from Jan 2020 to Jan 2023, that look like they could have any perf relevance.\r\n\r\nThe results are rounded to the nearest half-of-percent which is about the precision at which I was able to produce the numbers in my environment.\r\n\r\n| Commit | Title | Improvement (-) or regression (+) | Complexity | Notes |\r\n|:---------:|------:|-----------------------:|--------:|---------------:|\r\n| a53a0182a | Ensure trailing slash for string used as key in AssemblyTableInfo's cache (#8266) | +0.5% | S | |\r\n| b8d493a5a | CA1838 Avoid 'StringBuilder' parameters for P/Invokes (#7186) | 0.0% | S | |\r\n| 56ac5378d | Improve string builder caches (#7093) | +0.5% | M | |\r\n| ba28ab4a8 | Optimized immutable files up to date checks (#6974) | -0.5% | M | Surprisingly small improvement in this scenario. |\r\n| 761f06e9c | Minor allocation optimizations / cleanup (#6983) | 0.0% | S | |\r\n| b3a99d5ba | [RAR] Stop removing from file cache just because an assembly is cached in process (#6891) | **+5.5%** | S | It is possible that the per-project disk cache is detrimental to perf in hot scenarios. |\r\n| 49d582fb7 | Optimize logging by moving message importance checks earlier (#6381) | **-5.0%** | L | Logging is costly. |\r\n| 3e71818f4 | Normalize RAR output paths (#6533) | **+39.0%** | S | This was a major regression and one of top candidates for future optimization. |\r\n| 492053701 | Miscellaneous logging improvements (#6326) | **-5.0%** | L | Logging is costly. |\r\n| 8c7ccdf49 | Pre cache (#6107) | 0.5% | L | |\r\n| 6819f7ab0 | On disk cache serialization  (#6094) | -1.5% | M | Custom serializer is faster than BinaryFormatter. |\r\n| 8fb627e7f | Optimize RAR's GetReferenceItems method (#5929) | **-6.5%** | M | Nice optimization. |\r\n\r\nOverall, from Jan 2020 to Jan 2023 RAR got about 20% slower (11.7 ms -> 14.3 ms per **HOT** invocation).",
        "createdAt": "2023-02-13T11:29:58Z",
        "updatedAt": "2023-02-13T12:48:36Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "@Forgind, I know that pre-cache is targeted at the cold / first build scenario so it's not expected to show here. I am curious why it's not being used, though. I see that we ship `SDKPrecomputedAssemblyReferences.cache` with the SDK but it doesn't seem to be passed to RAR.",
        "createdAt": "2023-02-13T11:55:33Z",
        "updatedAt": "2023-02-13T11:55:33Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "Here's the profile of a hot ResolveAssemblyReference.Execute. It's still very heavy on file timestamp checks.\r\n\r\n![image](https://user-images.githubusercontent.com/12206368/218457234-bfc6b4dc-db09-4793-8afc-bde49ade8cae.png)\r\n",
        "createdAt": "2023-02-13T12:28:24Z",
        "updatedAt": "2023-02-13T12:28:24Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "The work will continue in #8441.",
        "createdAt": "2023-02-13T12:29:09Z",
        "updatedAt": "2023-02-13T12:29:09Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "Related #2015",
        "createdAt": "2023-02-15T07:54:49Z",
        "updatedAt": "2023-02-15T07:54:49Z",
        "author": {
          "login": "stan-sz"
        }
      },
      {
        "body": "> @Forgind, I know that pre-cache is targeted at the cold / first build scenario so it's not expected to show here. I am curious why it's not being used, though. I see that we ship `SDKPrecomputedAssemblyReferences.cache` with the SDK but it doesn't seem to be passed to RAR.\r\n\r\nAs I recall, we saw some promising early numbers, so I pushed through to finish the feature, but then later testing didn't find much of a benefit, so although we can use it, I'm not sure if it's actually valuable. I'm not the best at testing perf, so if you find very different results, I'd love to be wrong!\r\n\r\nIf you find similar results, though, I wouldn't have a problem with removing it. I wouldn't expect there to be even 0.5% performance regression in dev loop scenarios; I feel like that loss is worse than the not-win from having a feature that doesn't really help.\r\n\r\n(We'd probably have to maintain public API, but that's fine.)\r\n\r\nAlso, I'm surprised #6533 was _bad_. That's bad enough that I'd consider reverting it immediately and trying to figure out what went wrong afterwards. What do you think?",
        "createdAt": "2023-02-16T04:46:50Z",
        "updatedAt": "2023-02-16T04:46:50Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "> Also, I'm surprised #6533 was _bad_. That's bad enough that I'd consider reverting it immediately and trying to figure out what went wrong afterwards. What do you think?\r\n\r\nThe problem is on this line: https://github.com/dotnet/msbuild/blob/dfd8f413a80cd0865f968b2c0ad9b09c0df8c430/src/Tasks/AssemblyDependency/ReferenceTable.cs#L1294\r\n\r\nAssigning a different path to the `FullPath` property triggers an expensive `_isWinMDFile()` call. I believe that calling `NormalizeFullPath` instead of assigning the property would fix this. I was going to make this and many more changes in a series of PRs a bit later but if you have time now I won't protest! \ud83d\ude00",
        "createdAt": "2023-02-16T08:28:28Z",
        "updatedAt": "2023-02-16T08:28:28Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "Is it surprising that #6533 didn't trigger some perf gate/test at the time?",
        "createdAt": "2023-02-16T17:17:51Z",
        "updatedAt": "2023-02-16T17:17:51Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "> > Also, I'm surprised #6533 was _bad_. That's bad enough that I'd consider reverting it immediately and trying to figure out what went wrong afterwards. What do you think?\r\n> \r\n> The problem is on this line:\r\n> \r\n> https://github.com/dotnet/msbuild/blob/dfd8f413a80cd0865f968b2c0ad9b09c0df8c430/src/Tasks/AssemblyDependency/ReferenceTable.cs#L1294\r\n> \r\n> Assigning a different path to the `FullPath` property triggers an expensive `_isWinMDFile()` call. I believe that calling `NormalizeFullPath` instead of assigning the property would fix this. I was going to make this and many more changes in a series of PRs a bit later but if you have time now I won't protest! \ud83d\ude00\r\n\r\nI'm a little confused\u2014looking at the diff for #6533, it didn't introduce that assignment; that assignment has existed since MSBuild moved to GitHub, at least. All 6533 did was add one new call to NormalizeFullPath and change a call from Path.GetFullPath to another NormalizePath call. Am I missing something?",
        "createdAt": "2023-02-16T19:51:27Z",
        "updatedAt": "2023-02-16T19:51:27Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "> Is it surprising that #6533 didn't trigger some perf gate/test at the time?\r\n\r\nSurprising to me, at least. RAR is a substantial fraction of total build time, so it'd be a major oversight to have it not at all represented in our tests. My guess is that it regressed 39% in some scenarios\u2014perhaps scenarios in which _isWinMDFile() is unusually expensive\u2014but much less in another scenario, perhaps if it's already cached. (I think that's one of the things we cache in our on-disk and in-process caches.)\r\n\r\nPart of what's confusing to me is that my explanation suggests it would be very fast in exactly the scenario ladipro tested and slow in a scenario I'd expect our tests to catch...so perhaps I have something flipped?\r\n\r\nIn any event, the real impact is probably less than 39%, or we'd have customers ripping us to shreds by now, but I can easily imagine it's still a substantial perf regression on average\u2014one we should try to fix.",
        "createdAt": "2023-02-16T20:55:50Z",
        "updatedAt": "2023-02-16T20:55:50Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "We don't currently have good automated perf tests that would catch this. VS tests (PerfDDRITs, Speedometer) are too noisy for this to be noticed; they are focused on end-to-end VS scenarios of which RAR is a tiny piece. The .NET perf lab runs some basic command line builds where this could make a measurable difference, but I'm not sure if anyone is looking at the results anymore.\r\n\r\nWe should start perf testing MSBuild more like a library. In this particular case, we know RAR is actually used as a direct library call by VS (a bit of a hack, alas) and plays an important role in design-time builds so I'd say introducing a microbenchmark measuring RAR only is justified. Similar for evaluation and a few more. Then of course builds (incremental, full) of solutions with varying size, with/without binlog, etc. And most importantly with good automated reporting. We'll get there!\r\n\r\n",
        "createdAt": "2023-02-17T07:39:53Z",
        "updatedAt": "2023-02-17T07:39:53Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "> I'm a little confused\u2014looking at the diff for #6533, it didn't introduce that assignment; that assignment has existed since MSBuild moved to GitHub, at least. All 6533 did was add one new call to NormalizeFullPath and change a call from Path.GetFullPath to another NormalizePath call. Am I missing something?\r\n\r\nWithout normalizing, the path assigned to `FullPath` was identical to what had already been probed and `_isWinMDFile()` could be satisfied from `instanceLocalLastModifiedCache`.\r\n\r\nWith normalizing we introduced a new path, unknown to the cache, which makes `_isWinMDFile()` hit the disk.",
        "createdAt": "2023-02-17T07:55:52Z",
        "updatedAt": "2023-02-17T07:55:52Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "The DT RAR calls do something a bit different, right? Like still call the RAR task but with different inputs?\r\n\r\n> Without normalizing, the path assigned to FullPath was identical to what had already been probed and _isWinMDFile() could be satisfied from instanceLocalLastModifiedCache.\r\n> \r\n> With normalizing we introduced a new path, unknown to the cache, which makes _isWinMDFile() hit the disk.\r\n\r\nOk, but you said this was a dev inner loop scenario, right? Why didn't the normalized path get added to the cache at any point? I would've imagined it might force one more expensive operation once, but by the time we're talking about resolving the same references for the second time, it should be well aware of the normalized path and be just as fast for that part than the not-normalized path?",
        "createdAt": "2023-02-17T22:47:58Z",
        "updatedAt": "2023-02-17T22:47:58Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "> Ok, but you said this was a dev inner loop scenario, right? Why didn't the normalized path get added to the cache at any point?\r\n\r\nThis cache is currently per RAR invocation (`instanceLocalLastModifiedCache`) so it starts empty with every build of every project, even in inner loop. One of the things I want to change. Files coming from the SDK and from NuGet cache should really be considered pre-resolved and immutable and have no I/O done on them in the inner loop.",
        "createdAt": "2023-02-20T07:33:39Z",
        "updatedAt": "2023-02-20T07:33:39Z",
        "author": {
          "login": "ladipro"
        }
      }
    ]
  }
}