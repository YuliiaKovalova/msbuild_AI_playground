{
  "number": 8629,
  "title": "System.IO.PathTooLongException - VS2022",
  "body": "I recently installed VS2022 and attempted to build a solution that currently builds successful in VS2019, and got the below error:\n\n```\n> This is an unhandled exception in MSBuild -- PLEASE UPVOTE AN EXISTING ISSUE OR FILE A NEW ONE AT https://aka.ms/msbuild/unhandled.\n>     System.IO.PathTooLongException: Path: C:\\xxx\\xxxxxx\\xxxxxxxx\\xxxx\\xxxxxxx\\xxxxxxxxxxxxxxxxx\\xxx\\xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\xxxxxxxx\\xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, processorArchitecture=MSIL exceeds the OS max path limit. The fully qualified file name must be less than 260 characters.\n>    at Microsoft.Build.Shared.FileUtilities.GetFullPath(String path)\n>    at Microsoft.Build.Shared.FileUtilities.NormalizePath(String path)\n>    at Microsoft.Build.Shared.FileUtilities.GetFullPath(String fileSpec, String currentDirectory)\n>    at Microsoft.Build.Evaluation.LazyItemEvaluator`4.LazyItemList.ProcessNonWildCardItemUpdates(Dictionary`2 itemsWithNoWildcards, Builder items)\n>    at Microsoft.Build.Evaluation.LazyItemEvaluator`4.LazyItemList.ComputeItems(LazyItemList lazyItemList, ImmutableHashSet`1 globsToIgnore)\n>    at Microsoft.Build.Evaluation.LazyItemEvaluator`4.LazyItemList.GetItemData(ImmutableHashSet`1 globsToIgnore)\n>    at System.Linq.Enumerable.<SelectManyIterator>d__17`2.MoveNext()\n>    at System.Linq.Buffer`1..ctor(IEnumerable`1 source)\n>    at System.Linq.OrderedEnumerable`1.<GetEnumerator>d__1.MoveNext()\n>    at Microsoft.Build.Evaluation.Evaluator`4.Evaluate()\n>    at Microsoft.Build.Evaluation.Evaluator`4.Evaluate(IEvaluatorData`4 data, Project project, ProjectRootElement root, ProjectLoadSettings loadSettings, Int32 maxNodeCount, PropertyDictionary`1 environmentProperties, ILoggingService loggingService, IItemFactory`2 itemFactory, IToolsetProvider toolsetProvider, ProjectRootElementCacheBase projectRootElementCache, BuildEventContext buildEventContext, ISdkResolverService sdkResolverService, Int32 submissionId, EvaluationContext evaluationContext, Boolean interactive)\n>    at Microsoft.Build.Execution.ProjectInstance.Initialize(ProjectRootElement xml, IDictionary`2 globalProperties, String explicitToolsVersion, String explicitSubToolsetVersion, Int32 visualStudioVersionFromSolution, BuildParameters buildParameters, ILoggingService loggingService, BuildEventContext buildEventContext, ISdkResolverService sdkResolverService, Int32 submissionId, Nullable`1 projectLoadSettings, EvaluationContext evaluationContext)\n>    at Microsoft.Build.BackEnd.BuildRequestConfiguration.<>c__DisplayClass60_0.<LoadProjectIntoConfiguration>b__0()\n>    at Microsoft.Build.BackEnd.BuildRequestConfiguration.InitializeProject(BuildParameters buildParameters, Func`1 loadProjectFromFile)\n>    at Microsoft.Build.BackEnd.RequestBuilder.<BuildProject>d__68.MoveNext()\n> --- End of stack trace from previous location where exception was thrown ---\n>    at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\n>    at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n>    at Microsoft.Build.BackEnd.RequestBuilder.<BuildAndReport>d__59.MoveNext()\tConverter\t\t\t\n\n```\n\nUsing \n- MSBuild version 17.5.1+f6fdcf537 for .NET Framework\n- VS Professional 2022 (64-bit) version 17.5.3\n\nNot too sure why this issue is creeping back into MSBuild as I'm sure it was resolved in VS 2019",
  "state": "OPEN",
  "createdAt": "2023-04-04T13:00:48Z",
  "updatedAt": "2025-06-02T08:36:03Z",
  "closedAt": null,
  "author": {
    "login": "MariusEls"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "triaged"
  ],
  "comments": {
    "nodes": [
      {
        "body": "Just to confirm: Are you building from the same directory path in VS2022 as you did in VS2019? Do you still have VS2019 installed? The same solution on the same machine in the same directory path builds successfully in VS2019 and fails in VS2022?",
        "createdAt": "2023-04-04T14:18:11Z",
        "author": {
          "login": "jrdodds"
        }
      },
      {
        "body": "Good afternoon\n\nAre you building from the same directory path in VS2022 as you did in\nVS2019? *Yes*\n\nDo you still have VS2019 installed? *Yes*\n\nThe same solution on the same machine in the same directory path builds\nsuccessfully in VS2019 and fails in VS2022? *Yes*\n\nThank you and Regards\n\nOn Tue, 04 Apr 2023 at 16:18, Jonathan Dodds ***@***.***>\nwrote:\n\n> Just to confirm: Are you building from the same directory path in VS2022\n> as you did in VS2019? Do you still have VS2019 installed? The same solution\n> on the same machine in the same directory path builds successfully in\n> VS2019 and fails in VS2022?\n>\n> \u2014\n> Reply to this email directly, view it on GitHub\n> <https://github.com/dotnet/msbuild/issues/8629#issuecomment-1496056859>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/ABOCPAENZLEFFCZO4HWBTHLW7QUS5ANCNFSM6AAAAAAWSVZQWY>\n> .\n> You are receiving this because you authored the thread.Message ID:\n> ***@***.***>\n>\n-- \nRegards\n\nMarius Els\n+27 82 389 9499\n\"...as for me and my house, we will serve the Lord.\"- Joshua 24:15 b\n",
        "createdAt": "2023-04-04T15:08:46Z",
        "author": {
          "login": "MariusEls"
        }
      },
      {
        "body": "Is this defect gaining any traction? Was posted over a year ago, and it's definitely still happening!\n\nWhy in the world is it considering fully-qualified assembly information to be part of a 'file path' in the first place? It's isn't the name of a file! It's an ASSEMBLY REFERENCE.\n\nWould you please fix this? Otherwise we're all having to manually turn e.g.\n\nReference Include=\"Microsoft.Office.Interop.Excel, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c, processorArchitecture=MSIL\"\n\ninto e.g.\nReference Include=\"Microsoft.Office.Interop.Excel\"\n\nwhich works fine as long as it is not a GAC'd assembly reference, and we give it a HintPath so that it finds it!\n(I had to remove the brackets from the assembly reference in this post or this won't render it correctly)",
        "createdAt": "2024-12-05T14:52:39Z",
        "author": {
          "login": "jwarner381"
        }
      },
      {
        "body": "> (I had to remove the [less-than and greater-than symbols] from the assembly reference in this post or this won't render it correctly)\n\nEnclose code in backticks (&#96;):\n\n`<Reference Include=\"Microsoft.Office.Interop.Excel\">`\n\nOr use use entitles (`&lt;` and `&gt;`):\n\n&lt;Reference Include=\"Microsoft.Office.Interop.Excel\"&gt;\n ",
        "createdAt": "2024-12-05T16:29:36Z",
        "author": {
          "login": "jrdodds"
        }
      },
      {
        "body": "I happened to notice on the main MSBuild github repo site (in the primary ReadMe.md) for \"building\" -- step number 2 says \"Ensure [long path support](https://learn.microsoft.com/windows/win32/fileio/maximum-file-path-limitation?tabs=registry#enable-long-paths-in-windows-10-version-1607-and-later) is enabled at the Windows level.\".\n\nAnyway, one might easily see this being a regression in VS 2022 if part of building the code requires long path support to be enabled for Windows, so I'm sure no one will be able to reproduce if actually building/working on the code. : )\n \nI guess the question is whether the team ran into the issue themselves and resolved by enabling long path support, or if that setting was always required and then the \"version\" and \"culture\" info started to be appended to paths and it still just happened to work because devs working on MSBuild already have long path support enabled..?",
        "createdAt": "2024-12-09T21:53:14Z",
        "author": {
          "login": "taberon"
        }
      },
      {
        "body": "Requiring 'long path support' to work around a defect like this is not the right 'solution'. Can you imagine the pain point that would be, on a corporation with thousands of developers, to have to fiddle with each of their registries? And how about build agents in the cloud - do they all automagically have this feature enabled? I doubt it.\n\nBottom line is this is definitely a defect. Again, an assembly reference is *not* part of a file path. The fact that it is being treated as if it were, and being subject to the constraints of file path lengths, is what needs to be fixed, rather than working around it by enabling long file path support.",
        "createdAt": "2024-12-09T22:00:55Z",
        "author": {
          "login": "jwarner381"
        }
      },
      {
        "body": "So we can look at this to check what is going on could you please share a binlog?\n\n[Details on sharing binary logs](https://aka.ms/msbuild/binlog)  [More information on binary logs](https://github.com/dotnet/msbuild/blob/main/documentation/wiki/Binary-Log.md) \nNOTE: Binary logs capture environment information. Ensure it does not include any information you don't want to be public before you share one. If you decide to provide a binlog, we recommend sharing binary logs privately with Microsoft.",
        "createdAt": "2024-12-10T16:29:49Z",
        "author": {
          "login": "maridematte"
        }
      },
      {
        "body": "@maridematte Ok, how do I do that? I have captured a .binlog file, but it is not allowed to post it here.\n\n<details><summary>Details</summary>\n<p>\n\nFile type not allowed: .binlog\n\n</p>\n</details> ",
        "createdAt": "2024-12-10T18:48:43Z",
        "author": {
          "login": "jwarner381"
        }
      },
      {
        "body": "To share binlogs we recommend opening a [feedback ticket with the developer community](https://developercommunity.visualstudio.com/homel), link this github issue and ask the issue to be routed to the MSBuild team. This way your binlog is shared privately with us, since it can contain sensitive information.",
        "createdAt": "2024-12-11T09:16:46Z",
        "author": {
          "login": "maridematte"
        }
      },
      {
        "body": "@maridematte That is extremely clunky. I go to Visual Studio and select to 'report a problem' and it won't let me sign in.\n<details><summary>Details</summary>\n<p>\n\nError signing in: 'ERR_SIGN_IN: System.Exception: ERR_USER_PROFILE_NULL: System.Net.Http.HttpRequestException: An error occurred while sending the request. ---> System.Net.WebException: The underlying connection was closed: Could not establish trust relationship for the SSL/TLS secure channel. ---> System.Security.Authentication.AuthenticationException: The remote certificate is invalid according to the validation procedure. at System.Net.TlsStream.EndWrite(IAsyncResult asyncResult) at \n...\n</p>\n</details> \n\nCould you provide me an email address to email the binlog file to? 'Your' system is really awful for doing this.",
        "createdAt": "2024-12-11T16:40:58Z",
        "author": {
          "login": "jwarner381"
        }
      },
      {
        "body": "That is not great. You can try changing the extension to `.txt` and then uploading it to github itself. So `filename.binlog.txt` and it should work.",
        "createdAt": "2024-12-13T10:22:36Z",
        "author": {
          "login": "maridematte"
        }
      },
      {
        "body": "[build.binlog.txt](https://github.com/user-attachments/files/18128062/build.binlog.txt)\n\n@maridematte Please see the attached file renamed to a .txt extension. Thanks",
        "createdAt": "2024-12-13T15:14:28Z",
        "author": {
          "login": "jwarner381"
        }
      },
      {
        "body": "@maridematte Any progress on this?\nNote however that for me personally and for my company this is less of an issue now. When Visual Studio adds assembly references it does so in the shorter form without the \",Version=...\" attributes on the reference so we don't have to manually manipulate these moving forward. Our issue came up because we had (legacy format) .csproj files that we have been converting to SDK format, and the tool that helped with converting them did not remove the \",Version=...\" attributes and this led to seeing the MSBuild defect (PathTooLongException) in some cases. We have now worked around this by removing those attributes everywhere in our SDK format .csproj files, and since moving forward Visual Studio will generate the references in the shorter form, there is no issue going forward.\nBut, I think it should still be something for Microsoft to be aware of and fix regardless, because it is turning assembly references into \"file path\" parts, which they are not.",
        "createdAt": "2025-01-28T22:09:32Z",
        "author": {
          "login": "jwarner381"
        }
      }
    ]
  }
}