{
  "number": 6834,
  "title": ".NET 6 RC 1: fails to restore FSharp.Core in certain cases",
  "body": "### Issue Description\r\n\r\n* Create an F# library project.\r\n* Create a C# project, and reference the F# library project.\r\n* Add the following NuGet.config:\r\n\r\n```\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<configuration>\r\n  <packageSources>\r\n    <clear />\r\n    <add key=\"dotnet-public\" value=\"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public/nuget/v3/index.json\" protocolVersion=\"3\" />\r\n    <add key=\"Dotnet arcade\" value=\"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-eng/nuget/v3/index.json\" />\r\n    <add key=\"dotnet6\" value=\"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet6/nuget/v3/index.json\" />\r\n    <add key=\"macios-dependencies\" value=\"https://pkgs.dev.azure.com/xamarin/public/_packaging/macios-dependencies/nuget/v3/index.json\" />\r\n    <add key=\"xamarin-impl\" value=\"https://pkgs.dev.azure.com/azure-public/vside/_packaging/xamarin-impl/nuget/v3/index.json\" />\r\n  </packageSources>\r\n</configuration>\r\n```\r\n\r\n* Make sure to use the latest .NET 6 RC 1 release.\r\n* Restoring the C# project now fails because it can't find FSharp.Core.\r\n\r\n### Steps to Reproduce\r\n\r\nRepro: \r\n[fsharplibrary-a9884c8.zip](https://github.com/dotnet/msbuild/files/7137490/fsharplibrary-a9884c8.zip)\r\n\r\n1. Download & extract test case.\r\n2. Download and install .NET 6.0.100-rc.1.21458.1 (other versions might work, but you'll have to update the included global.json accordingly).\r\n3. `dotnet restore main/*.csproj`\r\n\r\n### Expected Behavior\r\n\r\nSuccessful restore.\r\n\r\n### Actual Behavior\r\n\r\n```\r\n$ dotnet restore main/*.csproj\r\n  Determining projects to restore...\r\n/Users/rolf/test/dotnet/fsharplibrary/main/main.csproj : error NU1102: Unable to find package FSharp.Core with version (>= 6.0.0-beta)\r\n/Users/rolf/test/dotnet/fsharplibrary/main/main.csproj : error NU1102:   - Found 40 version(s) in dotnet-public [ Nearest version: 5.0.3-beta.21352.5 ]\r\n/Users/rolf/test/dotnet/fsharplibrary/main/main.csproj : error NU1102:   - Found 0 version(s) in /usr/local/share/dotnet/library-packs\r\n/Users/rolf/test/dotnet/fsharplibrary/main/main.csproj : error NU1102:   - Found 0 version(s) in xamarin-impl\r\n/Users/rolf/test/dotnet/fsharplibrary/main/main.csproj : error NU1102:   - Found 0 version(s) in Dotnet arcade\r\n/Users/rolf/test/dotnet/fsharplibrary/main/main.csproj : error NU1102:   - Found 0 version(s) in dotnet6\r\n/Users/rolf/test/dotnet/fsharplibrary/main/main.csproj : error NU1102:   - Found 0 version(s) in macios-dependencies\r\n  Failed to restore /Users/rolf/test/dotnet/fsharplibrary/main/main.csproj (in 1.06 sec).\r\n  Restored /Users/rolf/test/dotnet/fsharplibrary/lib/fsharplibrary.fsproj (in 1.09 sec).\r\n```\r\n\r\nA couple of notes:\r\n\r\n* Restoring just the F# library project works just fine: `dotnet restore lib/*.fsproj`\r\n* Removing the F# library from the C# project works fine too.\r\n* Adding the following to the NuGet.config the test case work:\r\n\r\n```diff\r\ndiff --git a/NuGet.config b/NuGet.config\r\nindex 447ea35..507aca0 100644\r\n--- a/NuGet.config\r\n+++ b/NuGet.config\r\n@@ -4,6 +4,7 @@\r\n     <clear />\r\n     <add key=\"dotnet-public\" value=\"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-public/nuget/v3/index.json\" protocolVersion=\"3\" />\r\n     <add key=\"Dotnet arcade\" value=\"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-eng/nuget/v3/index.json\" />\r\n+    <add key=\"dotnet-tools\" value=\"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-tools/nuget/v3/index.json\" />\r\n     <add key=\"dotnet6\" value=\"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet6/nuget/v3/index.json\" />\r\n     <add key=\"macios-dependencies\" value=\"https://pkgs.dev.azure.com/xamarin/public/_packaging/macios-dependencies/nuget/v3/index.json\" />\r\n     <add key=\"xamarin-impl\" value=\"https://pkgs.dev.azure.com/azure-public/vside/_packaging/xamarin-impl/nuget/v3/index.json\" />\r\n```\r\n\r\n### Versions & Configurations\r\n\r\nThis happened between 6.0.100-rc.1.21455.2 and 6.0.100-rc.1.21458.1.\r\n\r\nMaestro bump that triggered this: https://github.com/xamarin/xamarin-macios/pull/12663/commits/9f8ea0330e8c1cc68a5efafbec9a8e21af392463\r\n\r\n### Attach a binlog\r\n\r\n[msbuild.binlog.zip](https://github.com/dotnet/msbuild/files/7137522/msbuild.binlog.zip)\r\n",
  "state": "CLOSED",
  "createdAt": "2021-09-09T14:51:23Z",
  "updatedAt": "2024-09-30T15:01:58Z",
  "closedAt": "2024-09-30T15:01:58Z",
  "author": {
    "login": "rolfbjarne"
  },
  "labels": [
    "bug",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Discussion"
  },
  "comments": {
    "nodes": [
      {
        "body": "Isn't that build of the SDK one of the final candidate builds, meaning that it doesn't publish packages to the normal feeds but only to a specific feed? I believe the corresponding one is https://dev.azure.com/dnceng/public/_packaging?_a=feed&feed=6.0.100-rc.1.21458.32-shipping (though I'm not quite sure about the least significant version part there; 32 versus 2). I do see a matching FSharp.Core package there: https://dev.azure.com/dnceng/public/_packaging?_a=package&feed=6.0.100-rc.1.21458.32-shipping&package=FSharp.Core&protocolType=NuGet&version=6.0.0-beta.21457.3.\r\n\r\nI believe this will be resolved when RC1 is fully released and the packages are available on nuget.org.",
        "createdAt": "2021-09-09T16:32:24Z",
        "updatedAt": "2021-09-09T16:32:24Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@mmitche does that \u261d\ud83c\udffb sound right to you? Should Maestro have flowed a new feed?",
        "createdAt": "2021-09-09T16:34:25Z",
        "updatedAt": "2021-09-09T16:34:25Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald The fact that the package is found when restoring the F# library project by itself, but not when restoring the C# project that references the F# project, suggest that there's another problem.\r\n\r\n",
        "createdAt": "2021-09-09T16:35:42Z",
        "updatedAt": "2021-09-09T16:35:42Z",
        "author": {
          "login": "rolfbjarne"
        }
      },
      {
        "body": "Also if I change the C# project to an F# project (that references another F# project), then the restore works too.",
        "createdAt": "2021-09-09T16:36:21Z",
        "updatedAt": "2021-09-09T16:36:55Z",
        "author": {
          "login": "rolfbjarne"
        }
      },
      {
        "body": "> @mmitche does that \u261d\ud83c\udffb sound right to you? Should Maestro have flowed a new feed?\r\n\r\nThat would be the case for final stable builds, but not for RC builds. Reason being that final stable builds will try and create the same package over and over again as we iterate on new functionality. We can't and don't want to overwrite packages in a feed, so we have to create a new feed for each new build, and that has to automatically flow using Maestro.\r\n\r\nFor RC/Preview builds, there is no stabilization, so we publish to the \"main\" feeds on each build. They key bit here is that tooling (C#, F#, msbuild, nuget, etc.) publish to `dotnet-tools` and not `dotnet6`. The reason is that tooling is not necessarily dotnet version specific (especially since a lot of the tooling supports Framework too). So publishing to the `dotnet6` feed doesn't really make sense. Instead we use `dotnet-tools`.\r\n\r\nThe `https://dev.azure.com/dnceng/public/_packaging?_a=feed&feed=6.0.100-rc.1.21458.32-shipping` feed serves two main purposes:\r\n- It's a way to gather all packages that **support** a given .NET SDK release together in one place for testing. If I were to take this feed and nuget.org and smash them together, representing the final \"released\" state, the product should work.\r\n- It's the home of the signed packages. .NET 6 signs after the build, so the `dotnet6` feed is mostly unsigned. When we sign the packages, we end up with a package with different content but the same name+version, which cannot be published back to the `dotnet6` feed. So we use this feed as the home of the signed packages.\r\n\r\nYou don't necessarily need this feed for testing and validation, but it is one option. The other option is to add `dotnet-tools`.",
        "createdAt": "2021-09-09T16:46:00Z",
        "updatedAt": "2021-09-09T16:46:00Z",
        "author": {
          "login": "mmitche"
        }
      },
      {
        "body": "Team triage: closing due to age. If you're still seeing this problem, please let us know and we can reactivate it.",
        "createdAt": "2024-09-30T15:01:58Z",
        "updatedAt": "2024-09-30T15:01:58Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}