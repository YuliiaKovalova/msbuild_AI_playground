{
  "number": 1785,
  "title": "Perform nearest-TFM query in parallel",
  "body": "Work in progress notes on moving from batching to parallelizable invocations of `GetTargetFrameworkProperties`\r\n\r\n<details>\r\n<summary>Working diff</summary>\r\n\r\n```diff\r\ndiff --git \"a/C:\\\\Program Files\\\\dotnet\\\\sdk\\\\1.0.0/Microsoft.Common.CurrentVersion.targets\" \"b/S:\\\\work\\\\single-eval\\\\cli_paralleltfquery\\\\sdk\\\\1.0.0/Microsoft.Common.CurrentVersion.targets\"\r\nindex 80fbf5a..c6b0e86 100644\r\n--- \"a/C:\\\\Program Files\\\\dotnet\\\\sdk\\\\1.0.0/Microsoft.Common.CurrentVersion.targets\"\t\r\n+++ \"b/S:\\\\work\\\\single-eval\\\\cli_paralleltfquery\\\\sdk\\\\1.0.0/Microsoft.Common.CurrentVersion.targets\"\r\n@@ -1510,8 +1510,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.\r\n \r\n     ======================================================================================\r\n   -->\r\n-  <Target Name=\"_GetProjectReferenceTargetFrameworkProperties\"\r\n-          Outputs=\"%(_MSBuildProjectReferenceExistent.Identity)\">\r\n+  <Target Name=\"_GetProjectReferenceTargetFrameworkProperties\">\r\n     <!--\r\n       Honor SkipGetTargetFrameworkProperties=true metadata on project references\r\n       to mean that the project reference is known not to target multiple frameworks\r\n@@ -1555,7 +1554,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.\r\n     </PropertyGroup>\r\n \r\n     <MSBuild\r\n-        Projects=\"%(_MSBuildProjectReferenceExistent.Identity)\"\r\n+        Projects=\"@(_MSBuildProjectReferenceExistent)\"\r\n         Targets=\"GetTargetFrameworkProperties\"\r\n         BuildInParallel=\"$(BuildInParallel)\"\r\n         Properties=\"%(_MSBuildProjectReferenceExistent.SetConfiguration); %(_MSBuildProjectReferenceExistent.SetPlatform); ReferringTargetFramework=$(ReferringTargetFrameworkForProjectReferences)\"\r\n@@ -1563,30 +1562,41 @@ Copyright (C) Microsoft Corporation. All rights reserved.\r\n         RemoveProperties=\"%(_MSBuildProjectReferenceExistent.GlobalPropertiesToRemove);TargetFramework;RuntimeIdentifier\"\r\n         Condition=\"'%(_MSBuildProjectReferenceExistent.SkipGetTargetFrameworkProperties)' != 'true'\">\r\n \r\n-      <Output TaskParameter=\"TargetOutputs\" PropertyName=\"_ProjectReferenceTargetFrameworkProperties\" />\r\n+      <Output TaskParameter=\"TargetOutputs\" ItemName=\"_ProjectReferenceTargetFrameworkProperties\" />\r\n     </MSBuild>\r\n \r\n     <ItemGroup>\r\n-      <_MSBuildProjectReferenceExistent Condition=\"'%(_MSBuildProjectReferenceExistent.Identity)' == '%(Identity)' and '$(_ProjectReferenceTargetFrameworkProperties)' != ''\">\r\n-        <SetTargetFramework>$(_ProjectReferenceTargetFrameworkProperties)</SetTargetFramework>\r\n-\r\n-        <UndefineProperties Condition=\"$(_ProjectReferenceTargetFrameworkProperties.Contains(`ProjectHasSingleTargetFramework=true`))\">%(_MSBuildProjectReferenceExistent.UndefineProperties);TargetFramework;ProjectHasSingleTargetFramework</UndefineProperties>\r\n-        <!-- Unconditionally remove the property that was set as a marker to indicate that for this call we should remove TargetFramework -->\r\n-        <UndefineProperties Condition=\"!$(_ProjectReferenceTargetFrameworkProperties.Contains(`ProjectHasSingleTargetFramework=true`))\">%(_MSBuildProjectReferenceExistent.UndefineProperties);ProjectHasSingleTargetFramework</UndefineProperties>\r\n-      </_MSBuildProjectReferenceExistent>\r\n+      <!-- Build an item that has Identity matching _MSBuildProjectReferenceExistent and metadata for properties to set. -->\r\n+      <_ProjectReferencesWithTargetFrameworkProperties Include=\"@(_ProjectReferenceTargetFrameworkProperties->'%(OriginalItemSpec)')\">\r\n+        <!--<DesiredTargetFrameworkProperties>$([System.String]::Copy('%(Identity)').Replace('ProjectHasSingleTargetFramework=true','').Replace('ProjectIsRidAgnostic=true','').TrimEnd(';'))</DesiredTargetFrameworkProperties>\r\n+        <HasSingleTargetFramework>$([System.String]::Copy('%(Identity)').Contains('ProjectHasSingleTargetFramework=true'))</HasSingleTargetFramework>\r\n+        <IsRidAgnostic>$([System.String]::Copy('%(Identity)').Contains('ProjectIsRidAgnostic=true'))</IsRidAgnostic>-->\r\n+      </_ProjectReferencesWithTargetFrameworkProperties>\r\n     </ItemGroup>\r\n+    <!--<FindInList List=\"@(_ProjectReferencesWithTargetFrameworkProperties)\" ItemSpecToFind=\"foo\" />\r\n+    <FindInList List=\"@(_MSBuildProjectReferenceExistent)\" ItemSpecToFind=\"foo\" />\r\n \r\n+    <Message Importance=\"High\" Text=\"'@(_ProjectReferencesWithTargetFrameworkProperties)' == '%(Identity)' and '%(_ProjectReferencesWithTargetFrameworkProperties.HasSingleTargetFramework)' != 'true' : %(_ProjectReferencesWithTargetFrameworkProperties.DesiredTargetFrameworkProperties)\" />-->\r\n     <ItemGroup>\r\n-      <_MSBuildProjectReferenceExistent Condition=\"'%(_MSBuildProjectReferenceExistent.Identity)' == '%(Identity)' and '$(_ProjectReferenceTargetFrameworkProperties)' != ''\">\r\n-        <UndefineProperties Condition=\"$(_ProjectReferenceTargetFrameworkProperties.Contains(`ProjectIsRidAgnostic=true`))\">%(_MSBuildProjectReferenceExistent.UndefineProperties);RuntimeIdentifier;ProjectIsRidAgnostic</UndefineProperties>\r\n-        <!-- Unconditionally remove the property that was set as a marker to indicate that for this call we should remove RuntimeIdentifier -->\r\n-        <UndefineProperties Condition=\"!$(_ProjectReferenceTargetFrameworkProperties.Contains(`ProjectIsRidAgnostic=true`))\">%(_MSBuildProjectReferenceExistent.UndefineProperties);ProjectIsRidAgnostic</UndefineProperties>\r\n+\r\n+      <!-- Set the project's returned TargetFramework -->\r\n+      <_MSBuildProjectReferenceExistent Condition=\"'@(_ProjectReferencesWithTargetFrameworkProperties)' == '%(Identity)' and '@(_ProjectReferencesWithTargetFrameworkProperties->'%(HasSingleTargetFramework)')' != 'true'\">\r\n+        <SetTargetFramework>@(_ProjectReferencesWithTargetFrameworkProperties->'%(DesiredTargetFrameworkProperties)')</SetTargetFramework>\r\n+      </_MSBuildProjectReferenceExistent>\r\n+\r\n+      <!-- If the project has only one TF, don't specify it. It will go directly to the inner build anyway and we don't want to redundantly specify a global property, which can cause a race. -->\r\n+      <_MSBuildProjectReferenceExistent Condition=\"'@(_ProjectReferencesWithTargetFrameworkProperties)' == '%(Identity)' and '@(_ProjectReferencesWithTargetFrameworkProperties->'%(HasSingleTargetFramework)')' == 'true'\">\r\n+        <UndefineProperties>@(_MSBuildProjectReferenceExistent->'%(UndefineProperties)');TargetFramework</UndefineProperties>\r\n+      </_MSBuildProjectReferenceExistent>\r\n+\r\n+      <!-- If the project has only one RID, assume it's compatible with the current project and don't pass this one along. -->\r\n+      <_MSBuildProjectReferenceExistent Condition=\"'@(_ProjectReferencesWithTargetFrameworkProperties)' == '%(Identity)' and '@(_ProjectReferencesWithTargetFrameworkProperties->'%(IsRidAgnostic)')' == 'true'\">\r\n+        <UndefineProperties>@(_MSBuildProjectReferenceExistent->'%(UndefineProperties)');RuntimeIdentifier</UndefineProperties>\r\n       </_MSBuildProjectReferenceExistent>\r\n     </ItemGroup>\r\n \r\n-    <PropertyGroup>\r\n-      <_ProjectReferenceTargetFrameworkProperties />\r\n-    </PropertyGroup>\r\n+    <FindInList List=\"@(_MSBuildProjectReferenceExistent)\" ItemSpecToFind=\"foo\" />\r\n+\r\n   </Target>\r\n \r\n   <!--\r\ndiff --git \"a/C:\\\\Program Files\\\\dotnet\\\\sdk\\\\1.0.0/Sdks/Microsoft.NET.Sdk/build/Microsoft.NET.Sdk.Common.targets\" \"b/S:\\\\work\\\\single-eval\\\\cli_paralleltfquery\\\\sdk\\\\1.0.0/Sdks/Microsoft.NET.Sdk/build/Microsoft.NET.Sdk.Common.targets\"\r\nindex 1cdc34e..d7599ce 100644\r\n--- \"a/C:\\\\Program Files\\\\dotnet\\\\sdk\\\\1.0.0/Sdks/Microsoft.NET.Sdk/build/Microsoft.NET.Sdk.Common.targets\"\t\r\n+++ \"b/S:\\\\work\\\\single-eval\\\\cli_paralleltfquery\\\\sdk\\\\1.0.0/Sdks/Microsoft.NET.Sdk/build/Microsoft.NET.Sdk.Common.targets\"\r\n@@ -51,7 +51,7 @@ Copyright (c) .NET Foundation. All rights reserved.\r\n     with the referencing project's target framework.\r\n   ============================================================\r\n    -->\r\n-  <Target Name=\"GetTargetFrameworkProperties\" Returns=\"TargetFramework=$(NearestTargetFramework);ProjectHasSingleTargetFramework=$(_HasSingleTargetFramework);ProjectIsRidAgnostic=$(_IsRidAgnostic)\">\r\n+  <Target Name=\"GetTargetFrameworkProperties\" Returns=\"@(ProjectBuildInstructions)\">\r\n \r\n     <PropertyGroup>\r\n       <!-- indicate to caller that project is RID agnostic so that a global property RuntimeIdentifier value can be removed -->\r\n@@ -76,6 +76,23 @@ Copyright (c) .NET Foundation. All rights reserved.\r\n                                Condition=\"'$(_SkipNearestTargetFrameworkResolution)' != 'true'\">\r\n       <Output PropertyName=\"NearestTargetFramework\" TaskParameter=\"NearestTargetFramework\" />\r\n     </GetNearestTargetFramework>\r\n+\r\n+    <PropertyGroup>\r\n+      <PropertiesToBeBuiltWith>TargetFramework=$(NearestTargetFramework)</PropertiesToBeBuiltWith>\r\n+      <PropertiesToBeBuiltWith Condition=\"$(_HasSingleTargetFramework)\">$(PropertiesToBeBuiltWith);ProjectHasSingleTargetFramework=true</PropertiesToBeBuiltWith>\r\n+      <PropertiesToBeBuiltWith Condition=\"$(_IsRidAgnostic)\">$(PropertiesToBeBuiltWith);ProjectIsRidAgnostic=true</PropertiesToBeBuiltWith>\r\n+\r\n+      <!-- The return value from this target will be treated as an item, so it must be escaped to transfer semicolons.-->\r\n+      <PropertiesToBeBuiltWithEscaped>$([MSBuild]::Escape($(PropertiesToBeBuiltWith)))</PropertiesToBeBuiltWithEscaped>\r\n+    </PropertyGroup>\r\n+\r\n+    <ItemGroup>\r\n+      <ProjectBuildInstructions Include=\"$(MSBuildThisFileFullPath)\">\r\n+        <DesiredTargetFrameworkProperties>TargetFramework=$(NearestTargetFramework)</DesiredTargetFrameworkProperties>\r\n+        <HasSingleTargetFramework>$(_HasSingleTargetFramework)</HasSingleTargetFramework>\r\n+        <IsRidAgnostic>$(_IsRidAgnostic)</IsRidAgnostic>\r\n+      </ProjectBuildInstructions>\r\n+    </ItemGroup>\r\n   </Target>\r\n   \r\n </Project>\r\n```\r\n</details>",
  "state": "CLOSED",
  "createdAt": "2017-03-02T22:02:25Z",
  "updatedAt": "2024-02-21T17:21:15Z",
  "closedAt": "2017-11-06T21:15:57Z",
  "author": {
    "login": "rainersigwald"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "MSBuild 15.5"
  },
  "comments": {
    "nodes": [
      {
        "body": "cleaned up diff:\r\n\r\n```diff\r\ndiff --git \"a/C:\\\\Program Files\\\\dotnet\\\\sdk\\\\1.0.0/Microsoft.Common.CurrentVersion.targets\" \"b/S:\\\\work\\\\single-eval\\\\cli_paralleltfquery\\\\sdk\\\\1.0.0/Microsoft.Common.CurrentVersion.targets\"\r\nindex 80fbf5a..0aeba60 100644\r\n--- \"a/C:\\\\Program Files\\\\dotnet\\\\sdk\\\\1.0.0/Microsoft.Common.CurrentVersion.targets\"\t\r\n+++ \"b/S:\\\\work\\\\single-eval\\\\cli_paralleltfquery\\\\sdk\\\\1.0.0/Microsoft.Common.CurrentVersion.targets\"\r\n@@ -1510,8 +1510,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.\r\n \r\n     ======================================================================================\r\n   -->\r\n-  <Target Name=\"_GetProjectReferenceTargetFrameworkProperties\"\r\n-          Outputs=\"%(_MSBuildProjectReferenceExistent.Identity)\">\r\n+  <Target Name=\"_GetProjectReferenceTargetFrameworkProperties\">\r\n     <!--\r\n       Honor SkipGetTargetFrameworkProperties=true metadata on project references\r\n       to mean that the project reference is known not to target multiple frameworks\r\n@@ -1555,7 +1554,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.\r\n     </PropertyGroup>\r\n \r\n     <MSBuild\r\n-        Projects=\"%(_MSBuildProjectReferenceExistent.Identity)\"\r\n+        Projects=\"@(_MSBuildProjectReferenceExistent)\"\r\n         Targets=\"GetTargetFrameworkProperties\"\r\n         BuildInParallel=\"$(BuildInParallel)\"\r\n         Properties=\"%(_MSBuildProjectReferenceExistent.SetConfiguration); %(_MSBuildProjectReferenceExistent.SetPlatform); ReferringTargetFramework=$(ReferringTargetFrameworkForProjectReferences)\"\r\n@@ -1563,30 +1562,32 @@ Copyright (C) Microsoft Corporation. All rights reserved.\r\n         RemoveProperties=\"%(_MSBuildProjectReferenceExistent.GlobalPropertiesToRemove);TargetFramework;RuntimeIdentifier\"\r\n         Condition=\"'%(_MSBuildProjectReferenceExistent.SkipGetTargetFrameworkProperties)' != 'true'\">\r\n \r\n-      <Output TaskParameter=\"TargetOutputs\" PropertyName=\"_ProjectReferenceTargetFrameworkProperties\" />\r\n+      <Output TaskParameter=\"TargetOutputs\" ItemName=\"_ProjectReferenceTargetFrameworkProperties\" />\r\n     </MSBuild>\r\n \r\n     <ItemGroup>\r\n-      <_MSBuildProjectReferenceExistent Condition=\"'%(_MSBuildProjectReferenceExistent.Identity)' == '%(Identity)' and '$(_ProjectReferenceTargetFrameworkProperties)' != ''\">\r\n-        <SetTargetFramework>$(_ProjectReferenceTargetFrameworkProperties)</SetTargetFramework>\r\n+      <!-- Build an item that has Identity matching _MSBuildProjectReferenceExistent and metadata for properties to set. -->\r\n+      <_ProjectReferencesWithTargetFrameworkProperties Include=\"@(_ProjectReferenceTargetFrameworkProperties->'%(OriginalItemSpec)')\">\r\n+        <!--<DesiredTargetFrameworkProperties>$([System.String]::Copy('%(Identity)').Replace('ProjectHasSingleTargetFramework=true','').Replace('ProjectIsRidAgnostic=true','').TrimEnd(';'))</DesiredTargetFrameworkProperties>\r\n+        <HasSingleTargetFramework>$([System.String]::Copy('%(Identity)').Contains('ProjectHasSingleTargetFramework=true'))</HasSingleTargetFramework>\r\n+        <IsRidAgnostic>$([System.String]::Copy('%(Identity)').Contains('ProjectIsRidAgnostic=true'))</IsRidAgnostic>-->\r\n+      </_ProjectReferencesWithTargetFrameworkProperties>\r\n+\r\n+      <!-- Set the project's returned TargetFramework -->\r\n+      <_MSBuildProjectReferenceExistent Condition=\"'@(_ProjectReferencesWithTargetFrameworkProperties)' == '%(Identity)' and '@(_ProjectReferencesWithTargetFrameworkProperties->'%(HasSingleTargetFramework)')' != 'true'\">\r\n+        <SetTargetFramework>@(_ProjectReferencesWithTargetFrameworkProperties->'%(DesiredTargetFrameworkProperties)')</SetTargetFramework>\r\n+      </_MSBuildProjectReferenceExistent>\r\n \r\n-        <UndefineProperties Condition=\"$(_ProjectReferenceTargetFrameworkProperties.Contains(`ProjectHasSingleTargetFramework=true`))\">%(_MSBuildProjectReferenceExistent.UndefineProperties);TargetFramework;ProjectHasSingleTargetFramework</UndefineProperties>\r\n-        <!-- Unconditionally remove the property that was set as a marker to indicate that for this call we should remove TargetFramework -->\r\n-        <UndefineProperties Condition=\"!$(_ProjectReferenceTargetFrameworkProperties.Contains(`ProjectHasSingleTargetFramework=true`))\">%(_MSBuildProjectReferenceExistent.UndefineProperties);ProjectHasSingleTargetFramework</UndefineProperties>\r\n+      <!-- If the project has only one TF, don't specify it. It will go directly to the inner build anyway and we don't want to redundantly specify a global property, which can cause a race. -->\r\n+      <_MSBuildProjectReferenceExistent Condition=\"'@(_ProjectReferencesWithTargetFrameworkProperties)' == '%(Identity)' and '@(_ProjectReferencesWithTargetFrameworkProperties->'%(HasSingleTargetFramework)')' == 'true'\">\r\n+        <UndefineProperties>@(_MSBuildProjectReferenceExistent->'%(UndefineProperties)');TargetFramework</UndefineProperties>\r\n       </_MSBuildProjectReferenceExistent>\r\n-    </ItemGroup>\r\n \r\n-    <ItemGroup>\r\n-      <_MSBuildProjectReferenceExistent Condition=\"'%(_MSBuildProjectReferenceExistent.Identity)' == '%(Identity)' and '$(_ProjectReferenceTargetFrameworkProperties)' != ''\">\r\n-        <UndefineProperties Condition=\"$(_ProjectReferenceTargetFrameworkProperties.Contains(`ProjectIsRidAgnostic=true`))\">%(_MSBuildProjectReferenceExistent.UndefineProperties);RuntimeIdentifier;ProjectIsRidAgnostic</UndefineProperties>\r\n-        <!-- Unconditionally remove the property that was set as a marker to indicate that for this call we should remove RuntimeIdentifier -->\r\n-        <UndefineProperties Condition=\"!$(_ProjectReferenceTargetFrameworkProperties.Contains(`ProjectIsRidAgnostic=true`))\">%(_MSBuildProjectReferenceExistent.UndefineProperties);ProjectIsRidAgnostic</UndefineProperties>\r\n+      <!-- If the project has only one RID, assume it's compatible with the current project and don't pass this one along. -->\r\n+      <_MSBuildProjectReferenceExistent Condition=\"'@(_ProjectReferencesWithTargetFrameworkProperties)' == '%(Identity)' and '@(_ProjectReferencesWithTargetFrameworkProperties->'%(IsRidAgnostic)')' == 'true'\">\r\n+        <UndefineProperties>@(_MSBuildProjectReferenceExistent->'%(UndefineProperties)');RuntimeIdentifier</UndefineProperties>\r\n       </_MSBuildProjectReferenceExistent>\r\n     </ItemGroup>\r\n-\r\n-    <PropertyGroup>\r\n-      <_ProjectReferenceTargetFrameworkProperties />\r\n-    </PropertyGroup>\r\n   </Target>\r\n \r\n   <!--\r\ndiff --git \"a/C:\\\\Program Files\\\\dotnet\\\\sdk\\\\1.0.0/Sdks/Microsoft.NET.Sdk/build/Microsoft.NET.Sdk.Common.targets\" \"b/S:\\\\work\\\\single-eval\\\\cli_paralleltfquery\\\\sdk\\\\1.0.0/Sdks/Microsoft.NET.Sdk/build/Microsoft.NET.Sdk.Common.targets\"\r\nindex 1cdc34e..70486fb 100644\r\n--- \"a/C:\\\\Program Files\\\\dotnet\\\\sdk\\\\1.0.0/Sdks/Microsoft.NET.Sdk/build/Microsoft.NET.Sdk.Common.targets\"\t\r\n+++ \"b/S:\\\\work\\\\single-eval\\\\cli_paralleltfquery\\\\sdk\\\\1.0.0/Sdks/Microsoft.NET.Sdk/build/Microsoft.NET.Sdk.Common.targets\"\r\n@@ -51,7 +51,7 @@ Copyright (c) .NET Foundation. All rights reserved.\r\n     with the referencing project's target framework.\r\n   ============================================================\r\n    -->\r\n-  <Target Name=\"GetTargetFrameworkProperties\" Returns=\"TargetFramework=$(NearestTargetFramework);ProjectHasSingleTargetFramework=$(_HasSingleTargetFramework);ProjectIsRidAgnostic=$(_IsRidAgnostic)\">\r\n+  <Target Name=\"GetTargetFrameworkProperties\" Returns=\"@(ProjectBuildInstructions)\">\r\n \r\n     <PropertyGroup>\r\n       <!-- indicate to caller that project is RID agnostic so that a global property RuntimeIdentifier value can be removed -->\r\n@@ -76,6 +76,14 @@ Copyright (c) .NET Foundation. All rights reserved.\r\n                                Condition=\"'$(_SkipNearestTargetFrameworkResolution)' != 'true'\">\r\n       <Output PropertyName=\"NearestTargetFramework\" TaskParameter=\"NearestTargetFramework\" />\r\n     </GetNearestTargetFramework>\r\n+\r\n+    <ItemGroup>\r\n+      <ProjectBuildInstructions Include=\"$(MSBuildThisFileFullPath)\">\r\n+        <DesiredTargetFrameworkProperties>TargetFramework=$(NearestTargetFramework)</DesiredTargetFrameworkProperties>\r\n+        <HasSingleTargetFramework>$(_HasSingleTargetFramework)</HasSingleTargetFramework>\r\n+        <IsRidAgnostic>$(_IsRidAgnostic)</IsRidAgnostic>\r\n+      </ProjectBuildInstructions>\r\n+    </ItemGroup>\r\n   </Target>\r\n   \r\n </Project>\r\n```",
        "createdAt": "2017-03-02T22:04:57Z",
        "updatedAt": "2017-03-02T22:04:57Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I'm looking at this again because it seems likely to be the foundation of any good path to fixing #1276.\r\n\r\nAs implemented above, this would break backward compatibility with older SDKs on the new common targets (like SDK 2.0.0 on MSBuild 15.5 would presumably have).\r\n\r\nBut that can be fixed. Working on that now.",
        "createdAt": "2017-08-18T17:15:38Z",
        "updatedAt": "2017-08-18T17:15:38Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}