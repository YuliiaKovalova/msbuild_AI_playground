{
  "number": 7011,
  "title": "Consider  whether time stamp checks can be parallelized",
  "body": "MSBuild do lots of up-to-date checks, by getting LastWriteUtcTime for many files and compare it.\r\n\r\nWe would like to understand if simple parallelization of related File.IO operation would improve performance not only for MSBuild but also in general.",
  "state": "CLOSED",
  "createdAt": "2021-11-03T10:18:37Z",
  "updatedAt": "2024-02-21T14:11:10Z",
  "closedAt": "2021-11-08T13:47:11Z",
  "author": {
    "login": "rokonec"
  },
  "labels": [
    "Area: Performance",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "rokonec"
      }
    ]
  },
  "milestone": {
    "title": "VS 17.1"
  },
  "comments": {
    "nodes": [
      {
        "body": "I have build dotnebenchmark for related and measured on couple different storage devices.\r\n\r\nDuring measurements I found out, it is very dependent on how spread files are. I therefore measured in two main scenarios:\r\n1. sequential files -> ``` filesSample = Directory.EnumerateFiles(ScanFolder, \"*\", SearchOption.AllDirectories).Took(CountOfFiles)```\r\n1. random files-> ``` filesSample = Directory.EnumerateFiles(ScanFolder, \"*\", SearchOption.AllDirectories).OrderBy(fn => fn.GetHashCode).Took(CountOfFiles)```\r\n\r\nI have measured data on various runtimes, Core 3.1, net5, net6, net 4.7.2 but all runtimes shows about same behavior, which is understandable, as my benchmark was simulating MSBuild up-to-date check implementation i.e. P-Invoke to kernel `GetFileAttributesEx`. For brevity sake I will present here only 4.7.2 runtime data.\r\n\r\nAll charts are presented as % difference from non parallelized version  i.e. its DOP (degree of paralelism) = 1.\r\n\r\nI have measured it at thee storage devices. \r\n1. SSD - Samsung 980 PRO NVMe\u2122 M.2 SSD 1 TB\r\n1. Western Digital WD20EZRX-00DC0B0 - 2TB 7.2K RPM 64MB Cache\r\n1. Azure VM Cloud  - Standard_D8as_v4 - Standard SSD\r\n\r\nAnother dimension of measurements was `count of files`: `10, 20, 50, 100, 1000`\r\n\r\nMeasured at CPU: \r\n- SSD and rotational at my home desktop AMD Ryzen 9500X 12/24 cores\r\n- VM Cloud - Standard_D8as_v4 - 8 vCPUs\r\n\r\n",
        "createdAt": "2021-11-03T10:42:40Z",
        "updatedAt": "2021-11-03T13:41:51Z",
        "author": {
          "login": "rokonec"
        }
      },
      {
        "body": "Storage 1: SSD - Samsung 980 PRO NVMe\u2122 M.2 SSD 1 TB\r\n\r\nSequential:\r\n![image](https://user-images.githubusercontent.com/25249058/140046689-f026ac15-a5c2-4982-bca7-1984325e2b17.png)\r\n\r\nRandom:\r\n![image](https://user-images.githubusercontent.com/25249058/140046754-d3db4dba-cbf5-4b41-ac69-3b48a9ceca9b.png)\r\n\r\n",
        "createdAt": "2021-11-03T10:54:09Z",
        "updatedAt": "2021-11-03T10:54:09Z",
        "author": {
          "login": "rokonec"
        }
      },
      {
        "body": "Storage 2: Western Digital WD20EZRX-00DC0B0 - 2TB 7.2K RPM 64MB Cache\r\n\r\nSequential:\r\n![image](https://user-images.githubusercontent.com/25249058/140048168-f07cf2c9-ec14-4b6f-926c-936f8c1c9af5.png)\r\n\r\nRandom:\r\n![image](https://user-images.githubusercontent.com/25249058/140048378-5138591c-a8a6-4423-b80a-de255e3c6089.png)\r\n\r\n\r\n\r\n",
        "createdAt": "2021-11-03T10:56:43Z",
        "updatedAt": "2021-11-03T10:56:43Z",
        "author": {
          "login": "rokonec"
        }
      },
      {
        "body": "Storage 2: Azure Cloud - Standard_D8as_v4 - Standard SSD\r\n\r\nSequential:\r\n![image](https://user-images.githubusercontent.com/25249058/140048621-5866fd91-76b2-4fa5-9709-1c8cffaccc01.png)\r\n\r\nRandom:\r\n![image](https://user-images.githubusercontent.com/25249058/140048750-6c314e6e-691d-40e6-b036-ac3e19b2a577.png)\r\n",
        "createdAt": "2021-11-03T10:59:52Z",
        "updatedAt": "2021-11-03T10:59:52Z",
        "author": {
          "login": "rokonec"
        }
      },
      {
        "body": "## Conclusion\r\n\r\nFragmentation of files location on file system have huge correlation to measured performance differences. It seems that parallelization can HARM performance in cases when it causes various file system caches invalidation.\r\nOn the other hand optimal DOP for non fragmented file locations can saves up to 70% of time. \r\n\r\n**Data hints that parallelization can help in use cases when we have enough confidence (50% +) that files are collocated in the file system dictionary.**\r\n\r\nHowever, for MSBuild I do not recommend such optimization because after merging #6974 the time spend in up-to-date checks was measured as only about 1s from overall 125s time spend on other stuff. After looking at code we cloud optimize about half of that second by about half i.e. 250ms from 125s = 0.2%. **I do not consider worth it.**\r\n",
        "createdAt": "2021-11-03T11:23:34Z",
        "updatedAt": "2021-11-03T20:45:40Z",
        "author": {
          "login": "rokonec"
        }
      },
      {
        "body": "@danmoseley @ladipro @rainersigwald @drewnoakes @jaredpar  I think you might find data from this 'white paper' interesting. Feel free to ping me for details.",
        "createdAt": "2021-11-03T11:29:31Z",
        "updatedAt": "2021-11-03T11:29:31Z",
        "author": {
          "login": "rokonec"
        }
      },
      {
        "body": "Thank you for sharing this.\r\n\r\nGiven the difference between random and sequential order, I wonder if there's value in ordering the items we check even without parallelism. Perhaps these checks would be faster if we ordered items by full path before scanning the file system. That may make better use of file system caches.",
        "createdAt": "2021-11-04T07:50:05Z",
        "updatedAt": "2021-11-04T07:50:05Z",
        "author": {
          "login": "drewnoakes"
        }
      },
      {
        "body": "@drewnoakes I agree. Even if we run this non concurrently sorted files would most probably better leverage file system caches. However, in SDK based project during globing we get list by enumerating file system in order which I believe is optimal for sequential 'GetFileAttributes' calls. Sorting this would probably make it slightly worse.",
        "createdAt": "2021-11-04T12:42:27Z",
        "updatedAt": "2021-11-04T12:42:27Z",
        "author": {
          "login": "rokonec"
        }
      }
    ]
  }
}