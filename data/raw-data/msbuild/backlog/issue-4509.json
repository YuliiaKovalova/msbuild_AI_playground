{
  "number": 4509,
  "title": "Let's make ProjectItem.EvaluatedIncludeBeforeWildcardExpansion public",
  "body": "We are developing Rider IDE and for some features we would like to have access to the `EvaluatedIncludeBeforeWildcardExpansion` property in some way. \r\n",
  "state": "CLOSED",
  "createdAt": "2019-07-13T07:57:38Z",
  "updatedAt": "2024-12-03T17:42:33Z",
  "closedAt": "2024-12-03T17:42:32Z",
  "author": {
    "login": "xtmq"
  },
  "labels": [
    "Feature Request"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Discussion"
  },
  "comments": {
    "nodes": [
      {
        "body": "Can you expand on your scenario and why this is needed?",
        "createdAt": "2019-07-15T02:53:03Z",
        "updatedAt": "2019-07-15T02:53:03Z",
        "author": {
          "login": "livarcocc"
        }
      },
      {
        "body": "Yes, I will do. We are developing Rider IDE. And Rider supports `link` metadata. So imagine we have the next project item: \r\n```\r\n<Compile Include=\"A.cs\" Link=\"B.cs\" />\r\n```\r\nIn that case, Rider correctly renders node B.cs (which links to A.cs) in the solution explorer. \r\n\r\nBut let's take a bit more complicated case:\r\n```\r\n<Compile Include=\"src/*.cs\" Link=\"Data/X.cs\" />\r\n<Content Include=\"img/A.png;img/B.png\" Link=\"Data/X.png\" />\r\n<None Include=\"@(Compile)\" Link=\"Data/X.cs\" />\r\n```\r\nIn that case Rider has to understand that `ProjectItem` which represents `A.cs` or `A.png` came from some wildcard pattern and we have to drop last linked part (`/X.cs` and `/X.png`) and use physical file names to build project model.\r\n\r\nAnd here we have a problem. Rider has to understand \"origin\" of some `ProjectItem` but it has only `UnevaluatedInclude` public property. In case of `src/*.cs` everything is ok, we can easily tell the item was introduced from a pattern. \r\nBut for `@(Compile)` and `img/A.png;img/B.png` it is almost impossible. We have no idea which were produced by wildcard and which by a normal strict include. \r\n\r\nSo public access to the property `EvaluatedIncludeBeforeWildcardExpansion` can solve this problem and allow us answering the question fast without trying to repeat MsBuild evaluation logic. \r\n\r\nThanks!",
        "createdAt": "2019-07-23T16:13:13Z",
        "updatedAt": "2019-07-23T16:13:13Z",
        "author": {
          "login": "xtmq"
        }
      },
      {
        "body": "Team triage: We unfortunately are not planning on doing this work due to low priority, and it being an edge case for feature request.",
        "createdAt": "2024-12-03T17:42:32Z",
        "updatedAt": "2024-12-03T17:42:32Z",
        "author": {
          "login": "maridematte"
        }
      }
    ]
  }
}