{
  "number": 10786,
  "title": "[BuildCheck Suggestion]: Custom BuildCheck reports are not following the canonical error format",
  "body": "### Summary\n\nCustom BuildChecks that report errors don't seem to be emitting with the canonical error format, leading to GitHub Actions not catching the results as expected.\n\nIn [this build pipeline](https://github.com/baronfel/sdk-container-demo/actions/runs/11260791412/job/31312798294), @YuliiaKovalova's custom build check detected the following violation and reported it as an error:\n\n```\n/usr/share/dotnet/sdk/9.0.100-rc.2.24474.11/Current/Microsoft.Common.props(84,119): error BCC002: https://aka.ms/buildcheck/codes#BCC002 - Detected secret: Username with value: 'runner'\n```\n\nIn [this pipeline](https://github.com/baronfel/sdk-container-demo/actions/runs/11275795254/job/31358084276) the same check reported as a warning and was caught:\n\n```\n/usr/share/dotnet/sdk/9.0.100-rc.2.24474.11/Current/Microsoft.Common.props(84,119): warning BCC002: https://aka.ms/buildcheck/codes#BCC002 - Detected secret: Username with value: 'runner' [/home/runner/work/sdk-container-demo/sdk-container-demo/src/sdk-container-demo/sdk-container-demo.csproj]\n```\n\nThe gap seems to be that the final project in the square brackets is missing from the error report.\n\n### Background and Motivation\n\nSee above\n\n### Sample issue or antipattern that the check should be flagging\n\nSee above\n\n### Sample output\n\n_No response_",
  "state": "CLOSED",
  "createdAt": "2024-10-10T14:18:55Z",
  "updatedAt": "2024-11-01T14:47:20Z",
  "closedAt": "2024-11-01T14:46:33Z",
  "author": {
    "login": "baronfel"
  },
  "labels": [
    "BuildCheck Suggestion",
    "triaged",
    "Area: BuildCheck"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "JanKrivanek"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "This is a weird magic applied by GHA. \n\nWhen run purely from MSBuild the diagnostics have identical formatting. On GHA note the extra markup for warnings\n\n   error:\n   ```\n   2024-10-09T18:21:44.4314294Z /usr/share/dotnet/sdk/9.0.100-rc.2.24474.11/Current/Microsoft.Common.props(84,119): error BCC002: https://aka.ms/buildcheck/codes#BCC002 - Detected secret: Username with value: 'runner'\n   ```\n\n   warning:\n   ```\n   2024-10-10T14:10:45.7254122Z ##[warning]/usr/share/dotnet/sdk/9.0.100-rc.2.24474.11/Current/Microsoft.Common.props(84,119): warning BCC002: https://aka.ms/buildcheck/codes#BCC002 - Detected secret: Username with value: 'runner' [/home/runner/work/sdk-container-demo/sdk-container-demo/src/sdk-container-demo/sdk-container-demo.csproj]\n   ```\n\n\nThough it's interesting that if I promote the warning to error via /WarnAsError - the markup is there:\n\n```\n2024-11-01T12:59:54.5080696Z ##[error]/usr/share/dotnet/sdk/9.0.100-rc.2.24474.11/Current/Microsoft.Common.props(84,119): error BCC002: https://aka.ms/buildcheck/codes#BCC002 - Detected secret: Username with value: 'runner' [/home/runner/work/sdk-container-demo/sdk-container-demo/src/sdk-container-demo/sdk-container-demo.csproj]\n```",
        "createdAt": "2024-11-01T12:57:33Z",
        "updatedAt": "2024-11-01T13:02:40Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "Interesting. It seems like if we want consistent highlighting/experience in GitHub Actions then we'd need to use their API for reporting annotations (e.g. make a Logger that is GHA-aware and can emit the right data).",
        "createdAt": "2024-11-01T13:03:32Z",
        "updatedAt": "2024-11-01T13:03:32Z",
        "author": {
          "login": "baronfel"
        }
      },
      {
        "body": "Possibly - as I'm e.g. not seing those markups for the nuget warnings either.\n\n\nThough there is one slight differenc between the BuildCheck warnings and errors - warnings are indented while errors are not:\n\n![Image](https://github.com/user-attachments/assets/cf34fa4f-0784-4f81-8216-61ef4150fa3e)\n\n\nThis doesn't apply to 'promoted' warnings to errors. So I suspect warnings get some extra build context that make the console logger indent it as part of that context. I'm digging in...",
        "createdAt": "2024-11-01T13:21:15Z",
        "updatedAt": "2024-11-01T13:21:15Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "Ok - I have it.\n\n**tl;dr;:** This is combination of 2 flows:\n * GHA recoginition of build warnings/errors, that requires indentation\n * MSBuild treating of warnings and errors that happens during evaluation - which then cannot be easily promoted/demoted; are not indented under project etc.\n\n**More details:**\n\nThe events encountered during evaluation have only EvaluationId, but missing ContextId and InstanceId (more details in doc here: https://github.com/dotnet/msbuild/blob/main/documentation/wiki/Binary-Log.md#meaning-of-various-ids-in-the-buildeventargs). That causes console logger not to indent it under a project execution.\n\nTo properly handle `Warnings[Not]As[Errors|Messages]` we buffer BuildCheck warnings encountered during eval and associate execution time BuildContext with them, once that is know - so that LoggingService can properly fetch mappings of warnings promotability/demotability, that is keyed by InstanceId and ContextId. So they can as well be properly indented",
        "createdAt": "2024-11-01T14:46:12Z",
        "updatedAt": "2024-11-01T14:47:20Z",
        "author": {
          "login": "JanKrivanek"
        }
      }
    ]
  }
}