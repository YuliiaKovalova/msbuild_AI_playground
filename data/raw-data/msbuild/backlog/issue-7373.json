{
  "number": 7373,
  "title": "[MSBuild Server] Introduce a client-side activation/communication library",
  "body": "Measure the client startup cost of these approaches:\r\n1. Use `Microsoft.Build` as the client library. Based on the premise that most of the assembly will not be used when communicating with the server.\r\n1. Introduce a new assembly solely for the purpose of talking to the server.\r\n1. Distribute the client in the form of source code.\r\n\r\nDepending on the outcome of the above, add a project in the MSBuild repo with a new client library. The library exposes a public API through which it accepts build requests. The API can be left unimplemented for now.\r\n\r\nAcceptance criteria: Regardless of the approach chosen the library publishes out of the MSBuild repo for both .NET Framework and .NET 6/7 targets. It exposes a modern async API.",
  "state": "CLOSED",
  "createdAt": "2022-02-07T10:31:06Z",
  "updatedAt": "2024-02-21T14:09:51Z",
  "closedAt": "2022-06-29T13:03:09Z",
  "author": {
    "login": "ladipro"
  },
  "labels": [
    "Area: Performance",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "AR-May"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "We measured rebuild of the same project for all three options and did not see much of difference performace-wise.\r\nHere are the results.\r\nOption|First Run|SecondRun\r\n---|---|---\r\n1|1967.6 ms|275 ms\r\n2|1985 ms|265 ms\r\n3|2036 ms|295 ms\r\n\r\nHence, we decided we will implement it in `Microsoft.Build` assembly. ",
        "createdAt": "2022-03-29T07:01:49Z",
        "updatedAt": "2022-03-29T07:01:49Z",
        "author": {
          "login": "AR-May"
        }
      }
    ]
  }
}