{
  "number": 408,
  "title": "WriteCodeFragment should be deterministic and not include timestamp in comments",
  "body": "The `WriteCodeFragment` task includes a comment in the generated file that has the value `DateTime.Now` of when the file was generated.  This interferes with determinism compiles because it means every build of a project that uses `WriteCodeFragment` is guaranteed to have a file with a different checksum.  \n\nCan we provide a way to disable this timestamp?  Or really can it just be removed by default from the task?  I don't think it provides much value.  It's a generated file that ideally no one is looking at.  If they are looking at it the timestamp is of questionable value because knowing when it was generated is less valuable than knowing the inputs that generated it (at least IMHO).  \n\nNote: in many cases it doesn't directly affect determinism because it often doesn't include executable code, just attributes.  But even in those cases it makes it difficult to track down problems.  \n",
  "state": "CLOSED",
  "createdAt": "2015-12-18T00:58:38Z",
  "updatedAt": "2024-02-21T17:29:31Z",
  "closedAt": "2016-01-06T17:21:39Z",
  "author": {
    "login": "jaredpar"
  },
  "labels": [
    "help wanted",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "jaredpar"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "I assume the task is a some kind of codegenerator. Should it activate only when inputs have changed?\nThere is a value in including the date stamp in the outs when code was _re_ -generated, but not otherwise.\n",
        "createdAt": "2015-12-21T03:32:14Z",
        "updatedAt": "2015-12-21T03:32:14Z",
        "author": {
          "login": "VSadov"
        }
      },
      {
        "body": "@VSadov what does the timestamp give though?  These are almost always used for temporary files that are little more than build artifacts.  The timestamp for those just gives you a relative time in which the build was run.  \n\n> There is a value in including the date stamp in the outs when code was re -generated, but not otherwise.\n\nEven having this defeats determinism.  It means that two developers who build the same code on different machines will have different inputs passed to the compiler.  \n\nIf it wants to provide useful information about the source code why not include the checksum of the inputs it was generated off of? \n",
        "createdAt": "2015-12-22T02:10:30Z",
        "updatedAt": "2015-12-22T02:10:30Z",
        "author": {
          "login": "jaredpar"
        }
      },
      {
        "body": "Agreed, the timestamp should be removed from output. I updated the issue title.\nRegarding incrementality, the target calling the task needs to have inputs / outputs defined (and issues submitted to the owners of target files with no input / outputs for the targets that call this task). I did a quick check and the msbuild owned targets that call this task are incremental (hopefully I got all of them :) )\n",
        "createdAt": "2015-12-23T00:50:01Z",
        "updatedAt": "2015-12-23T00:50:01Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "Team triage: unless someone can convince us otherwise, we think the timestamp should just be removed (and no option to add it back).\n\n@jaredpar I marked this up-for-grabs, so it should be gotten to . . . eventually. If you'd like to contribute a fix feel free, and if you need it for a specific release (like Update 2?), please let us know.\n",
        "createdAt": "2016-01-05T23:48:27Z",
        "updatedAt": "2016-01-05T23:48:27Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald happy to do the work here.\n\nWas looking through the docs.  Didn't see any guide onto how to run the unit tests.  Is there something I'm missing that I can look at? \n",
        "createdAt": "2016-01-06T01:30:45Z",
        "updatedAt": "2016-01-06T01:30:45Z",
        "author": {
          "login": "jaredpar"
        }
      },
      {
        "body": "@jaredpar there's a page in the wiki that should have you covered: https://github.com/Microsoft/msbuild/wiki/Building%20Testing%20and%20Debugging#running-unit-tests\n",
        "createdAt": "2016-01-06T01:38:32Z",
        "updatedAt": "2016-01-06T01:38:32Z",
        "author": {
          "login": "akoeplinger"
        }
      },
      {
        "body": "@akoeplinger doh, read right past that :frowning:  Thanks for pointing it out. \n",
        "createdAt": "2016-01-06T01:47:38Z",
        "updatedAt": "2016-01-06T01:47:38Z",
        "author": {
          "login": "jaredpar"
        }
      }
    ]
  }
}