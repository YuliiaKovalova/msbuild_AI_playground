{
  "number": 5599,
  "title": "Inconsistent behavior in building project references between Visual Studio and dotnet cli build",
  "body": "MSBuild offers the possiblity to pass additional properties for build project references. However, that only works well with dotnet cli, not with Visual Studio. I have created a sample repository that demonstrates the problem. The visual studio build fails, because the zip of the reference project is not being generated. With the dotnet cli the build works as expected.\r\n\r\nThe demo repo is here: \r\nhttps://github.com/TFTomSun/IncosistentBuildBehavior\r\n\r\n```xml\r\n...\r\n <ProjectReference Include=\"@(EmbeddedReference->'..\\%(Identity)\\%(Identity).csproj')\">\r\n      <SkipGetTargetFrameworkProperties>true</SkipGetTargetFrameworkProperties>\r\n      <ReferenceOutputAssembly>false</ReferenceOutputAssembly>\r\n      <SetTargetFramework>TargetFramework=net48</SetTargetFramework>\r\n      **<!--These properties are not passed when building inside Visual Studio-->**\r\n      <AdditionalProperties>PublishZipFilePath=$(MSBuildProjectDirectory)\\Resources\\%(ReferenceName).zip</AdditionalProperties>\r\n    </ProjectReference>\r\n\r\n...\r\n```\r\n\r\nAre there any plans to align the Visual Studio build with the msbuild / dotnet cli behavior? I had those issues already several times and it makes it really difficult to cover all quirks of the msbuild behavior in different contexts at the moment.\r\n\r\nActually I don't know how to workaround the issue. Of course I could start a MSBuild Task on my own, but then I would actually build the dependent project twice. That's probably also the reason, why building the project dependencies in Visual Studio via MSBuild is disabled here:\r\nExcerpt from Microsoft.Common.CurrentVersion.targets line 1807\r\n\r\n```xml\r\n\r\n <!--\r\n        Build referenced projects when building from the command line.\r\n        -->\r\n    <MSBuild\r\n        Projects=\"@(_MSBuildProjectReferenceExistent)\"\r\n        Targets=\"%(_MSBuildProjectReferenceExistent.Targets)\"\r\n        BuildInParallel=\"$(BuildInParallel)\"\r\n        Properties=\"%(_MSBuildProjectReferenceExistent.SetConfiguration); %(_MSBuildProjectReferenceExistent.SetPlatform);  %(_MSBuildProjectReferenceExistent.SetTargetFramework)\"\r\n        Condition=\"'%(_MSBuildProjectReferenceExistent.BuildReference)' == 'true' and '@(ProjectReferenceWithConfiguration)' != '' and '$(BuildingInsideVisualStudio)' != 'true' and '$(BuildProjectReferences)' == 'true' and '@(_MSBuildProjectReferenceExistent)' != ''\"\r\n        ContinueOnError=\"$(ContinueOnError)\"\r\n        RemoveProperties=\"%(_MSBuildProjectReferenceExistent.GlobalPropertiesToRemove)\">\r\n\r\n      <Output TaskParameter=\"TargetOutputs\" ItemName=\"_ResolvedProjectReferencePaths\" Condition=\"'%(_MSBuildProjectReferenceExistent.ReferenceOutputAssembly)'=='true' or '$(DesignTimeBuild)' == 'true'\"/>\r\n      <Output TaskParameter=\"TargetOutputs\" ItemName=\"%(_MSBuildProjectReferenceExistent.OutputItemType)\" Condition=\"'%(_MSBuildProjectReferenceExistent.OutputItemType)' != ''\"/>\r\n\r\n    </MSBuild>\r\n\r\n```\r\nThe 'BuildingInsideVisualStudio' in the condition check causes the different behavior.\r\n\r\n\r\n",
  "state": "OPEN",
  "createdAt": "2020-08-02T10:44:53Z",
  "updatedAt": "2024-01-31T08:23:12Z",
  "closedAt": null,
  "author": {
    "login": "TFTomSun"
  },
  "labels": [
    "bug",
    "under-investigation",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "I'm sorry if I just misunderstood a step, but my attempt at reproing this failed. I downloaded your demo as a zip, unzipped it, built it from the command line (with `dotnet built path_to_solution`), and it succeeded. Then I opened the sln in VS 2019 (version 16.6.5) and tried building the solution again, and it succeeded. What did I do wrong?",
        "createdAt": "2020-08-07T21:56:05Z",
        "updatedAt": "2020-08-07T21:56:05Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "@Forgind \r\nYou need to run the clean batch before you build from visual studio or simply map the repo and directly build from Visual Studio (which will fail)",
        "createdAt": "2020-08-07T22:28:15Z",
        "updatedAt": "2020-08-07T22:30:24Z",
        "author": {
          "login": "TFTomSun"
        }
      },
      {
        "body": "I could simplify the example if necessary, so that you will only see differences in the build output. I just created it based on a use case I had.",
        "createdAt": "2020-08-07T22:34:40Z",
        "updatedAt": "2020-08-07T22:34:40Z",
        "author": {
          "login": "TFTomSun"
        }
      },
      {
        "body": "I think this should work\u2014I cleaned and saw the error. I probably won't actually try to figure out what's wrong until Monday, but this is a good starting point\u2014thanks!",
        "createdAt": "2020-08-07T22:36:12Z",
        "updatedAt": "2020-08-07T22:36:12Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "I think the reason is the following:\r\n\r\nIn MBuild the projects are build based on the dependency chain, which is modeled via Project References. During the evaluation of the dependencies, the additionalproperties settings of project references are taken into account.\r\n\r\nVisual Studio on the other hand, seems to spawn MSBuild instances on its own to build the projects and manages somehow the order by itself. That's why the Build in Visual Studio ignores the additional properties setting of project references for the main target (build / rebuild / clean). \r\n\r\nI don't know whats the reason behind that design decision, but you can also see that when you have project references to projects that are not added to a solution. In MSBuild the solution will still build fine, because it resolves the projects based on the project reference dependency chain. Visual Studio on the other hand resolves only the projects to built, based on the solution file so it wil fail to resolve the dependencies of projects that are not explicitly added to the solution file.\r\n\r\n",
        "createdAt": "2020-08-07T22:46:25Z",
        "updatedAt": "2020-08-07T22:48:30Z",
        "author": {
          "login": "TFTomSun"
        }
      },
      {
        "body": "Your analysis is correct.  When in VS, it sets the property $(BuildingInsideVisualStudio)=true.  Which changes the behavior of P2P.\r\n\r\nAs a general rule, each project must be able to build independently.  It is as if you CD into the project directory and build it in isolation of other projects.  This improves the parallelism of each project.  \r\n\r\nMSBuild will cache the state of the built target and avoid calling them twice. By using AdditionalProperties, MSBuild will create a new instance of the project which may run at the same time as the instance without the AdditionalProperties.   It can lead to disk access issues and race conditions.",
        "createdAt": "2020-08-22T00:06:25Z",
        "updatedAt": "2020-08-22T00:06:25Z",
        "author": {
          "login": "yuehuang010"
        }
      },
      {
        "body": "@yuehuang010 maybe that behavior should be configurable. I think it's a valid use case to tell a referenced project to do something **additionally** to it's standard behavior within a specific context, which is \"the referencing project is built\". My intention is not to build the whole project twice, I just want that it something more is done by the referenced project, before the referencing project can be built. \r\n\r\nOr maybe there's another way to achieve that?",
        "createdAt": "2020-12-04T18:58:33Z",
        "updatedAt": "2020-12-04T19:03:30Z",
        "author": {
          "login": "TFTomSun"
        }
      },
      {
        "body": "Instead of changing the project property, you should run a extra target like \"MyPostBuildWork\".\r\n``````\r\n<ProjectReference Include=\"....\">\r\n  <Targets>Build;MyPostBuildWork</Target>",
        "createdAt": "2020-12-05T06:21:25Z",
        "updatedAt": "2020-12-05T06:21:47Z",
        "author": {
          "login": "yuehuang010"
        }
      },
      {
        "body": "@yuehuang010 I just tried that, but it seems not to work. Is the meta item name 'Targets' or 'Target'? When I try 'Target' the compiler tells me that this is an invalid attribute on a project reference, when I try 'Targets' the target is not invoked (a message log is not shown)\r\n\r\nin Project A:\r\n```xml \r\n <Target Name=\"MyTestTarget\">\r\n    <Message Importance=\"high\" Text=\"Hello from MyTestTarget\"/>\r\n  </Target>\r\n\r\n```\r\n\r\nin Project B that references Project A:\r\n```xml\r\n <ItemGroup>\r\n    <ProjectReference Include=\"..\\MyCalculator\\MyCalculator.csproj\" Version=\"*\">\r\n      <Targets>Build;MyTestTarget</Targets>\r\n    </ProjectReference>\r\n  </ItemGroup>\r\n```\r\n\r\nThe output doesn't contain 'Hello from MyTestTarget'",
        "createdAt": "2020-12-07T06:59:48Z",
        "updatedAt": "2020-12-07T07:00:15Z",
        "author": {
          "login": "TFTomSun"
        }
      },
      {
        "body": "As a workaround for a Visual Studio build I've choose that approach:\r\n\r\n```xml\r\n\r\n <ItemGroup>\r\n    <ProjectReference Include=\"..\\MyCalculator\\MyCalculator.csproj\" Version=\"*\">\r\n      <PostTargets>Build;MyTestTarget</PostTargets>\r\n    </ProjectReference>\r\n  </ItemGroup>\r\n  <Target Name=\"AfterResolveProjectReferences\" AfterTargets=\"ResolveProjectReferences\">\r\n    <ItemGroup>\r\n      <!--->HasMetadata('Embed')->WithMetadataValue('Embed',true))-->\r\n      <ProjectReferenceWithPostTargets Include=\"@(ProjectReference->HasMetadata('PostTargets'))\"/>\r\n    </ItemGroup>\r\n    <MSBuild Projects=\"@(ProjectReferenceWithPostTargets)\" Targets=\"%(ProjectReferenceWithPostTargets.PostTargets)\" ></MSBuild>\r\n  </Target>\r\n\r\n```\r\n\r\nIs that the suggested way to make it work inside VS and in MSBuild / dotnet build?",
        "createdAt": "2020-12-07T07:14:12Z",
        "updatedAt": "2020-12-07T07:14:12Z",
        "author": {
          "login": "TFTomSun"
        }
      }
    ]
  }
}