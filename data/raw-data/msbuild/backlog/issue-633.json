{
  "number": 633,
  "title": "Deadlock when LogBuildStarted() handler throws",
  "body": "This was reported internally related to a .NET Native project compiled using `ilc.exe`, which invokes MSBuild programmatically.\r\n\r\n`BuildManager.BeginBuild` [attempts to `LogBuildStarted`](https://github.com/Microsoft/msbuild/blob/master/src/Build/BackEnd/BuildManager/BuildManager.cs#L432) while holding a lock. Ordinarily `LogBuildStarted` sends a signal to another thread and log processing happens there, and the main thread waits [until the event is processed](https://github.com/rainersigwald/msbuild/blob/f9ccb7e835857f48ac7f19cc3227bf92e656fcb3/src/XMakeBuildEngine/BackEnd/Components/Logging/LoggingServiceLogMethods.cs#L465-L465) before returning (and releasing the lock).\r\n\r\nThe problem arises when an `ILogger` that handles the `BuildStartedEvent` throws an exception. That exception gets [caught and rethrown](https://github.com/rainersigwald/msbuild/blob/f9ccb7e835857f48ac7f19cc3227bf92e656fcb3/src/XMakeBuildEngine/BackEnd/Components/Logging/EventSourceSink.cs#L822-L840) (twice) before making it to the [`LoggingEventProcessor` semi-graceful shutdown block](https://github.com/rainersigwald/msbuild/blob/f9ccb7e835857f48ac7f19cc3227bf92e656fcb3/src/XMakeBuildEngine/BackEnd/Components/Logging/LoggingService.cs#L1127-L1142), which dumps the exception to a file, and then attempts to marshal the exception back onto the thread that called `Project.Build` so that the caller can catch and handle it. Unfortunately, [`OnThreadException` tries to acquire the BuildManager synclock](https://github.com/rainersigwald/msbuild/blob/f9ccb7e835857f48ac7f19cc3227bf92e656fcb3/src/XMakeBuildEngine/BackEnd/BuildManager/BuildManager.cs#L1629-L1628) before noting in the `BuildSubmission` that a fatal exception occurred. Since the main thread is holding the lock, the process is now deadlocked.\r\n\r\nThis was reported on and reproduces in the MSBuild that ships as part of the framework as well as the latest.\r\n",
  "state": "OPEN",
  "createdAt": "2016-05-18T21:40:48Z",
  "updatedAt": "2024-02-21T16:38:38Z",
  "closedAt": null,
  "author": {
    "login": "rainersigwald"
  },
  "labels": [
    "bug",
    "Postponed",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Repro: https://github.com/rainersigwald/msbuild/commit/1e68623c7cd9e2b694bb743f26ecdc48a7d6e844\n\nInterestingly, a logger that throws in the same way does _not_ deadlock MSBuild.exe when added as a command-line logger. That works:\n\n``` shell-session\no:\\msbuild>C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe /logger:ThrowingLogger,O:\\msbuild\\src\\LoggerThatThrowsOnBuildStarted\\bin\\Debug\\LoggerThatThrowsOnBuildStarted.dll build.proj\nMicrosoft (R) Build Engine version 4.6.1038.0\n[Microsoft .NET Framework, version 4.0.30319.42000]\nCopyright (C) Microsoft Corporation. All rights reserved.\n\nBuild started 5/18/2016 3:52:58 PM.\nMSBUILD : error MSB4017: The build stopped unexpectedly because of an unexpected logger failure.\nMicrosoft.Build.Exceptions.InternalLoggerException: The build stopped unexpectedly because of an unexpected logger failure. ---> System.NotImplementedException: The method or operation is not implemented.\n   at ilc.ThrowingLogger.<>c.<Initialize>b__11_0(Object sender, BuildEventArgs e) in O:\\msbuild\\src\\LoggerThatThrowsOnBuildStarted\\ThrowingLogger.cs:line 73\n   at Microsoft.Build.Evaluation.ProjectCollection.ReusableLogger.AnyEventRaisedHandler(Object sender, BuildEventArgs e)\n   at Microsoft.Build.Framework.AnyEventHandler.Invoke(Object sender, BuildEventArgs e)\n   at Microsoft.Build.BackEnd.Logging.EventSourceSink.RaiseAnyEvent(Object sender, BuildEventArgs buildEvent)\n   --- End of inner exception stack trace ---\n   at Microsoft.Build.Exceptions.InternalLoggerException.Throw(Exception innerException, BuildEventArgs e, String messageResourceName, Boolean initializationException, String[] messageArgs)\n   at Microsoft.Build.BackEnd.Logging.EventSourceSink.RaiseAnyEvent(Object sender, BuildEventArgs buildEvent)\n   at Microsoft.Build.BackEnd.Logging.EventSourceSink.RaiseStatusEvent(Object sender, BuildStatusEventArgs buildEvent)\n   at Microsoft.Build.BackEnd.Logging.EventSourceSink.RaiseBuildStartedEvent(Object sender, BuildStartedEventArgs buildEvent)\n   at Microsoft.Build.BackEnd.Logging.EventSourceSink.Consume(BuildEventArgs buildEvent)\n   at Microsoft.Build.BackEnd.Logging.EventSourceSink.Consume(BuildEventArgs buildEvent, Int32 sinkId)\n   at Microsoft.Build.BackEnd.Logging.EventRedirectorToSink.Microsoft.Build.Framework.IEventRedirector.ForwardEvent(BuildEventArgs buildEvent)\n   at Microsoft.Build.BackEnd.Logging.CentralForwardingLogger.EventSource_AnyEventRaised(Object sender, BuildEventArgs buildEvent)\n   at Microsoft.Build.BackEnd.Logging.EventSourceSink.RaiseAnyEvent(Object sender, BuildEventArgs buildEvent)\n```\n",
        "createdAt": "2016-05-18T21:45:34Z",
        "updatedAt": "2016-05-18T21:45:34Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}