{
  "number": 1346,
  "title": "RAR is not aware of .NET assembly unification",
  "body": ".NET will unify inbox assemblies with those that have the same major.minor version.  However, if an assembly has a different major.minor .NET will not unify.  As such RAR should suggest a bindingRedirect for those assemblies, even if it doesn't see a conflict, since a conflict will exist with other inbox assemblies which are out of RAR's view.\r\n\r\nRelated to https://github.com/Microsoft/msbuild/issues/1344, if you think about inbox framework assemblies as \"runtime\".",
  "state": "OPEN",
  "createdAt": "2016-11-15T17:27:03Z",
  "updatedAt": "2024-02-21T16:37:55Z",
  "closedAt": null,
  "author": {
    "login": "ericstj"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Backlog"
  },
  "comments": {
    "nodes": [
      {
        "body": "Any news on this? I can't pretend to understand what is happening here but this issue is referenced from https://github.com/dotnet/corefx/issues/15570\r\n\r\nThe net effect is that .netstandard has created a **DLL hell** for lot's of developers. We build the apps, we compile and it blows up during runtime. This is unacceptable.\r\n\r\nIn my case I have a netstandard1.3 class lib which is used in a 461 project of unit tests and it blows up with \r\n```\r\nCould not load file or assembly 'System.Security.Claims, Version=4.0.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'\r\n```\r\neven though the only version I reference anywhere is System.Security.Claims 4.3.0\r\n\r\n",
        "createdAt": "2017-05-15T05:50:18Z",
        "updatedAt": "2017-05-15T05:50:18Z",
        "author": {
          "login": "oliverjanik"
        }
      },
      {
        "body": "I am running into this problem as well and having to fix it on a case-by-case basis with binding redirects in app.config/web.config files.",
        "createdAt": "2017-06-30T18:54:40Z",
        "updatedAt": "2017-06-30T18:54:40Z",
        "author": {
          "login": "libertyernie"
        }
      },
      {
        "body": "Bump, are there any updates here? We're hitting this with the 2.0 SDK and the System.Security.Cryptography.Algorithms type",
        "createdAt": "2017-08-17T15:16:07Z",
        "updatedAt": "2017-08-17T15:16:07Z",
        "author": {
          "login": "clairernovotny"
        }
      },
      {
        "body": "We actually improved this with the tooling (via https://github.com/dotnet/corefx/commit/56b4231e2bbe640e75b365bc15467cab651031cb and https://github.com/dotnet/sdk/issues/1267),  What netstandard version are you targeting?",
        "createdAt": "2017-08-17T15:29:43Z",
        "updatedAt": "2017-08-17T15:29:43Z",
        "author": {
          "login": "ericstj"
        }
      },
      {
        "body": "This is targeting 1.4 and using the 2.0 SDK. In this PR https://github.com/onovotny/RSAKeyVaultProvider/pull/1. You can see the error here https://ci.appveyor.com/project/onovotny/rsakeyvaultprovider/build/1.0.0-preview.1.build.20+ge84ccf841e#L104",
        "createdAt": "2017-08-17T15:45:57Z",
        "updatedAt": "2017-08-17T16:16:35Z",
        "author": {
          "login": "clairernovotny"
        }
      },
      {
        "body": "I can add to this issue - I am currently working on the SharpZipLib netstandard1.3 Nuget package. Today, I pushed the Nuget package (alpha1 pre-release) that was built against netstandard1.3 - and added it to a bunch of test projects. That's when I started seeing exactly that error: an assembly load exception for .Primitives 4.0. Repros perfectly in a  .NET FW 4.6.1 application.\r\n\r\nFix was https://github.com/icsharpcode/SharpZipLib/issues/184#issuecomment-323040985\r\n\r\nBut obviously cannot tell world &amp; dog to downgrade two packages after installing ours... definitely would need to ship a proper package of ours.\r\n\r\n",
        "createdAt": "2017-08-17T16:20:09Z",
        "updatedAt": "2017-08-17T16:20:09Z",
        "author": {
          "login": "christophwille"
        }
      },
      {
        "body": "@onovotny actually System.Security.Cryptography.Algorithms.dll was never inbox so you wouldn't be hitting this particular issue, same with System.Security.Cryptography.Primitives.dll.  Can you guys open up a new issue in corefx with the repro/symptoms of the failure.",
        "createdAt": "2017-08-17T16:41:17Z",
        "updatedAt": "2017-08-17T16:41:17Z",
        "author": {
          "login": "ericstj"
        }
      },
      {
        "body": "@ericstj  https://github.com/dotnet/corefx/issues/23344",
        "createdAt": "2017-08-17T16:45:34Z",
        "updatedAt": "2017-08-17T16:45:42Z",
        "author": {
          "login": "clairernovotny"
        }
      }
    ]
  }
}