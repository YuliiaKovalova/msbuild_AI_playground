{
  "number": 7402,
  "title": "Platform negotiation breaks transitive P2P references",
  "body": "### Issue Description\r\n\r\nP2P references tend to be transitive, in that an indirectly referenced C# project will still be passed to the compiler. But this no longer works once platform negotiation is turned on.\r\n\r\n### Steps to Reproduce\r\n\r\nUse this repro sln, or follow these instructions.\r\n[repromsbuild.zip](https://github.com/dotnet/msbuild/files/8101090/repromsbuild.zip)\r\n\r\n\r\n```\r\ndotnet new classlib -o head\r\ndotnet new classlib -o middle\r\ndotnet new classlib -o tail\r\ndotnet add middle reference head\r\ndotnet add tail reference middle\r\n```\r\n\r\nThen add this to the `tail/Class1.cs` file's class declaration:\r\n\r\n```cs\r\n    void Test()\r\n    {\r\n        head.Class1 h;\r\n    }\r\n```\r\n\r\n```\r\ndotnet build tail\r\n```\r\n\r\nThe build succeeds.\r\n\r\nNow add a `Directory.Build.props` file with this content (as directed by [the docs](https://github.com/dotnet/msbuild/blob/main/documentation/ProjectReference-Protocol.md#how-to-opt-in)):\r\n\r\n```xml\r\n<Project>\r\n    <PropertyGroup>\r\n        <EnableDynamicPlatformResolution>true</EnableDynamicPlatformResolution>\r\n        <DisableTransitiveProjectReferences>true</DisableTransitiveProjectReferences>\r\n    </PropertyGroup>\r\n</Project>\r\n```\r\n\r\nAnd build again:\r\n\r\n```\r\ndotnet build tail\r\n```\r\n\r\n### Expected Behavior\r\n\r\nThe build succeeds both before and after enabling platform negotiation.\r\n\r\n### Actual Behavior\r\n\r\nThe build fails after enable platform negotiation due to the compiler being unable to bind to a type from the transitive project reference.\r\n\r\n> C:\\temp\\repromsbuild\\tail\\Class1.cs(6,9): error CS0246: The type or namespace name 'head' could not be found (are you missing a using directive or an assembly reference?) [C:\\temp\\repromsbuild\\tail\\tail.csproj]\r\n\r\n### Versions & Configurations\r\n\r\nI am using the .NET 6.0.100 SDK, with VS 2022 IntPreview installed.\r\n\r\nCC: @BenVillalobos",
  "state": "CLOSED",
  "createdAt": "2022-02-19T00:26:06Z",
  "updatedAt": "2024-02-21T14:09:40Z",
  "closedAt": "2022-11-15T20:20:03Z",
  "author": {
    "login": "AArnott"
  },
  "labels": [
    "bug",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "benvillalobos"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Ok, so I'm a total idiot. The steps include setting `DisableTransitiveProjectReferences` to `true`. I just copied and pasted this from [the docs on how to turn on platform negotiation](https://github.com/dotnet/msbuild/blob/main/documentation/ProjectReference-Protocol.md#how-to-opt-in) without reading them.\r\n\r\nWhy must transitive P2Ps be turned off for platform negotiation to work?",
        "createdAt": "2022-02-19T00:28:04Z",
        "updatedAt": "2022-02-19T00:28:04Z",
        "author": {
          "login": "AArnott"
        }
      },
      {
        "body": "FWIW, the platform negotiation feature *appears* to work just fine without disabling transitive P2Ps. Am I missing something or can we remove that property definition from the docs on how to use the platform negotiation feature?",
        "createdAt": "2022-02-19T00:30:44Z",
        "updatedAt": "2022-02-19T00:30:44Z",
        "author": {
          "login": "AArnott"
        }
      },
      {
        "body": "> Why must transitive P2Ps be turned off for platform negotiation to work?\r\n\r\nTo be completely honest, I don't remember why that flag had to be disabled. My best guess would be that transitive projectreferences bubbled up and followed the SetPlatform flow as a result. \r\n\r\nWill dig into this a bit.\r\n\r\nThis target in the SDK is probably the culprit behind the decision.\r\n\r\n```\r\n  <Target Name=\"IncludeTransitiveProjectReferences\"\r\n          DependsOnTargets=\"ResolvePackageAssets\"\r\n          Condition=\"'$(DisableTransitiveProjectReferences)' != 'true'\">\r\n    <ItemGroup>\r\n      <ProjectReference Include=\"@(_TransitiveProjectReferences)\" />\r\n    </ItemGroup>\r\n  </Target>\r\n```\r\n\r\nChecking out a binlog of the build with/without the flag set, It looks like enabling transitive references bubbles up all projectreferences to the level of the current project.\r\n\r\nSee how Tail tries to build Middle and Head here:\r\n\r\n![image](https://user-images.githubusercontent.com/4691428/155192413-9e631764-5539-457f-a210-60a9571193a5.png)\r\n\r\nIn Tail (x86) -> Middle (anycpu) -> Head (x86, anycpu), Tail would attempt to build Head as x86 (because they match), which wouldn't be the most compatible platform. \r\n\r\nI can see this being fine for most scenarios since you'd still end up with less project builds because we still determine most compatible and stick with that.\r\n\r\nThoughts?",
        "createdAt": "2022-02-22T18:14:18Z",
        "updatedAt": "2022-02-22T18:14:50Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "> In Tail (x86) -> Middle (anycpu) -> Head (x86, anycpu), Tail would attempt to build Head as x86 (because they match), which wouldn't be the most compatible platform.\r\n\r\nI'm puzzled by this analysis. If the 'app' (or Tail in this case) builds in x86, then ultimately we want to deploy x86 binaries with the app, I would think. At least this is how .NET and nuget work today, where regardless of the AnyCPU-ness of a nuget package's reference assemblies, when it comes time to deploying binaries (copylocal behavior), if a nuget package contains binaries under the `runtimes/*` folder, those are copied instead of the ref assemblies. These runtime folders typically carry architecture-specific binaries, so ultimately the app being published will pick the architecture-specific binaries from all its transitive dependencies.\r\n\r\nIn this case, if Tail is building for x86 and it wants transitive dependencies such that head acts as if a direct P2P existed, then yes I would expect Head to build as x86 since a more specific match (x86-x86) is preferred over (x86->anycpu). \r\nI guess this means that Head builds twice (AnyCPU to satisfy Middle, and x86 to satisfy Tail), but as that would be the same behavior if I added a direct P2P from both projects to Head, why shouldn't the implicit transitive dependency behavior be the same?",
        "createdAt": "2022-02-24T06:08:25Z",
        "updatedAt": "2022-02-24T06:08:25Z",
        "author": {
          "login": "AArnott"
        }
      },
      {
        "body": "My example should have been written as Head->Middle->Tail (oops). I recall there being some specific scenario that caused the change. It was likely related to VS but I can't remember off the top of my head (maybe @rainersigwald remembers?) \r\n\r\n> In this case, if Tail is building for x86 and it wants transitive dependencies such that head acts as if a direct P2P existed, then yes I would expect Head to build as x86 since a more specific match (x86-x86) is preferred over (x86->anycpu)\r\n\r\nIf this should be the normal case, then `DisableTransitiveProjectReferences=true` doesn't need to be a requirement. ",
        "createdAt": "2022-02-24T18:24:54Z",
        "updatedAt": "2022-02-24T18:24:54Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "Fixed by https://github.com/dotnet/msbuild/pull/8114",
        "createdAt": "2022-11-15T20:20:03Z",
        "updatedAt": "2022-11-15T20:20:03Z",
        "author": {
          "login": "benvillalobos"
        }
      }
    ]
  }
}