{
  "number": 8075,
  "title": "MSBuild binary log missing tool command line logged in ToolTask",
  "body": "### Issue Description\r\n\r\nWhen analyzing build log from a ToolTask derived custom MSBuild task, it's found that the full command line log entries are missing in binary log, The same log entries can be found in console log or file log with verbose level above minimal.\r\n\r\nToolTask will log the full command line it executes with the [ToolTask.LogToolCommand(...)](https://github.com/dotnet/msbuild/blob/main/src/Utilities/ToolTask.cs#L428) method, which will eventually log the command line with a [TaskCommandLineEventArgs instance](https://github.com/dotnet/msbuild/blob/82a30d30731031f57ad95519836abc2772ab472a/src/Shared/TaskLoggingHelper.cs#L583). Unfortunately, it seems such log entries cannot be found in MSBuild binary log, or not record as real log entries.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Take any MSBuild binary log for building of a C# library project;\r\n2. Load the binary log *.binlog with [MSBuild Structured Log Viewer](https://msbuildlog.com/);\r\n3. Search \"$task csc\";\r\n4. There is no log entry for the actual `csc` command been executed, just a `CommandLineArguments` property on the `csc` task, which is not the same thing. For example, ToolTask.Execute() could be called multiple times from derived class. `CommandLineArguments` can only record the last state of those calls, while the real `TaskCommandLineEventArgs` log entry can record all of them.\r\n\r\nAs comparison, file log with verbose level above minimal will have the following log entry:\r\n\r\n```Text\r\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\MSBuild\\Current\\Bin\\Roslyn\\csc.exe /noconfig /unsafe- /checked- ...\r\n```\r\n\r\nThe command line used for testing is shown below (PowerShell). It will generated a binary log `msbuild.binlog` and a reference file log `build.log`:\r\n\r\n```PowerShell\r\n$vs_where = \"C:\\Program Files (x86)\\Microsoft Visual Studio\\Installer\\vswhere.exe\"\r\n$ms_build = &$vs_where -version \"[17.0,999.0)\" -Requires Microsoft.Component.MSBuild -Find MSBuild\\**\\Bin\\amd64\\MSBuild.exe | Select-Object -First 1\r\n&$ms_build -r -m -v:m -bl -p:Configuration=Release -p:Platform=AnyCPU `\r\n    -flp:\"LogFile=build.log;Verbosity=normal;Encoding=UTF-8\" `\r\n    path\\to\\project.csproj\r\n```\r\n\r\n### Expected Behavior\r\n\r\nMSBuild binary log should contain full command line of external tool executed by ToolTask as separate log entry.\r\n\r\n### Actual Behavior\r\n\r\nFull command line log entries from ToolTask cannot be find in MSBuild binary log.\r\n\r\n### Analysis\r\n\r\nN/A\r\n\r\n### Versions & Configurations\r\n\r\nMSBuild version: 17.2.1.25201\r\nMSBuild Structured Log Viewer Version:  2.1.730",
  "state": "CLOSED",
  "createdAt": "2022-10-19T15:22:44Z",
  "updatedAt": "2022-10-21T17:15:58Z",
  "closedAt": "2022-10-21T13:21:51Z",
  "author": {
    "login": "gpwen"
  },
  "labels": [
    "bug",
    "needs-triage",
    "author-responded"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "> There is no log entry for the actual csc command been executed, just a CommandLineArguments property on the csc task, which is not the same thing\r\n\r\nIsn't it, though? We looked at this and created a simple repro project and didn't notice a difference in the binlog (with the CommandLineArguments property) and the actual log file. They both logged the same thing, one of them is just under the \"CommandLineArguments\" property.\r\n\r\n> For example, ToolTask.Execute() could be called multiple times from derived class. CommandLineArguments can only record the last state of those calls, while the real TaskCommandLineEventArgs log entry can record all of them.\r\n\r\nSo is the actual request to ensure the binlog displays the cmd for every instance of Execute()?\r\n\r\nWe do see this behavior in our local repros, so it looks like the binlog viewer does not log every instance of the cmd when executing, meanwhile the logs do.  Note you can replay the binlog `msbuild my.binlog /flp:v=diag` and see the _correct_ logging done when execute is called multiple times. So, the data is stored correctly, just not displayed correctly.",
        "createdAt": "2022-10-20T17:24:41Z",
        "updatedAt": "2022-10-20T17:24:41Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "> 4\\. There is no log entry for the actual `csc` command been executed\r\n\r\nWhat makes you think this?\r\n\r\n> 4\\. For example, ToolTask.Execute() could be called multiple times from derived class. `CommandLineArguments` can only record the last state of those calls, while the real `TaskCommandLineEventArgs` log entry can record all of them.\r\n\r\nI made a trivial tooltask with\r\n\r\n```c#\r\n        protected override string GenerateFullPathToTool()\r\n        {\r\n            return @\"S:\\repro\\dotnet\\msbuild\\issues\\8075\\silly\\bin\\Debug\\net7.0\\silly.exe\";\r\n        }\r\n\r\n        public override bool Execute()\r\n        {\r\n            base.Execute();\r\n            return base.Execute();\r\n        }\r\n```\r\n\r\nAnd I see the message twice in console output:\r\n\r\n```sh-session\r\n\u276f msbuild .\\Test.proj -bl -v:n -clp:nosummary     \r\nMSBuild version 17.5.0-preview-22513-03+b3bd0870c for .NET Framework\r\nBuild started 10/20/2022 12:23:34 PM.\r\nProject \"S:\\repro\\dotnet\\msbuild\\issues\\8075\\Test.proj\" on node 1 (default targets).\r\nlakesjt:\r\n  S:\\repro\\dotnet\\msbuild\\issues\\8075\\silly\\bin\\Debug\\net7.0\\silly.exe\r\n  S:\\repro\\dotnet\\msbuild\\issues\\8075\\silly\\bin\\Debug\\net7.0\\silly.exe \r\nDone Building Project \"S:\\repro\\dotnet\\msbuild\\issues\\8075\\Test.proj\" (default targets).\r\n```\r\n\r\nand also from the binlog:\r\n\r\n```sh-session\r\n\u276f msbuild .\\msbuild.binlog -v:n\r\nMSBuild version 17.5.0-preview-22513-03+b3bd0870c for .NET Framework\r\nBinLogFilePath=S:\\repro\\dotnet\\msbuild\\issues\\8075\\msbuild.binlog\r\nCurrentUICulture=en-US\r\nBuild started 10/20/2022 12:23:34 PM.\r\nProject \"S:\\repro\\dotnet\\msbuild\\issues\\8075\\Test.proj\" on node 1 (default targets).\r\nlakesjt:\r\n  S:\\repro\\dotnet\\msbuild\\issues\\8075\\silly\\bin\\Debug\\net7.0\\silly.exe\r\n  S:\\repro\\dotnet\\msbuild\\issues\\8075\\silly\\bin\\Debug\\net7.0\\silly.exe\r\nDone Building Project \"S:\\repro\\dotnet\\msbuild\\issues\\8075\\Test.proj\" (default targets).\r\n```",
        "createdAt": "2022-10-20T17:25:00Z",
        "updatedAt": "2022-10-20T17:25:00Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@BenVillalobos, thank you very much for the quick reply.\r\n\r\nYou're right I think binlog should log (well, display) all Execute() command lines, since those are actually written as log entries. Well, since those are actually stored somewhere in the binlog, just not displayed correctly by the structured log viewer, so this is actually a problem with the viewer. My bad since I believed the viewer showed me the original data (it really showed a lot). Now I know it interprets the data differently.\r\n\r\nThis is the last glitch when applying binlog for custom task debugging, thank your guys very much for addressing that!",
        "createdAt": "2022-10-21T03:33:05Z",
        "updatedAt": "2022-10-21T03:33:05Z",
        "author": {
          "login": "gpwen"
        }
      },
      {
        "body": "Actually, can we move this issue report to \"MSBuild Binary and Structured Log Viewer\"? Even though I did get everything in binlog, I still need to search through huge amount of text to get to those logs from the task I'm checking. It's really messy when concurrent building enabled (like always). The structured viewer helped a lot by showing all relevant log entries for the task in one place. It greatly reduced the time to get to the bottom. It's just this one painful glitch with ToolTask. The real command line been issued is the most important thing about ToolTask, it's really helpful if that can be shown in more accurate way.",
        "createdAt": "2022-10-21T04:03:40Z",
        "updatedAt": "2022-10-21T04:03:54Z",
        "author": {
          "login": "gpwen"
        }
      },
      {
        "body": "This issue was moved to KirillOsenkov/MSBuildStructuredLog#624",
        "createdAt": "2022-10-21T13:21:50Z",
        "updatedAt": "2022-10-21T13:21:50Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@gpwen this is now fixed and deployed in 2.1.731. Thanks for reporting!",
        "createdAt": "2022-10-21T17:15:58Z",
        "updatedAt": "2022-10-21T17:15:58Z",
        "author": {
          "login": "KirillOsenkov"
        }
      }
    ]
  }
}