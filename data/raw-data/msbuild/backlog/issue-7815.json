{
  "number": 7815,
  "title": "Unnecessary allocations by invoking CommunicationsUtilities.Trace",
  "body": "`CommunicationsUtilities.Trace` defines format and arguments for `String.Format` implementation. Although `String.Format` implements overloads for 1, 2 and 3 arguments without `object[]` allocation, we are missing these options in `CommunicationsUtilities`.",
  "state": "CLOSED",
  "createdAt": "2022-07-12T07:53:07Z",
  "updatedAt": "2023-02-12T02:42:34Z",
  "closedAt": "2023-02-12T02:42:33Z",
  "author": {
    "login": "MichalPavlik"
  },
  "labels": [
    "Area: Performance",
    "Priority:3",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "MichalPavlik"
      }
    ]
  },
  "milestone": {
    "title": "8.0P1"
  },
  "comments": {
    "nodes": [
      {
        "body": "The arguments are often integers that will still be boxed if you add overloads for 1, 2, and 3 objects. When tracing is disabled, that boxing could perhaps be avoided by using a C# 10 [custom string interpolation handler](<https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/tutorials/interpolated-string-handler> \"Explore string interpolation handlers | Microsoft Docs\"), or by making callers check Traits.Instance.DebugNodeCommunication. Many of those CommunicationsUtilities.Trace calls are in error handling though, and are likely not important for performance.",
        "createdAt": "2022-07-12T09:10:09Z",
        "updatedAt": "2022-07-12T09:10:09Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "> Many of those CommunicationsUtilities.Trace calls are in error handling though, and are likely not important for performance.\r\n\r\n...and most of the rest aren't hit too many times per build.\r\n\r\nThat said, this should be a fairly quick fix, and it would still help, so I'm supportive.",
        "createdAt": "2022-08-04T16:54:38Z",
        "updatedAt": "2022-08-04T16:54:38Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "I will have to measure, how many allocations we have during normal build without errors. Boxing of value types can be omitted by using generic arguments (I don't think custom interpolation handler is supported in NETFx 3.5). It's pretty easy and small change like this:\r\n\r\n```csharp\r\n// There should be overloads also for 0, 1 and 2 arguments\r\ninternal static void Trace<T0, T1, T2>(string format, T0 arg0, T1 arg1, T2 arg2)\r\n{\r\n    if (s_trace)\r\n    {\r\n        Trace(string.Format(format, arg0.ToString(), arg1.ToString(), arg2.ToString()));\r\n    }\r\n}\r\n\r\n// Replaces Trace(string format, params object[] args)\r\nprivate static void Trace(string formattedString)\r\n{\r\n    ...\r\n}\r\n```",
        "createdAt": "2022-08-11T08:57:07Z",
        "updatedAt": "2022-08-11T08:57:07Z",
        "author": {
          "login": "MichalPavlik"
        }
      },
      {
        "body": "> I don't think custom interpolation handler is supported in NETFx 3.5\r\n\r\nThis is true but historically we have prioritized debuggability + modern .NET performance over net35 performance, if it gets to cleaner better code. For instance see my \"just copy the whole thing on any write operation\" implementation of `ImmutableDictionary`.\r\n\r\nMy instinct is that these `CommunicationsUtilities` methods are called infrequently enough that it doesn't much matter. If we go the custom interpolation handler route I'd rather see it on task logging (#7875).",
        "createdAt": "2022-08-11T13:55:19Z",
        "updatedAt": "2022-08-11T13:55:19Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}