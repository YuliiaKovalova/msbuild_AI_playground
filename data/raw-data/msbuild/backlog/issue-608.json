{
  "number": 608,
  "title": "List conflicts in MSB3277 reference-version-conflict message",
  "body": "This is to keep track of this feature request from Connect: http://connect.microsoft.com/VisualStudio/feedback/details/2619450/unclear-warning-msb3277-found-conflicts-between-different-versions-of-the-same-dependent-assembly-that-could-not-be-resolved\n\n> During compile I've got a warning: C:\\Program Files (x86)\\MSBuild\\14.0\\bin\\Microsoft.Common.CurrentVersion.targets(1819,5): \n> warning MSB3277: Found conflicts between different versions of the same dependent assembly that could not be resolved.\n>  These reference conflicts are listed in the build log when log verbosity is set to detailed. \n> \n> I believe that compiler knows the name of assembly that has a problem, and it can be included in the messages without re-compile in diagnostics mode.\n> \n> Could you please change the message to include  assemblies name, as it does in diagnostics mode.\n\nThis message is emitted in [ResolveAssemblyReferences](https://github.com/Microsoft/msbuild/blob/8b488bd508807f415193fe38d5084cd590931cfb/src/XMakeTasks/AssemblyDependency/ResolveAssemblyReference.cs#L1069).\n",
  "state": "CLOSED",
  "createdAt": "2016-05-05T18:24:24Z",
  "updatedAt": "2024-02-21T17:28:21Z",
  "closedAt": "2020-11-13T18:02:08Z",
  "author": {
    "login": "rainersigwald"
  },
  "labels": [
    "help wanted",
    "User Experience",
    "Area: Task: Resolve Assembly References (RAR)",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "benvillalobos"
      }
    ]
  },
  "milestone": {
    "title": "MSBuild 16.6"
  },
  "comments": {
    "nodes": [
      {
        "body": "We discussed this in triage this week. We're in favor of clear, actionable error messages, but since the information is just a rebuild with `/v:diag` away, we really don't want to slow down the normal/success case by carrying around extra information just to support this error. A proposed solution to this problem should not slow down the no-error case.\n",
        "createdAt": "2016-05-05T18:26:22Z",
        "updatedAt": "2016-05-05T18:26:22Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "It seems like the information might be available, but just not logged: https://github.com/Microsoft/msbuild/blob/72c12de51702f7e214f1eba481f2f3f93b885616/src/XMakeTasks/AssemblyDependency/ResolveAssemblyReference.cs#L1039-L1042\n",
        "createdAt": "2016-07-25T16:25:16Z",
        "updatedAt": "2016-07-25T16:25:16Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "_From @davkean in #1712:_\r\n\r\nThis error message has been the bane of .NET developers for years. Having worked on assembly resolution for ~6 years in the BCL team, I've diagnosed so many of these warnings for customers, and there's three issues that I see with it:\r\n\r\n1. Developers don't know what this message means.\r\n\r\n2. Developers once they know what it means, don't know how to fix it.\r\n\r\n3. The warning is not actionable without building again with diagnostic build (if you can figure out how to do that). Even then you need to search for the issue in the log, and find the relevant portions.\r\n\r\nHere's a typical log:\r\n\r\n```\r\n There was a conflict between \"Microsoft.Extensions.DependencyModel, Version=1.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60\" and \"Microsoft.Extensions.DependencyModel, Version=1.0.1.0, Culture=neutral, PublicKeyToken=adb9793829ddae60\".\r\n            \"Microsoft.Extensions.DependencyModel, Version=1.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60\" was chosen because it was primary and \"Microsoft.Extensions.DependencyModel, Version=1.0.1.0, Culture=neutral, PublicKeyToken=adb9793829ddae60\" was not.\r\n            References which depend on \"Microsoft.Extensions.DependencyModel, Version=1.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60\" [C:\\Users\\James\\.nuget\\packages\\microsoft.extensions.dependencymodel\\1.0.0\\lib\\netstandard1.6\\Microsoft.Extensions.DependencyModel.dll].\r\n                C:\\Users\\James\\.nuget\\packages\\microsoft.extensions.dependencymodel\\1.0.0\\lib\\netstandard1.6\\Microsoft.Extensions.DependencyModel.dll\r\n                  Project file item includes which caused reference \"C:\\Users\\James\\.nuget\\packages\\microsoft.extensions.dependencymodel\\1.0.0\\lib\\netstandard1.6\\Microsoft.Extensions.DependencyModel.dll\".\r\n                    C:\\Users\\James\\.nuget\\packages\\microsoft.extensions.dependencymodel\\1.0.0\\lib\\netstandard1.6\\Microsoft.Extensions.DependencyModel.dll\r\n            References which depend on \"Microsoft.Extensions.DependencyModel, Version=1.0.1.0, Culture=neutral, PublicKeyToken=adb9793829ddae60\" [].\r\n                C:\\Users\\James\\.nuget\\packages\\microsoft.testplatform.testhost\\15.0.0-preview-20170210-02\\lib\\netstandard1.5\\Microsoft.TestPlatform.CrossPlatEngine.dll\r\n                  Project file item includes which caused reference \"C:\\Users\\James\\.nuget\\packages\\microsoft.testplatform.testhost\\15.0.0-preview-20170210-02\\lib\\netstandard1.5\\Microsoft.TestPlatform.CrossPlatEngine.dll\".\r\n                    C:\\Users\\James\\.nuget\\packages\\microsoft.testplatform.testhost\\15.0.0-preview-20170210-02\\lib\\netstandard1.5\\Microsoft.TestPlatform.CrossPlatEngine.dll\r\n                    C:\\Users\\James\\.nuget\\packages\\microsoft.testplatform.testhost\\15.0.0-preview-20170210-02\\lib\\netstandard1.5\\testhost.dll\r\n       C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\MSBuild\\15.0\\Bin\\Microsoft.Common.CurrentVersion.targets(1956,5): warning MSB3277: Found conflicts between different versions of the same dependent assembly that could not be resolved.  These reference conflicts are listed in the build log when log verbosity is set to detailed.\r\n```\r\n\r\nNote the warning states:\r\n\r\n```\r\nwarning MSB3277: Found conflicts between different versions of the same dependent assembly that could not be resolved.  These reference conflicts are listed in the build log when log verbosity is set to detailed.\r\n```\r\n\r\nBut really the relevant portion is 1#:\r\n\r\n```\r\n There was a conflict between \"Microsoft.Extensions.DependencyModel, Version=1.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60\" and \"Microsoft.Extensions.DependencyModel, Version=1.0.1.0, Culture=neutral, PublicKeyToken=adb9793829ddae60\".\r\n```\r\nand 2#\r\n\r\n```\r\n    References which depend on \"Microsoft.Extensions.DependencyModel, Version=1.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60\" [C:\\Users\\James\\.nuget\\packages\\microsoft.extensions.dependencymodel\\1.0.0\\lib\\netstandard1.6\\Microsoft.Extensions.DependencyModel.dll].\r\n                C:\\Users\\James\\.nuget\\packages\\microsoft.extensions.dependencymodel\\1.0.0\\lib\\netstandard1.6\\Microsoft.Extensions.DependencyModel.dll\r\n                  Project file item includes which caused reference \"C:\\Users\\James\\.nuget\\packages\\microsoft.extensions.dependencymodel\\1.0.0\\lib\\netstandard1.6\\Microsoft.Extensions.DependencyModel.dll\".\r\n                    C:\\Users\\James\\.nuget\\packages\\microsoft.extensions.dependencymodel\\1.0.0\\lib\\netstandard1.6\\Microsoft.Extensions.DependencyModel.dll\r\n            References which depend on \"Microsoft.Extensions.DependencyModel, Version=1.0.1.0, Culture=neutral, PublicKeyToken=adb9793829ddae60\" [].\r\n                C:\\Users\\James\\.nuget\\packages\\microsoft.testplatform.testhost\\15.0.0-preview-20170210-02\\lib\\netstandard1.5\\Microsoft.TestPlatform.CrossPlatEngine.dll\r\n                  Project file item includes which caused reference \"C:\\Users\\James\\.nuget\\packages\\microsoft.testplatform.testhost\\15.0.0-preview-20170210-02\\lib\\netstandard1.5\\Microsoft.TestPlatform.CrossPlatEngine.dll\".\r\n                    C:\\Users\\James\\.nuget\\packages\\microsoft.testplatform.testhost\\15.0.0-preview-20170210-02\\lib\\netstandard1.5\\Microsoft.TestPlatform.CrossPlatEngine.dll\r\n                    C:\\Users\\James\\.nuget\\packages\\microsoft.testplatform.testhost\\15.0.0-preview-20170210-02\\lib\\netstandard1.5\\testhost.dll\r\n```\r\n\r\nWe should promote 1# or something like it as the root message, and 2# as a nested message under the warning. VS will now hide by default messages that too long or contain multiple lines, and let the user expand to see more detail. ",
        "createdAt": "2017-02-21T22:28:13Z",
        "updatedAt": "2017-02-21T22:28:13Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Could we perhaps have an option to right click on the warning and select something like \"Generate Binding Re-directions in Config\" then if msbuild was to honor those redirections as \"the will of the developer\" then conflicts can be deemed to have been at least thought about and a solution provided.",
        "createdAt": "2017-04-20T11:15:39Z",
        "updatedAt": "2017-04-20T11:15:39Z",
        "author": {
          "login": "TehWardy"
        }
      },
      {
        "body": "@TehWardy Good suggestion. I think that is a really good first step.",
        "createdAt": "2017-05-17T17:17:09Z",
        "updatedAt": "2017-05-17T17:17:09Z",
        "author": {
          "login": "DarinMacRae"
        }
      },
      {
        "body": "At the risk of sounding like a noob, how the heck do we fix this and since my projects seem to be compiling and working is this a serious issue?  When I look at the internal diagnostic log it doesn't look like anything I have added.  Seems like its multiple NuGet packages fighting with one another.",
        "createdAt": "2017-05-30T15:19:34Z",
        "updatedAt": "2017-05-30T15:19:34Z",
        "author": {
          "login": "ewahner"
        }
      },
      {
        "body": "@ewahner  It's basically a resolution in the build process / compiler where it finds multiple versions of a given assembly / doesn't find the thing it expects in some default location. \r\nThe build process is technically correct in that the issue is how / what has been referred to is being \"implied\" in some way but the process has enough enough information to make an \"educated guess\" so it shows up as a warning rather than an error in the process.\r\n\r\nThe issue here of course is that resolving this problem properly is quite complex and actually requires a developer to make a decision but putting assembly redirection directives in the config file for the assembly you are building should resolve it.\r\n\r\nIn short:\r\nDon't worry about it, it's just a frustration for those of us looking to keep our build reports clean!",
        "createdAt": "2017-05-30T15:54:13Z",
        "updatedAt": "2017-05-30T15:54:13Z",
        "author": {
          "login": "TehWardy"
        }
      },
      {
        "body": "Just hit one of these for the first time. This issue helped me find it at least. +1 I guess",
        "createdAt": "2017-06-25T12:55:28Z",
        "updatedAt": "2017-06-25T12:55:28Z",
        "author": {
          "login": "da3dsoul"
        }
      },
      {
        "body": "Thank you @davkean for your initial words on this frustrating issue. I have devs in VS Code who can't focus on actual warnings that matter due to this.  It used to be just the devops issue but clean coders obsess over the build log.  How can we lessen the noise in VS2017 or VS Code on this error? TIA.",
        "createdAt": "2017-07-28T15:51:41Z",
        "updatedAt": "2017-07-28T15:51:41Z",
        "author": {
          "login": "dodegaard"
        }
      },
      {
        "body": "From reading the source for `ResolveAssemblyReference.LogResults()`, I'd like to suggest the following incremental change.\r\n\r\nInstead of generating a single warning that contains no specifics (the current behavior), generate a separate warning message for each distinct reference conflict.\r\n\r\nFor example:\r\n```\r\nMSB3277: Found conflicts between different versions of \"Newtonsoft.Json\" that could not be resolved.  \r\nThese reference conflicts are listed in the build log when log verbosity is set to detailed.\r\n```\r\n\r\nI've generally found that knowing the name of the conflicting assembly has been enough to track down the problem and address the issue.\r\n\r\nAll of the existing diagnostics would still be available in the detailed log if required, and I believe all of the information required for this change is already available within the `LogResults()` method, making this a simple change.\r\n\r\nIf this is an acceptable modification, I'm willing to have a go at making the change and creating a PR - but didn't want to dive in if there's another/better fix already underway.",
        "createdAt": "2017-07-30T23:02:40Z",
        "updatedAt": "2017-07-30T23:02:40Z",
        "author": {
          "login": "theunrepentantgeek"
        }
      },
      {
        "body": "@theunrepentantgeek that could be the key if the message included the project names that had the conflict too.\r\n\r\nThe key to solving this is knowing project + reference I believe.",
        "createdAt": "2017-07-31T07:38:46Z",
        "updatedAt": "2017-07-31T07:38:46Z",
        "author": {
          "login": "TehWardy"
        }
      },
      {
        "body": "Conflicts don't always stem from a direct project reference - sometimes there are intermediate dependencies on the path - this is why it's not always straightforward to solve.. That said, I'll have a look at what other information is on hand in `LogResults()`.",
        "createdAt": "2017-07-31T07:47:48Z",
        "updatedAt": "2017-07-31T07:47:48Z",
        "author": {
          "login": "theunrepentantgeek"
        }
      },
      {
        "body": "Yeh the trick is figuring out the root project in a tree I guess ... The ones that's the \"app\" is likely to be the one that needs something like binding redirection that would solve it for all of the projects compiled in to its build output directory.\r\n\r\nHence my suggestion above about making this process as painless to resolve as possible (with a simple right click).\r\n\r\nAs you say ... All the information is there right!",
        "createdAt": "2017-07-31T07:53:52Z",
        "updatedAt": "2017-07-31T07:53:52Z",
        "author": {
          "login": "TehWardy"
        }
      },
      {
        "body": "Please fix this.  Opened over two years ago.  ",
        "createdAt": "2017-11-21T14:30:35Z",
        "updatedAt": "2017-11-21T14:30:35Z",
        "author": {
          "login": "ghost"
        }
      },
      {
        "body": "Well- opened 1.5 years ago unless I'm missing something.",
        "createdAt": "2017-11-21T16:00:34Z",
        "updatedAt": "2017-11-21T16:00:34Z",
        "author": {
          "login": "jnm2"
        }
      },
      {
        "body": "@jnm2 you're correct.  1.5 years ago.  Still not good this has not been addressed.",
        "createdAt": "2017-11-21T16:24:33Z",
        "updatedAt": "2017-11-21T16:24:33Z",
        "author": {
          "login": "ghost"
        }
      },
      {
        "body": "@theunrepentantgeek did #2379 which prints the name of the conflicting assembly. Let us know the extent to which this helps you diagnose and fix conflicts. The change should be in the 15.5 previews.",
        "createdAt": "2017-11-21T17:47:27Z",
        "updatedAt": "2017-11-21T17:48:12Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "@cdmihai looking forward to VS 15.5 RTM.",
        "createdAt": "2017-11-21T18:01:33Z",
        "updatedAt": "2017-11-21T18:01:33Z",
        "author": {
          "login": "ghost"
        }
      },
      {
        "body": "Well, as a noob, that fix is great for me!!\r\nI was struggling the old warning with no success, but now I know where the main \"conflict\" is!\r\nFurthermore, now the warning is refined - enabling us (developers) to discuss each \"conflict\" specifically (in many cases, the conflict emerged from the same situation/update action).\r\nThank you!!",
        "createdAt": "2018-01-24T08:18:16Z",
        "updatedAt": "2018-01-24T08:18:16Z",
        "author": {
          "login": "Ofaim"
        }
      },
      {
        "body": "On this topic... once you have a project with MSB3277 warnings... what are the next steps? Is there any formal guidance on this topic?\r\n\r\nIn my case, I have a UWP app with a number of NuGet package dependencies, and building it raises a number of these warnings. However, I'm not entirely sure what to do to address the problem, since my NuGet packages are generally up to date. Is there even a problem?\r\n\r\nThanks.\r\n",
        "createdAt": "2018-03-09T00:49:05Z",
        "updatedAt": "2018-03-09T00:49:05Z",
        "author": {
          "login": "mfeingol"
        }
      },
      {
        "body": "Using VS 15.7 and still seeing these warnings in one of our UWP solution. No idea, where or how to fix this:  \r\n```\r\n1>C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Professional\\MSBuild\\15.0\\Bin\\Microsoft.Common.CurrentVersion.targets(2106,5): warning MSB3277: Found conflicts between different versions of \"System.ComponentModel.EventBasedAsync\" that could not be resolved.  These reference conflicts are listed in the build log when log verbosity is set to detailed.\r\n1>C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Professional\\MSBuild\\15.0\\Bin\\Microsoft.Common.CurrentVersion.targets(2106,5): warning MSB3277: Found conflicts between different versions of \"System.Diagnostics.Tools\" that could not be resolved.  These reference conflicts are listed in the build log when log verbosity is set to detailed.\r\n1>C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Professional\\MSBuild\\15.0\\Bin\\Microsoft.Common.CurrentVersion.targets(2106,5): warning MSB3277: Found conflicts between different versions of \"System.Diagnostics.Debug\" that could not be resolved.  These reference conflicts are listed in the build log when log verbosity is set to detailed.\r\n1>C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Professional\\MSBuild\\15.0\\Bin\\Microsoft.Common.CurrentVersion.targets(2106,5): warning MSB3277: Found conflicts between different versions of \"System.Threading\" that could not be resolved.  These reference conflicts are listed in the build log when log verbosity is set to detailed.\r\n1>C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Professional\\MSBuild\\15.0\\Bin\\Microsoft.Common.CurrentVersion.targets(2106,5): warning MSB3277: Found conflicts between different versions of \"System.ComponentModel\" that could not be resolved.  These reference conflicts are listed in the build log when log verbosity is set to detailed.\r\n```\r\n\r\nEdit, the problem was caused by referencing MvvmLightLibs NuGet v5.3.0 in our UWP app targeting MinVersion 10.0.14393 and TargetVersion 10.0.17134. The MvvmLight dll was built as PCL library, referencing different 'System' types.",
        "createdAt": "2018-07-09T08:16:07Z",
        "updatedAt": "2018-07-09T11:04:33Z",
        "author": {
          "login": "martinsuchan"
        }
      },
      {
        "body": "@martinsuchan as stated above ... the fix is to add binding re-directions to your config files \"manually\" ... \r\nThe normal turn around time for bugs in anything MS related from what I have seen is about 4 years so we have about another 2 ish still to wait on this.",
        "createdAt": "2018-07-09T09:40:43Z",
        "updatedAt": "2018-07-09T09:40:43Z",
        "author": {
          "login": "TehWardy"
        }
      },
      {
        "body": "My gosh, this issue is so painful. Been solving it for years and it still pains me. Just fighting an instance of it where two assemblies have the same NuGet packages, the same references, the same project dependencies, the same output type, the same bindingRedirects... I can't freaking find the problem for hours and hours. SO painful. Grrr!!!\r\n\r\nI page down through the diagnostic output and the scroll bar doesn't even move a pixel. I search the diagnostic output and there are literally hundreds of emissions of \"System.Net.Http\". And not one of them seems to correlate to \"Found conflicts ... that could not be resolved.\", because every occurrence lists which assembly was chosen and why.\r\n\r\nAdd my voice to those making an appeal to resolve this.\t\r\n",
        "createdAt": "2018-08-27T00:58:47Z",
        "updatedAt": "2018-08-27T00:58:47Z",
        "author": {
          "login": "syndicatedshannon"
        }
      },
      {
        "body": "A project with both <bindingRedirect oldVersion\"4.0.0.0-4.2.0.0\" newVersion=\"4.2.0.0\"/> and project reference Version=4.2.0.0 chose Version=4.1.1.2 \"because it was primary\", due apparently to a hint path, causing report of MSB3277. Next, removing dependencies on obvious sources of Version=4.2.0.0 didn't fix it, because ApplicationInsights were enabled. Next, while collection/redirection up to 4.2.0.0 had no effect, collection/redirection down to 4.1.1.2 did. Lastly, simply adding a reference to a NetStandard project, despite having no dependence on the library in question, triggered override of the project primary version to the copy in Microsoft.NET.Build.Extensions via target ImplicitlyExpandNETStandardFacades; suppressing the error.\r\n\r\nAll of this is probably exacerbated by NuGet/library version issues I'm encountering and exceptions in place specifically to deal with them: https://github.com/dotnet/corefx/issues/22781#issuecomment-374424184\r\n\r\nWith so many counter-intuitive dependency calculations, this error really needs clarification to prevent wasting time.",
        "createdAt": "2018-08-27T08:12:50Z",
        "updatedAt": "2018-08-27T08:24:14Z",
        "author": {
          "login": "syndicatedshannon"
        }
      },
      {
        "body": "I'll also add comments here that this should be better presented. If the problem is known, why can't you offer an easier explanation of how to solve it?\r\n\r\nThe annoyance is that it's definitely solvable, but the steps to get there are unclear.",
        "createdAt": "2018-10-17T14:19:04Z",
        "updatedAt": "2018-10-17T14:19:04Z",
        "author": {
          "login": "jmfallecker"
        }
      },
      {
        "body": "Some light guys ...\r\nI've noticed this happening less and the one suggesting adding a binding redirect happening more in my solutions (it might be that stuff is going on behind the scenes to make that happen).\r\n\r\nI have also found that managing nuget packages for the solution and consolidating references often helps.\r\nNot a complete solution and may still require some manual removal / updates of binding redirections but it's a start.\r\n\r\nIMO this should be trivial to fix but I guess there's more to it than we see going on behind the scenes.\r\nMy worst nightmare being when it happens on a build server but not locally.",
        "createdAt": "2018-10-19T08:31:49Z",
        "updatedAt": "2018-10-19T08:31:49Z",
        "author": {
          "login": "TehWardy"
        }
      },
      {
        "body": "@TehWardy Check out [CentralPackageVersions](https://github.com/Microsoft/MSBuildSdks/tree/master/src/CentralPackageVersions) to help you specify all your versions in one place.",
        "createdAt": "2018-10-23T18:00:01Z",
        "updatedAt": "2018-10-23T18:00:01Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "We should consider adding the suggested redirects to this message if we're not going to do that, then this issue can be closed (as we now list the assembly name with the conflict).",
        "createdAt": "2019-03-01T23:25:10Z",
        "updatedAt": "2019-03-01T23:25:10Z",
        "author": {
          "login": "dsplaisted"
        }
      },
      {
        "body": "@cdmihai doesn't work in my case ...\r\nDo anything with say ... Azure's fluent API and some assemblies force older versions of packages.\r\n\r\nI'd like to for something like say Newtonsoft.Json just put a rule in to force latest version across my entire codebase, but something like Azure's Functions SDK requires v9 for some weird reason.\r\n\r\nIt's stuff like this that triggers most my frustration with MS as an API provider when they are also responsible for the tools consuming those assemblies problems like this remind me of the \"dll hell\" that Java / game devs often complain about.",
        "createdAt": "2019-03-03T15:09:23Z",
        "updatedAt": "2019-03-03T15:09:23Z",
        "author": {
          "login": "TehWardy"
        }
      },
      {
        "body": "This just popped up in a project I'm working on. I added an xUnit test project and when I try and build I get \r\n`C:\\Program Files\\dotnet\\sdk\\2.2.105\\Microsoft.Common.CurrentVersion.targets(2110,5): warning MSB3277: Found conflicts between different versions of \"Microsoft.AspNetCore.Diagnostics.Abstractions\" that could not be resolved.  These reference conflicts are listed in the build log when log verbosity is set to detailed. [C:\\Users\\dbarless\\Desktop\\MaintReq\\MaintReq.tests\\MaintReq.tests.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\2.2.105\\Microsoft.Common.CurrentVersion.targets(2110,5): warning MSB3277: Found conflicts between different versions of \"Microsoft.AspNetCore.Mvc\" that could not be resolved.  These reference conflicts are listed in the build log when log verbosity is set to detailed. [C:\\Users\\dbarless\\Desktop\\MaintReq\\MaintReq.tests\\MaintReq.tests.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\2.2.105\\Microsoft.Common.CurrentVersion.targets(2110,5): warning MSB3277: Found conflicts between different versions of \"Microsoft.AspNetCore.Mvc.Formatters.Json\" that could not be resolved.  These reference conflicts are listed in the build log when log verbosity is set to detailed. [C:\\Users\\dbarless\\Desktop\\MaintReq\\MaintReq.tests\\MaintReq.tests.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\2.2.105\\Microsoft.Common.CurrentVersion.targets(2110,5): warning MSB3277: Found conflicts between different versions of \"Microsoft.AspNetCore.Mvc.ViewFeatures\" that could not be resolved.  These reference conflicts are listed in the build log when log verbosity is set to detailed. [C:\\Users\\dbarless\\Desktop\\MaintReq\\MaintReq.tests\\MaintReq.tests.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\2.2.105\\Microsoft.Common.CurrentVersion.targets(2110,5): warning MSB3277: Found conflicts between different versions of \"Microsoft.AspNetCore.Razor.Runtime\" that could not be resolved.  These reference conflicts are listed in the build log\r\nwhen log verbosity is set to detailed. [C:\\Users\\dbarless\\Desktop\\MaintReq\\MaintReq.tests\\MaintReq.tests.csproj]`\r\n\r\nWhat?!? How does this get resolved, why is it happening? I've never had this happen with any other project. It's annoying that this is apparently a problem that's existed for 2 years with no clear resolution.",
        "createdAt": "2019-06-18T14:50:09Z",
        "updatedAt": "2019-06-18T14:51:14Z",
        "author": {
          "login": "dcb99"
        }
      },
      {
        "body": "IMO logging the assembly in conflict is helpful, but not sufficient, since tracing the conflict with only that information can be very time consuming, or lead the developer outside their own code domain, in my past experience even terminating in workarounds for defects in MS-provided tools and assemblies.\r\n\r\nIdeally, a deterministic strategy to resolve this quickly would exist, and the build process would emit information in support of that process. For example, perhaps the log would trace the origin of the conflict; although I recognize that MSBuild limits what it holds for performance reasons.",
        "createdAt": "2019-08-11T06:17:26Z",
        "updatedAt": "2019-08-11T06:17:26Z",
        "author": {
          "login": "syndicatedshannon"
        }
      },
      {
        "body": "I for one would love to stop getting these kinds of warning walls.   Do note that this is just the top half of the warning.\r\n\r\n![image](https://user-images.githubusercontent.com/15381181/68805751-6e7c6900-0632-11ea-871c-97ea77efea85.png)\r\n",
        "createdAt": "2019-11-13T21:27:55Z",
        "updatedAt": "2019-11-13T21:27:55Z",
        "author": {
          "login": "StingyJack"
        }
      },
      {
        "body": "@StingyJack  that' the good version of this problem ... if I recall you should be able to just double click on that and it'll dump that XML blob in to your config file.",
        "createdAt": "2019-11-25T13:50:41Z",
        "updatedAt": "2019-11-25T13:50:41Z",
        "author": {
          "login": "TehWardy"
        }
      },
      {
        "body": "@TehWardy except that maybe a years of users testing code built from projects that exhibit the wall of warning leads me to believe that they are false positives.",
        "createdAt": "2019-11-25T19:00:35Z",
        "updatedAt": "2019-11-25T19:00:35Z",
        "author": {
          "login": "StingyJack"
        }
      },
      {
        "body": "The issue is what the build process sees vs what actually gets deployed ... \r\nTesters would need to be testing lines of code in your codebase that specifically calls the edge case updates in the dependencies that are in question for there to actually be a problem.\r\n\r\nI would think that the reason your testers aren't finding anything is that you either don't use those edge cases in the dependent libs or they have an incomplete test case suite.",
        "createdAt": "2019-11-25T19:42:30Z",
        "updatedAt": "2019-11-25T19:42:30Z",
        "author": {
          "login": "TehWardy"
        }
      },
      {
        "body": "This happens when reffing a netstandard2.0 assembly from a 4.6.2 project. ",
        "createdAt": "2019-11-25T21:09:44Z",
        "updatedAt": "2019-11-25T21:09:44Z",
        "author": {
          "login": "StingyJack"
        }
      },
      {
        "body": "@StingyJack Windows 7 is gone in January. Assuming everyone is on Windows 10 at that point, which forces you to stay up to date within at most a year, everyone has 4.7.2 already and soon 4.8 will be the new baseline.",
        "createdAt": "2019-11-25T21:17:00Z",
        "updatedAt": "2019-11-25T21:17:05Z",
        "author": {
          "login": "jnm2"
        }
      },
      {
        "body": "> We're in favor of clear, actionable error messages, but since the information **is just a rebuild with `/v:diag` away**, we really don't want to slow down the normal/success case by carrying around extra information just to support this error.\r\n\r\n@rainersigwald   - you mean its just an opening of Tools -> Options, then Projects and Solutions -> Build and Run, then select the Diagnostic option for the two verbosity options, click OK, then rebuild , and then sift through **10's of thousands** of lines of log output (if not more) to find the problem source?  \r\n\r\nThats a total PITA compared to the message just telling us what the problem is. Why make your customers work so much when its possible for you to improve their experience with this cryptic and questionable warning?\r\n\r\nAt least this used to explains how to find the source. I see this has been changed at some point and now we dont get that instruction, and instead get a message like...\r\n\r\n```\r\nWarning\t\tFound conflicts between different versions of the same dependent assembly. \r\nPlease set the \"AutoGenerateBindingRedirects\" property to true in the project file. \r\nFor more information, see http://go.microsoft.com/fwlink/?LinkId=294190.\t\r\nC:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\\MSBuild\\Current\\Bin\\Microsoft.Common.CurrentVersion.targets\t\r\n2081\t\r\n```\r\n\r\n... for projects that have that flag set to True in the project file. \r\n",
        "createdAt": "2020-05-31T19:01:23Z",
        "updatedAt": "2020-05-31T19:01:23Z",
        "author": {
          "login": "StingyJack"
        }
      }
    ]
  }
}