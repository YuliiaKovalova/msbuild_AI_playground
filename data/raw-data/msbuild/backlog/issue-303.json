{
  "number": 303,
  "title": "Enable /m in CoreCLR (xplat)",
  "body": "This features was turned off due to named pipe limitations and binary serialization missing from .NET Core. This feature should be enabled and supported.\n",
  "state": "CLOSED",
  "createdAt": "2015-10-20T17:52:36Z",
  "updatedAt": "2024-02-21T17:30:12Z",
  "closedAt": "2016-10-06T19:48:59Z",
  "author": {
    "login": "AndyGerlicher"
  },
  "labels": [
    "help wanted",
    ".NET Core",
    "backlog",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "What would it take to get this off the backlog and funded? I do believe not having this will damper us picking this up for corefx builds. \n",
        "createdAt": "2015-11-18T22:51:53Z",
        "updatedAt": "2015-11-18T22:51:53Z",
        "author": {
          "login": "weshaggard"
        }
      },
      {
        "body": "I've been looking into this.  The basic design of MSBuild's multiproc model is (checkboxes for apparent compat with current .NET Core):\n- [x] MSBuild.exe is invoked with the `/m` command-line option (easily undisabled)\n- [x] That node can do work internally, and can also spawn other nodes via `CreateProcess`, where the child/worker nodes are run with `/nodeMode:1`\n- [x] After spawning a process, communication is done by opening a named pipe and passing serialized objects back and forth\n- [ ] In full-framework MSBuild, there's a bit of security checking to ensure (from both sides) that the other end of the pipe is running as the same user and elevation level  (`PipeSecurity` is not supported on .NET Core)\n- [ ] The pipe operations are done using old-style async operations (`BeginRead` and friends) that aren't supported on .NET Core--we'd have to switch to the modern `async` methods\n- [x] Serialization is primarily via a custom MSBuild mechanism ([`INodePacketTranslator`](https://github.com/Microsoft/msbuild/blob/master/src/Shared/INodePacketTranslator.cs)), which is in mostly pretty good shape for .NET Core\n- [ ] However, there's an escape hatch that allows using .NET Binary Serialization ([`TranslateDotNet<T>()`](https://github.com/Microsoft/msbuild/blob/4fd08fbded602e1f4e25af24fd3d4176749e590d/src/Shared/INodePacketTranslator.cs#L195))\n\nBinary serialization is used for:\n- [x] `AppDomainSetup` (no app domains in Core, so no problem)\n- [ ] `Exception`s in several places\n- [ ] [`TaskParameter`s](https://github.com/Microsoft/msbuild/blob/4fd08fbded602e1f4e25af24fd3d4176749e590d/src/Shared/TaskParameter.cs#L116) or arrays of `TaskParameter` of types that are not `System.String` or `ITaskItem`\n\nI _think_ that we could work around the `Exception` problem by serializing as something else (at its most simple, we could create a new [`TaskParameterType`](https://github.com/Microsoft/msbuild/blob/4fd08fbded602e1f4e25af24fd3d4176749e590d/src/Shared/TaskParameter.cs#L21) and serialize as a `string`).\n\nSerializing arbitrary `TaskParameter` types is more difficult.  However, _most_ tasks take strings and `ITaskItem`s, so it may be acceptable to drop support for other types in .NET Core MSBuild.  If input is coming from XML (and any task should be designed for that), task inputs need to be easily representable in text anyway.  I don't yet know whether lack of this support would cause any problems for the projects we're currently working on building with .NET Core MSBuild.\n",
        "createdAt": "2015-11-24T16:08:07Z",
        "updatedAt": "2019-03-29T21:09:10Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "On Unix-like systems there is no need to do the security checking around named pipes, provided they are created with restrictive permissions (0600 octal) in a secure directory.\n",
        "createdAt": "2015-12-04T07:15:47Z",
        "updatedAt": "2015-12-04T07:16:04Z",
        "author": {
          "login": "DemiMarie"
        }
      },
      {
        "body": "Looooong completed!\n",
        "createdAt": "2016-10-06T19:48:59Z",
        "updatedAt": "2016-10-06T19:48:59Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}