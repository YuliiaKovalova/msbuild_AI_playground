{
  "number": 4223,
  "title": "mono/msbuild forces pdb portable, unable to use pdb2mdb",
  "body": "Trying to use mono's pdb2mdb in a Docker container. But I'm always getting:\r\n\r\n```\r\nError: A portable PDB can't be converted to mdb.\r\n```\r\n\r\nThis has boiled down to me finding that when I use msbuild in the Docker container, it always produces portable PDB files, no-matter what I supply with either the `/p:DebugType=Full` flag on msbuild, or via the DebugType property in my `.csproj` files.\r\n\r\nThis only happens for me when I use the [linux distribution of .NET Core SDK for Docker (2.2.104)](https://hub.docker.com/_/microsoft-dotnet-core-sdk/) (`mcr.microsoft.com/dotnet/core/sdk:2.2`) and not with my windows dotnet installation.\r\n\r\nI found while doing a `--verbose=Diagnostic` build (when having DebugType set in the .csproj) that this one item occurs:\r\n\r\n```\r\nProperty reassignment: $(DebugType)=\"portable\" (previous value: \"full\") at /usr/lib/mono/msbuild/15.0/bin/Microsoft.CSharp.Mono.targets (47,9)\r\n```\r\n\r\nWhy is it overriding my `DebugType` property? **Why is it doing that?**\r\n\r\n### Steps to reproduce\r\n\r\nVia using Docker:\r\n\r\n```sh\r\n#<inside the host machine>\r\ndocker run --rm -it mcr.microsoft.com/dotnet/core/sdk:2.2\r\n\r\n#<inside the docker container>\r\n# installation of mono\r\napt update && \\\r\napt install apt-transport-https dirmngr gnupg ca-certificates -y && \\\r\napt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF && \\\r\necho \"deb https://download.mono-project.com/repo/debian stable-stretch main\" | tee /etc/apt/sources.list.d/mono-official-stable.list\r\n\r\n# testlib\r\ndotnet new classlib -o ~/testlib\r\n\r\n# via msbuild mono\r\nmsbuild ~/testlib/testlib.csproj /p:DebugType=Full /p:OutDir=/root/1\r\n\r\n# via dotnet build\r\ndotnet build ~/testlib/testlib.csproj /p:DebugType=Full -o /root/2\r\n```\r\n\r\n> Can also install text editor like nano and edit `~/testlib/testlib.csproj` and add the `<DebugType>Full</DebugType>` property.\r\n\r\nBoth via `dotnet build` and `msbuild` results in portable pdb.\r\nPeek at `~/1/testlib.pdb` and `~/2/testlib.pdb`, and see theire all portable pdbs. Not what I requested.\r\n\r\n### OS info:\r\n\r\nIf applicable, version of the tool that invokes MSBuild (Visual Studio, dotnet CLI, etc):\r\n\r\n```\r\nHost OS: Windows 10 Home, 10.0.17763, Build 17763\r\n\r\nDocker container OS (running in Hyper-V): Debian GNU/Linux 9 (stretch)\r\ndocker image: `mcr.microsoft.com/dotnet/core/sdk:2.2`\r\n\r\nmono: Mono JIT compiler version 5.18.0.225 (tarball Wed Jan  2 21:21:16 UTC 2019)\r\ndotnet: .NET Command Line Tools (2.2.104)\r\ndotnet build: Microsoft (R) Build Engine version 15.9.20+g88f5fadfbe for .NET Core\r\n```",
  "state": "OPEN",
  "createdAt": "2019-03-09T09:58:06Z",
  "updatedAt": "2024-02-21T16:31:46Z",
  "closedAt": null,
  "author": {
    "login": "applejag"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Discussion"
  },
  "comments": {
    "nodes": [
      {
        "body": "This happens because generating full pdbs is not supported on for .NET Core. If you are using core (dotnet), it only supports portable pdbs. If you want to generate full pdbs, I suggest using windows. I believe the same is true for mono, which is why you mentioned the property setting above. In any case, looping in @radical to make an accurate comment and guidance on mono.",
        "createdAt": "2019-03-11T17:53:22Z",
        "updatedAt": "2019-03-11T17:53:22Z",
        "author": {
          "login": "livarcocc"
        }
      }
    ]
  }
}