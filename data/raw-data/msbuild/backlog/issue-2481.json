{
  "number": 2481,
  "title": "Generate binding redirects should be on by default",
  "body": "_From @jcouv on August 4, 2017 19:37_\n\nA number of customers ran into issues with ValueTuple in .NET Standard 2.0 in unittests with EntityFramework. It turns out the problem was missing binding redirects.\r\n@weshaggard recommended two settings for such projects:\r\n```\r\n    <AutoGenerateBindingRedirects>true</AutoGenerateBindingRedirects>\r\n    <GenerateBindingRedirectsOutputType>true</GenerateBindingRedirectsOutputType>\r\n```\r\n\r\nThose settings are apparently set for executable project templates, but not for unittests.\r\n\r\nhttps://github.com/aspnet/EntityFramework/issues/9046#issuecomment-314187616\r\nhttps://github.com/ErikEJ/EntityFramework.SqlServerCompact/issues/463#issuecomment-314188903\r\n\r\nFYI @ericstj @terrajobst @nguerrera \n\n_Copied from original issue: dotnet/project-system#2692_",
  "state": "CLOSED",
  "createdAt": "2017-08-29T05:04:13Z",
  "updatedAt": "2024-02-21T17:16:57Z",
  "closedAt": "2018-01-24T07:29:23Z",
  "author": {
    "login": "davkean"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "rainersigwald"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "_From @ericstj on August 4, 2017 20:7_\n\nI really think MSBuild should just fix the defaults.  /cc @rainersigwald",
        "createdAt": "2017-08-29T05:04:15Z",
        "updatedAt": "2017-08-29T05:04:15Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "_From @rainersigwald on August 4, 2017 20:10_\n\n@ericstj Can you convince me that that's not a breaking change? It certainly seems like it would be.",
        "createdAt": "2017-08-29T05:04:16Z",
        "updatedAt": "2017-08-29T05:04:16Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "_From @ericstj on August 4, 2017 20:26_\n\nIt can't be completely breaking since we're making it in various SDKs and templates.  I know we don't want to enable it for web projects since they need redirects in the source app.config.  Other than that I think it should be safe to turn it on.",
        "createdAt": "2017-08-29T05:04:16Z",
        "updatedAt": "2017-08-29T05:04:16Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "It will be breaking to switch this on, SDK and templates are new code and doesn't change the behavior under a project.",
        "createdAt": "2017-08-29T05:04:17Z",
        "updatedAt": "2017-08-29T05:04:17Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "_From @ericstj on August 7, 2017 16:12_\n\nSure, that's fine to make the change in these template for now.  I agree that templates are new code and its fine to change the default.   It just feels like this is a whack-a-mole.  \r\n\r\nI think MSBuild should do the work to understand what is actually breaking about such a change and make a *reasonable compromise* between a minimally breaking change and not having to require every project carry this state.  @davkean perhaps you can share how you think this is breaking so that MSBuild could perhaps come up with a non-breaking version of the fix.  I've proposed that it be turned on by default for everything but web projects, can you describe what's broken there and how we refine that?",
        "createdAt": "2017-08-29T05:04:17Z",
        "updatedAt": "2017-08-29T05:04:17Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "_From @rainersigwald on August 7, 2017 18:40_\n\n@ericstj I find your position here really confusing.\r\n\r\nThis is how I think of it:\r\n1. The .NET assembly loader respects binding redirects. Having them can result in an observable runtime change.\r\n1. Common targets don't generate binding redirects by default.\r\n1. If we changed the default, binding redirects would be created for some projects when built with new toolsets, but not created on older toolsets.\r\n1. That makes changing the default an observable (breaking) change.\r\n\r\nAm I missing something here? You seem to think that there's a way to create binding redirects when they are both a) required and b) not currently present, but not break people. I don't see what that is, other than the current \"you should have binding redirects\" warnings.",
        "createdAt": "2017-08-29T05:04:18Z",
        "updatedAt": "2017-08-29T05:04:18Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "_From @ericstj on August 7, 2017 18:51_\n\nYou need to make the fix so that the only *observable runtime change* is removing a exception.  We have long standing precedent in DevDiv Compat for allowing a breaking change (with docs) when that breaking change is merely removing an exception.  Theoretically this fix should be implementable in a way that its merely removing the runtime exception: that was the whole basis for the original feature.  I'm saying do the work to make that true.  If folks are claiming that its not possible you need to be specific about those concerns so that you can determine if you can code around them.",
        "createdAt": "2017-08-29T05:04:19Z",
        "updatedAt": "2017-08-29T05:04:19Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "_From @terrajobst on August 7, 2017 19:56_\n\nI also feel like we need to apply a different bar for (potentially) breaking changes between \"launching an existing app binary on a few framework\" and \"building an existing code base with a new toolset\". In the later, breaking changes can be mitigated by giving people an opt-out (which exists for automatic binding redirects), and is generally considered acceptable (which doesn't hold for the former). We need to weigh the potential disruption for developers with the value gain. As @ericstj said: with binding redirects we've reached the point where we're now playing whack-a-mole, [for example here is another one](https://github.com/dotnet/sdk/issues/1405). Hence, I'm in favor this being automatically on.",
        "createdAt": "2017-08-29T05:04:19Z",
        "updatedAt": "2017-08-29T05:04:19Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "@ericstj I'm not sure I understand how we could detect that we would be removing an exception. It's perfectly valid to load two versions of the same assembly in the Load context, either by deployment (having both in the GAC) or by hooking onto assembly resolve and loading the binary yourself. How exactly would you detect those situations? It basically exactly the same argument for not changing the binding policy.",
        "createdAt": "2017-08-29T05:04:20Z",
        "updatedAt": "2017-08-29T05:04:20Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "Either way, this isn't a project system concern - this is a handshake between .NET <-> MSBuild. I'm moving it to the MSBuild repo.",
        "createdAt": "2017-08-29T05:04:21Z",
        "updatedAt": "2017-08-29T05:04:21Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "If the defaults change, it might generate a lot of these warnings:\r\n\r\n```\r\nMicrosoft.Common.CurrentVersion.targets(2099,5): warning MSB3836: The explicit binding redirect on \"System.Runtime, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" conflicts with an autogenerated binding redirect. Consider removing it from the application configuration file or disabling autogenerated binding redirects. The build will replace it with: \"<bindingRedirect oldVersion=\"0.0.0.0-4.1.2.0\" newVersion=\"4.1.2.0\" xmlns=\"urn:schemas-microsoft-com:asm.v1\" />\"\r\n```\r\n\r\nAs reported on https://stackoverflow.com/questions/45924514/installing-entity-framework-core-2-0-in-a-net-framework-class-library-project-y",
        "createdAt": "2017-08-29T05:10:26Z",
        "updatedAt": "2017-08-29T05:10:26Z",
        "author": {
          "login": "dasMulli"
        }
      },
      {
        "body": "Maybe something can be done in the `Microsoft.NET.Build.Extensions` to default these properties during `ImplicitlyExpandNETStandardFacades`?\r\n/cc @ericstj",
        "createdAt": "2017-08-29T05:16:06Z",
        "updatedAt": "2017-08-29T05:16:06Z",
        "author": {
          "login": "dasMulli"
        }
      },
      {
        "body": "Would it be better for this to be in the SDK?  It revs independently of MSBuild and more often.  We're concerned about defaulting this property for all MSBuild users. ",
        "createdAt": "2017-08-29T22:49:27Z",
        "updatedAt": "2017-08-29T22:49:27Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "The biggest problem is with non-Sdk projects, though. There are so many people these days experiencing confusion like this: https://github.com/dotnet/corefx/issues/23306#issuecomment-325657346\r\nEasy to resolve if you understand the build system, but most people have never had to before. It can also be triggered in many different ways :(",
        "createdAt": "2017-08-30T03:57:49Z",
        "updatedAt": "2017-08-30T03:57:49Z",
        "author": {
          "login": "gulbanana"
        }
      },
      {
        "body": "Most problematic are probably classic unit test that are `<OutputType>Library</\u2026>`..\r\n\r\nI've been posting the magic properties on SO a lot.\r\n\r\nhttps://stackoverflow.com/questions/43995432/could-not-load-file-or-assembly-microsoft-extensions-dependencyinjection-abstrac\r\nhttps://stackoverflow.com/questions/45512580/net-standard-portable-library-error-with-descriptionattribute\r\nhttps://stackoverflow.com/questions/44257436/when-using-net-standard-1-4-in-a-library-and-net-framework-4-6-1-in-and-applic\r\nhttps://stackoverflow.com/questions/44527371/creating-a-nuget-package-that-includes-other-nuget-packages-newtonsoft-referen\r\nhttps://stackoverflow.com/questions/44053187/could-not-load-file-or-assembly-system-componentmodel-annotations-version-4-1\r\nhttps://stackoverflow.com/questions/43955266/interface-in-netstandard-1-1-library-does-not-have-implementation-in-net-4-61\r\n\r\nI guess changing it for all MSBuild users would be unexpected.. `Microsoft.NET.Build.Extensions` is already looking for any `netstandard` / `System.Runtime` in the closure for new and classic projects.",
        "createdAt": "2017-08-30T05:11:27Z",
        "updatedAt": "2017-08-30T05:11:27Z",
        "author": {
          "login": "dasMulli"
        }
      },
      {
        "body": "Also, classic desktop apps (WPF/Winforms) that do not have AutoGenerateBindingRedirects on - newly-templated apps add it, but the old csproj templates did not. So the experience of using .NET Standard code in an existing GUI app usually starts with this error.",
        "createdAt": "2017-08-30T06:16:51Z",
        "updatedAt": "2017-08-30T06:16:51Z",
        "author": {
          "login": "gulbanana"
        }
      },
      {
        "body": "For clarity in this issue, the plan is to [turn this on for projects targeting 4.7.2 and higher](https://github.com/dotnet/designs/blob/master/accepted/automatic-redirects-by-default/automatic-redirects-by-default.md), since it would be a breaking change for existing projects, but there aren't any existing projects targeting 4.7.2.",
        "createdAt": "2018-01-19T21:35:27Z",
        "updatedAt": "2018-01-19T21:35:27Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}