{
  "number": 9572,
  "title": "Microsoft.NET.StringTools not properly loading into separate ALC",
  "body": "\r\n### Context\r\n\r\nThis is based on the https://github.com/dotnet/msbuild/issues/9538\r\nMicrosoft.NET.StringTools is not being loaded into separate AssemblyLoadContext properly in the C# DevKit leading to regression issues in case of changes in functionality of StringTools.\r\n\r\n### Details\r\n\r\nThe Microsoft.NET.StringTools.dll is located in the sdk folder along with the othe MSBuild assemblies that are trying to load it, however it fails to be loaded into nondefault ACL, fallbacking to the default ACL which already has StringTools loaded into separate ACL:\r\n\r\n![image](https://github.com/dotnet/msbuild/assets/3809076/8c1e300c-248a-441b-8aaa-31f0bb02260a)\r\n\r\n### Possible investigation steps\r\n\r\n1) Load Microsoft.Build.dll into custom Assembly Load Context\r\n2) Execute code that will lead to pulling other binaries - e.g. simple evaluation of a Project should do:\r\n\r\n```csharp\r\nvar path = \"some\\csrpoj\\path.csproj\";\r\nvar toolsVersion = \"Current\";\r\nvar xml = Microsoft.Build.Construction.ProjectRootElement.Open(path);\r\nvar rootProj = new Microsoft.Build.Evaluation.Project(xml, Microsoft.Build.Evaluation.ProjectCollection.GlobalProjectCollection.GlobalProperties, toolsVersion);\r\n```\r\n\r\n3) Inspect the ACL being used for all involved MSBuild assemblies. If you decide to use ETW for investigation, you can:\r\n\r\n    1. Collect the counters via (need to be started before the scenario execution and ctrl-c after scenario done):\r\n    ```\r\n    .\\PerfView.exe collect /NoGui /Providers=Microsoft-Windows-DotNETRuntime /NoNGenRundown /Merge:False /DataFile:msbuild-alc-etw /BufferSize:8096 /CircularMB:8096\r\n    ```\r\n\r\n    2. And then filter-in the `Microsoft-Windows-DotNETRuntime/AssemblyLoader` EventTypes and `Microsoft.NET.StringTools` (and possbily `Microsoft.Build` as well) data. For easier viewing you can setup `AssemblyName ActivityID Success *` columns.\r\n\r\n    ![image](https://github.com/dotnet/msbuild/assets/3809076/fff08295-901a-484e-9d8f-b9656a687928)\r\n\r\n",
  "state": "CLOSED",
  "createdAt": "2023-12-22T12:38:09Z",
  "updatedAt": "2024-02-21T16:58:27Z",
  "closedAt": "2024-01-09T21:14:36Z",
  "author": {
    "login": "JanKrivanek"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "ladipro"
      }
    ]
  },
  "milestone": {
    "title": ".NET 9.0"
  },
  "comments": {
    "nodes": [
      {
        "body": "I only briefly glanced at this issue, but is CSDK using MSBuildLocator? MSBuildLocator specifies loading our assemblies into the _default_ ALC:\nhttps://github.com/microsoft/MSBuildLocator/blob/0bd7d2689d9e0e03a4b0e5bcdccf053f61887f90/src/MSBuildLocator/MSBuildLocator.cs#L253",
        "createdAt": "2023-12-23T01:20:58Z",
        "updatedAt": "2023-12-23T01:20:58Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "> I only briefly glanced at this issue, but is CSDK using MSBuildLocator? MSBuildLocator specifies loading our assemblies into the _default_ ALC: https://github.com/microsoft/MSBuildLocator/blob/0bd7d2689d9e0e03a4b0e5bcdccf053f61887f90/src/MSBuildLocator/MSBuildLocator.cs#L253\r\n\r\nI do not know. But it's a good lead indeed! Should definitely be investigated as part of this item.\r\n\r\nFrom my uninformed point of view - forcing the Default ALC should be used only if necessary and in such case accompanied with checking and leading to explicit fast failing if attempted to workaround. Though at this point such ship might already have sailed.",
        "createdAt": "2023-12-27T11:31:49Z",
        "updatedAt": "2023-12-27T11:31:49Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "We're generally more willing to accept breaking changes in MSBuildLocator than MSBuild proper, but we can also avoid a breaking change if we have a separate API that permits you to specify your ALC and falls back to the default \ud83d\ude42 That isn't quite the same as what you're proposing, but if that really is the root of the problem, CSDK should be able to opt in, which would mitigate the issue from their perspective.",
        "createdAt": "2023-12-27T16:55:18Z",
        "updatedAt": "2023-12-27T16:55:18Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "The root cause of this issue is in the CoreCLR assembly loader itself. Apparently when an assembly is being loaded into a secondary ALC but another assembly with the same name is already loaded into the default ALC, the `Resolving` event for the secondary ALC is not called and the assembly from the default ALC is reused.\r\n\r\n@vitek-karas, is this by design? It's caught us by surprise here and cascaded into a user impacting issue in https://github.com/dotnet/msbuild/issues/9538.\r\n\r\nHere's a simple repro, which I believe reflects what's happening in C# Dev Kit (paths may need to be updated):\r\n[ALCTwoAssemblies.zip](https://github.com/dotnet/msbuild/files/13875573/ALCTwoAssemblies.zip)\r\n\r\n",
        "createdAt": "2024-01-09T15:21:14Z",
        "updatedAt": "2024-01-09T15:21:14Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "Making an explicit `LoadFromAssemblyPath` call with the desired path \"fixes\" it in that subsequent by-name binds get correctly resolved to this explicitly loaded assembly.\r\n\r\n`alc.LoadFromAssemblyPath(@\"C:\\temp\\ALCTwoAssemblies\\ClassLib2\\bin\\Debug\\net8.0\\ClassLib.dll\");`\r\n\r\nThis could potentially be a workaround for CDK.\r\n",
        "createdAt": "2024-01-09T15:29:44Z",
        "updatedAt": "2024-01-09T15:29:44Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "LoadFromAssemblyPath leads to more JITting, doesn't it? Relative to Load?\r\n\r\nIs it intentional for it to be added to the default ALC? Another possible option might be to ensure it's never added to the default ALC and use multiple not-default ALCs, though that might be a bit unwieldy.",
        "createdAt": "2024-01-09T18:03:17Z",
        "updatedAt": "2024-01-09T18:03:17Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "> @vitek-karas, is this by design? It's caught us by surprise here and cascaded into a user impacting issue in https://github.com/dotnet/msbuild/issues/9538.\r\n\r\nThe behavior as shown by the repro project you shared is by design. \r\n\r\nThe detailed description of the algorithm used by the runtime is here: https://learn.microsoft.com/en-us/dotnet/core/dependency-loading/loading-managed#algorithm\r\nBut in short, the `Resolving` event is raised as a fallback (almost) last chance. If the custom ALC should allow \"duplicate\" loading of assemblies which are also in Default, it needs to do so in the `Load` override, not in the `Resolving` event. The `Load` override is the first thing called, there the custom ALC can implement any behavior it wants we regard to what is loaded into it (call LoadFromAssemblyPath), or what is loaded from Default (return null).\r\n\r\nI don't know where the actual code discussed in this issue live, so I can't comment on the specifics unfortunately.",
        "createdAt": "2024-01-09T20:59:33Z",
        "updatedAt": "2024-01-09T20:59:33Z",
        "author": {
          "login": "vitek-karas"
        }
      },
      {
        "body": "@vitek-karas thank you! The code in question lives in CPS (not open source). I'm closing this issue and will continue in [AB#1937630](https://devdiv.visualstudio.com/0bdbc590-a062-4c3f-b0f6-9383f67865ee/_workitems/edit/1937630).\r\ncc @lifengl",
        "createdAt": "2024-01-09T21:14:36Z",
        "updatedAt": "2024-01-09T21:14:38Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "\r\n\u2705 Successfully linked to Azure Boards work item(s):\r\n- [Bug 1937630](https://devdiv.visualstudio.com/0bdbc590-a062-4c3f-b0f6-9383f67865ee/_workitems/edit/1937630)\r\n",
        "createdAt": "2024-01-09T21:14:39Z",
        "updatedAt": "2024-01-09T21:14:39Z",
        "author": {
          "login": "Pilchie"
        }
      }
    ]
  }
}