{
  "number": 5925,
  "title": "Mac (Mono) perf in Expander (file system and matching)",
  "body": "The VSMac build uses Mono MSBuild 16.6.0 from https://github.com/mono/msbuild/commit/db750f72af92181ec860b5150b40140583972c22\r\n\r\nWe're seeing a huge slowdown when preparing the NuGet restore graph for the solution, before the RestoreTask. Normally we'd expect this to take a few hundred milliseconds, but it takes over 6 minutes.\r\n\r\nI've started describing the issue here:\r\nhttps://github.com/dotnet/msbuild/issues/3835#issuecomment-736226984\r\nbut it looks like that issue might be unrelated and fixed already.\r\n\r\nI'm seeing that the VSMac build spends 6 minutes in _GetAllRestoreProjectPathItems calling _GenerateRestoreProjectPathWalk recursively, producing a total of 8300 items in _RestoreProjectPathItemsOutputs (a)\r\n\r\n![Target](https://user-images.githubusercontent.com/679326/100700397-2ec61380-3352-11eb-88c0-41a46ecbd954.png)\r\n\r\nI can tell that it uses a single solution-level Restore task that runs later (b), so the problem in this bug might be fixed by now, but there's still something extremely fishy going on.\r\n\r\nOn windows an equivalent also produces the a huge number of items, but it takes like 300ms.\r\n\r\nRandomly breaking in the debugger often results in this callstack:\r\n\r\n![image](https://user-images.githubusercontent.com/679326/100818334-c08b5a80-33fe-11eb-80ab-16fd4022564a.png)\r\n",
  "state": "OPEN",
  "createdAt": "2020-12-02T02:05:17Z",
  "updatedAt": "2025-06-02T08:26:41Z",
  "closedAt": null,
  "author": {
    "login": "KirillOsenkov"
  },
  "milestone": null,
  "assignees": {
    "nodes": [
      {
        "login": "KirillOsenkov"
      }
    ]
  },
  "labels": [
    "backlog",
    "Area: Performance",
    "Partner request",
    "Mono",
    "OS: macOS",
    "Priority:2",
    "triaged"
  ],
  "comments": {
    "nodes": [
      {
        "body": "![image](https://user-images.githubusercontent.com/679326/100818969-1280b000-3400-11eb-91ae-60f4dcc93f71.png)\r\n",
        "createdAt": "2020-12-02T02:07:35Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "Most of it is Directory.Exists checks during Evaluation:\r\n![image](https://user-images.githubusercontent.com/679326/101081912-8d141180-355f-11eb-9943-aafeacdf1f16.png)\r\n\r\nThis makes me think that maybe all calls to Directory.Exists during evaluation should be cached? Supposedly the file system shouldn't change during evaluation so it's safe to cache. Lots of these are called hundreds of times with same input.",
        "createdAt": "2020-12-03T20:04:31Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "Well this at least explains why we're not seeing such insane slowdown on Windows:\r\nhttps://github.com/dotnet/msbuild/blob/cd297218cc01e0fbbe4c1e27380f7d6983c5260d/src/Shared/FileUtilities.cs#L469",
        "createdAt": "2020-12-03T21:01:22Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "This PR removes a check that would short-circuit the method if the value didn't contains slashes: https://github.com/dotnet/msbuild/pull/3547",
        "createdAt": "2020-12-03T21:04:49Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "FYI @ccastanedaucf evaluation on Mac is insanely slow because of this, over half of our build (6 min) is spent here.",
        "createdAt": "2020-12-03T21:09:57Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "Na\u00efve nooping of the `MaybeAdjustFilePath()` method on Mono reduces the time to build the `_GenerateRestoreGraph` from 29 to 19 seconds.",
        "createdAt": "2020-12-03T23:27:46Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "just adding the `|| !value.Contains('\\\\')` check reduces the time spent in this method to half, from 29 to 24 seconds.",
        "createdAt": "2020-12-04T00:03:33Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "Aha, there is already a CachingFileSystemWrapper",
        "createdAt": "2020-12-04T03:11:10Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "but it's not enabled:\r\n![image](https://user-images.githubusercontent.com/679326/101117300-8e632f80-359b-11eb-985a-fb69104ff81d.png)\r\n",
        "createdAt": "2020-12-04T03:13:05Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "but the fileSystem is a CachingFileSystemWrapper so it does cache:\r\n![image](https://user-images.githubusercontent.com/679326/101117405-c23e5500-359b-11eb-9301-729e3b14aa6f.png)\r\n",
        "createdAt": "2020-12-04T03:14:32Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "@KirillOsenkov possibly not on topic, but shouldn't the ConcurrentDictionary receive an IEqualityComparer?\r\n\r\nAlso, you probably already did but can you check the `catch` block to see if anything throws?",
        "createdAt": "2020-12-04T08:33:34Z",
        "author": {
          "login": "Therzok"
        }
      },
      {
        "body": "Yes, there are no relevant exceptions. This now feels like thread starvation, main node grows to 60-70 threadpool threads with none of them doing any work, worker node grows to 30-50 threads as well and it's unclear why nothing is progressing. Looks like a deadlock but it can randomly unlock and finish, which takes anywhere from 14 seconds to 4-5 minutes.",
        "createdAt": "2020-12-07T16:52:09Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "Turns out that the slowdown mentioned here is primarily because of different reasons. It is 29 seconds vs. 19 seconds, but it doesn't explain the 6 minutes delay.\r\n\r\nThe 6 minutes delay happens on Mono, but not on Dotnet runtime. I am now suspecting a Mono bug.\r\n\r\nLet's keep this issue for the optimization of Directory.Exists() and such, but I'll open a separate bug for the actual slowdown (deadlock?) in Mono. I am also seeing thread starvation and up to 70 threads starting and doing nothing for some reason.",
        "createdAt": "2020-12-11T05:36:04Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "Team Triage: @KirillOsenkov, Could you please update the status of this bug? Is there anything in MSBuild to fix? Do you still intend to work on this issue?",
        "createdAt": "2021-01-21T13:10:14Z",
        "author": {
          "login": "AR-May"
        }
      },
      {
        "body": "This is still a bug in MSBuild. At the minimum, we need to bring back the quick check for \\ I mentioned in:\r\nhttps://github.com/dotnet/msbuild/issues/5925#issuecomment-738461906\r\n\r\nHowever digging into MSBuild performance on Mac/Mono I have uncovered several more performance issues which I'll be filing separately. \r\n\r\nIf I have time I can try and fix this issue a bit later. But certainly a perf bug that doesn't manifest on Windows because it's ifdef'ed out.\r\n\r\nThe larger theme is that MSBuild performance on Mac hasn't been investigated as thoroughly as on Windows and is an area full of low-hanging fruit such as this issue. The more I dig the more I find.",
        "createdAt": "2021-01-22T00:40:30Z",
        "author": {
          "login": "KirillOsenkov"
        }
      }
    ]
  }
}