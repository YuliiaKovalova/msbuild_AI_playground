{
  "number": 5881,
  "title": "Copy task should support copying a directory easily",
  "body": "Copy task doesn't make it easy to copy the entire directory, it forces you to mess with wildcards etc. and it's gnarly\r\n\r\nWe should consider adding a new SourceFolder parameter on the Copy task that, if specified, pre-populates the SourceFiles with the entire directory. Of course SourceFolder and SourcesFiles should be mutually exclusive.",
  "state": "CLOSED",
  "createdAt": "2020-11-13T07:58:09Z",
  "updatedAt": "2024-02-26T02:07:17Z",
  "closedAt": "2023-12-14T13:28:48Z",
  "author": {
    "login": "KirillOsenkov"
  },
  "labels": [
    "help wanted",
    "Feature Request",
    "Area: Tasks",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "jrdodds"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "[Microsoft.Build.Artifacts](https://github.com/microsoft/MSBuildSdks/tree/master/src/Artifacts) can do this, as a workaround.  Still agree it would be nice for the copy to be built in and something like Microsoft.Build.Artifacts would just call it.",
        "createdAt": "2020-11-13T16:36:18Z",
        "updatedAt": "2020-11-13T16:36:18Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "Ugh, we should really fix this. Copying some files into a directory and preserving the directory structure is super painful.",
        "createdAt": "2021-03-19T02:02:55Z",
        "updatedAt": "2021-03-19T02:02:55Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "I'm imagining two new properties, SourceRoot and DestinationRoot, that when set, act as the corresponding roots, and the relative path from SourceRoot is preserved for each file.",
        "createdAt": "2021-03-19T02:04:26Z",
        "updatedAt": "2021-03-19T02:04:26Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "This way this won't be a breaking change.",
        "createdAt": "2021-03-19T02:04:37Z",
        "updatedAt": "2021-03-19T02:04:37Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "or maybe just `SourceRoot` and `PreserveRelativePaths` combined with the existing `DestinationFolder`.",
        "createdAt": "2021-03-19T02:05:23Z",
        "updatedAt": "2021-03-19T02:05:23Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "When I eventually come back here, here's how to do it:\r\n\r\n```\r\n<Project DefaultTargets=\"Copy\">\r\n\r\n  <PropertyGroup>\r\n    <SourceDir>C:\\temp\\a</SourceDir>\r\n    <DestinationDir>C:\\temp\\b</DestinationDir>\r\n  </PropertyGroup>\r\n\r\n  <Target Name=\"Copy\">\r\n\r\n    <!-- \r\n    PITFALL: if this runs during evaluation, the files might not exist on disk yet.\r\n    So ensure this runs during execution and the glob is expanded immediately\r\n    before the actual copy.\r\n    -->\r\n    <ItemGroup>\r\n      <SourceFile Include=\"$(SourceDir)\\**\\*\" />\r\n      <DestinationFile Include=\"@(SourceFile->'$(DestinationDir)\\%(RecursiveDir)%(Filename)%(Extension)')\" />\r\n    </ItemGroup>\r\n\r\n    <Copy SourceFiles=\"@(SourceFile)\"\r\n          DestinationFiles=\"@(DestinationFile)\"\r\n          SkipUnchangedFiles=\"true\" />\r\n  </Target>\r\n\r\n</Project>\r\n```",
        "createdAt": "2021-03-19T02:33:49Z",
        "updatedAt": "2021-03-20T00:03:24Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "Another issue is that with the current approach you can't copy symbolic links from a source to a destination directory, the link gets resolved and the actual file copied instead of the symlink.\r\n\r\nThis will probably need to wait for BCL support (https://github.com/dotnet/runtime/issues/24271) though.",
        "createdAt": "2021-03-19T08:57:35Z",
        "updatedAt": "2021-03-19T08:57:35Z",
        "author": {
          "login": "akoeplinger"
        }
      },
      {
        "body": "@KirillOsenkov did you try [Microsoft.Build.Artifacts](https://github.com/microsoft/MSBuildSdks/tree/master/src/Artifacts)?",
        "createdAt": "2021-03-19T16:00:38Z",
        "updatedAt": "2021-03-19T16:00:38Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "No, I\u2019m using vanilla MSBuild.",
        "createdAt": "2021-03-19T16:03:12Z",
        "updatedAt": "2021-03-19T16:03:12Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "I just corrected the snippet I posted earlier to expand the globs during execution (inside the target), and not during evaluation. When it ran during evaluation the project may be evaluated too early, and the glob might not pick up the files which are copied later by another target. Expanding the glob from inside the target is more reliable.",
        "createdAt": "2021-03-20T00:10:39Z",
        "updatedAt": "2021-03-20T00:10:39Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "This works for me: https://stackoverflow.com/questions/119271/copy-all-files-and-folders-using-msbuild",
        "createdAt": "2022-07-07T11:17:17Z",
        "updatedAt": "2022-07-07T11:17:26Z",
        "author": {
          "login": "floreseken"
        }
      },
      {
        "body": "Task batching is idiomatic in MSBuild and the documentation of the Copy task includes an example of copying a directory. Speaking for myself, I don't find it 'gnarly'. But I do understand that MSBuild has a problem where many people have expectations of how MSBuild works and behaves that are very different from how MSBuild actually works and behaves. And I understand that, for various reasons, batching often falls into that gap.\r\n\r\nThis feature request is not about adding functionality that the `Copy` task currently lacks. It is about adding syntactic sugar to the `Copy` task. I'm not against syntactic sugar but I do have concerns about adding more parameters to the `Copy` task (which currently has 9 input parameters) especially when the parameters are not extending functionality.\r\n\r\nInstead of extending the `Copy` task, I would propose creating a new `CopyDir` task.\r\n\r\nLike `MakeDir` and `RemoveDir`, `CopyDir` would accept an `ItemGroup` of directories. `CopyDir` would also take a `DestinationFolder` and support an output `ItemGroup` of the directories copied (`CopiedDirectories`).\r\n\r\nThe `CopyDir` task would be a specialization of the `Copy` task and could be viewed as redundant, but it may succeed as even less 'gnarly' than extending the `Copy` task because it would be more focused conceptually and would have fewer parameters.",
        "createdAt": "2022-07-29T16:45:31Z",
        "updatedAt": "2022-07-29T16:56:45Z",
        "author": {
          "login": "jrdodds"
        }
      },
      {
        "body": "I personally don't see anything wrong with adding another parameter to `Copy`, because this is where people will go looking for it. \"Too many parameters\" is not an objective downside.\r\n\r\nA brand new `CopyDir` task is not discoverable. In fact, it will restore symmetry, since `DestinationFolder` already exists, so only makes sense to support `<Copy SourceFolder=\"A\" DestinationFolder=\"B\" />`.\r\n\r\nIn fact the danger with adding CopyDir is that people might already have their own custom/third-party CopyDir task, so adding the in-the-box one will mess with their builds and is a breaking change we can't afford. Whereas adding SourceFolder to Copy is not a breaking change.",
        "createdAt": "2022-07-29T17:09:20Z",
        "updatedAt": "2022-07-29T17:10:43Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "I disagree that \r\n> \"Too many parameters\" is not an objective downside.\r\n\r\nThere is general consensus that a function or class method should be limited in the number of arguments. The same principle applies here. But we can agree that we just see that differently and that, among all the possible trade-offs, it may be minor.\r\n\r\nSome of your points can be generalized as essentially that no new tasks should ever be added. I understand your comments are about adding a `CopyDir` task, but that's the larger implication. Any new task can be considered to be not discoverable, and any new task might be a conflict and a breaking change for someone. The breaking change issue is an important point because `UsingTask` elements don't override the same way as Properties.\r\n\r\nRelated to the re-design of the `Copy` task:\r\n\r\nFrom your description I assume you are envisioning `SourceFolder` as an `ITaskItem` and not an `ITaskItem[]`. Would specifying `<Copy SourceFolder=\"A\" DestinationFiles=\"B\" />` be an error?\r\n\r\nThe following would be accepted?\r\n```\r\n<Copy SourcesFiles=\"A\" DestinationFolder=\"B\" />\r\n<Copy SourcesFiles=\"A\" DestinationFiles=\"B\" />\r\n<Copy SourceFolder=\"A\" DestinationFolder=\"B\" />\r\n```\r\n\r\nAnd the following would be errors?\r\n```\r\n<Copy SourceFolder=\"A\" DestinationFiles=\"B\" />\r\n<Copy SourceFolder=\"A\" DestinationFolder=\"B\" DestinationFiles=\"C\" />\r\n<Copy SourceFolder=\"A\" SourcesFiles=\"B\" DestinationFiles=\"C\" />\r\n<Copy SourceFolder=\"A\" SourcesFiles=\"B\" DestinationFolder=\"C\" />\r\n```",
        "createdAt": "2022-07-29T18:16:17Z",
        "updatedAt": "2022-07-29T18:16:17Z",
        "author": {
          "login": "jrdodds"
        }
      },
      {
        "body": "@jrdodds You're taking things off-topic. The feedback is that the current behavior feels limited and counterintuitive. There is perhaps unfortunately a very opinionated suggested solution @KirillOsenkov brought up, but that should be fine; maintainers can take the solution or not.\r\n\r\n> There is general consensus that a function or class method should be limited in the number of arguments.\r\n\r\nDo you have data and actual numbers on this? This sounds like an opinion being framed as a universal truth. This response is starting to argue about the suggested solution rather than keeping the thread focused on the feedback.",
        "createdAt": "2022-07-29T18:26:04Z",
        "updatedAt": "2022-07-29T18:26:04Z",
        "author": {
          "login": "mikerochip"
        }
      },
      {
        "body": "Hi @mikerochip,\r\nThe feature request is to extend the Copy task and it has been tagged as 'needs-design' and 'up-for-grabs'. I see discussion of the design issues and trade-offs involved as being very on-topic. @KirillOsenkov has made several points about the design and I see that as helpful, constructive, and on-topic.\r\n\r\nRegarding the number of arguments to a function: No, not a universal truth but it is a long-standing coding guideline (at least in my understanding and experience). If you would like a citation that shows this is not a personal opinion of my own invention, here is a SonarQube rule for C#: [Methods should not have too many parameters](https://rules.sonarsource.com/csharp/RSPEC-107).\r\n\r\nMy apologies if my response came across as argumentative. My intent was to be constructive and to explore the issues. If I decide to take this issue or pass on this issue, I want to be clear about the changes.\r\nThanks",
        "createdAt": "2022-07-29T19:51:12Z",
        "updatedAt": "2022-07-29T19:51:12Z",
        "author": {
          "login": "jrdodds"
        }
      },
      {
        "body": "Appreciate the clarification @jrdodds . My only horse in this race is that I have to do this exact thing (copy source folder into target folder, maintain directory structure) about once every year and a half, and I forget how to do it every time, and google searching brings me here, so I watched this issue.\r\n\r\nI don't have a strong opinion on what the solution is, but I like @KirillOsenkov's solution. Yours would do the trick as well.\r\n\r\nMy main desire is getting to the point where this task is intuitive enough where I can just look at the Copy task docs and be on my way, rather than google search and end up in a years-long unresolved thread; I think I and many other folks on GitHub probably have experienced that more times than we want \ud83d\ude02 . At least for this issue there are options and this issue is effectively just that the current state isn't as ergonomic as it could be.",
        "createdAt": "2022-07-29T20:15:47Z",
        "updatedAt": "2022-07-29T20:15:47Z",
        "author": {
          "login": "mikerochip"
        }
      },
      {
        "body": "@mikerochip It may be a recent change (I haven't looked at the history) but [Example 2](https://docs.microsoft.com/en-us/visualstudio/msbuild/copy-task?view=vs-2022#example-2) in the Copy task documentation is what you need to copy a directory.",
        "createdAt": "2022-07-29T20:20:51Z",
        "updatedAt": "2022-07-29T20:20:51Z",
        "author": {
          "login": "jrdodds"
        }
      },
      {
        "body": "Invoking the `Copy` task with the `RecursiveDir` metadata is invoking task batching.\r\n```\r\n<Copy SourceFiles=\"@(MySourceFiles)\" DestinationFolder=\"$(DestDir)\\%(RecursiveDir)\" />\r\n```\r\n\r\nTask batching will invoke the `Copy` task for each 'batch'. I haven't tested but it seems likely, especially for a source directory with many sub-directories (and hence many unique `RecursiveDir` values each of which will be a separate batch), that an option that bypasses batching will perform the copy faster and more efficiently.\r\n\r\nThe `Copy` task has logic for retries and for parallelizing. After looking at the code, I think it is fair to say that factoring the existing `Copy` task into `Copy` and `CopyDir` tasks that share and re-use the existing logic is not a small effort. More to the point, it would be a larger effort than @KirillOsenkov's concept of adding a `SourceFolder` parameter on the `Copy` task. (So I have come around but for a rather different set of reasons. :grinning:)",
        "createdAt": "2022-08-05T22:56:38Z",
        "updatedAt": "2022-08-06T19:35:01Z",
        "author": {
          "login": "jrdodds"
        }
      },
      {
        "body": "# Design Proposal\r\n\r\nThis issue is currently tagged as 'needs-design'. This is a possible way that the feature request could be satisfied.\r\n\r\n## Background\r\n\r\nFor source and destination, the `Copy` task currently has the following parameters:\r\n\r\n| Name | Req or Opt | Type | Note |\r\n| :--- | :--- | :--- | :--- |\r\n| SourceFiles | Required | ITaskItem[] | |\r\n| DestinationFiles | Optional | ITaskItem[] | is an error if used with DestinationFolder;<br>is an error if not one-to-one with SourceFiles |\r\n| DestinationFolder | Optional | ITaskItem | is an error if used with DestinationFiles;<br>is expected to be a directory |\r\n\r\nThe following are accepted:\r\n\r\n```xml\r\n<Copy SourcesFiles=\"AFile;BFile\" DestinationFolder=\"BDirectory\" />\r\n<Copy SourcesFiles=\"AFile;BFile\" DestinationFiles=\"CFile;DFile\" />\r\n```\r\n\r\n:x: The following are errors:\r\n\r\n```xml\r\n<Copy SourcesFiles=\"AFile;BFile\" DestinationFolder=\"BDirectory\" DestinationFiles=\"CFile;DFile\" />\r\n<Copy SourcesFiles=\"AFile;BFile\" DestinationFiles=\"CFile\" />\r\n```\r\n\r\nSources and destinations are resolved into calls to either [`File.Copy`](https://docs.microsoft.com/en-us/dotnet/api/system.io.file.copy?view=net-6.0) or OS specific methods for creating either hard or symbolic links.\r\n\r\n## Enhancement to the Copy Task to copy Directories\r\n\r\n### Task Parameters\r\n\r\nAdd a `SourceFolders` parameter.\r\n\r\n`SourceFolders` will be an ITaskItem[] of folders to be copied to `DestinationFolder`. Like `DestinationFolder`, the members of `SourceFolders` will be expected to be directories.\r\n\r\n| Name | Req or Opt | Type | Note |\r\n| :--- | :--- | :--- | :--- |\r\n| SourceFiles | Optional | ITaskItem[] |  |\r\n| SourceFolders | Optional | ITaskItem[] | is an error if used with DestinationFiles |\r\n| DestinationFiles | Optional | ITaskItem[] | is an error if used with DestinationFolder;<br>is an error if not one-to-one with SourceFiles |\r\n| DestinationFolder | Optional | ITaskItem | is an error if used with DestinationFiles;<br>is expected to be a directory |\r\n\r\nIt would be an error if neither `SourceFiles` nor `SourceFolders` is provided to the task.\r\n\r\nA table of which parameters could be used together:\r\n\r\n|  | SourceFiles | SourceFolders | DestinationFiles | DestinationFolder |\r\n| --- | --- | --- | --- | --- |\r\n| **SourceFiles** | | :heavy_check_mark: Yes | :heavy_check_mark: Yes | :heavy_check_mark: Yes |\r\n| **SourceFolders** | :heavy_check_mark: Yes | | :x: No | :heavy_check_mark: Yes |\r\n| **DestinationFiles** | :heavy_check_mark: Yes | :x: No | | :x: No |\r\n| **DestinationFolder** | :heavy_check_mark: Yes | :heavy_check_mark: Yes | :x: No | |\r\n\r\nThe following would be accepted:\r\n\r\n```xml\r\n<Copy SourceFolders=\"ADirectory;BDirectory\" DestinationFolder=\"CDirectory\" />\r\n<Copy SourceFolders=\"ADirectory;BDirectory\" SourcesFiles=\"AFile;BFile\" DestinationFolder=\"CDirectory\" />\r\n```\r\n\r\n:x: The following would be errors:\r\n\r\n```xml\r\n<Copy SourceFolders=\"ADirectory;BDirectory\" DestinationFiles=\"CFile;DFile\" />\r\n<Copy SourceFolders=\"ADirectory;BDirectory\" DestinationFiles=\"CFile;DFile\" DestinationFolder=\"CDirectory\" />\r\n<Copy SourceFolders=\"ADirectory;BDirectory\" SourcesFiles=\"AFile;BFile\" DestinationFiles=\"CFile;DFile\" />\r\n```\r\n\r\nGiven directories `c:\\example\\target` and `c:\\example\\work`, the following `Copy` task would create a copy of the `target` directory under the `work` directory, i.e. `c:\\example\\work\\target`.\r\n\r\n```xml\r\n<Copy SourceFolders=\"c:\\example\\target\" DestinationFolder=\"c:\\example\\work\" />\r\n```\r\n\r\nThis matches the existing behavior of `SourceFiles` and `DestinationFolder` and allows for the `SourceFolders` and `SourceFiles` parameters to be used together.\r\n\r\nFor each directory in `SourceFolders`, it would be expected that each child of the directory would be copied with the same relative path, e.g. `c:\\example\\target\\foo\\bar.cs` would be copied to `c:\\example\\work\\target\\foo\\bar.cs`.\r\n\r\nThe following example shows how files and folders from a 'root' directory could be dynamically 'discovered' and copied without copying the 'root'.\r\n\r\n```xml\r\n<PropertyGroup>\r\n  <SourceRootDirectory>c:\\example\\target</SourceRootDirectory >\r\n</PropertyGroup>\r\n<ItemGroup Condition=\"Exists('$(SourceDirectory)')\">\r\n  <SrcDirectories Include=\"$([System.IO.Directory]::GetDirectories($(SourceRootDirectory)))\" />\r\n  <SrcFiles Include=\"$(SourceRootDirectory)\\*.*\" />\r\n</ItemGroup>\r\n<Copy SourceFolders=\"@(SrcDirectories)\" SourcesFiles=\"$(SrcFiles)\" DestinationFolder=\"c:\\example\\work\" />\r\n```\r\n\r\n### Internals\r\n\r\nNew validations and errors would need to be added.\r\n\r\nWhen `SourceFolders` is present, each directory in `SourceFolders` would be recursed and the files enumerated and added to the set of files to copy.\r\n\r\n:question: Should empty directories be copied?\r\n\r\nWith the following code, empty directories are not included and are not copied.\r\n\r\n```xml\r\n<ItemGroup>\r\n  <MySourceFiles Include=\"c:\\MySourceTree\\**\\*.*\"/>\r\n</ItemGroup>\r\n<Copy SourceFiles=\"@(MySourceFiles)\" DestinationFolder=\"$(DestDir)\\%(RecursiveDir)\" />\r\n```\r\n\r\nBut `SourceFolders` could easily include empty directories. Is this an enhancement? Or an unwanted change in behavior?\r\n",
        "createdAt": "2022-08-06T19:34:40Z",
        "updatedAt": "2022-08-06T19:34:40Z",
        "author": {
          "login": "jrdodds"
        }
      },
      {
        "body": "MSBuild Team triage: we like the proposal, @jrdodds.\r\n\r\n> \u2753 Should empty directories be copied?\r\n> \r\n> With the following code, empty directories are not included and are not copied.\r\n> \r\n> ```\r\n> <ItemGroup>\r\n>   <MySourceFiles Include=\"c:\\MySourceTree\\**\\*.*\"/>\r\n> </ItemGroup>\r\n> <Copy SourceFiles=\"@(MySourceFiles)\" DestinationFolder=\"$(DestDir)\\%(RecursiveDir)\" />\r\n> ```\r\n> \r\n> But `SourceFolders` could easily include empty directories. Is this an enhancement? Or an unwanted change in behavior?\r\n\r\n@Forgind and I lean toward \"yes, copy empty directories\". It feels more intuitive, and if it is desired but not done, it's a pain to recreate the behavior with manual directory creation. This may require a bit more effort in the implementation though so we can revisit if it's horrible.\r\n\r\nRemoving the `needs-design` label since it doesn't any more.\r\n\r\n@jrdodds are you interested in contributing the implementation?",
        "createdAt": "2022-10-13T16:22:17Z",
        "updatedAt": "2022-10-13T16:22:17Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Let's elaborate on `SourceFolder` vs. `SourceFolders`. What is the behavior if multiple source folders are specified? Is this really necessary? Can we achieve what we want with just a single SourceFolder? \r\n\r\nconcretely, if I have SourceFolders=\"C:\\A\\A1;C:\\B\\B1\" and the DestinationFolder=\"C:\\D\", what is the resulting layout on disk? C:\\D\\A1 and C:\\D\\B1 or are the contents of A1 and B1 copied directly to D?\r\n\r\nIf it's not immediately clear to me, it is probably a source of confusion to many.\r\n\r\nWhereas copying from a single source directory to a single destination directory is well defined and understood semantics used by all the tools like cp, copy, xcopy, etc. It means exactly \"take all contents of the source and copy it to the destination\".\r\n\r\nBasically I want <Copy SourceFolder=\"C:\\A\" DestinationFolder=\"C:\\B\" /> to work exactly like robocopy would (but no /MIR of course).",
        "createdAt": "2022-10-13T16:56:26Z",
        "updatedAt": "2022-10-13T16:56:26Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "> @jrdodds are you interested in contributing the implementation?\r\n\r\nYes. Thank you.",
        "createdAt": "2022-10-13T17:56:30Z",
        "updatedAt": "2022-10-13T17:56:30Z",
        "author": {
          "login": "jrdodds"
        }
      },
      {
        "body": "> ... if I have SourceFolders=\"C:\\A\\A1;C:\\B\\B1\" and the DestinationFolder=\"C:\\D\", what is the resulting layout on disk? C:\\D\\A1 and C:\\D\\B1 or are the contents of A1 and B1 copied directly to D?\r\n\r\n@KirillOsenkov Given\r\n\r\n```XML\r\n<Copy SourceFolders=\"C:\\A\\A1;C:\\B\\B1\" DestinationFolder=\"C:\\D\" />\r\n```\r\n\r\nThe result would be C:\\D\\A1 and C:\\D\\B1.\r\n\r\nTo quote from the proposal:\r\n\r\n> Given directories c:\\example\\target and c:\\example\\work, the following Copy task would create a copy of the target directory under the work directory, i.e. c:\\example\\work\\target.\r\n> \r\n> ```XML\r\n> <Copy SourceFolders=\"c:\\example\\target\" DestinationFolder=\"c:\\example\\work\" />\r\n> ```\r\n> \r\n> This matches the existing behavior of `SourceFiles` and `DestinationFolder` and allows for the `SourceFolders` and `SourceFiles` parameters to be used together.\r\n\r\nThe intent is to extend the current `Copy` task while maintaining the task's existing semantics and behavior. `SourceFiles` is a set of files; `SourceFolders` is a set of folders. Both sets of items will be copied to the `DestinationFolder`.\r\n\r\nThe current `Copy` task is already very unlike robocopy and supporting an ItemGroup for `SourceFolders` makes sense for MSBuild. The ItemGroup can be created with an `Exclude` or otherwise filtered before being used.\r\n\r\n`SourceFolders` can do something that a single source folder can't, which is that a single `Copy` invocation can pull from multiple sources as in the `SourceFolders=\"C:\\A\\A1;C:\\B\\B1\"` example.",
        "createdAt": "2022-10-13T20:48:02Z",
        "updatedAt": "2022-10-13T20:48:02Z",
        "author": {
          "login": "jrdodds"
        }
      },
      {
        "body": "OK and how do I achieve the semantics that I want? Copy all files and directories from Source to Destination? Again, if I understand your proposal correctly, it\u2019s highly unintuitive and unexpected.",
        "createdAt": "2022-10-13T22:12:47Z",
        "updatedAt": "2022-10-13T22:12:47Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "BTW this is only tangentially related, but I wrote a tool called ContentSync that copies one directory to another one incrementally (similar to robocopy /MIR), but if a file contents are identical it doesn't touch the file (it uses content hash instead of timestamps).\r\n\r\nhttps://github.com/KirillOsenkov/ContentSync",
        "createdAt": "2022-10-31T17:09:25Z",
        "updatedAt": "2022-10-31T17:09:25Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "@JaynieBai Please assign this issue to me. Thanks",
        "createdAt": "2023-03-09T14:29:04Z",
        "updatedAt": "2023-03-09T14:29:04Z",
        "author": {
          "login": "jrdodds"
        }
      },
      {
        "body": "Not an answer or solution to this feature request but here is something to help with the current \"super painful\" task of copying the content of a folder into another folder. \r\n\r\nGiven two properties, `SourceFolder` and `DestinationFolder`, that are both paths to directories, then the following will copy the contents, directories and files, of the directory in the `SourceFolder` property to the directory in the `DestinationFolder` property:\r\n\r\n```xml\r\n    <ItemGroup>\r\n      <FilesToCopy Include=\"$([MSBuild]::EnsureTrailingSlash('$(SourceFolder)'))**\\*.*\"/>\r\n    </ItemGroup>\r\n    <Copy SourceFiles=\"@(FilesToCopy)\" DestinationFolder=\"$([MSBuild]::EnsureTrailingSlash('$(DestinationFolder)'))%(RecursiveDir)\"/>\r\n```\r\n\r\nSave the above as a code snippet and, when you need to copy a folder, paste this snippet and replace the property names as needed.\r\n\r\nThe above code is essentially [Example 2](https://learn.microsoft.com/en-us/visualstudio/msbuild/copy-task?view=vs-2022#example-2) in the [Copy task](https://learn.microsoft.com/en-us/visualstudio/msbuild/copy-task?view=vs-2022) documentation. You can copy from the example.\r\n\r\nEither way, if you find it difficult, there is no need to write this from scratch every time.",
        "createdAt": "2023-05-08T02:13:13Z",
        "updatedAt": "2023-05-08T02:13:13Z",
        "author": {
          "login": "jrdodds"
        }
      },
      {
        "body": "I was asked to take a look at this from the design perspective now that we are getting close to an implementation, so here I am.\r\n\r\nFirst off, thank you for writing such a detailed spec comment/example @jrdodds - that made it very easy to work through the scenarios you had in mind. I agree with @KirillOsenkov that at first glance the subtleties of `SourceFiles` vs `SourceFolders` can be confusing - but I think keeping the Item-centric nature of MSBuild in mind helped me reason through the question in the same way that @jrdodds and @rainersigwald ended up at. MSBuild is already distinct from other tools in the way the the Copy task works, so we should clarify intent and behavior in the docs for the [Copy Task](https://learn.microsoft.com/en-us/visualstudio/msbuild/copy-task?view=vs-2022) when each version should be used.",
        "createdAt": "2023-06-19T15:12:13Z",
        "updatedAt": "2023-06-19T15:12:13Z",
        "author": {
          "login": "baronfel"
        }
      },
      {
        "body": "It seems unfortunate that you need to specify folders and files to copy separately, if you want to copy both. E.g., in the example above:\r\n```\r\n<Copy SourceFolders=\"ADirectory;BDirectory\" SourcesFiles=\"AFile;BFile\" DestinationFolder=\"CDirectory\" />\r\n```\r\n\r\nIt seems like it would be more uniform to have a single \"Sources\" list that contains either directories/folders or files, and tree copies the directories or individually copies the files, as appropriate. E.g.,\r\n\r\n```\r\n<Copy Sources=\"ADirectory;BDirectory;AFile;BFile\" DestinationFolder=\"CDirectory\" />\r\n```\r\n\r\nThis way, if you have an Item that contains a mix, you can use:\r\n```\r\n<Copy Sources=\"@(Paths)\" DestinationFolder=\"CDirectory\" />\r\n```\r\n",
        "createdAt": "2024-02-25T22:57:58Z",
        "updatedAt": "2024-02-25T22:57:58Z",
        "author": {
          "login": "BruceForstall"
        }
      },
      {
        "body": "@BruceForstall That would be nice but it's not a feasible option for the existing `Copy` task. Renaming the `SourceFiles` parameter to `Sources` would be a breaking change and the `DestinationFiles` parameter can't be used with directories.\r\n\r\nInternally the `Copy` task only copies files. The items passed to `SourceFolders` are expanded to the set of all files within the directory tree and is implemented as a pre-copy step that adds to the `SourcesFiles` collection.",
        "createdAt": "2024-02-26T00:23:09Z",
        "updatedAt": "2024-02-26T00:23:09Z",
        "author": {
          "login": "jrdodds"
        }
      },
      {
        "body": "Well, there's no need to rename `SourcesFiles` to `Sources`: we could simply add `Sources` as another option (that would probably be additive to any existing `SourceFiles` / `SourceFolders`).",
        "createdAt": "2024-02-26T00:39:02Z",
        "updatedAt": "2024-02-26T00:39:02Z",
        "author": {
          "login": "BruceForstall"
        }
      },
      {
        "body": "Sure, a separate `Sources` parameter could be added.\r\n\r\nAs a quick sketch:\r\n\r\n- `Sources` would require `DestinationFolder` and could not be used with `DestinationFiles`.\r\n- The implementation could be to iterate the `Sources` collection, test each item to determine if it is a file or folder, and add the item to either `SourceFiles` or `SourceFolders`.",
        "createdAt": "2024-02-26T02:07:16Z",
        "updatedAt": "2024-02-26T02:07:16Z",
        "author": {
          "login": "jrdodds"
        }
      }
    ]
  }
}