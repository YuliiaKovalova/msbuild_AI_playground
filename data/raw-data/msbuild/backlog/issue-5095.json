{
  "number": 5095,
  "title": "[Proposal] Make Directory.Build.props more discoverable",
  "body": "See https://github.com/microsoft/msbuild/issues/762 for a lot of good discussion on the pain people have with this file.\r\n\r\nI love this feature, but the \"magic\" involved in it turns people off. We have people on our team who want to explicitly ban the use of this feature because of it.\r\n\r\n# Proposal\r\nHave `dotnet new` and VS Create New Project scenarios place an empty Directory.Build.props file next to the project with a high level comment about what it does and then a link to more documentation. This way developers would at least be familiar with it even when they've never used it.",
  "state": "OPEN",
  "createdAt": "2020-01-30T02:11:05Z",
  "updatedAt": "2024-02-21T16:29:57Z",
  "closedAt": null,
  "author": {
    "login": "stevenbrix"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "I know this might not be the right repo for this, but since this is the MSBuild repo, I figured the team would have a vested interest in ensuring the success of their features :)\r\n\r\nDirectory.Build.props and binlogs need someone to stand on the top of Mt. Rainier and shout it out. \r\n\r\nI'm not sure what it's like for .NET devs who have been using and following MSBuild for decades, but those coming from other build systems have a hard time discovering these features.",
        "createdAt": "2020-01-30T02:54:21Z",
        "updatedAt": "2020-01-30T02:54:21Z",
        "author": {
          "login": "stevenbrix"
        }
      },
      {
        "body": "I have been working professionally with .NET for almost 15 years. I only last week learned about the existence of this file. It solves quite a few problems for me, including disabling the same 4 warnings for every build config for every project in my 50+ project solution. I think it would be really helpful to generate an empty file of this sort in the templates. Just like is/was being done with web.config och appsettings.json.",
        "createdAt": "2020-02-04T09:59:16Z",
        "updatedAt": "2020-02-04T09:59:16Z",
        "author": {
          "login": "memark"
        }
      },
      {
        "body": "+1 on the idea behind this proposal, to make the feature more discoverable. I think, however, the reason this is was not done before is that once you have such a file in a sub directory, you need to bridge all gaps to the root and manually include your parent directory.build.props. Once you have a gap that you don't bridge with an include, you may think the skip-parent directory.build.props applies down, but it may not, actually.",
        "createdAt": "2020-02-04T19:35:40Z",
        "updatedAt": "2020-02-04T19:35:40Z",
        "author": {
          "login": "danzil"
        }
      },
      {
        "body": "@danzil I agree it would be difficult, but then i would at least hope that maybe File->Add New Item in VS would include an option for Directory.Build.props (and Directory.Build.targets).\r\n\r\nBut it should be possible to tell in Visual Studio when adding a project to an existing .sln and correctly have Directory.Build.props import the one up the chain like you suggest. Likewise, the dotnet cli tools has commands for adding projects and modifying .sln files that should be able to do the same. \r\n\r\nThe workflow would be\r\n1. Create new project - Creates empty Directory.Build.props\r\n2. Add project to existing sln - updates Directory.Build.props to include the one above it (if the relative path is further down the tree)\r\n\r\nIf you're hand editing .sln files by hand then good luck, all bets are off ;)\r\n\r\nThis should only work for .sln files created with a certain version of Visual Studio, so that existing projects have the same behavior\r\n",
        "createdAt": "2020-02-05T01:29:12Z",
        "updatedAt": "2020-02-05T01:29:21Z",
        "author": {
          "login": "stevenbrix"
        }
      },
      {
        "body": "I agree. The tools need to do the right thing when dropping the file into the solution directory. At the very least, since this is a new project, the file could include a comment about this chaining that may be required.",
        "createdAt": "2020-02-05T19:13:19Z",
        "updatedAt": "2020-02-05T19:13:19Z",
        "author": {
          "login": "danzil"
        }
      },
      {
        "body": "I'd actually also like `dotnet new sln` to include a `Directory.Build.props` file.\r\nEspecially, I regard a solution as a collection of projects, meaning `Directory.Build.props` makes even more sense as I usually put those two properties into them:\r\n``` xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<Project>\r\n  <PropertyGroup Label=\"BasePath\">\r\n    <BaseOutputPath>$(MSBuildThisFileDirectory)bin\\</BaseOutputPath>\r\n    <BaseIntermediateOutputPath>$(MSBuildThisFileDirectory)obj\\$(MSBuildProjectName)\\</BaseIntermediateOutputPath>\r\n  </PropertyGroup>\r\n</Project>\r\n```\r\nin order to have a solution-level `bin` and `obj` folder. (ref.: [thnetii/repository-default](https://github.com/thnetii/repository-default/tree/master/DotNet-Solution-Directory))\r\n\r\nIn my default `Directory.Build.props` I also add the `Microsoft.CodeAnalysis.FxCopAnalyzers` package reference for best practice\r\n``` xml\r\n<PackageReference Include=\"Microsoft.CodeAnalysis.FxCopAnalyzers\" Version=\"2.9.8\" PrivateAssets=\"All\" />\r\n```",
        "createdAt": "2020-02-12T12:27:07Z",
        "updatedAt": "2020-02-12T12:31:48Z",
        "author": {
          "login": "fredrikhr"
        }
      },
      {
        "body": "If anything can we include the source of properties in diagnostic output?\r\n\r\nI just spent a long time tracking down a property that I could not find the definition for. Turns out it was defined in a Directory.Build.props above the solution. While the location of the file itself is stored in the log output, the source of the property wasn't and led to quite the headache.",
        "createdAt": "2020-10-30T03:21:01Z",
        "updatedAt": "2020-10-30T03:21:01Z",
        "author": {
          "login": "Cyberboss"
        }
      },
      {
        "body": "@Cyberboss, do you use binlogs from the command line? Unfortunately the ones collected in VS don't have information, but if you use command line builds, they have a \"Find in Files\" tab, which then lets you search for `<PropertyImLookingFor` to see where the property is set.\r\n\r\nI'm also fine with `Right Click->Add New Item` to contain MSBuild items. ",
        "createdAt": "2020-11-02T23:58:11Z",
        "updatedAt": "2020-11-02T23:58:11Z",
        "author": {
          "login": "stevenbrix"
        }
      },
      {
        "body": "I actually cant believe this file isnt showing in the solution explorer. Also pretty dumb that if this file is placed one folder outside of the solution directory, it is still read. ",
        "createdAt": "2022-02-11T15:55:32Z",
        "updatedAt": "2022-02-11T15:56:16Z",
        "author": {
          "login": "jonadv"
        }
      }
    ]
  }
}