{
  "number": 9671,
  "title": "MSBuild task hangs occasionally in Linux when invoking 'dotnet run'",
  "body": "## Steps to reproduce\r\nCreate a project, add a target that is invoked before target `BeforeBuild`. That task should then invoke `<Exec Command=\"dotnet run -c $(Configuration) -p ../OtherProject\" />`.\r\n\r\n## Expected  behavior\r\nI expect the command to run and finish, so that msbuild can continue executing targets.\r\n\r\n## Actual behavior\r\nMsbuild seemingly hangs, as if it cannot determine that `OtherProject` has exited. This only occurs in Linux, and only sometimes. It always hangs when I run the same task on the Ubuntu 1604 hosted agent in Azure DevOps. It sometimes hangs when I run the same task in Docker on my Windows desktop machine.\r\n\r\n## Environment data\r\nI am using the docker image `microsoft/dotnet:2.2-sdk` as a base for my own image. I have stripped it down to a bare minimum with `/bin/bash` as ENTRYPOINT, so that I have been able to run the commands manually.\r\n\r\n`dotnet --info` output:\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.104\r\n Commit:    73f036d4ac\r\n\r\nRuntime Environment:\r\n OS Name:     debian\r\n OS Version:  9\r\n OS Platform: Linux\r\n RID:         debian.9-x64\r\n Base Path:   /usr/share/dotnet/sdk/2.2.104/\r\n\r\nHost (useful for support):\r\n  Version: 2.2.2\r\n  Commit:  a4fd7b2c84\r\n\r\n.NET Core SDKs installed:\r\n  2.2.104 [/usr/share/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.2.2 [/usr/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.2 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.2.2 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nThe \"offending\" target looks like this in my .csproj:\r\n```\r\n<Target Name=\"GenerateBuilders\" BeforeTargets=\"BeforeBuild\">\r\n    <Message Text=\"Generating model builder classes...\" Importance=\"High\"/>\r\n    <Exec Command=\"dotnet run -c $(Configuration) -p ../Tracy.Core.Dal.ModelBuilderGenerator Builders.cs\" />\r\n    <Message Text=\"Finished.\" Importance=\"High\"/>\r\n  </Target>\r\n```\r\n\r\nThe project `Tracy.Core.Dal.ModelBuilderGenerator` is a custom project that generates code at runtime for other projects to consume. In the logs I can see all the output from the generator project. The very last output is right before `return 0;`.\r\n\r\nThe workaround I have now is to tag the target with `Condition=\"'$(BuildingInsideVisualStudio)' == 'true'\"` so that it'll work as expected during development time. During build, I publish the tool in my Docker file to an executable, which I run before the initial `dotnet` invocation.\r\n\r\n## Source code access\r\nAccess to source code etc can be arranged privately if needed.",
  "state": "OPEN",
  "createdAt": "2019-03-26T10:56:39Z",
  "updatedAt": "2024-02-09T21:26:15Z",
  "closedAt": null,
  "author": {
    "login": "jorgensigvardsson"
  },
  "labels": [
    "needs-triage"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Discussion"
  },
  "comments": {
    "nodes": [
      {
        "body": "Can you capture a dump when this happens? Do you see the dotnet run process running without stopping when this happens.",
        "createdAt": "2019-03-27T00:15:23Z",
        "updatedAt": "2019-03-27T00:15:23Z",
        "author": {
          "login": "livarcocc"
        }
      },
      {
        "body": "I only had bash, and three dotnet processes. I don't have a `ps ef` output right now, but can of course provide it on Monday.\r\n\r\nThe dotnet processes were all sleeping, as if they were waiting for something. Also, IIRC, the processes were grand parent, parent and child. I believe `dotnet run` was the child, but I am not 100% sure about that.\r\n\r\nThe project I run is just a simple console app that don't read from stdin, it only grabs some CLR metadata that it writes to a file.\r\n\r\nI did try to do a `dotnet publish` to generate a binary to execute instead, but it hung as well.",
        "createdAt": "2019-03-30T14:10:35Z",
        "updatedAt": "2019-03-30T14:10:35Z",
        "author": {
          "login": "jorgensigvardsson"
        }
      },
      {
        "body": "I just tried to reproduce the error in my own docker host, but I cannot reproduce the hanging `dotnet run` process. I can't get the access I need against the docker host in Azure DevOps, so I'm a bit clueless/powerless now.",
        "createdAt": "2019-04-02T08:14:44Z",
        "updatedAt": "2019-04-02T08:14:44Z",
        "author": {
          "login": "jorgensigvardsson"
        }
      },
      {
        "body": "We have the same problem. We noticed that the task actually completes successfully after 15 minutes.\r\n\r\nThe [DefaultNodeConnectionTimeout](https://github.com/dotnet/msbuild/blob/6e97308dc4652452833d8ee1ca1d0c1cf5d17ad3/src/Shared/CommunicationsUtilities.cs#L208) is 900 seconds -- possibly related?",
        "createdAt": "2024-01-18T16:19:16Z",
        "updatedAt": "2024-01-18T16:19:16Z",
        "author": {
          "login": "MartinKarlgrenIMI"
        }
      },
      {
        "body": "@ladipro /@rainersigwald is there any debugging information in MSBuild that could help diagnose if this is a node connection issue? ",
        "createdAt": "2024-01-18T16:22:34Z",
        "updatedAt": "2024-01-18T16:22:34Z",
        "author": {
          "login": "baronfel"
        }
      },
      {
        "body": "Setting  `MSBUILDNODECONNECTIONTIMEOUT=\"30000\"` in the environment does indeed reduce the waiting time, and the task finishes successfully after 30 seconds instead of 15 minutes.",
        "createdAt": "2024-01-18T18:26:42Z",
        "updatedAt": "2024-01-18T18:26:42Z",
        "author": {
          "login": "MartinKarlgrenIMI"
        }
      },
      {
        "body": "@MartinKarlgrenIMI, with `MSBUILDDEBUGCOMM` set to `1`, MSBuild will be dumping node communication log to files named `MSBuild_CommTrace_PID_*.txt` in the temp directory. Would it be possible to share these logs from a problematic build?",
        "createdAt": "2024-01-19T12:40:49Z",
        "updatedAt": "2024-01-19T12:40:49Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "@ladipro, sure, files below.\r\n(This was a build with a 30000 ms timeout, I noticed that in the *_1794.txt file the timeout is hit for one thread.)\r\n\r\n[MSBuild_CommTrace_PID_1794.txt](https://github.com/dotnet/sdk/files/14000580/MSBuild_CommTrace_PID_1794.txt)\r\n[MSBuild_CommTrace_PID_1767.txt](https://github.com/dotnet/sdk/files/14000581/MSBuild_CommTrace_PID_1767.txt)\r\n[MSBuild_CommTrace_PID_1709.txt](https://github.com/dotnet/sdk/files/14000582/MSBuild_CommTrace_PID_1709.txt)\r\n[MSBuild_CommTrace_PID_1670.txt](https://github.com/dotnet/sdk/files/14000583/MSBuild_CommTrace_PID_1670.txt)\r\n",
        "createdAt": "2024-01-21T08:29:02Z",
        "updatedAt": "2024-01-21T08:29:02Z",
        "author": {
          "login": "MartinKarlgrenIMI"
        }
      },
      {
        "body": "It looks like `ToolTask` doesn't receive the `Process.Exited` notification if the tool process is `dotnet build` / `dotnet run` which creates a new OOP node process. Or rather, it receives it only after the node process has exited.",
        "createdAt": "2024-01-22T09:09:20Z",
        "updatedAt": "2024-01-22T09:09:20Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "Likely the same root cause as https://github.com/dotnet/sdk/issues/9452. Could be specific to AzDO environment.",
        "createdAt": "2024-01-22T09:21:28Z",
        "updatedAt": "2024-01-22T09:21:28Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "@MartinKarlgrenIMI can you please try passing the `--init` flag per the last couple of comments in https://github.com/dotnet/runtime/issues/27115 ?",
        "createdAt": "2024-01-22T09:31:11Z",
        "updatedAt": "2024-01-22T09:31:11Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "@ladipro unfortunately `dotnet run --init --project abc` didn't fix the 15-minute hang in my case.",
        "createdAt": "2024-02-09T01:26:18Z",
        "updatedAt": "2024-02-09T01:26:18Z",
        "author": {
          "login": "SeijiSuenaga"
        }
      },
      {
        "body": "> @ladipro unfortunately `dotnet run --init --project abc` didn't fix the 15-minute hang in my case.\r\n\r\n@SeijiSuenaga my understanding is that `--init` should be passed to docker, not dotnet. See https://docs.docker.com/engine/reference/commandline/container_run/#init",
        "createdAt": "2024-02-09T12:25:05Z",
        "updatedAt": "2024-02-09T12:25:05Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "@ladipro Ah, sorry.  Just tried that as well, but it still hung for 15 minutes.  (In my case, the hangs are happening in GitLab CI, so I tested it by enabling their `FF_USE_INIT_WITH_DOCKER_EXECUTOR` feature flag.)\r\n\r\nThat said, I did find a workaround for my particular scenario.  In case it helps anyone else, I found that my MSBuild target was only hanging when executing as part of `dotnet test`, not `dotnet build` for the same project.  So I adjusted my CI script to run `dotnet build` first, *then* `dotnet test`, and now it runs completely normally. \ud83e\udd14",
        "createdAt": "2024-02-09T21:22:13Z",
        "updatedAt": "2024-02-09T21:26:15Z",
        "author": {
          "login": "SeijiSuenaga"
        }
      }
    ]
  }
}