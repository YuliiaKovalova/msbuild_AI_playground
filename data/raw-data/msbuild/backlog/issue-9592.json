{
  "number": 9592,
  "title": "[Performance]: RAR is 1.8x slower in MSBuild.exe compared to dotnet build",
  "body": "There's a significant difference between Framework and Core MSBuild in the time taken up by the `ResolveAssemblyReference` when building OrchardCore.\r\n\r\nDetails:\r\n- Upstream OrchardCore at commit 2804ec773.\r\n- MSBuild 17.9 candidate (commit 5fcddc790 but unlikely to make a difference)\r\n- Command lines (after doing a restore and build):\r\n  - `dotnet build --no-restore /bl`\r\n  - `msbuild /m /bl`\r\n\r\n![image](https://github.com/dotnet/msbuild/assets/12206368/45149a44-ee0f-46fd-98d1-b7ad346d4e5b)\r\n\r\n## Expected output\r\n\r\n- Understand what makes MSBuild.exe slower. Are some of the optimizations introduced in 8.0 not kicking in?\r\n- Fix (or suggest a fix; depending on complexity) the perf gap.",
  "state": "CLOSED",
  "createdAt": "2024-01-04T11:23:33Z",
  "updatedAt": "2024-03-25T12:34:48Z",
  "closedAt": "2024-03-25T12:34:48Z",
  "author": {
    "login": "ladipro"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "YuliiaKovalova"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "After conducting an investigation, a couple of weak spots were identified:\r\n\r\n- A slow function call within mscorlib.SystemIO - Microsoft.IO.Redist was utilized to address this performance gap https://github.com/dotnet/msbuild/pull/9814.\r\n- TaskItem.CopyMetadataTo is slower in msbuild.exe due to the underlying system.collections.immutable - can we do anything here @rainersigwald ? \r\nUpdate: it was discussed offline - one of the potential strategy is to rethink the way we set metadata here\r\nhttps://github.com/dotnet/msbuild/blob/main/src/Tasks/AssemblyDependency/ReferenceTable.cs#L2674 \r\n\r\n![image](https://github.com/dotnet/msbuild/assets/95473390/2c6dc9be-185c-4408-81e7-aa879c1b9cad)\r\n\r\n- Invoking SystemState.FileExists in an executable is more costly due to underlying PInvoke operations.\r\n![image](https://github.com/dotnet/msbuild/assets/95473390/a8f8ce1a-0cbb-4ea7-befe-94fad0afccd8)\r\n\r\n\r\n**update** Running on amd64 gives a noticeable boost!\r\n![image](https://github.com/dotnet/msbuild/assets/95473390/6dc881c0-9d45-472f-84e5-7d6933b18b84)\r\n\r\n- LogResults invocation is very different in msbuild.exe, it goes through CentralForwardingLogger.EventSource_AnyEventRaised \r\n![image](https://github.com/dotnet/msbuild/assets/95473390/5706f22b-50d0-4503-8814-7319794ba0e3)\r\nThe idea that came to Rainer's mind is related to making logging async, because now it looks like a bottleneck in RAR.\r\nThe reason why it is implemented this way for a single node invocation:\r\nhttps://github.com/dotnet/msbuild/blob/67f702b535a02be05a696376883bd9cd6d576e38/src/Build/BackEnd/BuildManager/BuildParameters.cs#L320-L324\r\nhttps://github.com/dotnet/msbuild/blob/67f702b535a02be05a696376883bd9cd6d576e38/src/MSBuild/XMake.cs#L1428-L1433\r\nAfter enabling **MSBUILDLOGASYNC=1** we received an immediate perf boost! We have to decide on switching it by default.\r\n\r\n![image](https://github.com/dotnet/msbuild/assets/95473390/98ffa1cd-13ae-4fdb-bb03-cdd4874ace57)\r\n\r\n\r\n\r\nThe snapshot used for comparison:\r\n![image](https://github.com/dotnet/msbuild/assets/95473390/50f6c298-18d4-498f-9d80-0a75fa8e340b)\r\n",
        "createdAt": "2024-02-01T12:15:45Z",
        "updatedAt": "2024-03-12T17:47:51Z",
        "author": {
          "login": "YuliiaKovalova"
        }
      },
      {
        "body": "The investigation is done and conclusions are described above.\r\nThe potential work items is created for async logging + optimization for File traversal was applied.",
        "createdAt": "2024-03-25T12:34:48Z",
        "updatedAt": "2024-03-25T12:34:48Z",
        "author": {
          "login": "YuliiaKovalova"
        }
      }
    ]
  }
}