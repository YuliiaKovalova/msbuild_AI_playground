{
  "number": 5072,
  "title": "Solution metaproject builds in multiple phases, possibly missing projects on failure",
  "body": "### Problem description\r\nWhen a project in a solution fails to compile, `msbuild` stops despite the fact it can proceed with unrelated projects, like `devenv` does.\r\n\r\n### Steps to reproduce\r\n\r\nWe need a solution with 3 projects where 2nd depends on 1st, and 3rd is independent and fails to compile. Following is an example of such solution.\r\n\r\nDirectory contents:\r\n```\r\n/\r\n- 1.csproj\r\n- 2.csproj\r\n- 3.csproj\r\n- Complete.sln\r\n```\r\n1.csproj\r\n```xml\r\n<Project ToolsVersion=\"Current\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\r\n  <PropertyGroup>\r\n    <FileUpgradeFlags>\r\n    </FileUpgradeFlags>\r\n    <UpgradeBackupLocation>\r\n    </UpgradeBackupLocation>\r\n    <OldToolsVersion>2.0</OldToolsVersion>\r\n  </PropertyGroup>\r\n  <Target Name=\"Build\">\r\n    <Message Importance=\"High\" Text=\"Project 1\" />\r\n  </Target>\r\n</Project>\r\n```\r\n2.csproj\r\n```xml\r\n<Project ToolsVersion=\"Current\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\r\n  <PropertyGroup>\r\n    <FileUpgradeFlags>\r\n    </FileUpgradeFlags>\r\n    <UpgradeBackupLocation>\r\n    </UpgradeBackupLocation>\r\n    <OldToolsVersion>2.0</OldToolsVersion>\r\n  </PropertyGroup>\r\n  <Target Name=\"Build\">\r\n    <Message Importance=\"High\" Text=\"Project 2\" />\r\n  </Target>\r\n</Project>\r\n```\r\n3.csproj\r\n```xml\r\n<Project ToolsVersion=\"Current\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\r\n  <PropertyGroup>\r\n    <FileUpgradeFlags>\r\n    </FileUpgradeFlags>\r\n    <UpgradeBackupLocation>\r\n    </UpgradeBackupLocation>\r\n    <OldToolsVersion>2.0</OldToolsVersion>\r\n  </PropertyGroup>\r\n  <Target Name=\"Build\">\r\n    <Message Importance=\"High\" Text=\"Project 3\" />\r\n    <Error Text=\"Build failed\" />\r\n  </Target>\r\n</Project>\r\n```\r\nComplete.sln\r\n```\r\nMicrosoft Visual Studio Solution File, Format Version 12.00\r\n# Visual Studio Version 16\r\nVisualStudioVersion = 16.0.29709.97\r\nMinimumVisualStudioVersion = 10.0.40219.1\r\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"1\", \"1.csproj\", \"{AA88BE9A-5006-4CCE-8871-A67F413DBADF}\"\r\nEndProject\r\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"2\", \"2.csproj\", \"{BAF51480-4B90-454A-96F5-E63A05A486EF}\"\r\n    ProjectSection(ProjectDependencies) = postProject\r\n        {AA88BE9A-5006-4CCE-8871-A67F413DBADF} = {AA88BE9A-5006-4CCE-8871-A67F413DBADF}\r\n    EndProjectSection\r\nEndProject\r\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"3\", \"3.csproj\", \"{12C30CFB-7387-4CD2-81D4-87E14209C408}\"\r\nEndProject\r\nGlobal\r\n    GlobalSection(SolutionConfigurationPlatforms) = preSolution\r\n        Debug|x86 = Debug|x86\r\n    EndGlobalSection\r\n    GlobalSection(ProjectConfigurationPlatforms) = postSolution\r\n        {AA88BE9A-5006-4CCE-8871-A67F413DBADF}.Debug|x86.ActiveCfg = Debug|x86\r\n        {AA88BE9A-5006-4CCE-8871-A67F413DBADF}.Debug|x86.Build.0 = Debug|x86\r\n        {BAF51480-4B90-454A-96F5-E63A05A486EF}.Debug|x86.ActiveCfg = Debug|x86\r\n        {BAF51480-4B90-454A-96F5-E63A05A486EF}.Debug|x86.Build.0 = Debug|x86\r\n        {12C30CFB-7387-4CD2-81D4-87E14209C408}.Debug|x86.ActiveCfg = Debug|x86\r\n        {12C30CFB-7387-4CD2-81D4-87E14209C408}.Debug|x86.Build.0 = Debug|x86\r\n    EndGlobalSection\r\n    GlobalSection(SolutionProperties) = preSolution\r\n        HideSolutionNode = FALSE\r\n    EndGlobalSection\r\n    GlobalSection(ExtensibilityGlobals) = postSolution\r\n        SolutionGuid = {75E95C15-489D-4D3F-82CA-735FB7B88910}\r\n    EndGlobalSection\r\nEndGlobal\r\n```\r\n\r\nCommand line\r\n```\r\nmsbuild Complete.sln /p:Configuration=Debug /p:Platform=x86 /m\r\n```\r\n### Expected  behavior\r\nCompiles projects 1 and 2, fails project 3.\r\n\r\nRelevant part of output from **devenv**:\r\n```\r\n1>------ Build started: Project: 1, Configuration: Debug x86 ------\r\n2>------ Build started: Project: 3, Configuration: Debug x86 ------\r\n1>  Project 1\r\n2>  Project 3\r\n2>C:\\temp\\msbuild\\TestSolution\\Complete\\3.csproj(11,2): error : Build failed\r\n3>------ Build started: Project: 2, Configuration: Debug x86 ------\r\n3>  Project 2\r\n========== Build: 2 succeeded, 1 failed, 0 up-to-date, 0 skipped ==========\r\n```\r\n\r\n### Actual behavior\r\nCompiles projects 1, fails project 3. Project 2 isn't touched.\r\n\r\nRelevant part of output from **msbuild**:\r\n```\r\nBuild started 23.01.2020 11:10:38.\r\n     1>Project \"c:\\temp\\msbuild\\TestSolution\\Complete\\Complete.sln\" on node 1 (default targets).\r\n     1>ValidateSolutionConfiguration:\r\n         Building solution configuration \"Debug|x86\".\r\n     1>Project \"c:\\temp\\msbuild\\TestSolution\\Complete\\Complete.sln\" (1) is building \"c:\\temp\\msbuild\\TestSolution\\Complete\\1.cs\r\n       proj\" (2) on node 1 (default targets).\r\n     2>Build:\r\n         Project 1\r\n     2>Done Building Project \"c:\\temp\\msbuild\\TestSolution\\Complete\\1.csproj\" (default targets).\r\n     1>Project \"c:\\temp\\msbuild\\TestSolution\\Complete\\Complete.sln\" (1) is building \"c:\\temp\\msbuild\\TestSolution\\Complete\\3.cs\r\n       proj\" (3) on node 2 (default targets).\r\n     3>Build:\r\n         Project 3\r\n     3>c:\\temp\\msbuild\\TestSolution\\Complete\\3.csproj(11,5): error : Build failed\r\n     3>Done Building Project \"c:\\temp\\msbuild\\TestSolution\\Complete\\3.csproj\" (default targets) -- FAILED.\r\n     1>Done Building Project \"c:\\temp\\msbuild\\TestSolution\\Complete\\Complete.sln\" (default targets) -- FAILED.\r\n\r\nBuild FAILED.\r\n```\r\n\r\n### Environment data\r\n`msbuild /version` output:\r\n```\r\nMicrosoft (R) Build Engine version 16.4.0+e901037fe for .NET Framework\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n16.4.0.56107\r\n```\r\ndevenv: Microsoft Visual Studio 2019 Version 16.4.3\r\n\r\nOS info: Windows 10\r\n\r\n### Related\r\nProbably #3366\r\nMy question on StackOverflow: https://stackoverflow.com/questions/59876630/how-to-make-msbuild-to-not-stop-on-error-on-net-solution/59892250",
  "state": "CLOSED",
  "createdAt": "2020-01-24T12:53:06Z",
  "updatedAt": "2024-02-21T17:05:22Z",
  "closedAt": "2022-07-18T22:42:41Z",
  "author": {
    "login": "TymurGubayev"
  },
  "labels": [
    "needs-design",
    "Area: Solution (.sln)",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Backlog"
  },
  "comments": {
    "nodes": [
      {
        "body": "In your repro, your project 2 has a redundant solution-level dependency on project 1.\r\n\r\n```\r\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"2\", \"2.csproj\", \"{BAF51480-4B90-454A-96F5-E63A05A486EF}\"\r\n    ProjectSection(ProjectDependencies) = postProject\r\n        {AA88BE9A-5006-4CCE-8871-A67F413DBADF} = {AA88BE9A-5006-4CCE-8871-A67F413DBADF}\r\n    EndProjectSection\r\nEndProject\r\n```\r\n\r\nVisual Studio ignores this dependency when it creates its internal model of project dependencies, but MSBuild cannot (because MSBuild doesn't load all projects before it starts to build them).\r\n\r\nInside the solution metaproject MSBuild creates when building a solution, it builds the individual projects with\r\n\r\n```xml\r\n  <Target Name=\"Build\" Outputs=\"@(CollectedBuildOutput)\">\r\n    <MSBuild Projects=\"@(ProjectReference)\"\r\n            BuildInParallel=\"True\"\r\n            Properties=\"BuildingSolutionFile=true; CurrentSolutionConfigurationContents=$(CurrentSolutionConfigurationContents); SolutionDir=$(SolutionDir); SolutionExt=$(SolutionExt); SolutionFileName=$(SolutionFileName); SolutionName=$(SolutionName); SolutionPath=$(SolutionPath)\"\r\n            SkipNonexistentProjects=\"%(ProjectReference.SkipNonexistentProjects)\">\r\n      <Output TaskParameter=\"TargetOutputs\" ItemName=\"CollectedBuildOutput\" />\r\n    </MSBuild>\r\n  </Target>  </Target>\r\n```\r\n\r\nwhich [batches](https://docs.microsoft.com/visualstudio/msbuild/msbuild-batching) over `SkipNonexistentProjects`. In this case, it builds `SkipNonexistentProjects=False` first. One of those projects fails, so the next task in the target (the batch of the same target element with `SkipNonexistentProjects=Build`) does not run.\r\n\r\nI think this could be improved, possibly by teaching the MSBuild task to respect metadata for `SkipNonexistentProjects` and using that instead of the existing condition.",
        "createdAt": "2020-01-27T20:59:22Z",
        "updatedAt": "2020-01-27T20:59:22Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Why is there a difference in metadata?\r\n\r\nhttps://github.com/microsoft/msbuild/blob/8aa0b87c00c6f26a565cf5e10975769dad9f378b/src/Build/Construction/Solution/SolutionProjectGenerator.cs#L1023-L1038\r\n\r\nSo the idea is to force the engine to build the projects even though that's not \"the normal way\".\r\n\r\nBut is that right? Should we error on references to projects that don't exist? It's probably too late to change this since we silently accept them today.",
        "createdAt": "2020-01-27T21:11:40Z",
        "updatedAt": "2020-01-27T21:11:40Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald \r\n> In your repro, your project 2 has a redundant solution-level dependency on project 1.\r\n\r\nTo create the solution file I created a new blank solution in Visual Studio, added the 3 projects to it and set the dependency between projects 2 and 1. Could you please explain to me why is this solution-level dependency redundant? I don't see it specified anywhere else.\r\n",
        "createdAt": "2020-01-28T09:31:37Z",
        "updatedAt": "2020-01-28T09:31:37Z",
        "author": {
          "login": "TymurGubayev"
        }
      },
      {
        "body": "You\u2019re right; in the repro it\u2019s not really redundant because the projects don\u2019t have `ProjectReference`s (or the infrastructure to support them).\n\nIn real solutions, solution build dependencies are generally not required\u2014instead, references can be used, which order dependencies in both Visual Studio and command line MSBuild.",
        "createdAt": "2020-01-28T12:38:39Z",
        "updatedAt": "2020-01-28T12:38:39Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}