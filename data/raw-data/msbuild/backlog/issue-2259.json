{
  "number": 2259,
  "title": "Condition-false logging can throw because it doesn't short-circuit",
  "body": "Given a project that has conditions that can be fully evaluated without evaluating every expression within them because of the short-circuit nature of AND and OR in the condition expression language:\r\n\r\n```xml\r\n<Project xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\r\n  <Import Project=\"$([MSBuild]::GetDirectoryNameOfFileAbove($(NonExistentProperty), init.props))\\init.props\"\r\n          Condition=\"'true' == 'false' AND '$([MSBuild]::GetDirectoryNameOfFileAbove($(NonExistentProperty), init.props))' != ''\" />\r\n  <Target Name=\"Build\">\r\n    <Message Text=\"Build executed\"\r\n             Condition=\"'true' == 'false' AND '$([MSBuild]::GetDirectoryNameOfFileAbove($(NonExistentProperty), init.props))' != ''\"/>\r\n  </Target>\r\n</Project>\r\n```\r\n\r\nIt's ok for `$(NonExistentProperty)` to expand to the empty string, even though that would cause an error evaluating `GetDirectoryNameOfFileAbove`, because the evaluator doesn't need that side of the expression to know the correct answer. A more realistic instance of this is something like `Condition=\"'$(EnlistmentRoot)' != '' AND '$([MSBuild]::GetDirectoryNameOfFileAbove($(EnlistmentRoot), init.props))' != '' \"`.\r\n\r\nThe condition evaluator behaves correctly, but in some verbosities loggers will attempt to produce a string like `the condition {actual text from file} was evaluated as {text substituted with values}`, which attempts to run the right-hand side of the condition, which throws, failing the execution.\r\n\r\nThis has \"always\" been a problem (MSBuild 4 errors when executing the target from this test file), but is exacerbated by #2142, which causes the attempted full expansion of conditions on `<Import>` elements all the time. That is mitigated by #2225, so the increased problems now only occur when using the binary logger or opting into the logging behavior.",
  "state": "CLOSED",
  "createdAt": "2017-07-03T16:02:46Z",
  "updatedAt": "2024-02-21T17:18:17Z",
  "closedAt": "2017-07-14T20:53:01Z",
  "author": {
    "login": "rainersigwald"
  },
  "labels": [
    "bug",
    "regression",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "MSBuild 15.5"
  },
  "comments": {
    "nodes": [
      {
        "body": "## Workaround\r\nApply the short-circuit conditioning to a property, and test only the already-computed property in the condition:\r\n\r\n```xml\r\n<Project DefaultTargets=\"Build\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\r\n  <PropertyGroup>\r\n    <_ShouldImportInitProps>false</_ShouldImportInitProps>\r\n    <_ShouldImportInitProps Condition=\"'true' == 'false' AND '$([MSBuild]::GetDirectoryNameOfFileAbove($(NonExistentProperty), init.props))' != ''\">true</_ShouldImportInitProps>\r\n  </PropertyGroup>\r\n\r\n  <Import Project=\"$([MSBuild]::GetDirectoryNameOfFileAbove($(NonExistentProperty), init.props))\\init.props\"\r\n          Condition=\"'$(_ShouldImportInitProps)' == 'true'\" />\r\n  <Target Name=\"Build\">\r\n    <Message Text=\"Build executed\"\r\n             Condition=\"'$(_ShouldImportInitProps)' == 'true'\"/>\r\n  </Target>\r\n</Project>\r\n```",
        "createdAt": "2017-07-03T16:07:06Z",
        "updatedAt": "2017-07-03T16:07:06Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Moving to a later release:\r\n* Mitigated by #2225, so it only happens now for `/bl` builds.\r\n* Only affects property functions that error on bad arguments.\r\n* Has a workaround.",
        "createdAt": "2017-07-03T17:19:21Z",
        "updatedAt": "2017-07-03T17:19:21Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}