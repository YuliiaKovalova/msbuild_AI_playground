{
  "number": 1983,
  "title": "Wildcards do not match paths with .. in Remove at execution time",
  "body": "An xunit NuGet props file is injecting a Content item into our build via this mechanism:\r\n\r\n``` xml\r\n<ItemGroup>\r\n  <Content Include=\"$(MSBuildThisFileDirectory)..\\_common\\xunit.abstractions.dll\">\r\n    <Link>xunit.abstractions.dll</Link>\r\n    <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>\r\n    <Visible>False</Visible>\r\n  </Content>\r\n</ItemGroup>\r\n```\r\n\r\nThis is causing our build to fail because the xunit.abstractions dll is getting written to the output directory twice: once from an explicit NuGet reference, the other through this Content item.  As such I'd like to remove this Content item to unblock our build.  \r\n\r\nI feel like this should be easy to do using a Remove ItemGroup operation:\r\n\r\n``` xml\r\n<Target Name=\"RemoveDuplicateXUnitContent\">\r\n  <ItemGroup>\r\n    <Content Remove=\"**\\xunit.abstractions.dll\" />\r\n  </ItemGroup>\r\n</Target>\r\n```\r\n\r\nUnfortunately this isn't working.  The Target is executing and at a point in which the content is present yet it is not removed.  I've verified by digging through diagnostic logs and adding Message tasks before / after.  \r\n\r\nThe problem appears to be the wild card.  If I substitute in the actual full path then the Remove works:\r\n\r\n``` xml\r\n  <Content Remove=\"e:\\nuget\\xunit.runner.visualstudio\\2.2.0-beta4-build1194\\build\\net20\\..\\_common\\xunit.abstractions.dll\" />\r\n```\r\n\r\nWhat is going on here?  The wild card seems pretty straight forward yet I can't get it to match the injected Content item.  Tried a number of variations here and none seem to work:\r\n\r\n``` xml\r\n  <Content Remove=\"e:\\nuget\\**\\xunit.abstractions.dll\" />\r\n  <Content Remove=\"e:\\nuget\\xunit.runner.visualstudio\\2.2.0-beta4-build1194\\**\\xunit.abstractions.dll\" />\r\n```\r\n\r\n\r\n",
  "state": "CLOSED",
  "createdAt": "2017-04-17T04:18:54Z",
  "updatedAt": "2024-02-21T17:19:54Z",
  "closedAt": "2017-04-18T22:02:11Z",
  "author": {
    "login": "jaredpar"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Ping",
        "createdAt": "2017-04-18T16:02:55Z",
        "updatedAt": "2017-04-18T16:02:55Z",
        "author": {
          "login": "jaredpar"
        }
      },
      {
        "body": "Inside a target, the `Remove` operation expands its wildcard list and removes the individual found items from the list. Since the `Identity` of the included item includes `..\\`, it will never match a filesystem expansion, which will have bare identities.\r\n\r\nYou can remove this item by filtering the list on filename:\r\n\r\n```xml\r\n<Content Remove=\"@(Content)\" Condition=\"'%(Filename)%(Extension)' == 'xunit.abstractions.dll'\" />\r\n```\r\n\r\n@cdmihai I remember a bunch of `.` and `..` stuff around glob matching coming up when working on lazy item expansion, but I can't dig it up. Is this handled differently in an eval-time remove?\r\n",
        "createdAt": "2017-04-18T16:54:40Z",
        "updatedAt": "2017-04-18T16:54:40Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Yes, eval time removes behave differently (:cry:) and try to do path matching.\r\nHowever, we also made them project cone aware to satisfy CPS, so `<Content Remove=\"**\\xunit.abstractions.dll\" />` would still not catch `$(MSBuildThisFileDirectory)..\\_common\\xunit.abstractions.dll` because it's outside the project file cone. The specified remove glob is relative to the project file, so it will only match `xunit.abstractions.dll` files under `$(MSBuildThisFileDirectory)`\r\n\r\nPatterns that should work on eval time removes:\r\n\r\n`<Content Remove=\"e:\\nuget\\**\\xunit.abstractions.dll\" />`\r\n`<Content Remove=\"..\\**\\xunit.abstractions.dll\" />`",
        "createdAt": "2017-04-18T19:51:20Z",
        "updatedAt": "2017-04-18T19:53:25Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "Drat, if it works at eval time it should also work at exec time. Changed the title here to track that.",
        "createdAt": "2017-04-18T20:08:53Z",
        "updatedAt": "2017-04-18T20:08:53Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "#1122 tracks it as part of #1124 ",
        "createdAt": "2017-04-18T21:56:26Z",
        "updatedAt": "2017-04-18T21:57:12Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "Thanks @rainersigwald.  That appears to be the solution I was looking for.  I'm fine with this being closed out unless you all need this to track something else.  ",
        "createdAt": "2017-04-18T21:57:51Z",
        "updatedAt": "2017-04-18T21:57:51Z",
        "author": {
          "login": "jaredpar"
        }
      },
      {
        "body": "Closing this as a dupe of #1122.",
        "createdAt": "2017-04-18T22:02:11Z",
        "updatedAt": "2017-04-18T22:02:11Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "As we've played with this as a solution we've found a particular problem.  When re-building from Visual Studio the solution suggested here will actually cause the DLL to be deleted from the output directory.  This doesn't reproduce 100% of the time but does repro fairly regularly.  The setup seems to be:\r\n\r\n1. Build from a clean state\r\n1. Build a specific project, which would execute the `<Content Remove... />` target \r\n\r\nThe second or third time we do this, the `xunit.abstractions.dll` file will dissapear from our output directory.  No other output is affected by this. \r\n\r\nHard to get logs for this because it's from Visual Studio, not the command line.  Can take steps to grab the logs.  But before I embarked down that road I wanted to see if this behavior was somehow by unfortunate design. \r\n",
        "createdAt": "2017-05-17T22:19:10Z",
        "updatedAt": "2017-05-17T22:19:10Z",
        "author": {
          "login": "jaredpar"
        }
      },
      {
        "body": "Doesn't sound like unfortunate design, more like unfortunate accident. Does this repro from the command line as well?\r\n\r\n",
        "createdAt": "2017-05-18T16:48:57Z",
        "updatedAt": "2017-05-18T16:48:57Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "Have not seen it repro from the command line.  But we also haven't tried that at all.  It most often gets hit when we're in VS and \r\n\r\n1. fix a bug \r\n1. right click to run tests.  That in turn builds the project and then fires up xunit \r\n\r\nI will try a bit from the command line today and see if I can get it to repro \r\n",
        "createdAt": "2017-05-18T16:52:29Z",
        "updatedAt": "2017-05-18T16:52:29Z",
        "author": {
          "login": "jaredpar"
        }
      },
      {
        "body": "Sounds like https://github.com/Microsoft/msbuild/issues/1054 to me.",
        "createdAt": "2017-05-18T17:18:52Z",
        "updatedAt": "2017-05-18T17:18:52Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "Good call @jeffkl.  The discussion in that bug are exactly what we are seeing.  \r\n\r\nLooks like I could possibly work around this by adding the following condition to my target: `$(BuildProjectReferences)' != 'false'`.  Sound right? ",
        "createdAt": "2017-05-18T17:21:42Z",
        "updatedAt": "2017-05-18T17:21:42Z",
        "author": {
          "login": "jaredpar"
        }
      },
      {
        "body": "That might work.  When I investigated, the issue appears to be that we don't get all outputs when building inside Visual Studio.\r\n\r\nhttps://github.com/Microsoft/msbuild/blob/c6e1a3619db2cebc4ab268df1c093e631ae6e391/src/Tasks/Microsoft.Common.CurrentVersion.targets#L1674\r\nvs\r\nhttps://github.com/Microsoft/msbuild/blob/c6e1a3619db2cebc4ab268df1c093e631ae6e391/src/Tasks/Microsoft.Common.CurrentVersion.targets#L1718\r\n\r\nSince different targets run, different outputs are collected, and incremental clean deletes `Content` items.",
        "createdAt": "2017-05-18T20:03:38Z",
        "updatedAt": "2017-05-18T20:03:38Z",
        "author": {
          "login": "jeffkl"
        }
      }
    ]
  }
}