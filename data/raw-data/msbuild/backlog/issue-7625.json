{
  "number": 7625,
  "title": "Contention of Project Evaluation in parallel builds",
  "body": "### Issue Description\r\nProject Evaluation in parallel builds have contention causing evaluations of 20-30ms to take over 1000ms.\r\n\r\n### Steps to Reproduce\r\nCreate a solution with lots of small projects, enough to saturate your CPU.  I used 4 times CPU threads worth of projects.  The contents of each projects is not relevant as I used \"Clean\" target to do the least amount work.  I used nearly identical projects to remove variables.  Projects don't have P2P to maximize throughput. Nodereuse:false in all cases.\r\n\r\nCase 1:\r\nmsbuild /t:clean /bl /v:q\r\n\r\nCase 2:\r\nmsbuild /t:clean /bl /v:q /m\r\n\r\nUsed binlog to record results and set verbose to quiet to avoid console print out noise.  Observe the Project Evaluation times of all projects.\r\n\r\n### Data & Analysis\r\nThis image is the trace of a single node build (case 1). Observer that each evaluation time took a few 20-30ms, except for the initial project.\r\n![image](https://user-images.githubusercontent.com/19828377/168402862-275699b6-12ff-418e-805e-c0871f274b5d.png)\r\n\r\nThis image is the trace of a multi node build (case 2) Observer that first evaluation took the same time in case 1, once parallel nodes started, the time of first evaluation takes seconds.  Following subsequent project, their evaluation are faster.  Notice node 1 is also having slowdown.\r\n![image](https://user-images.githubusercontent.com/19828377/168402848-e84eaca7-c66a-4e21-a491-09d99d07b124.png)\r\n\r\n### Theory \r\nI theorize there is single threaded file cache service that handles file IO.  The file cache probably serializes the data back to the nodes while holding onto the lock, thus blocking other nodes from using it.  Node 0 is affected by the contention, so that disproves the \"new\" node cost.\r\nAlternative is an evaluation cache where  the lock is on the entire evaluation duration.\r\n",
  "state": "OPEN",
  "createdAt": "2022-05-14T00:49:21Z",
  "updatedAt": "2025-06-02T08:28:24Z",
  "closedAt": null,
  "author": {
    "login": "yuehuang010"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "backlog",
    "Area: Performance",
    "Partner request",
    "triaged"
  ],
  "comments": {
    "nodes": [
      {
        "body": "Thanks to \"msbuild /profileEvaluation\", I got a few more hints.\r\n\r\n![image](https://user-images.githubusercontent.com/19828377/180116405-ec517498-3de7-495f-8f56-5c2ac376ab38.png)\r\n\r\n$([Microsoft.Build.Utilities.ToolLocationHelper]::GetLatestSDKTargetPlatformVersion($(SDKIdentifier), $(SDKVersion))) takes 3-4ms warm and 180ms cold.  While the results are cached, there is a lock in RetrieveTargetPlatformList().\r\nSame thing with ToolLocationHelper::GetPlatformSDKLocation() as it calls RetrieveTargetPlatformList().\r\n\r\nThere is also a few instance of \"exists\" conditions that takes 4-6ms.  Hopefully those results are cached.",
        "createdAt": "2022-07-21T02:29:33Z",
        "author": {
          "login": "yuehuang010"
        }
      },
      {
        "body": "Disclaimer: not a maintainer, but afaik the [CachingFileSystemWrapper](https://github.com/dotnet/msbuild/blob/518c041f4511a6bc23eb40703b69a94ea46c65fd/src/Shared/FileSystem/CachingFileSystemWrapper.cs) is used for Exists evaluation.",
        "createdAt": "2022-07-21T04:10:14Z",
        "author": {
          "login": "Therzok"
        }
      },
      {
        "body": "Just thinking out loud, if the main MSBuild node could copy over its caches to the child nodes, then that would save load time.  ",
        "createdAt": "2022-07-21T23:22:07Z",
        "author": {
          "login": "yuehuang010"
        }
      },
      {
        "body": "@yuehuang010 Is this still active? How serious you think it is? What priority you would give it?",
        "createdAt": "2023-01-10T13:51:01Z",
        "author": {
          "login": "rokonec"
        }
      },
      {
        "body": "This is important if MSBuild wants to be used as a project system and\nintegrated into an IDE.  The perf makes it hard to scale up with many cores\nand large solutions.\n\nOn Tue, Jan 10, 2023 at 9:51 PM Roman Konecny ***@***.***>\nwrote:\n\n> @yuehuang010 <https://github.com/yuehuang010> Is this still active? How\n> serious you think it is? What priority you would give it?\n>\n> \u2014\n> Reply to this email directly, view it on GitHub\n> <https://github.com/dotnet/msbuild/issues/7625#issuecomment-1377316310>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AEXI5GOKAGR5DQ4ESH3CP7TWRVSM7ANCNFSM5V42NAUQ>\n> .\n> You are receiving this because you were mentioned.Message ID:\n> ***@***.***>\n>\n",
        "createdAt": "2023-01-10T15:36:39Z",
        "author": {
          "login": "yuehuang010"
        }
      },
      {
        "body": "> Just thinking out loud, if the main MSBuild node could copy over its caches to the child nodes\n\nOff topic but is there still discussion of the possibility of moving some nodes into the same process, where tasks were known to not assume their own current directory and environment block? Although, without more rearchitecture there would still be serialization costs, there would be other savings.",
        "createdAt": "2023-01-10T15:52:23Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "Without going too crazy, I think focusing on a simple problem of GetLatestSDKTargetPlatformVersion() is good enough.  Only have the initial node hold on to ToolLocationHelper data and other nodes just request them.\r\n\r\nOn the hand, I hear that the multi threaded MSBuild is making progress, perhaps that is good enough.",
        "createdAt": "2023-01-19T23:33:37Z",
        "author": {
          "login": "yuehuang010"
        }
      }
    ]
  }
}