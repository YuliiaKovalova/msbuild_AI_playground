{
  "number": 9216,
  "title": "[Bug]: Properties not set when both <TargetFramework> and <TargetFrameworks> in project",
  "body": "### Issue Description\n\nThis was reported against Grpc.Tools in https://github.com/grpc/grpc/issues/34306\r\n\r\nWhen a project contains both `<TargetFramework>` and `<TargetFrameworks>` then the properties defined in the NuGet package Grpc.Tools are not set (causing later problems).  When just one of `<TargetFramework>` and `<TargetFrameworks>` is present (either one) then the properties are set and the build succeeds as expected.\n\n### Steps to Reproduce\n\nHere is a simple project file to reproduce the problem:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <OutputType>Library</OutputType>\r\n    <ImplicitUsings>enable</ImplicitUsings>\r\n    <Nullable>enable</Nullable>\r\n\t\r\n    <!-- If just one of these is present then all is OK.\r\n\t If both are present then properties from Grpc.Tools are not set\r\n    -->\r\n    <TargetFrameworks>net6.0;net7.0</TargetFrameworks>\r\n    <TargetFramework>net7.0</TargetFramework>\r\n\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Grpc.Tools\" Version=\"2.58.0\" PrivateAssets=\"All\" />\r\n  </ItemGroup>\r\n  \r\n  <Target Name=\"PrintProps\" BeforeTargets=\"Build\">\r\n    <!-- Protobuf_PackagedToolsPath should be set in the Grpc.Tools NuGet package -->\r\n    <!-- Set OK if only one of \"TargetFrameworks\" or \"TargetFramework\" present, but NOT SET if both are present -->\r\n    <Message Importance=\"High\" Text=\"**** Protobuf_PackagedToolsPath = $(Protobuf_PackagedToolsPath)\" />\r\n  </Target>\r\n</Project>\r\n```\r\n\r\nRun with:\r\n`dotnet build`\r\n\n\n### Expected Behavior\n\nSuccessful (e.g. only `<TargetFramework>` set:\r\n```\r\nPS E:\\work\\grpc\\issues\\is34306> dotnet build\r\nMSBuild version 17.7.1+971bf70db for .NET\r\n  Determining projects to restore...\r\n  Restored E:\\work\\grpc\\issues\\is34306\\project.csproj (in 135 ms).\r\n  project -> E:\\work\\grpc\\issues\\is34306\\bin\\Debug\\net7.0\\project.dll\r\n  **** Protobuf_PackagedToolsPath = C:\\Users\\tonyn\\.nuget\\packages\\grpc.tools\\2.58.0\\tools\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:00:01.20\r\n```\r\n\n\n### Actual Behavior\n\nFailure when both set:\r\n```\r\nPS E:\\work\\grpc\\issues\\is34306> dotnet build\r\nMSBuild version 17.7.1+971bf70db for .NET\r\n  Determining projects to restore...\r\n  All projects are up-to-date for restore.\r\n  project -> E:\\work\\grpc\\issues\\is34306\\bin\\Debug\\net7.0\\project.dll\r\n  **** Protobuf_PackagedToolsPath =\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:00:03.82\r\n```\r\n\r\nNote: `Protobuf_PackagedToolsPath` has not been set above\r\n \n\n### Analysis\n\n_No response_\n\n### Versions & Configurations\n\nMSBuild version: 17.7.1+971bf70db\r\n\r\n(Also seen with other versions)\r\n",
  "state": "OPEN",
  "createdAt": "2023-09-13T08:51:10Z",
  "updatedAt": "2025-04-06T13:28:12Z",
  "closedAt": null,
  "author": {
    "login": "tonydnewell"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "backlog",
    "Feature: Warning Waves",
    "Priority:2",
    "triaged"
  ],
  "comments": {
    "nodes": [
      {
        "body": "When both `<TargetFramework>` and `<TargetFrameworks>`are defined,  Google.Protobuf.Tools.props are not imported which defines the property Protobuf_PackagedToolsPath\r\n\r\n![image](https://github.com/dotnet/msbuild/assets/26814373/ab44e9fd-d169-4a2f-a3a7-bd9378abca54)\r\n",
        "createdAt": "2023-09-19T07:14:35Z",
        "author": {
          "login": "JaynieBai"
        }
      },
      {
        "body": "Related with https://github.com/dotnet/msbuild/issues/7856",
        "createdAt": "2023-09-19T07:38:55Z",
        "author": {
          "login": "JaynieBai"
        }
      },
      {
        "body": "MSBuild triage: We do not recommend using both `<TargetFramework>` and `<TargetFrameworks>` in one project file. When both are defined, by design, build logic treats that project as being a single target build within a multi-targeted project.\r\n\r\nBecause it is not obvious, we should consider making a warning when both properties are detected within one project.",
        "createdAt": "2023-09-19T13:40:58Z",
        "author": {
          "login": "AR-May"
        }
      },
      {
        "body": "@rainersigwald @baronfel I am inclined to close this BUG as as design. We can't introduce new warning and I don't see enjought impact for creating analyzer.",
        "createdAt": "2024-02-01T11:03:07Z",
        "author": {
          "login": "rokonec"
        }
      },
      {
        "body": "I would hope that it'll be very easy to express a rule like \"if property X is defined, do not allow defining property Y\" in our analyzer system, and if it is I'd keep this, but I wouldn't build such a rule just for this probably.",
        "createdAt": "2024-02-22T22:52:30Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I am reproducing this when I have <TargetFrameworks> in Directory.Build.props and then having <TargetFramework> in the proj file",
        "createdAt": "2024-08-06T15:45:29Z",
        "author": {
          "login": "jonathan-busuttil"
        }
      },
      {
        "body": "@JaynieBai\n\n> Related with #7856?\n\nIt's not related in the sense that the issue is similar, No. Both of these issues stems from the same root cause of setting `TF` and `TFS` together but the actual problem is with how the `Restore` works and other is with how the `Build` works. Both are not doing the same thing with the same inputs are being specified.\n\n---\n\n@AR-May\n\n> When both are defined, by design, build logic treats that project as being a single target build within a multi-targeted project.\n\nThen the props file should have been imported and the property must've been set. But that's not the case here. The issue is that the NuGet generated imports has a `TF` conditional check for each `TF` in `TFS`. But `TF` is not set before NuGet generated props import, which leads to this error. This is what @JaynieBai meant that props were not imported when both `TF` and `TFS` are set.\n\n<details>\n<summary><h3>For Detailed Explanation, Click Here</h3></summary>\n\n#### With your project file (_or any project file declaring a NuGet Package with a build props_), we have 3 cases...\n\n#### Case 1: When only `TargetFramework` is set\n\nThe NuGet generated props file has import groups like this...\n\n```props\n  <ImportGroup Condition=\" '$(ExcludeRestorePackageImports)' != 'true' \">\n    <Import Project=\"$(NuGetPackageRoot)grpc.tools\\2.71.0\\build\\Grpc.Tools.props\" Condition=\"Exists('$(NuGetPackageRoot)grpc.tools\\2.71.0\\build\\Grpc.Tools.props')\" />\n  </ImportGroup>\n  <PropertyGroup Condition=\" '$(ExcludeRestorePackageImports)' != 'true' \">\n    <PkgGrpc_Tools Condition=\" '$(PkgGrpc_Tools)' == '' \">C:\\Users\\Nirmal\\.nuget\\packages\\grpc.tools\\2.71.0</PkgGrpc_Tools>\n  </PropertyGroup>\n```\n\nThe props file gets imported and all is well.\n\n---\n\n#### Case 2: When only `TargetFrameworks` is set\n\nThe NuGet generated props file has import groups like this...\n\n```props\n  <ImportGroup Condition=\" '$(TargetFramework)' == 'net481' AND '$(ExcludeRestorePackageImports)' != 'true' \">\n    <Import Project=\"$(NuGetPackageRoot)grpc.tools\\2.71.0\\build\\Grpc.Tools.props\" Condition=\"Exists('$(NuGetPackageRoot)grpc.tools\\2.71.0\\build\\Grpc.Tools.props')\" />\n  </ImportGroup>\n  <ImportGroup Condition=\" '$(TargetFramework)' == 'net8.0' AND '$(ExcludeRestorePackageImports)' != 'true' \">\n    <Import Project=\"$(NuGetPackageRoot)grpc.tools\\2.71.0\\build\\Grpc.Tools.props\" Condition=\"Exists('$(NuGetPackageRoot)grpc.tools\\2.71.0\\build\\Grpc.Tools.props')\" />\n  </ImportGroup>\n  <PropertyGroup Condition=\" '$(TargetFramework)' == 'net481' AND '$(ExcludeRestorePackageImports)' != 'true' \">\n    <PkgGrpc_Tools Condition=\" '$(PkgGrpc_Tools)' == '' \">C:\\Users\\Nirmal\\.nuget\\packages\\grpc.tools\\2.71.0</PkgGrpc_Tools>\n  </PropertyGroup>\n  <PropertyGroup Condition=\" '$(TargetFramework)' == 'net8.0' AND '$(ExcludeRestorePackageImports)' != 'true' \">\n    <PkgGrpc_Tools Condition=\" '$(PkgGrpc_Tools)' == '' \">C:\\Users\\Nirmal\\.nuget\\packages\\grpc.tools\\2.71.0</PkgGrpc_Tools>\n  </PropertyGroup>\n```\n\nMulti-Build triggers, each `TargetFramework` is passed into inner build invocation, the props file gets imported and all is well.\n\n---\n\n#### Case 3: When `TargetFrameworks` is set along with `TargetFramework`\n\nNow, here's the problem with Restore: When the `TargetFrameworks` property is present, the restore sees the project as multi-targeted and creates the same props/targets as seen in Case 2 with `TargetFramework` (`TF`) guard. However, the project file also has `TF` defined, in which the build sees the project as single-targeted as the check happens later in SDK's targets and will proceed as a regular build.\n\nNow, the NuGet-generated props are imported in the SDK's props (_specifically, in Common props_), which happens before the project file where `TF` is defined.\n\nCan you see where I'm going with this...?\n\nYep, the NuGet props are skipped during import because `TF` isn't defined yet, and the SDK doesn't think it's a multi-target project, yet. Later, when `TF` is defined in the project file, SDK sees it as single-target project, the NuGet targets are imported as per `TF` condition, but it\u2019s too late for the props.\n\n</details>\n\n### Solution\n\nOne way to fix this yourself, is to define your `TargetFramework` before the project file, specifically before the NuGet imports: i.e., either in Command-line or in `Directory.Build.props`. But for a permanent fix, I would suggest to the NuGet/SDK team to match the build logic to the restore logic: i.e., if `TF` is present in the project file body along with `TFS` (_could come from any-where_), then build should only see `TFS`, ignore the `TF` set in the body and warn that it is doing so. Similar to what we did with `MSBuildProjectExtensionsPath`.\n\n<details>\n<summary><h3>Code Changes</h3></summary>\n\n#### In Common props\n\n```props\n\t<!-- Before the MSBuild Project Extensions import -->\n\t<PropertyGroup>\n\t\t<_InitialTargetFramework>$(TargetFramework)</_InitialTargetFramework>\n\t</PropertyGroup>\n```\n\n#### In Common and SDK targets\n\n```targets\n\t<!-- Modify the `IsCrossTargetingBuild` logic in both Common and SDK targets -->\n\t<PropertyGroup Condition=\"'$(TargetFrameworks)' != '' and ('$(_InitialTargetFramework)' == '' or '$(TargetFramework)' == '')\">\n\t\t<IsCrossTargetingBuild>true</IsCrossTargetingBuild>\n\t</PropertyGroup>\n\n\t<!-- Add this to Common or SDK CrossTargeting targets -->\n\t<Target\n\t\tName=\"_CheckForInvalidTargetFrameworkInProjectBody\"\n\t\tBeforeTargets=\"Restore;Build;Clean;Publish;Pack;Test;VSTest\">\n\n\t\t<!-- This is a sample implementation. Ideally we use `NETSdkWarning` task with `ResourceName` parameter -->\n\t\t<Warning\n\t\t\tCondition=\"'$(TargetFramework)' != '$(_InitialTargetFramework)'\"\n\t\t\tText=\"Ignoring `TargetFramework` property set in project file. Using `TargetFrameworks` instead. Please remove `TargetFramework` property from project file.\"\n\t\t\tCode=\"NETSDK0010\" />\n\t</Target>\n```\n\n</details>\n\n**OR** We could write a Build Check for `TargetFramework(s)` properties but it won't work for MSBuild that does not have Build Checks or has it disabled.",
        "createdAt": "2025-04-06T13:22:38Z",
        "author": {
          "login": "Nirmal4G"
        }
      }
    ]
  }
}