{
  "number": 6299,
  "title": "RAR Code inspection for concurrency issues",
  "body": "As RAR task will be run concurrently in RAR service, we need to make sure that code is safe to execute this way - thread safety issues.",
  "state": "CLOSED",
  "createdAt": "2021-03-25T14:02:35Z",
  "updatedAt": "2024-02-21T14:14:04Z",
  "closedAt": "2021-04-16T08:11:37Z",
  "author": {
    "login": "rokonec"
  },
  "labels": [
    "Area: Tasks",
    "Area: Task: Resolve Assembly References (RAR)",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "rokonec"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Code was reviewed and no major concurrency issues has been found.\r\nAfter discussion with Dan and Mihai I have realized, that code in MSBuild is supposed to be and shall be written with following thread safety mode in mind:\r\n- class non static properties are NOT thread safe\r\n- static members (both private and public) must be safe to use from concurrent threads\r\n- MSBuild tasks could be run concurrently but each run of MSBuild tasks must use its own exclusive class instance\r\n\r\nTask concurrency is happening if following cases:\r\n- Between Task Yield and Reacquire MSBuild node could receive another project to work on and run it in parallel.\r\n- Visual Studio create multiple IBuildEngine instances and run them concurrently - mostly during design time builds.\r\n",
        "createdAt": "2021-03-25T15:19:31Z",
        "updatedAt": "2021-03-25T15:19:31Z",
        "author": {
          "login": "rokonec"
        }
      },
      {
        "body": "Following issues shall be considered and appropriate actions planned:\r\n- Some escape hatches are cached in static members but others are evaluated during each task execution. We have to find out if we support and/or if people requires to set different escape hatches for different tasks/targets/projects. TODO: discuss with Reiner once he is back. *[Resolution] After discussion with Rainer it seems that we do not support different escape hatches for different tasks/targets/projects. Reusable nodes can't support such scenarios anyway.*\r\n- AssemblyFoldersExResolver and AssemblyFoldersFromConfigResolver methods in its LazyInitialize method use single check which could results in multiple cache initialization. It now might become bigger issue when RAR node will possible start multiple RAR tasks at about same time. Lets find out, if this could be possible issue. We could implement some cheap check-lock-check or lock-check implementation without changes in IBuildEngine. *[Resolution] - Keep as is. These initialization are fast and due to underministic timing of preceding build tasks, the chance of double initialization is small.*",
        "createdAt": "2021-03-25T15:46:29Z",
        "updatedAt": "2021-04-16T08:11:26Z",
        "author": {
          "login": "rokonec"
        }
      },
      {
        "body": "I will follow up on VS run scenarios to be sure.",
        "createdAt": "2021-03-25T16:04:25Z",
        "updatedAt": "2021-03-25T16:04:25Z",
        "author": {
          "login": "rokonec"
        }
      }
    ]
  }
}