{
  "number": 2835,
  "title": "No error for Item update in target",
  "body": "Ran into this while creating a workaround to patch an existing target (https://github.com/dotnet/cli/issues/6397#issuecomment-347989664) and naively using the item update syntax inside a target to update the link metadata of an item.\r\nHowever, using the update syntax inside a target seems to update the metadata of all items, which is unexpected.\r\n\r\n### Steps to reproduce\r\n\r\nProject file\r\n```xml\r\n<Project DefaultTargets=\"PrintResults\">\r\n  <ItemGroup>\r\n    <SomeStaticItem Include=\"Item1\" SomeMeta=\"MetaVal1\" />\r\n    <SomeStaticItem Include=\"Item2\" SomeMeta=\"MetaVal2\" />\r\n    <SomeStaticItem Include=\"Item3\" SomeMeta=\"MetaVal3\" />\r\n\r\n    <SomeStaticItem Update=\"Item2\" SomeMeta=\"ChangedMetaVal2\" />\r\n  </ItemGroup>\r\n\r\n  <Target Name=\"CreateRuntimeUpdatedItems\">\r\n    <ItemGroup>\r\n      <SomeRuntimeItem Include=\"@(SomeStaticItem)\" />\r\n      <SomeRuntimeItem Update=\"Item2\" SomeMeta=\"ChangedMetaVal2\" />\r\n    </ItemGroup>\r\n  </Target>\r\n\r\n  <Target Name=\"PrintResults\" DependsOnTargets=\"CreateRuntimeUpdatedItems\">\r\n    <Message Importance=\"high\" Text=\"static item: %(SomeStaticItem.Identity): SomeMeta=%(SomeStaticItem.SomeMeta)\" />\r\n    <Message Importance=\"high\" Text=\"runtiime item:%(SomeRuntimeItem.Identity): SomeMeta=%(SomeRuntimeItem.SomeMeta)\" />\r\n  </Target>\r\n</Project>\r\n```\r\n\r\nCommand line\r\n```\r\ndotnet msbuild\r\n```\r\n### Expected  behavior\r\n\r\nError for `Update` syntax not being allowed inside targets\r\n\r\nor\r\n\r\n```\r\n  static item: Item1: SomeMeta=MetaVal1\r\n  static item: Item2: SomeMeta=ChangedMetaVal2\r\n  static item: Item3: SomeMeta=MetaVal3\r\n  runtiime item:Item1: SomeMeta=MetaVal1\r\n  runtiime item:Item2: SomeMeta=ChangedMetaVal2\r\n  runtiime item:Item3: SomeMeta=MetaVal3\r\n```\r\n\r\n### Actual behavior\r\n\r\n```\r\n  static item: Item1: SomeMeta=MetaVal1\r\n  static item: Item2: SomeMeta=ChangedMetaVal2\r\n  static item: Item3: SomeMeta=MetaVal3\r\n  runtiime item:Item1: SomeMeta=ChangedMetaVal2\r\n  runtiime item:Item2: SomeMeta=ChangedMetaVal2\r\n  runtiime item:Item3: SomeMeta=ChangedMetaVal2\r\n```\r\n\r\n### Environment data\r\n`dotnet msbuild /version` output: tested on 15.5.179.9764 and 15.6.12.27473 .\r\n\r\nOS info:\r\n\r\nIf applicable, version of the tool that invokes MSBuild (Visual Studio, dotnet CLI, etc): macOS 10.13.2, `dotnet` cli\r\n  ",
  "state": "OPEN",
  "createdAt": "2018-01-02T01:32:12Z",
  "updatedAt": "2024-04-24T21:24:12Z",
  "closedAt": null,
  "author": {
    "login": "dasMulli"
  },
  "labels": [
    "Breaking Change",
    "Feature: Warning Waves",
    "Area: Engine"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Consider for Next Major Version"
  },
  "comments": {
    "nodes": [
      {
        "body": "Looks like a duplicate of https://github.com/Microsoft/msbuild/issues/1618, but that should have been fixed long ago (by throwing an error on the not-actually-supported `Update`-inside-a-target syntax).\r\n\r\nIf you change your target to use syntax like https://github.com/Microsoft/msbuild/issues/1618#issuecomment-275691043, it should work.\r\n\r\nI repro the problem with 15.1.548.43366, so it looks like the error never worked :(",
        "createdAt": "2018-01-03T19:05:57Z",
        "updatedAt": "2018-01-03T19:05:57Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "yep the old syntax works perfectly, I assumed that since there was no `Update` metadata added it actually tried to update (which is exactly what's discussed on the linked issue).",
        "createdAt": "2018-01-03T20:49:44Z",
        "updatedAt": "2018-01-03T20:49:44Z",
        "author": {
          "login": "dasMulli"
        }
      },
      {
        "body": "(updated the issue a bit to focus on the error)",
        "createdAt": "2018-01-03T20:50:56Z",
        "updatedAt": "2018-01-03T20:50:56Z",
        "author": {
          "login": "dasMulli"
        }
      },
      {
        "body": "@rainersigwald I'm afraid adding the error now would break at least\r\nhttps://github.com/dotnet/sdk/blob/cb4cf799e0afd5a6c8e0630638f550b95e3eb35e/src/Tasks/Microsoft.NET.Build.Tasks/build/Microsoft.NET.ConflictResolution.targets#L47\r\nhttps://github.com/dotnet/sdk/blob/cb4cf799e0afd5a6c8e0630638f550b95e3eb35e/src/Tasks/Microsoft.NET.Build.Tasks/build/Microsoft.PackageDependencyResolution.targets#L450-L453\r\nhttps://github.com/dotnet/sdk/blob/cb4cf799e0afd5a6c8e0630638f550b95e3eb35e/src/Tasks/Microsoft.NET.Build.Tasks/build/Microsoft.PackageDependencyResolution.targets#L578-L580",
        "createdAt": "2018-01-05T18:57:27Z",
        "updatedAt": "2018-01-05T18:57:27Z",
        "author": {
          "login": "dasMulli"
        }
      },
      {
        "body": "@dasMulli Yup, looks like it. Unfortunately, that means we can't do this in a minor update as it'd be a breaking change.",
        "createdAt": "2018-01-05T18:59:19Z",
        "updatedAt": "2018-01-05T18:59:19Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald We should fix this in Dev16. \r\n\r\nBugs like these make msbuild very hard to use. If you want to avoid breaking changes please consider  introducing some compat switch that can be used to opt-in new behavior. \r\n",
        "createdAt": "2018-10-03T21:58:04Z",
        "updatedAt": "2018-10-03T21:58:04Z",
        "author": {
          "login": "tmat"
        }
      },
      {
        "body": "> it looks like the error never worked :(\r\n\r\nWas it  ever implemented? AFAICT, #1618 was closed because it was included in #1124 (another bug), not because it was fixed.",
        "createdAt": "2018-12-04T17:09:28Z",
        "updatedAt": "2018-12-04T19:11:43Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "Maybe we should consider making it actually work as one expects rather than erroring in Dev16? The examples shown above so far would not break. I am nervous as always about breaking changes, so we should search for more data on whether there are cases of an update on anything but the entire set, that are actually depending on their bug.",
        "createdAt": "2018-12-04T18:08:55Z",
        "updatedAt": "2018-12-04T18:08:55Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "@rainersigwald can we do something in the .NET 6 timeframe?",
        "createdAt": "2020-09-08T03:51:28Z",
        "updatedAt": "2020-09-08T03:51:28Z",
        "author": {
          "login": "davidfowl"
        }
      },
      {
        "body": "Looks like we missed 6.0 GA but can this be a candidate for a toolset update in a band release?",
        "createdAt": "2021-10-26T12:33:40Z",
        "updatedAt": "2021-10-26T12:33:40Z",
        "author": {
          "login": "clairernovotny"
        }
      },
      {
        "body": "@clairernovotny the nature of the breaking change makes that not seem like a great idea to me. We've found instances of this in basically all .NET repos as well as user projects. It's not clear to me that the benefit is worth the change, since it could be a subtle silent behavior change to presumably-working targets (after the authors worked around the bad behavior somehow to get it to meet their needs).",
        "createdAt": "2021-10-26T14:04:58Z",
        "updatedAt": "2021-10-26T14:04:58Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I don't know what we need to do about this bug, but we need to do something.",
        "createdAt": "2024-01-23T20:57:34Z",
        "updatedAt": "2024-01-23T20:57:34Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "How about emitting a warning here? \"Warning: 'Update' for item updates within targets does not have any effect and all items will be changed. See ...\"\r\n\r\nThis communicates to the author that the project file has some possibly unexpected behavior while not immediately breaking all builds (except for those with warnings as errors).",
        "createdAt": "2024-01-26T10:54:52Z",
        "updatedAt": "2024-01-26T10:54:52Z",
        "author": {
          "login": "dasMulli"
        }
      },
      {
        "body": "We consider adding a warning a breaking change, based on painful experience.\r\n\r\nThe best solution here is going to be a warning that users can opt into, which is why this is marked in the \"warning waves\" tag, which will be rolled up in the analyzers work that's underway (this makes sense for the early set #9630 IMO).",
        "createdAt": "2024-01-26T14:55:29Z",
        "updatedAt": "2024-01-26T14:55:29Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Instead of going the roundabout way, why not make the `Update` attribute work? At this point, it would be better than adding a warning when people expect it to work!",
        "createdAt": "2024-01-26T22:37:04Z",
        "updatedAt": "2024-01-26T22:37:04Z",
        "author": {
          "login": "Nirmal4G"
        }
      },
      {
        "body": "or make it work properly after users opt in",
        "createdAt": "2024-01-27T00:13:11Z",
        "updatedAt": "2024-01-27T00:13:11Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "If you do support an opt-in behavior change, also support an opt-in warning (maybe a common msbuild errors analyzer, since we've found a number of ways in msbuild to shoot yourself in the foot) so all instances can be identified and validated for the opt-in behavior change.\r\n\r\n@rainersigwald, sounds like even nowarn options are insufficient to consider automatic new warnings a non-breaking change... leaves me curious and sounds like a painful development impediment.",
        "createdAt": "2024-02-11T19:48:11Z",
        "updatedAt": "2024-02-11T19:50:41Z",
        "author": {
          "login": "JustinSchneiderPBI"
        }
      },
      {
        "body": "> If you do support an opt-in behavior change, also support an opt-in warning (maybe a common msbuild errors analyzer, since we've found a number of ways in msbuild to shoot yourself in the foot) so all instances can be identified and validated for the opt-in behavior change.\r\n> \r\n> @rainersigwald, sounds like even nowarn options are insufficient to consider automatic new warnings a non-breaking change... leaves me curious and sounds like a painful development impediment.\r\n\r\nIndeed it is painful! That's why we're investing a lot right now on a path forward which we're calling analyzers and tracking with https://github.com/dotnet/msbuild/issues?q=is%3Aissue+is%3Aopen+label%3A%22Feature%3A+Warning+Waves%22+.",
        "createdAt": "2024-02-12T20:11:14Z",
        "updatedAt": "2024-02-12T20:11:14Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> Instead of going the roundabout way, why not make the `Update` attribute work? At this point, it would be better than adding a warning when people expect it to work!\r\n\r\n> or make it work properly after users opt in\r\n\r\nIt would have to be opt-in since it's a confusing breaking behavior change otherwise. I'm not super opposed to that we'd need the warning when not opted in anyway, so let's get that then reevaluate.",
        "createdAt": "2024-02-12T20:12:36Z",
        "updatedAt": "2024-02-12T20:12:36Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "This issue reminds me of #8527. The MSB4120 warning was added then (#8581). And later its priority was lowered (#9228).",
        "createdAt": "2024-04-09T11:43:43Z",
        "updatedAt": "2024-04-09T11:43:43Z",
        "author": {
          "login": "mmarinchenko"
        }
      },
      {
        "body": "I'm more than ever convinced now that we need a mode where item updates in targets work as expected",
        "createdAt": "2024-04-09T16:20:15Z",
        "updatedAt": "2024-04-09T16:20:15Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "Stepped on this one this week because [the sentence in the docs is very subtly different](https://learn.microsoft.com/en-us/visualstudio/msbuild/item-element-msbuild?view=vs-2022#:~:text=This%20attribute%20is%20valid%20only%20if%20it%27s%20specified%20for%20an%20item%20in%20an%20ItemGroup%20that%20is%20not%20in%20a%20Target.) than the three previous ones. A reading comprehension failure, of course, just one that caused us a bit of an issue. Our specific use case was adding `<Pack>false</Pack>` to Content items added from Grpc.Core as it incorrectly added its DLLs to the `contentFiles` directory of some of our NuGet packages.",
        "createdAt": "2024-04-24T21:24:11Z",
        "updatedAt": "2024-04-24T21:24:11Z",
        "author": {
          "login": "cliffchapmanrbx"
        }
      }
    ]
  }
}