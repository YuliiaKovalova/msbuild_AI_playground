{
  "number": 282,
  "title": "Re-evaluate WeakReference code and testing strategy for Mono",
  "body": "We maintain a `WeakValueDictionary` as a project element cache, and `ProjectRootElementCache_Tests.AddEntryStrongReference` to test its behavior, including invoking the GC to cause references to be cleaned up.  But it looks like that's not sufficient on CoreCLR.\n\nIn fact, there are many tests that have a short-circuit like:\n\n``` C#\nif (NativeMethodsShared.IsMono)\n{\n    return; // \"Mono has conservative GC, does not collect everything immediately\"\n}\n```\n\nall of which should be considered.\n",
  "state": "OPEN",
  "createdAt": "2015-10-14T22:17:06Z",
  "updatedAt": "2024-02-21T16:39:01Z",
  "closedAt": null,
  "author": {
    "login": "rainersigwald"
  },
  "labels": [
    ".NET Core",
    "CoreCLR-test",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "This is related to #278 but we were able to avoid that one by deleting the class.\n",
        "createdAt": "2015-10-14T22:26:57Z",
        "updatedAt": "2015-10-14T22:26:57Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Interestingly, it looks like this isn't related to GC strategies in .NET Core. Removing the `if mono` check causes the test to pass even on core--which was the same problem that caused it to be disabled for desktop in #799.\n\nFor now I'm going to just ifdef out the test on Mono, allowing it to pass on other runtimes.\n",
        "createdAt": "2016-09-29T19:00:13Z",
        "updatedAt": "2016-09-29T19:00:13Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "This test is failing for me now on .NET Core after [retargeting to .NET Core 2.0](https://github.com/Microsoft/msbuild/issues/2706)",
        "createdAt": "2017-12-29T02:57:50Z",
        "updatedAt": "2017-12-29T02:57:50Z",
        "author": {
          "login": "dsplaisted"
        }
      },
      {
        "body": "The `Microsoft.Build.UnitTests.Logging.BuildEventArgTransportSink_Tests.TestShutDown` test is also failing for me on .NET Core 2.0.  It looks like it also has to do with weak references, and is already disabled for Mono, so I'm disabling it against this bug on .NET Core.",
        "createdAt": "2017-12-29T03:01:12Z",
        "updatedAt": "2017-12-29T03:01:12Z",
        "author": {
          "login": "dsplaisted"
        }
      }
    ]
  }
}