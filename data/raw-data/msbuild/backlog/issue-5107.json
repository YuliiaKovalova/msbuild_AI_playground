{
  "number": 5107,
  "title": "How to change code from one project for dependency project in C#?",
  "body": "ITNOA\r\n\r\nI have a question in [stackoverflow](https://stackoverflow.com/q/60061866/1539100) but I think this place can make better for get better answer to my question.\r\n\r\nI want to learn how should I change code behavior and segment from one project for one of dependency project in C#\r\n\r\nI think my question is ambiguous ,so I try to explain my question in another language and ecosystem.\r\n\r\nIn C++ We can write some library like below\r\n\r\n```\r\n// My library header file\r\n#ifndef MY_LIBRARY_H_\r\n#define MY_LIBRARY_H_\r\n\r\n#ifdef ML_HOOSHANG\r\nconstexpr bool TEST = true;\r\n#else\r\nconstexpr bool TEST = false;\r\n#endif\r\n\r\n#endif\r\n```\r\n\r\nIn this scenario if I have another project that wants to use top library, we can change behavior of top library like below\r\n\r\n```\r\n// Main.cpp this is another project\r\n\r\n#include <iostream>\r\n\r\n#define ML_HOOSHANG 1\r\n#include <MyLibrary.h>\r\n\r\nint main()\r\n{\r\n    cout << ::TEST == true ? \"Hoooray\" : \"Nooo\" << endl;\r\n}\r\n\r\n```\r\n\r\nAnd we see this result\r\n\r\n```\r\nHoooray\r\n```\r\n\r\nAnd if I want to see `Nooo` we easily can \u200d\u200d`#undef ML_HOOSHANG` in user library (the library make reference to `MyLibrary`.\r\n\r\nAnother mechanism in C++ for doing something between library and very popular mechanism in C++ community that define some constant in build stage ,for example in [CMake](https://stackoverflow.com/questions/9017573/define-preprocessor-macro-through-cmake) with `add_compile_definitions` , and it is very useful approach when we want to change some basic platform or environmental dependent behavior in dependency libraries of our project.\r\n\r\nnow I want some similar mechanism in C# and `msbuild` ecosystem to provide same functionality, for example I have many projects and libraries, that all of them reference to one specific our library with nuget mechanism. and I want different behavior of this library depend on each project and library. so my question is How do I do this?\r\n\r\nIf I want to show similar mechanism in C#, I can refer to [PCL mechanism](https://stackoverflow.com/questions/5238955/what-is-a-portable-class-library) in solution to multi target problem. or [netstandard library](http://gigi.nullneuron.net/gigilabs/multi-targeting-net-standard-class-libraries/) mechanism for multi targeting different behavior approach.\r\n\r\nMy problem is very similar to two top examples, except it is not multi target and those examples solving multi target problem, and I want to do something similar to what they did for solving multi target ,but different. I want to do something like what they did for solving multi target problem , for solving a problem similar to [`<DefineConstants>`](https://docs.microsoft.com/en-us/visualstudio/msbuild/when-element-msbuild?view=vs-2019#example) in [msbuild](https://docs.microsoft.com/en-us/visualstudio/msbuild/msbuild-reference?view=vs-2019) one project from another project that depend on it.\r\n\r\nHow do I do this?\r\n\r\nHow to create nuget package that have multiple output depend on multi define constants value? and how to [package reference](https://docs.microsoft.com/en-us/nuget/consume-packages/package-references-in-project-files) in `csproj` to another `nuget` depend on constatns?\r\n\r\nThanks a lot",
  "state": "CLOSED",
  "createdAt": "2020-02-05T03:37:31Z",
  "updatedAt": "2024-02-21T17:05:11Z",
  "closedAt": "2020-02-10T21:37:00Z",
  "author": {
    "login": "soroshsabz"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "The output of a .NET process is a single build artifact that is consumed in binary form by other projects. It's more analogous to a .lib or .dll than it is to a header-based include. As a result, there's no way to change the behavior of a library from its consumer. You would have to change the build of the producer to have multiple outputs with different behaviors--but in general I'd recommend not doing this if you can avoid it, in favor of runtime behavior flags.",
        "createdAt": "2020-02-10T21:37:00Z",
        "updatedAt": "2020-02-10T21:37:00Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}