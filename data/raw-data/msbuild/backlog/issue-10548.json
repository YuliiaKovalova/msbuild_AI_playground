{
  "number": 10548,
  "title": "BuildCheck NET 10.0 investments",
  "body": "### Context\n\nIn net 9.0 we delivered initial preview of BuildCheck feature. \n * Spec: https://github.com/dotnet/msbuild/blob/main/documentation/specs/BuildCheck/BuildCheck.md\n * Work track:  https://github.com/orgs/dotnet/projects/373\n\nThis item captures high level thinking of continuation of that work in net 10.0 - which will aim for increased adoption and improved usability based on the collected feedback and data.\n\n### Priority bugs\n - [x] https://github.com/dotnet/msbuild/issues/11209\n\n### Suggested areas of investments\n\nBased on team discussion and voting we came up with following areas (in aproxiate priority order):\n\n\n - [ ] Dogfooding (P'0')\n    - idea: use VS feature flagging to test run BuildChecks on subset of users (even just internals) + this can be used to get perf data\n    - [ ] https://github.com/dotnet/msbuild/issues/10726\n - [ ] Telemetry / data collection (usage, performance and failures data collection)\n    - [x] https://github.com/dotnet/msbuild/issues/10634 \n - [ ] UX investments (p1)\n   - UX for users [ ] https://github.com/dotnet/msbuild/issues/10727\n     - VS and VS Code usability and opt-in\n     - CLI and VS diagnostics usability (unifying the experience with native diagnostics)\n   * UX for extensibility authors\n     - templates, debuggability story\n - [ ] Performance (tracing, measurments, tunning; DTB and full (CI) build PoV) (P1)\n   - #9829 \n - [ ] OM and API concepts (P1/P2)\n    - scoping, locations\n    - versioning (ability to run analyzers compiled against older V of API to be runnable in newer MSBuild)\n - [ ] Built-in Rules - should be reactive on community reactions\n   - \\+ continuation of https://github.com/dotnet/msbuild/issues/9630:\n     - [x] #9880 \n     - [x] #9882 \n     - [ ] #9884 \n     - [x] #9888 \n     - [ ] #9889 \n     - [ ] #9891 \n     - [ ] #9892\n   - \\+ Adopt some security check ideas:\n     - [x] Untrusted loacation check\n     - [ ] Common targets (or any) task overwriten\n     - [ ] Imports from unexpected locations\n - [ ] OM and API enriching - should be reactive mode\n    - exposing of additional engine data\n - [ ] Configuration V2 (P3)\n   - guidelinces + guardrails\n   - support for native msbuild diagnostics\n   - unification with Roslyn parser?\n - [ ] Localization (priority: ?)\n   - here we should ask Roslyn team what was their timeline on localization\n   - MSFT policy is that products should be localized\n   - inbox checks localization is a P1\n   - for extensibility we can take some inspiration from Tasks localization\n\n\n\n\n",
  "state": "OPEN",
  "createdAt": "2024-08-22T10:22:12Z",
  "updatedAt": "2025-06-02T08:30:50Z",
  "closedAt": null,
  "author": {
    "login": "JanKrivanek"
  },
  "milestone": {
    "title": ".NET 10"
  },
  "assignees": {
    "nodes": []
  },
  "labels": [
    "triaged",
    "Area: BuildCheck",
    "10.0"
  ],
  "comments": {
    "nodes": [
      {
        "body": "Another area: \n* [ ] Replay improvements.\n  * ability to mount new custom checks to the replay\n  * ability to specify custom editorconfig to tune the level of checking\n\nThis can possibly be considered a subitem of the `UX for extensibility authors`",
        "createdAt": "2024-09-03T18:38:46Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "Allow `BuildCheck`s to be published to and consumed from an SDK (on disk/NuGet) package.",
        "createdAt": "2025-04-06T08:39:09Z",
        "author": {
          "login": "Nirmal4G"
        }
      },
      {
        "body": "> Allow `BuildCheck`s to be published to and consumed from an SDK (on disk/NuGet) package.\n\nDoesn't that work already, by invoking the `[MSBuild]::RegisterBuildCheck` function from a props file in the package?  See [Microsoft.Build.Templates](https://www.nuget.org/packages/Microsoft.Build.Templates) and the documentation that was added in <https://github.com/dotnet/msbuild/pull/11053>.",
        "createdAt": "2025-04-06T09:48:09Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "Not a fan of `[MSBuild]::RegisterBuildCheck` intrinsic function. I expected it to be provided with syntax similar to `UsingTask`!\n\nFor Example:\n\n```props\n\t<UsingBuildCheck Assembly=\"$(BuildCheckTasksAssembly)\" />\n\t<UsingBuildCheck Name=\"Check1\" Assembly=\"$(BuildCheckTasksAssembly)\" />\n```",
        "createdAt": "2025-04-06T13:58:36Z",
        "author": {
          "login": "Nirmal4G"
        }
      },
      {
        "body": "In the `UsingBuildCheck` syntax, if a package wanted to provide a BuildCheck for newer versions of MSBuild but remain compatible with older versions too, I suppose the `UsingBuildCheck` element would have to be placed in a separate, conditionally-imported file.",
        "createdAt": "2025-04-06T14:25:16Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      }
    ]
  }
}