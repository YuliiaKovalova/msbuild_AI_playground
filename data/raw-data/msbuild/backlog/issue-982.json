{
  "number": 982,
  "title": "Introduce concept of a non-file item",
  "body": "## Problem\n\nWhile MSBuild items are designed to be a list of named things and not necessarily files, there are two things that get in the way to make this actually work successfully:\n### \"*\" in Include has meaning\n\nIf your non-file item's identity includes a wild card, such as:\n\n``` XML\n    <PackageReference Include=\"System.Runtime/1.*\"/>\n```\n\nThen this is interpreted as wild card pattern, causing MSBuild to not only hit the disk on expansion but resulting in a list of zero items (assuming no files match the pattern).\n\nThis restricts the allowable values inside an Include[1] and greatly hinders the design of new things that we would like to bring forward into MSBuild (such as a PackageReference).\n\n[1] Note, you can can escape the character, but do so you need to use the ASCII sequence;  %2A, which is not very user readable/writable.\n### Retrieving built-in metadata throws\n\nIf you ask an non-file item that contains invalid path characters for a list of its metadata via ITaskItem.Metadata, it includes built-in metadata such as %(FullPath) and %(Filename), but throws (InvalidOperationException) when you attempt to retrieve said metadata via ITaskItem.GetMetadata.\n\nThere's no way to figure out up-front if this is going to succeed, which can be problematic for a system that sits on top of MSBuild like the Common Project System (CPS). CPS takes snapshots (including built-in metadata) of items between evaluations and design-time builds, so that it can expose a diff of what's changed from evaluation to evaluation or from design-time build to design-time build. If those consumers are interested in non-file items (such as the new C#/VB project system's representation of Csc/Vbc's command-line arguments) - these exceptions need to be handled, ruining debugability due to the large number of first-chance exceptions. \n\nWith the new project system, in a standard .NET Core project, **_there's over >2200 (2 per built-in metadata item x 11 metadata items x ~100 items) first-chance exceptions alone for every design-time build**_.\n## Proposal\n\nTo resolve the above problems, I'd like to introduce the concept of a non-file item. This will be indicated by a new attribute an ItemDefinitionGroup called _IsFile_:\n\n``` XML\n<ItemDefinitionGroup>\n    <PackageReference IsFile=\"false|true\" />\n</ItemDefinitionGroup>\n```\n\nBy default, not specifying IsFile will be the same as setting it to  _true_ and will cause MSBuild to treat items exactly the same way as it treats them today.\n\nWhen _false_, MSBuild will:\n\n1) Not treat \\* as a wild card in the Include attribute for an item of that type, instead it will be treated as a literal (as if you'd specified the escape sequence %2A) .\n\n2) ITaskItem.Metadata will not contain the following built-in metadata for a non-file item:\n\n| Name |\n| --- |\n| FullPath |\n| RootDir |\n| Filename |\n| Extension |\n| RelativeDir |\n| Directory |\n| ModifiedTime |\n| CreatedTime |\n| AccessedTime |\n",
  "state": "OPEN",
  "createdAt": "2016-08-31T00:11:59Z",
  "updatedAt": "2024-02-21T16:38:16Z",
  "closedAt": null,
  "author": {
    "login": "davkean"
  },
  "labels": [
    "Area: Language",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": []
  }
}