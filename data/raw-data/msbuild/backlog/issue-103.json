{
  "number": 103,
  "title": "Proposal - Release strategy",
  "body": "After https://github.com/Microsoft/msbuild/pull/95 closing #45, It should be great to:\n- publish the package on https://nuget.org/.\n- update the package frequently\n- make \"strict\" use of semver http://semver.org/, incrementing semver based on breaking change (=major), incrementing feature (=minor) bug fixes (=patch). For example, node.js haven't received any breaking change till date (current stable version is v0.12.3)!\n- publish the release on GitHub: https://github.com/Microsoft/msbuild/releases highlighting the changes since previous version and to let user install the package from source like so:\n  \n  ``` powershell\n  Install-Package MSBuild -Source https://github.com/microsoft/msbuild/archive/v0.1.0.zip\n  ```\n  \n  (assuming MSBuild does not have [its own versioning](https://social.msdn.microsoft.com/Forums/vstudio/en-US/7985057d-6148-4c87-bf6a-3d91c5bed532/determine-msbuild-version-at-build-time?forum=msbuild), now would be an excellent time to start fresh with semver)\n\nAdditional notes:\nThe releases by GitHub get the \"release assets\" stored in Amazon S3. The .tar.gz and .zip files are automatically generated and uploaded by GitHub. You can manually add more files as release assets by editing the release. Ex. `https://github.com/microsoft/msbuild/releases/edit/<version>`, scroll down where it says `Attach binaries by dropping them here or  selecting them` or even [using GitHub API](https://developer.github.com/v3/repos/releases/#upload-a-release-asset).\n",
  "state": "CLOSED",
  "createdAt": "2015-05-17T09:33:45Z",
  "updatedAt": "2024-02-21T17:31:33Z",
  "closedAt": "2017-02-15T17:36:57Z",
  "author": {
    "login": "ghost"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "I think putting the package on nuget.org is what's planned anyway and I agree that having release notes on GitHub would be great :)\nThe `-Source` parameter in your example doesn't make sense, it needs to be a nuget feed (and I don't get what benefit this would have over nuget.org?).\n\n> For example, node.js haven't received any breaking change till date (current stable version is v0.12.3\n\nSorry to be nitpicky, but that's just not true, 0.x is explicitly exempt from this rule in semver:\n\n> 1. Major version zero (0.y.z) is for initial development. Anything may change at any time. The public API should not be considered stable.\n",
        "createdAt": "2015-05-17T11:49:56Z",
        "updatedAt": "2015-05-17T11:49:56Z",
        "author": {
          "login": "akoeplinger"
        }
      },
      {
        "body": "Thanks @akoeplinger for the correction! I didn't knew about that. :)\n\nThe [`-Source` option](http://docs.nuget.org/consume/Command-Line-Reference#sources-command-usage) is normally used for installing the package from local drive. If it allows network paths (such as `http` and `https` URIs), it would make sense to fetch from GitHub URL and build MSBuild, since MSBuild is now hosted on GitHub, IMO that example would make sense in certain scenarios, for instance, if you are writing the example CLI script in docs, you would probably like to have a step `Install-Package MSBuild -Source  https://github.com/microsoft/msbuild/archive/master.zip`). This is analogus to `npm install Microsoft/typescript` which fetches from GitHub slug's latest master (without even specifying the full URL). This is one of the benefit of having true RESTful URLs (which we miss in VSO on daily basis..)\n",
        "createdAt": "2015-05-17T21:20:24Z",
        "updatedAt": "2015-05-17T21:20:24Z",
        "author": {
          "login": "ghost"
        }
      },
      {
        "body": "@jasonwilliams200OK What I meant was that this is not something NuGet currently supports with the -Source option (it needs either a NuGet feed or a drive/folder with .nupkg's). But that's offtopic ;)\n",
        "createdAt": "2015-05-17T22:26:48Z",
        "updatedAt": "2015-05-17T22:26:48Z",
        "author": {
          "login": "akoeplinger"
        }
      },
      {
        "body": "This is something we do want, but not something we're planning to do in the near future. This is definitely a core scenario when we are planning the vNext.\n",
        "createdAt": "2015-05-19T22:45:52Z",
        "updatedAt": "2015-05-19T22:45:52Z",
        "author": {
          "login": "AndyGerlicher"
        }
      },
      {
        "body": "We are now publishing our packages on NuGet: https://www.nuget.org/packages?q=microsoft.build\r\n\r\nYou can grab specific releases under: https://github.com/Microsoft/msbuild/releases\r\n\r\nOfficial release notes would be under Visual Studio: https://www.visualstudio.com/en-us/news/releasenotes/vs2017-relnotes",
        "createdAt": "2017-02-15T17:36:57Z",
        "updatedAt": "2017-02-15T17:36:57Z",
        "author": {
          "login": "Sarabeth-Jaffe-Microsoft"
        }
      },
      {
        "body": "note that the package in question is here:\r\n\r\nhttp://nuget.org/packages/Microsoft.Build.Runtime",
        "createdAt": "2018-04-22T17:58:57Z",
        "updatedAt": "2018-04-22T17:58:57Z",
        "author": {
          "login": "ghost"
        }
      },
      {
        "body": "@svnpenn Which package you want to reference depends on what you're planning to use MSBuild for. In most cases, you probably _don't_ want Microsoft.Build.Runtime. https://docs.microsoft.com/en-us/visualstudio/msbuild/updating-an-existing-application has additional information.",
        "createdAt": "2018-04-23T14:10:39Z",
        "updatedAt": "2018-04-23T14:10:39Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}