{
  "number": 3410,
  "title": "Customizing SDK style builds",
  "body": "I have a question regarding customizing SDK style projects. In old-style projects, I could redefine any standard Target that I wanted, by placing my own definition after the Import for \"Microsoft.CSharp.targets\". However, with the new SDK style projects the SDK.targets is implicitly added to the very end of my project file, so there is no \"after\" for me to include my redefinitions. Is there a way to do this with SDK style projects, or is this simply no longer an option?",
  "state": "CLOSED",
  "createdAt": "2018-06-13T17:20:47Z",
  "updatedAt": "2024-02-21T17:12:45Z",
  "closedAt": "2018-06-14T15:43:46Z",
  "author": {
    "login": "MarkPflug"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Okay, I think I figured it out. It seems that all that Sdk=\"Microsoft.NET.Sdk\" is doing for me is adding those Imports, so I can just replace that with an explicit import instead:\r\n\r\n```\r\n<Project>\r\n<Import Sdk=\"Microsoft.Net.Sdk\" Project=\"Sdk.props\"/>\r\n\r\n... my project stuff ...\r\n\r\n<Import Sdk=\"Microsoft.NET.Sdk\" Project=\"Sdk.targets\"/>\r\n\r\n... override targets here ...\r\n\r\n</Project>\r\n```\r\n\r\nI only realized this after I saw that the Import element now has an \"Sdk\" attribute (thanks Intellisense).\r\n\r\nIs this really all the Sdk attribute on Project is doing?",
        "createdAt": "2018-06-13T18:05:26Z",
        "updatedAt": "2018-06-13T18:05:34Z",
        "author": {
          "login": "MarkPflug"
        }
      },
      {
        "body": "> Is this really all the Sdk attribute on Project is doing?\r\n\r\nYes, that's all that attribute does - automatically adding the Imports at the top and bottom of the project.  See https://github.com/Microsoft/msbuild/issues/1493 and https://github.com/Microsoft/msbuild/issues/1392.",
        "createdAt": "2018-06-14T14:59:52Z",
        "updatedAt": "2018-06-14T14:59:52Z",
        "author": {
          "login": "eerhardt"
        }
      },
      {
        "body": "@MarkPflug If you want your override targets to apply to more than just one project, you may want to put them in a Directory.Build.targets file in the root of your repo.  It will automatically be imported after the common targets, and you don't have to change your projects to use explicit SDK imports.  See [Customize your build](https://docs.microsoft.com/en-us/visualstudio/msbuild/customize-your-build) for more information.",
        "createdAt": "2018-06-14T16:26:07Z",
        "updatedAt": "2018-06-14T16:26:07Z",
        "author": {
          "login": "dsplaisted"
        }
      },
      {
        "body": "@dsplaisted - unfortunately, `Directory.Build.targets` doesn't work as great as `Directory.Build.props`.  The props file does get imported rather early, so you can set a bunch of things before the SDK's props file.\r\n\r\nHowever, the `Directory.Build.targets` file gets imported towards the end of `Microsoft.Common.targets`:\r\nhttps://github.com/Microsoft/msbuild/blob/cb6c2643fe4a072f28e685bc46df3bace17a7108/src/Tasks/Microsoft.Common.targets#L147\r\n\r\nAnd from there, most of the Microsoft.NET.Sdk's .targets files get imported after `Microsoft.Common.targets`, and thus after any `Directory.Build.targets`.\r\n\r\nSo if you want to override things after a SDK's .targets files, your only real option is to explicitly import the SDK.targets file.  \ud83d\ude1e ",
        "createdAt": "2018-06-14T16:43:25Z",
        "updatedAt": "2018-06-14T16:43:25Z",
        "author": {
          "login": "eerhardt"
        }
      },
      {
        "body": "Thanks for the suggestions guys. I've got things working acceptably well now. One thing I'd suggest for documentation improvement, add a link from [What's New In MSBuild 15.0](https://docs.microsoft.com/en-us/visualstudio/msbuild/what-s-new-in-msbuild-15-0) directly to [How to: Use MSBuild Project SDKs](https://docs.microsoft.com/en-us/visualstudio/msbuild/how-to-use-project-sdk).\r\n\r\nThat SDK topic is under \"MSBuild Targets\", which I didn't bother exploring, because I (thought I) knew all about how targets work. Honestly, the SDK feature feels like it should be its own top-level topic.",
        "createdAt": "2018-06-14T18:07:21Z",
        "updatedAt": "2018-06-14T18:07:21Z",
        "author": {
          "login": "MarkPflug"
        }
      },
      {
        "body": "@mikejo5000 Feedback on doc organization \u261d. Thoughts on making those changes? I'm not sure SDKs deserves a top-level feature, but user feedback is important.",
        "createdAt": "2018-06-18T16:33:08Z",
        "updatedAt": "2018-06-18T16:33:08Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald I'll add the link from What's New. Bumping up the topic to a higher TOC level seems like it would require the addition of a new TOC node such as \"MSBuild Projects\", but then we'd need to add new content on projects to make sense of it.",
        "createdAt": "2018-06-18T18:37:26Z",
        "updatedAt": "2018-06-18T18:37:26Z",
        "author": {
          "login": "Mikejo5000"
        }
      }
    ]
  }
}