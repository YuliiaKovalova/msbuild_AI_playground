{
  "number": 582,
  "title": "CustomBuild Command environment does not contain the result of a SetEnv even though Exec does",
  "body": "I have used CoApp to create a nuget package to package some code generators (binaries). I want to be able to use these code generators in a msbuild custombuild step to generate the code\n\nI have a targets file that defines the following (using CoApp)\n`<SetEnv Condition=\"'$(Platform.ToLower())' == 'x64' And '$(PlatformToolset.ToLower())' == 'v100' And ( $(Configuration.ToLower().IndexOf('debug')) == -1 )\" Name=\"PATH\" Prefix=\"true\" Value=\"$(MSBuildThisFileDirectory)../..//build/native/bin/x64\\v100\\Release;\">\n  <Output TaskParameter=\"OutputEnvironmentVariable\" PropertyName=\"PATH\" />\n</SetEnv>`\n\nThe targets file containing this snippet is imported like so into a project (vcxproj file)\n\n`<Import Project=\"..\\packages\\habitat.id.redist.1.0.0.5\\build\\native\\habitat.id.redist.targets`\n\nwithin the project\n`<Exec Command=\"echo %PATH%\"/>`\nreturns the desired outcome i.e. that which takes the form\n`../..//build/native/bin/x64\\v100\\Release;`\nso I can call the executable that I want to run from the project. (except for unlike a custombuild command step there is no concept of outputs. So incremental builds will thence not work)\n\nhowever \n`<CustomBuild Include=\"..\\directory\\filename\">\n  <FileType>Document</FileType>\n  <Command Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">\n  echo $(PATH)\n</Command>`\ndoes not contain the path that I want that was set through the SetEnv.\n\nThere are unit tests that show the desired behavior for the Exec command though it uses/loads a custom assembly for setenvv.\n\nFor Exec it goes through the temporarybatchfile routine. What is the equivalent for the CustomBuild >  Command\n\nThe question has also been asked here [http://stackoverflow.com/questions/36489469/msbuild-14-0-visual-studio-2015-custombuild-command-environment-does-not-contain](url)\n\nI would like to fix this issue but need help to know where the code is\n",
  "state": "CLOSED",
  "createdAt": "2016-04-19T02:42:36Z",
  "updatedAt": "2024-02-21T17:28:28Z",
  "closedAt": "2016-04-27T19:49:00Z",
  "author": {
    "login": "janitha09"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "You're not finding the code here because the CustomBuild task is part of the C++ task assembly, not the core MSBuild package. The C++ team's code is still Microsoft-internal, and supported through the usual Microsoft mechanisms. But you might not need to go through them.\n\nDo you really need to use CustomBuild? Can you just create a target that uses Exec?\n\nYou may also be able to avoid using environment variables at all by making your target take a full path and just setting it as an MSBuild property. You're already computing the path in MSBuild.\n",
        "createdAt": "2016-04-19T14:15:00Z",
        "updatedAt": "2016-04-19T14:15:00Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I am using the below as a help forum I think.....Looks like C++ has a little ways to go until they can support package updates for binaries. The headers (ClCompile > AdditionalIncludeDirectories) and libs (Link > Additionaldependencies) are fine\n\nI wanted to continue to use the custom build because it is exposed through the standard visual studio property sheet, a custom target is not (until you customize the property sheet hence introducing something that not everyone is familiar with, will forget to install and then complain) So I was hoping to get a product level solution that would come through the next product update. That looks unlikely\n\nI was looking to continue to use the environment variable approach because that's the way CoApp does it for nuget package it creates for C++ binaries. It's easy enough to change the targets file. (Not using Coapp's Write-NugetPackage but use nuget pack instead)\n\nA custombuild command does not expand msbuild properties set like\n\n`<PropertyGroup Condition=\"'$(Platform.ToLower())' == 'x64' And '$(PlatformToolset.ToLower())' == 'v90'\">\n        <HabitatBindir>$(MSBuildThisFileDirectory)../..//build/native/bin/x64\\v90\\Release</HabitatBindir>\n    </PropertyGroup>`\n\nand used like\n`<Command Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">$(HabitatBindir)aemcomp.exe -nonotice -mlf -dll %(Identity)</Command>`\n\nThe Target-Exec-Property combination is maybe an option but I am not sure about %(Identity) and %(FileName). The executable in question is a code generator. The generated code once built produces a dll. There is more than one file on which the code generator operates and each generates a unique set of files based on the input filename. \n\n`<CustomBuild Include=\"..\\directory\\filename.extension\">\n      <FileType>Document</FileType>\n      <Command Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">%(HabitatBindir)aemcomp.exe -nonotice -mlf -dll %(Identity)</Command>\n      <Outputs Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">mlf_%(FileName).c;mlf_%(FileName).h;mlf_dll_%(FileName).h;mlf_dll_%(FileName).c;%(Outputs)</Outputs>\n    </CustomBuild>`\n\nExperiment incomplete\n",
        "createdAt": "2016-04-19T17:58:16Z",
        "updatedAt": "2016-04-20T00:11:05Z",
        "author": {
          "login": "janitha09"
        }
      }
    ]
  }
}