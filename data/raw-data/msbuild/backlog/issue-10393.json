{
  "number": 10393,
  "title": "[Bug] Args type resolution in Expander",
  "body": "The recent change in sdk unfolded a bug in \r\nhttps://github.com/dotnet/msbuild/blob/c2f9b76bb511c2ef4419abe468e81855781c40a1/src/Build/Evaluation/Expander.cs#L3597\r\n\r\nOn the attempt to invoke \r\n`<_MSBuildVersionMajorMinor>%24([System.Version]::Parse('%24(MSBuildVersion)').ToString(2))</_MSBuildVersionMajorMinor>`\r\nthe arg for `ToString` method is defined as string, that prevents the[ correct method](https://learn.microsoft.com/en-us/dotnet/api/system.version.tostring?view=net-8.0#system-version-tostring(system-int32)) resolution in runtime.\r\n\r\nThere might be a conventional wisdom behind this limitation, feel free to share what you know about that.\r\n",
  "state": "CLOSED",
  "createdAt": "2024-07-17T12:35:07Z",
  "updatedAt": "2024-07-18T12:50:03Z",
  "closedAt": "2024-07-18T12:50:03Z",
  "author": {
    "login": "YuliiaKovalova"
  },
  "labels": [],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "We discussed this offline but for posterity: this isn't a _bug_; the evaluation eventually and transparently finds the right method, calls it, and gets the right answer. However, in doing so it throws (and catches) `MissingMethodException`, which was flagged by Visual Studio performance infrastructure.\r\n\r\nThis is the by-design way that MSBuild handles arbitrary method calls, but does have some performance cost, and the expander has a way to avoid the exceptions. They will go away for the specific case we see now with #10398.",
        "createdAt": "2024-07-17T17:53:46Z",
        "updatedAt": "2024-07-17T17:53:46Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "close as dupe of https://github.com/dotnet/msbuild/issues/10398.",
        "createdAt": "2024-07-18T12:49:56Z",
        "updatedAt": "2024-07-18T12:49:56Z",
        "author": {
          "login": "YuliiaKovalova"
        }
      }
    ]
  }
}