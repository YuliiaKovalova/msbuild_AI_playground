{
  "number": 10954,
  "title": "Configuration hierarchical composability",
  "body": "### Context\n\nAnalogy to Roslyn `globalconfig`s asked by couple users during initial demos.\nBeing able to set 'policies' centrally via package is currently missing.\n\n### Possible goals\n\n* Being able to set different (additive) configs on different levels (e.g. rule with whitelist allows additive configuration of whitelist, insted hiding the higher level setting)\n* Unlocks ability to ship default configurations\n\n### Example of usage\n\n* A theoretical buildcheck `ForbidSettingUnderscoreProperty`, that will flag assigning to the property starting with underscore\n* The buildcheck will have a whitelist setting (settable via .editorconfig) to allow exceptions\n* Someone would like to set a whitelist for the check on the scope of whole repository in the root of the repo with .editorconfig:\n ```ini\nmicrosoft.buildcheck.AB1234.whitelist=_propA,_propB\n ```\n* We then would want to add additional whitelist for a subsection of repo (or a specific project), but without overwriting the higher scope settings. So e.g.:\n ```ini\nmicrosoft.buildcheck.AB1234.whitelist=_propC\n ```\n  would allow the whitelists to be joined\n\n\nThe actual implementation and exposing would need to be designed and thought through (e.g. should the additivity be explicitly opt-ed in in the .editorconfig, the Checks might then receive enumeration of setting per single key)\n\n\nThe additional scenario that this then unlocks is: \"Can we create and distribute `.editorconfig` file via nuget packages, so that users can apply it and get preconfigured behavior as a base for their build\" - this is not possible today, as only `.editorconfig` files in the code hierarchy are being recognized (obj and nuget cache are ignored). This would need design as well (what is the priority, opt-in/out, etc.)",
  "state": "OPEN",
  "createdAt": "2024-11-08T09:29:08Z",
  "updatedAt": "2024-11-19T15:26:26Z",
  "closedAt": null,
  "author": {
    "login": "JanKrivanek"
  },
  "labels": [
    "needs-design",
    "Priority:2",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": []
  }
}