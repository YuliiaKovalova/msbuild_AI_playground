{
  "number": 2356,
  "title": "MSBuild 15.1.548.43366 broke .Net Core Runtimes 1.04/1.1.1 in IIS",
  "body": "We recently upgraded our CI system from MsBuild version 15.1.548.43366 to 15.1.1012.6693. Our CI system builds an ASP.NET Core app using the 1.04 SDK  and deploys it to a range of Windows Server machines (ranging from 2008 up to 2016) that have the 1.04/1.1.1 .Net Core runtime and the app is being hosted IIS. After the upgrade, the website fails to start in IIS (502.5 error) with the following event log entry (with the app/company name being obfuscated)\r\n`Application 'MACHINE/WEBROOT/APPHOST/MY_APP_NAME' with physical root 'C:\\Program Files\\CompanyName\\MY_APP_NAME\\' failed to start process with commandline '\"dotnet\" .\\CompanyName.MyAppName.dll', ErrorCode = '0x80004005 : 80008083.`\r\n\r\nWe could only resolve this upgrading the .Net Core Runtimes (and the accompanying Windows Server Hosting app from 1.04/1.11 to 1.05/1.12\r\n\r\nI am not sure if this is a bug in the msbuild or corefx repo but given that the msbuild version to which we upgraded was released much AFTER the release of the .Net Core runtimes that we were using (1.04/1.11). I could not find any documentation about this breaking change in release notes of msbuild, corefx or the [.Net Core announcement repo](https://github.com/dotnet/Announcements/labels/Breaking%20Change)",
  "state": "CLOSED",
  "createdAt": "2017-07-27T07:50:19Z",
  "updatedAt": "2024-02-21T17:17:41Z",
  "closedAt": "2017-07-27T20:29:10Z",
  "author": {
    "login": "ChristophB125"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Did you use the .net core SDK to build - Maning `dotnet build` / `dotnet publish` and friends, or the MSBuild version installed by visual studio?\r\nThe 1.0.4 SDK already requires the `1.0.5` / `1.1.2` runtime so you probably used the slightly older vs-included msbuild distribution that contained a copy of \"build SDK\" components that shipped in the 1.0.3 \".NET Core SDK\". (yes this is confusing and about to change with VS 15.3 / .NET Core SDK 2.0)",
        "createdAt": "2017-07-27T09:25:39Z",
        "updatedAt": "2017-07-27T09:25:39Z",
        "author": {
          "login": "dasMulli"
        }
      },
      {
        "body": "@dasMulli the build used the `dotnet build/publish` commands of the .Net Core 1.04 SDK as recommended by the .Net Core team. Thanks for explaining the issue, but it is not clear to me that the 1.0.4 SDK requires the 1.05/1.1.2 Runtime as the release notes [here ](https://github.com/dotnet/cli/releases/tag/v1.0.4) only say \"coincides with the .NET Core May 2017 Update\". Additionally, given that all we did is upgrade Visual Studio (to upgrade msbuild in order to use new features), it should have been a bit more clear what the implications of upgrading are (and possibly have a more finely grained choice?). Feel free to close this issue if you think it is ok.\r\nMay I ask one more question since you seem to be very knowledgeable? If I open the 'Developer Command Prompt for VS 2017) and type `where msbuld` it tells me that the MSBuild.exe it uses is `C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe` and not the one in the installation folder `C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\MSBuild\\15.0\\Bin\\MSBuild.exe`. Why is that and which MSBuild.exe should be used by developers or in CI?",
        "createdAt": "2017-07-27T10:01:11Z",
        "updatedAt": "2017-07-27T10:42:38Z",
        "author": {
          "login": "ChristophB125"
        }
      },
      {
        "body": "(fyi I'm not affiliated with MS, just ended up in build engineering somehow)\r\n\r\nIn theory, updating Visual Studio should now have affected your builds if you just used `dotnet build` and friends, but the VS installer usually also updates the installed .NET Core Sdk version - so I'm guessing you used an `1.0.3` version until your VS installer updated it to `1.0.4`.\r\nThe runtime framework version is inferred automatically to the newest version that the SDK knows about and has caused troubles already, which is why this will change in 2.0. See https://github.com/dotnet/designs/issues/3, https://github.com/dotnet/sdk/issues/983 for details.\r\n\r\n`where` lists all available paths but the one that is listed first will be used - which should be the VS-local one. You can check with `msbuild /version`.",
        "createdAt": "2017-07-27T12:45:46Z",
        "updatedAt": "2017-07-27T12:45:46Z",
        "author": {
          "login": "dasMulli"
        }
      },
      {
        "body": "@dasMulli Yes, it was the implicit upgrade of the SDK as part of the VisualStudio update that must have caused the issue. Thanks for sharing your knowledge that a new SDK always requires a new runtime (until they hopefully fix it in 2.0) and to provide the helpful links. :-)\r\nRegarding the msbuild question: The fact that `where msbuild` in the `Developer Command Prompt for VS 2017` does not give me the same path as the VS-local one is what surprised me (although the version matches), so I presume it just calls the VS-local one at the end but applies some 'intelligent' logic to decide e.g. on the bitness.",
        "createdAt": "2017-07-27T13:07:02Z",
        "updatedAt": "2017-07-27T13:07:02Z",
        "author": {
          "login": "ChristophB125"
        }
      },
      {
        "body": "> just ended up in build engineering somehow\r\n\r\nA common refrain in these parts!\r\n\r\n> The fact that where msbuild in the Developer Command Prompt for VS 2017 does not give me the same path as the VS-local one is what surprised me (although the version matches), so I presume it just calls the VS-local one at the end but applies some 'intelligent' logic to decide e.g. on the bitness.\r\n\r\nMSBuild itself has no such intelligence. The first one found on PATH is called by the OS and that's what executes.\r\n\r\nWhat's your exact output? On my machine I see (from inside a developer command prompt for my dogfood/prerelease VS):\r\n\r\n```\r\nS:\\msbuild>where msbuild\r\nC:\\Program Files (x86)\\Microsoft Visual Studio\\Preview\\EntInt\\MSBuild\\15.0\\Bin\\MSBuild.exe\r\nC:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe\r\n```",
        "createdAt": "2017-07-27T16:36:33Z",
        "updatedAt": "2017-07-27T16:36:33Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald You are right, I actually see a similar output for `where msbuild`as you \r\n but I seem to have been blind and could not see the first line with the expected path to the Msbuild.exe of the VS installation (probably because the path looked so similar to the command prompt above and because I made the wrong assumption that the developer command prompt would put only one MSBuild.exe on the path, which lead to me only reading the last line...,). Given that the issue was explained by the implicit upgrade of the .Net SDK as part of the VS update and not MSBuild itself, I close this issue now. Thanks everyone for the discussion, which was very helpful to me and I learned a lot.",
        "createdAt": "2017-07-27T20:29:10Z",
        "updatedAt": "2017-07-27T20:29:10Z",
        "author": {
          "login": "ChristophB125"
        }
      }
    ]
  }
}