{
  "number": 2349,
  "title": "How can I build a .NET Core project against custom locales using msbuild?",
  "body": "I want to build `*.resx` for locale that platform does not support in default. With the help of @tarekgh and @jefgen I installed custom locale on windows, and I succeeded in building `<custom-locale>.resx` with VS2017 (https://github.com/dotnet/corefx/issues/22135). \r\n\r\nNow I need to build it on linux using dotnet cli. \r\n\r\nLooking at the msbuild code quickly, https://github.com/Microsoft/msbuild/blob/master/src/Tasks/CultureInfoCache.cs#L31, it seems that msbuild currently only uses the `hardcoded` locale names for coreclr.\r\n\r\nHow can we solve this situation?\r\n\r\nIn my guess, the simplest way is to (a) add all the locales I need to the cache, and the other way is (b) to make msbuild to get the locale information from the platform for coreclr as well. But, to do so, it is likely that msbuild should be modified to target the `netstandard2.0`.\r\n\r\nIs my guess right? Which way would be better?\r\n\r\n",
  "state": "CLOSED",
  "createdAt": "2017-07-24T01:05:00Z",
  "updatedAt": "2024-02-21T17:17:44Z",
  "closedAt": "2017-10-05T17:35:27Z",
  "author": {
    "login": "lemmaa"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "cdmihai"
      }
    ]
  },
  "milestone": {
    "title": "MSBuild 15.5"
  },
  "comments": {
    "nodes": [
      {
        "body": "In net core 2.0, we support CultureInfo.GetCultures. so the code \r\n\r\nhttp://index/?query=CultureInfoCache.cs&rightProject=Microsoft.Build.Tasks.Core&file=CultureInfoCache.cs&line=26\r\n\r\nShould always use CultureInfo.GetCultures and get rid of the hard coded cultures list.",
        "createdAt": "2017-07-24T17:15:59Z",
        "updatedAt": "2017-07-24T17:15:59Z",
        "author": {
          "login": "tarekgh"
        }
      },
      {
        "body": "We can adopt that once we're on .NET Standard 2.0. Until then, I'm not sure what's best.\r\n\r\ncc @cdmihai \r\n",
        "createdAt": "2017-07-24T18:48:57Z",
        "updatedAt": "2017-07-24T18:48:57Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald is it possible using item list which can be provided by the projects and get appended to the culture name list? \r\n\r\nfor example, the csproj will contain:\r\n\r\n```Xml\r\n    <ItemGroup>  \r\n        <AdditionalCultures Include = \"tu-IN\" />  \r\n        <AdditionalCultures Include = \"sat-IN\" />  \r\n        <AdditionalCultures Include = \"mai-IN\" />  \r\n    </ItemGroup> \r\n```\r\n\r\nand you'll honor this list in addition to the hard coded list",
        "createdAt": "2017-07-24T19:07:27Z",
        "updatedAt": "2017-07-24T19:07:58Z",
        "author": {
          "login": "tarekgh"
        }
      },
      {
        "body": "Discussed this in out team standup. We prefer getting the OS supported list of cultures via `CultureInfo.GetCultures`. We've set the milestone for the next VS foundation update. If we manage to get .net core msbuild on netstandard 2.0 by then, we'll just call the method, and if not, we'll use reflection since the CLI uses ns2.0 either way.",
        "createdAt": "2017-07-25T17:46:36Z",
        "updatedAt": "2017-07-25T17:46:36Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "Thank you for updating the progress @cdmihai .\r\n\r\n> If we manage to get .net core msbuild on netstandard 2.0 by then, we'll just call the method, and if not, we'll use reflection since the CLI uses ns2.0 either way.\r\n\r\nBut, I do not fully understand how the `being CLI uses netstandard 2.0` is related to `msbuild can use CultureInfo.GetCultures`. Is the CLI means the .NET Core CLI? which invokes msbuild?\r\n\r\nBy the way, after the next VS foundation update, can msbuild on .NET Core CLI also expect to get locale information using `CultureInfo.GetCultures` regardless of running platform, including Linux and macOS?",
        "createdAt": "2017-07-26T10:14:18Z",
        "updatedAt": "2017-07-26T10:14:18Z",
        "author": {
          "login": "lemmaa"
        }
      },
      {
        "body": "> But, I do not fully understand how the being CLI uses netstandard 2.0 is related to msbuild can use CultureInfo.GetCultures. Is the CLI means the .NET Core CLI? which invokes msbuild?\r\n\r\nAs far as I know, [dotnet CLI](https://github.com/dotnet/cli) swaps msbuild's runtime.json with something that targets the 2.0 framework. So even though MSBuild does not get compiled against 2.0, it gets to run against it (not the safest thing but it seems to work ...). Meaning we could use reflection to find CultureInfo.GetCultures. We'll still have to define what happens when `GetCultures` is not there. But hopefully we'll get MSBuild on ns2.0 and not require reflection.\r\n\r\n> By the way, after the next VS foundation update, can msbuild on .NET Core CLI also expect to get locale information using\u00a0CultureInfo.GetCultures\u00a0regardless of running platform, including Linux and macOS?\r\n\r\nThat's the plan, because 2.0 and beyond would expose the GetCultures API on the supported platforms.\r\n\r\n\r\n",
        "createdAt": "2017-07-26T19:47:22Z",
        "updatedAt": "2017-07-26T19:47:30Z",
        "author": {
          "login": "cdmihai"
        }
      }
    ]
  }
}