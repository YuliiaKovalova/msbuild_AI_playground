{
  "number": 6179,
  "title": "Microsoft.Build.Utilities.v4.0.dll is loaded from the GAC",
  "body": "NuGet.Build.Tasks.dll (C:\\msbuild\\artifacts\\bin\\bootstrap\\net472\\Common7\\IDE\\CommonExtensions\\Microsoft\\NuGet\\NuGet.Build.Tasks.dll) references v4.0.dll and it gets loaded from the GAC",
  "state": "CLOSED",
  "createdAt": "2021-02-21T22:12:48Z",
  "updatedAt": "2024-02-21T14:14:49Z",
  "closedAt": "2021-06-16T18:07:06Z",
  "author": {
    "login": "KirillOsenkov"
  },
  "labels": [
    "bug",
    "needs-more-info",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Add this code to the Main() method in XMake.cs to catch MSBuild assemblies loaded from the GAC:\r\n\r\n```\r\n            AppDomain.CurrentDomain.AssemblyLoad += (s, e) =>\r\n            {\r\n                if (e.LoadedAssembly is Assembly loaded)\r\n                {\r\n                    if (loaded.FullName.IndexOf(\"Build\", StringComparison.OrdinalIgnoreCase) > -1 &&\r\n                        loaded.Location is string location &&\r\n                        location.StartsWith(Environment.GetFolderPath(Environment.SpecialFolder.Windows), StringComparison.OrdinalIgnoreCase))\r\n                    {\r\n                    }\r\n                }\r\n            };\r\n```\r\n\r\nWe should perhaps even capture the callstack using `new StackTrace().ToString()` and log warnings for each MSBuild assembly loaded from the GAC including the callstack that loaded it.",
        "createdAt": "2021-02-21T22:23:17Z",
        "updatedAt": "2021-02-21T22:24:08Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "> log warnings for each MSBuild assembly loaded from the GAC including the callstack that loaded it.\r\n\r\nThis will be followed by loads of sadness when it breaks a bunch of builds that have warnings treated as errors.",
        "createdAt": "2021-02-21T22:28:35Z",
        "updatedAt": "2021-02-21T22:29:31Z",
        "author": {
          "login": "sharwell"
        }
      },
      {
        "body": "Sure we can log a message if verbosity is diag",
        "createdAt": "2021-02-21T23:07:40Z",
        "updatedAt": "2021-02-21T23:07:40Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "Team triage: @KirillOsenkov, can you clarify what is wrong with loading M.B.Utilities.v4.0.dll from the GAC? I thought that was expected behavior.",
        "createdAt": "2021-06-16T15:18:28Z",
        "updatedAt": "2021-06-16T15:18:28Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "I thought having MSBuild .dlls in the GAC is bad? Or is the v4.0.dll in the GAC fine? I thought we had tooling to detect and UnGAC .dlls? If it's benign then I suppose we can close this issue.\r\n\r\nBut also why is NuGet.Build.Tasks.dll even referencing the v4.0.dll?",
        "createdAt": "2021-06-16T17:27:49Z",
        "updatedAt": "2021-06-16T17:27:49Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "Ah, yes. Having MSBuild version 15.1.0.0 .dlls in the GAC is bad because then that overrides our normal assembly loading, but that only applies if it's the same version as the one we're trying to ship. v4.0.0 won't affect that, whether it's in the GAC or not. I don't remember exactly why 4.0.0 should be in the GAC\u2014something related to TaskHost maybe?\u2014but it is supposed to be there.",
        "createdAt": "2021-06-16T18:07:06Z",
        "updatedAt": "2021-06-16T18:07:06Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "How does it work when we copy bootstrap MSBuild to a machine where MSBuild is mot installed? Does 4.0 ship in the GAC as part of .NET Framework or will a local copy be loaded in that case?",
        "createdAt": "2021-06-16T19:02:05Z",
        "updatedAt": "2021-06-16T19:02:05Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "@rainersigwald can correct me if I'm wrong, but I believe it's installed as part of the framework. When I've installed VS on a clean machine, it seems to be put in the GAC, and for that sort of thing, I don't choose too many workloads, so either it comes with the framework or it's automatically in the GAC as part of Windows.",
        "createdAt": "2021-06-18T21:55:12Z",
        "updatedAt": "2021-06-18T21:55:12Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "Yeah, MSBuild 4.0 was part of .NET framework, so that assembly is always available if we can run. I suspect NuGet has just linked against it for a bajillion years and it has continued to work. I hope it's not because they're still supporting dev11!",
        "createdAt": "2021-06-18T22:03:20Z",
        "updatedAt": "2021-06-18T22:03:20Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}