{
  "number": 6225,
  "title": "Can't read .binlog file in .NET 6 Preview 2",
  "body": "### Issue Description\r\n\r\nWe have some integration test code that fails to read `.binlog` files, such as:\r\n\r\n```csharp\r\nvar duration = TimeSpan.Zero;\r\nusing var fileStream = File.OpenRead(\"msbuild.binlog\");\r\nusing var gzip = new GZipStream(fileStream, CompressionMode.Decompress);\r\nusing var binaryReader = new BinaryReader(gzip);\r\nint fileFormatVersion = binaryReader.ReadInt32();\r\nvar buildReader = new BuildEventArgsReader(binaryReader, fileFormatVersion);\r\nBuildEventArgs args;\r\nvar started = new Stack<DateTime>();\r\nwhile ((args = buildReader.Read()) != null)\r\n{\r\n\tif (args is ProjectStartedEventArgs projectStarted)\r\n\t{\r\n\t\tstarted.Push(projectStarted.Timestamp);\r\n\t}\r\n\telse if (args is ProjectFinishedEventArgs projectFinished)\r\n\t{\r\n\t\tduration += projectFinished.Timestamp - started.Pop();\r\n\t}\r\n}\r\n\r\nif (duration == TimeSpan.Zero)\r\n\tthrow new InvalidDataException($\"No project build duration found!\");\r\n```\r\n\r\nThere might be a way to clean up this code (let me know), but `BuildEventArgsReader.Read()` returns `null` on the first call.\r\n\r\nThis was working in .NET 6 Preview 1.\r\n\r\n### Steps to Reproduce\r\n\r\nTry the example project, just build & run it in VS with the right .NET 6.0.100-preview.2.21114.3 installed:\r\n\r\n[msbuild-binlog.zip](https://github.com/dotnet/msbuild/files/6084005/msbuild-binlog.zip)\r\n\r\nThis project attempts to parse a `.binlog` that was produced on my machine -- it was a build of a .NET 6 Android application. Both the sample project above and `.binlog` were using the same .NET version.\r\n\r\n### Expected Behavior\r\n\r\n`BuildEventArgsReader.Read()` returns something.\r\n\r\n### Actual Behavior\r\n\r\n`BuildEventArgsReader.Read()` returns `null`.\r\n\r\n### Versions & Configurations\r\n\r\nWindows 10, using .NET 6.0.100-preview.2.21114.3\r\n\r\nInstalled from: https://dotnetcli.azureedge.net/dotnet/Sdk/6.0.100-preview.2.21114.3/dotnet-sdk-6.0.100-preview.2.21114.3-win-x64.exe\r\n\r\n### Attach a binlog\r\n\r\nSee the `.zip` above.",
  "state": "CLOSED",
  "createdAt": "2021-03-04T03:30:53Z",
  "updatedAt": "2021-03-12T17:59:34Z",
  "closedAt": "2021-03-06T21:41:44Z",
  "author": {
    "login": "jonathanpeppers"
  },
  "labels": [
    "bug",
    "needs-triage"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "KirillOsenkov"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "The version of the binlog file format has increased, so older MSBuild can't read it anymore.\r\n\r\nThere are a couple of ways to fix this. You can look into using MSBuildLocator (https://github.com/microsoft/msbuildlocator) to load the latest MSBuild binaries at runtime that support this format. It's a bit tricky, see here for a sample:\r\nhttps://github.com/dotnet/msbuild/issues/3434#issuecomment-774280523\r\n\r\nAlternatively, you can switch to the `MSBuild.StructuredLogger` NuGet package, https://www.nuget.org/packages/MSBuild.StructuredLogger. It has a copy of BuildEventArgsReader that is up-to-date with the latest. Maybe easier than using MSBuild for this scenario. I recommend this:\r\n\r\n```xml\r\n  <ItemGroup>\r\n    <PackageReference Include=\"MSBuild.StructuredLogger\" Version=\"2.1.303\" />\r\n  </ItemGroup>\r\n```\r\n\r\n```csharp\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.IO;\r\nusing Microsoft.Build.Framework;\r\nusing Microsoft.Build.Logging.StructuredLogger;\r\n\r\nnamespace msbuild_binlog\r\n{\r\n\tclass Program\r\n\t{\r\n\t\tstatic void Main()\r\n\t\t{\r\n\t\t\tvar reader = new BinLogReader();\r\n\t\t\tvar records = reader.ReadRecords(\"msbuild.binlog\");\r\n\r\n\t\t\tTimeSpan duration = TimeSpan.Zero;\r\n\t\t\tvar started = new Stack<DateTime>();\r\n\t\t\tforeach (var record in records)\r\n\t\t\t{\r\n\t\t\t\tif (record.Args is ProjectStartedEventArgs projectStarted)\r\n\t\t\t\t{\r\n\t\t\t\t\tstarted.Push(projectStarted.Timestamp);\r\n\t\t\t\t}\r\n\t\t\t\telse if (record.Args is ProjectFinishedEventArgs projectFinished)\r\n\t\t\t\t{\r\n\t\t\t\t\tduration += projectFinished.Timestamp - started.Pop();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (duration == TimeSpan.Zero)\r\n\t\t\t\tthrow new InvalidDataException($\"No project build duration found!\");\r\n\r\n\t\t\tConsole.WriteLine(duration);\r\n\t\t}\r\n\t}\r\n}\r\n```",
        "createdAt": "2021-03-06T21:26:55Z",
        "updatedAt": "2021-03-06T21:29:43Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "Actually here's a better way to do it:\r\n\r\n```csharp\r\nusing System;\r\nusing System.IO;\r\nusing System.Linq;\r\nusing Microsoft.Build.Logging.StructuredLogger;\r\n\r\nnamespace msbuild_binlog\r\n{\r\n\tclass Program\r\n\t{\r\n\t\tstatic void Main()\r\n\t\t{\r\n\t\t\tvar build = BinaryLog.ReadBuild(\"msbuild.binlog\");\r\n\t\t\tvar duration = build\r\n\t\t\t\t.FindChildrenRecursive<Project>()\r\n\t\t\t\t.Aggregate(TimeSpan.Zero, (duration, project) => duration + project.Duration);\r\n\r\n\t\t\tif (duration == TimeSpan.Zero)\r\n\t\t\t\tthrow new InvalidDataException($\"No project build duration found!\");\r\n\r\n\t\t\tConsole.WriteLine(duration);\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\nThis way the library will pair up starts and finishes for multi-core builds correctly (you can have mismatched project started for projects building on different nodes).",
        "createdAt": "2021-03-06T21:36:33Z",
        "updatedAt": "2021-03-06T21:36:57Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "Ok, to summarize, the 16.9.0 Microsoft.Build.* packages on NuGet are not new enough to parse the new `.binlog` format.\r\n\r\nThanks for the example above, it's working for us, thanks!",
        "createdAt": "2021-03-08T18:05:45Z",
        "updatedAt": "2021-03-08T18:05:45Z",
        "author": {
          "login": "jonathanpeppers"
        }
      },
      {
        "body": "Yes, binlog format is actively changing between 16.9 and 16.10 so you may need to keep bumping MSBuild.StructuredLogger NuGet if this breaks again",
        "createdAt": "2021-03-08T18:34:21Z",
        "updatedAt": "2021-03-08T18:34:21Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "FYI @KirillOsenkov I'm seeing a new one on .NET 6 Preview 3: \r\n```\r\nSystem.NotSupportedException : Unsupported log file format. Latest supported version is 10, the log file has version 11.\r\n```\r\nSo we must already need a new MSBuild.StructuredLogger, thanks!",
        "createdAt": "2021-03-12T02:24:29Z",
        "updatedAt": "2021-03-12T02:24:29Z",
        "author": {
          "login": "jonathanpeppers"
        }
      },
      {
        "body": "Yes, and I'm working on a PR that will further bump the version to 12, just to keep you on your toes!",
        "createdAt": "2021-03-12T02:32:40Z",
        "updatedAt": "2021-03-12T02:32:40Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "btw would love to see build duration comparison and binlog size comparison between .NET 5 and .NET 6 previews for your codebase!",
        "createdAt": "2021-03-12T02:33:26Z",
        "updatedAt": "2021-03-12T02:33:26Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "I don't know that we will have .NET 5 to compare against -- we are still partially using msbuild (not fully using `dotnet build`) to build xamarin/xamarin-android. We have logs of small test app projects, but that might be it.\r\n\r\nWe could certainly compare building dotnet/maui with .NET 6 preview 1 vs newer previews, though.",
        "createdAt": "2021-03-12T02:45:06Z",
        "updatedAt": "2021-03-12T02:45:06Z",
        "author": {
          "login": "jonathanpeppers"
        }
      },
      {
        "body": "Nah, that\u2019s fine. Just thought if you had a history of binlogs readily available from CI, but no biggie. ",
        "createdAt": "2021-03-12T17:59:34Z",
        "updatedAt": "2021-03-12T17:59:34Z",
        "author": {
          "login": "KirillOsenkov"
        }
      }
    ]
  }
}