{
  "number": 7654,
  "title": "New diagnostic proposal: erroring on CopyToOutputDirectory=\"Always\"",
  "body": "One of the common pain points I've hit is builds re-running when they don't need to and a leading cause of this is `CopyToOutputDirectory=\"Always\"` set somewhere on a Compile/None/EmbeddedResource/etc.\r\n\r\nThese are already collected up in `GetCopyToOutputDirectoryItems` so I propose we add a diagnostic (opt-in) to let people error on this in the base SDK (`Microsoft.CurrentVersion.targets`). Here's my rudamentary attempt at such a Task working locally:\r\n\r\n```xml\r\n<Target Name=\"ComplainAboutCopyAlways\" \r\n        AfterTargets=\"_GetCopyToOutputDirectoryItemsFromThisProject\"\r\n        BeforeTargets=\"GetCopyToPublishDirectoryItems\">\r\n  <CallTarget Targets=\"_GetCopyToOutputDirectoryItemsFromThisProject\">\r\n    <Output TaskParameter=\"TargetOutputs\" ItemName=\"_ThisProjectItemsToCopyToOutputDirectory\" />\r\n  </CallTarget>\r\n  \r\n  <!-- Note: due to this being an error, it only errors on the first...not sure if we can make it error on many correctly... -->\r\n  <Error Text=\"Item '%(_ThisProjectItemsToCopyToOutputDirectory.TargetPath)' set as CopyToOutputDirectory=&quot;Always&quot;, use CopyToOutputDirectory=&quot;PreserveNewest&quot; instead.\" \r\n          Condition=\"'%(_ThisProjectItemsToCopyToOutputDirectory.CopyToOutputDirectory)'=='Always'\" />\r\n</Target>\r\n```\r\n\r\nThis produces build output when violations are detected:\r\n```\r\nC:\\path\\Directory.Build.targets(382,5): error : Item 'AlwaysCopiedFile.Txt' set as CopyToOutputDirectory=\"Always\", use CopyToOutputDirectory=\"PreserveNewest\" instead. [C:\\path\\Test.csproj]\r\n```\r\n\r\nI think this would be very useful in the base targets, opted in via some new variable (adding a condition to my above example) - thoughts on this? I'd be happy to PR it if this is amenable we get a good variable and error message (I just tried to make an initial stab). Thanks!\r\n\r\n/cc @baronfel @rainersigwald ",
  "state": "CLOSED",
  "createdAt": "2022-05-26T20:41:51Z",
  "updatedAt": "2024-12-10T19:24:33Z",
  "closedAt": "2024-12-10T19:24:33Z",
  "author": {
    "login": "NickCraver"
  },
  "labels": [
    "changewaves",
    "BuildCheck Suggestion",
    "triaged",
    "Area: BuildCheck"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "JanKrivanek"
      }
    ]
  },
  "milestone": {
    "title": "VS 17.8"
  },
  "comments": {
    "nodes": [
      {
        "body": "I support this: `CopyAlways` is a footgun.\r\n\r\nThe error message actually might be a bit annoying, because it should ideally be localized. SDK has a task to emit localized errors, but core MSBuild doesn't at the moment. That might drive the implementation into the Copy task, maybe?\r\n\r\nAlso cc @drewnoakes, who recently made this less bad for IDE-driven builds on SDK-style projects in https://github.com/dotnet/project-system/pull/7963.",
        "createdAt": "2022-05-26T20:52:49Z",
        "updatedAt": "2022-05-26T20:52:49Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Independently of the opt-in property, we could talk about a time frame to opt this on by default in the SDK, and/or to tie this into the much-anticipated 'strict mode'.  It might also be necessary to override the logic on an item by item basis (e.g. some kind of documented `AllowCopyAlways=\"true\"` metadata that also gets checked here). I think this is a better alternative than marking the entire check as `NoWarn`.",
        "createdAt": "2022-05-26T21:37:58Z",
        "updatedAt": "2022-05-26T21:37:58Z",
        "author": {
          "login": "baronfel"
        }
      },
      {
        "body": "For the change in VS (https://github.com/dotnet/project-system/pull/7963), we were motivated to avoid calling MSBuild altogether.\r\n\r\nGiven here we're already running an MSBuild build, I'd like to understand what causes the perf impact for copy-always items.\r\n\r\nIf it's that the copy touches the destination's timestamp, and that can then trigger downstream work that would otherwise be avoidable, then perhaps the approach taken in the project system would be interesting in MSBuild too.\r\n\r\nIn that PR we downgrade `CopyToOutputDirectory=\"Always\"` from _copy no matter what_ to _copy if the source and destination differ in timestamp or file size_.\r\n\r\nTelemetry shows that only 0.5% of the builds previously scheduled due to a copy-always item actually needed to copy that item.\r\n\r\n---\r\n\r\nA legitimate use case for `Always` was identified by @davkean. Consider a data file that can be modified by the application during debugging, which is to be returned to some default state during the next build.",
        "createdAt": "2022-05-30T22:09:47Z",
        "updatedAt": "2022-05-30T22:09:47Z",
        "author": {
          "login": "drewnoakes"
        }
      },
      {
        "body": "@drewnoakes The perf issue is that is triggers a re-run of targets that could be skipped - yep. If a root level project has this for example, all downstream projects will be re-built instead of targets skipped as up to date. I think `CopyToOutputDirectory=\"IfDifferent\"` or some such is totally valid, but of much greater scope to implement. I agree with the use case, but also in _most_ projects you don't have that case and opting in is a good thing to have, I think. Or, allow people to opt-out in strict...or some combo.",
        "createdAt": "2022-05-30T23:00:33Z",
        "updatedAt": "2022-05-30T23:00:33Z",
        "author": {
          "login": "NickCraver"
        }
      },
      {
        "body": "Could MSBuild just treat `Always` as `IfDifferent`? This should address the perf issue without breaking the only known use case for `Always` I've seen.\r\n\r\n\"Fixing\" this would be less friction for the user than a warning, if it's safe for us to change the behaviour. We're generally more willing to favour performance over correctness in VS than in MSBuild, hence making the change in VS first. Since shipping this change on the VS side in 17.2, we haven't heard a single complaint. We should at least discuss making the same change in MSBuild itself.",
        "createdAt": "2022-05-31T04:06:13Z",
        "updatedAt": "2022-05-31T04:06:13Z",
        "author": {
          "login": "drewnoakes"
        }
      },
      {
        "body": "> Could MSBuild just treat `Always` as `IfDifferent`? This should address the perf issue without breaking the only known use case for `Always` I've seen.\r\n\r\nWe definitely can. The existing targets explicitly disable the `Copy` tasks's built-in support for that with a comment that I find . . . unconvincing\r\n\r\nhttps://github.com/dotnet/msbuild/blob/f1dae6ab690483458d37b8900f1d1e4a5fc72851/src/Tasks/Microsoft.Common.CurrentVersion.targets#L5125-L5131\r\n\r\nSpelunking through ancient history, this has been there since `2004-12-23 17:43:33`, in a commit entitled `DCR work` that introduced `CopyOutOfDateSourceItemsToOutputDirectoryAlways`, presumably via copy-paste from the other copy invocation (where that sorta makes sense).\r\n\r\nSince it has been there for so long fixing it is scary, but I also can't think of a reasonable reason to preserve the existing behavior. **I'm willing to fix it under a change wave.**\r\n\r\nThat said, this shouldn't cause any rebuild cascades, because the copy will preserve the timestamp of the source file, so the only time cost here should be the actual copy. @NickCraver do you have an example log where you're seeing otherwise?\r\n\r\n```sh-session\r\n\u276f dir S:\\repro\\dotnet\\msbuild\\issues\\7654\\Depended\r\n\r\n    Directory: S:\\repro\\dotnet\\msbuild\\issues\\7654\\Depended\r\n\r\nMode                 LastWriteTime         Length Name\r\n----                 -------------         ------ ----\r\nd----           5/31/2022  9:50 AM                bin\r\nd----           5/31/2022  9:50 AM                obj\r\n-a---           5/31/2022  9:49 AM             53 Class1.cs\r\n-a---           5/31/2022  9:51 AM            357 Depended.csproj\r\n-a---           5/25/2022 10:31 AM              3 TextFile1.txt\r\n\r\n\r\n\u276f dir S:\\repro\\dotnet\\msbuild\\issues\\7654\\Depended\\bin\\Debug\\net7.0\r\n\r\n    Directory: S:\\repro\\dotnet\\msbuild\\issues\\7654\\Depended\\bin\\Debug\\net7.0\r\n\r\nMode                 LastWriteTime         Length Name\r\n----                 -------------         ------ ----\r\n-a---           5/31/2022  9:51 AM            416 Depended.deps.json\r\n-a---           5/31/2022  9:51 AM           3584 Depended.dll\r\n-a---           5/31/2022  9:51 AM          10272 Depended.pdb\r\n-a---           5/25/2022 10:31 AM              3 TextFile1.txt\r\n\r\n\r\n\u276f dir S:\\repro\\dotnet\\msbuild\\issues\\7654\\Depends\\bin\\Debug\\net7.0\r\n\r\n    Directory: S:\\repro\\dotnet\\msbuild\\issues\\7654\\Depends\\bin\\Debug\\net7.0\r\n\r\nMode                 LastWriteTime         Length Name\r\n----                 -------------         ------ ----\r\n-a---           5/31/2022  9:51 AM           3584 Depended.dll\r\n-a---           5/31/2022  9:51 AM          10272 Depended.pdb\r\n-a---           5/31/2022  9:51 AM            691 Depends.deps.json\r\n-a---           5/31/2022  9:51 AM           4608 Depends.dll\r\n-a---           5/31/2022  9:51 AM         147968 Depends.exe\r\n-a---           5/31/2022  9:51 AM          10452 Depends.pdb\r\n-a---           5/31/2022  9:51 AM            165 Depends.runtimeconfig.json\r\n-a---           5/25/2022 10:31 AM              3 TextFile1.txt\r\n```",
        "createdAt": "2022-05-31T14:56:31Z",
        "updatedAt": "2022-05-31T14:56:31Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I can't remember if we have a build check/analyzer for this, but if we don't we probably should. @JanKrivanek @YuliiaKovalova ",
        "createdAt": "2024-11-17T20:29:11Z",
        "updatedAt": "2024-11-17T20:29:11Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "We do not and we should.\nShould be easy to add once we have the OM for items with metadata: https://github.com/dotnet/msbuild/pull/10932. So adding this to the list and bumping up. Thanks!",
        "createdAt": "2024-11-17T21:45:28Z",
        "updatedAt": "2024-11-17T21:45:28Z",
        "author": {
          "login": "JanKrivanek"
        }
      }
    ]
  }
}