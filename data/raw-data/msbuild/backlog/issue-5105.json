{
  "number": 5105,
  "title": "Can't load loggers from Runtime package store",
  "body": "### Steps to reproduce\r\n\r\nI've somehow installed some msbuild loggers (e.g, https://www.nuget.org/packages/MSBuild.StructuredLogger/) with `dotnet store` command.\r\n\r\nManifest file\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp3.1</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"XunitXml.TestLogger\" Version=\"2.1.26\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nCommand line\r\n```\r\ndotnet store --manifest RuntimePackages.manifest --framework netcoreapp3.1 --runtime win10-x64\r\ndotnet build -l:BinaryLogger,StructuredLogger\r\n```\r\n### Expected behavior\r\n\r\nCan use `BinaryLogger` in the assembly `StructuredLogger`, which is installed in `~/.dotnet/store/**/`\r\n\r\n### Actual behavior\r\n```\r\n.NET Core\uc6a9 Microsoft (R) Build Engine \ubc84\uc804 16.4.0+e901037fe\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\nMSBUILD : error MSB1021: \ub85c\uac70\uc758 \uc778\uc2a4\ud134\uc2a4\ub97c \ub9cc\ub4e4 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4. Could not load file or assembly 'GithubActionsDotnetLogger, Culture=neutral, PublicKeyToken=null'. \uc9c0\uc815\ub41c \ud30c\uc77c\uc744 \ucc3e\uc744 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4.\r\n\uc2a4\uc704\uce58: GithubActionsDotnetLogger\r\n```\r\n\r\n### Environment data\r\n`msbuild /version` output:\r\n\r\nOS info:\r\n\r\nIf applicable, version of the tool that invokes MSBuild (Visual Studio, dotnet CLI, etc):\r\n",
  "state": "OPEN",
  "createdAt": "2020-02-04T08:02:37Z",
  "updatedAt": "2024-02-21T16:29:56Z",
  "closedAt": null,
  "author": {
    "login": "foriequal0"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Discussion"
  },
  "comments": {
    "nodes": [
      {
        "body": "MSBuild on .NET Core isn't aware of the runtime store, so you must pass a full path to the logger assembly on the command line. Did you see something that suggested that this would work?",
        "createdAt": "2020-02-04T19:33:30Z",
        "updatedAt": "2020-02-04T19:33:30Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I found a similar issue like this: https://github.com/dotnet/runtime/issues/3802\r\nI'm using my custom logger on the Github Actions. It is hosted on the private Github Package Repository, and it is used across projects in the solution. \r\nIt is only useful on the Github Actions since it transforms MSBuild errors to Github Actions logging commands, therefore it is never used in the runtime, or developer's machine.\r\nSo It is quiet annoying to add as a dependency on all projects. I might can do some conditional install or install by CLI, but it doesn't work well if I use the lockfile or anticipating deterministic build. ",
        "createdAt": "2020-02-05T02:17:10Z",
        "updatedAt": "2020-02-05T02:32:09Z",
        "author": {
          "login": "foriequal0"
        }
      },
      {
        "body": "> So It is quiet annoying to add as a dependency on all projects. I might can do some conditional install or install by CLI, but it doesn't work well if I use the lockfile or anticipating deterministic build.\r\n\r\nCan you please expand on this? I don't understand what you mean by \"use the lockfile\" or \"anticipating deterministic build\".\r\n\r\nIn general, I would expect a logger like this to be configured in your Actions definition: you'd need to\r\n\r\n1. download the logger package\r\n2. specify the logger assembly (by path) in the `dotnet build` invocation (or equivalent).\r\n\r\nI'd also note that the [setup-dotnet](https://github.com/marketplace/actions/setup-net-core-sdk) action includes an MSBuild-log-format-to-Actions-logging [problem matcher](https://github.com/actions/toolkit/blob/master/docs/problem-matchers.md) that should obviate the need to use a custom logger in Actions.",
        "createdAt": "2020-02-05T13:14:14Z",
        "updatedAt": "2020-02-05T13:14:14Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Thank you. \r\nI'm restoring my app with `--use-lock-file` and `--locked-mode`, and the options that I've counted have each unique cons.\r\n1. `<PackageReference Include=\"MyLogger\">`\r\nI have to install it for every package. I'm using `dotnet-outdated` to automatic package upgrade. It seems that it isn't compatible with `Directory.Build.props` or `<Import>` way. Also, it requires every developer should set private Github Package Repository, and issue and configure Github Personal Access Token on their computer even it is only used in the Github Actions. Just a restoring package requires PAT.\r\n2. `<PackageReference Condition=\"'$(UseMyLogger)'\" Include=\"MyLogger\">`\r\nIt inherits every cons in 1, and also it messes the lock file with `--use-lock-file` and breaks build with `--locked-mode`\r\n3. `dotnet add PROJECT package MyLogger` in the CI\r\nI have to `for PROJ in $(dotnet sln | tail -n+4); do dotnet add \"$PROJ\" ...` to install for every project in the solution, also it temporarily modifies `csproj` and `projects.lock.json` file, and I worry that it might break some deterministic property of the build?\r\n4. last option, `dotnet store`\r\n\r\nI'm already doing it with `dotnet store --output some_dir` options and some `shopt -s globstar; BUILD_LOGGER=$(ls some_dir/**/MyLogger.dll); dotnet build -l\"$BUILD_LOGGER\"`, but I think it would be better to have a regular mechanism to resolve runtime packages.\r\n\r\nI know there is a problem matcher in the `setup-dotnet`. However, I found that it is a quite fragile with `--verbosity` level and sometimes it prints twice due to the summary. I know there is a `NoSummary` option. TestLogger also suffer from the same problem and there is also multi-line output pattern match problems. That's why I'm packaging Loggers.\r\n",
        "createdAt": "2020-02-05T13:43:29Z",
        "updatedAt": "2020-02-05T13:45:08Z",
        "author": {
          "login": "foriequal0"
        }
      },
      {
        "body": "I think I'm still missing something. Why are you referencing the logger in projects? The logger is a property of the build, not individual projects.\r\n\r\nAre you doing this to make the logger available? Today, that must be done in a separate step and can't be bundled with your main build/restore operation.",
        "createdAt": "2020-02-06T18:23:17Z",
        "updatedAt": "2020-02-06T18:23:17Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Yes I am. I'm doing this to make the logger available. I thought `dotnet store` would help to separate the step and even to find assemblies.",
        "createdAt": "2020-02-06T18:29:23Z",
        "updatedAt": "2020-02-06T18:33:13Z",
        "author": {
          "login": "foriequal0"
        }
      },
      {
        "body": "MSBuild is not aware of `dotnet store`, so I'm afraid it does not help there.",
        "createdAt": "2020-02-06T18:32:02Z",
        "updatedAt": "2020-02-06T18:32:02Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Okay. Thank you for the help. Have a good day :+1: ",
        "createdAt": "2020-02-06T18:33:06Z",
        "updatedAt": "2020-02-06T18:33:06Z",
        "author": {
          "login": "foriequal0"
        }
      }
    ]
  }
}