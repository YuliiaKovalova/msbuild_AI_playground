{
  "number": 7041,
  "title": "(OutputPath) Property Break / Regression in Recent 5.0 Sdk Patch",
  "body": "### Issue Description\r\nA recent 5.0 Sdk patch changes the `$(OutputPath)` property on Windows & Linux. MacOS appears unaffected.\r\n\r\nThe break is that `$(OutputPath)` used to contain the trailing path separator (ie `path/to/build/`).\r\nNow it does not include the trailing separator `path/to/build`.\r\n\r\nThis breaks custom build targets.\r\n\r\n* This can be worked around... but the inconsistency between OS's may warrant a look.\r\n\r\n### Steps to Reproduce\r\nMacOS:\r\n* Create new dotnet project from any template (with Docker enabled)\r\n* Add build target:\r\n```\r\n  <Target Name=\"PrintOutputPath\" BeforeTargets=\"BeforeBuild\">\r\n    <Message Importance=\"high\" Text=\"Output Path: '$(OutputPath)'\" />\r\n  </Target>\r\n```\r\n* Build In MacOS terminal\r\nOutput (trimmed): `Output Path: 'bin/Release/net5.0/'`\r\n* Build In Docker container (image: `mcr.microsoft.com/dotnet/sdk:5.0`)\r\nOutput (trimmed): `Output Path: '/app/build'`\r\n\r\n-- This reproduces in latest image `mcr.microsoft.com/dotnet/sdk:5.0.403`\r\n-- Windows also appears to have this 'no trailing separator' behavior\r\n\r\n### Expected Behavior\r\n`$(OutputPath)` should include the trailing slash to avoid breaking custom build targets/tools\r\n\r\n### Actual Behavior\r\n`$(OutputPath)` does not include trailing slash on Windows & Linux\r\n\r\n### Ask us questions\r\nGiven the inconsistency between OS's I'm guessing this was not intentional?",
  "state": "CLOSED",
  "createdAt": "2021-11-17T05:45:11Z",
  "updatedAt": "2024-02-21T14:10:58Z",
  "closedAt": "2022-01-07T17:58:30Z",
  "author": {
    "login": "Cooksauce"
  },
  "labels": [
    "needs-more-info",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "VS 17.1"
  },
  "comments": {
    "nodes": [
      {
        "body": "I think this is a dupe of #5965, but this has a nicer repro, and that one has more useful details around where the bug originated. My sense is that there's some important difference between `<MyProperty Condition=\"!HasTrailingSlash('$(MyProperty)')\">$(MyProperty)\\</MyProperty>` and `<MyProperty>$([MSBuild]::EnsureTrailingSlash('$(MyProperty)'))</MyProperty>`, but I can't figure out what it is by code inspection.",
        "createdAt": "2021-11-18T00:50:35Z",
        "updatedAt": "2021-11-18T00:50:35Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "Any chance you can provide a binlog of the version where it doesn't print a slash? What version are you using? I tried your repro on Windows, using current main to build it, and it printed it out with a slash.",
        "createdAt": "2021-12-09T17:50:09Z",
        "updatedAt": "2021-12-09T17:50:09Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "Close as needs more info. Please provide an https://aka.ms/binlog and reactivate if you still see this.",
        "createdAt": "2022-01-07T17:58:30Z",
        "updatedAt": "2022-01-07T17:58:30Z",
        "author": {
          "login": "marcpopMSFT"
        }
      }
    ]
  }
}