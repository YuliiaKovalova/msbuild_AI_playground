{
  "number": 7865,
  "title": "Control CopyLocal of transitive dependencies with single Metadata",
  "body": "### Goal\r\n- The goal is to use a single ItemMetadata on the ProjectReference to control, whether the referenced Project and all its dependencies are copied to the output or not (this includes Nugets as well as other Projects).\r\n\r\n### Usecase\r\n- an Application with Plugins, where the Plugins should compile against some API Projects\r\n- in a single Solution\r\n- the API Projects themselves have references to other Projects/Nugets (also transitively)\r\n- the Plugins should not Copy any API Projects/Nugets into their build directory. (as they are already present in the Application)\r\n\r\n### Steps to Reproduce\r\n- I uploaded my [sample project](https://github.com/felix-ri/Msbuild-Bug-3)\r\n- the reference chain is: PluginA => LibA =>LibB\r\n- both libs also have Nugets\r\n- I tried to achieve my goal by adding `<Private>false</Private>` and `<ExcludeAssets>runtime</ExcludeAssets>` to the ProjectReference\r\n- to simplify this, I added the `<KopiLokal>true</KopiLokal>` MetaData Attribute to the ProjectReference \r\n- and set the Private and ExcludeAssets in a Target, that executes as InitialTargets\r\n- Initially, I tried to use ItemDefinitionGroup to set the defaults for Private and ExcludeAssets to false and runtime and override them in the Task\r\n- but then, when building with VS, it couldn't find the dlls of the nugets (it searched in the outputs of the Libs and not in the nuget packages directory)\r\n\r\n### Expected Behavior\r\n- when KopiLokal true, all Nugets and Libs are in the output\r\n- when KopiLokal false, none of the Nugets and Libs are in the output\r\n- I used KopiLokal, because I don't know if there is already a Metadata CopyLocal\r\n- Also I expect the build to produce the same output, when built from Visual Studio and from `dotnet build` CLI\r\n\r\n### Actual Behavior\r\n- when building with CLI, LibB is still in the output directory\r\n- when building with VS\r\n  - LibB is still in the output directory \r\n  - all nugets are also copied to the output directory\r\n\r\n### Build Environment\r\n- Microsoft Visual Studio Professional 2022 (2) (64-bit) - Current Version 17.2.5\r\n- Microsoft (R) Build Engine version 17.2.0+41abc5629 for .NET\r\n- The dotnet sdk version is 6.0.302\r\n\r\n### Questions\r\n- What is the intended way to control the copylocal behaviour of References (Project and Package) (direct and transitive)?",
  "state": "CLOSED",
  "createdAt": "2022-08-08T11:22:15Z",
  "updatedAt": "2022-08-16T09:18:11Z",
  "closedAt": "2022-08-10T21:08:51Z",
  "author": {
    "login": "felix-ri"
  },
  "labels": [
    "needs-triage"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "You should be able to set CopyToOutputDirectory to Never, but I found an open issue that that doesn't work:\r\n#4795\r\n\r\nClosing this as a duplicate, but feel free to ping on the other issue. (I added needs-triage to it just now, so we'll hopefully pick it up in the next triage meeting.) Thanks for the report!",
        "createdAt": "2022-08-10T21:08:51Z",
        "updatedAt": "2022-08-10T21:08:51Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "- CopyToOutputDirectory didn't help. \r\n- I also don't think CopyToOutputDirectory works on ProjectReferences.\r\n- My problem isn't, that I can't prevent the direct ProjectReference from being in the Output dir.\r\n- My problem is, that I can't prevent the indirect Project and PackageReferences from being in the Output dir. (with Metadata on the first reference)",
        "createdAt": "2022-08-11T06:50:28Z",
        "updatedAt": "2022-08-11T06:50:28Z",
        "author": {
          "login": "felix-ri"
        }
      },
      {
        "body": "Duplicate of #4371 ",
        "createdAt": "2022-08-11T13:58:43Z",
        "updatedAt": "2022-08-11T13:58:43Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@felix-ri please see #4371 for details about that scenario.",
        "createdAt": "2022-08-11T13:59:14Z",
        "updatedAt": "2022-08-11T13:59:14Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": " ```\r\n\t<ItemGroup>\r\n\t\t<ProjectReference Include=\"..\\LibA\\LibA.csproj\">\r\n\t\t\t<Private>false</Private>\r\n\t\t\t<IncludeAssets>compile</IncludeAssets>\r\n\t\t</ProjectReference>\r\n\t</ItemGroup>\r\n```\r\n- using this Metadata results in no nugets in the output directory, like expected.\r\n- LibA is also not in the output directory, like expected.\r\n- however the transitively referenced LibB still ends up in the output\r\n\r\n### Workaround\r\n- it works, when `IncludeAssets` is set to `none`, but then I can't use transitive Assemblies in PluginA\r\n- this is not ideal, but we can work with that, thank you!",
        "createdAt": "2022-08-11T14:50:18Z",
        "updatedAt": "2022-08-11T14:50:18Z",
        "author": {
          "login": "felix-ri"
        }
      },
      {
        "body": "@felix-ri can you try `ExcludeAssets=\"runtime\"`?",
        "createdAt": "2022-08-11T20:26:34Z",
        "updatedAt": "2022-08-11T20:26:34Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "This has the same effect as `<IncludeAssets>compile</IncludeAssets>`: LibB is still in the output.",
        "createdAt": "2022-08-12T08:21:53Z",
        "updatedAt": "2022-08-12T08:21:53Z",
        "author": {
          "login": "felix-ri"
        }
      },
      {
        "body": "however putting the `ExcludeAssets=\"runtime\"` in a ItemDefinitionGroup works:\r\n```\r\n<ItemDefinitionGroup>\r\n\t<ProjectReference>\r\n\t\t<Private>false</Private>\r\n\t\t<ExcludeAssets>runtime</ExcludeAssets>\r\n\t</ProjectReference>\r\n</ItemDefinitionGroup>\r\n```\r\nShould it matter, if it's declared on the ItemGroup (specific ProjectReference) or on an ItemDefinitionGroup (generally for all ProjectReferences)?",
        "createdAt": "2022-08-16T09:18:11Z",
        "updatedAt": "2022-08-16T09:18:11Z",
        "author": {
          "login": "felix-ri"
        }
      }
    ]
  }
}