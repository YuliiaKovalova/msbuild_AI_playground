{
  "number": 8412,
  "title": "Research for Evaluation JIT/transpile",
  "body": "# Background\r\n\r\nEvaluation interpret XML project files. There is hypothesis that if this interpretation if JITed or transpilled it could significantly speed up Evaluation.\r\n\r\nDOD:\r\n- measurement of possible gain\r\n- high level design",
  "state": "CLOSED",
  "createdAt": "2023-02-07T14:26:52Z",
  "updatedAt": "2024-10-08T14:57:37Z",
  "closedAt": "2024-06-04T15:02:38Z",
  "author": {
    "login": "rokonec"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "rokonec"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "## High level Evaluation execution\r\nMapped evaluation exception including measured evaluation % times for `OrchardCore`\r\n![Evaluation](https://user-images.githubusercontent.com/25249058/228249549-27cc9c12-ee83-4fc5-a840-480514882d48.png)\r\n\r\nAs we can see, Pass 1 take 80% of time as it parse all imports, conditions and project files, it gather and stores all project files elements into local collections.\r\n\r\nWhen looking at traces I have identified these high level methods of high importance:\r\n\r\n| % of evaluation | Method name | % of IO |\r\n| ----------------- | ---------------- | ------------------ |\r\n| 27% | EvaluatePropertyGroupElement | 90% \r\n| 24% | ExpandPropertiesLeaveTypedAndEscaped | 90%\r\n| 16% | EvaluateCondition | 95%\r\n| 15% | LoadDocument | 49%\r\n| 14% | TryExecuteWellKnownFunction | 100%\r\n| 12% | XML | 60%\r\n| 12% | NuGetFrameworkWrapper..ctor() | 100%\r\n| 10% | NuGet.Frameworks.DefaultCompatibilityProvider.Instance | 100% \r\n| 5% | FileOrDirectoryExistsNoThrow | 100%\r\n| 1.2% | system.collections.immutable | 0%\r\n\r\nMost of these methods would not leverage from compiling Evaluation as those are IO bounded. \r\n`LoadDocument` looks promising but, as 40% of it is non IO operations which could be somehow optimized by compiling Evaluation. This will be 5% of maximum gain from Evaluation time.\r\nThis would be rather big effort and I am not 100% sure of its feasibility. Evaluation data are tightly coupled with XML, so project files could be programmatically changed and saved. That might means that we would need to load XML anyway and link it with `ProjectData`. In theory this could be done only when need for project file changes is detected - maybe. \r\nAll in all, I am not sure if complexity of changes vs possible perf gain is a good trade here. I believe that same effort invested somewhere else can be more beneficial.\r\n\r\n## Other possible optimization strategies\r\n\r\nAs majority of time is spent in various IO, see image bellow, good strategy to improve Evaluation perf might be to optimize IO by caching Evaluation resutls. \r\n\r\n![image](https://user-images.githubusercontent.com/25249058/228544112-3cf48531-607d-4677-ac6e-bcb923272aad.png)\r\n\r\n### Caching evaluation results\r\nVS Project System has worked on caching evaluation. At this point I am not sure how mature and reliable this effort is, I will contact related VS engineer to find out.\r\n\r\nRelated sources:\r\n\r\nhttps://dev.azure.com/devdiv/DevDiv/_git/CPS?path=/src/Microsoft.VisualStudio.ProjectSystem.Implementation/ProjectSerialization\r\n\r\nhttps://dev.azure.com/devdiv/DevDiv/_wiki/wikis/DevDiv.wiki/20932/Project-evaluation-cache\r\n\r\n\r\n### Faster SDK project files deserialization\r\nIdea is to store XMLs in format which is faster to deserialize than XMLs and would directly deserialize to MSBuild `ProjectRoot` internal data model.\r\nMian risk here is that related `ProjectRootElement` is public class and it might be impossible to change without braking its contract.\r\nPossible gain is estimated at max 5% of Evaluation.\r\n\r\n### Delta caching \r\nIdea is to represent project file by set of actions which mutate `EvaluationData` state. We can compute and cache definitions of such actions for particular combinations/hashes of global properties and other Evaluation inputs.\r\nAdditionally it could compress some properties/items intermediate states (propX = \"a\" then propX = \"b\" would become \"set propX to \"b\").\r\n\r\n### Partial state caching\r\nDuring evaluation of a project file it is (simplified):\r\n  a) evaluate bunch of pre project imports recursively\r\n  b) evaluate project.csproj\r\n  c) evaluate bunch of  post project imports recursively\r\n\r\nAs a) is very often set of immutable imports, maybe we can, for particular global properties, cache that state after a) and do b) and c) as usual. Or interpret c) as Delta caching mentioned above.\r\n\r\n### Caching Conditions evaluation\r\nConditions take ~16% of Evaluation time. Most of its wall clock time is spend at IO, file existence test mostly. So maybe caching conditions results by its inputs and also cache related tested files existence might render better performacne.\r\n\r\nAt minimum I would try to implement optimized immutable files check in `FileUtilities.FileOrDirectoryExistsNoThrow`\r\n \r\n### Look at `NuGet.Frameworks.DefaultCompatibilityProvider`\r\nThis is suspiciously slow, I do not see obvious reason why should Evaluation spent 10% on nuget. It does not feel right.\r\n",
        "createdAt": "2023-03-28T14:13:39Z",
        "updatedAt": "2023-03-29T14:15:44Z",
        "author": {
          "login": "rokonec"
        }
      },
      {
        "body": "@rokonec thank you for the analysis. To clarify, are you measuring evaluation as it happens in a command-line build, solution load, or some other benchmark? I think it would be good to define the scenarios we're aiming to improve.\r\n\r\n- If our goal is to improve command line build, what is the time spent in evaluation relative to total build time? In other words, how much would we gain end-to-end if evaluation was instantaneous?\r\n- Similar question for an IDE scenario such as solution load or configuration switch. How much can evaluation move the needle there? In IDE we typically operate with populated caches so for example `LoadDocument` should be largely irrelevant.",
        "createdAt": "2023-04-03T08:42:14Z",
        "updatedAt": "2023-04-03T08:42:14Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "@ladipro @rainersigwald Do we plan to look into this further, or shall we close this issue?",
        "createdAt": "2023-06-14T07:51:07Z",
        "updatedAt": "2023-06-14T07:51:07Z",
        "author": {
          "login": "rokonec"
        }
      },
      {
        "body": "I'm ok closing it since we don't have any planned action.",
        "createdAt": "2023-06-14T15:16:12Z",
        "updatedAt": "2023-06-14T15:16:12Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Agree with Rainer that it's fine closing although I suspect we'll come back to this at some point in the future. Thank you!",
        "createdAt": "2023-06-15T07:11:56Z",
        "updatedAt": "2023-06-15T07:11:56Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "Worth noting here that since we did this analysis we released a command-line property/item evaluation feature that relies on repeated evaluations. Evaluation caching or eval perf speedups make that command even faster.",
        "createdAt": "2024-10-08T14:57:35Z",
        "updatedAt": "2024-10-08T14:57:35Z",
        "author": {
          "login": "baronfel"
        }
      }
    ]
  }
}