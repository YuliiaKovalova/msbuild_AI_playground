{
  "number": 2006,
  "title": ".NET Core MSBuild is missing the LC task",
  "body": "_From @alienisty on April 24, 2017 1:58_\n\n## Steps to reproduce\r\nJust create a project with a licenses.licx file definition and build the project with \r\n\r\n> dotnet build project.csproj \r\n\r\n## Expected  behavior\r\nThe project builds and the license information are compiled in the binaries\r\n\r\n## Actual behavior\r\nThe following error is raised: \r\n\r\n> C:\\Program Files\\dotnet\\sdk\\1.0.3\\Microsoft.Common.CurrentVersion.targets(2977,5): error MSB4062: The \"Microsoft.Build.Tasks.LC\" task could not be loaded from the assembly Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a.  Confirm that the <UsingTask> decl\r\naration is correct, that the assembly and all its dependencies are available, and that the task contains a public class that implements Microsoft.Build.Framework.ITask.\r\n    0 Warning(s)\r\n    1 Error(s)\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n> .NET Command Line Tools (1.0.3)\r\n> \r\n> Product Information:\r\n>  Version:            1.0.3\r\n>  Commit SHA-1 hash:  37224c9917\r\n> \r\n> Runtime Environment:\r\n>  OS Name:     Windows\r\n>  OS Version:  6.3.9600\r\n>  OS Platform: Windows\r\n>  RID:         win81-x64\r\n>  Base Path:   C:\\Program Files\\dotnet\\sdk\\1.0.3\r\n\r\n\r\n\r\n\r\n\n\n_Copied from original issue: dotnet/cli#6389_",
  "state": "CLOSED",
  "createdAt": "2017-04-24T17:08:10Z",
  "updatedAt": "2024-02-21T17:19:41Z",
  "closedAt": "2019-07-24T20:45:50Z",
  "author": {
    "login": "livarcocc"
  },
  "labels": [
    ".NET Core",
    "Area: Tasks",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "_From @alienisty on April 24, 2017 2:1_\n\nNote that building the project with MSBuild provided with Visual Studio 2017 builds the project fine.\r\nI also checked the core tasks dlls from the donet core SDK and VS2017 and the one from the dotnet core sdk is actually missing the LC task, while the VS2017 one has it.",
        "createdAt": "2017-04-24T17:08:10Z",
        "updatedAt": "2017-04-24T17:08:10Z",
        "author": {
          "login": "livarcocc"
        }
      },
      {
        "body": "I'm also experiencing this problem. I tried pointing our build script to MSBuild.exe in the Visual Studio installation path (..\\Program Files (x86)\\..\\) but I still get this error.",
        "createdAt": "2017-08-01T19:15:13Z",
        "updatedAt": "2017-08-01T19:16:33Z",
        "author": {
          "login": "rustyhann"
        }
      },
      {
        "body": "The LC task wasn't ported to .NET Core because `lc.exe` isn't available in a cross-platform version (that I know of, anyway). The task just calls the executable, so it wouldn't work on non-Windows platforms.\r\n\r\nThe best way to deal with this today is to use full-framework `msbuild.exe`, which does have the task.\r\n\r\n@rustyhann, you're saying that's not working for you, which is unexpected. How exactly are you invoking the build? Could you share a diagnostic-level build log?",
        "createdAt": "2017-08-01T19:22:55Z",
        "updatedAt": "2017-08-01T19:22:55Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald \r\n\r\nThank you for the quick reply,\r\n\r\nI'm working on generating a diagnostic log now. While that's running I can provide some background on our project. \r\n\r\nWe started the project as a .NET Core project (using dotnet new), then changed the target to \"net462\". We're doing this as a way to move to .NET Core completely while we migrate our legacy libraries. The full path we're using in our build script is:\r\n\r\n\"'C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Professional\\MSBuild\\15.0\\Bin\\MSBuild.exe'\"\r\n\r\nWe switched to this when we migrated to Visual Studio 2017. It solved most of our build issues until we ran into the lc.exe error.\r\n\r\nI'll post the diagnostic build log when it's finished.\r\n\r\n--Update\r\n\r\nI've stored the file in OneDrive and sent a link.",
        "createdAt": "2017-08-01T19:52:23Z",
        "updatedAt": "2017-08-01T20:27:51Z",
        "author": {
          "login": "rustyhann"
        }
      },
      {
        "body": "When this issue will be fixed? I faced the same issue with Teletik license file.",
        "createdAt": "2017-10-03T19:09:28Z",
        "updatedAt": "2017-10-03T19:09:28Z",
        "author": {
          "login": "vanthao"
        }
      },
      {
        "body": "You can work around this by building with MSBuild and deploying with MSDeploy. The .Net Core tools will not work. The root issue for our scenario was dotnet publish was calling dotnet build. The no-compile option was deprecated in dotnet build. Even if we used MSBuild before calling dotnet publish we still had the issue. Switching to MSDeploy was the answer.",
        "createdAt": "2017-10-10T01:47:24Z",
        "updatedAt": "2017-10-10T01:47:24Z",
        "author": {
          "login": "rustyhann"
        }
      },
      {
        "body": "> The LC task wasn't ported to .NET Core because `lc.exe` isn't available in a cross-platform version (that I know of, anyway). The task just calls the executable, so it wouldn't work on non-Windows platforms.\r\n\r\nMakes sense. But does .NET Core 3's support of WinForms controls (on Windows) change things?",
        "createdAt": "2018-11-29T10:22:47Z",
        "updatedAt": "2018-11-29T10:22:47Z",
        "author": {
          "login": "iainnicol"
        }
      },
      {
        "body": "> Makes sense. But does .NET Core 3's support of WinForms controls (on Windows) change things?\r\n\r\nThat's a good question. @merriemcgaw do you know if there are plans to bring `lc.exe` to core?\r\n\r\n\r\n",
        "createdAt": "2018-11-29T16:07:02Z",
        "updatedAt": "2018-11-29T16:07:02Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Thanks for forwarding on the question.\r\n\r\nNote that even if the \"dotnet\" command does not get support, a tweak to the (.NET Framework) msbuild task would still be useful. Similarly to #2836, (.NET Framework) msbuild passes giant command line arguments to lc.exe, when targetting netcoreapp3.0.",
        "createdAt": "2018-11-29T17:04:40Z",
        "updatedAt": "2018-11-29T17:04:40Z",
        "author": {
          "login": "iainnicol"
        }
      },
      {
        "body": "I know it's been discussed, but I don't know where the discussions have landed yet. ",
        "createdAt": "2018-11-29T21:07:42Z",
        "updatedAt": "2018-11-29T21:07:42Z",
        "author": {
          "login": "merriemcgaw"
        }
      },
      {
        "body": "Running desktop lc.exe on core assemblies is busted. See https://github.com/dotnet/corefx/issues/24200#issuecomment-461803927.  I think this needs to be fixed. We have had a few customers ask for the licensing functionality in netcore 3.0.",
        "createdAt": "2019-02-08T14:44:48Z",
        "updatedAt": "2019-02-08T14:44:48Z",
        "author": {
          "login": "ericstj"
        }
      },
      {
        "body": "@ericstj Thanks for pointing to the issue I faced. I'd like to add we need this not just for licensing components/controls but also plain class libraries. In fact right now for .NET core we are trying this only for the plain class library case.",
        "createdAt": "2019-02-08T14:52:24Z",
        "updatedAt": "2019-02-08T14:52:24Z",
        "author": {
          "login": "sansjunk"
        }
      },
      {
        "body": "@sansjunk thanks for the scenario explanation. I will be working with my team to make a plan for when/how we migrate lc.exe support to Core.",
        "createdAt": "2019-02-08T20:53:41Z",
        "updatedAt": "2019-02-08T20:53:41Z",
        "author": {
          "login": "merriemcgaw"
        }
      },
      {
        "body": "Should we move this issue to the winforms repo?",
        "createdAt": "2019-02-08T21:43:28Z",
        "updatedAt": "2019-02-08T21:43:28Z",
        "author": {
          "login": "livarcocc"
        }
      },
      {
        "body": "> Should we move this issue to the winforms repo?\r\n\r\nWPF uses the same licensing model",
        "createdAt": "2019-04-03T13:48:54Z",
        "updatedAt": "2019-04-03T13:48:54Z",
        "author": {
          "login": "IrinaPykhova"
        }
      },
      {
        "body": "Is this issue expected to be fixed for the final .NET Core 3.0 release?",
        "createdAt": "2019-07-24T08:04:49Z",
        "updatedAt": "2019-07-24T08:04:49Z",
        "author": {
          "login": "jroessel"
        }
      },
      {
        "body": "This issue was moved to dotnet/winforms#1462",
        "createdAt": "2019-07-24T20:45:49Z",
        "updatedAt": "2019-07-24T20:45:49Z",
        "author": {
          "login": "livarcocc"
        }
      }
    ]
  }
}