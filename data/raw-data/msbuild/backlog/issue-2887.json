{
  "number": 2887,
  "title": "Need a way to indicate dependencies on other projects",
  "body": "Currently MSBuild uses `<ProjectReference>` items to indicate dependencies between projects and there's logic in the common targets to ensure that the build order is correct and ProjectReferences are respected.\r\n\r\nHowever it is my current understanding that this is specific to typical C# projects, and there's no MSBuild generic way to indicate a project's dependency on other projects. There also doesn't seem to be a way to hint to the solution build in which order to build the projects, apart from the ProjectReference mechanism.\r\n\r\nIf so, we need to design a generic way to indicate dependency across projects, to minimize work and initially building the projects in the right order vs. imperatively triggering a build for dependencies once we encounter the dependency.",
  "state": "OPEN",
  "createdAt": "2018-01-22T23:51:49Z",
  "updatedAt": "2025-04-15T13:53:42Z",
  "closedAt": null,
  "author": {
    "login": "KirillOsenkov"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "needs-design",
    "Priority:1",
    "triaged"
  ],
  "comments": {
    "nodes": [
      {
        "body": "Example investigation:\r\nhttps://github.com/Microsoft/Git-Credential-Manager-for-Windows/pull/529\r\n\r\nExample fix 1:\r\nhttps://github.com/Microsoft/Git-Credential-Manager-for-Windows/pull/529/commits/83f2e7aefe23c83091eab0a5d6a41b9de7ad4e1e\r\nHere we imperatively trigger the build for dependencies instead of declaratively specifying them.\r\n\r\nExample fix 2:\r\nhttps://github.com/Microsoft/Git-Credential-Manager-for-Windows/pull/529/commits/bfdf2b549063880c0a1f94712bedd14c9d79f949\r\nHere we need to make sure we enumerate the directory produced by our dependencies AFTER the dependencies have been built imperatively. If we enumerate the directory normally (during evaluation), it will run before the dependencies have been built. If we had a declarative mechanism to specify project dependencies the evaluation of the dependent project would start after the dependencies have been built, and so everything would work as expected, no surprises.",
        "createdAt": "2018-01-22T23:55:09Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "Solutions allow specifying build order dependencies, which MSBuild respects. And ProjectReference works for vcxproj too, at least . . . what have you seen to make you think otherwise?",
        "createdAt": "2018-01-22T23:55:13Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Well, we've seen that solutions only work if the VS toolchain is relied upon. If a dev makes a project from scratch, there's very little rolling to assist with dependencies and easy way to debug / understand the problem.\r\n\r\nAdditionally, most code bases are too large for solutions ",
        "createdAt": "2018-01-23T00:09:37Z",
        "author": {
          "login": "whoisj"
        }
      },
      {
        "body": "@rainersigwald we regularly get complaints of project build order in solutions not being respected by msbuild.",
        "createdAt": "2018-01-23T02:32:31Z",
        "author": {
          "login": "chrispat"
        }
      },
      {
        "body": "@chrisrpatterson Send them to us, please. Any such problem is a bug in MSBuild.",
        "createdAt": "2018-01-23T15:30:56Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald Hi, I was sent here by @KirillOsenkov and @chrisrpatterson \ud83d\ude0f \r\n\r\nSo the net issue was that I had a custom script that was being replaced with MSBuild. The script did the following:\r\n\r\n1. Use Pandoc to convert .md into .html for help files.\r\n2. Collect the output of a bunch of related projects.\r\n3. Combine the outputs into an installer using InnoSetup.\r\n4. Generate a ZIP xcopy-able alternative to the installer.\r\n\r\nThe primary motivations for moving away from the script were:\r\n\r\n1. The script was fairly opaque.\r\n2. Binary signing wasn't something we could do using existing tool set from a script.\r\n3. Custom scripts aren't supposed to be easier/better/more reliable than build systems.\r\n\r\nSince I was replacing a .cmd BATCH script, I started with an empty .proj file and built it up from there. I believed that should be completely doable, and it mostly worked. Dependencies and therefore build ordering didn't.\r\n\r\nI'd attempted to establish dependencies via stack of `ProjectReference` nodes like the one below\r\n```\r\n    <ProjectReference Include=\"..\\Cli-Askpass\\Cli-Askpass.csproj\">\r\n      <Project>{19770407-B33A-4EBE-92B8-04C93F43CAE0}</Project>\r\n      <Name>Cli-Askpass</Name>\r\n    </ProjectReference>\r\n```\r\n\r\nBut they were seemingly ignored, and every build was failing. The solution (found by @KirillOsenkov) was [`<MSBuild Projects=\"@(ProjectReference)\" Targets=\"Build\" />`](https://github.com/Microsoft/Git-Credential-Manager-for-Windows/pull/529/commits/83f2e7aefe23c83091eab0a5d6a41b9de7ad4e1e).\r\n\r\nTL:DR:\r\n\r\nThe outcome was that MSBuild only cared about project dependencies when invoked from Visual Studio. Why? When building from the \"Developer Command Prompt for VS 2017\" and/or from AppVeyor, MSBuild seemed to completely ignore the dependencies, with absolutely no indication as to why.",
        "createdAt": "2018-01-23T15:56:57Z",
        "author": {
          "login": "whoisj"
        }
      },
      {
        "body": "> The outcome was that MSBuild only cared about project dependencies when invoked from Visual Studio. Why?\r\n\r\nBecause the solution lies to Visual Studio and claims that this new project is a normal `.csproj` solution line: https://github.com/Microsoft/Git-Credential-Manager-for-Windows/blob/b77f58639f18a6525f07967ef2006ff1a4b9f9bb/GitCredentialManager.sln#L49\r\n\r\nThat confused VS into thinking that the `ProjectReference`s would do something, because it has a parallel-but-inaccurate understanding of the nature of references. MSBuild sees that nothing consumes `@(ProjectReference)` and does nothing with it.\r\n\r\nThis is a bug in VS, though probably not one worth fixing.\r\n\r\nI'd love to get your feedback on how we can make [the documentation on how to implement `ProjectReference`s](https://github.com/Microsoft/msbuild/blob/master/documentation/ProjectReference-Protocol.md) more obvious!",
        "createdAt": "2018-01-23T16:10:54Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> I'd love to get your feedback on how we can make the documentation on how to implement ProjectReferences more obvious!\r\n\r\nFirstly, I would have love to have know that docs on GitHub even existed. I trolled Bing and Google and came up mostly empty. In fact, the only reason I used `ProjectReferences` and I \"lied\" to Visual Studio is that I was attempting to make anything work using one part first-principles and one part hack-it.\r\n\r\nSecondly, does msbuild even have a help command? I mean a deep diving or, at least, redirecting to official documentation command?",
        "createdAt": "2018-01-23T16:21:11Z",
        "author": {
          "login": "whoisj"
        }
      },
      {
        "body": "What kinds of search terms were you using? Maybe we can SEO a bit.\r\n\r\n> Secondly, does msbuild even have a help command? I mean a deep diving or, at least, redirecting to official documentation command?\r\n\r\nNo, and we should. Filed #2892 as the minimum.",
        "createdAt": "2018-01-23T16:35:58Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> What kinds of search terms were you using? Maybe we can SEO a bit.\r\n\r\n\"msbuild project ordering\", \"msbuld project dependencies\", \"msbuild choosing last project built\"\r\n\r\nThere were lots of stackoverflow.com threads of people with questions about the same topic in the results, none of which had sufficient answers. :unamused:\r\n\r\nThere were lots of examples of how to order Targets, and even conflicting reports of how to use `AfterTargets` and `BeforeTargets`, and let's be honest the \"wording\" of those names can be looked at two different ways (read: very confusing). Still, nothing to unblock me - except on blog about adding `ProjectReferences` and using that .sln hack which mostly unblocked me.\r\n\r\nRemember, I was adamant that the final solution did not require Visual Studio to be installed or even available. I work on Visual Studio for a living, and I love Visual Studio, but I am/was not willing to accept that I needed an IDE to build source code. \ud83d\ude0f ",
        "createdAt": "2018-01-23T16:44:45Z",
        "author": {
          "login": "whoisj"
        }
      },
      {
        "body": "If I may add to this discussion, we have a software product that consists out of 30+ solutions (containing a mix of c++/c#/java/etc) and we created our own msbuild project files that orchestrate building these \u201csubsystems\u201d solutions in the right order (using a similar dependency mechanism as project references does in c#). \r\nIt would be really appreciated it if there is a better/official/documented way of managing and building dependencies of (also non c#) projects.",
        "createdAt": "2018-02-08T17:13:57Z",
        "author": {
          "login": "japj"
        }
      },
      {
        "body": "@rainersigwald When considering whether MSBuild should lean on solution-based dependencies, it's worth keeping in mind that MSBuild behavior differs from that of Visual Studio when working with dependencies specified in a solution. In particular, if a solution specifies a dependency with `ProjectSection(ProjectDependencies) = postProject` and the project being depended on has an item with `<CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>`, MSBuild will include that item in the dependent project's output, whereas Visual Studio will not.\r\n\r\nThis behavior caused surprise results on the automated build for us when working with a project that was a dependency because it needed to build so that MSBuild would use it as a custom task. To avoid the unwanted files in the dependent project's output, we ended up building the dependency using a MSBuild task inside our custom target. In this way, MSBuild does a nice job of supporting arbitrary dependencies.",
        "createdAt": "2019-06-15T02:03:18Z",
        "author": {
          "login": "breyed"
        }
      },
      {
        "body": "Related: https://github.com/dotnet/msbuild/issues/4795",
        "createdAt": "2023-05-09T15:33:58Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "That's a circular reference to the same bug @JanKrivanek :)",
        "createdAt": "2023-05-09T16:22:24Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "> That's a circular reference to the same bug @JanKrivanek \r\n\r\nOops :-) \r\nEdited",
        "createdAt": "2023-05-09T16:28:08Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "> Solutions allow specifying build order dependencies, which MSBuild respects. \r\n\r\nSln-level dependencies do not scale in environments with multiple .slns, nor those using solution generation. ",
        "createdAt": "2023-12-13T00:43:13Z",
        "author": {
          "login": "chipplyman"
        }
      },
      {
        "body": "Our use cases for this feature are:\r\n\r\n1. CodeGen.  We need a way to say \"the codegen project builds before any project that executes it\", without shipping the codegen exe with the consuming projects.\r\n2. Plugins.  We need a way to say \"the plugins all build before the exe container that exercises them\", without allowing any references to plugin-specific code to sneak into the container project, and without placing the plugin dlls in the exe output directory.\r\n\r\nWe use multiple slns, and it has proven very difficult, brittle, and unintuitive to maintain the sln-level ordering dependencies across all of them.\r\nWe are moving towards solution generation, and it has proven impossible to find a solution generator that supports sln-level ordering dependencies.",
        "createdAt": "2023-12-22T23:20:52Z",
        "author": {
          "login": "chipplyman"
        }
      },
      {
        "body": "Almost feels like the need for a new top-level syntax:\r\n\r\n```xml\r\n<Project>\r\n\r\n  <Dependencies>\r\n    <Dependency Include=\"..\\path\\to\\Other.proj\" />\r\n    <Dependency Include=\"..\\path\\to\\Another.proj\" OutputItemType=\"OutputFromAnotherProject\" />\r\n  </Dependencies>\r\n\r\n</Project>\r\n```\r\n\r\nAnd MSBuild/VS would \"peek\" into the project to get a list of dependencies, take that information into account in the metaproj to sort projects topologically (potentially overriding the information coming from solution dependencies in VS), such that when the project begins evaluation and execution it is guaranteed that the dependencies have been built.\r\n\r\nIf the project is built standalone, we'd peek as well, before evaluation, build the dependent projects, then evaluate and build this one.\r\n\r\nRealistically the above sounds like science fiction, doubt this will ever happen. But one can brainstorm!\r\n\r\nThe ProjectReference protocol and mechanism would remain untouched, it's just when ResolveProjectReferences calls into referenced projects to be built, they will have been built already. This would make sure that at the time of evaluating a project, it's project references have been built already.",
        "createdAt": "2023-12-22T23:35:02Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "I've considered making a local partial copy of the ResolveProjectReferences target and transforming it to reference a new custom Item type, to implement this functionality without taking all the other cruft that comes with ProjectReferences.  AFAICT at the core, ResolveProjectReferences effectively just says \"build this project now instead of waiting for it to happen as part of the top-level list\".  I don't know whether the build system will handle that correctly; I fear it might try to build the same project twice (which is a dealbreaker) if we can't get the ordering metadata into the project dependency graph up front - and of course we'd need to account for the fact that msbuild and VS have entirely distinct mechanisms for this functionality.",
        "createdAt": "2023-12-23T00:10:53Z",
        "author": {
          "login": "chipplyman"
        }
      },
      {
        "body": "The problem is that you often want the references to be built by the time the evaluation starts. The current project reference infrastructure goes and ensures the references are built after the evaluation of our project is already done and we're in the middle of building the current project's targets (e.g. everything that comes before ResolveProjectReferences will run before the references have been built).",
        "createdAt": "2023-12-23T01:44:38Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "Was their any progress on this feature since 2023?\nI would really like to use something like this for code generated libaries in my project.",
        "createdAt": "2025-04-02T06:55:20Z",
        "author": {
          "login": "paule96"
        }
      }
    ]
  }
}