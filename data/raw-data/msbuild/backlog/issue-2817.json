{
  "number": 2817,
  "title": "Consider using compiled regexes in globbing code",
  "body": "Need experimentation to find how bad regex matching is during globbing and, whether to always have this on, or when, in the middle of globbing, to switch to compiled regexes.",
  "state": "CLOSED",
  "createdAt": "2017-12-15T21:28:30Z",
  "updatedAt": "2024-02-21T17:15:09Z",
  "closedAt": "2021-02-17T18:17:21Z",
  "author": {
    "login": "cdmihai"
  },
  "labels": [
    "Area: Performance",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "ladipro"
      }
    ]
  },
  "milestone": {
    "title": "MSBuild 16.10"
  },
  "comments": {
    "nodes": [
      {
        "body": "When running on .NET Core, the break-even point for the typical regex we use in globbing is ~8000 matches. In other words, it's better to compile the regex if we know we're going to use it at least 8000 times.\r\n\r\nWhen running on .NET Framework, there is no such breaking point as matching against the compiled regex is actually ~30% slower (!!!).\r\n\r\nI've used this regex for the test:\r\n```\r\n^(?<FIXEDDIR>)(?<WILDCARDDIR>((.*/)|(.*\\\\)|())\\.[^/\\\\]*((/)|(\\\\)|(/.*/)|(/.*\\\\)|(\\\\.*\\\\)|(\\\\.*/)))(?<FILENAME>[^/\\\\]*)$\r\n```\r\n\r\nand matched it against strings like:\r\n```\r\nsome_directory\\some_file.txt\r\n```",
        "createdAt": "2021-02-10T11:43:47Z",
        "updatedAt": "2021-02-10T11:43:47Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "So it looks like it's not worth it right? We don't really know how many users experience more than 8000 matches, and the machinery to make it adaptive would make the code more complex for dubious benefits.\r\nIt would be awesome on the other hand if the Regex APIs had some ETW events to help us measure how many times a specific pattern is matched during a build and pipe into the VS / dotnet telemetry.\r\n\r\nFeel free to close the issue if you agree.",
        "createdAt": "2021-02-16T22:17:31Z",
        "updatedAt": "2021-02-16T22:17:31Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "If `Regex` is appearing in traces, it may be worth trying different versions of the regular expression pattern, as each pattern will have different performance characteristics. Alternatively, write the algorithm by hand so that it's AOT compiled.",
        "createdAt": "2021-02-17T05:36:51Z",
        "updatedAt": "2021-02-17T05:36:51Z",
        "author": {
          "login": "drewnoakes"
        }
      },
      {
        "body": "As a small and impactful fix I am planning to actually stop compiling this kind of Regexes in the FX build of MSBuild, saving both memory and time.\r\n\r\nhttps://github.com/dotnet/msbuild/blob/f0eebf2872d76ab0cd43fdc4153ba636232b222f/src/Build/Globbing/MSBuildGlob.cs#L218\r\n\r\nI agree that making it adaptive on Core is not worth the complexity. And also agree with Drew that there's a better way if regex matching is still showing in traces.",
        "createdAt": "2021-02-17T08:55:21Z",
        "updatedAt": "2021-02-17T08:55:21Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "Ignore this comment, this is an artifact of the way I did profiling.\r\n\r\n~Regex matching definitely shows up on traces.~\r\n\r\n~The following screenshot is collected by running ~\r\n```\r\ndotnet restore eng/service.proj\r\n```\r\nin https://github.com/Azure/azure-sdk-for-net/\r\n\r\n\r\n![image](https://user-images.githubusercontent.com/1697911/143285603-f09dc3e5-f54d-4499-b5fd-d3cc82f952fe.png)\r\n",
        "createdAt": "2021-11-24T17:22:03Z",
        "updatedAt": "2021-11-24T18:27:05Z",
        "author": {
          "login": "pakrym"
        }
      }
    ]
  }
}