{
  "number": 7161,
  "title": "Build fails to touch out-of-date CopyUpToDateMarker",
  "body": "During investigation of a Roslyn incremental build failure, I observed the following output:\r\n\r\n```\r\n10>FastUpToDate: No inputs are newer than earliest output 'C:\\dev\\roslyn\\artifacts\\obj\\Microsoft.CodeAnalysis.Scripting.TestUtilities\\Debug\\net472\\Microsoft.CodeAnalysis.Scripting.TestUtilities.xml' (12/20/2021 9:29:45 AM). Newest input is 'C:\\dev\\roslyn\\artifacts\\obj\\Microsoft.CodeAnalysis.Test.Utilities\\Debug\\net472\\ref\\Microsoft.CodeAnalysis.Test.Utilities.dll' (12/20/2021 9:25:08 AM). (Microsoft.CodeAnalysis.Scripting.TestUtilities)\r\n10>FastUpToDate: Latest write timestamp on input marker is 12/20/2021 9:29:40 AM on 'C:\\dev\\roslyn\\artifacts\\bin\\Microsoft.CodeAnalysis.Test.Utilities\\Debug\\net472\\Microsoft.CodeAnalysis.Test.Utilities.dll'. (Microsoft.CodeAnalysis.Scripting.TestUtilities)\r\n10>FastUpToDate: Write timestamp on output marker is 12/15/2021 7:29:31 PM on 'C:\\dev\\roslyn\\artifacts\\obj\\Microsoft.CodeAnalysis.Scripting.TestUtilities\\Debug\\net472\\Microsoft.CodeAnalysis.Scripting.TestUtilities.csproj.CopyComplete'. (Microsoft.CodeAnalysis.Scripting.TestUtilities)\r\n10>FastUpToDate: Input marker is newer than output marker, not up to date. (Microsoft.CodeAnalysis.Scripting.TestUtilities)\r\n10>------ Build started: Project: Microsoft.CodeAnalysis.Scripting.TestUtilities, Configuration: Debug Any CPU ------\r\n10>Microsoft.CodeAnalysis.Scripting.TestUtilities -> C:\\dev\\roslyn\\artifacts\\bin\\Microsoft.CodeAnalysis.Scripting.TestUtilities\\Debug\\net6.0\\Microsoft.CodeAnalysis.Scripting.TestUtilities.dll\r\n10>Microsoft.CodeAnalysis.Scripting.TestUtilities -> C:\\dev\\roslyn\\artifacts\\bin\\Microsoft.CodeAnalysis.Scripting.TestUtilities\\Debug\\net472\\Microsoft.CodeAnalysis.Scripting.TestUtilities.dll\r\n========== Build: 1 succeeded, 0 failed, 9 up-to-date, 0 skipped ==========\r\n```\r\n\r\nIn this situation, the build was up-to-date _except_ for the `CopyUpToDateMarker`. Unfortunately, due to #6698 the file was not touched, and the state was perpetually incorrect. A resolution in this situation is to ensure the `_CopyFilesMarkedCopyLocal` target touches `CopyUpToDateMarker` any time the marker is currently older than the newest build input.",
  "state": "CLOSED",
  "createdAt": "2021-12-20T18:25:08Z",
  "updatedAt": "2024-02-21T14:10:36Z",
  "closedAt": "2022-03-14T19:00:53Z",
  "author": {
    "login": "sharwell"
  },
  "labels": [
    "bug",
    "needs-more-info",
    "stale",
    "closed-by-bot",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Check for understanding:\r\nNormal build or incremental build #0 --> files are copied, but since files were copied, the CopyUpToDateMarker is not touched.\r\nIncremental build #1+ --> no files are copied, so even though the CopyUpToDateMarker is out-of-date, it isn't touched.\r\n\r\nI'm trying to think of what the ideal solution here is. Perhaps we should have one extra CopyUpToDateMarker2 that is touched if either CopyUpToDateMarker is touched or `'@(ReferencesCopiedInThisBuild)' != ''`. Then, if `'@(ReferencesCopiedInThisBuild)' != ''` and CopyUpToDateMarker2 was touched (in a subsequent incremental build), we also touch CopyUpToDateMarker? That feels kinda circular, but I think it would work. What do you think?",
        "createdAt": "2021-12-20T18:57:50Z",
        "updatedAt": "2021-12-20T18:57:50Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "> Normal build or incremental build #0 --> files are copied, but since files were copied, the CopyUpToDateMarker is not touched.\r\n\r\nI don't have a good way to verify this part of the question. It's not clear how I originally ended up in the situation, but I was stuck there and trying to automate the recovery from it.",
        "createdAt": "2021-12-20T19:14:17Z",
        "updatedAt": "2021-12-20T19:14:44Z",
        "author": {
          "login": "sharwell"
        }
      },
      {
        "body": "Also CC'ing @BenVillalobos as author of the last CopyUpToDate change. What do you think of my CopyUpToDateMarker2 idea?",
        "createdAt": "2021-12-23T20:36:12Z",
        "updatedAt": "2021-12-23T20:36:12Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "Team triage: @sharwell, How did you get into a state in which all the copied files are up-to-date, but the marker isn't? If we copy all the files, we should also update the marker (since at least one would have been properly copied); if it was something external to mess with timestamps, that sounds adversarial.",
        "createdAt": "2022-01-06T17:32:06Z",
        "updatedAt": "2022-01-06T17:32:06Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "For those who may not be that familiar with the MsBuild, but are facing the same problem:\r\n\r\nI have a solution with 121 projects. Some projects reference the others. Each project has around four or five references (of course there are no cycles). If I have changed something in any project (for example just saved .csproj again), it was enough to trigger a chain reaction, so that around 25 projects had to be rebuilt. The build log said exactly the same thing: No inputs are newer than earliest output... Input marker is newer than output marker, not up to date.\r\n\r\nSolution (work around)\r\n1. Create the file `Directory.Build.targets` near the `.sln` file.\r\n2. Add to this file (that is the work around from @sharwell):\r\n```\r\n<Project>\r\n    <!-- Workaround for https://github.com/dotnet/msbuild/issues/7161 -->\r\n    <Target Name=\"WorkaroundDotnetMsbuild7161\"\r\n            AfterTargets=\"_CopyFilesMarkedCopyLocal\"\r\n            Condition=\"'$(BuildingInsideVisualStudio)' == 'true' AND '@(ReferenceCopyLocalPaths)' != ''\">\r\n        <Touch Files=\"@(CopyUpToDateMarker)\"\r\n               AlwaysCreate=\"true\"\r\n               Condition=\"'@(ReferencesCopiedInThisBuild)' != ''\"/>\r\n    </Target>\r\n</Project>\r\n```\r\n\r\nAfter that, the problem should be resolved.",
        "createdAt": "2022-01-09T23:03:48Z",
        "updatedAt": "2022-01-09T23:03:48Z",
        "author": {
          "login": "deralbert"
        }
      },
      {
        "body": "@deralbert This solution will guarantee that every project will build every time because the marker is being updated. Is that what you want?\r\n\r\nCould you also explain exactly _how_ you encountered the scenario that prompted this fix? Did it consistently happen?",
        "createdAt": "2022-01-20T17:23:34Z",
        "updatedAt": "2022-01-20T17:23:34Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "@BenVillalobos apologies for the delayed response.\r\n\r\nYes, the behavior with the buggy incremental build has been happening in my solution for years (at least three years). The solution is quite big and there are several projects that reference other projects. If I understand @sharwell correctly, the problem was that after a build, `CopyUpToDateMarker` was not touched. As a result, even if you didn't make any changes to the code, this file remained untouched. In my case, this file was for some reason never touched and that forced a new build.\r\n\r\nI can't rule out that there is something else in my solution that could be the reason for this erroneous behavior, because the solution itself is quite old and big and mostly legacy code. Anyway, the code in `Directory.Build.targets` from above helped me.\r\n\r\nAnother thing I can suggest is that I could provide diagnostic data so you can understand what's going wrong in my solution. But I doubt if it would make much sense.",
        "createdAt": "2022-01-27T12:09:43Z",
        "updatedAt": "2022-01-27T12:09:43Z",
        "author": {
          "login": "deralbert"
        }
      },
      {
        "body": "> If I understand _ correctly, the problem was that after a build, CopyUpToDateMarker was not touched.\r\n\r\nAt least we think that's the case. Unfortunately we don't know _exactly_ what happened there, so it's hard to come to a solid conclusion:\r\n\r\n> I don't have a good way to verify this part of the question. It's not clear how I originally ended up in the situation, but I was stuck there and trying to automate the recovery from it.\r\n\r\nYou can file feedback at [Developer Community](https://developercommunity.visualstudio.com/spaces/8/index.html) and include confidential-to-Microsoft attachments. Please link the issue here so I can expedite routing it to our team. Most useful would be a [binlog](https://aka.ms/msbuild/binlog) (ideally generated from the command line)",
        "createdAt": "2022-01-27T22:01:11Z",
        "updatedAt": "2022-01-27T22:01:11Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "@BenVillalobos thank you for your answer. \r\nI will discuss your suggestion in my development team and if we decide positively, I will do it.",
        "createdAt": "2022-01-28T09:20:30Z",
        "updatedAt": "2022-01-28T09:20:30Z",
        "author": {
          "login": "deralbert"
        }
      },
      {
        "body": "This issue is marked as stale because feedback has been requested for 30 days with no response. Please respond within 14 days or this issue will be closed due to inactivity.",
        "createdAt": "2022-02-28T00:01:04Z",
        "updatedAt": "2022-02-28T00:01:04Z",
        "author": {
          "login": "ghost"
        }
      },
      {
        "body": "This issue was closed due to inactivity. If you can still reproduce this bug, please comment with the requested information, detailed steps to reproduce the problem, or any other notes that might help in the investigation.",
        "createdAt": "2022-03-14T19:00:54Z",
        "updatedAt": "2022-03-14T19:00:54Z",
        "author": {
          "login": "ghost"
        }
      }
    ]
  }
}