{
  "number": 1986,
  "title": "Support reference assemblies in build flows",
  "body": "The C# and VB compilers are building support for emitting a _reference assembly_ while compiling. The reference assembly contains the accessible interface of the assembly, but _no implementation details_. That means it changes less often than the full assembly--many common development activities don't change the interface, only the implementation. That means that incremental builds can be much faster--if you invert the sense of an `if` in a common library, today you must rebuild every assembly that references it, but with reference assemblies, you would only rebuild the library and copy it around to a few new output directories.\r\n\r\n[Roslyn spec for reference assemblies](https://github.com/dotnet/roslyn/blob/features/refout/docs/features/refout.md). Initial implementation: https://github.com/dotnet/roslyn/pull/17558\r\n\r\nThese assemblies should be supported in MSBuild scenarios.\r\n\r\n## Design criteria\r\n\r\n- [ ] Create reference assemblies by default when using deterministic C#/VB compilation\r\n- [ ] Use reference assemblies (when available) instead of implementation assemblies when invoking\r\n  - [ ] the compiler\r\n  - [ ] other tools? (resgen?)\r\n- [ ] Targets that use ref assemblies are marked up to date and skipped when a reference's implementation assembly has changed but its ref assembly has not\r\n- [ ] Final output folders must still contain implementation assemblies\r\n- [ ] Project-to-project (p2p) references must be resolvable into both implementation and reference assemblies\r\n- [ ] Design-time builds in Visual Studio build against the same assembly as the command line\r\n- [ ] Build augmentations that are unaware of reference assemblies\r\n  - [ ] continue to work (against implementation assemblies)\r\n  - [ ] are able to learn about implementation assemblies if they want the incrementality benefits\r\n- [ ] _Possible_ Consider how this interacts with NuGet reference assemblies. Can the concepts be unified?",
  "state": "CLOSED",
  "createdAt": "2017-04-17T19:32:36Z",
  "updatedAt": "2024-02-21T17:19:52Z",
  "closedAt": "2017-05-23T22:22:16Z",
  "author": {
    "login": "rainersigwald"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "rainersigwald"
      }
    ]
  },
  "milestone": {
    "title": "MSBuild 15.3"
  },
  "comments": {
    "nodes": [
      {
        "body": "Implementation option: find ref assembly by filename transformation convention.\r\n\r\nFor example: after RAR and before `CoreCompile`, sub `@(ReferencePath->'%(RootDir)%(Directory)\\ref\\%(Filename)%(Extension)')` into the `ReferencePath` item if it exists.\r\n\r\n* \u2795 minimal MSBuild dataflow changes\r\n* \u2796 convention based (the compiler option allows arbitrary naming of the ref asm)\r\n",
        "createdAt": "2017-04-17T19:59:33Z",
        "updatedAt": "2017-04-17T19:59:33Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Implementation option: pass ref assembly path as metadata on the primary compiler output\r\n\r\nFor example: after RAR and before `CoreCompile`, sub `@(ReferencePath->'%(RootDir)%(Directory)\\ref\\%(Filename)%(Extension)')` into the `ReferencePath` item if it exists.\r\n\r\n* \u2795 allows user flexibility in path conventions\r\n* \u2796 requires passing data though the convoluted p2p + RAR process\r\n* \u2796 Design time p2p resolution doesn't return an item but just the output path (currently)",
        "createdAt": "2017-04-17T20:38:48Z",
        "updatedAt": "2017-04-17T20:38:48Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Ok, I've gotten a proof-of-concept put together based on the just-look-for-a-filename-pattern strategy, and it looks fairly reasonable.\r\n\r\nVery little of this is production-ready, but it does work as hoped for: a whitespace change in `src\\Compilers\\Core\\Portable\\AssemblyUtilities.cs` causes recompilation for `CodeAnalysis.csproj` but doesn't propagate the ref assembly:\r\n```\r\n15:04:27.747     7>CopyFilesToOutputDirectory: (TargetId:67)\r\n                     Reference assembly \"S:\\roslyn\\Binaries\\Debug\\Dlls\\CodeAnalysis\\Microsoft.CodeAnalysis.interface.dll\" already has latest information. Leaving it untouched. (TaskId:33)\r\n```\r\n\r\n<details>\r\n\r\n```diff\r\ndiff --git a/MSBuild/15.0/Bin/MSBuild.exe.config b/MSBuild/15.0/Bin/MSBuild.exe.config\r\nindex eafd444..bb0f31a 100644\r\n--- a/MSBuild/15.0/Bin/MSBuild.exe.config\r\n+++ b/MSBuild/15.0/Bin/MSBuild.exe.config\r\n@@ -46,6 +46,15 @@\r\n           <assemblyIdentity name=\"XamlBuildTask\" culture=\"neutral\" publicKeyToken=\"31bf3856ad364e35\" />\r\n           <bindingRedirect oldVersion=\"4.0.0.0\" newVersion=\"15.0.0.0\" />\r\n         </dependentAssembly>\r\n+        <dependentAssembly>\r\n+          <assemblyIdentity name=\"System.Collections.Immutable\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\"/>\r\n+          <bindingRedirect oldVersion=\"0.0.0.0-1.2.1.0\" newVersion=\"1.2.1.0\" />\r\n+        </dependentAssembly>\r\n+        <dependentAssembly>\r\n+          <assemblyIdentity name=\"System.IO.FileSystem\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\"/>\r\n+          <bindingRedirect oldVersion=\"0.0.0.0-4.0.2.0\" newVersion=\"4.0.2.0\" />\r\n+        </dependentAssembly>\r\n+\r\n \r\n         <!-- Workaround for crash in C++ CodeAnalysis scenarios due to https://github.com/Microsoft/msbuild/issues/1675 -->\r\n         <dependentAssembly>\r\ndiff --git a/MSBuild/15.0/Bin/Microsoft.Common.CurrentVersion.targets b/MSBuild/15.0/Bin/Microsoft.Common.CurrentVersion.targets\r\nindex 8aa426d..6f58d49 100644\r\n--- a/MSBuild/15.0/Bin/Microsoft.Common.CurrentVersion.targets\r\n+++ b/MSBuild/15.0/Bin/Microsoft.Common.CurrentVersion.targets\r\n@@ -347,6 +347,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.\r\n   </PropertyGroup>\r\n   <ItemGroup>\r\n     <IntermediateAssembly Include=\"$(IntermediateOutputPath)$(TargetName)$(TargetExt)\"/>\r\n+    <IntermediateRefAssembly Include=\"$(IntermediateOutputPath)$(TargetName).interface$(TargetExt)\"/>\r\n     <FinalDocFile Include=\"@(DocFileItem->'$(OutDir)%(Filename)%(Extension)')\"/>\r\n   </ItemGroup>\r\n \r\n@@ -4003,6 +4004,17 @@ Copyright (C) Microsoft Corporation. All rights reserved.\r\n \r\n     </Copy>\r\n \r\n+    <!-- Copy the build product (.dll or .exe). -->\r\n+    <CopyRefAssembly\r\n+        SourcePath=\"@(IntermediateRefAssembly)\"\r\n+        DestinationPath=\"$(OutDir)@(IntermediateRefAssembly->'%(Filename)%(Extension)')\"\r\n+        Condition=\"'$(CopyBuildOutputToOutputDirectory)' == 'true' and '$(SkipCopyBuildProduct)' != 'true' and Exists('@(IntermediateRefAssembly)')\"\r\n+            >\r\n+\r\n+      <Output TaskParameter=\"DestinationPath\" ItemName=\"ReferenceAssembly\"/>\r\n+\r\n+    </CopyRefAssembly>\r\n+\r\n     <Message Importance=\"High\" Text=\"$(MSBuildProjectName) -&gt; @(MainAssembly->'%(FullPath)')\" Condition=\"'$(CopyBuildOutputToOutputDirectory)' == 'true' and '$(SkipCopyBuildProduct)'!='true'\" />\r\n \r\n     <!-- Copy the additional modules. -->\r\ndiff --git a/MSBuild/15.0/Bin/Microsoft.Common.tasks b/MSBuild/15.0/Bin/Microsoft.Common.tasks\r\nindex d284df7..4c7fbee 100644\r\n--- a/MSBuild/15.0/Bin/Microsoft.Common.tasks\r\n+++ b/MSBuild/15.0/Bin/Microsoft.Common.tasks\r\n@@ -172,5 +172,6 @@\r\n     <!-- Roslyn tasks are now in an assembly owned and shipped by Roslyn -->\r\n     <UsingTask TaskName=\"Microsoft.CodeAnalysis.BuildTasks.Csc\"                       AssemblyFile=\"$(RoslynTargetsPath)\\Microsoft.Build.Tasks.CodeAnalysis.dll\" Condition=\"'$(MSBuildAssemblyVersion)' != ''\" />\r\n     <UsingTask TaskName=\"Microsoft.CodeAnalysis.BuildTasks.Vbc\"                       AssemblyFile=\"$(RoslynTargetsPath)\\Microsoft.Build.Tasks.CodeAnalysis.dll\" Condition=\"'$(MSBuildAssemblyVersion)' != ''\" />\r\n+    <UsingTask TaskName=\"Microsoft.CodeAnalysis.BuildTasks.CopyRefAssembly\"           AssemblyFile=\"$(RoslynTargetsPath)\\Microsoft.Build.Tasks.CodeAnalysis.dll\" Condition=\"'$(MSBuildAssemblyVersion)' != ''\" />\r\n </Project>\r\n \r\ndiff --git a/MSBuild/15.0/Bin/Roslyn/Microsoft.CSharp.Core.targets b/MSBuild/15.0/Bin/Roslyn/Microsoft.CSharp.Core.targets\r\nindex 5612c75..020adbb 100644\r\n--- a/MSBuild/15.0/Bin/Roslyn/Microsoft.CSharp.Core.targets\r\n+++ b/MSBuild/15.0/Bin/Roslyn/Microsoft.CSharp.Core.targets\r\n@@ -1,13 +1,20 @@\r\n \u2229\u2557\u2510<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n <!-- Copyright (c)  Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information. -->\r\n <Project ToolsVersion=\"14.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\r\n+  <Target Name=\"MungeRefs\" BeforeTargets=\"CoreCompile\">\r\n+    <!--<Warning Text=\"RP: @(ReferencePath) %(RootDir)%(Directory)%(Filename).interface%(Extension)\" />-->\r\n+    <ItemGroup>\r\n+      <TrueReferences Include=\"@(ReferencePath)\" Condition=\"!Exists('%(RootDir)%(Directory)%(Filename).interface%(Extension)')\" />\r\n+      <TrueReferences Include=\"@(ReferencePath->'%(RootDir)%(Directory)%(Filename).interface%(Extension)')\" Condition=\"Exists('%(RootDir)%(Directory)%(Filename).interface%(Extension)')\" />\r\n+    </ItemGroup>\r\n+  </Target>\r\n   <Target Name=\"CoreCompile\"\r\n           Inputs=\"$(MSBuildAllProjects);\r\n                   @(Compile);\r\n                   @(_CoreCompileResourceInputs);\r\n                   $(ApplicationIcon);\r\n                   $(AssemblyOriginatorKeyFile);\r\n-                  @(ReferencePath);\r\n+                  @(TrueReferences);\r\n                   @(CompiledLicenseFile);\r\n                   @(LinkResource);\r\n                   @(EmbeddedDocumentation);\r\n@@ -117,7 +124,7 @@\r\n          Prefer32Bit=\"$(Prefer32Bit)\"\r\n          PreferredUILang=\"$(PreferredUILang)\"\r\n          ProvideCommandLineArgs=\"$(ProvideCommandLineArgs)\"\r\n-         References=\"@(ReferencePath)\"\r\n+         References=\"@(TrueReferences)\"\r\n          ReportAnalyzer=\"$(ReportAnalyzer)\"\r\n          Resources=\"@(_CoreCompileResourceInputs);@(CompiledLicenseFile)\"\r\n          ResponseFiles=\"$(CompilerResponseFile)\"\r\n```\r\n</details>\r\n\r\nExplanations:\r\n\r\n* Binding redirects: the Roslyn task assembly now has (transitive) references to these two assemblies that don't match the versions delivered in MSBuild or Roslyn. The plan is to move the task assembly to its own folder with a possibly-different closure. MSBuild might still want to set these binding redirects to match VS as part of #1542.\r\n* Ref file pattern: I got lazy and did this instead of `mkdir ref/`. It's likely a requirement to keep the filename the same.\r\n* Extra copy task does the ref magic incremental copy. Initially I was thinking of telling the compiler to emit to a temporary location and doing the magic copy from there to obj, but now I think it's sufficient to always update obj and only update bin when necessary, because ProjectReferences use the output from bin.\r\n* The target here probably belongs in common rather than C# targets. I did notice it not working for VB in my testing.\r\n* `TrueReferences` and `MungeRefs` are terrible, no-good, very-bad names.",
        "createdAt": "2017-04-25T22:08:11Z",
        "updatedAt": "2017-04-25T22:08:11Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Design points to be settled:\r\n\r\n* We talked about making this \"default when Deterministic is turned on\". Where should that be expressed? Currently common targets don't know about Deterministic. Set a property in `CSharp.Core.targets` that's observed in common, or just bake it into common?\r\n  * \ud83d\udcac I propose just baking it into Common. It's already a mess and this doesn't make it appreciably worse.\r\n* What's the convention for paths? Based on conversation with @jaredpar, it's likely useful to make sure that the reference assembly's filename matches the implementation assembly's.\r\n  * \ud83d\udcac I propose what we'd talked about initially `$(OutDir)\\ref\\$(TargetFileName)`.\r\n* Should the reference assembly be passed along explicitly (via metadata) or inferred by probing for an assembly at the ref-assembly-relative-path convention?\r\n  * \ud83d\udcac I propose passing it along via metadata. `GetTargetPath` already returned a metadata-decorated item, and it seems low-risk to do the same from `Build`, giving us the freedom to have arbitrary paths to the reference assembly (if user-desired) and \"push\" the knowledge of the ref asm from the producing project instead of inferring it from the consuming side.\r\n* Should the `Csc` task consume metadata on the existing `@(ReferencePath)`, a permanently changed `ReferencePath`, a temporarily changed `ReferencePath`, or a different item?\r\n  * Tasks consume metadata:\r\n    * \u2795 Scoped impact\r\n    * \u2796 Incrementality on `CoreCompile` becomes hard: the \"real\" inputs are either the path in `Identity` or the path in `ReferenceAssembly` of the references.\r\n  * Permanently changed `ReferencePath`:\r\n    * \u2796 Unclear what targets besides `CoreCompile` consume this (including 3rd-party extensions).\r\n  * Temporarily changed `ReferencePath`:\r\n    * \u2795 Scoped impact\r\n    * \u2796 No other target could opt into using the ref assemblies\r\n    * \u2796 Two extra targets would be run to replace the list and to restore it.\r\n  * New item:\r\n    * \u2795 Scoped impact\r\n    * \u2795 Other targets could opt in to ref-assembly-only list\r\n    * \u2796 Targets would _have_ to opt in\r\n    * \u2796 `Microsoft.CSharp.Core.targets` would need a compat shim to be able to run with older common targets.\r\n  * \ud83d\udcac I propose using a new item, with a compat shim in C# core.\r\n* Is there a better name than `ReferenceAssembly` for the MSBuildification of these concepts? `ReferenceAssembly` is already used to find full-framework reference assemblies, for example in `GetReferenceAssemblyPaths`.\r\n  * \ud83d\udcac It's confusing but the concepts are very similar. I think I prefer just using `ReferenceAssembly`.\r\n\r\n@jaredpar @jcouv @Microsoft/msbuild-maintainers: does that sound good? Anything I've forgotten?\r\n\r\n<details>\r\n<summary>current implementation</summary>\r\n\r\n```diff\r\ndiff --git a/MSBuild/15.0/Bin/MSBuild.exe.config b/MSBuild/15.0/Bin/MSBuild.exe.config\r\nindex eafd444..bb0f31a 100644\r\n--- a/MSBuild/15.0/Bin/MSBuild.exe.config\r\n+++ b/MSBuild/15.0/Bin/MSBuild.exe.config\r\n@@ -46,6 +46,15 @@\r\n           <assemblyIdentity name=\"XamlBuildTask\" culture=\"neutral\" publicKeyToken=\"31bf3856ad364e35\" />\r\n           <bindingRedirect oldVersion=\"4.0.0.0\" newVersion=\"15.0.0.0\" />\r\n         </dependentAssembly>\r\n+        <dependentAssembly>\r\n+          <assemblyIdentity name=\"System.Collections.Immutable\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\"/>\r\n+          <bindingRedirect oldVersion=\"0.0.0.0-1.2.1.0\" newVersion=\"1.2.1.0\" />\r\n+        </dependentAssembly>\r\n+        <dependentAssembly>\r\n+          <assemblyIdentity name=\"System.IO.FileSystem\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\"/>\r\n+          <bindingRedirect oldVersion=\"0.0.0.0-4.0.2.0\" newVersion=\"4.0.2.0\" />\r\n+        </dependentAssembly>\r\n+\r\n \r\n         <!-- Workaround for crash in C++ CodeAnalysis scenarios due to https://github.com/Microsoft/msbuild/issues/1675 -->\r\n         <dependentAssembly>\r\ndiff --git a/MSBuild/15.0/Bin/Microsoft.Common.CurrentVersion.targets b/MSBuild/15.0/Bin/Microsoft.Common.CurrentVersion.targets\r\nindex 8aa426d..4881519 100644\r\n--- a/MSBuild/15.0/Bin/Microsoft.Common.CurrentVersion.targets\r\n+++ b/MSBuild/15.0/Bin/Microsoft.Common.CurrentVersion.targets\r\n@@ -281,6 +281,8 @@ Copyright (C) Microsoft Corporation. All rights reserved.\r\n     <!-- Example, c:\\MyProjects\\MyProject\\bin\\debug\\MyAssembly.dll -->\r\n     <TargetPath Condition=\" '$(TargetPath)' == '' \">$(TargetDir)$(TargetFileName)</TargetPath>\r\n \r\n+    <TargetRefPath Condition=\" '$(TargetRefPath)' == '' and '$(Deterministic)' == 'true' \">$([System.IO.Path]::Combine(`$([System.IO.Path]::GetDirectoryName($([System.IO.Path]::GetFullPath(`$(TargetPath)`))))`, 'ref', `$(TargetFileName)`))</TargetRefPath>\r\n+\r\n     <!-- Example, c:\\MyProjects\\MyProject\\ -->\r\n     <ProjectDir Condition=\" '$(ProjectDir)' == '' \">$(MSBuildProjectDirectory)\\</ProjectDir>\r\n \r\n@@ -350,6 +352,13 @@ Copyright (C) Microsoft Corporation. All rights reserved.\r\n     <FinalDocFile Include=\"@(DocFileItem->'$(OutDir)%(Filename)%(Extension)')\"/>\r\n   </ItemGroup>\r\n \r\n+  <ItemGroup Condition=\"'$(Deterministic)' == 'true'\">\r\n+    <!-- TODO: should this be configurable? Default path obeys conventions. -->\r\n+    <IntermediateRefAssembly Include=\"$(IntermediateOutputPath)ref\\$(TargetName)$(TargetExt)\" Condition=\"'@(IntermediateRefAssembly)' == ''\" />\r\n+    <CreateDirectory Include=\"@(IntermediateRefAssembly->'%(RootDir)%(Directory)')\" />\r\n+    <CreateDirectory Include=\"$(OutDir)ref\" />\r\n+  </ItemGroup>\r\n+\r\n   <ItemGroup Condition=\"'$(_DebugSymbolsProduced)' == 'true'\">\r\n     <_DebugSymbolsIntermediatePath Include=\"$(IntermediateOutputPath)$(TargetName).compile.pdb\" Condition=\"'$(OutputType)' == 'winmdobj' and '@(_DebugSymbolsIntermediatePath)' == ''\"/>\r\n     <_DebugSymbolsIntermediatePath Include=\"$(IntermediateOutputPath)$(TargetName).pdb\" Condition=\"'$(OutputType)' != 'winmdobj' and '@(_DebugSymbolsIntermediatePath)' == ''\"/>\r\n@@ -771,7 +780,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.\r\n       Name=\"Build\"\r\n       Condition=\" '$(_InvalidConfigurationWarning)' != 'true' \"\r\n       DependsOnTargets=\"$(BuildDependsOn)\"\r\n-      Returns=\"$(TargetPath)\" />\r\n+      Returns=\"@(TargetPathWithTargetPlatformMoniker)\" />\r\n \r\n   <!--\r\n     ============================================================\r\n@@ -1797,6 +1806,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.\r\n       <TargetPathWithTargetPlatformMoniker Include=\"$(TargetPath)\">\r\n         <TargetPlatformMoniker>$(TargetPlatformMoniker)</TargetPlatformMoniker>\r\n         <TargetPlatformIdentifier>$(TargetPlatformIdentifier)</TargetPlatformIdentifier>\r\n+        <ReferenceAssembly Condition=\"'$(TargetRefPath)' != ''\">$(TargetRefPath)</ReferenceAssembly>\r\n       </TargetPathWithTargetPlatformMoniker>\r\n     </ItemGroup>\r\n   </Target>\r\n@@ -2015,8 +2025,18 @@ Copyright (C) Microsoft Corporation. All rights reserved.\r\n       <Output TaskParameter=\"FilesWritten\" ItemName=\"FileWrites\"/>\r\n       <Output TaskParameter=\"DependsOnSystemRuntime\" PropertyName=\"DependsOnSystemRuntime\"/>\r\n     </ResolveAssemblyReference>\r\n+\r\n+    <ItemGroup>\r\n+      <ReferencePathWithInterfaceOnlyAssemblies Include=\"@(ReferencePath->'%(ReferenceAssembly)')\" />\r\n+    </ItemGroup>\r\n   </Target>\r\n \r\n+  <ItemDefinitionGroup>\r\n+    <ReferencePath>\r\n+      <ReferenceAssembly>%(FullPath)</ReferenceAssembly>\r\n+    </ReferencePath>\r\n+  </ItemDefinitionGroup>\r\n+\r\n   <!--\r\n     ====================================================================================================\r\n \r\n@@ -4003,6 +4023,17 @@ Copyright (C) Microsoft Corporation. All rights reserved.\r\n \r\n     </Copy>\r\n \r\n+    <!-- Copy the build product (.dll or .exe). -->\r\n+    <CopyRefAssembly\r\n+        SourcePath=\"@(IntermediateRefAssembly)\"\r\n+        DestinationPath=\"$(TargetRefPath)\"\r\n+        Condition=\"'$(CopyBuildOutputToOutputDirectory)' == 'true' and '$(SkipCopyBuildProduct)' != 'true' and Exists('@(IntermediateRefAssembly)')\"\r\n+            >\r\n+\r\n+      <Output TaskParameter=\"DestinationPath\" ItemName=\"ReferenceAssembly\"/>\r\n+\r\n+    </CopyRefAssembly>\r\n+\r\n     <Message Importance=\"High\" Text=\"$(MSBuildProjectName) -&gt; @(MainAssembly->'%(FullPath)')\" Condition=\"'$(CopyBuildOutputToOutputDirectory)' == 'true' and '$(SkipCopyBuildProduct)'!='true'\" />\r\n \r\n     <!-- Copy the additional modules. -->\r\ndiff --git a/MSBuild/15.0/Bin/Microsoft.Common.tasks b/MSBuild/15.0/Bin/Microsoft.Common.tasks\r\nindex d284df7..4c7fbee 100644\r\n--- a/MSBuild/15.0/Bin/Microsoft.Common.tasks\r\n+++ b/MSBuild/15.0/Bin/Microsoft.Common.tasks\r\n@@ -172,5 +172,6 @@\r\n     <!-- Roslyn tasks are now in an assembly owned and shipped by Roslyn -->\r\n     <UsingTask TaskName=\"Microsoft.CodeAnalysis.BuildTasks.Csc\"                       AssemblyFile=\"$(RoslynTargetsPath)\\Microsoft.Build.Tasks.CodeAnalysis.dll\" Condition=\"'$(MSBuildAssemblyVersion)' != ''\" />\r\n     <UsingTask TaskName=\"Microsoft.CodeAnalysis.BuildTasks.Vbc\"                       AssemblyFile=\"$(RoslynTargetsPath)\\Microsoft.Build.Tasks.CodeAnalysis.dll\" Condition=\"'$(MSBuildAssemblyVersion)' != ''\" />\r\n+    <UsingTask TaskName=\"Microsoft.CodeAnalysis.BuildTasks.CopyRefAssembly\"           AssemblyFile=\"$(RoslynTargetsPath)\\Microsoft.Build.Tasks.CodeAnalysis.dll\" Condition=\"'$(MSBuildAssemblyVersion)' != ''\" />\r\n </Project>\r\n \r\ndiff --git a/MSBuild/15.0/Bin/Roslyn/Microsoft.CSharp.Core.targets b/MSBuild/15.0/Bin/Roslyn/Microsoft.CSharp.Core.targets\r\nindex 5612c75..2aee7ca 100644\r\n--- a/MSBuild/15.0/Bin/Roslyn/Microsoft.CSharp.Core.targets\r\n+++ b/MSBuild/15.0/Bin/Roslyn/Microsoft.CSharp.Core.targets\r\n@@ -7,7 +7,7 @@\r\n                   @(_CoreCompileResourceInputs);\r\n                   $(ApplicationIcon);\r\n                   $(AssemblyOriginatorKeyFile);\r\n-                  @(ReferencePath);\r\n+                  @(TrueReferences);\r\n                   @(CompiledLicenseFile);\r\n                   @(LinkResource);\r\n                   @(EmbeddedDocumentation);\r\n@@ -117,7 +117,7 @@\r\n          Prefer32Bit=\"$(Prefer32Bit)\"\r\n          PreferredUILang=\"$(PreferredUILang)\"\r\n          ProvideCommandLineArgs=\"$(ProvideCommandLineArgs)\"\r\n-         References=\"@(ReferencePath)\"\r\n+         References=\"@(TrueReferences)\"\r\n          ReportAnalyzer=\"$(ReportAnalyzer)\"\r\n          Resources=\"@(_CoreCompileResourceInputs);@(CompiledLicenseFile)\"\r\n          ResponseFiles=\"$(CompilerResponseFile)\"\r\n\r\n```\r\n\r\n</details>",
        "createdAt": "2017-04-26T21:32:30Z",
        "updatedAt": "2017-04-26T21:32:30Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "These all look good to me.  ",
        "createdAt": "2017-04-26T21:45:13Z",
        "updatedAt": "2017-04-26T21:45:13Z",
        "author": {
          "login": "jaredpar"
        }
      },
      {
        "body": "Looks good. I especially like the leveraging of existing /obj and /bin distinction. At least we don't have to create a third copy of the ref assembly just to manage timestamps :-)",
        "createdAt": "2017-04-28T02:53:36Z",
        "updatedAt": "2017-04-28T02:53:36Z",
        "author": {
          "login": "jcouv"
        }
      },
      {
        "body": "Had a design review with @AndyGerlicher and @jeffkl today. No changes to the plan, but a couple of options were discussed and dismissed:\r\n\r\n* Idea: extracting the MVIDs of references to compute incremental up-to-dateness. Rejected because while we now (post-#1327) have an easy way to _cause_ `CoreCompile` to run even if up-to-date-checks would otherwise skip it, there's no good way to do the opposite.\r\n* Idea: leave the reference assembly in obj, never copying it to bin. Rejected because we think the ref asm is a real project output, and because this would involve telling the compiler to generate it to an intermediate location and copying it around--so there's little gain.\r\n\r\nAlso discussed was https://github.com/dotnet/roslyn/issues/19103.\r\n\r\nI'm going to go forward with PRs now based on this design.",
        "createdAt": "2017-04-28T21:01:26Z",
        "updatedAt": "2017-04-28T21:01:26Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Will this be property based? I.e. will be be a property based switch that turns reference assembly making on/off? Please allow compilers other than roslyn to implement the feature.",
        "createdAt": "2017-05-01T10:42:00Z",
        "updatedAt": "2017-05-01T10:42:00Z",
        "author": {
          "login": "borgdylan"
        }
      },
      {
        "body": "There isn't anything specific to Roslyn that I'm aware of here.  Most of the work is around making the target graphs able to benefit from reference assemblies in general.  ",
        "createdAt": "2017-05-01T16:17:45Z",
        "updatedAt": "2017-05-01T16:17:45Z",
        "author": {
          "login": "jaredpar"
        }
      },
      {
        "body": "@borgdylan I'm planning to implement that property next up in PR #2039.\r\n\r\nThis is absolutely available to compilers other than Roslyn--the core compilation target just needs to consume the new item rather than `@(ReferencePath)` to opt into using reference assemblies, and needs to define the `ReferenceAssembly` metadata on its output if it _produces_ ref assemblies.",
        "createdAt": "2017-05-01T19:03:25Z",
        "updatedAt": "2017-05-01T19:03:25Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@davkean @jviau I'm proposing to change the item that gets passed to `Csc` in `CoreCompile` to a new one that has interface-only reference assemblies substituted in for implementation assemblies where available. @jasonmalinowski is worried that this might break something in the project system. Do you know if the project system or CPS directly cares about `@(ReferencePath)`? If it does, what's the nature of that relationship?\r\n\r\nTo summarize: I'm concerned about swapping in the ref assembly _everywhere_ because I don't know what targets (including third-party extension things) have a dependency on `@(ReferencePath)` containing the full output assembly of references. But we _do_ want to use the reference assemblies for things like design-time builds.",
        "createdAt": "2017-05-01T19:48:45Z",
        "updatedAt": "2017-05-01T19:48:45Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Thanks for clarifying. I will try to implement this for my compiler since it would be for me to tell thr compiler to forgo generation of method bodies. That would allow me to implement the MSBuild specific bits that interface with your PR. Would MSBuild suggest a path where the reference assembly should be placed?",
        "createdAt": "2017-05-01T19:49:18Z",
        "updatedAt": "2017-05-01T19:49:18Z",
        "author": {
          "login": "borgdylan"
        }
      },
      {
        "body": "@borgdylan Yes, in my PR the common targets suggest a default--though you'll want to opt in to the feature once I've made that possible. `Csc` consumes it fairly simply: https://github.com/rainersigwald/roslyn/blob/2164877d0099c291f2aee22773058ba01fa78266/src/Compilers/Core/MSBuildTask/Microsoft.CSharp.Core.targets#L126, and I would expect that you could do the same.\r\n\r\nAlso possibly relevant: https://github.com/dotnet/roslyn/pull/19133 adds some requirements to the shape of the ref assembly to keep it compatible with the new incremental `CopyRefAssembly` task.",
        "createdAt": "2017-05-01T19:53:47Z",
        "updatedAt": "2017-05-01T19:53:47Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Thanks for heads up. I did not know of ```@(IntermediateAssembly)``` and ```$(PdbFile)```. I was concatenating the components myself.",
        "createdAt": "2017-05-01T20:02:24Z",
        "updatedAt": "2017-05-01T20:02:24Z",
        "author": {
          "login": "borgdylan"
        }
      },
      {
        "body": "@borgdylan I have a meeting set up with a doc writer to figure out how to start to document some of the soup that is common targets. That kind of detail will likely be low on the priority list since it's primarily useful for compiler writers, but maybe someday. . .",
        "createdAt": "2017-05-01T20:09:12Z",
        "updatedAt": "2017-05-01T20:09:12Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "In the mean time I will look at the CSharp targets for inspiration once this makes its way into the mono fork.",
        "createdAt": "2017-05-01T20:21:42Z",
        "updatedAt": "2017-05-01T20:21:42Z",
        "author": {
          "login": "borgdylan"
        }
      },
      {
        "body": "@rainersigwald I had a quick look, I don't know of anything that would break by using a different item to pass to the compiler instead @(ReferencePath).\r\n\r\nI do suspect, however, that the legacy project system (and our yet to be written [up-to-date check](https://github.com/dotnet/project-system/issues/62)) would need to be taught about these concepts, preferable via MSBuild items.",
        "createdAt": "2017-05-02T00:52:23Z",
        "updatedAt": "2017-05-02T00:52:31Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "The initial implementation of this is complete, but opt-in.",
        "createdAt": "2017-05-23T22:22:16Z",
        "updatedAt": "2017-05-23T22:22:16Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald how does msbuild signal that it wants a reference assembly?",
        "createdAt": "2017-06-22T15:47:51Z",
        "updatedAt": "2017-06-22T15:47:51Z",
        "author": {
          "login": "borgdylan"
        }
      },
      {
        "body": "@borgdylan \r\n\r\nThe design we landed on was:\r\n* The _producing_ project respects `$(ProduceReferenceAssembly)` to determine whether or not to produce the ref assembly. If it does:\r\n  * The return value of `GetTargetPath` and `Build` should be an item that has the [`ReferenceAssembly`](https://github.com/Microsoft/msbuild/blob/520d1aa3db2f0602738def487b612deea9c1439b/src/Tasks/Microsoft.Common.CurrentVersion.targets#L1837) and [`CopyUpToDateMarker`](https://github.com/Microsoft/msbuild/blob/520d1aa3db2f0602738def487b612deea9c1439b/src/Tasks/Microsoft.Common.CurrentVersion.targets#L1838) metadata set to appropriate values.\r\n* The _referencing_ project respects `$(CompileUsingReferenceAssemblies)` (as an emergency escape hatch), and if it's not set to false, passes `@(ReferencePath->'%(ReferenceAssembly)')` to the compiler instead of just `@(ReferencePath)`.\r\n\r\nSo there's no real way to indicate from a referencing project that you want ref assemblies, it's up to the producing project to provide them or not.\r\n\r\nDoes that answer the question?",
        "createdAt": "2017-06-22T16:39:27Z",
        "updatedAt": "2017-06-22T16:39:27Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "On the receiving end I am just using ```ReferencePathWithRefAssemblies``` since I know that I will be having v15.6 installed. I want to compile against reference assemblies whenever they are available.\r\n\r\nThanks for answering the part on the producing end. For now I just want to have my targets  set up to handle the reference assembly stuff prior to my compiler actually emitting them. In the mean time I will be tricking msbuild by giving a full assembly regardless of what it asks for. However I plan to be writing the metadata and passing a flag to the compiler in the reference assembly production case.",
        "createdAt": "2017-06-22T18:15:09Z",
        "updatedAt": "2017-06-22T18:15:09Z",
        "author": {
          "login": "borgdylan"
        }
      },
      {
        "body": "What I did not understand: How do I change the values for the mentioned targets from within ```CoreCompile```?",
        "createdAt": "2017-06-22T18:16:51Z",
        "updatedAt": "2017-06-22T18:16:51Z",
        "author": {
          "login": "borgdylan"
        }
      },
      {
        "body": "Also, what causes ```$(ProduceReferenceAssembly)``` to be set to true? It is always false in my builds. As I see it something must be in place to automatically trigger a ref assembly for all projects that are dependencies of the one being built.",
        "createdAt": "2017-06-22T18:21:23Z",
        "updatedAt": "2017-06-22T18:25:30Z",
        "author": {
          "login": "borgdylan"
        }
      },
      {
        "body": "@borgdylan Right now ref assemblies are an opt-in feature, so a project must explicitly set `<ProduceReferenceAssembly>true</ProduceReferenceAssembly>` (or get it through an import--`Directory.Build.props` makes that easy).\r\n\r\nI don't think I understand this:\r\n\r\n> As I see it something must be in place to automatically trigger a ref assembly for all projects that are dependencies of the one being built.\r\n\r\nWhy? It's not a great situation, but it's perfectly valid to have a non-ref-assembly-aware project depend on a ref assembly but not produce one in turn. You'd still get incremental build benefits since it would only rebuild when its own implementation or the reference's interface changes.",
        "createdAt": "2017-06-22T18:56:10Z",
        "updatedAt": "2022-07-08T00:22:29Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "What I meant is that a dependency project should know that it is currently treated as a dependency and is not the focus, so it would be enough for it to produce a reference assembly only. Making both a normal and a reference assembly is too wasteful in the same build and defeats the use of reference assemblies to get a faster build.",
        "createdAt": "2017-06-22T19:08:59Z",
        "updatedAt": "2017-06-22T19:08:59Z",
        "author": {
          "login": "borgdylan"
        }
      },
      {
        "body": "Ah, I see. That's not a scenario in the current design.\r\n\r\nThe Roslyn compiler simultaneously emits the reference and implementation assemblies, so it's not significantly slower than emitting only the reference assembly (AFAIK).\r\n\r\nEven if that wasn't the case, I don't think I agree with your premise. If you didn't compile the implementation assembly when it was out of date but the build was triggered from a reference, you would potentially be using stale assemblies downstream.\r\n\r\nConsider this situation (apologies if I'm butchering the Dylan):\r\n\r\n```dylan\r\ndefine method adder  (a, b :: <integer>)\r\n    a - b\r\nend;\r\n```\r\n\r\nin one assembly `adder.dylproj`, and a unit test that verifies that adder adds in `test.dylproj`. Build `test.dylproj`, producing `adder.dll`, `ref/adder.dll`, and `test.dll` and observe that the test fails because the implementation of the method is wrong. Fix the error, then build the test project again. What you want is `adder.dll'`, with internals, but an unmodified `ref/adder.dll`. Under your proposal, if only the ref assembly is regenerated, the test would be rerun against the stale copy of the assembly.",
        "createdAt": "2017-06-22T19:28:17Z",
        "updatedAt": "2017-06-22T19:28:17Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Apologies accepted. As things stand, I will be holding off my implementation as I will not have any advantages if I do. If a file in a project changes, the build would still trigger making a new reference assembly anyways. I may do a partial implementation to make distributable reference assemblies be possible.\r\n\r\nSide note: dylan.NET is a misnamed language as it does not use the original \"Dylan\" syntax. An \"adder\" method would be written as\r\n```\r\nmethod public integer adder(var a as integer, var b as integer)\r\n    return a + b\r\nend method\r\n```\r\n\r\nor inspired by C# 6 arrow methods\r\n```\r\nmethod public integer adder(var a as integer, var b as integer) =>  a + b\r\n```",
        "createdAt": "2017-06-22T20:34:22Z",
        "updatedAt": "2017-06-22T20:38:46Z",
        "author": {
          "login": "borgdylan"
        }
      }
    ]
  }
}