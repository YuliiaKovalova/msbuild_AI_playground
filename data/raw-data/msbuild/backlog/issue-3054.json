{
  "number": 3054,
  "title": "MSBuild should preserve stacktraces when ToolTask exe throws an exception",
  "body": "From @jaredpar:\r\n\r\nWhy is it that MSBuild hides exception stack traces when a ToolTask exe throws an exception?\r\nIt takes easy to identify issues and turns them into bugs that can only be identified with a binary logger / verbose log\r\n\r\nClassic example in this bug https://github.com/dotnet/roslyn/issues/25286\r\n\r\nHere an experienced developer sees a compiler crash and has to throw their hands in the air because the error code is worthless. Yet binary log trivially shows the problem here.",
  "state": "OPEN",
  "createdAt": "2018-03-07T00:30:28Z",
  "updatedAt": "2024-02-21T16:34:41Z",
  "closedAt": null,
  "author": {
    "login": "KirillOsenkov"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "MSBuild doesn't know anything about stack traces. It isn't hiding them from you.\r\n\r\nToolTask itself is quite general. It can be configured to treat the tool's standard out and standard error streams as different levels of importance. This is important because some tools are very chatty, while others produce output only in error cases--in the former case, the task author probably wants to push the message priority down so it's only captured in high-verbosity logs, while in the latter it might be interesting to raise the priority.\r\n\r\nIn this case, the .NET Framework emits unhandled exception stack traces to stderr, which is by default \r\na) [parsed](https://github.com/Microsoft/msbuild/blob/f172b9afbec5e9187a59eba6ec9b0bd2bf3fb082/src/Utilities/ToolTask.cs#L1228-L1231) for error strings in the MSBuild/VC++/C# style and otherwise b) logged [at \"normal\" verbosity](https://github.com/Microsoft/msbuild/blob/f172b9afbec5e9187a59eba6ec9b0bd2bf3fb082/src/Utilities/ToolTask.cs#L306-L309). Replaying the binary log with a `/v:normal` logger attached includes the stack traces, but they weren't surfaced from Jenkins because the console logger (piped to the Jenkins result page) was set to `Verbosity=minimal`.\r\n\r\nIt's my understanding that the Roslyn compilers never emit to standard error intentionally. If that's true, diagnosing problems like this could be assisted by the task in a few ways:\r\n\r\n* Overriding `LogStandardErrorAsError` to return `true` would ensure that these stack traces get logged as errors, visible at all MSBuild verbosities.\r\n* Overriding `StandardErrorLoggingImportance` to return `High` would ensure that anything written to csc's stderr would be logged at MSBuild's `Minimal` and higher verbosities.\r\n\r\nAnother possibility at the MSBuild level would be a feature request like #3056, but I'm not sure that's reasonably possible in MSBuild.",
        "createdAt": "2018-03-07T06:28:26Z",
        "updatedAt": "2018-03-07T06:28:26Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> It's my understanding that the Roslyn compilers never emit to standard error intentionally.\r\n\r\nThat is correct. \r\n\r\n> If that's true, diagnosing problems like this could be assisted by the task in a few ways:\r\n\r\nWhy is this not the default? Has MSBuild ever considered adding a derivation of `ToolTask` named `ManagedToolTask` that has more sensible defaults? The current default means that `ToolTask` authors need to opt into reasonable behavior (seriously doubt many know to). \r\n",
        "createdAt": "2018-03-07T15:49:24Z",
        "updatedAt": "2018-03-07T15:49:24Z",
        "author": {
          "login": "jaredpar"
        }
      },
      {
        "body": "Are there any negative / unintended effects we should be wary of with such a change? ",
        "createdAt": "2018-06-01T18:08:06Z",
        "updatedAt": "2018-06-01T18:08:06Z",
        "author": {
          "login": "jaredpar"
        }
      },
      {
        "body": "Not that I can think of. Anything the CLR emits to stderr without the application itself doing it seems like it'd justify an error.",
        "createdAt": "2018-06-01T18:16:35Z",
        "updatedAt": "2018-06-01T18:16:35Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Okay. Let's give it a whirl.",
        "createdAt": "2018-06-01T18:22:30Z",
        "updatedAt": "2018-06-01T18:22:30Z",
        "author": {
          "login": "jaredpar"
        }
      },
      {
        "body": "Hmm. This doesn't seem to get us to the end goal. The exception text, at least on my developer builds, is never actually printed out. It' gets intercepted by Watson (possibly?). Hence not even on stderror to be redirected. \r\n\r\nYet the exception logs are plainly visible in binlogs. So weird.",
        "createdAt": "2018-06-01T19:40:51Z",
        "updatedAt": "2018-06-01T19:41:33Z",
        "author": {
          "login": "jaredpar"
        }
      },
      {
        "body": "But it appears in the log, still?",
        "createdAt": "2018-06-01T19:43:38Z",
        "updatedAt": "2018-06-01T19:43:38Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "At @nguerrera I tried on core and I'm getting the behavior I would expect now. The stack trace is printed to the command line now when invoked from MSBuild (after this change). Not sure why Desktop is different. Either way this does appear to be the direction we need to go. \r\n\r\nBTW: stack overflows in the compiler take a **long** time to print to the CMD console. ",
        "createdAt": "2018-06-01T19:50:39Z",
        "updatedAt": "2018-06-01T19:50:39Z",
        "author": {
          "login": "jaredpar"
        }
      }
    ]
  }
}