{
  "number": 8117,
  "title": "ItemGroup with metadata inside Target produces duplicate items",
  "body": "### Issue Description\r\nWhen an `ItemGroup` is used inside a `Target` and references item metadata like `%(Filename)`, each subsequent `ItemGroup` is redundantly evaluated once for each item enumerated by the previous `ItemGroup`, resulting in duplicate items in the final list. When the items are `Compile` items, this can lead to warning CS2002 which may cause pipeline builds to fail when `-warnaserror` is used.\r\n\r\n### Steps to Reproduce\r\nHere's an example target which demonstrates the issue; a min-repro solution is also attached.\r\n```xml\r\n<Target Name=\"EnumerateFiles\">\r\n  <ItemGroup>\r\n    <MyFile Include=\"A/**/*.txt\" Link=\"%(Filename)\"/>\r\n    <MyFile Include=\"B/**/*.txt\" Link=\"%(Filename)\"/>\r\n    <MyFile Include=\"C/**/*.txt\" Link=\"%(Filename)\"/>\r\n  </ItemGroup>\r\n  <Error Condition=\"'@(MyFile)' != 'A\\1.txt;A\\2.txt;B\\3.txt;C\\4.txt'\" Text=\"Duplicate files enumerated: @(MyFile)\"/>\r\n</Target>\r\n```\r\n\r\n[DuplicateItemMinRepro.zip](https://github.com/dotnet/msbuild/files/9924208/DuplicateItemMinRepro.zip)\r\n\r\n### Expected Behavior\r\nEach item matched by the wildcard is enumerated exactly once.\r\n\r\n### Actual Behavior\r\nDuplicate items are enumerated.\r\n\r\n### Analysis\r\nIt seems like the implementation of `ItemGroup` may leave some state behind which isn't cleared when the next `ItemGroup` is evaluated.\r\n\r\n### Versions & Configurations\r\nMSBuild version 17.3.1+2badb37d1 for .NET Framework\r\n17.3.1.41501",
  "state": "CLOSED",
  "createdAt": "2022-11-02T21:21:50Z",
  "updatedAt": "2022-11-03T17:58:34Z",
  "closedAt": "2022-11-03T17:58:34Z",
  "author": {
    "login": "dfields-msft"
  },
  "labels": [
    "bug",
    "needs-triage"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "The globbing is a bit off a red herring here; you can reproduce the behavior without:\r\n\r\n```xml\r\n<Project>\r\n\r\n<Target Name=\"EnumerateFiles\">\r\n  <ItemGroup>\r\n    <MyFile Include=\"A\" Link=\"%(Filename)\"/>\r\n    <MyFile Include=\"B\" Link=\"%(Filename)\"/>\r\n    <MyFile Include=\"C\" Link=\"%(Filename)\"/>\r\n  </ItemGroup>\r\n  <!-- <Error Condition=\"'@(MyFile)' != 'A\\1.txt;A\\2.txt;B\\3.txt;C\\4.txt'\" Text=\"Duplicate files enumerated: @(MyFile)\"/> -->\r\n\r\n  <Message Importance=\"high\" Text=\"MyFile: Identity= %(MyFile.Identity) Link= %(MyFile.Link)\" />\r\n</Target>\r\n\r\n</Project>\r\n```\r\n\r\n```sh-session\r\n\u276f dotnet build .\\foo.proj\r\nMSBuild version 17.4.0-preview-22470-08+6521b1591 for .NET\r\n  MyFile: Identity= A Link=\r\n  MyFile: Identity= B Link= A\r\n  MyFile: Identity= C Link= A\r\n  MyFile: Identity= C Link= B\r\n```\r\n\r\nWhat is happening here is that the syntax you've posted, when inside a target, causes [batching](https://learn.microsoft.com/visualstudio/msbuild/msbuild-batching).\r\n\r\n1. The first line executes, sees that there are no `@(MyFile)` items, and evaluates `%(Filename)` to the empty string.\r\n2. The second line executes, sees that there is one item (in my example with no globs), and evaluates `%(Filename)` to its name, so you get `B` with metadata `A`\r\n3. The third line sees that there are two items with distinct filenames, and runs in two batches, so you get `C` with metadata `A` and `C` with metadata `B`.\r\n\r\nOutside a target, the `%()` syntax is interpreted differently and applies to the items being created by the `Include`'s expansion.\r\n\r\nYou may wish to try something like this:\r\n\r\n```diff\r\ndiff --git a/DuplicateItemMinRepro.csproj b/DuplicateItemMinRepro.csproj\r\nindex 220ad4a..30bb7d8 100644\r\n--- a/DuplicateItemMinRepro.csproj\r\n+++ b/DuplicateItemMinRepro.csproj\r\n@@ -8,10 +8,13 @@\r\n \r\n   <Target Name=\"EnumerateFiles\">\r\n     <ItemGroup>\r\n-      <MyFile Include=\"A/**/*.txt\" Link=\"%(Filename)\"/>\r\n-      <MyFile Include=\"B/**/*.txt\" Link=\"%(Filename)\"/>\r\n-      <MyFile Include=\"C/**/*.txt\" Link=\"%(Filename)\"/>\r\n+      <MyFile Include=\"A/**/*.txt\" />\r\n+      <MyFile Include=\"B/**/*.txt\" />\r\n+      <MyFile Include=\"C/**/*.txt\" />\r\n+\r\n+      <MyFile Link=\"%(MyFile.FileName)\" />\r\n     </ItemGroup>\r\n+\r\n     <Error Condition=\"'@(MyFile)' != 'A\\1.txt;A\\2.txt;B\\3.txt;C\\4.txt'\" Text=\"Duplicate files enumerated: @(MyFile)\"/>\r\n   </Target>\r\n \r\n```",
        "createdAt": "2022-11-03T16:51:41Z",
        "updatedAt": "2022-11-03T16:51:41Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Aha, thank you for the clear explanation! I was aware of batching, but hadn't comprehended how it would manifest in this case and expected it to apply as it does outside the target. Effectively, each item declaration was doing a for-each over the current set of items and using *those* items to generate metadata for the new item(s), rather than using each new item to generate metadata for itself (as is done outside the task). Your alternative solution works well to apply the metadata separately from enumerating items inside the target (though I will note that if there were additional items already in the list prior to this `ItemGroup` I think the metadata will be applied to them as well; this could be worked around by enumerating a distinct list of items and then merging those into the pre-existing list).",
        "createdAt": "2022-11-03T17:58:34Z",
        "updatedAt": "2022-11-03T17:58:34Z",
        "author": {
          "login": "dfields-msft"
        }
      }
    ]
  }
}