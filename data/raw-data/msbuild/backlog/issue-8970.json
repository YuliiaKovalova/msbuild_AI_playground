{
  "number": 8970,
  "title": "Building a NET6/NET7 iOS project on agent M2 ARM 64 hangs/freezes",
  "body": "_From @vincentcastagna on Thu, 16 Mar 2023 14:21:20 GMT_\n\n### Steps to Reproduce\r\n\r\n1. Create an agent on M2 ARM 64 agent (3.214.0)\r\n2. Build a .NET6/.NET7 iOS project\r\n3. Notice the build MIGHT hang sometimes on Apple Clang process\r\n\r\nWe don't face the issue on X64 on prem agents or even hosted. \r\nThere is no real consistency on when the build will hangs or not. It depends on the run.\r\n\r\nWe already tried removing Trimmer, which doesn't seem to have any effect. With or without, the behavior is the same. \r\n\r\n### Expected Behavior\r\n\r\nBuild should never hang\r\n\r\n### Actual Behavior\r\n\r\nBuild hangs sometimes and never ends, until timeout\r\n\r\n### Environment\r\n\r\n- Xcode 14.2\r\n- Visual Studio for mac 17.5.1\r\n- This is the [.csproj](https://github.com/nventive/UnoApplicationTemplate/blob/dev/vica/make-usage-new-agents-net7.0/src/app/ApplicationTemplate.Mobile/ApplicationTemplate.Mobile.csproj) that we try to build \r\n\r\nAGENT CAPABILITIES : \r\n\r\n<html>\r\n<body>\r\n<!--StartFragment-->\r\n\r\nAgent.Name | MACOS-2C83F31C-42D1-4BA5-9686-611EB3632BD4 | \u00a0 | \u00a0\r\n-- | -- | -- | --\r\n\u00a0 | Agent.Version | 3.214.0 | \u00a0 | \u00a0\r\n\u00a0 | _ | ./externals/node16/bin/node | \u00a0 | \u00a0\r\n\u00a0 | __CF_USER_TEXT_ENCODING | 0x1F5:0x0:0x52 | \u00a0 | \u00a0\r\n\u00a0\r\n\u00a0 | CP_HOME_DIR | /Users/administrator/agent/_work/_temp/.cocoapods | \u00a0 | \u00a0\r\n\u00a0 | curl | /usr/bin/curl | \u00a0 | \u00a0\r\n\u00a0 | dotnet | /usr/local/share/dotnet/dotnet | \u00a0 | \u00a0\r\n\u00a0 | DOTNET_ROOT | /usr/local/share/dotnet | \u00a0 | \u00a0\r\n\u00a0 | git | /usr/bin/git | \u00a0 | \u00a0\r\n\u00a0 | HOME | /Users/administrator | \u00a0 | \u00a0\r\n\u00a0 | InteractiveSession | False | \u00a0 | \u00a0\r\n\u00a0 | java | /usr/bin/java | \u00a0 | \u00a0\r\n\u00a0 | JDK | /usr/bin/javac | \u00a0 | \u00a0\r\n\u00a0 | LANG | en_CA.UTF-8 | \u00a0 | \u00a0\r\n\u00a0 | LOGNAME | administrator | \u00a0 | \u00a0\r\n\u00a0 | make | /usr/bin/make | \u00a0 | \u00a0\r\n\u00a0 | MSBuild | /Library/Frameworks/Mono.framework/Versions/Current/Commands/msbuild | \u00a0 | \u00a0\r\n\u00a0 | NUGET_HTTP_CACHE_PATH | /Users/administrator/agent/_work/_temp/.nuget-http-cache | \u00a0 | \u00a0\r\n\u00a0 | NUGET_PACKAGES | /Users/administrator/agent/_work/_temp/.nuget | \u00a0 | \u00a0\r\n\u00a0 | PATH | /Users/administrator/.rbenv/shims:/opt/homebrew/bin:/opt/homebrew/sbin:/usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/share/dotnet:~/.dotnet/tools:/Library/Apple/usr/bin:/Library/Frameworks/Mono.framework/Versions/Current/Commands | \u00a0 | \u00a0\r\n\u00a0 | PWD | /Users/administrator/agent | \u00a0 | \u00a0\r\n\u00a0 | python3 | /usr/bin/python3 | \u00a0 | \u00a0\r\n\u00a0 | rake | /Users/administrator/.rbenv/shims/rake | \u00a0 | \u00a0\r\n\u00a0 | ruby | /Users/administrator/.rbenv/shims/ruby | \u00a0 | \u00a0\r\n\u00a0 | sh | /bin/sh | \u00a0 | \u00a0\r\n\u00a0 | SHELL | /bin/zsh | \u00a0 | \u00a0\r\n\u00a0 | SSH_AUTH_SOCK | /private/tmp/com.apple.launchd.MgBJHUlv5M/Listeners | \u00a0 | \u00a0\r\n\u00a0 | TMPDIR | /var/folders/33/ph0v51hd30n2frx557550mnc0000gn/T/ | \u00a0 | \u00a0\r\n\u00a0 | USER | administrator | \u00a0 | \u00a0\r\n\u00a0 | VSTS_AGENT_SVC | 1 | \u00a0 | \u00a0\r\n\u00a0 | Xamarin.iOS | /Applications/Visual Studio.app/Contents/MacOS/vstool | \u00a0 | \u00a0\r\n\u00a0 | Xamarin.iOS_Version | 16.1.1 | \u00a0 | \u00a0\r\n\u00a0 | XamarinBuildDownloadDir | /Users/administrator/agent/_work/_temp/.xbcache | \u00a0 | \u00a0\r\n\u00a0 | xcode | /Applications/Xcode.app/Contents/Developer | \u00a0 | \u00a0\r\n\u00a0 | Xcode_Version | 14.2 | \u00a0 | \u00a0\r\n\u00a0 | XPC_FLAGS | 0x0 | \u00a0 | \u00a0\r\n\u00a0 | XPC_SERVICE_NAME | 0\r\n\r\n<!--EndFragment-->\r\n</body>\r\n</html>\r\n\r\n### Build Logs\r\n\r\n- Working build logs => \r\n[iOS BUILD - OK.txt](https://github.com/xamarin/xamarin-macios/files/10991738/iOS.BUILD.-.OK.txt)\r\n\r\n- Hanging build logs => \r\n[iOS BUILD - HANGS.txt](https://github.com/xamarin/xamarin-macios/files/10991734/iOS.BUILD.-.HANGS.txt)\r\n\r\n**MSBUILD BINLOG** (seem corrupted ...)\r\n\r\n[build-net7.0-ios.zip](https://github.com/xamarin/xamarin-macios/files/10992008/build-net7.0-ios.zip)\r\n\r\n### Example Project (If Possible)\r\n\r\nhttps://github.com/nventive/UnoApplicationTemplate/blob/dev/vica/make-usage-new-agents-net7.0/src/app/ApplicationTemplate.Mobile/ApplicationTemplate.Mobile.csproj\r\n\n\n_Copied from original issue xamarin/xamarin-macios#17825_",
  "state": "CLOSED",
  "createdAt": "2023-06-28T09:05:50Z",
  "updatedAt": "2023-08-23T05:07:51Z",
  "closedAt": "2023-08-23T05:07:50Z",
  "author": {
    "login": "rolfbjarne"
  },
  "labels": [
    "needs-triage"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "AR-May"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "_From @rolfbjarne on Thu, 16 Mar 2023 14:40:58 GMT_\n\n@vincentcastagna have you ever seen this on an M1 machine? or have you never tried on M1?",
        "createdAt": "2023-06-28T09:05:52Z",
        "updatedAt": "2023-06-28T09:05:52Z",
        "author": {
          "login": "rolfbjarne"
        }
      },
      {
        "body": "_From @msftbot[bot] on Thu, 16 Mar 2023 14:42:00 GMT_\n\nHi @vincentcastagna. We have added the \"need-info\" label to this issue, which indicates that we have an open question for you before we can take further action. This issue will be closed automatically in 7 days if we do not hear back from you by then - please feel free to re-open it if you come back to this issue after that time.",
        "createdAt": "2023-06-28T09:05:53Z",
        "updatedAt": "2023-06-28T09:05:53Z",
        "author": {
          "login": "rolfbjarne"
        }
      },
      {
        "body": "_From @vincentcastagna on Thu, 16 Mar 2023 15:34:27 GMT_\n\n> @vincentcastagna have you ever seen this on an M1 machine? or have you never tried on M1?\r\n\r\nI don't believe we tried on a M1 machine with a .NET6/.NET7 iOS project (only Xamarin.IOS). We will try asap and give feedback here. ",
        "createdAt": "2023-06-28T09:05:54Z",
        "updatedAt": "2023-06-28T09:05:54Z",
        "author": {
          "login": "rolfbjarne"
        }
      },
      {
        "body": "_From @vincentcastagna on Thu, 16 Mar 2023 17:27:08 GMT_\n\n~~I believe this might also be linked with this issue that I opened recently on ADO pipelines repo : https://github.com/microsoft/azure-pipelines-agent/issues/4205~~",
        "createdAt": "2023-06-28T09:05:55Z",
        "updatedAt": "2023-06-28T09:05:55Z",
        "author": {
          "login": "rolfbjarne"
        }
      },
      {
        "body": "_From @mattjohnsonpint on Sat, 18 Mar 2023 19:35:00 GMT_\n\nNot sure if this is the same thing, but this hangs during the AOT compilation every time (running on an M1):\r\n\r\n```\r\ndotnet new ios\r\ndotnet build --sc -r iossimulator-arm64 -c Release\r\n```\r\n\r\nWorks fine for `iossimulator-x64` or `ios-arm64`.  Also works fine for `iossimulator-arm64` in debug builds, just not in release builds.  (I believe debug builds aren't AOT compiled, right?)",
        "createdAt": "2023-06-28T09:05:56Z",
        "updatedAt": "2023-06-28T09:09:57Z",
        "author": {
          "login": "rolfbjarne"
        }
      },
      {
        "body": "_From @mattjohnsonpint on Sat, 18 Mar 2023 21:20:19 GMT_\n\nRelated, is there a reason that the AOT process on an arm64 machine has to run though x64 emulation?  I see it's using Microsoft.NETCore.App.Runtime.AOT.osx-x64.Cross.iossimulator-arm64.  I don't see any published packages for ...AOT.osx-arm64...\r\nIt seemed strange to run emulate just to cross compile back to the original architecture. Certainly not the best for perf.",
        "createdAt": "2023-06-28T09:05:57Z",
        "updatedAt": "2023-06-28T09:10:04Z",
        "author": {
          "login": "rolfbjarne"
        }
      },
      {
        "body": "_From @vincentcastagna on Mon, 20 Mar 2023 15:07:04 GMT_\n\n@rolfbjarne We have tested on a M1 machine. The behavior is exactly the same, sometimes it builds successfully, sometimes it just hangs. Seem to be happening half the time, exactly like M2. \r\n\r\n[iOS BUILD M1 - HANGS.txt](https://github.com/xamarin/xamarin-macios/files/11019723/iOS.BUILD.M1.-.HANGS.txt)\r\n\r\n",
        "createdAt": "2023-06-28T09:05:58Z",
        "updatedAt": "2023-06-28T09:05:58Z",
        "author": {
          "login": "rolfbjarne"
        }
      },
      {
        "body": "_From @rolfbjarne on Tue, 21 Mar 2023 09:02:20 GMT_\n\n> Related, is there a reason that the AOT process on an arm64 machine has to run though x64 emulation? I see it's using Microsoft.NETCore.App.Runtime.AOT.osx-x64.Cross.iossimulator-arm64. I don't see any published packages for ...AOT.osx-arm64...\r\n> It seemed strange to run emulate just to cross compile back to the original architecture. Certainly not the best for perf.\r\n\r\nJust time constraints. We're fixing it for .NET 8 (https://github.com/dotnet/runtime/issues/74175).",
        "createdAt": "2023-06-28T09:05:59Z",
        "updatedAt": "2023-06-28T09:10:15Z",
        "author": {
          "login": "rolfbjarne"
        }
      },
      {
        "body": "_From @rolfbjarne on Tue, 21 Mar 2023 20:56:25 GMT_\n\n> Not sure if this is the same thing, but this hangs during the AOT compilation every time (running on an M1):\r\n> \r\n> ```\r\n> dotnet new ios\r\n> dotnet build --sc -r iossimulator-arm64 -c Release\r\n> ```\r\n> \r\n> Works fine for `iossimulator-x64` or `ios-arm64`. Also works fine for `iossimulator-arm64` in debug builds, just not in release builds. (I believe debug builds aren't AOT compiled, right?)\r\n\r\nI think this is a different issue, because I believe this is just the build taking very long because of a few things add up:\r\n\r\n* When building for ARM64, we use the AOT compiler (which is quite slow).\r\n* When building for the simulator, we disable the trimmer (so everything in the BCL has to be AOT compiled).\r\n* When building for Release, we enable LLVM (which is _very_ slow) - this is the most significant change wrt the Debug configuration.\r\n\r\nIf you add `<MtouchUseLlvm>false</MtouchUseLlvm>` to the csproj, I believe your Release build will be faster.\r\n\r\nThis might also work for your device builds (for different reasons - we've seen llvm run into infinite loops in the past) - so could you try and see if you notice any difference?",
        "createdAt": "2023-06-28T09:06:01Z",
        "updatedAt": "2023-06-28T09:10:26Z",
        "author": {
          "login": "rolfbjarne"
        }
      },
      {
        "body": "_From @msftbot[bot] on Tue, 21 Mar 2023 20:56:55 GMT_\n\nHi @vincentcastagna. We have added the \"need-info\" label to this issue, which indicates that we have an open question for you before we can take further action. This issue will be closed automatically in 7 days if we do not hear back from you by then - please feel free to re-open it if you come back to this issue after that time.",
        "createdAt": "2023-06-28T09:06:02Z",
        "updatedAt": "2023-06-28T09:10:35Z",
        "author": {
          "login": "rolfbjarne"
        }
      },
      {
        "body": "_From @vincentcastagna on Wed, 22 Mar 2023 20:42:33 GMT_\n\n@rolfbjarne Not sure what extra info you would need ? I can provide.\r\n**mattjohnsonpint** comments are unrelated to this issue I believe. \r\n\r\nI omitted to precise that those agents are fully working on ANY Xamarin project, the build is super fast and never fails. Only our .NET6/.NET7 agents randomly hangs. ",
        "createdAt": "2023-06-28T09:06:03Z",
        "updatedAt": "2023-06-28T09:06:03Z",
        "author": {
          "login": "rolfbjarne"
        }
      },
      {
        "body": "_From @mattjohnsonpint on Wed, 22 Mar 2023 21:34:39 GMT_\n\n@rolfbjarne - you were right on all accounts.  I just had to wait about 6 minutes instead of the normal 5 to 10 seconds.  Setting `MtouchUseLlvm=false` returned it to normal speed.\r\n\r\n@vincentcastagna - Sorry.  I didn't mean to hijack this thread.  Just thought it could be useful.  Not sure if that's what's happening on your build agents or not.  Thanks.",
        "createdAt": "2023-06-28T09:06:04Z",
        "updatedAt": "2023-06-28T09:10:44Z",
        "author": {
          "login": "rolfbjarne"
        }
      },
      {
        "body": "_From @rolfbjarne on Thu, 23 Mar 2023 08:49:39 GMT_\n\n@vincentcastagna I'm assuming you only see this when building in Azure DevOps, and never locally?\r\n\r\nOne theory is that something pops up a permission dialog for some reason, and that blocks the build until it times out. Unfortunately these issues can be hard to track down unless you can access the built bot remotely (and catch it when the build is stuck).\r\n\r\nOne idea might be to make the build as verbose as possible, that should pinpoint a bit better exactly where it stops, and this is done by passing /v:diagnostic to the dotnet command:\r\n\r\n> dotnet build myapp.csproj /v:diagnostic\r\n\r\nCould you do this and see what it shows?\r\n\r\n",
        "createdAt": "2023-06-28T09:06:06Z",
        "updatedAt": "2023-06-28T09:06:06Z",
        "author": {
          "login": "rolfbjarne"
        }
      },
      {
        "body": "_From @msftbot[bot] on Thu, 23 Mar 2023 08:49:51 GMT_\n\nHi @vincentcastagna. We have added the \"need-info\" label to this issue, which indicates that we have an open question for you before we can take further action. This issue will be closed automatically in 7 days if we do not hear back from you by then - please feel free to re-open it if you come back to this issue after that time.",
        "createdAt": "2023-06-28T09:06:07Z",
        "updatedAt": "2023-06-28T09:10:57Z",
        "author": {
          "login": "rolfbjarne"
        }
      },
      {
        "body": "_From @vincentcastagna on Fri, 24 Mar 2023 17:26:00 GMT_\n\n@rolfbjarne here logs with /v:diagnostic you can see the instruction at the top of the logs. I don't see a real difference with or without this instruction. I have access to the machine of the agent, and I have never seen a permission dialog poping up though ... even in CLI logs or else. \r\n\r\n[iOS BUILD diagnostics - HANGS.txt](https://github.com/xamarin/xamarin-macios/files/11064885/iOS.BUILD.diagnostics.-.HANGS.txt)\r\n\r\n[iOS BUILD diagnostics - OK.txt](https://github.com/xamarin/xamarin-macios/files/11064958/iOS.BUILD.diagnostics.-.OK.txt)\r\n\r\n\r\n",
        "createdAt": "2023-06-28T09:06:08Z",
        "updatedAt": "2023-06-28T09:06:08Z",
        "author": {
          "login": "rolfbjarne"
        }
      },
      {
        "body": "_From @rolfbjarne on Mon, 27 Mar 2023 15:35:15 GMT_\n\n> I don't see a real difference with or without this instruction.\r\n\r\nBecause right after `/v:diagnostic` it's changed again to `-verbosity:n`:\r\n\r\n> /v:diagnostic -verbosity:n \r\n\r\n",
        "createdAt": "2023-06-28T09:06:09Z",
        "updatedAt": "2023-06-28T09:06:09Z",
        "author": {
          "login": "rolfbjarne"
        }
      },
      {
        "body": "_From @vincentcastagna on Mon, 27 Mar 2023 17:24:31 GMT_\n\n> > I don't see a real difference with or without this instruction.\r\n> \r\n> Because right after `/v:diagnostic` it's changed again to `-verbosity:n`:\r\n> \r\n> > /v:diagnostic -verbosity:n\r\n\r\nOh my bad, I missunderstood your previous comment, I will provide logs wtih verbosity level set to diagnostic asap. ",
        "createdAt": "2023-06-28T09:06:10Z",
        "updatedAt": "2023-06-28T09:06:10Z",
        "author": {
          "login": "rolfbjarne"
        }
      },
      {
        "body": "_From @vincentcastagna on Tue, 28 Mar 2023 19:46:38 GMT_\n\n@rolfbjarne plz find attached two logs diag level, one hanging, the other successful, needed to zip it as it exceeds file limitation of 25mb\r\n\r\n[LOGS AGENTS.zip](https://github.com/xamarin/xamarin-macios/files/11093592/LOGS.AGENTS.zip)\r\n",
        "createdAt": "2023-06-28T09:06:11Z",
        "updatedAt": "2023-06-28T09:06:11Z",
        "author": {
          "login": "rolfbjarne"
        }
      },
      {
        "body": "_From @rolfbjarne on Wed, 29 Mar 2023 19:54:33 GMT_\n\n@vincentcastagna unfortunately that didn't give any new clues.\r\n\r\nThe next I'd try would be:\r\n\r\n* Figure out exactly which process is hanging.\r\n    * Activity Monitor can help here (is any process consuming 100% CPU?).\r\n    * Alternatively use `pstree` [1], which will give you the entire process tree, and you can see where the build is stuck.\r\n    * Using the Activity Monitor, it might also be useful to get a sample report (double-click the process, lower left corner there's a \"Sample\" button, which will sample the process for a few seconds and give a report about where the time was spent).\r\n* Assuming it's the AOT compiler that gets stuck: is it always when compiling the same assembly? Or is it a different assembly on every build?\r\n\r\n[1]: can be installed with `brew install pstree` (if you first install [brew](https://brew.sh/)).",
        "createdAt": "2023-06-28T09:06:13Z",
        "updatedAt": "2023-06-28T09:06:13Z",
        "author": {
          "login": "rolfbjarne"
        }
      },
      {
        "body": "_From @vincentcastagna on Fri, 31 Mar 2023 16:56:47 GMT_\n\n@rolfbjarne \r\n\r\nSo this is how the ActivityMonitor looks like after 45 min of hanging : \r\n\r\n![image](https://user-images.githubusercontent.com/15191066/229181767-73a8987b-3361-4746-8cf1-6c4e3fae2e66.png)\r\n\r\nI have sampled multiple processes : \r\n- Dotnet \r\n[Sample of dotnet.txt](https://github.com/xamarin/xamarin-macios/files/11124187/Sample.of.dotnet.txt)\r\n\r\n- Agent.Worker\r\n[Sample of Agent.Worker.txt](https://github.com/xamarin/xamarin-macios/files/11124188/Sample.of.Agent.Worker.txt)\r\n\r\n- VisualStudio \r\n[Sample of Visual Studio.txt](https://github.com/xamarin/xamarin-macios/files/11124190/Sample.of.Visual.Studio.txt)\r\n\r\n- The pstree output \r\n[PstreeOutput.txt](https://github.com/xamarin/xamarin-macios/files/11124193/PstreeOutput.txt)\r\n\r\n- Yes we do compile the same assembly. But we also tested by compiling another set of assemblies, and the behavior is exactly the same. \r\n\r\n",
        "createdAt": "2023-06-28T09:06:14Z",
        "updatedAt": "2023-06-28T09:06:14Z",
        "author": {
          "login": "rolfbjarne"
        }
      },
      {
        "body": "_From @rolfbjarne on Mon, 10 Apr 2023 14:18:06 GMT_\n\nThe `pstree` info is potentially interesting, but unfortunately the important bits have been cut off:\r\n\r\n```\r\n|-+= 17099 administrator /bin/bash /Users/administrator/agent2/runsvc.sh\r\n | \\-+- 17108 administrator ./externals/node16/bin/node ./bin/AgentService.js\r\n |   \\-+- 17120 administrator /Users/administrator/agent2/bin/Agent.Listener ru\r\n |     \\-+- 48081 administrator /Users/administrator/agent2/bin/Agent.Worker sp\r\n |       |--- 48093 administrator /Users/administrator/agent2/bin/Agent.PluginH\r\n |       \\-+- 48804 administrator /Users/administrator/agent2/externals/node16/\r\n |         \\-+- 48805 administrator /bin/bash /Users/administrator/agent2/_work\r\n |           \\-+- 48806 administrator dotnet publish -f:net7.0-ios -c:Release -\r\n |             |--- 48807 administrator /Users/administrator/agent2/_work/_temp\r\n |             |--- 48808 administrator /Users/administrator/agent2/_work/_temp\r\n |             |--- 49623 administrator <defunct>\r\n |             |--- 49638 administrator <defunct>\r\n |             |--- 49648 administrator <defunct>\r\n |             |--- 49652 administrator <defunct>\r\n |             |--- 49654 administrator <defunct>\r\n |             |--- 49656 administrator <defunct>\r\n |             |--- 49658 administrator <defunct>\r\n |             |--- 49660 administrator <defunct>\r\n |             |--- 49662 administrator <defunct>\r\n |             |--- 49664 administrator <defunct>\r\n |             |--- 49665 administrator <defunct>\r\n |             \\--- 49668 administrator <defunct>\r\n\r\n```\r\n\r\nthe `dotnet publish` process is waiting for two other processes to finish, but the output doesn't say which processes those were, because the output was cut off at 80 characters. Could you try again, and somehow not truncate the output (my `pstree` doesn't do that, so I'm not sure how to fix it)?",
        "createdAt": "2023-06-28T09:06:15Z",
        "updatedAt": "2023-06-28T09:06:15Z",
        "author": {
          "login": "rolfbjarne"
        }
      },
      {
        "body": "_From @vincentcastagna on Tue, 11 Apr 2023 17:00:34 GMT_\n\n@rolfbjarne  I will provide a new pstree and checking that its not truncated. ~~For now I'm kind of blocked due to this error : https://github.com/dotnet/installer/issues/16038~~",
        "createdAt": "2023-06-28T09:06:16Z",
        "updatedAt": "2023-06-28T09:06:16Z",
        "author": {
          "login": "rolfbjarne"
        }
      },
      {
        "body": "_From @vincentcastagna on Tue, 11 Apr 2023 18:54:21 GMT_\n\n@rolfbjarne well I believe its because I did not output to file directly. \r\n\r\nPlease find here the full pstree not truncated. \r\n\r\n[FullPstreeOutput.txt](https://github.com/xamarin/xamarin-macios/files/11203902/FullPstreeOutput.txt)",
        "createdAt": "2023-06-28T09:06:17Z",
        "updatedAt": "2023-06-28T09:06:17Z",
        "author": {
          "login": "rolfbjarne"
        }
      },
      {
        "body": "_From @rolfbjarne on Tue, 11 Apr 2023 19:08:14 GMT_\n\nI wonder if you're running into this: https://github.com/dotnet/msbuild/issues/6753\r\n\r\nCan you try setting `MSBUILDENSURESTDOUTFORTASKPROCESSES=1` in the environment to see if that changes something?",
        "createdAt": "2023-06-28T09:06:19Z",
        "updatedAt": "2023-06-28T09:06:19Z",
        "author": {
          "login": "rolfbjarne"
        }
      },
      {
        "body": "_From @vincentcastagna on Tue, 11 Apr 2023 20:33:14 GMT_\n\n@rolfbjarne just to be sure `setting MSBUILDENSURESTDOUTFORTASKPROCESSES=1 in the environment` is passing this as an msbuild arguments `/p:MSBUILDENSURESTDOUTFORTASKPROCESSES=1` ? \r\nIf that's the case, then it did not change the behavior. I can still post a new pstree output with this new arg. \r\n\r\nProbably more like that, right ? \r\n\r\n```yml\r\n      env:\r\n        MSBUILDENSURESTDOUTFORTASKPROCESSES: 1\r\n```",
        "createdAt": "2023-06-28T09:06:20Z",
        "updatedAt": "2023-06-28T09:06:20Z",
        "author": {
          "login": "rolfbjarne"
        }
      },
      {
        "body": "_From @rolfbjarne on Tue, 11 Apr 2023 20:43:47 GMT_\n\n> @rolfbjarne just to be sure `setting MSBUILDENSURESTDOUTFORTASKPROCESSES=1 in the environment` is passing this as an msbuild arguments `/p:MSBUILDENSURESTDOUTFORTASKPROCESSES=1` ? If that's the case, then it did not change the behavior. I can still post a new pstree output with this new arg.\r\n> \r\n> Probably more like that, right ?\r\n> \r\n> ```yaml\r\n>       env:\r\n>         MSBUILDENSURESTDOUTFORTASKPROCESSES: 1\r\n> ```\r\n\r\nYes, like that.",
        "createdAt": "2023-06-28T09:06:21Z",
        "updatedAt": "2023-06-28T09:06:21Z",
        "author": {
          "login": "rolfbjarne"
        }
      },
      {
        "body": "_From @vincentcastagna on Wed, 12 Apr 2023 15:18:15 GMT_\n\nHey @rolfbjarne  so I tried with both, as an msbuild arguments and set in the env, because I'm not sure the dotnet process will capture the env variable, so explicitly passing it probably would ensure that. But in any case, both being set, the behavior remains the same. \r\n[PsTreeWithMsbuildEnsureStdout.txt](https://github.com/xamarin/xamarin-macios/files/11213010/PsTreeWithMsbuildEnsureStdout.txt)\r\n\r\n",
        "createdAt": "2023-06-28T09:06:22Z",
        "updatedAt": "2023-06-28T09:06:22Z",
        "author": {
          "login": "rolfbjarne"
        }
      },
      {
        "body": "_From @rolfbjarne on Wed, 12 Apr 2023 15:26:35 GMT_\n\n@vincentcastagna can you try passing `/nodeReuse:false` to `dotnet build` as well?\r\n\r\n    dotnet build /nodeReuse:false ...",
        "createdAt": "2023-06-28T09:06:23Z",
        "updatedAt": "2023-06-28T09:06:23Z",
        "author": {
          "login": "rolfbjarne"
        }
      },
      {
        "body": "_From @vincentcastagna on Wed, 12 Apr 2023 16:17:56 GMT_\n\n> @vincentcastagna can you try passing `/nodeReuse:false` to `dotnet build` as well?\r\n> \r\n> ```\r\n> dotnet build /nodeReuse:false ...\r\n> ```\r\n\r\nI just passed the arguments to dotnet publish, still hanging. Here is pstree output. \r\n\r\n[PsTreeNodeReuse.txt](https://github.com/xamarin/xamarin-macios/files/11213642/PsTreeNodeReuse.txt)\r\n",
        "createdAt": "2023-06-28T09:06:24Z",
        "updatedAt": "2023-06-28T09:06:24Z",
        "author": {
          "login": "rolfbjarne"
        }
      },
      {
        "body": "_From @vincentcastagna on Wed, 19 Apr 2023 19:38:25 GMT_\n\n@rolfbjarne any news regarding this ? Can I provide more logs or else to help you investigate this matter. ",
        "createdAt": "2023-06-28T09:06:25Z",
        "updatedAt": "2023-06-28T09:06:25Z",
        "author": {
          "login": "rolfbjarne"
        }
      },
      {
        "body": "_From @rolfbjarne on Thu, 20 Apr 2023 16:11:56 GMT_\n\n@vincentcastagna I'm sorry I didn't answer earlier, but unfortunately I don't have any good ideas.\r\n\r\nI see you're building the 'Release' configuration, does the same thing happen if you build 'Debug'? If so, one idea might be to turn off LLVM (by setting `<MtouchUseLlvm>false</MtouchUseLlvm>` in the project file or on the command line as `/p:MtouchUseLlvm=false` and see if that makes a difference).",
        "createdAt": "2023-06-28T09:06:27Z",
        "updatedAt": "2023-06-28T09:06:27Z",
        "author": {
          "login": "rolfbjarne"
        }
      },
      {
        "body": "_From @vincentcastagna on Tue, 25 Apr 2023 15:22:17 GMT_\n\n> @vincentcastagna I'm sorry I didn't answer earlier, but unfortunately I don't have any good ideas.\r\n> \r\n> I see you're building the 'Release' configuration, does the same thing happen if you build 'Debug'? If so, one idea might be to turn off LLVM (by setting `<MtouchUseLlvm>false</MtouchUseLlvm>` in the project file or on the command line as `/p:MtouchUseLlvm=false` and see if that makes a difference).\r\n\r\nWe already tried deactivating LLVM when I created the issue, but in case, I retried. And the behavior remains the same, sometimes it goes through, sometimes it just hangs. ",
        "createdAt": "2023-06-28T09:06:28Z",
        "updatedAt": "2023-06-28T09:06:28Z",
        "author": {
          "login": "rolfbjarne"
        }
      },
      {
        "body": "_From @rolfbjarne on Wed, 26 Apr 2023 07:48:35 GMT_\n\n> > @vincentcastagna I'm sorry I didn't answer earlier, but unfortunately I don't have any good ideas.\r\n> > I see you're building the 'Release' configuration, does the same thing happen if you build 'Debug'? If so, one idea might be to turn off LLVM (by setting `<MtouchUseLlvm>false</MtouchUseLlvm>` in the project file or on the command line as `/p:MtouchUseLlvm=false` and see if that makes a difference).\r\n> \r\n> We already tried deactivating LLVM when I created the issue, but in case, I retried. And the behavior remains the same, sometimes it goes through, sometimes it just hangs.\r\n\r\nWhat about a debug build that's not signed, so something like this (i.e. `dotnet build`  instead of `dotnet publish`, and not passing `/p:CodesignProvision=...`)):\r\n\r\n> dotnet build -f:net7.0-ios ...\r\n\r\n",
        "createdAt": "2023-06-28T09:06:29Z",
        "updatedAt": "2023-06-28T09:06:29Z",
        "author": {
          "login": "rolfbjarne"
        }
      },
      {
        "body": "_From @filipnavara on Fri, 28 Apr 2023 21:07:04 GMT_\n\nIf you happen to have a way to run something on the machine with the stuck process then `dotnet-stack` would be useful ([more info here](https://learn.microsoft.com/en-us/dotnet/core/diagnostics/dotnet-stack)). You install the tool with `dotnet tool install --global dotnet-stack` and then run it with `dotnet stack report -p <id of the stuck process>`. Something like `pgrep dotnet | xargs -L1 dotnet stack report -p` would dump stacks of all the `dotnet` processes on the machine.",
        "createdAt": "2023-06-28T09:06:30Z",
        "updatedAt": "2023-06-28T09:06:30Z",
        "author": {
          "login": "rolfbjarne"
        }
      },
      {
        "body": "_From @vincentcastagna on Tue, 23 May 2023 18:04:41 GMT_\n\nI have ran a dotnet stack report -p for each msbuild processes I found running using pstree once a build hangs. I don't see much information here, but hopefully this would be useful to you : \r\n\r\n[msbuildstack.zip](https://github.com/xamarin/xamarin-macios/files/11547118/msbuildstack.zip)\r\n\r\n@filipnavara  I tried to run `pgrep dotnet | xargs -L1 dotnet stack report -p` , but the command line gets frozen and nothing happens. I also tried to write the output in a file but it just hangs \r\n\r\n![image](https://github.com/xamarin/xamarin-macios/assets/15191066/4e026dac-65a4-483f-8911-50902204de6f)\r\n\r\n\r\n",
        "createdAt": "2023-06-28T09:06:31Z",
        "updatedAt": "2023-06-28T09:06:31Z",
        "author": {
          "login": "rolfbjarne"
        }
      },
      {
        "body": "_From @filipnavara on Tue, 23 May 2023 18:54:25 GMT_\n\nBoth of the stack traces contain `OutOfProcNode.Run` so they seem to be waiting for some other MSBuild (?) process.\r\n\r\n>  I tried to run pgrep dotnet | xargs -L1 dotnet stack report -p , but the command line gets frozen and nothing happens.\r\n\r\nThere are two possible explanations for this. Either I messed up and it's trying to dump itself in a loop, or some process is stuck so badly that not even the diagnostic pipes work. The former is not very likely since I tested that very same command locally. The later would likely imply hitting some .NET runtime bug (and there's only one thread-suspension bug that comes to mind which was fixed in .NET 7 iirc)...\r\n",
        "createdAt": "2023-06-28T09:06:33Z",
        "updatedAt": "2023-06-28T09:06:33Z",
        "author": {
          "login": "rolfbjarne"
        }
      },
      {
        "body": "_From @vincentcastagna on Tue, 23 May 2023 19:42:50 GMT_\n\nThank you for your quick answer.\r\n\r\n> Both of the stack traces contain OutOfProcNode.Run so they seem to be waiting for some other MSBuild (?) process.\r\n\r\nAs you saw I found two msbuild processes ... could it be that they wait on each other, driving an endless waiting loop. Any advice maybe to try confirm that or seek for other processes that would be waited by msbuild ?\r\n\r\nI decided to let `pgrep dotnet | xargs -L1 dotnet stack report -p` run . Finally ended ... \r\n\r\n```\r\n[ERROR] System.IO.EndOfStreamException: Unable to read beyond the end of the stream.\r\n   at System.IO.BinaryReader.InternalRead(Int32 numBytes)\r\n   at System.IO.BinaryReader.ReadUInt16()\r\n   at Microsoft.Diagnostics.NETCore.Client.IpcHeader.Parse(BinaryReader[ERROR] System.IO.EndOfStreamException: Unable to read beyond the end of the stream.\r\n   at System.IO.BinaryReader.InternalRead(Int32 numBytes)\r\n   at System.IO.BinaryReader.ReadUInt16()\r\n   at Microsoft.Diagnostics.NETCore.Client.IpcHeader.Parse(BinaryReader reader) in /_/src/Microsoft.Diagnostics.NETCore.Client/DiagnosticsIpc/IpcHeader.cs:line 55\r\n   at Microsoft.Diagnostics.NETCore.Client.IpcMessage.Parse(Stream stream) in /_/src/Microsoft.Diagnostics.NETCore.Client/DiagnosticsIpc/IpcMessage.cs:line 117\r\n   at Microsoft.Diagnostics.NETCore.Client.IpcClient.Read(Stream stream) in /_/src/Microsoft.Diagnostics.NETCore.Client/DiagnosticsIpc/IpcClient.cs:line 107\r\n   at Microsoft.Diagnostics.NETCore.Client.IpcClient.SendMessageGetContinuation(IpcEndpoint endpoint, I reader) in /_/src/Microsoft.Diagnostics.NETCore.Client/DiagnosticsIpc/IpcHeader.cs:line 55\r\n   at Microsoft.Diagnostics.NETCore.Client.IpcMessage.Parse(Stream stream) in /_/src/Microsoft.Diagnostics.NETCore.Client/DiagnosticsIpc/IpcMessage.cs:line 117\r\n   apcMessage message) in /_/src/Microsoft.Diagnostics.NETCore.Client/DiagnosticsIpc/IpcClient.cs:line 44\r\n   at Microsoft.Diagnostics.NETCore.Client.EventPipeSession.Start(IpcEndpoint endpoint, IEnumerable`1 providers, Boolean requestRundown, Int32 circularBufferMB) in /_/src/Microsoft.Diagnostics.NETCore.Client/DiagnosticsClient/EventPipeSession.cs:line 34\r\n   at Microsoft.Diagnostics.Tools.Stack.ReportCommandHandler.Report(CancellationToken ct, IConsole console, Int32 processId, String name, TimeSpan duration)t Microsoft.Diagnostics.NETCore.Client.IpcClient.Read(Stream stream) in /_/src/Microsoft.Diagnostics.NETCore.Client/DiagnosticsIpc/IpcClient.cs:line 107\r\n   at Microsoft.Diagnostics.NETCore.Client.IpcClient.SendMessageGetContinuation(IpcEndpoint endpoint, I\r\npcMessage message) in /_/src/Microsoft.Diagnostics.NETCore.Client/DiagnosticsIpc/IpcClient.cs:line 44\r\n   at Microsoft.Diagnostics.NETCore.Client.EventPipeSession.Start(IpcEndpoint endpoint, IEnumerable`1 providers, Boolean requestRundown, Int32 circularBufferMB) in /_/src/Microsoft.Diagnostics.NETCore.Client/DiagnosticsClient/EventPipeSession.cs:line 34\r\n   at Microsoft.Diagnostics.Tools.Stack.ReportCommandHandler.Report(CancellationToken ct, IConsole console, Int32 processId, String name, TimeSpan duration)\r\nxargs: dotnet: exited with status 255; aborting\r\n```\r\n\r\nI'll also try to target latest .NET 7\r\n",
        "createdAt": "2023-06-28T09:06:34Z",
        "updatedAt": "2023-06-28T09:06:34Z",
        "author": {
          "login": "rolfbjarne"
        }
      },
      {
        "body": "_From @svaldetero on Tue, 27 Jun 2023 20:51:13 GMT_\n\nI think I'm running into this issue also. I recently moved from microsoft hosted to a self-hosted M2 Max MacStudio. Changing nothing in the pipeline definition, the command line `dotnet publish 'ProjectName.csproj' -f net7.0-ios --self-contained -r ios-arm64 -c Release -p:BuildIpa=True` _always_ freezes and eventually times out at 60 minutes or I have to cancel it. I tried switching it to `dotnet build 'ProjectName.csproj' -f net7.0-ios -c Release` and it has the same result. What's frustrating is I can copy the exact command to terminal and run it in the same directory and it works just fine.\r\n\r\nI tried running `dotnet stack` but it just hung and never finished. I got the same `EndOfStreamException` when I finally cancelled the pipeline.",
        "createdAt": "2023-06-28T09:06:35Z",
        "updatedAt": "2023-06-28T09:06:35Z",
        "author": {
          "login": "rolfbjarne"
        }
      },
      {
        "body": "_From @rolfbjarne on Wed, 28 Jun 2023 09:04:51 GMT_\n\nAt this point I believe this is either a bug in msbuild or in the runtime, not in any of our MSBuild logic, so I'm moving to dotnet/msbuild.",
        "createdAt": "2023-06-28T09:06:36Z",
        "updatedAt": "2023-06-28T09:06:36Z",
        "author": {
          "login": "rolfbjarne"
        }
      },
      {
        "body": "We, me and @AR-May, have thoroughly investigated it and it seems that it is hanging in Task \r\nhttps://github.com/xamarin/xamarin-macios/blob/61493dd43817b97700bd92d90b958e30688b8457/msbuild/Xamarin.MacDev.Tasks/Tasks/CompileNativeCode.cs#L8 . By comparing OK and Failed logs it looks like this task failed before it started all clang processes.\r\n\r\nI have also notice that, if I read this code correctly, implementation of\r\nhttps://github.com/xamarin/xamarin-macios/blob/61493dd43817b97700bd92d90b958e30688b8457/msbuild/Xamarin.MacDev.Tasks/Tasks/CompileNativeCodeTaskBase.cs#L99\r\nand https://github.com/xamarin/xamarin-macios/blob/61493dd43817b97700bd92d90b958e30688b8457/msbuild/Xamarin.MacDev.Tasks/Tasks/AOTCompileTaskBase.cs#L215 and other tasks which using `ExecuteAsync + WaitAll` approach, will create and run given tool, like clang, in new Thread per each assembly. \r\nIn context of this particular issue, it will run 150 concurrent clang processes unbounded and all those concurrent processes will fight for shared resources like CPU, memory and disk IO.\r\nIn theory it should not be the reason for hangs, but this could result in performance degradation and massive system overbooking with increasing probability of dead locks, live locks and other concurrency issues/bugs.\r\n\r\n@rolfbjarne please, if you deem our analysis correct, close this issue and reopen the original one.\r\n\r\n",
        "createdAt": "2023-08-22T17:59:35Z",
        "updatedAt": "2023-08-22T17:59:35Z",
        "author": {
          "login": "rokonec"
        }
      },
      {
        "body": "@rokonec thanks a lot for the analysis!\r\n\r\nThat certainly sounds like something that could cause problems, and would be a good fix even if it turns out to not be the actual issue, so I'll go ahead and reopen the other issue.",
        "createdAt": "2023-08-23T05:07:51Z",
        "updatedAt": "2023-08-23T05:07:51Z",
        "author": {
          "login": "rolfbjarne"
        }
      }
    ]
  }
}