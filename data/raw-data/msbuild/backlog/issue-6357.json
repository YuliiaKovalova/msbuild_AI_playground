{
  "number": 6357,
  "title": "Detect architecture-specific task assemblies and infer taskhost",
  "body": "Today, if you have a task that is built for 32-bit or 64-bit, but does not [specify architecture in its `UsingTask`](https://docs.microsoft.com/visualstudio/msbuild/how-to-configure-targets-and-tasks?view=vs-2019#usingtask-attributes-and-task-parameters), you get an error message:\r\n\r\n```\r\nS:\\work\\cross-arch-tasks\\TaskUse.proj(8,5): error MSB4062: The \"Task32\" task\r\ncould not be loaded from the assembly\r\nS:\\work\\cross-arch-tasks\\Task32\\bin\\Debug\\net472\\Task32.dll. Could not load file\r\nor assembly\r\n'file:///S:\\work\\cross-arch-tasks\\Task32\\bin\\Debug\\net472\\Task32.dll' or one of\r\nits dependencies. An attempt was made to load a program with an incorrect\r\nformat. Confirm that the <UsingTask> declaration is correct, that the assembly\r\nand all its dependencies are available, and that the task contains a public\r\nclass that implements Microsoft.Build.Framework.ITask.\r\n```\r\n\r\nThis isn't very actionable.\r\n\r\nMSBuild _could_ examine the task assembly before loading it and infer an `Architecture` requirement if the assembly isn't MSIL. If we don't infer, we could at least emit a more-specific error message like\r\n\r\n> The task assembly XXX specifies the x86 architecture but the currently-loaded .NET runtime is x64. Consider adding an `Architecture` requirement to the `UsingTask`.",
  "state": "OPEN",
  "createdAt": "2021-04-19T19:14:46Z",
  "updatedAt": "2024-02-21T16:28:38Z",
  "closedAt": null,
  "author": {
    "login": "rainersigwald"
  },
  "labels": [
    "Area: Engine",
    "Area: TaskHost",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Repro project: [msbuild6357.zip](https://github.com/dotnet/msbuild/files/6338480/msbuild6357.zip)\r\n\r\nBuild the solution, then build `TaskUse.proj` in 32- or 64-bit MSBuild. The task compiled for the other assembly will fail.",
        "createdAt": "2021-04-19T19:15:54Z",
        "updatedAt": "2021-04-19T19:15:54Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> if the assembly isn't MSIL\r\n\r\nStrictly speaking, compiling with the x64 or x86 platforms still produces MSIL. The only change is to a flag in the PE header I think.",
        "createdAt": "2021-04-19T19:40:08Z",
        "updatedAt": "2021-04-19T19:40:08Z",
        "author": {
          "login": "AArnott"
        }
      },
      {
        "body": "@clairernovotny since you're working on the documentation we want to send out to help customers get their tasks 64bit compliant.  This is probably something we should do in the 17.0 timeframe.",
        "createdAt": "2021-04-22T20:11:00Z",
        "updatedAt": "2021-04-22T20:11:00Z",
        "author": {
          "login": "marcpopMSFT"
        }
      },
      {
        "body": "This makes sense to me. @KathleenDollard mentioned this to me earlier today.",
        "createdAt": "2021-04-22T20:28:36Z",
        "updatedAt": "2021-04-22T20:28:36Z",
        "author": {
          "login": "clairernovotny"
        }
      },
      {
        "body": "Small note for anyone trying to reproduce this with the provided repro:\r\nYou also have to rename Task64\\Task32.csproj to Task64\\Task64.csproj.",
        "createdAt": "2022-01-20T01:18:02Z",
        "updatedAt": "2022-01-20T01:18:02Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "Hi, I have been following this issue for a while, because it is causing very serious impediments at our company.\r\n\r\nWe have created a Builder CLI for our projects that is heavily reliant on the `MsBuild` executable. However, we cannot upgrade our Builder to `.NET 6` because of this issue, and it is coming from the `Nuget.Build.Tasks.dll` that is shipped with the latest version of the `dotnet` SDK. More specifically, it fails to load the `GetRestoreSolutionProjectsTask` task when trying to restore a solution:\r\n```\r\nC:\\Program Files\\dotnet\\sdk\\6.0.300\\NuGet.targets(227,5): error MSB4062:\r\nThe \"NuGet.Build.Tasks.GetRestoreSolutionProjectsTask\" task could not be loaded from the assembly\r\nC:\\Program Files\\dotnet\\sdk\\6.0.300\\NuGet.Build.Tasks.dll. Could not load file or assembly\r\n'NuGet.Build.Tasks, Version=6.2.0.146, Culture=neutral, PublicKeyToken=31bf3856ad364e35' \r\nor one of its dependencies. An attempt was made to load a program with an incorrect format. \r\nConfirm that the <UsingTask> declaration is correct, that the assembly and all its dependencies are available, \r\nand that the task contains a public class that implements Microsoft.Build.Framework.ITask.\r\n```\r\nWe cannot switch to `dotnet build` because we have multiple C++ projects, producing native code.\r\n\r\nI am also aware of #5541, but that one has not been released yet as well.\r\n\r\nAny idea on when we could expect this issue to be resolved and released? Sadly, all I am seeing lately is how the issue is getting bumped from one milestone to the next, although, at least to us, it really is a huge impediment.\r\n\r\nThanks!\r\n",
        "createdAt": "2022-05-31T11:57:10Z",
        "updatedAt": "2022-05-31T11:57:10Z",
        "author": {
          "login": "yfilipov"
        }
      }
    ]
  }
}