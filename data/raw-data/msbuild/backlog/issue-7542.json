{
  "number": 7542,
  "title": "[Feature Request] Extend SecurityUtil to allow specifying PrivateKey",
  "body": "The SecurityUtil accepts only a X509Certificate2 as parameter. But in some scenarios the private key is not directly attached to the X509Certificate2 instance but loaded separately or even forwarded to a custom implementation performing the signing on Azure. \r\n\r\nTherefore it would be good to add a new overload `public static void SignFile(X509Certificate2 cert, AsymmetricAlgorithm privateKey, Uri timestampUrl, string path)` where callers can specify an own private key instance. \r\n\r\nThis should then replace the loading of the certificate in https://github.com/dotnet/msbuild/blob/44ad46fed8c5f7e5800e93f61f265b2efaa8ea5e/src/Tasks/ManifestUtil/SecurityUtil.cs#L672\r\n\r\nThis is useful when you programatically sign ClickOnce applications without Mage.exe or similar. \r\n\r\nIf this feature is accepted I would be willing to contribute it. \r\n",
  "state": "OPEN",
  "createdAt": "2022-04-17T13:45:14Z",
  "updatedAt": "2024-01-31T08:17:20Z",
  "closedAt": null,
  "author": {
    "login": "Danielku15"
  },
  "labels": [
    "Area: ClickOnce",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Also I just came to notice that there is an issue here: https://github.com/dotnet/msbuild/blob/9c173296404f9c365cc524569766f16d7cfcf308/src/Tasks/ManifestUtil/mansign2.cs#L684-L688\r\n\r\nInstead of using accessing the private key again it should use `CmiManifestSigner2.StrongNameKey` when provided.\r\n\r\nThe patching which is done [here](https://github.com/dotnet/msbuild/blob/9c173296404f9c365cc524569766f16d7cfcf308/src/Tasks/ManifestUtil/mansign2.cs#L697), was already done [here](https://github.com/dotnet/msbuild/blob/9c173296404f9c365cc524569766f16d7cfcf308/src/Tasks/ManifestUtil/SecurityUtil.cs#L691), at least for this code path. \r\n",
        "createdAt": "2022-04-17T15:36:59Z",
        "updatedAt": "2022-04-17T15:37:56Z",
        "author": {
          "login": "Danielku15"
        }
      },
      {
        "body": "cc @sujitnayak can you take a look at this?",
        "createdAt": "2022-04-28T16:32:19Z",
        "updatedAt": "2022-04-28T16:32:19Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "Adding a overload for SignFile should be ok although I am curious what the scenario is. The CO manifest signing is either done through mage or VS UI. Is this change for some custom tool that signs the manifest out of band?\r\n\r\nWith respect to the other comments, it does look like some refactoring to avoid duplication is needed but we would need to review all code paths invoking  AuthenticodeSignLicenseDom to know for sure. You're welcome to file an issue for this.\r\n\r\nThanks.",
        "createdAt": "2022-05-02T20:26:09Z",
        "updatedAt": "2022-05-02T20:26:09Z",
        "author": {
          "login": "sujitnayak"
        }
      },
      {
        "body": "The use case to use this as a library is server side signing in CI pipielines through solutions like https://github.com/danielku15/signingserver (developed by me, used in-house in the company I work for) or https://github.com/dotnet/SignService/ (a clone of my software). \r\n\r\nThe use case on having a separate private key supplied is the support of signing through Azure KeyVault where we need to call Azure APIs to perform the actual signing operations. https://github.com/novotnyllc/RSAKeyVaultProvider\r\n\r\nI made some quick patches in my codebase and it works fine for me. I could offer the basics of the rework as mostly the Private Key is passed along from the outside already but it is not used everywhere. ",
        "createdAt": "2022-05-03T12:22:12Z",
        "updatedAt": "2022-05-03T12:22:12Z",
        "author": {
          "login": "Danielku15"
        }
      }
    ]
  }
}