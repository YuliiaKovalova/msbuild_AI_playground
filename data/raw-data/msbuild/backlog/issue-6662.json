{
  "number": 6662,
  "title": "LINQ Item function that takes a condition expression",
  "body": "(this is @mhutch's good idea, I'm just writing it down)\r\n\r\n> and now i want LINQ item functions...\r\n> ```\r\n> @(Foo->Where('condition expr'))\r\n> ```\r\n\r\n",
  "state": "OPEN",
  "createdAt": "2021-07-09T20:51:05Z",
  "updatedAt": "2024-02-21T16:28:27Z",
  "closedAt": null,
  "author": {
    "login": "rainersigwald"
  },
  "labels": [
    "needs-design",
    "Area: Language",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Backlog"
  },
  "comments": {
    "nodes": [
      {
        "body": "If you also want this, you can usually accomplish similar by creating a new item group (conditionally) and then `Remove`ing it.",
        "createdAt": "2021-07-09T20:52:18Z",
        "updatedAt": "2021-07-09T20:52:18Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "One thing that might make this extra complex is that we would mostly not want to expand anything inside the condition expression until we were inside the condition evaluator, but that's not how most item expansion stuff works. Haven't looked into details but that'd be the first thing to think about IMO.",
        "createdAt": "2021-07-09T21:07:14Z",
        "updatedAt": "2021-07-09T21:07:14Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}