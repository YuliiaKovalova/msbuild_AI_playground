{
  "number": 4341,
  "title": "After installing VS2019, msbuild fails to build msbuild tasks with error MSB4025",
  "body": "### Steps to reproduce\r\n\r\n- Install VS2019\r\n  - `msbuild build.msbuildproj` fails to build\r\n\r\n`build.msbuildproj`:\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\r\n<Project DefaultTargets=\"Build\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\" ToolsVersion=\"15.0\">\r\n  <Target Name=\"Build\">\r\n    <MSBuild Projects=\"msbuildissue.sln\" ToolsVersion=\"15.0\"/>\r\n  </Target>\r\n</Project>\r\n```\r\n\r\n`msbuildissue.sln`:\r\n```\r\nMicrosoft Visual Studio Solution File, Format Version 12.00\r\n# Visual Studio 15\r\nVisualStudioVersion = 15.0.26124.0\r\nMinimumVisualStudioVersion = 15.0.26124.0\r\nGlobal\r\n\tGlobalSection(SolutionConfigurationPlatforms) = preSolution\r\n\t\tDebug|Any CPU = Debug|Any CPU\r\n\t\tDebug|x64 = Debug|x64\r\n\t\tDebug|x86 = Debug|x86\r\n\t\tRelease|Any CPU = Release|Any CPU\r\n\t\tRelease|x64 = Release|x64\r\n\t\tRelease|x86 = Release|x86\r\n\tEndGlobalSection\r\n\tGlobalSection(SolutionProperties) = preSolution\r\n\t\tHideSolutionNode = FALSE\r\n\tEndGlobalSection\r\nEndGlobal\r\n```\r\n\r\nDirectory contents:\r\n```\r\n/\r\n- build.msbuildproj\r\n- msbuildissue.sln\r\n```\r\n\r\nCommand line\r\n```\r\nMicrosoft (R) Build Engine version 16.0.461+g6ff56ef63c for .NET Framework\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\nC:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Professional\\MSBuild\\Current\\Bin\\msbuild.exe /bl build.msbuildproj\r\nBuild started 30.4.2019 8.33.37.\r\nProject \"C:\\devel\\msbuildissue\\build.msbuildproj\" on node 1 (default targets).\r\nProject \"C:\\devel\\msbuildissue\\build.msbuildproj\" (1) is building \"C:\\devel\\msbuildissue\\msbuildissue.sln\" (2) on node 1 (default targets).\r\nC:\\devel\\msbuildissue\\msbuildissue.sln(2,1): error MSB4025: The project file could not be loaded. Data at the root level is invalid. Line 2, position 1.\r\nDone Building Project \"C:\\devel\\msbuildissue\\msbuildissue.sln\" (default targets) -- FAILED.\r\n\r\nDone Building Project \"C:\\devel\\msbuildissue\\build.msbuildproj\" (default targets) -- FAILED.\r\n\r\nDeferred Messages\r\n\r\n  Detailed Build Summary\r\n  ======================\r\n\r\n\r\n  ============================== Build Hierarchy (IDs represent configurations) =====================================================\r\n  Id                  : Exclusive Time   Total Time   Path (Targets)\r\n  -----------------------------------------------------------------------------------------------------------------------------------\r\n  0                   : 0.065s           0.074s       C:\\devel\\msbuildissue\\build.msbuildproj ()\r\n  . 1                 : 0.009s           0.009s       C:\\devel\\msbuildissue\\msbuildissue.sln ()\r\n\r\n  ============================== Node Utilization (IDs represent configurations) ====================================================\r\n  Timestamp:            1        Duration   Cumulative\r\n  -----------------------------------------------------------------------------------------------------------------------------------\r\n  636921992171909587:   0        0,061s     0,061s #\r\n  636921992172519086:   1        0,009s     0,070s\r\n  636921992172609045:   0        0,004s     0,074s\r\n  -----------------------------------------------------------------------------------------------------------------------------------\r\n  Utilization:          100,0    Average Utilization: 100,0\r\n\r\nBuild FAILED.\r\n\r\n\"C:\\devel\\msbuildissue\\build.msbuildproj\" (default target) (1) ->\r\n\"C:\\devel\\msbuildissue\\msbuildissue.sln\" (default target) (2) ->\r\n  C:\\devel\\msbuildissue\\msbuildissue.sln(2,1): error MSB4025: The project file could not be loaded. Data at the root level is invalid. Line 2, position 1.\r\n\r\n    0 Warning(s)\r\n    1 Error(s)\r\n\r\nTime Elapsed 00:00:00.09\r\n```\r\n### Expected  behavior\r\n\r\nSolution will build. It worked with VS2017, but even installing VS2019 side-by-side breaks the build. Changing the versions to 16.0 does not help either.\r\n\r\n### Actual behavior\r\n\r\nSolution fails to build with MSB4025.\r\n\r\n### Environment data\r\n`msbuild /version` output:\r\n\r\n```\r\nMicrosoft (R) Build Engine version 16.0.461+g6ff56ef63c for .NET Framework\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n16.0.461.62831\r\n```\r\n\r\nOS info: Windows 10 Enterprise 1809 17763.437\r\n\r\nIf applicable, version of the tool that invokes MSBuild (Visual Studio, dotnet CLI, etc):\r\nDeveloper command prompt for VS2019 16.0.2\r\n\r\nEDIT: \r\nVS2019 builds the `msbuildissue.sln` correctly and `msbuild msbuildissue.sln` works very well.",
  "state": "CLOSED",
  "createdAt": "2019-04-30T05:39:49Z",
  "updatedAt": "2024-02-21T17:08:32Z",
  "closedAt": "2019-05-01T11:07:56Z",
  "author": {
    "login": "ljani"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Aha, *removing* the `ToolsVersion=\"15.0\"` attribute from `<MSBuild />` task works. Is there something to fix?\r\n\r\nThis will build without any problems:\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\r\n<Project DefaultTargets=\"Build\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\" ToolsVersion=\"15.0\">\r\n  <Target Name=\"Build\">\r\n    <MSBuild Projects=\"msbuildissue.sln\" />\r\n  </Target>\r\n</Project>\r\n```\r\n\r\nThese will fail:\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\r\n<Project DefaultTargets=\"Build\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\" ToolsVersion=\"15.0\">\r\n  <Target Name=\"Build\">\r\n    <MSBuild Projects=\"msbuildissue.sln\" ToolsVersion=\"15.0\"/>\r\n  </Target>\r\n</Project>\r\n```\r\n\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\r\n<Project DefaultTargets=\"Build\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\" ToolsVersion=\"16.0\">\r\n  <Target Name=\"Build\">\r\n    <MSBuild Projects=\"msbuildissue.sln\" ToolsVersion=\"16.0\"/>\r\n  </Target>\r\n</Project>\r\n```",
        "createdAt": "2019-04-30T05:46:34Z",
        "updatedAt": "2019-04-30T05:55:25Z",
        "author": {
          "login": "ljani"
        }
      },
      {
        "body": "> It worked with VS2017, but even installing VS2019 side-by-side breaks the build.\r\n\r\nCan you elaborate on this, please? What error do you get when you build using MSBuild from VS2017 after the 2019 installation?\r\n\r\nOther than that issue, which I'd like to investigate, I think the underlying problem here is #4319. Removing `ToolsVersion` from the MSBuild task is the right solution; fixing #4319 will mean that it can be present but will be ignored.",
        "createdAt": "2019-04-30T15:06:38Z",
        "updatedAt": "2019-04-30T15:06:38Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> \r\n> \r\n> > It worked with VS2017, but even installing VS2019 side-by-side breaks the build.\r\n> \r\n> Can you elaborate on this, please? What error do you get when you build using MSBuild from VS2017 after the 2019 installation?\r\n\r\nFrom above:\r\n\r\n```\r\nerror MSB4025: The project file could not be loaded. Data at the root level is invalid. Line 2, position 1.\r\n```\r\n\r\nAlso it occurred to me that I have not tried running `msbuild` from `Developer Command Prompt for VS 2017`, only from `Developer Command Prompt for VS 2019` and Azure DevOps Server 2019 continuous integration build, which is probably picking up 2019 as default as well.\r\n\r\n> Other than that issue, which I'd like to investigate, I think the underlying problem here is #4319. Removing `ToolsVersion` from the MSBuild task is the right solution; fixing #4319 will mean that it can be present but will be ignored.\r\n\r\nAh, thanks. I'll close this as a duplicate.",
        "createdAt": "2019-05-01T11:07:56Z",
        "updatedAt": "2019-05-01T11:07:56Z",
        "author": {
          "login": "ljani"
        }
      },
      {
        "body": "> Also it occurred to me that I have not tried running `msbuild` from `Developer Command Prompt for VS 2017`, only from `Developer Command Prompt for VS 2019` and Azure DevOps Server 2019 continuous integration build, which is probably picking up 2019 as default as well.\r\n\r\nThat makes sense. Now that Visual Studio (and thus MSBuild) is allowed to have multiple installed versions side-by-side, the way to select the toolset you wish to use to build is to select the right Visual Studio instance to start from. So #4319 will cause problems for _builds initiated from MSBuild 16.0_, but specifying `ToolsVersion=\"15.0\"` should work fine for _builds initiated from MSBuild 15_. If you see otherwise, that's a bad bug that we should fix immediately, which is why I wanted to get clarification on this.",
        "createdAt": "2019-05-01T14:14:13Z",
        "updatedAt": "2019-05-01T14:14:13Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald I think I've stumbled into the same sort of issue after installing VS2019, then iterating back on a VS2017 build pipeline. Fails restoring an internal `dotnet CLI tool` that was working seamlessly, seems prior to VS2019 installation in our estimation. Where do we set the `ToolsVersion`? In the project file(s)? We can set this in a `Directory.Build.props`?",
        "createdAt": "2019-10-12T21:19:15Z",
        "updatedAt": "2019-10-12T21:53:48Z",
        "author": {
          "login": "mwpowellhtx"
        }
      },
      {
        "body": "So... Looking for workarounds, resolutions. Besides potentially need to install and/or re-install SDKs, runtimes, etc. Haven't gotten quite that far in my troubleshooting. Short of that, crude answer is for us to visit each of our `.csproj` project files and add the `ToolsVersion` attribute in the appropriate version? I assume that's `15.0` for VS2017? Is there a more elegant way to do that in swath? i.e. through Directory.Build.props, for instance, by convention, as contrasted with by specification?",
        "createdAt": "2019-10-12T22:19:46Z",
        "updatedAt": "2019-10-12T22:19:46Z",
        "author": {
          "login": "mwpowellhtx"
        }
      },
      {
        "body": "Otherwise you can specify `ToolsVersion=\"Current\"`",
        "createdAt": "2020-11-25T11:29:49Z",
        "updatedAt": "2020-11-25T11:29:49Z",
        "author": {
          "login": "labilbe"
        }
      }
    ]
  }
}