{
  "number": 5819,
  "title": "How to evaluate a project while resolving its imports?",
  "body": "MSBuild has APIs to just evaluate a project's properties and items without building it (being aware of the disclaimers of #1285) but these do not take into accound any properties that are defined in any of the project's `Import`s.\r\n\r\nI have thought of the following workaround: I will tell the `BuildManager` to build a nonexistent target, while passing `BuildRequestDataFlags.SkipNonexistentTargets` in the `BuildRequestData`.\r\n\r\nMy questions are:\r\n\r\n1. Is there anything problematic with the approach I described? MSBuild will fully evaluate the project file and \"run\" a target that does not exist, ignoring it as I told. The default target will be prevented from running.\r\n\r\n2. How about concurrency? It seems to me that the `BuildManager` class is not thread-safe. So instead of locking around its use, I have thought of creating and reusing `BuildManager` per thread. Is that good? Documentation says that \"Normally there is only one build manager in a process, and it is the default build manager.\" but doesn't say what would happen if more than one build managers exist.",
  "state": "OPEN",
  "createdAt": "2020-10-21T17:25:37Z",
  "updatedAt": "2024-02-21T16:28:55Z",
  "closedAt": null,
  "author": {
    "login": "teo-tsirpanis"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Discussion"
  },
  "comments": {
    "nodes": [
      {
        "body": "> these do not take into accound any properties that are defined in any of the project's `Import`s\r\n\r\nWhat makes you think that?",
        "createdAt": "2020-10-22T20:47:19Z",
        "updatedAt": "2020-10-22T20:47:19Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I tested it with a project file of mine.\r\n\r\nPerhaps it wasn't fully evaluated because the imports were implicitly defined from the SDK; not an `Imports` declaration.\r\n\r\nEdit: Yes, regular `Import`s are recognized from the `Project` class.",
        "createdAt": "2020-10-22T23:49:32Z",
        "updatedAt": "2020-10-23T10:23:16Z",
        "author": {
          "login": "teo-tsirpanis"
        }
      },
      {
        "body": "@teo-tsirpanis How are you loading the MSBuild API? Are you using MSBuildLocator? I don't see that behavior:\r\n\r\n```c#\r\nusing System;\r\nusing Microsoft.Build.Evaluation;\r\n\r\nnamespace _5819\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            Console.WriteLine(\"Hello World!\");\r\n\r\n            Microsoft.Build.Locator.MSBuildLocator.RegisterDefaults();\r\n\r\n            LoadProject();\r\n        }\r\n\r\n        private static void LoadProject()\r\n        {\r\n            Project p = new Project(@\"S:\\repro\\dotnet\\msbuild\\issues\\5819\\5819.csproj\");\r\n\r\n            Console.WriteLine($\" {p.Properties.Count} total properties\");\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nOn its own project produces\r\n\r\n```sh-session\r\n\u276f dotnet run -f net48\r\nHello World!\r\n 339 total properties\r\n```\r\n\r\neven though only 3 are defined in the project file itself.",
        "createdAt": "2020-10-26T16:33:30Z",
        "updatedAt": "2020-10-26T16:33:30Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald, yes I am using `MSBuildLocator`.\r\n\r\nI ran my code again and it works. MSBuild finds the SDK imports even when the project is not restored. I don't know what had gone wrong in my first attempt.\r\n\r\nFor my use case (Ionide/dotnet-proj-info#87) I will keep using `ProjectInstance` instead of `Project` because sometimes we might need to run some targets on the project, but I won't keep doing the dummy target trick.\r\n\r\nStill I would like to know whether my approach to concurrency I illustrated in my second bullet point in OP has any problems.",
        "createdAt": "2020-10-26T18:08:17Z",
        "updatedAt": "2020-10-26T18:08:17Z",
        "author": {
          "login": "teo-tsirpanis"
        }
      }
    ]
  }
}