{
  "number": 5570,
  "title": "Build fails when referenced project contains generated code",
  "body": "### Issue Description\r\nWhen building a project that contains reference to another project which includes dynamically generated code, the build fails. \r\n\r\n### Steps to Reproduce\r\n[GeneratedCodeBuildFail.zip](https://github.com/dotnet/msbuild/files/5007896/GeneratedCodeBuildFail.zip)\r\nCommand: msbuild GeneratedCodeBuildFail\r\n\r\nWe are using a tool that generates c# classes from swagger json. I've replaced this task with simply copy task inside Generator.csproj as it is much simpler and seems to have the same effect.\r\nPlease, manually delete 'Generated.cs' file from the Generator project before every build attempt as second build will succeed. \r\nThis is not much of an issue when during local development, but it becomes much bigger issue on our build servers as build definitions needs to be run twice for the build to succeed.\r\n\r\n### Expected Behavior\r\nThe build finishes without errors on first try.\r\n\r\n### Actual Behavior\r\nSolution needs to be built twice for the build to actually succeed.\r\n\r\n### Versions & Configurations\r\nMSBuild 16.6.0.22303\r\nMicrosoft Visual Studio Professional 2019 Version 16.6.0 on Windows 10 64bit",
  "state": "CLOSED",
  "createdAt": "2020-07-31T16:15:13Z",
  "updatedAt": "2024-09-05T22:31:18Z",
  "closedAt": "2024-09-05T22:31:18Z",
  "author": {
    "login": "horato"
  },
  "labels": [
    "bug",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "It looks like you are generating .cs files but not including them as `Compile` items during the build run. Then only a second build will pick it up when evaluating the default glob patterns.\r\n\r\nYou can adapt your target like this to fix this:\r\n```xml\r\n  <Target Name=\"GenerateSources\" BeforeTargets=\"BeforeBuild\">\r\n    <Copy SourceFiles=\"@(FileName)\" DestinationFiles=\"@(FileName->'Generated.cs')\">\r\n      <Output TaskParameter=\"DestinationFiles\" ItemName=\"GeneratedCodeFiles\" />\r\n    </Copy>\r\n    <ItemGroup>\r\n      <Compile Include=\"@(GeneratedCodeFiles)\" Exclude=\"@(Compile)\" />\r\n    </ItemGroup>\r\n  </Target>\r\n```",
        "createdAt": "2020-10-08T19:03:26Z",
        "updatedAt": "2020-10-08T19:03:26Z",
        "author": {
          "login": "dasMulli"
        }
      },
      {
        "body": "I was under the impression that everything inside the project is auto-included when using SDK style project. That isn't true?",
        "createdAt": "2020-10-22T15:07:27Z",
        "updatedAt": "2020-10-22T15:07:27Z",
        "author": {
          "login": "horato"
        }
      },
      {
        "body": "@horato so yes and no: The auto-import works during the so-called 'static evaluation' - so a project is loaded and all the stuff that's not inside a `<Target>` element is processed.\r\nThis include any top-level `PropertyGroup` and `ItemGroup` elements. The SDK also contains such elements for you that do the \"auto-import\": it's basically a fancy `<Compile Include=\"**/*.cs\" />` ([source](https://github.com/dotnet/sdk/blob/fcdf87671a5e6d415d3679d0f0fa907cd4e2138e/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.Sdk.DefaultItems.props#L33))\r\n\r\nSo in this step all the glob patterns are evaluated. If a file wasn't on disk when the build started, it will not be picked up.\r\n\r\nIf any target then creates files on disk it also needs to create appropriate items since static evaluation is already over.",
        "createdAt": "2020-10-22T17:10:43Z",
        "updatedAt": "2020-10-22T17:10:43Z",
        "author": {
          "login": "dasMulli"
        }
      },
      {
        "body": "I've done something similar to this solution, and it's mostly working but there is one thing I'm having trouble with .. the intellisense for the generated code in VS says it can't find the types or namespaces of the generated code.   IS there a way to make that work too? \r\n\r\nHere is the csproj section that I had to setup to get msbuild to generate the code and build it in one go.  But it would still be nice to have VS not show this visually as types that can't be found (even tho a compile all builds fine).\r\n\r\nAny thoughts on what more to do? \r\n\r\n```xml\r\n<PropertyGroup>\r\n    <EnableDefaultItems>false</EnableDefaultItems>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <Compile Include=\"$(ProjectDir)\\Impl\\**\\*.cs\" />\r\n    <Compile Include=\"$(ProjectDir)\\Interfaces\\**\\*.cs\" />\r\n  </ItemGroup>\r\n\r\n  <Target Name=\"GenerateProto\" BeforeTargets=\"BeforeBuild\">\r\n    <Exec Command=\"call py &quot;$(ProjectDir)..\\console-common\\_build\\csharp_prebuild.py&quot;  -out $(ProjectDir)\\$(BaseIntermediateOutputPath)\">\r\n    </Exec>\r\n    <ItemGroup>\r\n      <Compile Include=\"$(BaseIntermediateOutputPath)\\dir1\\*.cs\"/>\r\n      <Compile Include=\"$(BaseIntermediateOutputPath)\\dir2\\Disconnect.g.cs\" />\r\n    </ItemGroup>\r\n  </Target>\r\n```\r\n",
        "createdAt": "2022-02-02T17:33:22Z",
        "updatedAt": "2022-02-02T17:33:22Z",
        "author": {
          "login": "hooligan495"
        }
      },
      {
        "body": "In my case I have items included before they have been generated (ItemGroup under Project) (also generating to 'obj' directory), but it randomly does not see them. It looks like msbuild does not pick up the new files (if files added to XsdSchema in my case), but does for old files even after clean/rebuild.\r\n\r\n```\r\n<Project>\r\n    <XsdSchema Include=\"Schemas\\*.xsd\">\r\n            <DesignTime>true</DesignTime>\r\n            <Generator>MSBuild:RunGenerationTool</Generator>\r\n            <!--<Visible>false</Visible>-->\r\n     </XsdSchema>\r\n    <Target ... />\r\n    <ItemGroup>\r\n        <Compile Include=\"@(XsdSchema-> '$(GeneratedItemsFolderPath)%(Identity).generated.cs')\">\r\n            <AutoGen>true</AutoGen>\r\n            <Visible>false</Visible>\r\n        </Compile>\r\n        <Compile Include=\"@(XsdSchema-> '$(GeneratedItemsFolderPath)%(Identity).partial.generated.cs')\">\r\n            <AutoGen>true</AutoGen>\r\n            <Visible>false</Visible>\r\n        </Compile>\r\n    </ItemGroup>\r\n</Project>\r\n```\r\n\r\nCould it be relative to https://developercommunity.visualstudio.com/t/items-included-as-wildcard-not-refreshed-in-the-pr/213285 ?",
        "createdAt": "2022-02-02T19:24:59Z",
        "updatedAt": "2022-02-02T20:03:51Z",
        "author": {
          "login": "jinek"
        }
      },
      {
        "body": "Are you writing files to disk via a source generator? If so, my understanding is that Microsoft advises against this and the behaviour is undefined \ud83d\ude42",
        "createdAt": "2022-05-20T03:19:53Z",
        "updatedAt": "2022-05-20T03:19:53Z",
        "author": {
          "login": "Eli-Black-Work"
        }
      },
      {
        "body": "> It looks like you are generating .cs files but not including them as `Compile` items during the build run. Then only a second build will pick it up when evaluating the default glob patterns.\r\n> \r\n> You can adapt your target like this to fix this:\r\n> \r\n> ```\r\n>   <Target Name=\"GenerateSources\" BeforeTargets=\"BeforeBuild\">\r\n>     <Copy SourceFiles=\"@(FileName)\" DestinationFiles=\"@(FileName->'Generated.cs')\">\r\n>       <Output TaskParameter=\"DestinationFiles\" ItemName=\"GeneratedCodeFiles\" />\r\n>     </Copy>\r\n>     <ItemGroup>\r\n>       <Compile Include=\"@(GeneratedCodeFiles)\" Exclude=\"@(Compile)\" />\r\n>     </ItemGroup>\r\n>   </Target>\r\n> ```\r\n\r\nAfter converting an old project to the SDK Style, I had the same issue, and the solution above worked perfectly. Thanks!",
        "createdAt": "2024-04-19T04:09:09Z",
        "updatedAt": "2024-04-19T04:09:09Z",
        "author": {
          "login": "fabricioferreira"
        }
      },
      {
        "body": "Not a bug then.",
        "createdAt": "2024-09-05T22:31:18Z",
        "updatedAt": "2024-09-05T22:31:18Z",
        "author": {
          "login": "horato"
        }
      }
    ]
  }
}