{
  "number": 4751,
  "title": "Generating strongly typed resource files requires non-intuitive addition of properties",
  "body": "From https://github.com/microsoft/msbuild/issues/2272#issuecomment-532264659\r\ncc @rainersigwald \r\n### Steps to reproduce\r\n\r\n```\r\ngit clone https://github.com/PowerShell/PSScriptanalyzer\r\nrm global.json # so that the latest version (3.0) of the SDK is used and not 2.2\r\ncd Engine\r\ndotnet build # should work\r\nrm Strings.Designer.cs\r\ndotnet build # does not work\r\n```\r\n### Expected  behavior\r\nBuild works\r\n\r\n### Actual behavior\r\nBuild fails due to errors resulting from Strings.Designer.cs not being created.\r\n\r\nIt seems one needs to apply the following non-intuitive changes to the `Engine.csproj`:\r\n\r\n```diff\r\n-  <ItemGroup>\r\n-     <Compile Update=\"Strings.Designer.cs\">\r\n-       <DesignTime>True</DesignTime>\r\n-       <AutoGen>True</AutoGen>\r\n-       <DependentUpon>Strings.resx</DependentUpon>\r\n-     </Compile>\r\n-  </ItemGroup>\r\n \r\n   <ItemGroup>\r\n     <EmbeddedResource Update=\"Strings.resx\">\r\n-       <Generator>ResXFileCodeGenerator</Generator>\r\n+       <Generator>MSBuild:Compile</Generator><!-- Tell Visual Studio to run a build if the resx file changes -->\r\n-      <LastGenOutput>Strings.Designer.cs</LastGenOutput>\r\n+      <StronglyTypedFileName>$(IntermediateOutputPath)\\Strings.Designer.cs</StronglyTypedFileName>\r\n+      <StronglyTypedLanguage>CSharp</StronglyTypedLanguage>\r\n+      <StronglyTypedNamespace>Microsoft.Windows.PowerShell.ScriptAnalyzer</StronglyTypedNamespace>\r\n+      <StronglyTypedClassName>Strings</StronglyTypedClassName>\r\n     </EmbeddedResource>\r\n   </ItemGroup>\r\n\r\n+  <!-- For VS Code/OmniSharp support, ensure that CoreResGen runs before CoreCompile -->\r\n+  <PropertyGroup>\r\n+    <CoreCompileDependsOn>PrepareResources;$(CompileDependsOn)</CoreCompileDependsOn>\r\n+  </PropertyGroup>\r\n```\r\n\r\nThe `StronglyTypedNamespace` is due to the following in the csproj: `<RootNamespace>Microsoft.Windows.PowerShell.ScriptAnalyzer</RootNamespace>`\r\nHowever, having to supply all the other additional parameters seems unintuitive. I'd like to see a minimal solution for a csproj that also works with VS btw.\r\n\r\n### Environment data\r\n`msbuild /version` output:\r\n\r\nOS info:\r\n\r\nWindows 10 1809\r\n.Net Core 3.0-rc1\r\n",
  "state": "OPEN",
  "createdAt": "2019-09-19T20:53:50Z",
  "updatedAt": "2025-01-10T17:19:11Z",
  "closedAt": null,
  "author": {
    "login": "bergmeister"
  },
  "milestone": {
    "title": "Backlog"
  },
  "assignees": {
    "nodes": [
      {
        "login": "rainersigwald"
      }
    ]
  },
  "labels": [
    "Area: Task: GenerateResource"
  ],
  "comments": {
    "nodes": [
      {
        "body": "Team triage: I'd like to dig in on some of the changes required here. This may turn into an SDK feature to make it easier to get strongly typed resources.",
        "createdAt": "2019-09-23T20:22:20Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Yes, please, ideally the csproj should just pick it up automatically via convention over configuration if the resx file name matches the csproj name.\r\nPlease make sure it works both from commandline and VS",
        "createdAt": "2019-09-23T20:33:38Z",
        "author": {
          "login": "bergmeister"
        }
      },
      {
        "body": "@rainersigwald Any updates? Building using `dotnet build` works now with the described scenario but both VS and VS-Code get confused and show compiler warnings and errors (VS-Code somehow sees the class name as ambiguous and VS fails to build). Also, at runtime, I get the following exception:\r\n\r\n> MissingManifestResourceException: Could not find the resource \"Strings.resources\" among the resources \"Engine.Strings.resources\" embedded in the assembly \"Microsoft.Windows.PowerShell.ScriptAnalyzer\", nor among the resources in any satellite assemblies for the specified culture. Perhaps the resources were embedded with an incorrect name.\r\n\r\nI created the following branch with my changes: https://github.com/bergmeister/PSScriptAnalyzer/tree/netcore3_resgen",
        "createdAt": "2019-10-04T22:57:42Z",
        "author": {
          "login": "bergmeister"
        }
      },
      {
        "body": "Any updates @rainersigwald  ? This would be good to be fixed in 3.1 as it will be LTS",
        "createdAt": "2019-11-19T19:28:26Z",
        "author": {
          "login": "bergmeister"
        }
      },
      {
        "body": "I am trying to move PowerShell Core projects to the generator.\r\nWith @rainersigwald sample I was able to compile most of csproj-s but not last with UseWPF enabled.\r\nWith <UseWPF>True</UseWPF> resources do not generated at all if <EmbeddedResource Update = \"**/*.resx\"> added. ",
        "createdAt": "2020-04-14T16:43:04Z",
        "author": {
          "login": "iSazonov"
        }
      },
      {
        "body": "I could be able compile PowerShell Core with some workarounds. See https://github.com/PowerShell/PowerShell/pull/12355",
        "createdAt": "2020-04-18T07:43:57Z",
        "author": {
          "login": "iSazonov"
        }
      },
      {
        "body": "I was successful for a while doing this:\r\n\r\n```xml\r\n  <ItemGroup>\r\n      <EmbeddedResource Update=\"TracerMessages.resx\">\r\n      <Generator>ResXFileCodeGenerator</Generator>\r\n      <LastGenOutput>TracerMessages.Designer.cs</LastGenOutput>\r\n      <StronglyTypedFileName>TracerMessages.Designer.cs</StronglyTypedFileName>\r\n      <StronglyTypedLanguage>CSharp</StronglyTypedLanguage>\r\n      <StronglyTypedNamespace>Autofac.Diagnostics.DotGraph</StronglyTypedNamespace>\r\n      <StronglyTypedClassName>TracerMessages</StronglyTypedClassName>\r\n    </EmbeddedResource>\r\n  </ItemGroup>\r\n```\r\n\r\nNote the `LastGenOutput` and `StronglyTypedFileName` match. Unfortunately in a recent .NET Core SDK update (I'm now running 3.1.302 on Mac) this started yielding a CS2002 warning:\r\n\r\n`CSC : warning CS2002: Source file 'TracerMessages.Designer.cs' specified multiple times [/Users/tillig/dev/autofac/Autofac.Diagnostics.DotGraph/src/Autofac.Diagnostics.DotGraph/Autofac.Diagnostics.DotGraph.csproj]`\r\n\r\nThe only way to work around it was to remove the checked-in Designer.cs file and switch to the `$(IntermediatePath)` in the `StronglyTypedFileName` as seen in the initial issue comment.\r\n\r\n```xml\r\n  <ItemGroup>\r\n    <EmbeddedResource Update=\"TracerMessages.resx\">\r\n      <Generator>ResXFileCodeGenerator</Generator>\r\n      <LastGenOutput>TracerMessages.Designer.cs</LastGenOutput>\r\n      <StronglyTypedFileName>$(IntermediateOutputPath)/TracerMessages.Designer.cs</StronglyTypedFileName>\r\n      <StronglyTypedLanguage>CSharp</StronglyTypedLanguage>\r\n      <StronglyTypedNamespace>Autofac.Diagnostics.DotGraph</StronglyTypedNamespace>\r\n      <StronglyTypedClassName>TracerMessages</StronglyTypedClassName>\r\n    </EmbeddedResource>\r\n  </ItemGroup>\r\n```\r\n\r\nThis issue is the only place I've found any of this documented. It'd be nice if this was more straightforward to work with in a non-Visual-Studio (i.e., VS Code / all-command-line) environment.",
        "createdAt": "2020-08-05T18:43:52Z",
        "author": {
          "login": "tillig"
        }
      },
      {
        "body": "> I was successful for a while doing this:\r\n> \r\n> ```\r\n>   <ItemGroup>\r\n>       <EmbeddedResource Update=\"TracerMessages.resx\">\r\n>       <Generator>ResXFileCodeGenerator</Generator>\r\n>       <LastGenOutput>TracerMessages.Designer.cs</LastGenOutput>\r\n>       <StronglyTypedFileName>TracerMessages.Designer.cs</StronglyTypedFileName>\r\n>       <StronglyTypedLanguage>CSharp</StronglyTypedLanguage>\r\n>       <StronglyTypedNamespace>Autofac.Diagnostics.DotGraph</StronglyTypedNamespace>\r\n>       <StronglyTypedClassName>TracerMessages</StronglyTypedClassName>\r\n>     </EmbeddedResource>\r\n>   </ItemGroup>\r\n> ```\r\n> \r\n> Note the `LastGenOutput` and `StronglyTypedFileName` match. Unfortunately in a recent .NET Core SDK update (I'm now running 3.1.302 on Mac) this started yielding a CS2002 warning:\r\n> \r\n> `CSC : warning CS2002: Source file 'TracerMessages.Designer.cs' specified multiple times [/Users/tillig/dev/autofac/Autofac.Diagnostics.DotGraph/src/Autofac.Diagnostics.DotGraph/Autofac.Diagnostics.DotGraph.csproj]`\r\n> \r\n> The only way to work around it was to remove the checked-in Designer.cs file and switch to the `$(IntermediatePath)` in the `StronglyTypedFileName` as seen in the initial issue comment.\r\n> \r\n> ```\r\n>   <ItemGroup>\r\n>     <EmbeddedResource Update=\"TracerMessages.resx\">\r\n>       <Generator>ResXFileCodeGenerator</Generator>\r\n>       <LastGenOutput>TracerMessages.Designer.cs</LastGenOutput>\r\n>       <StronglyTypedFileName>$(IntermediateOutputPath)/TracerMessages.Designer.cs</StronglyTypedFileName>\r\n>       <StronglyTypedLanguage>CSharp</StronglyTypedLanguage>\r\n>       <StronglyTypedNamespace>Autofac.Diagnostics.DotGraph</StronglyTypedNamespace>\r\n>       <StronglyTypedClassName>TracerMessages</StronglyTypedClassName>\r\n>     </EmbeddedResource>\r\n>   </ItemGroup>\r\n> ```\r\n> \r\n> This issue is the only place I've found any of this documented. It'd be nice if this was more straightforward to work with in a non-Visual-Studio (i.e., VS Code / all-command-line) environment.\r\n\r\nWhile this solution removes the warning on running `dotnet build` and project compiles normally, it then makes Visual Studio Code show errors in the places that used the strongly typed generated class indicating that it can't be found.\r\n\r\nIs there no other workaround?",
        "createdAt": "2021-08-17T21:06:39Z",
        "author": {
          "login": "yinzara"
        }
      },
      {
        "body": "> > I was successful for a while doing this:\r\n> > ```\r\n> >   <ItemGroup>\r\n> >       <EmbeddedResource Update=\"TracerMessages.resx\">\r\n> >       <Generator>ResXFileCodeGenerator</Generator>\r\n> >       <LastGenOutput>TracerMessages.Designer.cs</LastGenOutput>\r\n> >       <StronglyTypedFileName>TracerMessages.Designer.cs</StronglyTypedFileName>\r\n> >       <StronglyTypedLanguage>CSharp</StronglyTypedLanguage>\r\n> >       <StronglyTypedNamespace>Autofac.Diagnostics.DotGraph</StronglyTypedNamespace>\r\n> >       <StronglyTypedClassName>TracerMessages</StronglyTypedClassName>\r\n> >     </EmbeddedResource>\r\n> >   </ItemGroup>\r\n> > ```\r\n> > \r\n> > \r\n> >     \r\n> >       \r\n> >     \r\n> > \r\n> >       \r\n> >     \r\n> > \r\n> >     \r\n> >   \r\n> > Note the `LastGenOutput` and `StronglyTypedFileName` match. Unfortunately in a recent .NET Core SDK update (I'm now running 3.1.302 on Mac) this started yielding a CS2002 warning:\r\n> > `CSC : warning CS2002: Source file 'TracerMessages.Designer.cs' specified multiple times [/Users/tillig/dev/autofac/Autofac.Diagnostics.DotGraph/src/Autofac.Diagnostics.DotGraph/Autofac.Diagnostics.DotGraph.csproj]`\r\n> > The only way to work around it was to remove the checked-in Designer.cs file and switch to the `$(IntermediatePath)` in the `StronglyTypedFileName` as seen in the initial issue comment.\r\n> > ```\r\n> >   <ItemGroup>\r\n> >     <EmbeddedResource Update=\"TracerMessages.resx\">\r\n> >       <Generator>ResXFileCodeGenerator</Generator>\r\n> >       <LastGenOutput>TracerMessages.Designer.cs</LastGenOutput>\r\n> >       <StronglyTypedFileName>$(IntermediateOutputPath)/TracerMessages.Designer.cs</StronglyTypedFileName>\r\n> >       <StronglyTypedLanguage>CSharp</StronglyTypedLanguage>\r\n> >       <StronglyTypedNamespace>Autofac.Diagnostics.DotGraph</StronglyTypedNamespace>\r\n> >       <StronglyTypedClassName>TracerMessages</StronglyTypedClassName>\r\n> >     </EmbeddedResource>\r\n> >   </ItemGroup>\r\n> > ```\r\n> > \r\n> > \r\n> >     \r\n> >       \r\n> >     \r\n> > \r\n> >       \r\n> >     \r\n> > \r\n> >     \r\n> >   \r\n> > This issue is the only place I've found any of this documented. It'd be nice if this was more straightforward to work with in a non-Visual-Studio (i.e., VS Code / all-command-line) environment.\r\n> \r\n> While this solution removes the warning on running `dotnet build` and project compiles normally, it then makes Visual Studio Code show errors in the places that used the strongly typed generated class indicating that it can't be found.\r\n> \r\n> Is there no other workaround?\r\n\r\nTry changing `$(IntermediateOutputPath)` to:\r\n`<StronglyTypedFileName>Properties/Something.Designer.cs</StronglyTypedFileName>`.\r\n\r\n",
        "createdAt": "2021-11-12T19:50:56Z",
        "author": {
          "login": "archive11"
        }
      },
      {
        "body": "> > > I was successful for a while doing this:\r\n> > > ```\r\n> > >   <ItemGroup>\r\n> > >       <EmbeddedResource Update=\"TracerMessages.resx\">\r\n> > >       <Generator>ResXFileCodeGenerator</Generator>\r\n> > >       <LastGenOutput>TracerMessages.Designer.cs</LastGenOutput>\r\n> > >       <StronglyTypedFileName>TracerMessages.Designer.cs</StronglyTypedFileName>\r\n> > >       <StronglyTypedLanguage>CSharp</StronglyTypedLanguage>\r\n> > >       <StronglyTypedNamespace>Autofac.Diagnostics.DotGraph</StronglyTypedNamespace>\r\n> > >       <StronglyTypedClassName>TracerMessages</StronglyTypedClassName>\r\n> > >     </EmbeddedResource>\r\n> > >   </ItemGroup>\r\n> > > ```\r\n> > > \r\n> > > \r\n> > >     \r\n> > >       \r\n> > >     \r\n> > > \r\n> > >       \r\n> > >     \r\n> > > \r\n> > >     \r\n> > >   \r\n> > > Note the `LastGenOutput` and `StronglyTypedFileName` match. Unfortunately in a recent .NET Core SDK update (I'm now running 3.1.302 on Mac) this started yielding a CS2002 warning:\r\n> > > `CSC : warning CS2002: Source file 'TracerMessages.Designer.cs' specified multiple times [/Users/tillig/dev/autofac/Autofac.Diagnostics.DotGraph/src/Autofac.Diagnostics.DotGraph/Autofac.Diagnostics.DotGraph.csproj]`\r\n> > > The only way to work around it was to remove the checked-in Designer.cs file and switch to the `$(IntermediatePath)` in the `StronglyTypedFileName` as seen in the initial issue comment.\r\n> > > ```\r\n> > >   <ItemGroup>\r\n> > >     <EmbeddedResource Update=\"TracerMessages.resx\">\r\n> > >       <Generator>ResXFileCodeGenerator</Generator>\r\n> > >       <LastGenOutput>TracerMessages.Designer.cs</LastGenOutput>\r\n> > >       <StronglyTypedFileName>$(IntermediateOutputPath)/TracerMessages.Designer.cs</StronglyTypedFileName>\r\n> > >       <StronglyTypedLanguage>CSharp</StronglyTypedLanguage>\r\n> > >       <StronglyTypedNamespace>Autofac.Diagnostics.DotGraph</StronglyTypedNamespace>\r\n> > >       <StronglyTypedClassName>TracerMessages</StronglyTypedClassName>\r\n> > >     </EmbeddedResource>\r\n> > >   </ItemGroup>\r\n> > > ```\r\n> > > \r\n> > > \r\n> > >     \r\n> > >       \r\n> > >     \r\n> > > \r\n> > >       \r\n> > >     \r\n> > > \r\n> > >     \r\n> > >   \r\n> > > This issue is the only place I've found any of this documented. It'd be nice if this was more straightforward to work with in a non-Visual-Studio (i.e., VS Code / all-command-line) environment.\r\n> > \r\n> > \r\n> > While this solution removes the warning on running `dotnet build` and project compiles normally, it then makes Visual Studio Code show errors in the places that used the strongly typed generated class indicating that it can't be found.\r\n> > Is there no other workaround?\r\n> \r\n> Try changing `$(IntermediateOutputPath)` to: `<StronglyTypedFileName>Properties/Something.Designer.cs</StronglyTypedFileName>`.\r\n\r\nThat will again cause the CSC : warning CS2002: Source file 'Properties/Something.Designer.cs' specified multiple times  error again.",
        "createdAt": "2022-04-28T23:42:30Z",
        "author": {
          "login": "yinzara"
        }
      },
      {
        "body": "I think this issue should probably be renamed and escalated. \r\n\r\nThere is currently no method to have some developers use VSCode and some developers use Visual Studio on the same codebase and still use \"resx\" files.\r\n\r\nThey are just simply incompatible.\r\n\r\nVisualStudio will attempt to overwrite the designer files whenever it feels like it and those updated designer files will always be different than what the ResXFileCodeGenerator produces (it has a version in it that it doesn't normally).\r\nThey will always be in the same location as the resx file itself and there is no way to change the behavior Visual Studio.\r\n\r\nThe suggested work around in this issue won't work in that case either as VS will always generate the files next to the resx causing this issue.\r\n\r\nUnfortunately this is a problem spread across three different projects with inconsistent behavior leading me to believe they will never get fixed unless they all just duplicate the behavior of VisualStudio",
        "createdAt": "2022-04-28T23:53:19Z",
        "author": {
          "login": "yinzara"
        }
      },
      {
        "body": "There's a nice write-up of this issue by @tillig at https://www.paraesthesia.com/archive/2022/09/30/strongly-typed-resources-with-net-core/.  It would be good to see an SDK feature for this to get simple, consistent behavior in Visual Studio and VS Code.",
        "createdAt": "2022-10-04T17:59:30Z",
        "author": {
          "login": "danjagnow"
        }
      },
      {
        "body": "> There's a nice write-up of this issue by @tillig at https://www.paraesthesia.com/archive/2022/09/30/strongly-typed-resources-with-net-core/. It would be good to see an SDK feature for this to get simple, consistent behavior in Visual Studio and VS Code.\r\n\r\nI'll add to this. Changing the line `<Generator>ResXFileCodeGenerator</Generator>` to `<Generator>MSBuild:Compile</Generator>` then adding `<CoreCompileDependsOn>PrepareResources;$(CompileDependsOn)</CoreCompileDependsOn>` in the properties fully delegates the job to MSBuild and prevents conflicts with Visual Studio",
        "createdAt": "2022-10-05T13:04:29Z",
        "author": {
          "login": "Arthri"
        }
      },
      {
        "body": "I updated my blog article with the info from @Arthri  - thanks! https://www.paraesthesia.com/archive/2022/09/30/strongly-typed-resources-with-net-core/\r\n\r\nI wonder if it'd be interesting/helpful to have some sort of \"current workaround\" complete code example pinned in here somehow. It's really hard to mentally apply all the incremental changes/updates noted here to get to a \"complete solution\" that works. (Which, I guess, is the whole point of this issue, but scrolling through this issue is almost as hard as the issue itself.)",
        "createdAt": "2022-10-25T14:35:17Z",
        "author": {
          "login": "tillig"
        }
      },
      {
        "body": "@tillig I updated the OP with @Arthri's changes.",
        "createdAt": "2022-10-25T14:39:21Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Thanks for the updates. I now have a PR open that makes it work, which I am very happy about. However, there is a difference between the update of @rainersigwald and the blog post by @tillig , which is the `LastGenOutput` part. Can you advise what this does and what considerations to make whether to use it or not please?",
        "createdAt": "2022-10-27T11:21:35Z",
        "author": {
          "login": "bergmeister"
        }
      },
      {
        "body": "`LastGenOutput` is not used by the build itself, and I believe it can be dropped now, but there may be some Visual Studio scenario where it is relevant--nothing stood out to me from a quick search of the internal codebase but that's not a guarantee. I'd leave it out and wait for further information myself, but I don't know what harm it would cause to leave it in.",
        "createdAt": "2022-10-27T13:35:25Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I've been leaving LastGenOutput and other boilerplate there for the reason that the VS resx designer will reinsert it anyway on each save, and I don't want to have to undo .csproj changes each time. (Same with the `.settings` designer.) I haven't tried this `MSBuild:Compile` generator yet though.",
        "createdAt": "2022-10-27T14:42:52Z",
        "author": {
          "login": "jnm2"
        }
      },
      {
        "body": "FWIW, Arcade has [a solution for this](https://github.com/dotnet/arcade/blob/e7ede87875f41a9b3df898ae08da5ebc96e24f56/src/Microsoft.DotNet.Arcade.Sdk/tools/GenerateResxSource.targets) (used by MSBuild itself AFAICT) which further points at https://github.com/dotnet/sdk/issues/94 as an existing issue tracking this problem.",
        "createdAt": "2022-11-01T21:23:52Z",
        "author": {
          "login": "mhutch"
        }
      },
      {
        "body": "@mhutch, MSBuild itself does not use the Arcade reimplementation (in fact we do not use strongly typed resources at all).\r\n\r\nI believe the Arcade reimplementation of the MSBuild feature was done because its authors were unaware of the MSBuild feature.",
        "createdAt": "2022-11-02T12:57:09Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> @mhutch, MSBuild itself does not use the Arcade reimplementation (in fact we do not use strongly typed resources at all).\r\n\r\nhttps://github.com/dotnet/msbuild/blob/9f039008687aa73bcbcc805e2c0e1c91bd7b67f4/src/Directory.Build.targets#L113",
        "createdAt": "2022-11-02T18:42:03Z",
        "author": {
          "login": "mhutch"
        }
      },
      {
        "body": "Ah you're right, we had to do that to consume a source package that requires the Arcade approach. That's a bug in the package IMO.",
        "createdAt": "2022-11-02T18:48:17Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Expanded on @tillig's approach and made it [a general-purpose](https://www.cazzulino.com/resources.html) drop-in for  `Directory.Build.targets`:\r\n\r\n```xml\r\n<Project>\r\n  <PropertyGroup>\r\n    <!-- For VSCode/Razor compat -->\r\n    <CoreCompileDependsOn>PrepareResources;$(CoreCompileDependsOn)</CoreCompileDependsOn>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <EmbeddedResource Update=\"@(EmbeddedResource)\">\r\n      <Generator>MSBuild:Compile</Generator>\r\n      <StronglyTypedFileName>$(IntermediateOutputPath)\\$([MSBuild]::ValueOrDefault('%(RelativeDir)', '').Replace('\\', '.').Replace('/', '.'))%(Filename).g$(DefaultLanguageSourceExtension)</StronglyTypedFileName>\r\n      <StronglyTypedLanguage>$(Language)</StronglyTypedLanguage>\r\n      <StronglyTypedNamespace Condition=\"'%(RelativeDir)' == ''\">$(RootNamespace)</StronglyTypedNamespace>\r\n      <StronglyTypedNamespace Condition=\"'%(RelativeDir)' != ''\">$(RootNamespace).$([MSBuild]::ValueOrDefault('%(RelativeDir)', '').Replace('\\', '.').Replace('/', '.').TrimEnd('.'))</StronglyTypedNamespace>\r\n      <StronglyTypedClassName>%(Filename)</StronglyTypedClassName>\r\n    </EmbeddedResource>\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n",
        "createdAt": "2023-04-10T07:01:11Z",
        "author": {
          "login": "kzu"
        }
      },
      {
        "body": "> Expanded on @tillig's approach and made it [a general-purpose](https://www.cazzulino.com/resources.html) drop-in for `Directory.Build.targets`:\r\n> \r\n> ```\r\n> <Project>\r\n>   <PropertyGroup>\r\n>     <!-- For VSCode/Razor compat -->\r\n>     <CoreCompileDependsOn>PrepareResources;$(CoreCompileDependsOn)</CoreCompileDependsOn>\r\n>   </PropertyGroup>\r\n> \r\n>   <ItemGroup>\r\n>     <EmbeddedResource Update=\"@(EmbeddedResource)\">\r\n>       <Generator>MSBuild:Compile</Generator>\r\n>       <StronglyTypedFileName>$(IntermediateOutputPath)\\$([MSBuild]::ValueOrDefault('%(RelativeDir)', '').Replace('\\', '.').Replace('/', '.'))%(Filename).g$(DefaultLanguageSourceExtension)</StronglyTypedFileName>\r\n>       <StronglyTypedLanguage>$(Language)</StronglyTypedLanguage>\r\n>       <StronglyTypedNamespace Condition=\"'%(RelativeDir)' == ''\">$(RootNamespace)</StronglyTypedNamespace>\r\n>       <StronglyTypedNamespace Condition=\"'%(RelativeDir)' != ''\">$(RootNamespace).$([MSBuild]::ValueOrDefault('%(RelativeDir)', '').Replace('\\', '.').Replace('/', '.').TrimEnd('.'))</StronglyTypedNamespace>\r\n>       <StronglyTypedClassName>%(Filename)</StronglyTypedClassName>\r\n>     </EmbeddedResource>\r\n>   </ItemGroup>\r\n> </Project>\r\n> ```\r\n\r\nI believe this generates classes for `Resources.en-US.resx` along with `Resources.resx` which might not be intended",
        "createdAt": "2023-04-12T13:22:47Z",
        "author": {
          "login": "Arthri"
        }
      },
      {
        "body": "> ```xml\r\n> <CoreCompileDependsOn>PrepareResources;$(CoreCompileDependsOn)</CoreCompileDependsOn>\r\n> ```\r\n\r\nFWIW, this seems to cause a recursive overflow in the inner markup build when `UseWpf` is `true`.",
        "createdAt": "2023-05-26T02:29:50Z",
        "author": {
          "login": "mhutch"
        }
      },
      {
        "body": "> > ```\r\n> > <CoreCompileDependsOn>PrepareResources;$(CoreCompileDependsOn)</CoreCompileDependsOn>\r\n> > ```\r\n> \r\n> FWIW, this seems to cause a recursive overflow in the inner markup build when `UseWpf` is `true`.\r\n\r\nCan confirm - I've circumvented the recursion by calling `PrepareResources` as an `InitialTarget` instead:  \r\n`<Project Sdk=\"Microsoft.NET.Sdk.WindowsDesktop\" InitialTargets=\"PrepareResources\">`\r\n\r\nBut I end up with the CS2002 errors mentioned previously so it likely doesn't actually work \ud83e\udee0",
        "createdAt": "2023-09-04T16:30:08Z",
        "author": {
          "login": "Difegue"
        }
      },
      {
        "body": "Does removing it work? I suspect WPF already has a similar setting",
        "createdAt": "2023-09-05T04:09:08Z",
        "author": {
          "login": "Arthri"
        }
      },
      {
        "body": "Is there any solution to this for WPF projects?",
        "createdAt": "2024-08-07T16:53:33Z",
        "author": {
          "login": "ArchibaldMacdonald-cyacomb"
        }
      },
      {
        "body": "I managed to get WPF projects building via:\r\n\r\n```csproj\r\n  <PropertyGroup Condition=\"'$(UseWPF)' == 'true'\">\r\n    <!-- Ensure WPF apps generate RESX designer files with namespace not taken from wpftmp file. --> \r\n    <RootNamespace Condition=\"$(RootNamespace.EndsWith('_wpftmp'))\">$(_TargetAssemblyProjectName)</RootNamespace>\r\n    <!-- Ensure WPF apps invoke the RESX generator -->\r\n    <CoreCompileDependsOn>$(CoreCompileDependsOn);SplitResourcesByCulture;CreateManifestResourceNames;CoreResGen</CoreCompileDependsOn>\r\n  </PropertyGroup>\r\n```",
        "createdAt": "2024-08-07T18:22:22Z",
        "author": {
          "login": "ArchibaldMacdonald-cyacomb"
        }
      },
      {
        "body": "It is really quite tricky to get this right, especially with WPF involved. Are there any intentions to make this work \"out-of-the-box\"?\n\nI've put together a [small sample project](https://github.com/jansohn/resx-wpf) (with multiple language files and WPF) for reference / reproduction which might help in resolving this issue.",
        "createdAt": "2024-11-05T09:23:29Z",
        "author": {
          "login": "jansohn"
        }
      },
      {
        "body": "I have updated the [blog post](https://www.cazzulino.com/resources.html) with my current approach that improves on this:\n\n1. Take smaller compile dependency: ` <CoreCompileDependsOn>CoreResGen;$(CoreCompileDependsOn)</CoreCompileDependsOn>`\n2. Generate strong-typed class only for `<EmbeddedResource >` items you've specified `MSBuild:Compile` as the custom tool/generator metadata (manually in the proj or via the toolwindow). Such as:\n\n```xml\n  <ItemGroup>\n    <EmbeddedResource Update=\"Strings.resx\">\n      <Generator>MSBuild:Compile</Generator>\n    </EmbeddedResource>\n  </ItemGroup>\n```\n\nAnd here's a sample repo showcasing it: https://github.com/[kzu/Resources.Wpf](https://github.com/kzu/Resources.Wpf)",
        "createdAt": "2024-11-07T12:50:58Z",
        "author": {
          "login": "kzu"
        }
      },
      {
        "body": "Thanks @kzu for sharing!\n\nIn my project I have a lot of resx files but not so much locales. Thus, your approach can be combined with e.g. \n\n```csproj\n<ItemGroup>\n  <NonLocalizedResx Include=\"Resources\\**\\*.resx\" Exclude=\"Resources\\**\\*.de.resx;Resources\\**\\*.en.resx\"/>\n  <EmbeddedResource Update=\"@(NonLocalizedResx)\">\n    <Generator>MSBuild:Compile</Generator>\n  </EmbeddedResource>\n</ItemGroup>\n```\n\n(If all resx inside `./Resources` should have a strongly typed resource class generated and `en` and `de` are your only locales.)\n\nNote: I added this directly to my project's csproj, not the `Directory.build.targets`.\n\nAs I use these resources in combination with DisplayAttribute, adding [`<PublicClass>`](https://learn.microsoft.com/en-us/dotnet/api/microsoft.build.tasks.generateresource.publicclass?view=msbuild-17-netcore) to the `Directory.build.targets` was also helpful:\n\n```csproj\n<EmbeddedResource Update=\"@(EmbeddedResource -> WithMetadataValue('Generator', 'MSBuild:Compile'))\" Type=\"Resx\">\n  <StronglyTypedFileName>$(IntermediateOutputPath)\\$([MSBuild]::ValueOrDefault('%(RelativeDir)', '').Replace('\\', '.').Replace('/', '.'))%(Filename).g$(DefaultLanguageSourceExtension)</StronglyTypedFileName>\n  <StronglyTypedLanguage>$(Language)</StronglyTypedLanguage>\n  <StronglyTypedNamespace Condition=\"'%(RelativeDir)' == ''\">$(RootNamespace)</StronglyTypedNamespace>\n  <StronglyTypedNamespace Condition=\"'%(RelativeDir)' != ''\">$(RootNamespace).$([MSBuild]::ValueOrDefault('%(RelativeDir)', '').Replace('\\', '.').Replace('/', '.').TrimEnd('.'))</StronglyTypedNamespace>\n  <StronglyTypedClassName>%(Filename)</StronglyTypedClassName>\n  <PublicClass>true</PublicClass>\n</EmbeddedResource>\n```",
        "createdAt": "2025-01-10T17:01:39Z",
        "author": {
          "login": "georg-jung"
        }
      }
    ]
  }
}