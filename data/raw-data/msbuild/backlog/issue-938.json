{
  "number": 938,
  "title": "RecursiveDir metadata on a TaskItem returns wrong metadata value",
  "body": "Repro steps :\n\nDownload the attached zip and run msbuild /t:repro on Classlibrary1 . \n\nThe expected value of RecursiveDir is Level2Folder1 while the returned value is \"Level2Folder1\\Level3Folder1\" .\n\nI am using msbuild 14.0 on Windows 10 Anniversary Update.\n\nI wasn't able to repro the original problem in a standalone project where the recursiveDir was returning a empty string.\n\n@rainersigwald could you help me debug the original repro case too as that is more important and critical to nuget pack scenarios?\n\n[RecursiveDirBugRepro.zip](https://github.com/Microsoft/msbuild/files/433764/RecursiveDirBugRepro.zip)\n",
  "state": "OPEN",
  "createdAt": "2016-08-23T23:31:36Z",
  "updatedAt": "2024-02-21T16:38:18Z",
  "closedAt": null,
  "author": {
    "login": "rohit21agrawal"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "The code that computes this metadata does so by deciding what's the \"wildcard part\" [based on](https://github.com/Microsoft/msbuild/blob/6fef01a8683f76a52d0a379bc12e5ee02d15b990/src/Shared/FileMatcher.cs#L510-L515) the directory separator _before_ the `**` wildcard, and the _last_ directory separator character in the string.\n\nI agree that this doesn't match the [specified behavior](https://msdn.microsoft.com/en-us/library/ms164313.aspx)\n\n> If the Include attribute contains the wildcard **, this metadata specifies the part of the path that replaces the wildcard.\n\nThe code has an assumption that the path is splittable into three (potentially empty) parts:\n- A fixed directory prefix\n- A set of directories that contain wildcards\n- A filename component\n\nIt's the middle one that [becomes the `RecursiveDir` metadata](https://github.com/rainersigwald/msbuild/blob/6fef01a8683f76a52d0a379bc12e5ee02d15b990/src/XMakeBuildEngine/Definition/BuiltInMetadata.cs#L120).\n",
        "createdAt": "2016-09-09T15:11:30Z",
        "updatedAt": "2016-09-09T15:11:30Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "As to the question of what we should do: I'm not sure the current behavior is wrong. A very common use case is to do `%(RecursiveDir)%(Filename)%(Extension)`, which relies on `RecursiveDir` being _the full path to the file_. That's even an example in the [Copy task MSDN page](https://msdn.microsoft.com/en-us/library/3e54c37h.aspx)! I really don't want to break that pattern.\n",
        "createdAt": "2016-09-09T15:16:15Z",
        "updatedAt": "2016-09-09T15:16:15Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Is it documented that RecursiveDir returns empty is there are no folders that match and this seems to also then break %(Filename)?\r\n\r\n```xml\r\n   <ItemGroup>\r\n     <ProjectItems Include=\"$(ScriptsDirectory)Authentication\\**\\*.*\">\r\n        <Link>Authentication\\%(RecursiveDir)%(Filename)%(Extension)</Link>\r\n        <Type>Content</Type>\r\n      </ProjectItems>\r\n    </ItemGroup>\r\n```\r\n\r\n\r\nIf I have files directly under **Authentication** then I end up with this metadata. \r\nNotice the value of \"Link\" doesn't even include the Filename nor Extension metdaata and RecursiveDir has evaluated to empty.\r\n\r\n> Link:Authentication\\\\\r\n> Type:Content\r\n> FullPath:C:\\Temp\\Authentication\\LogOff.aspx\r\n> RootDir:C:\\\\\r\n> Filename:LogOff\r\n> Extension:.aspx\r\n> RelativeDir:C:\\Temp\\Authentication\\\\\r\n> Directory:Temp\\Authentication\\\\\r\n> RecursiveDir:",
        "createdAt": "2019-02-17T10:03:48Z",
        "updatedAt": "2019-02-17T10:03:48Z",
        "author": {
          "login": "michael-baker"
        }
      }
    ]
  }
}