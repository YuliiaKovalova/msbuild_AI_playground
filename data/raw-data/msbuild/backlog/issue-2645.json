{
  "number": 2645,
  "title": "Performance: reduce overhead of computing full path for items from globs",
  "body": "Based on investigating performance trace to load Roslyn.sln, I looked into the time spent in CPS's UpdateSnapshotCoreAsync, almost 30% thread time in this function is to calculate FullPath of project items.\r\n\r\nBecause those items are coming from globs, I wonder the path is naturally normalized, and we can reduce some of the overhead here.\r\n\r\n```\r\nName                                                                 \t                                        Inc %\t  Inc\t           Inc Ct\r\nmicrosoft.build.ni!FileUtilities.GetFullPath                        \t                       28.1\t          405.567\t  592\r\n+ microsoft.build.ni!FileUtilities.NormalizePath                     \t                       19.3\t           277.811\t  267\r\n+ system.ni!System.Text.RegularExpressions.Regex.Match(System.String)\t 5.9\t           84.554\t  209\r\n+ mscorlib.ni!System.IO.Path.Combine(System.String, System.String)   \t 1.5\t           22.189\t   62\r\n```",
  "state": "OPEN",
  "createdAt": "2017-10-16T18:08:08Z",
  "updatedAt": "2025-06-02T08:26:52Z",
  "closedAt": null,
  "author": {
    "login": "lifengl"
  },
  "milestone": {
    "title": "Backlog"
  },
  "assignees": {
    "nodes": []
  },
  "labels": [
    "Area: Performance",
    "CPS",
    "Priority:1"
  ],
  "comments": {
    "nodes": [
      {
        "body": "Include @cdmihai & @davkean to the thread.  The rule snapshots logic is a slow portion of the code after the project evaluation phase.",
        "createdAt": "2017-10-16T18:08:57Z",
        "author": {
          "login": "lifengl"
        }
      },
      {
        "body": "Is this evaluation, or design time builds? Could you please also post more of the backtraces to see where GetFullPath is called from (preferably up to Project), or upload the perfiew trace?",
        "createdAt": "2017-10-16T18:40:45Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "This happens after the project evaluation inside VS.  During that phase, we extra information from msbuild evaluation results based on rules defined in the project system.  The overall time is much smaller than the evaluation time, so I would consider this lower priority than improving the evaluation time.\r\n\r\nOn the other side, we start to look beyond the evaluation time to see what we can do to make loading a project faster, and this turns out to be one major block we want to make more efficient during the critical path in the loading phase.  I will share the Roslyn.sln loading ETW trace with you (or anyone can take this trace with PerfView). \r\n\r\nTo look into this time: Open the thread time window in perfView, (select devenv, and remove grouParts setting) and find UpdateSnapshotCoreAsync stack, and open it in the Callees window (this will aggregate time spent in this method).  Use context menu to drill into it. \r\n\r\nAfter that, you can see the time spent inside this function, and the top cost is inside FileUtilities.GetFullPath.\r\n\r\nThe caller of this method:\r\n\r\n```\r\nName | Inc % | Inc | Inc Ct\r\n-- | -- | -- | --\r\nmicrosoft.build.ni!FileUtilities.GetFullPath | 28.1 | 405.567 | 592\r\n+ microsoft.build.ni!Microsoft.Build.Shared.FileUtilities+ItemSpecModifiers.GetItemSpecModifier(System.String, System.String, System.String, System.String, System.String ByRef) | 28.1 | 405.567 | 592\r\n+ microsoft.build.ni!Microsoft.Build.Shared.FileUtilities+ItemSpecModifiers.GetItemSpecModifier(System.String, System.String, System.String, System.String, System.String ByRef) | 22.2 | 319.395 | 454\r\n\\|+ microsoft.build.ni!Microsoft.Build.Execution.ProjectItemInstance+TaskItem.GetBuiltInMetadataEscaped(System.String) | 22.1 | 318.429 | 445\r\n\\|\\|+ microsoft.build.ni!Microsoft.Build.Execution.ProjectItemInstance+TaskItem.GetMetadataEscaped(System.String) | 22.1 | 318.429 | 445\r\n\\|\\| + microsoft.build.ni!Microsoft.Build.Execution.ProjectItemInstance+TaskItem.GetMetadata(System.String) | 22.1 | 318.429 | 445\r\n\\|\\| \u00a0+ microsoft.visualstudio.projectsystem.implementation.ni!ProjectEvaluationSubscriptionService.BuildItemsSnapshot | 22.1 | 318.429 | 445\r\n\\|+ microsoft.build.ni!Microsoft.Build.Shared.FileUtilities+ItemSpecModifiers.GetItemSpecModifier(System.String, System.String, System.String, System.String, System.String ByRef) | 0.1 | 0.966 | 9\r\n\\| + microsoft.build.ni!Microsoft.Build.Execution.ProjectItemInstance+TaskItem.GetBuiltInMetadataEscaped(System.String) | 0.1 | 0.966 | 9\r\n\\| \u00a0+ microsoft.build.ni!Microsoft.Build.Execution.ProjectItemInstance+TaskItem.GetMetadataEscaped(System.String) | 0.1 | 0.966 | 9\r\n\\| \u00a0\u00a0+ microsoft.build.ni!Microsoft.Build.Execution.ProjectItemInstance+TaskItem.GetMetadata(System.String) | 0.1 | 0.966 | 9\r\n\\| \u00a0\u00a0\u00a0+ microsoft.visualstudio.projectsystem.implementation.ni!ProjectEvaluationSubscriptionService.BuildItemsSnapshot | 0.1 | 0.966 | 9\r\n+ microsoft.build.ni!Microsoft.Build.Execution.ProjectItemInstance+TaskItem.GetBuiltInMetadataEscaped(System.String) | 6.0 | 86.172 | 138\r\n+ microsoft.build.ni!Microsoft.Build.Execution.ProjectItemInstance+TaskItem.GetMetadataEscaped(System.String) | 6.0 | 86.172 | 138\r\n+ microsoft.build.ni!Microsoft.Build.Execution.ProjectItemInstance+TaskItem.GetMetadata(System.String) | 6.0 | 86.172 | 138\r\n+ microsoft.visualstudio.projectsystem.implementation!ProjectInstanceItemProperties.GetEvaluatedPropertyValue | 6.0 | 86.172 | 138\r\n```",
        "createdAt": "2017-10-16T22:24:25Z",
        "author": {
          "login": "lifengl"
        }
      },
      {
        "body": "@ladipro Has this been addressed in your latest glob optimization? If yes please close this issue.",
        "createdAt": "2021-04-16T09:42:28Z",
        "author": {
          "login": "rokonec"
        }
      },
      {
        "body": "@rokonec I don't think this was addressed in the glob optimization changes. We should take a closer look at this.",
        "createdAt": "2021-04-16T09:50:29Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "@ladipro please check it out and decide if this is still something we shall invest into in close future? Currently it is P1 so we shall at least consider to lower priority here.",
        "createdAt": "2024-01-09T12:39:31Z",
        "author": {
          "login": "rokonec"
        }
      },
      {
        "body": "@rokonec this still seems to be actionable, I can see `FileUtilities.GetFullPath` taking a significant amount of time in traces. A concrete work item here would be to compare our P/Invoke implementation under `FEATURE_LEGACY_GETFULLPATH` with the regular `Path.GetFullPath`. The comments suggest that this was done to work around perf issues with pre-4.6.2 NetFx implementation, so that should be moot now. This would result in a perf improvement or at least code cleanup.\r\n\r\nNext step would be to see if on this particular code path `GetFullPath` is really required or if it can be omitted / cached / optimized.\r\n\r\nI lean towards keeping it as P1 and tackling it in one of the upcoming iterations.\r\n\r\n![image](https://github.com/dotnet/msbuild/assets/12206368/515a907b-b0d9-448f-8adc-9afc22cbc7ec)",
        "createdAt": "2024-01-16T08:50:23Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "Was it tackled?",
        "createdAt": "2025-02-23T01:41:28Z",
        "author": {
          "login": "BenjaminBrienen"
        }
      }
    ]
  }
}