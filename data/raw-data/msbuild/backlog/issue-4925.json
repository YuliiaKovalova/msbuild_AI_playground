{
  "number": 4925,
  "title": "Tasks need to be able to access current project's global properties",
  "body": "From a task, we'd like to access the global properties of the current project.  This is so you can do evaluations outside of MSBuild but part of a task.  The global properties passed from the command-line are not made available to any running component like tasks at the moment.\r\n\r\nI spoke with @rainersigwald and we thought of two possible implementations:\r\n\r\n## Add a new `GetGlobalProperties` task\r\n\r\nA new task could be made to fetch global properties into an item group.  This item group could then be passed to the task that needs the values:\r\n\r\n```xml\r\n<Project>\r\n  <Target Name=\"Example\">\r\n    <!--\r\n      Call a new task that gets the global properties  stores them in a return ItemGroup\r\n    -->\r\n    <GetProjectGlobalProperties>\r\n      <Output TaskParameter=\"GlobalProperties\" ItemName=\"CurrentProjectGlobalProperties\" />\r\n    </GetProjectGlobalProperties>\r\n\r\n   <!-- Call my task that takes the item containing global properties -->\r\n    <MyTask GlobalProperties=\"@(CurrentProjectGlobalProperties)\" />\r\n  </Target>\r\n</Project>\r\n```\r\nThe nice thing about this implementation is that logs would clearly show that global properties were fetched and passed along.\r\n\r\nOne drawback of this approach is that escaping could be difficult since things need to made available as strings for items.\r\n\r\n## Add `IBuildEngine6`\r\nWe could also implement a new interface to extend `IBuildEngine` which would have a method like:\r\n\r\n```C#\r\npublic interface IBuildEngine6 : IBuildEngine5\r\n{\r\n    IReadOnlyDictionary<string, string> GetGlobalProperties();\r\n}\r\n```\r\n\r\nThis method would return a copy of the global properties and the task could call it to get them.\r\n\r\nThe drawback of this implementation is that its not as clear in any logs that global properties were fetched and used.",
  "state": "CLOSED",
  "createdAt": "2019-11-15T17:32:48Z",
  "updatedAt": "2024-02-21T17:06:03Z",
  "closedAt": "2019-11-25T22:21:56Z",
  "author": {
    "login": "jeffkl"
  },
  "labels": [
    "Feature Request",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "jeffkl"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "@rainersigwald I'm leaning towards `IBuildEngine6` after giving this more thought just so I don't have to deal with escaping.  I'd like to code this up today or tomorrow, please let me know what you think.",
        "createdAt": "2019-11-20T22:02:37Z",
        "updatedAt": "2019-11-20T22:02:37Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "I still think the other way is cleaner. Wouldn't the escaping be automatically handled at item creation time/item input decoding time?",
        "createdAt": "2019-11-20T22:55:52Z",
        "updatedAt": "2019-11-20T22:55:52Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}