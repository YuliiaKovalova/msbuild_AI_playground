{
  "number": 8570,
  "title": "[Bug]: UseTrustedSettings parameter for XslTransformation task is ignored when using dotnet build",
  "body": "### Issue Description\r\n(edited to add zip file of demo solution)\r\n\r\nWhen building in VS 2022 or using msbuild from the comand line my project compiles. When building using dotnet build my project fails to compile.\r\n\r\nThe failure is on the XslTransformation task in my .csproj. The error is _error MSB3703: Unable to execute transformation. An error occurred while loading document '{path to file elided}'. See InnerException for a complete description of the error. [TargetFramework=netstandard2.0]_\r\n\r\n### Steps to Reproduce\r\n\r\n1. Unzip and open the attached solution.\r\n[UseTrustedSettingsBug.zip](https://github.com/dotnet/msbuild/files/11035915/UseTrustedSettingsBug.zip)\r\n\r\n3. Build in Visual Studio. (It succeeds.)\r\n4. Command line build: msbuild.exe \"UseTrustedSettingsBug.sln\" (It succeeds.)\r\n5. To confirm, open UseTrustedSettingsBug\\obj\\Debug\\netstandard2.0\\documentation.xml \r\n6. Command line build: dotnet build \"UseTrustedSettingsBug.sln\" (It fails.)\r\n\r\n### Expected Behavior\r\n\r\nThe project compiles without errors when using 'msbuild' or 'dotnet build' command.\r\n\r\n### Actual Behavior\r\n\r\nThe project compiles when using the msbuild command, but fails to compile when using dotnet build command, due to an error executing the XslTransformation task.\r\n\r\n### Analysis\r\n\r\nIt appears that the dotnet build engine is not passing the UseTrustedSettings argument of \"true\" to the XslTransformation task instance it is creating to run the task. \r\n\r\n(Sorry, I have no idea what to call this build engine. dotnet build --version returns \"MsBuild\" but it obviously not msbuild because invoking msbuild works without error. </sigh>)\r\n\r\nHere are links to source code for XslTransformation and XsltSettings. \r\n\r\nhttps://github.com/dotnet/msbuild/blob/60ea2f733cfcc78da965ab43cf040fe5c58800fb/src/Tasks/XslTransformation.cs#L450\r\nhttps://github.com/dotnet/runtime/blob/57bfe474518ab5b7cfe6bf7424a79ce3af9d6657/src/libraries/System.Private.Xml/src/System/Xml/Xslt/XsltSettings.cs#L31\r\n\r\nYou can see in the LoadXslt method when the UseTrustedSettings property = true it is passing an XsltSettings.TrustedXslt to the XslCompiledTransform.LoadMethod. The XsltSettings.TrustedXslt returns a new instance of XsltSettings created with the ctor argument enableDocumentFunction = true;\r\n\r\nIf the UseTrustedSettings property was being set properly by dotnet build there would not be an error when encountering the xslt document function.\r\n\r\n### Versions & Configurations\r\n\r\nMicrosoft Visual Studio Professional 2022 (64-bit) - Current\r\nVersion 17.5.1\r\n\r\n\u276f msbuild -version\r\n\r\nMSBuild version 17.5.0+6f08c67f3 for .NET Framework\r\n17.5.0.10706\r\n\r\n\u276f dotnet build -version\r\nMSBuild version 17.5.0-preview-23061-01+040e2a90e for .NET\r\n17.5.0.6101\r\n",
  "state": "CLOSED",
  "createdAt": "2023-03-15T21:51:59Z",
  "updatedAt": "2024-02-21T14:05:40Z",
  "closedAt": "2023-05-16T10:38:18Z",
  "author": {
    "login": "edstegman"
  },
  "labels": [
    "bug",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "JaynieBai"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Hi @edstegman.  Did you forget to attach the repro solution?  :)\r\n ",
        "createdAt": "2023-03-22T02:52:13Z",
        "updatedAt": "2023-03-22T02:52:13Z",
        "author": {
          "login": "JaynieBai"
        }
      },
      {
        "body": "I dragged and dropped it on the form before submitting. Most likely I made some kind of operator error. Here you go.\r\n[UseTrustedSettingsBug.zip](https://github.com/dotnet/msbuild/files/11035903/UseTrustedSettingsBug.zip)\r\n",
        "createdAt": "2023-03-22T03:23:29Z",
        "updatedAt": "2023-03-22T03:23:29Z",
        "author": {
          "login": "edstegman"
        }
      },
      {
        "body": "Debug msbuild with dotnet ./artifacts/bin/bootstrap/net7.0/MSBuild/MSBuild.dll at the project file.  UseTrustedSettings is set as true, and settings = XsltSettings.TrustedXslt;  is hit.  \r\n\r\n Find the exception is throwed in https://github.com/dotnet/msbuild/blob/b84faa7d0dfb42daedca5c244f73f0b07e1135d7/src/Tasks/XslTransformation.cs#L168\r\n\r\nThe innerException is \"Resolving of external URIs was prohibited. Attempted access to: {path to file elided}\".  This maybe be a known compatible issue. NET Core does not allow resolving external URIs for XML by default  https://github.com/dotnet/runtime/issues/26969#issuecomment-408175222  @rainersigwald   What's your point how to deal with such issue?",
        "createdAt": "2023-03-22T10:17:42Z",
        "updatedAt": "2023-03-22T10:17:42Z",
        "author": {
          "login": "JaynieBai"
        }
      },
      {
        "body": "Great root-cause identification @JaynieBai!\r\n\r\nSince we already have an explicit opt-in `UseTrustedSettings`, it may be reasonable for us to call \r\n\r\n```c#\r\nAppContext.SetSwitch(\"Switch.System.Xml.AllowDefaultResolver\", true);\r\n```\r\n\r\nfor an invocation with that input set to `true`. However, since this is a security-related setting, we'll need to get a security-focused review before committing to that.",
        "createdAt": "2023-03-22T14:33:34Z",
        "updatedAt": "2023-03-22T14:33:34Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Sorry I couldn't identify the root cause. The inner exception is not output in the build log, even after cranking up the build verbosity to diagnostic.\r\n\r\nThere is room for improvement in this area in the build logging.",
        "createdAt": "2023-03-22T20:21:53Z",
        "updatedAt": "2023-03-22T20:21:53Z",
        "author": {
          "login": "edstegman"
        }
      },
      {
        "body": "> There is room for improvement in this area in the build logging.\r\n\r\nAgreed. This is another case like the recently-fixed #8407 where we should not hide that inner exception.",
        "createdAt": "2023-03-22T20:23:53Z",
        "updatedAt": "2023-03-22T20:23:53Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "The Switch.System.Xml.AllowDefaultResolver value is cached in a static field\n\n<https://github.com/dotnet/runtime/blob/5edef4b20babd4c3ddac7460e536f86fd0f2d724/src/libraries/System.Private.Xml/src/System/Xml/Xslt/XslCompiledTransform.cs#L448-L458>\n\n<https://github.com/dotnet/runtime/blob/5edef4b20babd4c3ddac7460e536f86fd0f2d724/src/libraries/System.Private.Xml/src/System/Xml/Core/LocalAppContextSwitches.cs#L60-L68>\n\nIf you set the switch after it has already been cached, that has no effect on XslCompiledTransform.\n\nInstead I think MSBuild should use an [XslCompiledTransform.Transform](https://learn.microsoft.com/dotnet/api/system.xml.xsl.xslcompiledtransform.transform?view=netstandard-2.0) overload that takes an XmlResolver parameter, when UseTrustedSettings is true. That way, the relaxed security would affect only that one call.\n\n<https://github.com/dotnet/msbuild/blob/fedecea9d0d923d3520309dcf69e1dd4a485ef75/src/Tasks/XslTransformation.cs#L168>\n\nPossibly it could even specify an XmlResolver when UseTrustedSettings is false, just to report an MSBuild-specific error if the transform attempts to use the resolver.",
        "createdAt": "2023-03-23T05:35:35Z",
        "updatedAt": "2023-03-23T05:38:06Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "Re logging, the XslTransformation task calls TaskLoggingHelper.LogErrorWithCodeFromResources(string messageResourceName, params object[] messageArgs). There is also TaskLoggingHelper.LogErrorFromException(Exception exception, bool showStackTrace, bool showDetail, string file), which logs the inner exceptions if requested via the showDetail parameter or the \"MSBUILDDIAGNOSTICS\" environment variable, but this then does not log an error code. I feel there should a method that does both; that way, inner exceptions would be consistently formatted and this feature could be consistently enabled with the environment variable.",
        "createdAt": "2023-03-23T09:29:40Z",
        "updatedAt": "2023-03-23T09:31:39Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "In the XslTransformation task, it could even be useful to log the stack trace of the exception too, as the stack frames there may refer to elements or line numbers in the developer's XSLT file and help them fix the error. I'm not sure how much of this information is available without the XslCompiledTransform (bool enableDebug) constructor, though. The task might need an additional parameter or environment variable for enabling the xslt debug feature, without slowing down other builds.",
        "createdAt": "2023-03-23T09:43:38Z",
        "updatedAt": "2023-03-23T09:45:11Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "@rainersigwald do you see any possible issues with using `LogErrorWithCodeFromResources` for arbitrary (non-MSBuild) exceptions? (as mentioned by @MichalPavlik on offline sync it parses the message to obtain message code - so not sure if it was meant for general purpose)",
        "createdAt": "2023-03-29T08:38:46Z",
        "updatedAt": "2023-03-29T08:38:46Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "Discussed offline - 2 separate PRs will be created (one needs security approval)",
        "createdAt": "2023-03-29T14:23:54Z",
        "updatedAt": "2023-03-29T14:23:54Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "I found another minor issue WRT UseTrustedSettings parameter that doesn't affect compilation behavior for MSBuild, but does affect intellisense/static analysis in the VS2022 IDE for the .csproj file when using the parameter.\r\n\r\nThe Microsoft.Build.Commontypes.xsd file is missing the UseTrustedSettings attribute for the XslTransformation element.\r\n    <xs:element name=\"XslTransformation\" substitutionGroup=\"msb:Task\">\r\n        <xs:complexType>\r\n            <xs:complexContent>\r\n                <xs:extension base=\"msb:TaskType\">\r\n                    <xs:attribute name=\"OutputPaths\" use=\"required\" />\r\n                    <xs:attribute name=\"Parameters\" />\r\n                    <xs:attribute name=\"XmlContent\" />\r\n                    <xs:attribute name=\"XmlInputPaths\" />\r\n                    <xs:attribute name=\"XslCompiledDllPath\" />\r\n                    <xs:attribute name=\"XslContent\" />\r\n                    <xs:attribute name=\"XslInputPath\" />\r\n                </xs:extension>\r\n            </xs:complexContent>\r\n        </xs:complexType>\r\n    </xs:element>\r\n\r\nThe files lives here on my local installation:\r\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Professional\\Xml\\Schemas\\1033\\MSBuild\\Microsoft.Build.Commontypes.xsd\r\n\r\nThe issue also exists for earlier versions of Visual Studio, indicating it is not a new issue.",
        "createdAt": "2023-04-03T18:04:18Z",
        "updatedAt": "2023-04-03T18:07:35Z",
        "author": {
          "login": "edstegman"
        }
      },
      {
        "body": "> Discussed offline - 2 separate PRs will be created (one needs security approval)\n\nDid <https://github.com/dotnet/msbuild/pull/8655> fix this fully, or is a second PR still pending?",
        "createdAt": "2023-05-16T13:33:15Z",
        "updatedAt": "2023-05-16T13:33:15Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "@KalleOlaviNiemitalo nope, we forgot https://github.com/dotnet/msbuild/issues/8764. Thanks!",
        "createdAt": "2023-05-16T13:50:53Z",
        "updatedAt": "2023-05-16T13:50:53Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> Re logging, the XslTransformation task calls TaskLoggingHelper.LogErrorWithCodeFromResources(string messageResourceName, params object[] messageArgs). There is also TaskLoggingHelper.LogErrorFromException(Exception exception, bool showStackTrace, bool showDetail, string file), which logs the inner exceptions if requested via the showDetail parameter or the \"MSBUILDDIAGNOSTICS\" environment variable, but this then does not log an error code. I feel there should a method that does both; that way, inner exceptions would be consistently formatted and this feature could be consistently enabled with the environment variable.\r\n\r\n@rainersigwald  Should we reopen the issue or create a new one? My fix added the XmlResolver for the security setting.  But didn't resolve the log method that should log the inner exception and error code together.",
        "createdAt": "2023-05-17T01:58:36Z",
        "updatedAt": "2023-05-17T01:58:59Z",
        "author": {
          "login": "JaynieBai"
        }
      },
      {
        "body": "@JaynieBai - for logging improvement I'd suggest opening a distinct item - as the current issue is resolved",
        "createdAt": "2023-05-17T08:00:00Z",
        "updatedAt": "2023-05-17T08:00:00Z",
        "author": {
          "login": "JanKrivanek"
        }
      }
    ]
  }
}