{
  "number": 5203,
  "title": "MSB4132 is emitted when a task logs errors in custom format",
  "body": "### Steps to reproduce\r\nThis is a new issue in VS2019 16.6 Preview 1 with our custom build tasks. The issue looks to have been introduced by [#4940](https://github.com/microsoft/msbuild/pull/4940)\r\n\r\nThe issue occurs because we use our own custom log format when building within Visual Studio. We use the standard error format during command line builds so there is no problem there. \r\nOur custom format allows us to give a richer experience navigating errors and populating the Visual Studio Error List (which allows custom columns etc). Essentially we have our own set of RegEx parse routines (similar to CanonicalError in MSBuild). Since we hook the output in IDE builds we can create the appropriate errors in the Visual Studio Error list. This is similar to the default functionality offered by VS [ParseOutputStringForTaskItem](https://docs.microsoft.com/en-us/dotnet/api/microsoft.visualstudio.shell.interop.ivslaunchpad.parseoutputstringfortaskitem?view=visualstudiosdk-2019#Microsoft_VisualStudio_Shell_Interop_IVsLaunchPad_ParseOutputStringForTaskItem_System_String_System_UInt32___System_String___System_UInt32___System_String___System_Int32___) However, the build tasks (which use TaskLoggingHelper.LogMessagesFromStream() ) will fail to match the format and incorrectly assume no errors were output. The MSB4132 error is then emitted.\r\n\r\nOne easy workaround/fix would have been to manually set the TaskLoggingHelper's HasLoggedErrors property, but that is unfortunately is only gettable. The only other simple fix I have is to parse the output for this new MSB4132 error and throw it away. \r\n\r\nIt would be useful if there was a way to opt out of this change in behavior. The code change itself seems to have various exemptions and I see other issues raised concerning this, so it would be good to have a simple way for any task to bypass this. \r\n\r\n### Expected behavior\r\nSame as pre 16.6. Don't show: \"...error MSB4132: The \"[TaskName]\" task returned false but did not log an error.\"\r\n\r\n### Actual behavior\r\n\"...error MSB4132: The \"[TaskName]\" task returned false but did not log an error.\"\r\n\r\n### Environment data\r\nOS info:\r\n\r\nVisual Studio 16.6 Preview 1\r\n",
  "state": "CLOSED",
  "createdAt": "2020-03-26T13:43:47Z",
  "updatedAt": "2024-02-21T17:04:30Z",
  "closedAt": "2020-04-28T21:20:32Z",
  "author": {
    "login": "sae42"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "Forgind"
      }
    ]
  },
  "milestone": {
    "title": "MSBuild 16.7"
  },
  "comments": {
    "nodes": [
      {
        "body": "@BenVillalobos can you take a look at this?",
        "createdAt": "2020-03-26T14:19:16Z",
        "updatedAt": "2020-03-26T14:19:16Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Hi @sae42,\r\n\r\nWe came up with a few ways we could add this:\r\n1) Normal escape hatch with environment variable\r\n2) Add a new parameter via IBuildEngine that you can set in each task\r\n3) Look for a property and only turn on the error message when that property is not set to false\r\n\r\nI'm leaning towards #2. #1 is inconvenient from VS, and #3 would change behavior in all projects that have that property set, so if your package comes in from a NuGet package, it would affect your users' error logging, too. #2 feels like overkill, but I think it's the most practical.\r\n\r\nWhat do you think?",
        "createdAt": "2020-03-26T19:10:32Z",
        "updatedAt": "2020-03-26T19:10:32Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "Hi @Forgind . The trouble I foresee with 2) is that I assume it would require the build tasks to be compiled against 16.6 making it the pre-req for the extension. That's not necessarily a deal-breaker, but something to bear in mind. If there was a way to do that for existing (i.e pre-16.6) build tasks, so that they could be kept to pre 16.6 behavior, that would be great. But I'm not sure that's possible. \r\nOption 3) sounds like it would resolve the compatibility problem; from my perspective that property exists right now ('BuildingInsideVisualStudio'), but setting anything as say an MSBuild global property would work.  Would it be possible to provide both solutions?",
        "createdAt": "2020-03-26T21:24:03Z",
        "updatedAt": "2020-03-26T21:24:03Z",
        "author": {
          "login": "sae42"
        }
      },
      {
        "body": "If it comes in a BuildEngine, the BuildEngine would be there either way; the only question would be how new it is, so you can say something like `if (BuildEngine is IBuildEngine7)...` and it will work for any MSBuild.",
        "createdAt": "2020-03-26T21:29:34Z",
        "updatedAt": "2020-03-26T21:29:34Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "Yes, that approach should work. The pre-16.6 built code would have to have its own copy of the interface though as it won't exist in the version it's compiled against. I'd be happy to try this out if you could get this into a preview build.",
        "createdAt": "2020-03-27T07:54:57Z",
        "updatedAt": "2020-03-27T07:54:57Z",
        "author": {
          "login": "sae42"
        }
      },
      {
        "body": "Great! I'll link to this issue when the PR is ready. If you need help pulling it into your changes, I can try to help with that.",
        "createdAt": "2020-03-27T20:59:18Z",
        "updatedAt": "2020-03-27T20:59:18Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "I put a change out in #5207. I haven't rigorously tested it yet, but if you want to test it on your project a little early, feel free.\r\n\r\nThis will create a merge conflict with #5191, but it should be easy to straighten out.",
        "createdAt": "2020-03-27T23:16:15Z",
        "updatedAt": "2020-03-27T23:16:15Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "Thanks. I tried building it myself and it seems to work. A few places were returning IBuildEngine6 rather than IBuildEngine7.",
        "createdAt": "2020-03-30T14:15:23Z",
        "updatedAt": "2020-03-30T14:15:23Z",
        "author": {
          "login": "sae42"
        }
      },
      {
        "body": "Good catch\u2014I fixed that.\r\n\r\nI thought about it more, and other than ensuring the older MSBuild has access to the new interface, you could write a task using reflection similar to the one I provided in the (updated) test. It's probably the easiest solution.",
        "createdAt": "2020-03-30T19:42:18Z",
        "updatedAt": "2020-03-30T19:42:18Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "Thanks, using reflection is probably a better option than my current workaround of filtering out the error in the logger. Just out of curiosity, when I made that change I noticed that MSB4132 is not unique - it is already defined as 'UnrecognizedToolsVersion'. So, my change had to be more than just filtering on the error code.",
        "createdAt": "2020-03-31T07:56:56Z",
        "updatedAt": "2020-03-31T07:56:56Z",
        "author": {
          "login": "sae42"
        }
      },
      {
        "body": "@sae42 Nice catch, we should change the new error's code so that it's unique. @Forgind, while you're in here?",
        "createdAt": "2020-03-31T14:45:18Z",
        "updatedAt": "2020-03-31T14:45:18Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Fixed",
        "createdAt": "2020-03-31T16:32:37Z",
        "updatedAt": "2020-03-31T16:32:37Z",
        "author": {
          "login": "Forgind"
        }
      }
    ]
  }
}