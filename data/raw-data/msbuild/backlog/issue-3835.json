{
  "number": 3835,
  "title": "Solution Restore on Mac is slow due to misplaced NuGet targets",
  "body": "When restoring a solution, Mono MSBuild on Mac does a great deal of needless extra work, which could also result in incorrect restoration.\r\n\r\nNormally, solution-level restore collects references from each project and does a single, unified restore that determines the closure of required packages, downloads them, and writes the correct asset files for each project.\r\n\r\nOn Mono, the solution is instead forwarding the `Restore` target to each project, which then does its own closure walk and restore. That can result in many, many more targets executing per project than is necessary, getting worse for bigger and more interconnected solutions.\r\n\r\nSimple repro: [mono_restore_repro.zip](https://github.com/Microsoft/msbuild/files/2451879/mono_restore_repro.zip)\r\n\r\nCorrect (`dotnet msbuild /t:restore`)\r\n\r\n```\r\nProject Performance Summary:\r\n       84 ms  /Users/raines/src/mono-restore/lib1/lib1.csproj   6 calls\r\n                  1 ms  _IsProjectRestoreSupported                 2 calls\r\n                  9 ms  _GenerateRestoreProjectPathWalk            2 calls\r\n                 63 ms  _GenerateRestoreGraphProjectEntry          1 calls\r\n                 11 ms  _GenerateProjectRestoreGraph               1 calls\r\n      235 ms  /Users/raines/src/mono-restore/lib2/lib2.csproj   6 calls\r\n                 26 ms  _IsProjectRestoreSupported                 2 calls\r\n                 88 ms  _GenerateRestoreProjectPathWalk            2 calls\r\n                 91 ms  _GenerateRestoreGraphProjectEntry          1 calls\r\n                 30 ms  _GenerateProjectRestoreGraph               1 calls\r\n      255 ms  /Users/raines/src/mono-restore/app/app.csproj   5 calls\r\n                 25 ms  _IsProjectRestoreSupported                 2 calls\r\n                117 ms  _GenerateRestoreProjectPathWalk            1 calls\r\n                 82 ms  _GenerateRestoreGraphProjectEntry          1 calls\r\n                 31 ms  _GenerateProjectRestoreGraph               1 calls\r\n     1860 ms  /Users/raines/src/mono-restore/mono-restore.sln   1 calls\r\n               1860 ms  restore                                    1 calls\r\n```\r\n\r\nIncorrect `msbuild /t:restore` using Mono:\r\n\r\n```\r\nProject Performance Summary:\r\n      381 ms  /Users/raines/src/mono-restore/app/app.csproj   6 calls\r\n                285 ms  Restore                                    1 calls\r\n                 19 ms  _IsProjectRestoreSupported                 2 calls\r\n                 24 ms  _GenerateRestoreProjectPathWalk            1 calls\r\n                 27 ms  _GenerateRestoreGraphProjectEntry          1 calls\r\n                 26 ms  _GenerateProjectRestoreGraph               1 calls\r\n      398 ms  /Users/raines/src/mono-restore/lib2/lib2.csproj  10 calls\r\n                296 ms  Restore                                    1 calls\r\n                 21 ms  _IsProjectRestoreSupported                 3 calls\r\n                 25 ms  _GenerateRestoreProjectPathWalk            2 calls\r\n                 28 ms  _GenerateRestoreGraphProjectEntry          2 calls\r\n                 29 ms  _GenerateProjectRestoreGraph               2 calls\r\n     1271 ms  /Users/raines/src/mono-restore/lib1/lib1.csproj  13 calls\r\n               1047 ms  Restore                                    1 calls\r\n                 22 ms  _IsProjectRestoreSupported                 4 calls\r\n                 23 ms  _GenerateRestoreProjectPathWalk            2 calls\r\n                112 ms  _GenerateRestoreGraphProjectEntry          3 calls\r\n                 67 ms  _GenerateProjectRestoreGraph               3 calls\r\n     2498 ms  /Users/raines/src/mono-restore/mono-restore.sln   1 calls\r\n               2498 ms  Restore                                    1 calls\r\n```\r\n\r\n----\r\n\r\nThis is happening because NuGet's solution-level targets aren't getting imported. The solution metaproject is in the right place\r\n\r\n```\r\n/Library/Frameworks/Mono.framework/Versions/5.14.0/lib/mono/xbuild/15.0/SolutionFile/ImportAfter/Microsoft.NuGet.ImportAfter.targets\r\n```\r\n\r\nbut it contains\r\n\r\n```xml\r\n  <PropertyGroup>\r\n    <NuGetRestoreTargets Condition=\"'$(NuGetRestoreTargets)'==''\">$(MSBuildExtensionsPath)\\NuGet.targets</NuGetRestoreTargets>\r\n  </PropertyGroup>\r\n  <Import Condition=\"Exists('$(NuGetRestoreTargets)')\" Project=\"$(NuGetRestoreTargets)\" />\r\n```\r\n\r\n`$(MSBuildExtensionsPath)` maps to \r\n\r\n```\r\n/Library/Frameworks/Mono.framework/Versions/5.14.0/lib/mono/xbuild\r\n```\r\n\r\nwhich doesn't have a `NuGet.targets` -- instead, it's at \r\n\r\n```\r\n/Library/Frameworks/Mono.framework/Versions/5.14.0/lib/mono/msbuild/15.0/bin/NuGet.targets\r\n```\r\n\r\nIt looks like there's a related patch for this for Linux distribution of MSBuild: https://github.com/mono/linux-packaging-msbuild/blob/1a3c0853f0dd98804f12d2e4ea6e5fc324675afd/nuget-fixup-2.patch\r\n\r\nMaybe Mono/Mac needs something similar?",
  "state": "OPEN",
  "createdAt": "2018-10-05T19:05:15Z",
  "updatedAt": "2024-02-21T16:32:40Z",
  "closedAt": null,
  "author": {
    "login": "rainersigwald"
  },
  "labels": [
    "backlog",
    "Area: Performance",
    "Mono",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "radical"
      },
      {
        "login": "KirillOsenkov"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "I'm seeing that the VSMac build spends 6 minutes in `_GetAllRestoreProjectPathItems` calling `_GenerateRestoreProjectPathWalk` recursively, producing a total of 8300 items in `_RestoreProjectPathItemsOutputs` (a)\r\n\r\n![image](https://user-images.githubusercontent.com/679326/100700397-2ec61380-3352-11eb-88c0-41a46ecbd954.png)\r\n\r\nI can tell that it uses a single solution-level Restore task that runs later (b), so the problem in this bug might be fixed by now, but there's still something extremely fishy going on. \r\n\r\nOn windows an equivalent also produces the a huge number of items, but it takes like 300ms.",
        "createdAt": "2020-12-01T05:24:16Z",
        "updatedAt": "2020-12-01T05:24:16Z",
        "author": {
          "login": "KirillOsenkov"
        }
      }
    ]
  }
}