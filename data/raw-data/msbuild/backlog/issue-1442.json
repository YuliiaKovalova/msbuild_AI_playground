{
  "number": 1442,
  "title": "ProjectRootElement.RawXml Never contains updated comments",
  "body": "As the title says, updated comments aren't reflected in the output of ProjectRootElement.RawXml. This causes https://github.com/dotnet/roslyn-project-system/issues/743. If there's a better api for getting what XML would be actually written out when saved, I'd be more than happy to use it, as RawXml seems to not be intended for that purpose.",
  "state": "CLOSED",
  "createdAt": "2016-12-06T02:41:35Z",
  "updatedAt": "2024-02-21T17:23:40Z",
  "closedAt": "2017-01-07T00:13:56Z",
  "author": {
    "login": "333fred"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "cdmihai"
      }
    ]
  },
  "milestone": {
    "title": "MSBuild 15.1 RC.3"
  },
  "comments": {
    "nodes": [
      {
        "body": "I think what you want to use is [`ProjectRootElement.Save(TextWriter)`](https://github.com/Microsoft/msbuild/blob/fa4c4f350617d20ad78c68e0a44d7be449e96260/src/XMakeBuildEngine/Construction/ProjectRootElement.cs#L1836).  The [whitespace preservation tests](https://github.com/Microsoft/msbuild/blob/fa4c4f350617d20ad78c68e0a44d7be449e96260/src/XMakeBuildEngine/UnitTestsPublicOM/Construction/WhiteSpacePreservation_Tests.cs), for example, call `Project.Save(TextWriter)`, which just forwards the call to the method on `ProjectRootElement`.",
        "createdAt": "2016-12-06T03:23:19Z",
        "updatedAt": "2016-12-06T03:23:19Z",
        "author": {
          "login": "dsplaisted"
        }
      },
      {
        "body": "`RawXml` actually calls Save under the hood with a StringWriter. I tried it anyway just to be sure, and it has the same behavior.",
        "createdAt": "2016-12-06T18:39:53Z",
        "updatedAt": "2016-12-06T18:39:53Z",
        "author": {
          "login": "333fred"
        }
      },
      {
        "body": "I suspect the root of the problem here is that the MSBuild side of the object tree doesn't know anything about comments, so if we walk it to update we won't see comment nodes.",
        "createdAt": "2016-12-06T18:42:56Z",
        "updatedAt": "2016-12-06T18:42:56Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Strange.  The whitespace preservation tests use the same APIs to save to validate that not only are comments preserved, but that the whitespace around them is preserved (if preserveWhitespace is enabled).  I suspect the difference lies in how the project is loaded.",
        "createdAt": "2016-12-06T21:01:40Z",
        "updatedAt": "2016-12-06T21:01:40Z",
        "author": {
          "login": "dsplaisted"
        }
      },
      {
        "body": "Could also be a post-clone problem.",
        "createdAt": "2016-12-06T21:04:25Z",
        "updatedAt": "2016-12-06T21:04:25Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@dsplaisted , `RawXml`, and by extension `Save`, are also not showing the whitespace.",
        "createdAt": "2016-12-07T00:18:24Z",
        "updatedAt": "2016-12-07T00:18:24Z",
        "author": {
          "login": "333fred"
        }
      },
      {
        "body": "@333fred / @dsplaisted \r\n\r\nCan you please write out a minimal repro that, using MSBuild's APIs shows this issue? I'm asking because the MSBuild APIs do not expose the xml comments, so I am curious how you get into this state. I would expect the editor to tear down and recreate the `Project` / `ProjectRootElement` objects after the contents got changed. Otherwise the underlying XmlNode object model does not get updated, hence `Save` does not reflect the updated comments, because the stale in-memory model does not have them.",
        "createdAt": "2016-12-14T01:41:16Z",
        "updatedAt": "2016-12-14T01:44:08Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "This is an issue with the way [project live reload](https://github.com/dotnet/roslyn-project-system/blob/e9c0f3c1d7e467e4b92309241ed71dec6b338ec2/src/Microsoft.VisualStudio.ProjectSystem.Managed.VS/ProjectSystem/VS/Reload/ReloadableProject.cs#L84) works. A new `ProjectRootElement` is created from the changed project on disk and then deep copied into the existing project. This is not an ideal solution as it is expensive and `DeepCopyFrom` doesn't seem to preserve a lot of the formatting (including comments). Also looks like it doesn't even update `RawXml`.\r\n\r\nAs @cdmihai has suggested in earlier discussions, we should swap the `ProjectRootElement` out with the newly loaded one. Unfortunately, the only way I have found to \"swap\" out the elements would be via `ProjectCollection.UnloadProject`, which means unloading all `Project` objects (one per CPS ConfiguredProject) that reference the `ProjectRootElement`. This is not feasible for CPS. Instead I think `ProjectCollection` should offer an API to swap out `ProjectRootElement`. It can then update all necessary `Project.Xml` to point to the new xml. This is fine to perform in CPS as it will happen within a write lock, so no one else should be holding references to these objects at the time. Another option is to have `ProjectRootElement` be able to re-build itself from new xml.",
        "createdAt": "2016-12-15T00:13:29Z",
        "updatedAt": "2016-12-15T00:13:29Z",
        "author": {
          "login": "jviau"
        }
      }
    ]
  }
}