{
  "number": 3990,
  "title": "Setting PackageLocation causes build to slow considerably",
  "body": "I'm not really sure where is the best place to ask this question. Feel free to close this issue if this is not the appropriate place.\r\n\r\nI have a proj file with something like this:\r\n```\r\n<ItemGroup>\r\n      <_WebProjectsToBuild Include=\"@(WebProjectsToBuild)\">\r\n        <TargetToBuild>Build</TargetToBuild>\r\n        <AdditionalProperties>DeployOnBuild=true;\r\n          DeployTarget=Package;\r\n          WebPublishMethod=Package;\r\n          PackageAsSingleFile=true;\r\n          AutoParameterizationWebConfigConnectionStrings=false;\r\n          GenerateSampleDeployScript=false;\r\n          SkipInvalidConfigurations=true;\r\n          IncludeSetACLProviderOnDestination=false;\r\n          _PackageTempDir=$(OutputRoot)\\%(Filename);\r\n          PackageLocation=$(WebPublishDir)\\%(Filename).zip;\r\n          EnableUpdatePacakgePath=True</AdditionalProperties>\r\n      </_WebProjectsToBuild>\r\n    </ItemGroup>\r\n\r\n    <MSBuild Projects=\"@(_WebProjectsToBuild)\"\r\n             BuildInParallel=\"true\"\r\n             ContinueOnError=\"false\"\r\n             Targets=\"%(TargetToBuild)\"\r\n             Properties=\"Configuration=$(Configuration);\" />\r\n```\r\nTo my surprise specifying _PackageTempDir or PackageLocation causes the build to run much slower. On my dev machine (which is very, very fast) it takes roughly 45 sec longer. On our build server, which is quite a bit slower, it takes almost 5 minutes longer. Surely specifying an alternative PackageLocation should not add such a delay? Any ideas?",
  "state": "CLOSED",
  "createdAt": "2018-12-06T06:25:48Z",
  "updatedAt": "2024-02-21T17:10:08Z",
  "closedAt": "2019-07-24T20:53:02Z",
  "author": {
    "login": "jachin84"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Discussion"
  },
  "comments": {
    "nodes": [
      {
        "body": "Can you capture diagnostic-level logs of both build scenarios and post the performance summary portions, especially `Project Performance Summary`?",
        "createdAt": "2018-12-07T18:23:15Z",
        "updatedAt": "2018-12-07T18:23:15Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Is there a private mechanism by which I can share the logs?",
        "createdAt": "2018-12-08T21:10:34Z",
        "updatedAt": "2018-12-08T21:10:34Z",
        "author": {
          "login": "jachin84"
        }
      },
      {
        "body": "Yes: file [Visual Studio feedback](https://developercommunity.visualstudio.com/content/problem/post.html?space=8) and add attachments there. When I do so, I see this text:\r\n\r\n> Your attachments will be private to Microsoft. Your user name, title, and description will be public on Developer Community.\r\n> For more on privacy, see the Microsoft Privacy Statement.\r\n",
        "createdAt": "2018-12-11T20:16:50Z",
        "updatedAt": "2018-12-11T20:16:50Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "(and then come back here and link to the feedback item so we don't have to wait for routing, please)",
        "createdAt": "2018-12-11T20:17:25Z",
        "updatedAt": "2018-12-11T20:17:25Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Done => https://developercommunity.visualstudio.com/content/problem/405703/moving-packagetempdir-cause-build-to-run-slower.html.\r\n\r\nI added binlogs for both the slow and fast run.\r\n",
        "createdAt": "2018-12-12T02:16:09Z",
        "updatedAt": "2018-12-12T02:16:09Z",
        "author": {
          "login": "jachin84"
        }
      },
      {
        "body": "Thank you! From that log, I can see the problem: you're setting `_PackageTempDir` as a global property for _only a subset of projects_. Those projects have `ProjectReference`s that point to other projects, and when those references are followed, the `_PackageTempDir` global property is inherited. The MSBuild engine treats projects with distinct global properties as separate things (this is so you can for instance build Debug and Release of the same project simultaneously), which causes many/most of your projects to be built multiple times.\r\n\r\nThere are a few ways to avoid this:\r\n\r\n1. Set `_PackageTempDir` within individual projects, rather than as a global property for those projects.\r\n1. Set the `_PackageTempDir` property uniformly so that all projects have the same value for it.\r\n1. Do that by setting a global property on the initial build, for instance with `msbuild.exe /p:_PackageTempDir=whatever`\r\n1. Take care to _avoid_ inheriting the global property you wish to set when following `ProjectReference`s, by setting the `UndefineProperties` metadata to `_PackageTempDir` _for all `ProjectReference` items in your tree (easiest via an `ItemDefinitionGroup` in a `Directory.Build.props`).\r\n\r\nAlso, side note: this build looks big enough that it would be worth spending some time making sure multiproc builds work for you; that could speed up builds significantly.",
        "createdAt": "2018-12-12T16:39:14Z",
        "updatedAt": "2018-12-12T16:39:14Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Thanks! I really appreciate your feedback. Let me see if I understand you correctly. By setting `_PackageTempDir` via the `AdditionalProperties` metadata those properties become global properties which are in turn inherited by any referenced projects. \r\n\r\nI am building Web, Console, Service, Desktop and Test projects all in one go. Most of my project will at some point reference a Global project which I'll use as an example. If I build Web projects with a certain set of `AdditionalProperties` and then Console projects with a slightly different set of `AdditionalProperties` this will eventually lead to the Global project being built many times. I am correct in say this is referred to batching?\r\n\r\nWhat I'm finding a little confusing is my Web projects always have a different set of global properties but it's only when the `_PackageTempDir` property is set that things start slowing down.\r\n\r\nAll projects that get built get a standard set of metadata like so:\r\n```\r\n<ItemDefinitionGroup>\r\n    <ProjectsToBuild>\r\n      <Configuration>$(Configuration)</Configuration>\r\n      <Platform>$(Platform)</Platform>\r\n      <TargetToBuild>Build</TargetToBuild>\r\n    </ProjectsToBuild>\r\n  </ItemDefinitionGroup>\r\n```\r\nWeb projects are update with a different `Target/AdditionalProperties`. \r\n```\r\n<ItemGroup>\r\n    <ProjectsToBuild Include=\"@(WebProjectsToBuild)\">\r\n      <TargetToBuild>PipelinePreDeployCopyAllFilesToOneFolder</TargetToBuild>\r\n      <AdditionalProperties>AutoParameterizationWebConfigConnectionStrings=false;</AdditionalProperties>\r\n    </ProjectsToBuild>\r\n    <ProjectsToBuild Include=\"@(ConsoleProjectToBuild);@(ServicesToBuild)\" />\r\n  </ItemGroup>\r\n```\r\n\r\nIn any case `_PackageTempDir` is only relevant for web projects so I suppose these is no harm setting it globally. I've also got a mechanism to add it only to the web projects via an extension point that will import `ProjectName.target` in my build folder automatically. I'll experiment with what works best.\r\n\r\nWhat is UndefineProperties metadata? I can't find any documentation on it anywhere.",
        "createdAt": "2018-12-13T12:07:31Z",
        "updatedAt": "2018-12-13T12:07:31Z",
        "author": {
          "login": "jachin84"
        }
      },
      {
        "body": "> If I build Web projects with a certain set of `AdditionalProperties` and then Console projects with a slightly different set of `AdditionalProperties` this will eventually lead to the Global project being built many times. I am correct in say this is referred to batching?\r\n\r\nNo, this is distinct from [batching](https://docs.microsoft.com/en-us/visualstudio/msbuild/msbuild-batching?view=vs-2017), which is when a single target or task runs multiple times because of distinct metadata.\r\n\r\nThis is the MSBuild engine's deduplication of projects to build, which isn't super well documented but is mentioned [here](https://docs.microsoft.com/en-us/visualstudio/msbuild/using-multiple-processors-to-build-projects?view=vs-2017#project-to-project-references) a bit.\r\n\r\nThe idea is that a project should only be built _once_--just because you have references from `app1.csproj` and `app2.csproj` to `utilities.csproj` doesn't mean that `utilities.dll` should be built twice. But that rule is a bit too strict; it doesn't take into account various types of project configuration, like `Configuration` (Debug/Release), `Platform` (x86/x64/anyCPU), or `TargetFramework` (netstandard2.0/net472). On each of those, you might need to build the same project multiple times with different configurations. MSBuild's approach to this is to treat each (Project path, set of global properties) as distinct.\r\n\r\nThis approach works but causes the subtle problem you're seeing: if a project is built with distinct global properties but doesn't actually produce different output, it will be built more than once. In `/m` builds, this is a race condition that can fail builds; in single-proc builds it usually just wastes time.\r\n\r\n> What I'm finding a little confusing is my Web projects always have a different set of global properties but it's only when the `_PackageTempDir` property is set that things start slowing down.\r\n\r\nI think this is because you're setting this new metadatum to something **unique per WebProject** with `_PackageTempDir=$(OutputRoot)\\%(Filename)`. That means that instead of one additional build for each project (because of the `AutoParameterizationWebConfigConnectionStrings` property), you now get N, starting in a tree from the N web projects.\r\n\r\nLooking through the logs you shared, ShortBuild built a total of 827 projects, while LongBuild built 1658 projects. Both had 138 unique project paths.\r\n\r\n> What is UndefineProperties metadata? I can't find any documentation on it anywhere.\r\n\r\nIt is extremely underdocmented at the moment. I'm writing documentation but haven't finished. Current draft is at https://gist.github.com/rainersigwald/1fbd21a24a41b9b7c6204cb9cfcbb1cf.\r\n",
        "createdAt": "2018-12-13T16:45:21Z",
        "updatedAt": "2018-12-13T16:51:21Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Ah of course, I forgot about the `%(Filename)` at the end. That\u2019s a really good explanation, thank you.\r\n\r\nThis also explain why I\u2019ve not been able to get parallel builds to work consistently. Is there any way in the logs to easily identify the duplicate building as a result of deduplication see projects as distinct?",
        "createdAt": "2018-12-13T21:00:43Z",
        "updatedAt": "2018-12-13T21:00:43Z",
        "author": {
          "login": "jachin84"
        }
      },
      {
        "body": "> Is there any way in the logs to easily identify the duplicate building as a result of deduplication see projects as distinct?\r\n\r\nIt's fairly difficult in the standard text logs. I have a logger that can help: https://github.com/rainersigwald/ParallelBuildDebuggingLogger\r\n\r\nIn its output, lines that say `Reentering project` are deduplicated, while lines that say `Project {} built by project` are new instances.\r\n\r\nThis logger is very useful to me, the person who wrote it. If you try it, I'd appreciate feedback; I know it's not intuitive to use and entirely undocumented.",
        "createdAt": "2018-12-13T21:13:30Z",
        "updatedAt": "2018-12-13T21:13:30Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Nice idea. I modified it a bit to produce a file I could drop into Graphziv. Any vertices with more than one edge are project being build twice. I think...\r\n\r\nVery surprising how many projects are built a couple of times. \r\n\r\nI\u2019m starting to think that using a single msbuild task do build web/console/service/desktop projects just isn\u2019t the way to go. There are too many properties that differ. I\u2019m trying to think of a way to pass properties to the projects without making them global.",
        "createdAt": "2018-12-14T21:53:54Z",
        "updatedAt": "2018-12-14T21:53:54Z",
        "author": {
          "login": "jachin84"
        }
      },
      {
        "body": "Ok so this seems a little odd. I am using the following in a Directory.Build.props which fails every time because of concurrency issues.\r\n\r\n```\r\n  <ItemDefinitionGroup>\r\n    <ProjectReference>\r\n      <UndefineProperties>\r\n        _PackageTempDir;AutoParameterizationWebConfigConnectionStrings\r\n      </UndefineProperties>\r\n    </ProjectReference>\r\n  </ItemDefinitionGroup>\r\n```\r\n\r\nIf I do the following it work:\r\n```\r\n  <ItemDefinitionGroup>\r\n    <ProjectReference>\r\n      <UndefineProperties>_PackageTempDir;AutoParameterizationWebConfigConnectionStrings</UndefineProperties>\r\n    </ProjectReference>\r\n  </ItemDefinitionGroup>\r\n```\r\n\r\nNot the only difference is splitting `UndefineProperties` on different lines.",
        "createdAt": "2018-12-17T12:12:32Z",
        "updatedAt": "2018-12-17T12:13:17Z",
        "author": {
          "login": "jachin84"
        }
      },
      {
        "body": "> Not the only difference is splitting `UndefineProperties` on different lines.\r\n\r\nNice find! I filed Microsoft/msbuild#4014 to track.\r\n\r\n> I\u2019m trying to think of a way to pass properties to the projects without making them global.\r\n\r\nDo you really need to pass them? The usual MSBuild approach to this sort of problem is either:\r\n\r\n* Recompute them identically in each project, or\r\n* Compute them in a single project and ask for the results via MSBuild task in other projects.\r\n\r\nOf course if you opt for the latter you have to be super careful about global property inheritance again.",
        "createdAt": "2018-12-17T15:21:20Z",
        "updatedAt": "2018-12-17T15:21:20Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Thanks again for your help. Can you elaborate at all? I suspect there is a large gap in my understanding when it comes to building many projects at once.\r\n\r\n> Recompute them identically in each project\r\n\r\nWhat do you mean by recompute? I am assuming you mean set the required properties in each project directly avoiding the need to use Properties/AdditionalProperties that results in global properties.\r\n\r\n> Compute them in a single project and ask for the results via MSBuild task in other projects.\r\n\r\nAgain not really sure what you mean here? \r\n\r\n\r\n",
        "createdAt": "2018-12-18T00:31:08Z",
        "updatedAt": "2018-12-18T00:31:35Z",
        "author": {
          "login": "jachin84"
        }
      },
      {
        "body": "Feel free to close this issue. I'm still curious about the two questions above if you have a moment to provide more details?",
        "createdAt": "2018-12-28T22:59:03Z",
        "updatedAt": "2018-12-28T22:59:03Z",
        "author": {
          "login": "jachin84"
        }
      },
      {
        "body": "> > Recompute them identically in each project\r\n> \r\n> What do you mean by recompute? I am assuming you mean set the required properties in each project directly avoiding the need to use Properties/AdditionalProperties that results in global properties.\r\n\r\nYes, that's what I mean. If you set the properties in a common include file (maybe a `Directory.Build.props`), you can use the same definition for every project without using any global properties.\r\n\r\nThings that may help with this approach:\r\n\r\n* `$(MSBuildThisPathDirectory)` and `$([MSBuild]::GetPathOfFileAbove())` can help anchor relative paths to one place, regardless of \r\n* It's usually OK to define custom properties in more projects than necessary; unused properties are ignored so you can define things that are opted into only somewhere (but be careful defining properties that are directly used by common targets).\r\n\r\n> > Compute them in a single project and ask for the results via MSBuild task in other projects.\r\n> \r\n> Again not really sure what you mean here?\r\n\r\nThis is much more complicated, but I'm thinking something along the lines of\r\n\r\n```xml\r\n<Target Name=\"GetCentralProperties\" BeforeTargets=\"BeforeBuild\">\r\n  <MSBuild Project=\"CentralComputationLocation.proj\"\r\n           Targets=\"ExpensiveCalculation\">\r\n    <Output TaskParameter=\"TargetOutputs\"  \r\n            PropertyName=\"CentrallyComputedProperty\" />\r\n  </MSBuild>\r\n</Target>\r\n```",
        "createdAt": "2019-01-03T18:34:19Z",
        "updatedAt": "2019-01-03T18:34:19Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}