{
  "number": 4521,
  "title": "Microsoft.Build 16.0 package unavailable to netstandard libraries",
  "body": "The [Microsoft.Build NuGet Package](https://www.nuget.org/packages/Microsoft.Build/) has always contained an appropriate netstandard version of the library since the beginning, however the most recent release [16.0.461](https://www.nuget.org/packages/Microsoft.Build/16.0.461) only contains net472 and netcoreapp2.1 libraries. This is a problem for any netstandard tasks that are evaluating Projects.\r\n\r\nIs there a reason netstandard2.0 wasn't included?",
  "state": "CLOSED",
  "createdAt": "2019-07-17T17:08:16Z",
  "updatedAt": "2024-02-21T17:07:50Z",
  "closedAt": "2019-07-22T17:22:14Z",
  "author": {
    "login": "mletterle"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "There is no version of MSBuild 16 that runs on every platform that supports `netstandard2.0`, because it uses new (`netcoreapp2.1`-specific) functionality when built in \"core\" mode.\r\n\r\nIt's unfortunate but unavoidable (AFAIK) that this requires downstream libraries to multitarget, but it has the nice property that the problem occurs at build time, rather than at run time.",
        "createdAt": "2019-07-22T17:22:14Z",
        "updatedAt": "2019-07-22T17:22:14Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Is there a reason project parsing requires netcoreapp specific functionality?",
        "createdAt": "2019-07-22T17:28:17Z",
        "updatedAt": "2019-07-22T17:28:17Z",
        "author": {
          "login": "mletterle"
        }
      },
      {
        "body": "The MSBuild API doesn't draw a distinction between evaluating projects and building them, so even if evaluation succeeded in some cases, we wouldn't want to advertise netstandard support for the overall API.\r\n\r\nMSBuild runs a ton of code during project evaluation, including a ton of stuff around paths and file I/O that changed in the 2.1 timeframe. I would not expect evaluation to succeed for all projects on the core 2.0 runtime.",
        "createdAt": "2019-07-22T17:43:37Z",
        "updatedAt": "2019-07-22T17:43:37Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "(And more importantly, we don't _test_ that, so we shouldn't make promises about it working.)",
        "createdAt": "2019-07-22T17:44:06Z",
        "updatedAt": "2019-07-22T17:44:06Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Thanks!",
        "createdAt": "2019-07-22T18:15:36Z",
        "updatedAt": "2019-07-22T18:15:36Z",
        "author": {
          "login": "mletterle"
        }
      },
      {
        "body": "Oh, one followup @rainersigwald, wouldn't a library that uses project evaluation (like say a task library or somesuch), be loaded into the specific platform runtime? There's no reason a \"reference assembly\" couldn't be netstandard?",
        "createdAt": "2019-07-23T13:17:46Z",
        "updatedAt": "2019-07-23T13:17:46Z",
        "author": {
          "login": "mletterle"
        }
      }
    ]
  }
}