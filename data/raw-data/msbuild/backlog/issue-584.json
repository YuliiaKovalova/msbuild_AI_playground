{
  "number": 584,
  "title": "MSBuild can report the wrong assembly path when loading a task",
  "body": "MSBuild diagnostic logs report that a task was loaded from an assembly at a specific path, but the task can be loaded from a different assembly if that assembly is found in DEVPATH first. It appears that MSBuild is not taking DEVPATH into consideration, so it assumes the assembly location is going to be the relative to the directory of the project file that has the <UsingTask> declaration. I believe the exact code in question can be seen [here](https://github.com/Microsoft/msbuild/blob/master/src/XMakeBuildEngine/Instance/TaskRegistry.cs#L302-305). I ended up spending a couple hours investigating why I was getting a certain build error because I assumed that the path listed in the logs was accurate. I only discovered it was wrong after exhausting all other possibilities and turning on fusion logging to confirm.\n\nDetails/example:\nI\u2019m using a packaged version of msbuild which contains msbuild.exe and the targets/tasks. MSBuild.exe lives at _E:\\packages\\MsBuild\\v14.0\\Bin\\MSBuild.exe_, and _E:\\packages\\MsBuild\\v14.0\\Bin\\Microsoft.Common.tasks_ contains:\n\n```\n<UsingTask TaskName=\"Microsoft.CodeAnalysis.BuildTasks.Vbc\" AssemblyFile=\"Microsoft.Build.Tasks.CodeAnalysis.dll\" Condition=\"'$(MSBuildAssemblyVersion)' != ''\" />\n```\n\n_E:\\packages\\MsBuild\\v14.0\\Bin\\Microsoft.Build.Tasks.CodeAnalysis.dll_ is the expected file where the Vbc task lives, and the MSBuild diagnostic log says that it is using the assembly from that location:\n\n```\nUsing \"Vbc\" task from assembly \"e:\\packages\\MsBuild\\v14.0\\bin\\Microsoft.Build.Tasks.CodeAnalysis.dll\".\n```\n\nUnfortunately, due to DEVPATH being set up in my environment, the dll is actually loaded from a different location, and msbuild ends up reporting the wrong path. Fusion logs:\n\n```\n*** Assembly Binder Log Entry  (4/19/2016 @ 2:59:40 PM) ***\n\nThe operation was successful.\nBind result: hr = 0x0. The operation completed successfully.\n\nAssembly manager loaded from:  C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\clr.dll\nRunning under executable  e:\\packages\\MsBuild\\v14.0\\bin\\MSBuild.exe\n--- A detailed error log follows. \n\n=== Pre-bind state information ===\nLOG: Where-ref bind. Location = e:\\packages\\MsBuild\\v14.0\\bin\\Microsoft.Build.Tasks.CodeAnalysis.dll\nLOG: Appbase = file:///e:/packages/MsBuild/v14.0/bin/\nLOG: DEVPATH = D:\\customDevPath;\nLOG: Initial PrivatePath = NULL\nLOG: Dynamic Base = NULL\nLOG: Cache Base = NULL\nLOG: AppName = MSBuild.exe\nCalling assembly : (Unknown).\n===\nLOG: This bind starts in LoadFrom load context.\nWRN: Native image will not be probed in LoadFrom context. Native image will only be probed in default load context, like with Assembly.Load().\nLOG: Using application configuration file: e:\\packages\\MsBuild\\v14.0\\bin\\MSBuild.exe.Config\nLOG: Using host configuration file: \nLOG: Using machine configuration file from C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\config\\machine.config.\nLOG: Found assembly in DEVOVERRIDE path D:\\customDevPath\\Microsoft.Build.Tasks.CodeAnalysis.DLL\nLOG: Switch from LoadFrom context to default context.\n```\n",
  "state": "OPEN",
  "createdAt": "2016-04-19T23:43:47Z",
  "updatedAt": "2024-02-21T16:38:42Z",
  "closedAt": null,
  "author": {
    "login": "jkeech"
  },
  "labels": [
    "Area: Debuggability",
    "Area: Logging",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "I looked into this a long time ago but evidently never reported back.\r\n\r\nThe problem is that we log where we will try to load the assembly from, \r\n\r\nhttps://github.com/Microsoft/msbuild/blob/647bd0fa090e7518245ab2b86601aef92c6724ec/src/Build/Instance/TaskRegistry.cs#L430\r\n\r\nhttps://github.com/Microsoft/msbuild/blob/6851538897f5d7b08024a6d8435bc44be5869e53/src/Build/Instance/TaskFactories/AssemblyTaskFactoryInstance.cs#L68-L75\r\n\r\nbefore it's loaded\r\n\r\nhttps://github.com/Microsoft/msbuild/blob/6851538897f5d7b08024a6d8435bc44be5869e53/src/Build/Instance/TaskFactories/AssemblyTaskFactoryInstance.cs#L145-L150\r\n\r\nand the loader has a complex set of behaviors that sometimes does something else entirely.\r\n\r\nI don't remember the details but it was painful to change the logging to happen only after the load. That's the right thing to do, though--report the path of the assembly that the loaded, in-memory type reports.",
        "createdAt": "2018-01-25T15:11:27Z",
        "updatedAt": "2018-01-25T15:11:27Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I may have a repro of this.  I want to confirm this is the same issue.\r\n\r\nI'm trying to load a DLL which can't be found.  I enabled Fusion logging and found that it was not in any of the DEVPATH search paths.  I don't want to load it from the GAC, so I'm not concerned I can't find it there.  The missing assembly is Microsoft.VisualStudio.CodeAnalysis.Sdk.dll.  This is causing build failures when Code Analysis is enabled in the command prompt MSBuild (not in VS IDE).\r\n\r\nThe path where the DLL is located is here:\r\n\r\n```\r\nF:\\CoreXtCache\\.A\\MsBuild.Corext._zhIG90VQlM6jUBQEd5j0Q\\Extensions\\Microsoft\\VisualStudio\\v15.0\\CodeAnalysis\r\n```\r\n\r\nI added the path where the DLL is and confirmed in the MSBuild detailed log that the property was changed:\r\n\r\n```\r\nProperty reassignment: $(DEVPATH)=\";F:\\CoreXtCache\\.A\\MsBuild.Corext._zhIG90VQlM6jUBQEd5j0Q\\v15.0\\bin;F:\\CoreXtCache\\.A\\MsBuild.Corext._zhIG90VQlM6jUBQEd5j0Q\\Extensions\\Override\\etc\\TaskCopy;F:\\CoreXtCache\\VisualStudio.Sdk.Corext.14.0.23107.3\\IDE;F:\\CoreXtCache\\.A\\MsBuild.Corext._zhIG90VQlM6jUBQEd5j0Q\\Extensions\\Microsoft\\VisualStudio\\v15.0\\CodeAnalysis\" (previous value: \";F:\\CoreXtCache\\.A\\MsBuild.Corext._zhIG90VQlM6jUBQEd5j0Q\\v15.0\\bin;F:\\CoreXtCache\\.A\\MsBuild.Corext._zhIG90VQlM6jUBQEd5j0Q\\Extensions\\Override\\etc\\TaskCopy;F:\\CoreXtCache\\VisualStudio.Sdk.Corext.14.0.23107.3\\IDE\") at F:\\DS_Main\\Tools\\scopas\\Extensions\\Scopas.CSharp.props (67,5)\r\n```\r\n\r\nHowever, the **Extensions** subfolder goes missing from the path by the time it gets to Fusion:\r\n\r\n```\r\nLOG: Did not find assembly in DEVOVERRIDE path F:\\CoreXtCache\\.A\\MsBuild.Corext._zhIG90VQlM6jUBQEd5j0Q\\v15.0\\bin\r\nLOG: Did not find assembly in DEVOVERRIDE path F:\\CoreXtCache\\.A\\MsBuild.Corext._zhIG90VQlM6jUBQEd5j0Q\\Extensions\\Override\\etc\\TaskCopy\r\nLOG: Did not find assembly in DEVOVERRIDE path F:\\CoreXtCache\\VisualStudio.Sdk.Corext.14.0.23107.3\\IDE\r\nLOG: GAC Lookup was unsuccessful.\r\nLOG: Attempting download of new URL file:///F:/CoreXtCache/.A/MsBuild.Corext._zhIG90VQlM6jUBQEd5j0Q/Microsoft/VisualStudio/v15.0/CodeAnalysis/Microsoft.VisualStudio.CodeAnalysis.Sdk.dll.\r\nLOG: All probing URLs attempted and failed.\r\n```\r\n\r\nIs this related to this issue or is  this something different entirely?",
        "createdAt": "2018-09-27T15:44:18Z",
        "updatedAt": "2018-09-27T15:44:18Z",
        "author": {
          "login": "clisc"
        }
      },
      {
        "body": "@clisc, I think your issue is different. I suspect this is because you are only updating the DEVPATH _property_ in MSBuild, not actually updating the _environment variable_ which the CLR is looking at. You'll need to figure out which process is trying to load that assembly and then make sure that process is spawned with an environment block containing the values you want.",
        "createdAt": "2018-09-27T16:13:30Z",
        "updatedAt": "2018-09-27T16:13:30Z",
        "author": {
          "login": "jkeech"
        }
      },
      {
        "body": "Thanks, this will probably help me fix the issue from another angle.  I have some questions though:\r\n\r\n\r\n  1.  Is DEVPATH not designed to be used as an MSBUILD property?\r\n  2.  If not, why would it still recognize my path?\r\n  3.  Finally, since it did recognize my path, why would it modify it and cut one of the subdirectories out?\r\n\r\nSeems like very odd behavior.\r\n\r\nIn the meantime, I\u2019ll run with your suggestion and modify the environment variable instead.\r\n\r\nThanks,\r\nCliff\r\n",
        "createdAt": "2018-09-27T16:17:39Z",
        "updatedAt": "2018-09-27T16:41:17Z",
        "author": {
          "login": "clisc"
        }
      },
      {
        "body": "@clisc, DEVPATH is not an MSBuild feature -- it is a .NET/CLR feature. Here's some documentation about it: https://docs.microsoft.com/en-us/dotnet/framework/configure-apps/how-to-locate-assemblies-by-using-devpath. In general, DEVPATH causes a bunch of problems (such as not respecting assembly version), so it's not recommended to use in most circumstances.",
        "createdAt": "2018-09-27T16:21:49Z",
        "updatedAt": "2018-09-27T16:21:49Z",
        "author": {
          "login": "jkeech"
        }
      },
      {
        "body": "Great thanks!",
        "createdAt": "2018-09-27T16:42:00Z",
        "updatedAt": "2018-09-27T16:42:00Z",
        "author": {
          "login": "clisc"
        }
      }
    ]
  }
}