{
  "number": 8595,
  "title": "[Bug]: msbuild binary logger generating excessive memory spike at end of build ",
  "body": "### Issue Description\n\nWhen running `msbuild /t:restore /bl` on a large repo we are running out of memory at the end of the build on a 64GB machine. We see a large spike in memory after the console output shows the build as complete, before the process terminates with an out of memory exception.\r\n\r\nThis is a regression for as we started seeing this behavior in 17.6 preview, but we did not see this behavior in VS 17.5.\r\n\r\n\r\n\r\n\n\n### Steps to Reproduce\n\nWe have a large repo.\n\n### Expected Behavior\n\nExpect that we can complete restore build with less than 64GB of memory, we do not see a memory spike with VS 17.5.\r\n\r\nMSBuild version 17.5.1+f6fdcf537 for .NET Framework\r\n![Memory2](https://user-images.githubusercontent.com/15384700/227361811-2f95e072-dbc2-4799-9f04-e95ff2f1baf0.jpg)\n\n### Actual Behavior\n\nWe are seeing a huge 30GB memory spike after the build completes and an out of memory exception.\r\n\r\nMSBuild version 17.6.0-preview-23164-01+18fe51042 for .NET Framework\r\n\r\n![Memory1](https://user-images.githubusercontent.com/15384700/227348869-81953c95-357d-4ca7-9e11-7e6f4d7fb9bc.jpg)\r\n\r\n```\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:09:43.47\r\nMSBUILD : error MSB1025: An internal failure occurred while running MSBuild.\r\nMicrosoft.Build.Framework.InternalErrorException: MSB0001: Internal MSBuild Error: Throwing from logger shutdown\r\n=============\r\nSystem.OutOfMemoryException: Exception of type 'System.OutOfMemoryException' was thrown.\r\n   at System.IO.MemoryStream.set_Capacity(Int32 value)\r\n   at System.IO.MemoryStream.EnsureCapacity(Int32 value)\r\n   at System.IO.MemoryStream.Write(Byte[] buffer, Int32 offset, Int32 count)\r\n   at System.IO.Compression.ZipArchiveEntry.WriteCentralDirectoryFileHeader()\r\n   at System.IO.Compression.ZipArchive.WriteFile()\r\n   at System.IO.Compression.ZipArchive.Dispose(Boolean disposing)\r\n   at Microsoft.Build.Logging.ProjectImportsCollector.Close(Boolean closeStream)\r\n   at Microsoft.Build.Logging.ProjectImportsCollector.GetAllBytes()\r\n   at Microsoft.Build.Logging.BinaryLogger.Shutdown()\r\n   at Microsoft.Build.BackEnd.Logging.LoggingService.ShutdownLogger(ILogger logger)\r\n   at Microsoft.Build.BackEnd.Logging.LoggingService.ShutdownComponent()\r\n   at Microsoft.Build.Evaluation.ProjectCollection.ShutDownLoggingService()\r\n\r\n ---> System.OutOfMemoryException: Exception of type 'System.OutOfMemoryException' was thrown.\r\n   at System.IO.MemoryStream.set_Capacity(Int32 value)\r\n   at System.IO.MemoryStream.EnsureCapacity(Int32 value)\r\n   at System.IO.MemoryStream.Write(Byte[] buffer, Int32 offset, Int32 count)\r\n   at System.IO.Compression.ZipArchiveEntry.WriteCentralDirectoryFileHeader()\r\n   at System.IO.Compression.ZipArchive.WriteFile()\r\n   at System.IO.Compression.ZipArchive.Dispose(Boolean disposing)\r\n   at Microsoft.Build.Logging.ProjectImportsCollector.Close(Boolean closeStream)\r\n   at Microsoft.Build.Logging.ProjectImportsCollector.GetAllBytes()\r\n   at Microsoft.Build.Logging.BinaryLogger.Shutdown()\r\n   at Microsoft.Build.BackEnd.Logging.LoggingService.ShutdownLogger(ILogger logger)\r\n   at Microsoft.Build.BackEnd.Logging.LoggingService.ShutdownComponent()\r\n   at Microsoft.Build.Evaluation.ProjectCollection.ShutDownLoggingService()\r\n   --- End of inner exception stack trace ---\r\n   at Microsoft.Build.Shared.ErrorUtilities.ThrowInternalError(String message, Exception innerException, Object[] args)\r\n   at Microsoft.Build.Evaluation.ProjectCollection.ShutDownLoggingService()\r\n   at Microsoft.Build.Evaluation.ProjectCollection.Dispose(Boolean disposing)\r\n   at Microsoft.Build.CommandLine.MSBuildApp.BuildProject(String projectFile, String[] targets, String toolsVersion, Dictionary`2 globalProperties, Dictionary`2 restoreProperties, ILogger[] loggers, LoggerVerbosity verbosity, DistributedLoggerRecord[] distributedLoggerRecords, Boolean needToValidateProject, String schemaFile, Int32 cpuCount, Boolean enableNodeReuse, TextWriter preprocessWriter, TextWriter targetsWriter, Boolean detailedSummary, ISet`1 warningsAsErrors, ISet`1 warningsNotAsErrors, ISet`1 warningsAsMessages, Boolean enableRestore, ProfilerLogger profilerLogger, Boolean enableProfiler, Boolean interactive, ProjectIsolationMode isolateProjects, GraphBuildOptions graphBuildOptions, Boolean lowPriority, String[] inputResultsCaches, String outputResultsCache, String commandLine)\r\n   at Microsoft.Build.CommandLine.MSBuildApp.Execute(String commandLine)\r\n\r\nUnhandled Exception: Microsoft.Build.Framework.InternalErrorException: MSB0001: Internal MSBuild Error: Throwing from logger shutdown\r\n=============\r\nSystem.OutOfMemoryException: Exception of type 'System.OutOfMemoryException' was thrown.\r\n   at System.IO.MemoryStream.set_Capacity(Int32 value)\r\n   at System.IO.MemoryStream.EnsureCapacity(Int32 value)\r\n   at System.IO.MemoryStream.Write(Byte[] buffer, Int32 offset, Int32 count)\r\n   at System.IO.Compression.ZipArchiveEntry.WriteCentralDirectoryFileHeader()\r\n   at System.IO.Compression.ZipArchive.WriteFile()\r\n   at System.IO.Compression.ZipArchive.Dispose(Boolean disposing)\r\n   at Microsoft.Build.Logging.ProjectImportsCollector.Close(Boolean closeStream)\r\n   at Microsoft.Build.Logging.ProjectImportsCollector.GetAllBytes()\r\n   at Microsoft.Build.Logging.BinaryLogger.Shutdown()\r\n   at Microsoft.Build.BackEnd.Logging.LoggingService.ShutdownLogger(ILogger logger)\r\n   at Microsoft.Build.BackEnd.Logging.LoggingService.ShutdownComponent()\r\n   at Microsoft.Build.Evaluation.ProjectCollection.ShutDownLoggingService()\r\n\r\n ---> System.OutOfMemoryException: Exception of type 'System.OutOfMemoryException' was thrown.\r\n   at System.IO.MemoryStream.set_Capacity(Int32 value)\r\n   at System.IO.MemoryStream.EnsureCapacity(Int32 value)\r\n   at System.IO.MemoryStream.Write(Byte[] buffer, Int32 offset, Int32 count)\r\n   at System.IO.Compression.ZipArchiveEntry.WriteCentralDirectoryFileHeader()\r\n   at System.IO.Compression.ZipArchive.WriteFile()\r\n   at System.IO.Compression.ZipArchive.Dispose(Boolean disposing)\r\n   at Microsoft.Build.Logging.ProjectImportsCollector.Close(Boolean closeStream)\r\n   at Microsoft.Build.Logging.ProjectImportsCollector.GetAllBytes()\r\n   at Microsoft.Build.Logging.BinaryLogger.Shutdown()\r\n   at Microsoft.Build.BackEnd.Logging.LoggingService.ShutdownLogger(ILogger logger)\r\n   at Microsoft.Build.BackEnd.Logging.LoggingService.ShutdownComponent()\r\n   at Microsoft.Build.Evaluation.ProjectCollection.ShutDownLoggingService()\r\n   --- End of inner exception stack trace ---\r\n   at Microsoft.Build.Shared.ErrorUtilities.ThrowInternalError(String message, Exception innerException, Object[] args)\r\n   at Microsoft.Build.Evaluation.ProjectCollection.ShutDownLoggingService()\r\n   at Microsoft.Build.Evaluation.ProjectCollection.Dispose(Boolean disposing)\r\n   at Microsoft.Build.CommandLine.MSBuildApp.BuildProject(String projectFile, String[] targets, String toolsVersion, Dictionary`2 globalProperties, Dictionary`2 restoreProperties, ILogger[] loggers, LoggerVerbosity verbosity, DistributedLoggerRecord[] distributedLoggerRecords, Boolean needToValidateProject, String schemaFile, Int32 cpuCount, Boolean enableNodeReuse, TextWriter preprocessWriter, TextWriter targetsWriter, Boolean detailedSummary, ISet`1 warningsAsErrors, ISet`1 warningsNotAsErrors, ISet`1 warningsAsMessages, Boolean enableRestore, ProfilerLogger profilerLogger, Boolean enableProfiler, Boolean interactive, ProjectIsolationMode isolateProjects, GraphBuildOptions graphBuildOptions, Boolean lowPriority, String[] inputResultsCaches, String outputResultsCache, String commandLine)\r\n   at Microsoft.Build.CommandLine.MSBuildApp.Execute(String commandLine)\r\n   at Microsoft.Build.CommandLine.MSBuildApp.Main()\r\n```\n\n### Analysis\n\nPassing the additional parameter `/bl:ProjectImports=None` is a workaround for the issue, but not ideal as we prefer to collect complete binlogs from our build agents.\n\n### Versions & Configurations\n\nMSBuild version 17.6.0-preview-23164-01+18fe51042 for .NET Framework\r\n17.6.0.16401",
  "state": "CLOSED",
  "createdAt": "2023-03-23T21:27:24Z",
  "updatedAt": "2024-02-21T16:59:23Z",
  "closedAt": "2023-07-13T02:04:38Z",
  "author": {
    "login": "MarkOsborneMS"
  },
  "labels": [
    "bug",
    "Partner request",
    "Priority:1",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "MichalPavlik"
      }
    ]
  },
  "milestone": {
    "title": "VS 17.7"
  },
  "comments": {
    "nodes": [
      {
        "body": "GetAllBytes() grows a large memory stream in memory. \r\n\r\nThis was introduced in https://github.com/dotnet/msbuild/commit/ec61b6fdf48021fca3e94d12ded473b25ca5db9b\r\n\r\ncc @asklar ",
        "createdAt": "2023-03-24T04:42:11Z",
        "updatedAt": "2023-03-24T04:42:11Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "@MarkOsborneMS after that build is done (crashed), there should still be the msbuild.binlog file on disk. Could you share it with me privately please.",
        "createdAt": "2023-03-24T04:46:51Z",
        "updatedAt": "2023-03-24T04:46:51Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "also if you could please share a successful binlog from the same large repo",
        "createdAt": "2023-03-24T16:12:06Z",
        "updatedAt": "2023-03-24T16:12:06Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "@KirillOsenkov I have shared both binlogs with you privately.",
        "createdAt": "2023-03-24T16:36:05Z",
        "updatedAt": "2023-03-24T16:36:05Z",
        "author": {
          "login": "MarkOsborneMS"
        }
      },
      {
        "body": "stats from the smaller (working) binlog:\r\n\r\n![image](https://user-images.githubusercontent.com/679326/227644091-52534e5d-a217-4ea6-999b-5861de7b3ef4.png)\r\n\r\nThe size of the blob archive is 78 MB, I'm guessing using MemoryStream to write 78 MB pushes it over the limit due to array reallocations.",
        "createdAt": "2023-03-24T21:23:42Z",
        "updatedAt": "2023-03-24T21:23:42Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "In the smaller binlog, there are 600MB of files embedded:\r\n\r\n![image](https://user-images.githubusercontent.com/679326/227646642-8489d87b-eb9f-4d09-9722-fffdefd4125c.png)\r\n",
        "createdAt": "2023-03-24T21:42:06Z",
        "updatedAt": "2023-03-24T21:42:06Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "you can save files from a binlog to a folder on disk using:\r\n\r\n```\r\ndotnet tool install -g binlogtool\r\nbinlogtool savefiles msbuildrestore175.binlog OutputFolder\r\n```",
        "createdAt": "2023-03-24T21:43:04Z",
        "updatedAt": "2023-03-24T21:43:04Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "I took a look at the files and it's mostly 450 MB worth of project.assets.json files:\r\n![image](https://user-images.githubusercontent.com/679326/227672246-1bd3c580-9a2f-43e4-bf42-ed955b70f70d.png)\r\n",
        "createdAt": "2023-03-25T01:03:15Z",
        "updatedAt": "2023-03-25T01:03:15Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "As a workaround, you can turn off embedding files into the binlog via:\r\n`msbuild /bl:msbuild.binlog;ProjectImports=None`",
        "createdAt": "2023-03-25T01:04:23Z",
        "updatedAt": "2023-03-25T01:04:23Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "> I took a look at the files and it's mostly 450 MB worth of project.assets.json files:\r\n\r\nDoes that seem like its the cause? Or do you think that should be okay and something else needs to be fixed?  I would expect the assets files to be highly compressible. ",
        "createdAt": "2023-03-25T01:15:14Z",
        "updatedAt": "2023-03-25T01:15:14Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "Stats from the 770 MB binlog:\r\n\r\n![image](https://user-images.githubusercontent.com/679326/227667766-93c3be45-5fee-413a-990c-2a90a599f065.png)\r\n\r\nAgain, mostly huge project.assets.json files, p2p.targets:\r\n![image](https://user-images.githubusercontent.com/679326/227674897-882bc72f-ef68-4a83-a050-f1b730d78bc0.png)\r\n",
        "createdAt": "2023-03-25T01:16:28Z",
        "updatedAt": "2023-03-25T01:16:28Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "No, it's fine to embed the files. \r\n\r\nThis logic starts breaking at this volume of data:\r\nhttps://github.com/dotnet/msbuild/commit/ec61b6fdf48021fca3e94d12ded473b25ca5db9b#diff-0864a6f2e10a87d935fbf19d81370f534e67f33931642dec1f30023b108e2cdcR180\r\n\r\nWe need to stream the ProjectImports.zip into the binlog writer, instead of using File.ReadAllBytes(). It just chokes reallocating byte arrays growing the underlying memory stream.\r\n\r\nI was just looking at the binlogs to understand if there are any abnormally large files that shouldn't have been included, but it just seems that the repo is huge, so nothing abnormal. It just crossed some threshold recently where the size became so big that it started OOMing.\r\n",
        "createdAt": "2023-03-25T01:20:12Z",
        "updatedAt": "2023-03-25T01:20:12Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "Here, we need to change this to return a Stream instead of a byte array:\r\nhttps://github.com/dotnet/msbuild/blob/e7de1330724224a542668e1ef82c997613c7080c/src/Build/Logging/BinaryLogger/ProjectImportsCollector.cs#L40\r\n\r\nand add an API in the writer to write a stream instead of a byte array. Then we'll avoid reading the entire 500 MB into a MemoryStream to get the byte array, only to write it into the primary binlog stream again. Will probably need to pass the exact size in bytes, since the blob record writes the length first.",
        "createdAt": "2023-03-25T01:25:37Z",
        "updatedAt": "2023-03-25T01:25:37Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "@marcpopMSFT I'm unassigning myself, I've left instructions in the comment above about what the problem is and how to fix it. Hopefully you can find a volunteer. I'd be happy to code review the PR.",
        "createdAt": "2023-03-25T01:26:54Z",
        "updatedAt": "2023-03-25T01:26:54Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "Hmm, the crash is actually running out of memory in ZipArchive.Dispose():\r\n\r\n```\r\nSystem.OutOfMemoryException: Exception of type 'System.OutOfMemoryException' was thrown.\r\n   at System.IO.MemoryStream.set_Capacity(Int32 value)\r\n   at System.IO.MemoryStream.EnsureCapacity(Int32 value)\r\n   at System.IO.MemoryStream.Write(Byte[] buffer, Int32 offset, Int32 count)\r\n   at System.IO.Compression.ZipArchiveEntry.WriteCentralDirectoryFileHeader()\r\n   at System.IO.Compression.ZipArchive.WriteFile()\r\n   at System.IO.Compression.ZipArchive.Dispose(Boolean disposing)\r\n   at Microsoft.Build.Logging.ProjectImportsCollector.Close(Boolean closeStream)\r\n   at Microsoft.Build.Logging.ProjectImportsCollector.GetAllBytes()\r\n   at Microsoft.Build.Logging.BinaryLogger.Shutdown()\r\n```\r\n\r\nThis is not exactly what I thought, we aren't even getting to File.ReadAllBytes(). Is the ZipArchive being written into a MemoryStream? Why? We should be writing it to disk I think. \r\n\r\nhttps://github.com/dotnet/msbuild/pull/5718 will have more clues.",
        "createdAt": "2023-03-25T01:31:26Z",
        "updatedAt": "2023-03-25T01:31:26Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "Oh, I remember now, the problem was the temporary file ProjectImports.zip was messing up various scenarios. Should that file be in the temp directory instead?",
        "createdAt": "2023-03-25T01:32:41Z",
        "updatedAt": "2023-03-25T01:32:41Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "Still need to avoid the ReadAllBytes() as I wrote earlier.",
        "createdAt": "2023-03-25T01:33:09Z",
        "updatedAt": "2023-03-25T01:33:09Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "right, the original change was to avoid creating a temporary file that was being picked up by various tools that have filesystem watchers (metro, defender, etc.), so the idea was to not create a temporary file if we're going to embed the zip in the binlog anyway.\r\n\r\nnote that in the non-embed case, before the change, we were reading the whole thing too:\r\nhttps://github.com/dotnet/msbuild/pull/5718/files#diff-0864a6f2e10a87d935fbf19d81370f534e67f33931642dec1f30023b108e2cdcL188\r\n\r\nso I'm not sure how this would have worked before this change, maybe we were getting lucky with memory fragmentation?",
        "createdAt": "2023-03-25T01:41:51Z",
        "updatedAt": "2023-03-25T01:41:51Z",
        "author": {
          "login": "asklar"
        }
      },
      {
        "body": "Yup, we were just getting lucky. Not blaming your change, it was a good fix. Just started seeing some really huge builds and it became a problem. I think if we can get a safe temp file location, unique per process, we should write to that instead of the memory stream. Definitely shouldn't be creating any files in the source directory.",
        "createdAt": "2023-03-25T01:44:47Z",
        "updatedAt": "2023-03-25T01:44:47Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "yeah, agree that a low-risk fix would be to revert the original change, store the zip in a temp location, and then only if we're not embedding it, move the temp file to the source directory (to preserve prior behavior). if we are embedding it, just read it via streams (not byte[]), then delete the temporary zip.",
        "createdAt": "2023-03-25T01:51:06Z",
        "updatedAt": "2023-03-25T01:51:06Z",
        "author": {
          "login": "asklar"
        }
      },
      {
        "body": "We just hit this after upgrading our pipelines to 17.6 GA",
        "createdAt": "2023-05-19T20:23:21Z",
        "updatedAt": "2023-05-19T20:23:21Z",
        "author": {
          "login": "MarkOsborneMS"
        }
      },
      {
        "body": "Hello, could you please share a link to your pipeline? Or some run where the embedding wasn't disabled? Thanks.",
        "createdAt": "2023-06-23T14:44:41Z",
        "updatedAt": "2023-06-23T14:55:09Z",
        "author": {
          "login": "MichalPavlik"
        }
      },
      {
        "body": "The failing builds have expired, and we added ProjectImports=None as a workaround in the pipeline. ",
        "createdAt": "2023-06-23T18:19:00Z",
        "updatedAt": "2023-06-23T18:19:00Z",
        "author": {
          "login": "MarkOsborneMS"
        }
      }
    ]
  }
}