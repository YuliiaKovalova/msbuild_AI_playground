{
  "number": 225,
  "title": "building msbuild xplat on osx",
  "body": "I'm trying to use `build.pl` to build msbuild on osx (I'm assuming this is correct ?) but its throwing the following error:\n\n```\n/msbuild/src/Framework/Microsoft.Build.Framework.csproj: error : /msbuild/src/Framework/Microsoft.Build.Framework.csproj: ../dir.targets: Project file could not be imported, it was being imported by /msbuild/src/Framework/Microsoft.Build.Framework.csproj: /msbuild/src/dir.targets could not import \"$(ToolsDir)\\sign.targets\"\n```\n\nI was wondering if you could offer some guidance as to what the problem may be?\n",
  "state": "CLOSED",
  "createdAt": "2015-09-22T22:31:42Z",
  "updatedAt": "2024-02-21T17:30:37Z",
  "closedAt": "2016-03-02T01:42:32Z",
  "author": {
    "login": "mat-mcloughlin"
  },
  "labels": [
    ".NET Core",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "cdmihai"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Unfortunately, the core team hasn't been focused on OS X builds recently.  I wouldn't be shocked if it's just broken at the moment.  @ValMenn, any chance that your Linux changes will also fix this?\n",
        "createdAt": "2015-09-23T14:56:11Z",
        "updatedAt": "2015-09-23T14:56:11Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I\u2019m getting a similar error on my OS X machine.\n\n```\n/Volumes/Development/GitHub/Microsoft/msbuild/build.proj: error : /Volumes/Development/GitHub/Microsoft/msbuild/build.proj: Invalid static method invocation syntax ''\n```\n",
        "createdAt": "2015-09-23T18:50:27Z",
        "updatedAt": "2015-09-23T18:50:27Z",
        "author": {
          "login": "wjk"
        }
      },
      {
        "body": "We are currently working on getting MSBuild to build on OSX and Linux.\n",
        "createdAt": "2015-11-17T18:54:31Z",
        "updatedAt": "2015-11-17T18:54:31Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "@cdmihai I'm interested in contributing to the xplat efforts for OSX and Linux.\nCan you pleas point me in the right direction?\n",
        "createdAt": "2015-11-29T07:13:34Z",
        "updatedAt": "2015-11-29T07:13:34Z",
        "author": {
          "login": "JunielKatarn"
        }
      },
      {
        "body": "Help would be appreciated!\n\nPR #374 makes OSX compile (but not run). Most likely it will get merged into xplat tomorrow.\nPR #377 is work in progress to get a CI build for OSX that currently just compiles, without running the tests. It's aiming to replace build.pl, but we may still decide to resurrect build.pl and use that.\n\nI'm currently using an old mono msbuild build to build on OSX. It would be awesome if you could change cibuild.sh to use XBuild instead of the mono build. By doing that, all machine specific dependencies will be gone and everyone would be able to compile msbuild on OSX (not just my machine).\n\nXBuild didn't work for me, but I did not investigate it in depth. My plan was to just dump a zip of my mono build into azure and download it in cibuild.sh, before building. But if you can get xbuild going, that would be great! Edit lines 73 and 17 to make it build with XBuild (https://github.com/cdmihai/msbuild/blob/ciscript/cibuild.sh).\n",
        "createdAt": "2015-12-01T02:17:29Z",
        "updatedAt": "2015-12-01T02:19:28Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "> It would be awesome if you could change cibuild.sh to use XBuild instead of the mono build.\n\nNeed a little more context. You mean cibuil.sh uses `mono` as a command to build, where it should now be using `xbuild`?\nI guess it should also update the appropriate command arguments, right?\n",
        "createdAt": "2015-12-01T08:52:44Z",
        "updatedAt": "2015-12-01T08:52:44Z",
        "author": {
          "login": "JunielKatarn"
        }
      },
      {
        "body": "@cdmihai I was able to update the script to use `xbuild`, but I couldn't find a way to make a pull request to your fork.\nAnyway, here is the commit. Please let me know where to PR/submit it.\n\nhttps://github.com/JunielKatarn/msbuild/commit/ddcd23f64587573e123f41d6fe435bf447429214\n",
        "createdAt": "2015-12-01T10:26:46Z",
        "updatedAt": "2015-12-01T10:26:46Z",
        "author": {
          "login": "JunielKatarn"
        }
      },
      {
        "body": "@JunielKatarn \n\nThanks for upgrading the script. Did you try and build MSBuild with XBuild? Did it work?\n\nIn the meantime I went ahead and edited the PR #377 so the ci script downloads a mono host of msbuild and uses that instead of XBuild. You can also manually download those binaries here: https://github.com/Microsoft/msbuild/releases/tag/mono-hosted-msbuild-v0.1\n\nSo, here are some next action items:\n- do a quick investigation on whether XBuild can actually build OSX. If it doesn't, just report here why (to have it documented) and proceed to the next tasks. XBuild is a nice to have, but not mandatory since we can build using the mono host build, so do not spend too much time on it.\n- after you manage to build MSBuild with either XBuild or the mono build, use the newly built MSBuild to build a hello world project (a simple script with one target that prints hello world).\n  - this will fail because there is no `corerun` host on OSX with our current dependency on `Microsoft.NETCore.TestHost`. Update the dependency in https://github.com/Microsoft/msbuild/blob/xplat/targets/runtime.project.json with the lowest dependency that works (bumping it higher will force you to update all the other dependencies which is not fun)\n  - after you have corerun available, try to build the hello world build script. You will notice that it fails with a null pointer exception. Investigate and fix the NPE. :)\n    My working assumptions are that we either have an old corefx dependency (and need to bump up) or it's a current corefx bug on OSX (post issue on corefx). \n",
        "createdAt": "2015-12-02T02:17:58Z",
        "updatedAt": "2015-12-02T02:27:50Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "> Thanks for upgrading the script. Did you try and build MSBuild with XBuild? Did it work?\n\nShort answer: Yes, I tried and build MSBuild. No, it didn't work.\nIt does run the PROJ file and starts trying to fetch NuGet assets, but it ultimately fails.\nGood news is, at leas it passes arguments correctly to `xbuild`.\n\nI'll post the command output when I'm back on my Mac.\n",
        "createdAt": "2015-12-02T02:20:40Z",
        "updatedAt": "2015-12-02T02:33:23Z",
        "author": {
          "login": "JunielKatarn"
        }
      },
      {
        "body": "Hi again. Here is the error I get with my version of the script:\n\n```\nBuild Command: xbuild ./build.proj /t:Build /p:OS=OSX /p:Configuration=Debug-Netcore /verbosity:minimal /fileloggerparameters:Verbosity=diag;LogFile=./msbuild.log\nXBuild Engine Version 12.0\nMono, Version 4.0.4.0\nCopyright (C) 2005-2013 Various Mono authors\n/Users/julio/Desktop/msbuild/osx/build.proj:  warning : Target '_RestoreBuildToolsWrapper and 'OSX'=='Windows_NT'', not found in the project\n/Users/julio/Desktop/msbuild/osx/build.proj:  warning : Target '_RestoreBuildToolsWrapper1', not found in the project\n    Build 'build.proj' into binary directory '/Users/julio/Desktop/msbuild/osx/bin/Debug-Netcore/'\nRestoring build tools...\nfind: /!: unknown primary or operator\nRestoring in %(ProjectJsonFile.RootDir)%(ProjectJsonFile.Directory)\n/var/folders/6m/cft82bmn5v34ylhh1_s9_23c0000gn/T/tmp1f75374e.tmp: line 1: /Users/julio/Desktop/msbuild/osx/packages/dnx-coreclr-darwin-x64.1.0.0-rc2-16177/bin/dnu: Permission denied\n/Users/julio/Desktop/msbuild/osx/src/.nuget/packageLoad.targets: error : Command 'export DNX_PACKAGES=/Users/julio/.nuget/packages ; /Users/julio/Desktop/msbuild/osx/packages/dnx-coreclr-darwin-x64.1.0.0-rc2-16177/bin/dnu restore  --parallel  \"/Users/julio/Desktop/msbuild/osx/src/Framework/UnitTests/project.json;/Users/julio/Desktop/msbuild/osx/src/Framework/UnitTests/project.json;/Users/julio/Desktop/msbuild/osx/src/Framework/UnitTests/project.json\"' exited with code: 126.\nwarning: LF will be replaced by CRLF in cibuild.sh.\nThe file will have its original line endings in your working directory.\n```\n\nCommand `dnu` returns some permissions error, which is not related to administrative privileges (I tried running `sudo`).\n\nI'll go ahead and test your updated version of the script.\n",
        "createdAt": "2015-12-02T08:38:07Z",
        "updatedAt": "2015-12-02T08:38:07Z",
        "author": {
          "login": "JunielKatarn"
        }
      },
      {
        "body": "@cdmihai Oh, on another note, the script won't even run as is in Mac OS X because it contains `CR` characters.\n\nI need to locally disable the `eol=crlf` attribute.\nThis might be an issue going forward when porting MSBuild to UNIX platforms.\n",
        "createdAt": "2015-12-02T08:48:11Z",
        "updatedAt": "2015-12-02T08:48:11Z",
        "author": {
          "login": "JunielKatarn"
        }
      },
      {
        "body": "@cdmihai OK, I'm now researching the issue you mentioned\n\nIn the meantime, can you integrate this change? https://github.com/JunielKatarn/msbuild/commit/7c12ee5d65ade3d66784e38564584536b5425176\nFixes a minor issue that makes the script fail if the 'packages' directory has not been created yet.\n\nAgain, do you know why I can't create pull requests targeting your fork? It does work for all other MSBuild forks, and the main repo.\n",
        "createdAt": "2015-12-02T09:29:56Z",
        "updatedAt": "2015-12-02T09:29:56Z",
        "author": {
          "login": "JunielKatarn"
        }
      },
      {
        "body": "After running the MSBuild.exe generated by the script, I get this error:\n\n```\n$ mono bin/Debug-Netcore/Output/MSBuild.exe dummy.csproj\n\nUnhandled Exception:\nSystem.IO.FileNotFoundException: Could not load file or assembly 'System.Collections.NonGeneric, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies.\nFile name: 'System.Collections.NonGeneric, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'\n[ERROR] FATAL UNHANDLED EXCEPTION: System.IO.FileNotFoundException: Could not load file or assembly 'System.Collections.NonGeneric, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies.\nFile name: 'System.Collections.NonGeneric, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'\n```\n\nNote, this happens regardless of what arguments I add.\nIs this the `corerun` expected error?\n",
        "createdAt": "2015-12-02T10:07:24Z",
        "updatedAt": "2015-12-02T10:07:24Z",
        "author": {
          "login": "JunielKatarn"
        }
      },
      {
        "body": "@JunielKatarn \n\nI integrated your commit into the ciscript branch\n\nConcerning the line endings: embarrassingly, I could not force git to commit LF line endings for that file. So, as a temporary solution I forced LF for cibuild.sh in .gitattributes. This seems to solve the issue on my end. Can you please confirm this?\n\nConcerning your last message, try building a more simple hello world:\n\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<Project ToolsVersion=\"12.0\" DefaultTargets=\"HelloWorld\"  xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n    <Target Name=\"HelloWorld\">\n      <Message Text=\"Hello\"></Message>  <Message Text=\"World\"></Message>\n    </Target>\n</Project>\n```\n",
        "createdAt": "2015-12-02T19:57:47Z",
        "updatedAt": "2015-12-02T19:57:47Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "@cdmihai \n\nI tried the simplified project you suggested, but it didn't work. Here is what I did:\n- Updated to your latest sources\n- Ran the cibuild.sh script\n- Executed `mono bin/Debug-Netcore/Output/MSBuild.exe dummy.csproj`\n  Output:\n\n```\nUnhandled Exception:\nSystem.IO.FileNotFoundException: Could not load file or assembly 'System.Collections.NonGeneric, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies.\nFile name: 'System.Collections.NonGeneric, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'\n[ERROR] FATAL UNHANDLED EXCEPTION: System.IO.FileNotFoundException: Could not load file or assembly 'System.Collections.NonGeneric, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies.\nFile name: 'System.Collections.NonGeneric, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'\n```\n\nWhile the build script succeeded, I did get this warning:\n\n```\npackages/mono-msbuild/bin/Unix/Debug-MONO/Microsoft.Common.CurrentVersion.targets(1090,5): warning MSB3644: The reference assemblies for framework \"DNXCore,Version=v5.0\" were not found. To resolve this, install the SDK or Targeting Pack for this framework version or retarget your application to a version of the framework for which you have the SDK or Targeting Pack installed. Note that assemblies will be resolved from the Global Assembly Cache (GAC) and will be used in place of reference assemblies. Therefore your assembly may not be correctly targeted for the framework you intend. [Samples/PortableTask/PortableTask.csproj]\n```\n",
        "createdAt": "2015-12-03T08:07:29Z",
        "updatedAt": "2015-12-03T08:07:29Z",
        "author": {
          "login": "JunielKatarn"
        }
      },
      {
        "body": "@JunielKatarn It looks like you're trying to run the .NET Core version of msbuild (based on the output path) with the `mono` runtime.  That version should be run with the `corerun` executable that's part of .NET Core.  IIRC, @cdmihai was having some trouble getting that copied to the output directory on OS X (because of .NET Core package versions), so you may have to copy it from a NuGet package manually until that can be sorted out.\n",
        "createdAt": "2015-12-03T15:37:55Z",
        "updatedAt": "2015-12-03T15:37:55Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> so you may have to copy it from a NuGet package manually \n\nDo you mean copying the .NET Core from a NuGet package?\nI'm not too familiar wit the open-source implementation. Could you explain a little further, please? (i.e. where should I place this correct .NET Core version? How should I use this `corerun`? Do I just replace `mono` calls with `corerun` calls?...)\n",
        "createdAt": "2015-12-06T04:09:11Z",
        "updatedAt": "2015-12-06T04:09:11Z",
        "author": {
          "login": "JunielKatarn"
        }
      },
      {
        "body": "Yes, the short version is that for our .NET Core binaries, you'll just replace `mono` calls with `corerun`.  Unfortunately, I can't seem to find any good documentation to link you to.  You should be able to use `corerun` from any folder, and specify the full path to `MSBuild.exe` as its first argument.  Finding an appropriate version might be tricky, though.\n\n(I'm told that a Mac has been ordered for me, so hopefully I'll be able to be more helpful on this soon.  Sorry for being vague; I don't yet know all of the issues.)\n",
        "createdAt": "2015-12-08T00:00:12Z",
        "updatedAt": "2015-12-08T00:00:12Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@JunielKatarn \nYou can get the corerun host from this package: https://www.myget.org/feed/dotnet-core/package/nuget/runtime.osx.10.10-x64.Microsoft.NETCore.TestHost (it's a zip file in disguise, just rename the nupkg extension to zip)\n\nAs far as I remember, this branch worked for me: https://github.com/cdmihai/msbuild/tree/osxBuild\nHowever, I had to revert the version upgrades to get a clean CI build on osx and win, so that branch is not used anymore.\nI'll try it later on tonight and tell you if it's the right. Then, you can use it as a base to explore the NPE.\n",
        "createdAt": "2015-12-08T01:11:16Z",
        "updatedAt": "2015-12-08T01:11:51Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "Hi. I've been away for a while but allocated more time to help with testing in OS X.\n\n@cdmihai, I tracked this build from yesterday: http://dotnet-ci.cloudapp.net/job/Microsoft_msbuild/job/innerloop_xplat_OSX/30/\n\nOS X build seems to pass. Is this issue effectively solved?\nIf so, is there any documentation for building the artifacts manually?\n",
        "createdAt": "2016-01-23T08:18:09Z",
        "updatedAt": "2016-01-23T08:18:09Z",
        "author": {
          "login": "JunielKatarn"
        }
      },
      {
        "body": "Thanks for the reminder about this issue, @JunielKatarn. We can now build MSBuild on OS X using Mono. We haven't yet got all the packages needed to build ourselves on OS X using our .NET Core package.\n\nWe need to update documentation, but you should be able to just run `cibuild.sh` from the root of the repo. That's what the CI server does, and should produce all the needed .NET Core binaries (or at least it does on my machine).\n",
        "createdAt": "2016-01-25T17:41:49Z",
        "updatedAt": "2016-01-25T17:41:49Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald\nI was not able to successfully build locally.\n\nUsing either the latest commit (tag 0015) at the xplat branch (59fcc7b24631c28d566bbea9246ff470146950fd), or the latest successful commit at (4253e2f5fe7e40a3884b975fedc4d3ff65b84911), executing `./cibuild.sh --target Mono`, got the following error:\n\n```\n...\n Restoring NuGet package dnx-coreclr-darwin-x64.1.0.0-rc2-16177.\nEXEC : warning : Unable to find version '1.0.0-rc2-16177' of package 'dnx-coreclr-darwin-x64'. [/Volumes/DATA/Build/msb/buildme/build.proj]\n  find: /Volumes/DATA/Build/msb/buildme/packages/dnx-coreclr-darwin-x64.1.0.0-rc2-16177: No such file or directory\n  Restoring in /Volumes/DATA/Build/msb/buildme/src/Framework/\n  /var/folders/xn/1jl92nys3gs6gml3ck9hj36h0000gn/T/tmp2c72825b03f548c9a30ff62b1de670d4.exec.cmd: line 3: /Volumes/DATA/Build/msb/buildme/packages/dnx-coreclr-darwin-x64.1.0.0-rc2-16177/bin/dnu: No such file or directory\n/Volumes/DATA/Build/msb/buildme/src/.nuget/packageLoad.targets(138,5): error MSB3073: The command \"export DNX_PACKAGES=/Users/julio/.nuget/packages ; /Volumes/DATA/Build/msb/buildme/packages/dnx-coreclr-darwin-x64.1.0.0-rc2-16177/bin/dnu restore  --parallel  \"/Volumes/DATA/Build/msb/buildme/src/Framework/project.json\"\" exited with code 127. [/Volumes/DATA/Build/msb/buildme/build.proj]\n```\n\nIn short, version `1.0.0-rc2-16177` was not being fetched correctly.\nAfter looking at https://www.nuget.org/packages/dnx-coreclr-darwin-x64, it looks like the \"advertised\" version is `1.0.0-rc1-update1`. I updated to that verison in two files: `dir.props` and `src/.nuget/packages.OSX.config`. (See also latest failed build http://dotnet-ci.cloudapp.net/job/Microsoft_msbuild/job/innerloop_xplat_OSX/31/).\n\nThen, `dnu` succeeded, but some packages could not be obtained:\n\n```\n  Warning: FindPackagesById: System.Runtime.InteropServices.RuntimeInformation\n    Response status code does not indicate success: 404 (Not Found).\n    GET https://www.myget.org/F/dotnet-corefx/FindPackagesById()?id='System.Runtime.InteropServices.RuntimeInformation'\n  Warning: FindPackagesById: System.Reflection.Metadata\n    Response status code does not indicate success: 404 (Not Found).\n    GET https://www.myget.org/F/dotnet-corefx/FindPackagesById()?id='System.Reflection.Metadata'\n  Warning: FindPackagesById: System.Runtime.InteropServices\n    Response status code does not indicate success: 404 (Not Found).\n    GET https://www.myget.org/F/dotnet-corefx/FindPackagesById()?id='System.Runtime.InteropServices'\n  Warning: FindPackagesById: System.Text.Encoding.Extensions\n    Response status code does not indicate success: 404 (Not Found).\n    GET https://www.myget.org/F/dotnet-corefx/FindPackagesById()?id='System.Text.Encoding.Extensions'\n  Warning: FindPackagesById: xunit.netcore.extensions\n    Response status code does not indicate success: 404 (Not Found).\n    GET https://www.myget.org/F/dotnet-corefx/FindPackagesById()?id='xunit.netcore.extensions'\n  Warning: FindPackagesById: System.Reflection.Metadata\n    Response status code does not indicate success: 404 (Not Found).\n    GET https://www.myget.org/F/dotnet-corefx/FindPackagesById()?id='System.Reflection.Metadata'\n  Warning: FindPackagesById: System.Collections.Immutable\n    Response status code does not indicate success: 404 (Not Found).\n    GET https://www.myget.org/F/dotnet-corefx/FindPackagesById()?id='System.Collections.Immutable'\n  Warning: FindPackagesById: System.Runtime.InteropServices.RuntimeInformation\n    Response status code does not indicate success: 404 (Not Found).\n    GET https://www.myget.org/F/dotnet-corefx/FindPackagesById()?id='System.Runtime.InteropServices.RuntimeInformation'\n  Warning: FindPackagesById: System.Runtime.InteropServices\n    Response status code does not indicate success: 404 (Not Found).\n    GET https://www.myget.org/F/dotnet-corefx/FindPackagesById()?id='System.Runtime.InteropServices'\n  Warning: FindPackagesById: System.Text.Encoding.Extensions\n    Response status code does not indicate success: 404 (Not Found).\n    GET https://www.myget.org/F/dotnet-corefx/FindPackagesById()?id='System.Text.Encoding.Extensions'\n  Error: FindPackagesById: System.Runtime.InteropServices.RuntimeInformation\n    Response status code does not indicate success: 404 (Not Found).\n  ----------\n  Warning: FindPackagesById: System.Collections.Immutable\n    Response status code does not indicate success: 404 (Not Found).\n\n...\n/Volumes/DATA/Build/msb/buildme/src/.nuget/packageLoad.targets(138,5): error MSB3073: The command \"export DNX_PACKAGES=/Users/julio/.nuget/packages ; /Volumes/DATA/Build/msb/buildme/packages/dnx-coreclr-darwin-x64.1.0.0-rc1-update1/bin/dnu restore  --parallel  \"/Volumes/DATA/Build/msb/buildme/src/Utilities/UnitTests/project.json\"\" exited with code 1. [/Volumes/DATA/Build/msb/buildme/build.proj]\n```\n\nDo you make any setup or customizations before the Hudson build?\nShould I tweak the dependency files for those missing artifacts (404)?\nIf so, what file should be modified?\n",
        "createdAt": "2016-01-26T09:29:22Z",
        "updatedAt": "2016-01-26T09:29:22Z",
        "author": {
          "login": "JunielKatarn"
        }
      },
      {
        "body": "@JunielKatarn I've observed NuGet restore being flaky both on OS X and on Windows. On my Mac (and my Windows machines), I can just run the build a few times in a row and it will eventually get all packages and start building. Can you try that and let me know if you observe the same?\n\nThis is really annoying, but I don't know where in the stack the flakiness resides (is it MyGet? `dnu`? Inherent to NuGet?). Identifying the problem would be a big step forward, I think.\n",
        "createdAt": "2016-01-26T15:19:11Z",
        "updatedAt": "2016-01-26T15:19:11Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "OK, I tried the latest source in the branch (81be1e57f33e54bc2ee0b4b2d2f4333567c8d354). It builds successfully running `sh cibuild.sh --target Mono`.\n",
        "createdAt": "2016-02-10T09:21:53Z",
        "updatedAt": "2016-02-10T09:33:16Z",
        "author": {
          "login": "JunielKatarn"
        }
      },
      {
        "body": "Hi again. Tried to run a trivial CSPROJ file, but failed. (Source version 81be1e57f33e54bc2ee0b4b2d2f4333567c8d354)\nsolution.csproj:\n\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<Project ToolsVersion=\"12.0\" DefaultTargets=\"HelloWorld\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n    <Target Name=\"HelloWorld\">\n      <Message Text=\"HelloWorld\"></Message>\n    </Target>\n</Project>\n```\n\nCommand:\n\n```\nmono /workspace/bin/Debug-MONO/Output/MSBuild.exe solution.csproj\n```\n\nOutput:\n\n```\nMicrosoft (R) Build Engine version 14.1.0.0\nCopyright (C) Microsoft Corporation. All rights reserved.\n\nBuilding the projects in this solution one at a time. To enable parallel build, please add the \"/m\" switch.\nInvalid type Microsoft.Build.Execution.BuildManager for instance field Microsoft.Build.Execution.BuildSubmission:<BuildManager>k__BackingField\nMSBUILD : error MSB1025: An internal failure occurred while running MSBuild.\nSystem.TypeLoadException: Failure has occurred while loading a type.\n  at Microsoft.Build.CommandLine.MSBuildApp.Execute (System.String commandLine) <0x77d290 + 0x0059f> in <filename unknown>:0\nThis is an unhandled exception in MSBuild Engine -- PLEASE OPEN A BUG AGAINST THE MSBUILD TEAM.\nSystem.TypeLoadException: Failure has occurred while loading a type.\n  at Microsoft.Build.CommandLine.MSBuildApp.Execute (System.String commandLine) <0x77d290 + 0x0059f> in <filename unknown>:0\n[ERROR] FATAL UNHANDLED EXCEPTION: System.TypeLoadException: Failure has occurred while loading a type.\n  at Microsoft.Build.CommandLine.MSBuildApp.Execute (System.String commandLine) <0x77d290 + 0x0059f> in <filename unknown>:0\n```\n\nIs there any way to debug this on OSX? Maybe using Mono?\n",
        "createdAt": "2016-02-10T09:42:04Z",
        "updatedAt": "2016-02-10T09:45:35Z",
        "author": {
          "login": "JunielKatarn"
        }
      },
      {
        "body": "Try running  `bin/Debug-MONO/OSX_Deployment/MSBuild.exe` instead.\n",
        "createdAt": "2016-02-10T15:57:42Z",
        "updatedAt": "2016-02-10T15:57:42Z",
        "author": {
          "login": "radical"
        }
      },
      {
        "body": "@JunielKatarn \n\nOn OSX try building for Debug-NetCore and run through corerun, not mono.\n\n`bin/Debug-NetCore/OSX_Deployment/corerun bin/Debug-NetCore/OSX_Deployment/MSBuild.exe ../<some path>/solution.csproj`\n",
        "createdAt": "2016-02-10T17:44:08Z",
        "updatedAt": "2016-02-10T17:45:20Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "Thanks, @cdmihai. I ended up using the corerun build. It works as expected (aside from the issue found in #469).\n\nPlease let me know if I can collaborate with more test scenarios for OS X.\n",
        "createdAt": "2016-02-11T09:53:11Z",
        "updatedAt": "2016-02-11T09:53:11Z",
        "author": {
          "login": "JunielKatarn"
        }
      },
      {
        "body": "@JunielKatarn \nThanks a lot for your interest in making .net core msbuild work on OSX!\n\nCurrently, .net core msbuild builds on osx but tests are failing. It would be really helpful to us if you could start fixing them :)\n\nHere's how you might do that:\n- there will be many failing tests, and most likely there are classes of tests that fail for specific reasons.\n- since it is too much too fix them all at once, you first have to disable all failing tests on osx (by applying `[Trait(\"Category\", \"nonosxtests\")]` on each test that fails on osx). This will get us in a state where we can have **some** running CI tests for OSX, which is really helpful.\n- send a PR when this is done. You'll also want to update our cibuild.sh script to run tests for osx (but not linux)\n- start by fixing a failing class of tests:\n  - identify a reason of failure and open an issue describing why it fails; assign yourself to it\n  - fix test failure cause\n  - remove the `[Trait(\"Category\", \"nonosxtests\")]` for all the tests that were affected by that \n  - send PR\n  - if you decide not to fix that specific failure, add a comment with the issue ID to all the tests failing for that particular reason. This helps the next person that tries to fix them to quickly identify the tests that failed for that specific issue.\n",
        "createdAt": "2016-02-11T22:09:00Z",
        "updatedAt": "2016-02-11T22:20:57Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "@cdmihai Sounds great but, how do I actually run the tests?\n",
        "createdAt": "2016-02-12T12:11:08Z",
        "updatedAt": "2016-02-12T12:11:08Z",
        "author": {
          "login": "JunielKatarn"
        }
      },
      {
        "body": "@JunielKatarn They're opt-in on OS X, so you should see failures if you invoke\n\n``` sh\n./cibuild.sh --scope Test\n```\n\n(I just created https://github.com/Microsoft/msbuild/wiki/Building-on-OS-X-and-Linux to document this.)\n",
        "createdAt": "2016-02-12T16:47:06Z",
        "updatedAt": "2016-02-12T16:47:06Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@mat-mcloughlin MSBuild now builds consistently on OS X. I believe this issue can be closed.\n",
        "createdAt": "2016-03-01T08:52:32Z",
        "updatedAt": "2016-03-01T08:52:32Z",
        "author": {
          "login": "JunielKatarn"
        }
      },
      {
        "body": "Agreed, closing the issue. Right now people can build msbuild for .net core using the cibuild.sh script.\n\nWhen #501 is merged, there will be 2 options: `cibuild.sh --host CoreCLR` will build using corerun, and `cibuild.sh --host Mono` will build using mono.\n",
        "createdAt": "2016-03-02T01:42:32Z",
        "updatedAt": "2016-03-02T01:42:32Z",
        "author": {
          "login": "cdmihai"
        }
      }
    ]
  }
}