{
  "number": 6248,
  "title": "UsingTask with specific AssemblyFile fails with FileNotFoundException, despite the file existing",
  "body": "<!-- This is a template that helps us provide quicker feedback. Please use any relevant sections and delete anything you don't need. -->\r\n\r\n### Issue Description\r\nHello!\r\n\r\nI have a .targets file that tries to load a task from an Assembly DLL with UsingTask like this:\r\n```\r\n<UsingTask TaskName=\"SetEnv\" AssemblyFile=\"$(MSBuildThisFileDirectory)Microsoft.Build.CppTasks.Common.dll\"/>\r\n```\r\n\r\nAnd I'm getting this error, despite the file existing:\r\n```\r\nCould not load file or assembly 'Microsoft.Build.CPPTasks.Common.dll(...)' or one of its dependencies. The system cannot find the file specified.\r\n```\r\n\r\nThe .targets file where that's being done is \"tools\\MSBuild\\Microsoft\\VC\\v160\\Microsoft.Cpp.Current.targets\" and is located within the local vs2019_buildtools installation, version 16.8.4. I just import it in my .vcxproj.\r\n\r\n### Analysis\r\nI've retrieved latest MSBuild source code from the master branch (a13e20027d528310364bc40cbe2e079408ad82fe), compiled it, and managed to repro the issue. It seems the root of the problem lies in the \"MSBuild\" project, when it calls Assembly.UnsafeLoadFrom with the proper DLL as a path, throwing the FileNotFoundException with the message `Could not load file or assembly 'Microsoft.Build.CPPTasks.Common, Version=16.10.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. The system cannot find the file specified.`\r\n\r\nA sample project freshly created from vs wizard doesn't have the problem, and manages to load the DLL just fine with `UnsafeLoadFrom`, so I suspect one of the dependencies of MSBuild to trigger the issue. I don't know which one though.\r\n\r\nAlso note that this seems to only occur with MSBuild built for .net framework 4.7.2, the .net5 version seems to be doing the right thing.\r\n\r\n### Steps to Reproduce\r\n\r\n* Get the Microsoft.Build.CppTasks.Common.dll from a vs2019 16.8 build tools installation.\r\n* Change the Main entry point of MSBuild in the file `XMake.cs` like this (adapting the path):\r\n\r\n```csharp\r\n        [MTAThread]\r\n        public static int Main(\r\n#if !FEATURE_GET_COMMANDLINE\r\n            string [] args\r\n#endif\r\n            )\r\n        {\r\n            // the below line will throw \r\n            var assembly = Assembly.UnsafeLoadFrom(@\"d:\\vs2019_buildtools.16.8.4\\MSBuild\\Microsoft\\VC\\v160\\Microsoft.Build.CppTasks.Common.dll\");\r\n\r\n            return 0;\r\n        }\r\n```\r\n* Notice the exception when starting MSBuild\r\n\r\n\r\n### Expected Behavior\r\nNo exception\r\n\r\n### Actual Behavior\r\nThrows a FileNotFoundException.\r\n\r\n### Versions & Configurations\r\n* 16.9.0.11203, but latest in master branch (a13e20027d528310364bc40cbe2e079408ad82fe) has the same problem\r\n\r\nThanks!",
  "state": "CLOSED",
  "createdAt": "2021-03-12T12:31:14Z",
  "updatedAt": "2021-05-26T15:18:00Z",
  "closedAt": "2021-05-26T15:17:59Z",
  "author": {
    "login": "belkiss"
  },
  "labels": [
    "bug",
    "needs-triage"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Team Triage: cpp tasks are designed to always use the latest version of the task. There is an entry in our app.config that ensures that behavior. Since you are using a newer MSBuild and an older Microsoft.Build.CppTasks.Common.dll, the version msbuild wants doesn't match the version that you're providing.\r\n\r\nThe cpp team has relaxed this requirement for 17.0, but for now you must have the cpp workload installed in the visual studio instance that you're running msbuild from.\r\n\r\n/cc: @olgaark ",
        "createdAt": "2021-05-26T15:17:59Z",
        "updatedAt": "2021-05-26T15:17:59Z",
        "author": {
          "login": "benvillalobos"
        }
      }
    ]
  }
}