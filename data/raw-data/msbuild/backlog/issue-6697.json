{
  "number": 6697,
  "title": "Floating version for a custom SDK",
  "body": "Why NuGet-based SDK resolver requires exact version number:\r\n```XML\r\n<Project Sdk=\"My.Awesome.Sdk/1.0.3\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net5.0</TargetFramework>\r\n  </PropertyGroup>\r\n</Project>\r\n```\r\n \r\nAnd you can't specify a floating version (e.g. 1.0.*) available for NuGet Package Reference\r\n[https://docs.microsoft.com/en-us/nuget/concepts/package-versioning](https://docs.microsoft.com/en-us/nuget/concepts/package-versioning)",
  "state": "CLOSED",
  "createdAt": "2021-07-21T12:37:23Z",
  "updatedAt": "2021-07-22T16:38:03Z",
  "closedAt": "2021-07-22T16:38:03Z",
  "author": {
    "login": "apisarev"
  },
  "labels": [
    "needs-triage"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "MSBuild project SDKs fetched from NuGet are considered expensive.  This is because the APIs must query a URI and potentially download a package.  This operation must happen before a project is loaded so it has an impact on build times and can make Visual Studio slow for the first load of a project.  NuGet has a file-based caching mechanism so if a package is already on disk it does not need to query the network.  The NuGet-based MSBuild project SDK resolver heavily relies on this caching mechanism to ensure that project loading is fast as a package is only ever fetched once per version.  If you were able to use a floating version then NuGet would need to query the feed for every project load.  There is an HTTP cache but it only lasts an hour or two.  \r\n\r\nSo the NuGet-based MSBuild project SDK resolver will never support floating versions.  Systems are available now that update package versions for you in an automated way (like [dependabot](https://dependabot.com/)) so I would recommend that anyway.  Floating versions introduce non-deterministic behavior for the sake of convenience.  Automated version updates via the normal Pull Request process is much more precise without sacrificing determinism.",
        "createdAt": "2021-07-21T17:06:32Z",
        "updatedAt": "2021-07-21T17:06:32Z",
        "author": {
          "login": "jeffkl"
        }
      }
    ]
  }
}