{
  "number": 9389,
  "title": "[Feature Request]: Can the transitive dependencies be reduced any?",
  "body": "### Summary\n\nThe `Microsoft.Build.Utilities.Core` NuGet package is surprisingly heavyweight, dragging dozens of transitive NuGet dependencies into the project, including bizarre things like `System.Drawing.Common` and a whole host of security/permissions related things, none of which feel like they have anything to do with running a simple build script.  Is there any way that this could be cut down a bit?\n\n### Background and Motivation\n\nI'm trying to use ANTLR in my project.  [The ANTLR code generator](https://github.com/kaby76/Antlr4BuildTasks) uses `Microsoft.Build.Utilities.Core`, which drags 30+ other packages along for the ride, significantly slowing down the CI build machine, because there are a lot of projects that depend on this project and so *all* of them get entire this transitive dependency set pulled in.  Why in the world should I need all of that baggage just to build a parser?\n\n### Proposed Feature\n\nWould it be possible to examine the dependencies and see if there are any outdated references that can be trimmed?  We all know how projects that have been around for a while tend to accumulate cruft, afterall...\n\n### Alternative Designs\n\n_No response_",
  "state": "CLOSED",
  "createdAt": "2023-11-02T13:13:50Z",
  "updatedAt": "2023-11-02T19:22:10Z",
  "closedAt": "2023-11-02T19:22:09Z",
  "author": {
    "login": "masonwheeler"
  },
  "labels": [
    "Feature Request",
    "needs-triage"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "[Also asked the ANTLR code generator project if MSBuild is truly necessary for a code generator.](https://github.com/kaby76/Antlr4BuildTasks/issues/69)",
        "createdAt": "2023-11-02T13:14:23Z",
        "updatedAt": "2023-11-02T13:14:23Z",
        "author": {
          "login": "masonwheeler"
        }
      },
      {
        "body": "Compare to the [Microsoft.Build.Tasks.Git](https://www.nuget.org/packages/Microsoft.Build.Tasks.Git/1.1.1) package, which provides MSBuild tasks and does not depend on any NuGet packages -- it instead assumes that the process has already loaded the MSBuild DLLs.\r\n\r\n<https://nuget.info/packages/Antlr4BuildTasks/12.4.0> shows `lib/netstandard2.0/Antlr4BuildTasks.dll` depending on these:\r\n\r\n- Microsoft.Build.Framework, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\r\n- Microsoft.Build.Utilities.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\r\n- netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51\r\n- System.Buffers, Version=4.0.2.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51\r\n- System.Memory, Version=4.0.1.2, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51\r\n- System.Text.Encoding.CodePages, Version=7.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\r\n\r\nThe System.Text.Encoding.CodePages assembly dependency seems a bit suspect; I'm not sure that's always available in the MSBuild process, and I don't think the NuGet dependencies of Antlr4BuildTasks matter for that purpose at all.",
        "createdAt": "2023-11-02T14:43:32Z",
        "updatedAt": "2023-11-02T14:43:32Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "`System.Drawing.Common` has been removed for 17.8 by #9055.\r\n\r\n> a whole host of security/permissions related things, none of which feel like they have anything to do with running a simple build script.\r\n\r\nUnfortunately, many of them _do_ because build scripts are not reliably that simple. If you have any other specific ones to call out we can look at the nature of the dependency.",
        "createdAt": "2023-11-02T14:46:48Z",
        "updatedAt": "2023-11-02T14:46:48Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "In other words, Antlr4BuildTasks should\r\n\r\n- [mark dependencies as private](https://learn.microsoft.com/en-us/visualstudio/msbuild/tutorial-custom-task-code-generation?view=vs-2022#mark-dependencies-as-private) so that the resulting NuGet package does not depend on the packages that were used for building Antlr4BuildTasks\r\n- [bundle dependencies into the package](https://learn.microsoft.com/en-us/visualstudio/msbuild/tutorial-custom-task-code-generation?view=vs-2022#bundle-dependencies-into-the-package) so that System.Buffers, System.Memory, and System.Text.Encoding.CodePages can be loaded at build time even if MSBuild does not depend on the same versions",
        "createdAt": "2023-11-02T14:50:40Z",
        "updatedAt": "2023-11-02T14:50:40Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "> I'm trying to use ANTLR in my project. [The ANTLR code generator](https://github.com/kaby76/Antlr4BuildTasks) uses `Microsoft.Build.Utilities.Core`, which drags 30+ other packages along for the ride, significantly slowing down the CI build machine, because there are a lot of projects that depend on this project and so _all_ of them get entire this transitive dependency set pulled in.\r\n\r\nI agree with @KalleOlaviNiemitalo that the Antlr4BuildTasks package appears to be overselling its dependencies. You can work around this in your projects by minimizing the reference though, like\r\n\r\n```diff\r\n- <PackageReference Include=\"Antlr4BuildTasks\" Version=\"12.4.0\" />\r\n+ <PackageReference Include=\"Antlr4BuildTasks\" Version=\"12.4.0\" PrivateAssets=\"all\" IncludeAssets=\"build\" />\r\n```\r\n\r\nWhere `PrivateAssets` means \"don't flow to projects that reference me\" and `IncludeAssets=\"Build\"` means \"only use the build logic from this package, don't reference its library\".",
        "createdAt": "2023-11-02T14:51:54Z",
        "updatedAt": "2023-11-02T14:54:53Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@KalleOlaviNiemitalo \r\n\r\n> * [bundle dependencies into the package](https://learn.microsoft.com/en-us/visualstudio/msbuild/tutorial-custom-task-code-generation?view=vs-2022#bundle-dependencies-into-the-package) so that System.Buffers, System.Memory, and System.Text.Encoding.CodePages can be loaded at build time even if MSBuild does not depend on the same versions\r\n\r\nI think we provide all of those on all platforms (though bundling them would be basically harmless).",
        "createdAt": "2023-11-02T14:52:58Z",
        "updatedAt": "2023-11-02T14:52:58Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@KalleOlaviNiemitalo mind copying your (excellent) analysis over into https://github.com/kaby76/Antlr4BuildTasks/issues/69?",
        "createdAt": "2023-11-02T14:53:31Z",
        "updatedAt": "2023-11-02T14:53:31Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "It would depend on the version of MSBuild, right?  If a project referencing Antlr4BuildTasks is built in Visual Studio 2017, then the appdomain might have some version of System.Text.Encoding.CodePages loaded, but surely not version 7.0.0.0.",
        "createdAt": "2023-11-02T14:54:32Z",
        "updatedAt": "2023-11-02T14:54:32Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "> It would depend on the version of MSBuild, right? If a project referencing Antlr4BuildTasks is built in Visual Studio 2017, then the appdomain might have some version of System.Text.Encoding.CodePages loaded, but surely not version 7.0.0.0.\r\n\r\nGood point, that's very true.",
        "createdAt": "2023-11-02T14:55:10Z",
        "updatedAt": "2023-11-02T14:55:10Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> `System.Drawing.Common` has been removed for 17.8 by #9055.\r\n\r\nCool!  Any idea when we can expect to see it in NuGet?\r\n\r\n> I agree with @KalleOlaviNiemitalo that the Antlr4BuildTasks package appears to be overselling its dependencies. You can work around this in your projects by minimizing the reference though, like\r\n> \r\n> ```diff\r\n> - <PackageReference Include=\"Antlr4BuildTasks\" Version=\"12.4.0\" />\r\n> + <PackageReference Include=\"Antlr4BuildTasks\" Version=\"12.4.0\" PrivateAssets=\"all\" IncludeAssets=\"build\" />\r\n> ```\r\n> \r\n> Where `PrivateAssets` means \"don't flow to projects that reference me\" and `IncludeAssets=\"Build\"` means \"only use the build logic from this package, don't reference its library\".\r\n\r\nThanks!  That looks very helpful.  I recall seeing something similar added to the csproj by Sam Harwell's old, outdated version of the ANTLR code generator, but I didn't know what it did.  This updated version doesn't put that in automatically, though.",
        "createdAt": "2023-11-02T15:22:04Z",
        "updatedAt": "2023-11-02T15:22:04Z",
        "author": {
          "login": "masonwheeler"
        }
      },
      {
        "body": "> Cool! Any idea when we can expect to see it in NuGet?\r\n\r\nIt will release with .NET 8.0 and Visual Studio 17.8 soon.",
        "createdAt": "2023-11-02T19:20:20Z",
        "updatedAt": "2023-11-02T19:20:20Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "All right, and adding those attributes fixes the issue of dragging all those dependencies into all the downstream projects, so I'm good for now.",
        "createdAt": "2023-11-02T19:22:10Z",
        "updatedAt": "2023-11-02T19:22:10Z",
        "author": {
          "login": "masonwheeler"
        }
      }
    ]
  }
}