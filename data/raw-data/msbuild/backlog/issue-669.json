{
  "number": 669,
  "title": "Identifying tests is broken in xplat",
  "body": "`InternalErrorException.ConsiderDebuggerLaunch` is set up to launch the debugger if `!FileUtilities.RunningTests`: https://github.com/rainersigwald/msbuild/blob/bcf80f0923eb121b74ef43c47b28410988534691/src/Shared/InternalErrorException.cs#L119-L119\n\nThis is broken on the latest xplat with #666, because identifying tests is now more accurate (from master) but broken (because in netcore we are checking only `Process.GetCurrentProcess().ProcessName`, which is pretty much always `corerun.exe`).\n\nOn full framework, we fall back to checking `Environment.GetCommandLineArgs()[0]`, which would work correctly. We're not using it in netcore because it wasn't part of the API surface, but it [now is](https://github.com/dotnet/corefx/pull/4435). Unfortunately, it seems to be part of the `netstandard1.5` surface, while we target 1.3.\n\nI'm working around this by setting the opt-out environment variable `MSBUILDDONOTLAUNCHDEBUGGER` when running tests inside our build, but we should fix the underlying behavior.\n",
  "state": "CLOSED",
  "createdAt": "2016-06-01T15:08:37Z",
  "updatedAt": "2024-02-21T17:27:57Z",
  "closedAt": "2017-11-10T20:53:13Z",
  "author": {
    "login": "rainersigwald"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "I'd vote to just wait for corefx to start bringing stuff back, and as that happens, progressively undo our xplat only code, when possible.\n\nThis blog post suggest we'll see a lot of the missing APIs coming back: https://blogs.msdn.microsoft.com/dotnet/2016/05/27/making-it-easier-to-port-to-net-core/\n",
        "createdAt": "2016-06-01T19:08:38Z",
        "updatedAt": "2016-06-01T19:08:38Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "Agreed, but I'm not clear about the 1.3/1.5 implications. The API we want for this is available in .NET Core but not in netstandard1.3.\n",
        "createdAt": "2016-06-01T19:19:26Z",
        "updatedAt": "2016-06-01T19:19:26Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I guess we don't know yet how the APIs are coming back. Whether they'll get added to all netstandard versions, or will there be ns1.6, ns1.7, etc.\n\nIf they'll be coming back as bumped up ns numbers, I'd vote to just use reflection, like we do for Assembly.Location.\n",
        "createdAt": "2016-06-01T19:31:18Z",
        "updatedAt": "2016-06-01T19:31:39Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "@ericstj\n\nShould we just wait for corefx to bring back the APIs, or use reflection for Environment.GetCommandLine? :)\nOr, alternatively, really generate ns1.3 reference assemblies and then have specific runtime implementation dlls (net46, netcoreapp, mono), where GetCommandLine is actually available.\n",
        "createdAt": "2016-06-01T19:34:01Z",
        "updatedAt": "2016-06-01T19:34:01Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "We could also potentially make our test assemblies target netcoreapp, since they don't have the same compat requirement. Not sure if that'd catch everything (the code here is in Shared . . .).\n",
        "createdAt": "2016-06-01T19:34:40Z",
        "updatedAt": "2016-06-01T19:34:40Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Yea, unfortunately RunnerUtilities is a shared source file :(\n",
        "createdAt": "2016-06-01T20:56:57Z",
        "updatedAt": "2016-06-01T20:56:57Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "@cdmihai we've already brought it back, it's not going to come back further.  As you mention you could seperate ref and impl, then your portable impl could be built against a higher netstandard version and you could cover all your platforms through bait-and-switch.\n",
        "createdAt": "2016-06-01T22:32:32Z",
        "updatedAt": "2016-06-01T22:32:32Z",
        "author": {
          "login": "ericstj"
        }
      }
    ]
  }
}