{
  "number": 7972,
  "title": "dotnet publish uses debug configuration even if publishprofile has config=release",
  "body": "<!-- This is a template that helps us provide quicker feedback. Please use any relevant sections and delete anything you don't need. -->\r\n\r\n### Issue Description\r\n\r\nWhen publishing a project that has a publsh profile using Release, the program is being compiled in debug mode.\r\n\r\n### Steps to Reproduce\r\n\r\nI have a project that has this publish profile:\r\n\r\n```xml\r\n<Project>\r\n  <PropertyGroup>\r\n    <Configuration>Release</Configuration>\r\n    <Platform>Any CPU</Platform>\r\n    <PublishDir>bin\\Publish</PublishDir>\r\n    <PublishProtocol>FileSystem</PublishProtocol>\r\n    <_TargetId>Folder</_TargetId>\r\n    <TargetFramework>net6.0-windows</TargetFramework>\r\n    <RuntimeIdentifier>win-x64</RuntimeIdentifier>\r\n    <SelfContained>false</SelfContained>\r\n    <PublishSingleFile>true</PublishSingleFile>\r\n    <PublishReadyToRun>false</PublishReadyToRun>\r\n  </PropertyGroup>\r\n</Project>\r\n```\r\n\r\nAnd I publish the project using command line:\r\n\r\n```\r\ndotnet publish -p:PublishProfile=FolderProfile project.csproj\r\n```\r\n\r\nI assumed that, because the publish profile has RELEASE configuration, it's the configuration used for building the project.\r\n\r\nbut I have this code:\r\n\r\n```c#\r\n#if DEBUG\r\nConsole.WriteLine(\"Running in DEBUG\");\r\n#endif\r\n```\r\n\r\nWhich is, _unexpectedly_, executed when I run the program.\r\n\r\nIf I publish the project using this command line:\r\n\r\n```\r\ndotnet publish -p:PublishProfile=FolderProfile -c:Release project.csproj\r\n```\r\n\r\nEverything is fine.\r\n\r\nSo, what I don't understand is why, if the publish profile already has a Release configuration, why it's also needed by the command line.\r\n\r\n### Expected Behavior\r\n\r\nHaving Release configuration in the publish profile should be enough for dotnet to run a Release build.\r\n\r\n### Actual Behavior\r\n\r\nIf the command line does not have '-c:Release' even if publish profile already has it, the program is built using Debug mode.\r\n\r\n### Versions & Configurations\r\n\r\nSBuild version 17.3.1+2badb37d1 for .NET Framework\r\n17.3.1.41501\r\n\r\ndotnet --info\r\n.NET SDK (reflecting any global.json):\r\n Version:   6.0.401\r\n Commit:    0906eae6f8",
  "state": "OPEN",
  "createdAt": "2022-09-15T09:12:46Z",
  "updatedAt": "2024-06-24T13:28:42Z",
  "closedAt": null,
  "author": {
    "login": "vpenades"
  },
  "labels": [
    "bug",
    "Area: Application",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "@nagilson can you take a look at this publish profile issue?",
        "createdAt": "2022-09-15T14:12:55Z",
        "updatedAt": "2022-09-15T14:12:55Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Definitely, I'll take a look into why this is happening.",
        "createdAt": "2022-09-15T16:54:17Z",
        "updatedAt": "2022-09-15T16:54:17Z",
        "author": {
          "login": "nagilson"
        }
      },
      {
        "body": "`Configuration` is being set to `Release` by the Publish Profile but this looks like the same nonsense as the `PublishRelease` fiasco where it doesn't get imported early enough, so `DebugSymbols` and `OutputPath`, etc, are set to the wrong value. ",
        "createdAt": "2022-09-15T19:29:57Z",
        "updatedAt": "2022-09-15T19:29:57Z",
        "author": {
          "login": "nagilson"
        }
      },
      {
        "body": "@rainersigwald It's likely we could solve it in a similar way to how `PublishRelease` works, though that'd only take effect in the CLI and be kinda gross. An alternative is if we can make publish profiles basically the first or close to first thing that gets done in evaluation, which may have an impact on design time builds or something akin to that. We should discuss this further. ",
        "createdAt": "2022-09-15T21:22:36Z",
        "updatedAt": "2022-09-16T16:12:33Z",
        "author": {
          "login": "nagilson"
        }
      },
      {
        "body": "@rainersigwald @nagilson \r\n\r\nQuestion:\r\n\r\nWith dot net 8, I am seeing the opposite behavior - if I do not specify the configuration as Debug with the CLI and have Debug set as the configuration in the publish profile, the project gets published in Release build. \r\n\r\nCorrect me if I am wrong, but this is the same bug, albeit different outcome because of [the changes to publishing with dot net 8?](https://learn.microsoft.com/en-us/dotnet/core/compatibility/sdk/8.0/dotnet-publish-config)\r\n\r\n",
        "createdAt": "2024-01-20T02:09:45Z",
        "updatedAt": "2024-01-20T02:10:50Z",
        "author": {
          "login": "dragnilar"
        }
      },
      {
        "body": "Yeah, this is the same bug, but now the default is Release so it becomes Release :) ",
        "createdAt": "2024-01-23T17:11:49Z",
        "updatedAt": "2024-01-23T17:11:49Z",
        "author": {
          "login": "nagilson"
        }
      },
      {
        "body": "I'm encountering a similar issue, but it's doesn't matter whether I'm using a publishing profile.\r\n\r\nOne of my projects (ControlR.Streamer) will build/publish all the referenced projects in Debug, even when using Release configuration.  ControlR.Streamer itself will build/publish in Release, though.\r\n\r\nBut if I publish another project (ControlR.Agent) that references the same shared projects, they get built correctly in Release.\r\n\r\nMaybe there's an incorrect configuration somewhere, but I'm just not seeing it.  Any ideas?\r\n\r\n(Source can be found here on `experimental` branch:  https://github.com/bitbound/ControlR/tree/experimental)\r\n\r\n![image](https://github.com/dotnet/msbuild/assets/20995508/be32441e-1f42-4487-9623-7ebde7f6cdf3)\r\n",
        "createdAt": "2024-06-22T17:23:59Z",
        "updatedAt": "2024-06-22T17:23:59Z",
        "author": {
          "login": "bitbound"
        }
      },
      {
        "body": "IMO this is a duplicate of https://github.com/dotnet/sdk/issues/16792#issuecomment-1381937248 over at the SDK. Publish Profiles are not fully supported by the CLI in the same way they are inside VS, and at some point we should bring the CLI into alignment so users that use Publish Profiles have a bit more consistency.",
        "createdAt": "2024-06-22T17:26:39Z",
        "updatedAt": "2024-06-22T17:26:39Z",
        "author": {
          "login": "baronfel"
        }
      },
      {
        "body": "> IMO this is a duplicate of [dotnet/sdk#16792 (comment)](https://github.com/dotnet/sdk/issues/16792#issuecomment-1381937248) over at the SDK. Publish Profiles are not fully supported by the CLI in the same way they are inside VS, and at some point we should bring the CLI into alignment so users that use Publish Profiles have a bit more consistency.\r\n\r\nBut in my example above, I'm not using a publishing profile.\r\n\r\nI was also able to repro this a couple times on brand new projects created with `dotnet new console` and `dotnet new classlib`, but it was inconsistent.  I couldn't figure out what conditions suddenly caused it to happen, or why it would suddenly start working correctly again.",
        "createdAt": "2024-06-22T17:29:20Z",
        "updatedAt": "2024-06-22T17:29:20Z",
        "author": {
          "login": "bitbound"
        }
      },
      {
        "body": "@bitbound in your case I believe it's because the sln in the ControlR.Streamer directory doesn't contain all of the projects that ControlR.Streamer depends on. When you build a solution, the solution's 'default configuration' defaults determine which Configuration each project builds with, and when you have projects missing from a Solution but referenced from a project in that solution they get the 'default' from that Solution, which in this case seems to be Debug.\r\n\r\nI don't recommend having small solutions like this - consider a solution filter just for the Streamer project, or removing the solution at that project entirely. When I deleted the solution for Streamer only, a `publish` did build all referenced projects in the Release configuration as I expected. \r\n\r\nThe takeaway here is that _solution files are not representative of how you think your projects build_, one more reason why I don't care for them much :D",
        "createdAt": "2024-06-22T17:36:14Z",
        "updatedAt": "2024-06-22T17:37:17Z",
        "author": {
          "login": "baronfel"
        }
      },
      {
        "body": "@baronfel \r\n\r\nHah!  I figured I was just missing something.  :)  That solution file wasn't supposed to be there.  It was a copy/paste mistake.\r\n\r\nThanks for your loaning me your eyes, good sir!",
        "createdAt": "2024-06-22T17:40:13Z",
        "updatedAt": "2024-06-22T17:40:13Z",
        "author": {
          "login": "bitbound"
        }
      },
      {
        "body": "What I did here was to add -bl to the publish command, so I could get a binlog, and then loaded the binlog into the binlog viewer. That let me drill down into how the Streamer project was asking for the other projects to be built, and when I saw the sln appear I knew that was the core problem. \n\nI'd highly recommend taking a look at binlogs, they're super handy for this kind of investigation! ",
        "createdAt": "2024-06-22T17:42:49Z",
        "updatedAt": "2024-06-22T17:42:49Z",
        "author": {
          "login": "baronfel"
        }
      },
      {
        "body": "TIL!  Thanks for the tip!  That will definitely be useful in the future.",
        "createdAt": "2024-06-22T17:43:46Z",
        "updatedAt": "2024-06-22T17:43:46Z",
        "author": {
          "login": "bitbound"
        }
      },
      {
        "body": "> When you build a solution, the solution's 'default configuration' defaults determine which Configuration each project builds with, and when you have projects missing from a Solution but referenced from a project in that solution they get the 'default' from that Solution, which in this case seems to be Debug.\r\n\r\nNit: when a project goes outside the solution, you get (by default, there's `$(ShouldUnsetParentConfigurationAndPlatform)`) the _referenced project's_ default configuration, which is almost always Debug.",
        "createdAt": "2024-06-24T13:28:40Z",
        "updatedAt": "2024-06-24T13:28:40Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}