{
  "number": 4740,
  "title": "Non-Resx Embedded Resources get mangled names, possible name collisions",
  "body": "I was able to create a small repro \r\n\r\nthe csproj looks like this\r\n```csproj\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp3.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <EmbeddedResource Include=\"MyResource.bmp\" WithCulture=\"false\" Type=\"Non-Resx\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nProgram.cs\r\n```C#\r\nnamespace resourceName\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            Console.WriteLine(MyResource.Get()?.Length ?? -1);\r\n        }\r\n    }\r\n}\r\n```\r\nMyResource.cs\r\n```C#\r\nnamespace resourceName\r\n{\r\n    public static class MyResource\r\n    {\r\n        public static Stream Get() => typeof(MyResource).Assembly.GetManifestResourceStream($\"{nameof(resourceName)}.{nameof(MyResource)}.bmp\");\r\n    }\r\n}\r\n```\r\n\r\nRunning this code under preview 7 gives output as \r\n```\r\nC:\\git\\scratch\\resourceName>dotnet.exe run\r\n485514\r\n```\r\n\r\nwhere as running this code under preview 9 gives output as\r\n```\r\nC:\\git\\corefx>dotnet c:\\git\\scratch\\resourceName\\bin\\Debug\\netcoreapp3.0\\resourceName.dll\r\n-1\r\n```\r\n\r\n\r\nI checked dlls\r\nthe resource name include in .dll in previe9 is resourceName.MyResource where as under preview 7 is  resourceName.MyResource.bmp \r\n\r\n\r\nI hit this error while building corefx with preview9 for testData.resources file.\r\n\r\nThis works fine with 5.0 as well.\r\n\r\ncc @ericstj @danmosemsft @livarcocc \r\n",
  "state": "CLOSED",
  "createdAt": "2019-09-17T21:00:14Z",
  "updatedAt": "2024-02-21T17:07:03Z",
  "closedAt": "2019-10-07T20:13:29Z",
  "author": {
    "login": "Anipik"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "benvillalobos"
      }
    ]
  },
  "milestone": {
    "title": "MSBuild 16.4"
  },
  "comments": {
    "nodes": [
      {
        "body": "@Anipik can you zip up the project and add it to the issue?  Does setting `EmbeddedResourceUseDependentUponConvention = false` also fix it?",
        "createdAt": "2019-09-17T21:30:48Z",
        "updatedAt": "2019-09-17T21:30:48Z",
        "author": {
          "login": "ericstj"
        }
      },
      {
        "body": "yes setting ```EmbeddedResourceUseDependentUponConvention ``` to false fixes it for preview9\r\n[MyResource.zip](https://github.com/microsoft/msbuild/files/3623541/MyResource.zip)\r\n",
        "createdAt": "2019-09-17T21:35:01Z",
        "updatedAt": "2019-09-17T21:35:01Z",
        "author": {
          "login": "Anipik"
        }
      },
      {
        "body": "Looks like this was regressed with https://github.com/microsoft/msbuild/pull/4597.  @BenVillalobos @rainersigwald \r\n\r\nI wonder if the DependentUpon heuristic should be scoped a little?",
        "createdAt": "2019-09-17T21:46:52Z",
        "updatedAt": "2019-09-17T21:46:52Z",
        "author": {
          "login": "ericstj"
        }
      },
      {
        "body": "We probably should have only applied the convention to .resx resources.",
        "createdAt": "2019-09-19T04:36:22Z",
        "updatedAt": "2019-09-19T04:36:22Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "If we want to change this, we should do it ideally quickly as it would be breaking to change the resource names again. I think we're too late for 3.0 which makes this difficult. :(",
        "createdAt": "2019-09-19T04:40:44Z",
        "updatedAt": "2019-09-19T04:40:44Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "Restricting to resx makes sense because that is the case that would have been persisted with DependentUpon in a classic project. I'm not aware of anything that would have put DependentUpon for non-resx in your project unless you did it manually so I don't think it should have been part of the convention to do so.",
        "createdAt": "2019-09-19T04:42:31Z",
        "updatedAt": "2019-09-19T04:42:31Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "A very similar repro could be constructed for a resx though, in some cases the convention will pick a different name than earlier previews (that's the point of the change after all) so it is to be expected that some projects will be broken by the convention, this is why I insisted on scoping the default to TFM so that it would only break 3.0 preview projects. But it is unfortunate that non-resx is affected at all.",
        "createdAt": "2019-09-19T04:45:07Z",
        "updatedAt": "2019-09-19T04:45:07Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "It turns out that this changes the extension from .bmp or .jpg or whatever else non-resx to blank. So even if the source file found by convention has first class RootNamespace.Folder.Filename, the manifest resource will not match what you would get without the inferred DependentUpon",
        "createdAt": "2019-09-19T05:07:20Z",
        "updatedAt": "2019-09-19T05:07:20Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "I imagine there will also be build errors if you have say Foo.txt and Foo.bmp as embedded resources next to Foo.cs. Without preserving the extension, this will cause duplicate resource names.",
        "createdAt": "2019-09-19T05:29:43Z",
        "updatedAt": "2019-09-19T05:29:43Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "Looks like there's another related failure mode here:\r\n\r\n```\r\nerror CS1508: Resource identifier 'C' has already been used in this assembly\"\r\n```\r\n\r\nFrom https://dev.azure.com/dnceng/public/_build/results?buildId=361408&view=results (thanks, @ViktorHofer).\r\n\r\nWe'll have to dig in, but I suspect this is the thing Nick predicted\r\n\r\n> I imagine there will also be build errors if you have say Foo.txt and Foo.bmp as embedded resources next to Foo.cs. Without preserving the extension, this will cause duplicate resource names.",
        "createdAt": "2019-09-20T18:20:03Z",
        "updatedAt": "2019-09-20T18:20:03Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "That CSC failure is because these source files have a class named C in them: \r\nhttps://github.com/dotnet/corefx/blob/b020d0033ffe755f779c564186fc2d98b0af31cc/src/System.Reflection.Metadata/tests/Resources/Misc/Members.cs#L7\r\nhttps://github.com/dotnet/corefx/blob/b020d0033ffe755f779c564186fc2d98b0af31cc/src/System.Reflection.Metadata/tests/Resources/Misc/Debug.cs#L7\r\n\r\nAnd they have DLLs embedded with the same name as the source file:\r\nhttps://github.com/dotnet/corefx/tree/master/src/System.Reflection.Metadata/tests/Resources/Misc\r\n",
        "createdAt": "2019-09-20T18:36:13Z",
        "updatedAt": "2019-09-20T18:36:13Z",
        "author": {
          "login": "ericstj"
        }
      },
      {
        "body": "Alright, I think we need to remove the convention from affecting non-resx resources. It's becoming pretty clear to me that the odds of wanting the convention to apply (even if it preserved extension) are close to zero. I suspect eveyone in this case is going to disable the convention.\r\n\r\nThis is strictly a breaking change from 3.0 /16.3 GA (assuming we cannot get this fix into that, and I don't think we can), but I will bet that most of the people who hit this will disable the convention entirely and therefore not get re-broken when it gets less aggressive.\r\n\r\nI would consider taking this in 16.0.x/3.0.1xx servicing as quickly as feasible so that the window of time to take a dependency on this odd, non-deliberate fallout from the change is as short as possible.\r\n\r\n@livarcocc @ericstj @rainersigwald Do you agree?",
        "createdAt": "2019-09-20T19:24:05Z",
        "updatedAt": "2019-09-20T19:24:26Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "restrict convention to `.resx`: yes\r\n\r\nservice for it: probably",
        "createdAt": "2019-09-20T19:29:28Z",
        "updatedAt": "2019-09-20T19:29:28Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Maybe 16.4/3.1 being not too far out is good enough. If we think most people with this code pattern will have to disable the convention, then it's not really breaking, and will help others who only move to 3.x when it goes LTS.",
        "createdAt": "2019-09-20T19:38:16Z",
        "updatedAt": "2019-09-20T19:38:16Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "Just a note that there is another hit count on this from a customer in a mail thread.",
        "createdAt": "2019-09-20T21:19:14Z",
        "updatedAt": "2019-09-20T21:19:14Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "HitCount++\r\n\r\nhttps://twitter.com/simoncropp/status/1175385910919090176?s=21\r\n\r\nThis one is the other duplicate name case I predicted.",
        "createdAt": "2019-09-21T14:14:07Z",
        "updatedAt": "2019-09-21T14:14:07Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "Got hit by this in all my projects, after upgrading to VS 16.3 \r\nThe error was **CS1508**: The resource identifier ... has already been used in this assembly\r\nI have resources that generated on build and somehow msbuild made all the wrong assumptions, on how to name them. I got a lot of lines in **CreateCSharpManifestResourceName**  like this\r\nResource file 'blah..' gets manifest resource name 'wrong_name_blah'.\r\n\r\nThankfully the EmbeddedResourceUseDependentUponConvention=false workaround works, but it took me 3 missing hours to figure what happen.\r\nSorry for the long post, I am actually trying to make it google searchable, if anyone has the same problem",
        "createdAt": "2019-09-24T14:39:46Z",
        "updatedAt": "2019-09-24T14:39:46Z",
        "author": {
          "login": "panost"
        }
      },
      {
        "body": "@panost i feel your pain. i burnt 2 hours :)",
        "createdAt": "2019-09-24T23:19:49Z",
        "updatedAt": "2019-09-24T23:19:49Z",
        "author": {
          "login": "SimonCropp"
        }
      },
      {
        "body": "Sorry for the troubles, folks. This issue is now listed as a [.NET Core 3.0 known issue](https://github.com/dotnet/core/blob/master/release-notes/3.0/3.0-known-issues.md#preview-9) to hopefully improve visibility.",
        "createdAt": "2019-09-25T14:32:34Z",
        "updatedAt": "2019-09-25T14:32:34Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Fixed for 16.3 servicing (and 16.4) by #4764.",
        "createdAt": "2019-10-07T20:13:29Z",
        "updatedAt": "2019-10-07T20:13:29Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "For folks who stumble onto this closed issue, refer to this [dotnet docs issue](https://github.com/dotnet/docs/issues/16964) for a detailed explanation on how manifest resource naming works now.",
        "createdAt": "2020-02-03T23:20:50Z",
        "updatedAt": "2020-02-03T23:20:50Z",
        "author": {
          "login": "benvillalobos"
        }
      }
    ]
  }
}