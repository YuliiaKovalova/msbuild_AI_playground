{
  "number": 6032,
  "title": "Update Projects Targeting `netstandard2.0`",
  "body": "From Rainer [in this thread]():\r\n> I don't think there's a good reason to not retarget that. But it doesn't have to be in this PR. Reasons to do it: use new APIs etc in tasks, which is a good thing.\r\n\r\n\"That\", being any project that targets netstandard2.0 still.",
  "state": "CLOSED",
  "createdAt": "2021-01-13T23:26:39Z",
  "updatedAt": "2024-02-21T14:15:41Z",
  "closedAt": "2022-03-07T19:19:06Z",
  "author": {
    "login": "benvillalobos"
  },
  "labels": [
    "Area: Our Own Build",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "benvillalobos"
      }
    ]
  },
  "milestone": {
    "title": "VS 17.2"
  },
  "comments": {
    "nodes": [
      {
        "body": "Any given version of MSBuild runs in the standard shipping configuration on one runtime: the one of the SDK in which its distributed. So I think all of our assemblies should directly target `net5.0` (or 6.0, and on into the future) for MSBuild on .NET (Core).\r\n\r\nI think there are two reasons to think about preferring netstandard:\r\n\r\n1. Task authoring\r\n2. API consumers\r\n\r\nNeither really supports netstandard: if your task has any dependencies, you'll need the ones for the right runtime, so people are basically forced to multitarget task assemblies. And if you're using the API you'll need Locator, which must multitarget because of the radically different discovery mechanisms between Core and Framework, so no advantage there either.",
        "createdAt": "2021-01-14T15:15:03Z",
        "updatedAt": "2021-01-14T15:15:03Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald we have some build task libraries which are built against .NET Standard 2.0. They have also dependencies (.NET Standard 2.0) Does that mean that they need to be retargeted to .NET48 and NET5 in the future? I'm a bit afraid that this would doubly the package sizes of packages that are often large, because build packages with tasks need to bring all their dependencies with them.",
        "createdAt": "2021-01-16T06:02:58Z",
        "updatedAt": "2021-01-16T06:11:48Z",
        "author": {
          "login": "TFTomSun"
        }
      },
      {
        "body": "The \"in this thread\" link seems to be invalid somehow. In Safari, it points to back to this issue <https://github.com/dotnet/msbuild/issues/6032>; in the GitHub mobile app, it points to <http://localhost/>.",
        "createdAt": "2021-07-25T14:15:07Z",
        "updatedAt": "2021-07-25T14:15:07Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "I wanted to use the [Microsoft.Build.Construction](https://docs.microsoft.com/dotnet/api/microsoft.build.construction?view=msbuild-16-netcore) API on netstandard2.0 for loading a project file, editing it, and saving it; not for defining tasks or calling targets. Because [Microsoft.Build/16.0.461](https://www.nuget.org/packages/Microsoft.Build/16.0.461) and later versions no longer support netstandard2.0, and older versions may be completely unable to load projects that contain elements defined in newer versions (like MSBuild 4.0 does not tolerate the Sdk element), I ended up loading the project file in XML DOM and analysing it ad hoc, which was rather cumbersome with the case insensitivity and the optional XML namespace. However:\n\n- This ship already sailed in <https://github.com/dotnet/msbuild/pull/3528>.\n- I'm not sure whether MSBuild loaded from the NuGet package would even have been able to locate the SDKs that it would have needed for evaluating the values of properties, whereas the ad hoc code can skip most of that and still be compatible with the project files that it needs to edit.",
        "createdAt": "2021-07-25T14:49:27Z",
        "updatedAt": "2021-07-25T14:49:27Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "I agree with @TFTomSun, `Microsoft.Build.Framework` and `Microsoft.Build.Utilities.Core` should still target .NET Standard 2.0.\r\n\r\n> [I]f your task has any dependencies, you'll need the ones for the right runtime, so people are basically forced to multitarget task assemblies.\r\n\r\nNot if all the task's dependencies target .NET Standard 2.0; I maintain a task package that falls under this category.",
        "createdAt": "2022-01-12T00:18:05Z",
        "updatedAt": "2022-01-12T00:18:05Z",
        "author": {
          "login": "teo-tsirpanis"
        }
      },
      {
        "body": "We had decided offline that we will no longer _target_ .NET Standard 2.0, but we will continue to produce a reference assembly for NS2.0 that would keep things working. And we should have noted that here.",
        "createdAt": "2022-01-12T18:45:39Z",
        "updatedAt": "2022-01-12T18:45:39Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald Can you tell a bit more about how this NS2.0 reference assembly can be consumed then? It's not clear to me what \"not target netstandard, but produce reference assembly for netstandard\" means.",
        "createdAt": "2022-01-13T06:42:29Z",
        "updatedAt": "2022-01-13T06:42:29Z",
        "author": {
          "login": "TFTomSun"
        }
      },
      {
        "body": "It means, that for your tasks it will reference those reference assemblies to be able to compile, but at runtime msbuild would load the versons shipped with itself when the task is loaded.",
        "createdAt": "2022-01-13T06:51:00Z",
        "updatedAt": "2022-01-13T06:51:13Z",
        "author": {
          "login": "AraHaan"
        }
      }
    ]
  }
}