{
  "number": 9159,
  "title": "[Feature Request]: Solution Filters for target frameworks as well as projects",
  "body": "### Summary\r\n\r\nSolution filters would allow us to configure\r\n- subsets of projects to develop/build\r\n- **_and_** subsets of frameworksto target for those builds\r\n\r\n### Background and Motivation\r\n\r\nCurrently we have multiple solution files in our repository. One of these exists mainly to enable us to set some flags in the `Directory.Build.props`, which get used later on to determine which frameworks to target. \r\n\r\nMaintaining multiple solution files in a large project is a pain though. Ideally we'd have one solution file that contained all of the projects in the repository and we would have multiple solution filters. \r\n\r\nSolution filters would allow us to configure\r\n- subsets of projects to develop/build\r\n- subsets of frameworksto target for those builds\r\n\r\nSo this is not a case of changing the build behaviour... it's just being able to filter the builds down to a more granular level than by project (we want to filter by target framework as well). \r\n\r\n### Proposed Feature\r\n\r\nThere are lots of possible designs. Picking the first one that comes to mind (not always the best):\r\n- `*.slnf` files could have a `<TargetFrameworksFilter>` property\r\n- build files (like `*.csproj`) could use that to filter the frameworks they target\r\n\r\nFor example, imagine a solution filter `My.slnf`:\r\n```\r\n{\r\n  \"targetFrameworksFilter\": \"net6.0;net5.0\",\r\n  \"solution\": {\r\n    \"path\": \"My.sln\",\r\n    \"projects\": [\r\n      \"My.csproj\",\r\n    ]\r\n  }\r\n}\r\n```\r\n\r\nAnd the following snippet in the `My.csproj`:\r\n```\r\n<TargetFrameworks Filter=\"TargetFrameworksFilter\">net6.0;net5.0;netcoreapp3.0;netstandard2.1;netstandard2.0;net461</TargetFrameworks>\r\n```\r\n\r\nWhen buliding `My.csproj` ordinarily, builds would be created for all 6 of the target frameworks. However when building `My.slnf`, builds would only be created for `net6.0` and `net5.0`.\r\n\r\n### Alternative Designs\r\n\r\nCurrently you can add conditions based on the solution name like:\r\n```\r\n<PropertyGroup Condition=\"'$(SolutionName)' != 'MySolution'\">\r\n```\r\n\r\nIf it was possible to add conditions based on the solution filter name as well, then that would also provide a way of changing target frameworks based on the solution filter being applied:\r\n\r\n```\r\n<TargetFrameworks Condition=\"$(SolutionFilterName)' != 'MyFilter'\">$(TargetFrameworks);net6.0-android</TargetFrameworks>\r\n```\r\n\r\nThat would be a more flexible solution, but then it might also give you enough rope to hang yourself. ",
  "state": "CLOSED",
  "createdAt": "2023-08-24T01:54:34Z",
  "updatedAt": "2023-08-24T22:15:48Z",
  "closedAt": "2023-08-24T15:16:19Z",
  "author": {
    "login": "jamescrosswell"
  },
  "labels": [
    "Feature Request",
    "needs-triage"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "What we need is a concept of Build Profiles for solutions and Target Profiles for projects. This should solve the problem of custom builds. But first we need to have a MSBuild native solution file format. Solution files are a concept tied to VS IDE only right now! They are verbose and not human friendly. There's an issue open, requesting to modernize the solution file.",
        "createdAt": "2023-08-24T02:37:09Z",
        "updatedAt": "2023-08-24T02:37:09Z",
        "author": {
          "login": "Nirmal4G"
        }
      },
      {
        "body": "Then again, `SolutionFilterName` provides an interim relief for those who doesn't want/like to maintain multiple solutions. I know that is a nightmare. Sure, tools like SlnGen makes it easy but still not source control friendly.",
        "createdAt": "2023-08-24T02:38:44Z",
        "updatedAt": "2023-08-24T02:38:44Z",
        "author": {
          "login": "Nirmal4G"
        }
      },
      {
        "body": "> There's an issue open, requesting to modernize the solution file.\r\n\r\n@Nirmal4G Is that open issue in a public place where comments and votes can be added in support of the request?",
        "createdAt": "2023-08-24T14:00:04Z",
        "updatedAt": "2023-08-24T14:00:04Z",
        "author": {
          "login": "jrdodds"
        }
      },
      {
        "body": "@jrdodds\n\n_I was commenting from mobile and was too lazy to search for the issue number._\n\nTo answer your Q\u2014YES, the issue is public, been there for 7 years and here it is: #1730",
        "createdAt": "2023-08-24T14:50:27Z",
        "updatedAt": "2023-08-24T14:50:27Z",
        "author": {
          "login": "Nirmal4G"
        }
      },
      {
        "body": "Please file desired features for `.slnf` as [Visual Studio feedback](https://docs.microsoft.com/visualstudio/ide/feedback-options)--it is a Visual Studio feature that MSBuild mimics, not something MSBuild should extend.",
        "createdAt": "2023-08-24T15:16:19Z",
        "updatedAt": "2023-08-24T15:16:19Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I'm using solution filters with Jetbrains Rider myself... And on our CI servers we're running builds against solution filters just using dotnet build. So I'm not sure how the visual studio team could implement this. It needs support in msbuild right?",
        "createdAt": "2023-08-24T19:35:01Z",
        "updatedAt": "2023-08-24T19:35:01Z",
        "author": {
          "login": "jamescrosswell"
        }
      },
      {
        "body": "Like the `.sln` format, the `.slnf` format is defined and controlled by Visual Studio, and some features of it are supported in MSBuild. If you talk the VS folks into adding this feature MSBuild could potentially be extended to support it. But extending MSBuild to support it _without_ VS support doesn't make sense--the dependency and direction should go the other way.",
        "createdAt": "2023-08-24T19:38:30Z",
        "updatedAt": "2023-08-24T19:38:30Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Understood, thanks @rainersigwald !",
        "createdAt": "2023-08-24T22:15:47Z",
        "updatedAt": "2023-08-24T22:15:47Z",
        "author": {
          "login": "jamescrosswell"
        }
      }
    ]
  }
}