{
  "number": 6536,
  "title": "NGEN images are being rejected by Dev17 msbuild.exe",
  "body": "### Issue Description\r\n\r\nMultiple NGEN images are being rejected in Dev17 msbuild.exe with REJECT_IL_SIG.\r\n\r\n### Steps to Reproduce\r\n\r\nRun msbuild.exe from VS 2022 developer command prompt.\r\n\r\n### Expected Behavior\r\n\r\nNGEN images are used for all dependencies, subject to CLR/loader limitations, and provided that NGEN had a chance to generate respective native images.\r\n\r\n### Actual Behavior\r\n\r\n```\r\nThreadID=\"36,068\" ClrInstanceID=\"7\" BindingID=\"7,736,336\" ReasonCode=\"REJECT_IL_SIG\" AssemblyName=\"MSBuild, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\"\r\nThreadID=\"36,068\" ClrInstanceID=\"7\" BindingID=\"7,736,336\" ReasonCode=\"REJECT_IL_SIG\" AssemblyName=\"MSBuild, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\"\r\nThreadID=\"36,068\" ClrInstanceID=\"7\" BindingID=\"7,736,336\" ReasonCode=\"REJECT_IL_SIG\" AssemblyName=\"MSBuild, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\"\r\nThreadID=\"36,068\" ClrInstanceID=\"7\" BindingID=\"7,736,336\" ReasonCode=\"REJECT_IL_SIG\" AssemblyName=\"System.Memory, Version=4.0.1.1, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51\"\r\nThreadID=\"36,068\" ClrInstanceID=\"7\" BindingID=\"8,307,184\" ReasonCode=\"REJECT_IL_SIG\" AssemblyName=\"System.Memory, Version=4.0.1.1, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51\"\r\nThreadID=\"36,068\" ClrInstanceID=\"7\" BindingID=\"8,307,184\" ReasonCode=\"REJECT_IL_SIG\" AssemblyName=\"Microsoft.NET.StringTools, Version=1.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\"\r\nThreadID=\"36,068\" ClrInstanceID=\"7\" BindingID=\"8,308,816\" ReasonCode=\"REJECT_IL_SIG\" AssemblyName=\"System.Numerics.Vectors, Version=4.1.4.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\"\r\nThreadID=\"30,588\" ClrInstanceID=\"7\" BindingID=\"84,076,792\" ReasonCode=\"REJECT_IL_SIG\" AssemblyName=\"Microsoft.Build.Framework, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\"\r\n```\r\n\r\n### Analysis\r\n\r\nREJECT_IL_SIG appears to be undocumented.\r\n\r\n### Versions & Configurations\r\n\r\nMicrosoft (R) Build Engine version 17.0.0-preview-21301-04+f9c4fd3b3 for .NET Framework\r\n\r\n### Attach a binlog\r\n\r\nN/A",
  "state": "CLOSED",
  "createdAt": "2021-06-08T11:30:18Z",
  "updatedAt": "2024-02-21T14:13:05Z",
  "closedAt": "2021-06-22T06:03:56Z",
  "author": {
    "login": "ladipro"
  },
  "labels": [
    "bug",
    "Area: Performance",
    "Visual Studio",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "ChrisAhna"
      },
      {
        "login": "ladipro"
      }
    ]
  },
  "milestone": {
    "title": "VS 17.0"
  },
  "comments": {
    "nodes": [
      {
        "body": "The good:\r\n1. I am not seeing these failures in the VS process, only in MSBuild.exe.\r\n\r\nThe bad:\r\n1. We are currently not NGENing the 64-bit MSBuild.exe as part of VS installation so the .exe is always being JITted.\r\n\r\n2. Even after \"NGENing the world\" - using both MSBuild.exe and its dependencies as roots and passing the right .exe.config - I am still getting REJECT_IL_SIG  for these two assemblies when running 64-bit MSBuild.exe:\r\n a. **Microsoft.Build.Utilities.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a**\r\n b. **System.Memory, Version=4.0.1.1, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51**\r\n\r\nIt's not clear what it's complaining about and what makes these two assemblies different from the rest.\r\n\r\nFor example (note I'm running NGEN against both copies of the file in case it makes a difference):\r\n\r\n```\r\n>\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\ngen install \"C:\\Program Files\\Microsoft Visual Studio\\2022\\Preview\\MSBuild\\Current\\Bin\\amd64\\Microsoft.Build.Utilities.Core.dll\" /Verbose /ExeConfig:\"C:\\Program Files\\Microsoft Visual Studio\\2022\\Preview\\MSBuild\\Current\\Bin\\amd64\\MSBuild.exe\"\r\nMicrosoft (R) CLR Native Image Generator - Version 4.8.4320.0\r\nCopyright (c) Microsoft Corporation.  All rights reserved.\r\nInstalling assembly C:\\Program Files\\Microsoft Visual Studio\\2022\\Preview\\MSBuild\\Current\\Bin\\amd64\\Microsoft.Build.Utilities.Core.dll\r\nAll compilation targets are up to date.\r\n\r\n>\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\ngen install \"C:\\Program Files\\Microsoft Visual Studio\\2022\\Preview\\MSBuild\\Current\\Bin\\Microsoft.Build.Utilities.Core.dll\" /Verbose /ExeConfig:\"C:\\Program Files\\Microsoft Visual Studio\\2022\\Preview\\MSBuild\\Current\\Bin\\amd64\\MSBuild.exe\"\r\nMicrosoft (R) CLR Native Image Generator - Version 4.8.4320.0\r\nCopyright (c) Microsoft Corporation.  All rights reserved.\r\nInstalling assembly C:\\Program Files\\Microsoft Visual Studio\\2022\\Preview\\MSBuild\\Current\\Bin\\Microsoft.Build.Utilities.Core.dll\r\nAll compilation targets are up to date.\r\n```\r\n\r\nand `Microsoft.Build.Utilities.Core.dll` is still failing to bind to the image with `REJECT_IL_SIG`.",
        "createdAt": "2021-06-10T11:24:18Z",
        "updatedAt": "2021-06-10T11:24:18Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "For System.Memory, ngen display /verbose is complaining about ** Missing dependency assembly **, even when passed /execonfig with the right binding redirect from version 4.0.4.1 to 5.0.0.0. Doesn't explain why we have the `REJECT_IL_SIG` problem only on 64-bit, though. Red herring? Calling it out here just in case.\r\n\r\n```\r\nSystem.Memory, Version=4.0.1.1, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51\r\n        Source MVID:    {16786CFD-571C-4686-9830-21CFCEE42FB4}\r\n        NGen GUID sign: {B80B2AB0-54DF-A712-66BC-23A9CE9B61EB}\r\n        OS:             WinNT\r\n        Processor:      amd64\r\n        Runtime:        4.0.30319.0\r\n        clr.dll:        TimeStamp=5F7E616E, VirtualSize=00AC2000\r\n        Flags:\r\n        Scenarios:              <no debug info> <no debugger> <no profiler> <no instrumentation>\r\n        File:           C:\\WINDOWS\\assembly\\NativeImages_v4.0.30319_64\\System.Memory\\b02a0bb8df5412a766bc23a9ce9b61eb\\System.Memory.ni.dll\r\n        Dependencies:\r\n                System.Memory, Version=4.0.1.1, PublicKeyToken=cc7b13ffcd2ddd51:\r\n                        Guid:{16786CFD-571C-4686-9830-21CFCEE42FB4}\r\n                mscorlib, Version=4.0.0.0, PublicKeyToken=b77a5c561934e089:\r\n                        Guid:{62FFEEB7-EC02-4BEA-B61E-5FBF8D44AC5B}\r\n                        Hardbound Guid:{CA7747ED-3EE8-C91F-087A-C3DC82CF23AB}\r\n                System.Numerics.Vectors, Version=4.1.4.0, PublicKeyToken=b03f5f7f11d50a3a:\r\n                        Guid:{34905ED1-DB9D-4250-B31B-B80E1FF70FF5}\r\n                System, Version=4.0.0.0, PublicKeyToken=b77a5c561934e089:\r\n                        Guid:{394C8FAE-4BA1-4DD2-A259-BD441D5BEF25}\r\n                        Hardbound Guid:{CC02D35D-5118-7046-950E-7F3FBEBDDB06}\r\n                System.Runtime.CompilerServices.Unsafe, Version=4.0.4.1, PublicKeyToken=b03f5f7f11d50a3a:\r\n                        ** Missing dependency assembly **\r\n                System.Buffers, Version=4.0.3.0, PublicKeyToken=cc7b13ffcd2ddd51:\r\n                        Guid:{F389CA43-32BF-4E24-AD8C-A6ED5EFDDFF3}\r\n```",
        "createdAt": "2021-06-10T12:09:19Z",
        "updatedAt": "2021-06-10T12:09:19Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "@vitek-karas I don't think I can make further progress without understanding what `REJECT_IL_SIG` means. Assembly identities match (after applying the relevant binding redirects) and MVIDs match, so not sure what we're doing wrong. Please find details above. The summary is that there are still two native images that I haven't been able to convince the CLR to load.",
        "createdAt": "2021-06-10T12:13:46Z",
        "updatedAt": "2021-06-10T12:13:46Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "I looked through the code (not really my area of expertise) - and as far as I can tell this is a protection which allows perf optimizations (runtime can make assumptions about the NGEN image before actually fully opening it). The specific failure would happen if there's a mismatch in MVIDs. If I read the code correctly the mismatch would be between the IL and the `.aux` file. But I don't know how this is supposed to work. I'll ask around.",
        "createdAt": "2021-06-10T15:27:41Z",
        "updatedAt": "2021-06-10T15:27:41Z",
        "author": {
          "login": "vitek-karas"
        }
      },
      {
        "body": "Added @ChrisAhna to assignees as he's agreed to help root cause the `REJECT_IL_SIG` issue.",
        "createdAt": "2021-06-16T14:04:18Z",
        "updatedAt": "2021-06-16T14:04:18Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "The investigation has revealed that some machine-wide NGEN usage patterns lead to spurious `REJECT_IL_SIG` events. These events alone do not necessarily mean that native images are not being loaded, which was the case here for most loads. It's just an indication of the loader rejecting some native image *candidates*.\r\n\r\nI have opened a [separate issue](https://github.com/dotnet/msbuild/issues/6605) to track the work to compile MSBuild assemblies using MSBuild.exe / MSBuild.exe.config as the root. This will fix the real issue of JITting methods in MSBuild.exe.\r\n\r\nIt is recommended to check for other evidence (e.g. JITting - see Advanced Group -> JITStats in PerfView) before concluding that native images are not used. The `NgenBind` event reporting errors is insufficient.",
        "createdAt": "2021-06-22T06:03:56Z",
        "updatedAt": "2021-06-22T06:03:56Z",
        "author": {
          "login": "ladipro"
        }
      }
    ]
  }
}