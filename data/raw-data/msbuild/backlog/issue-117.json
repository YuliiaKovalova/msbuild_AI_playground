{
  "number": 117,
  "title": "Automated build of Satellite Assemblies in Visual Studio with MSBUILD",
  "body": "I'd like to an additional post-build step to include string resources for localization as described here: \n\nhttp://blogs.msdn.com/b/pedram/archive/2007/08/04/automated-build-of-satellite-assemblies-in-visual-studio-with-msbuild.aspx?CommentPosted=true#commentmessage\n\nIs there a sample that shows this step for Visual Studio 2015? I've tried to convert the above solution but it results in all kinds of errors. I've added this tool path for AL:\n\n```\n<AL OutputAssembly=\"%(Culture)\\SatelliteAssembly.resources.dll\"\nToolPath=\"C:\\Program Files (x86)\\Microsoft SDKs\\Windows\\v8.1A\\bin\\NETFX 4.5.1 Tools\\\" ...\n```\n\nand changed the msbuild.exe post build to:\n    %windir%\\microsoft.net\\framework\\v4.0.30319\\msbuild \"$(SolutionDir)Resources\\build.msbuild\" /v:d /property:destination=\"$(TargetDir)\n\nbut it simple results in these errors:\n    Error   1   Es wurden keine g\u00fcltigen Eingabedateien angegeben. [C:\\Users\\Internet\\Desktop\\SatelliteAssembly\\SatelliteAssembly\\Resources\\build.msbuild] C:\\Users\\Internet\\Desktop\\SatelliteAssembly\\SatelliteAssembly\\SatelliteAssembly\\ALINK   SatelliteAssembly\n    Error   2   Es wurden keine g\u00fcltigen Eingabedateien angegeben. [C:\\Users\\Internet\\Desktop\\SatelliteAssembly\\SatelliteAssembly\\Resources\\build.msbuild] C:\\Users\\Internet\\Desktop\\SatelliteAssembly\\SatelliteAssembly\\SatelliteAssembly\\ALINK   SatelliteAssembly\n    Error   3   The command \"%windir%\\microsoft.net\\framework\\v4.0.30319\\msbuild \"C:\\Users\\Internet\\Desktop\\SatelliteAssembly\\SatelliteAssembly\\Resources\\build.msbuild\" /v:d /property:destination=\"C:\\Users\\Internet\\Desktop\\SatelliteAssembly\\SatelliteAssembly\\SatelliteAssembly\\bin\\Debug\\\" exited with code 1.    SatelliteAssembly\n\nWhat am I doing wrong?\n",
  "state": "CLOSED",
  "createdAt": "2015-06-17T19:24:56Z",
  "updatedAt": "2024-02-21T17:31:21Z",
  "closedAt": "2019-07-24T16:28:57Z",
  "author": {
    "login": "Dirkster99"
  },
  "labels": [
    "question",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Discussion"
  },
  "comments": {
    "nodes": [
      {
        "body": "The standard targets support building of satellite assemblies by, if I recall correctly, simply naming the resx file with the culture name in it.  (E.g. in MyProj.csproj, MyResources.de-DE.resx should be built into $(OutDir)\\de-DE\\MyProj.resources.dll.)  \n\nSee https://github.com/Microsoft/msbuild/blob/master/src/XMakeTasks/Microsoft.Common.CurrentVersion.targets#L3222 for the official AL call, if you're curious. \n\nIs there a reason why the standard implementation doesn't work for you? \n",
        "createdAt": "2015-06-17T23:28:56Z",
        "updatedAt": "2015-06-17T23:28:56Z",
        "author": {
          "login": "sarajoiner"
        }
      },
      {
        "body": "With regards to the specific build errors you're seeing, the above fragment doesn't give enough information to say for sure, but given the \"no valid inputs\" error, I suspect that there's some problem with the construction of whatever item group you're passing to the AL task's \"EmbedResources\" parameter.  \n\nTo debug this sort of error I would recommend: \n\n1) Build with /v:diag or /flp:v=diag (diagnostic build log).  If you're using VS 2015, it should record all added / removed / changed properties and items in addition to task parameters (I believe diagnostic logs have included task parameters since ~VS 2012), which should make it easier to pinpoint where your invalid input is coming from. \n\nNote that with your current implementation you'd need to update your post-build step's command line to pass the /v:diag parameter as well, since the verbosity will not automatically get picked up by the embedded MSBuild call. \n\n2) (Optional) Add your target to the project itself instead of launching a separate instance of MSBuild.  This is generally a good idea since your current post-build step implementation has no access to any of the state of the standard build, which means it would cause unnecessary rebuilds if there's any overlap in implementation.  (Not to mention that in your current implementation you'd be using two separate versions of MSBuild entirely, since VS 2015 does not use the version of MSBuild from .NET.)  \n\nAs a pleasant side effect, not crossing that Exec boundary also generally makes it easier to debug.   \n\nYou can hook your custom target into the build by using the \"AfterTargets\" parameter to a target, e.g. \n\nMyProj.csproj:\n`<Target Name=\"MySatelliteAssemblyGeneration\" AfterTargets=\"ResGen\">`\n`<AL ..... />`\n`</Target>`\n",
        "createdAt": "2015-06-17T23:37:06Z",
        "updatedAt": "2015-06-17T23:37:06Z",
        "author": {
          "login": "sarajoiner"
        }
      },
      {
        "body": "I am not no expert on tweaking project files and using build.exe as command line tool. What I am looking for is a workflow like this:\n![buildsoftwarewithlocalization](https://cloud.githubusercontent.com/assets/2129700/8236127/78bbf822-15e6-11e5-8f5b-95e75e47c095.png)\n\nIn this workflow I start working with Visual Studio on the top left side. At that point I am 90% of most time working with neutral culture and language. Then, from time to time, I'd like to hand the string resources over to localization and have them translate them. Obviously, Visual Studio is not involved and translation really takes place using 3rd party tools.\n\nThe problem I am having now is that, in practice, I have to take the translated files back from translation, add them manually into the Visual Studio project, build, build setup, and deploy.\n\nBut what I'd really like to do is to do the build process without Visual Studio, or at least, without changing project and solution files that are used in development. I'd like to have a mechanism that determines where each translated string resource file came from (determine the correct place in each project), puts it there for the sake of the build, does the build, builds the setup, and user can deploy.\n\nIs this possible? Is there a sample solution that demonstrates this in a fool proof step by step manner?\n",
        "createdAt": "2015-06-18T16:26:47Z",
        "updatedAt": "2015-06-18T16:28:59Z",
        "author": {
          "login": "Dirkster99"
        }
      },
      {
        "body": "@nguerrera can you help?",
        "createdAt": "2019-07-22T21:07:40Z",
        "updatedAt": "2019-07-22T21:07:40Z",
        "author": {
          "login": "livarcocc"
        }
      },
      {
        "body": "This is technically possible for sure. There are any number of ways of telling the build to include `Strings.*.resx` from some path without having to edit the project.\r\n\r\nIt's not exactly what you want, but https://github.com/dotnet/xliff-tasks generates Strings.*.resx on the fly to intermediate directory from `*.xlf` that is checked in. Some code could be borrowed from there, but instead of generating from xlf, you'd have some other way to tell it where to get the `Strings.*.resx` based on where you put them. ",
        "createdAt": "2019-07-22T23:19:51Z",
        "updatedAt": "2019-07-22T23:20:52Z",
        "author": {
          "login": "nguerrera"
        }
      }
    ]
  }
}