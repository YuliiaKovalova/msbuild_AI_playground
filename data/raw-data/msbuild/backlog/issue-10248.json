{
  "number": 10248,
  "title": "Release 17.11",
  "body": "# MSBuild Release Checklist 17.11\n\n## At any time\n\n- [x] Create a new issue to track the release checklist, with this checklist copied into the issue.\n- [x]  Create `vs17.11` branch\n- [x]  Create darc channel for `VS 17.12` if it doesn't already exist \\\n`darc add-channel --name \"VS 17.12\"`\n- [x]  Ping internal \"First Responders\" Teams channel to get the new channel made available as a promotion target (e.g. dotnet/arcade#12150): https://github.com/dotnet/arcade/pull/14860\n\n## At release time\n\n- [x] If the release is being cut more than a few days before the VS-side snap, do these two steps. Otherwise check them off.\n  - [x]  Modify the VS insertion so that it flows from MSBuild `vs17.11` to VS `main` [in the MSBuild-release-branch release definition](https://dev.azure.com/devdiv/DevDiv/_release?definitionId=1319&view=mine&_a=releases). Alternatively, if the release being cut no more than couple of weeks, disable the scheduled releases and create releases from `vs17.11` manually until the VS-side snap: Edit -> Schedule set under Artifacts -> disable toggle\nAND\n  - [x]  Disable automated run of [the MSBuild-main-branch release definition](https://dev.azure.com/devdiv/DevDiv/_release?definitionId=2153&view=mine&_a=releases) (because our 17.12 builds don't have a place to go in VS yet)\n- [x]  Remove the `main` to old release channel (17.11) default channel \\\n`darc delete-default-channel --repo https://github.com/dotnet/msbuild --branch main --channel \"VS 17.11\"`\n- [x]  Associate the `main` branch with the next release channel \\\n`darc add-default-channel  --channel \"VS 17.11\" --branch main --repo https://github.com/dotnet/msbuild`\n- [x]  Check subscriptions for the forward-looking channel `VS 17.12` and update as necessary (for instance, SDK's `main` branch should usually be updated, whereas release branches often should not be \\\n`darc get-subscriptions --exact --source-repo https://github.com/dotnet/msbuild --channel \"VS 17.11\"`\n- [x]  Update channel VS 17.11 to VS 17.12 for the sdk main subscription and any others from the previous step\n`darc update-subscription --id sdk_main_branch_id`\n- [x]  Ensure that the current release channel `VS 17.11` is associated with the correct release branch\\\n`darc get-default-channels --source-repo https://github.com/dotnet/msbuild --branch vs17.11` \\\nif it is not, `darc add-default-channel  --channel \"VS 17.11\" --branch vs17.11 --repo https://github.com/dotnet/msbuild`\n- [x]  If the branch was created before the fork: fast-forward merge the correct commit (the one that is currently inserted to VS main) to the `vs17.11` branch \\\ne.g.: `git push upstream 2e6f2ff7ea311214255b6b2ca5cc0554fba1b345:refs/heads/vs17.10` \\\n_(This is for the case where we create the branch too early and want it to be based actually on a different commit. If you waited until a good point in time with `main` in a clean state, just branch off and you are done. The branch should point to a good, recent spot, so the final-branding PR goes in on top of the right set of commits.)_\n- [x]  Update the branch merge flow in `.config/git-merge-flow-config.jsonc` file to have the currently-in-servicing branches.\n- [x]  Fix OptProf data flow for the new vs17.11 branch\n  - [x] Run the [official build](https://devdiv.visualstudio.com/DevDiv/_build?definitionId=9434) for vs17.11 without OptProf (set `SkipApplyOptimizationData` variable in 'Advanced options' section of the 'Run pipeline' menu to `true`) or alternatively with the latest Opt-Prof collected for the main branch (set `Optional OptProfDrop Override` to the drop path of the collected data, which could be found in the logs of the pipeline: Windows_NT -> Build -> search for `OptimizationData`). \n  - [x] Check that the [OptProf data collection](https://devdiv.visualstudio.com/DevDiv/_build?definitionId=17389) pipeline run is triggered for vs17.11. If not, run manually ('Run pipeline' in upper right)\n  - [x] Run the [official build](https://devdiv.visualstudio.com/DevDiv/_build?definitionId=9434) for vs17.11 with no extra customization - OptProf should succeed now\n- [x]  Create 17.12 branding PR (in main) including public API baseline package version change: https://github.com/dotnet/msbuild/pull/10268. In the file `eng/Versions.props` Update the `VersionPrefix` to `17.12` and `PackageValidationBaselineVersion` set to a latest internally available 17.11 preview version in the internal dnceng dotnet-tools feed. It might be needed to update `CompatibilitySuppressions.xml` files.\n- [x]  Create 17.11 localization ticket: https://aka.ms/ceChangeLocConfig (requesting to switch localization from 17.10 to 17.11): (https://ceapex.visualstudio.com/CEINTL/_workitems/edit/980648/) (DONE)\n- [x]  Enable 17.11 localization - by setting [`EnableReleaseOneLocBuild`](https://github.com/dotnet/msbuild/blob/vs17.11/.vsts-dotnet.yml) to `true`\n- [x]  Disable 17.10 localization -  by setting [`EnableReleaseOneLocBuild`](https://github.com/dotnet/msbuild/blob/vs17.10/.vsts-dotnet.yml) to `false`. Update the comment on the same line.\n- [x]  Merge 17.12 branding PR\n- [x]  Create and merge a PR in main to update a localization version comment in setting [`EnableReleaseOneLocBuild`](https://github.com/dotnet/msbuild/blob/main/.vsts-dotnet.yml) to set up the merge conflict when this line will be updated in the release branch.\n- [x]  When VS main snaps to 17.11 and updates its version to 17.12, turn on / modify the VS insertion so that it flows from MSBuild main to VS main.\n- [x]  Update the [release-branch insertion release definition](https://dev.azure.com/devdiv/DevDiv/_releaseDefinition?definitionId=2153&_a=definition-variables) to have `InsertTargetBranch` `rel/d17.11`.\n- [x]  Turn [the release pipeline](https://dev.azure.com/devdiv/DevDiv/_release?definitionId=2153&view=mine&_a=releases) back on.\n- [x]  Prepare final branding PR for `vs17.11`: https://github.com/dotnet/msbuild/pull/10270\n- [x]  Merge final branding to `vs17.11` branch\n- [ ]  Update perfstar MSBuild insertions configuration: [example PR](https://dev.azure.com/devdiv/DevDiv/_git/dotnet-perfstar/pullrequest/522843): {{URL_OF_PERFSTAR_PR}}\n- [x] Note down the build (will be helpful for requesting nuget packages publishing): https://dev.azure.com/devdiv/DevDiv/_build/results?buildId=9759640&view=results\n- [x] Get M2 or QB approval as necessary per the VS schedule\n- [x]  Merge to VS (babysit the automatically generated VS insertion PR https://devdiv.visualstudio.com/DevDiv/_git/VS/pullrequests for the MSBuild commit noted in above step): https://dev.azure.com/devdiv/DevDiv/_git/VS/pullrequest/559454\n\n## ASAP On/After GA:\n\nTiming based on the [(Microsoft-internal) release schedule](https://dev.azure.com/devdiv/DevDiv/_wiki/wikis/DevDiv.wiki/10097/Dev17-Release).\n\n- [x]  Push packages to nuget.org (not currently automated, contact dnceng - search \"Publish MSBuild 17.6 to NuGet.org\" email subject for template).\n- [x] Update the PackageValidationBaselineVersion to the latest released version (17.11.0) - this might require temporary addition of the [build artifacts feed](https://github.com/dotnet/msbuild/blob/29397b577e3ec0fe0c7650c3ab0400909655dc88/NuGet.config#L9) as the new version is not yet added to the official feeds (this is post release). This can trigger a high severity CG error (https://eng.ms/docs/cloud-ai-platform/devdiv/one-engineering-system-1es/1es-docs/secure-supply-chain/how-to-securely-configure-package-source-files) - however it should be fine to keep this temporary feed untill the release.\n- [x]  Publish docs: submit reference request at https://aka.ms/publishondocs\n  - Click on the link labeled *Request \u2013 Reference Publishing*\n  - You can use existing [ticket](https://dev.azure.com/msft-skilling/Content/_workitems/edit/183613) as a reference\n- [x] Remove the temporarily added [build feed from `nuget.config`](https://github.com/dotnet/msbuild/blob/29397b577e3ec0fe0c7650c3ab0400909655dc88/NuGet.config#L9) if it was added in the `Update the PackageValidationBaselineVersion` step\n- [x]  Update `main` subscriptions to the new channel (this can be done before or after release - depending on when the source repos from our previous - VS 17.11 - channle start to publish in the next - VS 17.12 - channel) \\\n`darc get-subscriptions --exact --target-repo https://github.com/dotnet/msbuild --target-branch main`\n- [x]  Create the 17.11 release\n  - [x]  Create tag (can be done upfront)\n  ```\n  git checkout <commit noted above>\n  git tag v17.11.3\n  git push upstream v17.11.3\n  ```\n  - [x]  Create Release in Github with `Create Release from Tag` GH option (https://github.com/dotnet/msbuild/releases/new?tag=v17.9.3) - the release notes can be prepopulated (`Generate Release Notes`)",
  "state": "CLOSED",
  "createdAt": "2024-06-17T08:22:47Z",
  "updatedAt": "2024-09-03T13:52:55Z",
  "closedAt": "2024-09-03T13:52:55Z",
  "author": {
    "login": "AR-May"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "MichalPavlik"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": []
  }
}