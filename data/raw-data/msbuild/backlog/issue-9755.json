{
  "number": 9755,
  "title": "Don't stomp on *DependsOn properties #2",
  "body": "### Context\r\n\r\nThere are couple sdk ***DependsOn properties that allow injecting custom target as dependencies of sdk targets. However big portion of those properties are force set within sdk.targets - so users'd need to include sdk.targets explicitly to be able to set them (we even document a need for this workaround in the documentation mentioned below).\r\n\r\n#4922 fixed couple, #9703 fixed one, but we have still dozens that we force overwrite.\r\n\r\ne.g. the externally documented [`Commonly overridden DependsOn properties`](https://learn.microsoft.com/en-us/visualstudio/msbuild/how-to-extend-the-visual-studio-build-process?view=vs-2022#commonly-overridden-dependson-properties)\r\n* `BuildDependsOn` : https://github.com/dotnet/msbuild/blob/23f77529a83531782dd498bf400381842c3d2d9e/src/Tasks/Microsoft.Common.CurrentVersion.targets#L891-L895\r\n* `CleanDependsOn`: https://github.com/dotnet/msbuild/blob/23f77529a83531782dd498bf400381842c3d2d9e/src/Tasks/Microsoft.Common.CurrentVersion.targets#L5675-L5682\r\n* `CompileDependsOn`: https://github.com/dotnet/msbuild/blob/23f77529a83531782dd498bf400381842c3d2d9e/src/Tasks/Microsoft.Common.CurrentVersion.targets#L3595-L3607\r\n\r\nBut there are others that seem as potentially usefull - CoreBuildDependsOn, RebuildDependsOn, RunDependsOn, PublishDependsOn etc. etc.\r\n\r\n### Suggestion\r\n\r\nSelect a usefull subset (or probably all?) of the DependsOn properties in common target files ([search](https://github.com/search?q=repo%3Adotnet%2Fmsbuild+path%3A**%2F*.targets&type=code&p=2)) and redefine those with the additive pattern:\r\n\r\n```xml\r\n<SomeDependsOn>\r\n   value1;\r\n   value2\r\n</SomeDependsOn>\r\n```\r\n\r\n--->\r\n\r\n```xml\r\n<SomeDependsOn>\r\n   $(SomeDependsOn);\r\n   value1;\r\n   value2\r\n</SomeDependsOn>\r\n```",
  "state": "CLOSED",
  "createdAt": "2024-02-16T16:59:09Z",
  "updatedAt": "2024-07-24T13:44:46Z",
  "closedAt": "2024-07-24T13:44:46Z",
  "author": {
    "login": "JanKrivanek"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Enforcing this rule could be an interesting BuildCheck",
        "createdAt": "2024-05-10T14:22:27Z",
        "updatedAt": "2024-05-10T14:22:27Z",
        "author": {
          "login": "baronfel"
        }
      },
      {
        "body": "> Enforcing this rule could be an interesting BuildCheck\r\n\r\nWould such properties by manualy configured by the author+user, or might there be any 'magic' how to detect properties that should actually behave as items?",
        "createdAt": "2024-05-10T16:54:08Z",
        "updatedAt": "2024-05-10T16:54:08Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "Punting - no strong consensus",
        "createdAt": "2024-07-24T13:44:46Z",
        "updatedAt": "2024-07-24T13:44:46Z",
        "author": {
          "login": "JanKrivanek"
        }
      }
    ]
  }
}