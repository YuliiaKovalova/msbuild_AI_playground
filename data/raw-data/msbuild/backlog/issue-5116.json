{
  "number": 5116,
  "title": "Linker ignores $(Platform) and $(Configuration) if referenced project is not part of solution and contains Win32|Debug Config",
  "body": "### Bug description:\r\nMSBuild ignores $(Platform) and $(Configuration) variables for linking under the following circumstances:\r\n - project C contains a Debug|Win32 configuration\r\n - project C is a project reference of project B\r\n - project B is built inside a solution (in this case: solution A), that does not contain project C\r\n \r\n### Steps to reproduce\r\n - unzip attachment [link_wrong_config.zip](https://github.com/microsoft/msbuild/files/4180657/link_wrong_config.zip)\r\n - open A.sln\r\n - **select Release and x64**\r\n - build project B\r\n\r\n### Expected behavior:\r\n - linker tries to find x64|Release build artifact of C\r\n  (this artifact may or may not be present, depending on whether C has already been built before)\r\n\r\n### Actual behavior:\r\n> Error\tLNK1181\tcannot open input file '...\\bin\\Win32\\Debug\\C.lib'\tB\t...\\B\\LINK\t1\t\r\n - linker tries to find binary artifact of C inside folder of **C's Debug|Win32 configuration**\r\n - if this binary is present, it even tries to link in the Debug|Win32 binary into whatever configuration of B you are currently building.\r\n\r\n### Environment data\r\n`msbuild /version` output: 16.4.0.56107  \r\nWindows 10, Microsoft Visual Studio Community 2019 Version 16.4.4\r\n\r\n\r\nHow to reproduce the attached files from scratch:\r\n - create new project->Dynamic-Link Library (DLL), project name C (check solution in same dir)\r\n - force .lib creation by exporting any symbol: append line `_declspec(dllexport) void C() {}` to dllmain.cpp\r\n - in property manager: right click project->add existing property sheet: dll.props (sets output dir and linker input dir to `..\\bin\\$(Platform)\\$(Configuration)\\`)\r\n\r\nDo same again for project B:\r\n - create new project->Dynamic-Link Library (DLL), project name B (check solution in same dir)\r\n - force .lib creation by exporting any symbol: append line `_declspec(dllexport) void B() {}` to dllmain.cpp\r\n - in property manager: right click project->add existing property sheet: dll.props (sets output dir and linker input dir to `..\\bin\\$(Platform)\\$(Configuration)\\)`\r\n\r\nin solution explorer:\r\n - right-click solution B: Add->Existing Project: select C.vcxproj\r\n - right-click project B: Add->Reference->Projects>Solution:Check C\r\n\t\r\ncreat new project A: Empty project (doesn't matter, just need any solution)\r\n - in solution explorer:\r\n - right-click solution A:Add->Existing Project: select B.vcxproj\r\n\r\n### Bug mitigation:\r\ndelete the PropertyGroup of Debug|Win32 configuration from project C:\r\n```\r\n  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\" Label=\"Configuration\">\r\n    <ConfigurationType>DynamicLibrary</ConfigurationType>\r\n    <UseDebugLibraries>true</UseDebugLibraries>\r\n    <PlatformToolset>v142</PlatformToolset>\r\n    <CharacterSet>Unicode</CharacterSet>\r\n  </PropertyGroup>\r\n```\r\n",
  "state": "CLOSED",
  "createdAt": "2020-02-10T12:06:10Z",
  "updatedAt": "2024-02-21T17:05:08Z",
  "closedAt": "2020-02-18T22:42:43Z",
  "author": {
    "login": "markusobi"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Discussion"
  },
  "comments": {
    "nodes": [
      {
        "body": "This is an intentional* behavior when a build goes outside of a solution. The [`AssignProjectConfiguration`](https://docs.microsoft.com/visualstudio/msbuild/assignprojectconfiguration-task) task maps `ProjectReference`s to the appropriate project-level `Configuration` and `Platform`, given the active solution-level `Configuration` and `Platform`. When the referenced project is not part of the solution, there's no such mapping, and the build has to choose between passing along the referencing project's configuration or taking the referenced project's _default_ configuration.\r\n\r\nThat choice is configured by the `ShouldUnsetParentConfigurationAndPlatform` parameter, which is (in the default targets) controlled by the `$(ShouldUnsetParentConfigurationAndPlatform)` property. This property defaults to `true` when building a solution, but is overridable by your setting the property to `false` in your project.\r\n\r\nhttps://github.com/microsoft/msbuild/blob/5d872c945f2fb42a26ed67791f4bdceb458f1402/src/Tasks/Microsoft.Common.CurrentVersion.targets#L1475-L1477\r\n\r\n\\* I'm not sure it's a _good_ behavior, but it's too late to change it now since it has behaved like this for many years and projects depend on it (mostly accidentally).",
        "createdAt": "2020-02-10T16:34:33Z",
        "updatedAt": "2020-02-10T16:34:33Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> That choice is configured by the `ShouldUnsetParentConfigurationAndPlatform` parameter, which is (in the default targets) controlled by the `$(ShouldUnsetParentConfigurationAndPlatform)` property. This property defaults to `true` when building a solution, but is overridable by your setting the property to `false` in your project.\r\n\r\n@rainersigwald I tried setting `ShouldUnsetParentConfigurationAndPlatform` inside B.vcxproj as suggested [here](https://stackoverflow.com/a/29156933/2056153)\r\n\r\n```xml\r\n  <ItemGroup>\r\n    <ProjectReference Include=\"..\\C\\C.vcxproj\">\r\n      <Project>{49046638-bc62-46ee-a8f7-fad84b84176a}</Project>\r\n      <Properties>ShouldUnsetParentConfigurationAndPlatform=false</Properties>\r\n    </ProjectReference>\r\n  </ItemGroup>\r\n```\r\nBut this did not change anything. Recap: B depends on C, but C is not in solution where B is built.\r\nWhat is the correct way to set ShouldUnsetParentConfigurationAndPlatform?",
        "createdAt": "2020-04-16T13:09:22Z",
        "updatedAt": "2020-04-16T13:10:16Z",
        "author": {
          "login": "markusobi"
        }
      },
      {
        "body": "@markusobi Set it as a property in your project, in a PropertyGroup:\r\n\r\n```xml\r\n<PropertyGroup>\r\n  <ShouldUnsetParentConfigurationAndPlatform>false</ShouldUnsetParentConfigurationAndPlatform>\r\n</PropertyGroup>\r\n```\r\n\r\nThe solution in that StackOverflow answer is different: it makes MSBuild set that property for projects C and H so that it is set when figuring out their own dependencies. I'm not sure it's a good approach for them either, but I guess it's working for them.",
        "createdAt": "2020-05-06T12:35:39Z",
        "updatedAt": "2020-05-06T12:35:39Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> This is an intentional* behavior when a build goes outside of a solution. \r\n> * I'm not sure it's a _good_ behavior, but it's too late to change it now since it has behaved like this for many years and projects depend on it (mostly accidentally).\r\n\r\nThose projects that depend on it might well unintentionally deploy debug binaries to production. And leaving this behavior as it is now exposes new projects to that risk as well, I'm not so sure that is the right thing to do. Especially because there will be cases where deploying code which has `#if DEBUG` statements might introduce security issues. I really think this should be fixed.",
        "createdAt": "2021-10-18T15:42:49Z",
        "updatedAt": "2021-10-18T15:42:49Z",
        "author": {
          "login": "AVee"
        }
      },
      {
        "body": "The approach with setting `ShouldUnsetParentConfigurationAndPlatform` to `false` in `PropertyGroup` for the dependent project ( proposed in https://github.com/dotnet/msbuild/issues/5116#issuecomment-624622909 ) works just fine if the solution is being built with MSBuild directly (version 17.6.3+07e294721 / VS2022 17.6.4) - all required configurations of the dependency project are built.\r\nHowever the clean build in VS2022 still fails - only the default configuration of the dependency project is built in this case. Is extra tuning needed for this case?\r\nAnd if you had built the dependency project beforehand (with MSBuild), VS2022 manages to find correct configuration to build the dependent project(s).\r\nCleaning (and rebuilding) with VS2022 doesn't work as expected either: the dependency project isn't cleaned/rebuilt.",
        "createdAt": "2023-07-24T11:02:43Z",
        "updatedAt": "2023-07-24T11:11:02Z",
        "author": {
          "login": "Anton-V-K"
        }
      }
    ]
  }
}