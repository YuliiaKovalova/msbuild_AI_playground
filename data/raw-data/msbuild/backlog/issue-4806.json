{
  "number": 4806,
  "title": "EmbeddedResources sometimes get wrong names",
  "body": "### Background\r\nWe do not use the ResXFileCodeGenerator, because it doesn't generate what we need. Instead we manage our resources using ResourceManager ouerselves.  \r\n\r\nPorting our code from .NET Framework to .NET Core 3.0, we see changes in the handling of *.resx files that break our code. The embedded *.resources resource streams have unexpected names.\r\n\r\nI think it is related to #4488\r\n\r\n### Steps to reproduce\r\nBuild attached solution\r\n[ResX.zip](https://github.com/microsoft/msbuild/files/3715969/ResX.zip)\r\n\r\n### Expected  behavior\r\nDll contains:\r\n* ResX.Foo.resources\r\n* ResX.Foo2.resources\r\n* ResX.Foo3.resources\r\n\r\n### Actual behavior\r\nDll contains:\r\n* ResX.FooExtensions.resources\r\n* ResX.Foo2.resources\r\n* ResX.Messages.resources\r\n\r\n### Environment data\r\nWe use VisualStudio 16.3.3 with .NET Core 3.0 on Windows 10 German.\r\nIt worked with VisualStudio 16.2.x and .NET Core 3.0 preview9",
  "state": "CLOSED",
  "createdAt": "2019-10-11T06:51:34Z",
  "updatedAt": "2024-02-21T17:06:38Z",
  "closedAt": "2020-02-03T23:01:18Z",
  "author": {
    "login": "AndreasHeisel"
  },
  "labels": [
    "Area: Task: GenerateResource",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Discussion"
  },
  "comments": {
    "nodes": [
      {
        "body": "Thanks for the report. You can opt out of the new .NET Core SDK 3 behavior by setting the property\r\n\r\n```xml\r\n<EmbeddedResourceUseDependentUponConvention>false</EmbeddedResourceUseDependentUponConvention>\r\n```\r\n\r\nin any .NET Core SDK-using project. If you have multiple projects, you may want to put it in a [`Directory.Build.props` file](https://docs.microsoft.com/en-us/visualstudio/msbuild/customize-your-build?view=vs-2019#directorybuildprops-and-directorybuildtargets).\r\n\r\nThis was an intentional SDK change, because it makes the \"standard\" path using `DependentUpon` easier to express. Since you manage the resources using \"non-standard\" code, the opt-out is now required.",
        "createdAt": "2019-10-11T11:00:05Z",
        "updatedAt": "2019-10-11T11:00:05Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Thank you for the information. I tested it with a real live project and it built.\r\n\r\nAs being a project level switch, this leads to some questions: \r\n* Where is \"DependsUpon\" needed? \r\n* What will stop working when we set the switch?\r\n\r\nYour convention would work for us, if it would use the first type declaration (class, enum, struct) instead of the first class. In my sample (Foo3), it is a nested class witch seem weird to me.",
        "createdAt": "2019-10-11T11:16:30Z",
        "updatedAt": "2019-10-11T11:16:30Z",
        "author": {
          "login": "AndreasHeisel"
        }
      },
      {
        "body": "Thanks for your temporary solution.\r\nI tested it with my own website and it is working:\r\n[Settings page for language and theme](https://kontext.tech/settings)",
        "createdAt": "2020-01-10T22:29:58Z",
        "updatedAt": "2020-01-10T22:29:58Z",
        "author": {
          "login": "tang2087"
        }
      },
      {
        "body": "Okay, so it turns out this was a breaking change we wanted to take as of net core 3.0. For full context and an explanation of how resource names are chosen, see [the issue on MSBuild's side](https://github.com/microsoft/msbuild/issues/4996) and [the dotnet docs issue that explains the new rules](https://github.com/dotnet/docs/issues/16964).",
        "createdAt": "2020-02-03T23:01:18Z",
        "updatedAt": "2020-02-03T23:01:18Z",
        "author": {
          "login": "benvillalobos"
        }
      }
    ]
  }
}