{
  "number": 394,
  "title": "Ignore PROJECT.JSON when using .CSPROJ",
  "body": "Hi,\n\nI have a serious problem after upgrading to VS 2015 Update 1 RTM.\n\nI am trying to do cross-platform development for my [RethinkDB Driver](https://github.com/bchavez/RethinkDb.Driver) for both CoreCLR/DNX and full .NET 4.5 framework.\n\nI don't want to convert everything to a DNX build project because the CoreCLR/DNX stuff has not RTM'd. So, I'd just like to use standard RTM tools when developing the .NET 4.5 target, then, later when Visual Studio is closed, do `dnu build` **_as a separate thing**_.\n\nWhen I have  **.CSPROJ** open in Visual Studio and I try to compile, I get an error that was not here prior to **Update 1**:\n\n```\nYour project.json doesn't have a runtimes section. \nYou should add '\"runtimes\": { \"win\": { } }' to your project.json and \nthen re-run NuGet restore. RethinkDb.Driver\n```\n\nOkay... So I attempt to add:\n\n```\n\"runtimes\": { \"win\": { } }\n```\n\n**Q1**: why do I need this \"win\" tag since I'm doing cross-platform targeting with CoreCLR? I am not, **in any** way, targeting \"windows\" with CoreCLR/DNX).\n\nSo, I place the tag inside **project.json**, but still no dice. Now I'm getting even more errors:\n\n```\nSome packages are not compatible with DNXCore,Version=v5.0 (win).           0   \nSystem.Runtime.Extensions 4.0.11-beta-23516 provides a compile-time reference assembly for System.Runtime.Extensions on DNXCore,Version=v5.0, but there is no run-time assembly compatible with win.            0   \nSystem.Net.Primitives 4.0.11-beta-23516 provides a compile-time reference assembly for System.Net.Primitives on DNXCore,Version=v5.0, but there is no run-time assembly compatible with win.            0   \n```\n\nNow it looks like this new \"win\" runtime tag is causing even more problems. Can someone tell me why MSBUILD is so unhappy now?\n\nEven better, can someone tell me how to force **_MSBUILD + VS + NUGET**_ to :no_entry_sign: **STOP** :no_entry_sign: probing for **project.json** when I have my classic **.CSPROJ** open? I **_do not**_, want **project.json** even being considered or looked at when I have my classic **.CSPROJ** open in Visual Studio. I'd prefer my **PACKAGES.CONFIG** :white_check_mark: considered when my classic project is open. I don't understand why the tooling from both DNX (project.json) and CSPROJ are conflicting. IMHO, these should be two **completely** different things at this stage.\n\nFeel free to fork or download the project. My sources here: https://github.com/bchavez/RethinkDb.Driver\n\nThere are two solutions: \n- `RethinkDb.Driver.Dnx.sln` - DNX Project Solution\n- `RethinkDb.Driver.sln` - Classic **.csproj** Solution\n\nThanks,\nBrian\n",
  "state": "CLOSED",
  "createdAt": "2015-12-05T00:59:18Z",
  "updatedAt": "2024-02-21T17:29:38Z",
  "closedAt": "2015-12-19T01:26:02Z",
  "author": {
    "login": "bchavez"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Okay, I _sort of_ solved this by downgrading **.csproj** `Toolsversion` to **4.0** (from **14.0**) `<Project ToolsVersion=\"4.0\"`.\n",
        "createdAt": "2015-12-07T01:47:09Z",
        "updatedAt": "2015-12-07T01:47:09Z",
        "author": {
          "login": "bchavez"
        }
      },
      {
        "body": "cc @Pilchie @jasonmalinowski \n",
        "createdAt": "2015-12-07T05:08:47Z",
        "updatedAt": "2015-12-07T05:08:47Z",
        "author": {
          "login": "weshaggard"
        }
      },
      {
        "body": "`project.json` and .csproj files are _NOT_ two differently things.  `project.json` is used by more than just DNX.  It can also be used in conjunction with .csproj files as a replacement for packages.config, to allow .csproj files to take advantage of features like transitive dependencies, build time resolution of assets, etc.\n\nThe reason you are being prompted to add a runtime section is because the build time asset resolution is trying to copy assets from your dependencies to allow you to run, but it needs to know what assets you want to copy.\n\nHaving a project.json meant to be used for DNX in the same directory as a packages.config to be used by msbuild isn't something that's supported today, but you _can_ have two different project.json files, one for msbuild and one for DNX.  To do that, create a `<projectname>.project.json` (where `<projectname>` is the name of your .csproj.  This will allow you to specify the existing framework from your .csproj, instead of of DNX.\n\nFinally, if you are building a library and you _don't_ want to copy runtime assets to your output directory, you can add `<CopyNuGetImplementations>false</CopyNuGetImplementations>` to your .csproj, in which case you won't need a `runtimes` section in your `<projectname>.project.json`.\n\nHope this helps.\n\n(Also tagging @yishaigalatzer and @ericstj)\n",
        "createdAt": "2015-12-07T17:04:13Z",
        "updatedAt": "2015-12-07T17:49:16Z",
        "author": {
          "login": "Pilchie"
        }
      },
      {
        "body": "Thanks @Pilchie \n\n> be used in conjunction with .csproj files as a replacement for packages.config\n\nThank for explaining this: I'll migrate off **packages.config**\n\n> The reason you are being prompted to add a runtime section is because the build time asset resolution is trying to copy assets from your dependencies to allow you to run, but it needs to know what assets you want to copy.\n\nIf I understand correctly, then, how do I tell the **build time asset resolution** that I only want outputs for `net45` full framework right now when I build the solution in VS2015 and not bother with any DNX stuff?\n\nAgain, thanks for your help\n",
        "createdAt": "2015-12-07T17:31:48Z",
        "updatedAt": "2015-12-07T18:05:17Z",
        "author": {
          "login": "bchavez"
        }
      },
      {
        "body": "> If I understand correctly, then, how do I tell the build time asset resolution that I only want outputs for net45 full framework right now when I build the solution in VS2015 and not bother with any DNX stuff?\n\nMaybe, specify `runtime: { \"win\":{}}`  in **_name_.project.json**, but leave it out in the root `project.json`?\n",
        "createdAt": "2015-12-07T17:36:27Z",
        "updatedAt": "2015-12-07T17:36:47Z",
        "author": {
          "login": "bchavez"
        }
      },
      {
        "body": "I edited my markdown so that the xml doesn't disappear in in the rendered output.\n\nRight - also, _name.project.json_ should just have a single entry like `net451` in the frameworks section.\n",
        "createdAt": "2015-12-07T17:42:39Z",
        "updatedAt": "2015-12-07T17:42:39Z",
        "author": {
          "login": "Pilchie"
        }
      },
      {
        "body": "Fantastic. Thank you. That seems to have solved everything. Once again, happily compiling! I'm sure other will find this information _really_ useful. Just had to do one last solution wide \"nuget restore\" after the changes.\n",
        "createdAt": "2015-12-07T18:08:52Z",
        "updatedAt": "2015-12-07T18:10:08Z",
        "author": {
          "login": "bchavez"
        }
      },
      {
        "body": "This is a bit strange. So, check this out:\n- Everything was working fine when I closed the issue. I could compile fine in VS2015 Update 1 after adding **name.project.json**.\n- I added one dependency on `System.Threading.Timer` to `project.json`:\n\n```\n\"dnxcore50\": {\n      \"dependencies\": {\n        //\n        \"System.Threading.Timer\": \"4.0.1-beta-23516\"\n      },\n```\n- Build, but got the error: \n\n```\nYour project.json doesn't have a runtimes section. \nYou should add '\"runtimes\": { \"win\": { } }' to your project.json and \nthen re-run NuGet restore. RethinkDb.Driver\n```\n- Ok. So, I back out and remove the line `System.Threading.Timer`, save, build-clean, and \"Restored NuGet\" packages. Even restarted Visual Studio and a **_still**_ get an error message.\n\nSo, now **_what**_ is going on? I have `name.project.json` with the necessary \"runtime\", and a `project.json` without any runtimes as we discussed few days ago. \n\nI dunno, but to me it seems natural to revert my 1 line edit should get me back to where I was but I cannot back out of a 1-line edit. I cannot get rid of this error. :-1:. Back to square one in this original issue.\n\nLatest code, \"name.project.json\" & \"project.json\" files here:\nhttps://github.com/bchavez/RethinkDb.Driver/tree/master/Source/RethinkDb.Driver\n\nCI server's Build Error:\nhttps://ci.appveyor.com/project/bchavez/rethinkdb-driver/build/282#L654\n\n```\n\"C:\\projects\\rethinkdb-driver\\Source\\RethinkDb.Driver.sln\" (Rebuild target) (1) ->\n\"C:\\projects\\rethinkdb-driver\\Source\\RethinkDb.Driver.Tests\\RethinkDb.Driver.Tests.csproj\" (Rebuild target) (2) ->\n\"C:\\projects\\rethinkdb-driver\\Source\\RethinkDb.Driver\\RethinkDb.Driver.csproj\" (default target) (3:2) ->\n(ResolveNuGetPackageAssets target) -> \n  C:\\Program Files (x86)\\MSBuild\\Microsoft\\NuGet\\Microsoft.NuGet.targets(109,5): error : Your project.json doesn't list 'win' as a targeted runtime. You should add '\"win\": { }' inside your \"runtimes\" section in your project.json, and then re-run NuGet restore. [C:\\projects\\rethinkdb-driver\\Source\\RethinkDb.Driver\\RethinkDb.Driver.csproj]\n\n    0 Warning(s)\n    1 Error(s)\n\nTime Elapsed 00:00:04.14\n```\n",
        "createdAt": "2015-12-11T09:57:59Z",
        "updatedAt": "2015-12-11T09:59:57Z",
        "author": {
          "login": "bchavez"
        }
      },
      {
        "body": "I deleted these `*.lock.json` files and it seems to build again. I still think this is a symptom of a larger problem.\n1. I delete **_ALL**_ lock files (and ensure NO lock files exist in the build DIR), I can run\n   \n   `msbuild source\\RethinkDb.Driver.sln`, **_BUILD SUCCESS**_ :white_check_mark: \n2. **Restore Packages** from Visual Studio 2015 Update 1, generates `RethinkDb.Driver.project.lock.json`,  and the command:\n   \n   `msbuild source\\RethinkDb.Driver.sln` **_BUILD FAIL**_ :x: with error message below:\n\n```\nYour project.json doesn't list 'win' as a targeted runtime. You should add '\"win\": { }' \ninside your \"runtimes\" section in your project.json, and then re-run NuGet restore.\n    RethinkDb.Driver            \n```\n\nSo, ironically, **Restore Packages** breaks the build. :8ball: \n",
        "createdAt": "2015-12-11T10:18:51Z",
        "updatedAt": "2015-12-11T18:46:35Z",
        "author": {
          "login": "bchavez"
        }
      },
      {
        "body": "So there's a two things there:\n1. I've filed NuGet/Home#1859 to address your immediate point that we're using the existence of the lock file to figure out whether we are looking for NuGet packages or not. In your case, the first build _should_ fail with some sort of \"you didn't restore packages\" error. In your case, the build succeeded but didn't actually consume the packages you thought you referenced, so that isn't good.\n2. The error message is correct: you need to update your project.json to include that entry under runtimes. In Visual Studio 2015 RTM there was a bug that meant you could get away with win-anycpu in there, but that had many other problems. You should add the win entry, and remove win-anycpu if you don't care about building with RTM.\n\nSince NuGet/Home#1859 is tracking the first strangeness you observed, and the second issue is addressed by updating your project.json as described, can you close this bug once you've confirmed you're unblocked?\n",
        "createdAt": "2015-12-19T00:49:04Z",
        "updatedAt": "2015-12-19T00:50:55Z",
        "author": {
          "login": "jasonmalinowski"
        }
      },
      {
        "body": "Hi @jasonmalinowski,\n1. I have [`project.json`](https://github.com/bchavez/RethinkDb.Driver/blob/master/Source/RethinkDb.Driver/project.json) with all the necessary references.\n2. I have [`name.project.json`](https://github.com/bchavez/RethinkDb.Driver/blob/master/Source/RethinkDb.Driver/RethinkDb.Driver.project.json) with the `runtimes: { \"win-anycpu\" }` and `\"frameworks\": { \"net45\":{}}`.\n\nThis _should_ work. But it does not. I think it's likely due to No.1 https://github.com/NuGet/Home/issues/1859. But once https://github.com/NuGet/Home/issues/1859 as you suggested is fixed, I fear I will be in a state where I will no longer be able to build this project. https://github.com/NuGet/Home/issues/1859 actually allows me to build the project normally **_without**_ failing on this \"runtimes\" compiler error.\n",
        "createdAt": "2015-12-19T01:11:31Z",
        "updatedAt": "2016-01-21T16:02:57Z",
        "author": {
          "login": "bchavez"
        }
      },
      {
        "body": "Please feel free to checkout / clone the repo here:\n\nhttps://github.com/bchavez/RethinkDb.Driver/tree/master/Source/RethinkDb.Driver\n\nI have MSBuild hacks everywhere just trying to get this to build for `net45` and `dnx` CoreCLR. All the msbuild hacks are inside [this BauBild file](https://github.com/bchavez/RethinkDb.Driver/blob/master/Source/Builder/BauBuild.cs)\n",
        "createdAt": "2015-12-19T01:13:31Z",
        "updatedAt": "2015-12-19T01:13:31Z",
        "author": {
          "login": "bchavez"
        }
      },
      {
        "body": "Read the error you're getting carefully: on Update 1, you need `win` as a runtime, not `win-anycpu`. If you change this, your error should go away. The bug I filed is simply to make sure that both of your builds would fail when you're in this broken case, not just one of them.\n",
        "createdAt": "2015-12-19T01:14:28Z",
        "updatedAt": "2015-12-19T01:14:28Z",
        "author": {
          "login": "jasonmalinowski"
        }
      },
      {
        "body": "Ah, very nice. Thank you so very much @jasonmalinowski . Just committed the changes with your suggestion. I no longer need the `*.lock` hack to cross-build. Please give @jasonmalinowski MVP of the year! Thanks :+1: !\n",
        "createdAt": "2015-12-19T01:26:02Z",
        "updatedAt": "2015-12-19T01:26:02Z",
        "author": {
          "login": "bchavez"
        }
      },
      {
        "body": "Also, another possible solution: if you really never want your csproj reading any project.json file anywhere, you can just set `<ResolveNuGetPackages>false</ResolveNuGetPackages>` in your .csproj file and that'll turn this all off.\n",
        "createdAt": "2015-12-19T01:27:49Z",
        "updatedAt": "2015-12-19T01:27:49Z",
        "author": {
          "login": "jasonmalinowski"
        }
      },
      {
        "body": "Awesome! There is so much valuable information in this issue undoubtedly someone will find this info very useful. Again, thank you and to everyone for their input in helping unblock this issue.\n",
        "createdAt": "2015-12-19T01:35:56Z",
        "updatedAt": "2015-12-19T01:35:56Z",
        "author": {
          "login": "bchavez"
        }
      },
      {
        "body": "Is there a way not to ignore `project.json` by adding `project-name.project.json`:\n\n``` json\n{\n  \"runtimes\": { \"win\": { } },\n  \"frameworks\": { \"net45\": { } }\n}\n```\n\nbut use `packages.config` for `csproj` projects? So both can share same code, but each project (`csproj` and `xproj`) will have different nuget configuration?\n",
        "createdAt": "2016-02-29T11:18:11Z",
        "updatedAt": "2016-02-29T11:18:59Z",
        "author": {
          "login": "Konard"
        }
      },
      {
        "body": "> Also, another possible solution: if you really never want your csproj reading any project.json file anywhere, you can just set <ResolveNuGetPackages>false</ResolveNuGetPackages> in your .csproj file and that'll turn this all off.\n\nThere is also strange behaviour if `<ResolveNuGetPackages>false</ResolveNuGetPackages>` is set in `csproj` but `project-name.project.json` removed:\n\n```\n------ Discover test started ------\nAn error occurred while reading file 'C:\\Users\\\u041a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u0438\u043d\\Desktop\\LinksPlatform\\Platform\\Platform.WindowsAPI\\Platform.WindowsAPI.project.json': Could not find file 'C:\\Users\\\u041a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u0438\u043d\\Desktop\\LinksPlatform\\Platform\\Platform.WindowsAPI\\Platform.WindowsAPI.project.json'.\n========== Discover test finished: 0 found (0:00:00,5070015) ==========\n```\n\nAfter this solution is to reload project again, but why it happens in the first place?\n",
        "createdAt": "2016-02-29T11:27:36Z",
        "updatedAt": "2016-02-29T11:27:56Z",
        "author": {
          "login": "Konard"
        }
      },
      {
        "body": "@bchavez **name.project.json** helps me a lot, thanks!\n",
        "createdAt": "2016-05-04T10:00:21Z",
        "updatedAt": "2016-05-04T10:00:21Z",
        "author": {
          "login": "psulek"
        }
      },
      {
        "body": "In my case migration to project.json is not an option. I created new issue and suggest solution with temp implementation.  https://github.com/NuGet/Home/issues/3207 \n",
        "createdAt": "2016-07-27T10:16:44Z",
        "updatedAt": "2016-07-27T10:16:44Z",
        "author": {
          "login": "dmitriyse"
        }
      }
    ]
  }
}