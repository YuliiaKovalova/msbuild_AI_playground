{
  "number": 2825,
  "title": "Ability to specify nuget sources in project file",
  "body": "Nuget.config is a nice way to get the dependencies' sources checked into sources. In addition to that, command line utilities also provide a way of specifying dependencies.\r\n\r\nnuget.exe way\r\n\r\n```powershell\r\nnuget install System.IO.Compression.Brotli `\r\n  -source https://dotnet.myget.org/F/dotnet-corefxlab/api/v3/index.json `\r\n  -source https://dotnet.myget.org/F/dotnet-core/api/v3/index.json `\r\n  -output deps `\r\n  -Prerelease\r\n```\r\n\r\ndotnet.exe way:\r\n\r\n```\r\n# add PackageReference to System.IO.Compression.Brotli in project file\r\n\r\ndotnet restore  `\r\n  --source https://dotnet.myget.org/F/dotnet-corefxlab/api/v3/index.json `\r\n  --source https://dotnet.myget.org/F/dotnet-core/api/v3/index.json `\r\n  --packages deps\r\n```\r\n\r\nWould be nice if we can:\r\n\r\n* specify sources in the proj file, so we don't need to carry an additional nuget.config file\r\n  ```xml\r\n  <ItemGroup>\r\n    <NugetPackageSource Include=\"https://dotnet.myget.org/F/dotnet-corefxlab/api/v3/index.json\" />\r\n    <NugetPackageSource Include=\"https://dotnet.myget.org/F/dotnet-core/api/v3/index.json\" />\r\n    <PackageReference Include=\"System.IO.Compression.Brotli\" Version=\"0.1.0-e171226-3\" />\r\n  </ItemGroup>\r\n  ```\r\n* restore package using command-line:\r\n  ```powershell\r\n  msbuild /restore `\r\n    /p:nuget-source=https://dotnet.myget.org/F/dotnet-corefxlab/api/v3/index.json&nuget-source=https://dotnet.myget.org/F/dotnet-core/api/v3/index.json\r\n  ```",
  "state": "CLOSED",
  "createdAt": "2017-12-27T04:20:40Z",
  "updatedAt": "2024-02-21T17:15:08Z",
  "closedAt": "2017-12-29T15:21:07Z",
  "author": {
    "login": "ghost"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "The `RestoreSources` and `RestoreAdditionalProjectSources` properties may be what you are looking for\r\nhttps://github.com/NuGet/Home/wiki/%5BSpec%5D-NuGet-settings-in-MSBuild\r\n",
        "createdAt": "2017-12-27T07:16:07Z",
        "updatedAt": "2017-12-27T07:16:07Z",
        "author": {
          "login": "dasMulli"
        }
      },
      {
        "body": "Thanks @dasMulli!\r\n\r\nIs it also possible to set `DefaultPushSource` in a same manner? I couldn't find any reference to that. With dotnet-cli, it's `dotnet nuget -s <MyURL> some.nupkg`. Would be dazzling if we can define it in one place, in csproj.",
        "createdAt": "2017-12-29T00:05:07Z",
        "updatedAt": "2017-12-29T00:05:07Z",
        "author": {
          "login": "ghost"
        }
      },
      {
        "body": "You could open an issue on https://github.com/NuGet/Home/issues\r\n\r\nProblem here would be that unlike restore, the push operation is performed on a `.nupkg` file and not as msbuild target in the project file so there is no csproj file involved.",
        "createdAt": "2017-12-29T02:45:10Z",
        "updatedAt": "2017-12-29T02:45:10Z",
        "author": {
          "login": "dasMulli"
        }
      },
      {
        "body": "Btw, you could also wrap the call into an msbuild target..\r\n\r\n```xml\r\n<PropertyGroup>\r\n  <PushSource>SOME-URL</PushSource>\r\n</PropertyGroup>\r\n\r\n<Target Name=\"PackAndPush\" DependsOnTargets=\"Pack\">\r\n  <Exec Command=\"dotnet nuget push -s $(PushSource) $(PackageOutputAbsolutePath)$(PackageId).$(PackageVersion).nupkg\" />\r\n</Target>\r\n```\r\n\r\nWhich you can invoke via\r\n\r\n```cmd\r\n> dotnet msbuild /t:PackAndPush /p:Configuration=Release\r\n```",
        "createdAt": "2017-12-29T02:57:06Z",
        "updatedAt": "2017-12-29T02:57:06Z",
        "author": {
          "login": "dasMulli"
        }
      },
      {
        "body": "Thanks for the reference. I will move that issue to NuGet Home",
        "createdAt": "2017-12-29T15:21:07Z",
        "updatedAt": "2017-12-29T15:21:07Z",
        "author": {
          "login": "ghost"
        }
      }
    ]
  }
}