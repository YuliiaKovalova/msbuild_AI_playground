{
  "number": 1576,
  "title": "Excludes or removes in project folder don't apply to recursive includes from a parent folder",
  "body": "Repro project: [ProjectFolder.zip](https://github.com/Microsoft/msbuild/files/712071/ProjectFolder.zip)\r\n\r\nConsider the following project (named `Project.proj`):\r\n\r\n```xml\r\n<Project xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\r\n  <ItemGroup>\r\n    <File Include=\"..\\**\" Exclude=\"Project.proj\" />\r\n  </ItemGroup>\r\n  <Target Name=\"Build\">\r\n    <Message Text=\"@(File)\"/>\r\n  </Target>\r\n</Project>\r\n```\r\n\r\nThe `File` include is recursively including all files starting in the parent directory of the project.  The `Exclude` statement is expected to prevent the `Project.proj` file to be excluded.\r\n\r\nHowever, when you build the project:\r\n\r\n**EXPECTED:** The `File` item (and hence output message) does not include `Project.proj`\r\n**ACTUAL:** `Project.proj` is included in the file item, as `..\\ProjectFolder\\Project.proj`",
  "state": "OPEN",
  "createdAt": "2017-01-17T19:21:59Z",
  "updatedAt": "2024-02-21T16:37:41Z",
  "closedAt": null,
  "author": {
    "login": "dsplaisted"
  },
  "labels": [
    "bug",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Consider for Next Major Version"
  },
  "comments": {
    "nodes": [
      {
        "body": "This is not a regression. Both msbuild 14 and current appear to behave the same way here. This is because items produced by an include with globs integrate the fixed dir part of the glob and the recursive expanded part into the item name. So `\"..\\**\"` will capture the file `Project.proj` as `..\\ProjectFolder\\Project.proj`. Since Excludes are treated as strings (sometimes :( ), the string `..\\path\\to\\file\\Project.proj` does not match the string `Project.proj` and therefore the Exclude does not apply.\r\n\r\nTo make the Exclude work here you either \r\n- change it to be the same as Include would have produced it (prepend fixed dir part and glob expanded recursive dir part): `<File Include=\"..\\**\" Exclude=\"..\\ProjectFolder\\Project.proj\" />`\r\n- exclude with a glob pattern: `<File Include=\"..\\**\" Exclude=\"**\\Project.proj\" />`\r\n",
        "createdAt": "2017-01-23T17:57:00Z",
        "updatedAt": "2017-01-23T17:57:59Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "@cdmihai I appreciate the technical detail, but that's\u00a0just\u00a0making the user\u00a0alter their code to an\u00a0internal weirdness. I'm not saying this is a regression, but I think we're saying that a user would expect `Exclude=\"Project.proj\"` to work because `Project.proj` is a valid subset of\u00a0anything matching `..\\**`. The fact that\u00a0certain things are expanded sometimes is irrelevant to user expectations.",
        "createdAt": "2017-01-23T18:02:30Z",
        "updatedAt": "2017-01-23T18:02:30Z",
        "author": {
          "login": "clairernovotny"
        }
      },
      {
        "body": "I agree with @onovotny that this is counter to user expectations.  Given the improvements we've made in this release, people are going to be using wildcards more, so they will be more likely to run into this issue than in previous versions.\r\n\r\nThis seems like it might be related to #1598.",
        "createdAt": "2017-01-23T22:34:09Z",
        "updatedAt": "2017-01-23T22:34:09Z",
        "author": {
          "login": "dsplaisted"
        }
      },
      {
        "body": "@dsplaisted Unfortunately the issues are related, but the fix is not related because item provenance uses regex matching without hitting the disk, whereas the FileMatcher follows a different code path since it needs to walk the file tree.\r\n\r\nAlso, since this is a 10 year old bug (msbuild2, which ships with every windows installation, behaves this way, and probably the subsequent msbuilds were made to mimic it), fixing it is scary, since the number of potentially breaking msbuild files in the world is unknown. \r\n\r\nThis also means that after I fix #1598 there will be a discrepancy between item provenance and actual globbing, with item provenance returning the correct thing, which means that sadly I might have to alter the item provenance to match this bug's behaviour :scream:\r\n\r\nI think that the way to go forward here is to wait until we implement fine grained telemetry for msbuild and then log an event when the code path for this bug is called. That way, after collecting events for an year or so we'll know how many users' builds we'd potentially break by fixing this bug.",
        "createdAt": "2017-01-24T01:47:26Z",
        "updatedAt": "2017-01-24T01:53:08Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "@cdmihai is there any way to\u00a0shim/quirk this behavior on\u00a0the\u00a0presence of the \"Sdk\" attribute? There's no existing builds in the wild that use that as it's brand new. Then the\u00a0telemetry can tell you\u00a0if the change\u00a0needs to be shimmed permanently or if it can be applied to all builds?\r\n\r\nThen we can have correct behavior for .NET Core projects at least.",
        "createdAt": "2017-01-24T01:54:32Z",
        "updatedAt": "2017-01-24T01:58:47Z",
        "author": {
          "login": "clairernovotny"
        }
      },
      {
        "body": "Discussed this in our daily stand-up. We do like the idea of forking the msbuild evaluation based on the SDK attribute to fix a bunch of wrong things with msbuild, which would be breaking changes otherwise. However, right now the change does not meet the bar for VS2017.\r\n\r\nAfter this release, we may look into ways of forking evaluation and preserving backwards compat.",
        "createdAt": "2017-01-24T18:46:13Z",
        "updatedAt": "2017-01-24T18:46:13Z",
        "author": {
          "login": "cdmihai"
        }
      }
    ]
  }
}