{
  "number": 2272,
  "title": "Generating strongly typed resource files not currently supported on .NET Core MSBuild ",
  "body": "_From @iSazonov on July 6, 2017 13:41_\n\nWhat is a right repo to ask about ResGen in `dotnet build`?\r\n\r\nCurrently I try to generate strongly typed resources and get error:\r\n```C:\\Users\\user\\AppData\\Local\\Microsoft\\dotnet\\sdk\\2.0.0-preview2-006502\\Microsoft.Common.CurrentVersion.targets(2921,5): error : Generating strongly typed resource files not currently supported on .NET Core MSBuild [C:\\Users\\user\\Documents\\GitHub\\iSazonov\\PowerShell\\src\\Microsoft.PowerShell.CoreCLR.Eventing\\Microsoft.PowerShell.CoreCLR.Eventing.csproj]```\r\n\r\nFrom related Issue https://github.com/dotnet/cli/issues/819:\r\n> dotnet-resgen  got replaced by the  Microsoft.Net.Sdk  implementation, so closing this.\r\n\r\nIs strongly typed resources supported?\n\n_Copied from original issue: dotnet/cli#7084_",
  "state": "CLOSED",
  "createdAt": "2017-07-07T20:37:48Z",
  "updatedAt": "2024-02-21T17:18:11Z",
  "closedAt": "2019-08-20T16:35:08Z",
  "author": {
    "login": "livarcocc"
  },
  "labels": [
    ".NET Core",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "MSBuild 16.3"
  },
  "comments": {
    "nodes": [
      {
        "body": "_From @wli3 on July 6, 2017 17:9_\n\nHi iSazonov,\r\nCould you try to add resx files like this? https://github.com/dotnet/sdk/blob/cd25d6bbfc2aac61cc790c511900427ac64fdaa8/TestAssets/TestProjects/KitchenSink/TestApp/TestApp.csproj#L24\r\n(This is a part of SDK automatic test asset)",
        "createdAt": "2017-07-07T20:37:48Z",
        "updatedAt": "2017-07-07T20:37:48Z",
        "author": {
          "login": "livarcocc"
        }
      },
      {
        "body": "_From @iSazonov on July 6, 2017 17:29_\n\n@wli3 Thanks! Please clarify - I don't see strongly typed config in the csproj. ",
        "createdAt": "2017-07-07T20:37:49Z",
        "updatedAt": "2017-07-07T20:37:49Z",
        "author": {
          "login": "livarcocc"
        }
      },
      {
        "body": "_From @wli3 on July 6, 2017 17:35_\n\nHi @iSazonov ,\r\nI think I misunderstood you. Looks like your project is in Github, could you share the specific strongly typed config code link?",
        "createdAt": "2017-07-07T20:37:49Z",
        "updatedAt": "2017-07-07T20:37:49Z",
        "author": {
          "login": "livarcocc"
        }
      },
      {
        "body": "_From @iSazonov on July 6, 2017 17:41_\n\n@wli3 I'll publish the sample tomorrow from my local branch.",
        "createdAt": "2017-07-07T20:37:49Z",
        "updatedAt": "2017-07-07T20:37:49Z",
        "author": {
          "login": "livarcocc"
        }
      },
      {
        "body": "_From @iSazonov on July 7, 2017 5:34_\n\nI published my test. See last ``<ItemGroup``> in  https://github.com/iSazonov/PowerShell/blob/cproj-psversion-from-git-resx/src/Microsoft.PowerShell.CoreCLR.Eventing/Microsoft.PowerShell.CoreCLR.Eventing.csproj\r\n\r\nBuild command:\r\n```\r\ndotnet msbuild /t:\"ResGen\" /v:diag /noconsolelogger /fileLogger .\\Microsoft.PowerShell.CoreCLR.Eventing.csproj\r\nor\r\ndotnet build /t:\"ResGen\" /v:diag /noconsolelogger /fileLogger .\\Microsoft.PowerShell.CoreCLR.Eventing.csproj\r\n```\r\n\r\nI believe error place is [here](https://github.com/Microsoft/msbuild/blob/master/src/Tasks/GenerateResource.cs#L3262)\r\nIs the project compiled without FEATURE_CODEDOM?\r\n",
        "createdAt": "2017-07-07T20:37:50Z",
        "updatedAt": "2017-07-07T20:37:50Z",
        "author": {
          "login": "livarcocc"
        }
      },
      {
        "body": "I am moving this issue over to MSBuild. FYI @rainersigwald ",
        "createdAt": "2017-07-07T20:37:50Z",
        "updatedAt": "2017-07-07T20:37:50Z",
        "author": {
          "login": "livarcocc"
        }
      },
      {
        "body": "Huh, we should have had an issue open for this already but I couldn't find one.\r\n\r\n> Is the project compiled without FEATURE_CODEDOM?\r\n\r\nYes, it is: CodeDOM wasn't available at the time of the initial port to .NET Core and we haven't lit up this feature after the initial port.\r\n\r\nIt looks like CodeDOM is available in .NET Core 2.0 (for code-writing scenarios, though not compilation), so we should be able to enable that feature flag everywhere after we move to targeting .NET Core 2.0.\r\n\r\n## Workarounds\r\nBuild with full framework MSBuild.exe (on a Windows machine).\r\n\r\nCheck in the (generated) `.cs` files and update them when necessary (from Windows/full framework).",
        "createdAt": "2017-07-07T21:12:38Z",
        "updatedAt": "2017-07-07T21:12:38Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald Thanks! \r\n[PowerShell Core](https://github.com/PowerShell/PowerShell/) is multiplatform project and we cannot use MSBuild.exe. Currently we use a [simple tool ](https://github.com/PowerShell/PowerShell/tree/master/src/ResGen)developed by @vors.\r\n\r\n>It looks like CodeDOM is available in .NET Core 2.0 \r\n\r\nYes, it is. So I believe it is easy to fix the Issue.\r\n\r\n\r\n",
        "createdAt": "2017-07-08T15:24:08Z",
        "updatedAt": "2017-07-08T15:24:08Z",
        "author": {
          "login": "iSazonov"
        }
      },
      {
        "body": "Hello Team, I am sorry if I am asking silly question: So what I understand is that if I am using dotnet sdk on my Mac & vscode for editing, I can't create a strongly typed controller from db ?\r\n\r\n(I know there is visual studio version now available for Mac).\r\nThanks \ud83d\udc4d",
        "createdAt": "2017-09-12T06:59:17Z",
        "updatedAt": "2017-09-12T06:59:17Z",
        "author": {
          "login": "foo-baar"
        }
      },
      {
        "body": "Team, .Net Core 2.0 RTM was out - could you please milestone the Issue?",
        "createdAt": "2017-09-13T05:33:00Z",
        "updatedAt": "2017-09-13T05:33:00Z",
        "author": {
          "login": "iSazonov"
        }
      },
      {
        "body": "Team, .Net Core 2.0 RTM was out - could you please milestone the Issue?",
        "createdAt": "2018-03-13T00:17:21Z",
        "updatedAt": "2018-03-13T00:17:21Z",
        "author": {
          "login": "ghost"
        }
      },
      {
        "body": "@livarcocc, when is this feature going to be supported. Absence of this makes it difficult to build code from Linux, i.e. requires manual overhead of generating and checking in strongly typed resource access wrapper.",
        "createdAt": "2018-04-13T15:11:19Z",
        "updatedAt": "2018-04-13T15:11:19Z",
        "author": {
          "login": "hrushib"
        }
      },
      {
        "body": "From a quick look this morning, CodeDOM is **not** enough to bring this back: the task also depends on `System.Resources.ResXResourceReader` which is full-framework only.",
        "createdAt": "2018-04-19T15:56:25Z",
        "updatedAt": "2018-04-19T15:56:25Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Should we open an API proposal for `ResXResourceReader` in CoreFX repo? https://github.com/dotnet/corefx/issues/12565 and https://github.com/Microsoft/msbuild/issues/1352 seem related issues.",
        "createdAt": "2018-04-19T16:07:32Z",
        "updatedAt": "2018-04-19T16:07:32Z",
        "author": {
          "login": "ghost"
        }
      },
      {
        "body": "Discussed with @rainersigwald offline. I think it is worth trying to bring this back without waiting for ResXResourceReader (whose port is not scheduled currently)\r\n\r\nMy suspicion (just from browsing the code) is that ResxResourcrReader/ResXDataNode are not necessary for this scenario. StronglyTypedResourceBuilder hardly depends on them and it looks like those code paths can probably be removed. \r\n\r\nHappily MSBuild happens to already have a copy of [StronglyTypedResourceBuilder.cs](https://github.com/Microsoft/msbuild/blob/master/src/Tasks/StronglyTypedResourceBuilder.cs) because I guess historically they had a reason for avoiding a dependency on System.Design.dll. (Maybe it was only in the SDK?). I compared it with .NET Framework's current copy and it's basically the same. \r\n\r\nI think someone could take a shot at wiring this up now.",
        "createdAt": "2018-04-19T18:47:02Z",
        "updatedAt": "2018-04-19T18:47:02Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "@kasper3 any interst in taking a look?",
        "createdAt": "2018-04-19T18:47:34Z",
        "updatedAt": "2018-04-19T18:47:34Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "@danmosemsft, I tried building msbuild master on Windows 10, `msbuild\\build.cmd -hostType Core` and getting errors like:\r\n\r\n> C:\\Users\\kasper\\.nuget\\packages\\nerdbank.gitversioning\\2.1.23\\build\\Nerdbank.GitVersioning.targets(63,5): error MSB4018:    at LibGit2Sharp.Core.Proxy.git_revwalk_next(RevWalkerHandle walker) [C:\\Users\\kasper\\Source\\Repos\\msbuild\\src\\Samples\\TaskUsageLogger\\TaskUsageLogger.csproj]\r\n\r\nTried in three modes: Developer Command Prompt VS2017, normal cmd, normal PowerShell.",
        "createdAt": "2018-04-19T22:54:31Z",
        "updatedAt": "2018-04-19T22:54:31Z",
        "author": {
          "login": "ghost"
        }
      },
      {
        "body": "Uh, I have no idea what that means. Is there any more information like callstack or message? Is this a fresh new clone - if not I would delete it and clone again?",
        "createdAt": "2018-04-19T22:56:57Z",
        "updatedAt": "2018-04-19T22:56:57Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "I just cloned the repo, tip of master branch. Call stack:\r\n\r\n```\r\nC:\\Users\\kasper\\.nuget\\packages\\nerdbank.gitversioning\\2.1.23\\build\\Nerdbank.GitVersioning.targets(63,5): error MSB4018: The \"Nerdbank.GitVersioning.Tasks.GetBuildVersion\" task failed unexpectedly. [C:\\Users\\kasper\\Source\\Repos\\msbuild\\src\\Samples\\XmlFileLogger\\XmlFileLogger.csproj]\r\nC:\\Users\\kasper\\.nuget\\packages\\nerdbank.gitversioning\\2.1.23\\build\\Nerdbank.GitVersioning.targets(63,5): error MSB4018: LibGit2Sharp.NotFoundException: object not found - no match for id (7c1f7a8cd8f2b844046892036912db28a7ec4c37) [C:\\Users\\kasper\\Source\\Repos\\msbuild\\src\\Samples\\XmlFileLogger\\XmlFileLogger.csproj]\r\nC:\\Users\\kasper\\.nuget\\packages\\nerdbank.gitversioning\\2.1.23\\build\\Nerdbank.GitVersioning.targets(63,5): error MSB4018:    at LibGit2Sharp.Core.Ensure.HandleError(Int32 result) [C:\\Users\\kasper\\Source\\Repos\\msbuild\\src\\Samples\\XmlFileLogger\\XmlFileLogger.csproj]\r\nC:\\Users\\kasper\\.nuget\\packages\\nerdbank.gitversioning\\2.1.23\\build\\Nerdbank.GitVersioning.targets(63,5): error MSB4018:    at LibGit2Sharp.Core.Proxy.git_revwalk_next(RevWalkerHandle walker) [C:\\Users\\kasper\\Source\\Repos\\msbuild\\src\\Samples\\XmlFileLogger\\XmlFileLogger.csproj]\r\nC:\\Users\\kasper\\.nuget\\packages\\nerdbank.gitversioning\\2.1.23\\build\\Nerdbank.GitVersioning.targets(63,5): error MSB4018:    at LibGit2Sharp.CommitLog.CommitEnumerator.MoveNext() [C:\\Users\\kasper\\Source\\Repos\\msbuild\\src\\Samples\\XmlFileLogger\\XmlFileLogger.csproj]\r\nC:\\Users\\kasper\\.nuget\\packages\\nerdbank.gitversioning\\2.1.23\\build\\Nerdbank.GitVersioning.targets(63,5): error MSB4018:    at System.Linq.Enumerable.TryGetFirst[TSource](IEnumerable`1 source, Boolean& found) [C:\\Users\\kasper\\Source\\Repos\\msbuild\\src\\Samples\\XmlFileLogger\\XmlFileLogger.csproj]\r\nC:\\Users\\kasper\\.nuget\\packages\\nerdbank.gitversioning\\2.1.23\\build\\Nerdbank.GitVersioning.targets(63,5): error MSB4018:    at Nerdbank.GitVersioning.VersionOracle..ctor(String projectDirectory, Repository repo, ICloudBuild cloudBuild, Nullable`1 overrideBuildNumberOffset, String projectPathRelativeToGitRepoRoot) [C:\\Users\\kasper\\Source\\Repos\\msbuild\\src\\Samples\\XmlFileLogger\\XmlFileLogger.csproj]\r\nC:\\Users\\kasper\\.nuget\\packages\\nerdbank.gitversioning\\2.1.23\\build\\Nerdbank.GitVersioning.targets(63,5): error MSB4018:    at Nerdbank.GitVersioning.VersionOracle.Create(String projectDirectory, String gitRepoDirectory, ICloudBuild cloudBuild, Nullable`1 overrideBuildNumberOffset, String projectPathRelativeToGitRepoRoot) [C:\\Users\\kasper\\Source\\Repos\\msbuild\\src\\Samples\\XmlFileLogger\\XmlFileLogger.csproj]\r\nC:\\Users\\kasper\\.nuget\\packages\\nerdbank.gitversioning\\2.1.23\\build\\Nerdbank.GitVersioning.targets(63,5): error MSB4018:    at Nerdbank.GitVersioning.Tasks.GetBuildVersion.ExecuteInner() [C:\\Users\\kasper\\Source\\Repos\\msbuild\\src\\Samples\\XmlFileLogger\\XmlFileLogger.csproj]\r\n```\r\n\r\n```\r\ngit log -1\r\ncommit e8b480c373eadd9daa975c6e96e4dbbabcd9a4fe\r\n```",
        "createdAt": "2018-04-19T23:05:49Z",
        "updatedAt": "2018-04-19T23:05:49Z",
        "author": {
          "login": "ghost"
        }
      },
      {
        "body": "Shallow clone?\r\nhttps://github.com/libgit2/libgit2sharp/issues/1351",
        "createdAt": "2018-04-19T23:49:13Z",
        "updatedAt": "2018-04-19T23:49:13Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "Yes, that was it.. I had `git clone <url> --single-branch --depth 1`, unshallowed it using https://stackoverflow.com/a/17937889 \ud83d\udc15 \r\nMaybe something like https://github.com/dotnet/buildtools/pull/1977/files can be used to have safe rev-parsing, with `git-describe` command changed to `git describe --always --abbrev=0 --match \"NOT A TAG\"`, to get hash, since Libgit2 does not support shallow clones.",
        "createdAt": "2018-04-20T05:16:04Z",
        "updatedAt": "2018-04-20T05:16:04Z",
        "author": {
          "login": "ghost"
        }
      },
      {
        "body": "Since our version numbers are commit-height based, we wouldn't support shallow clones regardless of libgit2sharp support. The experience could surely be better though, sorry you ran into this @kasper3.",
        "createdAt": "2018-04-20T15:17:07Z",
        "updatedAt": "2018-04-20T15:17:07Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@kasper3 if it's helpful, I pushed my WIP to https://github.com/rainersigwald/msbuild/tree/strongly-typed-resgen.\r\n\r\nI also ran under a debugger to see which of these codepaths was hit in the sample project https://github.com/iSazonov/PowerShell/blob/cproj-psversion-from-git-resx/src/Microsoft.PowerShell.CoreCLR.Eventing/Microsoft.PowerShell.CoreCLR.Eventing.csproj:\r\n\r\nhttps://github.com/Microsoft/msbuild/blob/e8b480c373eadd9daa975c6e96e4dbbabcd9a4fe/src/Tasks/system.design/stronglytypedresourcebuilder.cs#L122-L143\r\n\r\nDespite the \"this will be rare after Whidbey M3\" (that's Visual Studio **2005**) comment, that's the path that was traversed. If that's all that's ever used it'd make the port _much_ easier.",
        "createdAt": "2018-04-20T15:34:32Z",
        "updatedAt": "2018-04-20T15:34:32Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald, thanks for the WIP branch. Seems like `StronglyTypedResourceBuilder.Create` method ends up requiring `ResXDataNode`, which is not available on .NET Core today. Should we port some code from https://referencesource.microsoft.com/#System.Windows.Forms/winforms/Managed/System/Resources/ResXDataNode.cs into MSBuild repo (internal types), unless there is a better workaround? :)",
        "createdAt": "2018-04-20T22:06:40Z",
        "updatedAt": "2018-04-20T22:06:40Z",
        "author": {
          "login": "ghost"
        }
      },
      {
        "body": "@kasper3 That's what I was investigating under the debugger: it _looks_ like we could just `#if` out that code for .net core, and not lose any functionality. It didn't appear to be hit in the simple strongly-typed-resource scenario I was trying.",
        "createdAt": "2018-04-20T22:14:44Z",
        "updatedAt": "2018-04-20T22:14:44Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Right, GenerateResource would pass reader.resourcesHashTable to Create for the resourceList: that certainly can't contain any values of type ResXDataNode because .NET Core doesn't have that type so I believe that cast in Create will always fail so the codepath can be removed. In fact looking at GenerateResource it seems the values will always be strings on .NET Core. Likewise GenerateResource doesn't use the Create overloads that take a file so ResXResourceReader code can be removed.",
        "createdAt": "2018-04-20T22:22:06Z",
        "updatedAt": "2018-04-20T22:22:43Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "After applying this patch on top of @rainersigwald's branch:\r\n\r\n```diff\r\ndiff --git a/src/Tasks/system.design/stronglytypedresourcebuilder.cs b/src/Tasks/system.design/stronglytypedresourcebuilder.cs\r\nindex 332ff638..49976ec2 100644\r\n--- a/src/Tasks/system.design/stronglytypedresourcebuilder.cs\r\n+++ b/src/Tasks/system.design/stronglytypedresourcebuilder.cs\r\n@@ -119,27 +119,11 @@ namespace Microsoft.Build.Tasks\r\n             Dictionary<String, ResourceData> resourceTypes = new Dictionary<String, ResourceData>(StringComparer.InvariantCultureIgnoreCase);\r\n             foreach (DictionaryEntry de in resourceList)\r\n             {\r\n-                ResXDataNode node = de.Value as ResXDataNode;\r\n-                ResourceData data;\r\n-                if (node != null)\r\n-                {\r\n-                    string keyname = (string)de.Key;\r\n-                    if (keyname != node.Name)\r\n-                        throw new ArgumentException(SR.GetString(SR.MismatchedResourceName, keyname, node.Name));\r\n-\r\n-                    String typeName = node.GetValueTypeName((AssemblyName[])null);\r\n-                    Type type = Type.GetType(typeName);\r\n-                    String valueAsString = node.GetValue((AssemblyName[])null).ToString();\r\n-                    data = new ResourceData(type, valueAsString);\r\n-                }\r\n-                else\r\n-                {\r\n-                    // If the object is null, we don't have a good way of guessing the\r\n-                    // type.  Use Object.  This will be rare after WinForms gets away\r\n-                    // from their resource pull model in Whidbey M3.\r\n-                    Type type = (de.Value == null) ? typeof(Object) : de.Value.GetType();\r\n-                    data = new ResourceData(type, de.Value == null ? null : de.Value.ToString());\r\n-                }\r\n+                // If the object is null, we don't have a good way of guessing the\r\n+                // type.  Use Object.  This will be rare after WinForms gets away\r\n+                // from their resource pull model in Whidbey M3.\r\n+                Type type = (de.Value == null) ? typeof(Object) : de.Value.GetType();\r\n+                var data = new ResourceData(type, de.Value == null ? null : de.Value.ToString());\r\n                 resourceTypes.Add((String)de.Key, data);\r\n             }\r\n \r\n@@ -260,39 +244,6 @@ namespace Microsoft.Build.Tasks\r\n             return ccu;\r\n         }\r\n \r\n-        internal static CodeCompileUnit Create(String resxFile, String baseName, String generatedCodeNamespace, CodeDomProvider codeProvider, bool internalClass, out String[] unmatchable)\r\n-        {\r\n-            return Create(resxFile, baseName, generatedCodeNamespace, null, codeProvider, internalClass, out unmatchable);\r\n-        }\r\n-\r\n-        [SuppressMessage(\"Microsoft.Naming\", \"CA1704:IdentifiersShouldBeSpelledCorrectly\")]\r\n-        internal static CodeCompileUnit Create(String resxFile, String baseName, String generatedCodeNamespace, String resourcesNamespace, CodeDomProvider codeProvider, bool internalClass, out String[] unmatchable)\r\n-        {\r\n-            if (resxFile == null)\r\n-                throw new ArgumentNullException(\"resxFile\");\r\n-\r\n-            // Read the resources from a ResX file into a dictionary - name & type name\r\n-            Dictionary<String, ResourceData> resourceList = new Dictionary<String, ResourceData>(StringComparer.InvariantCultureIgnoreCase);\r\n-            using (ResXResourceReader rr = new ResXResourceReader(resxFile))\r\n-            {\r\n-                rr.UseResXDataNodes = true;\r\n-                foreach (DictionaryEntry de in rr)\r\n-                {\r\n-                    ResXDataNode node = (ResXDataNode)de.Value;\r\n-                    String typeName = node.GetValueTypeName((AssemblyName[])null);\r\n-                    Type type = Type.GetType(typeName);\r\n-                    String valueAsString = node.GetValue((AssemblyName[])null).ToString();\r\n-                    ResourceData data = new ResourceData(type, valueAsString);\r\n-                    resourceList.Add((String)de.Key, data);\r\n-                }\r\n-            }\r\n-\r\n-            // Note we still need to verify the resource names are valid language\r\n-            // keywords, etc.  So there's no point to duplicating the code above.\r\n-\r\n-            return InternalCreate(resourceList, baseName, generatedCodeNamespace, resourcesNamespace, codeProvider, internalClass, out unmatchable);\r\n-        }\r\n-\r\n         private static void AddGeneratedCodeAttributeforMember(CodeTypeMember typeMember)\r\n         {\r\n             CodeAttributeDeclaration generatedCodeAttrib = new CodeAttributeDeclaration(new CodeTypeReference(typeof(System.CodeDom.Compiler.GeneratedCodeAttribute)));\r\n```\r\n\r\nI am getting `SR is inaccessible due to its protection level`.",
        "createdAt": "2018-04-21T06:34:18Z",
        "updatedAt": "2018-04-21T06:34:18Z",
        "author": {
          "login": "ghost"
        }
      },
      {
        "body": "I can't see the rest is the code on my phone but my guess is that the STR class is pulling some resource strings  using SR.XXX and needs to change to follow however rest of MSBuild code does it?",
        "createdAt": "2018-04-21T13:40:33Z",
        "updatedAt": "2018-04-21T13:40:33Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "Did this issue make any forward progress since the last post? I'm looking into this for a project I'm working on and wondering if we should expect a fix soon or if we should roll a workaround. ",
        "createdAt": "2018-09-04T17:39:28Z",
        "updatedAt": "2018-09-04T17:39:28Z",
        "author": {
          "login": "nathansoz"
        }
      },
      {
        "body": "@nathansoz I don't think so. I suspect they'd welcome a PR. It seemed at the time like there was likely not much work.",
        "createdAt": "2018-09-04T17:51:49Z",
        "updatedAt": "2018-09-04T17:51:49Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "I assume this now impacts the winforms/wpf-on-.net-core scenario?\r\nWould this require msbuild to run on the winforms/wpf shared framework to get the required generation/seralization assemblies used on the full-fx msbuild version? Or does it need a clean re-implementation to make sure the resulting assemblies are compatible for both net* and netcoreapp* applications built using Core MSBuild?",
        "createdAt": "2018-09-04T23:14:24Z",
        "updatedAt": "2018-09-04T23:14:24Z",
        "author": {
          "login": "dasMulli"
        }
      },
      {
        "body": "I tried generating resource files by using the following MSBuild setup, but didn't succeed.\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>  \r\n  <ItemGroup>\r\n    <Compile Update=\"Strings.Designer.cs\">\r\n      <DesignTime>True</DesignTime>\r\n      <AutoGen>True</AutoGen>\r\n      <DependentUpon>Strings.resx</DependentUpon>\r\n    </Compile>\r\n    <EmbeddedResource Update=\"Strings.resx\">\r\n      <Generator>ResXFileCodeGenerator</Generator>\r\n      <LastGenOutput>Strings.Designer.cs</LastGenOutput>\r\n      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>\r\n      <CustomToolNamespace>My.Namespace</CustomToolNamespace>\r\n      <LogicalName>My.Namespace.Strings.resources</LogicalName>\r\n    </EmbeddedResource>\r\n    <ResXCodeSources Include=\"Strings.resx\"/>\r\n  </ItemGroup>\r\n  <Target Name=\"MakeTypedMessages\" AfterTargets=\"Build\">\r\n    <GenerateResource Sources=\"@(ResXCodeSources->'%(identity)')\"\r\n      UseSourcePath=\"true\"\r\n      StronglyTypedClassName=\"@(ResXCodeSources->'%(filename)')\"\r\n      StronglyTypedLanguage=\"C#\"\r\n      StronglyTypedNamespace=\"My.Namespace\"\r\n      StronglyTypedFileName=\"@(ResXCodeSources->'%(relativedir)%(filename).Designer.cs')\"\r\n      OutputResources=\"@(ResXCodeSources->'My.Namespace.%(filename).resources')\" />\r\n  </Target>\r\n</Project>\r\n```\r\nThis is the output I get:\r\n```\r\nerror : ResGen.exe not supported on .NET Core MSBuild\r\n```\r\nIt comes from here: https://github.com/Microsoft/msbuild/blob/master/src/Tasks/GenerateResource.cs#L1122\r\n\r\nJust to clarify, does this mean we are still unable to generate `resx` file with `msbuild` on .NET Core at build time? I saw some tools mentioned above like `dotnet-resgen` but as @TheRealPiotrP <a href=\"https://github.com/dotnet/cli/issues/819\">wrote here</a> it is now removed (https://github.com/dotnet/cli/issues/819)\r\n\r\n> dotnet-resgen got replaced by the Microsoft.Net.Sdk implementation, so closing this.\r\n\r\nBut this doesn't seem to be truthy at least for `netcoreapp2.1` as far as I tested, see the project setup above \u2014 it says `ResGen.exe not supported on .NET Core MSBuild`. \r\n\r\nIf nothing works, how to generate `resx` files at build time on .NET Core? Or at least how open source contributors can help with improving `resx` support for .NET Core?",
        "createdAt": "2018-11-12T08:25:46Z",
        "updatedAt": "2018-11-12T08:28:57Z",
        "author": {
          "login": "worldbeater"
        }
      },
      {
        "body": "> Just to clarify, does this mean we are still unable to generate `resx` file with `msbuild` on .NET Core at build time?\r\n\r\nCorrect. We expect to resolve this with .NET Core 3.0. Most of the discussion on that is going on in #2221.",
        "createdAt": "2018-11-12T17:36:55Z",
        "updatedAt": "2018-11-12T17:36:55Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald should we close this issue in favor of the one you linked above?",
        "createdAt": "2018-11-12T20:23:09Z",
        "updatedAt": "2018-11-12T20:23:09Z",
        "author": {
          "login": "livarcocc"
        }
      },
      {
        "body": "I think it's possible to do this part (generate C# from the resx) without the full task. #3819 is an attempt to do so.\r\n\r\nIn the end we should make sure both scenarios work, so I'd keep both open but I don't have strong feelings about it.",
        "createdAt": "2018-11-12T20:51:15Z",
        "updatedAt": "2018-11-12T20:51:15Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald I see you've already completed some work in #4420 but you also call out some work such as 'Check to ensure that the reader type is available when not targeting netcoreapp3.0' (which is ticked now).\r\nDoes this mean that a project targeting .Net Standard (2.0) can already auto-generate the `*.Designer.cs` files (in my case just the simple case of only strings)? Using `preview8,` it does not seem to do that at the moment or is a property needed to opt into this at the moment for `netstandard2.0` projects? Thanks.",
        "createdAt": "2019-08-19T16:04:10Z",
        "updatedAt": "2019-08-19T16:05:00Z",
        "author": {
          "login": "bergmeister"
        }
      },
      {
        "body": "@bergmeister That wasn't directly related to code generation, and StronglyTypedResourceGenerator doesn't work in preview8. #4588 should enable it in the future, though.\r\n\r\nIf your code is open source, I can add it to the set of things I'm testing before merging that PR. Just feed me a link :)",
        "createdAt": "2019-08-19T16:20:05Z",
        "updatedAt": "2019-08-19T16:20:05Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald Thanks for the quick answer. An example project that you could use for testing is this one: https://github.com/PowerShell/PSScriptAnalyzer/tree/master/Engine\r\nJust remove the `Strings.Designer.cs` file, remove the `global.json` one directory above and then just type `dotnet build` (all NuGet packages are on NuGet.org so everything should just build out of the box).",
        "createdAt": "2019-08-19T16:32:52Z",
        "updatedAt": "2019-08-19T16:32:52Z",
        "author": {
          "login": "bergmeister"
        }
      },
      {
        "body": "@rainersigwald I tried to use `Preview9` on my project (links in last comment) but `dotnet build` does not create me the strongly typed .cs file from .resx file although the csproj has the following:\r\n```\r\n  <ItemGroup>\r\n    <Compile Update=\"Strings.Designer.cs\">\r\n      <DesignTime>True</DesignTime>\r\n      <AutoGen>True</AutoGen>\r\n      <DependentUpon>Strings.resx</DependentUpon>\r\n    </Compile>\r\n  </ItemGroup>\r\n\r\n  <ItemGroup>\r\n    <EmbeddedResource Update=\"Strings.resx\">\r\n      <Generator>ResXFileCodeGenerator</Generator>\r\n      <LastGenOutput>Strings.Designer.cs</LastGenOutput>\r\n    </EmbeddedResource>\r\n  </ItemGroup>\r\n```\r\nAm I am missing something, is there something that needs to be enabled explicitly for a .net standard (2.0) library?",
        "createdAt": "2019-09-14T14:21:41Z",
        "updatedAt": "2019-09-14T14:21:41Z",
        "author": {
          "login": "bergmeister"
        }
      },
      {
        "body": "@bergmeister Yes, this is fairly confusing: your build was configured so that building _inside Visual Studio_ would regenerate the source files, but building _on the command line_ would not (regardless of whether it was `msbuild.exe` or `dotnet build` doing it).\r\n\r\nWhen I tested your repo I applied this patch to change to build-time generation in all cases:\r\n\r\n```diff\r\ndiff --git a/Engine/Engine.csproj b/Engine/Engine.csproj\r\nindex 560ce8d..2fca8db 100644\r\n--- a/Engine/Engine.csproj\r\n+++ b/Engine/Engine.csproj\r\n@@ -46,18 +46,19 @@\r\n     <PackageReference Include=\"Microsoft.CSharp\" Version=\"4.5.0\" />\r\n   </ItemGroup>\r\n \r\n-  <ItemGroup>\r\n+  <!-- <ItemGroup>\r\n     <Compile Update=\"Strings.Designer.cs\">\r\n       <DesignTime>True</DesignTime>\r\n       <AutoGen>True</AutoGen>\r\n       <DependentUpon>Strings.resx</DependentUpon>\r\n     </Compile>\r\n-  </ItemGroup>\r\n+  </ItemGroup> -->\r\n \r\n   <ItemGroup>\r\n     <EmbeddedResource Update=\"Strings.resx\">\r\n       <Generator>ResXFileCodeGenerator</Generator>\r\n-      <LastGenOutput>Strings.Designer.cs</LastGenOutput>\r\n+      <StronglyTypedFileName>$(IntermediateOutputPath)\\Strings.Designer.cs</StronglyTypedFileName>\r\n+      <StronglyTypedLanguage>CSharp</StronglyTypedLanguage>\r\n     </EmbeddedResource>\r\n   </ItemGroup>\r\n```",
        "createdAt": "2019-09-16T15:57:20Z",
        "updatedAt": "2019-09-16T15:57:20Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald Thanks for the info, however, even with the `rc1` of .Net Core 3 and your local changes, it does not work for me",
        "createdAt": "2019-09-17T09:24:56Z",
        "updatedAt": "2019-09-17T09:24:56Z",
        "author": {
          "login": "bergmeister"
        }
      },
      {
        "body": "@bergmeister Can you please file a new issue with details? How exactly does it fail to work--build error? Runtime failure doing something in particular?",
        "createdAt": "2019-09-17T14:16:31Z",
        "updatedAt": "2019-09-17T14:16:31Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Ok, I can create an issue with a minimized repro.\r\nIt fails on build due to the `Strings.Designer.cs` not being created by the build (I deleted the file locally as I'd expect `dotnet build` to create it automatically, is my assumption here right?)",
        "createdAt": "2019-09-17T14:52:09Z",
        "updatedAt": "2019-09-17T14:52:09Z",
        "author": {
          "login": "bergmeister"
        }
      },
      {
        "body": "Yes, that's correct--the copy in the checked-in tree is not needed when switching over to build-time generation.",
        "createdAt": "2019-09-17T14:53:19Z",
        "updatedAt": "2019-09-17T14:53:19Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@bergmeister, I think I've reproduced the problem; it looks like something's gone wrong with the namespace/class name that we're generating. Don't worry about minimizing but please do file a bug.",
        "createdAt": "2019-09-17T15:09:13Z",
        "updatedAt": "2019-09-17T15:09:13Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@bergmeister with this I can get your project to compile:\r\n\r\n```diff\r\ndiff --git a/Engine/Engine.csproj b/Engine/Engine.csproj\r\nindex 560ce8d..e1f143b 100644\r\n--- a/Engine/Engine.csproj\r\n+++ b/Engine/Engine.csproj\r\n@@ -46,18 +46,21 @@\r\n     <PackageReference Include=\"Microsoft.CSharp\" Version=\"4.5.0\" />\r\n   </ItemGroup>\r\n \r\n-  <ItemGroup>\r\n+  <!-- <ItemGroup>\r\n     <Compile Update=\"Strings.Designer.cs\">\r\n       <DesignTime>True</DesignTime>\r\n       <AutoGen>True</AutoGen>\r\n       <DependentUpon>Strings.resx</DependentUpon>\r\n     </Compile>\r\n-  </ItemGroup>\r\n+  </ItemGroup> -->\r\n \r\n   <ItemGroup>\r\n     <EmbeddedResource Update=\"Strings.resx\">\r\n       <Generator>ResXFileCodeGenerator</Generator>\r\n-      <LastGenOutput>Strings.Designer.cs</LastGenOutput>\r\n+      <StronglyTypedFileName>$(IntermediateOutputPath)\\Strings.Designer.cs</StronglyTypedFileName>\r\n+      <StronglyTypedLanguage>CSharp</StronglyTypedLanguage>\r\n+      <StronglyTypedNamespace>Microsoft.Windows.PowerShell.ScriptAnalyzer</StronglyTypedNamespace>\r\n+      <StronglyTypedClassName>Strings</StronglyTypedClassName>\r\n     </EmbeddedResource>\r\n   </ItemGroup>\r\n\r\n ```\r\n\r\nWe can chase down exactly why all this is necessary in your bug.",
        "createdAt": "2019-09-17T15:18:18Z",
        "updatedAt": "2019-09-17T15:18:18Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Thanks, it works now with your 2 new lines.\r\nThe `StronglyTypedNamespace` line seems to be only necessary because we have the following in the csproj (from the days when we converted from project.json to the new csproj format to make it work using Visual Studio)\r\n`<RootNamespace>Microsoft.Windows.PowerShell.ScriptAnalyzer</RootNamespace>`\r\nNow that the command line works, we don't care about Visual Studio too much tbh but I will check that later today (using VS 16.2.5 somehow the setting to allow VS to use preview SDKs has gone or can I use the VS Preview for that now only?)\r\nIs the `StronglyTypedClassName` property needed due to the resx file not matching the project name? I tried renaming it to `Engine.resx` and changed the references in the csproj but the property was still needed then.\r\nShould I file the 'bug' to be specific about this project or rather generic that those properties seem to be needed? As a user I can be flexible, but I'd like to know what is the cleanest/simplest csproj declaration to have this working (optionally also in a way that it works with VS)",
        "createdAt": "2019-09-19T08:26:51Z",
        "updatedAt": "2019-09-19T08:26:51Z",
        "author": {
          "login": "bergmeister"
        }
      },
      {
        "body": "File whatever's easiest for you and we can broaden/narrow it as we investigate.",
        "createdAt": "2019-09-19T15:05:04Z",
        "updatedAt": "2019-09-19T15:05:04Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}