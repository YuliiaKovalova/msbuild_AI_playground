{
  "number": 7002,
  "title": "Use EvaluationContexts in graph creation",
  "body": "Discussed offline with @AArnott and @cdmihai.\r\n\r\nWhen building the static graph, I/O can be a bottleneck for evaluating the many projects that get put into the graph. The existing `EvaluationContext` allows sharing filesystem enumerations and other operations and would potentially speed up evaluation (especially of heavily multitargeted solutions).\r\n\r\nThis may not be trivial (from @cdmihai):\r\n\r\n> That\u2019s a good point, static graph creation should use an evaluation context in order cache stuff from all the nodes\u2019 evaluations, but it doesn\u2019t. That would be one good perf optimization. Might be tricky to have it use an evaluation context because the graph builder provides a delegate to users, so the project evaluation happens in users\u2019 code when they provide their own delegate. So we either change the delegate signature to receive an evaluation context (breaking change right?) or we change the ProjectCollection to carry an evaluation context (the delegate does receive a ProjectCollection).\r\n\r\nEven if we can't make this fully generalizable, we should consider using an `EvaluationContext` for the default-behavior \"don't specify your own delegate\" case\r\n\r\n```C#\r\n            using ProjectCollection projectCollection = new(); \r\n            ProjectGraph graph = new(entrypoints, projectCollection);\r\n```",
  "state": "OPEN",
  "createdAt": "2021-10-29T16:20:36Z",
  "updatedAt": "2024-02-21T16:28:19Z",
  "closedAt": null,
  "author": {
    "login": "rainersigwald"
  },
  "labels": [
    "Area: Performance",
    "Partner request",
    "Area: Static Graph",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "The workaround here is that the custom delegate providing user can create and use their own EvaluationContext instance when their delegate gets called. That's how QB [does it](https://dev.azure.com/mseng/Domino/_git/CloudBuild?path=/private/BuildEngine/Enlistment.Library/src/DependencyParserV2.cs&version=GBmaster&line=212&lineEnd=213&lineStartColumn=1&lineEndColumn=1&lineStyle=plain&_a=contents).\r\n\r\nOn the other hand it would be nice if static graph construction did this by default. I can't think of any scenario where you wouldn't want automatic caching (unless your memory is really constrained ...), and there's a high probability that potential static graph users might not know about EvaluationContexts.",
        "createdAt": "2021-10-29T16:47:23Z",
        "updatedAt": "2021-10-29T16:47:23Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "> unless your memory is really constrained\r\n\r\nIf my memory were constrained, I would be more worried about the accumulation of `ProjectInstance` objects that the graph creates and never releases during the graph traversal.",
        "createdAt": "2021-10-29T18:49:36Z",
        "updatedAt": "2021-10-29T18:49:46Z",
        "author": {
          "login": "AArnott"
        }
      }
    ]
  }
}