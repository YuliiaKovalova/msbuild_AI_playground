{
  "number": 3000,
  "title": "PackageReference is not resolved while it works in Visual Studio",
  "body": "### Steps to reproduce\r\n\r\n- Create a Empty Web Application Project in Visual Studio.\r\n- Make it really empty by removing the DotNetCompilerPlatform stuff\r\n- Add a Nuget package reference to `Microsoft.AspNet.Mvc` version 5.2.4\r\n- Add a Global.asax and its code behind with a `using System.Web.Mvc`\r\n- Compile in Visual Studio\r\n- Compile from the command line\r\n\r\nDirectory contents:\r\n```\r\n/\r\n- Properties/\r\n  - AssemblyInfo.cs\r\n- Global.asax\r\n- Global.asax.cs\r\n- web.config\r\n- Empty.WebHost.csproj\r\n```\r\n\r\nEmpty.WebHost.csproj:\r\n```xml\r\n<Project ToolsVersion=\"12.0\" DefaultTargets=\"Build\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\r\n  <Import Project=\"$(MSBuildExtensionsPath)\\$(MSBuildToolsVersion)\\Microsoft.Common.props\" Condition=\"Exists('$(MSBuildExtensionsPath)\\$(MSBuildToolsVersion)\\Microsoft.Common.props')\" />\r\n  <PropertyGroup>\r\n    <Configuration Condition=\" '$(Configuration)' == '' \">Debug</Configuration>\r\n    <Platform Condition=\" '$(Platform)' == '' \">AnyCPU</Platform>\r\n    <ProductVersion>\r\n    </ProductVersion>\r\n    <SchemaVersion>2.0</SchemaVersion>\r\n    <ProjectGuid>{080CBD85-3B74-4ECC-8389-47E594F376DE}</ProjectGuid>\r\n    <ProjectTypeGuids>{349c5851-65df-11da-9384-00065b846f21};{fae04ec0-301f-11d3-bf4b-00c04f79efbc}</ProjectTypeGuids>\r\n    <OutputType>Library</OutputType>\r\n    <AppDesignerFolder>Properties</AppDesignerFolder>\r\n    <RootNamespace>Empty.WebHost</RootNamespace>\r\n    <AssemblyName>Empty.WebHost</AssemblyName>\r\n    <TargetFrameworkVersion>v4.6.2</TargetFrameworkVersion>\r\n    <UseIISExpress>true</UseIISExpress>\r\n    <Use64BitIISExpress />\r\n    <IISExpressSSLPort />\r\n    <IISExpressAnonymousAuthentication />\r\n    <IISExpressWindowsAuthentication />\r\n    <IISExpressUseClassicPipelineMode />\r\n    <UseGlobalApplicationHostFile />\r\n    <NuGetPackageImportStamp>\r\n    </NuGetPackageImportStamp>\r\n  </PropertyGroup>\r\n  <PropertyGroup Condition=\" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' \">\r\n    <DebugSymbols>true</DebugSymbols>\r\n    <DebugType>full</DebugType>\r\n    <Optimize>false</Optimize>\r\n    <OutputPath>bin\\</OutputPath>\r\n    <DefineConstants>DEBUG;TRACE</DefineConstants>\r\n    <ErrorReport>prompt</ErrorReport>\r\n    <WarningLevel>4</WarningLevel>\r\n  </PropertyGroup>\r\n  <PropertyGroup Condition=\" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' \">\r\n    <DebugSymbols>true</DebugSymbols>\r\n    <DebugType>pdbonly</DebugType>\r\n    <Optimize>true</Optimize>\r\n    <OutputPath>bin\\</OutputPath>\r\n    <DefineConstants>TRACE</DefineConstants>\r\n    <ErrorReport>prompt</ErrorReport>\r\n    <WarningLevel>4</WarningLevel>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <Reference Include=\"Microsoft.CSharp\" />\r\n    <Reference Include=\"System.Web.DynamicData\" />\r\n    <Reference Include=\"System.Web.Entity\" />\r\n    <Reference Include=\"System.Web.ApplicationServices\" />\r\n    <Reference Include=\"System.ComponentModel.DataAnnotations\" />\r\n    <Reference Include=\"System\" />\r\n    <Reference Include=\"System.Data\" />\r\n    <Reference Include=\"System.Core\" />\r\n    <Reference Include=\"System.Data.DataSetExtensions\" />\r\n    <Reference Include=\"System.Web.Extensions\" />\r\n    <Reference Include=\"System.Xml.Linq\" />\r\n    <Reference Include=\"System.Drawing\" />\r\n    <Reference Include=\"System.Web\" />\r\n    <Reference Include=\"System.Xml\" />\r\n    <Reference Include=\"System.Configuration\" />\r\n    <Reference Include=\"System.Web.Services\" />\r\n    <Reference Include=\"System.EnterpriseServices\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNet.Mvc\" Version=\"5.2.4\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <Content Include=\"Web.config\" />\r\n    <Content Include=\"Global.asax\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <Compile Include=\"Properties\\AssemblyInfo.cs\" />\r\n    <Compile Include=\"Global.asax.cs\">\r\n      <DependentUpon>Global.asax</DependentUpon>\r\n    </Compile>\r\n  </ItemGroup>\r\n  <PropertyGroup>\r\n    <VisualStudioVersion Condition=\"'$(VisualStudioVersion)' == ''\">15.0</VisualStudioVersion>\r\n    <VSToolsPath Condition=\"'$(VSToolsPath)' == ''\">$(MSBuildExtensionsPath32)\\Microsoft\\VisualStudio\\v$(VisualStudioVersion)</VSToolsPath>\r\n  </PropertyGroup>\r\n  <Import Project=\"$(MSBuildBinPath)\\Microsoft.CSharp.targets\" />\r\n  <Import Project=\"$(VSToolsPath)\\WebApplications\\Microsoft.WebApplication.targets\" Condition=\"'$(VSToolsPath)' != ''\" />\r\n  <Import Project=\"$(MSBuildExtensionsPath32)\\Microsoft\\VisualStudio\\v10.0\\WebApplications\\Microsoft.WebApplication.targets\" Condition=\"false\" />\r\n  <ProjectExtensions>\r\n    <VisualStudio>\r\n      <FlavorProperties GUID=\"{349c5851-65df-11da-9384-00065b846f21}\">\r\n        <WebProjectProperties>\r\n          <UseIIS>True</UseIIS>\r\n          <AutoAssignPort>True</AutoAssignPort>\r\n          <DevelopmentServerPort>1983</DevelopmentServerPort>\r\n          <DevelopmentServerVPath>/</DevelopmentServerVPath>\r\n          <IISUrl>http://localhost:1983/</IISUrl>\r\n          <NTLMAuthentication>False</NTLMAuthentication>\r\n          <UseCustomServer>False</UseCustomServer>\r\n          <CustomServerUrl>\r\n          </CustomServerUrl>\r\n          <SaveServerSettingsInUserFile>False</SaveServerSettingsInUserFile>\r\n        </WebProjectProperties>\r\n      </FlavorProperties>\r\n    </VisualStudio>\r\n  </ProjectExtensions>\r\n</Project>\r\n```\r\n\r\nGlobal.asax:\r\n```xml\r\n<%@ Application Codebehind=\"Global.asax.cs\" Inherits=\"Empty.Web\" Language=\"C#\" %>\r\n```\r\n\r\n Global.asax.cs:\r\n```csharp\r\nusing System.Web;\r\nusing System.Web.Mvc;\r\n\r\nnamespace Empty.Web\r\n{\r\n  public class MvcApplication : HttpApplication\r\n  {\r\n    protected void Application_Start()\r\n    {\r\n      AreaRegistration.RegisterAllAreas();\r\n    }\r\n  }\r\n}\r\n```\r\nweb.config:\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<configuration>\r\n</configuration>\r\n```\r\n\r\n Properties\\AssemblyInfo.cs:\r\n```csharp\r\nusing System.Reflection;\r\n\r\n[assembly: AssemblyVersion(\"1.0.0.0\")]\r\n[assembly: AssemblyFileVersion(\"1.0.0.0\")]\r\n```\r\n\r\n\r\nCommand line\r\n```\r\nmsbuild .\\Empty.WebHost.csproj /t:restore,Build\r\n```\r\n### Expected  behavior\r\nThe build should succeed in Visual Studio.\r\nThe build should succeed on the command line.\r\n\r\n### Actual behavior\r\nThe build succeeds in Visual Studio.\r\nThe build fails on the command line.\r\n\r\n```\r\nBuild FAILED.\r\n\r\n\"P:\\cy\\apps\\cam\\src\\Core\\Empty.WebHost\\Empty.WebHost.csproj\" (restore;Build target) (1) ->\r\n(CoreCompile target) ->\r\n  Global.asax.cs(2,18): error CS0234: The type or namespace name 'Mvc' does not exist in the namespace 'System.Web' (are you missing an assembly reference?) [ P:\\cy\\apps\\cam\\src\\Core\\Empty.WebHost\\Empty.WebHost.csproj]\r\n\r\n    0 Warning(s)\r\n    1 Error(s)\r\n```\r\n\r\n### Environment data\r\n`msbuild /version` output:\r\n```\r\nMicrosoft (R) Build Engine version 15.5.180.51428 for .NET Framework\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n15.5.180.51428\r\n```\r\n\r\nOS info:\r\nWindows 10\r\nVisual Studio 2017 15.5.6",
  "state": "CLOSED",
  "createdAt": "2018-02-16T13:19:55Z",
  "updatedAt": "2024-02-21T17:14:26Z",
  "closedAt": "2018-11-19T21:00:08Z",
  "author": {
    "login": "lennybacon"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "When add an additional msbuild project like the following the build succeeds: **So what is the difference?**\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<Project ToolsVersion=\"15.0\" DefaultTargets=\"CompileCode\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\r\n\r\n<ItemGroup>\r\n    <WebProjects Include=\".\\Empty.WebHost.csproj\"/>\r\n  </ItemGroup>\r\n\r\n  <Target Name=\"CompileCode\">\r\n    <MSBuild\r\n      Projects=\"@(WebProjects)\"\r\n      StopOnFirstFailure=\"true\"\r\n      Targets=\"restore;Build\"\r\n    />\r\n  </Target>\r\n</Project>\r\n```",
        "createdAt": "2018-02-16T13:33:37Z",
        "updatedAt": "2018-02-16T13:33:37Z",
        "author": {
          "login": "lennybacon"
        }
      },
      {
        "body": "In my case the root cause of this issue was old Nuget.exe version. \r\nOld version used old MsBuild v14 instead on v15 and it causes build issues after nuget restore.\r\nTry to update it with `nuget.exe update -self` \r\n\r\nOr try to change `ToolsVersion=\"12.0\"` to `ToolsVersion=\"15.0\"` in csproj files",
        "createdAt": "2018-06-07T10:58:00Z",
        "updatedAt": "2018-06-07T11:00:15Z",
        "author": {
          "login": "ludwo"
        }
      },
      {
        "body": "@ludwo Is there a way to see which version of nuget MSBuild is using? I can't seem to find anything in the restore logs or the package management logs in Visual Studio.",
        "createdAt": "2018-06-07T16:40:25Z",
        "updatedAt": "2018-06-07T16:40:25Z",
        "author": {
          "login": "ChristopherHaws"
        }
      },
      {
        "body": "@ChristopherHaws I used nuget.exe as standalone app in my msbuild script in Exec task.\r\n`<Exec Command=\"nuget.exe restore %(Solution.FullPath)\" />`\r\nI don't remember why I did it this way (issue in the past?). Today I switched back to Restore target.\r\nRestore target in msbuild/vs2017 is using Nuget API internaly, I guess, because there is no nuget.exe file on my PC. \r\n\r\nMy build stopped working after some refactoring on our solution/project files.\r\nWhen I used old nuget.exe to restore packages I had the same issue as reported by @lennybacon.\r\nIn VS2017 build was working, but failed on the command line.\r\nI cleaned up my repository with `git clean -X -d -f` command to verify every attempt to resolve this issue. \r\nAfter some time I noticed in the command line log that my old nuget.exe is using old msbuild version v14 from %ProgramFiles(x86)%\\MsBuild instead of v15 from VS2017 folder.\r\nSo I tried to update nuget.exe to the latest version with `nuget.exe update -self` and bingo...\r\n\r\nLater today I switched to the Restore target and I removed nuget.exe from my script. It is working fine.\r\n\r\nMy advice/guess with ToolsVersion is based on the @lennybacon 's last post where ToolsVersion is different in the csproj file - 15.0 vs 12.0. ",
        "createdAt": "2018-06-07T18:00:50Z",
        "updatedAt": "2018-06-07T18:00:50Z",
        "author": {
          "login": "ludwo"
        }
      },
      {
        "body": "@ludwo @ChristopherHaws I changed the `ToolsVersion`  to `15.0`, updated Nuget to `4.6.2.5055` and used `msbuild` from the latest patched Visual Studio 2017 installation (`15.7.3`). Still the same behavior :-( ",
        "createdAt": "2018-06-08T08:05:03Z",
        "updatedAt": "2018-06-08T08:05:03Z",
        "author": {
          "login": "lennybacon"
        }
      },
      {
        "body": "lennybacon, I am facing same issue, can you please let me know how you resolved it if you were able to?",
        "createdAt": "2018-08-30T18:42:11Z",
        "updatedAt": "2018-08-30T18:42:11Z",
        "author": {
          "login": "ChandraTerli"
        }
      },
      {
        "body": "@ChandraTerli Just create a file named `build.proj` and write some xml (as in my comment above) that uses the `<MsBuild/>` task and points to the project you want to build. Then call `msbuild.exe .\\build.proj` from the command line. This worked for me.",
        "createdAt": "2018-08-30T18:49:10Z",
        "updatedAt": "2018-08-30T18:49:10Z",
        "author": {
          "login": "lennybacon"
        }
      },
      {
        "body": "Thank you! for the response lennybacon, finally I was able to resolve it by downloading latest version of nuget on on build server and reference it in the nuget path of build definition. ",
        "createdAt": "2018-08-31T13:35:05Z",
        "updatedAt": "2018-08-31T13:35:05Z",
        "author": {
          "login": "ChandraTerli"
        }
      },
      {
        "body": "`/t:Restore;Build` does not work reliably. Instead, specify `msbuild.exe /restore`, which runs the restore operation in a separate phase and ensures that the build operates with the latest restored build logic.\r\n\r\nAdding a separate project that uses `<MSBuild` with `Targets=\"Restore;Build\"` will also not be reliable.\r\n\r\nRunning `nuget.exe` _within_ MSBuild also will not work.\r\n\r\nThe core problems with all of these approaches are the same: MSBuild tries very hard to avoid loading projects more than it needs to. That means that if you modify the project (or create new imports, such as by restoring NuGet packages) after the project has already started building, the rest of that build will not see the updated build logic, because it's already read from disk.\r\n\r\nThe `/restore` command-line argument fixes this by doing the `/t:Restore` in a separate phase, allowing the rest of the build (as specified on the command line) to pick up the latest logic.",
        "createdAt": "2018-08-31T14:06:45Z",
        "updatedAt": "2018-08-31T14:06:45Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald Is there a bug/feature request to make this work more reliably? or will this just be \"by design\" it really hurts in systems where the `<MSBuild` tag was used. Near as I can tell the only work around for that would be to have a stand alone `<Exec` task that performs the restore before hand?",
        "createdAt": "2018-11-15T22:25:19Z",
        "updatedAt": "2018-11-15T22:25:19Z",
        "author": {
          "login": "aolszowka"
        }
      },
      {
        "body": "I'm not sure I understand the question @aolszowka. Can you elaborate? Specifically, I don't see what the MSBuild task and Exec have to do with the scenario.",
        "createdAt": "2018-11-15T22:31:15Z",
        "updatedAt": "2018-11-15T22:31:15Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Hi @rainersigwald so we've got a lot of scripts that look something like this:\r\n\r\n```\r\n  <Target Name=\"BuildTIMSNET\" DependsOnTargets=\"CleanOutputFolders;CopyDependencies;GetTIMSNETReferencePaths\">\r\n    <Message Text=\"Building TIMSNET\" Importance=\"high\"/>\r\n    <ItemGroup>\r\n      <TIMSNETSolutionFiles Include=\"$(DotNetCode)\\CUBO.sln\"/>\r\n\r\n      <!--Build Debug-->\r\n      <ProjectsToBuild Include=\"@(TIMSNETSolutionFiles)\" Condition=\"$(CUBuildType)=='Local'\">\r\n        <AdditionalProperties>\r\n          Configuration=Debug;ReferencePath=@(TIMSNETReferencePaths);OutputPath=$(TIMSNETDebugOutputFolder)\r\n        </AdditionalProperties>\r\n      </ProjectsToBuild>\r\n      <!--Build Release-->\r\n      <ProjectsToBuild Include=\"@(TIMSNETSolutionFiles)\" Condition=\"$(CUBuildType)=='Development' OR $(CUBuildType)=='Deployment'\">\r\n        <AdditionalProperties>\r\n          Configuration=Release;ReferencePath=@(TIMSNETReferencePaths);OutputPath=$(TIMSNETReleaseOutputFolder)\r\n        </AdditionalProperties>\r\n      </ProjectsToBuild>\r\n    </ItemGroup>\r\n\r\n    <MSBuild\r\n      Projects=\"@(ProjectsToBuild)\"\r\n      Properties=\"PostBuildEvent=\"\r\n      Targets=\"Build\"\r\n      BuildInParallel=\"true\"\r\n      StopOnFirstFailure=\"True\"\r\n      UseResultsCache=\"True\"\r\n      UnloadProjectsOnCompletion=\"True\"\r\n      />\r\n  </Target>\r\n```\r\n\r\nBased on your comments above:\r\n\r\n> Adding a separate project that uses <MSBuild with Targets=\"Restore;Build\" will also not be reliable.\r\n\r\nAnd\r\n\r\n> Instead, specify msbuild.exe /restore, which runs the restore operation in a separate phase and ensures that the build operates with the latest restored build logic.\r\n\r\nI gather the only way to make this work properly is to do the following (Leveraging the `<Exec` task):\r\n\r\n```\r\n  <Target Name=\"BuildTIMSNET\" DependsOnTargets=\"CleanOutputFolders;CopyDependencies;GetTIMSNETReferencePaths\">\r\n    <Message Text=\"Building TIMSNET\" Importance=\"high\"/>\r\n    <ItemGroup>\r\n      <TIMSNETSolutionFiles Include=\"$(DotNetCode)\\CUBO.sln\"/>\r\n\r\n      <!--Build Debug-->\r\n      <ProjectsToBuild Include=\"@(TIMSNETSolutionFiles)\" Condition=\"$(CUBuildType)=='Local'\">\r\n        <AdditionalProperties>\r\n          Configuration=Debug;ReferencePath=@(TIMSNETReferencePaths);OutputPath=$(TIMSNETDebugOutputFolder)\r\n        </AdditionalProperties>\r\n      </ProjectsToBuild>\r\n      <!--Build Release-->\r\n      <ProjectsToBuild Include=\"@(TIMSNETSolutionFiles)\" Condition=\"$(CUBuildType)=='Development' OR $(CUBuildType)=='Deployment'\">\r\n        <AdditionalProperties>\r\n          Configuration=Release;ReferencePath=@(TIMSNETReferencePaths);OutputPath=$(TIMSNETReleaseOutputFolder)\r\n        </AdditionalProperties>\r\n      </ProjectsToBuild>\r\n    </ItemGroup>\r\n\r\n    <Exec Command=\"msbuild.exe /restore %(ProjectsToBuild.Identity)\" />\r\n\r\n    <MSBuild\r\n      Projects=\"@(ProjectsToBuild)\"\r\n      Properties=\"PostBuildEvent=\"\r\n      Targets=\"Build\"\r\n      BuildInParallel=\"true\"\r\n      StopOnFirstFailure=\"True\"\r\n      UseResultsCache=\"True\"\r\n      UnloadProjectsOnCompletion=\"True\"\r\n      />\r\n  </Target>\r\n```\r\n\r\nIs that correct or am I missing something?\r\n\r\nIdeally the Targets would have just been Restore;Build but as you mentioned:\r\n\r\n>The core problems with all of these approaches are the same: MSBuild tries very hard to avoid loading projects more than it needs to. That means that if you modify the project (or create new imports, such as by restoring NuGet packages) after the project has already started building, the rest of that build will not see the updated build logic, because it's already read from disk.\r\n\r\nPerhaps having an additional argument to the `<MSBuild` would be the solution to perform this restore?\r\n",
        "createdAt": "2018-11-16T14:05:25Z",
        "updatedAt": "2018-11-16T14:05:25Z",
        "author": {
          "login": "aolszowka"
        }
      },
      {
        "body": "> Perhaps having an additional argument to the `<MSBuild` would be the solution to perform this restore?\r\n\r\nThat's tracked by #2811, but to set expectations it's definitely very hard and possibly too hard, which is why it isn't done already.\r\n\r\nIs it possible for you to have a `Restore` target in the file that defines `BuildTIMSNET` that does something like\r\n\r\n```xml\r\n<Target Name=\"Restore\">\r\n    <MSBuild\r\n      Projects=\"@(ProjectsToBuild)\"\r\n      Properties=\"PostBuildEvent=\"\r\n      Targets=\"Restore\"\r\n      BuildInParallel=\"true\"\r\n      />\r\n</Target>\r\n```\r\n\r\n?\r\n\r\nAlso, `msbuild.exe /restore` runs Restore **and then** the default target. If you want to do the exec-MSBuild approach for a subtree, you should call `msbuild.exe /t:Restore` to run _just_ the restore operation and do the build with the MSBuild task.",
        "createdAt": "2018-11-16T15:16:33Z",
        "updatedAt": "2018-11-16T15:16:33Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "It is possible for us to use the Restore Target like you mentioned and if that will work is a much more desirable solution than `<Exec` since we will get much better logging out of it.\r\n\r\nThank you for taking the time to answer this support based question and for linking the \"long term solution\" (even if it is difficult). I know this type of stuff takes time to do and I really appreciate it.",
        "createdAt": "2018-11-16T15:24:59Z",
        "updatedAt": "2018-11-16T15:24:59Z",
        "author": {
          "login": "aolszowka"
        }
      },
      {
        "body": "> It is possible for us to use the Restore Target like you mentioned and if that will work is a much more desirable solution than `<Exec` since we will get much better logging out of it.\r\n\r\nGreat! That's what we envisioned as the best approach when we were designing this: `Restore` is a single operation for a whole build, but it can be customized by customizing the `Restore` target in the entry-point project. That way, `msbuild /restore` can be extended to work for most scenarios.",
        "createdAt": "2018-11-16T15:35:42Z",
        "updatedAt": "2018-11-16T15:35:42Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Closing this issue as we already have a separate issue to consider support restore to run along other targets and it also seems like folks are unblocked.",
        "createdAt": "2018-11-19T21:00:08Z",
        "updatedAt": "2018-11-19T21:00:08Z",
        "author": {
          "login": "livarcocc"
        }
      },
      {
        "body": "@livarcocc Could you please link the `separate issue` with its ID?",
        "createdAt": "2018-11-21T09:26:11Z",
        "updatedAt": "2018-11-21T09:26:11Z",
        "author": {
          "login": "lennybacon"
        }
      },
      {
        "body": "It was linked above by rainer: \r\n\r\n> That's tracked by #2811, but to set expectations it's definitely very hard and possibly too hard, which is why it isn't done already.",
        "createdAt": "2018-11-21T21:22:41Z",
        "updatedAt": "2018-11-21T21:22:41Z",
        "author": {
          "login": "livarcocc"
        }
      },
      {
        "body": "> The /restore command-line argument fixes this by doing the /t:Restore in a separate phase, allowing the rest of the build (as specified on the command line) to pick up the latest logic.\r\n\r\nThank you @rainersigwald !!! All I had to do was add the /restore switch to my msbuild.exe command. This all started when we switched from packages.config to PackageReference, which has been quite a painful, timely experience.\r\n\r\n  C:\\MyProject>msbuild.exe /restore MyProject.sln \u2026.\r\n\r\nThanks again for knowing this secret.",
        "createdAt": "2019-06-13T05:46:56Z",
        "updatedAt": "2019-06-13T05:46:56Z",
        "author": {
          "login": "Brain2000"
        }
      }
    ]
  }
}