{
  "number": 3603,
  "title": "How to trim secrets from binary logs?",
  "body": "On CI, we'd like to start capturing binary logs by default. There is some concern about this, however, because this will capture the machine environment which may include secrets. Is there already a way to prune a binary log of certain strings or to mask the value of a given list of properties?",
  "state": "CLOSED",
  "createdAt": "2018-08-13T20:51:34Z",
  "updatedAt": "2024-02-21T17:11:54Z",
  "closedAt": "2023-12-01T12:43:04Z",
  "author": {
    "login": "natemcmaster"
  },
  "labels": [
    "Area: Debuggability",
    "Area: Logging",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "JanKrivanek"
      }
    ]
  },
  "milestone": {
    "title": "Backlog"
  },
  "comments": {
    "nodes": [
      {
        "body": "@KirillOsenkov any ideas?",
        "createdAt": "2018-08-14T15:13:26Z",
        "updatedAt": "2018-08-14T15:13:26Z",
        "author": {
          "login": "natemcmaster"
        }
      },
      {
        "body": "No, unfortunately MSBuild just logs the entire environment as a list of strings, and we dutifully write that to the log... see related https://github.com/Microsoft/msbuild/issues/3432",
        "createdAt": "2018-08-14T15:37:57Z",
        "updatedAt": "2018-08-14T15:37:57Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "How hard would it be to post-process a binlog file to mask known strings? I haven't looked into the format of the file closely enough to estimate how difficult this is.",
        "createdAt": "2018-08-14T18:59:03Z",
        "updatedAt": "2018-08-14T18:59:03Z",
        "author": {
          "login": "natemcmaster"
        }
      },
      {
        "body": "Technically it should be doable - there's an API to read the raw records and to play back the event args:\r\nhttp://msbuildlog.com/#api\r\n\r\nHere's another idea - you can play back the .binlog into another BinaryLogger, and filter the secrets from the event args.\r\n\r\nShould be fun and doable - please let me know if I can help with this!",
        "createdAt": "2018-08-14T20:43:41Z",
        "updatedAt": "2018-08-14T20:43:41Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "Another thing: take the .dll from the Releases tab:\r\nhttps://github.com/KirillOsenkov/MSBuildStructuredLog/releases/download/v1.2.25/StructuredLogger.dll\r\n\r\nThe NuGet package is unfortunately out-of-date and I don't have time to update it...",
        "createdAt": "2018-08-14T20:46:03Z",
        "updatedAt": "2018-08-14T20:46:03Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "Thanks @KirillOsenkov. Just wanted to know if this was possible. We're currently deciding whether or not to always produce a binlog in CI builds. If we decided to do that, we'll probably implement a tool to strip secrets from the binlog. I'll ping this thread again if I run into issues using StructuredLogger to modify a binlog file.",
        "createdAt": "2018-08-17T16:50:18Z",
        "updatedAt": "2018-08-17T16:50:18Z",
        "author": {
          "login": "natemcmaster"
        }
      },
      {
        "body": "\ud83d\udc4b @natemcmaster @KirillOsenkov \r\n\r\nI'm very interested in masking or filtering `.binlog` files so a user can share them with another party while still maintaining _Good Feelings\u2122_. \ud83d\ude04 \r\n\r\nI have a OSS project/proof-of-concept that integrates `.binlog` files with the [GitHub Checks API](https://developer.github.com/v3/checks/). This allows me to read build warnings and errors for files that are being compiled and write that data back to GitHub. This allows me to expose build warnings/errors, code analysis warnings/errors, roslyn analyzers in a GitHub Pull Request.\r\n\r\n![](https://raw.githubusercontent.com/justaprogrammer/MSBuildLogOctokitChecker/master/docs/images/testconsole1-warning-pr-changes.png)\r\n\r\nPlease check it out: https://github.com/justaprogrammer/MSBuildLogOctokitChecker\r\n\r\nUnfortunately I did not understand the the security risks in `binlog` files before I started. @KirillOsenkov thanks for making my project possible. I would definitely be interested in hearing your recommendation on making this securable.",
        "createdAt": "2018-08-27T12:54:46Z",
        "updatedAt": "2018-08-27T12:54:46Z",
        "author": {
          "login": "StanleyGoldman"
        }
      },
      {
        "body": "@StanleyGoldman very nice! Thanks for sharing! If you tweet about it I'll retweet (although I already stole your thunder, sorry!)\r\n\r\nI'm now convinced that this feature is necessary and so I've filed a bug here to track this work:\r\nhttps://github.com/KirillOsenkov/MSBuildStructuredLog/issues/191\r\n",
        "createdAt": "2018-08-27T18:13:00Z",
        "updatedAt": "2018-08-27T18:13:00Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "Thanks @KirillOsenkov I appreciate the support. Although I'm probably going to start tweeting about it after we come up with a better name for the project. \ud83e\udd23 \r\n\r\nI'm looking for other interesting data points that could be inferred from the binlog files. Things that would be informative to a person reviewing a pull request. Some ideas that come to mind (provided a i have a history of binlog files) are spikes in build time or nuget packages that have changed.\r\n\r\nThe GitHub Checks API also provides for a callback. I would have to learn more about Roslyn, but it would be possible to have Roslyn Analyzer Code Fixes being applied automatically through the GitHub user interface.\r\n\r\nI'm sure you might have some creative ideas of your own. If you come up with any, drop us a line here: https://github.com/justaprogrammer/MSBuildLogOctokitChecker/issues/87",
        "createdAt": "2018-08-27T18:58:40Z",
        "updatedAt": "2018-08-27T18:58:40Z",
        "author": {
          "login": "StanleyGoldman"
        }
      },
      {
        "body": "This came up again internally, and I had a thought that I don't love but that could make this possible:\r\n\r\nCould we just build up a terrible regex in memory\r\n\r\n```regex\r\n(?:secret1|secret2|secret3)\r\n```\r\n\r\nand then replace the string that gets serialized into the binlog\r\n\r\nhttps://github.com/Microsoft/msbuild/blob/c36f772a8565538bbd215437b84885a6a677758c/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs#L659-L663\r\n\r\nThat would require a \"feed me all your secrets\" configuration (on the command line? another, unlogged environment variable? something else?) which is definitely not ideal. Also generate a fair amount of garbage if the strings are common, but that feels like pay-for-play to me.",
        "createdAt": "2019-03-08T20:25:38Z",
        "updatedAt": "2019-03-08T20:25:38Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Is there something we can use of the shelf for stripping out secrets now?",
        "createdAt": "2021-04-05T19:04:38Z",
        "updatedAt": "2021-04-05T19:04:38Z",
        "author": {
          "login": "jdom"
        }
      },
      {
        "body": "No news yet, unfortunately. I\u2019ll update this issue when we have a solution.",
        "createdAt": "2021-04-05T20:09:52Z",
        "updatedAt": "2021-04-05T20:09:52Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "Any updates or alternatives?",
        "createdAt": "2022-04-26T12:52:56Z",
        "updatedAt": "2022-04-26T12:52:56Z",
        "author": {
          "login": "jdom"
        }
      },
      {
        "body": "There\u2019s something in the works, but nothing ready yet.",
        "createdAt": "2022-04-26T16:00:52Z",
        "updatedAt": "2022-04-26T16:00:52Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "2 main options currently:\r\n * binlog viewer or binlog tool: https://github.com/KirillOsenkov/MSBuildStructuredLog/pull/711\r\n * redact-binlog dotnet tool: https://github.com/dotutils/MSBuild.BinlogRedactor/tree/main/docs\r\n\r\nBoth uses the same detection/redaction util (`DotUtils.MsBuild.SensitiveDataDetector`) - which currently has just a limited support for autodetection of sensitive data. But negotiations and plans are underway to enrich this significantly.\r\nAs for now - manualy specifying the sensitive data to be redacted is the best option with both of the toolings.\r\n\r\nFeedback and thgoughts are more than welcome! \ud83d\ude09 ",
        "createdAt": "2023-12-01T12:43:05Z",
        "updatedAt": "2023-12-01T12:43:05Z",
        "author": {
          "login": "JanKrivanek"
        }
      }
    ]
  }
}