{
  "number": 4704,
  "title": "\"MSB3823: Non-string resources require the property GenerateResourceUsePreserializedResources to be set to true\" if TargetFramework=net48",
  "body": "We have a few projects that muti target .net core and the old fashioned .net framework. Some of these include binary resources (mostly images). With .net core 2.1 / 2.2 they build successfully but accessing an image while running under .net core throws an exception while with the full framework everything continues to works.\r\nNow .net core 3.0 added support for binary resources giving us the chance to eliminate a few workarounds.\r\nBut now TargetFramework=net48 fails to build. As we are still in the transition to .net core and most of our products (still) require the full framework. Therefore this blocks any usage of  .net core 3.0 in our codebase.\r\n\r\n### Steps to reproduce\r\n\r\nunzip the attached project and run \"dotnet build\" or \"dotnet build -p:TargetFramework=net48\". Note that  \"dotnet build -p:TargetFramework=netcoreapp3.0\" builds successfully.\r\n\r\n[LibraryWithImage.zip](https://github.com/microsoft/msbuild/files/3586558/LibraryWithImage.zip)\r\n\r\n### Expected  behavior\r\nSuccessful build - net48 definitely supports images inside .resx\r\n\r\n### Actual behavior\r\n```\r\nMicrosoft (R)-Build-Engine, Version 16.3.0-preview-19426-01+faf5e5d75 f\u2592r .NET Core\r\nCopyright (C) Microsoft Corporation. Alle Rechte vorbehalten.\r\n\r\n  Wiederherstellung in \"113,4 ms\" f\u2592r \"C:\\source\\ResxBug\\LibraryWithImage\\LibraryWithImage.csproj\" abgeschlossen.\r\n  You are using a preview version of .NET Core. See: https://aka.ms/dotnet-core-preview\r\n  You are using a preview version of .NET Core. See: https://aka.ms/dotnet-core-preview\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview9-014004\\Microsoft.Common.CurrentVersion.targets(3056,5): error : MSB3823: Non-string resources require the property GenerateResourceUsePreserializedResources to be set to true. [C:\\source\\ResxBug\\LibraryWithImage\\LibraryWithImage.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview9-014004\\Microsoft.Common.CurrentVersion.targets(3056,5): warning MSB3555: Die Ausgabedatei \"C:\\source\\ResxBug\\LibraryWithImage\\obj\\Debug\\net48\\LibraryWithImage.Resources.resources\" ist m\u2592glicherweise besch\u2592digt. [C:\\source\\ResxBug\\LibraryWithImage\\LibraryWithImage.csproj]\r\n  LibraryWithImage -> C:\\source\\ResxBug\\LibraryWithImage\\bin\\Debug\\netcoreapp3.0\\LibraryWithImage.dll\r\n\r\nFehler beim Buildvorgang.\r\n\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview9-014004\\Microsoft.Common.CurrentVersion.targets(3056,5): warning MSB3555: Die Ausgabedatei \"C:\\source\\ResxBug\\LibraryWithImage\\obj\\Debug\\net48\\LibraryWithImage.Resources.resources\" ist m\u2592glicherweise besch\u2592digt. [C:\\source\\ResxBug\\LibraryWithImage\\LibraryWithImage.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview9-014004\\Microsoft.Common.CurrentVersion.targets(3056,5): error : MSB3823: Non-string resources require the property GenerateResourceUsePreserializedResources to be set to true. [C:\\source\\ResxBug\\LibraryWithImage\\LibraryWithImage.csproj]\r\n    1 Warnung(en)\r\n    1 Fehler\r\n\r\nVerstrichene Zeit 00:00:02.58\r\n```\r\n\r\n### Environment data\r\nSDK 3.0.100-preview9-014004 installed using the installer (see https://dotnet.microsoft.com/download/dotnet-core/3.0 )",
  "state": "CLOSED",
  "createdAt": "2019-09-07T11:42:16Z",
  "updatedAt": "2024-02-21T17:07:13Z",
  "closedAt": "2019-09-09T20:18:38Z",
  "author": {
    "login": "to-st"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Discussion"
  },
  "comments": {
    "nodes": [
      {
        "body": "This is an intentional change with .NET Core SDK 3.0. As you point out, the prior versions of MSBuild on .NET Core would produce corrupted output which would crash at runtime. With the new version, it's possible to embed resources when using .NET Core MSBuild, but because they're embedded in a different way, they require a new reference to access them at runtime: `System.Resources.Extensions`. This is available as a NuGet package which will be published to NuGet.org when .NET Core 3.0 is released. It's available now from a prerelease feed `https://dotnetfeed.blob.core.windows.net/dotnet-core/index.json`.",
        "createdAt": "2019-09-09T20:17:58Z",
        "updatedAt": "2019-09-09T20:17:58Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "just to make sure: It is intentional that if you have a project with the new csproj format, binary resources, a PackageReference to System.Resources.Extensions and add net48 as targetframework it won't built using \"dotnet build\"? \r\nI do not complain that netcoreapp2.1 no longer builds broken dll ;)\r\n\r\nI assume support for binary resources in net48 is not dropped altogether, so how should I build a project with the new csproj format for net48? Calling the msbuild from the .net framework build tools directly?",
        "createdAt": "2019-09-10T06:08:11Z",
        "updatedAt": "2019-09-10T06:08:11Z",
        "author": {
          "login": "to-st"
        }
      },
      {
        "body": "> It is intentional that if you have a project with the new csproj format, binary resources, a PackageReference to System.Resources.Extensions and add net48 as targetframework it won't built using \"dotnet build\"?\r\n\r\nCorrect.\r\n\r\n> how should I build a project with the new csproj format for net48? Calling the msbuild from the .net framework build tools directly?\r\n\r\nYes: projects built using Visual Studio or `MSBuild.exe` (as opposed to `dotnet build` or `dotnet msbuild`) use the older approach to serialize resources into the output assembly by default. It's not ideal to have the project built two different ways depending on how you launched the build, though, so I would recommend always specifying `GenerateResourceUsePreserializedResources=true` in your projects and referencing `System.Resources.Extensions`. That unifies on the new codepath.",
        "createdAt": "2019-09-10T17:13:49Z",
        "updatedAt": "2019-09-10T17:13:49Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I did not quite understand. What if I just want my existing project to build successfully both on machines with netcore2.1 and on machines with netcore3.0? However, I do not want to change anything, and am ready to get resources through Assembly.GetManifestResourceStream.",
        "createdAt": "2019-10-03T03:30:41Z",
        "updatedAt": "2019-10-03T03:30:41Z",
        "author": {
          "login": "RusKnyaz"
        }
      },
      {
        "body": "I solved my issue by removing of the extra lines from Resources.resx file.",
        "createdAt": "2019-10-03T03:50:09Z",
        "updatedAt": "2019-10-03T03:50:09Z",
        "author": {
          "login": "RusKnyaz"
        }
      },
      {
        "body": "> What if I just want my existing project to build successfully both on machines with netcore2.1 and on machines with netcore3.0?\r\n\r\nIf your projects built successfully with the .NET Core SDK 2.1, they should work without modification in .NET Core SDK 3.0. If the projects built without errors but produced corrupt outputs in 2.1, they can be built correctly only with 3.0's new behavior.",
        "createdAt": "2019-10-03T13:28:40Z",
        "updatedAt": "2019-10-03T13:28:40Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> I did not quite understand. What if I just want my existing project to build successfully both on machines with netcore2.1 and on machines with netcore3.0? However, I do not want to change anything, and am ready to get resources through Assembly.GetManifestResourceStream.\r\n\r\nI got mad too and I was about to just rage uninstall dotnet sdk 3.0, but then it was just add\r\n\r\n`<PackageReference Include=\"System.Resources.Extensions\" Version=\"4.6.0\" />`\r\n to references and\r\n`<GenerateResourceUsePreserializedResources>true</GenerateResourceUsePreserializedResources>`\r\nto a property group\r\n\r\nI have a few complaints though: GenerateResourceUsePreserializedResources is a HUGE and ugly name and also I wonder why and who would ever disable this, if it's the only way to get embed resources in SDK 3.0 to build? \r\nIt looks unnecessary to add that ugly bigass name property to my csproj and the error message could have been: Hey, you just need to install System.Resources.Extensions from NuGet, we'll make the rest work.\r\nThis over here is one of my biggest rants with .Net lately: Things keep breaking every time you upgrade the SDK. :\\ ",
        "createdAt": "2019-10-09T18:51:45Z",
        "updatedAt": "2019-10-09T18:52:41Z",
        "author": {
          "login": "figloalds"
        }
      },
      {
        "body": "Actually after I applied the fixes suggested NOW the application causes runtime error with `Unable to load file or assembly 'System.Resources.Extensions, Version=4.0.0`\r\nI'm uninstalling SDK 3.0 because it's causing a lot more problems than it should it Installed automatically with Visual Studio update and just broke a lot of code that used to work fine when building with dotnet cli 2.2.300 and even after trying to apply the changes suggested by the SDK it still caused more problems.\r\n\r\nEdit: except it's not possible without removing the entire Web Development from Visual Studio altogether. So because of a broken update on Visual Studio I have to completely remove non-string resources from projects because my dotnet command will just build broken assemblies otherwise. \r\n\r\nEdit 2: Fixed by going to `C:\\Program Files\\dotnet\\sdk` and hardcore deleting 3.0.100; ",
        "createdAt": "2019-10-11T14:44:13Z",
        "updatedAt": "2019-10-11T15:34:52Z",
        "author": {
          "login": "figloalds"
        }
      },
      {
        "body": "Also noticed this fix won't work when targeting net45, since the System.Resources.Extensions package does not support it (minimum is netstandard2.0 which would be net461). I know net45 is old, but this app is an installer intended to run on machines that might not have any new version of .Net running (but will install net48 if needed). ",
        "createdAt": "2020-01-08T09:47:46Z",
        "updatedAt": "2020-01-08T09:47:46Z",
        "author": {
          "login": "MiguelAlho"
        }
      },
      {
        "body": "@rainersigwald I just faced this issue, and while the fix with adding the package and setting the flag does work, it looks really weird that two build paths are actually different. Could this difference be mitigated or at least be transparently hidden from developers?",
        "createdAt": "2020-01-30T08:26:22Z",
        "updatedAt": "2020-01-30T08:26:22Z",
        "author": {
          "login": "mikhail-barg"
        }
      },
      {
        "body": "I'm running into this issue when trying to migrate some of our libraries with WinForm assets to using the sdk-style csproj so that it can be integrated into CI/CD using the .NET CLI. Unfortunately, while adding the package and setting the flag allows the project to build I do get the following runtime exception when it tries to load the forms icon from the embedded resource even though the System.Resources.Extensions.dll is in the bin folder.\r\n\r\nSystem.IO.FileLoadException: 'Could not load file or assembly 'System.Resources.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51' or one of its dependencies. The located assembly's manifest definition does not match the assembly reference. (Exception from HRESULT: 0x80131040)'",
        "createdAt": "2020-05-28T19:48:51Z",
        "updatedAt": "2020-05-28T19:48:51Z",
        "author": {
          "login": "TylerBrinkley"
        }
      },
      {
        "body": "@TylerBrinkley Can you get a [fusion log trace](https://docs.microsoft.com/dotnet/framework/tools/fuslogvw-exe-assembly-binding-log-viewer) of the attempted load, to see why the .NET Runtime is rejecting the reference?",
        "createdAt": "2020-06-02T17:37:23Z",
        "updatedAt": "2020-06-02T17:37:23Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald I'm afraid I've moved on from this and am instead manually pulling in these resources using `Assembly.GetManifestResourceStream`. This also allowed me to not be forced to update the target framework to .NET 4.6.1. Thanks for reaching out though.",
        "createdAt": "2020-06-02T19:08:13Z",
        "updatedAt": "2020-06-02T19:08:59Z",
        "author": {
          "login": "TylerBrinkley"
        }
      },
      {
        "body": "@rainersigwald I've got a fusion log trace for you:\r\n\r\n```\r\nThe operation failed.\r\nBind result: hr = 0x80131040. No description available.\r\n\r\nAssembly manager loaded from:  C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\clr.dll\r\nRunning under executable  C:\\Git\\*******\\bin\\Debug\\net48\\*******.exe\r\n--- A detailed error log follows. \r\n\r\n=== Pre-bind state information ===\r\nLOG: DisplayName = System.Resources.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51\r\n (Fully-specified)\r\nLOG: Appbase = file:///C:/Git/*******/bin/Debug/net48/\r\nLOG: Initial PrivatePath = NULL\r\nLOG: Dynamic Base = NULL\r\nLOG: Cache Base = NULL\r\nLOG: AppName = *******.exe\r\nCalling assembly : (Unknown).\r\n===\r\nLOG: This bind starts in default load context.\r\nLOG: Using application configuration file: C:\\Git\\*******\\bin\\Debug\\net48\\*******.exe.Config\r\nLOG: Using host configuration file: \r\nLOG: Using machine configuration file from C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\config\\machine.config.\r\nLOG: Post-policy reference: System.Resources.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51\r\nLOG: GAC Lookup was unsuccessful.\r\nLOG: Attempting download of new URL file:///C:/Git/*******/bin/Debug/net48/System.Resources.Extensions.DLL.\r\nLOG: Assembly download was successful. Attempting setup of file: C:\\Git\\*******\\bin\\Debug\\net48\\System.Resources.Extensions.dll\r\nLOG: Entering run-from-source setup phase.\r\nLOG: Assembly Name is: System.Resources.Extensions, Version=4.0.1.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51\r\nWRN: Comparing the assembly name resulted in the mismatch: Build Number\r\nERR: The assembly reference did not match the assembly definition found.\r\nERR: Run-from-source setup phase failed with hr = 0x80131040.\r\nERR: Failed to complete setup of assembly (hr = 0x80131040). Probing terminated.\r\n```\r\n\r\nAlso, a simple reproduction [Solution](https://1drv.ms/u/s!AmhoslxlpRiWh5wdXKUzTieLIJdDwA?e=Mfq5Sj)",
        "createdAt": "2020-06-17T04:40:00Z",
        "updatedAt": "2020-06-17T04:40:00Z",
        "author": {
          "login": "EamonHetherton"
        }
      },
      {
        "body": "If I downgrade System.Resources.Extensions to 4.6.0 it works again.",
        "createdAt": "2020-06-17T06:48:02Z",
        "updatedAt": "2020-06-17T06:48:02Z",
        "author": {
          "login": "EamonHetherton"
        }
      },
      {
        "body": "Thanks @EamonHetherton !",
        "createdAt": "2020-06-19T09:36:30Z",
        "updatedAt": "2020-06-19T09:36:30Z",
        "author": {
          "login": "valeriob"
        }
      },
      {
        "body": "I can confirm @EamonHetherton 's finding (and thank you for finding a work-around!)\r\n\r\nWhen I use the latest `System.Resources.Extensions` NuGet package at version `4.7.1`, compile works but runtime fails with:\r\n\r\n```\r\nSystem.IO.FileLoadException : Could not load file or assembly 'System.Resources.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51' or one of its dependencies. The located assembly's manifest definition does not match the assembly reference. (Exception from HRESULT: 0x80131040)\r\n```\r\n\r\nThis makes sense (as far as fusion loader goes) because `System.Resources.Extensions.dll` that gets copied to the build output directory is at version `4.0.1.0` (which isn't matching the `4.0.0.0` version rutime is trying to load):\r\n```c#\r\n// (from JetBrains dotPeek)\r\n// Assembly System.Resources.Extensions, Version=4.0.1.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51\r\n// MVID: 52C506DF-7399-4EF0-B2DC-769C3C88FEE3\r\n// Assembly references:\r\n// mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\r\n// System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\r\n// System.Memory, Version=4.0.1.1, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51\r\n[assembly: AssemblyFileVersion(\"4.700.20.21406\")]\r\n[assembly: AssemblyInformationalVersion(\"3.1.4+c4164928b270ee2369808ab347d33423ef765216\")]\r\n[assembly: AssemblyVersion(\"4.0.1.0\")]\r\n...\r\n```\r\n\r\nWhen I downgrade to `System.Resources.Extensions` NuGet package at version `4.6.0`, compile works + runtime works. This time the `System.Resources.Extensions.dll` that gets copied to the build output directory is at version `4.0.0.0`:\r\n```c#\r\n// (from JetBrains dotPeek)\r\n// Assembly System.Resources.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51\r\n// MVID: 4C478117-5922-4E23-84DD-CC9E7D793526\r\n// Assembly references:\r\n// netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51\r\n// System.Memory, Version=4.0.1.1, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51\r\n[assembly: AssemblyFileVersion(\"4.700.19.46214\")]\r\n[assembly: AssemblyInformationalVersion(\"3.0.0+4ac4c0367003fe3973a3648eb0715ddb0e3bbcea\")]\r\n[assembly: AssemblyVersion(\"4.0.0.0\")]\r\n...\r\n```\r\n\r\nIs this a known issue? Can we expect a fix @rainersigwald ?",
        "createdAt": "2020-06-24T17:44:17Z",
        "updatedAt": "2020-06-24T17:49:08Z",
        "author": {
          "login": "milang"
        }
      },
      {
        "body": "I too have run into this problem updating to .NET Core project style. Only version 4.6.0 of the extension package works at run time.",
        "createdAt": "2020-06-24T17:56:47Z",
        "updatedAt": "2020-06-24T17:56:47Z",
        "author": {
          "login": "adegeo"
        }
      },
      {
        "body": "Thanks, folks! I think this is a bug in `System.Resources.Extensions` and I filed https://github.com/dotnet/runtime/issues/39078 to track it. When a fix is available we can pick it up in MSBuild: https://github.com/microsoft/msbuild/issues/5504",
        "createdAt": "2020-07-10T15:34:46Z",
        "updatedAt": "2020-07-10T15:34:46Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Hi everyone. To make it clear from the beginning - the differences and details between _dotnet build_ , _msbuild_ and _vsbuild_ are not my area of expertise.\r\n\r\nI'd like to achieve a VS-independent build to easily manage build agents:\r\n- vsbuild is, well, obviously, VS-dependent\r\n- msbuild does not work with new csproj format (or at least it didn't on the build agent I used)\r\n- dotnet build (.NET Core 3.1) doesn't work: _'InitializeComponent' does not exist in the current context_ - details on [SO](https://stackoverflow.com/questions/49758900/dotnet-build-fails-for-projects-containing-usercontrol-initializecomponent-does)\r\nAre there any plans to support it in the future?\r\n\r\nThere are two more problems to achieve VS-independency:\r\n- there is no .NET 4.5 developer pack available without installing Visual Studio :D that's manageable as I intend to update the toolchain anyway\r\n- MS Fakes tests are not run with _dotnet test_ and even though I have a corporate license with VS Enterprise, this might actually never be implemented; though I assume it's doable as long as someone's willing to do it ;)\r\n\r\nThanks,\r\nPatryk",
        "createdAt": "2020-07-17T14:49:45Z",
        "updatedAt": "2020-07-17T14:52:04Z",
        "author": {
          "login": "marchewek"
        }
      },
      {
        "body": "@marchewek Can you please file new issues for your problems? Please be as specific as possible.\r\n\r\nQuestions I have from your comment:\r\n\r\n1. What is `vsbuild`? I'm not familiar with it.\r\n1. `MSBuild.exe` works fine with SDK-style projects. What leads you to think otherwise?\r\n1. What problems are you seeing with XAML builds? That SO question is quite old and predates .NET Core support for WPF.\r\n1. Have you tried using [Microsoft.NETFramework.ReferenceAssemblies](https://www.nuget.org/packages/Microsoft.NETFramework.ReferenceAssemblies/) to handle targeting .NET 4.5?",
        "createdAt": "2020-07-20T16:08:29Z",
        "updatedAt": "2020-07-20T16:08:29Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "<PackageReference Include=\"System.Resources.Extensions\" Version=\"4.7.1\" />\r\n\r\nSystem.Resources.Extensions can work if you use a binding redirect:\r\nIn the app.config add:\r\n\r\n```\r\n<runtime>\r\n<assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\">\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Resources.Extensions\" publicKeyToken=\"cc7b13ffcd2ddd51\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"4.0.0.0\" newVersion=\"4.0.1.0\" />\r\n</dependentAssembly>    \r\n</assemblyBinding>\r\n</runtime>\r\n```\r\n",
        "createdAt": "2020-08-18T04:19:06Z",
        "updatedAt": "2020-08-18T04:19:06Z",
        "author": {
          "login": "PPenglis"
        }
      },
      {
        "body": "You won't have to do that manually after picking up a `System.Resources.Extensions` that includes https://github.com/dotnet/runtime/pull/39386.\r\n",
        "createdAt": "2020-08-18T20:04:23Z",
        "updatedAt": "2020-08-18T20:04:23Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> 4\\. Have you tried using [Microsoft.NETFramework.ReferenceAssemblies](https://www.nuget.org/packages/Microsoft.NETFramework.ReferenceAssemblies/) to handle targeting .NET 4.5?\r\n\r\nI am trying to release a version of a library for .Net Framework 4.5 besides .Net Core 3.1 and .Net 5, can you explain this in more detail?\r\nSimple usage doesn't work:\r\n```xml\r\n<PackageReference Include=\"Microsoft.NETFramework.ReferenceAssemblies\" Version=\"1.0.0\">\r\n  <PrivateAssets>all</PrivateAssets>\r\n  <IncludeAssets>runtime; build; native; contentfiles; analyzers</IncludeAssets>\r\n</PackageReference>\r\n```\r\n\r\n```\r\nC:\\Users\\runneradmin\\AppData\\Local\\Microsoft\\dotnet\\sdk\\5.0.100\\Microsoft.Common.CurrentVersion.targets(3075,5): error MSB3823: Non-string resources require the property GenerateResourceUsePreserializedResources to be set to true. [D:\\a\\HtmlEditorControl\\HtmlEditorControl\\src\\WinForms\\Framework Extensions\\Framework Extensions.csproj]\r\nC:\\Users\\runneradmin\\AppData\\Local\\Microsoft\\dotnet\\sdk\\5.0.100\\Microsoft.Common.CurrentVersion.targets(3075,5): error MSB3822: Non-string resources require the System.Resources.Extensions assembly at runtime, but it was not found in this project's references. [D:\\a\\HtmlEditorControl\\HtmlEditorControl\\src\\WinForms\\Framework Extensions\\Framework Extensions.csproj]\r\n```",
        "createdAt": "2020-11-12T03:57:53Z",
        "updatedAt": "2020-11-12T03:57:53Z",
        "author": {
          "login": "HavenDV"
        }
      },
      {
        "body": "> > 4. Have you tried using [Microsoft.NETFramework.ReferenceAssemblies](https://www.nuget.org/packages/Microsoft.NETFramework.ReferenceAssemblies/) to handle targeting .NET 4.5?\r\n> \r\n> I am trying to release a version of a library for .Net Framework 4.5 besides .Net Core 3.1 and .Net 5, can you explain this in more detail?\r\n> Simple usage doesn't work:\r\n> \r\n> ```\r\n> <PackageReference Include=\"Microsoft.NETFramework.ReferenceAssemblies\" Version=\"1.0.0\">\r\n>   <PrivateAssets>all</PrivateAssets>\r\n>   <IncludeAssets>runtime; build; native; contentfiles; analyzers</IncludeAssets>\r\n> </PackageReference>\r\n> ```\r\n> \r\n> ```\r\n> C:\\Users\\runneradmin\\AppData\\Local\\Microsoft\\dotnet\\sdk\\5.0.100\\Microsoft.Common.CurrentVersion.targets(3075,5): error MSB3823: Non-string resources require the property GenerateResourceUsePreserializedResources to be set to true. [D:\\a\\HtmlEditorControl\\HtmlEditorControl\\src\\WinForms\\Framework Extensions\\Framework Extensions.csproj]\r\n> C:\\Users\\runneradmin\\AppData\\Local\\Microsoft\\dotnet\\sdk\\5.0.100\\Microsoft.Common.CurrentVersion.targets(3075,5): error MSB3822: Non-string resources require the System.Resources.Extensions assembly at runtime, but it was not found in this project's references. [D:\\a\\HtmlEditorControl\\HtmlEditorControl\\src\\WinForms\\Framework Extensions\\Framework Extensions.csproj]\r\n> ```\r\n\r\nIn your projects PropertyGroup set\r\n\r\n```\r\n<PropertyGroup>\r\n....\r\n<GenerateResourceUsePreserializedResources>true</GenerateResourceUsePreserializedResources>\r\n</PropertyGroup>\r\n\r\n```\r\n\r\nIf the other is still giving issues one could use GeneratePathProperty=true on the nuget package and then reference the dll directly:\r\n```\r\n<ItemGroup>\r\n<Reference Name=\"System.Resources.Extensions\" Include=\"$(Microsoft_NETFramework_ReferenceAssemblies)\\lib\\NET45\\<<NameofDLL>>\" />\r\n</ItemGroup>\r\n```\r\n\r\n",
        "createdAt": "2020-11-13T02:43:48Z",
        "updatedAt": "2020-11-13T02:44:50Z",
        "author": {
          "login": "PPenglis"
        }
      },
      {
        "body": "> If the other is still giving issues one could use GeneratePathProperty=true on the nuget package and then reference the dll directly:\r\n\r\n```xml\r\n<PackageReference Include=\"Microsoft.NETFramework.ReferenceAssemblies.net45\" Version=\"1.0.0\" GeneratePathProperty=\"true\">\r\n  <PrivateAssets>all</PrivateAssets>\r\n  <IncludeAssets>runtime; build; native; contentfiles; analyzers</IncludeAssets>\r\n</PackageReference>\r\n<Reference Name=\"System.Resources.Extensions\" Include=\"$(PkgMicrosoft_NETFramework_ReferenceAssemblies_net45)\\build\\.NETFramework\\v4.5\\Facades\\System.Resources.ResourceManager.dll\" />\r\n```\r\nI am trying this. But the package does not contain anything suitable other than System.Resources.ResourceManager.dll.\r\nAnyway, I get the same errors:\r\n```\r\n2>C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\MSBuild\\Current\\Bin\\Microsoft.Common.CurrentVersion.targets(3075,5): error MSB3822: Non-string resources require the System.Resources.Extensions assembly at runtime, but it was not found in this project's references.\r\n```",
        "createdAt": "2020-11-13T10:09:09Z",
        "updatedAt": "2020-11-13T10:10:08Z",
        "author": {
          "login": "HavenDV"
        }
      },
      {
        "body": "@HavenDV That was in reply to https://github.com/dotnet/msbuild/issues/4704#issuecomment-660149373 which reported some different issues. If you get this error\r\n\r\n```\r\n2>C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\MSBuild\\Current\\Bin\\Microsoft.Common.CurrentVersion.targets(3075,5): error MSB3822: Non-string resources require the System.Resources.Extensions assembly at runtime, but it was not found in this project's references.\r\n```\r\n\r\nyou need to add\r\n\r\n```xml\r\n<PackageReference Include=\"System.Resources.Extensions\" Version=\"5.0.0\" />\r\n```\r\n\r\nto your project file.",
        "createdAt": "2020-11-13T15:46:30Z",
        "updatedAt": "2020-11-13T15:46:30Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> If the other is still giving issues one could use GeneratePathProperty=true on the nuget package and then reference the dll directly:\r\n> \r\n> ```\r\n> <ItemGroup>\r\n> <Reference Name=\"System.Resources.Extensions\" Include=\"$(Microsoft_NETFramework_ReferenceAssemblies)\\lib\\NET45\\<<NameofDLL>>\" />\r\n> </ItemGroup>\r\n> ```\r\n\r\n@gooterz nit: `System.Resources.Extensions` is not in the reference assemblies, only its own package.",
        "createdAt": "2020-11-13T15:47:22Z",
        "updatedAt": "2020-11-13T15:47:22Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> @HavenDV That was in reply to [#4704 (comment)](https://github.com/dotnet/msbuild/issues/4704#issuecomment-660149373) which reported some different issues. If you get this error\r\n\r\nI'm looking for a way to add .Net 4.0 and .Net 4.5 targets to a multi-target project. .Net 4.6.1, .Net Core 3.1 and .Net 5 work fine.",
        "createdAt": "2020-11-13T17:19:37Z",
        "updatedAt": "2020-11-13T17:19:37Z",
        "author": {
          "login": "HavenDV"
        }
      },
      {
        "body": "@HavenDV Ah, I see. Since `System.Resources.Extensions` only has .NET 4.6.1 and .NET Standard 2.0, it can't be used there. You can build a project that multitargets to older .NET versions with `MSBuild.exe`, but not with `dotnet build`.",
        "createdAt": "2020-11-13T22:09:01Z",
        "updatedAt": "2020-11-13T22:09:01Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@RusKnyaz\r\n> I solved my issue by removing of the extra lines from Resources.resx file.\r\n\r\nWhat extra line did you remove?\r\nI'm having the same problem :-/\r\n",
        "createdAt": "2021-12-16T09:31:51Z",
        "updatedAt": "2021-12-16T09:31:51Z",
        "author": {
          "login": "martingertsen"
        }
      },
      {
        "body": "Do I really need to create the 'resources.resx' for embedded resources to work ? I presumed they would just work by setting them on the `.csproj`.  Is that the expected behavior ? can someone confirm it for me, please ? ",
        "createdAt": "2021-12-22T17:03:18Z",
        "updatedAt": "2021-12-22T17:20:35Z",
        "author": {
          "login": "Luiz-Monad"
        }
      },
      {
        "body": "I circumvented the problem by removing the reference to the `System.Resources.Extension` NuGet package.\r\nTo get the project to build after that, I had to set `GenerateResourceUsePreserializedResources` to `false`.\r\nThis made the project work fine, though I lost the localized ressources in the generated NuGet.\r\nI didn't find a solution for that, but fortunately I had just a few texts localized, so I changed to using a dictionary instead - suboptimal, I know, but after all this time consuming trial & error I was short on time, and I had to get a working solution fast, so yeah... this is where I ended up :-/",
        "createdAt": "2021-12-22T17:39:58Z",
        "updatedAt": "2021-12-22T17:39:58Z",
        "author": {
          "login": "martingertsen"
        }
      },
      {
        "body": "This problem still cause with .NET 6 Multi Platform",
        "createdAt": "2023-02-03T07:11:29Z",
        "updatedAt": "2023-02-03T07:11:29Z",
        "author": {
          "login": "chuongmep"
        }
      }
    ]
  }
}