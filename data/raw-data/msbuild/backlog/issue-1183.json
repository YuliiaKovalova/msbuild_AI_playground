{
  "number": 1183,
  "title": "Adopt new Roslyn location when moved out of the msbuild\\bin folder",
  "body": "In MSBuild 15.0 Roslyn can no longer correctly load a custom version of` Microsoft.Build.Tasks.CodeAnalysis.dll.  This is done as part of our basic check-in process to validate the new compiler can be self hosted by our code base.\n\nThe details here are that Roslyn uses the following snippet to load our just build task:\n\n``` xml\n  <UsingTask TaskName=\"Microsoft.CodeAnalysis.BuildTasks.Csc\"\n             AssemblyFile=\"$(BootstrapBuildPath)\\Microsoft.Build.Tasks.CodeAnalysis.dll\"\n             Condition=\"'$(BootstrapBuildPath)' != ''\" />\n```\n\nThis will successfully load our newly built task.  This task DLL has a dependency on Microsoft.CodeAnalysis.dll.  This DLL exists next to Microsoft.Build.Tasks.CodeAnalysis.dll on disk and previously was loaded by MSBuild 14.0 in this setup.  In MSBuild 15.0 the Microsoft.CodeAnalysis.dll which ships with MSBuild is loaded instead.\n\nThe failure in action can be viewed in [this Jenkins job](https://ci.dot.net/job/dotnet_roslyn/job/dev15-rc/job/windows_debug_unit32_prtest/13/).  Full diagnostic build log available [here](https://ci.dot.net/job/dotnet_roslyn/job/dev15-rc/job/windows_debug_unit32_prtest/13/artifact/Binaries/Build.log).  \n\nHas anything related to assembly loading changed in MSBuild recently? \n\nThis blocks our ability to use MSBuild 15.0.  It took us a while to notice because the break isn't evident until a portion of the contract between Microsoft.Build.Tasks.CodeAnalysis and Microsoft.CodeAnalysis changes.  That tends to happen in waves and we just recently ran into it. \n",
  "state": "CLOSED",
  "createdAt": "2016-10-12T00:07:16Z",
  "updatedAt": "2024-02-21T17:25:16Z",
  "closedAt": "2016-11-22T16:34:59Z",
  "author": {
    "login": "jaredpar"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "rainersigwald"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "@tmeschter would your recent change address this?\n\n```\nerror MSB4018: The \"Csc\" task failed unexpectedly.\nerror MSB4018: System.TypeLoadException: Could not load type 'Microsoft.CodeAnalysis.BuildPaths' from assembly 'Microsoft.CodeAnalysis, Version=2.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.\nerror MSB4018:    at Microsoft.CodeAnalysis.BuildTasks.ManagedCompiler.ExecuteTool(String pathToTool, String responseFileCommands, String commandLineCommands)\nerror MSB4018:    at Microsoft.Build.Utilities.ToolTask.Execute()\n```\n\n@jaredpar is the same invocation of MSBuild loading different `Microsoft.Build.Tasks.CodeAnalysis.dll` instances?  Or does this one invocation only try to load one version of the DLL?\n",
        "createdAt": "2016-10-12T14:50:58Z",
        "updatedAt": "2016-10-12T14:50:58Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "@jeffkl in this scenario there are three dlls of interest:\n1. Microsoft.Build.Tasks.CodeAnalysis\n2. Microsoft.CodeAnalysis.CSharp\n3. Microsoft.CodeAnalysis\n\nThe first is our build task assembly and it references the other two.  Our `UsingTask` explicitly loads Microsoft.Build.Tasks.CodeAnalysis.  This properly loads from our build location.  The other two though load instead from the MSBuild installation path, instead of our build location.\n\nI just added some extra validation this morning to catch when this type of bad load occurs.  It validates the above description:\n\n> https://github.com/dotnet/roslyn/pull/14445/commits/f32cfb9018e95f71428f157572b76483b457fc6e\n",
        "createdAt": "2016-10-12T15:12:36Z",
        "updatedAt": "2016-10-12T15:12:52Z",
        "author": {
          "login": "jaredpar"
        }
      },
      {
        "body": "I'm fairly certain that @tmeschter just fixed this.  Tom?\n",
        "createdAt": "2016-10-12T15:50:03Z",
        "updatedAt": "2016-10-12T15:50:03Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "@jaredpar @jeffkl That should be _partially_ fixed now. We used to explicitly look next to msbuild.exe when resolving assemblies. Now we only do that for Microsoft.Build.\\* assemblies so that we can redirect to the current version.\n\nThere's still a potential issue in that the binaries located next to msbuild.exe may be picked up by the default assembly loader before MSBuild gets any say in the matter. I don't think there's anything that can be done about that on the MSBuild side.\\* I've advised the dotnet CLI guys to stop doing that.\n\n*In theory what we can do is implement our own `AssemblyLoadContext` to isolate task assembly loading and dependency resolution. Unfortunately there are loading bugs in the runtime that won't be fixed for RTM that effectively preclude us from doing that.\n",
        "createdAt": "2016-10-12T16:22:08Z",
        "updatedAt": "2016-10-12T16:22:08Z",
        "author": {
          "login": "tmeschter"
        }
      },
      {
        "body": "@jaredpar This is happening when building with an LKG Dev15 install right (Preview 5?)?\n\nWhat is the major/minor version of the just-built Roslyn that you want to load? If it matches the major/minor of the assemblies in the MSBuild folder the CLR loader will prefer the copy in the application base directory (MSBuild's bin) over the copy that it would eventually find from `LoadFrom`.\n",
        "createdAt": "2016-10-15T12:21:16Z",
        "updatedAt": "2016-10-15T12:21:16Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald this is with Dev15 Preview 5\n\n> If it matches the major/minor of the assemblies in the MSBuild folder the CLR loader will prefer the copy in the application base directory (MSBuild's bin) over the copy that it would eventually find from LoadFrom.\n\nWe need to change this behavior then or have a suitable work around.  Roslyn fundamentally depends, and has depended on, the ability to load custom built versions of our DLLs in order to validate our compiler.  For many other reasons the versions of these DLLs tend to match those installed with MSBuild (binding redirects, and config files force our hand here).  \n\nThis has worked for quite some time now.  What changed to break this? \n",
        "createdAt": "2016-10-17T16:18:12Z",
        "updatedAt": "2016-10-17T16:18:12Z",
        "author": {
          "login": "jaredpar"
        }
      },
      {
        "body": "@jaredpar @rainersigwald I'm confused--are we talking about MSBuild on _Desktop_ or MSBuild on _Core_? Because they now have different assembly loading behavior. I assumed we were talking about Core.\n",
        "createdAt": "2016-10-17T16:43:30Z",
        "updatedAt": "2016-10-17T16:43:30Z",
        "author": {
          "login": "tmeschter"
        }
      },
      {
        "body": "@tmeschter I'm specifically talking about Desktop for this bug. \n",
        "createdAt": "2016-10-17T16:57:15Z",
        "updatedAt": "2016-10-17T16:57:15Z",
        "author": {
          "login": "jaredpar"
        }
      },
      {
        "body": "The core of the issue is that Roslyn's task assembly (`Microsoft.Build.Tasks.CodeAnalysis.dll`) depends on other assemblies (`Microsoft.CodeAnalysis.dll`) that are _in the MSBuild folder_. Location of the C# compiler is primarily a historical accident--both `MSBuild.exe` and `csc.exe` used to ship with the .NET Framework and so were colocated, and after MSBuild moved out it was easiest to bring the compiler with it.\n\nThe fix for this will be to move the Roslyn assemblies to a different folder so the CLR loader won't find them in MSBuilds Application Base directory. That will require coordinated effort here and in the Roslyn repo: https://github.com/dotnet/roslyn/issues/14660 tracks moving the assemblies in the Roslyn setup component, and this bug now tracks adjusting [the default `UsingTasks`](https://github.com/Microsoft/msbuild/blob/1a55490345b6882f8610a07f68671554b16d64b3/src/XMakeTasks/Microsoft.Common.tasks#L170-L172) that we ship to deal with the new location.\n\nWe must also be careful to test both x86 and amd64 MSBuild with these changes, as Roslyn will likely want to stop redundantly shipping the same assembly in two folders.\n",
        "createdAt": "2016-10-21T14:45:02Z",
        "updatedAt": "2016-10-21T14:45:02Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}