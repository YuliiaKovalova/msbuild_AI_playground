{
  "number": 530,
  "title": "Is MSB5004: The solution file has two projects named X correct?",
  "body": "When trying to build [Microsoft.CSharp.sln from corefx](https://github.com/svick/corefx/blob/a981d3aa4ddf2dec4eb72578f4562127eb5f7688/src/Microsoft.CSharp/Microsoft.CSharp.sln) with msbuild (v14.0.24720.0), I get the following error:\n\n> Solution file error MSB5004: The solution file has two projects named \"Microsoft_CSharp\".\n\nThe solution file indeed has two projects with the same name, so the error looks correct. But in Visual Studio 2015, the solution builds correctly. Is this discrepancy expected? If not, which one is wrong, msbuild or VS?\n\n(Since there doesn't seem to be any reason for the duplicate project name, I have also created an issue in corefx to fix the solution: dotnet/corefx#7024.)\n",
  "state": "CLOSED",
  "createdAt": "2016-03-18T15:42:43Z",
  "updatedAt": "2025-04-11T18:14:59Z",
  "closedAt": "2017-02-22T16:52:09Z",
  "author": {
    "login": "svick"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "Area: Solution (.sln)",
    "Postponed",
    "triaged"
  ],
  "comments": {
    "nodes": [
      {
        "body": "The [check](https://github.com/Microsoft/msbuild/blob/9993b7fd7c12f30f8c39f3e3a2304101edae72b7/src/XMakeBuildEngine/Construction/Solution/SolutionFile.cs#L580-L580) is there because MSBuild uses project names  to construct target names when generating `metaproj` files from the solution, and if there are multiple targets with the same name, the last one wins.\n\nBut that's just an implementation detail and MSBuild should support duplicate names if Visual Studio does. There's already infrastructure to [generate a unique name](https://github.com/Microsoft/msbuild/blob/9993b7fd7c12f30f8c39f3e3a2304101edae72b7/src/XMakeBuildEngine/Construction/Solution/ProjectInSolution.cs#L349-L388), but I can't tell if that unique name is actually used.\n",
        "createdAt": "2016-03-18T16:14:38Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "As you know \"Project Name\" in the solution file context means \"string immediately after the GUID in the sln file\" not \"filename of project\". It does _originate_ from the filename, and if you rename the project in VS it will rename both so generally they match.\n\nThe reason that VS stores the project name separate from the filename is that it can be different from the filename. VS allows two projects to have the same name in the solution, if they are in different solution folders. Solution folders are virtual folders, stored only in the solution (as virtual projects!) and visible as folders in the solution explorer. (VS does not allow projects to have the same name merely by being in different file system folders -- because those real folders aren't usually shown in the solution explorer)\n\nThis solution has no solution folders so it is not valid for it to have two projects with the same name. VS is tolerant of the hand edit but when you save the solution again, you will see the project name was updated to match the file name.\n\nGetUniqueProjectName() prefixes the project name with any solution folder name, so it will handle any solutions that VS would write out. In this case, to make MSBuild as tolerant as VS, the code probably should go further if the name is still not unique. For example, it could use the file name instead of the project name. It should not simply change to use the file name, or some other scheme, as the unique project name is used to generate public target names as noted above. So people do \"msbuild my.sln /t:fooproject:build\". So it's important that the names generated using valid solution files remain the same. Ideally, the result would be deterministic as well.\n\nThe VS solution parser is so complex and the format so horrible that many times this code has had to change to be equally tolerant. It would be wonderful if .sln could be replaced with something MSBuild format.\n",
        "createdAt": "2016-04-07T21:10:15Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "Customers sometimes generate .sln using scripts, BTW, so it is quite common for them to not be written out exactly as VS would write them. \n",
        "createdAt": "2016-04-07T21:12:06Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "Closing as \"won't fix\" since this is an invalid solution file and there's a workaround of opening and resaving in VS. Tagging as sln-related in case we decide to come back and be more tolerant, like VS itself is.\r\n\r\nIf anyone else runs into a similar problem, please note it here. If this is more common of a problem than I currently think we could revisit the decision to not build tolerance in.",
        "createdAt": "2017-02-22T16:52:09Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I have the same problem with sln files generated with premake. Visual studio opens the solution without issues, msbuild crashes. Opening and resaving doesn't help, because I'm working on a Jenkins build that re-generates the solution file every time.",
        "createdAt": "2017-03-13T10:21:04Z",
        "author": {
          "login": "mikosz"
        }
      },
      {
        "body": "Hello, I have also the problem of duplicate names in my .sln file, I use cmake to generate all build files. But what is strange is that with devenv.com the build success. Why ? ",
        "createdAt": "2025-04-11T18:14:57Z",
        "author": {
          "login": "jojoatt"
        }
      }
    ]
  }
}