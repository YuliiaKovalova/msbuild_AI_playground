{
  "number": 8756,
  "title": "[Bug]: Files from referenced assembly are copied despite setting Private to False",
  "body": "### Issue Description\n\nA minimal sample project that reproduces the issue:\r\n\r\n*Main.sln*\r\n```\r\nMicrosoft Visual Studio Solution File, Format Version 12.00\r\n# Visual Studio Version 17\r\nVisualStudioVersion = 17.0.31903.59\r\nMinimumVisualStudioVersion = 10.0.40219.1\r\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"P1\", \"P1\\P1.csproj\", \"{48CDE3E7-2C01-4AFB-BB03-A42E20C81E10}\"\r\nEndProject\r\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"P2\", \"P2\\P2.csproj\", \"{22FE0983-46BC-40D9-8501-BB33338F7A1B}\"\r\n\tProjectSection(ProjectDependencies) = postProject\r\n\t\t{48CDE3E7-2C01-4AFB-BB03-A42E20C81E10} = {48CDE3E7-2C01-4AFB-BB03-A42E20C81E10}\r\n\tEndProjectSection\r\nEndProject\r\nGlobal\r\n\tGlobalSection(SolutionConfigurationPlatforms) = preSolution\r\n\t\tDebug|Any CPU = Debug|Any CPU\r\n\t\tRelease|Any CPU = Release|Any CPU\r\n\tEndGlobalSection\r\n\tGlobalSection(SolutionProperties) = preSolution\r\n\t\tHideSolutionNode = FALSE\r\n\tEndGlobalSection\r\n\tGlobalSection(ProjectConfigurationPlatforms) = postSolution\r\n\t\t{48CDE3E7-2C01-4AFB-BB03-A42E20C81E10}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{48CDE3E7-2C01-4AFB-BB03-A42E20C81E10}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{48CDE3E7-2C01-4AFB-BB03-A42E20C81E10}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{48CDE3E7-2C01-4AFB-BB03-A42E20C81E10}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{22FE0983-46BC-40D9-8501-BB33338F7A1B}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{22FE0983-46BC-40D9-8501-BB33338F7A1B}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{22FE0983-46BC-40D9-8501-BB33338F7A1B}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{22FE0983-46BC-40D9-8501-BB33338F7A1B}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\tEndGlobalSection\r\nEndGlobal\r\n```\r\n\r\n*P1\\P1.csproj*\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net48</TargetFramework>\r\n    <OutputType>Exe</OutputType>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <None Include=\"Test.txt\">\r\n      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>\r\n    </None>\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\n*P1\\Main.cs*\r\n```\r\nnamespace P1 {\r\n  public static class Program {\r\n    public static void Main() { }\r\n  }\r\n}\r\n```\r\n\r\n*P1\\Test.txt*\r\n```\r\n-\r\n```\r\n\r\n*P2\\P2.csproj*\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net48</TargetFramework>\r\n    <OutputType>library</OutputType>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <Reference Include=\"P1\">\r\n      <HintPath>..\\P1\\bin\\Debug\\net48\\P1.exe</HintPath>\r\n      <Private>False</Private>\r\n    </Reference>\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\n*P2\\C1.cs*\r\n```\r\nnamespace P2 {\r\n  public class C1 { }\r\n}\r\n```\n\n### Steps to Reproduce\n\nNow build the project:\r\n\r\n```\r\ndotnet build\r\n```\n\n### Expected Behavior\n\nThe expected result is not having Test.txt in the output folder.\r\n\r\nWhen building project one-by-one this doesn't happen:\r\n\r\n```\r\n> dotnet build .\\P1\\P1.csproj\r\n> dotnet build .\\P2\\P2.csproj\r\n> dir .\\P2\\bin\\Debug\\net48\\\r\n... prints P2.dll and P2.pdb ...\r\n```\n\n### Actual Behavior\n\nOutput folder contains Test.txt.\r\n\r\n```\r\n> dir .\\P2\\bin\\Debug\\net48\\\r\n... prints P2.dll, P2.pdb, and Test.txt ...\r\n```\n\n### Analysis\n\n_No response_\n\n### Versions & Configurations\n\n```\r\n> dotnet --version\r\n7.0.203\r\n> dotnet --list-sdks\r\n7.0.203 [C:\\Program Files\\dotnet\\sdk]\r\n```",
  "state": "CLOSED",
  "createdAt": "2023-05-13T13:40:32Z",
  "updatedAt": "2024-02-21T14:05:05Z",
  "closedAt": "2023-05-29T07:40:54Z",
  "author": {
    "login": "alex-netkachov"
  },
  "labels": [
    "bug",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "JanKrivanek"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "You have this in _Main.sln_:\r\n\r\n```\r\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"P2\", \"P2\\P2.csproj\", \"{22FE0983-46BC-40D9-8501-BB33338F7A1B}\"\r\n\tProjectSection(ProjectDependencies) = postProject\r\n\t\t{48CDE3E7-2C01-4AFB-BB03-A42E20C81E10} = {48CDE3E7-2C01-4AFB-BB03-A42E20C81E10}\r\n\tEndProjectSection\r\nEndProject\r\n```\r\n\r\nMSBuild translates that to a ProjectReference that does not have Private metadata.  If you build with `MSBUILDEMITSOLUTION=1` in the environment, then MSBuild saves _P2/P2.csproj.metaproj_, which includes the generated ProjectReference.\r\n\r\nThe ProjectReference then causes _P1/Test.txt_ to be copied to _P2/bin/Debug/net48/Test.txt_, even if you delete this Reference from _P2/P2.csproj_:\r\n\r\n```XML\r\n  <ItemGroup>\r\n    <Reference Include=\"P1\">\r\n      <HintPath>..\\P1\\bin\\Debug\\net48\\P1.exe</HintPath>\r\n      <Private>False</Private>\r\n    </Reference>\r\n  </ItemGroup>\r\n```\r\n\r\nI think you should replace the Reference in _P2/P2.csproj_ with a ProjectReference so that you can control its Private metadata, and delete the dependency from _Main.sln_.",
        "createdAt": "2023-05-14T13:35:35Z",
        "updatedAt": "2023-05-14T13:35:35Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "> If you build with `MSBUILDEMITSOLUTION=1` in the environment, then MSBuild saves _P2/P2.csproj.metaproj_, which includes the generated ProjectReference.\r\n\r\nOops, the ProjectReference in _P2/P2.csproj.metaproj_ seems to be used for sequencing only.  The item that is used for copying content instead comes from the AssignProjectConfiguration task executed by the AssignProjectConfiguration target. This task gets `<ProjectDependency Project=\"{48CDE3E7-2C01-4AFB-BB03-A42E20C81E10}\" />` as part of its SolutionConfigurationContents parameter.  The resulting ProjectReferenceWithConfiguration item has metadata CopyLocal=false, but it does not have the Private metadata that the _GetCopyToOutputDirectoryItemsFromTransitiveProjectReferences target would check.\r\n\r\nThe CopyLocal metadata is apparently added here: <https://github.com/dotnet/msbuild/blob/7e646be438ea3fdd8fdab0553cd0e5b505174b65/src/Tasks/ResolveProjectBase.cs#L281>\r\n\r\nI wonder if that should be changed to add Private=false as well, or alternatively, _GetCopyToOutputDirectoryItemsFromTransitiveProjectReferences could check the CopyLocal metadata. <https://github.com/dotnet/msbuild/blob/7e646be438ea3fdd8fdab0553cd0e5b505174b65/src/Tasks/Microsoft.Common.CurrentVersion.targets#L4972>",
        "createdAt": "2023-05-14T13:56:34Z",
        "updatedAt": "2023-05-14T13:56:34Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "I've tried to use ProjectReference, but it also does not respect Private completely. If I add a project \"P0\" and reference it from P1 and then use project reference from P2 (i.e. P2 project-references P1 with Private=False, P1 project-references  P0) then on build dotnet copies P0 binaries to P2's target folder (and does not copy P1's binaries, so Private is respected but not for dependencies).",
        "createdAt": "2023-05-14T14:18:19Z",
        "updatedAt": "2023-05-14T14:18:19Z",
        "author": {
          "login": "alex-netkachov"
        }
      },
      {
        "body": "@KalleOlaviNiemitalo Thank you for looking into that. Indeed, I've added dependency into solution for sequencing only.\r\n\r\nI do not mind using ProjectReference but ideally a non-private reference should not copy anything to the current project. Unfortunately, it does.",
        "createdAt": "2023-05-14T14:25:00Z",
        "updatedAt": "2023-05-14T14:25:00Z",
        "author": {
          "login": "alex-netkachov"
        }
      },
      {
        "body": "> I've tried to use ProjectReference, but it also does not respect Private completely.\r\n\r\nDoes it respect CopyLocal?",
        "createdAt": "2023-05-15T05:40:15Z",
        "updatedAt": "2023-05-15T05:40:15Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "> > I've tried to use ProjectReference, but it also does not respect Private completely.\r\n> \r\n> Does it respect CopyLocal?\r\n\r\nIt is the same thing, isn't it?\r\n\r\n> https://learn.microsoft.com/en-us/visualstudio/msbuild/common-msbuild-project-items?view=vs-2022#projectreference\r\n> **Private** Optional boolean. Specifies whether the reference should be copied to the output folder. This attribute matches the **Copy Local** property of the reference that's in the Visual Studio IDE.",
        "createdAt": "2023-05-15T20:45:53Z",
        "updatedAt": "2023-05-15T20:46:10Z",
        "author": {
          "login": "alex-netkachov"
        }
      },
      {
        "body": "Related: #4795 (attempt to express build ordering only)\r\n\r\n@AlexG5T It sounds that above mentioned case is related to you. In your case you need only `<Private>false</Private>` (to prevent copying of build outputs of P1 into P2 output) and `<ExcludeAssets>all</ExcludeAssets>` (as P1 is and `.exe`, so additional supplemental files need to be explictly removed).\r\nNote those apply to `ProjectReference`. Using a `Reference` for a build output of a project that is a part of the build is not recommended practise (and while build of entire solution behaves unexpectedly here - as it is able to locate `P1.csproj` project via `_MSBuildProjectReferenceExistent` metada populated during the build of  `P1.csproj` - it's of a low priority for addressing now as it has recommended workaround - expresing the relationship directly via `ProjectReference`).\r\n\r\nSo the suggested `P2.csproj`:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net48</TargetFramework>\r\n    <OutputType>library</OutputType>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <ProjectReference Include=\"../P1/P1.csproj\">\r\n      <Private>false</Private>\r\n      <ExcludeAssets>all</ExcludeAssets>\r\n    </ProjectReference>\r\n  </ItemGroup>\r\n</Project>\r\n```",
        "createdAt": "2023-05-28T18:58:47Z",
        "updatedAt": "2023-05-28T18:59:55Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "Thank you for the workaround. `ProjectReference` with `<Private>false</Private>` and `<ExcludeAssets>all</ExcludeAssets>` solved the build ordering without the solution.",
        "createdAt": "2023-05-28T23:16:05Z",
        "updatedAt": "2023-05-28T23:16:05Z",
        "author": {
          "login": "alex-netkachov"
        }
      },
      {
        "body": "Closing as duplicate of #4795",
        "createdAt": "2023-05-29T07:40:54Z",
        "updatedAt": "2023-05-29T07:40:54Z",
        "author": {
          "login": "JanKrivanek"
        }
      }
    ]
  }
}