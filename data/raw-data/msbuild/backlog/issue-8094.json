{
  "number": 8094,
  "title": "MSBuildStartupDirectory wrong values for .NET 7 dotnet build (blocker for Sonar analysis)",
  "body": "### Issue Description\r\n\r\nWhen analyzing a project using SonarScanner for .NET (integration tool for [SonarQube](https://marketplace.visualstudio.com/items?itemName=SonarSource.sonarqube)), and we use the .NET 7 runtime the analysis fails ([related issue](https://github.com/SonarSource/sonar-scanner-msbuild/issues/1333)).\r\n\r\nAfter digging around we found that the problem lies with `MSBuildStartupDirectory` property that we use (see [here](https://github.com/SonarSource/sonar-scanner-msbuild/blob/5.8.0.52797/src/SonarScanner.MSBuild.Tasks/Targets/SonarQube.Integration.ImportBefore.targets#L12)) to get the absolute path from which `dotnet build` command or MSBuild is called. \r\n\r\n\r\nThe issue can be summarized as follows:\r\n\r\nIf one builds two consecutive projects with .NET7, the value of `MSBuildStartupDirectory` keeps the value of the first project that was built.\r\n\r\n### Steps to Reproduce\r\n\r\nClone https://github.com/mary-georgiou-sonarsource/net7Repro\r\n```bash\r\ncd Project1\r\ndotnet build /target:DisplayMessages\r\ncd ../Project2\r\ndotnet build /target:DisplayMessages\r\n```\r\n### Expected Behavior\r\n`MSBuildStartupDirectory` should have as a value the path of the root folder from which is invoked.\r\n\r\n### Actual Behavior\r\nAfter building `Project1` the output is:\r\n```\r\n  MSBuildStartupDirectory = Dir\\Project1\r\n  Project File Name = Project1.csproj\r\n```\r\n\r\nAfter building `Project2`:\r\n```\r\n  MSBuildStartupDirectory = Dir\\Project1\r\n  Project File Name = Project2.csproj\r\n```\r\nNotice that the `MSBuildStartupDirectory` is not updated to `Dir\\Project2`. \r\n\r\nI did the same test, but with targetting `dotnet 6.0.305`, and the behavior, in that case, was correct - `MSBuildStartupDirectory` had the correct value.\r\n\r\n### Versions & Configurations\r\n* MSBuild version 17.4.0-preview-22470-08+6521b1591\r\n* dotnet 7.0.100-rc.2.22477.23\r\n* OS:  Microsoft Windows 10 Pro 10.0.19044 Build 19044\r\n\r\n\r\nThis is a blocker for the .NET project analysis with SonarQube.\r\nIt seems that a workaround is to use `msbuild /t:rebuild -v:d`.\r\nIs there a workaround for the dotnet CLI?\r\n\r\nThanks a lot!",
  "state": "CLOSED",
  "createdAt": "2022-10-26T14:33:45Z",
  "updatedAt": "2024-02-21T14:07:16Z",
  "closedAt": "2022-11-11T17:21:44Z",
  "author": {
    "login": "mary-georgiou-sonarsource"
  },
  "labels": [
    "bug",
    "Area: Server",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "rokonec"
      }
    ]
  },
  "milestone": {
    "title": "VS 17.5"
  },
  "comments": {
    "nodes": [
      {
        "body": "Looks like a bug in MSBuild Server. @rokonec\r\n\r\n@mary-georgiou-sonarsource, MSBuild server is off by default for .NET 7.0.100 GA (not yet released).\r\n\r\n> Is there a workaround for the dotnet CLI?\r\n\r\nThere is, the environment variable `DOTNET_CLI_DO_NOT_USE_MSBUILD_SERVER=1`:\r\n\r\n```sh-session\r\n$ dotnet build /target:DisplayMessages\r\nMSBuild version 17.4.0-preview-22470-08+6521b1591 for .NET\r\n  Determining projects to restore...\r\n  Restored /workspaces/net7Repro/Project2/Project2/Project2.csproj (in 3 ms).\r\n  MSBuildStartupDirectory = /workspaces/net7Repro/Project1\r\n  Project File Name = Project2.csproj\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:00:00.16\r\n$ DOTNET_CLI_DO_NOT_USE_MSBUILD_SERVER=1 dotnet build /target:DisplayMessages\r\nMSBuild version 17.4.0-preview-22470-08+6521b1591 for .NET\r\n  Determining projects to restore...\r\n  All projects are up-to-date for restore.\r\n  MSBuildStartupDirectory = /workspaces/net7Repro/Project2\r\n  Project File Name = Project2.csproj\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:00:00.86\r\n```\r\n\r\nThe workaround will be harmless but unnecessary on SDKs after GA; we should fix this bug before attempting to reenable MSBuild Server.",
        "createdAt": "2022-10-26T14:52:59Z",
        "updatedAt": "2022-10-26T14:52:59Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Thanks a lot, @rainersigwald, for the super quick response!\r\n\r\nTo verify: \r\n> The workaround will be harmless but unnecessary on SDKs after GA\r\n\r\nThis means that we should not have this problem after the release, and there won't be a need to set `DOTNET_CLI_DO_NOT_USE_MSBUILD_SERVER = 1` explicitly.  Is this correct?",
        "createdAt": "2022-10-26T15:28:34Z",
        "updatedAt": "2022-10-26T15:28:54Z",
        "author": {
          "login": "mary-georgiou-sonarsource"
        }
      },
      {
        "body": "Yes - that's correct. The MSBuild Server feature has been changed into an opt-in for the GA release (with an associated grammar change to the environment variable override), so setting this environment variable will no longer change any behaviors.",
        "createdAt": "2022-10-26T15:36:18Z",
        "updatedAt": "2022-10-26T15:36:18Z",
        "author": {
          "login": "baronfel"
        }
      }
    ]
  }
}