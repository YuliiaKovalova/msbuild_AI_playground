{
  "number": 9276,
  "title": "[Feature Request]: ability to create target maps when circular dependency exists instead of exiting with error",
  "body": "### Summary\n\nUsing the `-graph` (target graph) feature to build a graph involving a circular dependency would be tremendously helpful to debug and get rid of the circular dependency. The circular dependency could be pointed out by way of outlining it in a different color or otherwise.\n\n### Background and Motivation\n\nPlease consider [ClVersionRetrieve.proj](https://github.com/assarbad/msbuild-batching/blob/main/ClVersionRetrieve.proj) as of [dda59c6](https://github.com/assarbad/msbuild-batching/commit/dda59c6794a84677626e7ea1bc6d6c6d7f6fc13f).\r\n\r\nThe project mimics a Visual C++ project, but sidesteps the actual `Build` target.\r\n\r\nWhen I originally built it prior to the revision mentioned above, I was only able to build it directly like so:\r\n\r\n```\r\nmsbuild -p:Configuration=Release -t:ClVersionRetrieve -verbosity:normal ClVersionRetrieve.proj\r\n```\r\n\r\nhowever, using the `Rebuild` target instead (or using it from within the solution):\r\n\r\n```\r\nmsbuild -p:Configuration=Release -t:Rebuild -verbosity:normal ClVersionRetrieve.proj\r\n```\r\n\r\ncaused an error:\r\n\r\n```\r\n  C:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\MSBuild\\Current\\Bin\\amd64\\Microsoft.Common.CurrentVersion.targets(5587,7): error MSB4006: There is a circular dependency in the\r\ntarget dependency graph involving target \"CleanReferencedProjects\". [D:\\source\\repos\\msbuild-batching\\ClVersionRetrieve.proj]\r\n```\r\n\r\nThe error refers to the `DependsOnTargets` attribute in the following snippet:\r\n\r\n```\r\n  <Target\r\n      Name=\"Clean\"\r\n      Condition=\" '$(_InvalidConfigurationWarning)' != 'true' \"\r\n      DependsOnTargets=\"$(CleanDependsOn)\" />\r\n```\r\n\r\nWith the aforementioned revision I emptied out the `Clean` target (and removed all its dependencies and dependents) to resolve the issue.\r\n\r\nHowever, even after doing that I get an error when attempting to create the target graph, while the build itself works fine. The error I get when attempting the above is:\r\n\r\n```\r\n$ msbuild -p:Configuration=Release -t:Rebuild -verbosity:normal ClVersionRetrieve.proj -graph\r\nMSBuild version 17.7.2+d6990bcfa for .NET Framework\r\nBuild started 2023-09-26 22:20:03.\r\n\r\nMSBUILD : error : MSB4251: There is a circular dependency involving the following projects:\r\nMSBUILD : error : D:\\source\\repos\\msbuild-batching\\ClVersionRetrieve.proj ->\r\nMSBUILD : error : D:\\source\\repos\\msbuild-batching\\ClVersionRetrieve.proj\r\n\r\nBuild FAILED.\r\n\r\n  MSBUILD : error : MSB4251: There is a circular dependency involving the following projects:\r\nMSBUILD : error : D:\\source\\repos\\msbuild-batching\\ClVersionRetrieve.proj ->\r\nMSBUILD : error : D:\\source\\repos\\msbuild-batching\\ClVersionRetrieve.proj\r\n\r\n    0 Warning(s)\r\n    1 Error(s)\r\n\r\nTime Elapsed 00:00:00.15\r\n```\n\n### Proposed Feature\n\nExtend `-graph` such that it doesn't issue `MSB4251` and instead -- at most -- outputs a warning, otherwise proceeding to output a graph that can be used to investigate the circular dependency issue.\n\n### Alternative Designs\n\n_No response_",
  "state": "OPEN",
  "createdAt": "2023-09-26T22:20:44Z",
  "updatedAt": "2024-01-31T08:13:08Z",
  "closedAt": null,
  "author": {
    "login": "assarbad"
  },
  "labels": [
    "Feature Request",
    "triaged",
    "gathering-feedback"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "@assarbad - The [Static Graph](https://github.com/dotnet/msbuild/blob/main/documentation/specs/static-graph.md) aims for increased build performance for larger scale builds via frontloading the dependencies discovery and performing their topologic sort traversal for deterministic and 'each project just once' scheduling. More details in the linked doc.\r\n\r\nProducing non-schedulable output (not traversable via topological sort) is a non-goal for the feature.\r\n",
        "createdAt": "2023-10-03T14:23:53Z",
        "updatedAt": "2023-10-03T14:23:53Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "@JanKrivanek understood. It's a shame, though. I wish it could also be used to determine those cyclic dependencies in order to address those issues when they're encountered.\r\n\r\nI spent several hours on similar issues to the ones I commented on in the vscode-dotnettools ticket (linked above) and I _think_ -- but I am not a 100% sure -- that a look at the dependency graph with target names could have shrunk that time spent considerably.",
        "createdAt": "2023-10-07T18:59:41Z",
        "updatedAt": "2023-10-07T18:59:41Z",
        "author": {
          "login": "assarbad"
        }
      },
      {
        "body": "Understood and thanks for the shared feedback and suggestion.\r\nI'm marking this with 'gathering-feedback' so that it can be considered and prioritized during next cycle planning.",
        "createdAt": "2023-10-09T09:53:39Z",
        "updatedAt": "2023-10-09T09:53:39Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "> that a look at the dependency graph with target names\r\n\r\nIt's important to understand that _no such thing exists today_. Dependencies between targets are processed with a stack-based mechanism and most dependencies are discovered \"just in time\", which is part of why the cycle detection mechanism is not good today.",
        "createdAt": "2023-10-09T15:10:59Z",
        "updatedAt": "2023-10-09T15:10:59Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}