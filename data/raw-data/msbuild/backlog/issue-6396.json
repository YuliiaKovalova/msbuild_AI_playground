{
  "number": 6396,
  "title": "Veracode Scan Show \"Very High\" Severity Security Threat within MSBuild Library ",
  "body": "Hi,\r\n\r\nThe company I work for utilizes MSBuild and we appreciate the work you guys have done. Thank you! We use Veracode to detect if any security threats exist within our code. After running a scan, Veracode detected a \"very high flaw\" within the MSBuild library. I've attached a screenshot of the flaw and its location. The error is, \"Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection').\" \r\n[Here is a link to an in depth explanation of this weakness.  ](https://cwe.mitre.org/data/definitions/78.html)\r\n\r\n![image](https://user-images.githubusercontent.com/83475882/116755789-a7370c00-a9a6-11eb-8048-398cdb2d3122.png)\r\n![image](https://user-images.githubusercontent.com/83475882/116755913-e5ccc680-a9a6-11eb-9131-b7a4ffc9bfa2.png)\r\n![image](https://user-images.githubusercontent.com/83475882/116755991-0d239380-a9a7-11eb-8b3a-034058d54cc6.png)\r\n\r\nHere are some solutions we've tried:\r\n\r\n- Updated the version of the package to the most recent one. It still gave out the error.\r\n- Tried to downgrade the version of the package to see if that would make a difference. It still gave out the error. \r\n\r\nIf you have any suggestions and/or concerns please do not hesitate to contact me! We can work together to solve this weakness within the MSBuild library! Looking forward to hearing from you guys! Have a wonderful day! :)\r\n\r\n\r\n\r\n\r\n",
  "state": "CLOSED",
  "createdAt": "2021-04-30T21:30:56Z",
  "updatedAt": "2024-02-21T14:13:42Z",
  "closedAt": "2021-05-12T15:16:08Z",
  "author": {
    "login": "harexelizaga"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Hi @harexelizaga. I reached out to Veracode because we were puzzled, none of those functions take user input in any way, and so don't need filtering for unescaped paths or any other type of oddness that could cause vulnerabilities. \r\n\r\nTLDR: You're safe, these aren't strictly false positives, but an artifact of how you're using the tool which needs adjusting.\r\n\r\nWhen you upload an application for analysis to Veracode you have to also upload its dependencies. By default, they scan the top-level module -- the first party .EXE(s) or .DLL(s) containing known entry points, e.g. Page_Load(), etc. That way they only scan your actual code plus dependency code including the context in which those dependencies are used (and build tasks aren't dependencies, you don't deploy those with your application).\r\n\r\nHowever, you can override that default and choose to scan everything as a top-level module. In this case, you've likely elected to treat `microsoft.build.utilities.core.dll` (and others) as a standalone application.  Since there are no real entry points, the exported functions as entry points and any values passed into those functions as tainted. This is a design choice Veracode made because they figure if you're scanning a library, you want to assume the worst about how people are using it.\r\n\r\nThe OS command injection flaws you have resulted from them `microsoft.build.utilities.core.dll` as a standalone application. Veracode's guidance around module selection is: \"For the most optimal, relevant and actionable findings we recommend only selecting first party modules without an entry point or with an entry point that is user facing.\" \r\n\r\nMore context: https://community.veracode.com/s/article/What-are-Modules-and-how-do-my-results-change-based-on-what-I-select",
        "createdAt": "2021-05-05T20:56:40Z",
        "updatedAt": "2021-05-05T20:56:40Z",
        "author": {
          "login": "blowdart"
        }
      },
      {
        "body": "Team Triage: Closing due to the above response",
        "createdAt": "2021-05-12T15:16:08Z",
        "updatedAt": "2021-05-12T15:16:29Z",
        "author": {
          "login": "benvillalobos"
        }
      }
    ]
  }
}