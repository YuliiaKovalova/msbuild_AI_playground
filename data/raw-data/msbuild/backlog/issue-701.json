{
  "number": 701,
  "title": "Change incremental build to account for more kinds of state change than timestamps",
  "body": "**This issue is in the open design phase and is a part of the [project.json -> csproj ](https://blogs.msdn.microsoft.com/dotnet/2016/05/23/changes-to-project-json/) conversion effort.**\n### Incremental build in the face of globs\n\nMSBuild only considers the set of items computed in the current build when deciding when to execute a target. When files are included via wildcard this can create a problem when deleting an input. The output will be up-to-date with all of the existing inputs but should be re-built because the set of inputs has changed.\n\nWe could address this by building a state store and using it to compare the current build inputs & outputs against the previous build. In order to accomplish this, we would need to complete the following:\n- [ ] Identify a unique address for a target instance (each target instance needs to be uniquely identifiable and gets its own persisted incremental state).\n- [ ] Figure out directory structure for where to save the caches (machine wide / per project, etc).\n- [ ] Flesh out cache invalidation scenarios (e.g. command line changed, environment variables changed, etc). Stretch goal: re-build when properties change as well as inputs/outputs.\n- [ ] Stretch goal: Unify the multiple incremental implementations in MSBuild.\n",
  "state": "OPEN",
  "createdAt": "2016-06-15T23:36:03Z",
  "updatedAt": "2023-06-12T21:43:05Z",
  "closedAt": null,
  "author": {
    "login": "Sarabeth-Jaffe-Microsoft"
  },
  "labels": [
    "Feature Request",
    "Feature - Globbing",
    "needs-triage"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Consider for Next Major Version"
  },
  "comments": {
    "nodes": [
      {
        "body": "Closing this as we won't be going with this implementation for now.\n",
        "createdAt": "2016-11-08T22:00:09Z",
        "updatedAt": "2016-11-08T22:00:09Z",
        "author": {
          "login": "Sarabeth-Jaffe-Microsoft"
        }
      },
      {
        "body": "Reopening because we should have a bug to track \"it'd be nice if we could do incremental build via hashes\" and \"it'd be nice if we could do incremental build correctly in the face of property changes between builds\".",
        "createdAt": "2021-06-29T14:31:46Z",
        "updatedAt": "2021-06-29T14:31:46Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "We had a meeting and discussed this.  Currently there are likely many targets (especially around linker/AOT/publish scenarios) which are not incremental, and we don't think it's feasible to make them correctly incremental without some validation that the target \"inputs\" are correctly declared.\r\n\r\nWe think we could address this with a design something like the following:\r\n\r\n- Add `TargetDataCache` attribute to `Target` element to tell MSBuild where to store incrementality data.  SDK code would use a different file under the intermediate output directory for each target\r\n  - It might be too much overhead to have a separate file for each target if they are all using this feature.  In that case we might need to consolidate\r\n- Inputs to a `Target` should support both properties and items.  Instead of expanding / flattening the values as is currently done, MSBuild would need to preserve the structure (for example which items have which values).  Item metadata should also likely be accounted for.\r\n  - For speed, the default mode might be to simply create a hash of the inputs.  If so, it would be useful to have a different mode that stored all of the values so that the binlog could list which values changed causing a target to be built fully\r\n- An option to run MSBuild in \"Debug\" mode where it will record all property and item reads in a target, and compare that to the inputs that were declared on the target.  If they don't match, the declared inputs need to be updated, and MSBuild should either emit the information to the binlog or generate an error.\r\n\r\nI'm marking this as needs triage to discuss whether we could schedule this for the .NET 9 timeframe.",
        "createdAt": "2023-05-23T14:15:09Z",
        "updatedAt": "2023-05-23T14:15:09Z",
        "author": {
          "login": "dsplaisted"
        }
      },
      {
        "body": "> For speed, the default mode might be to simply create a hash of the inputs. If so, it would be useful to have a different mode that stored all of the values so that the binlog could list which values changed causing a target to be built fully\r\n\r\nIf all we know of what the state was before is a hash of the inputs, how could we figure out which of the inputs changed, causing the rebuild?",
        "createdAt": "2023-06-12T21:38:39Z",
        "updatedAt": "2023-06-12T21:38:39Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "> An option to run MSBuild in \"Debug\" mode where it will record all property and item reads in a target, and compare that to the inputs that were declared on the target. If they don't match, the declared inputs need to be updated, and MSBuild should either emit the information to the binlog or generate an error.\r\n\r\nI really like this idea, but it also sounds like a kinda heavy lift to me. There's a lot you can do in targets, and we don't have any consolidated way to check whether any particular property or item has been read. That said, if we decide to implement this part, I'd consider simultaneously resolving the issue with erroring if someone tries to set a property then never uses it (i.e., typos).",
        "createdAt": "2023-06-12T21:43:05Z",
        "updatedAt": "2023-06-12T21:43:05Z",
        "author": {
          "login": "Forgind"
        }
      }
    ]
  }
}