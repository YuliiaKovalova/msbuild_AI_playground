{
  "number": 6822,
  "title": "Investigate the impact of aggressive caching of system/immutable files. ",
  "body": "Child of #6761\r\n\r\nWe'd like to know what percentage of [GetLastWriteFileUtcTime](https://github.com/dotnet/msbuild/blob/e923c2b80f00ec373b1f35108d4aaa45b280aa8c/src/Shared/NativeMethodsShared.cs#L1080) calls would be eliminated from an incremental build if we cached the result for SDK files and for files from the NuGet cache:\r\n1. From first build (cache is empty).\r\n2. From second build (cache in build nodes is populated from first build).\r\n",
  "state": "CLOSED",
  "createdAt": "2021-09-07T13:05:11Z",
  "updatedAt": "2024-02-21T17:01:04Z",
  "closedAt": "2021-09-14T08:41:52Z",
  "author": {
    "login": "AR-May"
  },
  "labels": [
    "Area: Performance",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "AR-May"
      }
    ]
  },
  "milestone": {
    "title": "VS 17.1"
  },
  "comments": {
    "nodes": [
      {
        "body": "I measured incremental builds of OrchardCore and MSBuild solutions with 4 MSBuild nodes. \r\nThere were 3 buckets of files: \r\n1. nuget: \"C:\\Users\\username\\\\.nuget\\\\**\", \r\n2. dotnet: \"C:\\Program Files\\dotnet\\\\**\", \r\n3. other.\r\n\r\nI measured amount of different files and total calls for each bucket and computed multiplicity factor - average amount of calls for a distinct file in each bucket. If we cache results, it should be 4, equal to the number of processes.\r\n\r\n**OrchardCore solution.** \r\n|| nuget | dotnet | other |\r\n| ------------- | ------------- | ------------- | ------------- |\r\ndifferent files | 189 | 284 | 16314 |\r\ntotal checks | 14133 | 122490 | 41775 |\r\nmultiplicity factor | 74.77777778 | 431.3028169 | 2.560684075 |\r\n\r\nHere are diagrams for the number of calls and time spend on each bucket.\r\n![image](https://user-images.githubusercontent.com/67507805/133121528-b5c4579a-068c-4690-8283-c22f40569351.png)\r\n\r\nFor buckets \"nuget\" and \"dotnet\", if the multiplicity factor would be 4 (file checked once per process, that is cold run), we would need to check (189+284)*4 =  1892 files out of 136623 total checks we are doing now. That is ~1.4%, so for these two buckets we would have 98.6% of savings.\r\nFor the warm runs we would save even more, from 98.6% up to 100% of these buckets.\r\n\r\nSo, it is safe to say that we could almost completely remove \"nuget\" and \"dotnet\"  slices from the common picture. Total gain: around 75-80%.\r\n \r\n **MSBuild solution.** \r\n|| nuget | dotnet | other |\r\n| ------------- | ------------- | ------------- | ------------- |\r\ndifferent files | 1048 | 319 | 6937 |\r\ntotal checks | 10654 | 6985 | 14979 |\r\nmultiplicity factor | 10.16603053 | 21.89655172 | 2.15929076 |\r\n\r\nHere are diagrams for the number of calls and time spend on each bucket.\r\n![image](https://user-images.githubusercontent.com/67507805/133122842-6f3d7e7e-4518-4e4f-82c6-8b671f58a2d7.png)\r\n\r\n(1048  + 319)*4 =  5468 files out of 17639 is estimation for necessary checks for a cold run. That is 30% of the checks from buckets \"nuget\" and \"dotnet\". So, the gain for the cold run is 70% for these buckets. For the warm run, eventually, we would be able to hit all these files in all 4 processes, thus eliminate these checks completely.\r\n\r\nThe situation with multiplicity factor is better for smaller projects, as well as the impact of bucket \"other\" is bigger. There would be not that big gain there. Total gain: 35-53%\r\n",
        "createdAt": "2021-09-13T16:54:59Z",
        "updatedAt": "2021-09-13T16:57:11Z",
        "author": {
          "login": "AR-May"
        }
      }
    ]
  }
}