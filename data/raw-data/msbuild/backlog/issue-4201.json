{
  "number": 4201,
  "title": "Properties delivered in a NuGet package referenced via packages.config are not reevaluated after restore",
  "body": "This issue arises when trying to deliver MSBuild targets/properties in a NuGet package (which I'll call the *targets package*). The targets package uses the new csproj format and is multi-targeted. In my case, I am targeting `netstandard2.0;net461`.\r\n\r\nThe targets package delivers a `props` file which contains the following property:\r\n\r\n```\r\n<PropertyGroup>\r\n  <ExampleProperty>example property</ExampleProperty>\r\n</PropertyGroup>\r\n```\r\n\r\nand a `targets` file which contains the following target:\r\n\r\n```\r\n<Target Name=\"TestTarget\" BeforeTargets=\"BeforeBuild\">\r\n  <Message Text=\"The example property is $(ExampleProperty)\" Importance=\"High\" />\r\n</Target>\r\n```\r\n\r\nWhen the targets package is packed to a NuGet package and then installed into a project using a 'classic' csproj (which I'll call the host package), these lines are added - as expected - to the csproj:\r\n\r\n```\r\n<Import Project=\"..\\packages\\PropsProject.1.0.0\\build\\PropsProject.props\" Condition=\"Exists('..\\packages\\PropsProject.1.0.0\\build\\PropsProject.props')\" />\r\n[...]\r\n<Target Name=\"EnsureNuGetPackageBuildImports\" BeforeTargets=\"PrepareForBuild\">\r\n  <PropertyGroup>\r\n    <ErrorText>This project references NuGet package(s) that are missing on this computer. Use NuGet Package Restore to download them.  For more information, see http://go.microsoft.com/fwlink/?LinkID=322105. The missing file is {0}.</ErrorText>\r\n  </PropertyGroup>\r\n  <Error Condition=\"!Exists('..\\packages\\PropsProject.1.0.0\\build\\PropsProject.props')\" Text=\"$([System.String]::Format('$(ErrorText)', '..\\packages\\PropsProject.1.0.0\\build\\PropsProject.props'))\" />\r\n  <Error Condition=\"!Exists('..\\packages\\PropsProject.1.0.0\\build\\PropsProject.targets')\" Text=\"$([System.String]::Format('$(ErrorText)', '..\\packages\\PropsProject.1.0.0\\build\\PropsProject.targets'))\" />\r\n</Target>\r\n<Import Project=\"..\\packages\\PropsProject.1.0.0\\build\\PropsProject.targets\" Condition=\"Exists('..\\packages\\PropsProject.1.0.0\\build\\PropsProject.targets')\" />\r\n```\r\nHowever, when building the host package, the properties are not evaluated. The build prints the incorrect output `The example property is `.\r\n\r\n### Steps to reproduce\r\n\r\n* Clone https://github.com/rossng/PropsBugDemonstrator\r\n* Open the solution in Visual Studio (tested with 2019/16.0.0 preview 3.0)\r\n* Build `PropsProject` to produce the targets package `PropsProject\\bin\\Debug\\PropsProject.1.0.0.nupkg`\r\n* Copy the NuGet package to your local repository\r\n* Restore packages for the `PropsBugDemonstrator` project\r\n* Rebuild the `PropsBugDemonstrator` project\r\n\r\n### Expected behaviour\r\n\r\nDuring the build, the `TestTarget` defined in the targets package is executed and prints `The example property is example property`.\r\n\r\n### Actual behaviour\r\n\r\nDuring the build, the `TestTarget` defined in the targets package is executed and prints `The example property is `.\r\n\r\nLog excerpt:\r\n\r\n```\r\n1>Target \"TestTarget: (TargetId:3)\" in file \"C:\\Users\\Ross Gardiner\\Documents\\Projects\\PropsBugDemonstrator\\packages\\PropsProject.1.0.0\\build\\PropsProject.targets\" from project \"C:\\Users\\Ross Gardiner\\Documents\\Projects\\PropsBugDemonstrator\\PropsBugDemonstrator\\PropsBugDemonstrator.csproj\" (target \"BeforeBuild\" depends on it):\r\n1>Task \"Message\" (TaskId:4)\r\n1>  Task Parameter:Text=The example property is  (TaskId:4)\r\n1>  Task Parameter:Importance=High (TaskId:4)\r\n1>  The example property is  (TaskId:4)\r\n1>Done executing task \"Message\". (TaskId:4)\r\n```\r\n\r\n### Other notes\r\n\r\nIf you can't reproduce the issue, try deleting all `packages`, `bin` and `obj` folders before building.\r\n\r\nThe issue does not arise if using the new csproj format for `PropsBugDemonstrator`. In the 'real' instance of this bug I do not currently have the option to switch to the new format.\r\n\r\nI am unable to reproduce the issue using the command line interface to MSBuild. Steps to try this are (starting from repository root):\r\n\r\n```\r\ncd PropsBugDemonstrator\r\nnuget restore -SolutionDirectory ..\r\nmsbuild PropsBugDemonstrator.csproj\r\n```\r\n\r\n### Environment data\r\n`msbuild /version` output:\r\n\r\n```\r\nMicrosoft (R) Build Engine version 16.0.360-preview+g9781d96883 for .NET Framework\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n16.0.360.33175\r\n```\r\n\r\nand\r\n\r\n```\r\nMicrosoft (R) Build Engine version 15.9.21+g9802d43bc3 for .NET Framework\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n15.9.21.664\r\n```\r\n\r\nOS info:\r\n\r\nWindows 10 Pro for Workstations 1809, 17763.316\r\n\r\nIf applicable, version of the tool that invokes MSBuild (Visual Studio, dotnet CLI, etc):\r\n\r\n* Visual Studio 16.0.0 Preview 3.0\r\n* Visual Studio 15.9.7",
  "state": "OPEN",
  "createdAt": "2019-02-27T13:33:23Z",
  "updatedAt": "2024-02-21T16:31:52Z",
  "closedAt": null,
  "author": {
    "login": "rossng"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Discussion"
  },
  "comments": {
    "nodes": [
      {
        "body": "@rainersigwald @rrelyea was this ever supported? This sort of behavior for package references in old style projects?",
        "createdAt": "2019-02-27T20:30:48Z",
        "updatedAt": "2019-02-27T21:00:56Z",
        "author": {
          "login": "livarcocc"
        }
      },
      {
        "body": "This is packages.config, not `<PackageReference>`, but both should be supported.",
        "createdAt": "2019-02-27T20:38:03Z",
        "updatedAt": "2019-02-27T20:38:03Z",
        "author": {
          "login": "Pilchie"
        }
      },
      {
        "body": "@rossng Does it work if you restore, then explicitly unload/reload `PropsBugDemonstrator`? It sounds like there's a missed re-evaluation after restore.",
        "createdAt": "2019-02-27T21:01:53Z",
        "updatedAt": "2019-02-27T21:01:53Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Curious to see @rossng answer.\r\nAlso, did this same technique work in earlier builds.\r\nYou'd think it would work.",
        "createdAt": "2019-02-27T23:45:40Z",
        "updatedAt": "2019-02-27T23:45:40Z",
        "author": {
          "login": "rrelyea"
        }
      },
      {
        "body": "@rainersigwald I tried your suggestion of unloading the project and reloading it - this seems to work in both Visual Studio 2017 and 2019 Preview 4.0 (which I have just installed).\r\n\r\n@rrelyea I'm unsure if this technique worked in any previous version. However I agree that it should.\r\n\r\nLet me know if there's any log information etc. that would be useful for diagnostics.",
        "createdAt": "2019-02-28T08:53:59Z",
        "updatedAt": "2019-02-28T08:53:59Z",
        "author": {
          "login": "rossng"
        }
      },
      {
        "body": "Forgot to mention that this problem also occurs if the `PropertyGroup` is inside the `.targets` file. It seems to work fine if the `PropertyGroup` is actually inside a `Target` element, though.\r\n\r\n---\r\n\r\nAlso, I should explain my motivation for doing this.\r\n\r\nWe currently have a large .NET Framework 4.6.1 desktop application. We are incrementally porting it to the new csproj format so that we can switch over to .NET Core some time in the future.\r\n\r\nWe have packages implementing a bunch of custom MSBuild targets that are useful for our CI pipeline. They do things like NuGet package creation and version number patching.\r\n\r\nWe want to port small packages like these MSBuild targets before we tackle the main application projects, which have dozens of dependencies. It's also useful to have multi-targeting as we can seamlessly support projects when they transition from .NET Framework to .NET Core.\r\n\r\nI guess this will be a common use case for many companies migrating to .NET Core.",
        "createdAt": "2019-02-28T09:25:05Z",
        "updatedAt": "2019-02-28T09:25:57Z",
        "author": {
          "login": "rossng"
        }
      },
      {
        "body": "It's not directly relevant to the problem you're reporting here, but if you're planning to move to Sdk-style projects and eventually .NET Core, I would recommend moving to `<PackageReference />` style references to NuGet packages, rather than `packages.config` references. It's one less thing you'll have to convert later.",
        "createdAt": "2019-02-28T16:56:37Z",
        "updatedAt": "2019-02-28T16:56:37Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rossng did you ever solve this?  I have the same exact issue you did using VS2019.  We had a nuget package using props and target files as you describe which worked fine for years using VS2015.  We are encountering the problem only when upgrading from 2015 to 2019.\r\n\r\nOtherwise, I am curious what the proper design is for injecting custom msbuild functionality via a nuget package.",
        "createdAt": "2019-07-15T15:09:13Z",
        "updatedAt": "2019-07-15T15:09:13Z",
        "author": {
          "login": "DrHungrysaur"
        }
      },
      {
        "body": "@DrHungrysaur other than unloading and reloading the project, unfortunately not. It seems that using `PackageReference`s does fix the issue though - so I would suggest migrating to those if you don't have any `packages.config`-dependent infrastructure (I did \ud83d\ude22)",
        "createdAt": "2019-07-15T17:45:28Z",
        "updatedAt": "2019-07-15T17:45:56Z",
        "author": {
          "login": "rossng"
        }
      },
      {
        "body": "I ended up having this issue for a project that was invoking MSBuild programmatically, so this isn't actually relevant to the issue at hand. However this is the issue that kept coming up when I was trying to research the problem, so I thought I'd help out anyone who ends up in the same situation as me:\r\n\r\nIn order to get MSBuild to reevaluate everything after restore, you need to convince it to create a separate evaluation context by adding a dummy property, which is what `msbuild.exe` does: https://github.com/microsoft/msbuild/blob/acc2569a30fc9749942f4cdc58811e12acabf096/src/MSBuild/XMake.cs#L1333-L1349\r\n\r\nEDIT: It's worth noting that you should clear caches too. See [the original PR](https://github.com/microsoft/msbuild/pull/2414) from when this switch was introduced for some more details.\r\n\r\n(Sorry again to the people watching this thread for the mostly off-topic comment.)",
        "createdAt": "2019-07-31T10:20:12Z",
        "updatedAt": "2019-07-31T10:31:12Z",
        "author": {
          "login": "PathogenDavid"
        }
      }
    ]
  }
}