{
  "number": 3383,
  "title": "Exec Task Shouldn't Hang When Parent Process Fork Long Running Process",
  "body": "### Steps to reproduce\r\n\r\nGiven the following project sample:\r\n```xml\r\n<Project>\r\n  <Target Name=\"SomeTask\">\r\n    <Exec Command=\"start notepad\r\necho After notepad is started\" />\r\n  </Target>\r\n</Project>\r\n```\r\n\r\nMSBuild will hang waiting for `notepad` to complet event though the `cmd.exe` process executing the \"batch\" script containing the `start` and `echo` command exited.\r\n\r\nThe following is a procexp capture of the process tree as well as the process property of the notepad application:\r\n<img width=\"880\" alt=\"screen_shot_2018-06-07_at_6_21_54_pm\" src=\"https://user-images.githubusercontent.com/22181740/41112758-21e4429c-6a80-11e8-8c26-cc87da2ca8de.png\">\r\n\r\n<img width=\"513\" alt=\"screen_shot_2018-06-07_at_6_24_44_pm\" src=\"https://user-images.githubusercontent.com/22181740/41112879-6d1335fc-6a80-11e8-858f-095d11b5b9ab.png\">\r\n\r\n### Expected  behavior\r\nI would expect either 1) this behavior to be well documented and workaround available when requiring to leave daemon behind or 2) MSBuild properly detect the parent process exited don't wait for the child process.\r\n\r\n### Actual behavior\r\nMSBuild waits for the child process to exits. It actually seems to be the issue describe [here](https://www.gamedev.net/forums/topic/488409-processwaitforexit-inconsistent-behavior-re-process-tree/). My gut feeling is this context, the `Process#Exited` event isn't fired which cause the [trampoline](https://github.com/Microsoft/msbuild/blob/master/src/Utilities/ToolTask.cs#L1292-L1304) to not be executed and cause the `_toolExited` event to not be set. Then the [`WaitAny` here](https://github.com/Microsoft/msbuild/blob/master/src/Utilities/ToolTask.cs#L1018) is never notified which cause MSBuild to hang.\r\n\r\n### Environment data\r\n`msbuild /version` output:\r\n```\r\nMicrosoft (R) Build Engine version 15.7.179.6572 for .NET Framework\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n15.7.179.6572\r\n```\r\n\r\nOS info:\r\nWindows 10 Pro\r\nversion: 10.0.17134 Build 17134\r\n\r\nIf applicable, version of the tool that invokes MSBuild (Visual Studio, dotnet CLI, etc):\r\nFrom a `cmd.exe` console.\r\n",
  "state": "OPEN",
  "createdAt": "2018-06-07T16:37:20Z",
  "updatedAt": "2024-02-21T16:33:48Z",
  "closedAt": null,
  "author": {
    "login": "lacasseio"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Forgot to mention that `notepad` in this example represent the long-running process.",
        "createdAt": "2018-06-07T16:49:54Z",
        "updatedAt": "2018-06-07T16:49:54Z",
        "author": {
          "login": "lacasseio"
        }
      },
      {
        "body": "At a quick glance, this problem is usually because the grandchild process inherited streams from the child process, and we wait on stream close (this is required to make sure we have received all of the output we need from the child, in case it buffered up a bunch of output and quickly exited).\r\n\r\nThis is a nice repro that should be poked at, but I don't know if there will be an elegant solution, unfortunately.",
        "createdAt": "2018-06-07T17:51:27Z",
        "updatedAt": "2018-06-07T17:51:27Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Is there any news on this issue? I am also affected by this.\r\n\r\nAre there any known workarounds?",
        "createdAt": "2022-01-11T10:15:46Z",
        "updatedAt": "2022-01-11T10:15:46Z",
        "author": {
          "login": "felix-ri"
        }
      },
      {
        "body": "> Are there any known workarounds?\r\n\r\nYou can interject a process that closes its streams (or never opens them, or redirects to a file or NUL).",
        "createdAt": "2022-01-26T17:07:03Z",
        "updatedAt": "2022-01-26T17:07:03Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}