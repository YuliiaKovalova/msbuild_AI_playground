{
  "number": 6178,
  "title": "ProjectInstance fails to load project with \"The imported project \"C:\\Microsoft.Cpp.Default.props\" was not found\"",
  "body": "\r\nCreating a ProjectInstance for a vcxproj file throws the exception \"The imported project \"C:\\Microsoft.Cpp.Default.props\" was not found\". \r\n\r\nThe re-create the issue, on a clean PC install VS2019 Community. Create a C# project with the following:\r\n\r\n```\r\nusing System;\r\nusing System.Diagnostics;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text;\r\nusing Microsoft.Build.Execution;\r\nusing Microsoft.Build.Evaluation;\r\n\r\nnamespace MSBuildTest2\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n\t\t\tDictionary<string, string> parameters = new Dictionary<string, string>();\r\n\t\t\tparameters[\"Configuration\"] = \"Debug\";\r\n\t\t\tparameters[\"Platform\"] = \"x64\";\r\n\r\n\t\t\tProjectInstance project = new ProjectInstance(\r\n\t\t\t\t@\"..\\..\\..\\..\\ConsoleApplication1\\ConsoleApplication1\\ConsoleApplication1.vcxproj\",\r\n\t\t\t\tparameters,\r\n\t\t\t\tnull,\r\n\t\t\t\tProjectCollection.GlobalProjectCollection);\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\nConsoleApplication1 is a C++ console project created with the default settings.\r\n\r\nThe ProjectInstance constructor will throw the following exception:\r\n\r\n```\r\nMicrosoft.Build.Exceptions.InvalidProjectFileException\r\n  HResult=0x80131500\r\n  Message=The imported project \"C:\\Microsoft.Cpp.Default.props\" was not found. Confirm that the path in the <Import> declaration is correct, and that the file exists on disk.  C:\\Users\\Me\\Desktop\\MSBuildTest2\\ConsoleApplication1\\ConsoleApplication1\\ConsoleApplication1.vcxproj\r\n  Source=Microsoft.Build\r\n  StackTrace:\r\n   at Microsoft.Build.Shared.ProjectErrorUtilities.ThrowInvalidProject(String errorSubCategoryResourceName, IElementLocation elementLocation, String resourceName, Object[] args)\r\n   at Microsoft.Build.Shared.ProjectErrorUtilities.ThrowInvalidProject(IElementLocation elementLocation, String resourceName, Object arg0)\r\n   at Microsoft.Build.Evaluation.Evaluator`4.ExpandAndLoadImports(String directoryOfImportingFile, String importExpressionEscaped, ProjectImportElement importElement)\r\n   at Microsoft.Build.Evaluation.Evaluator`4.EvaluateImportElement(String directoryOfImportingFile, ProjectImportElement importElement)\r\n   at Microsoft.Build.Evaluation.Evaluator`4.PerformDepthFirstPass(ProjectRootElement currentProjectOrImport)\r\n   at Microsoft.Build.Evaluation.Evaluator`4.Evaluate()\r\n   at Microsoft.Build.Evaluation.Evaluator`4.Evaluate(IEvaluatorData`4 data, ProjectRootElement root, ProjectLoadSettings loadSettings, Int32 maxNodeCount, PropertyDictionary`1 environmentProperties, ILoggingService loggingService, IItemFactory`2 itemFactory, IToolsetProvider toolsetProvider, ProjectRootElementCache projectRootElementCache, BuildEventContext buildEventContext, ProjectInstance projectInstanceIfAnyForDebuggerOnly)\r\n   at Microsoft.Build.Execution.ProjectInstance.Initialize(ProjectRootElement xml, IDictionary`2 globalProperties, String explicitToolsVersion, String explicitSubToolsetVersion, Int32 solutionVersion, BuildParameters buildParameters, ILoggingService loggingService, BuildEventContext buildEventContext)\r\n   at Microsoft.Build.Execution.ProjectInstance..ctor(String projectFile, IDictionary`2 globalProperties, String toolsVersion, String subToolsetVersion, ProjectCollection projectCollection)\r\n   at Microsoft.Build.Execution.ProjectInstance..ctor(String projectFile, IDictionary`2 globalProperties, String toolsVersion, ProjectCollection projectCollection)\r\n   at MSBuildTest2.Program.Main(String[] args) in C:\\Users\\Me\\Desktop\\MSBuildTest2\\MSBuildTest2\\MSBuildTest2\\Program.cs:line 19\r\n```\r\n\r\nHere are the two projects:\r\n[MSBuildTest2.zip](https://github.com/dotnet/msbuild/files/6017567/MSBuildTest2.zip)\r\n\r\nThe problem appears to be that the $(VCTargetsPath) is not defined.\r\n\r\n\r\nFurther Info:\r\n\r\nThe application behaves differently on two machines, PC1 and PC2. PC1 is my main development PC, with multiple version of Visual Studio installed (and a lot more). PC2 is a clean install of Windows 10 with only VS2019 installed. I haven't been able to establish what is causing the different behavour.\r\n\r\nOn PC1 ProjectInstance will only work is ToolsVersion is set in the vcxproj file. If it isn't set I get the exception listed above. However, if I pass in \"14.0\" to ProjectInstance it does work.\r\n\r\nTrying the same thing on PC2 it doesn't work, but I get a different error:\r\n\r\n```\r\nMicrosoft.Build.Exceptions.InvalidProjectFileException\r\n  HResult=0x80131500\r\n  Message=The tools version \"14.0\" is unrecognized. Available tools versions are \"4.0\".  C:\\Users\\Me\\Desktop\\MSBuildTest2\\ConsoleApplication1\\ConsoleApplication1\\ConsoleApplication1.vcxproj\r\n  Source=Microsoft.Build\r\n  StackTrace:\r\n   at Microsoft.Build.Shared.ProjectErrorUtilities.ThrowInvalidProject(String errorSubCategoryResourceName, IElementLocation elementLocation, String resourceName, Object[] args)\r\n   at Microsoft.Build.Execution.ProjectInstance.Initialize(ProjectRootElement xml, IDictionary`2 globalProperties, String explicitToolsVersion, String explicitSubToolsetVersion, Int32 solutionVersion, BuildParameters buildParameters, ILoggingService loggingService, BuildEventContext buildEventContext)\r\n   at Microsoft.Build.Execution.ProjectInstance..ctor(String projectFile, IDictionary`2 globalProperties, String toolsVersion, String subToolsetVersion, ProjectCollection projectCollection)\r\n   at Microsoft.Build.Execution.ProjectInstance..ctor(String projectFile, IDictionary`2 globalProperties, String toolsVersion, ProjectCollection projectCollection)\r\n   at MSBuildTest2.Program.Main(String[] args) in C:\\Users\\Me\\Desktop\\MSBuildTest2\\MSBuildTest2\\MSBuildTest2\\Program.cs:line 19\r\n```\r\n\r\nOn PC1 the available tools are \"12.0\", \"14.0\", \"2.0\", \"3.5\", \"4.0\".  On PC2 I only have \"4.0\". \r\n\r\nIt appears that \"4.0\" is the tools version for VS2010 and as I said, PC2 is a clean install and only has VS2019 installed. It's as though it's using a very old version of Microsoft.Build.dll. However, on both PCs appear to be referencing and loading the same dll\r\nC:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.0\\Microsoft.Build.dll\r\n\r\nAny help would be greatly appreciated.",
  "state": "CLOSED",
  "createdAt": "2021-02-21T11:18:47Z",
  "updatedAt": "2021-06-16T21:51:10Z",
  "closedAt": "2021-06-16T15:41:09Z",
  "author": {
    "login": "slynch8"
  },
  "labels": [
    "bug",
    "needs-triage"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "If `VCTargetsPath` is not initialized, it means that VC++ tools CLI initialization hasn't been done. You need to run `<VSInstallDir>\\VC\\Auxiliary\\Build\\VcVarsAll.bat` or `<VSInstallDir>\\Common7\\Tools\\VsDevCmd.bat` to prepare the environment with VC++ paths and variables such as the one you mentioned.\r\n\r\n**Note**: `VSInstallDir` is your Visual Studio IDE install path. E.g.: `%ProgramFiles(x86)%\\Microsoft Visual Studio\\2019\\Community`",
        "createdAt": "2021-02-27T18:24:04Z",
        "updatedAt": "2021-02-27T18:24:04Z",
        "author": {
          "login": "Nirmal4G"
        }
      },
      {
        "body": "Thanks for the help. I'm already using VcVars64.bat on both machines, the one that works and the one that doesn't and neither of them seem to set the VCTargetsPath environment variable. As far as I can tell the environment variable isn't set on the machine that works.\r\n\r\nI've just checked using VsDevCmd.bat and that doesn't set it either:\r\n```\r\n**********************************************************************\r\n** Visual Studio 2019 Developer Command Prompt v16.8.6\r\n** Copyright (c) 2020 Microsoft Corporation\r\n**********************************************************************\r\n\r\nC:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community>set VCTargetsPath\r\nEnvironment variable VCTargetsPath not defined\r\n```",
        "createdAt": "2021-02-27T19:03:09Z",
        "updatedAt": "2021-02-27T19:03:09Z",
        "author": {
          "login": "slynch8"
        }
      },
      {
        "body": "I found what might be a clue here:\r\n[https://github.com/mikefourie-zz/MSBuildExplorer/issues/3](https://github.com/mikefourie-zz/MSBuildExplorer/issues/3)\r\n\"...the tool is built against the old v4.0 framework that was part of Visual Studio 2010. Because of this, it's using the MSBuild assemblies which define the $(VCTargetsPath) property to point to the directory for VS2010...\"\r\n\r\nAlthough I'm building with .Net Framework 4.7.2\r\n",
        "createdAt": "2021-02-27T19:22:47Z",
        "updatedAt": "2021-02-27T19:22:47Z",
        "author": {
          "login": "slynch8"
        }
      },
      {
        "body": "I'm guessing the different behavior between the two machines is only having VS2019 installed and not VS2017.\r\n\r\nIn summary:\r\nPC1: works if ToolsVersion=\"14.0\" is set in the vcxproj file or if I pass \"14.0\" in to ProjectInstance (but not both)\r\nPC2: doesn't work even if ToolsVesion is set in the vcxproj and complains if \"14.0\" is passed in to ProjectInstance saying only \"4.0\" is available (on PC1 I've found that 12.0\", \"14.0\", \"2.0\", \"3.5\", \"4.0\" are available)\r\n\r\nPC1 has has VS2012, VS2013, VS2015, VS2017 and VS2019 installed\r\nPC2 only has 2019 installed\r\n\r\nChecking if the tools version is not set and passing in \"14.0\" on PC1 does work but feels like a workaround. Passing in \"14.0\" doesn't work if it is set in the vcxproj file so I have to actually check the file first which is not ideal. Ideally I'd like it to just check the version in the proj file if I pass in null or just use the latest version by default.\r\n\r\nPC2 is a more serious problem because this workaround doesn't work. It's obviously something I haven't installed causing the different behavior but I've no idea what. And I need this to work on customers machines who install my software, so I need to be sure everything is setup correctly. The fact that it says only \"4.0\" toolset is available is concerning.\r\n\r\n\r\n",
        "createdAt": "2021-02-27T20:08:53Z",
        "updatedAt": "2021-02-27T20:08:53Z",
        "author": {
          "login": "slynch8"
        }
      },
      {
        "body": "Team triage:\r\nPlease use [MSBuildLocator](https://docs.microsoft.com/visualstudio/msbuild/updating-an-existing-application?view=vs-2019) for this kind of change.\r\n\r\nIn particular, although you're able to load the MSBuild dlls, MSBuild expects to run in a toolset that contains other components including the VC++ SDK, which sets VCTargetsPath. In this case, it's failing because that wasn't set. (It's a property that normally is not set via environment variable, so although you could work around _this_ problem by setting it as an environment variable, that would just lead to other problems down the road.) Using MSBuildLocator will let you select the version of MSBuild you want to use within an environment in which it can run, which will help the program load and use MSBuild APIs correctly.",
        "createdAt": "2021-06-16T15:41:02Z",
        "updatedAt": "2021-06-16T15:41:02Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "MSBuildLocator worked - thanks very much.",
        "createdAt": "2021-06-16T21:51:10Z",
        "updatedAt": "2021-06-16T21:51:10Z",
        "author": {
          "login": "slynch8"
        }
      }
    ]
  }
}