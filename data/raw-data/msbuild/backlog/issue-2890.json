{
  "number": 2890,
  "title": "Is CodeTaskFactory coming to MSBuild Core?",
  "body": "https://github.com/Microsoft/msbuild/issues/2158 was closed in favor of https://github.com/Microsoft/msbuild/issues/304, the latter was closed in favor of Jeff's RoslynCodeTaskFactory.\r\n\r\nThis issue is to get the answer whether we will have CodeTaskFactory in MSBuild.\r\n",
  "state": "CLOSED",
  "createdAt": "2018-01-23T06:48:19Z",
  "updatedAt": "2024-02-21T17:14:52Z",
  "closedAt": "2018-09-05T14:45:32Z",
  "author": {
    "login": "ghost"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "We do not have any plans to do so in the near future, since `RoslynCodeTaskFactory` enables the functionality in a cross-platform way.\r\n\r\nI assume you're asking because you want it. Can you elaborate about your use case? You might be able to persuade us to consider it again.",
        "createdAt": "2018-01-25T22:00:25Z",
        "updatedAt": "2018-01-25T22:00:25Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "CodeTaskFactory is documented in UsingTask docs for users to write code fragments in project or targets files that runs at (pre/post) build time. It is an extremely useful and flexible tech in automation scenarios, where we aren't required to precompile the build tool. Its absence in MSBuild for .NET Core is a big minus for me as we have used the ootb UsingTask with code fragment heavily in past with .NET Framework projects. \r\n\r\nRoslynCodeTaskFactory as interesting as it sounds has unfortunately not been a drop-in replacement of CodeTaskFactory for my existing code. After some digging, I was able to run some parts of my existing code to work with RCTF, but the experience is ... not quite there yet.\r\n\r\nMany people have and will hit this issue and waste hours fixing/updating the legacy code if RCTF is the only way forward. Please reconsider to bring it back.",
        "createdAt": "2018-01-26T23:38:25Z",
        "updatedAt": "2018-02-08T18:06:11Z",
        "author": {
          "login": "ghost"
        }
      },
      {
        "body": "I recently needed a Zip task written in C# for a general-purpose \"master\" MSBuild project file that builds several projects and packs their generated output together into an application archive for deployment. The project file itself is language-agnostic without a target framework by design; it basically only defines some properties, runs some MSBuild tasks on application project files and packs the generated artefacts. It basically acts as some sort of platform-independent shell script replacement. Following the documentation for _MSBuild Inline Tasks_ I used the `CodeTaskFactory` for the C# zip fragment, but then also ran into the issue that .NET Core doesn't ship with any.\r\nAn external `RoslynCodeTaskFactory` is not helpful, as the project file shouldn't have any dependencies (requiring a restore target leading to issues with a missing target framework definition and so on).\r\n\r\nIn the end I added a `RoslynCodeTaskFactory` dependency to one of the application projects and defined a Zip proxy target in the application project that my build&pack project file invokes. This works for now, but is rather dirty and having a natively shipped `CodeTaskFactory` would certainly have simplified things, especially since it's probably one of MSBuild's most powerful features that painlessly allow one to quickly write tasks for missing functionality without resorting to external dependencies or adding another project for a compiled task extension.",
        "createdAt": "2018-03-28T09:54:23Z",
        "updatedAt": "2018-03-28T09:54:23Z",
        "author": {
          "login": "takerukoushirou"
        }
      },
      {
        "body": "@takerukoushirou the `RoslynCodeTaskFactory` can also be used as a project sdk instead of a nuget dependency:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <Sdk Name=\"RoslynCodeTaskFactory\" Version=\"1.2.6\" />\r\n  \u2026\r\n</Project>\r\n```\r\n\r\nThere already is an ask for first-party in-box zip tasks at https://github.com/Microsoft/msbuild/issues/1781",
        "createdAt": "2018-03-28T10:29:22Z",
        "updatedAt": "2018-03-28T10:29:22Z",
        "author": {
          "login": "dasMulli"
        }
      },
      {
        "body": "@dasMulli thank you very much for the hints on using `RoslynCodeTaskFactory` as a project SDK (& your PR to enable that) and that Zip tasks may be added in the future.\r\nI still ran into some issues with the required restore, but ultimately found a way that works for now without the need for any proxy targets.\r\n\r\nHaving an out-of-the-box working code task factory would\u2013in my opinion\u2013still be very useful due to the flexibility it adds for using MSBuild as a general-purpose building tool without having to worry about restoring the project first (especially if a `.proj` file is used as a platform-independent replacement for a shell script).",
        "createdAt": "2018-04-03T14:14:46Z",
        "updatedAt": "2018-04-03T14:14:46Z",
        "author": {
          "login": "takerukoushirou"
        }
      },
      {
        "body": "@dasMulli, I was actually having issues with RoslynCodeTaskFactory; as much as it sounds like a drop-in replacement of CodeTaskFactory, it is not. It produces errors due to missing in-box assemblies/namespaces (like basic stuff; System.IO.Path etc.). If the official CodeTaskFactory is discontinued, it makes me (and probably some other devs) sad, but still good to have a final decision. We can always create our custom msbuild task project and hook into build pipeline (but that requires manual compilation, whereas CodeTaskFactory is more like a c# script compiled on-the-fly by msbuild).",
        "createdAt": "2018-04-03T14:35:07Z",
        "updatedAt": "2018-04-03T14:35:07Z",
        "author": {
          "login": "ghost"
        }
      },
      {
        "body": "@kasper3 please open issues if you're having problems with RoslynCodeTaskFactory so I can fix them.",
        "createdAt": "2018-04-03T14:38:15Z",
        "updatedAt": "2018-04-03T14:38:15Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "@jeffkl Where are the docs for `RoslynCodeTaskFactory`?",
        "createdAt": "2018-04-12T20:40:54Z",
        "updatedAt": "2018-04-12T20:40:54Z",
        "author": {
          "login": "binki"
        }
      },
      {
        "body": "@binki, there are some good directions in the readme https://github.com/jeffkl/RoslynCodeTaskFactory/blob/master/README.md.\r\n\r\n@jeffkl, I have the latest release and it is pretty stable. Thank you \ud83d\udc93\r\nIn its current form, could it be made as part of MSBuild by dropping `Roslyn` from the name, so we don't have to specify dependency in project?",
        "createdAt": "2018-04-13T15:13:41Z",
        "updatedAt": "2018-04-13T15:13:41Z",
        "author": {
          "login": "ghost"
        }
      },
      {
        "body": "@jeffkl can this be closed now since `RoslynCodeTaskFactory` has now shipped as built-in part of msbuild 15.8?\r\nDo we need additional docs or change docs? probably soft-deprecating (changing the guidance in docs) `CodeTaskFactory` for `RoslynCodeTaskFactory` seems possible now.",
        "createdAt": "2018-09-04T23:27:55Z",
        "updatedAt": "2018-09-04T23:27:55Z",
        "author": {
          "login": "dasMulli"
        }
      },
      {
        "body": "@dasMulli yes, this can be closed.\r\n\r\nMore info on the RoslynCodeTaskFactory is available at: https://docs.microsoft.com/en-us/visualstudio/msbuild/msbuild-roslyncodetaskfactory?view=vs-2017\r\n\r\n",
        "createdAt": "2018-09-05T14:45:32Z",
        "updatedAt": "2018-09-05T14:45:32Z",
        "author": {
          "login": "jeffkl"
        }
      }
    ]
  }
}