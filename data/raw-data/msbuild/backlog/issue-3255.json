{
  "number": 3255,
  "title": "Inconsistencies in the way RecursiveDir works",
  "body": "I have found some inconsistencies, or at least a case that seem inconsistent to me, in the way the `%(RecursiveDir)` works. I don't get the same result when using the `Copy` task or when using the `None` item group with a `CopyToOutputDirectory` set.\r\n\r\nI'm trying to copy files in a hierarchical structure in the output of my application. Those files are stored in a library project that is referenced by my main application. I need the files to be copied in my application output directory (as well as the library's output directory, in case it's used somewhere else.\r\n\r\nThis whole hierarchy that I need to copy is in a relatively complex sub-folder structure, which I don't want copied. For example, let's say I have the following structure:\r\n```\r\n/\r\n- Resources/\r\n     - Images/\r\n          - Users/\r\n               - Official/\r\n                    - Balloon/\r\n                        - image1.png\r\n                        - image2.png\r\n                        - image3.png\r\n                    - House/\r\n                        - image1.png\r\n                        - image2.png\r\n                        - image3.png\r\n```\r\nI would like to have, in the output directory of my application and my library something like that:\r\n```\r\n/\r\n- Images/\r\n    - Balloon/\r\n        - image1.png\r\n        - image2.png\r\n        - image3.png\r\n    - House/\r\n        - image1.png\r\n        - image2.png\r\n        - image3.png\r\n```\r\n\r\n I have tried using the following.\r\n\r\n```xml\r\n  <ItemGroup>\r\n    <None Update=\"Resources\\Images\\Users\\Official\\**\\*.*\">\r\n      <Link>Images\\%(RecursiveDir)%(Filename)%(Extension)</Link>\r\n      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>\r\n    </None>\r\n  </ItemGroup>\r\n```\r\n\r\nThe files are correctly copied to both the library's output directory and the application's output directory, but the structure is not what I expected:\r\n\r\n```\r\n/\r\n- Images/\r\n     - Resources/\r\n          - Images/\r\n               - Users/\r\n                    - Official/\r\n                         - Balloon/\r\n                             - image1.png\r\n                             - image2.png\r\n                             - image3.png\r\n                         - House/\r\n                             - image1.png\r\n                             - image2.png\r\n                             - image3.png\r\n```\r\n\r\nNow, if I use a `Copy` task, like that\r\n\r\n```xml\r\n  <ItemGroup>\r\n    <OfficialImages Include=\"Resources\\Images\\Users\\Official\\**\\*.*\">\r\n      <InProject>false</InProject>\r\n    </OfficialImages>\r\n  </ItemGroup>\r\n\r\n  <Target Name=\"CopyOfficalImages\" AfterTargets=\"AfterBuild\">\r\n    <Copy SourceFiles=\"@(OfficialImages)\" \r\n          DestinationFiles=\"@(OfficialImages->'$(OutDir)\\Images\\%(RecursiveDir)%(Filename)%(Extension)')\" \r\n          SkipUnchangedFiles=\"true\" \r\n          OverwriteReadOnlyFiles=\"true\" \r\n          Retries=\"3\" \r\n          RetryDelayMilliseconds=\"300\" />\r\n  </Target>\r\n```\r\n\r\nI get the output that I expected, but it doesn't get copied to the output of my application. Which is a normal behavior for the copy task if I'm not mistaken.\r\n\r\nI'm really wondering why, in the first case, the `%(RecursiveDir)` variable uses the whole hierarchy from the solution directory, and in the other only takes the path from the recursive tags.\r\n\r\n### Environment data\r\n`msbuild /version` output: 15.6.85.37198\r\n\r\nOS info: Windows 7 SP1\r\n\r\nIf applicable, version of the tool that invokes MSBuild (Visual Studio, dotnet CLI, etc): Visual Studio 2017 15.6.5\r\n",
  "state": "CLOSED",
  "createdAt": "2018-05-02T06:42:29Z",
  "updatedAt": "2024-02-21T17:13:21Z",
  "closedAt": "2018-05-02T10:07:32Z",
  "author": {
    "login": "Gimly"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Well, I found a solution, looks like the issue was in that I used `Update` instead of `Include` when using `None`. If I change to `Include`, it's working as expected. I don't know why I had update in the first place, probably a copy-paste.\r\n\r\nSorry for the false issue.\r\n",
        "createdAt": "2018-05-02T10:07:32Z",
        "updatedAt": "2018-05-02T10:07:32Z",
        "author": {
          "login": "Gimly"
        }
      }
    ]
  }
}