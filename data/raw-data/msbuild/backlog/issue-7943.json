{
  "number": 7943,
  "title": "MSBuild detects wrong processor count on Windows when debugging processor groups",
  "body": "### Issue Description\r\n\r\nMSBuild detects the wrong processor count on Windows when debugging processor groups and the bug was introduced with PR: https://github.com/dotnet/msbuild/pull/5625\r\n\r\n### Analysis\r\n\r\nThe comments in PR 5625 mentioned various ongoing issues testing processor group support on Windows due to the lack of hardware:\r\n> I don't have a machine with > 32 cores to actually test this.\r\n> I'm trying to pull some strings internally to borrow a machine big enough to test it on\r\n\r\nThe lack of hardware should never have been an issue. Windows has special boot parameters to enable virtual processor groups specially designed for developers to write and debug processor group support on Windows without requiring physical hardware with >64 processors. \ud83d\ude0b\r\n\r\nThe MSDN documentation is aimed at driver developers however the same steps are required for testing and debugging usermode applications: https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/boot-parameters-to-test-drivers-for-multiple-processor-group-support\r\n\r\nFor example:\r\n`bcdedit.exe /set groupsize 2`\r\n\r\nIf you have 16 processors this will create 8 processor groups with 2 processors in each group and simulate a machine with > 64 processors. Usermode functions such as GetSystemInfo (and the .NET framework which is not group aware) will now only report 2 processors and this includes MSBuild because of two issues:\r\n\r\n1) This check for `>= 32` is incompatible with the groupsize boot paramater and must be removed:\r\nhttps://github.com/dotnet/msbuild/blob/65c50fb73faefec0ef2ce8256b802f50cc8236f0/src/Framework/NativeMethods.cs#L516\r\n\r\n2) MSBuild is using a custom enumerator with GetLogicalProcessorInformationEx which is incorrect:\r\nhttps://github.com/dotnet/msbuild/blob/65c50fb73faefec0ef2ce8256b802f50cc8236f0/src/Framework/NativeMethods.cs#L538-L575\r\n\r\nStarting Windows 7 usermode applications are supposed to call [GetActiveProcessorCount](https://docs.microsoft.com/en-us/windows/win32/api/winbase/nf-winbase-getactiveprocessorcount) and kernel drivers [KeQueryActiveProcessorCountEx](https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/wdm/nf-wdm-kequeryactiveprocessorcountex)\r\n\r\nThe `GetLogicalCoreCountOnWindows` function MSBuild is using should be removed and all the code be replaced with a single line: \r\n```csharp\r\nint numberOfProcessors = GetActiveProcessorCount(ALL_PROCESSOR_GROUPS);\r\n```\r\nTypedefs:\r\n```csharp\r\nconst ushort ALL_PROCESSOR_GROUPS = 0xFFFF;\r\n\r\n[DllImport(\"kernel32.dll\")]\r\npublic static extern int GetActiveProcessorCount(ushort GroupNumber);\r\n```\r\n\r\n### Steps to Reproduce\r\n1) Open command prompt as Administrator\r\n2) Execute `bcdedit.exe /set groupsize 2`\r\n3) Reboot\r\n4) MsBuild is now limited to 2 processors (on a 16 processor machine).\r\n\r\n### Expected Behavior\r\nMSBuild support for multiple processor groups.\r\n\r\n### Actual Behavior\r\nMSBuild is limited to 2 processors making testing/debugging applications significantly slower.",
  "state": "CLOSED",
  "createdAt": "2022-09-05T17:26:24Z",
  "updatedAt": "2024-02-21T14:07:45Z",
  "closedAt": "2022-10-07T14:59:15Z",
  "author": {
    "login": "dmex"
  },
  "labels": [
    "bug",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Wow. Awesome write up! Are you going to put in a PR?",
        "createdAt": "2022-09-05T22:21:19Z",
        "updatedAt": "2022-09-05T22:21:19Z",
        "author": {
          "login": "elachlan"
        }
      },
      {
        "body": "@elachlan I've created PR #7945",
        "createdAt": "2022-09-05T22:55:24Z",
        "updatedAt": "2022-09-05T22:55:24Z",
        "author": {
          "login": "dmex"
        }
      },
      {
        "body": "\ud83d\udc4d ",
        "createdAt": "2022-10-17T20:28:19Z",
        "updatedAt": "2022-10-17T20:28:19Z",
        "author": {
          "login": "dmex"
        }
      }
    ]
  }
}