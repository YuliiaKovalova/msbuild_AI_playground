{
  "number": 2195,
  "title": "[Question] Can package references be referenced within a Task when running with dotnet build?",
  "body": "Is it possible to use package references like Microsoft.CodeAnalysis within a Microsoft Build Task running with dotnet build?\r\n\r\nI'm using `netstandard1.5` for the task library and the following package references:\r\n\r\n    <PackageReference Include=\"Microsoft.Build\" Version=\"15.3.0-preview-000117-01\" />\r\n    <PackageReference Include=\"Microsoft.Build.Utilities.Core\" Version=\"15.3.0-preview-000117-01\" />\r\n    <PackageReference Include=\"Microsoft.CodeAnalysis.Common\" Version=\"2.2.0\" />\r\n\r\nThe consuming project is a `netcoreapp1.1`. The task fails with an\r\n\r\n```The \"MyTask\" task failed unexpectedly.\r\nSystem.IO.FileNotFoundException: Could not load file or assembly 'Microsoft.CodeAnalysis, Version=2.2.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of its dependencies. The system cannot find the file specified.\r\nFile name: 'Microsoft.CodeAnalysis, Version=2.2.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'\r\n```\r\n\r\nexception.\r\n\r\nWhen trying to load the package reference via `AssemblyLoadContext.Default.LoadFromAssemblyPath` I get\r\n\r\n```Could not load file or assembly 'Microsoft.CodeAnalysis, Version=2.2.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.```\r\n\r\nwithout any additional information. This does not work when running in a .net core console application either. I tried a second (simpler) package, which can be loaded via `LoadFromAssemblyPath` in a .net core console application, but still it does not work when running as dotnet build Task.\r\n\r\nBoth assemblies can be loaded when running in classical net4.6 with `Assembly.LoadFile` in a console application and when running as Task though.",
  "state": "CLOSED",
  "createdAt": "2017-06-08T11:11:49Z",
  "updatedAt": "2024-02-21T17:18:36Z",
  "closedAt": "2017-06-12T16:17:25Z",
  "author": {
    "login": "Dresel"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "No, this isn't currently possible. Nothing can read the dependencies of the DLL delivers the task to correlate them with the dependencies of MSBuild itself and have the loader figure out what to load.\r\n\r\nWhat you _can_ do is redistribute the (closure of) dependencies of your task assembly in the same folder as the task, and MSBuild's loader will find them there.\r\n\r\nI'm going to close this in favor of https://github.com/Microsoft/msbuild/issues/1756 and whatever eventual design comes out of that.",
        "createdAt": "2017-06-12T16:17:25Z",
        "updatedAt": "2017-06-12T16:17:25Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}