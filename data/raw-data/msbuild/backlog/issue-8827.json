{
  "number": 8827,
  "title": "[BinFmt] Identify usages of GenerateResource task",
  "body": "### Background \r\n #6215\r\n This subitem is focused on [GenerateResource task](https://github.com/dotnet/msbuild/blob/310891fbe20859c29ff59506062ecd79e2ab987e/src/Tasks/GenerateResource.cs#L56)\r\n Here we dont need to know exact usages - just gain some idea about magnitude and patterns of usage\r\nGenerateResouce Task uses BinaryFormatter for `application/x-microsoft.net.object.binary.base64` mime type - so we are mainly interested in that one\r\n\r\n### Expected output\r\n* List of internal repos that use `GenerateResource` task + some sample usages\r\n* Examples of external GH repos (with recent activity) using `GenerateResource` task\r\n* Count of external repos using `GenerateResource` task, idealy categorized by recent usage and # of commits, or some relativelu useful metric giving idea of how much/few it's being used (especialy for Core).\r\n\r\n\r\n### TODO\r\n\r\nwhat about resgen.exe?",
  "state": "CLOSED",
  "createdAt": "2023-06-01T15:44:34Z",
  "updatedAt": "2024-02-21T16:59:10Z",
  "closedAt": "2023-06-06T11:05:21Z",
  "author": {
    "login": "JanKrivanek"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "ladipro"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "FYI @Forgind - the search might be simplified via simply adding an implicit `GenerateResourceWarnOnBinaryFormatterUse` parameter with `true` value (somewhere into common targets? the FullFW version of MSBuild should be likely skipped)",
        "createdAt": "2023-06-02T07:44:15Z",
        "updatedAt": "2023-06-02T07:44:15Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "I'm using the GenerateResource task in a few projects, via the StronglyTypedClassName etc. metadata on EmbeddedResource items.  These EmbeddedResource items are defined in shared projects (\\*.shproj, \\*.projitems), and C# source is generated in each consuming project.  I don't remember exactly why I did it this way -- perhaps there was some problem with Visual Studio not updating \\*.projitems correctly if the C# file was generated at design time.\r\n\r\nIn these \\*.resx files, all resources are strings only, but some of them read files at build time via System.Resources.ResXFileRef.",
        "createdAt": "2023-06-02T08:21:23Z",
        "updatedAt": "2023-06-02T08:24:45Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "To a first approximation, the set of \"repos that use GenerateResource\" is the same as the set of \"repos that use .NET\". Search for `.resx` files or `EmbeddedResource` items to find most uses.\r\n\r\nFew call `GenerateResource` directly; generally it's used through common.targets\r\n\r\nhttps://github.com/dotnet/msbuild/blob/9604d20e7b556ca53a519a82680d131c2aa71bc6/src/Tasks/Microsoft.Common.CurrentVersion.targets#L3293-L3295",
        "createdAt": "2023-06-05T14:57:56Z",
        "updatedAt": "2023-06-05T14:57:56Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Based on offlien discussion with @rainersigwald - `GenerateResource` task targetting NET actually currently doesn't use `BinaryFormatter` at all (it just transfers the base64 encoded data, with de-/en-coding just the binary format, but performs no de/serialization of the actual data in the blobs - this happens only during generating .resx files and then during runtime when reading embedded resources - both outside of the scope of msbuild)",
        "createdAt": "2023-06-05T16:50:53Z",
        "updatedAt": "2023-06-05T16:50:53Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "Confirming the findings above. The one direct use of `BinaryFormatter` is basically an optimization to see if input resources should be read in another AppDomain. Then the task indirectly uses `BinaryFormatter` when it deserializes input resources and re-serializes them to its output. All of this is ifdefed out in .NET (Core) MSBuild so we're safe for now.\r\n\r\nThe resource story end-to-end is out of scope, the task is just a conversion tool.",
        "createdAt": "2023-06-06T11:05:21Z",
        "updatedAt": "2023-06-06T11:05:21Z",
        "author": {
          "login": "ladipro"
        }
      }
    ]
  }
}