{
  "number": 3787,
  "title": "Multi-targeting: Error CS2012 sometimes when AppendTargetFrameworkToOutputPath is set to false",
  "body": "I am using Visual Studio 15.8.5 and I have a multi-target project setup that sets the output path based on the target and build configuration (like `output_dir\\<Target>\\<Configuration>`). Since I want the target as the parent folder I need to set `AppendTargetFrameworkToOutputPath` to false. However this setting also causes the target framework part not to be appended to the `obj` folder resulting in CS2012 sometimes due to race condition.\r\n\r\n### Steps to reproduce\r\n\r\nHere is a sample project file to reproduce this issue:\r\n```XML\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFrameworks>net40;netstandard2.0</TargetFrameworks>\r\n    <AppendTargetFrameworkToOutputPath>false</AppendTargetFrameworkToOutputPath>\r\n  </PropertyGroup>\r\n\t\r\n  <PropertyGroup Condition=\" '$(Configuration)|$(Platform)' == 'R_U_Debug|AnyCPU' \">\r\n    <OutputPath Condition=\" '$(TargetFramework)' =='net40' \">..\\..\\Builds\\net40\\R_U_Debug\\</OutputPath>\r\n    <OutputPath Condition=\" '$(TargetFramework)' =='netstandard2.0' \">..\\..\\Builds\\netstandard2.0\\R_U_Debug\\</OutputPath>\r\n  </PropertyGroup>\r\n\r\n  <PropertyGroup Condition=\" '$(Configuration)|$(Platform)' == 'R_U_Release|AnyCPU' \">\r\n    <OutputPath Condition=\" '$(TargetFramework)' =='net40' \">..\\..\\Builds\\net40\\R_U_Release\\</OutputPath>\r\n    <OutputPath Condition=\" '$(TargetFramework)' =='netstandard2.0' \">..\\..\\Builds\\netstandard2.0\\R_U_Release\\</OutputPath>\r\n  </PropertyGroup>\r\n</Project>\r\n```\r\n### Actual behavior\r\nHere is the error I get sometimes when I try to build:\r\n> Error CS2012 Cannot open 'D:\\Work\\MyProject\\obj\\R_U_Debug\\MyProject.dll' for writing -- 'The process cannot access the file 'D:\\Work\\MyProject\\obj\\R_U_Debug\\MyProject.dll' because it is being used by another process.'\r\n\r\n### Expected behavior\r\nI tried setting a separate obj folder using the `BaseIntermediateOuputPath` property but this didn't take effect. \r\n```XML\r\n<BaseIntermediateOuputPath Condition=\" '$(TargetFramework)' =='net40' \">obj\\net40</BaseIntermediateOuputPath>\r\n<BaseIntermediateOuputPath Condition=\" '$(TargetFramework)' =='netstandard2.0' \">obj\\netstandard2.0</BaseIntermediateOuputPath>\r\n```\r\nPerhaps the `AppendTargetFrameworkToOutputPath` property should not be apply to the intermediate obj folders.\r\n",
  "state": "OPEN",
  "createdAt": "2018-09-25T07:21:08Z",
  "updatedAt": "2024-02-21T16:32:53Z",
  "closedAt": null,
  "author": {
    "login": "sansjunk"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "I see this too using latest VS 15.9.11. Random file lock errors like above, unrequired rebuilds, and/or final dll for one of the target framworks missing at the end (has been deleted by the re-build).",
        "createdAt": "2019-04-11T08:15:02Z",
        "updatedAt": "2019-04-11T08:15:02Z",
        "author": {
          "login": "Gav-Brown"
        }
      },
      {
        "body": "I can't believe how much time I wasted on this before figuring out why my builds would randomly fail, and then how to fix it, and discovering how few people have run into the same thing\r\n\r\nIt seems the key issue here is that *both* the `OutputPath` and `IntermediateOutputPath` (for the bin and obj folders respectively) [are not set](https://github.com/dotnet/sdk/blob/02c7f4512870c8a3f34c8edb0661f9d14f4a5593/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.DefaultOutputPaths.targets#L134) when `AppendTargetFrameworkToOutputPath` is `false`\r\n\r\nAs such, in order to work around this you can simply define `IntermediateOutputPath` yourself in conjunction with disabling `AppendTargetFrameworkToOutputPath`. This will prevent `IntermediateOutputPath` from then being defined later on, allowing you to build multiple target frameworks at once, while specifying your own custom output directory (which likely still contains the `$(TargetFramework)`, but at a different position within the folder path).\r\n\r\n```xml\r\n<AppendTargetFrameworkToOutputPath>false</AppendTargetFrameworkToOutputPath>\r\n<IntermediateOutputPath>$(BaseIntermediateOutputPath)\\$(Configuration)\\$(TargetFramework.ToLowerInvariant())\\</IntermediateOutputPath>\r\n```\r\n\r\nNote that at the point you would likely define this in your csproj, `IntermediateOutputPath` hasn't actually been defined yet; as such we have to manually spell out the default definition `IntermediateOutputPath` would use (`obj\\<configuration>`) followed by the target framework that should be appended",
        "createdAt": "2019-07-05T13:54:30Z",
        "updatedAt": "2023-08-10T01:46:02Z",
        "author": {
          "login": "lordmilko"
        }
      }
    ]
  }
}