{
  "number": 6543,
  "title": "Move the default location for ref assemblies to obj (from bin)",
  "body": "Today, ref assemblies are copied into the `bin/ref` folder by default. However, this is a sometimes confusing and unexpected output that is primarily used for internal build-performance reasons.\r\n\r\nFor Visual Studio 2022 we'd like to move this to a folder under `obj`.\r\n\r\nThe code change is to update this:\r\n\r\nhttps://github.com/dotnet/msbuild/blob/18a8ddcb5bdfa16357ae2350b09cafcbc3550f13/src/Tasks/Microsoft.Common.CurrentVersion.targets#L326\r\n\r\nThe compat impact is less clear; some customers may have projects that expect the presence in `ref`. We could provide an opt-out (and/or put this under a changewave) but we'd like to hear from anyone who objects to this plan.",
  "state": "CLOSED",
  "createdAt": "2021-06-09T16:12:39Z",
  "updatedAt": "2024-02-21T17:01:22Z",
  "closedAt": "2021-11-30T22:49:07Z",
  "author": {
    "login": "rainersigwald"
  },
  "labels": [
    "Area: Common Targets",
    "Breaking Change",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "VS 17.1"
  },
  "comments": {
    "nodes": [
      {
        "body": "[Microsoft-internal link to discussion](https://teams.microsoft.com/l/message/19:3212bf033f4c4b5198643a04fa1048fa@thread.skype/1618927758475?tenantId=72f988bf-86f1-41af-91ab-2d7cd011db47&groupId=4ba7372f-2799-4677-89f0-7a1aaea3706c&parentMessageId=1618884478859&teamName=.NET%20Developer%20Experience&channelName=MSBuild&createdTime=1618927758475) where we were unable to remember any specific reason that it should be in `bin`. .",
        "createdAt": "2021-06-09T16:17:20Z",
        "updatedAt": "2021-06-09T16:17:20Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Ended up finding a number of other issues discussing `ref` appearing in the `bin` directory. Think most will end up being dupes but want to let you decide:\r\n\r\n- https://github.com/dotnet/sdk/issues/16193\r\n- https://github.com/dotnet/msbuild/issues/6543\r\n- https://github.com/dotnet/sdk/issues/16759\r\n- https://github.com/dotnet/sdk/issues/6310\r\n- https://github.com/dotnet/sdk/issues/16197\r\n",
        "createdAt": "2021-06-09T16:19:41Z",
        "updatedAt": "2021-06-09T18:04:57Z",
        "author": {
          "login": "jaredpar"
        }
      },
      {
        "body": ">  We could provide an opt-out (and/or put this under a changewave) but we'd like to hear from anyone who objects to this plan.\r\n\r\nCan't any customer that prefers the current location just override `$(TargetRefPath)` to match the current pre-Dev17 logic? ",
        "createdAt": "2021-06-09T18:07:12Z",
        "updatedAt": "2021-06-09T18:07:12Z",
        "author": {
          "login": "jaredpar"
        }
      },
      {
        "body": "> Can't any customer that prefers the current location just override `$(TargetRefPath)` to match the current pre-Dev17 logic?\r\n\r\nYes, but they'd have to discover it. I think that's likely good enough personally but I've been wrong before . . .",
        "createdAt": "2021-06-09T18:32:42Z",
        "updatedAt": "2021-06-09T18:32:42Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I'm not okay with `obj` since, reference assembly is also the final output of a build. Much as it would be confusing for some people that we would have it in `bin` it would also be more confusing if it's under `obj`.\n\nThis is also why I proposed a root `build` folder, where we can keep Assets which doesn't come under `bin` or `obj`. This way, we could have `build\\ref` along side `build\\bin`, `build\\obj` and `build\\ext` (NuGet, Paket and other MSBuild extensions).",
        "createdAt": "2021-06-15T05:06:35Z",
        "updatedAt": "2021-07-15T00:34:26Z",
        "author": {
          "login": "Nirmal4G"
        }
      },
      {
        "body": "> I'm not okay with `obj` since, reference assembly is also the final output of a build.\r\n\r\nIs it? It is generally an internal implementation detail of intermediate assemblies in the build. It's not generally shipped to customers, for example. In the cases where it is, you can opt to specify that it go in your own bin folder.",
        "createdAt": "2021-06-15T15:45:08Z",
        "updatedAt": "2021-06-15T15:45:08Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "True but I think of them as a stripped down version of the main Assembly, much like .NET Framework reference assemblies!\n\nI'm not okay with either way, `bin` or `obj` but having it in `bin\\ref` for final output and `obj\\ref` for intermediate output made sense. This proposal takes away that intuition.\n\n_I do get that some do copy/move all assemblies by wildcard and that might be confusing but producing reference assemblies is not a novice feature. So, in that perspective, we can keep it as it is or we could introduce `build/publish` folders early on as an opt-in feature._\n\n",
        "createdAt": "2021-06-15T16:39:25Z",
        "updatedAt": "2021-06-15T16:39:25Z",
        "author": {
          "login": "Nirmal4G"
        }
      },
      {
        "body": "This was reverted so reopening. Blocked by IDE support (dotnet/project-system#7444 and dotnet/roslyn#55244).",
        "createdAt": "2021-08-02T16:41:55Z",
        "updatedAt": "2021-08-02T16:41:55Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}