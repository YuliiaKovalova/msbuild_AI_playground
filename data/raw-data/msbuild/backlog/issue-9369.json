{
  "number": 9369,
  "title": "[Feature Request]:  ResGen.exe should have an option to generate partial classes",
  "body": "### Summary\n\nThere should be a way for `ResXFileCodeGenerator`/`PublicResXFileCodeGenerator` (Resgen.exe) to generate a class with a `partial` modifier/keyword.\r\n\n\n### Background and Motivation\n\nCurrently when generating Resource class the partial modifier is not included and there is no option to include the partial modifier when generating a class from the `.resx` files.\r\nThis prevents one from easily extending the functionality.\r\n\r\nI think this is the same as dotnet/core#2943 which appears to have been closed as it was filed in the wrong repo.\n\n### Proposed Feature\n\nAdd a `/partialClass` cli-flag similar to the existing `/publicClass` cli-flag,\r\nsetting this flag should cause the `partial` keyword to be included in the generated class declaration.\r\nAdd variant of `ResXFileCodeGenerator` and `PublicResXFileCodeGenerator` like `PartialResXFileCodeGenerator`and `PublicpartialResXFileCodeGenerator`.\n\n### Alternative Designs\n\n_No response_",
  "state": "OPEN",
  "createdAt": "2023-10-30T09:44:46Z",
  "updatedAt": "2025-03-19T11:21:26Z",
  "closedAt": null,
  "author": {
    "login": "Skgland"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "backlog",
    "Feature Request",
    "Area: Task: GenerateResource",
    "triaged"
  ],
  "comments": {
    "nodes": [
      {
        "body": "AFAIK, `ResGen.exe` is not built from this <https://github.com/dotnet/msbuild/> repository and is instead a separate implementation.  New features for `ResGen.exe`, or new values for the `Generator` metadata, would be better requested in <https://developercommunity.visualstudio.com/>.\r\n\r\nThis repository defines the `GenerateResource` task, which can either run `ResGen.exe` or do similar things on its own.  For that one, a `bool Partial` task parameter could perhaps be added.  The task generates the source code via CodeDom, which already defines the [System.CodeDom.CodeTypeDeclaration.IsPartial](https://learn.microsoft.com/dotnet/api/system.codedom.codetypedeclaration.ispartial?view=netframework-4.8.1) property for this purpose.",
        "createdAt": "2023-10-30T11:08:10Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "Submitted https://developercommunity.visualstudio.com/t/Add-an-option-for-ResGenexeResXFileCod/10503224",
        "createdAt": "2023-10-30T11:38:06Z",
        "author": {
          "login": "Skgland"
        }
      },
      {
        "body": "> AFAIK, `ResGen.exe` is not built from this https://github.com/dotnet/msbuild/ repository and is instead a separate implementation. New features for `ResGen.exe`, or new values for the `Generator` metadata, would be better requested in https://developercommunity.visualstudio.com/.\r\n>\r\n\r\nThanks for the response, as mentioned in my preceding comment I have now submitted a feature request over at <https://developercommunity.visualstudio.com/>.\r\n\r\nI found finding the right place to submit this a bit disorienting/non-obvious and thought I had found the right place after seeing [src/Tasks/ResGen](https://github.com/dotnet/msbuild/blob/d3fa6693db77b6aad33ac934ca0a87f852f4cdf2/src/Tasks/ResGen.cs)\r\nespecially as it appeared to contain the cli help information\r\n<https://github.com/dotnet/msbuild/blob/d3fa6693db77b6aad33ac934ca0a87f852f4cdf2/src/Tasks/ResGen.cs#L38-L91>.\r\n\r\n>\r\n> This repository defines the `GenerateResource` task, which can either run `ResGen.exe` or do similar things on its own. For that one, a `bool Partial` task parameter could perhaps be added. The task generates the source code via CodeDom, which already defines the [System.CodeDom.CodeTypeDeclaration.IsPartial](https://learn.microsoft.com/dotnet/api/system.codedom.codetypedeclaration.ispartial?view=netframework-4.8.1) property for this purpose.\r\n>\r\n\r\nThat sounds like a good idea to me.\r\n\r\nThough now I am questioning whether that would even help me as I am not sure whether this project is involved at all in my case.\r\n\r\nI think I have an sdk-style project with the following definition (names changed):\r\n\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <!-- snipp -->\r\n  <ItemGroup>\r\n    <!-- snipp -->\r\n    <EmbeddedResource Update=\"Namespace\\Filename.resx\">\r\n      <Generator>PublicResXFileCodeGenerator</Generator>\r\n      <SubType>Designer</SubType>\r\n      <LastGenOutput>Filename.Designer.cs</LastGenOutput>\r\n    </EmbeddedResource>\r\n    <!-- snipp -->\r\n  </ItemGroup>\r\n  <!-- snipp -->\r\n</Project>\r\n```\r\n\r\n",
        "createdAt": "2023-10-30T12:13:04Z",
        "author": {
          "login": "Skgland"
        }
      },
      {
        "body": "I guess the ResGen.exe help information was added as a comment to explain how the GenerateResource task generates the arguments for ResGen.exe.\r\n\r\nIn your project, Filename.Designer.cs is generated at design time, i.e. when you edit Filename.resx and save it in Visual Studio.  I don't know whether Visual Studio uses the GenerateResource task in that situation, runs ResGen.exe itself, or generates the source code in some other way.\r\n\r\nIf you want to make MSBuild generate the C# code at build time instead, there is some advice in <https://github.com/dotnet/msbuild/issues/4751>.",
        "createdAt": "2023-10-30T12:45:59Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "> I guess the ResGen.exe help information was added as a comment to explain how the GenerateResource task generates the arguments for ResGen.exe.\r\n\r\nThat makes sense.\r\n\r\n> \r\n> In your project, Filename.Designer.cs is generated at design time, i.e. when you edit Filename.resx and save it in Visual Studio. I don't know whether Visual Studio uses the GenerateResource task in that situation, runs ResGen.exe itself, or generates the source code in some other way.\r\n> \r\n\r\nI don't know either which is part of how I ended up here, as I thought this looked relevant.\r\n\r\n> If you want to make MSBuild generate the C# code at build time instead, there is some advice in #4751.\r\n\r\nI actually don't care when and how the file is generated, but I would need an option to generate it with the `partial` modifies/keyword which as far as I can tell that workaround wouldn't fix,\r\nleaving me in basically the same situation as now.",
        "createdAt": "2023-10-30T12:55:19Z",
        "author": {
          "login": "Skgland"
        }
      },
      {
        "body": "The source in this repo originated as a fork of the `resgen.exe` source, long ago. I wouldn't expect `resgen.exe` itself to be updated, since it's part of .NET Framework which has a very high bar for feature additions. But I think this is a reasonable feature request for the MSBuild task.\r\n\r\nHowever, `PublicResXFileCodeGenerator` does mean that you're not using the MSBuild task either, so if you want to keep that process (Visual Studio itself updates the file on resx modification, instead of generating the file at build time), you need a feature in the Visual Studio project system that maintains those generators. I routed the feedback issue you filed to the appropriate team.\r\n\r\n(It is not great that there are so many slightly-different options to solve this problem.)",
        "createdAt": "2023-10-30T13:45:27Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Team triage: we could consider emitting it as `partial` _always_.",
        "createdAt": "2023-11-01T15:43:47Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Could such a change break a project with a low LangVersion?",
        "createdAt": "2023-11-01T18:03:11Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "Oh yeah that's a great point. Looks like `partial` types were introduced in C# 2, which should have pretty broad adoption but that's definitely something to think about.",
        "createdAt": "2023-11-01T18:10:08Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "For MSBuild on .NET Framework, there's also the risk that someone has registered a CodeDom language provider that does not support partial types at all.  The task should be able to detect that via the CodeDom API though.  For MSBuild on .NET, I'm not sure whether custom languages can be registered at all.",
        "createdAt": "2023-11-01T18:35:34Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "Is there any movement here? As a small use case, I would like to add  [ExcludeFromCodeCoverage] to generated strongly typed resource classes.\n\nH.M.\n ",
        "createdAt": "2025-03-19T11:21:25Z",
        "author": {
          "login": "hmmueller"
        }
      }
    ]
  }
}