{
  "number": 2803,
  "title": "NuGet-based SDK resolver design spec",
  "body": "# Overview\r\n\r\nAt the moment, there are two SDK resolvers, both of which assume that the SDKs are on disk.  It would be very useful to have SDKs resolved as NuGet packages as well which would allow third party SDKs to be acquired.\r\n\r\nRelated issues:\r\n* Adding a custom SDK resolver #2278 \r\n* Proposal: implement a SdkResolver for NuGet packages [#5220](https://github.com/NuGet/Home/issues/5220)\r\n\r\n## User Experience\r\nUsers would have to opt into the new behavior by specifying a version of the SDK to use.  The resolver would never automatically get the latest because this would introduce very non-deterministic builds.\r\n\r\nUsers could control the version on a per-project basis:\r\n```xml\r\n<Project Sdk=\"My.Custom.Sdk/2.3.4\">\r\n  ...\r\n</Project>\r\n```\r\nIn this example, a NuGet package named `My.Custom.Sdk` version `2.3.4` would be retrieved and imported.\r\n\r\nIt would scale much better if users could specify a version per SDK for the whole repository.  They could do this in their `global.json`:\r\n\r\n```json\r\n{\r\n  \"sdk\" : {\r\n    \"version:\" \"1.0.0\"\r\n  },\r\n  \"msbuild-sdks\": {\r\n    \"My.Custom.Sdk\" : \"2.3.4\"\r\n  }\r\n}\r\n```\r\n\r\nThe `sdk` object controls which version of the .NET CLI to use and the `msbuild-sdks` object controls which versions of the MSBuild SDKs to use.  If the resolver detected that multiple versions of the same SDK are requested for the same build episode, a warning would be logged and the first version specified would be used.\r\n\r\n```\r\nMSB4528: warning: A version of the SDK 'My.Custom.Sdk' was already specified in 'D:\\Foo\\global.json'.  The version specified at 'C:\\Foo\\bar.csproj (1.7)' was ignored.\r\n```\r\n\r\nIn Visual Studio, users would see projects in a Loading state while SDKs are resolved.  Any errors that occur during acquisition would be reported in the Output window just like other package restore or build errors.  Projects would fail to load if an SDK could not be resolved.  Users could fix the issue and reload the project in Visual Studio.\r\n\r\n![image](https://user-images.githubusercontent.com/17556515/33953328-7c672580-dfe9-11e7-81e9-a06e6f190f96.png)\r\n\r\nSince the SDKs would be NuGet packages, the standard caching mechanisms and configurations would be in place.  Users would control which feeds to use and other NuGet settings in their `NuGet.config`.\r\n\r\n## Implementation\r\n\r\n- [x] 1. The current SdkResolvers infrastructure within MSBuild would need to be improved to support caching and parallelization.  Currently, the same SDK is resolved multiple times per build episode which can slow down evaluations.  #2847 \r\n- [x] 2. Add functionality so that resolvers can maintain state in between resolutions.  This would allow resolvers to only do expensive operations once per build. #2849\r\n- [x] 3. Implement a new logging message to indicate to callers when an SDK is done resolving.  This would allow UI bound threads to wait for the `Project` constructor to return and be notified when its ready.  We already added a `ProjectEvaluationFinished` event.\r\n- [ ] 4. NuGet needs to implement an API for requesting a package to be downloaded.  This work is tracked here: https://github.com/NuGet/Home/issues/5919\r\n- [ ] 5. We would make a new package type named `Sdk` or `MSBuildSdk`.  This could help differentiate the packages so that users don't attempt to add a `PackageReference` to something like `Microsoft.NET.Sdk`.  https://github.com/NuGet/Home/issues/6484\r\n- [x] 6. Develop an SDK resolver that uses the NuGet object model to download packages into the global package cache and return the path to them.  If the package was already on disk, it would not connect to any remote resource.  Enough information would be logged that a user could diagnose problems like package feeds being offline, packages not existing, etc. #2850\r\n  a. The resolver would ship with MSBuild so that the functionality is always available since it would be a core piece of project evaluation.  It could be a new assembly or be in `Microsoft.Build.dll`\r\n- [x] 7. Document how to take advantage of the resolver and how to make SDK packages.  This documentation should include the new `msbuild-sdks` section of `global.json`. https://github.com/MicrosoftDocs/visualstudio-docs/pull/487\r\n\r\nIf time permits, I'd like to add a command-line argument like `/resolver` which would allow users to specify custom resolvers to address #2278.  Repository owners could control resolvers with `Directory.Build.rsp`.  Resolvers would not be able to be specified in an import because resolvers load before projects are evaluated.\r\n  \r\n  ",
  "state": "CLOSED",
  "createdAt": "2017-12-13T18:34:18Z",
  "updatedAt": "2024-02-21T17:15:13Z",
  "closedAt": "2018-02-01T18:09:38Z",
  "author": {
    "login": "jeffkl"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "jeffkl"
      }
    ]
  },
  "milestone": {
    "title": "MSBuild 15.6"
  },
  "comments": {
    "nodes": [
      {
        "body": "FYI @nguerrera",
        "createdAt": "2017-12-13T18:35:10Z",
        "updatedAt": "2017-12-13T18:35:10Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "> . It would be very useful to have SDKs resolved as NuGet packages as well which would allow third party SDKs to be acquired.\r\n\r\nThink this design should encompass bringing in the .NET Core SDK via a NuGet package. Today it must be installed SxS with MSBuild and that creates a lot of friction in our initial build experience. Literally everything about the build except the .NET Core SDK can be bootstrapped. This is true even though the .NET Core SDK has supported xcopy distributions. \r\n\r\n\r\n",
        "createdAt": "2017-12-13T18:37:43Z",
        "updatedAt": "2017-12-13T18:37:43Z",
        "author": {
          "login": "jaredpar"
        }
      },
      {
        "body": "I'm working on 2 project systems, and I'd like to be able to create MSBuild SDKs which can be consumed by the project systems on both Visual Studio and the dotnet CLI. Installing the SDKs to the SDKs folder is not really easy (as it requires admin permission, and for the dotnet CLI it's even harder, as it would have to be installed on all the dotnet SDK installations). As one of the project systems is an extension for managed project systems, I use `PackageReference`, but it causes some problems on MEF parts import.\r\n\r\nI see that the milestone for this feature is MSBuild 15.6, is it planned for the 15.6 release?",
        "createdAt": "2018-01-07T17:31:47Z",
        "updatedAt": "2018-01-07T17:31:47Z",
        "author": {
          "login": "jp2masa"
        }
      },
      {
        "body": "Yes I'm working to get this out in the next release",
        "createdAt": "2018-01-08T17:17:37Z",
        "updatedAt": "2018-01-08T17:17:37Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "PR is out for a NuGet-based SDK resolver... #2850",
        "createdAt": "2018-01-10T06:37:28Z",
        "updatedAt": "2018-01-10T06:37:28Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "A few questions.\r\n\r\n1. What is the expected location for the Sdk.props/targets files inside a NuGet package?\r\n2. What takes precedence when setting the version of the NuGet SDK package to download, project or global.json? If version is absent from the `<Sdk>` element/attribute in a project, will the version in global.json be applied?\r\n4. `/target:Restore` supports using [MSBuild properties](https://docs.microsoft.com/en-us/nuget/schema/msbuild-targets#restore-target) for restore settings, such as adding feeds via `RestoreSources`, changing the NuGet cache folder with `RestorePackagesPath` or the location of the NuGet.config file.. This is something we must use because Nuget.config does not support conditionals. (Example in aspnet/Kestrel: [build/sources.props](https://github.com/aspnet/KestrelHttpServer/blob/e3b70db2785ef334805ed5d4a527256d3affb272/build/sources.props)). Can these MSBuild properties be used to control how an SDK package is downloaded by the NuGet resolver?",
        "createdAt": "2018-01-25T19:01:44Z",
        "updatedAt": "2018-01-25T19:01:44Z",
        "author": {
          "login": "natemcmaster"
        }
      },
      {
        "body": "@natemcmaster I've been working on documentation and some of the answers are in there: https://github.com/MicrosoftDocs/visualstudio-docs/blob/master/docs/msbuild/how-to-use-project-sdk.md\r\n\r\n> What is the expected location for the Sdk.props/targets files inside a NuGet package?\r\n\r\n`Sdk.props` and `Sdk.targets` must be in a root folder in the package named `Sdk`\r\n\r\n```\r\nMyPackage\r\n\u2514\u2500\u2500\u2500Sdk\r\n        Sdk.props\r\n        Sdk.targets\r\n```\r\n> What takes precedence when setting the version of the NuGet SDK package to download, project or global.json? If version is absent from the <Sdk> element/attribute in a project, will the version in global.json be applied?\r\n\r\nThe order is:\r\n1. Version specified in a project's XML\r\n2. Version specified in `global.json`\r\n\r\nIf no version exists in the project, then the one in `global.json` applies.  We recommend you only put versions in `global.json` just because its easier to maintain.\r\n\r\n> /target:Restore supports using MSBuild properties for restore settings, such as adding feeds via RestoreSources, changing the NuGet cache folder with RestorePackagesPath or the location of the NuGet.config file.. This is something we must use because Nuget.config does not support conditionals. (Example in aspnet/Kestrel: build/sources.props). Can these MSBuild properties be used to control how an SDK package is downloaded by the NuGet resolver?\r\n\r\nAt the moment, no properties are used for the SDK package restores.  When resolving an SDK, project properties haven't been read yet.  Global properties could be used but only generally come into play with command-line builds.  So for now you can only configure SDK restore with a `NuGet.config`.  We'll have to get feedback if that's not going to work and then come up with a solution if needed.\r\n",
        "createdAt": "2018-01-25T21:58:44Z",
        "updatedAt": "2018-01-25T21:58:44Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "> Sdk.props and Sdk.targets must be in a root folder in the package named Sdk\r\n\r\nnuget package folders are all camelCased. We shouldn't break that convention",
        "createdAt": "2018-01-25T22:09:16Z",
        "updatedAt": "2018-01-25T22:09:16Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "@nguerrera the folder name comes from what the SDK resolvers use:\r\n\r\nhttps://github.com/dotnet/cli/blob/master/src/Microsoft.DotNet.MSBuildSdkResolver/MSBuildSdkResolver.cs#L96\r\nhttps://github.com/Microsoft/msbuild/blob/master/src/NuGetSdkResolver/NuGetSdkResolver.cs#L207\r\nhttps://github.com/Microsoft/msbuild/blob/master/src/Build/BackEnd/Components/SdkResolution/DefaultSdkResolver.cs#L32\r\n\r\nInterestingly, the Sdk folder is the only one that's proper cased:\r\n\r\n```\r\nC:\\Program Files\\dotnet\\sdk\\15.5.0-preview-007044\\Sdks\\Microsoft.NET.Sdk\r\n\u251c\u2500\u2500\u2500build\r\n\u251c\u2500\u2500\u2500buildCrossTargeting\r\n\u251c\u2500\u2500\u2500Sdk\r\n\u2514\u2500\u2500\u2500tools\r\n```\r\n\r\nSo the ship might have already sailed.  The NuGetSdkResolver could use lower case names but I'm not sure if we can get that change in?  What do you think @AndyGerlicher ?  Maybe we should even use a different name in the NuGet packages like just `build` or `msbuildsdk`?",
        "createdAt": "2018-01-25T22:22:02Z",
        "updatedAt": "2018-01-25T22:22:02Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "Yeah, I told everyone the folder should be 'sdk'  when we first introduced these, but the feedback did not get applied. :(\r\n\r\nbuild already exists as a nuget concept for PackageName.targets/PackageName.props, but I think build/Sdk.props build/Sdk.targets would work.",
        "createdAt": "2018-01-25T22:34:35Z",
        "updatedAt": "2018-01-25T22:34:35Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "Maybe we just need to check both on case-sensitive file systems and document 'sdk' as the good way?",
        "createdAt": "2018-01-25T22:39:23Z",
        "updatedAt": "2018-01-25T22:39:23Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "@jeffkl thanks for clarifying.\r\n\r\nI totally get why, but it's too bad we can't use MSBuild settings to influence the restore inside the NuGet SDK resolver. NuGet.config isn't quite expressive enough, and MSBuild project evaluation has to come after SDKs are resolved. Looks like we'll have to go back to using a console tool to manipulate NuGet.config files before invoking MSBuild.",
        "createdAt": "2018-01-25T23:28:33Z",
        "updatedAt": "2018-01-25T23:28:33Z",
        "author": {
          "login": "natemcmaster"
        }
      },
      {
        "body": "@natemcmaster can you open an issue so I can track the request and investigate a solution?  ",
        "createdAt": "2018-01-25T23:38:11Z",
        "updatedAt": "2018-01-25T23:38:11Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "Ok. https://github.com/Microsoft/msbuild/issues/2914",
        "createdAt": "2018-01-25T23:46:27Z",
        "updatedAt": "2018-01-25T23:46:27Z",
        "author": {
          "login": "natemcmaster"
        }
      },
      {
        "body": "What is the ordering works w.r.t. multiple SDK's. First one goes outer (first props/last targets?) \r\n\r\nOne big issue I have with MSBuild.Sdk.Extras is that I want my props to be after the .NET SDK props and my targets before the .NET SDK targets.\r\n\r\nI wonder if this would do that: `<Project Sdk=\"Microsoft.NET.Sdk;MSBuild.Sdk.Extras/1.2.1\">`\r\n\r\nSecond, it would be really useful if NuGet could add/update these from both the project location and the `global.json` location. How are people supposed to know these packages exist (and get installed in the \"right\" way?) I imagine that people would use the NuGet UI or dotnet add gestures just like they do now. Except instead of a `PackageReference`, it'll add to the `Sdk=` attribute. Also for updates, how will the user know there's a newer version? Having it display and be updatable in the NuGet UI would be helpful.\r\n\r\nShould also show version's/updates for `global.json` entries since that is the recommended place to put these.\r\n\r\n",
        "createdAt": "2018-01-26T19:49:33Z",
        "updatedAt": "2018-01-26T19:49:33Z",
        "author": {
          "login": "clairernovotny"
        }
      },
      {
        "body": "> it would be really useful if NuGet could add/update these from both the project location and the global.json location. How are people supposed to know these packages exist (and get installed in the \"right\" way?) \r\n\r\n@onovotny IMO using packageType metadata is a good first step.  If we agree to do https://github.com/NuGet/Home/issues/6484, NuGet could use this to add tooling experiences for these types of packages (and by tooling I mean VS, nuget.org search, command-line experiences, etc).  I don't think any of those experiences are planned yet, though.",
        "createdAt": "2018-01-26T20:34:42Z",
        "updatedAt": "2018-01-26T20:34:42Z",
        "author": {
          "login": "natemcmaster"
        }
      },
      {
        "body": "so is this shipping already in current 15.6 previews?",
        "createdAt": "2018-01-31T16:42:03Z",
        "updatedAt": "2018-01-31T16:42:03Z",
        "author": {
          "login": "kzu"
        }
      },
      {
        "body": "@kzu yes it went out in 15.6 Preview 3 and we have some minor improvements coming to it in Preview 4.  I've started working on SDKs: https://github.com/Microsoft/MSBuildSdks",
        "createdAt": "2018-01-31T16:56:58Z",
        "updatedAt": "2018-01-31T16:56:58Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "@jeffkl What's the right compat story to support both usages? Just add an Sdks directory and the sdk props/targets?\r\n\r\nI'd like to migrate my MSBuild.Sdk.Extras to it, but I can't break existing users using as a PackageReference. \r\n\r\n",
        "createdAt": "2018-01-31T17:10:20Z",
        "updatedAt": "2018-01-31T17:10:20Z",
        "author": {
          "login": "clairernovotny"
        }
      },
      {
        "body": "@onovotny yes at the moment you can just add add an Sdk folder with `Sdk.props` and `Sdk.targets` which just imports `..\\build\\MSBuild.Sdk.Extras.props` and `..\\build\\MSBuild.Sdk.Extras.targets` (unless you need do so something more fancy).\r\n\r\nSDK packages don't honor dependencies yet and MSBuild considers them to be pretty much standalone when it adds the implicit imports.  We don't currently support an SDK depending on an SDK and having multiple imports in dependency order.  But I might work on that if the need arises.",
        "createdAt": "2018-01-31T17:14:14Z",
        "updatedAt": "2018-01-31T17:14:14Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "What happens if a sdk project file also has an sdk import? #inception",
        "createdAt": "2018-01-31T17:17:13Z",
        "updatedAt": "2018-01-31T17:17:45Z",
        "author": {
          "login": "dasMulli"
        }
      },
      {
        "body": "How about ordering? Like if mine needs to be after the .net sdk ones, so that I get their props and my targets run before the .net sdk targets?\r\n\r\nThis is partially a tooling issue; if/when NuGet installs it, how does it know to prepend/append. I need to be able to specify the .net sdk goes before mine.",
        "createdAt": "2018-01-31T17:18:04Z",
        "updatedAt": "2018-01-31T17:18:04Z",
        "author": {
          "login": "clairernovotny"
        }
      },
      {
        "body": "if that works (sdk import in sdk), @onovotny you could in theory make the extras package the single sdk reference and then add an `<Import Project=\"Sdk.targets\" Sdk=\"Microsoft.NET.Sdk\" />` in the middle of your targets just where you need it..",
        "createdAt": "2018-01-31T17:18:59Z",
        "updatedAt": "2018-01-31T17:18:59Z",
        "author": {
          "login": "dasMulli"
        }
      },
      {
        "body": "@onovotny I think this would work best:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <Sdk Name=\"MSBuild.Extras.Sdk\" Version=\"1.0.0\" />\r\n  <PropertyGroup>\r\n      <TargetFramework>net46</TargetFramework>\r\n  </PropertyGroup>\r\n</Project>\r\n```\r\n\r\nIn that case, the implicit imports should be like:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <Import Project=\"Sdk.props\" Sdk=\"Microsoft.NET.Sdk\" />\r\n  <Import Project=\"Sdk.props\" Sdk=\"MSBuild.Extras.Sdk\" Version=\"1.0.0\" />\r\n  <PropertyGroup>\r\n      <TargetFramework>net46</TargetFramework>\r\n  </PropertyGroup>\r\n  <Import Project=\"Sdk.targets\" Sdk=\"MSBuild.Extras.Sdk\" Version=\"1.0.0\" />\r\n  <Import Project=\"Sdk.targets\" Sdk=\"Microsoft.NET.Sdk\" />\r\n</Project>\r\n```\r\n\r\nIf you need to be imported after Microsoft.NET.Sdk, you probably just want to stick with `<PackageReference />`.  SDK packages are really meant to be the top-level set of imports or if you need to modify how `Restore` works (which can't be done via a PackageReference).",
        "createdAt": "2018-01-31T17:24:55Z",
        "updatedAt": "2018-01-31T17:24:55Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "@jeffkl I don't want to be a PackageReference, as I do want to control how restore works (and include additional metapackages, like UWP).\r\n\r\nAlso, PackageReference does not have the right extensibility points for the build imports, it pulls me in too late for the targets. I have to tell people to add this to the end of their project file to get in earlier:\r\n\r\n`<Import Project=\"$(MSBuildSDKExtrasTargets)\" Condition=\"Exists('$(MSBuildSDKExtrasTargets)')\" />`\r\n\r\nDoes it have to be `<Sdk Name=\"MSBuild.Extras.Sdk\" Version=\"1.0.0\" />` as a separate element for this? Why can't I say `<Project Sdk=\"Microsoft.NET.Sdk;MSBuild.Extras.Sdk\">` where the global.json defines the version? That seems much cleaner, I just need ordering guarantees, and it'd be nice if the NuGet tooling could know that's what should happen.\r\n",
        "createdAt": "2018-01-31T17:30:13Z",
        "updatedAt": "2018-01-31T17:30:44Z",
        "author": {
          "login": "clairernovotny"
        }
      },
      {
        "body": "Better yet would be `<Project Sdk=\"MSBuild.Extras.Sdk\">` where my SDK can do the right thing and declare that `Microsoft.NET.Sdk` has to be \"first\".",
        "createdAt": "2018-01-31T17:32:02Z",
        "updatedAt": "2018-01-31T17:32:02Z",
        "author": {
          "login": "clairernovotny"
        }
      },
      {
        "body": "As long as what you're referencing is not another NuGet-delivered SDK, @dasMulli's suggestion https://github.com/Microsoft/msbuild/issues/2803#issuecomment-362004691 should enable `<Project Sdk=\"MSBuild.Extras.Sdk\">`.",
        "createdAt": "2018-01-31T17:34:21Z",
        "updatedAt": "2018-01-31T17:34:21Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald Neat, that looks like it could work then, assuming that `Microsoft.NET.Sdk` will always be in-box.\r\n\r\nWhat happens if I do that but the user still has `<Project Sdk=\"Microsoft.NET.Sdk;MSBuild.Extras.Sdk\">`? What wins the import battle? Are there warnings of multiple imports? Just thinking though cases where people do the wrong thing.",
        "createdAt": "2018-01-31T17:37:08Z",
        "updatedAt": "2018-01-31T17:37:21Z",
        "author": {
          "login": "clairernovotny"
        }
      },
      {
        "body": "@onovotny you do not have to declare a version in the project, `global.json` is definitely the better way to go.  I just keep mentioning it to remind people that if no version is specified in the project or `global.json`, the NuGet SDK resolver won't do anything.\r\n\r\nYour suggestion of doing both SDKs as a list is probably what you want.  I tend to use the `<Sdk />` element if I want to reference and SDK in an import.\r\n\r\nSo this:\r\n\r\n```xml\r\n<Project Sdk=\"MSBuild.Extras.Sdk;Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n      <TargetFramework>net46</TargetFramework>\r\n  </PropertyGroup>\r\n</Project>\r\n```\r\n\r\nShould expand to this:\r\n```xml\r\n<Project>\r\n  <Import Project=\"Sdk.props\" Sdk=\"MSBuild.Extras.Sdk\" />\r\n  <Import Project=\"Sdk.props\" Sdk=\"Microsoft.NET.Sdk\" />\r\n  <PropertyGroup>\r\n      <TargetFramework>net46</TargetFramework>\r\n  </PropertyGroup>\r\n  <Import Project=\"Sdk.targets\" Sdk=\"Microsoft.NET.Sdk\" />\r\n  <Import Project=\"Sdk.targets\" Sdk=\"MSBuild.Extras.Sdk\" />\r\n</Project>\r\n```\r\n\r\nYou will be able to confirm the ordering in the preprocessor in 15.6 preview 4 (I had to fix a bug)",
        "createdAt": "2018-01-31T17:39:30Z",
        "updatedAt": "2018-01-31T17:39:30Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "> I just keep mentioning it to remind people that if no version is specified in the project or global.json, the NuGet SDK resolver won't do anything.\r\n\r\nIs an error raised then, since no matching SDK would be found? A silent error seems bad...?\r\n",
        "createdAt": "2018-01-31T17:41:06Z",
        "updatedAt": "2018-01-31T17:41:20Z",
        "author": {
          "login": "clairernovotny"
        }
      },
      {
        "body": "You get an error that the SDK could not be found.  The NuGet SDK resolver notices that no version is specified so MSBuild continues on in the list of resolvers:\r\n\r\n1. NuGet SDK resolver finds nothing because no version is specified\r\n2. .NET CLI resolver finds nothing because the SDK is not installed with .NET CLI\r\n3. MSBuild default resolver finds nothing because the SDK is not installed with MSBuild",
        "createdAt": "2018-01-31T17:42:59Z",
        "updatedAt": "2018-01-31T17:42:59Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "So what that leaves is what the best practice/recommendation should be?\r\n\r\nI would need `<Project Sdk=\"Microsoft.NET.Sdk;MSBuild.Extras.Sdk\">` as the ordering to work properly.\r\n\r\nDo I rely on that, or as @dasMulli suggested, put the `<Import Sdk=\"Microsoft.NET.Sdk\" ...` in my Sdk props/targets? That would enable `<Project Sdk=\"MSBuild.Extras.Sdk\">`, but I question what happens if people do `<Project Sdk=\"Microsoft.NET.Sdk;MSBuild.Extras.Sdk\">` anyway in that case (double import warning/error?)\r\n\r\nFinally, it's about the tooling doing the right thing with the package on install (correct order or replacement of the existing sdk item).\r\n",
        "createdAt": "2018-01-31T17:47:25Z",
        "updatedAt": "2018-01-31T17:47:25Z",
        "author": {
          "login": "clairernovotny"
        }
      },
      {
        "body": "In my opinion, having `MSBuild.Extras.Sdk` include an SDK reference to `Microsoft.NET.Sdk` would be a bad choice.  It limits what the project owner can do and having them specify `<Project Sdk=\"MSBuild.Extras.Sdk;Microsoft.NET.Sdk\" />` doesn't seem like too much overhead.  That said, if `MSBuild.Extras.Sdk` is designed to *only* extend `Microsoft.NET.Sdk` and you really want it to be a replacement, then having it include an SDK reference might make sense.\r\n\r\nI imagine you'll want to play around with it a little bit and decide what gives your users the best experience when consuming MSBuild.Extras.Sdk.  And of course please circle back and let me know if you have any feedback.  You should install 15.6 Preview 3 and try it out if you haven't already.",
        "createdAt": "2018-01-31T17:58:27Z",
        "updatedAt": "2018-01-31T17:58:27Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "Closing this since we've completed all work on our end and remaining items have associated in other repos.",
        "createdAt": "2018-02-01T18:09:38Z",
        "updatedAt": "2018-02-01T18:09:38Z",
        "author": {
          "login": "jeffkl"
        }
      }
    ]
  }
}