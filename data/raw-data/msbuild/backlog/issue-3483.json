{
  "number": 3483,
  "title": "WPF project is missing nuget imports for \"nested\" build",
  "body": "Suppose I have a nuget package that includes targets that are necessary for compile.\r\n\r\nWPF projects will create a copy of the project on the fly and build it.  See https://referencesource.microsoft.com/#PresentationBuildTasks/BuildTasks/Microsoft/Build/Tasks/Windows/GenerateTemporaryTargetAssembly.cs,98\r\n\r\nThe problem is that the task which generates this project chooses a random file name without any way of predicting what it will be:\r\nhttps://referencesource.microsoft.com/#PresentationBuildTasks/BuildTasks/Microsoft/Build/Tasks/Windows/GenerateTemporaryTargetAssembly.cs,144\r\n\r\nNow when that nested project loads up, it will no longer pick up the generated props/targets files for NuGet packages because it has a different $(MSBuildProjectName).\r\nhttps://github.com/Microsoft/msbuild/blob/master/src/Tasks/Microsoft.Common.props#L66\r\nhttps://github.com/Microsoft/msbuild/blob/master/src/Tasks/Microsoft.Common.targets#L127\r\n\r\nThis is broken with desktop WPF projects using PackageReference today, and I suspect its something we'll need to fix for .NETCore v3.0 as well.\r\n\r\nA couple thoughts:\r\n1. Allow a project to set the property used for this hook and default to MSBuildProjectName.  Then old desktop projects could set whatever the new property is. \r\n2. If _TargetAssemblyProjectName is set, use this instead of MSBuildProjectName.  It would seem that this was created explicitly for this purpose, but was only added in recent versions of .NET desktop.  We could document this property so that projects using the old task can explicitly set it.\r\n\r\n/cc @vatsan-madhavan-msft @dsplaisted ",
  "state": "CLOSED",
  "createdAt": "2018-07-05T20:19:54Z",
  "updatedAt": "2024-02-21T17:12:26Z",
  "closedAt": "2020-12-09T16:14:17Z",
  "author": {
    "login": "ericstj"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Is it feasible to fix the WPF targets to not generate a temporary copy of the project for this?  Can it instead just do something similar to what we do for \"inner\" builds for multitargeted projects, where the project builds itself with some different global properties set?",
        "createdAt": "2018-07-05T20:24:36Z",
        "updatedAt": "2018-07-05T20:24:36Z",
        "author": {
          "login": "dsplaisted"
        }
      },
      {
        "body": "Now I finally know what is going on with my own builds.  Up until today, it was just a random nuisance, but now it is preventing about 50% of my WPF projects from building.  \r\n\r\nLet me explain the problem I have and how I am contributing to that problem.  I have a unique build system, I am one of those who loves to separate all of my build output files, I like to assure deterministic builds.  All of my repositories work the same way, that is I have every project in each repository build its output into a common artifacts directory.  For example \\RepositoryName\\artifacts.  Under the artifacts directory I split the compiler output up into obj\\bin\\ext\\pdb and globals.  For the two directories that don't have obvious names (globals is the global nuget cache directory for the repo) and the (ext are the intermediate nuget files that are normally placed in the obj directory).  This level of OCD really helps me when I am building scripts for the now 149 repositories that I am in control of.  However, I have always had a random issue that I couldn't quite figure out.  That is, for some WPF projects I would see directories that contained random characters appended to the end of them.  Until today, it had always been on the \"figure that out someday when I am bored\" TODO list.\r\n\r\nToday I upgraded from .Net 5.0 preview 5 to .Net 5.0 preview 7.  Now I have quite a few WPF projects that will not build because the value of the MSBuildProjectName contains those random temporary characters at the time that I use it to help set the MSBuildProjectExtensionsPath, BaseIntermediateOutputPath, IntermediateOutputPath, OutputPath and OutDir.  I have been using this approach for over a year now.  Although I noticed those temporary directories once in a while, it rarely caused build failures.  I don't know what it is about the .Net 5 preview 7 build that agitates the condition but I am going to need to figure out a work-around like removing any characters in project name suffixed with an underscore (since that is the consistent starting character I see).\r\n\r\nI have included this part of my Directory.Build.props file just for reference.  @dsplaisted, you asked two years ago if avoiding the temporary copy would fix this.  I think that no matter what, the MSBuildProjectName variable should always be deterministic.  It should always contain one value, the name of the project.  Yes, technically it still does contain the name of the project, but its the unexpected temporary project. Its something that I never expected to occur and as far as I know there is no documentation on this on any of the msbuild help pages that educate us on msbuild  properties such as the commonly used MSBuildProjectName property. Now that I know I cannot trust the value of MSBuildProjectName in WPF projects, I at least know where those temporary directories are coming from and I can find a work-around.  \r\n\r\nI know that I am doing some outside the box build steps, but it would be great if MSBuildProjectName always contained the actual project name.  I guess I should vote yes for your #3497 because that's exactly part of what I am doing here.  \r\n\r\nCheers, Jason\r\n\r\n```\r\n<Project InitialTargets=\"CheckEnvironment\">\r\n\r\n  <PropertyGroup Condition=\" '$(ProjectArtifactDir)' == '' \">\r\n    <ProjectArtifactDir>$(Configuration)\\$(MSBuildProjectName)</ProjectArtifactDir>\r\n  </PropertyGroup>\r\n\r\n  <!-- SolutionDir was defined -->\r\n  <PropertyGroup Condition=\" '$(ArtifactsRoot)' == '' And ('$(SolutionDir)' != '*Undefined*' And '$(SolutionDir)' != '') \">\r\n    <ArtifactsRoot>$(SolutionDir)</ArtifactsRoot>\r\n    <ArtifactsRoot Condition=\"!HasTrailingSlash('$(ArtifactsRoot)')\">$(ArtifactsRoot)\\</ArtifactsRoot>\r\n    <ArtifactsRoot>$(ArtifactsRoot)artifacts\\</ArtifactsRoot>\r\n  </PropertyGroup>\r\n\r\n  <!-- SolutionDir was not defined -->\r\n  <PropertyGroup Condition=\" '$(ArtifactsRoot)' == '' And ('$(SolutionDir)' == '*Undefined*' Or '$(SolutionDir)' == '') \">\r\n    <!-- Though 99% of our use cases require a solution, Benchmark DotNet causes this\r\n    to be undefined due to its dynamic compilation. The work-around follows. -->\r\n\r\n    <!-- If compiled without a solution. -->\r\n    <ArtifactsRoot>$(MSBuildProjectDirectory)</ArtifactsRoot>\r\n    <ArtifactsRoot Condition=\"!HasTrailingSlash('$(ArtifactsRoot)')\">$(ArtifactsRoot)\\</ArtifactsRoot>\r\n    <ArtifactsRoot>$(ArtifactsRoot)artifacts\\</ArtifactsRoot>\r\n  </PropertyGroup>\r\n\r\n  <!--\r\n    Place the obj, bin and extension files at the root of the solution so\r\n    cleaning is easy.\r\n  -->\r\n  <PropertyGroup>\r\n    <AppendTargetFrameworkToOutputPath>false</AppendTargetFrameworkToOutputPath>\r\n\r\n    <!-- https://docs.microsoft.com/en-us/visualstudio/msbuild/customize-your-build?view=vs-2019\r\n    -->\r\n    <MSBuildProjectExtensionsPath>$(ArtifactsRoot)ext\\$(ProjectArtifactDir)</MSBuildProjectExtensionsPath>\r\n\r\n    <!-- https://github.com/microsoft/msbuild/issues/3244 Bug requires us to set the Base path too. -->\r\n    <BaseIntermediateOutputPath>$(ArtifactsRoot)obj\\$(ProjectArtifactDir)</BaseIntermediateOutputPath>\r\n    <IntermediateOutputPath>$(BaseIntermediateOutputPath)</IntermediateOutputPath>\r\n\r\n    <OutputPath>$(ArtifactsRoot)bin\\$(ProjectArtifactDir)</OutputPath>\r\n    <OutDir>$(OutputPath)</OutDir>\r\n\r\n  </PropertyGroup>\r\n\r\n  <Target Name=\"CheckEnvironment\">\r\n    <Error Text=\"Configuration is not defined.  Use dotnet build '-c Debug' or '-c Release'.\" Condition=\" '$(Configuration)' == '' \" />\r\n    <Message Importance=\"high\" Text=\"SolutionDir not defined, bin/obj will be under $(ArtifactsRoot)\" Condition=\" '$(SolutionDir)' == '*Undefined*' Or '$(SolutionDir)' == ''\" />\r\n    <Message Importance=\"high\" Text=\"PROJECT NAME $(MSBuildProjectName)\" />\r\n  </Target>\r\n\r\n</Project>\r\n```\r\n",
        "createdAt": "2020-06-06T18:26:34Z",
        "updatedAt": "2020-06-06T18:26:34Z",
        "author": {
          "login": "jtbrower"
        }
      },
      {
        "body": "I have found a work-around that (at the moment) is more reliable for determining the true value of MSBuildProjectName.\r\n\r\n```    <RealProjName>$([System.IO.Path]::GetFileName('$(MSBuildProjectDirectory)'))</RealProjName> ```",
        "createdAt": "2020-06-06T18:42:27Z",
        "updatedAt": "2020-06-06T18:42:27Z",
        "author": {
          "login": "jtbrower"
        }
      },
      {
        "body": "We normalize project names like [this](https://github.com/dotnet/wpf/blob/c3b1ecefd9debf850b4757bb8d657b15af79469d/eng/WpfArcadeSdk/tools/ShippingProjects.props#L167-L177) in dotnet/wpf: \r\n\r\n```xml\r\n  <PropertyGroup>\r\n    <!-- \r\n      Some WPF product assemblies, like System.Windows.Controls.Ribbon, require markup compilation.\r\n      At present, a temporary project is created on the disk during markup-compilation with a name like \r\n          <ProjectName>_random_wpftmp.csproj\r\n      Normalizing $(MSBuildProjectName) allows us to ensure that temporary projects of this nature are also\r\n      correctly treated as IsShipping=true\r\n    -->\r\n    <NormalizedMSBuildProjectName Condition=\"!$(MSBuildProjectName.EndsWith('_wpftmp'))\">$(MSBuildProjectName)</NormalizedMSBuildProjectName>\r\n    <NormalizedMSBuildProjectName Condition=\"$(MSBuildProjectName.EndsWith('_wpftmp'))\">$(MSBuildProjectName.SubString(0, $(MSBuildProjectName.IndexOf('_'))))</NormalizedMSBuildProjectName>\r\n```\r\n\r\nI would not recommend merging the output from foo_wpftmp_xxx.csproj and foo.csproj into the same obj, bin etc folders. They should be assigned different project-specific folders (as they are different projects). If one clobbers the outputs from the other, it will lead to unexpected results. They are not interchangeable with one another. \r\n\r\nThat said they can indeed share the same BaseIntermediateOutputPath etc. I\u2019m fact [dotnet/arcade](https://github.com/dotnet/arcade) has props/targets that achieves this for all .NET Core repos.  See https://github.com/dotnet/arcade/blob/9811f06184cd2adae554f013ece07bece2a6c50e/src/Microsoft.DotNet.Arcade.Sdk/tools/ProjectLayout.props#L4 etc. ",
        "createdAt": "2020-06-06T19:25:33Z",
        "updatedAt": "2020-06-06T19:25:33Z",
        "author": {
          "login": "vatsan-madhavan"
        }
      },
      {
        "body": "@vatsan-madhavan thank you for the quick response.  I now have about 13 years with WPF and until now I didn't know anything about these _xxx.csproj and I still do not understand what they are for.  I would never willingly and knowingly combine the output from two project builds but knowing nothing about the reason for this temporary project, its easy to make this mistake.\r\n\r\nCan you shed some light on the purpose for those?  How can I spot which of my WPF libraries will be compiled this way?  Where in my props file am I merging bin and obj files?  Thanks again for the quick response.",
        "createdAt": "2020-06-06T21:07:12Z",
        "updatedAt": "2020-06-06T21:07:12Z",
        "author": {
          "login": "jtbrower"
        }
      },
      {
        "body": "It is a used by the GenerateTemporaryTargetAssembly task during markup compilation. \r\n\r\nhttps://github.com/dotnet/wpf/blob/05b6d65560c6ce839a9e375a3b7ef0bf64e8a5f0/src/Microsoft.DotNet.Wpf/src/PresentationBuildTasks/Microsoft/Build/Tasks/Windows/GenerateTemporaryTargetAssembly.cs#L43-L54\r\n\r\nA copy of the WPF project is created after stripping out XAML etc references to build a preliminary version of the assembly, which is used to bootstrap types for markup compilation in preparation of \u201cfull\u201d compilation of the assembly for real. \r\n",
        "createdAt": "2020-06-07T01:05:55Z",
        "updatedAt": "2020-06-07T01:05:55Z",
        "author": {
          "login": "vatsan-madhavan"
        }
      },
      {
        "body": "@vatsan-madhavan I really appreciate you pointing out the fact that if I normalized the project name and used that normalized name to set all of the artifact output paths, that indeed would have placed the output from two projects into the same directory.  Now that I understand that WPF projects are compiled by creating a temporary copy of the project, I won't make that mistake again.\r\n\r\nI updated the section of the Directory.Build.props file that helps assure that the artifacts output is located at the root of the repository.  I borrowed most of the logic from the Arcade props files you pointed me too and have included it below for anyone else that's interested.  Note that I also stopped trying to put the third party package files into the separate ext directory and left them in obj.  The main goal I had is accomplished, keep all binary files at the root of each of my repositories, and of course do this without causing subtle compilation issues. \r\n\r\nFor anyone that borrows from the following logic, all of the repositories I manage have their own Directory.Build.props file that defines the ArtifactsRoot and then includes this common section from a shared repo.  The script will throw an error if ArtifactsRoot is not defined. \r\n\r\n```\r\n<Project InitialTargets=\"CheckEnvironment\">\r\n\r\n  <!-- The entire purpose of this file is to assure the compilation output is placed under a folder at the root of each repository. -->\r\n  <PropertyGroup>\r\n    <ArtifactsObjDir>$([MSBuild]::NormalizeDirectory('$(ArtifactsRoot)', 'obj'))</ArtifactsObjDir>\r\n    <ArtifactsBinDir>$([MSBuild]::NormalizeDirectory('$(ArtifactsRoot)', 'bin'))</ArtifactsBinDir>\r\n    <Platform Condition=\"'$(Platform)' == ''\">AnyCPU</Platform>\r\n    <PlatformName Condition=\"'$(PlatformName)' == ''\">$(Platform)</PlatformName>\r\n  </PropertyGroup>\r\n\r\n  <!--\r\n    Place the obj, bin and extension files at the root of the solution so\r\n    cleaning is easy.\r\n  -->\r\n  <PropertyGroup>\r\n    <OutDirName Condition=\"'$(OutDirName)' == ''\">$(MSBuildProjectName)</OutDirName>\r\n\r\n    <BaseOutputPath Condition=\"'$(BaseOutputPath)' == ''\">$([System.IO.Path]::GetFullPath('$(ArtifactsBinDir)$(OutDirName)\\'))</BaseOutputPath>\r\n    <OutputPath Condition=\"'$(PlatformName)' == 'AnyCPU'\">$(BaseOutputPath)$(Configuration)\\</OutputPath>\r\n    <OutputPath Condition=\"'$(PlatformName)' != 'AnyCPU'\">$(BaseOutputPath)$(PlatformName)\\$(Configuration)\\</OutputPath>\r\n\r\n    <BaseIntermediateOutputPath Condition=\"'$(BaseIntermediateOutputPath)' == ''\">$([System.IO.Path]::GetFullPath('$(ArtifactsObjDir)$(OutDirName)\\'))</BaseIntermediateOutputPath>\r\n    <IntermediateOutputPath Condition=\"'$(PlatformName)' == 'AnyCPU'\">$(BaseIntermediateOutputPath)$(Configuration)\\</IntermediateOutputPath>\r\n    <IntermediateOutputPath Condition=\"'$(PlatformName)' != 'AnyCPU'\">$(BaseIntermediateOutputPath)$(PlatformName)\\$(Configuration)\\</IntermediateOutputPath>\r\n  </PropertyGroup>\r\n\r\n  <!--\r\n    Both the Configuration and the ArtifactsRoot must be defined.\r\n    ArtifactsRoot is defined in the Directory.Build.props at the root of every\r\n    repo.  However some projects in each repo may skip including that props file.\r\n    If they skip including the root props file but still include this one, they\r\n    will see errors unless they or another props file defines the ArtifactsRoot\r\n    and Configuration properties.\r\n  -->\r\n  <Target Name=\"CheckEnvironment\">\r\n    <Error Text=\"Configuration is not defined.  Use dotnet build '-c Debug' or '-c Release'.\" Condition=\" '$(Configuration)' == '' \" />\r\n    <Error Text=\"ArtifactsRoot must be defined when including Output.Build.props. This is usually done by the Directory.Build.props file at the root of the repository.\" Condition=\" '$(ArtifactsRoot)' == '*Undefined*' Or '$(ArtifactsRoot)' == ''\" />\r\n  </Target>\r\n</Project>\r\n```",
        "createdAt": "2020-06-07T22:03:24Z",
        "updatedAt": "2020-06-07T22:03:24Z",
        "author": {
          "login": "jtbrower"
        }
      },
      {
        "body": "> A copy of the WPF project is created after stripping out XAML etc references to build a preliminary version of the assembly, which is used to bootstrap types for markup compilation in preparation of \u201cfull\u201d compilation of the assembly for real.\r\n\r\nIf possible, I believe it would be much preferable to do this without generating a separate temporary project.\r\n\r\n\r\n```xml\r\n<MSBuild Projects=\"@(MSBuildProjectFullPath)\"\r\n         Targets=\"Build\"\\\r\n         Properties=\"GenerateTemporaryTargetAssembly=True\" />\r\n```\r\n\r\nThen the WPF targets would have logic that would strip out the appropriate references, adjust the intermediate and output paths, and whatever else is needed based on the `GenerateTemporaryTargetAssembly` property.",
        "createdAt": "2020-06-08T18:38:48Z",
        "updatedAt": "2020-06-08T18:38:48Z",
        "author": {
          "login": "dsplaisted"
        }
      },
      {
        "body": "@dsplaisted I agree",
        "createdAt": "2020-06-10T19:02:44Z",
        "updatedAt": "2020-06-10T19:02:44Z",
        "author": {
          "login": "jtbrower"
        }
      },
      {
        "body": "This is being resolved in the WPF repo with dotnet/wpf#3585.",
        "createdAt": "2020-12-09T16:14:17Z",
        "updatedAt": "2020-12-09T16:14:17Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}