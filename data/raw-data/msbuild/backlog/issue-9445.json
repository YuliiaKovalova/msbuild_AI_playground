{
  "number": 9445,
  "title": "[Broken Build]: Setting BaseOutputPath in Directory.Build.props Breaks Solution Loading",
  "body": "### Issue Description\r\n\r\nI encountered an issue where adding a `Directory.Build.props` file with a custom `<BaseOutputPath>` breaks the loading of files and references in the entire solution. The goal is to set the output of all projects to the solution root.\r\n\r\n### Steps to Reproduce\r\n\r\nTry to build [ConsoleApp10.zip](https://github.com/dotnet/msbuild/files/13438074/ConsoleApp10.zip)\r\n\r\n#### or do it manually:\r\nCreate a `Directory.Build.props` file with the following content:\r\n\r\n\r\n   ```xml\r\n   <Project>\r\n     <PropertyGroup>\r\n       <BaseOutputPath>$(MSBuildThisFileDirectory)</BaseOutputPath>\r\n     </PropertyGroup>\r\n   </Project>\r\n ```\r\n\r\n### Expected Behavior\r\n\r\nThe solution should load normally, with all projects outputting their build results to the solution's root directory.\r\n\r\n### Actual Behavior\r\n\r\nAfter adding the Directory.Build.props file, the solution fails to load correctly. No files are loaded, and no references are resolved.\r\n\r\n\r\nmsbuild doesn't see the `Program.cs` file.\r\n```\r\nPS D:\\ConsoleApp10> tree /f\r\nFolder PATH listing for volume Data\r\nVolume serial number is 2221-5E74\r\nD:.\r\n\u2502   ConsoleApp10.sln\r\n\u2502   Directory.Build.props\r\n\u2502\r\n\u2514\u2500\u2500\u2500ConsoleApp10\r\n        ConsoleApp10.csproj\r\n        Program.cs\r\n\r\nPS D:\\ConsoleApp10> dotnet build\r\nMSBuild version 17.7.3+4fca21998 for .NET\r\n  Determining projects to restore...\r\n  Restored D:\\ConsoleApp10\\ConsoleApp10\\ConsoleApp10.csproj (in 62 ms).\r\nCSC : error CS5001: Program does not contain a static 'Main' method suitable for an entry point [D:\\ConsoleApp10\\ConsoleApp10\\ConsoleApp10.csproj]\r\n\r\nBuild FAILED.\r\n\r\nCSC : error CS5001: Program does not contain a static 'Main' method suitable for an entry point [D:\\ConsoleApp10\\ConsoleApp10\\ConsoleApp10.csproj]\r\n    0 Warning(s)\r\n    1 Error(s)\r\n\r\nTime Elapsed 00:00:01.04\r\n```\r\n",
  "state": "OPEN",
  "createdAt": "2023-11-22T10:30:12Z",
  "updatedAt": "2024-03-06T09:24:19Z",
  "closedAt": null,
  "author": {
    "login": "mbalous"
  },
  "labels": [
    "needs-triage"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "rainersigwald"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Team triage: @mbalous This behavior does not sound right. You might be interested though in this dotnet feature: https://learn.microsoft.com/en-us/dotnet/core/sdk/artifacts-output",
        "createdAt": "2023-11-28T15:04:53Z",
        "updatedAt": "2023-11-28T15:04:53Z",
        "author": {
          "login": "AR-May"
        }
      },
      {
        "body": "@AR-May  I repro this issue also.  When add <BaseOutputPath>$(MSBuildThisFileDirectory)</BaseOutputPath> in the .NET project, it doesn't add the Compile Item when evaluate the project. So the error CS5001: Program does not contain a static 'Main' method suitable for an entry point [D:\\ConsoleApp10\\ConsoleApp10\\ConsoleApp10.csproj] happens.\r\n",
        "createdAt": "2023-12-01T10:52:04Z",
        "updatedAt": "2023-12-01T10:52:04Z",
        "author": {
          "login": "JaynieBai"
        }
      },
      {
        "body": "The DefaultItemExcludes property lists `$(BaseOutputPath)/**`:\r\n\r\n<https://github.com/dotnet/sdk/blob/e9d13cbe7e8c1d52ce276a8655f52a87e1017c46/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.Sdk.DefaultItems.targets#L27>\r\n\r\nAll the default items then have `Exclude=\"$(DefaultItemExcludes);$(DefaultExcludesInProjectFolder)\"`:\r\n\r\n<https://github.com/dotnet/sdk/blob/e9d13cbe7e8c1d52ce276a8655f52a87e1017c46/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.Sdk.DefaultItems.props#L29-L37>\r\n\r\nSo, if $(BaseOutputPath) is the solution root, then none of the files in that tree are added as items by default.\r\n\r\nI think it's a niche case and a solution that sets BaseOutputPath in this way should configure its own DefaultItemExcludes, or not use default items.",
        "createdAt": "2023-12-01T12:24:59Z",
        "updatedAt": "2023-12-01T12:24:59Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "> if $(BaseOutputPath) is the solution root, then none of the files in that tree are added as items by default.\r\n> \r\n> I think it's a niche case and a solution that sets BaseOutputPath in this way should configure its own DefaultItemExcludes, or not use default items.\r\n\r\nThat makes sense to me and I agree: we shouldn't add logic to handle this special case. Thanks for the analysis!",
        "createdAt": "2023-12-01T16:05:30Z",
        "updatedAt": "2023-12-01T16:05:30Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "\"no references are resolved\" seems unexpected though. Does this mean ProjectReference?",
        "createdAt": "2023-12-01T16:37:57Z",
        "updatedAt": "2023-12-01T16:37:57Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "> \"no references are resolved\" seems unexpected though. Does this mean ProjectReference?\r\n\r\nyes that's what i mean. The projects in Visual Studio seems completely empty. No references to other projects, no source files loaded.",
        "createdAt": "2023-12-04T11:03:44Z",
        "updatedAt": "2023-12-04T11:03:44Z",
        "author": {
          "login": "mbalous"
        }
      },
      {
        "body": "> I think it's a niche case and a solution that sets BaseOutputPath in this way should configure its own DefaultItemExcludes, or not use default items.\r\n\r\nI think it's not that unusual to set BaseOutputPath to the solution root. Can you advise me the way how to achieve that? \r\nThank you, @KalleOlaviNiemitalo !\r\n\r\n",
        "createdAt": "2023-12-14T23:22:30Z",
        "updatedAt": "2023-12-14T23:22:30Z",
        "author": {
          "login": "mbalous"
        }
      }
    ]
  }
}