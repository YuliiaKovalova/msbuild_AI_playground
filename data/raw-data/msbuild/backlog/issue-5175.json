{
  "number": 5175,
  "title": "New Feature Idea: Return True if all input files unchanged",
  "body": "Is it somewhat feasible to have msbuild tell me if the input files have changed? I am running msbuild in a CI system and it would be ideal to either\r\n1) after running msbuild it would return a value to the CI system if any of the input files had changed. So if Task C depends on Task A and Task B where both A and B have returned \"no input files have changed\" Task C will be skipped\r\n\r\n2) even better I give msbuild the changed files list (from the build pull request) and it returns if it cares about the changed files or not\r\n\r\nI am currently looking at using\r\n1) scraping the output log for the \"unchanged\" and \"changed\" keywords\r\n2) use the -graphBuild and -preprocess flags then comparing the output to the changed files list\r\n\r\nI will try to update this after some more digging\r\n",
  "state": "OPEN",
  "createdAt": "2020-03-11T22:17:46Z",
  "updatedAt": "2024-02-21T16:29:45Z",
  "closedAt": null,
  "author": {
    "login": "dereklowlind"
  },
  "labels": [
    "question",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "MSBuild's incrementality model is at the target level; it sounds like you would like answers at the repo level. MSBuild doesn't offer that information (and in most cases just aggregating target-level intputs/outputs would be incomplete, because some targets do not specify them and always run--especially custom targets).\r\n\r\nSome systems like https://github.com/Microsoft/BuildXL build on top of MSBuild to detect project-level inputs and outputs and provide a caching layer. That might be interesting for your scenario.",
        "createdAt": "2020-03-16T20:44:08Z",
        "updatedAt": "2020-03-16T20:44:08Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}