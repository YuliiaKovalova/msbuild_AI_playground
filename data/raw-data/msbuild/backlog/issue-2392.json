{
  "number": 2392,
  "title": "For large projects with globs, MSBuild takes up to 30% - 50% of a build searching the disk",
  "body": "I'm been analyzing two projects to try and understand the reasoning behind long design-time builds. Some projects design-time builds are taking upwards of 3 seconds to run - when the expectation is that don't take more than 50 - 100 ms. This results in very observable lag times from when you make a change (such as adding a reference) and it seen by the compiler, or time before you get useful intellisense the first time you open a solution. It also makes evaluation inside the VS process itself slow, resulting in observable UI delays if we put this on the UI thread, or the UI thread is blocked on evaluation in another thread.\r\n\r\nLooking at these builds under PerfView, I can see that half the build is dedicated to evaluating the project, of which the majority is caused by MSBuild searching the disk:\r\n\r\nThe second project was taking 3 seconds for a design-time build, it's build evaluation time looked like this:\r\n![image](https://user-images.githubusercontent.com/1103906/28906824-94151262-785d-11e7-8105-ce9717d395bf.png)\r\n\r\nThere were two main projects that I was looking, the first http://github.com/dotnet/roslyn, was taking up to 1 second for a design-time build, it's build evaluation time looked like this:\r\n![image](https://user-images.githubusercontent.com/1103906/28906776-3008a374-785d-11e7-8164-61457bf0de6b.png)\r\n\r\nThe first project, Roslyn, does nothing but import the default globs from the SDK.\r\n\r\nThe second project, is a lot more complex, and includes the following syntax:\r\n\r\n``` XML\r\n       <ItemGroup>\r\n              <None Include=\"**\\*.iPhone.cs\" />\r\n              <None Include=\"**\\*.Google.cs\" />\r\n              <None Include=\"**\\*.Microsoft.cs\" />\r\n              <None Include=\"**\\*.WinRT.cs\" />\r\n              <None Include=\"**\\*.Xamarin.cs\" />\r\n       </ItemGroup>\r\n\r\n       <ItemGroup>\r\n              <Compile Remove=\"**\\*.iPhone.cs\" />\r\n              <Compile Include=\"**\\*.iPhone.cs\" Condition=\"'$(TargetDevice)' == 'iPhone'\" />\r\n\r\n              <Compile Remove=\"**\\*.Google.cs\" />\r\n              <Compile Include=\"**\\*.Google.cs\" Condition=\"$(TargetDevice)' == 'Google'\" />\r\n              \r\n              <Compile Remove=\"**\\*.Xamarin.cs\" />\r\n              <Compile Include=\"**\\*.Xamarin.cs\" Condition=\"'$(TargetDevice)' == 'Google' or '$(TargetDevice)' == 'iPhone'\" />\r\n\r\n              <Compile Remove=\"**\\*.Microsoft.cs\" />\r\n              <Compile Include=\"**\\*.Microsoft.cs\" Condition=\"$(TargetDevice)' == 'Microsoft'\" />\r\n              \r\n              <Compile Remove=\"**\\*.WinRT.cs\" />\r\n              <Compile Include=\"**\\*.WinRT.cs\" Condition=\"$(TargetDevice)' == 'WinRT'\" />\r\n       </ItemGroup>\t\r\n```",
  "state": "CLOSED",
  "createdAt": "2017-08-03T05:14:57Z",
  "updatedAt": "2024-02-21T17:17:31Z",
  "closedAt": "2017-10-10T23:46:33Z",
  "author": {
    "login": "davkean"
  },
  "labels": [
    "Area: Performance",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "cdmihai"
      }
    ]
  },
  "milestone": {
    "title": "MSBuild 15.5"
  },
  "comments": {
    "nodes": [
      {
        "body": "Possibly related: #2000",
        "createdAt": "2017-08-03T23:10:23Z",
        "updatedAt": "2017-08-03T23:10:23Z",
        "author": {
          "login": "dsplaisted"
        }
      },
      {
        "body": "I would expect #2000 to not be in play for these measurements, since we could only get a big win from that for the `Exclude=\"**\\pattern*\\**\"` case, which isn't in the default excludes (except the `**\\.*\\**` one, but I wouldn't expect that to be relevant in the Roslyn case).",
        "createdAt": "2017-08-04T07:05:04Z",
        "updatedAt": "2017-08-04T07:05:04Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Another inefficiency here is that we consider each item separately, so if you have\r\n\r\n```xml\r\n<ItemGroup>\r\n  <A Include=\"**\\*.cs\" />\r\n  <B Include=\"**\\*.cs\" />\r\n</ItemGroup>\r\n```\r\n\r\nWe'll grovel the whole directory twice.\r\n\r\nSince the Sdk autoglobs cover [`Compile`, `EmbeddedResource`, and `None`, all with recursive extension-based globs](https://github.com/dotnet/sdk/blob/40a06603fdce86e17e2c1e97553fbd95925e06d1/src/Tasks/Microsoft.NET.Build.Tasks/build/Microsoft.NET.Sdk.DefaultItems.props#L25-L33), that's (roughly) 3 full enumerations of files under the project folder.\r\n\r\nIt shouldn't be possible to create files between item evaluations in MSBuild (file-creation functions aren't available in property functions, thank heavens), so we could probably cache the result of directory enumerations for the duration of the item evaluation pass, making subsequent lookups faster.",
        "createdAt": "2017-08-04T07:09:01Z",
        "updatedAt": "2017-08-04T07:09:01Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "How many disk lookups do we do for this?\r\n\r\n``` XML\r\n <Compile Include=\"**\\*.iPhone.cs\" />\r\n <Compile Remove=\"**\\*.iPhone.cs\" />\r\n```",
        "createdAt": "2017-08-04T07:09:18Z",
        "updatedAt": "2017-08-04T07:09:26Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "That'd be a full expansion--there's no mechanism to subtract patterns.\r\n\r\nI don't think it'd be worthwhile to do the trivial \"this exactly matches\" pattern subtraction, and doing more sophisticated ones gets really complicated.",
        "createdAt": "2017-08-04T07:11:52Z",
        "updatedAt": "2017-08-04T07:11:52Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Nope, I'm wrong: we do have an if-exclude-exactly-matches-include check:\r\n\r\nhttps://github.com/Microsoft/msbuild/blob/92c7b7c4db2a1bd610e774a4c82d734b202cf54b/src/Shared/FileMatcher.cs#L700-L702\r\n\r\nSo that winds up doing no I/O.",
        "createdAt": "2017-08-04T15:57:44Z",
        "updatedAt": "2017-08-04T15:57:44Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@davkean \r\n```\r\n <Compile Include=\"**\\*.iPhone.cs\" />\r\n <Compile Remove=\"**\\*.iPhone.cs\" />\r\n```\r\n\r\nWalks the file tree only once,  for the include. Remove uses path aware comparisons and Regexes to remove.",
        "createdAt": "2017-08-15T16:51:30Z",
        "updatedAt": "2017-08-15T16:51:30Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "Recently while I was optimizing [the generator](https://github.com/maca88/AsyncGenerator) that I am working on, I discovered that a lot of time is spent just by opening the project. To be more specific, it takes 20 seconds for opening the [NHibernate test](https://github.com/nhibernate/nhibernate-core/blob/master/src/NHibernate.Test/NHibernate.Test.csproj) project by using the [Project](https://github.com/Microsoft/msbuild/blob/master/src/Build/Definition/Project.cs#L50) class (tested on Intel I7 860). \r\nBy analyzing the msbuild source to see what is exactly going on I found that the problem lies in the `FileMatcher.GetFiles` method which spends the most time on calling [FileUtilities.PathsEqual](https://github.com/Microsoft/msbuild/blob/3986423a4cd2e7a716ab0c0d6ef28485f1844977/src/Shared/FileMatcher.cs#L776) (10 seconds) and [FileMatcher.GetAccessibleFileSystemEntries](https://github.com/Microsoft/msbuild/blob/3986423a4cd2e7a716ab0c0d6ef28485f1844977/src/Shared/FileMatcher.cs#L115) (8 seconds).\r\n\r\nHere is the whole trace:\r\n![getfiles](https://user-images.githubusercontent.com/5311349/30519155-1a45aafa-9b8f-11e7-99b2-b27b57080560.png)\r\n\r\nFrom the image above we can see that `GetFiles` method is called 5 times and by adding some extra logging the calls look like this: \r\n```\r\nTime: 8907ms, Returned files: 14, Call: FileMatcher.GetFiles(@\"C:\\Source\\NHibernate.Test\", @\"**/*\", new [] { @\"obj\\/**\", @\"**\\*.hbm.xml\", @\"bin\\Debug\\/**\", @\"**/*.resx\", @\"**/.*/**\", @\"packages/**\", @\"**/*.vssscc\", @\"**/*.cs\", @\"**/*.sln\", @\"**/*.*proj\", @\"**/*.user\", @\"obj\\Debug\\/**\", @\"**\\*.jpg\", @\"bin\\/**\" })\r\nTime: 5132ms, Returned files: 3509, Call: FileMatcher.GetFiles(@\"C:\\Source\\NHibernate.Test\", @\"**/*.cs\", new [] { @\"obj\\/**\", @\"bin\\Debug\\/**\", @\"**/.*/**\", @\"packages/**\", @\"**/*.vssscc\", @\"**/*.sln\", @\"**/*.*proj\", @\"**/*.user\", @\"obj\\Debug\\/**\", @\"bin\\/**\" })\r\nTime: 4945ms, Returned files: 0, Call: FileMatcher.GetFiles(@\"C:\\Source\\NHibernate.Test\", @\"**/*.resx\", new [] { @\"obj\\/**\", @\"bin\\Debug\\/**\", @\"**/.*/**\", @\"packages/**\", @\"**/*.vssscc\", @\"**/*.sln\", @\"**/*.*proj\", @\"**/*.user\", @\"obj\\Debug\\/**\", @\"bin\\/**\" })\r\nTime: 329ms, Returned files: 827, Call: FileMatcher.GetFiles(@\"C:\\Source\\NHibernate.Test\", @\"**\\*.hbm.xml\", new [] { @\"bin\\**\\*.*\" })\r\nTime: 302ms, Returned files: 1, Call: FileMatcher.GetFiles(@\"C:\\Source\\NHibernate.Test\", @\"**\\*.jpg\", new [] {  })\r\n```\r\n\r\nI don't know if those calls can be reduced but what I do know is that we could parallel the directory traversing as in those 20 seconds the cpu was always below 20% and we could add some caching to prevent calling `GetAccessibleFileSystemEntries` with the same arguments multiple times. [By doing so](https://github.com/maca88/msbuild/commit/49460be36bffc6699e53d438436e5e273385df7b), the opening time of the project was reduced to 6 seconds.\r\n",
        "createdAt": "2017-09-17T08:22:40Z",
        "updatedAt": "2017-09-17T08:22:40Z",
        "author": {
          "login": "maca88"
        }
      },
      {
        "body": "PathEquals was redone in https://github.com/Microsoft/msbuild/pull/2401/commits/5ca888848c29aff808fbeec886d431004e0c0862 by @benaadams . Is your profile session done against the latest master?\r\n\r\nYour experiments look good! We intend to introduce more caching in the evaluator, potentially a shareable cache with VS. Regarding parallelism, we're going to have to discuss it with VS. We've had instances in the past were we starved its thread pool.",
        "createdAt": "2017-09-18T22:44:34Z",
        "updatedAt": "2017-09-18T22:44:52Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "@cdmihai I think there will be a gain here if we do parallelism in long running \"tasks\" for just the I/O portion.",
        "createdAt": "2017-09-18T22:49:39Z",
        "updatedAt": "2017-09-18T22:49:39Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "> Is your profile session done against the latest master?\r\n\r\nYes, I forgot to mention that, so the change for `PathEquals` was there.\r\n\r\nI took some more time on experimenting those 5 calls in the previous post by applying 4 optimizations step by step to see the benefits of each, where each further step will contain the optimizations of the previous steps.\r\n[This](https://github.com/maca88/msbuild/commit/24ccceeafb1d7969107fc02c272bcd29909eea4d#diff-7a21f5e73644f08fe8b0dc9763a632aaR30) is the test that will be run on each step, which basically contains the above 5 calls with some additional logging.\r\n\r\nBefore applying any optimization let's run the test on the latest master branch:\r\n```\r\nFile spec: **/*, Call time: 8218ms, Returned files: 14\r\nFile spec: **/*.cs, Call time: 4479ms, Returned files: 3509\r\nFile spec: **/*.resx, Call time: 4573ms, Returned files: 0\r\nFile spec: **\\*.hbm.xml, Call time: 290ms, Returned files: 827\r\nFile spec: **\\*.jpg, Call time: 293ms, Returned files: 1\r\nTotal time: 17855ms\r\n```\r\nNow for each step apply an optimization and run the test:\r\n1. [Add a per call cache](https://github.com/maca88/msbuild/commit/ccd015034842b778c3bddbc06093f04dc9eaed0c) to prevent calling `GetAccessibleFileSystemEntries` with the same arguments multiple times:\r\n```\r\nFile spec: **/*, Call time: 7136ms, Returned files: 14\r\nFile spec: **/*.cs, Call time: 3888ms, Returned files: 3509\r\nFile spec: **/*.resx, Call time: 3863ms, Returned files: 0\r\nFile spec: **\\*.hbm.xml, Call time: 336ms, Returned files: 827\r\nFile spec: **\\*.jpg, Call time: 332ms, Returned files: 1\r\nTotal time: 15558ms\r\n```\r\n\r\n2. [Normalize directory paths](https://github.com/maca88/msbuild/commit/9ca879af882a763d42d1bf109b2855670d839977) when calling `GetAccessibleFileSystemEntries` in order to replace `FileUtilities.PathsEqual` with `==` operator:\r\n```\r\nFile spec: **/*, Call time: 1876ms, Returned files: 14\r\nFile spec: **/*.cs, Call time: 1306ms, Returned files: 3509\r\nFile spec: **/*.resx, Call time: 1119ms, Returned files: 0\r\nFile spec: **\\*.hbm.xml, Call time: 342ms, Returned files: 827\r\nFile spec: **\\*.jpg, Call time: 348ms, Returned files: 1\r\nTotal time: 4995ms\r\n```\r\n\r\n3. [Replace the per call cache](https://github.com/maca88/msbuild/commit/76502f754651e0b6555ab6191f8aca2e9dc6587b) with a \"global\" cache so that all 5 calls will share the same cache:\r\n```\r\nFile spec: **/*, Call time: 1867ms, Returned files: 14\r\nFile spec: **/*.cs, Call time: 240ms, Returned files: 3509\r\nFile spec: **/*.resx, Call time: 257ms, Returned files: 0\r\nFile spec: **\\*.hbm.xml, Call time: 15ms, Returned files: 827\r\nFile spec: **\\*.jpg, Call time: 15ms, Returned files: 1\r\nTotal time: 2397ms\r\n```\r\n\r\n4. [Add parallel processing](https://github.com/maca88/msbuild/commit/d4fe5588287a418552569f2bad3563971c65ffbe) of subdirectories:\r\n```\r\nFile spec: **/*, Call time: 414ms, Returned files: 14\r\nFile spec: **/*.cs, Call time: 60ms, Returned files: 3509\r\nFile spec: **/*.resx, Call time: 61ms, Returned files: 0\r\nFile spec: **\\*.hbm.xml, Call time: 6ms, Returned files: 827\r\nFile spec: **\\*.jpg, Call time: 4ms, Returned files: 1\r\nTotal time: 547ms\r\n```\r\n\r\nFor each step the test was ran multiple times on idle cpu and the average time was taken.\r\nAs we can see from the above results the first optimization (cache per call) is slower (check `**\\*.hbm.xml` and `**\\*.jpg`) when there aren't multiple calls with the same arguments (or just few of them), because of the cache overhead. The cache only shines when shared through multiple calls.",
        "createdAt": "2017-09-19T16:44:51Z",
        "updatedAt": "2017-09-19T16:44:51Z",
        "author": {
          "login": "maca88"
        }
      },
      {
        "body": "OK, here's what I think we should do:\r\n\r\n**For 15.5**\r\n\r\n Since the deadline is close, we'll go with these changes. Thanks @maca88! I'll fork your branch and get it ready:\r\n- see if I can fix the breaking tests. Normalizing the paths to avoid `PathsEqual` seems to be breaking a couple of assumptions.\r\n- experiment with bounding the `Parallel.ForEach` via ParallelOptions.MaxDegreeOfParallelism. My worry here is that the backing thread pool might create many threads if it notices the Parallel.ForEach tasks are taking a long time.\r\n\r\n**After 15.5**\r\n- Better, shareable, IO caching. The cache that @maca88 introduced avoids maybe half the IO a globbing walk does. This is because the file walk hits the disk twice for every subdirectory: once for directories, and once for files. While the directory enumeration hits the cache because it's similar between file walks, the file enumeration misses the cache each time because the cache keys are different (`*.cs`, vs `*.resx`, vs `*`). Other benefits of the general IO cache:\r\n  - can be shared with multiple evaluation stages, like condition or property function existence checks\r\n  - can be pushed down from VS\r\nThe drawback of this cache is that we'll have to reimplement the .Net IO APIs used by evaluation to work on top of the cache's file system object model and not the real file system (e,g, directory enumeration with patterns). I wish .Net had a swap-able abstraction for the file system :(\r\n\r\n- Cache entire file enumerations.\r\n\r\n- EvaluationContext. Put the caches into a central object which can be passed by API callers to multiple Project evaluations to increase the lifetime of the caches. Something like \r\n`var projects = projectPaths.Select(path => new Project(path, evaluationContext))`\r\n\r\n- Look at reducing the number of file walks. It would be nice if we could look ahead at items, collect the literal globs, and do one file walk which collects multiple wildcards. At the very least, we should combine multiple globs from within the same item element into one file walk.\r\n\r\n",
        "createdAt": "2017-09-21T22:38:00Z",
        "updatedAt": "2017-09-21T22:42:12Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "@cdmihai We should try these changes on a non-SSD to see if we get similar wins, spinning disks are worse at parallelism than SSDs.",
        "createdAt": "2017-09-21T23:06:01Z",
        "updatedAt": "2017-09-21T23:06:01Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "Thanks to @lifengl [suggestions](https://github.com/maca88/msbuild/commit/d4fe5588287a418552569f2bad3563971c65ffbe#commitcomment-24443166) I've made [another version](https://github.com/maca88/msbuild/commit/3f60e4f493166103564cfa314735b4299472c64d) which contains the suggested modifications without any caching involved. Also, this time I've made sure that all tests are passing.\r\nBy running the same test as in the previous post, I've got the following results:\r\n```\r\nFile spec: **/*, Call time: 392ms, Returned files: 14\r\nFile spec: **/*.cs, Call time: 355ms, Returned files: 3509\r\nFile spec: **/*.resx, Call time: 258ms, Returned files: 0\r\nFile spec: **\\*.hbm.xml, Call time: 238ms, Returned files: 827\r\nFile spec: **\\*.jpg, Call time: 239ms, Returned files: 1\r\nTotal time: 1484ms\r\n```\r\n\r\nThe performance here is much better beacuse now the excluded patterns are not retrieved from the disk but rather checked with a wildcard matching algorithm that I took from [here](http://www.c-sharpcorner.com/uploadfile/b81385/efficient-string-matching-algorithm-with-use-of-wildcard-characters/), with a minor modification as there was a bug ('BC*' didn't match 'ABC').\r\nAlso, I've added [another scenario](https://github.com/maca88/msbuild/commit/3f60e4f493166103564cfa314735b4299472c64d#diff-64d47c5cbb59959b7b2fa6963672d596R175) where the pattern differs on Windows and Unix, which I learned from [here](https://blogs.msdn.microsoft.com/jeremykuhne/2017/06/04/wildcards-in-windows/).\r\n\r\nThe next thing I tried was to [add a cache](https://github.com/maca88/msbuild/commit/6faf068335630ead080bd3076d76cdc6316730e3) so that all calls would share it, here are the results:\r\n```\r\nFile spec: **/*, Call time: 436ms, Returned files: 14\r\nFile spec: **/*.cs, Call time: 236ms, Returned files: 3509\r\nFile spec: **/*.resx, Call time: 128ms, Returned files: 0\r\nFile spec: **\\*.hbm.xml, Call time: 112ms, Returned files: 827\r\nFile spec: **\\*.jpg, Call time: 97ms, Returned files: 1\r\nTotal time: 1011ms\r\n```\r\n\r\nThe cache was added only for directories as files are now retrieved only once for a pattern. If we compare this result with the result from the previous post on point 3, we can see that in this results, only the first pattern is faster. The reason is that in the previous post all files were retrieved in the first call because they were located in the exclude patterns.\r\nWith this version adding a parallel version is not so simple as we are dealing with a `IEnumerable<>`, also caching required a [special wrapper](https://github.com/maca88/msbuild/commit/6faf068335630ead080bd3076d76cdc6316730e3#diff-64d47c5cbb59959b7b2fa6963672d596R1435).\r\n\r\nEdit:\r\nI managed to make a [parallel version](https://github.com/maca88/msbuild/commit/82a1536c9b95c9c806efe55e92865b5d0c8d3942) by using a [thread safe cache](https://stackoverflow.com/questions/12427097/is-there-an-ienumerable-implementation-that-only-iterates-over-its-source-e-g/12428250#12428250) for `IEnumerable<>` and added a simple logic to calculate the `MaxDegreeOfParallelism` in order to prevent spawning too many tasks.\r\n\r\nHere are the results without caching:\r\n```\r\nFile spec: **/*, Call time: 148ms, Returned files: 14\r\nFile spec: **/*.cs, Call time: 152ms, Returned files: 3509\r\nFile spec: **/*.resx, Call time: 135ms, Returned files: 0\r\nFile spec: **\\*.hbm.xml, Call time: 112ms, Returned files: 827\r\nFile spec: **\\*.jpg, Call time: 92ms, Returned files: 1\r\nTotal time: 643ms\r\n```\r\n\r\nand with caching:\r\n```\r\nFile spec: **/*, Call time: 149ms, Returned files: 14\r\nFile spec: **/*.cs, Call time: 78ms, Returned files: 3509\r\nFile spec: **/*.resx, Call time: 47ms, Returned files: 0\r\nFile spec: **\\*.hbm.xml, Call time: 53ms, Returned files: 827\r\nFile spec: **\\*.jpg, Call time: 42ms, Returned files: 1\r\nTotal time: 369ms\r\n```\r\n\r\nI copied the project to a 1TB 7200rpm HHD to run the test with the parallel version to see the differences and the results were quite surprising for me. By running the test 10 times in a row and comparing the total time, sometimes the SSD was the winner and sometimes the HHD (average difference 50-100ms between the two), so there wasn't a clear winner.\r\n\r\nEdit:\r\nI've made a custom [wildcard matching algorithm](https://github.com/maca88/msbuild/commit/fb509380d6f87997098ac5f08e06bc787ac47a5c) that is faster that the one mentioned above and allocates less memory. ",
        "createdAt": "2017-09-23T11:38:55Z",
        "updatedAt": "2017-09-24T16:48:52Z",
        "author": {
          "login": "maca88"
        }
      },
      {
        "body": "@maca88 This looks really promising. Note I cannot see a license for the code on http://www.c-sharpcorner.com/uploadfile/b81385/efficient-string-matching-algorithm-with-use-of-wildcard-characters/, so if your custom wildcard matching algorithm is based on that - we'll need to clean room implement it on our side.\r\n",
        "createdAt": "2017-09-25T00:44:18Z",
        "updatedAt": "2017-09-25T00:44:18Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "The custom algorithm is based on the ideas from [this article](http://www.drdobbs.com/architecture-and-design/matching-wildcards-an-empirical-way-to-t/240169123), which are:\r\n1. Is enough to store only the last occurrence of the `*` wildcard with the last matched character in the input\r\n2. When a `*` wildcard is encountered, we can skip ahead until we find a match on the character after the wildcard e.g. `(\"aaaab\", \"*b\")` -> we can store `b` from the input instead the first `a`\r\n3. Skip all repetitive `*` wildcards e.g. `(\"aaab\", \"***b\")` -> we can skip the first two `*` wildcards\r\n\r\nBased on the above ideas I made my own implementation that I posted here. I don't know if this is a clean room implementation or not.\r\nAlso, after revisiting the algorithm [I've simplified](https://github.com/maca88/msbuild/commit/5a9fcc448135bb3b7a5f7c91e93012e26e800d2a) it and added a tail matching logic when we encounter a pattern `*?` e.g. `(\"veryloooongstringb\", \"*?b\")` -> only the last two characters will be checked, which was something that came into my mind (no articles involved). [Here](https://github.com/maca88/msbuild/blob/experimental/fileMatcherGetFiles2/src/Shared/FileMatcher.cs#L1378) you can find the current algorithm after the revisit.",
        "createdAt": "2017-09-25T17:21:00Z",
        "updatedAt": "2017-09-25T18:24:26Z",
        "author": {
          "login": "maca88"
        }
      },
      {
        "body": "@maca88 \r\n\r\nWe're really interested in getting your changes as a PR :)\r\n\r\nOne big thing we need to settle is the IP for the pattern matching algorithm. To make sure we've understood it right:\r\n- your first algorithm was based on the code snippet from [this article](http://www.c-sharpcorner.com/uploadfile/b81385/efficient-string-matching-algorithm-with-use-of-wildcard-characters/)\r\n- your second algorithm is written from scratch by you, based on [this article](http://www.drdobbs.com/architecture-and-design/matching-wildcards-an-empirical-way-to-t/240169123)\r\n\r\nIn case there are any IP issues, I quickly [hacked up](https://github.com/cdmihai/msbuild/commit/52592f4aac122cf92b3e1c1ba980b58060192c98) a Regex based implementation of IsMatch to see how it fares. It seems to be doing pretty well: \r\n\r\nInfo:\r\n- glob.proj has all the includes and excludes from a web project, and it globs over an npm_modules directory\r\n- msbuild was built with the Release configuration\r\n\r\nmaster\r\n```\r\nFile spec: **/*.cs, Call time: 1160ms, Returned files: 3512\r\nFile spec: **/*.resx, Call time: 1154ms, Returned files: 0\r\nFile spec: **\\*.hbm.xml, Call time: 147ms, Returned files: 827\r\nFile spec: **\\*.jpg, Call time: 139ms, Returned files: 1\r\n\r\nProject Evaluation Performance Summary:\r\n      105 ms  e:\\delete\\nhibernate-core\\src\\NHibernate.DomainModel\\NHibernate.DomainModel.csproj   2 calls\r\n     1889 ms  e:\\delete\\nhibernate-core\\src\\NHibernate\\NHibernate.csproj   2 calls\r\n     5042 ms  e:\\delete\\nhibernate-core\\src\\NHibernate.Test\\NHibernate.Test.csproj   1 calls\r\n\r\nProject Evaluation Performance Summary:\r\n     7268 ms  E:\\delete\\npm\\glob.proj                    1 calls\r\n```\r\n\r\ncustom pattern matching\r\n```\r\nFile spec: **/*.cs, Call time: 31ms, Returned files: 3512\r\nFile spec: **/*.resx, Call time: 24ms, Returned files: 0\r\nFile spec: **\\*.hbm.xml, Call time: 24ms, Returned files: 827\r\nFile spec: **\\*.jpg, Call time: 20ms, Returned files: 1\r\n\r\nProject Evaluation Performance Summary:\r\n       54 ms  e:\\delete\\nhibernate-core\\src\\NHibernate.DomainModel\\NHibernate.DomainModel.csproj   2 calls\r\n      243 ms  e:\\delete\\nhibernate-core\\src\\NHibernate\\NHibernate.csproj   2 calls\r\n      664 ms  e:\\delete\\nhibernate-core\\src\\NHibernate.Test\\NHibernate.Test.csproj   1 calls\r\n\r\nProject Evaluation Performance Summary:\r\n      698 ms  E:\\delete\\npm\\glob.proj                    1 calls\r\n```\r\n\r\nRegex based matching\r\n```\r\nFile spec: **/*.cs, Call time: 37ms, Returned files: 3512\r\nFile spec: **/*.resx, Call time: 28ms, Returned files: 0\r\nFile spec: **\\*.hbm.xml, Call time: 22ms, Returned files: 827\r\nFile spec: **\\*.jpg, Call time: 37ms, Returned files: 1\r\n\r\nProject Evaluation Performance Summary:\r\n       60 ms  e:\\delete\\nhibernate-core\\src\\NHibernate.DomainModel\\NHibernate.DomainModel.csproj   2 calls\r\n      268 ms  e:\\delete\\nhibernate-core\\src\\NHibernate\\NHibernate.csproj   2 calls\r\n      681 ms  e:\\delete\\nhibernate-core\\src\\NHibernate.Test\\NHibernate.Test.csproj   1 calls\r\n\r\nProject Evaluation Performance Summary:\r\n      724 ms  E:\\delete\\npm\\glob.proj                    1 calls\r\n```",
        "createdAt": "2017-09-27T22:06:46Z",
        "updatedAt": "2017-09-27T22:06:46Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "@cdmihai I would prefer if we didn't use RegEx - it's already showing up on the radar - it's extremely inefficient both in time and memory. ",
        "createdAt": "2017-09-27T22:34:13Z",
        "updatedAt": "2017-09-27T22:34:13Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "We checked with the lawyers, an algorithm based on the csharpcorner article is fine to submit to us for PR. Their terms are very broad and allows site visitors to use code or articles freely and without restriction. And thanks so much @maca88 !",
        "createdAt": "2017-09-27T22:50:22Z",
        "updatedAt": "2017-09-27T22:50:22Z",
        "author": {
          "login": "AndyGerlicher"
        }
      },
      {
        "body": "@cdmihai for the pattern matching algorithm, you understood it correctly.\r\n\r\nI agree with @davkean, in the long term we should get rid of RegEx completely, as it is really slow (create our own glob matching algorithm).\r\n![regex](https://user-images.githubusercontent.com/5311349/30987022-d7f605b8-a495-11e7-9a84-3e75af3a9170.png)\r\nThe above trace was captured when running [the test](https://github.com/maca88/msbuild/commit/24ccceeafb1d7969107fc02c272bcd29909eea4d#diff-7a21f5e73644f08fe8b0dc9763a632aaR30) on the npm project. \r\n\r\nI will create a PR, but before that I will revisit the changes, as I recently discovered that the parallel change doesn't work as expected when we are dealing with paths that are too long, an `AggregateException` is thrown that is not handled correctly by the [`ExceptionHandling.IsIoRelatedException`](https://github.com/Microsoft/msbuild/blob/master/src/Shared/FileMatcher.cs#L1829).\r\nAlso, I don't thnik that [the cache change](https://github.com/maca88/msbuild/commit/6faf068335630ead080bd3076d76cdc6316730e3) should be included, as currently we don't have a shareable cache that would be passed in the `FileMatcher.GetFiles` method. IMO, the caching should be added after we will have the `EvaluationContext` [as explained](https://github.com/Microsoft/msbuild/issues/2392#issuecomment-331301076) by @cdmihai.\r\n",
        "createdAt": "2017-09-28T19:50:20Z",
        "updatedAt": "2017-09-28T20:20:32Z",
        "author": {
          "login": "maca88"
        }
      },
      {
        "body": "@maca88 \r\n\r\nQuite curious, are you profiling Release bits? I had found out that Regex.IsMatch goes way down on Release vs Debug.\r\n\r\nRegarding caching, I think you should put it in. The EvaluationContext will not come in the next VS release, 15.5, so if you add it in VS users will benefit from caching earlier on :). Later when we add in the EvaluationContext, we'll just push the cache into it.\r\nYour cache's lifetime should be the item evaluation phase, so all item operations from one evaluation would reuse it.\r\nIt should probably get created and passed into the LazyItemEvaluator [here](https://github.com/Microsoft/msbuild/blob/master/src/Build/Evaluation/Evaluator.cs#L827), and get to the [include glob expansion](https://github.com/Microsoft/msbuild/blob/master/src/Build/Evaluation/LazyItemEvaluator.IncludeOperation.cs#L99) via the [include operation builder](https://github.com/Microsoft/msbuild/blob/master/src/Build/Evaluation/LazyItemEvaluator.cs#L419). \r\n\r\n",
        "createdAt": "2017-09-28T21:47:11Z",
        "updatedAt": "2017-09-28T21:47:11Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "> Quite curious, are you profiling Release bits?\r\n\r\nIt was in Debug, I forgot to switch in Release. Here is the trace for Release:\r\n![regexrelease](https://user-images.githubusercontent.com/5311349/31028876-ee3cfd44-a54f-11e7-9c34-0f8827287636.png)\r\nEven in Release is still slow.\r\n\r\nFor caching it's settled then, will create and pass the cache into the `LazyItemEvaluator` as you said.\r\n",
        "createdAt": "2017-09-29T18:08:30Z",
        "updatedAt": "2017-09-29T18:08:30Z",
        "author": {
          "login": "maca88"
        }
      },
      {
        "body": "@cdmihai with the new pattern matching logic added by @maca88, I think maybe it is possible to remove the regular expression completely after 15.5.  What is more than the file pattern for file names, the path pattern really adds '**', which is similar to what '*' did on the file name level.\r\n\r\nI think we can implement something like IsMatch(pattern, fullPath) to support patterns like\r\n\"wwwroot\\**\", and it can be optimized to return true for a path \"wwwroot\\ab\\c\", once it reaches \"wwwroot\\\" portion of the string without scanning rest characters.  Also, it can return false for a path like \"abc\\d\" after checking the first character.  That will be somewhat closer to the IsMatch method added in the later iteration of this performance change.\r\n\r\nWith that, it may be possible to get rid of regular expressions completely.\r\n\r\nGo further, with that implementation, we may pull out the local state out of this implementation, and it becomes a no state code + state.  The result is that it can start from the state of the parent directory when it scans into its sub directories.  So, if the top directory is \"abc\", the state will reach \"No match\" state immediately, and if it is an include path, no need to go further to sub directories.  And if the top one is \"wwwroot\", it will enter a state that everything below is matched, and it ends up scanning, if it is the excluded path.  When it scans files directories inside one folder, it will start with a shared state (of the parent folder), and the entire scanning process may be driven by the state.",
        "createdAt": "2017-10-06T22:09:28Z",
        "updatedAt": "2017-10-06T22:09:28Z",
        "author": {
          "login": "lifengl"
        }
      },
      {
        "body": "@lifengl \r\nI also think we could get rid of Regex, though we'd have to be careful of complex patterns like `wwwroot/**/a?b/**/c*d/**/file?.cs`. If there are any other directory fragments after a recursive wildcard, we can't backtrack early and we have to walk the file system in case there's a match for the remaining directory wildcards. The exclude patterns can be equally complex. The current code switches to regexes if it finds any other directories after the first recursive wildcard directory. Didn't think to deeply about it, but one way to get over it is to break.\r\n\r\nI'll profile globbing with @maca88's changes and see where the next bottleneck is, Regexes or IO.",
        "createdAt": "2017-10-07T01:23:47Z",
        "updatedAt": "2017-10-07T01:23:47Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "This has been resolved by: https://github.com/Microsoft/msbuild/pull/2572.",
        "createdAt": "2017-10-10T23:45:58Z",
        "updatedAt": "2017-10-10T23:45:58Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "@cdmihai \r\nBy the way did you consider compiling Regex i.e. RegexOptions.Compiled? This should improve performance of IsMatch() call however compilation will take some time. It may be worthwhile if the same expression is evaluated multiple times.",
        "createdAt": "2017-12-15T17:42:54Z",
        "updatedAt": "2017-12-15T17:42:54Z",
        "author": {
          "login": "zhilich"
        }
      },
      {
        "body": "Opened #2817",
        "createdAt": "2017-12-15T21:29:09Z",
        "updatedAt": "2017-12-15T21:29:09Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "Although it might take some work or complexity to make an algorithm to support complex patterns, the 99% of globs used in projects are very simple.  They often start from a base folder, either one level or all sub directories with some file extensions.  We just need a very efficient code to handle those cases, and leave odd complex patterns to the regular expression.  This might give you a more efficient product in the real world scenario than a complete algorithm.\r\n\r\nSent from my phone\r\n\r\nOn Dec 16, 2017, at 10:29 AM, Mihai Codoban <notifications@github.com<mailto:notifications@github.com>> wrote:\r\n\r\n\r\nOpened #2817<https://eur01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2FMicrosoft%2Fmsbuild%2Fissues%2F2817&data=02%7C01%7C%7C4473ca66a81b4d90f71208d54402e7e2%7C84df9e7fe9f640afb435aaaaaaaaaaaa%7C1%7C0%7C636489701624596121&sdata=NniN2w43ePqsZqBVMtKOgOOzQKtc6MO51FG5leR8bds%3D&reserved=0>\r\n\r\n\u2014\r\nYou are receiving this because you were mentioned.\r\nReply to this email directly, view it on GitHub<https://eur01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2FMicrosoft%2Fmsbuild%2Fissues%2F2392%23issuecomment-352116354&data=02%7C01%7C%7C4473ca66a81b4d90f71208d54402e7e2%7C84df9e7fe9f640afb435aaaaaaaaaaaa%7C1%7C0%7C636489701624596121&sdata=DKaiHp3VcdiiHdOZwN0QcWCy2dacQ3qmWNZKdYiI2bI%3D&reserved=0>, or mute the thread<https://eur01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fnotifications%2Funsubscribe-auth%2FALGWwo6xMiUnuolX6Ph6CSJREpubDxIcks5tAuSvgaJpZM4Or9vl&data=02%7C01%7C%7C4473ca66a81b4d90f71208d54402e7e2%7C84df9e7fe9f640afb435aaaaaaaaaaaa%7C1%7C0%7C636489701624596121&sdata=cMOZOXCR%2FbhFGAOrcJuhoCdNVDHUJTaPdNxZlXRAbcA%3D&reserved=0>.\r\n",
        "createdAt": "2017-12-16T01:09:07Z",
        "updatedAt": "2017-12-16T01:09:07Z",
        "author": {
          "login": "lifengl"
        }
      }
    ]
  }
}