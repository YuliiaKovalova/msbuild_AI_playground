{
  "number": 4934,
  "title": "SignFile task fails signing MSI package",
  "body": "### Steps to reproduce\r\nUse SignFile task to sign MSI package.\r\n\r\nProject file\r\n```xml\r\n<Project>\r\n  <PropertyGroup>\r\n    <Extension>cs</Extension>\r\n  </PropertyGroup>\r\n  \r\n  <Target Name=\"Build\">\r\n    <SignFile\r\n      CertificateThumbprint=\"$(CertificateThumbprint)\"\r\n      TimestampUrl=\"$(TimestampUrl)\"\r\n      SigningTarget=\"$(OutputPath)Installer.msi\" />\r\n  </Target>\r\n</Project>\r\n```\r\n\r\n### Expected  behavior\r\nMSI file gets signed.\r\n\r\n### Actual behavior\r\n\r\nerror MSB3482: An error occurred while signing: Invalid character in the given encoding. Line 1, position 1.\r\n\r\n### Environment data\r\n`msbuild /version` output:\r\n15.9.21.664\r\n\r\nOS info:\r\nWindows 10 Pro\r\nVersion: 1903\r\nOS Build: 18362.476\r\n\r\nAdditional info:\r\n`SecurityUtilities.SignFileInternal(X509Certificate2, Uri, string,bool,ResourceManager)` checks if the file is exe or dll file `PathUtil.IsPEFile(path)`. MSI appear not to be a exe or dll file, so it tries handling it as xml manifest, yet it is not xml ither.\r\n",
  "state": "CLOSED",
  "createdAt": "2019-11-19T12:10:31Z",
  "updatedAt": "2024-02-21T17:06:00Z",
  "closedAt": "2019-12-17T08:49:40Z",
  "author": {
    "login": "tomuxmon"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Found out that workaround is possible. A bit dirty but works.\r\n\r\n```xml\r\n<Project>\r\n  <PropertyGroup Condition=\"$(UWPSDKPath) == ''\">\r\n    <!-- https://docs.microsoft.com/en-us/windows/uwp/updates-and-versions/choose-a-uwp-version -->\r\n    <!-- https://docs.microsoft.com/en-us/visualstudio/msbuild/property-functions?view=vs-2019 -->\r\n    <!-- https://docs.microsoft.com/en-us/dotnet/api/microsoft.build.utilities.toollocationhelper -->\r\n    <!--brute force searching location of latest sign tool in all possible windows sdk's (UWP sdk's) -->\r\n    <!--NOTE: did not use [Microsoft.Build.Utilities.ToolLocationHelper]::GetSDKContentFolderPath('Windows', '10.0', 'UAP', null, '10.0.18362.0', 'bin', null) since it does not work on older MSBuilds-->\r\n    <UWPSDKPathBin Condition=\"$(UWPSDKPath) == ''\" >$([Microsoft.Build.Utilities.ToolLocationHelper]::GetPlatformSDKLocation('Windows', '10.0'))bin</UWPSDKPathBin>\r\n    <UWPSDKPath>$(UWPSDKPathBin)\\10.0.18362.0</UWPSDKPath>\r\n    <UWPSDKPath Condition=\"!Exists('$(UWPSDKPath)')\" >$(UWPSDKPathBin)\\10.0.17763.0</UWPSDKPath>\r\n    <UWPSDKPath Condition=\"!Exists('$(UWPSDKPath)')\" >$(UWPSDKPathBin)\\10.0.17134.0</UWPSDKPath>\r\n    <UWPSDKPath Condition=\"!Exists('$(UWPSDKPath)')\" >$(UWPSDKPathBin)\\10.0.16299.0</UWPSDKPath>\r\n    <UWPSDKPath Condition=\"!Exists('$(UWPSDKPath)')\" >$(UWPSDKPathBin)\\10.0.15063.0</UWPSDKPath>\r\n    <UWPSDKPath Condition=\"!Exists('$(UWPSDKPath)')\" >$(UWPSDKPathBin)\\10.0.14393.0</UWPSDKPath>\r\n    <UWPSDKPath Condition=\"!Exists('$(UWPSDKPath)')\" >$(UWPSDKPathBin)\\10.0.10586.0</UWPSDKPath>\r\n    <UWPSDKPath Condition=\"!Exists('$(UWPSDKPath)')\" >$(UWPSDKPathBin)\\10.0.10240.0</UWPSDKPath>\r\n    <UWPSDKPath Condition=\"!Exists('$(UWPSDKPath)')\" >$(UWPSDKPathBin)</UWPSDKPath>\r\n    <UWPSDKPathX86>$(UWPSDKPath)\\x86</UWPSDKPathX86>\r\n    <UWPSDKPathX64>$(UWPSDKPath)\\x64</UWPSDKPathX64>\r\n    <SignToolPathX86>$(UWPSDKPathX86)\\signtool.exe</SignToolPathX86>\r\n    <SignToolPathX64>$(UWPSDKPathX64)\\signtool.exe</SignToolPathX64>\r\n  </PropertyGroup>\r\n  \r\n  <Target Name=\"Build\">\r\n    <Exec Command=\"&quot;$(SignToolPathX64)&quot; sign /fd sha256 /sha1 $(CertificateThumbprint) /t &quot;$(TimestampUrl)&quot; &quot;$(OutputPath)Installer.msi&quot;\" StandardOutputImportance=\"high\" />\r\n  </Target>\r\n</Project>\r\n```",
        "createdAt": "2019-11-20T09:49:13Z",
        "updatedAt": "2019-11-20T09:49:13Z",
        "author": {
          "login": "tomuxmon"
        }
      },
      {
        "body": "It looks like the task is designed only to sign executables and ClickOnce manifests.\r\n\r\nhttps://github.com/microsoft/msbuild/blob/e812790eabece155f9ea7cbc13d57ce1ad7bff19/src/Tasks/SignFile.cs#L18\r\n\r\nDid you see documentation suggesting otherwise?",
        "createdAt": "2019-12-16T21:45:59Z",
        "updatedAt": "2019-12-16T21:45:59Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "No, found no documentation suggesting that. I have delved into Microsoft.CSharp.Core.targets and deeper when I was investigating how GenerateDeploymentManifest works (some long time ago) and discovered the existence of SignFile. I assumed it was for all types of files, and then have started replacing our internal ugly .bat file execution based signing mechanism. Then I learned that I assumed wrong. \r\nI guess it would be possible to check if you are trying to sign MSI (PathUtil.IsMSIFile(path)?) or executable (PathUtil.IsPEFile(path)) and only then fall back to XML manifest signing. But since the workaround works well I guess I will just close it.\r\n\r\nThanks.",
        "createdAt": "2019-12-17T08:49:40Z",
        "updatedAt": "2019-12-17T08:49:40Z",
        "author": {
          "login": "tomuxmon"
        }
      },
      {
        "body": "Of topic. \r\nIn a workaround I just brute force search the location of SDK bin path. Is there a better (expected) way of doing it?",
        "createdAt": "2019-12-17T08:58:55Z",
        "updatedAt": "2019-12-17T08:58:55Z",
        "author": {
          "login": "tomuxmon"
        }
      },
      {
        "body": "Off-topic:\r\n\r\nThe SignFile task used \"signtool\" internally to sign the PE file. Don't know why they don't consider signing files like MSI with the same tool...\r\n\r\n```csharp\r\n\tif (PathUtil.IsPEFile(path))\r\n\t{\r\n\t\tif (!IsCertInStore(cert))\r\n\t\t{\r\n\t\t\tthrow new InvalidOperationException(resources.GetString(\"SignFile.CertNotInStore\"));\r\n\t\t}\r\n\t\tSignPEFile(cert, timestampUrl, path, resources, flag);\r\n\t}\r\n```\r\n\r\n```csharp\r\npublic static bool IsPEFile(string path)\r\n{\r\n\tbyte[] array = new byte[2];\r\n\tusing (Stream stream = File.Open(path, FileMode.Open, FileAccess.Read, FileShare.Read))\r\n\t{\r\n\t\tstream.Read(array, 0, 2);\r\n\t}\r\n\tif (array[0] == 77)\r\n\t{\r\n\t\treturn array[1] == 90;\r\n\t}\r\n\treturn false;\r\n}\r\n```\r\n\r\n```csharp\r\nprivate static void SignPEFileInternal(X509Certificate2 cert, Uri timestampUrl, string path, ResourceManager resources, bool useSha256, bool useRFC3161Timestamp)\r\n{\r\n\tProcessStartInfo startInfo = new ProcessStartInfo(GetPathToTool(resources), GetCommandLineParameters(cert.Thumbprint, timestampUrl, path, useSha256, useRFC3161Timestamp))\r\n\t{\r\n\t\tCreateNoWindow = true,\r\n\t\tUseShellExecute = false,\r\n\t\tRedirectStandardError = true,\r\n\t\tRedirectStandardOutput = true\r\n\t};\r\n\tProcess process = null;\r\n\ttry\r\n\t{\r\n\t\tprocess = Process.Start(startInfo);\r\n\t\tprocess.WaitForExit();\r\n\t\twhile (!process.HasExited)\r\n\t\t{\r\n\t\t\tThread.Sleep(50);\r\n\t\t}\r\n\t\tswitch (process.ExitCode)\r\n\t\t{\r\n\t\tcase 0:\r\n\t\t\tbreak;\r\n\t\tcase 1:\r\n\t\t\tthrow new ApplicationException(string.Format(CultureInfo.InvariantCulture, resources.GetString(\"SecurityUtil.SigntoolFail\"), path, process.StandardError.ReadToEnd()));\r\n\t\tcase 2:\r\n\t\t\tthrow new WarningException(string.Format(CultureInfo.InvariantCulture, resources.GetString(\"SecurityUtil.SigntoolWarning\"), path, process.StandardError.ReadToEnd()));\r\n\t\tdefault:\r\n\t\t\tthrow new ApplicationException(string.Format(CultureInfo.InvariantCulture, resources.GetString(\"SecurityUtil.SigntoolFail\"), path, process.StandardError.ReadToEnd()));\r\n\t\t}\r\n\t}\r\n\tfinally\r\n\t{\r\n\t\tprocess?.Close();\r\n\t}\r\n}\r\n```\r\n\r\n```csharp\r\ninternal static string GetPathToTool(ResourceManager resources)\r\n{\r\n\tstring text = ToolLocationHelper.GetPathToWindowsSdkFile(\"signtool.exe\", TargetDotNetFrameworkVersion.Version462, VisualStudioVersion.Version150);\r\n\tif (text == null || !Microsoft.Build.Shared.FileSystem.FileSystems.Default.FileExists(text))\r\n\t{\r\n\t\ttext = ToolLocationHelper.GetPathToWindowsSdkFile(\"signtool.exe\", TargetDotNetFrameworkVersion.Version45, VisualStudioVersion.Version110);\r\n\t}\r\n\tif (text == null || !Microsoft.Build.Shared.FileSystem.FileSystems.Default.FileExists(text))\r\n\t{\r\n\t\tstring pathToDotNetFrameworkSdk = ToolLocationHelper.GetPathToDotNetFrameworkSdk(TargetDotNetFrameworkVersion.Version40, VisualStudioVersion.Version100);\r\n\t\tif (pathToDotNetFrameworkSdk != null)\r\n\t\t{\r\n\t\t\ttext = Path.Combine(pathToDotNetFrameworkSdk, \"bin\", \"signtool.exe\");\r\n\t\t}\r\n\t}\r\n\tif (text == null || !Microsoft.Build.Shared.FileSystem.FileSystems.Default.FileExists(text))\r\n\t{\r\n\t\ttext = GetVersionIndependentToolPath(\"signtool.exe\");\r\n\t}\r\n\tif (text == null || !Microsoft.Build.Shared.FileSystem.FileSystems.Default.FileExists(text))\r\n\t{\r\n\t\ttext = Path.Combine(Directory.GetCurrentDirectory(), \"signtool.exe\");\r\n\t}\r\n\tif (!Microsoft.Build.Shared.FileSystem.FileSystems.Default.FileExists(text))\r\n\t{\r\n\t\tthrow new ApplicationException(string.Format(CultureInfo.CurrentCulture, resources.GetString(\"SecurityUtil.SigntoolNotFound\"), text));\r\n\t}\r\n\treturn text;\r\n}\r\n```",
        "createdAt": "2020-07-23T01:15:06Z",
        "updatedAt": "2020-07-23T01:15:06Z",
        "author": {
          "login": "sumtec"
        }
      }
    ]
  }
}