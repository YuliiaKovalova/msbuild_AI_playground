{
  "number": 7800,
  "title": "Why the very first design time build after switching from console to VS IDE changes the *.csproj.AssemblyReference.cache files?",
  "body": "## Visual Studio Version\r\n17.1.3\r\n\r\n## Summary\r\nI check the *.csproj.AssemblyReference.cache files after console msbuild and after the first design time build in VS IDE. They are different even though nothing has changed. Note that consecutive msbuild runs or regular builds in VS IDE do not change them. Only after switching from the console build to a new VS IDE instance that runs the first design time build do we see the issue.\r\n\r\n## Steps to Reproduce\r\n\r\n1. git clean -qdfx\r\n2. build with msbuild\r\n3. Save the *.csproj.AssemblyReference.cache files\r\n4. build with msbuild\r\n5. Save the *.csproj.AssemblyReference.cache files\r\n6. open devenv\r\n7. wait for the design time build to finish\r\n8. Check the *.csproj.AssemblyReference.cache files \r\n\r\nI have the binary logs and the selected files saved aside for each build including the design time build, but I do not want to upload them to a public location. Is there a private upload link?\r\n\r\n## Expected Behavior\r\nAll the files are identical.\r\n\r\n## Actual Behavior\r\nThe design time build produces a different file\r\n\r\n## User Impact\r\nI do not know. It may be a symptom of a bigger problem.\r\n",
  "state": "OPEN",
  "createdAt": "2022-06-27T23:20:44Z",
  "updatedAt": "2024-04-04T15:14:36Z",
  "closedAt": null,
  "author": {
    "login": "MarkKharitonov"
  },
  "labels": [
    "backlog",
    "Area: Task: Resolve Assembly References (RAR)",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Could it be that different versions of MSBuild are involved in each of your scenarios? Does it reproduce if you use the VS developer command prompt?",
        "createdAt": "2022-06-28T02:50:17Z",
        "updatedAt": "2022-06-28T02:50:17Z",
        "author": {
          "login": "drewnoakes"
        }
      },
      {
        "body": "We use exactly the same version of msbuild. The `$PROFILE` script loads the dev tools. Here:\r\n```\r\nC:\\> msbuild -version\r\nMicrosoft (R) Build Engine version 17.1.0+ae57d105c for .NET Framework\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n17.1.0.7609\r\nC:\\> (get-command msbuild).path\r\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\\\MSBuild\\Current\\Bin\\amd64\\MSBuild.exe\r\nC:\\>\r\n```\r\nI can upload the binary logs, along with some files I captured after each step. But I prefer a private upload link if possible.",
        "createdAt": "2022-06-28T02:56:34Z",
        "updatedAt": "2022-06-28T02:56:34Z",
        "author": {
          "login": "MarkKharitonov"
        }
      },
      {
        "body": "https://github.com/dotnet/msbuild/issues/7752",
        "createdAt": "2022-06-28T04:21:35Z",
        "updatedAt": "2022-06-28T13:52:54Z",
        "author": {
          "login": "MarkKharitonov"
        }
      },
      {
        "body": "Just checked with 17.2.5 - same behavior. The *.csproj.AssemblyReference.cache files are changed by the design time build.",
        "createdAt": "2022-06-28T04:40:13Z",
        "updatedAt": "2022-06-28T04:40:13Z",
        "author": {
          "login": "MarkKharitonov"
        }
      },
      {
        "body": "I have additional information. I have tested on a big solution (200+ projects). This time some (not all) *.csproj.AssemblyReference.cache files are rewritten after the second msbuild run (when nothing has changed). So, no recompilation, but without knowing the msbuild internals I fear these changes may affect other important (and expensive) targets like `ResolveAssemblyReference`.\r\n\r\nI feel this should be moved to the msbuild github issues.\r\n\r\nI have the binary logs. I know having a real repro code is better, but that would have take time I do not have at the moment.",
        "createdAt": "2022-07-04T17:45:43Z",
        "updatedAt": "2022-07-04T17:45:43Z",
        "author": {
          "login": "MarkKharitonov"
        }
      },
      {
        "body": "Moving to dotnet/msbuild as I don't see how the project system is involved here.",
        "createdAt": "2022-07-08T03:51:37Z",
        "updatedAt": "2022-07-08T03:51:37Z",
        "author": {
          "login": "drewnoakes"
        }
      },
      {
        "body": "Are the cache files byte for byte identical with the ones they over wrote? ",
        "createdAt": "2022-07-08T04:07:08Z",
        "updatedAt": "2022-07-08T04:07:08Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "No, they are different. The code does not recompile, so it does not affect the `Csc` task, but I am afraid it affects the `ResolveAssemblyReferences` task, which is not less expensive.\r\nI have captured the timestamps before and after plus the binary logs themselves. I can rerun it and capture some cache files before and after. If there is a private upload link, I can upload all of it there.",
        "createdAt": "2022-07-08T04:11:15Z",
        "updatedAt": "2022-07-08T04:11:15Z",
        "author": {
          "login": "MarkKharitonov"
        }
      },
      {
        "body": "It might be interesting to binary diff them to get an idea what changed, e.g. something like a version number. (I'm not on the team and no doubt the code is totally changed from when I was)",
        "createdAt": "2022-07-08T04:24:53Z",
        "updatedAt": "2022-07-08T04:24:53Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "@MarkKharitonov for a private-to-Microsoft upload channel you can [open a feedback ticket](https://docs.microsoft.com/visualstudio/ide/feedback-options). After it's created, that will open an internal bug. If you post the link here we can bypass the usual routing.\r\n\r\nThis doesn't seem like it should be the case, but I am skeptical that just changing the file is causing any perf degradation. RAR is not completely bypassed when the cache is up to date, so touching it is likely irrelevant.\r\n\r\nTheory: the change in the cache may be a result of running on a different node that has built different projects and thus has different things in its in-memory cache.",
        "createdAt": "2022-07-08T13:43:32Z",
        "updatedAt": "2022-07-08T13:43:32Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Here you go - https://developercommunity.visualstudio.com/t/Why-msbuild-overwrites-some-csprojAss/10090995?space=61&entry=problem\r\n\r\nHow do I get an upload link?",
        "createdAt": "2022-07-08T14:53:29Z",
        "updatedAt": "2022-07-08T14:53:29Z",
        "author": {
          "login": "MarkKharitonov"
        }
      },
      {
        "body": "@MarkKharitonov You should be able to add a comment, mark it as private to Microsoft, and use the paper-clip icon to add arbitrary files.",
        "createdAt": "2022-07-08T14:57:44Z",
        "updatedAt": "2022-07-08T14:57:44Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I was able to upload all the logs to the aforementioned feedback issue.\r\nThank you.",
        "createdAt": "2022-07-08T16:30:03Z",
        "updatedAt": "2022-07-14T02:37:32Z",
        "author": {
          "login": "MarkKharitonov"
        }
      },
      {
        "body": "> Theory: the change in the cache may be a result of running on a different node that has built different projects and thus has different things in its in-memory cache.\r\n\r\nIf the in-memory cache has anything the file state doesn't, it should write it into the file state, so the file state should be complete either way. Guess pre-looking at it: danmoseley's version change sounds plausible, or it could just be that it found the same version at a different path.\r\n",
        "createdAt": "2022-08-04T17:05:24Z",
        "updatedAt": "2022-08-04T17:05:24Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "Small update:\r\nI arbitrarily looked at the second assembly that was \"different.\" Apparently the version was the same, but the lastModified timestamp changed\u2014from 3/26/2018 to 3/27/2018. This was Microsoft.CSharp.dll. The paths were the same, as was everything else about them. My current hypothesis is that there's something different about how timestamps are calculated between when we calculate them from a command line build and when VS calculates them. I can probably find how we calculate them, but I will need to solicit help to figure out how VS calculates them.",
        "createdAt": "2022-08-04T21:05:26Z",
        "updatedAt": "2022-08-04T21:05:26Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "The two timestamps are four hours apart. @MarkKharitonov, are you four hours away from UTC, by chance? (In either direction)",
        "createdAt": "2022-08-04T21:08:11Z",
        "updatedAt": "2022-08-04T21:10:16Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "Ok, so we seem to use UTC. I would argue that's better behavior, so if I can find code suggesting VS uses local time for timestamps, I'd suggest we recommend they change that. (I'm not sure if they'll be able to; it might be a breaking change.)",
        "createdAt": "2022-08-04T21:17:04Z",
        "updatedAt": "2022-08-04T21:17:04Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "The other interesting part of this is that it only seemed to affect some packages. If I'm right, that suggests that some packages' timestamps were recorded in (or converted to) local time, whereas others were UTC.",
        "createdAt": "2022-08-04T21:19:31Z",
        "updatedAt": "2022-08-04T21:19:31Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "@Forgind - I am in EST, which is indeed 4 hours off the UTC.",
        "createdAt": "2022-08-04T21:27:47Z",
        "updatedAt": "2022-08-04T21:27:47Z",
        "author": {
          "login": "MarkKharitonov"
        }
      },
      {
        "body": "I see no reason for time stamps to be stored in local time. When I travel, it shouldn't trigger a clean build.\n\nOne scenario VS might care about though (assuming it is a VS issue) is operating on the same build tree with both an older and newer VS. Presumably switching to the other one should not trigger a rebuild either.",
        "createdAt": "2022-08-04T21:32:17Z",
        "updatedAt": "2022-08-04T21:32:39Z",
        "author": {
          "login": "danmoseley"
        }
      }
    ]
  }
}