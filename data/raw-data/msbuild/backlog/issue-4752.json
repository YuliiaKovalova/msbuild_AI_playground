{
  "number": 4752,
  "title": "Get the renamed Platform passed in from command-line",
  "body": "### Steps to reproduce\r\nIt is allowed to renamed a platform from \"AnyCPU, x86, x64\" to a customized name for a solution, such that we can build with a specific platform with command like:\r\n\r\n`msbuild MSBuildTests.sln -p:Platform=MyPlatform1;Configuration=MyConfig1`\r\n\r\nWe can get MyConfig1 from `$(Configuration)`  in a `.csproj`, However, there is no way to get the `MyPlatform1` argument from `$(Platform)`  as it is overwritten by  `x64` (assume it is renamed from x64).\r\n\r\nThere should be a way to get the renamed platform that passed in from command-line when we build on a `.sln`. Or we already have it?\r\n\r\nProject file\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n    <Platforms>AnyCPU;x64</Platforms>\r\n  </PropertyGroup>\r\n\r\n  <Target Name=\"GetRenamedPlatform\">\r\n    <Message Text=\"$(Platform)\" /> <!--this will print x64-->\r\n  </Target>\r\n\r\n</Project>\r\n```\r\n\r\nDirectory contents:\r\n```\r\n/\r\n- MSBuildTests.sln\r\n- MSbuildTests/\r\n     - c.cs\r\n     - MSBuildTests.csproj\r\n```\r\n\r\nCommand line\r\n```\r\n`msbuild MSbuildTests.sln -p:platform=MyPlatform1 -t:GetRenamedPlatform`\r\n```\r\n### Expected  behavior\r\nPrint \"MyPlatform1\"\r\n\r\n### Actual behavior\r\nPrint \"x64\"\r\n\r\n### Environment data\r\n`msbuild /version` output:\r\nMicrosoft (R) Build Engine version 16.2.37902+b5aaefc9f for .NET Framework\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n16.2.37902.0\r\n\r\n",
  "state": "OPEN",
  "createdAt": "2019-09-20T01:34:51Z",
  "updatedAt": "2024-02-21T16:30:39Z",
  "closedAt": null,
  "author": {
    "login": "goyzhang"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Discussion"
  },
  "comments": {
    "nodes": [
      {
        "body": "Can you share what your solution looks like? I imagine that's where you did the platform customization?",
        "createdAt": "2019-09-23T19:24:15Z",
        "updatedAt": "2019-09-23T19:24:15Z",
        "author": {
          "login": "livarcocc"
        }
      },
      {
        "body": "> Can you share what your solution looks like? I imagine that's where you did the platform customization?\r\n\r\nSure, actually I rename the platform from VS:\r\n![image](https://user-images.githubusercontent.com/24909320/65495952-27071580-deea-11e9-9675-5418d21c80fd.png)\r\nAnd the .sln, it feels like the `platform`  passed in is mapped by some build target and I have no way to get it back:\r\n\r\n```\r\nMicrosoft Visual Studio Solution File, Format Version 12.00\r\n# Visual Studio Version 16\r\nVisualStudioVersion = 16.0.29306.81\r\nMinimumVisualStudioVersion = 10.0.40219.1\r\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"MSBuildFwTests\", \"MSBuildFwTests\\MSBuildFwTests.csproj\", \"{5BA681DD-D19F-46EE-BB9C-469D3728F81B}\"\r\nEndProject\r\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"MSbuildTests\", \"MSbuildTests\\MSbuildTests.csproj\", \"{7BA15D6D-C27F-4F98-B6A2-A53CDF150223}\"\r\nEndProject\r\nGlobal\r\n\tGlobalSection(SolutionConfigurationPlatforms) = preSolution\r\n\t\tDebug|Any CPU = Debug|Any CPU\r\n\t\tDebug|MyPlatform1 = Debug|MyPlatform1\r\n\t\tRelease|Any CPU = Release|Any CPU\r\n\t\tRelease|MyPlatform1 = Release|MyPlatform1\r\n\tEndGlobalSection\r\n\tGlobalSection(ProjectConfigurationPlatforms) = postSolution\r\n\t\t{5BA681DD-D19F-46EE-BB9C-469D3728F81B}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{5BA681DD-D19F-46EE-BB9C-469D3728F81B}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{5BA681DD-D19F-46EE-BB9C-469D3728F81B}.Debug|MyPlatform1.ActiveCfg = Debug|Any CPU\r\n\t\t{5BA681DD-D19F-46EE-BB9C-469D3728F81B}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{5BA681DD-D19F-46EE-BB9C-469D3728F81B}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{5BA681DD-D19F-46EE-BB9C-469D3728F81B}.Release|MyPlatform1.ActiveCfg = Release|Any CPU\r\n\t\t{5BA681DD-D19F-46EE-BB9C-469D3728F81B}.Release|MyPlatform1.Build.0 = Release|Any CPU\r\n\t\t{7BA15D6D-C27F-4F98-B6A2-A53CDF150223}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{7BA15D6D-C27F-4F98-B6A2-A53CDF150223}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{7BA15D6D-C27F-4F98-B6A2-A53CDF150223}.Debug|MyPlatform1.ActiveCfg = Debug|x64\r\n\t\t{7BA15D6D-C27F-4F98-B6A2-A53CDF150223}.Debug|MyPlatform1.Build.0 = Debug|x64\r\n\t\t{7BA15D6D-C27F-4F98-B6A2-A53CDF150223}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{7BA15D6D-C27F-4F98-B6A2-A53CDF150223}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{7BA15D6D-C27F-4F98-B6A2-A53CDF150223}.Release|MyPlatform1.ActiveCfg = Release|x64\r\n\t\t{7BA15D6D-C27F-4F98-B6A2-A53CDF150223}.Release|MyPlatform1.Build.0 = Release|x64\r\n\tEndGlobalSection\r\n\tGlobalSection(SolutionProperties) = preSolution\r\n\t\tHideSolutionNode = FALSE\r\n\tEndGlobalSection\r\n\tGlobalSection(ExtensibilityGlobals) = postSolution\r\n\t\tSolutionGuid = {E3CCA812-786C-4A45-BD6B-F4C8D79DA7F0}\r\n\tEndGlobalSection\r\nEndGlobal\r\n```\r\n",
        "createdAt": "2019-09-24T08:44:27Z",
        "updatedAt": "2019-09-24T08:44:27Z",
        "author": {
          "login": "goyzhang"
        }
      },
      {
        "body": "Any update on this?",
        "createdAt": "2021-03-26T10:23:04Z",
        "updatedAt": "2021-03-26T10:23:04Z",
        "author": {
          "login": "kaylumah"
        }
      },
      {
        "body": "@goyzhang  @kaylumah If I remember correctly from past endeavours, the `$(Platform)` argument points to the active **project** platform and not the **solution** platform (which are two different things) when used in a project file. The way MSBuild works when building a solution from the command line is that it will build every project with the **project** platform selected for the active **solution** platform (Specified in the *.sln file and can be configured using the Configuration Manager in Visual Studio, see images below for examples). It is possible to create solution platforms with custom names, this is not true for project platforms.\r\n\r\n![image](https://user-images.githubusercontent.com/5137829/112810702-96c80480-907b-11eb-8003-a24f9077fec4.png)\r\n\r\n![image](https://user-images.githubusercontent.com/5137829/112811204-1ce44b00-907c-11eb-8b4a-9f0b09474a53.png)\r\n\r\nI agree that it is _very_ confusing that the /p:Platform argument is used to specify the **solution** platform when invoking msbuild.exe and would love to see a proper solution that fixes this issue and allows you to use both the project and solution configuration names in a project file. \r\n\r\nA property called `$(SolutionPlatform)` comes to mind as an obvious solution, but should be assumed optional since a project can also be built outside the context of a solution.",
        "createdAt": "2021-03-29T08:50:33Z",
        "updatedAt": "2021-03-29T08:50:33Z",
        "author": {
          "login": "wouterroos"
        }
      },
      {
        "body": "@rainersigwald @cdmihai apologies for this direct approach, but according to https://github.com/dotnet/msbuild/graphs/contributors you are the top contributors to this repo and might help route this issue to the appropriate people :-) \r\n\r\nAs a workaround can you perhaps suggest a way that works via both the command line and visual studio?\r\nFor example, when building via command line I can do `msbuild mysln.sln /p:CustomProp=MyPlatform` but this would not work in Visual Studio \r\n",
        "createdAt": "2021-05-04T09:16:22Z",
        "updatedAt": "2021-05-04T09:16:22Z",
        "author": {
          "login": "kaylumah"
        }
      },
      {
        "body": "Interestingly enough using before.slnname.sln.targets I get the correct platform, but again that is a version that does not work in both scenarios :( \r\n\r\n```\r\n<Project InitialTargets=\"CaptureCustomPlatform\">\r\n<Project>\r\n    <Target Name=\"CaptureCustomPlatform\">\r\n        <Message Importance=\"High\" Text=\"CaptureCustomPlatform-Platform:$(Platform)\" />\r\n        <PropertyGroup>\r\n            <CustomPlatform>$(Platform)</CustomPlatform>\r\n        </PropertyGroup>\r\n        <Message Importance=\"High\" Text=\"CaptureCustomPlatform-CustomPlatform: $(CustomPlatform)\" />\r\n    </Target>\r\n</Project>\r\n```\r\nPS\r\nUsed `set MSBuildEmitSolution=1 && dotnet build Demo.sln` to figure this out. It creates a file that shows how MSBuild imports the sln. It showed that very briefly the Platform is my custom value before its rewritten later in that file\r\n",
        "createdAt": "2021-05-04T09:21:03Z",
        "updatedAt": "2021-05-04T09:21:03Z",
        "author": {
          "login": "kaylumah"
        }
      },
      {
        "body": "After a quick chat with @KirillOsenkov via Twitter here is our sample case. \r\nNote: sln will not build because it contains nuget packages that are not publicly available but the concept will be clear without building.\r\n\r\nSo from Visual Studio you can see the following configuration:\r\n![image](https://user-images.githubusercontent.com/8428126/117044670-fd8dad00-ad0e-11eb-99ff-245824c19218.png)\r\n\r\nWhich matches our sln file\r\n\r\n```\r\n\tGlobalSection(SolutionConfigurationPlatforms) = preSolution\r\n\t\tDebug|Azure.ServiceFabric = Debug|Azure.ServiceFabric\r\n\t\tDebug|DotNet.ServiceFabric = Debug|DotNet.ServiceFabric\r\n\t\tRelease|Azure.ServiceFabric = Release|Azure.ServiceFabric\r\n\t\tRelease|DotNet.ServiceFabric = Release|DotNet.ServiceFabric\r\n```\r\n\r\nBuilding with `set MSBuildEmitSolution=1 && dotnet build Demo.sln`  I got which actually captures\r\n\r\n```\r\n  <PropertyGroup Condition=\" '$(Platform)' == '' \">\r\n    <Platform>Azure.ServiceFabric</Platform>\r\n  </PropertyGroup>\r\n```\r\n\r\nSo I attempted to capture the value with the use of \r\n\r\nDirectory.Solution.props\r\n\r\n```\r\n<Project InitialTargets=\"CapturePlatformBeforeRewrite\">\r\n    <Target Name=\"CapturePlatformBeforeRewrite\">\r\n        <Message Importance=\"High\" Text=\"Initial Platform $(Platform)\" />\r\n        <PropertyGroup>\r\n            <CopperPlatform>$(Platform)</CopperPlatform>\r\n        </PropertyGroup>\r\n        <Message Importance=\"High\" Text=\"Captured Platform $(CopperPlatform)\" />\r\n    </Target>\r\n</Project>\r\n```\r\nWhich works, but does not make CopperPlatform available for use in other projects.\r\n\r\nFinally when looking for example at `Demo\\Component\\Access\\Solution\\Hosting\\Demo.Access.Solution.Hosting.csproj`\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework Condition=\"'$(Platform)' == 'x64'\">netcoreapp3.1</TargetFramework>\r\n    <TargetFrameworks>netcoreapp3.1</TargetFrameworks>\r\n    <IsPackable>false</IsPackable>\r\n    <Platforms>AnyCPU;x64</Platforms>\r\n    <Configurations>Debug;Release</Configurations>\r\n    <OutputType Condition=\"'$(Platform)' == 'x64'\">Exe</OutputType>\r\n    <DefaultItemExcludes Condition=\"'$(Platform)' == 'AnyCPU'\">PackageRoot/**</DefaultItemExcludes>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Copper.Conventions.Method.Service.DotNet.ServiceFabric\" Version=\"3.0.512\" Condition=\"'$(Platform)' == 'AnyCPU'\" />\r\n    <PackageReference Include=\"Copper.Conventions.Method.Service.Azure.ServiceFabric\" Version=\"3.0.512\" Condition=\"'$(Platform)' == 'x64'\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <ProjectReference Include=\"..\\Service\\Demo.Access.Solution.Service.csproj\" />\r\n    <ProjectReference Include=\"..\\..\\..\\..\\Utilities\\Demo.Utilities.csproj\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <Content Include=\"V1\\Demo.Access.Solution.Local_RabbitMQ.json\">\r\n      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>\r\n    </Content>\r\n  </ItemGroup>\r\n  <UsingTask TaskName=\"TransformXml\" AssemblyFile=\"$(MSBuildExtensionsPath32)\\Microsoft\\VisualStudio\\v$(VisualStudioVersion)\\Web\\Microsoft.Web.Publishing.Tasks.dll\" Condition=\"'$(Platform)' == 'x64'\" />\r\n  <Target Name=\"TransformServiceManifest\" AfterTargets=\"Build\" Condition=\"'$(Platform)' == 'x64'\">\r\n    <TransformXml Source=\"PackageRoot\\ServiceManifest.xml\" Transform=\"PackageRoot\\ServiceManifest.Local.1Node.Transform.xml\" Destination=\"PackageRoot\\ServiceManifest.Local.1Node.xml\" />\r\n    <TransformXml Source=\"PackageRoot\\ServiceManifest.xml\" Transform=\"PackageRoot\\ServiceManifest.Local.5Node.Transform.xml\" Destination=\"PackageRoot\\ServiceManifest.Local.5Node.xml\" />\r\n  </Target>\r\n  <Target Name=\"ECM\" AfterTargets=\"Build\">\r\n    <Message Importance=\"high\" Text=\"$(Platform)\" />\r\n  </Target>\r\n</Project>\r\n\r\n```\r\n\r\nI know do things based on $(Platform)  which works currently in our model because we support one x64 model and one anycpu model. This is going to change to 3 different variants. \r\n\r\nSo ideally something like Wouter proposes SolutionPlatform would work great, and only be applied in context of building SLN.\r\n\r\nNot sure if VS also generates that metaproj file, but perhaps it is a way to capture it.\r\n\r\nSo I guess main issue is to get it working in VisualStudio since MSBuild via commandline would also work by passing a variable. So if you have any suggestions regarding a workaround for that, or can help me route this to the proper team that would be of great help.\r\n\r\n[Demo.zip](https://github.com/dotnet/msbuild/files/6422947/Demo.zip)\r\n\r\nPlease hit me up with any questions.\r\n@goyzhang do you still have your repo case? Problem seems similar and usecase less complex then ours. Perhaps ou can share it too?\r\n",
        "createdAt": "2021-05-04T17:45:18Z",
        "updatedAt": "2021-05-04T17:45:18Z",
        "author": {
          "login": "kaylumah"
        }
      },
      {
        "body": "I suggest filing an issue at https://github.com/dotnet/project-system/issues/new and linking here, that would be for Visual Studio support. You can ask them what are the current limitations to support this scenario.",
        "createdAt": "2021-05-04T17:47:12Z",
        "updatedAt": "2021-05-04T17:47:12Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "Keep this issue for MSBuild support",
        "createdAt": "2021-05-04T17:47:26Z",
        "updatedAt": "2021-05-04T17:47:26Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "I don't think I understand the use case here. Why do you care about the solution platform when you're inside a project?\r\n\r\nIt's generally a **bad** idea to have behavior inside a project that differs based on solution-level details. It means that building the project directly will have different behavior to the should-be-identical build through a solution.",
        "createdAt": "2021-05-04T17:57:26Z",
        "updatedAt": "2021-05-04T17:57:26Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald 99% of our project it does not matter indeed. We do have a small bit that determines how we can run (for example locally vs as a service fabric application). \r\n\r\nThe original point of goyzhang is still valid though `msbuild MSbuildTests.sln -p:platform=MyPlatform1 -t:GetRenamedPlatform` should not overwrite it to AnyCPU.\r\n\r\nIf you have other suggestions to tackle this I am al ears.\r\nShould:\r\n- Ideally, be single solution so users have single entry point\r\n- build via commandline (passing argument like -p:platform or something custom is acceptable\r\n- build in visualstudio.\r\n\r\nIn our case, we generally don't build single projects and only solutions. But you are of course correct that would impact single project build and that we would then need for example to pass extra arguments :)\r\n\r\n",
        "createdAt": "2021-05-04T18:08:07Z",
        "updatedAt": "2021-05-04T18:08:07Z",
        "author": {
          "login": "kaylumah"
        }
      },
      {
        "body": "I'm guessing they want a custom _dimension_, such as a TargetFramework? I think @jasonmalinowski was asking about a similar thing the other day.",
        "createdAt": "2021-05-04T20:58:19Z",
        "updatedAt": "2021-05-04T20:58:19Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "Not sure but my guess is that dimension already exists? Would be the active SolutionPlatform.\r\nBut from other issues, I gather that sln-files are not really something from MSBuild context since its a project based approach.\r\n",
        "createdAt": "2021-05-05T06:18:17Z",
        "updatedAt": "2021-05-05T06:18:17Z",
        "author": {
          "login": "kaylumah"
        }
      },
      {
        "body": "@kaylumah  wouterroo has a good [explanation](https://github.com/dotnet/msbuild/issues/4752#issuecomment-809197233) for my issue.  In practice, I just wanted a way to get the `$(platform)` that was sent in from `msbuild` in .csproj, such that I can do special things(like notify CI) based on what was called by `msbuild MSbuildTests.sln -p:platform=MyPlatform1`. But now there seem to be more subtle issues when you see it from a .csproj's perspective. .csproj doesn't really want to see or care about the property value from .sln. ",
        "createdAt": "2021-05-06T05:00:46Z",
        "updatedAt": "2021-05-06T05:00:46Z",
        "author": {
          "login": "goyzhang"
        }
      },
      {
        "body": "@rainersigwald It's hard to say that this is that **bad**. I think it's reasonable that a single .csproj would build differently depending on its environment (solution settings). I want the csproj to be built in a different way , for instance, with different combinations of projects to be built specified in different \"solution platform\" settings. Apparently, I can't write MSBuild script in .sln, then the project's .csproj seems to be the only place for this? `$SolutionPlatform` mentioned by wouterroos could be one way. Or is there any alternative when I want to built differently based on different solution platforms I set?",
        "createdAt": "2021-05-06T11:11:11Z",
        "updatedAt": "2021-05-06T11:11:11Z",
        "author": {
          "login": "goyzhang"
        }
      }
    ]
  }
}