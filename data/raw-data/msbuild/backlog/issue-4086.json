{
  "number": 4086,
  "title": "Unescape Intrinsic Property Function Does Double-Unescaping",
  "body": "By calling the `Unescape` intrinsic property function (as in `$([MSBuild]::Unescape(...))`), I expect it to do one level of unescaping.\r\n\r\nBut I'm getting double unescaping instead. So turns out I have to do `Escape` twice on the data I'm feeding into the function to get the raw string back. This is not intuitive.\r\n\r\nI guess this happens because one level of unescaping is done in ``Microsoft.Build.Evaluation.Expander`2+Function`1::Execute`` when preparing the argument (`args[n] = EscapingUtilities.UnescapeAll(argumentValue);`), and the second level of unescaping happens when the `Unescape` intrinsic function itself gets actually executed. Seems like it should have been a no-op function.\r\n\r\n### Steps to reproduce\r\n\r\nSuppose we're trying to load a task from a DLL in the folder named `$(The%20Folder)` (literally, with these `$` and `%` characters on disk, why not). You do not need the task DLL, just consider the path and match to the error messages when the task DLL is not found -- we need to get the desired path in the error message.\r\n\r\nI've chosen `UsingTask` for this example because it skips unescaping on its path argument and thus avoids an extra level of possible unescaping.\r\n\r\nRun the project file:\r\n```xml\r\n<Project xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\r\n\t<UsingTask TaskName=\"Unimportant\" AssemblyFile=\"$([MSBuild]::Unescape('C:\\%24(The%2520Folder)\\Task.dll'))\" />\r\n\t<UsingTask TaskName=\"Unimportant\" AssemblyFile=\"$([MSBuild]::Unescape('C:\\%2524(The%252520Folder)\\Task.dll'))\" />\r\n\t<Target Name=\"Target\">\r\n\t\t<Unimportant />\r\n\t</Target>\r\n</Project>\r\n```\r\n\r\n### Expected  behavior\r\n\r\n`... task could not be loaded from the assembly C:\\$(The%20Folder)\\Task.dll \u2026` if the first `UsingTask` unescapes only one level of escaping.\r\n\r\n### Actual behavior\r\n\r\n`...  task could not be loaded from the assembly C:\\$(The Folder)\\Task.dll \u2026`, as two levels of escaping have been lifted.\r\n\r\nIf the first `UsingTask` element is commented out to let the second one work (that's doubly-escaped), we see the expected result.\r\n\r\n### Environment data\r\n`msbuild /version` output:\r\n```\r\nMicrosoft (R) Build Engine version 15.8.169+g1ccb72aefa for .NET Framework\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n15.8.169.51996\r\n```\r\nOS info: `Microsoft Windows [Version 10.0.17134.523]`\r\n\r\nIf applicable, version of the tool that invokes MSBuild (Visual Studio, dotnet CLI, etc):\r\n\r\nPS What would be the proper workaround, safest around different MSBuild versions out there starting with v4.0, to emit a project file which would pass the task path correctly?",
  "state": "OPEN",
  "createdAt": "2019-01-20T04:22:59Z",
  "updatedAt": "2024-02-21T16:32:03Z",
  "closedAt": null,
  "author": {
    "login": "hypersw"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": []
  }
}