{
  "number": 528,
  "title": "Versions of MSBuild NuGet packages are incorrect",
  "body": "The authoring of numerous MSBuild packages, including Microsoft.Build.Utilities.Core, includes dependencies to other MSBuild packages without version specifiers, like so:\n\n```\n<group targetFramework=\".NETPlatform5.0\">\n    <dependency id=\"Microsoft.Build.Framework\" />\n</group>\n```\n\nThis causes the implicit version reference to be 0.0.0, which is a release version. However, the versions for the packages are all prerelease, which causes NuGet to produce warnings about downgrading since we're referencing a prerelease version instead of a release version, e.g.,\n\n```\n ToolsetPackages (>= 1.0.0) -> Roslyn.Build.Util (>= 0.9.2-portable) -> Microsoft.Build.Utilities.Core (>= 0.1.0-preview-00005) -> Microsoft.Build.Framework\n ToolsetPackages (>= 1.0.0) -> Roslyn.Build.Util (>= 0.9.2-portable) -> Microsoft.Build.Framework (>= 0.1.0-preview-00005)\n```\n\nRoslyn solves this by including a `version=\"[$version$]\"` when building our packages, where `$version$` gets replaced during the build by the NuGet package version. This causes all our packages to have explicit references on each other. MSBuild should probably do the same.\n",
  "state": "CLOSED",
  "createdAt": "2016-03-17T17:23:23Z",
  "updatedAt": "2024-02-21T17:28:48Z",
  "closedAt": "2016-08-12T14:48:15Z",
  "author": {
    "login": "agocke"
  },
  "labels": [
    ".NET Core",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "cdmihai"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "@agocke \nI happily tried putting variables into our nuspecs as you suggested but the build failed :(\nIt seems that MSBuild and Roslyn generate packages differently. MSBuild is using a [BuildPackages](https://github.com/dotnet/buildtools/blob/master/src/Microsoft.DotNet.Build.Tasks/PackageFiles/packages.targets#L17) target from the BuildTools repo, whereas Roslyn has its custom [script](https://github.com/dotnet/roslyn/blob/master/build/BuildNuGets.csx)\n\nI am going to try and update the [NugetPack](https://github.com/dotnet/buildtools/blob/master/src/Microsoft.DotNet.Build.Tasks.Packaging/src/NuGetPack.cs) task that buildtools uses so it accepts properties as well, and then send a PR to the buildtools repo with it.\n\nIn the meantime, you can use the same workaround as buildtools is using to acquire msbuild, which is to reference all msbuild packages with the same version, thus forcing nuget to get packages with that version: https://github.com/dotnet/buildtools/blob/master/src/Microsoft.DotNet.Build.Tasks/PackageFiles/tool-runtime/project.json#L6-L10\n",
        "createdAt": "2016-05-20T00:20:58Z",
        "updatedAt": "2016-05-20T00:21:53Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "@cdmihai Any update one this?\n",
        "createdAt": "2016-05-26T16:47:18Z",
        "updatedAt": "2016-05-26T16:47:18Z",
        "author": {
          "login": "tmat"
        }
      },
      {
        "body": "It's in the works. I am currently fixing up other issues with msbuild's nuget packages and then I am going to get back at this. \n\nI am going to fix this by updating the [NugetPack](https://github.com/dotnet/buildtools/blob/master/src/Microsoft.DotNet.Build.Tasks.Packaging/src/NuGetPack.cs) task in BuildTools to accept nuspec $$ properties. That way we can punch in the correct version with every build.\n\nIn the meantime, if this is blocking you, you can work around it by adding references to all of msbuild's nuget packages and explicitly referencing the version you want. This forces nuget to get those versions.\n",
        "createdAt": "2016-05-26T18:12:00Z",
        "updatedAt": "2016-05-26T18:13:13Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "@cdmihai It's not blocking. We are just getting a bunch of warnings. I would rather have a clean build. Are the changes you're working on including making the nuget packages target netstandard and netcoreapp TFMs? That's another thing I run into with the current packages. \n",
        "createdAt": "2016-05-27T21:02:03Z",
        "updatedAt": "2016-05-27T21:02:34Z",
        "author": {
          "login": "tmat"
        }
      },
      {
        "body": "I sent a PR to buildtools: https://github.com/dotnet/buildtools/pull/763\nAs soon as it gets merged and new buildtools packages get out, I can bump up msbuild's dependency of buildtools to latest and send out the msbuild PR.\nI tested out the changes locally, with private build tools packages and everything works (msbuild nuget packages get their p2p references versioned).\n\n@tmat The latest msbuild nuget packages are targeting netstandard1.3. You can reference them from both net46 and netcoreapp.\n",
        "createdAt": "2016-05-31T23:10:39Z",
        "updatedAt": "2016-05-31T23:10:39Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "@cdmihai Any update on this bug?\n",
        "createdAt": "2016-07-12T00:08:27Z",
        "updatedAt": "2016-07-12T00:08:27Z",
        "author": {
          "login": "jasonmalinowski"
        }
      },
      {
        "body": "My PR to the corefx build tools repo that enables the NugetPack task to inject versions into the nuspec did not get much attention and in the meantime I started working on other issues :(\n\nThe plan is to eventually pick up pinging the buildtools repo owners after I get done with other work.\n\nIs this a blocking issue for you? Are you able to use the current workaround of pinning the right msbuild versions in your project.json?\n",
        "createdAt": "2016-07-12T01:27:09Z",
        "updatedAt": "2016-07-12T01:27:09Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "This is somewhat blocking most consumers of the MSBuild package, since we need to manually add these transitive dependencies to any project.json we use to reference MSBuild in order to eclipse the broken dependency.\n",
        "createdAt": "2016-07-12T17:46:02Z",
        "updatedAt": "2016-07-12T17:46:02Z",
        "author": {
          "login": "analogrelay"
        }
      },
      {
        "body": "@cdmihai Any update on this? Looks like https://github.com/dotnet/buildtools/pull/763 was merged.\n",
        "createdAt": "2016-08-01T21:36:00Z",
        "updatedAt": "2016-08-01T21:36:00Z",
        "author": {
          "login": "Sarabeth-Jaffe-Microsoft"
        }
      },
      {
        "body": "@jeffkl is working on bumping msbuild's version of buildtools to get the change, but a lot has changed in buildtools and there's many problems to fix (mainly around corerun.exe -> dotnet.exe)\n",
        "createdAt": "2016-08-02T22:24:44Z",
        "updatedAt": "2016-08-02T22:25:12Z",
        "author": {
          "login": "cdmihai"
        }
      }
    ]
  }
}