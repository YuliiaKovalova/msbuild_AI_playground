{
  "number": 2591,
  "title": "Intellisense missing on project references (design-time build) if you have a COM reference",
  "body": "An internal team reported an issue where referenced types were red underlined in Visual Studio but the build (command-line or VS) reported no errors. All projects in the sln were new SDK projects (most multi targeting).\r\n\r\n![image](https://user-images.githubusercontent.com/9847849/31237115-d61be702-a9aa-11e7-8826-3f978a0f5935.png)\r\n",
  "state": "CLOSED",
  "createdAt": "2017-10-05T15:55:16Z",
  "updatedAt": "2024-02-21T17:16:24Z",
  "closedAt": "2018-06-06T22:37:37Z",
  "author": {
    "login": "AndyGerlicher"
  },
  "labels": [
    "bug",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "AndyGerlicher"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "I haven't figured out the root cause yet (why this appears to work in VS15.2 but not 15.3), but it looks like this particular issue was caused by the presence of a `COMReference`. When removing the COMReference dependency all the references immediately appeared and the Error List window emptied (other than a few missing COM reference types of course).\r\n\r\nTo debug the issue outside of VS I had to emulate a design-time build. I ended up using the file below with `SolutionToBuild` the `.sln` file and `ProjectToBuild` the project in the sln with the issue.\r\n```XML\r\n<Project>\r\n  <PropertyGroup>\r\n    <SolutionToBuild>D:\\test\\...\\solution.sln</SolutionToBuild>\r\n    <ProjectToBuild>D:\\test\\...\\project.csproj</ProjectToBuild>\r\n  </PropertyGroup>\r\n\r\n  <Target Name=\"Build\" >\r\n    <MSBuild Projects=\"$(ProjectToBuild)\"\r\n             Properties=\"SolutionFileName=$([System.IO.Path]::GetFileName('$(SolutionToBuild)'));\r\n                 LangName=en-US;\r\n                 Configuration=Debug;\r\n                 LangID=1033;\r\n                 DesignTimeBuild=true;\r\n                 SolutionDir=$([System.IO.Path]::GetDirectoryName('$(SolutionToBuild)'));\r\n                 SolutionExt=.sln;\r\n                 BuildingInsideVisualStudio=true;\r\n                 DefineExplicitDefaults=true;\r\n                 Platform=AnyCPU;\r\n                 SolutionPath=$(SolutionToBuild);\r\n                 SolutionName=$([System.IO.Path]::GetFileNameWithoutExtension('$(SolutionToBuild)'));\r\n                 DevEnvDir=$(DevEnvDir);\r\n                 BuildingProject=false\"\r\n             Targets=\"CollectResolvedSDKReferencesDesignTime;\r\n                DebugSymbolsProjectOutputGroup;\r\n                ResolveComReferencesDesignTime;\r\n                ContentFilesProjectOutputGroup;\r\n                DocumentationProjectOutputGroupDependencies;\r\n                SGenFilesOutputGroup;\r\n                ResolveProjectReferencesDesignTime;\r\n                SourceFilesProjectOutputGroup;\r\n                DebugSymbolsProjectOutputGroupDependencies;\r\n                SatelliteDllsProjectOutputGroup;\r\n                BuiltProjectOutputGroup;\r\n                SGenFilesOutputGroupDependencies;\r\n                ResolveAssemblyReferencesDesignTime;\r\n                CollectSDKReferencesDesignTime;\r\n                DocumentationProjectOutputGroup;\r\n                PriFilesOutputGroup;\r\n                BuiltProjectOutputGroupDependencies;\r\n                SatelliteDllsProjectOutputGroupDependencies\" />\r\n  </Target>\r\n</Project>\r\n```\r\n\r\nThe issue ended up being that when [ResolveComReference](https://github.com/Microsoft/msbuild/blob/5df95761c73cd6b1b2c35a827ed168e32546388e/src/Tasks/Microsoft.Common.CurrentVersion.targets#L2586) was running, it depended on `ResolveAssemblyReferences` which caused `ResolveAssemblyReferences` to run too early and then skipped later on in the design-time build. Removing the COMReference from the project caused `ResolveComReference` to be skipped and the target order was correct. The underlying issue was that for `ResolveAssemblyReferences` was missing all information about project references. A simple workaround (and may end up being the actual fix) is to add `ResolveProjectReferences;` to the `ResolveAssemblyReferencesDependsOn` property:\r\n https://github.com/Microsoft/msbuild/blob/5df95761c73cd6b1b2c35a827ed168e32546388e/src/Tasks/Microsoft.Common.CurrentVersion.targets#L1941-L1947\r\n\r\nThat file is located in a path like `C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\MSBuild\\15.0\\Bin\\Microsoft.Common.CurrentVersion.targets`. If you modify the file you'll need admin writes and the file might get overwritten by setup the next time there's an upgrade. And be sure to backup the file first.",
        "createdAt": "2017-10-05T16:20:25Z",
        "updatedAt": "2017-10-05T16:20:25Z",
        "author": {
          "login": "AndyGerlicher"
        }
      },
      {
        "body": "I can confirm that the proposed solution fixes the issue on our end. Up til now this affected several of our developers.",
        "createdAt": "2017-12-21T15:12:22Z",
        "updatedAt": "2017-12-21T15:12:22Z",
        "author": {
          "login": "dpsenner"
        }
      },
      {
        "body": "I can also confirm that adding ResolveProjectReferences fixes this for me as well and my com projects. ",
        "createdAt": "2018-02-13T19:40:30Z",
        "updatedAt": "2018-02-13T19:40:30Z",
        "author": {
          "login": "ZedIsDead"
        }
      },
      {
        "body": "A simpler workaround is to add the following to your project file:\r\n\r\n``` XML\r\n\r\n  <Target Name=\"COMReferencesWorkaround\" BeforeTargets=\"ResolveAssemblyReferences\" DependsOnTargets=\"ResolveProjectReferences\">\r\n  </Target>\r\n```",
        "createdAt": "2018-02-14T02:44:24Z",
        "updatedAt": "2018-02-14T02:44:24Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "[https://github.com/Microsoft/msbuild/issues/2853](https://github.com/Microsoft/msbuild/issues/2853) is either a dupe of or related to this issue.\r\n@AndyGerlicher could you please confirm if the current fix also resolve it? Thanks!\r\n",
        "createdAt": "2018-02-14T16:17:57Z",
        "updatedAt": "2018-02-14T16:21:07Z",
        "author": {
          "login": "huizhonglong"
        }
      },
      {
        "body": "@davkean Your simpler work around solved this issue. Also, I checked my Microsoft.Common.CurrentVersion.targets file and it did already have the ResolveAssemblyReferencesDependsOn in there yet I was still having the issue. Thanks!",
        "createdAt": "2018-03-15T21:45:09Z",
        "updatedAt": "2018-03-15T21:45:09Z",
        "author": {
          "login": "ryanbehr"
        }
      },
      {
        "body": "Trying the workaround gets rid this error and generates new ones. Now I get intellisense errors such as: \r\n\r\n\"The type task is defined in an assembly that is not references. You must add a reference to assembly 'netstandard...'\"\r\n\r\nAnyone else experiencing this?",
        "createdAt": "2018-04-12T22:10:04Z",
        "updatedAt": "2018-04-12T22:10:04Z",
        "author": {
          "login": "ptsoccer"
        }
      },
      {
        "body": "I can confirm that we've also hit this issue. For reference, our setup is:\r\n\r\n```\r\n- Class library --> ADODB ref\r\n- Unit test --> ADODB ref & Class Library ref\r\n```\r\n\r\nThe class library builds just fine, but the unit test project intellisense fails when the ADODB COM reference is present.\r\n\r\nPurely for background colour, the reason we need a COM reference is that we're porting an old C++ COM-registered DLL to .NET to fix an issue whereby we still rely on TLS 1.0, and we were hoping to use modern tooling whilst still targeting the full Fx.",
        "createdAt": "2018-05-31T08:42:13Z",
        "updatedAt": "2018-05-31T08:42:13Z",
        "author": {
          "login": "keith-vikode"
        }
      },
      {
        "body": "At some point between visual studio version 15.7.5 and 15.8.1 this became an issue again. My solution has a few com references and after updating from 15.7.5 to 15.8.1, suddenly I have thousands of intellisense errors even though the project builds and runs just fine.\r\n\r\n@Davkean workaround described above on Feb 13, 2018 (editing the project file for every project in the solution) **does** resolve the problem for me.\r\n\r\nHowever, I'm wondering if this workaround is the 'official' solution, or if this indicates that the bug should be re-opened and fixed again?",
        "createdAt": "2018-08-20T12:37:27Z",
        "updatedAt": "2018-08-20T12:37:27Z",
        "author": {
          "login": "lbs-mike"
        }
      },
      {
        "body": "@AndyGerlicher What release did this change make it into?",
        "createdAt": "2018-08-20T22:24:30Z",
        "updatedAt": "2018-08-20T22:24:30Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "For sure 15.8, not sure about 15.7 without checking further. But it shouldn't have changed since then. You should be able to remove the workaround now if you're on latest public release (15.8).",
        "createdAt": "2018-08-20T22:39:50Z",
        "updatedAt": "2018-08-20T22:39:50Z",
        "author": {
          "login": "AndyGerlicher"
        }
      },
      {
        "body": "I could be wrong, I don't know anything about msbuild. Perhaps something else is/was causing the issue.\r\n\r\nI was on version 15.7.5 (maybe 15.7.6?) with no problems of any kind. Updated to 15.8.1 and suddenly red squiggles in every file of every project in the solution. Did clean/rebuild, deleted .suo files, restarted PC multiple times. Nothing fixed it except the workaround mentioned previously.",
        "createdAt": "2018-08-21T11:16:57Z",
        "updatedAt": "2018-08-21T11:16:57Z",
        "author": {
          "login": "lbs-mike"
        }
      },
      {
        "body": "Although, to expand a little bit, I **didn't** have red squiggles on the references at the top of each file. I had green squiggles on those references, and only the references which pointed to dependent projects in the solution.\r\n\r\nBut in each file, any identifier that referenced a type that was defined in a dependent project had a red squiggle underneath. So 10,000s of red squiggles.\r\n\r\nIs this unrelated to this particular bug? Perhaps this should be moved somewhere else?",
        "createdAt": "2018-08-21T11:23:51Z",
        "updatedAt": "2018-08-21T11:24:25Z",
        "author": {
          "login": "lbs-mike"
        }
      },
      {
        "body": "I have the same issues after VS update to 15.8 and 15.8.1\r\n\r\n@davkean For me it was also the release 15.8. It all worked fine with 15.7\r\n@lbs-mike Did you found a solution for the problem?",
        "createdAt": "2018-08-23T06:59:20Z",
        "updatedAt": "2018-08-23T06:59:20Z",
        "author": {
          "login": "raphibolliger"
        }
      },
      {
        "body": "@raphibolliger Yes, refer to the ComReferencesWorkaround described in @davkean's post further up in this thread (dated Feb 13, 2018). This worked for me. https://github.com/Microsoft/msbuild/issues/2591#issuecomment-365478327\r\n",
        "createdAt": "2018-08-23T11:07:21Z",
        "updatedAt": "2018-08-23T11:07:21Z",
        "author": {
          "login": "lbs-mike"
        }
      }
    ]
  }
}