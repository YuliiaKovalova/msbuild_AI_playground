{
  "number": 10528,
  "title": "Document the 'mimetype' implication for GenerateResource task",
  "body": "### Context\r\n\r\n`GeneareteResource` task can be using `BinaryFormatter` today:\r\n\r\nhttps://github.com/dotnet/msbuild/blob/main/src/Tasks/GenerateResource.cs#L2011\r\n\r\nIt happens when a 'mimetype' is being used in the .resx data - e.g.:\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<root>\r\n  <data name=\"MyIcon\" type=\"System.Drawing.Icon, System.Drawing\" mimetype=\"application/x-microsoft.net.object.binary.base64\">\r\n    <value>\r\n     ...\r\n   </value>\r\n  </data>\r\n</root>\r\n```\r\n\r\nWe need to have this behavior and it's implications explicitly documented.\r\nThe implications - `BinaryFormatter` is going to be used. Any usages of BinaryFormatter are deamed insecure, plus from .NET8.0 it is disallowed by default and leads to exception, from .NET9.0 it's not even able to opt-in to bypass the runtime check.\r\n\r\n### Goals\r\n\r\n* Document the behavior in the GenerateResource task help: https://learn.microsoft.com/en-us/visualstudio/msbuild/generateresource-task?view=vs-2022\r\n* Document the behavior in https://learn.microsoft.com/en-us/visualstudio/msbuild/how-to-build-a-project-that-has-resources?view=vs-2022\r\n* Once documented - add the CodeQL exception to the code listing the documentation:\r\n  ```\r\n   // codeql[cs/dangerous-binary-deserialization] This code path remains for compatibility resons and is executed only for legacy resources. The fact and implications are documented publicly: <add the links here>\r\n   object result = binaryFormatter.Deserialize(memoryStream);\r\n  ```",
  "state": "CLOSED",
  "createdAt": "2024-08-16T09:44:55Z",
  "updatedAt": "2024-08-27T11:21:28Z",
  "closedAt": "2024-08-27T11:21:28Z",
  "author": {
    "login": "JanKrivanek"
  },
  "labels": [
    "Priority:1"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "rainersigwald"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": []
  }
}