{
  "number": 10756,
  "title": "[Bug]: MSBuild target with multiple projects, Console.Out suppressed from second project",
  "body": "### Issue Description\n\n1. Custom task which uses Console.Out output colors.\r\n2. Multiple projects are invoked from MSBuild task, which invokes the custom task per project\r\n3. The output gets lost for the second project onward \ud83e\udee8 \r\n\r\nThis is something I noticed at least six months ago, but it's not bad enough to report a bug typically. It's also very possible the way we are doing this is simpler incorrect, and instead of relying on Console.Out, we should be using the ILogger in the MSBuild framework - which I have started prototyping.\r\n\r\nThis problem happens on both net48 MSBuild (Visual Studio latest) and dotnet.exe (net8.0 latest sdk), but has been happening for awhile, so something likely changed over the last 1-2 years to break this.  \n\n### Steps to Reproduce\n\nI have a target in a custom .targets file like this:\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\r\n<Project ToolsVersion=\"15.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\" DefaultTargets=\"Build\">\r\n\r\n  <UsingTask TaskName=\"FluentMigrator.MSBuild.Migrate\" AssemblyFile=\"$(FluentMigratorMSBuildAssemblyPath)\" Condition=\"$(FluentMigratorMSBuildAssemblyPath) != ''\" />\r\n\r\n  <!-- Target: DbMigrateCore -->\r\n  <Target Name=\"DbMigrateCore\">\r\n    <Error Text=\"Server property is required!\" Condition=\"$(Server) == ''\" />\r\n    <Error Text=\"Catalog property is required!\" Condition=\"$(Catalog) == ''\" />\r\n    <Error Text=\"Assembly property is required!\" Condition=\"$(Assembly) == ''\" />\r\n    <Error Text=\"TrustServerCertificate property is required!\" Condition=\"$(TrustServerCertificate) == ''\" />\r\n    <Error Text=\"Encrypt property is required!\" Condition=\"$(Encrypt) == ''\" />\r\n    <Error Text=\"Task property is required!\" Condition=\"$(Task) == ''\" />\r\n    <Error Text=\"FluentMigratorMSBuildAssemblyPath property is required!\" Condition=\"$(FluentMigratorMSBuildAssemblyPath) == ''\" />\r\n\r\n    <PropertyGroup>\r\n      <ConnectionString Condition=\"$(Username) == ''\">Data Source=$(Server)%3BInitial Catalog=$(Catalog)%3BIntegrated Security=SSPI;TrustServerCertificate=$(TrustServerCertificate);Encrypt=$(Encrypt)</ConnectionString>\r\n      <ConnectionString Condition=\"$(Username) != ''\">Data Source=$(Server)%3BInitial Catalog=$(Catalog)%3BUser ID=$(Username)%3BPassword=$(Password);TrustServerCertificate=$(TrustServerCertificate);Encrypt=$(Encrypt)</ConnectionString>\r\n      <Processor>SqlServer2014</Processor>\r\n      <Timeout>6000</Timeout>\r\n      <Verbose>True</Verbose>\r\n      <StripComments>False</StripComments>\r\n    </PropertyGroup>\r\n\r\n    <Message Importance=\"High\" Text=\"Running FluentMigrator task [$(Task)] against [$(ConnectionString)] with assembly [$(Assembly)].  Profile=[$(Profile)] Tags=[$(Tags)]\" />\r\n\r\n    <Migrate Database=\"$(Processor)\"\r\n             Connection=\"$(ConnectionString)\"\r\n             Target=\"$(Assembly)\"\r\n             Profile=\"$(Profile)\"\r\n             Tags=\"$(Tags)\"\r\n             Timeout=\"$(Timeout)\"\r\n             StripComments=\"$(StripComments)\"\r\n             Verbose=\"$(Verbose)\"\r\n             Task=\"$(Task)\"/>\r\n  </Target>\r\n</Project>\r\n```\r\nI then have Directory.Package.props like this:\r\n```xml\r\n<?xml version=\"1.0\"?>\r\n<Project>\r\n    <ItemGroup>\r\n        <PackageReference Include=\"FluentMigrator.MSBuild\" Version=\"6.1.4\" GeneratePathProperty=\"true\" />\r\n    </ItemGroup>\r\n    <PropertyGroup>\r\n        <FluentMigratorMSBuildAssemblyPath>$(PKGFluentMigrator_MSBuild)\\tasks\\net48\\FluentMigrator.MSBuild.dll</FluentMigratorMSBuildAssemblyPath>\r\n    </PropertyGroup>\r\n</Project>\r\n```\r\n\r\nand then a build.targets like this:\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\r\n<Project ToolsVersion=\"15.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\" DefaultTargets=\"Build\">\r\n  <Import Project=\"$(MSBuildProjectDirectory)\\custom.targets\"\r\n          Condition=\"Exists('$(MSBuildProjectDirectory)\\custom.targets')\" />\r\n  <!-- Database Property Groups -->\r\n  <ItemGroup>\r\n    <DatabaseConnection Include=\"Logging\">\r\n      <Environment>UnitTest</Environment>\r\n      <DatabaseToolsDirectory>$(SourceDirectory)\\$(LoggingDatabaseAssembly)\\Tools</DatabaseToolsDirectory>\r\n      <RunDbMigrations>true</RunDbMigrations>\r\n      <RunScriptDatabaseSchema>false</RunScriptDatabaseSchema>\r\n      <OnBeforeScriptDatabaseSchemaScript></OnBeforeScriptDatabaseSchemaScript>\r\n      <Assembly>$(LoggingDatabaseAssembly)</Assembly>\r\n      <Server>(local)</Server>\r\n      <Catalog>Logging_UnitTest</Catalog>\r\n      <Tags>UnitTest</Tags>\r\n    </DatabaseConnection>\r\n    <DatabaseConnection Include=\"Stats\">\r\n      <Environment>UnitTest</Environment>\r\n      <DatabaseToolsDirectory>$(SourceDirectory)\\$(LoggingDatabaseAssembly)\\Tools</DatabaseToolsDirectory>\r\n      <RunDbMigrations>true</RunDbMigrations>\r\n      <RunScriptDatabaseSchema>false</RunScriptDatabaseSchema>\r\n      <OnBeforeScriptDatabaseSchemaScript></OnBeforeScriptDatabaseSchemaScript>\r\n      <Assembly>$(LoggingDatabaseAssembly)</Assembly>\r\n      <Server>(local)</Server>\r\n      <Catalog>Stats_UnitTest</Catalog>\r\n      <Tags>UnitTest</Tags>\r\n    </DatabaseConnection>\r\n  </ItemGroup>\r\n\r\n  <!-- Target: DbMigrateTest -->\r\n  <Target Name=\"DbMigrateTest\">\r\n    <PropertyGroup Condition=\"$(Environment) == ''\">\r\n      <Environment>Test</Environment>\r\n    </PropertyGroup>\r\n    <ItemGroup>\r\n      <Arguments Include=\"@(DatabaseConnection)\" Condition=\"%(Environment) == $(Environment) And %(RunDbMigrations) == True\">\r\n        <AssemblyPath>$(SourceDirectory)\\%(DatabaseConnection.Assembly)\\bin\\release\\%(DatabaseConnection.Assembly).dll</AssemblyPath>\r\n        <Tags>%(DatabaseConnection.Tags)</Tags>\r\n\t\t<Encrypt>True</Encrypt>\r\n\t\t<TrustServerCertificate>True</TrustServerCertificate>\r\n      </Arguments>\r\n    </ItemGroup>\r\n\r\n    <Message Importance=\"High\" Text=\"Running migrations against the following databases:\" />\r\n    <Message Importance=\"High\" Text=\"Environment:$(Environment) Server:%(Arguments.Server) Catalog:%(Arguments.Catalog) Tags:%(Arguments.Tags)\" />\r\n\r\n    <MSBuild Projects=\"$(MSBuildProjectFile)\"\r\n             Targets=\"DbMigrateCore\"\r\n             Properties=\"\r\n             Server=%(Arguments.Server);\r\n             Catalog=%(Arguments.Catalog);\r\n             Username=%(Arguments.Username);\r\n             Password=%(Arguments.Password);\r\n             Assembly=%(Arguments.AssemblyPath);\r\n             TrustServerCertificate=%(Arguments.TrustServerCertificate);\r\n             Encrypt=%(Arguments.Encrypt);\r\n             Task=migrate:up;\r\n             Tags=%(Arguments.Tags);\" />\r\n  </Target>\r\n</Project>\r\n```\n\n### Expected Behavior\n\nOutput per project\n\n### Actual Behavior\n\nOutput for the first project, but not the second project\n\n### Analysis\n\nNo clue.  It is possible it is a bug in my custom task, but I am not sure how to figure that out.  Are custom tasks thread safe / isolated in the context of MSBuild task?\n\n### Versions & Configurations\n\n### msbuild -version\r\nMSBuild version 17.11.9+a69bbaaf5 for .NET Framework\r\n17.11.9.46202\r\n\r\n### dotnet.exe --list-sdks\r\n6.0.321 [C:\\Program Files\\dotnet\\sdk]\r\n8.0.400 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n### dotnet.exe --version\r\n8.0.400\r\n\r\n### dotnet.exe --list-runtimes\r\nMicrosoft.AspNetCore.App 6.0.26 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\nMicrosoft.AspNetCore.App 6.0.33 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\nMicrosoft.AspNetCore.App 7.0.20 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\nMicrosoft.AspNetCore.App 8.0.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\nMicrosoft.NETCore.App 6.0.26 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\nMicrosoft.NETCore.App 6.0.33 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\nMicrosoft.NETCore.App 7.0.20 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\nMicrosoft.NETCore.App 8.0.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\nMicrosoft.WindowsDesktop.App 6.0.26 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\nMicrosoft.WindowsDesktop.App 6.0.33 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\nMicrosoft.WindowsDesktop.App 7.0.20 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\nMicrosoft.WindowsDesktop.App 8.0.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n",
  "state": "CLOSED",
  "createdAt": "2024-10-04T14:57:01Z",
  "updatedAt": "2024-10-04T15:13:56Z",
  "closedAt": "2024-10-04T15:01:02Z",
  "author": {
    "login": "jzabroski"
  },
  "labels": [
    "bug"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "You should 100% be using ILogger - I think what you're seeing is the fact that MSBuild is a multi-process architecture, and only one build process actually has a StdOut that can be written to (without doing gymnastics). The purpose of the ILogger mechanism is to provide a safe way for nodes without a StdOut to communicate with the node that does (in addition to all output that goes over the ILogger interface being included in diagnostic tooling like binlogs, etc). This is not a bug, and is the intended design of MSBuild - it would even be the case if MSBuild was a single-process, multi-threaded process.",
        "createdAt": "2024-10-04T15:00:31Z",
        "updatedAt": "2024-10-04T15:01:02Z",
        "author": {
          "login": "baronfel"
        }
      },
      {
        "body": "Ok, thanks - that makes sense. Crazy that this was working for so long. Not sure what broke it, but clear I was depending on something I should not.\r\n\r\nSeparately, there is basically no bridge to Microsoft DI, which makes writing MSBuild tasks that reference transitive projects difficult - so it's hard to modularize MSBuild.  It turns out Coverlet uses Serilog MSBuildSink, but nothing exists for Microsoft.Extensions.Logging.  I wrote a dumb one here : https://github.com/fluentmigrator/fluentmigrator/blob/main/src/FluentMigrator.MSBuild/MicrosoftBuildLogger.cs",
        "createdAt": "2024-10-04T15:03:02Z",
        "updatedAt": "2024-10-04T15:03:02Z",
        "author": {
          "login": "jzabroski"
        }
      },
      {
        "body": "We have one in [the SDK](https://github.com/dotnet/sdk/blob/116fe7549a8f7f2417bb19fcb620874b7155ced8/src/Containers/Microsoft.NET.Build.Containers/Logging/MSBuildLogger.cs) as well. I agree that this is a thing that would be useful to ship, at some point - @rainersigwald do you think a contribution to MSBuild Utils would be appropriate, or would we need a new package to not drag in the Microsoft.Extensions.Logging.Abstractions dependency?",
        "createdAt": "2024-10-04T15:05:23Z",
        "updatedAt": "2024-10-04T15:05:23Z",
        "author": {
          "login": "baronfel"
        }
      },
      {
        "body": "@jzabroski there's also a longer-term discussion here because the MEL logging might lack some of the abilities of the MSBuild logging (specifically knowledge of MSBuild Codes (which are used to toggle warning levels, etc) and knowledge of file/line/range markers) - we haven't spec'd out what those interactions should be so we haven't codified them in an MSBuild-shipped MEL.ILogger.",
        "createdAt": "2024-10-04T15:06:44Z",
        "updatedAt": "2024-10-04T15:06:44Z",
        "author": {
          "login": "baronfel"
        }
      },
      {
        "body": "Let's open an issue to flesh that out @baronfel. Put it in #10733 :)",
        "createdAt": "2024-10-04T15:09:08Z",
        "updatedAt": "2024-10-04T15:09:08Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Added https://github.com/dotnet/msbuild/issues/10757 to #10733 to track this.",
        "createdAt": "2024-10-04T15:13:55Z",
        "updatedAt": "2024-10-04T15:13:55Z",
        "author": {
          "login": "baronfel"
        }
      }
    ]
  }
}