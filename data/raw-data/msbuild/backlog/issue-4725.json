{
  "number": 4725,
  "title": "Add more EventSource profiling locations",
  "body": "EventSource profiling has already been added in various places in the code (see #4724)\r\n\r\nSome recommendations:\r\nEvaluator.cs (search TrackPass, TrackElement, TrackCondition, and TrackFile). This seems to cover some or all of the info previously captured by CodeMarkers.\r\nProfilerLogger.cs, 290, GenerateProfilerReport, This is called only on shutdown as the profiler report is written to disk.\r\n\r\nEvaluationFrame has a Dispose method. Searching for it naively returns a lot of results, but I'm suspicious that most of them are not actually referring to EvaluationFrames, just other IDisposables, so I think it better to look at what places actually make an EvaluationFrame (which is done above) and ignoring where they're disposed of and logging information is recorded.\r\n\r\nProfilerResult can also store some relevant info about...what our profiler logged...and it's used in BuildEventArgsReader.cs, ProfilerResult.cs, ProjectEvaluationFinishedEventArgs.cs (probably irrelevant), ProfilerResult.cs (which seems to be a struct, so it probably isn't relevant), some test files (probably irrelevant), ProfilerLogger.cs\r\n\r\nMSBuild multiprocess builds involve sending messages over IPC pipes. It\u2019d be nice to have correlatable events between:\r\n\u2022\tProcess A starts sending a message (before serializing the message itself and before pipe operations), and\r\n\u2022\tProcess B handles the message (after deserializing and routing the message but before doing whatever the message wanted done)\r\n",
  "state": "CLOSED",
  "createdAt": "2019-09-13T00:12:22Z",
  "updatedAt": "2024-02-21T17:07:08Z",
  "closedAt": "2021-10-27T23:20:10Z",
  "author": {
    "login": "Forgind"
  },
  "labels": [
    "needs-design",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "Forgind"
      }
    ]
  },
  "milestone": {
    "title": "Backlog"
  },
  "comments": {
    "nodes": [
      {
        "body": "I'd like to see eventing around serialization/deserialization for IPC (in and around `NodePacketTranslator`).",
        "createdAt": "2019-11-14T23:25:00Z",
        "updatedAt": "2019-11-14T23:25:00Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I agree. We should definitely add tracing around IPC.",
        "createdAt": "2019-11-15T00:22:12Z",
        "updatedAt": "2019-11-15T00:22:12Z",
        "author": {
          "login": "livarcocc"
        }
      },
      {
        "body": "ctrl-t did not reveal a NodePacketTranslator. Were you thinking of the BinaryTranslator class? Also, doesn't that duplicate:\r\n```\r\nMSBuild multiprocess builds involve sending messages over IPC pipes. It\u2019d be nice to have correlatable events between:\r\n\u2022 Process A starts sending a message (before serializing the message itself and before pipe operations), and\r\n\u2022 Process B handles the message (after deserializing and routing the message but before doing whatever the message wanted done)\r\n```\r\n?",
        "createdAt": "2019-12-10T23:25:41Z",
        "updatedAt": "2019-12-10T23:25:41Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "We've been adding these as we need them rather than making a concerted effort to predict ahead of time where we're going to need them. The latter approach makes more sense to me anyway, so closing this.",
        "createdAt": "2021-10-27T23:20:10Z",
        "updatedAt": "2021-10-27T23:20:10Z",
        "author": {
          "login": "Forgind"
        }
      }
    ]
  }
}