{
  "number": 6125,
  "title": "Bizarre failure to expand some variables in PathMap",
  "body": "### Issue Description\r\n\r\nMost documented predefined variables don't expand inside <PathMap>. No obvious workaround.\r\n\r\n### Steps to Reproduce\r\n\r\nAdd block to project file\r\n````\r\n  <PropertyGroup Condition=\"'$(Configuration)'=='Release'\">\r\n    <Deterministic>true</Deterministic>\r\n    <PathMap>$(ProjectPath)=F:\\$(ProjectName)</PathMap>\r\n  </PropertyGroup>\r\n````\r\n\r\nrun `dotnet build -c Release 2>&1 -v diag | find \"PathMap\"`\r\n\r\nA reproduction is attached [dbuild.zip](https://github.com/dotnet/msbuild/files/5928116/dbuild.zip)\r\n\r\n### Expected Behavior\r\n\r\n`$(ProjectPath)` expands\r\n\r\n### Actual Behavior\r\n\r\n`$(ProjectPath)` expands to an empty string\r\n\r\n### Analysis\r\n\r\nThe following variables were tried and do not expand:\r\n$(ProjectName)\r\n$(ProjectDir)\r\n$(ProjectPath)\r\n\r\nBut $(Configuration) expands so it's not completely failing to detect variables here. Adding quotes around $(ProjectPath) does not help, and wouldn't work if it did expand because `PathMap` does not take quotes.\r\n\r\nExistence of $(ProjectDir) taken from here: https://docs.microsoft.com/en-us/cpp/build/reference/common-macros-for-build-commands-and-properties?view=msvc-160\r\n\r\n### Versions & Configurations\r\n\r\ndotnet --version: 5.0.102\r\n",
  "state": "CLOSED",
  "createdAt": "2021-02-04T19:45:38Z",
  "updatedAt": "2021-02-04T23:55:20Z",
  "closedAt": "2021-02-04T22:27:48Z",
  "author": {
    "login": "jhudsoncedaron"
  },
  "labels": [
    "bug",
    "needs-triage"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "I think this is actually expected behavior.\r\n\r\nMSBuild guarantees that they will exist, but their values are only set in Microsoft.Common.CurrentVersion.targets. This is imported at the end of the evaluation pass of a project file. This means that a user can set a custom value for those variables, and it won't be overridden, but if they don't set a value, a default value will be given to them at the end of the evaluation pass.\r\n\r\nFor your example, you tried to use them before Microsoft.Common.CurrentVersion.targets had come in, so they didn't have a value yet. If you want to use them to set a property, you can do that inside a Target. Targets are executed after the project is fully evaluated, so that will let you use their values. Does that make sense?\r\n\r\nIf I misinterpreted your scenario, let me know, and I can reopen this.",
        "createdAt": "2021-02-04T22:27:48Z",
        "updatedAt": "2021-02-04T22:27:48Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "If you try to use a Target here I think you will understand that makes no sense. This particular property in propertygroup really needs access to the variables that are being set much later.",
        "createdAt": "2021-02-04T22:34:20Z",
        "updatedAt": "2021-02-04T22:34:20Z",
        "author": {
          "login": "jhudsoncedaron"
        }
      },
      {
        "body": "I'm sorry, I don't understand what you mean. You can set properties in targets, so if you want to use the default values, why can't you put this in a Target and just make sure it runs before others?",
        "createdAt": "2021-02-04T23:49:54Z",
        "updatedAt": "2021-02-04T23:49:54Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "I must be missing something.",
        "createdAt": "2021-02-04T23:55:20Z",
        "updatedAt": "2021-02-04T23:55:20Z",
        "author": {
          "login": "jhudsoncedaron"
        }
      }
    ]
  }
}