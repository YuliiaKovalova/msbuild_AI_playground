{
  "number": 5324,
  "title": "MSBuild (Task) Does Not Expose Several Switches",
  "body": "We use the MSBuild (Task) (https://docs.microsoft.com/en-us/visualstudio/msbuild/msbuild-task?view=vs-2019) pretty extensively within our build system to invoke additional solution files for build. We do this because as per the documentation:\r\n\r\n> Unlike using the Exec task to start MSBuild.exe, this task uses the same MSBuild process to build the child projects. The list of already-built targets that can be skipped is shared between the parent and child builds. This task is also faster because no new MSBuild process is created.\r\n\r\nHowever this task does not appear to expose several newer switches (https://docs.microsoft.com/en-us/visualstudio/msbuild/msbuild-command-line-reference?view=vs-2019) specifically:\r\n\r\n* /restore - Can be worked around as per https://github.com/Microsoft/msbuild/issues/3000#issuecomment-439424881 by calling ONLY /t:restore and nothing else This is also tracked in #2811 \r\n* /graphBuild\r\n* /isolateProjects\r\n\r\nThese are just the ones we care about; looking at the docs it looks like there are several others (maxCpuCount, warnAsError, etc) however we have not had a need to use them at this time.\r\n\r\nAre there individual requests for this? is there a work around we can apply (like /restore's work around?)",
  "state": "OPEN",
  "createdAt": "2020-04-30T18:54:28Z",
  "updatedAt": "2024-02-21T16:29:28Z",
  "closedAt": null,
  "author": {
    "login": "aolszowka"
  },
  "labels": [
    "needs-design",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Backlog"
  },
  "comments": {
    "nodes": [
      {
        "body": "Restore is #2811. I don't think we have one for the graph options: this is now that request.\r\n\r\nThey're all difficult or impossible to implement because of a conceptual problem: these are options that change how _the whole build_ works. How does that apply to only part of the build?\r\n\r\nFor example, what happens if I have `Project A -(isolateProjects=true)-> Project B` _and_ `Project A -(default)-> Project C -> Project B`? How should B be built?\r\n\r\nLikewise, `/restore` means _first do a restore operation, then throw away all state and do the requested operation_. Is it possible to provide a consistent view if someone builds two different targets in a project with `/restore=true` in separate invocations? What about two different projects building a project both with restore enabled?",
        "createdAt": "2020-05-01T12:11:42Z",
        "updatedAt": "2020-05-01T12:11:42Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Good points; some of it is an artifact of our current build system in which we use MSBuild to further coordinate separate technologies into a single unified build. Each technology generally will have its own Solution file, the MSBuild scripts will then call build on the individual technology's solution file (via the MSBuild Task); heres a somewhat cut-down version (this script is much longer than the below):\r\n\r\n```xml\r\n  <Target Name=\"BuildAll\">\r\n    <AppendToCCNetListener CCNetListenerFilePath=\"$(CCNetListenerFile)\" Messages=\"Build Is Starting (Triggered by $(CCNetRequestSource))\" Condition=\"$(CCNetListenerFile) != ''\" />\r\n\r\n    <!--Package the Reports for Distribution-->\r\n    <AppendToCCNetListener CCNetListenerFilePath=\"$(CCNetListenerFile)\" Messages=\"Starting PackageReports\" Condition=\"$(CCNetListenerFile) != ''\" />\r\n    <!--<CallTarget Targets=\"PackageReports\" />-->\r\n    <!--HACK HACK HACK HACK-->\r\n    <!--Because Microsoft does not yet provide a x64 Compatible RDL Compiler-->\r\n    <!--Invoke the Build System with MSBuild x86 and hope for the best!-->\r\n    <Exec Command='\"$(MSBuildx86Exectuable)\" $(InternalCodeRoot)\\Dotnet\\BuildSystems\\scripts\\ComputersUnlimited.Build.All.msbuild /m /t:PackageReports /p:ProductionCodeRoot=$(ProductionCodeRoot);InternalCodeRoot=$(InternalCodeRoot);InternalXRoot=$(InternalXRoot);BuildOutput=$(BuildOutput)'/>\r\n    <AppendToCCNetListener CCNetListenerFilePath=\"$(CCNetListenerFile)\" Messages=\"Finished PackageReports\" Condition=\"$(CCNetListenerFile) != ''\" />\r\n\r\n    <!--First Build the Synergy Applications-->\r\n    <AppendToCCNetListener CCNetListenerFilePath=\"$(CCNetListenerFile)\" Messages=\"Starting BuildSynergy\" Condition=\"$(CCNetListenerFile) != ''\" />\r\n    <CallTarget Targets=\"BuildSynergy\" />\r\n    <AppendToCCNetListener CCNetListenerFilePath=\"$(CCNetListenerFile)\" Messages=\"Finished BuildSynergy\" Condition=\"$(CCNetListenerFile) != ''\" />\r\n\r\n    <!--Next Build CUXFPL-->\r\n    <AppendToCCNetListener CCNetListenerFilePath=\"$(CCNetListenerFile)\" Messages=\"Starting BuildCUXFPL\" Condition=\"$(CCNetListenerFile) != ''\" />\r\n    <CallTarget Targets=\"BuildCUXFPL\" />\r\n    <AppendToCCNetListener CCNetListenerFilePath=\"$(CCNetListenerFile)\" Messages=\"Finished BuildCUXFPL\" Condition=\"$(CCNetListenerFile) != ''\" />\r\n\r\n    <!--Next Build Fusion-->\r\n    <AppendToCCNetListener CCNetListenerFilePath=\"$(CCNetListenerFile)\" Messages=\"Starting BuildFusion\" Condition=\"$(CCNetListenerFile) != ''\" />\r\n    <CallTarget Targets=\"BuildFusion\" />\r\n    <AppendToCCNetListener CCNetListenerFilePath=\"$(CCNetListenerFile)\" Messages=\"Finished BuildFusion\" Condition=\"$(CCNetListenerFile) != ''\" />\r\n\r\n    <!--Next Build TIMSNET-->\r\n    <AppendToCCNetListener CCNetListenerFilePath=\"$(CCNetListenerFile)\" Messages=\"Starting BuildTIMSNET\" Condition=\"$(CCNetListenerFile) != ''\" />\r\n    <CallTarget Targets=\"BuildTIMSNET\" />\r\n    <AppendToCCNetListener CCNetListenerFilePath=\"$(CCNetListenerFile)\" Messages=\"Finished BuildTIMSNET\" Condition=\"$(CCNetListenerFile) != ''\" />\r\n\r\n    <!--Next Build Synergy.NET-->\r\n    <AppendToCCNetListener CCNetListenerFilePath=\"$(CCNetListenerFile)\" Messages=\"Starting BuildSynergyDotNet\" Condition=\"$(CCNetListenerFile) != ''\" />\r\n    <CallTarget Targets=\"BuildSynergyDotNet\" />\r\n    <AppendToCCNetListener CCNetListenerFilePath=\"$(CCNetListenerFile)\" Messages=\"Finished BuildSynergyDotNet\" Condition=\"$(CCNetListenerFile) != ''\" />\r\n\r\n    <Message Text=\"Build is Completed\" Importance=\"high\"/>\r\n    <AppendToCCNetListener CCNetListenerFilePath=\"$(CCNetListenerFile)\" Messages=\"Build is Completed\" Condition=\"$(CCNetListenerFile) != ''\" />\r\n  </Target>\r\n```\r\n\r\nLong term I am trying to replace this pattern to a single solution file (we're calling it Megalodon, owing to its size of 5,000+ Projects) which would make some of these issues go away, and also increase Core/Resource Utilization (64+ Cores, 128GB+ RAM). The struggle we are encountering is that some of these newer features (for example /graphBuild) do not properly work with all project types yet (See #5159) .\r\n\r\nThis is where the current design would shine, this is because we could set individual technologies (which do properly support these advanced features) to use /graphBuild to at least get some advantage.\r\n\r\nYour point still stands though:\r\n\r\n>What happens if I have Project A -(isolateProjects=true)-> Project B and Project A -(default)-> Project C -> Project B? How should B be built?\r\n\r\nWhile the technologies for us are pretty well isolated we have been trying to encourage more and more \"cross technology pollination\" where they do interop into each other. In the current build today this results in overbuild, which is why Megalodon is being pushed.\r\n\r\nWould it be helpful to start a wiki page to describe these issues with these new switches to point other developers to? Your description is very good, unfortunately I am not smart enough to give you a viable solution :(",
        "createdAt": "2020-05-01T15:10:27Z",
        "updatedAt": "2020-05-01T15:10:27Z",
        "author": {
          "login": "aolszowka"
        }
      },
      {
        "body": "Of note, I also thought I wanted to be able to execute with `preprocess` recently, but am now trying a different route. ",
        "createdAt": "2020-12-27T15:15:03Z",
        "updatedAt": "2020-12-27T15:15:03Z",
        "author": {
          "login": "solvingj"
        }
      },
      {
        "body": "I don't think this is a good solution, but could we make executing the MSBuild task with switches redirect build outputs to a special folder (different depending on which switches were enabled) and allow the user to read from there? Then we would build each project multiple times if they specify different switches (sometimes wasteful) but should lead to a correct build? We'd have to make sure the outputs were only changed for that invocation because we don't want the project to be considered up-to-date.",
        "createdAt": "2021-04-26T19:36:44Z",
        "updatedAt": "2021-04-26T19:36:44Z",
        "author": {
          "login": "Forgind"
        }
      }
    ]
  }
}