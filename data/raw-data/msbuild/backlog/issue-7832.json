{
  "number": 7832,
  "title": "Version mismatch between Roslyn in MSBuild and CodeStyle analyzers in the SDK",
  "body": "Not sure if it's a bug, or whether it should go here or in the SDK.\r\n\r\nThere may be a situation where MSBuild.exe is started from `C:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\MSBuild\\Current\\Bin\\amd64\\MSBuild.exe`, which ships `Microsoft.CodeAnalysis.dll`, say, 4.2.0.0.\r\n\r\nWhich MSBuild.exe gets loaded depends on your PATH and which Developer Command Prompt you have open.\r\n\r\nAt the same time global.json determines which .NET SDK is resolved during the build. So you may end up in a situation where a CodeStyle analyzer is loaded from a location such as:\r\n\r\n`C:\\Program Files\\dotnet\\sdk\\6.0.400-preview.22330.6\\Sdks\\Microsoft.NET.Sdk\\codestyle\\cs\\Microsoft.CodeAnalysis.CodeStyle.dll`\r\n\r\nand that version may be built against Roslyn `4.3.0.0`. This will result in warnings such as:\r\n\r\n```\r\nCSC warning CS8032: An instance of analyzer Microsoft.CodeAnalysis.MakeFieldReadonly.MakeFieldReadonlyDiagnosticAnalyzer cannot be created from C:\\Program Files\\dotnet\\sdk\\6.0.400-preview.22330.6\\Sdks\\Microsoft.NET.Sdk\\codestyle\\cs\\Microsoft.CodeAnalysis.CodeStyle.dll : Could not load file or assembly 'Microsoft.CodeAnalysis, Version=4.3.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of its dependencies. The system cannot find the file specified..\r\n```\r\n\r\nIt feels like there's a fundamental design flaw that can often lead to a mismatch like this, since Roslyn .dlls ship with MSBuild and the CodeStyle analyzers ship with the SDK. I don't know how to fix this, but perhaps we should consider either shipping the analyzers with MSBuild, or shipping the Roslyn compilers and binaries with the SDK. I'm guessing the former will be drastically simpler than the latter.",
  "state": "CLOSED",
  "createdAt": "2022-07-16T02:09:21Z",
  "updatedAt": "2024-02-21T17:00:16Z",
  "closedAt": "2023-05-31T17:43:33Z",
  "author": {
    "login": "KirillOsenkov"
  },
  "labels": [
    "needs-design",
    "Area: NetSDK",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "Forgind"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Could this explain why we're no seeing this issue with msbuild/our source generators after 17.3Preview 3 update?\r\n\r\nhttps://github.com/unoplatform/uno/issues/9297\r\n",
        "createdAt": "2022-07-17T20:13:54Z",
        "updatedAt": "2022-07-17T20:13:54Z",
        "author": {
          "login": "francoistanguay"
        }
      },
      {
        "body": "This broke DocFx too:\r\n\r\nhttps://github.com/dotnet/docfx/issues/8097\r\n",
        "createdAt": "2022-07-23T18:18:40Z",
        "updatedAt": "2022-07-23T18:18:40Z",
        "author": {
          "login": "tig"
        }
      },
      {
        "body": "> ...we should consider either shipping the analyzers with MSBuild, or shipping the Roslyn compilers and binaries with the SDK. I'm guessing the former will be drastically simpler than the latter.\r\n\r\nWe could ship MSBuild common targets and Roslyn, FSharp targets as SDKs and link them altogether via tasks/targets. I know, it's not _simple_ but we already started on this path. Maybe it's time to see where it leads. See #1686.",
        "createdAt": "2022-07-29T10:39:40Z",
        "updatedAt": "2022-07-29T10:39:40Z",
        "author": {
          "login": "Nirmal4G"
        }
      },
      {
        "body": "@marcpopMSFT don't we have a policy that the analyzers should reference an older Roslyn, congruent with the `minimumMSBuildVersion`?",
        "createdAt": "2022-08-04T16:19:27Z",
        "updatedAt": "2022-08-04T16:19:27Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Yes, this policy is documented [here](https://docs.microsoft.com/en-us/dotnet/core/porting/versioning-sdk-msbuild-vs#targeting-and-support-rules), but I believe aspects of this, especially how it relates to source generators, are still contentious.",
        "createdAt": "2022-08-04T17:26:31Z",
        "updatedAt": "2022-08-04T17:26:31Z",
        "author": {
          "login": "baronfel"
        }
      },
      {
        "body": "Correct, we ask all analyzers to target the baseline version of Roslyn for a given major release so that if customers end up mixing and matching within that major release, they aren't impacted (so 6.0.1xx-6.0.4xx with 17.0-17.3 analyzers).  CC @jaredpar who has opinions here. The main contention is how to make updates that require new Roslyn features more than once a year which we don't have a good answer for solving as long as global.json exists.",
        "createdAt": "2022-08-04T21:09:49Z",
        "updatedAt": "2022-08-04T21:09:49Z",
        "author": {
          "login": "marcpopMSFT"
        }
      },
      {
        "body": "This issue now exists in the NON-Preview, VS2022 17.3.1 release that just came out. ",
        "createdAt": "2022-08-17T19:24:13Z",
        "updatedAt": "2022-08-17T19:24:13Z",
        "author": {
          "login": "tig"
        }
      },
      {
        "body": "It was already affecting 17.3.0.",
        "createdAt": "2022-08-17T21:26:49Z",
        "updatedAt": "2022-08-17T21:26:49Z",
        "author": {
          "login": "craigktreasure"
        }
      },
      {
        "body": "@ericstj @chsienki do ya'll know who owns this particular analyzer and are they working on changing the targeted roslyn version (or is there other guidance here)?",
        "createdAt": "2022-08-18T21:04:49Z",
        "updatedAt": "2022-08-18T21:04:49Z",
        "author": {
          "login": "marcpopMSFT"
        }
      },
      {
        "body": "@marcpopMSFT Believe this is one of the built in Roslyn analyzers. They're actually compiled against Roslyn source, not NuGet packages, so seems like they're always going to risk being out of sync.\r\n\r\nThis feels like a very difficult problem to solve if we're going to keep supporting a newer SDK running on an older MSBuild, as we essentially have an atomic product being split between two delivery vehicles, so not surprising it breaks when those are out of sync :(\r\n\r\n@sharwell @mavasani Any thoughts on how we can work around this without pulling them out of the Roslyn repo altogether?",
        "createdAt": "2022-08-18T22:35:29Z",
        "updatedAt": "2022-08-18T22:35:29Z",
        "author": {
          "login": "chsienki"
        }
      },
      {
        "body": "Is it possible for the analyzer to turn itself off if run with a version of roslyn it doesn't support? I think we're getting further down the path that it may be hard to build against the right version every time but if we could create a light-up experience, that would provide a better error and migration experience.",
        "createdAt": "2022-08-22T21:55:30Z",
        "updatedAt": "2022-08-22T21:55:30Z",
        "author": {
          "login": "marcpopMSFT"
        }
      },
      {
        "body": "What do we think about my proposal about shipping the analyzers next to the compilers in MSBuild toolset, so that they\u2019re always matching by definition? Not sure why they are in the SDK to begin with.",
        "createdAt": "2022-08-22T23:45:54Z",
        "updatedAt": "2022-08-22T23:45:54Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "> What do we think about my proposal about shipping the analyzers next to the compilers in MSBuild toolset, so that they\u2019re always matching by definition? Not sure why they are in the SDK to begin with.\r\n\r\nThat only fixes part of the problem. Essentially it fixes the problem for these operators but doesn't solve the problem for analyzers in general. That is becoming an increasing problem. \r\n\r\nThe root problem is that analyzers / generators in the .NET SDK have to be hardened to run against many different versions of the Roslyn API surface. That is a very tall ask for most analyzers. I think we really need to find a way to fix that problem. Essentially a given version of the .NET SDK should always use a compatible version of the Roslyn API. \r\n\r\nIt's a tough problem to fix though but it is something we're actively looking at. Actually have some meetings tomorrow to begin looking at one particular path forward. ",
        "createdAt": "2022-08-23T04:07:49Z",
        "updatedAt": "2022-08-23T04:07:49Z",
        "author": {
          "login": "jaredpar"
        }
      },
      {
        "body": "I think even if it fixes just the CodeStyle analyzers, it will be a huge win. In my view we need to decouple this from the general \"fix all analyzers\" problem as that seems much more monumental.\r\n\r\nI just cloned a repo that targets 17.3 on a machine with 17.2 and getting these:\r\n\r\n```\r\n  CSC : error CS8032: An instance of analyzer Microsoft.CodeAnalysis.RemoveUnnecessaryNullableDirective.CSharpRe\r\n       moveUnnecessaryNullableDirectiveDiagnosticAnalyzer cannot be created from C:\\Program Files\\dotnet\\sdk\\6.0.400\\Sd\r\n       ks\\Microsoft.NET.Sdk\\codestyle\\cs\\Microsoft.CodeAnalysis.CSharp.CodeStyle.dll : Could not load file or assembly\r\n       'Microsoft.CodeAnalysis, Version=4.3.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of its depend\r\n       encies. The system cannot find the file specified.\r\n```\r\n\r\nI honestly think it's a bad experience for our ecosystem and we need to move the analyzers from SDK into the MSBuild toolset next to the Roslyn compiler binaries.",
        "createdAt": "2022-08-29T05:42:14Z",
        "updatedAt": "2022-08-29T06:01:01Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "> we need to move the analyzers from SDK into the MSBuild toolset next to the Roslyn compiler binaries.\n\nAnalyzers, atleast the built-in ones always depend on Roslyn, right? Then, it should've been from the Roslyn folder **itself**.\n\nA better solution would be expanding the idea of an SDK to include hard/soft dependencies similar to NuGet packages and SDK workloads. That way, we can have SDK packages depending on particular version of a Toolkit that always works, no matter what!\n\nI propose Roslyn and other extensions (_like FSharp_) present in the MSBuild folder move to SDK pattern. So, they can be provided as both out of band and installed variants.\n\nSomething like `Microsoft.NET.Analyzers.Sdk` depending on `Microsoft.NET.Compilers.Sdk` which gets used by `Microsoft.NET.Sdk`.",
        "createdAt": "2022-08-29T09:41:56Z",
        "updatedAt": "2022-08-29T09:41:56Z",
        "author": {
          "login": "Nirmal4G"
        }
      },
      {
        "body": "> I honestly think it's a bad experience for our ecosystem and we need to move the analyzers from SDK into the MSBuild toolset next to the Roslyn compiler binaries.\r\n\r\nIt's unfortunately not that easy. It requires a significant amount of reworking of the targets in addition to that. \r\n\r\n> I think even if it fixes just the CodeStyle analyzers, it will be a huge win\r\n\r\nI agree it's a win but it's also work that doesn't actually fix the problem. It's a \"fix Microsoft but leave the community behind\" type of fix. \r\n",
        "createdAt": "2022-08-29T17:00:24Z",
        "updatedAt": "2022-08-29T17:00:24Z",
        "author": {
          "login": "jaredpar"
        }
      },
      {
        "body": "The code style analyzers are version-locked to the version of Roslyn they are developed against. Other analyzers target earlier versions of Roslyn, but these cannot. The only available option is to downgrade global.json to an earlier SDK, or update Visual Studio to a newer release that matches the SDK.\r\n\r\nThe code style analyzers are frequently updated to use new syntax APIs as the compiler creates new features, and there is no straightforward way to lock the code style analyzer package to an earlier version of Roslyn that does not provide those APIs. We originally tried to avoid this, and it resulted in multiple prolonged cases where the code style analyzers in the SDK failed to recognize new language features with many user-visible bugs as a result.",
        "createdAt": "2022-08-31T16:19:40Z",
        "updatedAt": "2022-08-31T16:22:36Z",
        "author": {
          "login": "sharwell"
        }
      },
      {
        "body": "The rough idea I have in mind for solving this problem is: \r\n\r\n1. Include the .NET Framework version of the Roslyn compilers in the .NET SDK for Windows only \r\n2. Provide a mechanism for `msbuild` to use that version of Roslyn compilers vs. what it has inbox: maybe as simple as a property \r\n\r\nThat would mean when customers mix MSBuild and .NET SDK versions they could choose to use the compilers that came with .NET SDK. That would mean analyzers / generators end up running on the compiler they expect to run on. There would no longer be the version mismatch that comes with always using the MSBuild version of the tools. \r\n\r\nThis is still speculative, particularly how it the mechanism would engage. But it seems very promising. \r\n",
        "createdAt": "2022-08-31T17:30:22Z",
        "updatedAt": "2022-08-31T17:30:22Z",
        "author": {
          "login": "jaredpar"
        }
      },
      {
        "body": "> Include the .NET Framework version of the Roslyn compilers in the .NET SDK for Windows only\n\nThis is going to create more problems than it solves. I do agree that framework tools and binaries to be included as a part of .NET SDK since it's no longer called Core SDK. You could extend the current workload feature to ship framework tools and binaries and remove those from VS MSBuild.\n\nI think there was some conversation about moving desktop MSBuild into .NET SDK or back into programs folder as standalone tool. But that requires a lot of refactoring and breaking changes.\n\nThough, IMO expanding the idea of MSBuild Extensions and SDKs is not a bad solution and requires very little effort from MSBuild's side. It'll also benefit Roslyn and other tools versioning with just repackaging since NuGet can take care of that.",
        "createdAt": "2022-08-31T18:46:50Z",
        "updatedAt": "2022-08-31T18:46:50Z",
        "author": {
          "login": "Nirmal4G"
        }
      },
      {
        "body": "> This is going to create more problems than it solves.\r\n\r\nWhat problems does it create?\r\n\r\n> remove those from VS MSBuild.\r\n\r\nThis isn't possible, because it would break projects that don't use the .NET SDK.\r\n\r\n> Though, IMO expanding the idea of MSBuild Extensions and SDKs is not a bad solution and requires very little effort from MSBuild's side. It'll also benefit Roslyn and other tools versioning with just repackaging since NuGet can take care of that.\r\n\r\nCan you give a bit more detail on your idea here? I don't see a low-effort solution to this problem.",
        "createdAt": "2022-08-31T19:22:01Z",
        "updatedAt": "2022-08-31T19:22:01Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> This is going to create more problems than it solves\r\n\r\nI don't see how this creates really any problems. It means that the .NET SDK would contain both the .NET Framework and .NET Core versions of the compiler. That means that `msbuild` can effectively choose to use the compiler it ships with or the one from the .NET SDK. There would be no change to the `dotnet build` based scenarios (they work just fine today). \r\n\r\nThe root problem we have here is that tools shipped in the .NET SDK expect to use the compiler that shipped with the SDK. They don't account for the fact that they can be run on many different versions of the compiler (older and newer). When that actually happens it results in errors like the above where APIs depended on are missing and the analyzers / generators cannot run. \r\n\r\nShipping the .NET Framework compiler int the .NET SDK means we can always use the compiler the .NTE SDK tools were expecting to use. The solution just loads the compiler from .NET SDK instead of MSBuild. At that point mixing .NET SDK and MSBuild versions doesn't become the pitfall that it is today (for analyzer / generator scenarios at least). It just works like developers expect it to.\r\n\r\nNote: for the most part you could just use the .NET Core compiler that comes with the .NET SDK and get the same benefits. It's not a perfect solution though. A number of components assume that if they're running on .NET Core MSBuild they get a .NET Core compiler and vice versa. So while it'd solve many scenarios it would break others which is why we've been leaning towards the solution I outlined\r\n\r\n> This isn't possible, because it would break projects that don't use the .NET SDK.\r\n\r\n+100.\r\n\r\n\r\n",
        "createdAt": "2022-08-31T19:50:43Z",
        "updatedAt": "2022-08-31T19:50:43Z",
        "author": {
          "login": "jaredpar"
        }
      },
      {
        "body": "@jaredpar I thought in our meeting last week we were going to try using the .net core version of Roslyn from the SDK rather than including the framework versions in the SDK. Have issues come up that would change that plan? This would all be tied to a setting customers would be able to opt into which limits the risk to some degree.\r\n\r\nCC @Forgind ",
        "createdAt": "2022-09-01T19:53:24Z",
        "updatedAt": "2022-09-01T19:53:24Z",
        "author": {
          "login": "marcpopMSFT"
        }
      },
      {
        "body": "> Have issues come up that would change that plan?\r\n\r\nOne issue I brought up with @rainersigwald is that this subverts existing expectations. Customers today understand that `$(MSBuildRuntimeType)' != 'Core'` means a .NET Framework compiler and tasks are going to be used and vice versa for when a `'Core'` runtime is used. For example customers use this today to swap in analyzer / generators which target .NET Core when running on a .NET Core compiler. This is an advanced scenario but customers do employ it. Swapping in a .NET Core compiler in .NET Framework MSBuild would break this. \r\n\r\nThere are subtle other issues to deal with like finding the right `dotnet` to invoke the compiler with. Today in the .NET Core tasks we can essentially say \"use the `dotnet` which was used to invoke the build\". That's an extremely safe bet to make. When the build is on .NET Framework though it gets more muddy. Different builds could cause us to pick different runtimes which we may or may not have tested against. It's swapping one scenario we don't test for another we don't test. \r\n\r\nAll this means that it's also hard for us to commit to doing this swap by default in the long term. That means the end result is customers have to mix MSBuidl and .NET SDK versions, get bit by a compilation error, google the error, read a post, then set a variable before their builds start to work. \r\n\r\nWhere as if we ship the .NET Framework compiler in the Windows .NET SDK all of these questions and uncertainties go away. It is the literal compiler that we test with so swapping it in is a known quantity. There are no weird corner cases to deal with. It is just going to work like the customer expected it to.\r\n\r\n\r\n\r\n",
        "createdAt": "2022-09-02T15:26:43Z",
        "updatedAt": "2022-09-02T15:26:43Z",
        "author": {
          "login": "jaredpar"
        }
      },
      {
        "body": "In the situation I outlined, wouldn't MSBuild still be the framework version from within VS and it's just be Roslyn running in a .NET core task host? Do we know how many cusdtomers use MSBuildRuntimeType and do we know for sure they'd be impacted here (as I assume that'd still say framework).\r\n\r\nOn top of that, dotnet build currently uses the .net core tooling already so I'm not sure a customer would want to have significantly different behavior running in core tooling versus framework tooling (or else you couldn't use dotnet build).\r\n\r\nI think this comes back to how we are each thinking of this. I'm thinking of the switch as the customer saying \"I want the SDK tooling\" and in my mind, that means .net core. I think you're seeing it as \"I want the tooling to match the SDK version but still be the VS tooling\".  This would already been fairly limited in scope (hopefully).\r\n\r\nI should add that I think running the .net core task is something we better understand (though the work is not that simple) compared with the setup authoring of pulling all the framework components into the SDK install.",
        "createdAt": "2022-09-02T21:05:06Z",
        "updatedAt": "2022-09-02T21:05:06Z",
        "author": {
          "login": "marcpopMSFT"
        }
      },
      {
        "body": "> In the situation I outlined, wouldn't MSBuild still be the framework version from within VS and it's just be Roslyn running in a .NET core task host?\r\n\r\nCorrect. MSBuild would be .NET Framework and it'd be running a .NET Core compiler. That is the core issue though, customers expect those to be related. Breaking that relationship would break the code they wrote to depend on it. \r\n\r\n> Do we know how many cusdtomers use MSBuildRuntimeType and do we know for sure they'd be impacted here (as I assume that'd still say framework).\r\n\r\nCan get a sense of the scale of usage with a [grep query](https://grep.app/search?q=MSBuildRuntimeType&filter[lang][0]=XML)\r\n\r\nAs for \"do we know for sure they'de be impacted\" the answer for some is \"yes\". Several customers multi-target their analyzer / generators between `netstandard2.0` and .NET Core. Typically because it was the only way for them to get dependency management correct in .NET Core. Those customers then drop a props file in their NuPkg and use `MSBuildRuntimType` to decide which generator will load. If we break this relationship we break that scenario. \r\n\r\n> I think you're seeing it as \"I want the tooling to match the SDK version but still be the VS tooling\". This would already been fairly limited in scope (hopefully).\r\n\r\nThe way I'm thinking of it is a bit different. I want the solution which fixes broadest set of problems while introducing the fewest new ones. I originally was a big fan of just use the .NET Core compiler in .NET SDK. But as I went through past discussions with customers and the known set of problems I drifted away from it. Yes this would fix a significant set of our problems. But it also concretely introduces new ones. Using the .NET Framework compiler means we're effectively using what we originally tested so it's easy to have a lot more confidence in it.\r\n\r\nGiven how painful this has been so far, rather than fixing most of it I'd rather fix all of it (assuming the cost isn't that much different). \r\n\r\n> I should add that I think running the .net core task is something we better understand (though the work is not that simple) \r\n\r\nI don't fully agree with this. It introduces a new scenarios which is using the machine .NET Core install to drive the compiler. The compiler is tuned to the runtime and every release of the runtime introduces changes the compiler has to account for. As the runtime on the machine moves forward, but the compiler stays constant, these bugs will begin to manifest in compilation. Also as I mentioned earlier there are specific customer scenarios that will break when we do this. \r\n\r\n> compared with the setup authoring of pulling all the framework components into the SDK install.\r\n\r\nI don't think that is going to be too expensive. Most of the cost is on my team to restructure our NuPkg. The SDK consumption is mostly just xcopying our contents. I think we'd need to condition part of the copy to be windows only and not much else. \r\n\r\n\r\n\r\n\r\n\r\n",
        "createdAt": "2022-09-02T22:52:16Z",
        "updatedAt": "2022-09-02T22:52:16Z",
        "author": {
          "login": "jaredpar"
        }
      },
      {
        "body": "Forgot to publish our meeting notes on how we're going to move forward with this. In short:\r\n\r\n1. Roslyn is going to produce a package containing the desktop compilers: [Microsoft.Net.Compilers.Framework](https://github.com/dotnet/roslyn/pull/66206). \r\n2. .NET SDK is going to support a new property inside of Directory.Build.props called `<UseRoslynSdk>`. When this is truthy and building from .NET Framework the desktop compilers will be installed and used vs. grabbing the compilers from the MSBuild install\r\n\r\nThis will fix the analyzer / generator inconsistency issues because it means the desktop compiler will match the expected API for analyzers and generators. ",
        "createdAt": "2023-01-03T21:36:01Z",
        "updatedAt": "2023-01-03T21:36:01Z",
        "author": {
          "login": "jaredpar"
        }
      },
      {
        "body": "So, what is the solution? Does the latest .NET SDK support the `<UseRoslynSdk>` property? When I [search for `UseRoslynSdk`](https://github.com/search?q=UseRoslynSdk&type=code) on GitHub, I get only one result (this issue). In fact, even [Google returns only one result](https://www.google.com/search?q=\"UseRoslynSdk\") which is this GitHub issue.",
        "createdAt": "2023-05-31T23:26:40Z",
        "updatedAt": "2023-05-31T23:26:40Z",
        "author": {
          "login": "vers-one"
        }
      },
      {
        "body": "We changed to using BuildWithNetFrameworkHostedCompiler instead of UseRoslynSdk.\r\n\r\nPR is here: https://github.com/dotnet/sdk/pull/29787\r\n\r\nSo yes! We now support that. I also have a PR out to backport it to 7.0.3xx; we'll see if we need it in an earlier branch or not later.",
        "createdAt": "2023-06-01T00:29:32Z",
        "updatedAt": "2023-06-01T00:29:32Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "the 7.0.3xx port was approved for release in July. There won't be earlier ports as 7.0.2xx is out of support and the Roslyn side changes aren't in 17.4 (7.0.1xx).",
        "createdAt": "2023-06-01T19:45:13Z",
        "updatedAt": "2023-06-01T19:45:13Z",
        "author": {
          "login": "marcpopMSFT"
        }
      }
    ]
  }
}