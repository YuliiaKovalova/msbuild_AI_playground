{
  "number": 11595,
  "title": "A way to inject a target into MSBuild during solution build, via the Directory.Build files, prior to Restore.",
  "body": "### Summary\n\nHi all, \n\nI'd like a means to tap into the solution build. I could have sworn there was a way, as I have been working in MSBuild with my company for the past year or so. \n\nBasically what I'd specifically is for someone to be able to download my repo within my company, run dotnet build, and have folders created and Environment Variables initiated as MSBuild properties.\n\n\n### Background and Motivation\n\nThe \"general\" reason is, I'd like to be able to create Directories on disc before a restore target occurs. Copy files, do whatever I need to \"initialize a devsetup\".\n\nI know you could be thinking \"what about DotNet aspire?\", or \"What about Dev Containers?\" or \"What about a ready to go machine snapshot?\" \n\nI'm aware those things exist, which is why this is proposed as a feature if it's not too difficult to add. Because it will take years for our company to be able to move to Aspire, probably never Dev Containers. Machine Snapshot is alright, but it assumes we don't all already have our own environment set up. \n\nSo to give you a more specific perspective:\n\nIn my company we are building many, many package libraries. We're working towards a Microservice-like architecture in which we use Package Libraries as NuGet packages.\n\nPrior to publishing the package to our internal NuGet, I'd like to give our developers an opportunity to test out their packages locally. By publishing to %NuGetStagingPackageSource% (literally, environment variable). This way, the Miniservice Host which intercepts the plugins can pick up their updated version locally and run those without mucking up our internal NuGet feed.\n\nBased on different open github issues, I've tried the following:\n```xml\n    <PropertyGroup>\n        <NuGetStagingPackageSource>$([System.Environment]::GetEnvironmentVariable('NuGetStagingPackageSource', System.EnvironmentVariableTarget.Machine))</NuGetStagingPackageSource>\n        <NuGetStagingPackageSource Condition=\" '$(NuGetStagingPackageSource)' == '' \">$(MSBuildThisFileDirectory)TransitionalPackages</NuGetStagingPackageSource>\n        <PackageOutputPath>$(NuGetStagingPackageSource)</PackageOutputPath>\n    </PropertyGroup>\n\n<!-- attempt 1 -->\n    <Target Name=\"CreateTransitionalPackagesFolder\" BeforeTargets=\"Restore\">\n        <MakeDir Directories=\"$(NuGetStagingPackageSource)\" Condition=\"!Exists('$(NuGetStagingPackageSource)')\"/>\n    </Target>\n<!-- attempt 2 -->\n    <Target Name=\"CreateTransitionalPackagesFolder\" BeforeTargets=\"_GenerateRestoreProjectSpec\">\n        <MakeDir Directories=\"$(NuGetStagingPackageSource)\" Condition=\"!Exists('$(NuGetStagingPackageSource)')\"/>\n    </Target>\n<!-- attempt 3 -->\n    <Target Name=\"CreateTransitionalPackagesFolder\" BeforeTargets=\"PreBuildEvent\">\n        <MakeDir Directories=\"$(NuGetStagingPackageSource)\" Condition=\"!Exists('$(NuGetStagingPackageSource)')\"/>\n    </Target>\n```\nAnd I cannot seem to intercept MSBuild to make the directories prior to the Restore Task for a Solution-wide restore.\n\n### Proposed Feature\n\n```xml\n<Target Name=\"SetUpEnvironment\" BeforeTargets=\"Restore\" BuildScope=\"Solution\">\n  <!-- \n      in my case, I can create my directories. Or, what if you use this as an opportunity to initiate \n      a DotNet Aspire execution? Like, that way you can pull down the github thing and you can have it run\n      a powershell script that requests that you run a dotnet Aspire solution if the script determines the \n      environment isn't ready?\n\n      Keep in mind, I want to learn about these things, so perhaps Aspire run targets already cover this scenario... \n      I've just been trying my best to tread water as I'm one of the only developers currently committed to \n      modernizing with vanilla dotnet core, let alone specific frameworks beyond that.\n  -->\n</Target>\n\n<Target Name=\"DoSomethingForBothProjectsAndSolutions\" BeforeTargets=\"CoreCompile\" BuildScope=\"Project;Solution\">\n  <!-- Some sort of behavior that must be run before a target in both projects and in solutions -->\n</Target>\n\n<Target Name=\"DoSomethingForOnlyProjects\" BeforeTargets=\"CoreCompile\">\n  <!-- \n     backwards compatibility, BuildScope will default to Project. -->\n</Target>\n```\n\nKeep in mind, this would have to be on the Directory.Build.props or Directory.Build.targets, since the csproj files shouldn't control the sln.\n\n### Alternative Designs\n\nAlternatively, I've heard tell of this rumored slnx file. Funny enough, I just searched it up to find the rumors and whatnot, since it seems to be partially supported by certain IDEs, but not the CLI and there was no official documentation for it... and as I searched, I just found an OFFICIAL support introduction!\n\nhttps://devblogs.microsoft.com/dotnet/introducing-slnx-support-dotnet-cli/\n\nSo perhaps you could add MSBuild Targets to the SLNX file instead and that will only run on Solution-level?",
  "state": "CLOSED",
  "createdAt": "2025-03-14T16:47:52Z",
  "updatedAt": "2025-03-14T17:27:31Z",
  "closedAt": "2025-03-14T17:27:30Z",
  "author": {
    "login": "EdLichtman"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "comments": {
    "nodes": [
      {
        "body": "WE already have solution-level targets extensibility - can you check out [these docs](https://learn.microsoft.com/en-us/visualstudio/msbuild/customize-solution-build?view=vs-2022) and see if that solves your problem?",
        "createdAt": "2025-03-14T16:50:47Z",
        "author": {
          "login": "baronfel"
        }
      },
      {
        "body": "Oh neat!!! That's exactly what I'm asking for! Do you happen to know if you'll be able to add MSBuild targets to the slnx files too?",
        "createdAt": "2025-03-14T17:07:37Z",
        "author": {
          "login": "EdLichtman"
        }
      },
      {
        "body": "_today_ there's a bug in this where MSBuild is looking for before/after targets files ending in `.slnx.targets`, but we're about to fix that so that `.sln.targets` files will work for both solution file formats.",
        "createdAt": "2025-03-14T17:09:55Z",
        "author": {
          "login": "baronfel"
        }
      },
      {
        "body": "Cool. I'm assuming that means we won't be able to add targets to the slnx file, only the .slnx.targets files.\n\nWell, this is a wonderful day. Thanks for the quick response.",
        "createdAt": "2025-03-14T17:27:30Z",
        "author": {
          "login": "EdLichtman"
        }
      }
    ]
  }
}