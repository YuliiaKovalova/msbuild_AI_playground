{
  "number": 2064,
  "title": "Build error MSB4067 (UnrecognizedChildElement) when building a solution with rptproj or dwproj projects",
  "body": "When using MSBuild 15.0, cleaning or building a solution which contains rptproj or dwproj projects gives the following error:\r\n\r\n> Reports.rptproj(3,3): error MSB4067: The element &lt;State&gt; beneath element &lt;Project&gt; is unrecognized.\r\n\r\nWhen using MSBuild 14.0, the behaviour is better: it logs warnings (MSB4078) about unsupported projects:\r\n\r\n> warning MSB4078: The project file \"Reports.rptproj\" is not supported by MSBuild and cannot be built.\r\n\r\nThe latter behaviour is more desirable (for me, at least): I would like to able to build a solution in a configuration which includes the .rptproj files. This would allow me to include these projects when building the solution in Visual Studio, and to be able to use the same configuration when building the solution via an MSBuild script.\r\n\r\nIs this change of behaviour a bug? The message certainly seems like it is attempting to parse the rptproj file into some structure to which it doesn't belong. If it is not, is there a way to downgrade the error MSB4067 to a warning, or to skip certain projects when building a solution? The `/ignoreprojectextensions:.rptproj` option does not prevent the error.\r\n\r\nNote: this issue relates to [this Stack Overflow post](https://stackoverflow.com/q/43735390/5513562).\r\n",
  "state": "OPEN",
  "createdAt": "2017-05-05T14:01:57Z",
  "updatedAt": "2024-02-21T16:36:52Z",
  "closedAt": null,
  "author": {
    "login": "AndrewBennet"
  },
  "labels": [
    "bug",
    "regression",
    "Area: Solution (.sln)",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "I recently added our .rptproj back into our solution file once I saw the availability of the Reporting Services extension for VS 2017.  Our solution builds fine on the dev boxes, but is broken on our build server - even though I have installed the Reporting Services Projects on the build machine as well.  It's concerning that no one from the team has commented for almost 2 months.",
        "createdAt": "2017-06-29T20:17:16Z",
        "updatedAt": "2017-06-29T20:17:16Z",
        "author": {
          "login": "DaveSlinn"
        }
      },
      {
        "body": "This is a big breaking change. We too now have broken solutions on our build machines because of this. Can someone please triage?",
        "createdAt": "2017-07-17T13:14:34Z",
        "updatedAt": "2017-07-17T13:14:34Z",
        "author": {
          "login": "MgSam"
        }
      },
      {
        "body": "Thanks for the report!\r\n\r\nMSBuild has [some code](https://github.com/Microsoft/msbuild/blob/07c3b3392dc05e0e3aba18bdec235a374aa72301/src/Build/Construction/Solution/ProjectInSolution.cs#L279-L362) that attempts to detect whether projects referred to from the solution are MSBuild projects or some other format.\r\n\r\nIn #1089, this logic was [simplified](https://github.com/Microsoft/msbuild/commit/31ccfa3cc54d20da3edf0d862280d2a0e572f80a#diff-3bf6e5fdef2b4a2a9702da6ceb5d7288L308) to support the new simplified project files, which removed a check that the project specified the MSBuild namespace.\r\n\r\nA simple .rptproj looks like this:\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<Project xmlns:xsi=\"http://www.w3.org/2000/10/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2000/10/XMLSchema\" ToolsVersion=\"2.0\">\r\n  <DataSources />\r\n  <Reports />\r\n</Project>\r\n```\r\n\r\nThe fact that its top-level element is `<Project>` now gets a false positive (I stepped through MSBuild 14.0.25420.1 and observed it failing out because the namespace didn't match).\r\n\r\n`/ignoreprojectextensions:.rptproj` is deceptively unrelated; it controls MSBuild's search-for-a-project-to-build behavior when no project is specified on the command line, not what projects from the solution get built.",
        "createdAt": "2017-07-17T20:35:30Z",
        "updatedAt": "2017-07-17T20:35:30Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "## Workarounds\r\n* Place a file with these contents next to your `.sln` file with the special name `after.{yoursolutionname}.sln.targets`:\r\n```xml\r\n<Project InitialTargets=\"WorkAroundMSBuild2064\">\r\n <Target Name=\"WorkAroundMSBuild2064\">\r\n  <!-- Work around https://github.com/Microsoft/msbuild/issues/2064 by\r\n       removing *.rptproj from the generated solution metaproject. -->\r\n  <ItemGroup>\r\n   <ProjectReference Remove=\"%(ProjectReference.Identity)\"\r\n                     Condition=\"'@(ProjectReference->'%(Extension)')' == '.rptproj'\" />\r\n  </ItemGroup>\r\n </Target>\r\n</Project>\r\n```\r\n* Build with `devenv {path_to_solution.sln} /build`\r\n  * This uses Visual Studio to handle parsing the solution and building each individual project, so it will behave much more like \"Build\" from the UI.\r\n  * This can be slower and harder to debug than using MSBuild.\r\n* Use a solution configuration to prevent the `.rptproj` files from building\r\n  * Some pros and cons discussed in the [Stack Overflow question](https://stackoverflow.com/questions/43735390/msbuild-15-0-visual-studio-2017-throws-error-msb4067-for-solutions-with-ssdt-p#comment74649829_43759749).\r\n",
        "createdAt": "2017-07-17T20:35:42Z",
        "updatedAt": "2017-07-17T20:37:54Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Spoke to @AndyGerlicher about this. The more-permissive namespace check in the real MSBuild project parser requires that the namespace be [either the MSBuild namespace or not specified](https://github.com/Microsoft/msbuild/blob/07c3b3392dc05e0e3aba18bdec235a374aa72301/src/Build/Xml/ProjectXmlUtilities.cs#L112-L126). The same check could be applied in the solution parser.",
        "createdAt": "2017-07-17T23:02:07Z",
        "updatedAt": "2017-07-17T23:02:07Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Thanks for the workarounds! I'm trying out the `after.solution.sln.targets` one now.\r\n\r\nI'm currently still hitting the issue at a later point in the build due to a solution Project Dependency: one of my csproj projects depends on an rptproj project (this was done to cause the build of the csproj to trigger the build of the rptproj).\r\n\r\nThe error shows the steps:\r\n\r\n`msbuild script -> solution file -> csproj.metaproj -> rptproj`\r\n\r\nIs there a way to similarly exclude rptproj references from the generate _project_ metaproject? I tried the same pattern of `after.project.csproj.targets` alongside my csproj file, but it didn't work.",
        "createdAt": "2017-07-18T14:40:12Z",
        "updatedAt": "2017-07-18T14:40:12Z",
        "author": {
          "login": "AndrewBennet"
        }
      },
      {
        "body": "@AndrewBennet Unfortunately, no, I don't see a nice way to prevent emitting those references into the `.csproj.metaproj` that is generated to handle the solution dependencies, and as you discovered that metaproject doesn't have extensibility hooks like `after.project.sln.targets`. I think you'll have to either drop the solution dependency or use a solution configuration to avoid the .rptproj.",
        "createdAt": "2017-07-18T15:34:47Z",
        "updatedAt": "2017-07-18T15:34:47Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "OK - I'll remove the solution dependency for now. Thanks :+1:",
        "createdAt": "2017-07-19T11:49:52Z",
        "updatedAt": "2017-07-19T11:49:52Z",
        "author": {
          "login": "AndrewBennet"
        }
      },
      {
        "body": "Any updates or timeline on when this issue will be resolved?",
        "createdAt": "2017-08-10T17:05:20Z",
        "updatedAt": "2017-08-10T17:05:20Z",
        "author": {
          "login": "reicher001"
        }
      },
      {
        "body": "Just discovered that the ability to build rptproj projects with MSBuild has been added in the last few weeks: https://blogs.msdn.microsoft.com/sqlrsteamblog/2017/09/25/msbuild-support-for-reporting-services-projects-now-available/\r\n\r\nHave not tried this out yet, but upgrading the rptproj projects to the latest format would presumably get around this problem.\r\n\r\n----\r\n\r\nUpdate: Having updated the SSRS Visual Studio plugin and upgraded the SSRS projects to the latest format, this issue no longer occurs. I can restore the solution dependecies \ud83c\udf89 ",
        "createdAt": "2017-10-16T10:16:00Z",
        "updatedAt": "2017-10-18T13:38:37Z",
        "author": {
          "login": "AndrewBennet"
        }
      },
      {
        "body": "Are .dtproj projects being added in the same fix?",
        "createdAt": "2018-05-04T12:07:49Z",
        "updatedAt": "2018-05-04T12:07:49Z",
        "author": {
          "login": "fenngineering"
        }
      },
      {
        "body": "Any updates for *.dtproj ? We have this issue on our customer and we need to build as soon as possible. ",
        "createdAt": "2018-07-16T12:17:08Z",
        "updatedAt": "2018-07-16T12:17:08Z",
        "author": {
          "login": "benjiadell"
        }
      },
      {
        "body": "I am seeing the same error with my .dtproj\r\n\r\n`Error MSB4067: The element <DeploymentModel> beneath element <Project> is unrecognized.`\r\n\r\nShould I open a new issue for building ispac's from dtproj?",
        "createdAt": "2018-08-27T19:58:46Z",
        "updatedAt": "2018-08-27T19:58:46Z",
        "author": {
          "login": "richardlhughes"
        }
      },
      {
        "body": "@richardlhughes: This workaround does work for dtproj too. ",
        "createdAt": "2018-08-28T13:41:48Z",
        "updatedAt": "2018-08-28T13:41:48Z",
        "author": {
          "login": "samsmithnz"
        }
      },
      {
        "body": "> \r\n> \r\n> @richardlhughes: This workaround does work for dtproj too.\r\n\r\nConfirmed.",
        "createdAt": "2019-03-26T12:38:07Z",
        "updatedAt": "2019-03-26T12:38:07Z",
        "author": {
          "login": "donuwm"
        }
      },
      {
        "body": "@rainersigwald - is this workaround still the only way to make this work on an Azure DevOps hosted build agent?",
        "createdAt": "2019-06-25T18:10:49Z",
        "updatedAt": "2019-06-25T18:10:49Z",
        "author": {
          "login": "StingyJack"
        }
      },
      {
        "body": "> ## Workarounds\r\n> * Place a file with these contents next to your `.sln` file with the special name `after.{yoursolutionname}.sln.targets`:\r\n> \r\n> ```\r\n> <Project InitialTargets=\"WorkAroundMSBuild2064\">\r\n>  <Target Name=\"WorkAroundMSBuild2064\">\r\n>   <!-- Work around https://github.com/Microsoft/msbuild/issues/2064 by\r\n>        removing *.rptproj from the generated solution metaproject. -->\r\n>   <ItemGroup>\r\n>    <ProjectReference Remove=\"%(ProjectReference.Identity)\"\r\n>                      Condition=\"'@(ProjectReference->'%(Extension)')' == '.rptproj'\" />\r\n>   </ItemGroup>\r\n>  </Target>\r\n> </Project>\r\n> ```\r\n> \r\n> * Build with `devenv {path_to_solution.sln} /build`\r\n>   \r\n>   * This uses Visual Studio to handle parsing the solution and building each individual project, so it will behave much more like \"Build\" from the UI.\r\n>   * This can be slower and harder to debug than using MSBuild.\r\n> * Use a solution configuration to prevent the `.rptproj` files from building\r\n>   \r\n>   * Some pros and cons discussed in the [Stack Overflow question](https://stackoverflow.com/questions/43735390/msbuild-15-0-visual-studio-2017-throws-error-msb4067-for-solutions-with-ssdt-p#comment74649829_43759749).\r\n\r\nHI, I am having .dtproj and .rptproj in a solution. i was getting errors for SSRS as well as SSIS. with this workaround, i could solve ssrs error message. Now SSIS is still there. I added :\r\n\r\n<Project InitialTargets=\"WorkAroundMSBuild2064\">\r\n <Target Name=\"WorkAroundMSBuild2064\">\r\n  <!-- Work around https://github.com/Microsoft/msbuild/issues/2064 by\r\n       removing *.rptproj from the generated solution metaproject. -->\r\n  <ItemGroup>\r\n   <ProjectReference Remove=\"%(ProjectReference.Identity)\"\r\n                     Condition=\"'@(ProjectReference->'%(Extension)')' == '.rptproj'\" />\r\n\t<ProjectReference Remove=\"%(ProjectReference.Identity)\"\r\n                     Condition=\"'@(ProjectReference->'%(Extension)')' == '.dtproj'\" />\r\n  </ItemGroup>\r\n </Target>\r\n</Project>\r\n\r\n\r\nCan you please let me know how to add .dtproj referance ?",
        "createdAt": "2020-02-04T13:45:18Z",
        "updatedAt": "2020-02-04T13:45:18Z",
        "author": {
          "login": "shalmali30"
        }
      },
      {
        "body": "Is there any plan to resolve fundamentally this issue?",
        "createdAt": "2021-05-12T00:57:07Z",
        "updatedAt": "2021-05-12T00:57:07Z",
        "author": {
          "login": "soroshsabz"
        }
      },
      {
        "body": "Is there any update on this issue?",
        "createdAt": "2021-05-13T05:24:28Z",
        "updatedAt": "2021-05-13T05:24:28Z",
        "author": {
          "login": "madibaT"
        }
      },
      {
        "body": "@arielman what is helping TFS update 2 ?",
        "createdAt": "2021-05-28T15:10:28Z",
        "updatedAt": "2021-05-28T15:10:28Z",
        "author": {
          "login": "soroshsabz"
        }
      },
      {
        "body": "How about adding `SkipUnsupportedProjects` like [`SkipNonexistentProjects`]( https://docs.microsoft.com/visualstudio/msbuild/msbuild-task?view=vs-2022) to MSBuild task? Related https://github.com/NuGet/Home/issues/7796  FYI.. @dotnet/msbuild team",
        "createdAt": "2022-03-22T03:00:33Z",
        "updatedAt": "2022-03-25T23:17:22Z",
        "author": {
          "login": "kartheekp-ms"
        }
      },
      {
        "body": "FYI.. @marcpopMSFT @dotnet/msbuild team this issue has 23 upvotes from the community in https://github.com/NuGet/Home/issues/7796. In summary, NuGet.exe invokes msbuild.exe during restore to identify the project references for a project. As per @kartheekp-ms's analysis https://github.com/NuGet/Home/issues/7796#issuecomment-1076622574, it looks like something changed in msbuild version after 15.9 where msbuild.exe started returning a failure exit code when trying to read project references for a custom project (for example vdproj in this case). This happens even when ContinueOnError is set to WarnAndContinue (new behavior after 15.9 version). NuGet raises an exception in this case causing restore failures.",
        "createdAt": "2022-04-04T01:06:53Z",
        "updatedAt": "2022-04-04T01:06:53Z",
        "author": {
          "login": "aortiz-msft"
        }
      },
      {
        "body": "@rainersigwald I'm upgrading some SSAS dwproj files from 2019 to VS 2022, and I'm getting a build failure that just says Object reference not set to an instance of an object.\r\nCurrently, there isn't an official extension to support loading up SSAS projects, but I did try to install the latest release candidate:\r\nhttps://marketplace.visualstudio.com/items?itemName=ProBITools.MicrosoftAnalysisServicesModelingProjects\r\n\r\nIs there a similar workaround to get the dwproj file to build and deploy in Visual studio 2022?",
        "createdAt": "2022-04-18T19:46:20Z",
        "updatedAt": "2022-04-18T19:46:20Z",
        "author": {
          "login": "thelaziestgenius"
        }
      },
      {
        "body": "@thelaziestgenius are you building from Visual Studio, or using `MSBuild.exe` on the command line?",
        "createdAt": "2022-04-18T19:50:39Z",
        "updatedAt": "2022-04-18T19:50:39Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> @rainersigwald \r\n\r\nI'm building from Visual Studio. Is there a way to build in MSBuild.exe to get more logging?",
        "createdAt": "2022-04-18T19:54:36Z",
        "updatedAt": "2022-04-18T20:20:07Z",
        "author": {
          "login": "thelaziestgenius"
        }
      },
      {
        "body": "@thelaziestgenius If you're building from Visual Studio, you're not hitting the problem tracked by this issue, which manifests only for command-line builds. I think you'll have to ask in the support channels for that plugin.",
        "createdAt": "2022-04-18T20:29:53Z",
        "updatedAt": "2022-04-18T20:29:53Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald  I've reached out to the team that manages the Microsoft Analysis Services Projects extension.\r\n\r\nI ran this command and got the following error:\r\nmsbuild \"C:\\Projects\\SSAS.dwproj\" /t:go /fl\r\n\r\nError:\r\nMSBuild version = \"16.11.2+f32259642\"\r\nBuild FAILED.\r\n\r\n\"C:\\Projects\\SSAS.dwproj\" (go target) (1) ->\r\n  C:\\Projects\\SSAS.dwproj(2,3): error MSB4067: The element <ProductVersion> beneath element <Project> is unrecognized.\r\n\r\n    0 Warning(s)\r\n    1 Error(s)\r\n\r\nTime Elapsed 00:00:00.04\r\n\r\nI've also tried running it with the 2022 exe explicitly:\r\nMSBuild version = \"17.1.0+ae57d105c\" and got the same error.",
        "createdAt": "2022-04-19T13:23:10Z",
        "updatedAt": "2022-04-19T14:03:30Z",
        "author": {
          "login": "thelaziestgenius"
        }
      },
      {
        "body": "@thelaziestgenius that is not expected to work, because `.dwproj` files are not MSBuild projects; they are a different project format recognized by the Visual Studio plugin, which also handles building them.",
        "createdAt": "2022-04-19T14:36:06Z",
        "updatedAt": "2022-04-19T14:36:06Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}