{
  "number": 3312,
  "title": "GetReferenceAssemblyPaths should depend on _PrepareForReferenceResolution",
  "body": "### Steps to reproduce\r\n\r\nWe see a case where we cannot compile a single .cpp file in a native project in Visual Studio because of this missing target dependency. `_PrepareForReferenceResolution` normally unsets `TargetFrameworkMoniker` when the project is a native project. This then makes the task `GetReferenceAssemblyPaths` in the target `GetReferenceAssemblyPaths` be skipped. When compiling a single file, though, `_PrepareForReferenceResolution` is not run, but `GetReferenceAssemblyPaths` is still run, and the task fails with \r\n\r\n```\r\n1>Target \"GetReferenceAssemblyPaths\" in file \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Professional\\MSBuild\\15.0\\Bin\\Microsoft.Common.CurrentVersion.targets\":\r\n1>  Set Property: TargetFrameworkDirectory=\r\n1>  Using \"GetReferenceAssemblyPaths\" task from assembly \"Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\".\r\n1>  Task \"GetReferenceAssemblyPaths\"\r\n1>    Task Parameter:TargetFrameworkMoniker=.NETFramework,Version=v4.0\r\n1>    Task Parameter:BypassFrameworkInstallChecks=True\r\n1>    C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Professional\\MSBuild\\15.0\\Bin\\Microsoft.Common.CurrentVersion.targets(1124,5): error MSB3644: The reference assemblies for framework \".NETFramework,Version=v4.0\" were not found. To resolve this, install the SDK or Targeting Pack for this framework version or retarget your application to a version of the framework for which you have the SDK or Targeting Pack installed. Note that assemblies will be resolved from the Global Assembly Cache (GAC) and will be used in place of reference assemblies. Therefore your assembly may not be correctly targeted for the framework you intend.\r\n```\r\n\r\nA .NET SDK should not be required to be able to develop native applications. In this case, a workaround exists by always building the whole project at a time. However, for iteration speed when editing a common header on a resource constrained system, like a laptop, it is faster to repeatedly rebuild only the single file of interest and not every other file transitively affected by the changes.\r\n\r\n### Expected  behavior\r\n\r\nCompiling a single file in Visual Studio via right click -> compile should succeed.\r\n\r\n### Actual behavior\r\n\r\nOn some systems, doing so fails due to a failure to resolve a .NET SDK.\r\n\r\n### Environment data\r\n`msbuild /version` output: 15.5.180.51428\r\n\r\nOS info: Win 10\r\n\r\nIf applicable, version of the tool that invokes MSBuild (Visual Studio, dotnet CLI, etc): Visual Studio 15.5.6\r\n",
  "state": "CLOSED",
  "createdAt": "2018-05-15T00:51:10Z",
  "updatedAt": "2024-02-21T17:13:10Z",
  "closedAt": "2021-07-22T04:01:06Z",
  "author": {
    "login": "akrieger"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "@yuehuang010, can you take a look at this? I don't know how single-file compilation from VS works.",
        "createdAt": "2018-05-15T16:34:34Z",
        "updatedAt": "2018-05-15T16:34:34Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "GetReferenceAssemblyPaths DependOnTarget $(GetReferenceAssemblyPathsDependsOn) which should contain \"_PrepareForReferenceResolution\".\r\n\r\nSet in around Microsoft.CppBuild.targets :128",
        "createdAt": "2018-05-16T00:30:22Z",
        "updatedAt": "2018-05-16T00:30:22Z",
        "author": {
          "login": "yuehuang010"
        }
      }
    ]
  }
}