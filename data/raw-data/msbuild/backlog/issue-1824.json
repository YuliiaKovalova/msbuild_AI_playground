{
  "number": 1824,
  "title": "Regression in property expansion",
  "body": "Consider this scenario:\r\n\r\n1. You have `expansion-deps.projitems` which contains the `@(JdkIncludePath)` item group.\r\n2. You have `expansion.props` which uses `@(JdkIncludePath)` to generate a `$(_JdkIncludePaths)` property\r\n3. You have `expansion.projitems` which creates a *new* `@(_HostRuntime)` item group which uses\r\n    `$(JdkIncludePath)` within the `%(_HostRuntime.CFlags)` item metadata\r\n4. You print out `%(_HostRuntime.CFlags)`.\r\n\r\nIncredibly, behavior differs between VS2015 and VS2017.\r\n\r\nNote: Read `works-with-mono-4.x` as just labels for the two different cases. Reading the project files will make that clearer.\r\n\r\nWith VS2015 we get:\r\n\r\n```\r\nmsbuild /v:minimal expansion.targets\r\nMicrosoft (R) Build Engine version 14.0.25420.1\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  CFlags: works-with-mono-4.6: -I/something -I/something-else\r\n  CFlags: works-with-mono-4.8: -I/something -I/something-else\r\n```\r\n\r\nWith VS2017rc4:\r\n\r\n```\r\nmsbuild /v:minimal expansion.targets\r\nMicrosoft (R) Build Engine version 15.1.545.13942\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  CFlags: works-with-mono-4.6:\r\n  CFlags: works-with-mono-4.8: -I/something -I/something-else\r\n```\r\n\r\nThe `%(_HostRuntime.CFlags)` value for `works-with-mono-4.8` *doesn't* use `$(_JdkIncludePaths)`. Instead, it uses `@(JdkIncludePath)`:\r\n\r\n```xml\r\n    <_HostRuntime Include=\"works-with-mono-4.8\">\r\n      <CFlags>@(JdkIncludePath->'-I%(Identity)', ' ')</CFlags>\r\n    </_HostRuntime>\r\n```\r\n\r\nThe project files are attached - [bxc-52673.zip](https://github.com/Microsoft/msbuild/files/828974/bxc-52673.zip).",
  "state": "CLOSED",
  "createdAt": "2017-03-08T21:13:20Z",
  "updatedAt": "2024-02-21T17:20:58Z",
  "closedAt": "2017-03-17T17:46:29Z",
  "author": {
    "login": "radical"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "What I find interesting about this is that the current behavior is what I would expect, since properties are expanded before items and a reference to an item in a property isn't well-formed. I have no idea what caused it to work in v14. \ud83e\udd15 ",
        "createdAt": "2017-03-08T21:56:34Z",
        "updatedAt": "2017-03-08T21:56:34Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I would go around it by evaluating the property inside the target it gets used in. Would that work @rainersigwald ?",
        "createdAt": "2017-03-09T13:19:48Z",
        "updatedAt": "2017-03-09T13:19:48Z",
        "author": {
          "login": "borgdylan"
        }
      },
      {
        "body": "Yes, if the property is set after item evaluation (by being done at execution time inside a target), it should work fine.",
        "createdAt": "2017-03-09T15:06:03Z",
        "updatedAt": "2017-03-09T15:06:03Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Closing this as a duplicate of #1359. Will update over there.",
        "createdAt": "2017-03-17T17:46:29Z",
        "updatedAt": "2017-03-17T17:46:29Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}