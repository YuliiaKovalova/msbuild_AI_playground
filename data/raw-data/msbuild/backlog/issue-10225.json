{
  "number": 10225,
  "title": "VS Binlog has evaluations that don't include property/item data with MSBUILDLOGIMPORTS",
  "body": "I am in possession of a binlog that looks like this\r\n\r\n![image](https://github.com/dotnet/msbuild/assets/3347530/777843a1-7cbc-45a6-a8c0-d73d0719a596)\r\n\r\nSo it did evaluation, including firing the import events AND EMBEDDING THE FILES but somehow didn't report post-evaluation item and property states?",
  "state": "CLOSED",
  "createdAt": "2024-06-11T20:37:05Z",
  "updatedAt": "2024-08-15T16:37:48Z",
  "closedAt": "2024-08-15T16:37:48Z",
  "author": {
    "login": "rainersigwald"
  },
  "labels": [
    "bug",
    "regression",
    "Area: Logging"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "GangWang01"
      },
      {
        "login": "JanKrivanek"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Have been able to reproduce the issue:\r\n1. Create a vcxproj console project from a VS template\r\n2. Open a cmd and set `MSBUILDLOGIMPORTS` and `MSBUILDDEBUGENGINE` environment variables.\r\n3. Open the solution from the same cmd: `<path to devenv.exe> <solution_name>`\r\n4. Run build\r\n5. Check MSBuild_Logs folder for binlogs with missing items and properties.",
        "createdAt": "2024-06-13T08:50:51Z",
        "updatedAt": "2024-06-13T08:50:58Z",
        "author": {
          "login": "AR-May"
        }
      },
      {
        "body": "Have we validated that @JanKrivanek's change actually fixes this?\r\n\r\nBinlogs obtained from VS have always been deficient and missing info. The Project System Tools extension was especially bad, but even the MSBUILDDEBUGENGINE=1 mode produces no evaluation and I thought it's because CPS evaluates separately from builds.\r\n\r\nSee related:\r\n * https://github.com/dotnet/project-system-tools/issues/256\r\n * https://github.com/dotnet/project-system-tools/issues/257\r\n\r\nI don't think MuxLogger is the problem. I have an environment where MuxLogger is present but still the binlogs have the full information.",
        "createdAt": "2024-06-14T18:25:34Z",
        "updatedAt": "2024-06-14T18:25:34Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "Another way to test this is set the env variable MSBUILDLOGPROPERTIESANDITEMSAFTEREVALUATION=1 and see if it fixes things. If it does then yes, it indicates a legacy logger is present. \r\n\r\nBut I suspect it won't fix it.",
        "createdAt": "2024-06-14T18:30:02Z",
        "updatedAt": "2024-06-14T18:30:02Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "> Binlogs obtained from VS have always been deficient and missing info. The Project System Tools extension was especially bad, but even the MSBUILDDEBUGENGINE=1 mode produces no evaluation and I thought it's because CPS evaluates separately from builds.\r\n\r\nthere will be no evaluation _in the logs of build_, because it already happened, but there should be a log with evaluations in it, and this one seems to be that one . . . except they're incomplete.",
        "createdAt": "2024-06-14T18:34:46Z",
        "updatedAt": "2024-06-14T18:34:46Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I've never understood how are evaluations separate from build? How is it implemented?",
        "createdAt": "2024-06-14T20:11:29Z",
        "updatedAt": "2024-06-14T20:11:29Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "The `ProjectInstance` (or `Project`) can be created and evaluated standalone. They can then be used to issue build requests.\r\nThat's how those 2 events get executed separately.\r\n\r\nI'll double/triple check and debug the scenario next week (away from my devbox now) to confirm the theory.",
        "createdAt": "2024-06-14T20:50:48Z",
        "updatedAt": "2024-06-14T20:50:48Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "Reopening as fix introduced VS perf regression - we will need to fix that one in coordination with the fix",
        "createdAt": "2024-08-02T07:17:04Z",
        "updatedAt": "2024-08-02T07:17:04Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "We'll need to investigate the hidden root-cause, in order to prevent the perf regression after fix.\r\n\r\n**First we'll need to find stable repro - steps:**\r\n * Create simple console app\r\n * Use latest preview or main VS (the issue should be in main from about beginning of June, so doesn't have to be exactly latest)\r\n * Run the following - to enable binlogging and collect them:\r\n \r\n ```\r\n$env:MSBUILDDEBUGENGINE = 1 \r\n> $env:MSBUILDDEBUGPATH=\"C:\\MSBuildReproLogs\" \r\n> & \"devenv.exe\" MySolution.sln\r\n<Run full rebuild from GUI>\r\n```\r\n\r\nCheck the binlog - evaluation result of a project should normally contain properties and items:\r\n\r\n<img width=\"187\" alt=\"image\" src=\"https://github.com/user-attachments/assets/e972920a-9707-42b4-95e4-a01cf7cd222e\">\r\n\r\nIf they are missing - issue reproduces.\r\n\r\nIf issue doesn't reproduce, try:\r\n * With new c++ console project instead of C# console project\r\n * With disabling msbuild in-proc nodes:\r\n```\r\n> $env:MSBUILDNOINPROCNODE=\"1\" \r\n```\r\n\r\n**Once repro is found, we'll need previous - unbroken instance**\r\n\r\n* Try 17.10 (LTSC), edition doesn't matter. Older versions should be without issue as well - but ideally we get something closer before regression was introduced\r\n* During trying if issue reproes - make sure to kill all outstanding dotnet and msbuild instances (e.g. use sysinternals pskill: simple `pskill msbuild` and `pskill dotnet` will do the job)\r\n* And make sure you fully rebuild the project\r\n* Unbroken instance will mean we see properties and items in evaluation node for the same scenario where we do not see those in the 'broken version'\r\n\r\n**Once we have 2 versions to compare - we'll need to look into behavior differences**\r\n\r\n* The Issue is most likely in different boolean value returned by `IncludeEvaluationPropertiesAndItems` https://github.com/dotnet/msbuild/blob/bd46115a1d330e758e6a53798c71efe0f8bb7c0a/src/Build/BackEnd/Components/Logging/LoggingService.cs#L555-L573\r\n* Break into the MSBuild engine - e.g. via setting:\r\n```\r\n$env:MSBUILDDEBUGONSTART=\"1\"\r\n```\r\n* Set the breakpoint to the mentioned property\r\n* Ideally we have repro that reproes without in proc node (see `MSBUILDNOINPROCNODE` above) - so that we can rely on breaking into external process. Otherwise - if we'd need to debug the msbuild code run within the VS process - we'd need to inject custom built MSBuild bits (and add `Debugger.Launch()` into the property), or attach to VS and use 'Function breakpoint' (see later). We might likely need any of those techniques in a later steps anyway (see next steps), but we might be able to avoid now.\r\n* See if the returned values differes between versions\r\n* They'll likely differ and it'll likely be because one of the `sink.IncludeEvaluationPropertiesAndItems` values differ between the cases\r\n* If that's the case - It's likely that `MuxLogger` is the one logger causing the difference: https://github.com/dotnet/msbuild/blob/bd46115a1d330e758e6a53798c71efe0f8bb7c0a/src/Utilities/MuxLogger.cs#L187\r\n* For investigation which loggers are registered (and for investigating what called `MuxLogger` differently - if that's proved culprit) we'll need our custom msbuild bits - as we need to break into [`InitializeLogger`](https://github.com/dotnet/msbuild/blob/main/src/Build/BackEnd/Components/Logging/LoggingService.cs#L1716) - which runs in the main node. Other option is to attach debugger to VS process and add unresolved Function breakpoint (Debug -> New Breakpoint -> Function Breakpoint) and specify the InitializeLogger function - it might though get some efforts to get working correctly\r\n* If `MuxLogger` is the culprit - we need to set breakpoint on its `IncludeEvaluationPropertiesAndItems` setter and see what code did call it in the 'before regression VS version' and see if that code is not called in 'after regression VS version'\r\n\r\n\r\nIf any of the above steps doesn't work - please do not continue with further steps (as they might expect the previous steps are true) - instead we'll need to figure adjustment of investigation.",
        "createdAt": "2024-08-05T06:55:33Z",
        "updatedAt": "2024-08-05T07:00:34Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "No matter disabling msbuild in-proc node or not, this issue could be reproduced with older VS versions, even back to 17.0.0. VS 2019(16.11.38) also has this issue. It means this issue has existed for a long time.\r\n\r\nWith Jan's help, I looked into which loggers are registered and which of these call IEventSource4.IncludeEvaluationPropertiesAndItems() in Initialize(IEventSource eventSource) of the loggers through debugging with `$env:MSBuildDebugBuildManagerOnStart=\"1\"`. The registered loggers are:\r\n- Microsoft.Build.Logging.BinaryLogger - This is set by `$env:MSBUILDDEBUGENGINE=1`.\r\n- Microsoft.Build.Utilities.MuxLogger\r\n![image](https://github.com/user-attachments/assets/36d34512-c266-4f24-b196-613c37cce523)\r\nAs the screenshot above, the `IncludeEvaluationPropertiesAndItems` of EventSourceSink with the value `false` was from the `MuxLogger.Initialize(IEventSource eventSource)`. The breakpoint added to the setter of MuxLogger's property `IncludeEvaluationPropertiesAndItems` was never hit and it was false by default. https://github.com/dotnet/msbuild/blob/bd46115a1d330e758e6a53798c71efe0f8bb7c0a/src/Utilities/MuxLogger.cs#L185-L188 was not run to set `IncludeEvaluationPropertiesAndItems` of EventSourceSink and caused the issue. \r\n",
        "createdAt": "2024-08-13T12:32:39Z",
        "updatedAt": "2024-08-13T12:32:39Z",
        "author": {
          "login": "GangWang01"
        }
      },
      {
        "body": "Thank you @GangWang01!\r\nLet's dig more into why the fix for this causes perf regression - what are the other registered loggers in VS and what are their setting of `IncludeEvaluationPropertiesAndItems`?",
        "createdAt": "2024-08-13T13:26:12Z",
        "updatedAt": "2024-08-13T13:26:12Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "Enabling binary logger by setting `$env:MSBUILDNOINPROCNODE=\"1\" ` interfered the investigation. It didn't simulate the case in VS perf tests.\r\nWithout enabling binary logger, I found the loggers below were registered that was different from the investigation.\r\n- Microsoft.Build.Utilities.MuxLogger - The setter of MuxLogger's property IncludeEvaluationPropertiesAndItems was never hit. \r\n- Microsoft.Build.Execution.BuildManager.NullLogger - It calls `eventSource4.IncludeEvaluationPropertiesAndItems()` directly https://github.com/dotnet/msbuild/blob/1b1df9e39b8c576d33d8964c7f4a64716fd46371/src/Build/BackEnd/BuildManager/BuildManager.cs#L3300. This logger may cause the perf regression with the fix.",
        "createdAt": "2024-08-14T08:37:51Z",
        "updatedAt": "2024-08-14T08:37:51Z",
        "author": {
          "login": "GangWang01"
        }
      }
    ]
  }
}