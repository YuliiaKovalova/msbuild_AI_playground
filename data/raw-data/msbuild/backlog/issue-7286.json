{
  "number": 7286,
  "title": "Change ItemDictionary<T>.GetEnumerator() to iterator",
  "body": "[Microsoft.Build.Collections.ItemDictionary\\<T>.GetEnumerator()](https://github.com/dotnet/msbuild/blob/96a618ca59610908eddc92bfd0198746c34f0ed5/src/Build/Collections/ItemDictionary.cs#L154-L160) currently creates an instance of a nested Enumerator class. It could be rewritten as an iterator method with nested `foreach` loops and `yield return`.\r\n\r\nAdvantages:\r\n\r\n- Source code becomes shorter and easier to understand.\r\n- Ensures that Dispose is called at the appropriate places. (But it looks like a no-op anyway.)\r\n- Gets rid of the custom IEnumerator.Reset() implementation that has a bug (<https://github.com/dotnet/msbuild/pull/7211#issuecomment-1011987022>).\r\n\r\nRisks:\r\n\r\n- Iterators throw NotSupportedException if IEnumerator.Reset() is called, unlike the current custom enumerator. However, the current implementation of IEnumerator.Reset() has a bug already, and ItemDictionary\\<T> is internal, so perhaps nothing calls Reset.\r\n- The [current implementation of IEnumerator.Current](https://github.com/dotnet/msbuild/blob/96a618ca59610908eddc92bfd0198746c34f0ed5/src/Build/Collections/ItemDictionary.cs#L422-L427) throws InvalidOperationException (by attempting to read `((IEnumerator)_listEnumerator).Current`) if there is no current element. An iterator would silently return the previous value of IEnumerator.Current instead. If some caller incorrectly reads IEnumerator.Current in such a situation, then an iterator might make that bug more difficult to find.\r\n- Runtime performance might become slower, or faster.\r\n- Debugging might become more difficult, as the compiler-generated state machine would be more complex than the source code.",
  "state": "OPEN",
  "createdAt": "2022-01-13T15:53:35Z",
  "updatedAt": "2024-01-31T08:18:47Z",
  "closedAt": null,
  "author": {
    "login": "KalleOlaviNiemitalo"
  },
  "labels": [
    "needs-design",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Backlog"
  },
  "comments": {
    "nodes": [
      {
        "body": "A related matter is whether you want to make the non-generic [IEnumerable.GetEnumerator() implementation in ItemDictionary\\<T>](https://github.com/dotnet/msbuild/blob/96a618ca59610908eddc92bfd0198746c34f0ed5/src/Build/Collections/ItemDictionary.cs#L162-L168) behave the same as the generic IEnumerable\\<T>.GetEnumerator(). Currently, IEnumerable.GetEnumerator() enumerates key-value pairs from the _itemLists dictionary, but IEnumerable\\<T>.GetEnumerator() enumerates items in the linked lists that are values in the dictionary. This difference seems rather confusing to me. Changing ItemDictionary\\<T>.GetEnumerator() to an iterator method does not require any changes in IEnumerable.GetEnumerator(), though.",
        "createdAt": "2022-01-13T15:59:52Z",
        "updatedAt": "2022-01-13T15:59:52Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "[SharpLab](https://sharplab.io/#v2:CYLg1APgAgDABFAjAOgMIHsA2mCmBjAFwEt0A7AZwG4BYAKFgUQBYba6jSCcAnUgQ0xxyOATmAIATHACSXALYARIoRL9uATwA8AFQB8cEIwDMO3XTgW4AdwAWPHHG0HJdAN7nLAB25EAbny44bhFgMkx1OCUVMj4NTSQYABo4ABkOAGsxNPICU30AfSJ5bIJyOABeOFIcKwAKAEpWSzgPCygjGQBRUgBXOR4A9G5TOABxHAJuvoGCIYbWuHdaZuaAMyGRPBs4Wv9uOHTfTzgOOELiohzyeoXmpZWHuHXgvi2dvZP5E9IDo+QANQEPRwN2Wjzut3BliQiAQAHZPjg5E0oRYAL6Q9ELDFgh4LaRTfrcQb7JBGZDjSa9IkkhoVfQEGyXCkTQkzOaNOhooA=) shows the compiler-generated enumerator would be larger than the current one (five new fields) and its MoveNext() method would do many additional assignments to `<>1__state`, so it's likely to be slower.\r\n\r\nThe compiler-generated enumerator would call _itemLists.Values.GetEnumerator() only when MoveNext() is first called, rather than immediately during ItemDictionary\\<T>.GetEnumerator(). This would prevent the compiler-generated enumerator instance from being invalidated if something mutates the dictionary between GetEnumerator() and MoveNext(). Unlikely to matter in practice.\r\n\r\nThe current enumerator has a comment about \"the lock\":\r\n<https://github.com/dotnet/msbuild/blob/96a618ca59610908eddc92bfd0198746c34f0ed5/src/Build/Collections/ItemDictionary.cs#L403>\r\nwhich suggests that the timing of the listEnumerable.GetEnumerator() call is important. However, when ItemDictionary\\<T>.GetEnumerator() creates an instance of the enumerator, it does not take any lock, so I don't know what the comment really means:\r\n<https://github.com/dotnet/msbuild/blob/96a618ca59610908eddc92bfd0198746c34f0ed5/src/Build/Collections/ItemDictionary.cs#L154-L160>",
        "createdAt": "2022-01-18T07:20:20Z",
        "updatedAt": "2022-01-18T07:21:27Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "Sounds like we should probably leave it alone if our goal is performance? If that is the case, we might want to add a comment about it to the code?\r\n\r\nIf `ItemDictionary<T>` is extensively used, maybe we can get the opinions of a few of the dotnet senior engineers to make sure we haven't missed anything?",
        "createdAt": "2022-01-18T22:01:32Z",
        "updatedAt": "2022-01-18T22:01:32Z",
        "author": {
          "login": "elachlan"
        }
      },
      {
        "body": "Anyway, it would be good to fix the Reset method or make it always throw. Is it currently covered by any tests?",
        "createdAt": "2022-01-19T00:33:14Z",
        "updatedAt": "2022-01-19T00:33:14Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "@ladipro Is @KalleOlaviNiemitalo does this seem like a good idea or are we wasting our time?",
        "createdAt": "2022-01-19T13:03:16Z",
        "updatedAt": "2022-01-19T13:03:16Z",
        "author": {
          "login": "elachlan"
        }
      },
      {
        "body": "@elachlan it is definitely not high priority at the moment. We'll likely move it to backlog. Let us know if you're looking for impactful MSBuild work and we'll get back to you shortly.",
        "createdAt": "2022-01-19T13:21:20Z",
        "updatedAt": "2022-01-19T13:21:20Z",
        "author": {
          "login": "ladipro"
        }
      }
    ]
  }
}