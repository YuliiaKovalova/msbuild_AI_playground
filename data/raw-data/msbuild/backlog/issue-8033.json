{
  "number": 8033,
  "title": "target runs twice during a single build",
  "body": "### Issue Description\r\n\r\nMy target runs twice during a single build when invoking a project file. That is not what I expect to happen according to [the msbuild documentation](https://learn.microsoft.com/en-us/visualstudio/msbuild/msbuild-targets?view=vs-2022)\r\n\r\nI have attached a minimal sample [TargetsLoadBehavior.zip](https://github.com/dotnet/msbuild/files/9735589/TargetsLoadBehavior.zip)  that showcases the issue. My question is if this is a bug on MsBuild side or a bug in my code. \r\n\r\n### Steps to Reproduce\r\n\r\ndotnet restore on the solution works fine:\r\n```\r\ndotnet restore .\\TargetsLoadBehavior.sln -noAutoResponse\r\n  * child: Loaded  child: 'E:\\Projects\\bugreportsAndSamples\\MsBuild\\TargetsLoadBehavior\\children\\Directory.Build.props'\r\n  * child: Loaded  child: 'E:\\Projects\\bugreportsAndSamples\\MsBuild\\TargetsLoadBehavior\\children\\Directory.Build.targets'\r\n  * child: Loaded parent: 'E:\\Projects\\bugreportsAndSamples\\MsBuild\\TargetsLoadBehavior\\Directory.Build.targets'\r\n  * child: Loaded  other: 'E:\\Projects\\bugreportsAndSamples\\MsBuild\\TargetsLoadBehavior\\children\\OtherTarget.targets'\r\n  * parent: Loaded parent: 'E:\\Projects\\bugreportsAndSamples\\MsBuild\\TargetsLoadBehavior\\Directory.Build.targets'\r\n  Determining projects to restore...\r\n  All projects are up-to-date for restore.\r\n```\r\n\r\ndotnet restore on the child project I can see that several targets are executed twice (highlighted with `<first time` and `<second time`:\r\n```\r\ndotnet restore .\\children\\child\\child.csproj -noAutoResponse\r\n  * child: Loaded  child: 'E:\\Projects\\bugreportsAndSamples\\MsBuild\\TargetsLoadBehavior\\children\\Directory.Build.props'   <first time\r\n  * child: Loaded  child: 'E:\\Projects\\bugreportsAndSamples\\MsBuild\\TargetsLoadBehavior\\children\\Directory.Build.targets' <first time\r\n  * child: Loaded parent: 'E:\\Projects\\bugreportsAndSamples\\MsBuild\\TargetsLoadBehavior\\Directory.Build.targets'          <first time\r\n  * child: Loaded  other: 'E:\\Projects\\bugreportsAndSamples\\MsBuild\\TargetsLoadBehavior\\children\\OtherTarget.targets'     <first time\r\n  * child: Loaded  child: 'E:\\Projects\\bugreportsAndSamples\\MsBuild\\TargetsLoadBehavior\\children\\Directory.Build.props'   <second time\r\n  * child: Loaded  child: 'E:\\Projects\\bugreportsAndSamples\\MsBuild\\TargetsLoadBehavior\\children\\Directory.Build.targets' <second time\r\n  * child: Loaded parent: 'E:\\Projects\\bugreportsAndSamples\\MsBuild\\TargetsLoadBehavior\\Directory.Build.targets'          <second time\r\n  * child: Loaded  other: 'E:\\Projects\\bugreportsAndSamples\\MsBuild\\TargetsLoadBehavior\\children\\OtherTarget.targets'     <second time\r\n  Determining projects to restore...\r\n  All projects are up-to-date for restore.\r\n```\r\n\r\n### Expected Behavior\r\nI would expect no invokation of the items that I marked as `<second time`\r\n\r\n### Actual Behavior\r\nSome targets run twice during a single build\r\n\r\n### Versions & Configurations\r\ndotnet --version\r\n6.0.401\r\n\r\nFor completeness, although this issue is independent of the msbuild executable and VS 2022\r\nmsbuild -version\r\nMSBuild version 17.3.0+f67e3d35e for .NET Framework\r\n17.3.0.37102\r\n\r\n### Additional context\r\nI use MsBuild to configure a branding mechanism for a complex application. In my usecase \"children\" contains the fully functional base application with all its projects. If a parent is present, the base application will be branded with the information (MsBuild) and behavior (.cs code) of the parent. (The build of the base application will be different than if no parent is available).\r\n\r\nThe base application uses Directory.Build.props and Directory.Build.targets for its global configuration. Extensibility is given by overriding properties. The branding (parent) application uses its own Directory.Build.props and Directory.Build.targets files. When the child projects are built they need to detect that they have a parent by using [Multi Level Merging](https://learn.microsoft.com/en-us/visualstudio/msbuild/customize-your-build?view=vs-2019#use-case-multi-level-merging).\r\n\r\nI hope the code, the output, and the usecase are clear. \r\nKind regards\r\nDave",
  "state": "CLOSED",
  "createdAt": "2022-10-07T16:39:44Z",
  "updatedAt": "2024-02-21T14:07:26Z",
  "closedAt": "2023-05-09T14:09:36Z",
  "author": {
    "login": "codingdave"
  },
  "labels": [
    "bug",
    "author-responded",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "It is running again because the second instance has different Properties.  This will in turn spawn a new evaluation and build instance, thus a fresh set of targets.  I am pretty sure this is documented somewhere, but I couldn't find it.  The second instance has ExcludeRestorePackageImports=true property, added in Common7\\IDE\\CommonExtensions\\Microsoft\\NuGet\\NuGet.targets. \r\n\r\nI think the issue is using \"InitialTargets\" as a way to invoke your target.  I don't recommend doing anything heavy in InitialTargets as it will be run on every instance.  Instead, move your attachment point to be part of the actual Compile chain.  IE. BeforeTargets=\"Build\".  ",
        "createdAt": "2022-10-13T00:15:19Z",
        "updatedAt": "2022-10-13T00:15:19Z",
        "author": {
          "login": "yuehuang010"
        }
      },
      {
        "body": "I don't see why the second instance has different properties. Nothing has changed except that I call the child.\r\n\r\nI am not doing anything heavy in the Initial targets. I use them to debug loading and invocation of my MsBuild setup.\r\n\r\nI tried using BeforeTargets=\"Restore;Build\" instead of using InitialTargets but that seems to fail for the target ParentDirectoryBuildTarget (parent/Directory.Build.targets), [see here](https://github.com/dotnet/msbuild/files/9771289/TargetsLoadBehavior_BeforeTargets_Restore_Build.zip) for which I don't see the Loading message.\r\n\r\nHoewever, I found out that the issue is a bit different and has nothing to do with parent/child or multi-level merging. Instead MsBuild behaves differently when calling the sln to calling the csproj (when\r\n [using InitialTargets](https://github.com/dotnet/msbuild/files/9771436/TargetsLoadBehavior_parent_InitialTargets.zip)):\r\n\r\n```\r\ndotnet restore .\\TargetsLoadBehavior.sln -noAutoResponse\r\n  * parent: Loaded parent: 'E:\\Projects\\bugreportsAndSamples\\MsBuild\\TargetsLoadBehavior\\Directory.Build.targets'\r\n  Determining projects to restore...\r\n  All projects are up-to-date for restore.\r\n```\r\n\r\n```\r\ndotnet restore .\\parent\\parent.csproj -noAutoResponse\r\n  * parent: Loaded parent: 'E:\\Projects\\bugreportsAndSamples\\MsBuild\\TargetsLoadBehavior\\Directory.Build.targets'\r\n  * parent: Loaded parent: 'E:\\Projects\\bugreportsAndSamples\\MsBuild\\TargetsLoadBehavior\\Directory.Build.targets'\r\n  Determining projects to restore...\r\n  Restored E:\\Projects\\bugreportsAndSamples\\MsBuild\\TargetsLoadBehavior\\parent\\parent.csproj (in 85 ms).\r\n```\r\n\r\nWhen I remove InitialTargets I still see a different behavior when invoking the project vs the solution (when [using BeforeTargets Restore](https://github.com/dotnet/msbuild/files/9771426/TargetsLoadBehavior_parent_BeforeTargets_Restore.zip)):\r\n\r\n\r\n```\r\ndotnet restore .\\TargetsLoadBehavior.sln -noAutoResponse\r\n  Determining projects to restore...\r\n  All projects are up-to-date for restore.\r\n```\r\n\r\n```\r\ndotnet restore .\\parent\\parent.csproj -noAutoResponse\r\n  Determining projects to restore...\r\n  * parent: Loaded parent: 'E:\\Projects\\bugreportsAndSamples\\MsBuild\\TargetsLoadBehavior\\Directory.Build.targets'\r\n  All projects are up-to-date for restore.\r\n```\r\n",
        "createdAt": "2022-10-13T06:29:18Z",
        "updatedAt": "2022-10-13T06:29:18Z",
        "author": {
          "login": "codingdave"
        }
      },
      {
        "body": "What you're encountering is basically a quirk of the NuGet implementation of `Restore`.\r\n\r\nNuGet collects `PackageReference` items from a loaded/evaluated copy of the project, then restores the referenced packages. However if done naively, this can lead to a very confusing behavior: a package (say `ReferencedPackage` can include MSBuild logic that has `<PackageReference Include=\"SomeOtherPackage\" />`, so\r\n\r\n1. On a clean repo, the restore would see only `ReferencedPackage`, and restore it.\r\n2. If you ran restore again, the restored build logic would be used, and the list of referenced packages would be `{ReferencedPackage, SomeOtherPackage}`.\r\n3. That potentially recurses! So there's no way to actually know \"we are done restoring\".\r\n\r\nTo solve this problem, NuGet collects `ProjectReference`s in a special mode, specifying the global property `ExcludeRestorePackageImports = true`. The imports of package-delivered build logic are conditioned on that property, so are not considered when getting the list of packages.\r\n\r\nSince your target is an `InitialTargets`, it runs _every time the project is built for any reason_.\r\n\r\nThe first time it runs is when the desired target is `Restore`, so the InitialTargets runs (in the instance of `child.csproj` that has no global properties set. Then the Restore target starts to run, and invokes a target inside `child.csproj` (but in a new instance with `ExcludeRestorePackageImports = true`). As _that_ starts to run, it first runs the InitialTargets, including your target, then runs the target that reports `PackageReference`s.\r\n\r\nIt is generally a bad idea to use `InitialTargets`, for exactly this reason. If you instead hook `BeforeTargets=\"BeforeBuild\"` or similar, your target won't be run in the NuGet-implementation-detail builds that collect `PackageReference` information.",
        "createdAt": "2022-10-13T17:24:00Z",
        "updatedAt": "2022-10-13T17:24:00Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Thanks @rainersigwald, I spend some time reading MsBuild evaluation to understand your answer. I see that InitialTargets should better not be used. (Isnt there a deprecation way for MsBuild?)\r\n\r\nBut can you explain my last finding from above: Why do I get different results from compiling the sln vs the csproj?\r\n\r\n> When I remove InitialTargets I still see a different behavior when invoking the project vs the solution (when [using BeforeTargets Restore](https://github.com/dotnet/msbuild/files/9771426/TargetsLoadBehavior_parent_BeforeTargets_Restore.zip)):\r\n\r\n```\r\ndotnet restore .\\TargetsLoadBehavior.sln -noAutoResponse\r\n  Determining projects to restore...\r\n  All projects are up-to-date for restore.\r\n```\r\n\r\n```\r\ndotnet restore .\\parent\\parent.csproj -noAutoResponse\r\n  Determining projects to restore...\r\n  * parent: Loaded parent: 'E:\\Projects\\bugreportsAndSamples\\MsBuild\\TargetsLoadBehavior\\Directory.Build.targets'\r\n  All projects are up-to-date for restore.\r\n```\r\n",
        "createdAt": "2022-10-18T20:59:44Z",
        "updatedAt": "2022-10-18T20:59:44Z",
        "author": {
          "login": "codingdave"
        }
      },
      {
        "body": "> But can you explain my last finding from above: Why do I get different results from compiling the sln vs the csproj?\r\n\r\nWhen restoring the solution, the project is loaded/targets are executed _exactly once_, with `ExcludeRestorePackageImports = true`, because the solution references it directly and sets that.\r\n\r\nWhen restoring the project, the project is loaded\r\n\r\n1. Once without that property (entry-point), which then starts to discover the graph, causing\r\n2. A second load with the property, which is used to collect the actual package references.\r\n\r\nThat causes the double-execution of the InitialTargets.",
        "createdAt": "2023-04-25T15:12:17Z",
        "updatedAt": "2023-04-25T15:12:17Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}