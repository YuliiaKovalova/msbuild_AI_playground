{
  "number": 4488,
  "title": "Support resource naming based on DependentUpon source by convention",
  "body": "Related issues:\r\n\r\nhttps://github.com/dotnet/winforms/issues/638\r\nhttps://github.com/dotnet/project-system/issues/4807\r\nhttps://github.com/dotnet/corefx/issues/34190\r\n\r\nIn SDK projects and new project system, we have eliminated the need for DependentUpon to make the appropriate file nesting in the IDE tree. However, there is a place where the build actually uses DependentUpon to:\r\n\r\n1. Locate a source file, and _parse (!)_ it to get first class name and namespace\r\n2. Generate .resources accordingly.\r\n\r\nLet first me say that this whole design is terrible and it is absolutely insane that we have code to find the class and namespace name in msbuild:\r\n\r\nhttps://github.com/microsoft/msbuild/blob/f309171ed821eb66cb635403e1fbff41ea22ae9c/src/Tasks/CSharpParserUtilities.cs#L15-L20\r\n\r\nBut people and features in VS rely on this and it has been a consistent source of feedback in moving to .NET Core 3.0.  So I give up and propose:\r\n\r\n1. Add a boolean property that, when true, causes us to look for the source file by convention when DependentUpon metadata is not found. \r\n\r\n2. Set that property by default for .NET Core App 3.0 TFM.\r\n\r\ncc @rainersigwald @davkean @livarcocc\r\n\r\n\r\n",
  "state": "CLOSED",
  "createdAt": "2019-07-03T18:23:55Z",
  "updatedAt": "2024-02-21T17:07:55Z",
  "closedAt": "2019-08-19T20:18:52Z",
  "author": {
    "login": "nguerrera"
  },
  "labels": [
    ".NET Core",
    "Area: Tasks",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "benvillalobos"
      }
    ]
  },
  "milestone": {
    "title": "MSBuild 16.3"
  },
  "comments": {
    "nodes": [
      {
        "body": "Proposed property name: `EmbeddedResourceUseDependentUponConvention`\r\n\r\nProposed new argument to `CreateManifestResourceName`: `UseDependentUponConvention`\r\n\r\nThe new code would go after this if it didn't return anything (so explicit in-the-project metadata should continue to win):\r\nhttps://github.com/microsoft/msbuild/blob/07d3c25a1461dfba3fcc1cc9b28cb8accd4e32b9/src/Tasks/CreateManifestResourceName.cs#L143",
        "createdAt": "2019-07-03T22:15:49Z",
        "updatedAt": "2019-07-03T22:15:49Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Sounds good.",
        "createdAt": "2019-07-03T22:59:17Z",
        "updatedAt": "2019-07-03T22:59:17Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "@BenVillalobos can you take a look at this once you're feeling better?",
        "createdAt": "2019-07-08T23:46:05Z",
        "updatedAt": "2019-07-08T23:46:05Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> Let first me say that this whole design is terrible and it is absolutely insane that we have code to find the class and namespace name in msbuild\r\n\r\nThis was for compatibility with the pre-MSBuild behavior, FWIW (build was only supported within devenv, where the IDE could supply the information). ",
        "createdAt": "2019-07-11T18:21:45Z",
        "updatedAt": "2019-07-11T18:22:24Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "That's worth a lot. Fascinating. ",
        "createdAt": "2019-07-11T18:40:17Z",
        "updatedAt": "2019-07-11T18:40:17Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "I just hit this while porting EF6 to .NET Core. We drop two files into the project:\r\n\r\n* Migrations\\201907170000000_MigrationName.cs // Contains a class named MigrationName\r\n* Migrations\\201907170000000_MigrationName.resx\r\n\r\nThe resource gets embedded as *RootNamespace.Migrations.<strong>201907170000000_</strong>MigrationName.resources* instead of just *RootNamespace.Migrations.MigrationName.resources* causing ResourceManager to throw.\r\n\r\nThe work around, of course, is to explicitly set the item's DependentUpon metadata:\r\n``` xml\r\n<EmbeddedResource Update=\"Migrations\\201907170000000_MigrationName.resx\">\r\n  <DependentUpon>201907170000000_MigrationName.cs</DependentUpon>\r\n</EmbeddedResource>\r\n```\r\n\r\ncc @ajcvickers @divega @Pilchie",
        "createdAt": "2019-07-17T21:02:29Z",
        "updatedAt": "2019-07-17T21:07:24Z",
        "author": {
          "login": "bricelam"
        }
      },
      {
        "body": "> 2. Set that property by default for .NET Core App 3.0 TFM.\r\n\r\n@nguerrera should this apply to .NET Standard 2.1 TFM as well?",
        "createdAt": "2019-07-18T00:32:19Z",
        "updatedAt": "2019-07-18T00:32:19Z",
        "author": {
          "login": "divega"
        }
      },
      {
        "body": "Yes. Good catch.",
        "createdAt": "2019-07-18T00:54:44Z",
        "updatedAt": "2019-07-18T00:54:44Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "Shouldn't this be turned on almost always with new format?",
        "createdAt": "2019-07-18T00:56:03Z",
        "updatedAt": "2019-07-18T00:56:03Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "I'm hesitant to make a breaking change here.",
        "createdAt": "2019-07-18T01:00:15Z",
        "updatedAt": "2019-07-18T01:00:15Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "Maybe turned off for known existing TFMs but on by default so that it is picked up by .NET Core 3.0 and up, .NET Standard 2.1 and up, new Mono versions, etc?",
        "createdAt": "2019-07-18T04:10:15Z",
        "updatedAt": "2019-07-18T04:10:15Z",
        "author": {
          "login": "divega"
        }
      },
      {
        "body": "@BenVillalobos This is fixed, right? It still doesn't appear to be working in 3.0-preview9/16.3-preview3. https://github.com/aspnet/EntityFramework6/issues/1225",
        "createdAt": "2019-09-05T20:40:09Z",
        "updatedAt": "2019-09-05T20:40:09Z",
        "author": {
          "login": "bricelam"
        }
      },
      {
        "body": "@bricelam It's fixed . . . unless the resx file is in a folder: #4695. Your workaround in the linked bug is good.",
        "createdAt": "2019-09-05T20:56:55Z",
        "updatedAt": "2019-09-05T20:56:55Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Now that the rules for manifest resource name selection have changed, refer to this [dotnet docs issue](https://github.com/dotnet/docs/issues/16964) for a detailed explanation on how this selection works now.",
        "createdAt": "2020-02-03T23:08:08Z",
        "updatedAt": "2020-02-03T23:08:08Z",
        "author": {
          "login": "benvillalobos"
        }
      }
    ]
  }
}