{
  "number": 3220,
  "title": "Proposal: DependsOnTask for project items Include",
  "body": "For `Problem statement` and `Part 1`, see https://github.com/Microsoft/msbuild/issues/3219\r\n\r\nPart 2:\r\n\r\n```xml\r\n<Compile\r\n  Include=\"$(MSBuildProjectDirectory)\\SharedDTOs\\RemoteFile.vb\"\r\n  DependsOnTask=\"DownloadMySourceFile\"\r\n  Condition=\"!Exist($(MSBuildProjectDirectory)\\SharedDTOs\\RemoteFile.vb)\" />\r\n```\r\n\r\nthis will indicate the design-time or first-evaluation-time to run the task before evaluating this line, ignore the task result and continue evaluation once task is finished. If task fails (due to insufficient credentials / no internet connection / wrong URL / any other reason), a reason warning will be issued and subsequent steps will fail as they fail today:\r\n\r\n> CSC : error CS2001: Source file 'C:\\testproj\\nonexisting.cs' could not be found.\r\n\r\nfor `<Compile>` and for `<Content>`\r\n\r\n> error : File not found: 'C:\\testproj\\mockimage.png'\r\n\r\netc.\r\n\r\n",
  "state": "OPEN",
  "createdAt": "2018-04-24T15:24:48Z",
  "updatedAt": "2024-02-21T16:34:14Z",
  "closedAt": null,
  "author": {
    "login": "ghost"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "I'm not so sure about this. Would it apply to evaluation-time (as opposed to created-during-execution) items? That is, is it legal to have\r\n\r\n```xml\r\n<Project>\r\n  <ItemGroup>\r\n    <I Include=\"foo.bar\" DependsOnTask=\"CreateFoo\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\n? What about\r\n\r\n```xml\r\n<Project InitialTargets=\"IncludeFoo\">\r\n  <Target Name=\"IncludeFoo\">\r\n    <ItemGroup>\r\n      <I Include=\"foo.bar\" DependsOnTask=\"CreateFoo\" />\r\n    </ItemGroup>\r\n  </Target>\r\n</Project>\r\n```\r\n\r\n? How does the execution differ?\r\n\r\nDo you want to call a task or a target with this? If a task, how would you pass arguments to the task, or would it be a requirement that the task not take any arguments?",
        "createdAt": "2018-04-24T15:39:33Z",
        "updatedAt": "2018-04-24T15:39:33Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I was thinking about calling it a Task, as in a predefined task with arguments set. If we have multiple tasks with same name then one completion would suffice.\r\n\r\n> How does the execution differ?\r\n\r\nOne difference in context of VS is, if `<I>` == `<Content>`, then VS will not display the file in Solution Explorer.",
        "createdAt": "2018-04-24T18:47:24Z",
        "updatedAt": "2018-04-24T18:47:24Z",
        "author": {
          "login": "ghost"
        }
      },
      {
        "body": "I'm not sure that downloading / \"heavy logic\" is good during evaluation or even design-time builds. (both for performance and determinism due to network or other logic).\r\nIdeally, the download should hook into the Restore target.\r\n\r\nA few different things could be done here to hook some targets into restore based on some conventions involving metadata on items.\r\ne.g. (simplified)\r\n```xml\r\n<ItemGroup>\r\n  <Content Include=\"CompanyLogo.png\" DownloadSourceIfMissing=\"https://my.company.com/logo.png\" />\r\n</ItemGroup>\r\n\r\n\u2026\r\n<Target Name=\"DownloadMissingContent\" BeforeTargets=\"some-restore-hook\">\r\n    <DownloadFile Source=\"%(Content.DownloadSourceIfMissing)\" \r\n         Target=\"%(Content.Identity)\"\r\n         Condition=\"!Exists%(Content.Identity)) and '%(Content.DownloadSourceIfMissing)'\" />\r\n</Target>\r\n```\r\n\r\nMight be a good candidate for an MSBuild SDK and see how many ppl need it.",
        "createdAt": "2018-04-26T16:18:38Z",
        "updatedAt": "2018-04-26T16:18:38Z",
        "author": {
          "login": "dasMulli"
        }
      },
      {
        "body": "I think you might need some kind of metabase to store the etag, last modified, cache control settings of the downloaded file. Also control over when the file is updated - some kind of max query rate control that can be applied by the consumer. If this is just to restore missing files, that is one thing, but if it is to download and keep a file up to date that is another...\r\nIs it applicable to have DownloadFiles as an ItemGroup and maybe make it visible separately in the UI (e.g. Visual Studio) with a property page to set the metadata.\r\nI think the downloaded files would be stored in the IntermediateOutputFiles path or similar...\r\n\r\n```\r\n<ItemGroup>\r\n\t<DownloadFile Include=\"https://my.company.com/logo.png\">\r\n\t\t<TargetGroup>Content</TargetGroup>\r\n\t\t<MaxUpdate>86400</MaxUpdate>\r\n\t\t<Pack>true</Pack>\r\n\t\t<PackagePath>content\\images\\</PackagePath>\r\n\t</DownloadFile>\r\n</ItemGroup>\r\n```\r\n\r\nIf using that approach, then I think you could make the `DownloadFiles` target just be `BeforeTargets=\"Build\"`?\r\n",
        "createdAt": "2018-04-26T17:58:12Z",
        "updatedAt": "2018-04-26T17:58:12Z",
        "author": {
          "login": "CZEMacLeod"
        }
      },
      {
        "body": "Good points @dasMulli and @CZEMacLeod. I like the overall approach and line of reasoning, except for `<Pack>true</Pack>` bit; that would make this task too specific in terms of scope IMHO.\r\n\r\nThe idea is to download the file separately and use the existing semantics for build inclusion/exclusion `<Content>`, `<Compile>` to include it in build and packaging targets. While `DownloadFile` can still be used to download something that is not related to build target (like download a `.sig` file and verify signature or md5 checksum in deterministic build or download a file called `whitelist.txt` that will package only files listed in it and filter out the rest etc. etc.).\r\n\r\nSeparate context but related:\r\n\r\nIn Visual Studio project system, design time, it would be nice to introduce this concept of \"deferred\" or \"to be downloaded\" or (what they call in C/C++ paradigm) \"delayed linking/inclusion\" content, such that the Solution Explorer and related artifacts don't appear curious and unhappy with exclamation sign when the file is not (yet) present, and react accordingly when DownloadFile fails.",
        "createdAt": "2018-04-26T21:05:38Z",
        "updatedAt": "2018-04-26T21:05:38Z",
        "author": {
          "login": "ghost"
        }
      },
      {
        "body": "@kasper3 The Pack, and PackagePath properties were there as an example to indicate that all metadata was copied to the appropriate TargetGroup ItemGroup in the DownloadFiles target. \r\nI was thinking something like a resolve downloads, where the filename would be inferred from the url unless it was specified in via content-disposition etc.\r\nThis would probably act a little like the Microsoft.NuGet.targets ResolveNuGetPackageAssets target.\r\n\r\nIn the project UI, deferred, or remote items should be able to be downloaded, refreshed or force refreshed.",
        "createdAt": "2018-04-26T21:26:42Z",
        "updatedAt": "2018-04-26T21:26:42Z",
        "author": {
          "login": "CZEMacLeod"
        }
      }
    ]
  }
}