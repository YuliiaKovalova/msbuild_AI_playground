{
  "number": 6788,
  "title": "`SignFile` task using dotnet cli tries to use `signtool.exe` from wrong location",
  "body": "### Issue Description\r\n\r\nThanks to issue #6098, the `SignFile` task is now enabled in `dotnet msbuild` 16.11.\r\n\r\nHowever, it does not actually seem to work.\r\n\r\nI was under the impression that `SignFile` did the signing itself, using core framework functionality.; however, it turns out it wants to use `signtool.exe`, but does not actually locate it correctly.\r\n\r\nSo when using `SignFile` as part of `dotnet build`, I get:\r\n\r\n```txt\r\nerror MSB3482: An error occurred while signing: SignTool.exe was not found at path xxx\\signtool.exe.\r\n```\r\n\r\nwhere xxx is the project directory. When building a solution it wants `signtool.exe` to be present in every project's directory separately.\r\n\r\nMSBuild should be able to locate it properly; I had my own lookup in place before, using\r\n\r\n```xml\r\n    <SignToolPath Condition=\" '$(SignToolPath)' == '' and '$(WindowsSdkVerBinPath)' != '' and '$(PROCESSOR_ARCHITECTURE)' == 'AMD64' and Exists('$(WindowsSdkVerBinPath)x64\\signtool.exe') \">$(WindowsSdkVerBinPath)x64\\signtool.exe</SignToolPath>\r\n    <SignToolPath Condition=\" '$(SignToolPath)' == '' and '$(WindowsSdkVerBinPath)' != '' and '$(PROCESSOR_ARCHITECTURE)' == 'AMD64' and Exists('$(WindowsSdkVerBinPath)x86\\signtool.exe') \">$(WindowsSdkVerBinPath)x86\\signtool.exe</SignToolPath>\r\n    <SignToolPath Condition=\" '$(SignToolPath)' == '' and '$(WindowsSdkVerBinPath)' != '' and '$(PROCESSOR_ARCHITECTURE)' == 'x86'   and Exists('$(WindowsSdkVerBinPath)x86\\signtool.exe') \">$(WindowsSdkVerBinPath)x86\\signtool.exe</SignToolPath>\r\n```\r\n\r\nand that would have led to using `C:\\Program Files (x86)\\Windows Kits\\10\\bin\\10.0.19041.0\\x64\\signtool.exe` just fine.\r\n\r\n### Steps to Reproduce\r\n- create a simple project:\r\n  ```pwsh\r\n  dotnet new classlib -n CodeSigning\r\n  cd CodeSigning\r\n  ```\r\n- generate a self-signed certificate\r\n  ```pwsh\r\n  New-SelfSignedCertificate -Type CodeSigningCert -Subject CN=CodeSigning -CertStoreLocation Cert:\\CurrentUser\\My\r\n  ```\r\n  This will produce output like:\r\n  ```txt\r\n     PSParentPath: Microsoft.PowerShell.Security\\Certificate::CurrentUser\\My\r\n\r\n  Thumbprint                                Subject              EnhancedKeyUsageList\r\n  ----------                                -------              --------------------\r\n  B77064C7175EF732F534B8D28C337CA2FB87E9D2  CN=CodeSigning       Code Signing\r\n  ```\r\n  make a note of that thumbprint value; it's needed in the next step.\r\n- Set up code signing in the project by adding this target to CodeSigning.csproj:\r\n  ```xml\r\n  <Target Name=\"_SignAssemblies\" AfterTargets=\"Compile\" DependsOnTargets=\"CreateSatelliteAssemblies;$(RazorCompileDependsOn)\">\r\n    <PropertyGroup>\r\n      <SigningCertificate>B77064C7175EF732F534B8D28C337CA2FB87E9D2</SigningCertificate>\r\n    </PropertyGroup>\r\n    <ItemGroup>\r\n      <_AssembliesToSign Include=\"$(IntermediateOutputPath)$(TargetFileName)\" />\r\n      <_AssembliesToSign Include=\"@(IntermediateSatelliteAssembliesWithTargetPath)\" />\r\n      <_AssembliesToSign Include=\"@(RazorIntermediateAssembly)\" />\r\n    </ItemGroup>\r\n    <Message Importance=\"high\" Text=\"Signing assemblies: @(_AssembliesToSign)\" />\r\n    <SignFile SigningTarget=\"%(_AssembliesToSign.Identity)\" CertificateThumbprint=\"$(SigningCertificate)\" />\r\n  </Target>\r\n  ```\r\n  making sure that the value of `$(SigningCertificate)` is the thumbprint of the certificate you generated.\r\n- build using `msbuild`; this should succeed, with output including\r\n  ```txt\r\n  _SignAssemblies:\r\n    Signing assemblies: obj\\Debug\\net5.0\\CodeSigning.dll\r\n  CopyFilesToOutputDirectory:\r\n  ```\r\n- build using `dotnet build -v:n`; this will fail with an error like\r\n  ```txt\r\n         _SignAssemblies:\r\n         Signing assemblies: obj\\Debug\\net5.0\\CodeSigning.dll\r\n     1>...\\CodeSigning\\CodeSigning.csproj(17,5): error MSB3482: An error occurred while signing: SignTool.exe was not found at path ...\\CodeSigning\\signtool.exe.\r\n  ```\r\n\r\n### Expected Behavior\r\nThe `SignFile` task works, signing the assemblies, when using either `dotnet build` or `msbuild`.\r\n\r\n### Actual Behavior\r\nThe `SignFile` task works only when using `msbuild`.\r\n\r\n### Analysis\r\nThe `SignFile` task implementation does not seem to locate SignTool correctly when using `dotnet build`.\r\n(And in addition, I thought that it was doing the signing itself (which would potentially make it work on Linux as well, which would be very convenient for CI/CD scenarios), using corefx functionality, not using an external utility from a Windows Kit.)\r\n\r\n### Versions & Configurations\r\nTested using VS2019 16.11.2 and .NET SDK 5.0.400, i.e. MSBuild 16.11.0.36601 on x64 Windows.\r\n\r\nI'm not sure how to set up a certificate on Linux (no `New-SelfSignedCertificate` in `pwsh` there), but that would only matter if `SignFile` did the signing itself and not via SignTool.\r\n",
  "state": "OPEN",
  "createdAt": "2021-08-26T16:41:38Z",
  "updatedAt": "2024-01-31T08:20:39Z",
  "closedAt": null,
  "author": {
    "login": "Zastai"
  },
  "labels": [
    "bug",
    "Area: ClickOnce",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Backlog"
  },
  "comments": {
    "nodes": [
      {
        "body": "When I have time, I'll jump in the code and file a PR if needed.\r\nBuild.Tasks.Core uses the exact same source for SignFile as Build.Tasks, so this _should_ be easy to resolve.\r\nI'm annoyed at myself for not spotting this issue when enabling SignFile in the first place.\r\n",
        "createdAt": "2021-08-26T16:43:16Z",
        "updatedAt": "2021-08-26T16:43:16Z",
        "author": {
          "login": "Zastai"
        }
      },
      {
        "body": "Thanks for filing the issue!\r\n\r\nThis looks to be the culprit:\r\n\r\nhttps://github.com/dotnet/msbuild/blob/main/src/Tasks/ManifestUtil/SecurityUtil.cs#L784\r\n\r\n------\r\nAfter trying the repro, I can't actually reproduce it?\r\n\r\nmsbuild --version\r\n16.11.0-preview-21351-03+1d7ed8e3d\r\n\r\ndotnet --version\r\n6.0.100-preview.7.21379.14\r\n\r\nOooh interesting. I see the issue when I global.json myself down to 5.0.400.\r\n\r\n`$(SignToolPath)` has no value in both binlogs, and if I set it manually then it still fails in 5.0.400.\r\n\r\n@sujitnayak any ideas what could be happening here?",
        "createdAt": "2021-08-27T21:57:00Z",
        "updatedAt": "2021-08-27T21:57:00Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "signtool.exe resolves to the path of the tool installed by the ClickOnceBootStrapper MSI. \r\n\r\nIt will be at %ProgramFiles(x86)%\\Microsoft SDKs\\ClickOnce\\SignTool.\r\n\r\nThis assumes you have VS installed on the machine since the CO bootstrapper MSI is installed by VS. I think the VS Build Tools SKU also install this MSI so at the minimum you need that installed.\r\n",
        "createdAt": "2021-08-27T22:44:56Z",
        "updatedAt": "2021-08-27T22:45:15Z",
        "author": {
          "login": "sujitnayak"
        }
      },
      {
        "body": "(`SignToolPath` is my own variable, which I used because `SignFile` did not exist in core msbuild before 16.11. I only mentioned it to indicate that signtool is present and can be found using standard msbuild properties).\n\nI do have VS installed - it was the VS update that gave me SDK 5.0.400 to begin with.\nIf the intent is for it to resolve to a VS component, then that seems to be failing. A diagnostic message for that case might be in order (\"could not find SignTool as part of the ClickOnce bootstrapper; assuming it is provided by the project\" perhaps?).\nI'm also wondering why it would not (also) resolve to the one from the Windows Kit, if present, given that MSBuild provides properties pointing to the kit.",
        "createdAt": "2021-08-27T23:26:46Z",
        "updatedAt": "2021-08-27T23:26:46Z",
        "author": {
          "login": "Zastai"
        }
      },
      {
        "body": "Can you clarify what version of Visual Studio you have installed?\r\n\r\nOn x64 Windows, the task reads the Path value from under the HKEY_LOCAL_MACHINE\\SOFTWARE\\WOW6432Node\\Microsoft\\ClickOnce\\SignTool key to get the location of the tool. Could you confirm what you have there?\r\n\r\nThere was a bug in the task where x64 processes could not read the value becuase they looked in the non-WOW6432 location of the registry. We've fixed the bug in VS 2022 Preview but if you using a x64 dotnet, then you could be hitting this issue.\r\n\r\nWe could improve the error message but this is the first case where someone outside of the VS team is using this task and the task is failing in an unexpected way.\r\n",
        "createdAt": "2021-08-27T23:47:28Z",
        "updatedAt": "2021-08-27T23:49:52Z",
        "author": {
          "login": "sujitnayak"
        }
      },
      {
        "body": "Visual Studio Enterprise 2019 16.11.2\r\n\r\n`HKEY_LOCAL_MACHINE\\SOFTWARE\\WOW6432Node\\Microsoft\\ClickOnce\\SignTool` exists and contains `C:\\Program Files (x86)\\Microsoft SDKs\\ClickOnce\\SignTool\\`. That path exists and does contain `signtool.exe`.\r\n\r\nSo it looks like it _should_ find it, but as you say, it'll likely be because `dotnet.exe` is running in 64-bit mode and does not see that registry key.\r\n\r\nNote that if `SignFile` requires Visual Studio (Build Tools or otherwise) to be installed, that kind of defeats the purpose of enabling it. The whole point for me was to enable builds using CI without requiring installs, i.e. just doing a zip-based deployment of a .NET SDK. Any reason why signtool can't simply ship with Windows versions of the .NET SDK?",
        "createdAt": "2021-08-28T19:14:44Z",
        "updatedAt": "2021-08-28T19:14:44Z",
        "author": {
          "login": "Zastai"
        }
      },
      {
        "body": ">>Note that if SignFile requires Visual Studio (Build Tools or otherwise) to be installed, that kind of defeats the purpose of enabling it.\r\n\r\nSignFile task as it is implemented right now is meant for signing ClickOnce binaries/manifest and was not really designed to be used as a generic task for signing ad-hoc files.\r\n",
        "createdAt": "2021-08-30T23:32:43Z",
        "updatedAt": "2021-08-30T23:33:38Z",
        "author": {
          "login": "sujitnayak"
        }
      },
      {
        "body": ">>Any reason why signtool can't simply ship with Windows versions of the .NET SDK?\r\n\r\nsigntool.exe is part of the Windows SDK and not the .NET SDK. So it ships with Windows SDKs that are installed under  C:\\Program Files (x86)\\Windows Kits.\r\n\r\nCurrently SignFile task cannot find it in the Windows SDK so it falls back to the one installed by the ClickOnce MSI. The reason it cannot find signtool.exe in the Windows SDK is because we look for it in the Windows 8.1 SDK folder instead of Windows 10 SDK location and VS 2019 does not install Windows 8.1 SDK.\r\n\r\n@BenVillalobos do you know why we have VS version set to 150 (instead of 160) for .NET version 4.8 here:\r\n\r\nhttps://github.com/dotnet/msbuild/blob/dec13b16c7bbe9086b25f98d661645f05d5c29ba/src/Shared/FrameworkLocationHelper.cs#L217\r\n\r\n",
        "createdAt": "2021-08-31T22:43:40Z",
        "updatedAt": "2021-08-31T22:43:40Z",
        "author": {
          "login": "sujitnayak"
        }
      },
      {
        "body": "I'm not sure. @Forgind do you remember the context of choosing 150 specifically here?\r\n\r\nI see the intention, that 160 spec is `new VisualStudioSpec(visualStudioVersion160, \"NETFXSDK\\\\{0}\", \"v10.0\", \"InstallationFolder\", new []` and specifically searches w10.\r\n\r\nWouldn't this have broken any other tools we search for in that Windows SDK path? Or are we _just happening_ to find the tools and they work despite being from a previous version?\r\n\r\nEdit: Looking at git blame, that line was updated, 160 didn't exist as a variable. Looks like an oversight and we should update it.",
        "createdAt": "2021-09-01T00:47:12Z",
        "updatedAt": "2021-09-01T00:50:57Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "I think it needs to be 15 because that's the version of our assembly (15.1.0.0). We intend that to be constant going forward.",
        "createdAt": "2021-09-01T02:17:19Z",
        "updatedAt": "2021-09-01T02:17:19Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "Team Triage: Since SignFile is working for its intended scenarios, we don't intend to investigate this further at this time.\r\n\r\n--\r\n\r\nHave you tried installing the Windows 8.1 SDK and running this scenario again? Presumably it worked in my case because I have it installed.",
        "createdAt": "2021-09-02T16:18:47Z",
        "updatedAt": "2021-09-02T16:18:58Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "I suppose it would be nice to document the task better then. It is not described as \"an internal task intended for signing click-once artefacts only. Requires either Visual Studio and/or a Windows 8.1 SDK to be installed\". Instead, it suggests it performs general authenticode signing, but then does not, and has additional dependencies that make sense for `msbuild.exe` but not `dotnet msbuild`.\r\n\r\nIt certainly feels like there is little to no support for Authenticode in a .NET context - if that's the intent, fine.\r\n\r\n@BenVillalobos It thought it worked in your case because it found the ClickOnce install by looking in the right registry key when run in 64-bit mode, which is apparently a fix in 17 but not 16.11.\r\n\r\nIt makes no sense to me to have to install an obsolete SDK to make this work. We're signing _all_ built assemblies, not just netfx, so I'm not sure I follow the reasoning that because .NET Framework 4.8 may be associated with VS15, that's all that needs to be looked at.\r\n\r\nI guess I'll just look at including signtool.exe in our build support package, so we can have it available that way without needing a VS/WindowsKit installed.",
        "createdAt": "2021-09-02T16:39:39Z",
        "updatedAt": "2021-09-02T16:39:39Z",
        "author": {
          "login": "Zastai"
        }
      },
      {
        "body": "> I suppose it would be nice to document the task better then. It is not described as \"an internal task intended for signing click-once artefacts only. Requires either Visual Studio and/or a Windows 8.1 SDK to be installed\".\r\n\r\nhttps://docs.microsoft.com/en-us/visualstudio/msbuild/signfile-task now says this (MicrosoftDocs/visualstudio-docs#8038).",
        "createdAt": "2022-05-28T12:49:16Z",
        "updatedAt": "2022-05-28T12:49:16Z",
        "author": {
          "login": "airbreather"
        }
      },
      {
        "body": "Is it really a valid option here to say that this task requires an SDK to be installed for an obsolete and unsupported version of Windows for it to work?",
        "createdAt": "2023-02-27T11:10:43Z",
        "updatedAt": "2023-02-27T11:10:43Z",
        "author": {
          "login": "bitslasher"
        }
      },
      {
        "body": "@bitslasher that's not what we're saying. What we're saying is \"no scenario that uses the SignFile task is supported when building using the .NET SDK\". If you can make it work via some series of changes and you're comfortable with that, ok, but the supported way to build and sign ClickOnce projects is with `MSBuild.exe` through Visual Studio or Visual Studio Build Tools.",
        "createdAt": "2023-02-27T14:25:40Z",
        "updatedAt": "2023-02-27T14:25:40Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald Thanks for the reply.  \r\n\r\nSo is there a plan for making signed binaries a first-class concept in the .NET SDK?  So this task was just all about ClickOnce.  To me though, since all operating systems have signed binaries, in this day an age, and where the .NET SDK is and going in the future, it'd seem prudent to have a universal way of signing binaries with the SDK.  \r\n\r\nOutside of ClickOnce, Windows has just good old Authenticode, signed DLLs, EXEs, MSIs, etc.  It seems like Linux also has signed ELF binaries.  It's odd that in 2023 we're still having to hunt for a copy of signtool on our build machines, and it's limited to just Windows.\r\n\r\nIt'd be amazing if this task could find new life as a generic cross-platform signing task.  :)",
        "createdAt": "2023-02-28T14:12:25Z",
        "updatedAt": "2023-02-28T14:12:25Z",
        "author": {
          "login": "bitslasher"
        }
      },
      {
        "body": "That would indeed be good; it's why I attempted to get the task active  in the .NET MSBuild. But the focus seems to be on signing NuGet packages rather than individual binaries.",
        "createdAt": "2023-02-28T22:21:27Z",
        "updatedAt": "2023-02-28T22:21:49Z",
        "author": {
          "login": "Zastai"
        }
      },
      {
        "body": "> But the focus seems to be on signing NuGet packages rather than individual binaries.\r\n\r\nHi @Zastai, that's a shame too-- since all these NuGet packages end up needing to be used by an executable eventually!  :)\r\n\r\nWhich makes me think-- what of when someone runs an app with dotnet run?  If the DLL isn't signed, does dotnet care?  The policy on say Windows that enforces signed EXEs only-- does dotnet bypass this because it's signed by Microsoft?  That doesn't mean the DLL it's about to run is friendly... I need to go read some more.\r\n",
        "createdAt": "2023-03-01T00:51:40Z",
        "updatedAt": "2023-03-01T00:51:40Z",
        "author": {
          "login": "bitslasher"
        }
      },
      {
        "body": "Oftopic, sorry!\r\n\r\nSince this issue is top search result when trying to get info on how to Sign your binaries, here is and updated msbuild Target that does the right thing based on already given options in configuration.\r\n\r\n```xml\r\n  <Target Name=\"_SignAssemblies\" AfterTargets=\"Compile\" DependsOnTargets=\"CreateSatelliteAssemblies;$(RazorCompileDependsOn)\" Condition=\"'$(CertificateThumbprint)' != ''\">\r\n    <ItemGroup>\r\n      <_AssembliesToSign Include=\"$(IntermediateOutputPath)$(TargetFileName)\" />\r\n      <_AssembliesToSign Include=\"@(IntermediateSatelliteAssembliesWithTargetPath)\" />\r\n      <_AssembliesToSign Include=\"@(RazorIntermediateAssembly)\" />\r\n    </ItemGroup>\r\n    <Message Importance=\"high\" Text=\"Signing assemblies: @(_AssembliesToSign)\" />\r\n    <SignFile SigningTarget=\"%(_AssembliesToSign.Identity)\" CertificateThumbprint=\"$(CertificateThumbprint)\" TimestampUrl=\"$(TimestampUrl)\"/>\r\n  </Target>\r\n```",
        "createdAt": "2024-01-18T12:37:38Z",
        "updatedAt": "2024-01-18T12:37:38Z",
        "author": {
          "login": "NiKiZe"
        }
      }
    ]
  }
}