{
  "number": 185,
  "title": "32-bit MSBuild.exe running as LOCAL SYSTEM calls 64-bit VBCSCompiler.exe causing CSC : error CS2001: Source file 'file' could not be found",
  "body": "I posted this issue on connect almost as soon as MS Build 14.0 was available and it has gone nowhere therefore I thought I would post it here as well to see whether anyone can help with this.\n\nOne could argue that running MSBuild as SYSTEM is perhaps a corner-case however most continuous delivery toolsets run as Windows Services, running as SYSTEM which is where we experienced (and continue to experience) the issue. Surely we are not the only people to have seen this?\n\nhttps://connect.microsoft.com/VisualStudio/feedback/details/1580569/32-bit-msbuild-exe-running-as-local-system-calls-64-bit-vbcscompiler-exe-causing-csc-error-cs2001-source-file-file-could-not-be-found\n",
  "state": "CLOSED",
  "createdAt": "2015-09-03T21:39:41Z",
  "updatedAt": "2024-02-21T17:30:51Z",
  "closedAt": "2015-10-20T22:43:57Z",
  "author": {
    "login": "reidca"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "@jaredpar this sounds like a Roslyn issue. Looks like the internal bug is assigned to Managed Languages (1203280). Have you seen this before?\n",
        "createdAt": "2015-09-03T21:47:45Z",
        "updatedAt": "2015-09-03T21:47:45Z",
        "author": {
          "login": "AndyGerlicher"
        }
      },
      {
        "body": "It's not really a Roslyn problem, I'd say--it's just fallout from the Windows file system redirection, as mentioned in the Connect issue.\n\n@reidca, I see a couple of options:\n1. Redirect TEMP for your build so it's not under a redirected folder (I think this is the best workaround)\n2. Use 64-bit MSBuild (if you're using Team Build, this should be a toggle)\n\nI was hoping that you could specify a folder for that file to be generated into, but it looks like Microsoft.Common.CurrentVersion.targets defines it as\n\n```\n$([System.IO.Path]::Combine('$([System.IO.Path]::GetTempPath())','$(TargetFrameworkMoniker).AssemblyAttributes$(DefaultLanguageSourceExtension)'))\n```\n",
        "createdAt": "2015-09-03T22:05:01Z",
        "updatedAt": "2015-09-03T22:05:01Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "We have been using 64-bit MSBuild as a work-around and in most cases that works fine however there are some projects (e.g. WIX) where we have seen major issues when using MSBuild 64-bit and this work-around does not help.\n\nInteresting that that problem never occurred in the MSBuild 12.0 so clearly something has changed. Has the compiler moved from 32 to 64 bit?\n\nCan you please clarify how we can \"redirect temp\" to a consistent folder for the SYSTEM user? Is this as registry hack or is there a better way of doing it?\n\nIt would be interesting to understand why the user profile for SYSTEM is in such an odd location and therefore subject to redirection in the first place!\n\nCan't believe this issue has not come up before, yet I cannot find any other references to it. Are we doing something incredibly odd compared to how other people run CI platforms?\n",
        "createdAt": "2015-09-03T22:13:37Z",
        "updatedAt": "2015-09-03T22:13:37Z",
        "author": {
          "login": "reidca"
        }
      },
      {
        "body": "How are you invoking `MSBuild.exe`?  You should be able to just (re)set the environment variable `TEMP` (you may also need `TMP`) to a custom value that is a folder that's not subject to redirection.  That could be done in a batch file or whatever you're using for `CreateProcess`.\n\nYou're just now seeing this with Visual Studio 2015 because the compiler did change (it's now the Roslyn compiler).  The MSBuild version shouldn't be relevant, though.\n",
        "createdAt": "2015-09-03T22:20:52Z",
        "updatedAt": "2015-09-03T22:20:52Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "We use [Thoughtworks GO](http://www.go.cd/) as our CD tool.\nThe agent runs as LOCAL SYSTEM and MSBuild.exe gets called from a PowerShell script.\n\nI have had mixed success with changing environment variables in the past. I have seen cases where the change does not happen until next reboot or until a new process is spawned.\n\nI can certainly try changing the environment variable from within the Powershell script and see whether the files get created in the new location. Like you said earlier, it is a shame that there is not a parameter that can be specified to change this path. Is this something that could be added?\n",
        "createdAt": "2015-09-03T22:25:38Z",
        "updatedAt": "2015-09-03T22:26:00Z",
        "author": {
          "login": "reidca"
        }
      },
      {
        "body": "Should be as easy as:\n\n``` powershell\n$env:TEMP=\"c:\\pick\\a\\good\\path\\here\"\n$env:TMP=\"c:\\pick\\a\\good\\path\\here\"\n```\n\nBefore running MSBuild.  That will affect the current Powershell process, which will affect its children.\n\nAn MSBuild parameter to specify the AssemblyAttributes path is a reasonable request, but it would only solve this problem--anything that uses the user's `TEMP` directory across bitnesses will run into this problem.\n",
        "createdAt": "2015-09-03T22:36:13Z",
        "updatedAt": "2015-09-03T22:36:13Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@AndyGerlicher based on the connect data I don't believe this is a Roslyn issue.  The error seems to be the compiler is attempting to read a file which doesn't exist (using the wrong temp directory).  \n\nThe compiler isn't involved in this calculation.  By the time the compiler runs it has qualified paths for all source files, or resolves them against the relative directory.  It doesn't consult the temp directory as a part of this.  It looks like MSBuild is passing us the wrong temp file.  \n",
        "createdAt": "2015-09-08T16:48:57Z",
        "updatedAt": "2015-09-08T16:48:57Z",
        "author": {
          "login": "jaredpar"
        }
      },
      {
        "body": "@jaredpar @AndyGerlicher Is it possible to add a parameter to MSBuild that gets passed to the compiler so that you can specify where the temp location is. In the case of processes with mixed bit-rate that run as LOCAL SYSTEM and that require the temp location I think this would be very useful.\n\nChanging the TEMP path environment variable could work but it seems a little hacky.\n\nAppreciate you both looking at this.\n",
        "createdAt": "2015-09-08T17:08:02Z",
        "updatedAt": "2015-09-08T17:08:02Z",
        "author": {
          "login": "reidca"
        }
      },
      {
        "body": "@reidca I think changing the environment variable is the best solution.  MSBuild is just allowing access to the .NET `GetTempPath()` method.  We could hijack that call (intercepting the passthrough and customizing behavior), but we can't hijack a similar call in a task (since you can just call it directly from code).  That means we couldn't fix this in general.\n\nAs you can see from the [reference source](http://referencesource.microsoft.com/#mscorlib/system/io/path.cs,3a7a8c72321c6e1d), `GetTempPath` in .NET is just a very thin wrapper around Win32's `GetTempPath()`, which is [specified](https://msdn.microsoft.com/en-us/library/windows/desktop/aa364992.aspx) to look at the environment variables.\n",
        "createdAt": "2015-09-08T21:11:33Z",
        "updatedAt": "2015-09-08T21:11:33Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "OK thanks for the follow up. I will use that solution.\n\n`<rant>`\nAs an aside, for anyone who cares I love C#, .NET and the .NET ecosystem in general but Windows legacy issues such as 32/64 bit redirection and the ever more frustrating [MAX_PATH limitation](https://windows.uservoice.com/forums/265757-windows-feature-suggestions/suggestions/6573539-remove-the-long-standing-max-path-limitation) are starting to make me and many developers I know look elsewhere. \n\nMicrosoft please take note, the technical debt Windows has accumulated over the years needs paying off. Too much time is wasted dealing with issues that are environment related rather than something a developer has direct influence over.\n`</rant>`\n",
        "createdAt": "2015-09-08T21:53:41Z",
        "updatedAt": "2015-09-08T21:55:15Z",
        "author": {
          "login": "reidca"
        }
      },
      {
        "body": "@reidca With respect to MAX_PATH, we are [working on](https://github.com/dotnet/apireviews/tree/master/2015-08-26-long-path) removing the path length limitation in .NET.\n",
        "createdAt": "2015-09-08T22:14:48Z",
        "updatedAt": "2015-09-08T22:14:48Z",
        "author": {
          "login": "dsplaisted"
        }
      },
      {
        "body": "@reidca, Limitation is anti-freedom. FreeBSD, Ubuntu, Mac, Solaris etc. possess no limit on path, which means their MAX_PATH limit == the limitation of underlying filesystem, which in many cases is virtually infinity. For example, NTFS limit is 32000 characters, while Windows caps it down to 256 in the name of backward compatibility with FAT! I don't think anybody in the world who encountered MAX_PATH limit is happy about it except for some former boss of Windows team who made this decision in last century and the entire world is reaping the consequences till date. It is a shame that nobody at Microsoft dares to enlighten Windows team that they have at least made one blunder which is imposing MAX_PATH! One of the reasons the most popular node.js package management system \"npm\" wasn't considered first-class supporter of Windows due to this limit since npm tends to nest the sub-dependencies. However, they had to reboot their whole packaging infrastructure due to MAX_PATH with npm3 (still in beta): https://github.com/npm/npm/issues/3697\n",
        "createdAt": "2015-09-11T05:44:28Z",
        "updatedAt": "2015-09-11T05:44:28Z",
        "author": {
          "login": "ghost"
        }
      },
      {
        "body": "MAX_PATH on Ubuntu and Mac is 4096, not unlimited, your argument is invalid\n",
        "createdAt": "2015-09-11T05:59:46Z",
        "updatedAt": "2015-09-11T05:59:46Z",
        "author": {
          "login": "anaisbetts"
        }
      },
      {
        "body": "Looks like @reidca has a solution that should work. Closing the issue.\n",
        "createdAt": "2015-10-20T22:43:57Z",
        "updatedAt": "2015-10-20T22:43:57Z",
        "author": {
          "login": "AndyGerlicher"
        }
      }
    ]
  }
}