{
  "number": 2393,
  "title": "PrepareForRunDependsOn is unconditionally set",
  "body": "Currently `PrepareForRunDependsOn` is [unconditionally set](https://github.com/Microsoft/msbuild/blame/d0d089c1c845bb51f6567593e00403b1ca94f65c/src/Tasks/Microsoft.Common.CurrentVersion.targets#L4007-L4009), hindering the ability for users to modify this value in their project files. When attempting to develop a Visual Studio extension with the new SDK, the relative ordering of Microsoft.VsSDK.targets results in extensions not getting deployed.",
  "state": "OPEN",
  "createdAt": "2017-08-03T15:38:01Z",
  "updatedAt": "2024-02-21T16:36:12Z",
  "closedAt": null,
  "author": {
    "login": "sharwell"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "I don't think we want to start setting those conditionally. They must be _at least_ what is specified for the targets to work, and it's hard to define what to do if there's already some value defined: overwriting it has surprised you here, but how would we know whether to prepend or append to it? Or some other more complicated scenario?\r\n\r\nMSBuild's extensibility model for this has relied on order of imports. That continues to work with NuGet packages (package .targets are imported late in common.targets, so they can override) and `Directory.Build.targets` (ditto). It's somewhat harder for manual imports, but there's a mechanism to control import order of SDK targets more precisely: import from the SDKs explicitly:\r\n\r\n```diff\r\ndiff --git \"a/msbuild\\\\before.proj\" \"b/msbuild\\\\after.proj\"\r\nindex d6082d1..72c60e8 100644\r\n--- \"a/msbuild\\\\before.proj\"\r\n+++ \"b/msbuild\\\\after.proj\"\r\n@@ -1,9 +1,12 @@\r\n-<Project Sdk=\"Microsoft.NET.Sdk\">\r\n+<Project>\r\n+  <Import Sdk=\"Microsoft.NET.Sdk\" Project=\"Sdk.props\">\r\n \r\n   <PropertyGroup>\r\n     <TargetFramework>net452</TargetFramework>\r\n   </PropertyGroup>\r\n \r\n+  <Import Sdk=\"Microsoft.NET.Sdk\" Project=\"Sdk.targets\">\r\n+\r\n   <Import Project=\"$(VSToolsPath)\\VSSDK\\Microsoft.VsSDK.targets\" Condition=\"Exists('$(VSToolsPath)\\VSSDK\\Microsoft.VsSDK.targets')\" />\r\n \r\n </Project>\r\n\\ No newline at end of file\r\n```",
        "createdAt": "2017-08-03T16:17:11Z",
        "updatedAt": "2017-08-03T16:17:11Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald Based on what you said, it seems [our repo](https://github.com/dotnet/project-system) doesn't do your recommended workaround, but uses your information for a different workaround. As you mentioned, `Directory.Build.targets` works with the order of imports. Thus, instead of changing the Project node to no longer use the `Sdk` attribute, what our repo does is load the `Microsoft.VsSDK.targets` in the `Directory.Build.targets`. This is a much cleaner solution as it doesn't involve changing the Project node and importing both the `Sdk.props` and `Sdk.targets` explicitly in the file. This seems to allow the `Microsoft.VsSDK.targets` to load late enough to workaround this issue appropriately.\r\n\r\n## Example\r\n\r\n### after.proj\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>net452</TargetFramework>\r\n    <IsVsixProject>true</IsVsixProject>\r\n  </PropertyGroup>\r\n\r\n</Project>\r\n```\r\n\r\n### Directory.Build.targets\r\n```xml\r\n<Import Project=\"$(VSToolsPath)\\VSSDK\\Microsoft.VsSDK.targets\" Condition=\"Exists('$(VSToolsPath)\\VSSDK\\Microsoft.VsSDK.targets') and '$(IsVsixProject)' == 'true'\" />\r\n```",
        "createdAt": "2022-05-13T22:57:03Z",
        "updatedAt": "2022-05-13T22:57:03Z",
        "author": {
          "login": "MiYanni"
        }
      },
      {
        "body": "Is there a reason we can't just modify Microsoft.Common.CurrentVersion.targets to _add_ to `PrepareForRunsDependsOn` rather than replacing it?\r\n\r\n``` xml\r\n<PropertyGroup>\r\n  <PrepareForRunDependsOn>\r\n    $(PreareForRunDependsOn);\r\n    CopyFilesToOutputDirectory\r\n  </PrepareForRunDependsOn>\r\n</PropertyGroup>\r\n```",
        "createdAt": "2022-06-13T17:12:02Z",
        "updatedAt": "2022-06-13T17:12:02Z",
        "author": {
          "login": "tmeschter"
        }
      }
    ]
  }
}