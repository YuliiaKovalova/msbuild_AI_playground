{
  "number": 9608,
  "title": "Generalize \"Primary output(s)\" detection for TerminalLogger",
  "body": "Currently, TL scans through high-priority messages looking for ` -> ` to determine what the \"primary output\" of a given project is in order to render the \"project succeeded\" message with the path of and a link to that output.\r\n\r\nhttps://github.com/dotnet/msbuild/blob/69a76bb6d3068af5e655e15cf0d290d44cf77672/src/MSBuild/TerminalLogger/TerminalLogger.cs#L554-L556\r\n\r\nThis is clunky and a structured approach would be cleaner. In addition, the currently-logged message isn't always the \"right\" output, and it'd be nice if it was more customizable by individual projects (see also https://github.com/dotnet/msbuild/issues/8370#issuecomment-1873016590).\r\n\r\nI can think of a couple of ways to do this:\r\n\r\n1. augment `ProjectFinishedEventArgs` to have an optional list of critical outputs, derived from an item that can be manipulated during the build.\r\n2. Create a new special target to return that and special-case that target's `TargetFinished` event in the logger.\r\n\r\nThe former is more complex and we'd have to be mindful of the perf cost of the item lookup at project-finished time, but it's more flexible in the case of multiple invocations of the same project instance (for instance, build and publish the same project in separate invocations). A target would get single-instanced.",
  "state": "OPEN",
  "createdAt": "2024-01-05T19:55:05Z",
  "updatedAt": "2024-12-17T16:04:52Z",
  "closedAt": null,
  "author": {
    "login": "rainersigwald"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "backlog",
    "Feature Request",
    "Priority:3",
    "triaged",
    "Area: Terminal Logger"
  ],
  "comments": {
    "nodes": [
      {
        "body": "@rainersigwald silly thought - should we try to use the `Outputs` from the directly-requested Task(s)? Is that good enough? What would that look like for existing commonly-requested targets?\r\n\r\n* Build\r\n* Pack\r\n* Publish\r\n* Test/VSTest",
        "createdAt": "2024-02-15T15:34:30Z",
        "author": {
          "login": "baronfel"
        }
      },
      {
        "body": "Not silly at all. Right now that would require:\r\n\r\n1. Listen to `ProjectStartedEventArgs` for `TargetNames`\r\n2. Listen to `TargetFinishedEventArgs` for those specific `TargetNames`\r\n3. Look at `TargetOutputs` for the targets we care about\r\n\r\nWe'd have to filter the lists from 1 because in normal execution there are different calls to a project with different entry points (\"get list of TFs\"/build/\"get random other outputs\") only some of which are really relevant to the user.",
        "createdAt": "2024-02-15T16:09:59Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Current requests for this include\r\n\r\n* @javiercn for the JS project system\r\n* @nohwnd for test outputs\r\n* NuGet for package outputs",
        "createdAt": "2024-03-20T14:13:41Z",
        "author": {
          "login": "baronfel"
        }
      },
      {
        "body": "Our usage here would be for run attachments, such as TRX, code coverage or process dumps. There can be 0, 1 or multiple files per project.",
        "createdAt": "2024-03-20T17:33:56Z",
        "author": {
          "login": "nohwnd"
        }
      },
      {
        "body": "Another use case for this might be the Quickbuild cache plugin - when that triggers projects don't appear like they are built at all. with this feature the plugin could report the cached results on behalf of the projects that were not actually built.",
        "createdAt": "2024-04-19T17:35:39Z",
        "author": {
          "login": "baronfel"
        }
      },
      {
        "body": "We should consider special-casing output detection for Pack for .NET 9 as well. When packaging, a message like the following is emitted:\r\n\r\n```\r\nSuccessfully created package 'E:\\Code\\FsAutoComplete\\src\\FsAutoComplete\\bin\\Release\\fsautocomplete.0.74.0.nupkg'.\r\n```\r\n\r\n(NOTE: this message will be localized). In addition, the `GenerateNuspec` Target has outputs in the form of the `NuGetPackOutput` Item type:\r\n\r\n![image](https://github.com/user-attachments/assets/f52c6848-ddb9-4e7a-b18a-cd4e9d6a09d9)\r\n\r\nIf the target to build for a project was `Pack` and `NuGetPackOutput` is available, we could use that to get a structured view of the package to treat as the output.\r\n\r\nThe logged Message doesn't provide a Code so we can't look for it structurally: https://github.com/NuGet/NuGet.Client/blob/f929a0f74b92c3593521a4556d41d6f96528fb24/src/NuGet.Core/NuGet.Commands/CommandRunners/PackCommandRunner.cs#L202C37-L204",
        "createdAt": "2024-09-05T18:53:04Z",
        "author": {
          "login": "baronfel"
        }
      }
    ]
  }
}