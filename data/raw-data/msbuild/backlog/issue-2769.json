{
  "number": 2769,
  "title": "Passing a logger has large overhead even if it only monitors low frequency events",
  "body": "This is having a huge impact (400+ ms) on basic CLI scenarios\r\n\r\n### Steps to reproduce\r\n\r\n1. Create an empty logger that subscribes to none of the events\r\n\r\n```C#\r\nusing Microsoft.Build.Framework;\r\n\r\npublic class EmptyLogger : ILogger\r\n{\r\n    public LoggerVerbosity Verbosity { get; set; }\r\n    public string Parameters { get; set; }\r\n    public void Initialize(IEventSource eventSource) {}\r\n    public void Shutdown() {}\r\n}\r\n```\r\n\r\n2. Measure build with and without empty logger\r\n\r\n## .NET Core\r\n```\r\n> Measure-Command {dotnet 'C:\\Program Files\\dotnet\\sdk\\2.1.1\\MSBuild.dll' /m /v:m}\r\nTotalMilliseconds : 1555.4208\r\n\r\n> Measure-Command {dotnet 'C:\\Program Files\\dotnet\\sdk\\2.1.1\\MSBuild.dll' /m /v:m /logger:EmptyLogger,EmptyLogger.dll} \r\nTotalMilliseconds : 2012.9251\r\n```\r\n\r\n## .NET Framework\r\n```\r\n> Measure-Command {msbuild /m /v:m} | findstr TotalMil\r\nTotalMilliseconds : 974.4459\r\n\r\n> Measure-Command {msbuild /m /v:m /logger:EmptyLogger,EmptyLogger.dll}\r\nTotalMilliseconds : 1083.5906\r\n```",
  "state": "CLOSED",
  "createdAt": "2017-12-02T00:07:49Z",
  "updatedAt": "2024-02-21T17:15:26Z",
  "closedAt": "2018-01-11T23:30:56Z",
  "author": {
    "login": "nguerrera"
  },
  "labels": [
    "Area: Performance",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "cdmihai"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "This appears to scale with solution size.  It accounts for 40% of the incremental build time for https://github.com/OrchardCMS/OrchardCore (127 projects):\r\n\r\n```\r\n> Measure-Command {dotnet 'C:\\Program Files\\dotnet\\sdk\\2.2.0-preview1-007556\\MSBuild.dll' /m /v:m}\r\nTotalSeconds : 15.6\r\n\r\n> Measure-Command {dotnet 'C:\\Program Files\\dotnet\\sdk\\2.2.0-preview1-007556\\MSBuild.dll' /m /v:m /logger:EmptyLogger,EmptyLogger.dll} \r\nTotalSeconds : 25.4\r\n```",
        "createdAt": "2017-12-02T01:34:03Z",
        "updatedAt": "2017-12-02T01:34:03Z",
        "author": {
          "login": "mikeharder"
        }
      },
      {
        "body": "https://docs.microsoft.com/en-us/visualstudio/msbuild/writing-multi-processor-aware-loggers\r\n\r\nThat article has a decent summary of what's going on here. Basically if you care about perf and don't want all events, never write an `ILogger`. If you make it a `INodeLogger` and use a forwarding logger (either your own or built-in `ConfigurableForwardingLogger`) you will get much better performance. CLI was probably worst-case scenario where it only cared about a handful of events but adding a logger with `/logger` introduced all the overhead of IPC for every message sent by the build.\r\n\r\nSee https://github.com/dotnet/cli/pull/8371 for the solution for the dotnet CLI.\r\n\r\nWhat MSBuild really needs to do is make this easier to implement. Ideally record events that you subscribe to on the `EventSource` in an `ILogger` and configure a forwarding logger for you. In most cases that would let you achieve the same result without the hassle of the extra class and confusing syntax.\r\n\r\nFor something like the binary logger (@KirillOsenkov), I think we either accept the perf cost since it must have every event, or we have the individual nodes write out logging directly and aggregate together it at the end. Probably not worth it for the latter, but I think this is useful information to keep in mind.",
        "createdAt": "2018-01-11T19:37:16Z",
        "updatedAt": "2018-01-11T19:37:16Z",
        "author": {
          "login": "AndyGerlicher"
        }
      },
      {
        "body": "For the \"have the individual nodes write out logging directly\" there's some precedent in the `/distributedFileLogger` switch, which does just that (but doesn't aggregate back).",
        "createdAt": "2018-01-11T19:48:14Z",
        "updatedAt": "2018-01-11T19:48:14Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}