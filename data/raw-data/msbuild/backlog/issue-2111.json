{
  "number": 2111,
  "title": ".NET Core MSBuild cannot load tasks built against MSBuild 4.0",
  "body": "It seems that the dependencies of a task DLL built with VS2015 cannot be loaded when using those tasks in `dotnet msbuild`. Here's a reproducer using simple dummy files.\r\n\r\nA primitive custom task, `SimpleTaskThatExtends`:\r\n\r\n```\r\nusing Microsoft.Build.Utilities;\r\n\r\nnamespace SimpleTaskLibrary\r\n{\r\n    public class SimpleTaskThatExtends : Task\r\n    {\r\n        public override bool Execute()\r\n        {\r\n            Log.LogMessage(\"Simple task that extends Task\");\r\n            return true;\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nA primitive targets file using the above task:\r\n\r\n```\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<Project ToolsVersion=\"12.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\r\n\r\n  <UsingTask TaskName=\"SimpleTaskThatExtends\" AssemblyFile=\".\\bin\\debug\\SimpleTaskThatExtends.dll\" />\r\n\r\n  <Target Name=\"dummy\">\r\n    <SimpleTaskThatExtends />\r\n  </Target>\r\n\r\n</Project>\r\n```\r\n\r\n`msbuild` works:\r\n\r\n    msbuild /t:dummy Simple.targets\r\n\r\nI get:\r\n\r\n```\r\nMicrosoft (R) Build Engine version 15.1.548.43366\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\nBuild started 5/19/2017 10:42:08 AM.\r\nProject \"C:\\Users\\me\\Documents\\Visual Studio 2015\\Projects\\SimpleTaskLibrary\\SimpleTaskLibrary\\Simple.targets\r\n\" on node 1 (dummy target(s)).\r\ndummy:\r\n  Simple task that extends Task\r\nDone Building Project \"C:\\Users\\me\\Documents\\Visual Studio 2015\\Projects\\SimpleTaskLibrary\\SimpleTaskLibrary\\\r\nSimple.targets\" (dummy target(s)).\r\n\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n```\r\n\r\nThe same command but run through `dotnet` doesn't work:\r\n\r\n    dotnet msbuild /t:dummy Simple.targets\r\n\r\nI get:\r\n\r\n```\r\nMicrosoft (R) Build Engine version 15.1.1012.6693\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\nC:\\Users\\me\\Documents\\Visual Studio 2015\\Projects\\SimpleTaskLibrary\\SimpleTaskLibrary\\Simple.targets(9,5): error MSB4062: The \"SimpleTaskThatExtends\" task could not be loaded from the assembly C:\\Users\\me\\Documents\\Visual Studio 2015\\Projects\\SimpleTaskLibrary\\SimpleTaskLibrary\\.\\bin\\debug\\SimpleTaskThatExtends.dll. Could not load file or assembly 'Microsoft.Build.Utilities.v4.0, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'. The system cannot find the file specified. Confirm that the <UsingTask> declaration is correct, that the assembly and all its dependencies are available, and that the task contains a public class that implements Microsoft.Build.Framework.ITask.\r\n```\r\n\r\nIf instead of extending `Task` in `Microsoft.Build.Utilities` I implement `ITask` in `Microsoft.Build.Framework`, then it works because it doesn't need to load `Microsoft.Build.Utilities.v4.0`.\r\n\r\nI tried copying `Microsoft.Build.Utilities.Core.*` (`.dll` and `.xml`) in the same directory as the task dll. I tried both the `net46` and `netstandard1.3` versions. But the output is exactly the same.\r\n\r\nI've read #658 and I was under the impression that the problem there and in #858 was fixed in `15.1.1012`, which is the version I have (as you can see in the last output).\r\n\r\nThe bigger picture is that I have a task library that I would like to use in the builds of both VS2015 and .NET Core projects. I would rather not have two versions of the tasks. Is there something fundamentally wrong with that?",
  "state": "CLOSED",
  "createdAt": "2017-05-19T08:58:53Z",
  "updatedAt": "2024-02-21T17:19:05Z",
  "closedAt": "2017-05-23T11:34:39Z",
  "author": {
    "login": "ghost"
  },
  "labels": [
    ".NET Core",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "The short answer is that this is only the tip of the iceberg.\r\n\r\nI could get past this error by removing the `Microsoft.Build.Utilities.v4.0` _reference_,\r\nand adding instead the `Microsoft.Build.Utilities` NuGet dependency.\r\n\r\nThat solved the issue in the simplified reproducer I posted here, but in my real application I got further strange errors like: \r\n\r\n```\r\nerror MSB4018: System.IO.FileNotFoundException: Could not load file or assembly 'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'. The system cannot find the file specified.\r\n```\r\n\r\nThis and the original errors are just a symptom of a bigger problem: it's not safe to execute via `dotnet` applications that were built in <=VS2015 targeted for .NET Framework instead of .NET Core. When executed by `dotnet`, the runtime has a subset of .NET Framework features, and when the application tries to use something not in the runtime, it will of course crash. In my example my code is some `Task` implementations compiled with VS2015, executed as part of `dotnet msbuild`.\r\n\r\nThe solution seems to be to convert my .NET Framework application to .NET Core.",
        "createdAt": "2017-05-23T11:34:39Z",
        "updatedAt": "2017-05-23T11:34:39Z",
        "author": {
          "login": "ghost"
        }
      },
      {
        "body": "Your best option probably is multitargeting your tasks to a version of .net standard / .net core and .net framework [like this](https://github.com/aspnet/BuildTools/blob/c1a39d5624a39d5648edfae3a27a44c4353611fd/src/Internal.AspNetCore.Sdk/Internal.AspNetCore.Sdk.csproj#L8) and then [use a different assembly based on `$(MSBuildRuntimeType)`](https://github.com/aspnet/BuildTools/blob/9ea72bcf88063cee9afbe53835681702e2efd720/src/Internal.AspNetCore.BuildTools.Tasks/build/Internal.AspNetCore.BuildTools.Tasks.props#L2-L6) ([UsingTask example](https://github.com/aspnet/BuildTools/blob/9ea72bcf88063cee9afbe53835681702e2efd720/src/Internal.AspNetCore.BuildTools.Tasks/build/Tasks.tasks#L3).",
        "createdAt": "2017-05-23T15:38:00Z",
        "updatedAt": "2017-09-20T03:44:58Z",
        "author": {
          "login": "dasMulli"
        }
      },
      {
        "body": "@dasMulli Looks as if both of the links provided in your latest comment are now broken. Do you have updated links for your suggestion?",
        "createdAt": "2017-09-19T22:04:44Z",
        "updatedAt": "2017-09-19T22:28:24Z",
        "author": {
          "login": "ManfredLange"
        }
      },
      {
        "body": "too bad.. updated them to permalinks",
        "createdAt": "2017-09-20T03:45:23Z",
        "updatedAt": "2017-09-20T03:45:42Z",
        "author": {
          "login": "dasMulli"
        }
      },
      {
        "body": "Hello, is there a fix for this? There are a lot of nuget DLLs that don't work int dotnet because of this.",
        "createdAt": "2017-11-15T19:54:14Z",
        "updatedAt": "2017-11-15T19:54:14Z",
        "author": {
          "login": "praeclarum"
        }
      },
      {
        "body": "I was able to dig through: https://github.com/aspnet/EntityFrameworkCore/issues/8336\r\n\r\nAnd add this:\r\n```\r\n<PackageReference Include=\"Xamarin.Forms\" Version=\"2.4.0.38779\">\r\n      <ExcludeAssets>build</ExcludeAssets>\r\n    </PackageReference>\r\n```\r\n\r\nI could build originally via msbuild, but not dotnet build due to this, which caused issues in VSTS for building. After adding this, it got farther, but since I have xaml pages in there it seems to fail to generate anything :(",
        "createdAt": "2017-12-31T21:32:11Z",
        "updatedAt": "2017-12-31T21:37:39Z",
        "author": {
          "login": "jamesmontemagno"
        }
      },
      {
        "body": "i keep getting:\r\n\r\n/Users/jassim/.nuget/packages/xamarin.forms/2.4.0.280/build/netstandard1.0/Xamarin.Forms.targets(3,3): Error MSB4062: The \"Xamarin.Forms.Build.Tasks.FixedCreateCSharpManifestResourceName\" task could not be loaded from the assembly /Users/jassim/.nuget/packages/xamarin.forms/2.4.0.280/build/netstandard1.0/Xamarin.Forms.Build.Tasks.dll.  Confirm that the <UsingTask> declaration is correct, that the assembly and all its dependencies are available, and that the task contains a public class that implements Microsoft.Build.Framework.ITask. (MSB4062) (ZayedAlKhair)",
        "createdAt": "2018-05-31T23:06:58Z",
        "updatedAt": "2018-05-31T23:06:58Z",
        "author": {
          "login": "jrahma"
        }
      },
      {
        "body": "Same problem while loading C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\MSBuild\\Xamarin\\iOS\\Xamarin.iOS.Tasks.dll",
        "createdAt": "2018-08-10T09:52:07Z",
        "updatedAt": "2018-08-10T09:52:07Z",
        "author": {
          "login": "taori"
        }
      },
      {
        "body": "@dasMulli \r\n> Your best option probably is multitargeting your tasks to a version of .net standard / .net core and .net framework ....\r\n\r\n**Just one little question:**\r\nWhy use multi-targeting here? Isn't using `netstandard20 `enough?\r\nIt should run on all platforms using `netstandard20 `only?!\r\n\r\n\r\n",
        "createdAt": "2020-07-13T08:33:05Z",
        "updatedAt": "2020-07-13T08:33:26Z",
        "author": {
          "login": "Legends"
        }
      },
      {
        "body": "> Why use multi-targeting here? Isn't using netstandard20 enough?\r\n> It should run on all platforms using netstandard20 only?!\r\n\r\nAt least at the time of writing (2017) i believe VS didn't carry all necessary forwarding assemblies to load and run netstandard2.0 dlls. I believe this has now been mostly done, maybe @rainersigwald can comment on that.\r\n\r\n(Basically when you reference a .NET Standard assembly / project, the build system will add some additional dlls for older versions of .NET Framework. Applications not built with this logic needed to add these assemblies manually in order to load .NET Standard assemblies).\r\n\r\nAlso do note that some Tasks like(d) to do some form of isolation using AppDomain on .NET Framework or AssemblyLoadContext on .NET Core so they needed to target both frameworks in order to use these specific APIs (e.g. to load a different version of Newtonsoft.Json than is included in Visual Studio).",
        "createdAt": "2020-07-14T07:49:15Z",
        "updatedAt": "2020-07-14T07:49:15Z",
        "author": {
          "login": "dasMulli"
        }
      },
      {
        "body": ".NET 4.7.2+ (which is now required by MSBuild) does handle `netstandard2.0` assemblies pretty well. If your task has no dependencies, you can usually get away with just a .NET Standard implementation. When referencing other libraries, especially but not limited to native code, things can get hairy, and multitargeting is often still required.",
        "createdAt": "2020-07-14T20:06:56Z",
        "updatedAt": "2020-07-14T20:06:56Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}