{
  "number": 6647,
  "title": "Don't mention installing Developer Pack on non-Windows OSes (MSB3644)",
  "body": "Inspired by https://github.com/dotnet/core/issues/6419.\r\n\r\nThis message is reasonable for Windows scenarios, but since there are no .NET Framework Developer or Targeting Packs for Linux or macOS, we shouldn't mention them in that circumstance.\r\n\r\n> error MSB3644: The reference assemblies for .NETFramework,Version=v4.8 were not found. To resolve this, install the Developer Pack (SDK/Targeting Pack) for this framework version or retarget your application. You can download .NET Framework Developer Packs at https://aka.ms/msbuild/developerpacks\r\n\r\nNot sure whether we should explicitly mention [Microsoft.NETFramework.ReferenceAssemblies](https://www.nuget.org/packages/Microsoft.NETFramework.ReferenceAssemblies/). The SDK should provide it for you so if you hit this on *nix it's likely an SDK bug.",
  "state": "OPEN",
  "createdAt": "2021-06-30T18:50:20Z",
  "updatedAt": "2024-02-21T16:28:28Z",
  "closedAt": null,
  "author": {
    "login": "rainersigwald"
  },
  "labels": [
    "help wanted",
    "Area: Debuggability",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "Nirmal4G"
      }
    ]
  },
  "milestone": {
    "title": "Backlog"
  },
  "comments": {
    "nodes": [
      {
        "body": "> Inspired by https://github.com/dotnet/core/issues/6419.\r\n> \r\n> This message is reasonable for Windows scenarios, but since there are no .NET Framework Developer or Targeting Packs for Linux or macOS, we shouldn't mention them in that circumstance.\r\n> \r\n> > error MSB3644: The reference assemblies for .NETFramework,Version=v4.8 were not found. To resolve this, install the Developer Pack (SDK/Targeting Pack) for this framework version or retarget your application. You can download .NET Framework Developer Packs at https://aka.ms/msbuild/developerpacks\r\n> \r\n> Not sure whether we should explicitly mention [Microsoft.NETFramework.ReferenceAssemblies](https://www.nuget.org/packages/Microsoft.NETFramework.ReferenceAssemblies/). The SDK should provide it for you so if you hit this on *nix it's likely an SDK bug.\r\n\r\nWhy require installing them at all, I experimented before when I used to explicitly reference that nuget package *unconditionally* when I multitargeted for .NET Standard, Framework, Core, and .NET 5 and it worked for me even without any devpacks for .NET Framework installed on MAC, Linux (VM), and a fresh Windows 10 install (thanks to the \"start fresh\" feature).",
        "createdAt": "2021-07-01T10:26:04Z",
        "updatedAt": "2021-07-01T10:26:04Z",
        "author": {
          "login": "AraHaan"
        }
      },
      {
        "body": "> Why require installing them at all\r\n\r\nGreat question! They're still required if you're not using the .NET (Core) SDK -- so if you have older projects that won't automatically reference the ReferenceAssemblies package for you (or even _can't_ reference it because they don't use NuGet at all). That's still a common Visual Studio-customer scenario, and should still get a nice error.",
        "createdAt": "2021-07-01T14:46:54Z",
        "updatedAt": "2021-07-01T14:46:54Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> > Why require installing them at all\r\n> \r\n> Great question! They're still required if you're not using the .NET (Core) SDK -- so if you have older projects that won't automatically reference the ReferenceAssemblies package for you (or even _can't_ reference it because they don't use NuGet at all). That's still a common Visual Studio-customer scenario, and should still get a nice error.\r\n\r\nTrue, but didn't *most* of them use nuget to download those packages to that project's folder though in that case (without directly referencing the packages in the non-SDK style projects) unless they created them themselves?\r\n\r\nWhat if the Dev packs came with the actual frameworks that is preinstalled with Windows's copy (.NET 4.8)? Would that fix that scenario as well?\r\n\r\nAssuming Windows 10 what could be added to what is preinstalled can be these:\r\n- all dev packs to 4.5~4.8 (I think anything older than 4.5 should be installed by them)\r\n\r\nBut then again cant the frameworks older than 4.5 be rigged to use the 4.5 dev pack instead unless those older ones are installed by the user themselves?",
        "createdAt": "2021-07-01T14:50:29Z",
        "updatedAt": "2021-07-01T15:07:53Z",
        "author": {
          "login": "AraHaan"
        }
      },
      {
        "body": "> True, but didn't _most_ of them use nuget to download those packages to that project's folder though in that case\r\n\r\nThe default experience was\r\n\r\n1. User installs Developer pack for .NET 4.6 (for example)\r\n2. Project has `<TargetFrameworkVersion>v4.6</TargetFrameworkVersion>`\r\n3. Reference assemblies are located from the developer pack\r\n3. NuGet is not involved at all.\r\n\r\n> What if the Dev packs came with the actual frameworks that is preinstalled with Windows's copy (.NET 4.8)?\r\n\r\nThis was the case before .NET Framework 4.0 IIRC, but at some point the team decided to split the runtime and developer packs (presumably to reduce install footprint on non-developer machines).\r\n\r\n> Would that fix that scenario as well?\r\n\r\nPotentially, but it kinda doesn't matter: we're not going to service .NET Framework 4.8 with a change like this. [.NET Core is the future of .NET](https://devblogs.microsoft.com/dotnet/net-core-is-the-future-of-net/), and this wouldn't meet the bar for a 4.8 change.\r\n\r\n> But then again cant the frameworks older than 4.5 be rigged to use the 4.5 dev pack instead unless those older ones are installed by the user themselves?\r\n\r\nThis actually used to be the behavior, but it caused some serious problems: dotnet/msbuild#173.\r\n\r\nSo: for a subset of users, the right response to this error is to install the developer pack from the link in the error. For them, we'd like to keep the error. For users on the latest SDKs, we should have a different error.",
        "createdAt": "2021-07-01T15:49:12Z",
        "updatedAt": "2021-07-01T15:49:12Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "So, basically have it trap if they are using the .NET SDK and if so have it not error and use those implicitly added reference assemblies packages unconditionally whenever it sees an .NET Framework TFM in the project's frameworks (like it does currently I think) without needing to install those dev packs otherwise it will error with it not being installed.",
        "createdAt": "2021-07-01T16:36:46Z",
        "updatedAt": "2021-07-01T16:36:56Z",
        "author": {
          "login": "AraHaan"
        }
      },
      {
        "body": "Why not have a different error on non-Windows machines or update the existing message?\n\nSimilar message but be generic and have a link point to a common resource for targeting .NET Framework using the .NET SDK!\n\n```log\nerror MSB3644:\nThe reference assemblies for \".NETFramework,Version=v4.8\" were not found.\nTo resolve this, install or add a targeting pack for this framework version or retarget your application.\nSee https://aka.ms/dotnet/targeting-netfx for more info.\n```",
        "createdAt": "2021-07-05T05:49:38Z",
        "updatedAt": "2021-07-05T05:51:35Z",
        "author": {
          "login": "Nirmal4G"
        }
      },
      {
        "body": "No need to have that error on Non-windows at all. If they are using the .NET SDK then that means their projects must be sdk-style and that also means that the reference assemblies nuget package is implicitly referenced by the SDK for them.\r\n\r\nOr at least what I noticed so far whenever I target for example ``net472`` in github actions when using the 3.1, 5.0, and 6.0 preview .NET SDKs under their linux and MacOS runners.\r\n\r\nI think for non-windows OS's the proper thing to say (when they do not use SDK-style projects) is to port them to SDK-style for non-windows OS's (if they want to keep non-sdk style projects on Windows that is).",
        "createdAt": "2021-07-05T06:44:26Z",
        "updatedAt": "2021-07-05T06:49:52Z",
        "author": {
          "login": "AraHaan"
        }
      },
      {
        "body": "That we can do. We can have the SDK props import the NuGet package implicitly but we'd also have to update the error message so that it won't confuse .NET devs on non-Windows platforms.",
        "createdAt": "2021-07-05T09:24:58Z",
        "updatedAt": "2021-07-05T09:24:58Z",
        "author": {
          "login": "Nirmal4G"
        }
      },
      {
        "body": "> We can have the SDK props import the NuGet package implicitly\r\n\r\nIt already does.\r\n\r\n> we'd also have to update the error message so that it won't confuse .NET devs on non-Windows platforms.\r\n\r\nThat's what this bug is for :)",
        "createdAt": "2021-07-06T14:16:28Z",
        "updatedAt": "2021-07-06T14:16:28Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I see... So, what's the verdict on this?\nCan we update the message or not?",
        "createdAt": "2021-07-06T15:05:13Z",
        "updatedAt": "2021-07-06T15:05:13Z",
        "author": {
          "login": "Nirmal4G"
        }
      },
      {
        "body": "> Can we update the message or not?\r\n\r\nThis bug asks for a change to the message and has been marked `up-for-grabs` by a core team member, so we're interested in a change to the message. The core team isn't planning to work on it in the near future, so it's in the Backlog milestone, but if a contributor expresses an interest in working on it we'll happily assign it to them, answer questions during the process, and review the PR.",
        "createdAt": "2021-07-06T15:33:29Z",
        "updatedAt": "2021-07-06T15:33:29Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Can I?",
        "createdAt": "2021-07-06T15:35:51Z",
        "updatedAt": "2021-07-06T15:35:51Z",
        "author": {
          "login": "Nirmal4G"
        }
      },
      {
        "body": "@Nirmal4G It's all yours. How do you plan to approach it? I can see a couple of options:\r\n\r\n1. Emit a different error on non-Windows OSes.\r\n2. Pass a boolean \"Should we emit this error or something different?\" down to the task and key it off of a using-the-new-sdk property.",
        "createdAt": "2021-07-06T15:43:54Z",
        "updatedAt": "2021-07-06T15:43:54Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "How about updating the error message as I mentioned above? Isn't that the simplest option?",
        "createdAt": "2021-07-06T15:59:19Z",
        "updatedAt": "2021-07-06T15:59:19Z",
        "author": {
          "login": "Nirmal4G"
        }
      },
      {
        "body": "We want to leave the current error message when it's appropriate; it's been tweaked over time to be as informative as possible.",
        "createdAt": "2021-07-06T16:10:11Z",
        "updatedAt": "2021-07-06T16:10:11Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I think the simplest fix is so:\r\n\r\n```cs\r\nif (OperatingSystem.Windows)\r\n{\r\n    // emit MSB3644.\r\n}\r\nelse\r\n{\r\n    // either emit nothing or something else.\r\n}\r\n```",
        "createdAt": "2021-07-06T16:18:16Z",
        "updatedAt": "2021-07-06T16:18:56Z",
        "author": {
          "login": "AraHaan"
        }
      },
      {
        "body": "Let's try emitting a different error on non-Windows systems and then we'll see if we can merge those two messages.",
        "createdAt": "2021-07-13T19:28:34Z",
        "updatedAt": "2021-07-13T19:28:34Z",
        "author": {
          "login": "Nirmal4G"
        }
      },
      {
        "body": "@Nirmal4G Any updates?",
        "createdAt": "2022-02-10T17:13:22Z",
        "updatedAt": "2022-02-10T17:13:22Z",
        "author": {
          "login": "benvillalobos"
        }
      }
    ]
  }
}