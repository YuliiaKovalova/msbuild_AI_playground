{
  "number": 6702,
  "title": "/openmp:llvm doesn't imply /openmp:experimental",
  "body": "### Issue Description\r\nIf I set:\r\n\r\n\t/openmp:experimental\r\n\r\nI get:\r\n\r\n\tC3016: 'var' : index variable in OpenMP 'for' statement must have signed integral type\r\n\r\nIf I set\r\n\r\n\t/openmp:llvm\r\n\r\nI get\r\n\r\n\tC7660: \"simd\": requires \"-openmp:experimental\" command line option(s)\r\n\r\nIf I set both flags (like you said above!):\r\n\r\n\t /openmp:experimental /openmp:llvm\r\n\r\nI get:\r\n\r\n\tC4005: \"_OPENMP\": macro redefinition\r\n\r\nThe last one is a warning, so at least stuff compiles, but I get tons of warnings.\r\n\r\nIf I set:\r\n\r\n\t/D _OPENMP /D _OPENMP_LLVM_RUNTIME\r\n\r\nthe result is not the same as with the real \"/openmp:\" flags, so this is not a solution. What's \"_OPENMP_LLVM_RUNTIME\"? Undocumented.\r\n\r\nAnything I can set you don't whine about? You first force me to set the _OPENMP flag twice, then warn me about it. We warn you that we forced you! Bah!\r\n\r\n### Steps to Reproduce\r\nI don't know. Compile something? Like tesseract, for example?\r\n\r\n### Expected Behavior\r\nWhat I expect... right. Who designed this template?!\r\n\r\n### Actual Behavior\r\nabove\r\n\r\n### Analysis\r\n* If you have an idea where the problem might lie\r\n\r\nYour brains?\r\n\r\n### Versions & Configurations\r\n16.9.0+5e4b48a27\r\n16.9.0.16703\r\n\r\n14.28.29910\r\n10.0.22000.0\r\n\r\nHope you know what those numbers mean, cause I don't\r\n\r\nWindows [Version 10.0.19042.804] x64",
  "state": "CLOSED",
  "createdAt": "2021-07-22T19:12:02Z",
  "updatedAt": "2024-02-21T14:12:25Z",
  "closedAt": "2021-09-02T23:31:40Z",
  "author": {
    "login": "WRFan"
  },
  "labels": [
    "bug",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "v-zhiyul"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Hi WRFan, for further investigation, could you provide the command line you run when you hit this issue? Or detailed steps to manually reproduce this ourselves? Thanks!",
        "createdAt": "2021-07-30T08:27:29Z",
        "updatedAt": "2021-07-30T08:27:29Z",
        "author": {
          "login": "v-zhiyul"
        }
      },
      {
        "body": "To reproduce this bug is very easy. Just compile ANY file with BOTH flags set:\r\n\r\n\t/openmp:experimental /openmp:llvm\r\n\r\nLet's say you have a C file:\r\n\r\n\tint WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, PSTR szCmdLine, int iCmdShow)\r\n\t{\r\n\t}\r\n\r\nNow just compile it and you get:\r\n\r\n\tC4005: \"_OPENMP\": macro redefinition\r\n\r\nif both \"/openmp\" flags are used.\r\n\r\nNow maybe I wasn't clear why I want to use both flags during compilation. I mentioned Tesseract. Now take a look at this file:\r\n\r\nhttps://raw.githubusercontent.com/tesseract-ocr/tesseract/master/src/ccmain/par_control.cpp\r\n\r\n\t#ifdef _OPENMP\r\n\t\t#pragma omp parallel for num_threads(10)\r\n\t#endif\r\n\r\nIf you try to compile this file with just \"/openmp:experimental\" (\"/openmp:llvm\" NOT set), you get:\r\n\r\n\tC3016: 'var' : index variable in OpenMP 'for' statement must have signed integral type\r\n\r\nBut these files:\r\n\r\nhttps://raw.githubusercontent.com/tesseract-ocr/tesseract/master/src/arch/dotproduct.cpp\r\nhttps://raw.githubusercontent.com/tesseract-ocr/tesseract/master/src/lstm/fullyconnected.cpp\r\nhttps://raw.githubusercontent.com/tesseract-ocr/tesseract/master/src/lstm/lstm.cpp\r\nhttps://raw.githubusercontent.com/tesseract-ocr/tesseract/master/src/lstm/parallel.cpp\r\nhttps://raw.githubusercontent.com/tesseract-ocr/tesseract/master/src/lstm/weightmatrix.cpp\r\n\r\nspecifically require \"/openmp:experimental\" being set.\r\n\r\n\t#if defined(_OPENMP)\r\n\t\t#pragma omp simd reduction(+ : total)\r\n\t#endif\r\n\r\nSo if you just set \"/openmp:llvm\" (to satisfy the compilation requirement for par_control.cpp - above), \"dotproduct.cpp\" etc. will throw:\r\n\r\n\tC7660: \"simd\": requires \"-openmp:experimental\" command line option(s)\r\n\r\nSo that's why I set BOTH \"/openmp\" flags, to avoid the errors on all files. But since the compiler (c1xx.dll) sets the \"_OPENMP\" macro for each \"/openmp\" directive passed to it, this results in a macro re-definition I mentioned above:\r\n\r\n\tC4005: \"_OPENMP\": macro redefinition\r\n\r\nI could of course disable the warning altogether:\r\n\r\n\t/wd4005\r\n\r\nbut that would suppress ALL macro redefinition warnings, not just this particular one, and that won't do.\r\n\r\nNow you might ask me why I don't set the compiler flags individually for each source file. Sure, I could do that:\r\n\r\nUsing cmake:\r\n\r\n\tset(BuildTargets\r\n\t\tsrc/dotproduct.cpp\r\n\t\tsrc/fullyconnected.cpp\r\n\t\tsrc/lstm.cpp\r\n\t\tsrc/parallel.cpp\r\n\t\tsrc/weightmatrix.cpp\r\n\t)\r\n\r\n\tforeach(obj ${BuildTargets})\r\n\t\tset_source_files_properties(${obj} PROPERTIES COMPILE_FLAGS \"/openmp:experimental\")\r\n\tendforeach()\r\n\r\n\tset(BuildTargets\r\n\t\tsrc/legacy/par_control.cpp\r\n\t\tsrc/tesseractmain.cpp\r\n\t)\r\n\r\n\tforeach(obj ${BuildTargets})\r\n\t\tset_source_files_properties(${obj} PROPERTIES COMPILE_FLAGS \"/openmp:llvm\")\r\n\tendforeach()\r\n\r\nAnd then build it:\r\n\r\n\tset CompilerFlags=/D _WINDOWS /D _WIN32_WINNT=0x0a00 /D WINVER=0x0a00 /D NDEBUG /D _CRT_SECURE_NO_WARNINGS /D _AFXDLL /W3 /utf-8 /GR- /EHsc /nologo /FC /Oi /Ot /Ob3 /GF /Gy /favor:INTEL64 /GL /cgthreads8 /GS- /wd4101 /we4013 /I\\\"%programfiles%/visual studio/windows kits/10/include/10.0.22000.0/km\\\" /MP /arch:AVX /arch:AVX2 /D __MMX__ /D __SSE__ /D __SSE2__ /D __SSE3__ /D __SSSE3__ /D __SSE4_1__ /D __SSE4_2__ /D __FMA__ /D __BMI2__ /std:c17 /std:c++latest /Zc:__cplusplus\r\n\r\n\tset LinkerFlags=/INCREMENTAL:NO /OPT:REF,ICF /LTCG /MANIFESTUAC:NO /DYNAMICBASE:NO /LIBPATH:\\\"%programfiles%/visual studio/windows kits/10/lib/10.0.22000.0/km/x64\\\" /NODEFAULTLIB:libcmt\r\n\r\n\tcmake .. -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON -DCMAKE_CONFIGURATION_TYPES:STRING=Release -DCMAKE_C_FLAGS:STRING=\"%CompilerFlags%\" -DCMAKE_CXX_FLAGS:STRING=\"%CompilerFlags%\" -DCMAKE_C_FLAGS_RELEASE:STRING=\"\" -DCMAKE_CXX_FLAGS_RELEASE:STRING=\"\" -DCMAKE_EXE_LINKER_FLAGS_RELEASE:STRING=\"%LinkerFlags%\" -DCMAKE_SHARED_LINKER_FLAGS_RELEASE:STRING=\"%LinkerFlags%\" -DCMAKE_BUILD_TYPE=Release -DCMAKE_CONFIGURATION_TYPES=Release\r\n\r\n\tcmake --build . --config Release\r\n\r\nThis results in these msbuild directives (as created by cmake):\r\n\r\n\t<AdditionalOptions>\r\n\t\t%(AdditionalOptions) /utf-8 /Ob3 /favor:INTEL64 /cgthreads8 /Zc:__cplusplus\r\n\t</AdditionalOptions>\r\n\r\n\t<ClCompile Include=\"C:\\Copy\\Packs\\tesseract\\src\\legacy\\par_control.cpp\">\r\n\t\t<AdditionalOptions Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">\r\n\t\t\t%(AdditionalOptions) /openmp:llvm\r\n\t\t</AdditionalOptions>\r\n    </ClCompile>\r\n\r\n\t...\r\n\tetc.\r\n\r\n\r\nBut then I would have to adjust the compiler flags for EACH single source file, and that for EACH single project I build, meaning I would have more work to do so YOU have less. I think we do it the other way around - you just fix the bug, then YOU do the work so we can simply set both \"/openmp\" flags without being nagged by those \"macro redefinition\" warnings.\r\n\r\nWhy are there two \"/openmp\" flags anyway? Why is the \"/openmp:experimental\" not sufficient to compile ANY source file containing \"#pragma omp\"? If somebody wants to use openmp, then they obviously want to use it on all files in a project, i.e., a single flag would suffice to enable/disable openmp? If both flags should still be necessary for some reason, the compiler should set the \"_OPENMP\" macro only once, even if both flags are there. I can't find out where this macro is being set, otherwise I'd fix it myself. It's not set by SDK header files as far as I can see, it must be compiled into c1xx.dll.\r\n\r\nI don't know if this is the right repository to post about this issue, since technically, this is a compiler issue, not an msbuild one, but I don't work for MS, I don't know your internal group structure. If your group is responsible for msbuild only, then notify the people responsible for the MSVC compiler.",
        "createdAt": "2021-08-03T02:02:55Z",
        "updatedAt": "2021-08-03T02:22:30Z",
        "author": {
          "login": "WRFan"
        }
      },
      {
        "body": "@WRFan Thanks for your reply! According to your description, it looks like this isn't an MSBuild issue. You can open a feedback for compiler(via your VS -> clicking \"Help\" -> \"Send Feedback\" -> \"Report a Problem..\" or \"https://developercommunity.visualstudio.com/spaces/8/index.html\").\r\n",
        "createdAt": "2021-08-04T06:34:27Z",
        "updatedAt": "2021-08-05T16:14:46Z",
        "author": {
          "login": "v-zhiyul"
        }
      },
      {
        "body": "> Why is the \"/openmp:experimental\" not sufficient to compile ANY source file containing \"#pragma omp\"?\r\n\r\n@yuehuang010 can you help with routing this, or is a feedback ticket the way to go here?",
        "createdAt": "2021-08-05T17:23:48Z",
        "updatedAt": "2021-08-05T17:23:48Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "Created a feedback ticket for this: https://developercommunity.visualstudio.com/t/openmp:llvm-doesnt-imply-openmp:exper/1520948.",
        "createdAt": "2021-09-02T23:31:40Z",
        "updatedAt": "2021-09-02T23:31:40Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "@WRFan there's activity on the feedback ticket, if you reply there we can help solve your issue. Thanks! \r\n\r\nhttps://developercommunity.visualstudio.com/t/openmpllvm-doesnt-imply-openmpexperimental/1520948?from=email&viewtype=all#T-ND1522460",
        "createdAt": "2021-09-07T16:49:54Z",
        "updatedAt": "2021-09-07T16:49:54Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "This does not appear to be fixed. ",
        "createdAt": "2023-12-04T21:46:03Z",
        "updatedAt": "2023-12-04T21:46:03Z",
        "author": {
          "login": "peekxc"
        }
      },
      {
        "body": "@peekxc but it's still not an MSBuild bug. The right place to track is still on the Developer Community site.",
        "createdAt": "2023-12-04T21:47:27Z",
        "updatedAt": "2023-12-04T21:47:27Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}