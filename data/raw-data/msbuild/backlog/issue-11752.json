{
  "number": 11752,
  "title": "Loading project fails in Main, but works in a separate method",
  "body": "### Issue Description\n\nThis is EXTREMELY confusing behavior. Examples of loading project are all over the internet and first thing, that comes to everyones mind is to create blank console application and copy & paste the code from example into the Program.cs. But they won\u2019t work unless in a separate method.\n\nThe error does not help to resolve the issue at all.\n```\nUnhandled exception. System.IO.FileNotFoundException: Could not load file or assembly 'Microsoft.Build, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'. The system cannot find the file specified.\nFile name: 'Microsoft.Build, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'\n   at BakaProjectSetup.Program.Main(String[] args)\n```\n\n### Steps to Reproduce\n\nThis simple example loading .csproj file fails\n```\nclass Program\u2028{\u2028\n    static int Main(string[] args)\u2028\n    {\n\u2028        MSBuildLocator.RegisterDefaults();\u2028\n\n        ProjectRootElement.Open(\"C:\\\\temp\\\\test.csproj\");\n\n\u2028        return 0;\u2028\n    }\u2028\n}\n```\n\nHowever this problem is unique to Main method in Program.cs. Moving the code to the separate method suddenly works as expected.\n\n```\nclass Program\u2028{\u2028\n    static int Main(string[] args)\n\u2028    {\u2028\n        MSBuildLocator.RegisterDefaults();\u2028\n\n\u2028        Test();\u2028\n\n\u2028        return 0;\u2028\n    }\u2028\u2028\n    public static void Test()\u2028\n    {\u2028\n        ProjectRootElement.Open(\"C:\\\\temp\\\\test.proj\");\u2028\n    }\n\u2028}\n```\n\n### Expected Behavior\n\nThe program runs consistently.\n\n### Actual Behavior\n\nThe same code fails in Main, but works in separate method.\n\n### Analysis\n\n_No response_\n\n### Versions & Configurations\n\n.NET 8, .NET 9\nNuget package Microsoft.Build version 17.13.9 (but fails on other versions as well)",
  "state": "CLOSED",
  "createdAt": "2025-04-22T20:58:52Z",
  "updatedAt": "2025-04-22T21:23:52Z",
  "closedAt": "2025-04-22T21:23:52Z",
  "author": {
    "login": "petrhanak"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "comments": {
    "nodes": [
      {
        "body": "https://github.com/user-attachments/assets/567af10d-374f-44da-9ccd-d8a63601e02f",
        "createdAt": "2025-04-22T21:10:15Z",
        "author": {
          "login": "petrhanak"
        }
      },
      {
        "body": "This is because of how the dotnet runtime loads assemblies. When the runtime executes a method, it loads any assemblies that are used in the method. For MSBuild Locator, it's critical that you initialize the locator before any MSBuild libraries are loaded. When you do initialization and use of the MSBuild types in the same method, you get the error you've shown. \n\nThis isn't unique to MSBuild, just a special case of a more general problem with this kinds of delay-loading in .NET. ",
        "createdAt": "2025-04-22T21:23:47Z",
        "author": {
          "login": "baronfel"
        }
      }
    ]
  }
}