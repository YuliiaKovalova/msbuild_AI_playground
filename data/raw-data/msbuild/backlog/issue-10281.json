{
  "number": 10281,
  "title": "[Bug]: Can't use contained classes of NuGet Package Microsoft.Build when added as GlobalPackageReference in a Directory.Packages.props file",
  "body": "### Issue Description\n\nWhen I reference the NuGet Package **Microsoft.Build** as **GlobalPackageReference** in a **Directory.Packages.props** I can't use the contained classes.\r\nWhen I only set the **PackageVersion** in the **Directory.Packages.props** and then use it as **PackageReference** in a **Directory.Build.props** it works.\r\n\r\nTested with package versions 17.10.4 against net8 and 17.7.2 against net7.\n\n### Steps to Reproduce\n\nI created a small sample project to reproduce the issue:\r\nhttps://github.com/proj-arch/Microsoft.Build-GlobalPackageReference-BuildError\r\n\r\n- Clone the repo\r\n- build **GlobalPackageReference-BuildError\\GlobalPackageReference-BuildError.sln**\r\n- you will get a build error CS0234 in Class1 trying to use Microsoft.Build.Evaluation.Project\r\n\r\nin contrast if you build **GlobalPackageReference-Working\\GlobalPackageReference-Working.sln** it works fine.\r\n\r\n- GlobalPackageReference-BuildError\\GlobalPackageReference-BuildError.sln uses **GlobalPackageReference** in the **Directory.Packages.props**\r\n- GlobalPackageReference-Working\\GlobalPackageReference-Working.sln only sets the **PackageVersion** in the **Directory.Packages.props** and adds the **PackageReference** in the **Directory.Build.props**\n\n### Expected Behavior\n\nadding the package **Microsoft.Build** as a **GlobalPackageReference** in the **Directory.Packages.props** works just fine\n\n### Actual Behavior\n\nusing the classes in **Microsoft.Build** breaks the build:\r\nerror CS0234: The type or namespace name 'Build' does not exist in the namespace 'Microsoft' (are you missing an assembly reference?)\n\n### Analysis\n\n_No response_\n\n### Versions & Configurations\n\nMSBuild-Version 17.10.4+10fbfbf2e f\u00fcr .NET Framework\r\n17.10.4.21802\r\n\r\nVisual Studio 17.10.1 on Windows 10 22H2 (19045.4529)",
  "state": "CLOSED",
  "createdAt": "2024-06-22T11:46:50Z",
  "updatedAt": "2024-06-30T19:54:29Z",
  "closedAt": "2024-06-25T13:48:18Z",
  "author": {
    "login": "astaerk"
  },
  "labels": [
    "bug"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "@astaerk This is by design for `GlobalPackageReference` (though I didn't expect it either!). The [Central Package Management/`GlobalPackageReference` docs](https://learn.microsoft.com/nuget/consume-packages/Central-Package-Management) say\r\n\r\n> Global package references are added to the PackageReference item group with the following metadata:\r\n> \r\n> * `IncludeAssets=\"Runtime;Build;Native;contentFiles;Analyzers\"`<br/>\r\n>   This ensures that the package is only used as a development dependency and prevents any compile-time assembly references.\r\n\r\nIf you have further feedback I think https://github.com/nuget/home is the place for it.",
        "createdAt": "2024-06-25T13:48:18Z",
        "updatedAt": "2024-06-25T13:48:18Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald Thank you for that information!\r\nThat is somewhat unexpected. The feature felt so obvious, that I actually never bothered reading the docs. Sorry, my bad.\r\n\r\nWell, I'll go with the Directory.Build.props then.",
        "createdAt": "2024-06-30T19:54:28Z",
        "updatedAt": "2024-06-30T19:54:28Z",
        "author": {
          "login": "astaerk"
        }
      }
    ]
  }
}