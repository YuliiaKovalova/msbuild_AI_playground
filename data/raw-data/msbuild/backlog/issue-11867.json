{
  "number": 11867,
  "title": "LoggerException occurs when trying to use the same binary logger for evaluation and build",
  "body": "Context: The VS Code C# extension throws an exception when loading projects with setting `\"dotnet.projects.binaryLogPath\"` specified.\n\n<details>\n    <summary>VS Code error log</summary>\n\n```log\n2025-05-19 10:33:59.335 [info] [Error - 10:33:59 AM] [workspace/didChangeWatchedFiles] [LanguageServerProjectLoader] Error while loading c:\\Users\\rigibson\\src\\ConsoleApp5\\Program.cs: Exception thrown: Microsoft.CodeAnalysis.MSBuild.RemoteInvocationException: An exception of type Microsoft.Build.Framework.LoggerException was thrown: Failed to write to log file \"C:\\Users\\rigibson\\AppData\\Local\\Programs\\Microsoft VS Code\\binlogs\\LanguageServerDesignTimeBuild-df194f26-35a6-49fa-9bc4-a895752f774e-1.binlog\". The process cannot access the file 'C:\\Users\\rigibson\\AppData\\Local\\Programs\\Microsoft VS Code\\binlogs\\LanguageServerDesignTimeBuild-df194f26-35a6-49fa-9bc4-a895752f774e-1.binlog' because it is being used by another process.\n   at Microsoft.CodeAnalysis.MSBuild.RpcClient.InvokeCoreAsync(Int32 targetObject, String methodName, List`1 parameters, Type expectedReturnType, CancellationToken cancellationToken) in /_/src/Workspaces/MSBuild/Core/Rpc/RpcClient.cs:line 186\n   at Microsoft.CodeAnalysis.MSBuild.RpcClient.InvokeAsync[T](Int32 targetObject, String methodName, List`1 parameters, CancellationToken cancellationToken) in /_/src/Workspaces/MSBuild/Core/Rpc/RpcClient.cs:line 135\n   at Microsoft.CodeAnalysis.MSBuild.RemoteBuildHost.LoadProjectAsync(String projectFilePath, String projectContent, String languageName, CancellationToken cancellationToken) in /_/src/Workspaces/MSBuild/Core/Rpc/RemoteBuildHost.cs:line 41\n   at Microsoft.CodeAnalysis.LanguageServer.HostWorkspace.FileBasedProgramsProjectSystem.TryLoadProjectInMSBuildHostAsync(BuildHostProcessManager buildHostProcessManager, String documentPath, CancellationToken cancellationToken) in /_/src/LanguageServer/Microsoft.CodeAnalysis.LanguageServer/HostWorkspace/FileBasedProgramsProjectSystem.cs:line 141\n   at Microsoft.CodeAnalysis.LanguageServer.HostWorkspace.LanguageServerProjectLoader.ReloadProjectAsync(ProjectToLoad projectToLoad, ToastErrorReporter toastErrorReporter, BuildHostProcessManager buildHostProcessManager, CancellationToken cancellationToken) in /_/src/LanguageServer/Microsoft.CodeAnalysis.LanguageServer/HostWorkspace/LanguageServerProjectLoader.cs:line 208\n2025-05-19 10:33:59.340 [info] [Info  - 10:33:59 AM] [workspace/didChangeWatchedFiles] [LanguageServerProjectLoader] Completed (re)load of all projects in 00:00:01.1469839\n2025-05-19 10:33:59.341 [info] [Debug - 10:33:59 AM] [workspace/didChangeWatchedFiles] [BuildHost PID 10208] Sending a Shutdown request to the BuildHost.\n2025-05-19 10:33:59.343 [info] [Error - 10:33:59 AM] [workspace/didChangeWatchedFiles] [BuildHost PID 10208] Exception while shutting down the BuildHost process. Microsoft.CodeAnalysis.MSBuild.RemoteInvocationException: An exception of type System.InvalidOperationException was thrown: Operation is not valid due to the current state of the object.\n   at Microsoft.CodeAnalysis.MSBuild.RpcClient.InvokeCoreAsync(Int32 targetObject, String methodName, List`1 parameters, Type expectedReturnType, CancellationToken cancellationToken) in /_/src/Workspaces/MSBuild/Core/Rpc/RpcClient.cs:line 186\n   at Microsoft.CodeAnalysis.MSBuild.BuildHostProcessManager.BuildHostProcess.DisposeAsync() in /_/src/Workspaces/MSBuild/Core/MSBuild/BuildHostProcessManager.cs:line 434\n2025-05-19 10:33:59.343 [info] [Error - 10:33:59 AM] [workspace/didChangeWatchedFiles] \n```\n</details>\n\nWhat is happening is: `BinaryLogger.Initialize` is being called twice. Each time a write stream to the binlog file is opened. The second time, an IOException occurs because the first time locked the file.\n\nBoth calls to `BinaryLogger.Initialize` occur indirectly thru a single call to `ProjectBuildManager.StartBatchBuild` in Roslyn.\n\n<details>\n    <summary><a href=\"https://github.com/dotnet/roslyn/blob/c3c7ad6a866dd0b857ad14ce683987c39d2b8fe0/src/Workspaces/MSBuild/BuildHost/Build/ProjectBuildManager.cs#L231\">First call (thru ProjectBuildManager.cs#L231)</a></summary>\n\n```log\nMicrosoft.Build.dll!Microsoft.Build.Logging.BinaryLogger.Initialize(Microsoft.Build.Framework.IEventSource eventSource) Line 79\tC#\nMicrosoft.Build.dll!Microsoft.Build.Evaluation.ProjectCollection.ReusableLogger.Initialize(Microsoft.Build.Framework.IEventSource eventSource, int nodeCount) Line 221\tC#\nMicrosoft.Build.dll!Microsoft.Build.BackEnd.Logging.LoggingService.InitializeLogger(Microsoft.Build.Framework.ILogger logger, Microsoft.Build.Framework.IEventSource sourceForLogger) Line 982\tC#\nMicrosoft.Build.dll!Microsoft.Build.BackEnd.Logging.LoggingService.RegisterDistributedLogger(Microsoft.Build.Framework.ILogger centralLogger, Microsoft.Build.Logging.LoggerDescription forwardingLogger) Line 578\tC#\nMicrosoft.Build.dll!Microsoft.Build.BackEnd.Logging.LoggingService.RegisterLogger(Microsoft.Build.Framework.ILogger logger) Line 537\tC#\nMicrosoft.Build.dll!Microsoft.Build.Evaluation.ProjectCollection.RegisterLoggerInternal(Microsoft.Build.Framework.ILogger logger) Line 1660\tC#\nMicrosoft.Build.dll!Microsoft.Build.Evaluation.ProjectCollection.RegisterLoggers(System.Collections.Generic.IEnumerable<Microsoft.Build.Framework.ILogger> loggers) Line 1405\tC#\nMicrosoft.Build.dll!Microsoft.Build.Evaluation.ProjectCollection.ProjectCollection(System.Collections.Generic.IDictionary<string, string> globalProperties, System.Collections.Generic.IEnumerable<Microsoft.Build.Framework.ILogger> loggers, System.Collections.Generic.IEnumerable<Microsoft.Build.Logging.ForwardingLoggerRecord> remoteLoggers, Microsoft.Build.Evaluation.ToolsetDefinitionLocations toolsetDefinitionLocations, int maxNodeCount, bool onlyLogCriticalEvents, bool loadProjectsReadOnly, bool useAsynchronousLogging, bool reuseProjectRootElementCache) Line 1127\tC#\nMicrosoft.Build.dll!Microsoft.Build.Evaluation.ProjectCollection.ProjectCollection(System.Collections.Generic.IDictionary<string, string> globalProperties, System.Collections.Generic.IEnumerable<Microsoft.Build.Framework.ILogger> loggers, System.Collections.Generic.IEnumerable<Microsoft.Build.Logging.ForwardingLoggerRecord> remoteLoggers, Microsoft.Build.Evaluation.ToolsetDefinitionLocations toolsetDefinitionLocations, int maxNodeCount, bool onlyLogCriticalEvents, bool loadProjectsReadOnly) Line 1097\tC#\nMicrosoft.Build.dll!Microsoft.Build.Evaluation.ProjectCollection.ProjectCollection(System.Collections.Generic.IDictionary<string, string> globalProperties, System.Collections.Generic.IEnumerable<Microsoft.Build.Framework.ILogger> loggers, System.Collections.Generic.IEnumerable<Microsoft.Build.Logging.ForwardingLoggerRecord> remoteLoggers, Microsoft.Build.Evaluation.ToolsetDefinitionLocations toolsetDefinitionLocations, int maxNodeCount, bool onlyLogCriticalEvents) Line 1092\tC#\nMicrosoft.Build.dll!Microsoft.Build.Evaluation.ProjectCollection.ProjectCollection(System.Collections.Generic.IDictionary<string, string> globalProperties, System.Collections.Generic.IEnumerable<Microsoft.Build.Framework.ILogger> loggers, Microsoft.Build.Evaluation.ToolsetDefinitionLocations toolsetDefinitionLocations) Line 1080\tC#\nMicrosoft.CodeAnalysis.Workspaces.MSBuild.BuildHost.dll!Microsoft.CodeAnalysis.MSBuild.ProjectBuildManager.StartBatchBuild(System.Collections.Generic.IDictionary<string, string> globalProperties) Line 231\tC#\nMicrosoft.CodeAnalysis.Workspaces.MSBuild.BuildHost.dll!Microsoft.CodeAnalysis.MSBuild.BuildHost.CreateBuildManager() Line 122\tC#\nMicrosoft.CodeAnalysis.Workspaces.MSBuild.BuildHost.dll!Microsoft.CodeAnalysis.MSBuild.BuildHost.LoadProjectCore(string projectFilePath, string projectContent, string languageName) Line 205\tC#\nMicrosoft.CodeAnalysis.Workspaces.MSBuild.BuildHost.dll!Microsoft.CodeAnalysis.MSBuild.BuildHost.LoadProject(string projectFilePath, string projectContent, string languageName) Line 176\tC#\n```\n</details>\n\n<details>\n    <summary><a href=\"https://github.com/dotnet/roslyn/blob/c3c7ad6a866dd0b857ad14ce683987c39d2b8fe0/src/Workspaces/MSBuild/BuildHost/Build/ProjectBuildManager.cs#L243\">Second call (thru ProjectBuildManager.cs#L243)</a></summary>\n\n```log\nMicrosoft.Build.dll!Microsoft.Build.Logging.BinaryLogger.Initialize(Microsoft.Build.Framework.IEventSource eventSource) Line 79\tC#\nMicrosoft.Build.dll!Microsoft.Build.BackEnd.Logging.LoggingService.InitializeLogger(Microsoft.Build.Framework.ILogger logger, Microsoft.Build.Framework.IEventSource sourceForLogger) Line 986\tC#\nMicrosoft.Build.dll!Microsoft.Build.BackEnd.Logging.LoggingService.RegisterDistributedLogger(Microsoft.Build.Framework.ILogger centralLogger, Microsoft.Build.Logging.LoggerDescription forwardingLogger) Line 578\tC#\nMicrosoft.Build.dll!Microsoft.Build.BackEnd.Logging.LoggingService.RegisterLogger(Microsoft.Build.Framework.ILogger logger) Line 537\tC#\nMicrosoft.Build.dll!Microsoft.Build.Execution.BuildManager.CreateLoggingService(System.Collections.Generic.IEnumerable<Microsoft.Build.Framework.ILogger> loggers, System.Collections.Generic.IEnumerable<Microsoft.Build.Logging.ForwardingLoggerRecord> forwardingLoggers, System.Collections.Generic.ISet<string> warningsAsErrors, System.Collections.Generic.ISet<string> warningsNotAsErrors, System.Collections.Generic.ISet<string> warningsAsMessages) Line 2000\tC#\nMicrosoft.Build.dll!Microsoft.Build.Execution.BuildManager.BeginBuild.__InitializeLoggingService|64_0() Line 443\tC#\nMicrosoft.Build.dll!Microsoft.Build.Execution.BuildManager.BeginBuild(Microsoft.Build.Execution.BuildParameters parameters) Line 360\tC#\nMicrosoft.CodeAnalysis.Workspaces.MSBuild.BuildHost.dll!Microsoft.CodeAnalysis.MSBuild.ProjectBuildManager.StartBatchBuild(System.Collections.Generic.IDictionary<string, string> globalProperties) Line 243\tC#\nMicrosoft.CodeAnalysis.Workspaces.MSBuild.BuildHost.dll!Microsoft.CodeAnalysis.MSBuild.BuildHost.CreateBuildManager() Line 122\tC#\nMicrosoft.CodeAnalysis.Workspaces.MSBuild.BuildHost.dll!Microsoft.CodeAnalysis.MSBuild.BuildHost.LoadProjectCore(string projectFilePath, string projectContent, string languageName) Line 205\tC#\nMicrosoft.CodeAnalysis.Workspaces.MSBuild.BuildHost.dll!Microsoft.CodeAnalysis.MSBuild.BuildHost.LoadProject(string projectFilePath, string projectContent, string languageName) Line 176\tC#\n```\n</details>\n\nFrom discussion with @dibarbet we believe this is a regression. In the past, the usage pattern shown in the linked code did not result in multiple initialization of the BinaryLogger. We were thus able to log both the evaluation and build of a project to the same binlog file at design time.",
  "state": "OPEN",
  "createdAt": "2025-05-19T17:51:00Z",
  "updatedAt": "2025-05-27T21:19:57Z",
  "closedAt": null,
  "author": {
    "login": "RikkiGibson"
  },
  "milestone": null,
  "assignees": {
    "nodes": [
      {
        "login": "SimaTian"
      }
    ]
  },
  "labels": [
    "Area: Logging",
    "triaged",
    "gathering-feedback"
  ],
  "comments": {
    "nodes": [
      {
        "body": "What version of the MSBuild libraries are you using? I thought @surayya-MS had found/fixed a cause of multiple logger initialization a few weeks ago? ",
        "createdAt": "2025-05-19T19:37:57Z",
        "author": {
          "login": "baronfel"
        }
      },
      {
        "body": "It looks like Roslyn's MSBuildHost uses MSBuildLocator which usually ends up loading the msbuild included in the SDK for the current project.\n\nIn my case, it was using SDK `10.0.100-preview.4.25204.5`, and when I cracked the Microsoft.Build.dll in there, it had AssemblyInformationalVersion `17.15.0-preview-25203-02+06179d08bf90f1cdc6cc283b865adcdac457ea3c`.",
        "createdAt": "2025-05-19T19:50:05Z",
        "author": {
          "login": "RikkiGibson"
        }
      },
      {
        "body": "@baronfel  the fix you're talking about is in 17.14 https://github.com/dotnet/msbuild/commit/18a02f8a6ac183748b41466337dd15a0124b16d4\nIt is not in 17.15 yet.\nThe problem there was that BinaryLogger was not attached. This issue looks different - BinaryLogger initialized twice",
        "createdAt": "2025-05-20T09:34:46Z",
        "author": {
          "login": "surayya-MS"
        }
      },
      {
        "body": "@RikkiGibson , could you please include repro steps to understand how to catch this exception on our machines?",
        "createdAt": "2025-05-20T13:26:50Z",
        "author": {
          "login": "YuliiaKovalova"
        }
      },
      {
        "body": "My hope is that a unit test which imitates the usage pattern in [StartBatchBuild](https://github.com/dotnet/roslyn/blob/c3c7ad6a866dd0b857ad14ce683987c39d2b8fe0/src/Workspaces/MSBuild/BuildHost/Build/ProjectBuildManager.cs#L227-L243) will be enough to repro.\n\nThe way I happened to repro is (starting from VS Code with C#+DevKit latest stable installed):\n\n- `dotnet new console -o Repro`\n- Open `Repro` in VS Code\n- Run command \"Open Workspace Settings (JSON)\"\n- Insert the following\n```json\n{\n    \"dotnet.projects.binaryLogPath\": \"C:/binlogs\" // any absolute path you prefer will work\n}\n```\n- Open Program.cs and wait a bit for the project to load. You may need to Reload Window to get the config changes to take effect.\n\nYou will get a popup saying C# projects failed to load, linking to logger output with stacks similar to the issue description.\n\nTrouble with this way is, attaching to MSBuildHost is not straightforward. The only way I have done it, so far, is to build MSBuildHost from source. (Filed dotnet/roslyn#78654 to try and make this easier.)\n\nFWIW, the Roslyn MSBuildHost uses MSBuildLocator to find the MSBuild it should use to build the user's project. So, if you know how to control which MSBuild it loads, you could possibly get it to load one that you built locally, which calls `Debugger.Launch()` when you want it to, or something similar.",
        "createdAt": "2025-05-20T16:09:53Z",
        "author": {
          "login": "RikkiGibson"
        }
      },
      {
        "body": "Hello, I have a local reproduction and now I'm pondering about a fix. Your use case is perfectly reasonable and I believe we should support it. At the same time, I'm fairly sure it isn't a regression. \nThat being said I will do some more checks on an older branch - I have a suspicion that there might've been an error that dropped one of the binary loggers altogether.\n\nLet me explain:\nBinary logger as currently wired, doesn't support double initialization:\n```\nMicrosoft.Build.dll!Microsoft.Build.Logging.BinaryLogger.Initialize(Microsoft.Build.Framework.IEventSource eventSource) Line 79\tC#\nMicrosoft.Build.dll!Microsoft.Build.BackEnd.Logging.LoggingService.InitializeLogger(Microsoft.Build.Framework.ILogger logger, Microsoft.Build.Framework.IEventSource sourceForLogger) Line 986\tC#\nMicrosoft.Build.dll!Microsoft.Build.BackEnd.Logging.LoggingService.RegisterDistributedLogger(Microsoft.Build.Framework.ILogger centralLogger, Microsoft.Build.Logging.LoggerDescription forwardingLogger) Line 578\tC#\n```\nThe missing link is the \n```\nMicrosoft.Build.dll!Microsoft.Build.Evaluation.ProjectCollection.ReusableLogger.Initialize(Microsoft.Build.Framework.IEventSource eventSource, int nodeCount) Line 221\tC#\n```\nCombined with the comment in Roslyn's Project Manager:\n// The loggers are not inherited from the project collection, so specify both the\n// binlog logger and the _batchBuildLogger for the build steps.\n\nSo Roslyn is passing the raw BinaryLogger, which doesn't support double initialization (and as far as I have checked, it never did - that particular piece of code is untouched since it's inception)\n - if the path to log is specified, it will attempt to double-open a file and crash. \n - if the path is not specified, it generates a random one so these don't clash and you end up with two separate binary logs.\n\nNow how to fix it.\n - I will discuss with team if there is something preventing us from exposing the ReusableLogger as a part of public API. \n    - you could then do something like `var msbuildLogger = new ProjectCollection.ReusableLogger(new BinaryLogger());`\n    - it is kind of weird, since it doubly-wraps the binary logger in a ReusableLogger during the evaluation step, but it works and it should have no performance impact.\n    - it would require a minor change on our side and a minor change on your side.\n - If you don't want to wait until we get the change in and roll it out, you can implement a ReusableLogger on your own - see [ReusableLogger](https://github.com/dotnet/msbuild/blob/f88eb76608c0e4417aa066c20e698a9174855df0/src/Build/Definition/ProjectCollection.cs#L1840)\n   - Unfortunately the class is kind of clunky. Maybe there is a slimmer way to achieve the same thing for you scenario.\n - We could maybe start doing the whole \"inheriting the loggers from collection\" \n   - However I suspect that this is a can of worms that could spiral quite quickly. \n - We could rewire the binaryLogger to support double initialization via append into the same file, similarly to what the ReusableLogger currently does. \n\nI will update as soon as I have more information.",
        "createdAt": "2025-05-22T09:45:01Z",
        "author": {
          "login": "SimaTian"
        }
      },
      {
        "body": "I checked out main branch for early-december end early november last year and the behavior is consistent - e.g. failing due to locked file.",
        "createdAt": "2025-05-22T12:40:21Z",
        "author": {
          "login": "SimaTian"
        }
      },
      {
        "body": "Makes sense! Thank you for taking a look.\n\nMaking the logger support double initialization is going to be easiest for us, but, we might be able to call a ReusableLogger API via light-up (reflection or something), if that ends up being the preferred direction.\n\nI think it would be some time before our MSBuildHost could directly reference an msbuild which has such a new API. I think the older versions would need to fall out of support--since our host needs to be able to load and use whichever msbuild is appropriate based on the user's installed SDK/global.json setup.\n\n@dibarbet @JoeRobich for visibility.",
        "createdAt": "2025-05-22T19:08:39Z",
        "author": {
          "login": "RikkiGibson"
        }
      },
      {
        "body": "@RikkiGibson \nTo clarify, do I understand that correctly, that exposing the API won't help too much at this point in time please?\n\nI talked to the team and it is possible to expose it, however it imposes a long term cost of maintaining the endpoint - so we would prefer to only do it if it is usefull.",
        "createdAt": "2025-05-27T11:59:46Z",
        "author": {
          "login": "SimaTian"
        }
      },
      {
        "body": "> We could rewire the binaryLogger to support double initialization via append into the same file, similarly to what the ReusableLogger currently does.\n\nI think this would be the best approach, if it is found to be practical.\n\nRoslyn is going to have to deal with the behaviors of up-to-2-year-old MSBuilds, so, we will probably have to copy/paste the ReusableLogger on our side in order to prevent the issue in old MSBuild versions. If the fix is made on the MSBuild side we could eventually remove that workaround on our end.",
        "createdAt": "2025-05-27T21:19:57Z",
        "author": {
          "login": "RikkiGibson"
        }
      }
    ]
  }
}