{
  "number": 5336,
  "title": "msbuild does not build Xamarin.Forms project correctly when building from Xamarin.iOS csproj",
  "body": "### Steps to reproduce\r\n\r\n1. Clone sample repo: https://github.com/beeradmoore/AppCenterBuildConfig\r\n2. Restore nuget and build project.\r\n```\r\ncd AppCenterBuildConfig\r\n\r\n# Restore nugets the same way AppCenter does.\r\nfind . -name '*.sln' -type f -print0 | /usr/bin/xargs -0 grep -l 'AppCenterTestBuild.iOS.csproj' | /usr/bin/xargs -I '{}' nuget restore '{}' -DisableParallelProcessing\r\n\r\nmsbuild ./AppCenterTestBuild.iOS/AppCenterTestBuild.iOS.csproj \\\r\n    /p:Configuration=AppCenter \\\r\n    /p:Platform=iPhone \\\r\n    /p:BuildIpa=true \\\r\n    /t:Build \\\r\n    /p:Codesignkey=\"REDACTED\" \\\r\n    /p:CodesignProvision=\"REDACTED\"\r\n```\r\n\r\nEither deploy the app to view the displayed output or examine the build log to see that `__APPCENTER__` define constants in `AppCenterTestBuild/AppCenterTestBuild.csproj` were never included in the build of that project.\r\n\r\nI have attached two build logs, one for building with csproj, and one for building with sln. The sln build is the same as above, but the first line of the msbuild is replaced with \r\n```\r\nmsbuild ./AppCenterTestBuild.sln \\\r\n```\r\n\r\nYou can observe the difference in the building of the Xamarin.Forms project with  [build_csproj.log](https://github.com/microsoft/msbuild/files/4590142/build_csproj.log) on line 62, or in the other [build_sln.log](https://github.com/microsoft/msbuild/files/4590143/build_sln.log) on line 67.\r\n\r\nDefined constants in csproj build log:\r\n`/define:TRACE;APPCENTER;NETSTANDARD;NETSTANDARD2_0`\r\n\r\nDefined constants in sln build log:\r\n`/define:TRACE;RELEASE;NETSTANDARD;NETSTANDARD2_0;__APPCENTER__;APPCENTER;NETSTANDARD;NETSTANDARD2_0`\r\n\r\n(note: `APPCENTER` is in the defines as it is the build config name, `__APPCENTER__` is the one that I have included in all projects)\r\n\r\n### Expected behavior\r\nWhen the app is ran it is expected that `__APPCENTER__` was included resulting in AppCenter being displayed next to `Forms build type:`.\r\n\r\n![IMG_3883 copy](https://user-images.githubusercontent.com/904737/81243132-52daa400-9052-11ea-82dc-0bfeffcbf3b5.png)\r\n\r\n\r\n### Actual behavior\r\nBoth Release and AppCenter is missing next to `Forms build type:`. They were however used correctly from the `AppCenterTestBuild.iOS.csproj` which controls the output for `Device build type:`. `RELEASE` is also missing as shown above in csproj build log above, this is why Release is also missing from the output displayed in the app for that particular project.\r\n\r\n![IMG_3884 copy](https://user-images.githubusercontent.com/904737/81243145-5ec66600-9052-11ea-9ac9-6a9f7470d9e5.png)\r\n### Environment data\r\n`msbuild /version` output:\r\n```\r\nMicrosoft (R) Build Engine version 16.5.0-ci for Mono\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n16.5.0.16201\r\n```\r\n\r\nOS info:\r\nmacOS 10.15.4\r\n\r\nIf applicable, version of the tool that invokes MSBuild (Visual Studio, dotnet CLI, etc):\r\nInvoked just from Terminal app. I am using Xcode 11.4 and I have Visual Studio 8.5.4 installed.\r\n\r\n### Additional information\r\nBuilding the same project for Android builds with the expect define constants in the build log, however I was unable to install this app as I am unsure how to sign the package via command line. \r\n```\r\nmsbuild ./AppCenterTestBuild.Android/AppCenterTestBuild.Android.csproj \\\r\n    /t:PackageForAndroid \\\r\n    /p:Configuration=AppCenter \r\n```\r\nThe build log is here: \r\n[build_android.log](https://github.com/microsoft/msbuild/files/4590181/build_android.log)\r\n\r\nLine 44 shows Xamarin.Forms project being built, it contains the same defined constants as the iOS sln project has.\r\n```\r\n/define:TRACE;RELEASE;NETSTANDARD;NETSTANDARD2_0;__APPCENTER__;APPCENTER;NETSTANDARD;NETSTANDARD2_0\r\n```\r\n\r\n\r\nBuilding iOS project in Visual Studio for Mac and deploying to device or simulator displays the expected output. I am also opening the .sln file, which above is shown to generate the correct output.\r\n\r\n",
  "state": "CLOSED",
  "createdAt": "2020-05-07T01:22:05Z",
  "updatedAt": "2024-02-21T17:03:56Z",
  "closedAt": "2020-07-01T16:05:45Z",
  "author": {
    "login": "beeradmoore"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "@redth, can you help us route this?",
        "createdAt": "2020-05-27T16:11:13Z",
        "updatedAt": "2020-05-27T16:11:13Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Maybe I'm underthinking this but your Condition is dependant on `$(Platform)` being equal to `AnyCpu` and it looks like the .csproj build is using `iPhone` which means your condition is never met.\r\n\r\nCan I recommend using a [pre-defined AppCenter environment variable](https://docs.microsoft.com/en-us/appcenter/build/custom/variables/#pre-defined-variables) to add the constant to the build when running on appcenter instead?\r\n\r\n```\r\n<PropertyGroup Condition=\"'$(APPCENTER_BUILD_ID)'!=''\">\r\n\t<DefineConstants>$(DefineConstants);__APPCENTER__</DefineConstants>\r\n</PropertyGroup>\r\n```\r\n",
        "createdAt": "2020-05-27T17:27:35Z",
        "updatedAt": "2020-05-27T17:27:35Z",
        "author": {
          "login": "Redth"
        }
      },
      {
        "body": "I had wondered why it was working for Android and not iOS considering they are both built the same way from the command line. Thats why I assumed its some internal msbuild issue of how it handles different projects.\r\n\r\nLast weekend that actually led me to try something similar to your workaround (although I have only tested locally, not on AppCenter). Only difference is I check if the config is AppCenter. That way a release that is intended for AppStore won't have AppCenter in it. Configurations I normally have is Debug, Release, and AppCenter.\r\n\r\n```\r\n<PropertyGroup Condition=\" '$(Configuration)' == 'AppCenter' \">\r\n    <DefineConstants>$(DefineConstants);__APPCENTER__</DefineConstants>\r\n</PropertyGroup>\r\n```\r\n\r\nI'll go try this on AppCenter to see if it does resolve my issue there.\r\n\r\nI'm still not exactly sure why this is happening only to iOS builds, why building the .sln instead of .csproj fixes it, or why/when this had possibly changed at some point (I don't recall us changing our configs, maybe someone else in the team did that I wasn't aware of). I didn't hear much people having issues with it while researching it so I assume it isn't a common issue or use case.",
        "createdAt": "2020-05-27T22:44:05Z",
        "updatedAt": "2020-05-27T22:44:05Z",
        "author": {
          "login": "beeradmoore"
        }
      },
      {
        "body": "The android build\u2019s Platform _would_ be `AnyCpu`.  For historic reasons iOS uses `iPhone` to build for iOS device. This will be more normalized and consistent in .NET6. \n\nYour other workaround works because it only specified the Configuration and not Platform as well. \n\nI suggested my workaround also because it works with the default Release and Debug configurations and doesn\u2019t require you set up an additional config just for appcenter. \n\nIn any case sounds like you have a working solution!",
        "createdAt": "2020-05-27T22:49:25Z",
        "updatedAt": "2020-05-27T22:49:25Z",
        "author": {
          "login": "Redth"
        }
      },
      {
        "body": "Ohh, I see what you mean about AnyCPU/iPhone now. The forms csproj is checking platform of AnyCPU. I don't know if I didn't see that or if I just assumed AnyCPU meant iPhone/iPhoneSimulator. \r\n\r\nI can't do the exact AppCenter workaround you mentioned because our app has lots of hidden bells and whistles that get enabled for our internal AppCenter builds, but then master branch is pure and to TestFlight/Google Play Beta. I however will play with what you said and do something similar to this,\r\n\r\n```\r\n<PropertyGroup Condition=\" '$(APPCENTER_BRANCH )' != '' And '$(APPCENTER_BRANCH)' != 'master' \">\r\n```\r\n\r\nIn our code we normally do things like\r\n```\r\n#if __APPCENTER__\r\n var server = \"https://someDebugServer\";\r\n#elif DEBUG\r\n var server = \"https://someLocalServer\";\r\n#endif\r\n```\r\nor we use both like this,\r\n```\r\n#if DEBUG || __APPCENTER__\r\n  HiddenMenu.IsVisible = true;\r\n#endif\r\n```\r\nSo that will handle it for our use case.\r\n\r\nIf we were to keep our 3 build types I'd probably go change our Forms csproj from\r\n\r\n```\r\n<PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|AnyCPU'\">\r\n    ...\r\n</PropertyGroup>\r\n<PropertyGroup Condition=\" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' \">\r\n    ...\r\n</PropertyGroup>\r\n<PropertyGroup Condition=\" '$(Configuration)|$(Platform)' == 'AppCenter|AnyCPU' \">\r\n    ...\r\n</PropertyGroup>\r\n```\r\nto\r\n```\r\n<PropertyGroup Condition=\"'$(Configuration)'=='Debug'\">\r\n    ...\r\n</PropertyGroup>\r\n<PropertyGroup Condition=\" '$(Configuration)' == 'Release' \">\r\n    ...\r\n</PropertyGroup>\r\n<PropertyGroup Condition=\" '$(Configuration)' == 'AppCenter' \">\r\n    ...\r\n</PropertyGroup>\r\n```\r\n\r\nEDIT: \r\nEither way, if this isn't a msbuild issue, and AnyCPU isn't meant to match iPhone/iPhoneSimulator then I am happy for this to be closed. Thanks for the responses though, they have given me some things to think about.",
        "createdAt": "2020-05-27T23:32:36Z",
        "updatedAt": "2020-05-27T23:33:41Z",
        "author": {
          "login": "beeradmoore"
        }
      },
      {
        "body": "I have confirmed that this workaround works great in AppCenter. Thanks @Redth ",
        "createdAt": "2020-05-29T04:24:58Z",
        "updatedAt": "2020-05-29T04:24:58Z",
        "author": {
          "login": "beeradmoore"
        }
      }
    ]
  }
}