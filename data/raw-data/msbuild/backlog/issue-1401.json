{
  "number": 1401,
  "title": "NewLine normalization on .NET Core",
  "body": "Related to #1340\r\n\r\nIn Full Framework, we do not normalize any line endings in a user's project file. To do this we had to use `XmlTextReader`. This behavior is legacy in all versions of MSBuild and should be preserved.\r\n\r\nIn .NET Core, `XmlTextReader` is not available and there does not seem to be a way to *not* normalize EOL characters. This means doing any project file manipulation via the .NET Core version of MSBuild will result in all `\\r\\n` characters normalized to `\\n` on Save.\r\n\r\nIn the absence of built-in functionality to do this (it was taken out in .NET Core) the only way I can think of is trying to determine the 'right' EOL character on Load and replacing on Save. This could be:\r\n1. If any `\\n` characters appear by itself, replace all NewLine characters with `\\n` (do nothing, this is all .NET Core supports).\r\n2. If all EOL characters are `\\r\\n` on the way in, `string.Replace()` on Save.\r\n\r\nThoughts? We could try to be fancier and count the number of `\\r\\n` and if they appear more often than `\\n` use that? And of course if we do this for .NET Core, should we do the same in Full Framework MSBuild? I think not to preserve behavior, and I don't think there's a good solution here unfortunately.",
  "state": "CLOSED",
  "createdAt": "2016-11-28T18:58:21Z",
  "updatedAt": "2024-02-21T17:23:55Z",
  "closedAt": "2018-06-22T19:38:27Z",
  "author": {
    "login": "AndyGerlicher"
  },
  "labels": [
    "bug",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "AndyGerlicher"
      }
    ]
  },
  "milestone": {
    "title": "MSBuild 15.8"
  },
  "comments": {
    "nodes": [
      {
        "body": "Andy already knows this, but just for the sake of anyone reading this -- `XmlTextReader` is returning in the next version of .NET Core. It's already in the CoreFX repo. This issue is because MSBuild isn't ready to take a dependency on that version yet.",
        "createdAt": "2016-11-28T20:44:20Z",
        "updatedAt": "2016-11-28T20:44:20Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "@AndyGerlicher can this issue be revisited?  We've had multiple related issues reported on CLI (dotnet/cli#8147 and dotnet/cli-migrate#37).",
        "createdAt": "2018-03-19T22:33:09Z",
        "updatedAt": "2018-03-26T19:14:02Z",
        "author": {
          "login": "peterhuene"
        }
      },
      {
        "body": "ping @AndyGerlicher @jeffkl @rainersigwald",
        "createdAt": "2018-03-26T19:13:28Z",
        "updatedAt": "2018-03-26T19:13:28Z",
        "author": {
          "login": "peterhuene"
        }
      },
      {
        "body": "@peterhuene Andy's out sick today, but I think it's reasonable to try to move back to XmlTextReader; we already have hard .NET Core 2.1 dependencies.",
        "createdAt": "2018-03-26T19:15:21Z",
        "updatedAt": "2018-03-26T19:15:21Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}