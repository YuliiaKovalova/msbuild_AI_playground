{
  "number": 3791,
  "title": "Globs in Remove incorrectly expanded without disk walk in evaluation phase",
  "body": "### Steps to reproduce\r\n\r\nProject file\r\n```xml\r\n<Project>\r\n  <ItemGroup>\r\n    <X Include=\"A1;A2;B\"/>\r\n    <X Remove=\"A*\"/>\r\n  </ItemGroup>\r\n\r\n  <Target Name=\"Build\">\r\n    <ItemGroup>\r\n      <Y Include=\"A1;A2;B\"/>\r\n      <Y Remove=\"A*\"/>\r\n    </ItemGroup>\r\n    \r\n    <Error Text=\"@(X)|@(Y)\"/>\r\n  </Target>\r\n</Project>\r\n```\r\n\r\n### Expected  behavior\r\n\r\nerror : B|B\r\n\r\n### Actual behavior\r\n\r\nerror : B|A1;A2;B\r\n\r\n### Environment data\r\n`msbuild /version` output:\r\n\r\n```\r\nMicrosoft (R) Build Engine version 15.9.14-preview+gae560092f5 for .NET Framework\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n15.9.14.22190\r\n```",
  "state": "OPEN",
  "createdAt": "2018-09-26T00:27:08Z",
  "updatedAt": "2024-02-21T16:32:51Z",
  "closedAt": null,
  "author": {
    "login": "tmat"
  },
  "labels": [
    "bug",
    "Area: Language",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Unfortunately, the problem is the opposite: globs in item patterns apply _only to files on disk_. They cannot be applied to arbitrary pattern. So it looks like the introduction of the lazy item evaluator (at evaluation time) is applying incorrectly to the pattern, rather than to discovered files on disk.\r\n\r\nI'm not sure we can fix that, people may be depending on it (especially since it's intuitive--see the expected behavior in this bug!).",
        "createdAt": "2018-09-26T15:59:42Z",
        "updatedAt": "2018-09-26T15:59:42Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I suggest that only glob patterns in `Include` and `Exclude` apply to file paths while a glob in `Remove` applies to what's currently in the item group.",
        "createdAt": "2018-09-26T16:54:14Z",
        "updatedAt": "2018-09-26T16:54:14Z",
        "author": {
          "login": "tmat"
        }
      },
      {
        "body": "That would be a breaking change for inside-target behavior that I'm not willing to make.",
        "createdAt": "2018-09-26T16:56:24Z",
        "updatedAt": "2018-09-26T16:56:24Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "How about adding a new attribute `RemoveMatching` that would apply globs to the items?",
        "createdAt": "2018-09-26T17:33:10Z",
        "updatedAt": "2018-09-26T17:33:10Z",
        "author": {
          "login": "tmat"
        }
      },
      {
        "body": "That's possible, but seems expensive (in terms of understandability as well as implementation) for the benefit. You can simulate it today with property functions using `string` methods:\r\n\r\n```xml\r\n<Y Remove=\"@(Y)\" Condition=\"$([System.String]::new('%(Y.Identity)').StartsWith('A'))\" />\r\n```",
        "createdAt": "2018-09-26T17:45:55Z",
        "updatedAt": "2018-09-26T17:45:55Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I find the workaround less understandable. \r\n\r\nWhat if I want a more complicated pattern, like \"x/*.cs\"? I guess I can call Regex.Match. That will make it even more cluttered.",
        "createdAt": "2018-09-26T19:55:27Z",
        "updatedAt": "2018-09-26T19:55:55Z",
        "author": {
          "login": "tmat"
        }
      },
      {
        "body": "The condition could be simplified. https://github.com/Microsoft/msbuild/issues/3799 would be one way to do it.",
        "createdAt": "2018-09-26T20:02:53Z",
        "updatedAt": "2018-09-26T20:02:53Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Another scenario: I want to create an item group that lists raw patterns. Something like `*.dll;*.exe`, but doesn't match the file system. Is there some way of escaping wildcards?",
        "createdAt": "2018-09-28T00:15:47Z",
        "updatedAt": "2018-09-28T00:16:09Z",
        "author": {
          "login": "tmat"
        }
      },
      {
        "body": "Yes, it's possible to escape the wildcard. Doc PR to clarify: MicrosoftDocs/visualstudio-docs#1591\r\n\r\nProgrammatically:\r\n\r\n```xml\r\n<I Include=\"$([MSBuild]::Escape('*.dll'))\"/>\r\n```\r\n\r\nManually:\r\n\r\n```xml\r\n<I Include=\"%2A.exe\"/> \r\n```\r\n\r\nNote that `Escape` will also escape the semicolon (since that's meaningful to MSBuild too), so you'll need to apply it around each pattern, rather than the whole string.\r\n\r\n```\r\ns:\\msbuild>type wildcard.proj\r\n<Project>\r\n <ItemGroup>\r\n    <I Include = \"$([MSBuild]::Escape('*.dll'))\"/>\r\n    <I Include = \"%2A.exe\"/>\r\n</ItemGroup>\r\n\r\n <Target Name=\"X\">\r\n  <Warning Text=\"I: %(I.Identity)\" />\r\n </Target>\r\n</Project>\r\n\r\ns:\\msbuild>msbuild wildcard.proj\r\nMicrosoft (R) Build Engine version 15.9.14-preview+gae560092f5 for .NET Framework\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\ns:\\msbuild\\wildcard.proj(8,3): warning : I: *.dll\r\ns:\\msbuild\\wildcard.proj(8,3): warning : I: *.exe\r\n\r\nBuild succeeded.\r\n```",
        "createdAt": "2018-09-28T14:38:10Z",
        "updatedAt": "2018-09-28T14:38:10Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}