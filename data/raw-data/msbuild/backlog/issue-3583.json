{
  "number": 3583,
  "title": "SGen on .NET Core should point to Microsoft.XmlSerializer.Generator package",
  "body": "In the early days of .NET Core there was no sgen, and we didn't port the sgen task.\r\n\r\nThere's a new .NET Core serializer generator: https://github.com/dotnet/corefx/issues/25138. Docs at  https://github.com/dotnet/core/blob/master/samples/xmlserializergenerator-instructions.md.\r\n\r\nWe should promote that when someone attempts to use the SGen task on .NET Core. Probably just emit an error pointing to an aka.ms link to those docs?\r\n\r\ncc @huanwu in case there's a better thing to do.",
  "state": "CLOSED",
  "createdAt": "2018-08-06T17:51:22Z",
  "updatedAt": "2024-02-21T17:12:02Z",
  "closedAt": "2020-04-03T16:00:52Z",
  "author": {
    "login": "rainersigwald"
  },
  "labels": [
    ".NET Core",
    "Area: Tasks",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "ladipro"
      },
      {
        "login": "donJoseLuis"
      }
    ]
  },
  "milestone": {
    "title": "MSBuild 16.6 Preview 3"
  },
  "comments": {
    "nodes": [
      {
        "body": "New docs at https://docs.microsoft.com/dotnet/core/additional-tools/xml-serializer-generator\r\n\r\nThe fix for this will probably look like microsoft/msbuild#3987, which did the same thing (nicer error for a task that doesn't exist on Core) for a different task.\r\n\r\n@donJoseLuis, this might be a good starter issue for you.",
        "createdAt": "2020-03-10T21:10:17Z",
        "updatedAt": "2020-03-10T21:10:17Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "To reproduce:\r\n\r\n1. Create a class library project\r\n1. Add the following to the project file...\r\n`  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|AnyCPU'\">`\r\n`    <GenerateSerializationAssemblies>On</GenerateSerializationAssemblies>`\r\n`  </PropertyGroup>`\r\n1. OR in VS set properties\\build\\Generate serialization assembly to **On**\r\n1. attempt to build\r\n\r\nOutcome:\r\n\r\nC:\\...\\3.1.101\\Microsoft.Common.CurrentVersion.targets(3544,5): error MSB4062: The \"Microsoft.Build.Tasks.SGen\" task could not be loaded from the assembly Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a.  Confirm that the <UsingTask> declaration is correct, that the assembly and all its dependencies are available, and that the task contains a public class that implements Microsoft.Build.Framework.ITask. [C:\\tmp\\tmp.csproj]\r\n    0 Warning(s)\r\n    1 Error(s)",
        "createdAt": "2020-03-23T09:01:16Z",
        "updatedAt": "2020-03-23T09:01:16Z",
        "author": {
          "login": "donJoseLuis"
        }
      },
      {
        "body": "I see SGen failing in these scenarios:\r\n\r\n1. The .NET Core version of MSBuild is unable to execute the SGen task:\r\n  a. When building a project targeting .NET Core.\r\n  b. When building a project targeting .NET Framework.\r\n2. The .NET Framework version of MSBuild is unable to execute the SGen task when building a project targeting .NET Core.\r\n\r\n@donJoseLuis, @rainersigwald , am I right in assuming that we want to point the developer to the new Microsoft.XmlSerializer.Generator in 2. and 1a. but not in 1b.? For 1b. we just tell them that this is not supported on the .NET Core version of MSBuild. In other words, we need to detect the platform both at our build time and at run time.",
        "createdAt": "2020-03-27T15:16:10Z",
        "updatedAt": "2020-03-27T15:16:10Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "> * The .NET Core version of MSBuild is unable to execute the SGen task:\r\n>   a. When building a project targeting .NET Core.\r\n>   b. When building a project targeting .NET Framework.\r\n\r\nCorrect--the task is currently just not built on Core at all.\r\n\r\n> 2\\. The .NET Framework version of MSBuild is unable to execute the SGen task when building a project targeting .NET Core.\r\n\r\nI think this actually works? But ideally yes we should emit the message there, too. I was envisioning that as out of scope for this work item, but if you wanted to be ambitious about it feel free :)",
        "createdAt": "2020-03-27T21:37:08Z",
        "updatedAt": "2020-03-27T21:37:08Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I'm afraid 2. is also failing, although it seems to be coming from SGen itself:\r\n\r\n```\r\nSGEN : error : An attempt was made to load an assembly with an incorrect format: C:\\Program Files\\dotnet\\packs\\Microsoft.NETCore.App.Ref\\3.1.0\\ref\\netcoreapp3.1\\Microsoft.VisualBasic.Core.dll. [C:\\src\\_test\\MyApp\\MyApp.csproj]\r\n```\r\n\r\nArguably, this error is even less user friendly than what you get on Core and my understanding is that this is a fairly common scenario as well since building a Core project in VS gets you here. Let's get ambitious :)",
        "createdAt": "2020-03-27T22:10:54Z",
        "updatedAt": "2020-03-27T22:10:54Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "I have opened a PR to implement an empty SGen task on Core. The other issue where SGen is failing when invoked by the Framework version of MSBuild when building a Core project is being discussed in https://github.com/dotnet/core/issues/2716.",
        "createdAt": "2020-03-31T14:30:31Z",
        "updatedAt": "2020-03-31T14:30:31Z",
        "author": {
          "login": "ladipro"
        }
      }
    ]
  }
}