{
  "number": 11260,
  "title": "Default Configuration property set up later than Directory.Build.props is used",
  "body": "### Issue Description\n\nDefault `Configuration` property is set up later than `Directory.Build.props` is used\n\n### Steps to Reproduce\n\nFor example this setup in  `Directory.Build.props` won't work using just `dotnet build` as `Configuration` is still empty string. Using `dotnet build -c Debug` everything works properly.\n\n```\n<Project>\n  <PropertyGroup>\n    <TargetFrameworks Condition=\" '$(Configuration)' != 'Debug' \">net48;net9.0</TargetFrameworks>\n    <TargetFrameworks Condition=\" '$(Configuration)' == 'Debug' \">net48</TargetFrameworks>\n  </PropertyGroup>\n</Project>\n```\n\n### Expected Behavior\n\n`Configuration` is set to default value (e.g. `Debug`) in `Directory.build.props` when not specified explicitly\n\n### Actual Behavior\n\n`Configuration` is an empty string in `Directory.build.props` when not specified explicitly\n\n### Analysis\n\n_No response_\n\n### Versions & Configurations\n\n_No response_",
  "state": "CLOSED",
  "createdAt": "2025-01-12T06:41:24Z",
  "updatedAt": "2025-01-14T15:28:53Z",
  "closedAt": "2025-01-14T15:28:52Z",
  "author": {
    "login": "starosta33"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [],
  "comments": {
    "nodes": [
      {
        "body": "This is somewhat documented in <https://learn.microsoft.com/en-us/visualstudio/msbuild/customize-by-directory?view=vs-2022#import-order>:\n\n> *Directory.Build.props* is imported early in *Microsoft.Common.props*, and properties defined later are unavailable to it. So, avoid referring to properties that aren't yet defined (and will evaluate to empty).\n\nAfter *Microsoft.Common.props* sets the default Configuration property, it imports $(CustomAfterMicrosoftCommonProps).  So you could perhaps make *Directory.Build.props* set the CustomAfterMicrosoftCommonProps property and point it to a file that then reads the Configuration property and sets TargetFrameworks.  But I'm not sure whether TargetFrameworks is already read before that.  Presumably not, because TargetFrameworks is designed to be set in project files.",
        "createdAt": "2025-01-12T07:34:19Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "I don't expect that MSBuild will be changed to set the default Configuration property already before *Directory.Build.props* is imported.  Such a change would have a high risk of breaking the build systems of existing projects.\n\nIIRC, there were plans for a BuildCheck that would warn if MSBuild changes the value of a property that has already been read.  I think that would warn about *Directory.Build.props* reading the Configuration property before *Microsoft.Common.props* sets it.  Perhaps that warning could then link to a documentation page that explains how to use CustomAfterMicrosoftCommonProps to delay the Configuration read.",
        "createdAt": "2025-01-12T09:39:50Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "As @KalleOlaviNiemitalo mentioned - this is by design behavior.\n\nAs for diagnosability: In this specific case the property is unset at the point of referencing it - so [BC0201 - Usage of undefined](https://github.com/dotnet/msbuild/blob/main/documentation/specs/BuildCheck/Codes.md#bc0201---usage-of-undefined-property) would catch this.\n\nI'm currently not aware of ticket for \"Property changed after it was referenced\" - it definitely would be doable, but currently wouldn't make it into limited scope we have for this topic.\n\n",
        "createdAt": "2025-01-14T15:28:52Z",
        "author": {
          "login": "JanKrivanek"
        }
      }
    ]
  }
}