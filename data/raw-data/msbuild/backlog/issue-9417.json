{
  "number": 9417,
  "title": "[Feature Request]: Better documentation and examples around BuildManager",
  "body": "### Summary\n\nGeneral MSBuild documentation are really good, but when it comes to `BuildManager` the documentation are almost non existent, the API documentation contains no examples or further explanation.\r\n\r\nThe only way to understand `BuildManager` are to go digging in MSBuild source code.\r\nWhat im specifically looking for:\r\n- Logging, I couldnt find any in-memory public loggers, so had to implement my own. Only options was primarily Console or file loggers, but very little info of how to do this.\r\n- When to use `BuildRequestData` or `GraphBuildRequestData`\r\n- Better explanation about caching, ie. why use `BuildManager.DefaultBuildManager` reading [this ](https://github.com/dotnet/msbuild/blob/main/documentation/specs/single-project-isolated-builds.md)seem to suggest shared cache\r\n- When to use `InputResultsCacheFiles`/`OutputResultsCacheFile`, its not intuitive. In the beginning I thought it was cache of Target Inputs/Outputs caching, but it dosnt seem thats the case.\r\n\r\nGeneral best practices, and usage examples would be really beneficial in this area.\n\n### Background and Motivation\n\nUsing more time than needed looking at MSBuild source code to know what to do\n\n### Proposed Feature\n\nAdd more documentation :)\n\n### Alternative Designs\n\n_No response_",
  "state": "OPEN",
  "createdAt": "2023-11-11T21:27:38Z",
  "updatedAt": "2025-01-23T13:28:42Z",
  "closedAt": null,
  "author": {
    "login": "hknielsen"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "Feature Request",
    "Area: Documentation",
    "Area: API",
    "Priority:3",
    "triaged"
  ],
  "comments": {
    "nodes": [
      {
        "body": "A reasonable request! Quick answers:\r\n\r\n> * Logging, I couldnt find any in-memory public loggers, so had to implement my own. Only options was primarily Console or file loggers, but very little info of how to do this.\r\n\r\nFile/console/binlog are what we offer builtin; writing your own in-memory logger makes sense to me.\r\n\r\n> * When to use `BuildRequestData` or `GraphBuildRequestData`\r\n\r\nUse `BuildRequestData` unless you are explicitly trying to launch a graph build, which you probably aren't.\r\n\r\n> * Better explanation about caching, ie. why use `BuildManager.DefaultBuildManager` reading [this ](https://github.com/dotnet/msbuild/blob/main/documentation/specs/single-project-isolated-builds.md)seem to suggest shared cache\r\n\r\nGenerally, you can use `DefaultBuildManager` for a small application where you don't want to think about things, but if you're writing a full-featured build host create your own `BuildManager` and use it consistently.\r\n\r\n> * When to use `InputResultsCacheFiles`/`OutputResultsCacheFile`, its not intuitive. In the beginning I thought it was cache of Target Inputs/Outputs caching, but it dosnt seem thats the case.\r\n\r\nThis is an advanced feature you probably don't want to use; see https://github.com/dotnet/msbuild/blob/3b59113aa9333f52efc4ab6bf96d713d05d604d1/documentation/specs/static-graph.md#single-project-isolated-builds. It's useful for a higher-level build engine that treats \"MSBuild project execution\" as a single unit.",
        "createdAt": "2023-11-13T15:29:09Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "So a bit of context, I am writing a long living build host that we will ipc from Unity for invoking builds from for our work towards MSBuild.\r\nWhat I want to achieve is to keep as much as possible cached in memory, and if possible on disk, for maximising iteration time using incremental builds.\r\nFor that we will by default enforce static graph and isolated builds when we execute the build/restore through the BuildManager.\r\nReading the inputs/output cache files, its exactly what we want. While briefly looking into them, I didnt find any tests using these files, are they used anywhere today?",
        "createdAt": "2023-11-13T19:18:19Z",
        "author": {
          "login": "hknielsen"
        }
      },
      {
        "body": "@rainersigwald a bit more questions about BuildManager and ProjectCollection and documentation.\r\n\r\nWe have 1 BuildManager thats shared for all our compilations, but separate ProjectCollections for each \"Project\" graph.\r\nAs far as I can read from the `ProjectCollection` comments is that this is allowed, the only restriction is that you are not allowed to run Build concurrently on two different `ProjectCollection`'s, is this true? Or is it more \"safe\" to also keep a shared `ProjectCollections`.\r\nWe are using the `ProjectCollections` to Evaluate Projects as well, to get Items, and properties for projects, do we need to also lock these calls, or are they thread safe?\r\n\r\nWe are running into exceptions happening in the `ProjectCollection.LoadProject`, but that seem to be because of Project Reevaluation, and the LoggerService are null, ill report a seperate bug on that",
        "createdAt": "2024-07-02T07:52:42Z",
        "author": {
          "login": "hknielsen"
        }
      },
      {
        "body": "@rainersigwald additional questions that would be nice to get added to the documentation.\n\nProjectPluginCache: \n- Its owned and created by the BuildManager, there can be multiple and there's no order guarantee AFAICT.\n- DesignTime are bypassing the ProjectPluginCache, for reasons? \n    - Is it because its expected it would be bad to use the DesignTime build to populate the cache?\n\nEvaluation:\n- Are that only happening on the root node? Ie. if using InProc, all evaluation would happen with the build manager.\n    - I was looking into how the ExecutionContext is working with Nodes and how Shared state are shared across nodes, fx. when not using `SharingPolicy.Isolated`",
        "createdAt": "2025-01-23T13:28:40Z",
        "author": {
          "login": "hknielsen"
        }
      }
    ]
  }
}