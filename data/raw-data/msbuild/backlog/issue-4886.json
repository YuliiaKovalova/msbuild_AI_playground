{
  "number": 4886,
  "title": "BuildTools: <PackageReference> ignored in older-style projects (worked previously)",
  "body": "### Steps to reproduce\r\n\r\n1. Use a csproj from an older version of VS, generated to be a Windows Service, or WinForms/WPF project. Should begin with `<Project ToolsVersion=\"12.0\" ` as the root element.\r\n2. Add a nuget dependency via `<PackageReference />` and use at least one of the types within.\r\n3. Create a second SDK-style csproj (`<Project Sdk=\"Microsoft.NET.Sdk\">`) and reference it from the older project inside the same SLN.\r\n4. On a machine with Visual Studio Build Tools 2019 v16.3.7 (and no VS) restore Nuget packages for the solution, then build the solution via MSBuild.\r\n\r\n### Expected  behavior\r\nUnder Build Tools 2017, both projects would compile successfully. On a system with VS2019 installed, the same behaviour is observed.\r\n\r\n### Actual behavior\r\nThe SDK-project reference is picked up, but the build appears to completely ignore the `<PackageReference/>` from the older project style; the C# compiler returns CS0246 for all types defined in the Nuget reference.\r\n\r\nDigging into this with the MSBuild Structured Log Viewer, under the 2017 Build Tools the target ResolveNuGetPackageAssets executes as part of ResolveAssemblyReferences and picks up the needed assemblies from the .nuget cache. With the 2019 build tools, ResolveNuGetPackageAssets does not appear at all under ResolveAssemblyReferences for affected projects (not even to say it was skipped).\r\n\r\n### Environment data\r\n`msbuild /version` output:\r\n\r\nMicrosoft (R) Build Engine version 16.3.2+e481bbf88 for .NET Framework\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n16.3.2.50909\r\n\r\n- Environment previously had Visual Studio Build Tools 2017, since uninstalled.\r\n\r\nOS info:\r\n- Windows Server 2016, 10.0.1493\r\n\r\nIf applicable, version of the tool that invokes MSBuild (Visual Studio, dotnet CLI, etc):\r\n- Onprem VSTS agent, via MSBuild task v1.151.1",
  "state": "CLOSED",
  "createdAt": "2019-11-05T10:15:31Z",
  "updatedAt": "2024-02-21T17:06:14Z",
  "closedAt": "2019-11-07T16:16:00Z",
  "author": {
    "login": "ghost"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Discussion"
  },
  "comments": {
    "nodes": [
      {
        "body": "I don't believe referencing a sdk style project from a non-sdk style project is supported.\r\n\r\nDoes this issue only manifests when you have the P2P reference? Or just using the packagereference on the \"old\" project repros this as well?",
        "createdAt": "2019-11-05T18:55:47Z",
        "updatedAt": "2019-11-05T18:55:47Z",
        "author": {
          "login": "livarcocc"
        }
      },
      {
        "body": "Had to dig a bit here; our solution is 120+ csproj (old and new) and vcxproj (native and C++/CLI). Can confirm this manifests with a non-SDK project that `<PackageReference>` includes just EntityFramework and Microsoft.CodeAnalysis.FxCopAnalyzers -- no other projects in the solution referenced.\r\n\r\nBuilding all this with the 2017 build tools worked just fine, though there were some occasional issues around NuGet dependencies-of-dependencies not always flowing through to non-sdk projects from SDK projects via `<ProjectReference/>`.\r\n\r\nSome further log diving turned up this message in each of the now-impacted projects, which doesn't appear in the 2017 log (edit: it also doesn't appear when using the same MSBuild command line arguments as the onprem agent on a machine with VS2019 installed):\r\n\r\n> The target \"ResolveNuGetPackageAssets\" listed in an AfterTargets attribute at \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\BuildTools\\MSBuild\\Microsoft\\Microsoft.NET.Build.Extensions\\Microsoft.NET.Build.Extensions.ConflictResolution.targets (27,11)\" does not exist in the project, and will be ignored.",
        "createdAt": "2019-11-06T02:45:40Z",
        "updatedAt": "2019-11-06T08:25:53Z",
        "author": {
          "login": "ghost"
        }
      },
      {
        "body": "@dsplaisted any ideas?",
        "createdAt": "2019-11-07T01:45:08Z",
        "updatedAt": "2019-11-07T01:45:08Z",
        "author": {
          "login": "livarcocc"
        }
      },
      {
        "body": "Sorry about this one. I think I know what was happening here; we got bitten by a legacy implementation of ours.\r\n\r\nMicrosoft.NuGet.ImportAfter.targets was getting picked up and referencing Microsoft.NuGet.targets, which conditionally defines the ResolveNuGetPackageAssets target for non-SDK projects that use `<PackageReference/>`. However, it does so using `<NuGetTargets Condition=\"'$(NuGetTargets)'==''\">$(MSBuildExtensionsPath)\\Microsoft\\NuGet\\$(VisualStudioVersion)\\Microsoft.NuGet.targets</NuGetTargets>`; our solution dates back to a fully-onprem TFS instance from around 2012 that used the older-style build controllers. Part of getting it to compile back then required us to force the VisualStudioVersion property when invoking MSBuild -- a property setting that hadn't been updated for 2019 -- which was forcing it down directory /15.0/ (which doesn't exist on the build agent host) rather than /16.0/. Curiously, so far as I could see in the logs this didn't generate an error message until compile time later on.\r\n\r\nDeleting the `/p:VisualStudioVersion=15.0` from the invocation appears to have fixed this.",
        "createdAt": "2019-11-07T04:15:17Z",
        "updatedAt": "2019-11-07T04:16:40Z",
        "author": {
          "login": "ghost"
        }
      },
      {
        "body": "Happy to hear you figured this out!",
        "createdAt": "2019-11-07T16:16:00Z",
        "updatedAt": "2019-11-07T16:16:00Z",
        "author": {
          "login": "dsplaisted"
        }
      }
    ]
  }
}