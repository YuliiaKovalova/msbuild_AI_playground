{
  "number": 4194,
  "title": "Exec tasks warns: bash : warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8)",
  "body": "### Steps to reproduce\r\n\r\nCreate an MSBuild project, that calls the `Exec` task to any bash script and run it in an environment where LC_ALL is not configured i.e a fresh ubuntu:16.04 docker container.\r\n\r\n```\r\ndocker run -ti --rm ubuntu:16.04\r\napt-get update\r\napt-get install libicu-dev\r\n```\r\n\r\ndotnet SDK will need to be installed.\r\n\r\nProject file\r\n```xml\r\n<Project>\r\n  <Target Name=\"RunExec\">\r\n    <Exec Command=\"./helloworld.sh\" />\r\n  </Target>\r\n</Project>\r\n```\r\n\r\nhelloworld.sh contents:\r\n```bash\r\n#!/usr/bin/env bash\r\necho 'Hello World'\r\n```\r\n\r\nDirectory contents:\r\n```\r\n/\r\n- project.csproj\r\n- helloworld.sh\r\n```\r\n\r\nCommand line\r\n```\r\ndotnet msbuild /t:RunExec\r\n```\r\n### Expected  behavior\r\n```\r\nHello World\r\n```\r\n\r\n### Actual behavior\r\n```\r\nbash : warning : setlocale: LC_ALL: cannot change locale (en_US.UTF-8) [/home/project.csproj]\r\n  Hello World\r\n```\r\n\r\n### Environment data\r\n`msbuild /version` output: 15.9.20.62856\r\n`dotnet SDK version`: 2.2.103\r\n\r\nOS info: `Ubuntu 16.04 docker container.`\r\n\r\nIf applicable, version of the tool that invokes MSBuild (Visual Studio, dotnet CLI, etc): `dotnet CLI`\r\n\r\nI noticed that LC_ALL is set when calling the `Exec` task in Unix:\r\nhttps://github.com/Microsoft/msbuild/blob/f136edbfecec171d73cb4c7fe1c936f6b2bf60a5/src/Tasks/Exec.cs#L597\r\n\r\ncc: @ericstj @cdmihai @rainersigwald ",
  "state": "CLOSED",
  "createdAt": "2019-02-21T19:32:43Z",
  "updatedAt": "2024-02-21T17:09:07Z",
  "closedAt": "2023-12-11T15:46:54Z",
  "author": {
    "login": "safern"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": ".NET 8.0"
  },
  "comments": {
    "nodes": [
      {
        "body": "Confirmed that this can be fixed by doing the following:\r\n\r\n```\r\n> apt install locales locales-all\r\n```",
        "createdAt": "2020-04-01T16:36:48Z",
        "updatedAt": "2020-04-01T16:36:48Z",
        "author": {
          "login": "jaredpar"
        }
      },
      {
        "body": "I think we could potentially have avoided this by specifying `C.UTF-8` instead of `en_US.UTF-8`, because [`man 3 setlocale`](http://man7.org/linux/man-pages/man3/setlocale.3.html) says\r\n\r\n> The locale \"C\" or \"POSIX\" is a portable locale; it exists on all conforming systems.\r\n\r\nI don't have enough understanding to figure what that would change or break, though. Any UNIX loc experts who can say it's a good or bad idea floating by?",
        "createdAt": "2020-04-03T12:06:59Z",
        "updatedAt": "2020-04-03T12:06:59Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@wfurt might have an idea.",
        "createdAt": "2020-04-03T17:39:46Z",
        "updatedAt": "2020-04-03T17:39:53Z",
        "author": {
          "login": "safern"
        }
      },
      {
        "body": "Also @janvorli ",
        "createdAt": "2020-04-03T17:40:20Z",
        "updatedAt": "2020-04-03T17:40:20Z",
        "author": {
          "login": "safern"
        }
      },
      {
        "body": "The answer may depend on what version of .NET core you use. 2.x will refuse to do case insensitive string companions even if explicitly asked. For 3+, this should just work. Rest of the OS should really not care. The locale and lang primarily impacts error message and date/time formats.  \r\n\r\nLong run, I thing 'C' would be preferable as language and country agnostic and available also on Alpine. ",
        "createdAt": "2020-04-03T18:03:41Z",
        "updatedAt": "2020-04-03T18:03:41Z",
        "author": {
          "login": "wfurt"
        }
      },
      {
        "body": "I understand this is potentially a breaking change but given we're in the .NET 5 release this would be the right time to issue one. Essentially do breaks on major releases vs. point ones. \r\n\r\nI also don't understand what the real impact of such a change would be though hence it's easy for me to say \"just change it\" :smile:",
        "createdAt": "2020-04-03T18:57:31Z",
        "updatedAt": "2020-04-03T18:57:31Z",
        "author": {
          "login": "jaredpar"
        }
      },
      {
        "body": "Any idea why msbuild forces the locale? It seems weird, I would expect it to just keep the existing locale set by the system.",
        "createdAt": "2020-04-03T19:48:41Z",
        "updatedAt": "2020-04-03T19:48:41Z",
        "author": {
          "login": "janvorli"
        }
      },
      {
        "body": "Setting the locale was required on Windows, in order to support non-system-codepage-representable paths. I suspect we carried that over even though it may not be strictly necessary?\r\n\r\n@cdmihai any chance you remember details on the context of 3042e7cc9e86a51e64cf7bcb5f14c4a7ed2629c5 from 5 years ago? It was a fix for #251, but my read of that is it was more about the encoding for writing the file. That _should_ match the runtime environment, but on non-Windows OSes, generally \"not specified\" and \"UTF-8\" are the same (right?).",
        "createdAt": "2020-04-07T12:29:02Z",
        "updatedAt": "2020-04-07T12:29:02Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I recently got an error from a docker trying to build a package, because PackageVersion was detected like this\r\n\r\n```text\r\nPackageVersion=1.10.0-dev-20220324-1029-/bin/bash: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8);0d9030e7\r\n```\r\n\r\nwhich is invalid. So this is not just a warning.",
        "createdAt": "2022-03-24T23:19:46Z",
        "updatedAt": "2022-03-24T23:19:46Z",
        "author": {
          "login": "dashesy"
        }
      },
      {
        "body": "Is this something that can be targeted to fix for .NET 8? This is problematic in .NET containers because they are locale-neutral. So in that environment, this scenario produces a warning or even an error if warnings are treated as errors.",
        "createdAt": "2022-11-15T15:45:46Z",
        "updatedAt": "2022-11-15T15:49:06Z",
        "author": {
          "login": "mthalman"
        }
      },
      {
        "body": "> I think we could potentially have avoided this by specifying C.UTF-8 instead of en_US.UTF-8, because [man 3 setlocale](http://man7.org/linux/man-pages/man3/setlocale.3.html) says\r\n\r\nThis is a good option. It will get rid of the warnings and still set the encoding to UTF-8.",
        "createdAt": "2023-11-02T21:17:29Z",
        "updatedAt": "2023-11-02T21:17:29Z",
        "author": {
          "login": "tmds"
        }
      },
      {
        "body": "IIRC, POSIX requires support for \"C\" but not for \"C.UTF-8\".\r\nBut maybe \"C.UTF-8\" is regardless supported in those operating systems that MSBuild targets.",
        "createdAt": "2023-11-03T07:21:36Z",
        "updatedAt": "2023-11-03T07:21:36Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "> IIRC, POSIX requires support for \"C\" but not for \"C.UTF-8\".\r\nBut maybe \"C.UTF-8\" is regardless supported in those operating systems that MSBuild targets.\r\n\r\nI think we can assume UTF-8 is available.\r\n\r\n> Setting the locale was required on Windows, in order to support non-system-codepage-representable paths. I suspect we carried that over even though it may not be strictly necessary?\r\n\r\nAlso, I assume the answer to this is: yes.\r\n\r\nBut since it was set previously, it seems best to continue setting this to an \"english\" locale to avoid breaking anyone that parses the output of the tool.\r\n\r\nThe options are: set it to `C.UTF-8`/`C`/``/not override it. I think all are worth considering. I went for the first as I think it's the smallest change that fixes this issue and I don't expect it to cause new issues. I'm fine with any of the other options if someone has a stronger preference for it.",
        "createdAt": "2023-11-03T07:42:34Z",
        "updatedAt": "2023-11-03T07:42:34Z",
        "author": {
          "login": "tmds"
        }
      },
      {
        "body": "The UTF-8 encoding being available does not mean that a \"C.UTF-8\" locale is available.",
        "createdAt": "2023-11-03T09:30:29Z",
        "updatedAt": "2023-11-03T09:30:29Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "> The UTF-8 encoding being available does not mean that a \"C.UTF-8\" locale is available.\r\n\r\nRight.\r\n\r\nI expect it to be uncommon for a system to support `C` but not allow `C.UTF-8`.\r\n\r\nDo you think we should use `C` instead of `C.UTF-8`?",
        "createdAt": "2023-11-03T10:02:02Z",
        "updatedAt": "2023-11-03T10:02:02Z",
        "author": {
          "login": "tmds"
        }
      },
      {
        "body": "I know Debian supports `C.UTF-8`.  But I don't know about macOS and FreeBSD.  If those too support it then OK.",
        "createdAt": "2023-11-03T10:09:19Z",
        "updatedAt": "2023-11-03T10:09:19Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "Those should work file as they accepted `en_US.UTF-8`, they should accept `C.UTF-8` too.",
        "createdAt": "2023-11-03T12:55:25Z",
        "updatedAt": "2023-11-03T12:55:25Z",
        "author": {
          "login": "tmds"
        }
      },
      {
        "body": "IIRC, older versions of Debian supported `en_US.UTF-8` (if enabled when the \"locales\" package was installed) but not `C.UTF-8`, which is a more recent invention.  I would not assume that support for `en_US.UTF-8` in other operating systems implies support for `C.UTF-8` as well.\r\n\r\nAccording to [unicode - How widespread is the C.UTF-8 locale? - Unix & Linux Stack Exchange](https://unix.stackexchange.com/questions/597962/how-widespread-is-the-c-utf-8-locale), macOS Big Sur does not support.",
        "createdAt": "2023-11-03T14:01:05Z",
        "updatedAt": "2023-11-03T14:01:05Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "macOS 14 Sonoma does not recognize `C.UTF-8`; the output of `locale -a` does not include it, and running `LANG=C.UTF-8 perl -e ''` shows an error about the locale.  macOS Sonoma supports `en_US.UTF-8`.",
        "createdAt": "2023-11-03T14:10:14Z",
        "updatedAt": "2023-11-03T14:11:40Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "ok, based on that, we better use `C` or not set it.\r\nI'll update the PR to use `C` without the UTF-8 encoding.",
        "createdAt": "2023-11-03T14:35:59Z",
        "updatedAt": "2023-11-03T14:35:59Z",
        "author": {
          "login": "tmds"
        }
      },
      {
        "body": "@KalleOlaviNiemitalo does macOS print an error like bash does when setting an unsupported locale?\r\n```\r\n$ /bin/sh -c 'export LC_ALL=foo'\r\n/bin/sh: line 1: warning: setlocale: LC_ALL: cannot change locale (foo): No such file or directory\r\n/bin/sh: line 1: warning: setlocale: LC_ALL: cannot change locale (foo): No such file or directory\r\n```",
        "createdAt": "2023-11-03T14:51:32Z",
        "updatedAt": "2023-11-03T14:51:32Z",
        "author": {
          "login": "tmds"
        }
      },
      {
        "body": "If possible, it would be best to leave LANG and LC_ALL unchanged, so that if the tool outputs any messages, then they can be in the developer's preferred language.\r\n\r\nThe code that sets those environment variables came from <https://github.com/dotnet/msbuild/pull/288> to fix <https://github.com/dotnet/msbuild/issues/251>.\r\nIt's not clear to me what originally went wrong with \"paths with non-ASCII characters in them\".\r\nIt looks like .NET Runtime on POSIX always encodes file names as UTF-8, based on StringMarshalling.Utf8 in Interop.Sys.Open.  Is the intention that, if the tool outputs an error message that includes a file name, then the file name (which the tool presumably treats as a byte string without a specific encoding) and the rest of the message should all be in the same encoding, so that MSBuild can decode the entire output to a string?  And because the file name is UTF-8, you want the rest to be UTF-8 as well.  If that is the purpose, then perhaps MSBuild could first check whether the environment variables already specify UTF-8 according to the C runtime library, and change them only if they don't.",
        "createdAt": "2023-11-03T14:57:38Z",
        "updatedAt": "2023-11-03T14:57:38Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "> @KalleOlaviNiemitalo does macOS print an error like bash does when setting an unsupported locale?\r\n\r\nOn macOS 14 Sonoma, `/bin/sh -c 'export LC_ALL=foo'` does not output anything.\r\n`/bin/bash -c 'export LC_ALL=foo'` and `/bin/zsh -c 'export LC_ALL=foo'` don't output anything, either.\r\n`/bin/sh` is GNU bash 3.2.57(1)-release, copyright 2007.  Perhaps that is too old to care about locales.  IIRC, Apple has not distributed GPLv3-licensed versions.\r\n`/bin/zsh` is zsh 5.9.  This is the default shell for interactive use.",
        "createdAt": "2023-11-03T15:07:45Z",
        "updatedAt": "2023-11-03T15:07:45Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "> If possible, it would be best to leave LANG and LC_ALL unchanged, so that if the tool outputs any messages, then they can be in the developer's preferred language.\r\n\r\nThis is also an option. It will cause messages to change from English to the system locale. If someone is parsing the output, it may cause the parsing to break.\r\n\r\nI used the `C` locale to avoid that, but I think this is an acceptable option also.\r\n\r\n>  then perhaps MSBuild could first check whether the environment variables already specify UTF-8 according to the C runtime library, and change them only if they don't.\r\n\r\nFrom our discussion, we don't have a good way to pick a locale that implies UTF-8.\r\nI don't think we should try to enforce UTF-8.\r\n\r\nWe have these options left: either use `C` (to keep English), or leave it unchanged (to use the system locale).\r\n\r\nhttps://github.com/dotnet/msbuild/pull/9391 is currently doing the first, but I can change it to the latter if that is the preferred option.",
        "createdAt": "2023-11-03T15:34:49Z",
        "updatedAt": "2023-11-03T15:35:58Z",
        "author": {
          "login": "tmds"
        }
      },
      {
        "body": "> whether the environment variables already specify UTF-8 according to the C runtime library\r\n\r\nBy this, I mean something like\r\n\r\n```C\r\n// Create a locale_t object based on the current environment variables,\r\n// so we can examine it without changing the global locale of the C runtime.\r\n// nl_langinfo CODESET cares about LC_CTYPE; specify the corresponding mask.\r\nlocale_t loc = newlocale(LC_CTYPE_MASK, \"\", (locale_t) 0);\r\nif (loc) {\r\n    // Get the name of the codeset used by the locale.  (Do not free this string.)\r\n    const char *codeset = nl_langinfo_l(CODESET, loc);\r\n\r\n    // Check whether the codeset is UTF-8.\r\n    int is_utf8 = !strcmp(codeset, \"UTF-8\");\r\n\r\n    // Free the locale_t object to avoid memory leak.\r\n    freelocale(loc);\r\n}\r\n```\r\n",
        "createdAt": "2023-11-03T15:37:39Z",
        "updatedAt": "2023-11-03T15:37:39Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "I was referring to the _and change them only if they don't._ part.",
        "createdAt": "2023-11-03T15:41:09Z",
        "updatedAt": "2023-11-03T15:41:09Z",
        "author": {
          "login": "tmds"
        }
      },
      {
        "body": "The language of messages from tools already varies on Windows.\r\nIf an MSBuild project, or a tool that runs MSBuild, depends on a specific language on POSIX, then it should set the environment variables itself.",
        "createdAt": "2023-11-03T15:42:08Z",
        "updatedAt": "2023-11-03T15:42:08Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "Yes, they will need to set it if they depend on it. While with the current behavior it was always enforced.\r\nSo to the users that depend on it, this is a breaking change.",
        "createdAt": "2023-11-03T15:46:44Z",
        "updatedAt": "2023-11-03T15:46:44Z",
        "author": {
          "login": "tmds"
        }
      },
      {
        "body": "As I said, I find it an acceptable option to not set these envvars. I just want to point out will cause the output to change based on the system locale.\r\n\r\nOn Windows, I believe the output is always using the system locale? So probably, this wont cause much breaking.",
        "createdAt": "2023-11-03T16:16:21Z",
        "updatedAt": "2023-11-03T16:16:21Z",
        "author": {
          "login": "tmds"
        }
      },
      {
        "body": "macOS seems to have `C` e.g. without utf8.  The problem with `C` is that older versions for .NET could not do case insensitive comparisons (AFAIK). And that broke many things. \r\n\r\nhttps://github.com/dotnet/runtime/issues/27376",
        "createdAt": "2023-11-03T16:29:37Z",
        "updatedAt": "2023-11-03T16:29:37Z",
        "author": {
          "login": "wfurt"
        }
      },
      {
        "body": ">  The problem with C is that older versions for .NET could not do case insensitive comparisons (AFAIK). And that broke many things.\r\n\r\nWas this problem WSL specific, or addressed in a later version of .NET?\r\n\r\nI can't reproduce this with .NET 6, .NET 7, or .NET 8 on Fedora.",
        "createdAt": "2023-11-03T16:45:56Z",
        "updatedAt": "2023-11-03T16:45:56Z",
        "author": {
          "login": "tmds"
        }
      },
      {
        "body": "I don't think it was WSL specific. @tarekgh is probably best person to comment on this. ",
        "createdAt": "2023-11-03T16:48:27Z",
        "updatedAt": "2023-11-03T16:48:27Z",
        "author": {
          "login": "wfurt"
        }
      },
      {
        "body": "When using `C` locale, .NET will ignore it and use Invariant culture at that time. This is a change we made long ago. The reason for the change as indicated before is that `C` locale is unusable and doesn't support casing and has limited collation capabilities. ",
        "createdAt": "2023-11-03T17:08:15Z",
        "updatedAt": "2023-11-03T17:08:15Z",
        "author": {
          "login": "tarekgh"
        }
      },
      {
        "body": "> I find it an acceptable option to not set these envvars.\n\nHas that option been tested recently?  I mean, originally MSBuild did not set them, but the ExecTaskUnicodeCharacterInCommand test failed.  Perhaps something else has changed in the meantime and the test would not fail now.",
        "createdAt": "2023-11-04T07:24:11Z",
        "updatedAt": "2023-11-04T07:24:11Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "I've pushed it to https://github.com/dotnet/msbuild/pull/9391. Let's see what CI makes of it.",
        "createdAt": "2023-11-04T07:47:54Z",
        "updatedAt": "2023-11-04T07:47:54Z",
        "author": {
          "login": "tmds"
        }
      },
      {
        "body": "> Our main is currently flowing into 8.0.200 builds as well as 9.0.100 builds so I think we should be cautious and revert for now. Sorry for the confusion!\r\n\r\nNo problem.\r\n\r\nThe PR that got merged and reverted was:\r\n\r\n```diff\r\ndiff --git a/src/Tasks/Exec.cs b/src/Tasks/Exec.cs\r\nindex df817422bfd..95f43a488bb 100644\r\n--- a/src/Tasks/Exec.cs\r\n+++ b/src/Tasks/Exec.cs\r\n@@ -590,7 +590,7 @@ protected internal override void AddCommandLineCommands(CommandLineBuilderExtens\r\n             {\r\n                 commandLine.AppendSwitch(\"-c\");\r\n                 commandLine.AppendTextUnquoted(\" \\\"\");\r\n-                commandLine.AppendTextUnquoted(\"export LANG=en_US.UTF-8; export LC_ALL=en_US.UTF-8; . \");\r\n+                commandLine.AppendTextUnquoted(\". \");\r\n                 commandLine.AppendFileNameIfNotNull(batchFileForCommandLine);\r\n                 commandLine.AppendTextUnquoted(\"\\\"\");\r\n             }\r\n```\r\n\r\nThis is a good option because:\r\n\r\n- We're no longer setting something that may be unsupported (fixes this issue).\r\n- .NET assumes Unix platforms to have UTF-8 as the default encoding, so we can do the same rather than try to enforce it.\r\n- We're now using the system locale on Unix for the tool process. This is the same as how it behaves on Windows.\r\n- While most tools should work fine under any locale, a user may set the envvars to control the locale in the unlikely event there is a tool that doesn't.\r\n\r\nWe can create a new PR for this when the `main` branch becomes 9.0 only.\r\n\r\n@rainersigwald @mthalman would you consider backporting this (could be 8.0.2xx+) to address the issues this causes in container images? We have some customers running into this problem (with Red Hat images).",
        "createdAt": "2023-11-09T12:32:09Z",
        "updatedAt": "2023-11-09T12:32:09Z",
        "author": {
          "login": "tmds"
        }
      },
      {
        "body": "I think I agree that that's a good option, and I'm willing to take it for 8.0.200 personally, though to be extra cautious I might want to put it under a changewave (so it can be easily disabled if it does cause problems for someone). The revert IMO is about making sure we have the right conversation and an explicit decision.",
        "createdAt": "2023-11-09T15:55:52Z",
        "updatedAt": "2023-11-09T15:55:52Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Note that our container images are always based on the latest feature band. So once we have 8.0.200 GA, that's what will be used in the SDK container image. There would be no supported images with 8.0.1xx at that point.\r\n\r\nSo yes, having an escape hatch to get back to the previous behavior would be a good thing.",
        "createdAt": "2023-11-09T16:36:56Z",
        "updatedAt": "2023-11-09T16:36:56Z",
        "author": {
          "login": "mthalman"
        }
      },
      {
        "body": "> I might want to put it under a changewave (so it can be easily disabled if it does cause problems for someone)\r\n\r\nCould you help me understand what a changewave is? Asking me to RTFM (with a link to the fine manual) would be great :)\r\n\r\nEdit: Nevermind, Tom pointed me to https://learn.microsoft.com/en-us/visualstudio/msbuild/change-waves?view=vs-2022",
        "createdAt": "2023-11-14T15:23:20Z",
        "updatedAt": "2023-11-14T15:29:05Z",
        "author": {
          "login": "omajid"
        }
      },
      {
        "body": "> I'm willing to take it for 8.0.200 personally, though to be extra cautious I might want to put it under a changewave\r\n\r\nI intend to work on this next week.",
        "createdAt": "2023-11-16T10:01:16Z",
        "updatedAt": "2023-11-16T10:01:16Z",
        "author": {
          "login": "tmds"
        }
      },
      {
        "body": "> Note that our container images are always based on the latest feature band. So once we have 8.0.200 GA, that's what will be used in the SDK container image.\r\n\r\nI recall reading that _source-build_ is always based on the _earliest_ feature band; but apparently that is no longer true for .NET 8.0, which uses the <https://github.com/dotnet/dotnet> repository.  So operating system packagers would also get 8.0.200 eventually.",
        "createdAt": "2023-11-23T08:34:17Z",
        "updatedAt": "2023-11-23T08:34:17Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "> I recall reading that source-build is always based on the earliest feature band; but apparently that is no longer true for .NET 8.0, which uses the https://github.com/dotnet/dotnet repository. So operating system packagers would also get 8.0.200 eventually.\r\n\r\nYes, the design doc is here: https://github.com/dotnet/source-build/blob/main/Documentation/planning/multi-sdk-band-support.md.\r\n\r\nMaintainers can choose to only build the 1xx band. That's our current plan for RHEL/Fedora.\r\nWe'll be backporting this fix (in some form) in our 1xx packages.",
        "createdAt": "2023-11-23T09:31:52Z",
        "updatedAt": "2023-11-23T09:31:52Z",
        "author": {
          "login": "tmds"
        }
      },
      {
        "body": "Supporting multiple SDK bands is the goal for .NET 9. But that won't apply to .NET 8 which will still only support 8.0.1xx for source build.",
        "createdAt": "2023-11-27T14:35:25Z",
        "updatedAt": "2023-11-27T14:35:25Z",
        "author": {
          "login": "mthalman"
        }
      }
    ]
  }
}