{
  "number": 8129,
  "title": "Feature Request: Make `SolutionFile.FullPath` a `public` property",
  "body": "Hello,\r\n\r\nMy team has an internal NuGet package that often modifies `.csproj` files. I'm trying to see if we can leverage `Microsoft.Build` there. During the investigation, I noticed that [`FullPath` is an `internal` property of `SolutionFile`](https://github.com/dotnet/msbuild/blob/main/src/Build/Construction/Solution/SolutionFile.cs#L201-L231). Although the consumer would know the path in order to instantiate a `SolutionFile` in the first place, it makes it very clunky to pass around solution information if a different part of the code also needs to know the solution path.\r\n```cs\r\nusing Microsoft.Build.Construction;\r\n\r\n// Currently, you can't figure out the solution path inside this method\r\npublic void DoSomethingWithSolution1(SolutionFile solutionFile) { }\r\n\r\n// Clunky to pass both `SolutionFile` and `string`; indicates that encapsulation has been done poorly\r\npublic void DoSomethingWithSolution2(SolutionFile solutionFile, string solutionPath) { ... }\r\n\r\n// The caller can also instantiate a `SolutionFile` from the path, but this isn't DRY\r\npublic void DoSomethingWithSolution3(string solutionPath)\r\n{\r\n    // likely repeated\r\n    var solution = new SolutionFile(solutionPath);\r\n    ...\r\n}\r\n```\r\nI believe `FullPath` should be made `public` so that `SolutionFile` properly encapsulates all necessary data.\r\n1. Why was `FullPath` not `public` in the first place?\r\n2. Can it be made `public`?\r\n\r\nThanks!",
  "state": "OPEN",
  "createdAt": "2022-11-04T14:19:23Z",
  "updatedAt": "2024-01-31T08:15:47Z",
  "closedAt": null,
  "author": {
    "login": "Bartleby2718"
  },
  "labels": [
    "backlog",
    "Feature Request",
    "Area: Solution (.sln)",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "`SolutionFile` is optimized only for MSBuild's internal needs and is not intended as a general-purpose solution file manipulation API. It sounds like you want something more like the latter, so you're likely better served by another approach.",
        "createdAt": "2022-11-04T15:58:05Z",
        "updatedAt": "2022-11-04T15:58:05Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald is there a reason _not_ to expose the _getter_ for this property? Seems consistent with the `ProjectRootElement.FullPath` API which is exposed.\r\n\r\nJust the ability to parse the projects out of a solution file (which this class offers as public) is quite useful for writing scripts that interpret and manipulate MSBuild objects. Having the path attached to this class both feels natural and is useful for allowing users to extend this base functionality (e.g. by locating other files relative to the solution file or by using the path to read in the solution file manually and perform some modification such as adding a project).\r\n\r\nFWIW, [the docs](https://learn.microsoft.com/en-us/dotnet/api/microsoft.build.construction.solutionfile?view=msbuild-17-netcore) make no mention of this class being \"for internal use only\".",
        "createdAt": "2022-11-07T14:37:19Z",
        "updatedAt": "2022-11-07T14:37:19Z",
        "author": {
          "login": "madelson"
        }
      }
    ]
  }
}