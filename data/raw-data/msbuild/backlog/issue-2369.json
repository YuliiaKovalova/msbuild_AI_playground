{
  "number": 2369,
  "title": "msbuild nuget package unable to open vs2017 csproj files",
  "body": "I'm referencing the nuget packages `Microsoft.Build` and `Microsoft.Build.Tasks.Core`. It doesn't matter if I chose stable or prerelease, both versions run into the same error.\r\n\r\nI'm trying to open a csproj file for evaluation:\r\n```csharp\r\nvar projectFile = @\"C:\\projects\\test\\test.csproj\";\r\nvar project = new Microsoft.Build.Evaluation.Project(projectFile);\r\nvar projectName = Path.GetFileNameWithoutExtension(projectFile);\r\nvar outputFile = project.GetPropertyValue(\"TargetPath\");\r\nvar outputName = Path.GetFileName(outputFile);\r\n```\r\nI'm getting `Microsoft.Build.Exceptions.InvalidProjectFileException: 'The tools version \"15.0\" is unrecognized. Available tools versions are \"12.0\", \"14.0\", \"2.0\", \"3.5\", \"4.0\".'`\r\n\r\nWhen searching the web for this error message I'm only coming up with things related to the VS 2017 installation and how to look up the msbuild packaged with it; unfortunately this doesn't help me with my instance of the exception because I'm invoking msbuild as a library and not as a process.\r\n\r\nDo I have to tell the nuget assemblies where the VS 2017 installation is? How do I do this? (I was assuming the nuget assemblies can work stand alone, but if a VS installation is required that works too, it's just not discoverable for me what to do here.)",
  "state": "CLOSED",
  "createdAt": "2017-07-31T18:41:07Z",
  "updatedAt": "2024-02-21T17:17:37Z",
  "closedAt": "2017-08-22T15:47:25Z",
  "author": {
    "login": "weltkante"
  },
  "labels": [
    "bug",
    "regression",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "rainersigwald"
      }
    ]
  },
  "milestone": {
    "title": "MSBuild 15.5"
  },
  "comments": {
    "nodes": [
      {
        "body": "I'm having a similar issue. I noticed that it usually happens when there are multiple side-by-side installation of Visual Studio 2017 (e.g. stable release and preview, or Community and Pro) and/or Build Tools for Visual Studio 2017 (as a nickname \"2\" installation).\r\n\r\nOur users complain that they can't build their project with our system anymore but it looks like the issue is in Microsoft Build itself. This is a serious blocker and I hope that it can be fixed ASAP.",
        "createdAt": "2017-08-13T05:27:56Z",
        "updatedAt": "2017-08-13T05:27:56Z",
        "author": {
          "login": "Kryptos-FR"
        }
      },
      {
        "body": "Seems to be related to https://github.com/Microsoft/msbuild/issues/2427.\r\n\r\nIsn't this code supposed to find all installed and supported versions of MSBuild?\r\n```csharp\r\nvar projectCollection = new Microsoft.Build.Evaluation.ProjectCollection();\r\nvar toolsets = projectCollection.Toolsets; // is missing 15.0\r\nvar project = new Microsoft.Build.Evaluation.Project(null, null, projectCollection); // throws an exception here\r\n// same happens with default constructor of project:\r\nvar project = new Microsoft.Build.Evaluation.Project();\r\n```\r\nIn my case, after updating to Visual Studio 15.3, this doesn't find the latest (15.0) tools version. It was working fine before the update. Seems to me that this can break at any time after an update. This is a critical issue.\r\ncc @rainersigwald ",
        "createdAt": "2017-08-16T03:57:23Z",
        "updatedAt": "2017-08-18T01:30:41Z",
        "author": {
          "login": "Kryptos-FR"
        }
      },
      {
        "body": "> Do I have to tell the nuget assemblies where the VS 2017 installation is? How do I do this?\r\n\r\nIdeally you wouldn't have to, but it does look like something is wrong with our code to support that.\r\n\r\n#2030 tracks us providing an easy way to do that. There's a link from there to https://github.com/Microsoft/msbuild/issues/1784#issuecomment-293402946, which links to https://github.com/debanne/dotnet-builder/pull/1 where @AndyGerlicher wrote some example code to find and load MSBuild.\r\n\r\nI'll see if I can reproduce this to figure out what's going on (and probably some other workarounds).",
        "createdAt": "2017-08-17T14:21:28Z",
        "updatedAt": "2017-08-17T14:21:28Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Related (via https://github.com/dotnet/docfx/issues/1969#issuecomment-322764421): http://www.michalkomorowski.com/2017/04/why-i-hate-roslyn-even-more.html",
        "createdAt": "2017-08-17T14:47:29Z",
        "updatedAt": "2017-08-17T14:47:29Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I probably should have noted that in my original report, but I'm already using the `Microsoft.VisualStudio.Setup.Configuration.Interop` nuget library to figure out which VS 2017 versions are installed. So figuring out where VS or MSBuild is located is not the problem, I'm already doing that.\r\n\r\nMy problem is that I'm linking against the MSBuild nuget package and want to evaluate projects in-process programmatically without invoking a separate MSBuild process (which would make no sense anyways since I'm extracting information from the projects, not running a build).\r\n\r\nSo, assuming I already have the information where v15 is located, any idea how I can pass this on to MSBuild? Or is this impossible and I have to wait for a fix in the nuget MSBuild package?\r\n\r\n(Sorry if this information was in the linked issues, I tried looking through them, but couldn't find anything related.)",
        "createdAt": "2017-08-17T16:31:56Z",
        "updatedAt": "2017-08-17T16:31:56Z",
        "author": {
          "login": "weltkante"
        }
      },
      {
        "body": "@weltkante Yes, if you have that information already, there's an easy workaround.\r\n\r\nSet the environment variables `VSINSTALLDIR` and `VisualStudioVersion` before calling into MSBuild APIs.\r\n\r\nI just confirmed on my machine with this hardcoded value on top of your example code:\r\n\r\n```c#\r\nEnvironment.SetEnvironmentVariable(\"VSINSTALLDIR\", @\"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\");\r\nEnvironment.SetEnvironmentVariable(\"VisualStudioVersion\", @\"15.0\");\r\n```\r\n\r\nThe problem is arising because MSBuild attempts to build from the installed version of Visual Studio where possible, but we're failing to locate it now (still not sure why; continuing to look). Setting those environment variables lets an alternate codepath through the find-toolset code take over.",
        "createdAt": "2017-08-17T17:10:36Z",
        "updatedAt": "2017-08-17T17:10:36Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Ok, here's the source of the problem:\r\n\r\nhttps://github.com/Microsoft/msbuild/blob/ab090d1255caa87e742cbdbc6d7fe904ecebd975/src/Shared/BuildEnvironmentHelper.cs#L232-L235\r\n\r\nThe returned instance of VS (on this machine) has version `15.3.26730.3`, which doesn't match `CurrentVisualStudioVersion` which is `15.0`.\r\n\r\nNeed to track down an Update 2 machine to see if this is a recent change in the return value that we need to ping the setup folks about (I don't see how it could have been working otherwise).\r\n\r\nAlso need to make our code more robust. Not quite sure how yet.",
        "createdAt": "2017-08-17T17:25:01Z",
        "updatedAt": "2017-08-17T17:25:01Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Your example didn't work for me, but looking at the source, trying to set `MSBUILD_EXE_PATH` worked for me (using the latest nuget package 15.3.409):\r\n```csharp\r\nEnvironment.SetEnvironmentVariable(\"MSBUILD_EXE_PATH\", @\"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Professional\\MSBuild\\15.0\\Bin\\MSBuild.exe\");\r\n```\r\nNo idea why it doesn't pick up the other two variables you used.\r\n\r\n(Also, for the record, I created the issue when I was on v15.2 - so this has been broken before the update to v15.3 ~ at the point where I created the issue I had no preview installed, but I did have a preview a few weeks/months before writing that code; not sure if it was a 15.2 or 15.3 preview though)",
        "createdAt": "2017-08-17T18:18:08Z",
        "updatedAt": "2017-08-17T18:32:51Z",
        "author": {
          "login": "weltkante"
        }
      },
      {
        "body": "Ok figured it out why your variables didn't work for me.\r\n\r\nApparently having `msbuild` _anywhere_ in the process name will freak out msbuild ;)\r\n\r\nhttps://github.com/Microsoft/msbuild/blob/ab090d1255caa87e742cbdbc6d7fe904ecebd975/src/Shared/BuildEnvironmentHelper.cs#L327-L334\r\n\r\n(Notice the `IndexOf() >= 0` part)\r\n\r\nI had named my sandbox project to repro the bug `MsBuildIssueRepro` and apparently that makes MsBuild think my process is a full MsBuild installation.\r\n\r\nRenaming the project allows your variables to work, too.\r\n\r\nReading through the source I believe most of the `TryFromXXX` Methods should check if their guess was correct before returning a non-null value. Otherwise they are ending the chain of try-methods early with a wrong guess.",
        "createdAt": "2017-08-17T18:53:49Z",
        "updatedAt": "2017-08-17T18:57:35Z",
        "author": {
          "login": "weltkante"
        }
      },
      {
        "body": "@weltkante \"MSBuild libraries get confused if your program has `msbuild` in its name\" is #2194. We discovered this week that it's bitten every member of the core MSBuild team for exactly this kind of sample project. You nailed the cause!\r\n\r\nGlad to hear setting the environment variables worked for you. I should also note that if you run your application from a \"Developer Command Prompt for VS2017\" it'll set those for you, so any MSBuild API consumer should work from there.",
        "createdAt": "2017-08-17T19:03:32Z",
        "updatedAt": "2017-08-17T19:03:32Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Ok, I set up a VM with different VSes:\r\n![image](https://user-images.githubusercontent.com/3347530/29435085-37b98e30-836b-11e7-84e1-809d6176b747.png)\r\n\r\nAnd our [enumeration code](https://github.com/Microsoft/msbuild/blob/ab090d1255caa87e742cbdbc6d7fe904ecebd975/src/Shared/VisualStudioLocationHelper.cs#L26) returns:\r\n```\r\nCount = 3\r\n {Microsoft.Build.Shared.VisualStudioInstance}\r\n  \"Visual Studio Community 2017\"\r\n  \"C:\\\\Program Files (x86)\\\\Microsoft Visual Studio\\\\2017\\\\Community\"\r\n  {15.2.26430.4}\r\n {Microsoft.Build.Shared.VisualStudioInstance}\r\n  \"Visual Studio Professional 2017\"\r\n  \"C:\\\\Program Files (x86)\\\\Microsoft Visual Studio\\\\2017\\\\Professional\"\r\n  {15.3.26730.3}\r\n {Microsoft.Build.Shared.VisualStudioInstance}\r\n  \"Visual Studio Enterprise 2017\"\r\n  \"C:\\\\Program Files (x86)\\\\Microsoft Visual Studio\\\\2017\\\\Enterprise\"\r\n  {15.0.26403.0}\r\n```\r\n\r\nSo it does look like this broke with 15.2.",
        "createdAt": "2017-08-17T22:01:54Z",
        "updatedAt": "2017-08-17T22:01:54Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald As far as I know us final user don't have a way to chose which version of VS we want to install. I know it is not directly related to MSBuild but it would be nice to ask the VS team to offer an option in the VS installer. When the whole team is still on a previous version (say 15.2) and you have a newcomer you want him or her to also use the same version.\r\n\r\nAnswering your question on #2427:\r\n> Please include details about how you're referencing MSBuild and what you deploy with your application.\r\n\r\nWe ask our user to either install VS or the Build Tools. We actually have a step in our installer setup that will call the VS installer in case none are detected (using `vs_buildtools.exe` that is deployed with our setup).\r\nThen from our code we just use the API from the several `Microsoft.Build` nuget packages to either create or load .props or .csproj using similar code than https://github.com/Microsoft/msbuild/issues/2369#issuecomment-322660482. So we don't deploy MSBuild ourselves (and as you said in the other issue we shouldn't have to do it), we just include the `Microsoft.Build` dlls with our application.\r\n\r\nAlso I'll have to check but I'm not sure if `Microsoft.VisualStudio.Setup.Configuration.Interop` is able to return the instance(s) of Build Tools. We were not using this library to find out MSBuild path, only the installed version of VS so that we can provide a built-in option to open the project with VS.\r\n\r\n> So it does look like this broke with 15.2.\r\n\r\nIt is a bit weird. It still works at home for me with 15.2. But a coworker (who still have 15.2) did modify its VS install to include other packages (like support for UWP and such) and it started to fail.\r\nIt also work on a VM with a fresh install of everything (VS or Build Tools) until 15.2 (included). But I did notice that sometimes it will start to fail when more than one instance was installed side by side (not sure why). So maybe Build Tools for 15.2 was still returning the correct version at some point.",
        "createdAt": "2017-08-18T02:20:26Z",
        "updatedAt": "2017-08-18T05:12:07Z",
        "author": {
          "login": "Kryptos-FR"
        }
      },
      {
        "body": "@rainersigwald When will this fix be applied to nuget package? thx!",
        "createdAt": "2017-08-20T08:20:06Z",
        "updatedAt": "2017-08-20T08:20:06Z",
        "author": {
          "login": "parkycai"
        }
      },
      {
        "body": "Maybe somehow related: What happens if a program using the vs shell like the VS 2017 Team Explorer is installed that isn't really a complete VS / build environment? \r\ne.g. https://stackoverflow.com/questions/45760787 sees this error:\r\n```\r\nMSBuild auto-detection: using msbuild version '15.3.409.57025' from 'C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\TeamExplorer\\MSBuild\\15.0\\bin'.\r\n```",
        "createdAt": "2017-08-20T12:20:38Z",
        "updatedAt": "2017-08-20T12:20:38Z",
        "author": {
          "login": "dasMulli"
        }
      },
      {
        "body": "A potentially related issue.. Once upgraded to 15.3, MSBuild can't properly open 2017 csproj files. The error we're getting is:\r\n\r\n>   Failure: Msbuild failed when processing the file 'D:\\Development\\R4MVC\\src\\R4MvcHostApp\\R4MvcHostApp.csproj' with message: The SDK 'Microsoft.NET.Sdk.Web' specified could not be found.  D:\\Development\\R4MVC\\src\\R4MvcHostApp\\R4MvcHostApp.csproj\r\n\r\nRunning process monitor, I can see that the app is trying to access `[path_to_running_exe]\\Sdks\\Microsoft.NET.Sdk.Web\\Sdk` and is obviously not finding that. Adding various combinations of environment settings from the comments above have caused it to crash with several different error messages, but none of the suggestions have ultimately fixed the issue.\r\n\r\nI'm perfectly happy to provide any help in tracing this, as we have this replicated on multiple machines, and by multiple users.",
        "createdAt": "2017-08-21T20:55:48Z",
        "updatedAt": "2017-08-21T20:55:48Z",
        "author": {
          "login": "artiomchi"
        }
      },
      {
        "body": "@artiomchi Yes, that sounds related. Can you share the errors when you set `VSINSTALLDIR` and `VisualStudioVersion`? I expect that to work.",
        "createdAt": "2017-08-21T21:00:10Z",
        "updatedAt": "2017-08-21T21:00:10Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@dasMulli Filed #2460 for Team Explorer, since it's not caused by the same root cause as this is.",
        "createdAt": "2017-08-21T21:04:56Z",
        "updatedAt": "2017-08-21T21:05:07Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald Ahh.. During my long attempts to make it work (before I found this issue), I also installed the [Microsoft.Build.Runtime](https://www.nuget.org/packages/Microsoft.Build.Runtime) NuGet package, due to it's description:\r\n> This package contains the runtime of MSBuild.  Reference this package only if your application needs to load projects or execute in-process builds.\r\n\r\nThis package seems bundled with it's own MSBuild, and that build also failed to find Microsoft.NET.Sdk.Web (same error whether I used this package or when I just used Microsoft.Build and Microsoft.Build.Tasks.Core)\r\n\r\nSetting the VSINSTALLDIR and VisualStudioVersion variables with the Runtime package installed made no difference. Setting the MSBUILD_EXE_PATH to gave me the following error:\r\n>   Failure: Msbuild failed when processing the file 'D:\\Development\\R4MVC\\src\\R4MvcHostApp\\R4MvcHostApp.csproj' with message: The imported project \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\MSBuild\\15.0\\Bin\\15.0\\Microsoft.Common.props\" was not found. Also, tried to find \"15.0\\Microsoft.Common.props\" in the fallback search path(s) for $(MSBuildExtensionsPath) - \"C:\\Program Files (x86)\\MSBuild\" . These search paths are defined in \"D:\\Development\\R4MVC\\src\\R4Mvc.Tools\\bin\\Debug\\net462\\dotnet-r4mvc.exe.Config\". Confirm that the path in the <Import> declaration is correct, and that the file exists on disk in one of the search paths.  C:\\Program Files\\dotnet\\sdk\\2.0.0\\Sdks\\Microsoft.NET.Sdk\\Sdk\\Sdk.props\r\n\r\nWhen I removed the Runtime package, leaving just the Microsoft.Build and Microsoft.Build.Tasks.Core packages installed, and set VSINSTALLDIR to the VS install path (didn't even need the VisualStudioVersion in my case), the project loaded successfully. So this is definitely the issue that we were encountering, and the Runtime package has a potentially linked but also separate issue that sent me looking in the wrong direction >_<",
        "createdAt": "2017-08-21T21:33:25Z",
        "updatedAt": "2017-08-21T21:33:25Z",
        "author": {
          "login": "artiomchi"
        }
      },
      {
        "body": "@artiomchi I can totally understand how that would be tempting! Can you comment on the wording in #2461?",
        "createdAt": "2017-08-21T21:49:12Z",
        "updatedAt": "2017-08-21T21:49:12Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I was able to make it work by setting the `VSINSTALLDIR` and `VisualStudioVersion`. Although there was a caveat that I was not expecting (but which still makes sense somehow): you need to set those variables before calling any of the `Microsoft.Build` API (especially `ProjectCollection`) otherwise the list of toolsets is cached and you will not be able to find the one for \"15.0\" after that.\r\n\r\nThis means that in order to do it properly one has to follow these steps in order:\r\n1. List all instances of Visual Studio installed using `Microsoft.VisualStudio.Setup.Configuration`\r\n   * The path can be retrieved from `ISetupInstance2.GetInstallationPath()`\r\n   * Note that this also lists *Build Tools for Visual Studio* which is perfect in my case\r\n2. Set the environment variables\r\n```csharp\r\nEnvironment.SetEnvironmentVariable(\"VSINSTALLDIR\", installationPath);\r\nEnvironment.SetEnvironmentVariable(\"VisualStudioVersion\", @\"15.0\");\r\n```\r\n3. Start using `Microsoft.Build` API, for example:\r\n```csharp\r\nvar projectCollection = new Microsoft.Build.Evaluation.ProjectCollection();\r\nif (projectCollection.GetToolset(\"15.0\") == null)\r\n{\r\n    throw new Exception(\"MSBuild 15 not found\");\r\n}\r\n```\r\nIn case you need the full path to `MSBuild.exe` it should be in `Path.Combine(installationPath, \"MSBuild\", \"15.0\", \"Bin\")`.\r\n\r\nNote: it is still going under some testing but it is my hope that this will work for the time being, until the fix is released in the next MSBuild.",
        "createdAt": "2017-08-22T08:38:56Z",
        "updatedAt": "2017-08-22T08:38:56Z",
        "author": {
          "login": "Kryptos-FR"
        }
      },
      {
        "body": "@Kryptos-FR Yes, that's exactly right. We're working on #2030 to provide a NuGet package that makes that easier to do (and includes loading the MSBuild assemblies from the same installed VS).",
        "createdAt": "2017-08-22T15:14:42Z",
        "updatedAt": "2017-08-22T15:14:42Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "In my case I need my library to work on computers which do not have VS2017 installed so I tweaked a little bit the workaround. I'm sharing it here in case it helps others:\r\n\r\n```csharp\r\nprivate static void HackForVs2017Update3()\r\n{\r\n    var registryKey = $@\"SOFTWARE{(Environment.Is64BitProcess ? @\"\\Wow6432Node\" : string.Empty)}\\Microsoft\\VisualStudio\\SxS\\VS7\";\r\n    using (RegistryKey subKey = Registry.LocalMachine.OpenSubKey(registryKey))\r\n    {\r\n        string visualStudioPath = subKey?.GetValue(\"15.0\") as string;\r\n        if (!string.IsNullOrEmpty(visualStudioPath))\r\n        {\r\n            Environment.SetEnvironmentVariable(\"VSINSTALLDIR\", visualStudioPath);\r\n            Environment.SetEnvironmentVariable(\"VisualStudioVersion\", @\"15.0\");\r\n        }\r\n    }\r\n}\r\n\r\n```\r\n\r\n\r\nObviously I won't be able to load 15.0 projects in this case.\r\n\r\n",
        "createdAt": "2017-08-24T15:41:55Z",
        "updatedAt": "2017-08-24T15:41:55Z",
        "author": {
          "login": "jairbubbles"
        }
      },
      {
        "body": "@jairbubbles The VS setup team would rather you use [their API](https://www.nuget.org/packages/Microsoft.VisualStudio.Setup.Configuration.Interop/) than look in the registry like that, for robustness.",
        "createdAt": "2017-08-24T15:49:20Z",
        "updatedAt": "2017-08-24T15:49:20Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Packages versioned `15.5.0-preview-000072-0942130` have been published to [our private feed](https://dotnet.myget.org/feed/Packages/msbuild) that contain this fix, if anyone wants to experiment with them.",
        "createdAt": "2017-08-24T15:50:17Z",
        "updatedAt": "2017-08-24T15:50:17Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald Agreed but it's a hack so I wouldn't add a new dependency just for that. Anyway my previous attempt at doing this the clean way using their API was not very succesful but I'd give it another shot. And I still feel like it's over complicated.\r\n\r\n(I'm not sure I can access the private feed.)",
        "createdAt": "2017-08-24T15:58:47Z",
        "updatedAt": "2017-08-24T15:58:47Z",
        "author": {
          "login": "jairbubbles"
        }
      },
      {
        "body": "The feed should be open to everyone, but you have to explicitly add it to your `nuget.config` (and consume prerelease MSBuild).",
        "createdAt": "2017-08-24T16:04:40Z",
        "updatedAt": "2017-08-24T16:04:40Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald @jairbubbles \r\n\r\nThe link to the feed should be: https://dotnet.myget.org/gallery/msbuild\r\nThe link you want to add to VisualStudio (or nuget.config) is: https://dotnet.myget.org/F/msbuild/api/v3/index.json",
        "createdAt": "2017-08-24T16:05:26Z",
        "updatedAt": "2017-08-24T16:05:26Z",
        "author": {
          "login": "artiomchi"
        }
      },
      {
        "body": "Thx @artiomchi !\r\n\r\nI can confirm you that with version `15.5.0-preview-000072-0942130` I do not need the hack anymore.\r\n\r\nAny chance to get this in a 15.3 patch?",
        "createdAt": "2017-08-24T16:10:59Z",
        "updatedAt": "2017-08-24T16:10:59Z",
        "author": {
          "login": "jairbubbles"
        }
      },
      {
        "body": "@jairbubbles btw, you can have it working with the current build as well. Here's how I handled it: \r\nhttps://github.com/T4MVC/R4MVC/commit/ae2fd5d8f3ab60708419d37c8a42d237d86d3061#diff-89dd7d1659695edb3702bfe879b34b09R61",
        "createdAt": "2017-08-24T16:21:17Z",
        "updatedAt": "2017-08-24T16:21:17Z",
        "author": {
          "login": "artiomchi"
        }
      },
      {
        "body": "@artiomchi I believe your fix won't work if the user doesn't have Visual 2017 installed.",
        "createdAt": "2017-08-24T18:15:03Z",
        "updatedAt": "2017-08-24T18:15:03Z",
        "author": {
          "login": "jairbubbles"
        }
      },
      {
        "body": "@jairbubbles Oh, for sure. But isn't it required to open the vs2017 csproj files anyway? ;)\r\n\r\nThe project I linked is only relevant for AspNetCore projects, so that's not an issue, plus it's only temporary until the patch to msbuild goes into the stable channel",
        "createdAt": "2017-08-24T18:39:30Z",
        "updatedAt": "2017-08-24T18:39:30Z",
        "author": {
          "login": "artiomchi"
        }
      },
      {
        "body": "@artiomchi Yes but in my case it does as the lib I'm working on is just a wrapper over msbuild so it must works on all PC. Clearly with no Visual installed it will most likely fail on all .csproj.",
        "createdAt": "2017-08-24T18:41:42Z",
        "updatedAt": "2017-08-24T18:41:42Z",
        "author": {
          "login": "jairbubbles"
        }
      },
      {
        "body": "@jairbubbles Ahh, right.. I see your point.. But are you sure it won't work? After all, if VS 2017 (or the latest Build tools) are not installed, my script won't change anything (which is the expected behaviour anyway), and it will fall back to the default msbuild, which only opens the old csproj files.\r\n\r\nIf you want to open the vs2017 build files, you need either the latest build tools or the new VS installed, at which point my snippet will just add the ENV variable. \r\n\r\nSo that should cover all bases, no?\r\n\r\nIn any case, with the latest MSBuild packages available in MyGet, it might just be more preferable to use them  anyway :D ",
        "createdAt": "2017-08-24T19:15:44Z",
        "updatedAt": "2017-08-24T19:15:44Z",
        "author": {
          "login": "artiomchi"
        }
      },
      {
        "body": "@rainersigwald I used the msbuild in the preview package and am getting this error. I have described what i am trying to do in https://github.com/dotnet/roslyn/issues/15056\r\n` C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\MSBuild\\15.0\\Bin\\Roslyn\\Microsoft.CSharp.Core.targets: (84, 5): The \"Csc\" task failed unexpectedly.\r\nSystem.NullReferenceException: Object reference not set to an instance of an object.\r\n   at Microsoft.CodeAnalysis.BuildTasks.Csc.AddResponseFileCommands(CommandLineBuilderExtension commandLine)\r\n   at Microsoft.CodeAnalysis.BuildTasks.ManagedCompiler.GenerateResponseFileCommands()\r\n   at Microsoft.Build.Utilities.ToolTask.Execute()\r\n   at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute()\r\n`\r\n\r\nThese are the packages I have\r\n\"Microsoft.Build\" version=\"15.5.0-preview-000074-0946838\"\r\n\"Microsoft.Build.Framework\" version=\"15.5.0-preview-000074-0946838\" \r\n\"Microsoft.Build.Utilities.Core\" version=\"15.5.0-preview-000074-0946838\"\r\n\"Microsoft.CodeAnalysis\" version=\"2.3.1\" \r\n`\r\nDo any of the Roslyn code analysis package have to change? \r\n\r\n",
        "createdAt": "2017-08-25T18:30:07Z",
        "updatedAt": "2017-08-28T19:33:41Z",
        "author": {
          "login": "sanilpaul"
        }
      },
      {
        "body": "I have tried to use the latest msbuild packages from the myget feed, to build an sdk style csproj file from within an nunit test.\r\n\r\nThis is the error I am getting:\r\n\r\n```\r\nTarget DispatchToInnerBuilds:\r\n\r\n  C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\MSBuild\\15.0\\Bin\\Microsoft.Common.CrossTargeting.targets(52,5): error MSB4062: The \"Microsoft.Build.Tasks.MSBuild\" task could not be loaded from the assembly Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a. Could not load file or assembly 'Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. The system cannot find the file specified. Confirm that the <UsingTask> declaration is correct, that the assembly and all its dependencies are available, and that the task contains a public class that implements Microsoft.Build.Framework.ITask.\r\n\r\n```\r\n\r\nA barebones sample repo showing how to use the msbuild packages to build an sdk style csproj file would be very helpful.. :-(",
        "createdAt": "2017-09-04T21:51:55Z",
        "updatedAt": "2017-09-04T22:09:11Z",
        "author": {
          "login": "dazinator"
        }
      },
      {
        "body": "Ok resolved the above by adding `Microsoft.Build.Tasks.Core` nuget package to my project. I then got an error when trying to run the `Pack` target: \r\n\r\n```\r\nTask \"PackTask\"\r\n\r\n    C:\\Program Files\\dotnet\\sdk\\2.0.0-preview2-006497\\Sdks\\NuGet.Build.Tasks.Pack\\buildCrossTargeting\\NuGet.Build.Tasks.Pack.targets(141,5): error MSB4127: The \"PackTask\" task could not be instantiated from the assembly \"C:\\Program Files\\dotnet\\sdk\\2.0.0-preview2-006497\\Sdks\\NuGet.Build.Tasks.Pack\\buildCrossTargeting\\..\\Desktop\\NuGet.Build.Tasks.Pack.dll\". Please verify the task assembly has been built using the same version of the Microsoft.Build.Framework assembly as the one installed on your computer and that your host application is not missing a binding redirect for Microsoft.Build.Framework. Unable to cast object of type 'NuGet.Build.Tasks.Pack.PackTask' to type 'Microsoft.Build.Framework.ITask'.\r\n\r\n    C:\\Program Files\\dotnet\\sdk\\2.0.0-preview2-006497\\Sdks\\NuGet.Build.Tasks.Pack\\buildCrossTargeting\\NuGet.Build.Tasks.Pack.targets(141,5): error MSB4060: The \"PackTask\" task has been declared or used incorrectly, or failed during construction. Check the spelling of the task name and the assembly name.\r\n\r\n```\r\n\r\nThe error message prompted me to check binding redirects in app.config - was missing a binding redirect for some reason. Adding the folliwng seems to have fixed it:\r\n\r\n```\r\n<dependentAssembly>\r\n        <assemblyIdentity name=\"Microsoft.Build.Framework\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n        <bindingRedirect oldVersion=\"0.0.0.0-15.1.0.0\" newVersion=\"15.1.0.0\" />\r\n      </dependentAssembly>\r\n```",
        "createdAt": "2017-09-04T22:16:02Z",
        "updatedAt": "2017-09-04T22:24:42Z",
        "author": {
          "login": "dazinator"
        }
      },
      {
        "body": "Just wanted to give an update on this issue. I published a package for a utility helper to find MSBuild.\r\n\r\nPackage: https://dotnet.myget.org/feed/msbuild/package/nuget/Microsoft.Build.MSBuildLocator\r\nSource: https://github.com/Microsoft/MSBuildLocator/\r\n\r\nYou can look at the [sample app](https://github.com/Microsoft/MSBuildLocator/blob/master/samples/BuilderApp/Program.cs) that builds in that repo for usage. I tried to make it as simple as possible to query for installed locations and \"register\" (add assembly resolver). This should allow you to reference our NuGet package for compile time and not have to ship MSBuild binaries with an app that wants to build or evaluate using our API and the installed toolset.\r\n\r\nPlease do give feedback in that repo if it works or doesn't for your needs. Thanks!",
        "createdAt": "2017-09-14T16:25:47Z",
        "updatedAt": "2017-09-14T16:25:47Z",
        "author": {
          "login": "AndyGerlicher"
        }
      },
      {
        "body": "@rainersigwald I tried your solution by doing the next lines on my build\r\n\r\n`Environment.SetEnvironmentVariable(\"VSINSTALLDIR\", @\"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\");`\r\nOR\r\n`Environment.SetEnvironmentVariable(\"VSINSTALLDIR\", @\"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\");`\r\n            `Environment.SetEnvironmentVariable(\"VisualStudioVersion\", @\"15.0\");`\r\n\r\nNow it seems that am really using MSBuild 15 but for some reason i am getting the next error, any idea why?\r\n\r\nAm using MSBuild API\r\n\r\n`C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\MSBuild\\15.0\\Bin\\Microsoft.Common.CurrentVersion.targets(751,5) (MSBuild):The \"Microsoft.Build.Tasks.Message\" task could not be loaded from the assembly Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a. Could not load file or assembly 'Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. The system cannot find the file specified. Confirm that the declaration is correct, that the assembly and all its dependencies are available, and that the task contains a public class that implements Microsoft.Build.Framework.ITask.`\r\n\r\n\r\nEDIT: Something i noticed is that the files in that directory actually have Version 15.3... does it has something to do with this error?",
        "createdAt": "2017-09-20T22:07:11Z",
        "updatedAt": "2017-09-20T23:57:02Z",
        "author": {
          "login": "Edalzebu"
        }
      },
      {
        "body": "Just to say \"me too\". I am also experiencing the \"The tools version \"15.0\" is unrecognized. Available tools versions are \"12.0\", \"14.0\", \"2.0\", \"3.5\", \"4.0\".' issue while using Roslyn's MSBuildWorkspace. The same exact code works fine on a computer with VS2017 Update2, but doesn't work on a computer with VS2017 Update3.",
        "createdAt": "2017-09-25T13:42:28Z",
        "updatedAt": "2017-09-25T13:42:28Z",
        "author": {
          "login": "dudikeleti"
        }
      },
      {
        "body": "There are a number of things that might cause this. Last week, I ran into the same error because of https://github.com/Microsoft/msbuild/issues/2194.",
        "createdAt": "2017-09-25T16:49:18Z",
        "updatedAt": "2017-09-25T16:49:25Z",
        "author": {
          "login": "DustinCampbell"
        }
      },
      {
        "body": "I'm still unsure what to do with:\r\n\r\n> Microsoft.Build.Exceptions.InvalidProjectFileException : The imported project \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Professional\\MSBuild\\15.0\\Bin\\15.0\\Microsoft.Common.props\" was not found. Confirm that the path in the <Import> declaration is correct, and that the file exists on disk.  C:\\Program Files\\dotnet\\sdk\\2.0.0\\Sdks\\Microsoft.NET.Sdk\\Sdk\\Sdk.props\r\n\r\nThe only response here suggested to set `VSINSTALLDIR`, which I did. Please note that I'm targeting `net461` and `netcoreapp2.0`. For `net461` everything works fine, while the other fails.",
        "createdAt": "2017-10-08T01:10:17Z",
        "updatedAt": "2017-10-08T01:10:17Z",
        "author": {
          "login": "matkoch"
        }
      },
      {
        "body": "I'm also facing this problem. Do you know when the next release of MsBuild will be available?",
        "createdAt": "2017-10-12T08:48:47Z",
        "updatedAt": "2017-10-12T08:48:47Z",
        "author": {
          "login": "mdegroux"
        }
      },
      {
        "body": "Just wanted to chime in here that the two environment variables fixed my issues. I am loading two class libraries, one .NET and one .NET Core csproj style (but both targetting `net462`) , in an `MSBuildWorkspace` to use with Roslyn. \r\n\r\nBefore adding the environment variables the projects got added but there would be no syntax trees, documents or diagnostics. I could see in the `workspace` its `Diagnostics` property that the SDK 'Microsoft.NET.Sdk' wasn't found for the .NET core project and the Tools 15.0 version was not found for the .NET projects. After adding the two environment variables they all resolved flawlessly.\r\n\r\nPS: This was done in a minimalized test project. In the original project I also had web applications which had their own specific error, namely:\r\n\r\n> Msbuild failed when processing the file 'C:\\Source\\MySite.csproj' with message: The imported project \"C:\\Program Files (x86)\\MSBuild\\Microsoft\\VisualStudio\\v15.0\\WebApplications\\Microsoft.WebApplication.targets\" was not found. Confirm that the path in the <Import> declaration is correct, and that the file exists on disk.  C:\\Source\\MySite.csproj\r\n\r\nThis was also automatically resolved after setting the environment variables.\r\n\r\nFuture visitors: I'm talking about [this comment](https://github.com/Microsoft/msbuild/issues/2369#issuecomment-323135859).",
        "createdAt": "2017-10-12T17:20:30Z",
        "updatedAt": "2017-10-12T17:29:41Z",
        "author": {
          "login": "Vannevelj"
        }
      },
      {
        "body": "@rainersigwald any thoughts regarding my [comment](https://github.com/Microsoft/msbuild/issues/2369#issuecomment-334975949)?  Should I create a new issue?",
        "createdAt": "2017-10-17T13:39:10Z",
        "updatedAt": "2017-10-27T09:51:44Z",
        "author": {
          "login": "matkoch"
        }
      },
      {
        "body": "With 15.3 everything is broken again even setting the environment variables. What is going on?",
        "createdAt": "2017-12-21T08:32:11Z",
        "updatedAt": "2017-12-21T08:32:11Z",
        "author": {
          "login": "raffaeler"
        }
      },
      {
        "body": "@rainersigwald FYI I also tried to get from myget the latest msbuild packages with no luck.\r\n\r\n```\r\nFailure Msbuild failed when processing the file 'C:\\dev\\xyz.csproj' with message: C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\MSBuild\\15.0\\Bin\\Microsoft.Common.CurrentVersion.targets: (1601, 5): The \"GetReferenceNearestTargetFrameworkTask\" task could not be instantiated from the assembly \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\Common7\\IDE\\CommonExtensions\\Microsoft\\NuGet\\NuGet.Build.Tasks.dll\". Please verify the task assembly has been built using the same version of the Microsoft.Build.Framework assembly as the one installed on your computer and that your host application is not missing a binding redirect for Microsoft.Build.Framework. Unable to cast object of type 'NuGet.Build.Tasks.GetReferenceNearestTargetFrameworkTask' to type 'Microsoft.Build.Framework.ITask'.\r\nC:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\MSBuild\\15.0\\Bin\\Microsoft.Common.CurrentVersion.targets: (1601, 5): The \"GetReferenceNearestTargetFrameworkTask\" task has been declared or used incorrectly, or failed during construction. Check the spelling of the task name and the assembly name.\r\n```\r\n\r\n```\r\nFailure Msbuild failed when processing the file 'C:\\dev\\xyz.csproj' with message: C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\MSBuild\\15.0\\Bin\\Roslyn\\Microsoft.CSharp.Core.targets: (84, 5): The \"Csc\" task could not be instantiated from the assembly \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\MSBuild\\15.0\\Bin\\Roslyn\\Microsoft.Build.Tasks.CodeAnalysis.dll\". Please verify the task assembly has been built using the same version of the Microsoft.Build.Framework assembly as the one installed on your computer and that your host application is not missing a binding redirect for Microsoft.Build.Framework. Unable to cast object of type 'Microsoft.CodeAnalysis.BuildTasks.Csc' to type 'Microsoft.Build.Framework.ITask'.\r\nC:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\MSBuild\\15.0\\Bin\\Roslyn\\Microsoft.CSharp.Core.targets: (84, 5): The \"Csc\" task has been declared or used incorrectly, or failed during construction. Check the spelling of the task name and the assembly name.\r\n```",
        "createdAt": "2017-12-21T10:04:25Z",
        "updatedAt": "2017-12-21T10:04:25Z",
        "author": {
          "login": "raffaeler"
        }
      },
      {
        "body": "@raffaeler, @matkoch, and others seeing problems--can you describe your situations in a bit more detail, please?\r\n\r\n* What VS versions are installed on the machine (output of [VSWhere](https://github.com/Microsoft/vswhere) `vswhere -all` for 2017, plus other versions if applicable)?\r\n* What is the entry point application?\r\n* What is the environment the application is launched from?\r\n* What MSBuild, Roslyn, and VS libraries do you depend on, including versions? Are these dependencies direct?\r\n* What MSBuild assemblies are present in the app folder?\r\n* What environment variables are you specifying, if any?\r\n* What is the exact failure, and what `Microsoft.Build*` assemblies are loaded at the point of failure (including versions and ideally paths--if you can get them from a debugger easily)?",
        "createdAt": "2017-12-21T21:29:06Z",
        "updatedAt": "2017-12-21T21:29:46Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald \r\nThe version that is not working is 15.5.2 and not 15.5.3 as I wrote before, sorry.\r\nWith version 15.5.1 I had no apparent problems.\r\nI realized something was going wrong because Roslyn began complaining on properties Symbol == null and giving (wrong) SpeculativeSymbol instead. The reason for this is the failure in compiling the solution.\r\n\r\n- VS versions. VS2015 RTM and just a single VS2017 version:\r\n```\r\nVisual Studio Locator version 2.2.11+gf1a9c6c78d [query version 1.14.187.27757]\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\ninstanceId: a815f38e\r\ninstallDate: 08/08/2017 12:38:40 PM\r\ninstallationName: VisualStudio/15.5.2+27130.2010\r\ninstallationPath: C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\r\ninstallationVersion: 15.5.27130.2010\r\nproductId: Microsoft.VisualStudio.Product.Enterprise\r\nproductPath: C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\Common7\\IDE\\devenv.exe\r\nisPrerelease: 0\r\ndisplayName: Visual Studio Enterprise 2017\r\n...\r\n```\r\n\r\n- The app is a console app created with the .NET desktop version version 4.6.1. Initially I created a .net core app, but I have to go back to 4.6.1 because of problems with roslyn packages\r\n\r\n- What is the environment the application is launched from. Visual Studio 2017, debug or the dev cmd prompt (2017)\r\n\r\n- Versions. I tried roslyn 2.6.1, 2.6.0 and finally rolled back to 1.3.2 which is the only one that works.\r\nBeyond Roslyn, as suggested by this and other threads, I installed Microsoft.Build, Microsoft.Build.Framework, Microsoft.Build.Tasks.Core, Microsoft.Build.Utilities.Core. The Microsoft.Build.* versions I tried are 15.5.180 and the latest 15.6.0-preview* on myget\r\n\r\n- Microsoft Build assemblies in the app folder. Exactly the same of the nuget packages I cited before.\r\n\r\n- Environment. I tried with and without the following variables.\r\n```\r\n            Environment.SetEnvironmentVariable(\"VisualStudioVersion\", \"15.0\");\r\n\r\n            Environment.SetEnvironmentVariable(\"MSBUILD_EXE_PATH\",\r\n                @\"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\MSBuild\\15.0\\Bin\\MSBuild.exe\");\r\n\r\n            Environment.SetEnvironmentVariable(\"VSINSTALLDIR\",\r\n                @\"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\");\r\n```\r\n\r\n- What is the exact failure, and what Microsoft.Build* assemblies are loaded at the point of failure \r\nThe failures are the ones I wrote in the previous message. \r\nI could print the errors in the WorkspaceFailed event, which is the same of the Diagnostics property.\r\nThe errors are printed/available as soon as the OpenSolutionAsync is executed.\r\n```\r\nMSBuildWorkspace workspace = MSBuildWorkspace.Create();\r\nworkspace.WorkspaceFailed += Workspace_WorkspaceFailed;\r\nvar solution = await workspace.OpenSolutionAsync(SolutionFile);\r\n```\r\n\r\nAs I said, I now downgraded the project to 1.3.2, so it could take some time to make any tests.\r\n",
        "createdAt": "2017-12-21T21:58:11Z",
        "updatedAt": "2017-12-21T21:58:11Z",
        "author": {
          "login": "raffaeler"
        }
      },
      {
        "body": "@raffaeler Thanks! Unfortunately, I **do not** see the same thing on my machine, also with `15.5.27130.2010`.\r\n\r\nMy attempt to repro was:\r\n\r\n* Create new .NET 4.6.1 project from template.\r\n* Add reference to `Microsoft.CodeAnalysis` 2.6.1.\r\n* Do an `OpenSolutionAsync` and some minimal work.\r\n\r\nThis failed with a similar-but different error:\r\n\r\n```\r\nMsbuild failed when processing the file 'C:\\src\\RoslynApiConsumer\\RoslynApiConsumer\\RoslynApiConsumer.csproj' with message: C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\MSBuild\\15.0\\Bin\\Roslyn\\Microsoft.CSharp.Core.targets: (84, 5): The \"Microsoft.CodeAnalysis.BuildTasks.Csc\" task could not be loaded from the assembly C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\MSBuild\\15.0\\Bin\\Roslyn\\Microsoft.Build.Tasks.CodeAnalysis.dll. Could not load file or assembly 'Microsoft.Build.Utilities.Core, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. The system cannot find the file specified. Confirm that the <UsingTask> declaration is correct, that the assembly and all its dependencies are available, and that the task contains a public class that implements Microsoft.Build.Framework.ITask.\r\n```\r\n\r\nThat's because I forgot to add binding redirects (as mentioned above in https://github.com/Microsoft/msbuild/issues/2369#issuecomment-327033965). I added this to my app.config:\r\n```xml\r\n<dependentAssembly>\r\n  <assemblyIdentity name=\"Microsoft.Build.Framework\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n  <bindingRedirect oldVersion=\"0.0.0.0-15.1.0.0\" newVersion=\"15.1.0.0\" />\r\n</dependentAssembly>\r\n<dependentAssembly>\r\n  <assemblyIdentity name=\"Microsoft.Build\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n  <bindingRedirect oldVersion=\"0.0.0.0-15.1.0.0\" newVersion=\"15.1.0.0\" />\r\n</dependentAssembly>\r\n<dependentAssembly>\r\n  <assemblyIdentity name=\"Microsoft.Build.Utilities.Core\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n  <bindingRedirect oldVersion=\"0.0.0.0-15.1.0.0\" newVersion=\"15.1.0.0\" />\r\n</dependentAssembly>\r\n<dependentAssembly>\r\n  <assemblyIdentity name=\"Microsoft.Build.Tasks.Core\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n  <bindingRedirect oldVersion=\"0.0.0.0-15.1.0.0\" newVersion=\"15.1.0.0\" />\r\n</dependentAssembly>\r\n```\r\n\r\nAnd loading the projects completes without errors.\r\n\r\nFollow-up questions:\r\n* Are you specifying binding redirects?\r\n* What kinds of project(s) are you attempting to load?\r\n* What happens if you build [RoslynApiConsumer.zip](https://github.com/Microsoft/msbuild/files/1583477/RoslynApiConsumer.zip) and run it -- does it still error? If so can you give its output?",
        "createdAt": "2017-12-22T21:09:27Z",
        "updatedAt": "2017-12-22T21:09:27Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "(I should also note that most of the team including me is out on vacation until the first week of January, so responses may be delayed, but I want to help you get to the bottom of this.)",
        "createdAt": "2017-12-22T21:10:07Z",
        "updatedAt": "2017-12-22T21:10:07Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Thank you @rainersigwald ... I made many tests by analyzing *my* test solution with your code.\r\n- your solution worked\r\n- your solution after updating all the latest nuget (not the prerelease) packages worked\r\n\r\nso I updated the non-roslyn packages to the latest (the output is similar to this, but I didn't capture the one of my update):\r\n![image](https://user-images.githubusercontent.com/5183152/34318628-f48f161c-e7cd-11e7-9cc0-481f4003c889.png)\r\n(they are just roslyn dependencies, the only one I directly use is the tuple package)\r\nThen I updated the Roslyn from 1.32 to 2.6.1 and now works.\r\n\r\nNow the only difference between mine and your solutions is that I also reference Microsoft.Build.* packages while you don't (should I remove them?)\r\n\r\nWhere is the wizardry? Is the compilation process dependent from a specific version of system.composition package?\r\n\r\nP.S. yes, I have binding redirects in my solution which were automatically updated by the nuget process.",
        "createdAt": "2017-12-23T09:47:49Z",
        "updatedAt": "2017-12-23T09:49:02Z",
        "author": {
          "login": "raffaeler"
        }
      },
      {
        "body": "@rainersigwald my use case is just to evaluate MSBuild properties, like Configuration, TargetFrameworks, PackageReferences, included files, and so on. My goal is that this works cross platform with .NET Framework, Mono, and of course also .NET Core tooling (without any VS installed at all). Roslyn/C# is completely out of scope.\r\n\r\nJust a moment ago, I created a simple repro with `netcoreapp2.0`, references to `Microsoft.Build` and `Microsoft.Build.Utilities.Core` and this code:\r\n\r\n```\r\nvar projectCollection = new ProjectCollection();\r\nvar project = new Project(@\"..\\ConsoleApp10.csproj\",\r\n        new Dictionary<string, string>(),\r\n        projectCollection.DefaultToolsVersion);\r\n\r\nvar lookup = project.Items.ToLookup(x => x.ItemType, x => x.EvaluatedInclude);\r\n```\r\n\r\nI tried this w/ and w/o binding redirects. Always fails with:\r\n\r\n> The SDK 'Microsoft.NET.Sdk' specified could not be found.\r\n  ",
        "createdAt": "2018-01-08T12:06:12Z",
        "updatedAt": "2018-01-08T12:08:52Z",
        "author": {
          "login": "matkoch"
        }
      },
      {
        "body": "Ping @rainersigwald. Could you please also re-open this issue? It is obviously not solved.",
        "createdAt": "2018-01-20T20:29:52Z",
        "updatedAt": "2018-01-20T20:29:52Z",
        "author": {
          "login": "matkoch"
        }
      },
      {
        "body": "@rainersigwald This is a blocking issue for me too. /cc @matkoch ",
        "createdAt": "2018-02-02T00:49:38Z",
        "updatedAt": "2018-02-02T00:49:38Z",
        "author": {
          "login": "ulrichb"
        }
      },
      {
        "body": "@rainersigwald kindly pinging....",
        "createdAt": "2018-03-02T20:10:38Z",
        "updatedAt": "2018-03-02T20:10:38Z",
        "author": {
          "login": "matkoch"
        }
      },
      {
        "body": "I'm having the same problem that @matkoch is having. I'm working on a cross-platform tool that analyzes outdated packages (https://github.com/goenning/dotnet-outdated) and really just want to read the package references of a simple project file.\r\n\r\nThe problem is that this always throws `The SDK 'Microsoft.NET.Sdk.Web' specified could not be found.` for some reason",
        "createdAt": "2018-04-06T12:47:32Z",
        "updatedAt": "2018-04-06T12:47:32Z",
        "author": {
          "login": "flagbug"
        }
      },
      {
        "body": "Having same problem, but only when using .netcore2.0, works fine in .net framework.",
        "createdAt": "2018-05-10T08:30:43Z",
        "updatedAt": "2018-05-10T08:30:43Z",
        "author": {
          "login": "p-kaczynski"
        }
      },
      {
        "body": "Literally changing from `<TargetFramework>netcoreapp2.0</TargetFramework>` to `<TargetFramework>net461</TargetFramework>` fixes the issue for me using\r\n```\r\n<PackageReference Include=\"Microsoft.Build\" Version=\"15.6.85\" />\r\n    <PackageReference Include=\"Microsoft.Build.Utilities.Core\" Version=\"15.6.85\" />\r\n```\r\nand `new Project(path)`",
        "createdAt": "2018-05-10T08:34:16Z",
        "updatedAt": "2018-05-10T08:34:16Z",
        "author": {
          "login": "p-kaczynski"
        }
      },
      {
        "body": "I had the same issue with a TFS Build Agent (Version 2010) after installing [Build Tools for Visual Studio 2017](https://visualstudio.microsoft.com/downloads/#build-tools-for-visual-studio-2017) and configuring MSBuild arguments to : `/toolsversion:15.0 /property:VisualStudioVersion=15.0`.\r\nIt seems this registery key is missing : `HKEY_LOCAL_MACHINE\\SOFTWARE\\Wow6432Node\\Microsoft\\MSBuild\\ToolsVersions\\15.0` with the string value `MSBuildToolsPath` and cause the error :\r\n\r\n> 'The tools version \"15.0\" is unrecognized. Available tools versions are \"12.0\", \"14.0\", \"2.0\", \"3.5\", \"4.0\".'",
        "createdAt": "2018-07-04T12:50:01Z",
        "updatedAt": "2018-07-04T12:51:40Z",
        "author": {
          "login": "CodeTroopers"
        }
      },
      {
        "body": "Hello I am having the same issue.\r\nMSB4062 The \"Microsoft.CodeAnalysis.BuildTasks.Csc\" task could not be loaded from the assembly C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\MSBuild\\15.0\\Bin\\Roslyn\\Microsoft.Build.Tasks.CodeAnalysis.dll. Could not load file or assembly 'Microsoft.Build.Utilities.Core, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. The system cannot find the file specified. Confirm that the declaration is correct, that the assembly and all its dependencies are available, and that the task contains a public class that implements Microsoft.Build.Framework.ITask. MSBuild C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\MSBuild\\15.0\\Bin\\Roslyn\\Microsoft.CSharp.Core.targets 52 false Error\r\n\r\nCan Anyone tell me solution if found?\r\nI am using 2017 15.8.2 Version.\r\n\r\nPlease help.\r\nThanks",
        "createdAt": "2018-09-05T09:24:36Z",
        "updatedAt": "2018-09-05T09:24:36Z",
        "author": {
          "login": "manish10sharma"
        }
      },
      {
        "body": "I'm got the same error when opening the csproj of one project from another project. Both projects were freshly created today in VS2017 15.8.8. Updating to 15.8.9 did not help.\r\n\r\n```C#\r\nusing (var col = new ProjectCollection())\r\n{\r\n\tvar proj = col.LoadProject(projectFile); // kaboom!\r\n}\r\n```\r\nInstalling the latest `Microsoft.Build` and `Microsoft.Build.Utilities.Core` from nuget solved the problem. I didn't even need to fiddle around with environment variables. Why does VS still ship with a broken MSBuild?",
        "createdAt": "2018-11-06T05:52:54Z",
        "updatedAt": "2018-11-06T06:16:06Z",
        "author": {
          "login": "kjkrum"
        }
      },
      {
        "body": "@kjkrum \r\n\r\n> Why does VS still ship with a broken MSBuild?\r\n\r\nAs far as I know VS no longer ships MSBuild (it ships via nuget). VS has its own private copy of MSBuild which is not exposed to your project build so you can't reference it.\r\n\r\nIf you reference MSBuild through the GAC or Assembly Reference list (i.e. not through nuget) you likely get some outdated version which previously shipped with the .NET framework or an older VS and thus still is visible there for backwards compatibility.",
        "createdAt": "2018-11-06T16:22:07Z",
        "updatedAt": "2018-11-06T16:22:07Z",
        "author": {
          "login": "weltkante"
        }
      },
      {
        "body": "You can and should use the VS copy of MSBuild, but since it's no longer in the GAC you must locate it. https://docs.microsoft.com/en-us/visualstudio/msbuild/updating-an-existing-application has details on what's required, and https://github.com/Microsoft/MSBuildLocator/ is a package used to make the process easier.",
        "createdAt": "2018-11-06T16:29:08Z",
        "updatedAt": "2018-11-06T16:29:08Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald That's an awful lot of dicking around for something that used to be a checkbox.",
        "createdAt": "2018-11-07T22:45:21Z",
        "updatedAt": "2018-11-07T22:45:21Z",
        "author": {
          "login": "kjkrum"
        }
      },
      {
        "body": "This is still present. The work around provided by @rainersigwald and documented here https://docs.microsoft.com/en-us/visualstudio/msbuild/updating-an-existing-application?view=vs-2017 (specifically using `MSBuildLocator.RegisterDefaults();`) worked for us.",
        "createdAt": "2019-01-04T17:34:19Z",
        "updatedAt": "2019-01-04T17:34:19Z",
        "author": {
          "login": "aolszowka"
        }
      },
      {
        "body": "Any solution for this. I'm having a similar issue with trying to create a Raspberry Pi Blink project. The project creation fails with the error message \"Unable to read the project file \"Blink12.vcxproj\" The tools version \"15.0\" is unrecognized. Available tools versions are \"2.0\",\"3.5\",\"4.0\"",
        "createdAt": "2019-04-07T07:19:39Z",
        "updatedAt": "2019-04-07T07:19:39Z",
        "author": {
          "login": "kurtnelle"
        }
      },
      {
        "body": "@kurtnelle If https://docs.microsoft.com/en-us/visualstudio/msbuild/updating-an-existing-application doesn't help you, please open a new issue with more details about how you're using the API and what's going wrong.",
        "createdAt": "2019-04-08T15:10:13Z",
        "updatedAt": "2019-04-08T15:10:13Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Seriously this is a huge issue for me. Old version of the libraries don't work with 2019 only systems and new versions doesn't work with 2017 only systems. I even made a shim that would use new versions on systems with 2019 installed but old in 2017 systems. It seemed like it worked but the integration tests that *looked like they worked everywhere else* fails on the build server. I don't want that stupid hack to begin with and now it unsurprisingly fails in *the most important configuration*.\r\n\r\nI've been struggling with this for *almost a month*. The error message is non-sensical and  unhelpful, and this is obviously a major breaking change in the library.\r\nWhy does upgrading to new versions, with no other changes at all, break simply *loading* the project in 2017? Just calling \"LoadFromXmlReader\" throws this error. Setting toolsversion and subtoolsetversion seems to have absolutely no effect what.so.ever.\r\n\r\nThis thing makes me extremely unproductive and it makes me look incompetent.",
        "createdAt": "2020-02-28T10:37:39Z",
        "updatedAt": "2020-02-28T10:37:39Z",
        "author": {
          "login": "GeirGrusom"
        }
      },
      {
        "body": "@GeirGrusom can you please file a new issue, including details on\r\n\r\n> Old version of the libraries don't work with 2019 only systems and new versions doesn't work with 2017 only systems.\r\n\r\nWhat libraries?\r\n\r\n> Why does upgrading to new versions, with no other changes at all, break simply loading the project in 2017?\r\n\r\nCan you provide more details on exactly how you're loading projects and what the system environment is (upgrading from what to what)?",
        "createdAt": "2020-02-28T19:00:11Z",
        "updatedAt": "2020-02-28T19:00:11Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I'm very sorry. I was very stressed on friday, but that's no excuse for unprofessional behavior.\r\n\r\nShort about the appliation: It's used for building solutions, versioning and running the test suite on them. I would argue the value of this in the first place but that's unfortunately not particularily productive. It first invokes vswhere to find out where Visual Studio is located and uses that to actually build the application. This failed earlier because it wouldn't try to use Visual Studio 2019 if a project was made with 2017 and specified that so I updated the vswhere implementation to find the latest if an exact match could not be found. This seems to work: projects build just fine.\r\n\r\nHowever the issues show up when running the test suites. It uses Microsoft.Build to load the project files in order to find the output DLL files and dependencies the projects might have. On the old version this worked fine for 2017 but in 2019 it gave this odd error:\r\n\r\n> error MSB1040: ToolsVersion is not valid. The tools version \"15.0\" is unrecognized. Available tools versions are \"2.0\", \"3.5\", \"4.0\".\r\n\r\nBuild libraries are Microsoft.Build and Microsoft.Build.Utilities.Core at version 15.9.20.\r\n\r\nI tried to just change \"tools\" version but this error shows up with different versions except if I put 4.0, at which point it tells me that it can't find Microsoft.NET.Sdk. I upgrade to 16.4.0 on both libraries and now it works in 2019, but on systems with 2017 installed I'm back to the drawing board. So I made this shim that will force it on a newer version as explained and now in all environments I've tested it it works but it is hacky and not exactly very maintenable. It also fails to build on the build server with the same error when it tries to run integration tests with this issues error description.\r\n\r\nIt seems to me that there's some confusion as to what \"toolsVersion\" actually mean. Take `Microsoft.Build.Utilities.ToolLocationHelper.GetPathToBuildTools(string)`. In the documentation it *looks* to me like it should return the location of MSBuild, but it doesn't do that at all. Sometimes it seems to return the entry assembly path, and other times .NET Framework paths, and on my development machine it returns exactly what I would expect.\r\n\r\nWhat does toolsVersion mean? Is it CLR version? MSBuild version? Visual Studio version? The documentaiton on MSBuild...Project.LoadFromStream is not exactly helpful as it just says \"that's the tools version\" more or less. If I state nothing it seems like MSBuild will put toolsversion from the `<Project />` element or whatever SDK it ends up loading and that's what's causing this odd error message. Change the toolsversion and it will complain about wrong toolsversions until you hit 4.0, 3.5 or 2.0 at which point it will complain that Microsoft.NET.Sdk could not be found. Is MSBuild doing the wrong thing here, or is the error description wrong?\r\n\r\nI'll see if I can make a trivial reproduction.",
        "createdAt": "2020-03-02T08:24:25Z",
        "updatedAt": "2020-03-02T08:24:25Z",
        "author": {
          "login": "GeirGrusom"
        }
      },
      {
        "body": "Couldn't reproduce the issue in a trivial solution. Only new project does not properly load in VS2019 but I got everything to work on build so I don't think I want to waste anymore of your time on this.\r\n\r\nThanks, and again, sorry.",
        "createdAt": "2020-03-02T11:30:54Z",
        "updatedAt": "2020-03-02T11:30:54Z",
        "author": {
          "login": "GeirGrusom"
        }
      },
      {
        "body": "@GeirGrusom I think you might like to [use MSBuildLocator](https://docs.microsoft.com/visualstudio/msbuild/updating-an-existing-application?view=vs-2019) in your application. It handles the scenarios you're currently using VSWhere for, and you should be able to use a single application to load both 2017 and 2019 projects (as long as you reference MSBuild 15.x when you build).",
        "createdAt": "2020-03-05T16:08:32Z",
        "updatedAt": "2020-03-05T16:08:32Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}