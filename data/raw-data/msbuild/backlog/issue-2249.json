{
  "number": 2249,
  "title": "Document property/item creation batching",
  "body": "Repro:\r\n\r\nCreate directory structure and empty files like so:\r\n```\r\nA\\1.stub\r\nB\\2.stub\r\nB\\3.stub\r\n```\r\n\r\nand run targets file in the same dir as A and B:\r\n\r\n```xml\r\n<Project>\r\n  <ItemGroup>\r\n    <_StubFiles Include=\"$(MSBuildThisFileDirectory)**\\*.stub\"/>\r\n\r\n    <_StubDirs Include=\"@(_StubFiles->'%(RecursiveDir)')\"/>\r\n  </ItemGroup>\r\n  \r\n  <Target Name=\"Build\">\r\n    <PropertyGroup>\r\n      <_ComponentDir>%(_StubDirs.Identity)</_ComponentDir>\r\n      <_ComponentName>$(_ComponentDir.TrimEnd('\\'))</_ComponentName>\r\n    </PropertyGroup>\r\n    \r\n    <Message Text=\">> %(_StubDirs.Identity) '$(_ComponentDir)' '$(_ComponentName)'\"/>\r\n  </Target>\r\n</Project>\r\n```\r\n\r\nActual output:\r\n```\r\n  >> A\\ 'B\\' 'B'\r\n  >> B\\ 'B\\' 'B'\r\n```\r\n\r\nExpected output:\r\n```\r\n  >> A\\ 'A\\' 'A'\r\n  >> B\\ 'B\\' 'B'\r\n```",
  "state": "OPEN",
  "createdAt": "2017-06-27T19:56:13Z",
  "updatedAt": "2024-02-21T16:36:31Z",
  "closedAt": null,
  "author": {
    "login": "tmat"
  },
  "labels": [
    "Area: Documentation",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "@rainersigwald Is this a feature or a bug? If it is a feature it should be documented here: https://docs.microsoft.com/en-us/visualstudio/msbuild/msbuild-batching \r\nIs there a workaround?",
        "createdAt": "2017-06-27T19:57:22Z",
        "updatedAt": "2017-06-27T19:57:22Z",
        "author": {
          "login": "tmat"
        }
      },
      {
        "body": "FYI @nguerrera ",
        "createdAt": "2017-06-27T19:57:33Z",
        "updatedAt": "2017-06-27T19:57:33Z",
        "author": {
          "login": "tmat"
        }
      },
      {
        "body": "Oh now that I see the repro, I see the issue as opposed to when we discussed offline.\r\n\r\nThe property creation and message tasks are being batched separately. So the execution is CreateProperty 2xN times, Message N times. So every time the Message task runs, the properties have their final values. You need to declare outputs to trigger target batching instead of task batching.\r\n\r\nThis produces the expected output:\r\n\r\n``` diff\r\n<  <Target Name=\"Build\">\r\n>  <Target Name=\"Build\" Outputs=\"%(_StubDirs.Identity)\">\r\n```\r\n\r\nThis distinction between task and target batching is vaguely covered in linked doc.\r\n\r\n",
        "createdAt": "2017-06-27T20:10:13Z",
        "updatedAt": "2017-06-27T20:26:58Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "Ah, I see. PropertyGroup is considered a task for the purpose of batching. I did not see that in the doc. It would help to add a sample that sets a property in the target.",
        "createdAt": "2017-06-27T20:15:15Z",
        "updatedAt": "2017-06-27T20:15:15Z",
        "author": {
          "login": "tmat"
        }
      },
      {
        "body": "My understanding is that inside a target, PropertyGroup is actually sugar for https://msdn.microsoft.com/en-us/library/63ckb9s9.aspx. ",
        "createdAt": "2017-06-27T20:16:43Z",
        "updatedAt": "2017-06-27T20:16:43Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "Makes sense now. My understanding was that ```%``` finds the enclosing Target or task and I didn't know PG is a task.",
        "createdAt": "2017-06-27T20:18:14Z",
        "updatedAt": "2017-06-27T20:18:14Z",
        "author": {
          "login": "tmat"
        }
      },
      {
        "body": "@nguerrera's analysis is correct, and @tmat is 100% right that the doc could be much, much clearer about this. Repurposing the bug for that doc update.",
        "createdAt": "2017-06-27T20:20:01Z",
        "updatedAt": "2017-06-27T20:20:01Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald Thanks.",
        "createdAt": "2017-06-27T20:20:16Z",
        "updatedAt": "2017-06-27T20:20:16Z",
        "author": {
          "login": "tmat"
        }
      },
      {
        "body": "Oh, and to be pedantic it's the individual property elements that are sugar for `CreateProperty`, not the `PropertyGroup`. Which is relevant in this case because batching over the group is what was initially expected.",
        "createdAt": "2017-06-27T20:27:52Z",
        "updatedAt": "2017-06-27T20:27:52Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "The following behavior looks like a bug to me, but I am noting it here first in case it has already been fixed (I'm afraid I am only testing in Build Engine version 14.0.25420.1) or it is expected behavior (in which case the documentation should explain it in my opinion).\r\n\r\nHere are 2 targets that use different approaches to attempt to set the value of the `Max` property to the highest value among the `Number` items:\r\n\r\n```\r\n  <Target Name=\"PopulateMaxViaCondition\">\r\n    <ItemGroup>\r\n      <Number Include=\"2\" />\r\n      <Number Include=\"1\" />\r\n    </ItemGroup>\r\n    <PropertyGroup>\r\n        <Max>0</Max>\r\n        <Max Condition=\"%(Number.Identity) &gt; $(Max)\">%(Number.Identity)</Max>\r\n    </PropertyGroup>\r\n    <Message Text=\"Max: $(Max)\"/>\r\n  </Target>\r\n```\r\n\r\n```\r\n  <Target Name=\"PopulateMaxViaPropertyFunction\">\r\n    <ItemGroup>\r\n      <Number Include=\"2\" />\r\n      <Number Include=\"1\" />\r\n    </ItemGroup>\r\n    <PropertyGroup>\r\n        <Max>0</Max>\r\n        <Max>$([System.Math]::Max(`%(Number.Identity)`, `$(Max)`))</Max>\r\n    </PropertyGroup>\r\n    <Message Text=\"Max: $(Max)\"/>\r\n  </Target>\r\n```\r\n\r\n**Output, actual (identical for either target):**\r\n\r\n> Added Item(s): Number=2\r\n> Added Item(s): Number=1\r\n> **Set Property: Max=0**\r\n> **Set Property: Max=2**\r\n> **Set Property: Max=1**\r\n> Using \"Message\" task from assembly \"Microsoft.Build.Tasks.Core, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\".\r\n> Task \"Message\" (TaskId:2)\r\n>   Task Parameter:Text=Max: 1 (TaskId:2)\r\n>   **Max: 1** (TaskId:2)\r\n\r\n**Output, expected, target `PopulateMaxViaCondition`:**\r\n\r\n> Added Item(s): Number=2\r\n> Added Item(s): Number=1\r\n> **Set Property: Max=0**\r\n> **Set Property: Max=2**\r\n> Using \"Message\" task from assembly \"Microsoft.Build.Tasks.Core, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\".\r\n> Task \"Message\" (TaskId:2)\r\n>   Task Parameter:Text=Max: 2 (TaskId:2)\r\n>   **Max: 2** (TaskId:2)\r\n\r\n**Output, expected, target `PopulateMaxViaPropertyFunction`:**\r\n\r\n> Added Item(s): Number=2\r\n> Added Item(s): Number=1\r\n> **Set Property: Max=0**\r\n> **Set Property: Max=2**\r\n> **Set Property: Max=2**\r\n> Using \"Message\" task from assembly \"Microsoft.Build.Tasks.Core, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\".\r\n> Task \"Message\" (TaskId:2)\r\n>   Task Parameter:Text=Max: 2 (TaskId:2)\r\n>   **Max: 2** (TaskId:2)",
        "createdAt": "2017-11-07T18:34:08Z",
        "updatedAt": "2017-11-07T21:13:44Z",
        "author": {
          "login": "Adam-S-Daniel"
        }
      }
    ]
  }
}