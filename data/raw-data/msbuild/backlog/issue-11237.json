{
  "number": 11237,
  "title": ".NET 10: odd `<ItemGroup>` behavior if directory that has parenthesis",
  "body": "### Issue Description\n\nWe're trying to get on .NET 10 here:\n* https://github.com/dotnet/android/pull/9395\n\nWe are currently blocked on this `<ItemGroup>` not working as expected:\n\nhttps://github.com/dotnet/sdk/blob/e847db398b6ffcbaa94ea85dee7a84c6480d3da5/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.Sdk.DefaultItems.props#L82-L90\n\nWhich results in this value missing a `%(RuntimePackLabels)` item metadata, even though `$(UseMonoRuntime)` is `true`:\n\n![Image](https://github.com/user-attachments/assets/a95b83f3-912b-4934-8a27-75e712fda622)\n\nHowever, if I add a log message, such as:\n```xml\n<_Logging Include=\"UseMonoRuntime=$(UseMonoRuntime);_TargetFrameworkVersionWithoutV=$(_TargetFrameworkVersionWithoutV)\" />\n```\nIt prints values as expected:\n\n![Image](https://github.com/user-attachments/assets/65c79748-d4f3-4cbc-86b6-bf908cd728a6)\n\n### Steps to Reproduce\n\nI am unable to make a small repro, this example works fine:\n```xml\n<Project>\n  <PropertyGroup>\n    <_DotNetSdk>D:\\dotnet-sdk-10.0.100-alpha.1.25056.1-win-x64\\sdk\\10.0.100-alpha.1.25056.1\\</_DotNetSdk>\n    <TargetFramework>net10.0</TargetFramework>\n    <TargetFrameworkIdentifier>.NETCoreApp</TargetFrameworkIdentifier>\n    <TargetFrameworkVersion>v10.0</TargetFrameworkVersion>\n    <_TargetFrameworkVersionWithoutV>$(TargetFrameworkVersion.TrimStart('vV'))</_TargetFrameworkVersionWithoutV>\n  </PropertyGroup>\n  <Import Project=\"$(_DotNetSdk)Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.DefaultItems.props\" />\n  <Target Name=\"Print\">\n    <Message Text=\"%(FrameworkReference.Identity) RuntimePackLabels=%(FrameworkReference.RuntimePackLabels)\" Importance=\"High\" />\n  </Target>\n  <PropertyGroup>\n    <UseMonoRuntime>true</UseMonoRuntime>\n  </PropertyGroup>\n</Project>\n```\n\n```\n> & \"D:\\dotnet-sdk-10.0.100-alpha.1.25056.1-win-x64\\dotnet.exe\" build foo.targets -tl:off -bl -t:Print\n  Microsoft.NETCore.App RuntimePackLabels=Mono\n\nBuild succeeded.\n    0 Warning(s)\n    0 Error(s)\n\nTime Elapsed 00:00:00.05\n```\n\nSo, it must be related to a larger build with lots of item groups?\n\nBest repro I have, is to build an Android project on the PR above...\n\n### Expected Behavior\n\nAfter project evaluation, we should have an item like:\n```xml\n<FrameworkReference Include=\"Microsoft.NETCore.App\" RuntimePackLabels=\"Mono\" />\n```\n\n### Actual Behavior\n\nAfter project evaluation, we are missing `%(RuntimePackLabels)` for:\n```xml\n<FrameworkReference Include=\"Microsoft.NETCore.App\" />\n```\n\n### Analysis\n\nHere is an example `.binlog`, if you search for `FrameworkReference`:\n\n[build.zip](https://github.com/user-attachments/files/18336214/build.zip)\n\nI made these changes in this log:\n```diff\n    <!-- Allow opt-in to Mono runtime pack for .NET 6.0 or higher -->\n    <FrameworkReference Update=\"Microsoft.NETCore.App\"\n                        RuntimePackLabels=\"Mono\"\n--                      Condition=\"'$(UseMonoRuntime)' == 'true' And ('$(_TargetFrameworkVersionWithoutV)' != '') And ('$(_TargetFrameworkVersionWithoutV)' >= '6.0')\"\n                         />\n++<_Logging Include=\"UseMonoRuntime=$(UseMonoRuntime);_TargetFrameworkVersionWithoutV=$(_TargetFrameworkVersionWithoutV)\" />\n```\n\n### Versions & Configurations\n\nWe've seen this behavior with the following .NET SDKs:\n* 10.0.100-alpha.1.25056.1\n* 10.0.100-alpha.1.24573.1\n\nOn both Windows and macOS, local and CI.",
  "state": "CLOSED",
  "createdAt": "2025-01-07T17:14:22Z",
  "updatedAt": "2025-02-19T16:41:24Z",
  "closedAt": "2025-02-19T16:41:23Z",
  "author": {
    "login": "jonathanpeppers"
  },
  "milestone": null,
  "assignees": {
    "nodes": [
      {
        "login": "YuliiaKovalova"
      }
    ]
  },
  "labels": [
    "Partner request",
    "triaged"
  ],
  "comments": {
    "nodes": [
      {
        "body": "I'm not sure how to verify this from the binlog, but I suspect it's doing a string comparison with this condition:\n('$(_TargetFrameworkVersionWithoutV)' >= '6.0')\n\nAnd 10.0 < 6.0 because 1 < 6.\n\nI'll try to reproduce this as described then see if I can figure out how to modify your code to use the version comparison function built into MSBuild and see if it starts working.\n\n/cc: @akoeplinger as he mentioned this being a blocker for a PR that I want in \ud83d\ude42",
        "createdAt": "2025-01-08T23:49:00Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "Actually, since the first condition (including that it was > 3.0) was true, I think I was probably wrong.",
        "createdAt": "2025-01-09T00:05:44Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "Yeah that's unrelated. In the binlog from @jonathanpeppers you can see that the condition was **removed completely**, yet it still didn't work so somehow `Update` is broken.",
        "createdAt": "2025-01-09T11:52:52Z",
        "author": {
          "login": "akoeplinger"
        }
      },
      {
        "body": "this is holding Android, and holding MAUI, do we have a workaround or something that Android can use to get builds flowing to other repos? ",
        "createdAt": "2025-01-09T12:00:27Z",
        "author": {
          "login": "rmarinho"
        }
      },
      {
        "body": "@akoeplinger discovered something odd about the issue, if we move the project directory from:\n\n* `bin\\TestDebug\\temp\\CheckSignApk(True,True)`\n\nTo:\n\n* `bin\\TestDebug\\temp\\CheckSignApkTrueTrue`\n\nThen this problem goes away.\n\nTrying this out on CI, but we might still have other failures in integration tests that specifically use characters like `(` and `)`.",
        "createdAt": "2025-01-09T14:42:01Z",
        "author": {
          "login": "jonathanpeppers"
        }
      },
      {
        "body": "@Forgind I reduced it down to this sample project:\n\n```xml\n<Project Sdk=\"Microsoft.NET.Sdk\">\n\n  <PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>net10.0</TargetFramework>\n    <UseMonoRuntime>true</UseMonoRuntime>\n  </PropertyGroup>\n\n  <Target Name=\"Foo\" BeforeTargets=\"Build\">\n    <Message Text=\"Labels: @(FrameworkReference->Metadata('RuntimePackLabels'))\" Importance=\"High\" />\n  </Target>\n\n</Project>\n```\n\nRun this with `dotnet build -tl:off` and it will print\n>   Labels: Mono\n\nRun it in a directory that has parenthesis and it will print:\n>   Labels:",
        "createdAt": "2025-01-09T14:48:32Z",
        "author": {
          "login": "akoeplinger"
        }
      },
      {
        "body": "I managed to get it to not need the mono runtime and gave the Item we're looking for a more pointed description.\n\nApparently it has nothing to do with Update or Metadata, either, as I was able to reproduce the same problem with just Include.\n\n```csproj\n<Project Sdk=\"Microsoft.NET.Sdk\">\n\n  <PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>net9.0</TargetFramework>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <Itezfz Include=\"Program.cs\" />\n  </ItemGroup>\n\n  <Target Name=\"Foo\" BeforeTargets=\"Build\">\n    <Message Text=\"Labels: @(Itezfz)\" Importance=\"High\" />\n  </Target>\n\n</Project>\n```\n",
        "createdAt": "2025-01-09T18:37:13Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "It isn't even showing up in the binlog, nor is it throwing an exception:\n![Image](https://github.com/user-attachments/assets/cf9315dc-c3e8-4b08-a203-648748ae864b)\n",
        "createdAt": "2025-01-09T18:39:57Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "I found that the LazyItemEvaluator.IncludeOperation was being created and added to a list of operations to eventually evaluate properly. Inspecting it at that point, it looked right/similar to other operations. I then tried to find it when it actually evaluated the operations, and it was mysteriously missing (or my debugger failed to break on my conditional breakpoint when it showed up, at least). All this happened without any user-visible errors.",
        "createdAt": "2025-01-10T01:31:39Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "Also, just one parenthesis suffices in the path.",
        "createdAt": "2025-01-10T01:36:53Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "Your examples with parenthesis are very useful, thanks a lot! \n\nI know what's going on here. \n\nWe put a not-normalized path in the dictionary\nhttps://github.com/dotnet/msbuild/blob/ec6b2a31a9388c298c4cab5be34ec2402372c5ce/src/Build/Evaluation/LazyItemEvaluator.cs#L387\n\nand later attempt to pull from it a normalized version\nhttps://github.com/dotnet/msbuild/blob/ec6b2a31a9388c298c4cab5be34ec2402372c5ce/src/Build/Evaluation/LazyItemEvaluator.cs#L443\n\nIn runtime it looks like this:\nwe put `C:\\msbuild\\msbuild_yk\\msbuild\\artifacts\\bin\\bootstrap\\core\\CheckSignApk%28\\Microsoft.NETCore.App` \nand attempt to pull `C:\\msbuild\\msbuild_yk\\msbuild\\artifacts\\bin\\bootstrap\\core\\CheckSignApk(\\Microsoft.NETCore.App`\n\nI am working on the fix now,",
        "createdAt": "2025-01-16T14:38:35Z",
        "author": {
          "login": "YuliiaKovalova"
        }
      },
      {
        "body": "is this on preview1? ",
        "createdAt": "2025-01-31T12:06:48Z",
        "author": {
          "login": "rmarinho"
        }
      },
      {
        "body": "> is this on preview1?\n\nit should be an old bug, not a regression.",
        "createdAt": "2025-01-31T12:31:12Z",
        "author": {
          "login": "YuliiaKovalova"
        }
      },
      {
        "body": "@YuliiaKovalova  I was asking if the fix for this is on net10 preview1 or only preview2 , did it got in before branching ? ",
        "createdAt": "2025-01-31T14:08:40Z",
        "author": {
          "login": "rmarinho"
        }
      },
      {
        "body": "> it should be an old bug, not a regression.\n\nWe saw this as a regression going from .NET 9 to .NET 10, projects that used to build stopped building successfully.",
        "createdAt": "2025-01-31T14:38:00Z",
        "author": {
          "login": "jonathanpeppers"
        }
      },
      {
        "body": "> > it should be an old bug, not a regression.\n> \n> We saw this as a regression going from .NET 9 to .NET 10, projects that used to build stopped building successfully.\n\nplease let us know if the fix helps you once .net 10 preview 2 is available .",
        "createdAt": "2025-01-31T14:54:08Z",
        "author": {
          "login": "YuliiaKovalova"
        }
      },
      {
        "body": "We might be able to try it out here:\n* https://github.com/dotnet/android/pull/9726\n\nBut there are some other issues to investigate to get this one green.",
        "createdAt": "2025-01-31T14:55:26Z",
        "author": {
          "login": "jonathanpeppers"
        }
      },
      {
        "body": "hi, we were just testing moving to use 9.0.200 sdk and got this error there to. This worked fine on 9.0.100 sdk.\n\nhere s the binlog.\n\n[build-133838540688756900.binlog.zip](https://github.com/user-attachments/files/18772819/build-133838540688756900.binlog.zip)",
        "createdAt": "2025-02-12T19:03:48Z",
        "author": {
          "login": "rmarinho"
        }
      },
      {
        "body": "Hi @rmarinho ,\n\nThe fix is part of .net 10 preview. Please validate it there.\nI mentioned it above, this issue looked like an old one: https://github.com/dotnet/msbuild/issues/11237#issuecomment-2627140865",
        "createdAt": "2025-02-12T19:21:39Z",
        "author": {
          "login": "YuliiaKovalova"
        }
      },
      {
        "body": "> hi, we were just testing moving to use 9.0.200 sdk and got this error there to. This worked fine on 9.0.100 sdk.\n> \n> here s the binlog.\n> \n> [build-133838540688756900.binlog.zip](https://github.com/user-attachments/files/18772819/build-133838540688756900.binlog.zip)\n\nBy the way, the failed task comes from sdk `ResolveRuntimePackAssets` \n@rainersigwald can we do something here or it's better to reroute?",
        "createdAt": "2025-02-12T19:32:28Z",
        "author": {
          "login": "YuliiaKovalova"
        }
      },
      {
        "body": "@YuliiaKovalova we've got another very similar report from a WebAssembly user on the 9.0.200 SDK in https://github.com/dotnet/sdk/issues/46802, can you please confirm this issue is present on the msbuild version there? 17.13.8+[cbc39bea8](https://github.com/dotnet/msbuild/commit/cbc39bea8)",
        "createdAt": "2025-02-18T19:42:46Z",
        "author": {
          "login": "akoeplinger"
        }
      },
      {
        "body": "hi @akoeplinger ,\n\nYes, the issue should be in 17.13.8. My fix comes to .net10.",
        "createdAt": "2025-02-19T08:21:43Z",
        "author": {
          "login": "YuliiaKovalova"
        }
      },
      {
        "body": "ok, do you plan to backport the fix?",
        "createdAt": "2025-02-19T08:57:36Z",
        "author": {
          "login": "akoeplinger"
        }
      },
      {
        "body": "I wouldn't plan to backport today. It will however be in 9.0.300.",
        "createdAt": "2025-02-19T15:14:59Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}