{
  "number": 1582,
  "title": "NuGet dependencies of .NET Standard library referenced from classic .NET app cannot be resolved at runtime with FileNotFoundException",
  "body": "This issue is reproduced in [that repository](https://github.com/OutSorcerer/nuget-dependencies-of-netstandard-library-bug). Just build it and run `ClassicConsoleApp`.\r\n\r\nLet's assume there is a simple .NET Standard library that has a dependency from Newtonsoft.Json NuGet package. And this library, in turn, is referenced by a classic .NET 4.6.1 console application. This solution builds successfully but during runtime when console application tries to instantiate a class from .NET standard library the following exception is thrown:\r\n\r\n```\r\nSystem.IO.FileNotFoundException: 'Could not load file or assembly 'Newtonsoft.Json, Version=9.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed' or one of its dependencies. The system cannot find the file specified.'\r\n```\r\n\r\nOne possible workaround is to manually copy `Newtonsoft.Json.dll` from `C:\\Users\\{username}\\.nuget\\packages\\newtonsoft.json\\9.0.1\\lib\\netstandard1.0` to the output folder of the classic .NET console application. Maybe msbuild should do it automatically.\r\n\r\nWhen referencing the same library but from .NET Core console application `Newtonsoft.Json.dll` is also missing in output folder but the program works as expected. In this case `Newtonsoft.Json` dependency is included in `CoreConsoleApp.deps.json` that is missing in output folder for the classic .NET application. \r\n\r\n`CoreConsoleApp.runtimeconfig.dev.json` file in .NET Core console app output folder with\r\n```\r\n{\r\n  \"runtimeOptions\": {\r\n    \"additionalProbingPaths\": [\r\n      \"C:\\\\Users\\\\{username}\\\\.nuget\\\\packages\"\r\n    ]\r\n  }\r\n}\r\n```\r\ncould be another hint for runtime to locate `Newtonsoft.Json.dll`. This file is also missing in classic .NET application's output.\r\n\r\nI am working with\r\n```\r\nMicrosoft (R) Build Engine version 15.1.458.808\r\n```\r\nand\r\n```\r\nMicrosoft Visual Studio Professional 2017 RC\r\nVersion 15.0.26020.0 D15REL\r\n```\r\n\r\nThis problem exists at least from August 2016 and was mentioned in [this](http://stackoverflow.com/questions/39132379/netstandard1-x-and-winforms-wpf-windows-could-not-load-file-or-assembly-sy?rq=1) and [this](http://stackoverflow.com/questions/41351534/nuget-packages-arent-copied-to-output-when-using-netstandard) stackoverflow questions but there are no solutions yet.\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
  "state": "CLOSED",
  "createdAt": "2017-01-18T11:14:41Z",
  "updatedAt": "2024-02-21T17:22:42Z",
  "closedAt": "2017-02-10T13:03:53Z",
  "author": {
    "login": "OutSorcerer"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "I believe this will be fixed once Visual Studio supports `PackageReference` instead of packages.config for .NET Framework projects: https://aka.ms/packagereferencesupport",
        "createdAt": "2017-01-18T16:20:15Z",
        "updatedAt": "2017-01-18T16:20:15Z",
        "author": {
          "login": "dsplaisted"
        }
      },
      {
        "body": "@dsplaisted But VS 2017 RC already supports it. At least partially because I added a `PackageReference` to `Newtonsoft.Json` in my example project from VS GUI. And I did not use `packages.config`.\r\n\r\nMoreover, when I build the example solution from the command line with `msbuild 15.1.458.808` it builds successfully but I get the same error at runtime so this issue is related to msbuild not only (or not at all) to VS .NET Core tooling.\r\n",
        "createdAt": "2017-01-19T13:55:22Z",
        "updatedAt": "2017-01-19T13:55:22Z",
        "author": {
          "login": "OutSorcerer"
        }
      },
      {
        "body": "Found another [workaround](http://stackoverflow.com/a/38686264) by creating NuGet package out of .NET Standard library.\r\nI hope @dsplaisted is right and `PackageReference` will work in best case after the next update of VS 2017 RC. \r\nHowever, it would be nice to have a link to related GitHub commits/issues/etc. if someone would provide such information.",
        "createdAt": "2017-01-26T12:37:29Z",
        "updatedAt": "2017-01-26T12:37:29Z",
        "author": {
          "login": "OutSorcerer"
        }
      },
      {
        "body": "@dsplaisted Unfortunately, the recent update of VS 2017 RC didn't fix this issue. \r\n\r\n[The repository with a repro](https://github.com/OutSorcerer/nuget-dependencies-of-netstandard-library-bug) is updated according to new csproj format.\r\n\r\n",
        "createdAt": "2017-01-31T12:04:30Z",
        "updatedAt": "2017-01-31T12:40:57Z",
        "author": {
          "login": "OutSorcerer"
        }
      },
      {
        "body": "Microsoft finally admitted this is a problem and will fix it (https://github.com/NuGet/Home/issues/4488) , expectantly, in NuGet version 4.0.1, the first update to NuGet 4 after VS 2017 ships.\r\n\r\nThe cleanest workaround now is to add `<RestoreProjectStyle>PackageReference</RestoreProjectStyle>` to a legacy project. \r\n\r\nHowever [according to Rob Relyea](https://github.com/NuGet/Home/issues/4488#issuecomment-277154422) MS will ignore this property after RTM so another workaround is `<PackageReference Update=\"PlaceholderToConvinceThisProjectToGetTransitivePackageReferenceFromProjectReferences\"/>`. ",
        "createdAt": "2017-02-10T13:03:53Z",
        "updatedAt": "2017-02-10T13:03:53Z",
        "author": {
          "login": "OutSorcerer"
        }
      },
      {
        "body": "As a work around, i modified the the NetStandard project as multi-target:\r\n\r\n               <TargetFrameworks>netstandard1.4;net461</TargetFrameworks>\r\n\r\nRebuild the solution and the referenced dll are copied to bin folder of the legacy console project\r\nand it's working fine.\r\nHave a look to that fork(develop):\r\nhttps://github.com/moh-hassan/nuget-dependencies-of-netstandard-library-bug",
        "createdAt": "2017-06-26T10:14:25Z",
        "updatedAt": "2017-06-26T10:14:51Z",
        "author": {
          "login": "moh-hassan"
        }
      },
      {
        "body": "Any update on this ?\r\n\r\nHaving the same problem today on a .Net Framework6.1 ConsoleApp referencing a .NetStandard2.0 Class lib project that uses EasyNetQ. \r\n\r\n> FileNotFoundException: Could not load file or assembly 'EasyNetQ, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null' or one of its dependencies. The system cannot find the file specified.\r\n\r\nThe only way i can get it to work is adding ` <TargetFrameworks>netstandard2.0;net461</TargetFrameworks>` as sugested by @moh-hassan .\r\n\r\nThanks all.",
        "createdAt": "2017-11-30T18:33:35Z",
        "updatedAt": "2017-11-30T18:33:35Z",
        "author": {
          "login": "FilipeDominguesGit"
        }
      },
      {
        "body": "Aha\uff0cFind a temp workgroud here",
        "createdAt": "2017-12-08T08:54:02Z",
        "updatedAt": "2017-12-08T08:54:02Z",
        "author": {
          "login": "CyberQin"
        }
      }
    ]
  }
}