{
  "number": 2530,
  "title": "Exec and (very) long commands on Windows",
  "body": "I've observed some problematic behavior when using the `Exec` task on Windows with a very long (~17000 characters) command string. There are a few points I've discovered:\r\n\r\n* `Exec` is documented as running through `cmd.exe` -- the command is not launched directly in a new process.\r\n* Additionally, the command itself is actually run through a batch script containing the command line and some extra commands. The script is launched via `cmd.exe`.\r\n\r\nError behavior:\r\n* `cmd.exe` has documented limits on command-line length. On relevant systems, the limit is [8191 characters](https://support.microsoft.com/en-us/help/830473/command-prompt-cmd--exe-command-line-string-limitation).\r\n* When an extremely long command is run directly with `cmd /c <command>`, you get an error message:  `The command line is too long.`\r\n* **When an extremely long command is embedded in a script and run indirectly through `cmd /c <scriptfile>`, you get very misleading and dangerous behavior.**\r\n\r\nIt appears that cmd.exe will attempt to run a command in a script file which is over the length limit, but will silently remove individual characters at the command length boundary. In my case, characters 8192 and 16383 are being silently deleted from the command, but the rest of the command line is unchanged. I spent several hours debugging this behavior, because I thought something was wrong in my app code.\r\n\r\nThe current state (silent and confusing errors) seems undesirable. Can we do one or both of the following?\r\n\r\n* Add an alternative task which launches processes directly: `DirectExec` or something like that. This could be written by anyone, but it might be generally useful enough to include in MSBuild.\r\n  * Is it feasible for this to just be an option on `Exec` itself?\r\n* Error out when a command is too long on Windows. We should be able to detect if a string is over the 8191 limit. If we do, we should not try to execute it given the above behavior.",
  "state": "OPEN",
  "createdAt": "2017-09-15T19:44:26Z",
  "updatedAt": "2024-02-21T16:35:44Z",
  "closedAt": null,
  "author": {
    "login": "mellinoe"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "@ericstj",
        "createdAt": "2017-09-15T19:44:43Z",
        "updatedAt": "2017-09-15T19:44:43Z",
        "author": {
          "login": "mellinoe"
        }
      },
      {
        "body": "> Add an alternative task which launches processes directly: DirectExec or something like that. \r\n\r\nSimilar proposal was discussed in https://github.com/Microsoft/msbuild/issues/399",
        "createdAt": "2017-09-19T14:13:12Z",
        "updatedAt": "2017-09-19T14:13:12Z",
        "author": {
          "login": "akoeplinger"
        }
      },
      {
        "body": "Ping - Any chances for the fix or other action?",
        "createdAt": "2018-07-24T07:22:34Z",
        "updatedAt": "2018-07-24T07:22:34Z",
        "author": {
          "login": "4creators"
        }
      },
      {
        "body": "Isn't the limit due to Windows API itself instead of cmd.exe ?",
        "createdAt": "2018-08-07T15:51:52Z",
        "updatedAt": "2018-08-07T15:51:52Z",
        "author": {
          "login": "rsaugier"
        }
      },
      {
        "body": "@rsaugier There are two distinct limits:\r\n\r\n* `cmd.exe` has a maximum command-line length limit of [8191 characters](https://support.microsoft.com/en-us/help/830473/command-prompt-cmd-exe-command-line-string-limitation)\r\n* Win32's `CreateProcess` has a maximum `lpCommandLine` length of [32,768 characters](https://docs.microsoft.com/en-us/windows/desktop/api/processthreadsapi/nf-processthreadsapi-createprocessa#parameters)\r\n\r\nThe `Exec` task writes and then executes a `.cmd` script, so it's subject to the smaller limit; the changes discussed here would raise it to the higher limit.",
        "createdAt": "2018-08-07T15:58:52Z",
        "updatedAt": "2018-08-07T15:58:52Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}