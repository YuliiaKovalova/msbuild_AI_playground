{
  "number": 6307,
  "title": "Reduce List<ProjectRootElement> allocations in Evaluator.cs",
  "body": "Evaluator.cs is too liberal allocating `List<ProjectRootElement>` unnecessarily",
  "state": "CLOSED",
  "createdAt": "2021-03-28T06:50:19Z",
  "updatedAt": "2024-02-21T17:01:40Z",
  "closedAt": "2021-11-26T08:18:59Z",
  "author": {
    "login": "KirillOsenkov"
  },
  "labels": [
    "Area: Performance",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "MichalPavlik"
      }
    ]
  },
  "milestone": {
    "title": "VS 17.1"
  },
  "comments": {
    "nodes": [
      {
        "body": "Labeling with size:1 as the cost of the initial investigation. Will open a follow-up issue if more work is identified.",
        "createdAt": "2021-10-12T12:18:11Z",
        "updatedAt": "2021-10-12T12:18:11Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "1) There are places where is the List allocated just to represent empty result. Most straightforward solution would be to use IEnumerable and assign `Enumerable<ProjectRootElement>.Empty` singleton for empty result.\r\n\r\n2) We could avoid more allocations with one collection per `EvaluateImportElement` invocation. This instance would be then passed to downstream methods for population. It's a bigger change than (1) because `ExpandAndLoadImports` is adding items to collection conditionally based on `containsWildcards` value.\r\n\r\n3) I was wondering how big is the `importedProjectRootElements` collection in `EvaluateImportElement`, so I did some measurements while building OrchadCore. `EvaluateImportElement` was invoked 26595x and the distribution is:\r\n\r\n0 items - 9975\r\n1 item - 16151\r\n2 items - 157\r\n5 items - 156\r\n8 items - 156\r\n\r\nThe majority here is 0 or 1 item. For these cases, we don't need to allocate a collection at all. We can create specialized collection, which can hold one item in a field and create underlying list only if needed. This would save allocations for size 0 and 1, but it has greater cost for larger sets. It's a speculative optimizations and we would need to gather measurements from more scenarios.",
        "createdAt": "2021-11-04T08:58:42Z",
        "updatedAt": "2021-11-04T09:00:50Z",
        "author": {
          "login": "MichalPavlik"
        }
      },
      {
        "body": "For materialised collections consider `ImmutableArray<T>` over `IEnumerable<T>`.\r\n\r\n- It is backed by arrays, so very compact\r\n- It has efficient index based lookup\r\n- It has zero-allocation enumeration\r\n- It already defines a singleton empty value\r\n- It is a semi-standard collection\r\n",
        "createdAt": "2021-11-04T10:05:04Z",
        "updatedAt": "2021-11-04T10:05:04Z",
        "author": {
          "login": "drewnoakes"
        }
      },
      {
        "body": "Thanks Drew, that's a valid point and it worth to use `ImmutableArray<T>`.\r\n`List<T>` is also baked by array, but I guess your point is that `List<T>` has one more allocation.\r\nIIRC `List<T>` should also have zero allocation enumeration, because `GetEnumerator()` returns value type based enumerator (unless the explicit interface implementation is called). ",
        "createdAt": "2021-11-04T12:20:19Z",
        "updatedAt": "2021-11-04T12:20:19Z",
        "author": {
          "login": "MichalPavlik"
        }
      },
      {
        "body": "Another difference between `List<>` and `ImmutableArray<>` is that lists commonly have empty items at the end of their array (size vs. capacity).\r\n\r\nYes `List<>` gives allocation-free enumeration, but only if the declared type is `List<>`. As soon as you cast it to `IEnumerable<>` as you suggest, you will see allocations during enumeration. Having mutable types on public APIs should be avoided where possible. Using `ImmutableArray<>` on APIs is, in my opinion, a nice option for these reasons. If there is no public API impact here, that's less of a concern.",
        "createdAt": "2021-11-04T22:51:58Z",
        "updatedAt": "2021-11-04T23:03:54Z",
        "author": {
          "login": "drewnoakes"
        }
      }
    ]
  }
}