{
  "number": 4368,
  "title": "Deadlock in PropertyDictionary equality",
  "body": "I was running tests locally when I noticed a hang. I attached a debugger and see that it's two `PropertyDictionary` instances trying to `.Equals` against each other:\r\n\r\n```sh-session\r\n> Debug.ListThreads\r\n Index Id     Name                           Location\r\n--------------------------------------------------------------------------------\r\n*1     13400  Worker Thread                  Microsoft.Build.Collections.PropertyDictionary<Microsoft.Build.Execution.ProjectPropertyInstance>.this[string].get\r\n 2     15468  Worker Thread                  System.Collections.Concurrent.ConcurrentDictionary<Microsoft.Build.BackEnd.ConfigurationMetadata, object>.TryRemoveInternal\r\n 3     13888  <No Name>                      <no stack frames>\r\n 4     15948  <No Name>                      <no stack frames>\r\n 5     12528  Main Thread                    System.Collections.Concurrent.ConcurrentDictionary<System.__Canon, System.__Canon>.AcquireLocks\r\n 6     8600   Worker Thread                  Microsoft.Build.Collections.PropertyDictionary<Microsoft.Build.Execution.ProjectPropertyInstance>.this[string].get\r\n 7     20000  <No Name>                      Xunit.Sdk.MessageBus.ReporterWorker\r\n 8     16780  <No Name>                      <no stack frames>\r\n 9     11244  <No Name>                      <no stack frames>\r\n 10    10444  <No Name>                      <no stack frames>\r\n> Debug.ListCallStack /ShowLineOffset:yes /Thread:1\r\nCallstack for Thread 1 (Thread Id: 13400 (0x3458)):\r\n Index  Function\r\n--------------------------------------------------------------------------------\r\n 1      Microsoft.Build.dll!Microsoft.Build.Collections.PropertyDictionary<Microsoft.Build.Execution.ProjectPropertyInstance>.this[string].get(string name) Line 189\r\n*2      Microsoft.Build.dll!Microsoft.Build.Collections.PropertyDictionary<Microsoft.Build.Execution.ProjectPropertyInstance>.Equals(Microsoft.Build.Collections.PropertyDictionary<Microsoft.Build.Execution.ProjectPropertyInstance> other) Line 286\r\n 3      Microsoft.Build.dll!Microsoft.Build.BackEnd.ConfigurationMetadata.InternalEquals(Microsoft.Build.BackEnd.ConfigurationMetadata other) Line 165\r\n 4      Microsoft.Build.dll!Microsoft.Build.BackEnd.ConfigurationMetadata.Equals(Microsoft.Build.BackEnd.ConfigurationMetadata other) Line 148\r\n 5      System.Private.CoreLib.dll!System.Collections.Generic.GenericEqualityComparer<Microsoft.Build.BackEnd.ConfigurationMetadata>.Equals(Microsoft.Build.BackEnd.ConfigurationMetadata x, Microsoft.Build.BackEnd.ConfigurationMetadata y)\r\n 6      System.Collections.Concurrent.dll!System.Collections.Concurrent.ConcurrentDictionary<Microsoft.Build.BackEnd.ConfigurationMetadata, object>.TryRemoveInternal(Microsoft.Build.BackEnd.ConfigurationMetadata key, out object value, bool matchValue, object oldValue)\r\n 7      System.Collections.Concurrent.dll!System.Collections.Concurrent.ConcurrentDictionary<Microsoft.Build.BackEnd.ConfigurationMetadata, object>.TryRemove(Microsoft.Build.BackEnd.ConfigurationMetadata key, out object value)\r\n 8      Microsoft.Build.dll!Microsoft.Build.Experimental.Graph.ProjectGraph.FindGraphNodes.AnonymousMethod__1(System.Threading.Tasks.Task _) Line 705\r\n 9      System.Private.CoreLib.dll!System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state)\r\n 10     System.Private.CoreLib.dll!System.Threading.Tasks.Task.ExecuteWithThreadLocal(ref System.Threading.Tasks.Task currentTaskSlot)\r\n 11     System.Private.CoreLib.dll!System.Threading.ThreadPoolWorkQueue.Dispatch()\r\n\r\n> Debug.ListCallStack /ShowLineOffset:yes /Thread:6\r\nCallstack for Thread 6 (Thread Id: 8600 (0x2198)):\r\n Index  Function\r\n--------------------------------------------------------------------------------\r\n 1      Microsoft.Build.dll!Microsoft.Build.Collections.PropertyDictionary<Microsoft.Build.Execution.ProjectPropertyInstance>.this[string].get(string name) Line 189\r\n 2      Microsoft.Build.dll!Microsoft.Build.Collections.PropertyDictionary<Microsoft.Build.Execution.ProjectPropertyInstance>.Equals(Microsoft.Build.Collections.PropertyDictionary<Microsoft.Build.Execution.ProjectPropertyInstance> other) Line 286\r\n 3      Microsoft.Build.dll!Microsoft.Build.BackEnd.ConfigurationMetadata.InternalEquals(Microsoft.Build.BackEnd.ConfigurationMetadata other) Line 165\r\n 4      Microsoft.Build.dll!Microsoft.Build.BackEnd.ConfigurationMetadata.Equals(Microsoft.Build.BackEnd.ConfigurationMetadata other) Line 148\r\n 5      System.Private.CoreLib.dll!System.Collections.Generic.GenericEqualityComparer<Microsoft.Build.BackEnd.ConfigurationMetadata>.Equals(Microsoft.Build.BackEnd.ConfigurationMetadata x, Microsoft.Build.BackEnd.ConfigurationMetadata y)\r\n 6      System.Collections.Concurrent.dll!System.Collections.Concurrent.ConcurrentDictionary<Microsoft.Build.BackEnd.ConfigurationMetadata, Microsoft.Build.Experimental.Graph.ProjectGraphNode>.TryAddInternal(Microsoft.Build.BackEnd.ConfigurationMetadata key, int hashcode, Microsoft.Build.Experimental.Graph.ProjectGraphNode value, bool updateIfExists, bool acquireLock, out Microsoft.Build.Experimental.Graph.ProjectGraphNode resultingValue)\r\n 7      System.Collections.Concurrent.dll!System.Collections.Concurrent.ConcurrentDictionary<Microsoft.Build.BackEnd.ConfigurationMetadata, Microsoft.Build.Experimental.Graph.ProjectGraphNode>.this[Microsoft.Build.BackEnd.ConfigurationMetadata].set(Microsoft.Build.BackEnd.ConfigurationMetadata key, Microsoft.Build.Experimental.Graph.ProjectGraphNode value)\r\n 8      Microsoft.Build.dll!Microsoft.Build.Experimental.Graph.ProjectGraph.CreateNewNode(Microsoft.Build.BackEnd.ConfigurationMetadata configurationMetadata, Microsoft.Build.Evaluation.ProjectCollection projectCollection, Microsoft.Build.Experimental.Graph.ProjectGraph.ProjectInstanceFactoryFunc projectInstanceFactory, System.Collections.Concurrent.ConcurrentDictionary<Microsoft.Build.BackEnd.ConfigurationMetadata, Microsoft.Build.Experimental.Graph.ProjectGraphNode> allParsedProjects) Line 647\r\n 9      Microsoft.Build.dll!Microsoft.Build.Experimental.Graph.ProjectGraph.FindGraphNodes.AnonymousMethod__0() Line 676\r\n 10     System.Private.CoreLib.dll!System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state)\r\n 11     System.Private.CoreLib.dll!System.Threading.Tasks.Task.ExecuteWithThreadLocal(ref System.Threading.Tasks.Task currentTaskSlot)\r\n 12     System.Private.CoreLib.dll!System.Threading.ThreadPoolWorkQueue.Dispatch()\r\n```\r\n\r\nThat's a deadlock because `.Equals` locks `this._properties` and then uses an indexer into `other[key]`, but the indexer locks `this._properties`:\r\n\r\nhttps://github.com/microsoft/msbuild/blob/431919a7a99dda21a7a4c0a7fab2726a289f6c4b/src/Build/Collections/PropertyDictionary.cs#L282-L292\r\n\r\nhttps://github.com/microsoft/msbuild/blob/431919a7a99dda21a7a4c0a7fab2726a289f6c4b/src/Build/Collections/PropertyDictionary.cs#L189-L192\r\n\r\nHere we're doing a ton of these comparisons to get hashtable lookups into the `tasksInProgress` dictionary (of `ConfigurationMetadata` which has a `GlobalProperties` dictionary) during static graph creation, but I think this could happen in other times/places.",
  "state": "CLOSED",
  "createdAt": "2019-05-10T22:58:16Z",
  "updatedAt": "2024-12-03T15:03:50Z",
  "closedAt": "2024-12-03T15:03:49Z",
  "author": {
    "login": "rainersigwald"
  },
  "labels": [
    "bug",
    "Area: Engine",
    "Area: Static Graph"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Backlog"
  },
  "comments": {
    "nodes": [
      {
        "body": "Closing #4374, which attempted to fix this but ran into problems. Probably worth picking up again.",
        "createdAt": "2020-03-17T20:46:50Z",
        "updatedAt": "2020-03-17T20:46:50Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Came across this deadlock with a slightly different call stack in higher-order build system:\r\n![image](https://github.com/dotnet/msbuild/assets/89041446/da267c81-e9d1-464b-a399-39f3ff90a2fb)\r\n",
        "createdAt": "2023-12-21T18:49:40Z",
        "updatedAt": "2023-12-21T18:49:40Z",
        "author": {
          "login": "mruxmohan4"
        }
      },
      {
        "body": "We don't have enough information to investigate this issue after such a long time.",
        "createdAt": "2024-12-03T15:03:49Z",
        "updatedAt": "2024-12-03T15:03:49Z",
        "author": {
          "login": "maridematte"
        }
      }
    ]
  }
}