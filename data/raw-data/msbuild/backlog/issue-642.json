{
  "number": 642,
  "title": "UsingTask within a Target?",
  "body": "Is it possible to have a UsingTask definition within a target? \n\nMy use-case is that I have a custom task within the same solution as the code that it is being applied to. Both co-evolve, so I'd like to have the custom task as a project reference of the projects that it's being applied to, and always use the latest build of the custom task for the consecutive projects of the same build. Is something like that possible, and of so how?\n\nThanks!\n",
  "state": "CLOSED",
  "createdAt": "2016-05-20T21:50:59Z",
  "updatedAt": "2024-02-21T17:28:08Z",
  "closedAt": "2017-02-22T20:34:10Z",
  "author": {
    "login": "steffenloesch"
  },
  "labels": [
    "Postponed",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "No, this isn't currently possible. `UsingTask`s are handled in [pass 4](https://github.com/Microsoft/msbuild/blob/1ace8e6ec1bf74fba1f333f3d86644a641dbf14d/src/XMakeBuildEngine/Evaluation/Evaluator.cs#L831-L835) of the evaluator, before `Targets` are thought about and before the build itself (that is, target/task execution) even starts.\n\nThis is a reasonable feature request, though. I don't see a conceptual problem with doing it.\n\nI can think of a couple of possible (untested) workarounds: \n- Make your actual task assembly a teeny-tiny shim that just calls out to a DLL with the real implementation. Then make sure the DLL is updated before invoking the task for the first time in a build with the appropriate project references.\n- use `CodeTaskFactory` to build your task. You can point to files on disk, and MSBuild itself will handle building the task assembly for you, so it's \"always\" up to date. Of course, this makes developing and debugging the task more difficult.\n",
        "createdAt": "2016-05-20T22:07:51Z",
        "updatedAt": "2016-05-20T22:07:51Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Closing because this has workarounds and seems unlikely to come to the top of the feature-request list in the foreseeable future. If anyone would like to argue that it should, feel free to make a case.",
        "createdAt": "2017-02-22T20:34:10Z",
        "updatedAt": "2017-02-22T20:34:10Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald, this is something that could make source-build significantly simple for WPF on .NET Core. \r\n\r\nI'm trying to puzzle out the best way to do markup compilation using (a) PresenationBuildTasks (PBT) that is built in our repo and (b) copy of Microsoft.WinFx.targets in our repo that we ship in the Sdk. \r\n\r\nIdeally, we'd build our projects (that require Xaml compilation) as Net.Sdk projects, import Microsoft.WinFx.targets, and ProjectReference the WPF assemblies we need during build - so far, so good. \r\n\r\nThe trick is in having the full path to PresentationBuildTasks before we import Microsoft.winfx.targets, so that <UsingTask> resolves correctly. Right now, that requires calling an MSBuild task on PresentationBuildTasks.csproj and collecting the resultant path to the assembly, and then passing it along to UsingTask - something that's not possible. \r\n\r\nIf UsingTask were allowed within targets, I could write a preamble targets that runs before any of the PBT supplied targets, checks that <UsingTask> was called (a bool flag could be set), and if not, call UsingTask from within that preamble. \r\n\r\nAs is, I can try to make it all work using the existing infrastructure and the workarounds you've outlined here, but it is going to look very complicated. ",
        "createdAt": "2019-02-06T01:59:31Z",
        "updatedAt": "2019-02-06T01:59:31Z",
        "author": {
          "login": "vatsan-madhavan"
        }
      },
      {
        "body": "I just replied to a similar question internally:\r\n\r\nOne option would be to add a target after `ResolveProjectReferences` and before the target that uses the task that copies the output of the task project (from the output of RPR) to a known location under the current project\u2019s obj directory (something like `$(IntermediateOutputPath)\\TaskAssembly.dll`), and use that in the `UsingTask `(probably by defining a property for both the destination of the copy and the using. This takes advantage of the fact that the assembly isn't loaded until a task in it is _used_, so the assembly doesn't need to exist at evaluation time.",
        "createdAt": "2019-02-06T16:21:51Z",
        "updatedAt": "2019-02-06T16:21:51Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> assembly isn't loaded until a task in it is _used_\r\n\r\nThat's a great tip - thanks!",
        "createdAt": "2019-02-06T18:34:44Z",
        "updatedAt": "2019-02-06T18:34:44Z",
        "author": {
          "login": "vatsan-madhavan"
        }
      },
      {
        "body": "> I just replied to a similar question internally:\r\n> \r\n> One option would be to add a target after `ResolveProjectReferences` and before the target that uses the task that copies the output of the task project (from the output of RPR) to a known location under the current project\u2019s obj directory (something like `$(IntermediateOutputPath)\\TaskAssembly.dll`), and use that in the `UsingTask `(probably by defining a property for both the destination of the copy and the using. This takes advantage of the fact that the assembly isn't loaded until a task in it is _used_, so the assembly doesn't need to exist at evaluation time.\r\n\r\nI'm just curious, how would that look like? And is this just an idea/theory, or does this really work?\r\n",
        "createdAt": "2019-04-08T14:01:35Z",
        "updatedAt": "2019-04-08T14:01:35Z",
        "author": {
          "login": "biohazard999"
        }
      },
      {
        "body": "@biohazard999 \r\n\r\nI was able to use this pattern successfully. See [Pbt.targets](https://github.com/dotnet/wpf/blob/master/eng/WpfArcadeSdk/tools/Pbt.targets) for how we did it in WPF to use locally built PresentationBuildTasks.dll to run markup compilation for building WPF product assemblies like System.Windows.Controls.Ribbon.dll etc. \r\n",
        "createdAt": "2019-04-08T19:06:50Z",
        "updatedAt": "2019-04-08T19:07:45Z",
        "author": {
          "login": "vatsan-madhavan"
        }
      }
    ]
  }
}