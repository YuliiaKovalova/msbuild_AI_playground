{
  "number": 5205,
  "title": "List of supported extension types supported by MSBuild? ",
  "body": "Is there a list of known file extensions that MSBuild accepts? Something similar to this [StackOverflow Question](https://stackoverflow.com/a/2012217/2009612)?\r\n\r\nIf not, we could probably turn this StackOverflow question into a Wiki item for the repository. ",
  "state": "OPEN",
  "createdAt": "2020-03-27T13:46:47Z",
  "updatedAt": "2024-02-21T16:29:43Z",
  "closedAt": null,
  "author": {
    "login": "FilBot3"
  },
  "labels": [
    "help wanted",
    "Area: Documentation",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Backlog"
  },
  "comments": {
    "nodes": [
      {
        "body": "MSBuild generally doesn't care about extension; you can build a file with any name and within it import a file with any name. The only special casing I'm aware of is around files named `*.sln` (since a Visual Studio solution isn't an MSBuild file but is understood by MSBuild). The answers in the SO question are the standard conventions, and I do think it'd be reasonable to document those (and why to choose for example `.props` versus `.targets`).",
        "createdAt": "2020-04-01T16:19:29Z",
        "updatedAt": "2020-04-01T16:19:29Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Cool! I started to question it when I saw things like `.csproj` or `.vbproj` or `.fsproj`. I didn't know if you needed to specify the file every time of if there were conventions for the types of files MSBuild would pick up and operate on. I imagine you could simply make everything a `.proj` file for MSBuild and have the `.sln` file reference those. Using `dotnet` command has made it much easier to access those. ",
        "createdAt": "2020-04-14T19:07:20Z",
        "updatedAt": "2020-04-14T19:07:20Z",
        "author": {
          "login": "FilBot3"
        }
      },
      {
        "body": "Watch out for `SolutionProjectType.KnownToBeMSBuildFormat` I myself have written code similar to the following:\r\n\r\nhttps://github.com/microsoft/msbuild/blob/master/src/Build/Graph/GraphBuilder.cs#L255-L258\r\n\r\nHowever at my company we are heavily dependent upon a project type that extends the platform (*.synproj) that is not recognized as a type supported.\r\n\r\nFor code we use we've resorted to maintain our own listing, which can be painful when a new type is introduced (for example `.sqlproj` or `.rptproj`).\r\n\r\nHere's a recent commit I made to a Project Dependency Graph Generator we open sourced showing this hack:\r\n\r\nhttps://github.com/aolszowka/MsBuildProjectReferenceDependencyGraph/blob/bbdc1a23d9cb15df11d51f1c965794dd947caa8c/MsBuildProjectReferenceDependencyGraph/MSBuildUtilities.cs#L47-L72\r\n\r\nIt would be nice if there was a type of registration mechanism that implementers could opt-in, but that does nothing to fix already shipped code (Microsoft's Raymond Chen talks about these types of issues all the time).\r\n",
        "createdAt": "2020-04-30T18:40:37Z",
        "updatedAt": "2020-04-30T18:40:37Z",
        "author": {
          "login": "aolszowka"
        }
      }
    ]
  }
}