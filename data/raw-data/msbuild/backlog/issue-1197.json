{
  "number": 1197,
  "title": "GenerateResources task is not incremental on .NET Core",
  "body": "The `CoreResGen` target is [not incremental](https://github.com/Microsoft/msbuild/blob/672169fed3a16218f8301391f956c8279fc7dae7/src/XMakeTasks/Microsoft.Common.CurrentVersion.targets#L2768-L2770), because it assumes that the `GenerateResources` task handles incrementality internally. It does . . . on full framework, when `FEATURE_BINARY_SERIALIZATION` is enabled and [`NeedToRebuildSourceFile`](https://github.com/Microsoft/msbuild/blob/575424a207f8b46b8299b48fdb930a4fb99ac402/src/XMakeTasks/GenerateResource.cs#L1410) gets called.\n\nOn .NET Core, though, that codepath falls back to the conservative-but-slow \"always just rebuild\".\n\n(noticed by @eerhardt in https://github.com/dotnet/sdk/issues/284)\n",
  "state": "CLOSED",
  "createdAt": "2016-10-14T21:24:32Z",
  "updatedAt": "2024-02-21T17:25:11Z",
  "closedAt": "2016-10-27T14:07:40Z",
  "author": {
    "login": "rainersigwald"
  },
  "labels": [
    ".NET Core",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "rainersigwald"
      }
    ]
  },
  "milestone": {
    "title": "Visual Studio 15 RC"
  },
  "comments": {
    "nodes": [
      {
        "body": "IIRC there's a plan to make binary serialization available everywhere (just not portable between .NET Core and Full Framework). If that is already done this might be easy. If not, we might have to devise a new serialization format \ud83d\udc4e \n",
        "createdAt": "2016-10-14T21:26:48Z",
        "updatedAt": "2016-10-14T21:26:48Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I believe binary serialization is coming to .NET Core with netstandard2.0. But that won't be available for a while yet. So we may have to devise a way around this for Dev15.\n\n/cc @stephentoub @terrajobst @ericstj\n",
        "createdAt": "2016-10-17T15:45:59Z",
        "updatedAt": "2016-10-17T15:45:59Z",
        "author": {
          "login": "eerhardt"
        }
      },
      {
        "body": "That's correct, binary serialization will come back.\n\n@danmosemsft, who is working on it and can provide an update where we are with it?\n",
        "createdAt": "2016-10-17T16:31:08Z",
        "updatedAt": "2016-10-17T16:31:08Z",
        "author": {
          "login": "terrajobst"
        }
      },
      {
        "body": "BinaryFormatter is already implemented for 1.2.  It's in master.  It works. And most of the core types that should be serializable now are, though there are still a bunch of types across corefx that need some work done to restore their serialization implementations.\n",
        "createdAt": "2016-10-17T16:33:39Z",
        "updatedAt": "2016-10-17T16:33:39Z",
        "author": {
          "login": "stephentoub"
        }
      },
      {
        "body": "@stephentoub: Sweet!\n\n@rainersigwald, what gurantees do you need for incremental build? I suppose you don't care about binary serialization having different output between .NET Framework and .NET Core?\n",
        "createdAt": "2016-10-17T23:43:38Z",
        "updatedAt": "2016-10-17T23:44:03Z",
        "author": {
          "login": "terrajobst"
        }
      },
      {
        "body": "@terrajobst it uses BinaryFormatter for 2 purposes\n\n1) To cache between builds the set of files if any that are linked to from within the .resx: http://index/#Microsoft.Build.Tasks.Core/ResGenDependencies.cs,183 ... cross FX serialization is not important.\n\n2) To deserialize types found within the resx in order to figure out whether they are in the GAC. If deserialization fails, they aren't, so it needs to process the resx in its own appdomain. It wants to avoid that as it's so slow. http://index/#Microsoft.Build.Tasks.Core/GenerateResource.cs,1821 That would need tobe cross FX, but it can remain ifdeffed out as we don't have resx's with such types. We do want to fix this later because creating an appdomain is slow and as we have it right now, it will always do it.\n\n3) ResourceReader/Writer itself will serialize/deserialize types as part of its work. I'm guessing that none of our resx's have such things (it's really a Winforms artefact) so we're getting away without that.\n",
        "createdAt": "2016-10-18T00:23:17Z",
        "updatedAt": "2016-10-18T00:23:17Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "Just realized we can't create AppDomains so that's not an issue. Another reason we shouldn't run on .resx's with serialized user types - we'll lock them.\n",
        "createdAt": "2016-10-18T00:26:52Z",
        "updatedAt": "2016-10-18T00:26:52Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "I think the ifdef can be narrowed to give us pretty good incremental build. Let me see.\n",
        "createdAt": "2016-10-18T00:27:35Z",
        "updatedAt": "2016-10-18T00:27:35Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "A sketch (or possibly the actual) fix for incrmentality without BinarySerialization is in the PR https://github.com/Microsoft/msbuild/pull/1202\n",
        "createdAt": "2016-10-18T00:42:04Z",
        "updatedAt": "2016-10-18T00:42:04Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "Ok, so my current understanding is:\n\n.NET Core assemblies cannot use linked resources (that's what it sounds like from comments @DamianEdwards made on https://github.com/dotnet/corefx/issues/8200 which is now https://github.com/dotnet/cli/issues/3695). This implies that it's fine to drop all of the code in `GenerateResources` that parses the resx and check incrementality as is-resx-newer-than-resources.\n\nThat could create a behavior difference when using .NET Core MSBuild to build assemblies for Desktop. CLI currently does that, but the plan has been to always use Desktop MSBuild if it's available.\n\nGiven this, I think it's ok to do something like #1202.\n\n@danmosemsft and others--is this a reasonable read on the situation?\n",
        "createdAt": "2016-10-18T16:32:56Z",
        "updatedAt": "2016-10-18T16:32:56Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald yes I think so. BTW I don't have cycles right now to test/commit #1202 ... for some reason I can't get MSBuild to actually build for me right now.\n",
        "createdAt": "2016-10-18T19:45:05Z",
        "updatedAt": "2016-10-18T19:45:05Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "Fixed in xplat packages from `15.1.0-preview-000358-00`\n",
        "createdAt": "2016-10-27T14:07:40Z",
        "updatedAt": "2016-10-27T14:07:40Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}