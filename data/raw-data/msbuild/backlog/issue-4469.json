{
  "number": 4469,
  "title": "VS2019 build tools on CI server fails to restore NuGet packages",
  "body": "When building our solution using a CI server and VS 2019 build tools, a previously working msbuild command no longer works.  VS2017 build tools successfully restores NuGet package references within the solution and then continues on with the build process.  All attempts to build the project locally have succeeded, even when using VS2019 build tools.  This issue only pops up when using our CI server using the VS2019 build tools specifically.\r\n\r\nOur current strategy to handle NuGet packages is to upload to the version control repository and then copy all packages to another directory to be used during building as if they were always a part of the project.  However, this relied on ```packages.config``` files using HintPaths.  I am attempting to find a solution that avoids packages.config files as you guys have mentioned many times that PackageReferences are the future for NuGet package management.  You can see my attempt at pointing NuGet to a local directory for a package source in the ```nuget.config``` file provided below.  From what I've read, it doesn't sound like there is much needed for a local NuGet source feed other than the directory follows the hierarchy structure.  While the \"Solution Packages\" feed would show up in the Visual Studio Solution Package Manager window and, when selected, will display all packages located in that directory, I'm unsure whether it has any affect on the restoration steps of the MSBuild command below.\r\n\r\nAs a side note, our CI server's Build Agents do not have network access so all package information needs to be loaded into memory before the build process can commence.  That is why the old strategy was to avoid NuGet restore all together and use HintPaths that point to copied directory locations.\r\n\r\n### Steps to reproduce\r\nHave a .NET Framework executable reference a .NET Standard library that depends on the NuGet package Microsoft.AspNetCore.SignalR.Client.  Place all NuGet packages into a directory at the solution level.\r\n\r\nProject file\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>netstandard2.0</TargetFramework>\r\n    <Platforms>AnyCPU;x64</Platforms>\r\n  </PropertyGroup>\r\n\r\n  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|AnyCPU'\">\r\n    <PlatformTarget>x64</PlatformTarget>\r\n  </PropertyGroup>\r\n\r\n  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\">\r\n    <PlatformTarget>x64</PlatformTarget>\r\n  </PropertyGroup>\r\n\r\n  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|AnyCPU'\">\r\n    <PlatformTarget>x64</PlatformTarget>\r\n  </PropertyGroup>\r\n\r\n  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">\r\n    <PlatformTarget>x64</PlatformTarget>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.SignalR.Client\" Version=\"1.1.0\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\r\n\r\nDirectory structure:\r\n```\r\n- Extension/\r\n   - Communication/\r\n      - ServerCommunication/\r\n         - AdminProxy/\r\n         - Messages/\r\n         - TerminalProxy/\r\n         - BtmCommunication.csproj\r\n   - packages/\r\n      - { all of the NuGet packages for everything in Extension directory }\r\n   - BuildAll.proj\r\n   - nuget.config\r\n   - <SolutionName>.sln\r\n```\r\n\r\nNuGet Config:\r\n```\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<configuration>\r\n  <config>\r\n    <!-- This points all NuGet packages referenced in PackageReferences (in *.csproj files)\r\n         to the current working directory's 'packages' directory -->\r\n    <add key=\"globalPackagesFolder\" value=\".\\packages\" />\r\n    <!-- This points all NuGet packages referenced in package.config files \r\n         to the current working directory's 'packages' directory -->\r\n    <add key=\"repositoryPath\" value=\".\\packages\" />\r\n  </config>\r\n   <!--\r\n      I attempted to use this to point NuGet to the local 'packages' directory rather than a \"global-packages\" directory, but leaving it in or out results in the same error on the CI server. \r\n      <packageSources>\r\n         <add key=\"Solution Packages\" value=\"packages\" />\r\n      </packageSources>\r\n   -->\r\n</configuration>\r\n```\r\n\r\nCommand line\r\n```\r\nmsbuild /m /restore /t:Rebuild /p:OutputDir=\"%teamcity.build.workingDir%\\Assemblies\" /p:Configuration=Debug /p:WarningLevel=0\r\n```\r\nThe \"Rebuild\" target in BuildAll.proj runs a clean and then build on the solution.\r\n\r\n### Expected  behavior\r\nWhen NuGet restores the packages located within the 'packages' directory, the restoration fully generates the dependency graph and continues on to the build process.\r\n\r\n### Actual behavior\r\nWhen building with VS2017 on TeamCity, the restoration works fine.  The project continues to build and the output is generated as expected.\r\n\r\nHowever, when building with VS2019 on TeamCity, the restoration fails with error:\r\n```\r\n[Step 1/2] <SolutionName>\\BuildAll.proj.teamcity: Build targets: Restore;Restore\r\n   [<SolutionName>\\BuildAll.proj.teamcity] Restore\r\n      [Restore] MSBuild\r\n         [MSBuild] <SolutionName>\\Extension\\<SolutionName>.sln: Build target: Restore\r\n            [<SolutionName>\\Extension\\<SolutionName>.sln] ValidateSolutionConfiguration\r\n            [<SolutionName>\\Extension\\<SolutionName>.sln] _FilterRestoreGraphProjectInputItems\r\n               [_FilterRestoreGraphProjectInputItems] MSBuild\r\n                  [MSBuild] <SolutionName>\\Extension\\Communication\\BtmCommunication\\BtmCommunication.csproj: Build target: _IsProjectRestoreSupported\r\n                     [<SolutionName>\\Extension\\Communication\\BtmCommunication\\BtmCommunication.csproj] Project <SolutionName>\\Extension\\Communication\\BtmCommunication\\BtmCommunication.csproj failed.\r\n```\r\n\r\nThere is no other error output that follows this \"failed\" on NuGet restoration.  Googling anything about \"_IsProjectRestoreSupported\" provides me nothing other than an issue where that target does not exist.  From everything I've been able to see, this is not the issue.  Everything within the solution utilizes the PackageReferences as we had one .NET Framework project referencing a .NET Standard project (BtmCommunication).  I'm unaware of any other settings that would pass/fail the \"_IsProjectRestoreSupported\" target.\r\n\r\nWe have also tried running a separate MSBuild command to restore the BuildAll.proj contents before ever running the \"rebuild\" target.\r\n\r\n#### Update:\r\nWhen running the MSBuild command above with the following argument:\r\n/flp1:logfile=output.log;verbosity=diagnostic;\r\nThe output is the same:\r\n```\r\n15:52:08.493    17>Building with tools version \"Current\".\r\n15:52:08.494    17>Done Building Project \"D:\\BuildAgent\\work\\20dadb24aca6d1b\\<SolutionName>\\Extension\\Communication\\BtmCommunication\\BtmCommunication.csproj\" (_IsProjectRestoreSupported target(s)) -- FAILED.\r\n```\r\nI've been looking at the NuGet.targets file and it claims _IsProjectRestoreSupported is defined as:\r\n```\r\n<Target Name=\"_IsProjectRestoreSupported\"\r\n          Returns=\"@(_ValidProjectsForRestore)\">\r\n  <ItemGroup>\r\n    <_ValidProjectsForRestore Include=\"$(MSBuildProjectFullPath)\" />\r\n  </ItemGroup>\r\n</Target>\r\n```\r\nThat to me states that as long as the project provides a \"MSBuildProjectFullPath\" value, then it will return true.  Looking through the diagnostic build output, every project within the solution passes the restoration except the BtmCommunication project which is the .NET Standard project.  However, I am at a loss as to why it would fail on that project.  It was the first project I had using the PackageReferences and worked to update the remainder of the solution to match this project.  Yet, everything else is passing the _IsProjectRestoreSupported target.\r\n\r\nAn excerpt from the BuildAll.proj file:\r\n```\r\n<Target Name=\"Restore\">\r\n    <MSBuild Projects=\"@(SolutionsToRestore)\" Targets=\"Restore\" BuildInParallel=\"True\" StopOnFirstFailure=\"True\"/>\r\n</Target>\r\n```\r\n\"SolutionsToRestore\" is an entry in an ItemGroup that targets the solution that contains ServerCommunication:\r\n```\r\n<SolutionsToRestore Include=\"$(MSBuildProjectDirectory)\\Extension\\<SolutionName>.sln\">\r\n    <Properties>Configuration=$(Configuration)</Properties>\r\n    <Properties>PlatformTarget=$(PlatformTarget)</Properties>\r\n</SolutionsToRestore>\r\n```\r\n\r\n### Environment data\r\n`msbuild /version` output:\r\nWhen building with VS2017 on TeamCity:\r\n- version: 15.9.21.664\r\n\r\nWhen building with VS2019 on TeamCity:\r\n- version: 16.1.76.45076\r\n\r\nOS info:\r\nWindows 10.0.18362\r\n\r\nThis is a VM running on our CI server (TeamCity).",
  "state": "CLOSED",
  "createdAt": "2019-06-24T21:53:24Z",
  "updatedAt": "2024-02-21T17:07:58Z",
  "closedAt": "2019-07-17T21:36:48Z",
  "author": {
    "login": "mrabey"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Discussion"
  },
  "comments": {
    "nodes": [
      {
        "body": "@nkolev92 @rrelyea any ideas what might be going on here?",
        "createdAt": "2019-06-25T15:38:54Z",
        "updatedAt": "2019-06-25T15:38:54Z",
        "author": {
          "login": "livarcocc"
        }
      },
      {
        "body": "```xml\r\n  <config>\r\n    <!-- This points all NuGet packages referenced in PackageReferences (in *.csproj files)\r\n         to the current working directory's 'packages' directory -->\r\n    <add key=\"globalPackagesFolder\" value=\".\\packages\" />\r\n    <!-- This points all NuGet packages referenced in package.config files \r\n         to the current working directory's 'packages' directory -->\r\n    <add key=\"repositoryPath\" value=\".\\packages\" />\r\n  </config>\r\n```\r\n\r\nThe repository path and the global packages folder cannot point to the same folder. \r\nThe structure of the global packages folder is different from the structure of the packages folder used by packages.config. \r\nSpecifically: \r\nglobal packages folder\r\n```\r\npackages\r\n  packageId\r\n    packageVersion\r\n```\r\npackages folder: \r\n```\r\npackages\r\n  packageId.packageVersion\r\n```\r\n\r\nDid you mean to have the packages be source from the packages folder in the packageReference scenario? \r\n\r\n> That to me states that as long as the project provides a \"MSBuildProjectFullPath\" value, then it will return true. Looking through the diagnostic build output, every project within the solution passes the restoration except the ServerCommunication project which is the .NET Standard project. However, I am at a loss as to why it would fail on that project. It was the first project I had using the PackageReferences and worked to update the remainder of the solution to match this project. Yet, everything else is passing the _IsProjectRestoreSupported target.\r\n\r\nThe purpose of that target is to figure out if a project imports the NuGet targets. \r\nIf it does, then the project will be able to return itself. Can you upload the value of preprocess command.\r\n`msbuild /pp:pp.txt <projectName.csproj>`\r\nSpecifically comparing the preprocess outputs of both toolsets would help get to the bottom of this. ",
        "createdAt": "2019-06-25T17:27:34Z",
        "updatedAt": "2019-06-25T17:28:04Z",
        "author": {
          "login": "nkolev92"
        }
      },
      {
        "body": "I will update the ```nuget.config``` file to have the ```repositoryPath``` point to a different location temporarily seeing as though every project uses PackageReferences for this solution.\r\n\r\n> Did you mean to have the packages be source from the packages folder in the packageReference scenario?\r\n\r\nYes, I am attempting to make the ```packages``` directory act as the package source feed for NuGet when using PackageReferences.  That way we can totally avoid ```packages.config``` files in the future, and slowly migrate our current process of copied NuGet package directories with manually updated HintPaths in the ```csproj``` files.\r\n\r\n>Can you upload the value of preprocess command.\r\nmsbuild /pp:pp.txt <projectName.csproj>\r\nSpecifically comparing the preprocess outputs of both toolsets would help get to the bottom of this.\r\n\r\nCertainly.\r\nWhen running that commend using VS2019 Developer Command Prompt, it produces an error:\r\n```\r\nC:\\SBK\\Extension\\Communication\\BtmCommunication\\BtmCommunication.csproj : error MSB4236: The SDK 'Microsoft.NET.Sdk' specified could not be found.\r\n```\r\n\r\nWhen running that command using VS2017 Developer Command Prompt, it successfully generates a ```pp.txt``` file.  If you want to see the output, what would the best way to get you the file be?  All of my company SharePoints are password protected.\r\n\r\nIn the meantime, I'll look into why the VS2019 Developer Command Prompt cannot find the .NET SDK while the VS2017 Developer Command Prompt has no issue.",
        "createdAt": "2019-06-25T18:06:31Z",
        "updatedAt": "2019-06-25T18:12:15Z",
        "author": {
          "login": "mrabey"
        }
      },
      {
        "body": "> Yes, I am attempting to make the packages directory act as the package source feed for NuGet when using PackageReferences. That way we can totally avoid packages.config files in the future, and slowly migrate our current process of copied NuGet package directories with manually updated HintPaths in the csproj files.\r\n\r\nYou need to that location explitly as a feed, the same you'd add nuget.org or any other feed. \r\n\r\n> C:\\SBK\\Extension\\Communication\\BtmCommunication\\BtmCommunication.csproj : error MSB4236: The SDK 'Microsoft.NET.Sdk' specified could not be found.\r\n\r\nI think this is our root cause. The SDK cannot be found, so NuGet cannot evaluate the project at restore time. \r\n\r\n@livarcocc would have better context here, but I am surprised you didn't see this error in addition to the NuGet error when restoring. \r\n\r\nif you run msbuild /t:restore on the same project, what's the full output? Does it contain MSB4236 at all? ",
        "createdAt": "2019-06-25T18:26:36Z",
        "updatedAt": "2019-06-25T18:26:36Z",
        "author": {
          "login": "nkolev92"
        }
      },
      {
        "body": "> if you run msbuild /t:restore on the same project, what's the full output? Does it contain MSB4236 at all?\r\n\r\nStrangely, the build finishes successfully using VS2019 when I run ```msbuild /t:restore BtmCommunication.csproj```.  However, running the msbuild command in the original post still fails with the same error.",
        "createdAt": "2019-06-25T19:06:54Z",
        "updatedAt": "2019-06-25T19:09:24Z",
        "author": {
          "login": "mrabey"
        }
      },
      {
        "body": "I have been reading through #2532 to glean some information as to why VS2019 Developer Command Prompt wouldn't be able to find the SDK while the VS2017 Developer Command Prompt can.\r\nI tried both resolutions:\r\n* Ensure the Build Tools has installed \".NET Core Build Tools\"\r\n* Add a System PATH env variable pointing to ```C:\\Program Files\\dotnet```\r\n\r\nBoth are done on our CI Build Agent.  However, the error still occurs trying to discover the SDK when attempting to run that preprocess target on the project in question.\r\n\r\nI have also created a VM that mirrors our Build Agent environment and turned off network capabilities.  When I run the msbuild command in the original post, the build fails with the output:\r\n```\r\n(_FilterRestoreGraphProjectInputItems target) -> C:\\<SolutionName>\\Extension\\Communication\\BtmCommunication\\BtmCommunication.csproj: warning NU1503: Skipping restore for project 'C:\\<SolutionName>\\Extension\\Communication\\BtmCommunication\\BtmCommunication.csproj'. The project file may be invalid or missing targets required for restore. [C:\\<SolutionName>\\Extension\\<SolutionName>.sln]\r\n```\r\nwhich seems to confirm that the underlying issue could be related to the failure of the VS2019 Developer Command Prompt from locating the .NET SDK.",
        "createdAt": "2019-06-25T19:32:45Z",
        "updatedAt": "2019-06-25T19:49:09Z",
        "author": {
          "login": "mrabey"
        }
      },
      {
        "body": "@nkolev92\r\nSo, we've found a temporary solution, but it feels rather hackish that solves a symptom of the problem rather than solving the underlying issue: the fact that the VS2019 Developer Command Prompt cannot locate the SDK at ```C:\\Program Files\\dotnet\\sdk\\```.\r\n\r\nOur solution:\r\nCreate a new environment variable for our TeamCity project ```MSBuildSDKsPath``` and set it equal to ```C:\\Program Files\\sdk\\2.2.204\\Sdks```.  This allows the SDK to be properly discovered and the restore succeeds without warnings or failures.  However, this would require us to update the environment variable any time we update to a newer SDK version.  I'd like to avoid tribal knowledge at all costs.\r\n\r\nI'm still curious why the VS2019 Developer Command Prompt cannot locate the SDK properly.  From all that I've read, you don't need to create an ```MSBuildSDKsPath``` environment variable as the build tools should be able to infer the directory path based on the provided information in the ```csproj``` file.  Any ideas why it couldn't locate this SDK file?",
        "createdAt": "2019-06-25T21:24:44Z",
        "updatedAt": "2019-06-25T21:39:41Z",
        "author": {
          "login": "mrabey"
        }
      },
      {
        "body": "Adding @nguerrera to help investigate why msbuild is failing to find the SDK when being used from the VS 2019 command prompt.\r\n\r\nA couple of question do come to mind:\r\n\r\n1. Do you have a global.json anywhere in the folder structure of your solution/projects?\r\n2. What is your VS version and what versions of the SDK do you have installed on the machine?",
        "createdAt": "2019-06-26T17:19:56Z",
        "updatedAt": "2019-06-26T17:19:56Z",
        "author": {
          "login": "livarcocc"
        }
      },
      {
        "body": "> Do you have a global.json anywhere in the folder structure of your solution/projects?\r\n\r\nNo where in the folder structure exists a ```global.json``` file from my findings.\r\n\r\n> What is your VS version...?\r\n\r\nWe've only installed the Build Tools for both VS2017 and VS2019.  I don't exactly know where to find the version numbers for them.  The only place I've been able to find any form of version number is when running the Developer Command Prompts for both 2017 and 2019.  I'll give you those, but let me know if those are not what you're looking for.\r\n* VS2017: v15.9.12\r\n* VS2019: v16.1.3\r\n\r\nFollowing information from #2532, I ensured that the .NET Core Build Tools option was selected in the VS2019 Build Tools installer.\r\n\r\n> ...what versions of the SDK do you have installed on the machine?\r\n\r\nThe versions of the SDK we have installed at ```C:\\Program Files\\dotnet\\sdk\\``` are as follows:\r\n* 2.1.504\r\n* 2.1.507\r\n* 2.2.204\r\n\r\nThere is also a NuGetFallbackFolder containing a plethora of ```DOTNETSENTINEL``` files that seem to mimic version numbers.",
        "createdAt": "2019-06-26T18:58:54Z",
        "updatedAt": "2019-06-26T18:58:54Z",
        "author": {
          "login": "mrabey"
        }
      },
      {
        "body": "Ok, I see what is going on now. For 16.1, which is your version of VS 2019, you need to have at least 2.1.700 (for .NET Core 2.1) and 2.2.300 (for .NE Core 2.2).\r\n\r\nThis is needed because those are the versions of the .NET Core SDK that carry matching VS components like NuGet, MSBuild, Roslyn etc. As the SDK can require features from those components, we need to enforce a certain minimum version.\r\n\r\nAre you manually uninstalling an SDK? If you are selecting the build tools sku with the .NET Core components selected, I would expect the right SDKs to be installed for you by VS.",
        "createdAt": "2019-06-27T20:27:29Z",
        "updatedAt": "2019-06-27T20:27:29Z",
        "author": {
          "login": "livarcocc"
        }
      },
      {
        "body": "That's good to know.  I'll give that a go and see if the problem is resolved.\r\n\r\n>Are you manually uninstalling an SDK?\r\n\r\nI wasn't involved with the initial setup of our virtual machines running on our Build Agents so I'm unsure whether they were installed with the Build Tools installer or manually installed separately.  I'll pass this information along to the person that usually deals with TeamCity maintenance.\r\n\r\nThank you.",
        "createdAt": "2019-06-27T20:31:56Z",
        "updatedAt": "2019-06-27T20:31:56Z",
        "author": {
          "login": "mrabey"
        }
      },
      {
        "body": "Closing the issue as it has been resolved.  Thank you for the information regarding the version mismatch of the .NET Core SDK.  That was the solution needed to get the NuGet restoration functioning on the CI server.",
        "createdAt": "2019-07-17T21:36:48Z",
        "updatedAt": "2019-07-17T21:36:48Z",
        "author": {
          "login": "mrabey"
        }
      },
      {
        "body": "As a side note for those that may look at this in the future, manually installing the .NET Core SDK 2.2.300 did not solve the issue.  It seems that the Build Tools installer, choosing the \".NET Core Build Tools\" workload option, does some other setup that points to the installation directory (C:\\Program Files\\dotnet\\sdk\\2.2.300\\) that the .NET Core SDK 2.2.300 installer does not.",
        "createdAt": "2019-07-17T22:07:48Z",
        "updatedAt": "2019-07-17T22:07:48Z",
        "author": {
          "login": "mrabey"
        }
      }
    ]
  }
}