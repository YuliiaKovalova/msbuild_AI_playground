{
  "number": 9165,
  "title": "[Feature Request]: Global Assembly Properties",
  "body": "### Summary\r\n\r\nI'd like to see Global Assembly Properties. Meaning, I'd like to include a \"reserved\" msbuild element, and see the property show up as a static assembly property\r\n\r\n### Background and Motivation\r\n\r\nI'm writing Libraries, and source generators, and I'm writing things that rely on the user to configure their own CSProj file. I'm also noticing I'm re-using certain things throughout different props files, that I'm then re-declaring in the assembly. \r\n\r\nFinally, I'd like to be able to get the Assembly Namespace in some Auto-Generated code. I know that there's a way, I just don't recall how.\r\n\r\n\r\n\r\n### Proposed Feature\r\n\r\nI've already gotten the MsBuild portion half-way done. I just need some help with where to put it, and with the Roslyn side of things. And if possible, I'd really, really love to have some help getting started contributing towards msbuild via a pull request.\r\n\r\nSo here's a rough sketch of what it would look like for a developer to implement it:\r\n```\r\n  <PropertyGroup>\r\n    <TestProperty>Hello There</TestProperty>\r\n    <TestProperty2>Hello There Again</TestProperty2>\r\n    <Hello>sure</Hello>\r\n    <World> Again</World>\r\n  </PropertyGroup>\r\n```\r\n\r\nHere's what a Library Developer would include:\r\n```\r\n  <ItemGroup>\r\n    <RequireProperty Include=\"TestProperty\"/>\r\n    <RequireProperty Include=\"Hello\"/>\r\n    <RequireProperty Include=\"World\"/>\r\n  </ItemGroup>\r\n```\r\n\r\nHere's the actual code -- It generates AssemblyMetadata that allows the user of the library to configure values via MsBuild properties, and it validates to make sure all the properties have been added.\r\n\r\n```\r\n  <Target \r\n      Name=\"ValidateGlobalPropertiesAssemblyMetadata\" \r\n      BeforeTargets=\"AddGlobalPropertiesAssemblyMetadata\" \r\n      Condition=\"@(RequireProperty -> Count()) != 0\">\r\n    <ItemGroup>\r\n      <RequiredGlobalProperty Update=\"@(RequireProperty)\" Visible=\"false\"/>\r\n      <GlobalPropertyRequirements Include=\"%(RequireProperty.Identity)\"/>\r\n    </ItemGroup>\r\n    <Error Condition=\" '$(%(RequireProperty.Identity))' == '' \" Text=\"Not all Global Properties have been Configured in your Build. Please add the following Property to a &lt;PropertyGroup&gt;: %(RequireProperty.Identity)\"/>\r\n  </Target>\r\n\r\n\r\n    <Target \r\n      Name=\"AddGlobalPropertiesAssemblyMetadata\" \r\n      BeforeTargets=\"BeforeBuild\" \r\n      Condition=\"@(RequireProperty -> Count()) != 0\">\r\n      <ItemGroup> \r\n        <RequireProperty Update=\"@(RequireProperty)\" Visible=\"false\"/>\r\n        <RequirePropertyAttributes Include=\"System.Reflection.AssemblyMetadataAttribute\">\r\n          <_Parameter1>%(RequireProperty.Identity)</_Parameter1>\r\n          <_Parameter2>$(%(RequireProperty.Identity))</_Parameter2>\r\n        </RequirePropertyAttributes>\r\n      </ItemGroup>\r\n      <WriteCodeFragment AssemblyAttributes=\"@(RequirePropertyAttributes)\" Language=\"C#\" OutputDirectory=\"$(CompilerGeneratedFilesOutputPath)\" OutputFile=\"GlobalProperties.g.cs\">\r\n        <Output TaskParameter=\"OutputFile\" ItemName=\"Compile\" />\r\n        <Output TaskParameter=\"OutputFile\" ItemName=\"FileWrites\" />\r\n      </WriteCodeFragment>\r\n    </Target>\r\n```\r\n\r\nWhat it ends up producing is:\r\n\r\n```\r\n//------------------------------------------------------------------------------\r\n// <auto-generated>\r\n//     This code was generated by a tool.\r\n//\r\n//     Changes to this file may cause incorrect behavior and will be lost if\r\n//     the code is regenerated.\r\n// </auto-generated>\r\n//------------------------------------------------------------------------------\r\n\r\nusing System;\r\nusing System.Reflection;\r\n\r\n[assembly: System.Reflection.AssemblyMetadataAttribute(\"TestProperty\", \"Hello There\")]\r\n[assembly: System.Reflection.AssemblyMetadataAttribute(\"Hello\", \"sure\")]\r\n[assembly: System.Reflection.AssemblyMetadataAttribute(\"World\", \" Again\")]\r\n\r\n// Generated by the MSBuild WriteCodeFragment class.\r\n\r\n```\r\n\r\nBut what I'd like to be able to see as a developer (where I need the Roslyn Help) is...\r\n\r\n```\r\nnamespace System.Reflection;\r\n\r\npublic class GlobalProperties\r\n{\r\n    public static string TestProperty => GetValue(nameof(TestProperty));\r\n\r\n    public static string Hello => GetValue(nameof(Hello));\r\n\r\n    public static string World => GetValue(nameof(World));\r\n\r\n    private static Lazy<IList<AssemblyMetadataAttribute>> LazyGlobalProperties { get; } =\r\n        new(GetGlobalProperties, LazyThreadSafetyMode.ExecutionAndPublication);\r\n\r\n    private static string GetValue(string key)\r\n    {\r\n        return LazyGlobalProperties.Value.First(x => x.Key == key).Value;\r\n    }\r\n\r\n    private static IList<AssemblyMetadataAttribute> GetGlobalProperties()\r\n    {\r\n        return typeof(GlobalProperties).Assembly.GetCustomAttributes<AssemblyMetadataAttribute>().ToList();\r\n    }\r\n}\r\n```\r\n\r\nAlso, the other thing I need help with is, I'm currently required to add Visible=\"false\" to all of the items. \r\n\r\n\r\n### Alternative Designs\r\n\r\n_No response_",
  "state": "CLOSED",
  "createdAt": "2023-08-24T20:41:24Z",
  "updatedAt": "2023-08-25T22:45:18Z",
  "closedAt": "2023-08-25T22:45:18Z",
  "author": {
    "login": "EdLichtman"
  },
  "labels": [
    "Feature Request",
    "needs-triage"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "One more thing -- I can't figure out how to automatically update the properties with \"Visible=false\" but they show up in my csproj file. I'd like to automatically assume that the Items visibilities are false",
        "createdAt": "2023-08-24T20:56:59Z",
        "updatedAt": "2023-08-24T20:56:59Z",
        "author": {
          "login": "EdLichtman"
        }
      },
      {
        "body": "One last thing -- I'm making updates as I write my own library, but it we need to be able to pass through properties, so like if you have library A, which is dependent upon Library B, a B is dependent upon C, and C requires a property, you need to find a way to not require B to include it.\r\n\r\nSo Perhaps something like Safe_Assembly_Name.GlobalProperties instead of a single GlobalProperties",
        "createdAt": "2023-08-24T21:24:23Z",
        "updatedAt": "2023-08-24T21:24:23Z",
        "author": {
          "login": "EdLichtman"
        }
      },
      {
        "body": "As In reading through more documentation and playing around with analyzers in understanding why this isn't already done. I think the \"ThisAssembly\" project already solves much of my reasons for wanting this",
        "createdAt": "2023-08-25T22:45:18Z",
        "updatedAt": "2023-08-25T22:45:18Z",
        "author": {
          "login": "EdLichtman"
        }
      }
    ]
  }
}