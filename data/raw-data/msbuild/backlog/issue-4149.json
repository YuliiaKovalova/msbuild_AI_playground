{
  "number": 4149,
  "title": "Version UserExtensionsPath imports with VisualStudioVersion",
  "body": "Suggested by @duncanp-sonar in https://github.com/Microsoft/msbuild/issues/3778#issuecomment-460638770\r\n\r\n> The discussion above mentions `MSBuildExtensionsPath` but it doesn't mention `MSBuildUserExtensionsPath`. This change looks like it will break the per-user extension mechanism.\r\n> \r\n> `MSBuildUserExtensionsPath` is in the form `C:\\Users\\[user id]\\appdata\\local\\Microsoft\\msbuild` so it is shared by all instances of MSBuild on the machine. Changing `MSBuildToolsVersion` to `Current` will break existing extensions, and it will also break the ability for per-user extension targets to be versioned by folder.\r\n> \r\n> e.g. `ImportUserLocationsByWildcardBeforeMicrosoftCommonTargets` from `Microsoft.Common.CurrentVersion.targets`:\r\n> \r\n> ```\r\n> <Import Project=\"$(MSBuildUserExtensionsPath)\\$(MSBuildToolsVersion)\\Microsoft.Common.targets\\ImportAfter\\*\" Condition=\"'$(ImportUserLocationsByWildcardAfterMicrosoftCommonTargets)' == 'true' and exists('$(MSBuildUserExtensionsPath)\\$(MSBuildToolsVersion)\\Microsoft.Common.targets\\ImportAfter')\"/>\r\n> ```\r\n> Per-user extension targets are important to third-party extensions as they allow targets to be injected into the build without requiring elevation (e.g. the _[Sonar Scanner for MSBuild](https://docs.sonarqube.org/display/SCAN/Analyzing+with+SonarQube+Scanner+for+MSBuild)_ that provides build integration with _[SonarQube/SonarCloud](https://sonarcloud.io/dashboard?id=sonarscanner-msbuild)_);\r\n> \r\n> Could this breaking change be avoided by changing the per-user location to use a different build variable (e.g. either `VisualStudioVersion` or a new variable)?\r\n",
  "state": "CLOSED",
  "createdAt": "2019-02-06T23:25:32Z",
  "updatedAt": "2024-02-21T17:09:23Z",
  "closedAt": "2019-02-08T16:26:08Z",
  "author": {
    "login": "rainersigwald"
  },
  "labels": [
    "Area: Common Targets",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "rainersigwald"
      }
    ]
  },
  "milestone": {
    "title": "MSBuild 16.0"
  },
  "comments": {
    "nodes": [
      {
        "body": "I think we can switch that to `$(VisualStudioVersion)` with no noticeable impact other than things continuing to work.",
        "createdAt": "2019-02-06T23:26:17Z",
        "updatedAt": "2019-02-06T23:26:17Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@jeffkl I feel like you might have an opinion on this.",
        "createdAt": "2019-02-06T23:56:17Z",
        "updatedAt": "2019-02-06T23:56:17Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I feel pretty strongly that `MSBuildToolsVersion` be `Current` for sure.  We could use `VisualStudioVersion` here instead or we could have a folder named `Current` and extensions start to check `MSBuildAssemblyVersion` from now on.  It might be worth it now so we don't have to keep having a folder for every version, which is the point of moving to `Current`.",
        "createdAt": "2019-02-07T01:20:52Z",
        "updatedAt": "2019-02-07T01:20:52Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "My main concern was that this was a breaking change that didn't appear to have been covered in the original ticket. Thinking about it further, I don't have a strong preference for either solution, as long as extenders have a clear versioning story that works across multiple versions of MSBuild.\r\n\r\nI see the attraction in having a fixed folder name, and this would work for us as so far I think we've shipped the same `ImportBefore` target for each version.\r\n\r\nHowever, I think `Current` is a very misleading name for a shared folder: I certainly wouldn't expect\r\n`c:\\Users\\JohnSmith\\AppData\\Local\\Microsoft\\MSBuild\\Current\\Microsoft.Common.props\\ImportBefore\\` to be checked by multiple versions of MSBuild.\r\n\r\nChanging the folder name to `Current` is a breaking change anyway, so it would perhaps be better to change it to something that is more descriptive e.g. `c:\\Users\\JohnSmith\\AppData\\Local\\Microsoft\\MSBuild\\Current\\Shared`.\r\n\r\n\r\n#### Interaction with _-toolsversion:xxx_\r\nI do have a question about how either solution would work in a future version. Is it still valid for the user to specify a different ruleset using `-toolsversion:xxx`, and if so what effect does that have on the `$(MSBuildToolsVersion)` property?\r\n\r\ne.g. when running under MSBuild 17.0, a user specifies either `-toolsversion:16.0` or a custom toolset. If it is still valid to specify a toolset like this, then presumably neither `$(VisualStudioVersion)` nor `($MSBuildAssemblyVersion)` will tell extenders which toolset the user was targeting.",
        "createdAt": "2019-02-07T16:16:23Z",
        "updatedAt": "2019-02-07T16:16:23Z",
        "author": {
          "login": "duncanp-lseg"
        }
      },
      {
        "body": "> I see the attraction in having a fixed folder name, and this would work for us as so far I think we've shipped the same `ImportBefore` target for each version.\r\n\r\nI think I'm now leaning toward leaving things as they are, based on this. If an extension author wants to condition an import in the future, they can put a file in Current that inspects `MSBuildAssemblyVersion` or `VisualStudioVersion` and import version-specific logic based on that.\r\n\r\n> Is it still valid for the user to specify a different ruleset using `-toolsversion:xxx`, and if so what effect does that have on the `$(MSBuildToolsVersion)` property?\r\n\r\nThis is mostly obsolete now. You can choose a different toolsversion by finding a different (side-by-side installable) MSBuild/VS/BuildTools installation. If you have a custom toolset, it still defines MSBuildToolsVersion as it has.",
        "createdAt": "2019-02-07T23:25:38Z",
        "updatedAt": "2019-02-07T23:25:38Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Closing \"won't-fix\" based on that reasoning (https://github.com/Microsoft/msbuild/pull/4152#issuecomment-461854792).\r\n\r\nAs always, we can reactivate if new information comes in.",
        "createdAt": "2019-02-08T16:26:08Z",
        "updatedAt": "2019-02-08T16:26:08Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Thanks for looking into this @rainersigwald. The versioning story outlined in the comments works for us, although having a shared folder called _Current_ does seem weird.\r\n",
        "createdAt": "2019-02-08T17:37:23Z",
        "updatedAt": "2019-02-08T17:37:23Z",
        "author": {
          "login": "duncanp-lseg"
        }
      }
    ]
  }
}