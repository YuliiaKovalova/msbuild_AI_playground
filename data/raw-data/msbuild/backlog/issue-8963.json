{
  "number": 8963,
  "title": "[Feature Request]: Expose the getters of the `SolutionFile.FullName` and `SolutionFile.SolutionFileDirectory` properties",
  "body": "### Summary\r\n\r\nIn the `SolutionFile` class, the `FullName` and `SolutionFileDirectory` properties -- which I can see in ILDASM/ILSpy for the `Microsoft.Build` NuGet package -- are marked `internal`.  Nor are they documented on Microsoft Learn.  I do not think this is a good thing.\r\n\r\nTypically, my experience has been in the past, that when you write a class that parses a file and then exposes the data model of the file, callers of the class should be able to have access to a property(ies) that reveal the fully-qualified pathname on the disk of the file that was parsed to give that object.\r\n\r\nWhen I am working with the `SolutionFile` class, I would like to be able to read these properties as get-only -- obviously, it would not make sense to write to them. \r\n\r\nMy point is, to make production-ready code, as I am passing a `SolutionFile` instance around, I want to ensure every so often that the `.sln` file still exists on the disk, since, in principle, to write bulletproof code, I cannot continue to make that assumption as I proceed with my program.\r\n\r\nThank you for your consideration.\r\n\r\n### Background and Motivation\r\n\r\nI am tasked with writing production-ready software.  A best practice is \"never assume files on disk always exist in the same spot.\"  In my code, as I utilize the `SolutionFile` instance, I would like to be able to implement a check for the existence of the `.sln` or `.slnf` file that was parsed to yield the instance in the first place, to ensure that I am not working with the data of a file on the disk that no longer exists.\r\n\r\n### Proposed Feature\r\n\r\nInstead of\r\n\r\n```C#\r\npublic sealed class SolutionFile\r\n{\r\n  /* ... */\r\n  \r\n  internal string FullPath\r\n  {\r\n    get\r\n    {\r\n      return _solutionFile;\r\n    }\r\n    set\r\n    {\r\n      ErrorUtilities.VerifyThrowInternalRooted(value);\r\n      if (value.EndsWith(\".slnf\", StringComparison.OrdinalIgnoreCase))\r\n      {\r\n        ParseSolutionFilter(value);\r\n        return;\r\n      }\r\n      _solutionFile = value;\r\n      _solutionFilter = null;\r\n      SolutionFileDirectory = Path.GetDirectoryName(_solutionFile);\r\n    }\r\n  }\r\n  \r\n  internal string SolutionFileDirectory { get; set; }\r\n\r\n  /* ... */\r\n}\r\n```\r\nMake the `FullName` and `SolutionFileDirectory` properties of the `SolutionFile` class `public`, with their setters made `internal`.\r\n### Alternative Designs\r\n\r\nMake the `FullName` and `SolutionFileDirectory` properties of the `SolutionFile` class `public`, with their setters made `internal`.",
  "state": "CLOSED",
  "createdAt": "2023-06-27T16:43:03Z",
  "updatedAt": "2023-07-26T16:06:21Z",
  "closedAt": "2023-07-19T13:54:08Z",
  "author": {
    "login": "astrohart"
  },
  "labels": [
    "Feature Request",
    "needs-triage"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "10:59 06/27/2023\r\n\r\nI have forked and cloned the repo and I am going to implement my proposed feature request and then submit a PR.",
        "createdAt": "2023-06-27T16:59:25Z",
        "updatedAt": "2023-06-27T16:59:25Z",
        "author": {
          "login": "astrohart"
        }
      },
      {
        "body": "10:59 06/27/2023\r\n\r\nUsing Visual Studio 2019 to open the Solution, I have received a message stating:\r\n\r\n```\r\n---------------------------\r\nMicrosoft Visual Studio\r\n---------------------------\r\nThe version of the selected solution is higher than the solution version supported by this Visual Studio release. Please try downloading the latest service pack for this Visual Studio release, or opening in a more recent version of Visual Studio, if available.\r\n---------------------------\r\nOK   \r\n---------------------------\r\n```\r\nI ascertain I need to be on Visual Studio 2022 in order to open the .sln file.  No worries, my feature request is a mere point change.  I will just edit the corresponding file by hand.",
        "createdAt": "2023-06-27T17:00:00Z",
        "updatedAt": "2023-06-27T17:00:51Z",
        "author": {
          "login": "astrohart"
        }
      },
      {
        "body": "The `SolutionFile` class is not intended for use outside of MSBuild. It is not a full-featured handler for the `.sln` file format and should not be used as such.\r\n\r\nWe need to document this more clearly--we didn't add sufficient caveats when it was made public.\r\n\r\n",
        "createdAt": "2023-06-27T17:04:32Z",
        "updatedAt": "2023-06-27T17:04:32Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Is there a full-featured parser for the .sln file format that is publicly available?\r\n\r\n(It seems like `SolutionFile` is the closest thing to that (or maybe just the easiest to find), which leads to it being used when it isn't appropriate.)",
        "createdAt": "2023-06-27T18:55:39Z",
        "updatedAt": "2023-06-27T18:55:39Z",
        "author": {
          "login": "jrdodds"
        }
      },
      {
        "body": "> Is there a full-featured parser for the .sln file format that is publicly available?\r\n\r\nNot from the Visual Studio team. I know they've been asked for one before (because I've asked them several times) but I couldn't dig up a good tracking issue, so I'd recommend filing a request through VS Feedback.",
        "createdAt": "2023-06-27T20:58:58Z",
        "updatedAt": "2023-06-27T20:58:58Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I created a Visual Studio feedback issue: [Library for Solution (.sln) files](https://developercommunity.visualstudio.com/t/Library-for-Solution-sln-files/10401851).",
        "createdAt": "2023-06-27T23:13:34Z",
        "updatedAt": "2023-06-27T23:13:34Z",
        "author": {
          "login": "jrdodds"
        }
      },
      {
        "body": "I voted for your issue \ud83d\ude42",
        "createdAt": "2023-06-28T16:12:01Z",
        "updatedAt": "2023-06-28T16:12:01Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "The request for a common solution parser has existed for about 20 years so my expectations are low (although perhaps something changed I'm not aware of). Instead we have several private ones. Could we imagine that we would be open to the MSBuild one working towards being that, likely as a community effort? Or would it somehow inevitably compromise what MSBuild needs from it? The format is very stable, not that complex, and the MSBuild parser for it is quite reasonable and stable as well.",
        "createdAt": "2023-06-28T17:49:45Z",
        "updatedAt": "2023-06-28T17:49:45Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "@danmoseley If there is an initiative to build out a common solution parser, I would be interested in contributing.",
        "createdAt": "2023-06-28T18:51:24Z",
        "updatedAt": "2023-06-28T18:51:24Z",
        "author": {
          "login": "jrdodds"
        }
      },
      {
        "body": "> @danmoseley If there is an initiative to build out a common solution parser, I would be interested in contributing.\r\n\r\nHeck yeah.  Just to use this one class, which I think of is a great solution parser, I have to bring the entire [Microsoft.Build NuGet package](https://www.nuget.org/packages/Microsoft.Build/) into my project.  I might not want all the other stuff.\r\n\r\nI strongly suggest the creation of a `Microsoft.Build.Construction` NuGet package with just the `.sln`-parsing code.",
        "createdAt": "2023-06-28T19:58:09Z",
        "updatedAt": "2023-06-28T19:58:09Z",
        "author": {
          "login": "astrohart"
        }
      },
      {
        "body": "> The `SolutionFile` class is not intended for use outside of MSBuild. It is not a full-featured handler for the `.sln` file format and should not be used as such.\r\n> \r\n> We need to document this more clearly--we didn't add sufficient caveats when it was made public.\r\n\r\n@rainersigwald I am confused -- then why is it [documented on Microsoft Learn](https://learn.microsoft.com/en-us/dotnet/api/microsoft.build.construction.solutionfile?view=msbuild-17-netcore) and [included in a publicly-available NuGet package](https://www.nuget.org/packages/Microsoft.Build/)?  That was my initial impression -- that it is publicly available.  It exposes some pretty doggone useful functionality and I also like it since i don't have to open VS itself and do DTE on it just to get at this or that info.",
        "createdAt": "2023-06-28T20:00:10Z",
        "updatedAt": "2023-06-28T20:00:35Z",
        "author": {
          "login": "astrohart"
        }
      },
      {
        "body": "> I have to bring the entire Microsoft.Build NuGet package into my project. I might not want all the other stuff.\n\nYou could of course paste in the relevant code or put it in its own git repo for others to use - it's liberally licensed and should be fairly easily extracted.\n\nEdit: I realize what you're asking for is a standard one (https://xkcd.com/927/) I simply meant that it shouldn't take much to avoid referencing it today)",
        "createdAt": "2023-06-28T21:03:33Z",
        "updatedAt": "2023-06-28T21:07:00Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "@jrdodds I upvoted your feedback and left some comments on it",
        "createdAt": "2023-06-28T22:00:38Z",
        "updatedAt": "2023-06-28T22:00:38Z",
        "author": {
          "login": "astrohart"
        }
      },
      {
        "body": "@rainersigwald @danmoseley what about my original PR? #8965 I respectfully request it be merged.  As I have stated on its discussion thread, it is my assessment that it would add value to the `SolutionFile` class for those who consume it in their own projects.  A use case for which I have found it useful is opening up [LINQPad](https://www.linqpad.net) and using it to manipulate my really large software projects without having to resort to always loading Visual Studio and waiting for umpteen projects to be loaded, but instead just writing a script.  For example, let's suppose I am writing an algorithm to traverse a directory tree that is full of `.sln` files.  Then i can use `SolutionFile` in my loop -- but the catch is, I have to have visibility on which `SolutionFile` instance corresponds to which `.sln` file.\r\n\r\nI am also working on a Visual Studio extension project called the `MultiProjectTemplateWizard` the first step of which is displayed below:\r\n![image](https://github.com/dotnet/msbuild/assets/8261875/ecf3a4d5-a395-4666-8394-2e95cc59b00f)\r\n**Figure 1.** The `Project Selection` dialog box of my `MultiProjectTemplateWizard` extension in development.\r\n\r\nThis is for those `.vstemplate` based project templates that, themselves, generate not one but a whole bunch of projects?  I came up with this tool to selectively turn off and on, the generation of individual sub-projects.  When you use this multiple times in a software system, via the **Add New Project** wizard in Visual Studio, in a Solution with say, 1600 projects, using `DTE` to iterate the Solution is more of a performance hit than using this `SolutionFile` class.  It's about making the extension more scalable.\r\n\r\nI am not sure whether there is a need for much banter about a separate, full-fledged Solution parser or about making the same request for 20 years.  As I see it, `SolutionFile` has a very small dependency footprint within the `Microsoft.Build` NuGet package --- I think the `SolutionFile` class (and friends) is a great jumping off point of what could become a highly useful `.sln` file parser...so i am advocating strongly for the creation of a `Microsoft.Build.Construction` NuGet package that basically just takes the `src\\Build\\Construction` folder in this project and puts all that code in its own NuGet package -- it's a copy-paste for the MS team.  Or there could be much more talk about why it wouldn't work and why either Microsoft will never do it or what have you -- not to make a fine point of it, but we can talk talk talk, or we can do as I suggest, rip the `src\\Build\\Construction` folder tree out of this project, do a quick `git init`, dump into a  `Microsoft.Build.Construction.nuproj` file, and then publish the mofo to the NuGet Gallery!  I could do it as a 'private citizen' sure, but I think it would behoove MS to do it since you guys are the source.\r\n\r\nThen we have a slimmed down NuGet package to use in our VSIX projects and LINQPad scripts instead of DTE.",
        "createdAt": "2023-06-28T22:29:27Z",
        "updatedAt": "2023-06-28T22:38:17Z",
        "author": {
          "login": "astrohart"
        }
      },
      {
        "body": "What I believe would be ideal is someone takes this code and evolves it in its own repo/package as you suggest. If it maintained a slim read only version with essentially the same API as this one and was appropriately licensed, MSBuild could potentially take updates from it (likely copy paste). Meanwhile it makes sense to me to take limited changes like this PR that expose simple getters. This is mature code.\n\nI don't speak for this project.",
        "createdAt": "2023-06-28T23:07:03Z",
        "updatedAt": "2023-06-28T23:07:03Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "My only concern about taking the relevant code out and making my own NuGet package would be the issues surrounding intellectual property.  In my mind, it would be more appropriate for the new NuGet package to have a 'Microsoft.' prefix.  However, due to that being a reserved prefix, I don't know if that is something I can do myself, per se -- and making my own prefix makes me uncomfortable for two reasons: (a) I don't want people to think I'm appropriating Microsoft's intellectual property, and (b) my own NuGet package would just merely be Yet Another Solution File Parser.  Microsoft taking action on its side would make the new package more \"official,\" IMHO. ",
        "createdAt": "2023-06-29T14:00:10Z",
        "updatedAt": "2023-06-29T14:00:10Z",
        "author": {
          "login": "astrohart"
        }
      },
      {
        "body": "I am still revisiting this and asking that my PR be merged.  I don't understand what the heck is behind the stiff resistance to including these seemingly innocuous changes and why we have to have a religious debate over it.  These are perfectly-reasonable changes.   People have said \"oh well this class is not intended to be widely available.\"  Well, that doesn't matter --- it's out there, it's in a NuGet package and people can update its code and submit PRs, so I think it is out there and while we are at it, what's the hurt in exposing the `FileName` property as `public`?  None, IMHO.",
        "createdAt": "2023-07-18T22:47:40Z",
        "updatedAt": "2023-07-18T22:47:49Z",
        "author": {
          "login": "astrohart"
        }
      },
      {
        "body": "> a) I don't want people to think I'm appropriating Microsoft's intellectual property, \n\nThis repo is liberally licensed.\n\n> (b) my own NuGet package would just merely be Yet Another Solution File Parser. Microsoft taking action on its side would make the new package more \"official,\" IMHO.\n\nThe .NET ecosystem does sometimes tend to assume that Microsoft has to produce a library for it to be acceptable. Many times this comes up for parsers for some reason. That's limiting in a way that doesn't seem to happen in the Java ecosystem.\n\n(The above being said, I do believe MSBuild should expose basic read only access, as I said above.)\n\n@rainersigwald ",
        "createdAt": "2023-07-19T01:33:24Z",
        "updatedAt": "2023-07-19T01:33:24Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "@astrohart The MSBuild maintainers have discussed this and will not accept your PR. I am closing this issue.\r\n\r\n> I don't understand what the heck is behind the stiff resistance to including these seemingly innocuous changes\r\n\r\nThe maintainers of the code you want to use have told you that it is not fit for your purpose. Changes to make it work better for you are not expected.\r\n\r\n> People have said \"oh well this class is not intended to be widely available.\"\r\n\r\nIt is not intended to be _used as a general-purpose solution parser_. Availability is not the problem. The problem is largely feature creep and the support burden.\r\n\r\n> my own NuGet package would just merely be Yet Another Solution File Parser\r\n\r\nSince it is not the solution parser that is used by the primary environment that uses solutions--Visual Studio--**so is ours**. Why choose it?",
        "createdAt": "2023-07-19T13:54:08Z",
        "updatedAt": "2023-07-19T13:54:08Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> Since it is not the solution parser that is used by the primary environment that uses solutions--Visual Studio--so is ours.\r\n> Why choose it?\r\n\r\nBecause it was handy for a LINQPad script.",
        "createdAt": "2023-07-19T22:51:55Z",
        "updatedAt": "2023-07-19T22:51:55Z",
        "author": {
          "login": "astrohart"
        }
      },
      {
        "body": "I could not disagree more with the maintainers.  But what can you do?",
        "createdAt": "2023-07-19T22:52:27Z",
        "updatedAt": "2023-07-19T22:52:27Z",
        "author": {
          "login": "astrohart"
        }
      },
      {
        "body": "> > a) I don't want people to think I'm appropriating Microsoft's intellectual property,\r\n> \r\n> This repo is liberally licensed.\r\n\r\nThat's not the point.  The point is, the `Microsoft.` in front of the package name, to my mind, means it came from the same people (Microsoft; i.e., the \"brand\") as who came up with the `.sln` file format itself.   This means I can trust it that it will properly parse the `.sln` file format, which is Microsoft-invented.\r\n\r\n> \r\n> (The above being said, I do believe MSBuild should expose basic read only access, as I said above.)\r\n> \r\n> @rainersigwald\r\n\r\nI could not agree more @danmoseley.   I really have no idea WTH all this animosity is toward me and my tiny teeny weeny change suggestion!!!\r\n\r\n> \r\n> > (b) my own NuGet package would just merely be Yet Another Solution File Parser. Microsoft taking action on its side would make the new package more \"official,\" IMHO.\r\n> \r\n> The .NET ecosystem does sometimes tend to assume that Microsoft has to produce a library for it to be acceptable. Many times this comes up for parsers for some reason. That's limiting in a way that doesn't seem to happen in the Java ecosystem.\r\n\r\nWell, I just had the idea to break the Solution Parser piece only into a separate `Microsoft.Build.Construction` package so I can drop it in a LINQPad script I am using to go over the `.sln` files in my source code repos directories to do mass file operations on them according to rules about their contents --- without having to drag the entire `Microsoft.Build` ecosystem into my little LINQPad script.",
        "createdAt": "2023-07-19T22:56:55Z",
        "updatedAt": "2023-07-19T22:56:55Z",
        "author": {
          "login": "astrohart"
        }
      },
      {
        "body": "> my own NuGet package would just merely be Yet Another Solution File Parser. Microsoft taking action on its side would make the new package more \"official,\" IMHO.\n\nOne thought about this - if someone wanted to try to coalesce the community around a single solution parser and position it as more than an ad hoc project, they could consider nominating it to be in the .NET foundation, ie become dotnet/solutionparser or something. This costs nothing and can help increase discoverability and broaden maintainers as well. Check out their web site for what this involves and what you get.\n\nEither way it might be helpful to have something in a readme in this repo pointing to solution parsers out there.",
        "createdAt": "2023-07-26T16:04:42Z",
        "updatedAt": "2023-07-26T16:06:21Z",
        "author": {
          "login": "danmoseley"
        }
      }
    ]
  }
}