{
  "number": 1593,
  "title": "performance issue in ReusableStringBuilder.cs with large string and many appends",
  "body": "I\u2019ve hit a bottleneck related to the stringbuilder usage in msbuild.\r\n\r\nThe problem is with this code (starting at line 86):\r\n\r\n```\r\n// Backwards because the end of the string is (by observation of Australian Government build) more likely to be different earlier in the loop.\r\n// For example, C:\\project1, C:\\project2\r\nfor (int i = borrowedBuilder.Length - 1; i >= 0; --i)\r\n{\r\n    if (borrowedBuilder[i] != other[i])\r\n    {\r\n        return false;\r\n    }\r\n}\r\n```\r\nIn my scenario, the borrowedBuilder was created by reading a file with about 300K lines (so at least that many Append() calls), and total file size is about 45MB (file is admittedly larger than it needs to be, and will be addressed independently).\r\n\r\nI had built a quick demo app that simulates this, and the problem is with indexing into the string builder to get the character.  It takes forever to run this loop (maybe an hour?).  In my demo app, if I were to create a temporary string from the string builder, the comparison loop is really fast (maybe a second?).  I didn\u2019t do actual measurements since it is very obviously different.\r\n\r\nI also just noticed that if a StringBuilder is initialized with the file size as capacity, the problem also goes away.  I didn't trace throughout all of the code, so maybe that isn't trivial to get?  In my hacky demo app, I just did this to mitigate it:\r\n\r\n```\r\nFileInfo fi = new FileInfo(filepath);\r\n\r\nStringBuilder sb = new StringBuilder((int)fi.Length);\r\n```\r\nBut even if that isn't possible, calling ToString() on the string builder and using that for comparison is a huge improvement when the size is large.\r\n",
  "state": "CLOSED",
  "createdAt": "2017-01-20T20:43:19Z",
  "updatedAt": "2024-02-21T17:22:39Z",
  "closedAt": "2018-01-04T23:09:18Z",
  "author": {
    "login": "kfritz-msft"
  },
  "labels": [
    "Area: Performance",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "@kfritz-msft was it really going through this loop only once? I did a trivial test below and it takes 0.3sec.\r\n\r\nWhich isn't to say it can't be improved.\r\n\r\n```c#\r\nnamespace ConsoleApp1\r\n{\r\n    class Program\r\n    {\r\n        static int Main(string[] args)\r\n        {\r\n            var str1 = new string('x', 45000000); \r\n            var str2 = new string('x', 45000000); \r\n            var sb1 = new StringBuilder(str1);\r\n            var sb2 = new StringBuilder(str2);\r\n\r\n            var sw = new Stopwatch();\r\n            sw.Start();            \r\n\r\n            for (int i = sb1.Length - 1; i >= 0; --i)\r\n            {\r\n                if (sb1[i] != sb2[i])\r\n                {\r\n                    Console.WriteLine(\"not equal\");\r\n                    return 1;\r\n                }\r\n            }\r\n\r\n            sw.Stop();\r\n\r\n            Console.WriteLine(\"equal\");\r\n\r\n            Console.WriteLine($\"Elapsed {sw.Elapsed}\");\r\n\r\n            return 0;\r\n        }\r\n    }\r\n}\r\n```",
        "createdAt": "2017-03-02T01:30:20Z",
        "updatedAt": "2017-03-02T01:31:51Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "Thanks for taking a look.  Yes, that version is fast as the StringBuilder is initialized with the right size and there are no appends.  I should have included a full repro app, sorry.  The problem only happens when indexing into a StringBuilder that was filled up with a lot of appends.  If you pre-init the size, it is fine.  I think the StringBuilder was created with default size, and the file I had was really big, and each line got appended into the StringBuilder.\r\n\r\nI didn't debug actual MSBuild code, but this should repro the behavior I saw when running MSBuild (it will appear to hang when the last loop is executing):\r\n\r\nusing System;\r\nusing System.Text;\r\n\r\nnamespace ConsoleApplication1\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            StringBuilder sb = new StringBuilder();\r\n\r\n            // simulate filling it up with appends from a file that has lots of files listed in it\r\n            for(int i = 0; i < 300000; i++)\r\n            {\r\n                sb.Append(new string('x', 50));\r\n                sb.Append(\";\");\r\n            }\r\n\r\n            string a = sb.ToString();\r\n\r\n            if(a == sb.ToString())\r\n            {\r\n                Console.WriteLine(\"call ToString() first, and fast\");\r\n            }\r\n\r\n            // repro loop\r\n            for (int i = a.Length - 1; i >= 0; i--)\r\n            {\r\n                if (a[i] != sb[i])\r\n                {\r\n                    break;\r\n                }\r\n            }\r\n            Console.WriteLine(\"done, and really slow\");\r\n        }\r\n    }\r\n}",
        "createdAt": "2017-03-02T01:57:44Z",
        "updatedAt": "2017-03-02T01:57:44Z",
        "author": {
          "login": "kfritz-msft"
        }
      },
      {
        "body": "I realized I never opened an issue for this. I now opened [one](https://github.com/dotnet/corefx/issues/25804). Any fix would not be in Desktop for some time, so it would probably be reasonable for MSBuild to work around this (in both places  [here](https://github.com/Microsoft/msbuild/blob/d075c6f7c09bb2d766b45ac740d867ecf08ff6bb/src/Shared/ReuseableStringBuilder.cs#L86) and [here](https://github.com/Microsoft/msbuild/blob/3986423a4cd2e7a716ab0c0d6ef28485f1844977/src/Shared/OpportunisticIntern.cs#L309)) with a simple check of the length eg., over 500 or 1000 then do `ToString()`. \r\n\r\nPerhaps you'd like to offer such a PR @kfritz-msft ? I am not on the MSBuild team but I expect they'd take it if you included some simple measurements.",
        "createdAt": "2017-12-08T23:16:38Z",
        "updatedAt": "2017-12-08T23:16:38Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "@Alois-xx  I would imagine the change would be something like\r\n```c#\r\n            if (length > 40_000)\r\n            {\r\n                return String.Equals(_borrowedBuilder.ToString(), other, StringComparison.Ordinal);\r\n            }\r\n```\r\nin the two places linked, plus explanatory comment. Note: one of those puts the length in a local, both should probably do that, as it improves the JITted code.\r\n\r\nPlus a test that puts >40K into a string to hit both places.\r\n\r\nAnd MSBuild folks may want to ask for some perf measurement because of the extra branch in this \"hot\" path.\r\n\r\n@davkean maybe you could assign to @alois-xx if you agree with this change",
        "createdAt": "2017-12-12T21:34:47Z",
        "updatedAt": "2017-12-12T21:35:06Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "@danmosemsft ,@davkean: I have create a PR for that 1593_ReusableStringBuilderPerf.\r\n\r\nLocal profilling with a sample msbuild target that appends all dlls from Windows\\System32\\*.dll up to 5 times and then compares it against a string shows an improvement of a factor two. \r\n\r\n![grafik](https://user-images.githubusercontent.com/408821/34467319-6adfd3f2-eeee-11e7-810e-7d377d2c0c9e.png)\r\n\r\nOther issues talking about an exponential perf hit are not due to the StringBuilder issue but could be due to msbuild batching where a target is call n^x times which could indeed lead to dramatic slowdowns. The Stringbuilder issue a \"simple\" O(n) problem which can be improved by a factor two, but if the target is called many times one should rework the msbuild script to create smaller lists. \r\nThe PR commit message also contains also the msbuild target file which I did use to test the performance before/after the change. ",
        "createdAt": "2018-01-01T11:28:24Z",
        "updatedAt": "2018-01-01T11:28:24Z",
        "author": {
          "login": "Alois-xx"
        }
      },
      {
        "body": "Nice, don't see the PR?",
        "createdAt": "2018-01-01T11:53:40Z",
        "updatedAt": "2018-01-01T11:53:40Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "https://github.com/Microsoft/msbuild/pull/2834",
        "createdAt": "2018-01-01T12:48:15Z",
        "updatedAt": "2018-01-01T12:48:15Z",
        "author": {
          "login": "Alois-xx"
        }
      },
      {
        "body": "Thanks @Alois-xx ! When MSBuild can depend on .NET Core 2.1, your code can be replaced with the new Equals overload and become more efficient.",
        "createdAt": "2018-01-04T23:21:34Z",
        "updatedAt": "2018-01-04T23:21:34Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "And thanks @kfritz-msft for flagging this so we could fix it.",
        "createdAt": "2018-01-04T23:22:05Z",
        "updatedAt": "2018-01-04T23:22:05Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "https://github.com/dotnet/coreclr/pull/15759",
        "createdAt": "2018-01-10T00:04:29Z",
        "updatedAt": "2018-01-10T00:04:29Z",
        "author": {
          "login": "danmoseley"
        }
      }
    ]
  }
}