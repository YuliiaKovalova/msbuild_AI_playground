{
  "number": 1285,
  "title": "Retrieve value of dynamic items and properties via MSBuild APIs",
  "body": "Hi\n\ni have this target:\n\n```\n    <Target Name=\"build\">    \n        <ItemGroup>\n            <Part1 Include=\"$(SLN1);$(SLN2)\">\n              <Properties>Platform=Any CPU</Properties>\n            </Part1>\n            <Part1 Include=\"$(SLN3);$(SLN4);\">\n           </Part1>\n        </ItemGroup>\n\n        <MSBuild Projects=\"@(Part1)\"\n                 StopOnFirstFailure=\"true\"\n                 BuildInParallel=\"true\" />\n    </Target>\n```\n\nI am trying to get the evaluated value Part1 in a application: like this\n\n```\nlet value = (msbuildproject.GetPropertyValue(\"Part1\"))\n```\n\nThis returns null, if i try let value = (msbuildproject.GetPropertyValue(\"SLN1\")) it works\n\nIf i understand the documentation this is the effect of using dynamic property, that is only evaluated when the MSBuild task is run.\n\nBut is there a alternative to evaluate those before running the that target?\n\nthanks in advance\njorge costa\n",
  "state": "CLOSED",
  "createdAt": "2016-10-29T08:48:49Z",
  "updatedAt": "2024-02-21T17:24:45Z",
  "closedAt": "2016-11-03T07:02:37Z",
  "author": {
    "login": "jmecosta"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "In your snippet, `msbuildproject.GetPropertyValue(\"Part1\")`, you are passing an item name (`Part1`) to an API that expects the name of a property (`GetPropertyValue`).\n\nYou are correct, evaluation time state (obtained via `Microsoft.Build.Evaluation.Project`) does not execute targets, and therefore state operations from within targets (dynamic properties and dynamic items) are not seen.\n\nIf possible, you can try moving the dynamic items / properties outside of targets and then evaluation time state should be good.\n\nIf, however, you cannot move the items / properties outside of targets, then you can use something similar to the following snippet to get engine state after a full build:\n\n``` C#\n            var projectInstance =\n                new ProjectInstance(@\"D:\\tests\\ConsoleApplication1.csproj\");\n\n            var result = BuildManager.DefaultBuildManager.Build(\n                new BuildParameters(),\n                new BuildRequestData(projectInstance, new string[0], new HostServices(),\n                    BuildRequestDataFlags.ProvideProjectStateAfterBuild));\n\n            Console.WriteLine(result.ProjectStateAfterBuild.GetPropertyValue(\"DynamicProperty\"));\n            Console.WriteLine(result.ProjectStateAfterBuild.Items.First(i => i.ItemType == \"DynamicItem\").EvaluatedInclude);\n```\n\nIn the previous snippet I had created an empty console application (`ConsoleApplication1`) and added some dynamic items / properties:\n\n``` xml\n  <Target Name=\"AfterBuild\">\n    <ItemGroup>\n      <DynamicItem Include=\"i\"/>\n    </ItemGroup>\n\n    <PropertyGroup>\n      <DynamicProperty>p</DynamicProperty>\n    </PropertyGroup>\n  </Target>\n```\n\nThe downside to this approach is that you also get the side effects of the build (dlls etc).\n",
        "createdAt": "2016-11-01T00:30:47Z",
        "updatedAt": "2016-11-01T00:35:44Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "@cdmihai thanks a lot for the clarification, unfortunelly the tool im using needs to support dyn properties defined inside and outside a target. and building the target is not feasible since usually each target contains multiple solutions.\n\nthe workaround im using is to parse the file and retrive that missing information where the target is defined. but i think im doing this rather inneficiently.\n\nis there a way to get the xml string for the target in question?\n",
        "createdAt": "2016-11-02T19:23:07Z",
        "updatedAt": "2016-11-02T19:23:07Z",
        "author": {
          "login": "jmecosta"
        }
      },
      {
        "body": "You can't access the raw xml, but you can retrieve just about everything via the the MSBuild 'xml construction model': `ProjectRootElement.Targets` gives you the targets, and then you can use `ProjectTargetElement.Items` or `ProjectTargetElement.Properties` to retrieve the item and property elements declared in that target.\n",
        "createdAt": "2016-11-02T20:16:56Z",
        "updatedAt": "2016-11-02T20:17:31Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "I would caution you that static analysis of MSBuild programs of this type can be extremely difficult. In the original example, you can't know what the value of `Part1` will be after a build without running a build, because a target may have run that changes the values of the properties `SLN1` and `SLN2` from what they were when the project was evaluated (but no target had been executed). Ensuring that nothing would modify those values is itself pretty difficult.\n",
        "createdAt": "2016-11-02T20:28:24Z",
        "updatedAt": "2016-11-02T20:28:30Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@cdmihai thanks for the hint, however i dont think the Items and Properties will hold Part1 on the example above since Part1 can exist and other target definitions. At least after i do let msbuildproject = new Microsoft.Build.Evaluation.Project(path) and look at those i dont see those defiitions. Or am my overlooking?\n\n@rainersigwald thanks for the hint, so for that case i assume you suggest both check the evaluated value of SLN1 exists and look inside the target (so that i get the correct value for my example). However inside the target there might be a custom task changing those SLN1 that i would not be able to catch by statically looking at that. Luckly in our context that does not exit, and i supose i will need to live with that limitation.\n",
        "createdAt": "2016-11-02T20:44:00Z",
        "updatedAt": "2016-11-02T20:44:00Z",
        "author": {
          "login": "jmecosta"
        }
      },
      {
        "body": "@jmecosta Any property or item read by the dynamic property or item that you're trying to compute could potentially have been changed by a task in the target that creates the new item _or_ in any target that runs before it. Plus you'll have to evaluate things \"as MSBuild would\"--which for simple things like your example is easy but for more complicated things like item transforms or property functions might be difficult.\n\nYou might be able to live with these limitations but you definitely should be aware of them.\n",
        "createdAt": "2016-11-02T21:00:36Z",
        "updatedAt": "2016-11-02T21:00:36Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "How to query the target xml from a `Microsoft.Build.Evaluation.Project`.\n\n``` c#\nvar project = new Project(@\"...\\ConsoleApplication1.csproj\");\n\nforeach (var target in project.Xml.Targets)\n{\n    Console.WriteLine($\"target:{target.Name}\");\n\n    foreach (var propertyGroup in target.PropertyGroups)\n    {\n        foreach (var property in propertyGroup.Properties)\n        {\n            Console.WriteLine($\"\\t{property.Name} = {property.Value}\");\n        }\n    }\n\n    foreach (var itemGroup in target.ItemGroups)\n    {\n        foreach (var item in itemGroup.Items)\n        {\n            Console.WriteLine($\"\\titem: {item.ItemType}, include={item.Include}, exclude={item.Exclude}, remove={item.Remove}\");\n        }\n    }\n}\n```\n\nAs @rainersigwald said, trying to infer things correctly from the xml will be quite hard, since you'd have to write an msbuild interpreter, whose semantics are only documented in its code. :(\nIn addition to that, you have tasks which are like black boxes that can do anything to your properties and items.\n",
        "createdAt": "2016-11-02T22:42:46Z",
        "updatedAt": "2016-11-02T22:44:17Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "@cdmihai thanks project.Xml.Targets was exactly what was was trying to find, i was looking at project.Targets :)\n\n@cdmihai @rainersigwald yes i will keep in mind this limitation, for my use case it should be ok. Since i am maitaining the msbuild files. The purpose of this is to keep track of solutions that are called within msbuild file. In principle i would imagine no one in is right mind would hide the solution output of such properties inside a custom task. \n\nThe other thing i done in past was to modify thet msbuild file, so that the target file is executed in isolation. DependsOn is removed, and in this case, remove anything from the target that does not use those properties. Than build the target and check the results as mentioned above. \n\nI am not totally sure whats the best approach, in my case (solution checking), i think just checking the nodes is ok.\n\nAnyway thanks for the help, the hints above are very usefull for anywone trying to use msbuild automation.\n\nbest regards\n\njorge costa\n",
        "createdAt": "2016-11-03T07:02:36Z",
        "updatedAt": "2016-11-03T07:02:36Z",
        "author": {
          "login": "jmecosta"
        }
      }
    ]
  }
}