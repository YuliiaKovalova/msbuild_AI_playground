{
  "number": 9613,
  "title": "[Bug]: error MSB3303: Could not resolve COM reference \"5477469e-83b1-11d2-8b49-00a0c9b7c9c4\" version 2.4.",
  "body": "### Issue Description\n\nI have a solution with more than 40 .NET projects built for different target frameworks such as `netstandard2.0`, `net472`, `net48`, `net6.0` and `net7.0`. One of the _.csproj_ files contains the following reference:\r\n\r\n```xml\r\n<ItemGroup Condition=\"'$(TargetFramework)'=='net48'\">\r\n  <COMReference Include=\"mscoree\">\r\n    <Guid>{5477469e-83b1-11d2-8b49-00a0c9b7c9c4}</Guid>\r\n    <VersionMajor>2</VersionMajor>\r\n    <VersionMinor>4</VersionMinor>\r\n    <Lcid>0</Lcid>\r\n    <WrapperTool>tlbimp</WrapperTool>\r\n    <Isolated>False</Isolated>\r\n    <EmbedInteropTypes>True</EmbedInteropTypes>\r\n  </COMReference>\r\n</ItemGroup>\r\n```\r\n\r\nThe solution is built in an Azure DevOps Pipeline on self-hosted Windows agents with _MSBuild_. The Windows machine hosts multiple Azure Pipelines Agents. If only one or two of them are enabled, the build always succeeds. However, if all six of them are enabled and used concurrently, the build regularly fails with the following error:\r\n\r\n```\r\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\MSBuild\\Current\\Bin\\Microsoft.Common.CurrentVersion.targets(2992,5): error MSB3303: Could not resolve COM reference \"5477469e-83b1-11d2-8b49-00a0c9b7c9c4\" version 2.4. The specified image file did not contain a resource section. (Exception from HRESULT: 0x80070714)\r\n```\r\n\r\nThe error message isn't useful because the specified _mscoree_ image file hasn't changed between a successful and an unsuccessful build, so it should contain the required resource section.\n\n### Steps to Reproduce\n\nThe solution is build with the following invocation from a Python script:\r\n\r\n```\r\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\MSBuild\\Current\\Bin\\MSBuild.exe [PATH TO SOLUTION] /maxCpuCount /property:Configuration=Release /property:Platform=Any CPU /restore /restoreProperty:RestoreConfigFile=[PATH TO NUGET.CONFIG];RestoreNoCache=true\r\n```\n\n### Expected Behavior\n\nThe builds should succeed regardless of how many agents are enabled on the Windows machine.\n\n### Actual Behavior\n\nWith too many agents, e.g. six, enabled and used concurrently on the Windows machine, the build regularly fails with _error MSB3303_.\n\n### Analysis\n\nThe error message that the specified _mscoree_ image file did not contain a resource section indicates that _MSBuild_ selects the wrong image file or is unable to determine whether it contains a resource section when multiple builds are running concurrently on the same Windows machine. Perhaps the image file is locked by an _MSBuild_ process while another one is trying to find its resource section. The resulting _IOException_ could then be caught to prevent an abort and replaced with an error message stating that the image file did not contain a resource section, although it was just not possible to determine if this was the case.\n\n### Versions & Configurations\n\n```\r\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise>msbuild -version\r\nMSBuild version 17.8.3+195e7f5a3 for .NET Framework\r\n17.8.3.51904\r\n```\r\n\r\n_Visual Studio Enterprise 2022_ version 17.8.3 is installed on the Windows machine.\r\nThe Windows edition is _Windows Server 2022 Standard_ version 21H2.\r\n\r\n_dotnet_ is also installed:\r\n\r\n```\r\nC:\\Users\\Administrator>dotnet --info\r\n.NET SDK:\r\n Version:           8.0.100\r\n Commit:            57efcf1350\r\n Workload version:  8.0.100-manifests.6a1e483a\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.20348\r\n OS Platform: Windows\r\n RID:         win-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\8.0.100\\\r\n\r\n.NET workloads installed:\r\n Workload version: 8.0.100-manifests.6a1e483a\r\nThere are no installed workloads to display.\r\n\r\nHost:\r\n  Version:      8.0.0\r\n  Architecture: x64\r\n  Commit:       5535e31a71\r\n\r\n.NET SDKs installed:\r\n  6.0.411 [C:\\Program Files\\dotnet\\sdk]\r\n  7.0.305 [C:\\Program Files\\dotnet\\sdk]\r\n  7.0.403 [C:\\Program Files\\dotnet\\sdk]\r\n  8.0.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.App 6.0.19 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 6.0.25 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 7.0.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 7.0.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 7.0.14 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 8.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 6.0.19 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 6.0.25 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 7.0.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 7.0.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 7.0.14 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 8.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 6.0.19 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 6.0.25 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 7.0.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 7.0.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 7.0.14 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 8.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nOther architectures found:\r\n  x86   [C:\\Program Files (x86)\\dotnet]\r\n    registered at [HKLM\\SOFTWARE\\dotnet\\Setup\\InstalledVersions\\x86\\InstallLocation]\r\n\r\nEnvironment variables:\r\n  Not set\r\n\r\nglobal.json file:\r\n  Not found\r\n```",
  "state": "OPEN",
  "createdAt": "2024-01-09T07:50:29Z",
  "updatedAt": "2024-02-14T13:47:31Z",
  "closedAt": null,
  "author": {
    "login": "joperator"
  },
  "labels": [
    "bug",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "ladipro"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "@joperator, what does typelib ID `{5477469e-83b1-11d2-8b49-00a0c9b7c9c4}` resolve to on the problematic machine? Do any of the projects you're building write the file or the relevant registration?\r\n\r\n> Perhaps the image file is locked by an MSBuild process while another one is trying to find its resource section.\r\n\r\nI've tried locking the .tlb and 1) its location makes it hard to lock it for writing, 2) locking it for reading does not seem to be causing the exception you're seeing.",
        "createdAt": "2024-01-16T16:31:09Z",
        "updatedAt": "2024-01-16T16:31:09Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "According to the _.ResolveComReference.cache_ file, the typelib ID resolves to _C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\mscoree.tlb_, which is also the same path that is in the registry. The projects don't write the file (date modified: 08.05.2021) or the relevant registration. The COM reference is only used to create an instance of the [CorRuntimeHost](https://learn.microsoft.com/en-us/dotnet/framework/unmanaged-api/hosting/corruntimehost-coclass) coclass from the `mscoree` namespace to call the [GetDefaultDomain](https://learn.microsoft.com/en-us/dotnet/framework/unmanaged-api/hosting/icorruntimehost-getdefaultdomain-method) method.\r\n\r\nAnother detail that might be relevant: The projects that are built are located on a different drive (_D:_) than the type library _mscoree.tlb_ (_C:_).",
        "createdAt": "2024-01-17T08:22:38Z",
        "updatedAt": "2024-01-17T08:22:38Z",
        "author": {
          "login": "joperator"
        }
      },
      {
        "body": "It looks like ResolveComReference.Execute passes only the Exception.Message to the logging function, so the `MSBUILDDIAGNOSTICS` environment variable won't make it show the stack trace from which the exception was thrown.\r\n\r\n<https://github.com/dotnet/msbuild/blob/195e7f5a3a8e51c37d83cd9e54cb99dc3fc69c22/src/Tasks/ResolveComReference.cs#L432-L437>\r\n\r\nAre multiple agents using the same TEMP directory in the same computer?  Perhaps the interop assembly is generated there and parallel accesses cause a conflict.",
        "createdAt": "2024-01-17T09:25:02Z",
        "updatedAt": "2024-01-17T09:25:02Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "All agents are running under the same user account, so I assume they are using the same TEMP directory. If they want to create an interop assembly in the same location at the same time, it's likely that they cause a conflict.",
        "createdAt": "2024-01-17T10:05:09Z",
        "updatedAt": "2024-01-17T10:05:09Z",
        "author": {
          "login": "joperator"
        }
      },
      {
        "body": "I believe that interop assemblies should be created in the per-project/config/TFM intermediate directory. Do you think you can configure the builds to produce binlogs (`/bl`) to analyze the builds next time this happens?",
        "createdAt": "2024-01-17T10:17:59Z",
        "updatedAt": "2024-01-17T10:17:59Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "Sure, if it helps to analyze the issue, I'll give binlogs a try...",
        "createdAt": "2024-01-17T11:12:54Z",
        "updatedAt": "2024-01-17T11:12:54Z",
        "author": {
          "login": "joperator"
        }
      },
      {
        "body": "@ladipro \r\nI now have a binlog from a failed build. For privacy reasons, I had to copy the subtree of the failed `ResolveComReferences` target and replace all private information. The failing project that has the COM reference to _mscoree_ is now called _MyProject_ in the [MyProject.log](https://github.com/dotnet/msbuild/files/14266745/MyProject.log).\r\n",
        "createdAt": "2024-02-13T13:46:47Z",
        "updatedAt": "2024-02-13T13:46:47Z",
        "author": {
          "login": "joperator"
        }
      },
      {
        "body": "Thank you. The error is thrown after all the\r\n\r\n`Processing COM reference \"mscoree\" from path \"C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\mscoree.tlb\". Type '<typename>' imported.`\r\n\r\nlog output, which confirms that the task was able to read the .tlb and the error is really related to the interop assembly (the file written by the task). I guess this brings us back to Kalle's suspicion that multiple builds are racing to write the same file. Where is the interop assembly generated when the build succeeds?",
        "createdAt": "2024-02-13T14:50:18Z",
        "updatedAt": "2024-02-13T14:50:18Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "Process Monitor could be helpful for logging any STATUS_SHARING_VIOLATION or STATUS_ACCESS_DENIED errors during the build.",
        "createdAt": "2024-02-13T18:13:08Z",
        "updatedAt": "2024-02-13T18:13:08Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "> Where is the interop assembly generated when the build succeeds?\r\n\r\nWhen the build succeeds, the binlog contains the following lines instead:\r\n\r\n```\r\n...\r\nProcessing COM reference \"mscoree\" from path \"C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\mscoree.tlb\". Type 'TypeNameFactory' imported.\r\nResolved COM reference for item \"mscoree\": \"obj\\Release\\net48\\Interop.mscoree.dll\".\r\n```",
        "createdAt": "2024-02-14T08:19:56Z",
        "updatedAt": "2024-02-14T08:19:56Z",
        "author": {
          "login": "joperator"
        }
      },
      {
        "body": "Assuming this is really a project-relative directory and there's no way multiple agents can access the same path, I'm afraid this will require some instrumentation to figure out what's holding the file locked. Anti-virus software tends to be problematic so maybe one random idea is to try disabling it if present.",
        "createdAt": "2024-02-14T12:25:21Z",
        "updatedAt": "2024-02-14T12:25:21Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "> Assuming this is really a project-relative directory and there's no way multiple agents can access the same path, ...\r\n\r\nYes, I also assume that.\r\n\r\n> Anti-virus software tends to be problematic so maybe one random idea is to try disabling it if present.\r\n\r\nNo anti-virus software is present on the affected system, or I don't have sufficient permissions to see it, but I really don't think there is any anti-virus software other than the default Windows security tools installed. So follow Kalle's advice and give Process Monitor a try?",
        "createdAt": "2024-02-14T13:40:23Z",
        "updatedAt": "2024-02-14T13:40:23Z",
        "author": {
          "login": "joperator"
        }
      },
      {
        "body": ">  So follow Kalle's advice and give Process Monitor a try?\r\n\r\nYes, that's probably the easiest thing to do now.",
        "createdAt": "2024-02-14T13:47:30Z",
        "updatedAt": "2024-02-14T13:47:30Z",
        "author": {
          "login": "ladipro"
        }
      }
    ]
  }
}