{
  "number": 5726,
  "title": "MSBuild should sanitize environment block on startup",
  "body": "### Issue Description\r\n\r\nWe have a command-line set of tools written in JavaScript (nodeJS) which launch msbuild. Our command line tool is launched via yarn.\r\n\r\nSome tools like [Yarn](http://yarnpkg.com) will spawn [nodeJS](http://node.org) via CreateProcess and pass an environment block that contains duplicated environment variables, e.g:\r\n![image](https://user-images.githubusercontent.com/22989529/92633870-48424c80-f288-11ea-92e4-2abef21ea9c5.png)\r\nSee how the same environment variable is set twice, with different casing.\r\n\r\nWindows doesn't do any checking of environment variables being duplicated in CreateProcess so the node.exe process gets created with the two names. Then in our case, MSBuild gets launched from within node.exe, which later launches CL.exe and other build tools.\r\n\r\nThe Azure DevOps CI pipeline sets `NPM_CONFIG_CACHE` (all caps), while yarn will add the lowercase `npm_config_cache` to the environment block when a process is launched via `child_process.exec()`. See https://github.com/actions/virtual-environments/blob/b47ba413c9bd9411407b8a5cf18e2c14ea8bda78/images/win/scripts/Installers/Install-NodeLts.ps1.\r\n\r\nAs a result of this, we are hitting an error in our CI because MultiTaskTool is probably putting variables in a case-insensitive dictionary and doesn't expect to find the same variable twice:\r\n`C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\\MSBuild\\Microsoft\\VC\\v160\\Microsoft.CppCommon.targets(375,5): error MSB6001: Invalid command line switch for \"CL.exe\". System.ArgumentException: Item has already been added. Key in dictionary: 'NPM_CONFIG_CACHE'  Key being added: 'npm_config_cache' [D:\\a\\1\\s\\vnext\\Common\\Common.vcxproj]`\r\n\r\n### Steps to Reproduce\r\n\r\n*nodeJS file: test.js*\r\n```js\r\nconsole.log(process.env);\r\nchild_process.execSync(\"path_to_msbuild/msbuild.exe myproj.vcxproj\");\r\n```\r\n\r\n*myproj.vcxproj*, just a regular C++ project\r\n\r\nin `packages.json` add an entry e.g. \r\n\r\n`\"run\": \"test.js\"`\r\n\r\nin cmd, `set NPM_CONFIG_CACHE`\r\n\r\nthen run `yarn run`. See that the console.log in test.js shows the variable duplicated, and see that the task to launch CL breaks with an error similar to the above.\r\n\r\n### Expected Behavior\r\nBuild doesn't break\r\n\r\n### Actual Behavior\r\nBuild breaks :)\r\n\r\n### Analysis\r\nArguably `System.Diagnostics.Process` should sanitize its environment variables, but I'm not sure if that is fixable without introducing breaking changes so that's why I'd like msbuild to guard against this.\r\n\r\n### Versions & Configurations\r\nall versions\r\n\r\n### Attach a binlog\r\n[msbuild_2720.zip](https://github.com/dotnet/msbuild/files/5197107/msbuild_2720.zip)\r\n\r\n",
  "state": "CLOSED",
  "createdAt": "2020-09-09T18:00:50Z",
  "updatedAt": "2024-05-10T21:12:38Z",
  "closedAt": "2020-09-16T15:57:43Z",
  "author": {
    "login": "asklar"
  },
  "labels": [
    "bug",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Looks like the one layer you didn't file a bug in is `MultiToolTask`--can you file a Visual Studio Feedback issue for that and I can expedite routing? That feels like the easiest immediate solution to the problem you're seeing.",
        "createdAt": "2020-09-09T19:12:54Z",
        "updatedAt": "2020-09-09T19:12:54Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald Thanks! \r\nDevCom: https://developercommunity.visualstudio.com/content/problem/1179475/multitooltask-should-sanitize-environment-variable.html",
        "createdAt": "2020-09-09T19:16:38Z",
        "updatedAt": "2020-09-09T19:16:38Z",
        "author": {
          "login": "asklar"
        }
      },
      {
        "body": "Failing stack (from an email):\r\n\r\n```\r\nSystem.ArgumentException:\r\nItem has already been added. Key in dictionary: 'NPM_CONFIG_CACHE'  Key\r\nbeing added: 'npm_config_cache' \r\n   at System.Collections.Hashtable.Insert(Object key, Object nvalue, Boolean add)\r\n   at System.Diagnostics.ProcessStartInfo.get_EnvironmentVariables()\r\n   at Microsoft.Build.Utilities.ToolTask.GetProcessStartInfo(String pathToTool,\r\nString commandLineCommands, String responseFileSwitch)\r\n   at Microsoft.Build.Utilities.ToolTask.ExecuteTool(String pathToTool, String\r\nresponseFileCommands, String commandLineCommands)\r\n   at Microsoft.Build.CPPTasks.TrackedVCToolTask.TrackerExecuteTool(String\r\npathToTool, String responseFileCommands, String commandLineCommands)\r\n   at Microsoft.Build.CPPTasks.TrackedVCToolTask.ExecuteTool(String pathToTool,\r\nString responseFileCommands, String commandLineCommands)\r\n   at Microsoft.Build.Utilities.ToolTask.Execute() \r\n```\r\n\r\nSo the problem is not actually fixable in `MultiToolTask`, sorry. I think you're right that MSBuild would have to defensively reset our own environment at startup to work around the .NET Framework bug. That has concerning implications, and I'm actually not sure how to do it--does calling the [win32 `SetEnvironmentVariable`](https://docs.microsoft.com/windows/win32/api/winbase/nf-winbase-setenvironmentvariable) actually clean up the environment block? Or does it just replace the first match occurrence and go on its merry way?",
        "createdAt": "2020-09-09T19:29:12Z",
        "updatedAt": "2020-09-09T19:29:12Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Is it possible to add a layer of indirection, like invoking a batch file that does\r\n\r\n```cmd\r\nset NPM_CONFIG_CACHE=%NPM_CONFIG_CACHE%\r\nmsbuild...\r\n```\r\n\r\n?\r\n\r\nOr even maybe \"clear it out harder\" like so:\r\n\r\n```cmd\r\nset ORIGINAL_NPM_CONFIG_CACHE=%NPM_CONFIG_CACHE%\r\nset NPM_CONFIG_CACHE=\r\nset npm_config_cache=\r\n\r\nset NPM_CONFIG_CACHE=%ORIGINAL_NPM_CONFIG_CACHE%\r\n\r\nmsbuild...\r\n\r\n```",
        "createdAt": "2020-09-09T19:31:57Z",
        "updatedAt": "2020-09-09T19:31:57Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald I checked the implementation of SetEnvironmentVariable - we first search for the variable name (case insensitive) and then just replace the value (without resetting the name).\r\nSo resetting the value like in your 2nd example would work, in fact that's what @jtpetty did for a test as I found out when searching for other usages of this: https://github.com/microsoft/azure-pipelines-tasks/blob/e2b6d30d68bd4cc2d465560f3be4293c6dd2956c/Tests/lib/Start-TestRunner.ps1#L65-L71\r\n\r\nThe problem is that we won't know ahead of time all of the other possible variables that npm decides to throw at msbuild, so I feel MSBuild needs to guard against this (if it can't be done in MTT)",
        "createdAt": "2020-09-09T19:40:55Z",
        "updatedAt": "2020-09-09T19:41:51Z",
        "author": {
          "login": "asklar"
        }
      },
      {
        "body": "Team Triage: We are hesitant to make a change like this due to it being fairly invasive, expensive and able to be worked around at other levels.",
        "createdAt": "2020-09-16T15:57:43Z",
        "updatedAt": "2020-09-16T15:57:43Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "\r\nCan please make clear the work around? I get the same error except the duplicated key is \"Path\" and \"PATH\".\r\n",
        "createdAt": "2021-02-16T18:50:00Z",
        "updatedAt": "2021-02-16T18:51:04Z",
        "author": {
          "login": "TomzBench"
        }
      },
      {
        "body": "This issue is worse than reported.  As i note in my [maven-exec-plugin pull request](https://github.com/mojohaus/exec-maven-plugin/pull/427), even if the plugin doesn't send duplicate env vars, this is an issue even if the env vars are converted to UPPERCASE, because MSBuild seems to reach into the registry and try to re-add the env vars it finds, but it fails because it doesn't check for case-insensitive dupes until it is too late",
        "createdAt": "2024-05-10T21:12:37Z",
        "updatedAt": "2024-05-10T21:12:37Z",
        "author": {
          "login": "wheezil"
        }
      }
    ]
  }
}