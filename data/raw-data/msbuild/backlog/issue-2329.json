{
  "number": 2329,
  "title": "Remove operation should not match against its globs",
  "body": "Remove operations can reference values, globs, and other items. Its implementation is split in two parts\r\n- Its globs are propagated to past include operations, such that the file walking can backtrack out\r\n- Its values and item references remain with the operation, and are matched against whenever the actual Remove operations needs to execute\r\n\r\nHowever, when the actual Remove operation executes, it still looks at its globs and does Regex matching, in addition to matching its potential values and referenced items. This is unnecessary, since the globs got propagated to past operations. Not matching the globs would also be a test for the lookahead optimization :)",
  "state": "OPEN",
  "createdAt": "2017-07-19T22:36:49Z",
  "updatedAt": "2024-02-21T16:36:20Z",
  "closedAt": null,
  "author": {
    "login": "cdmihai"
  },
  "labels": [
    "backlog",
    "Area: Performance",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Building a project like this one:\r\n\r\n```xml\r\n<Project>\r\n  <ItemGroup>\r\n    <Test Include=\"somefile.vb\" />\r\n    <Test Include=\"**/*.cs\" />\r\n    <Test Remove=\"**/somefile.*\" />\r\n  </ItemGroup>\r\n\r\n  <Target Name=\"Build\">\r\n    <Message Text=\"@(Test, ', ')\" />\r\n  </Target>\r\n</Project>\r\n```\r\n\r\nI see `FileMatcher` invoked only once - with filespec of `\"**/*.cs\"` and one exclude filespec of `\"**/somefile.*\"`. The redundant matching against the Remove pattern must have been eliminated since the issue was filed. Opportunistically closing, @cdmihai please reopen if I misunderstood.",
        "createdAt": "2021-04-13T10:31:45Z",
        "updatedAt": "2021-04-13T10:31:45Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "@ladipro\r\nMy bad, I didn't link the code where it happens: https://github.com/dotnet/msbuild/blob/13522d2466ae1634177e2a6a40fefaedff95139c/src/Build/Evaluation/LazyItemEvaluator.RemoveOperation.cs#L54\r\nRemove operations should not match against their globs, because their globs flow backward to the previous include operations. So matching against the globs is wasted work. If the sdk has glob removes that match against many items, I think this should lead to some good measurable perf gains.",
        "createdAt": "2021-04-13T17:11:48Z",
        "updatedAt": "2021-04-13T17:11:48Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "@cdmihai thank you for following up! Makes perfect sense now.",
        "createdAt": "2021-04-13T19:47:33Z",
        "updatedAt": "2021-04-13T19:47:33Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "@AR-May   \r\n\r\n> If the sdk has glob removes that match against many items, I think this should lead to some good measurable perf gains.\r\n\r\nDoes that mean we could write one function for example as follow to remove the match item from the include items.\r\n                public void RemoveAll(string glob) // Glob is remove glob string\r\n                {\r\n                    Regex regex = new Regex(glob, RegexOptions.IgnoreCase);\r\n                    _listBuilder.RemoveAll(x=>regex.IsMatch(x.Item.EvaluatedIncludeEscaped));\r\n                }",
        "createdAt": "2022-11-01T08:13:52Z",
        "updatedAt": "2022-11-02T01:44:42Z",
        "author": {
          "login": "JaynieBai"
        }
      },
      {
        "body": "I took a look at example from @ladipro and the code around includes and removals. It seems to me that future removes are propagated only to includes with globes (which is obviously done for better perf). It is an optimization in the [FileMacther](https://github.com/dotnet/msbuild/blob/7037436dc4d2038407c8592b9e256f0cf777f20c/src/Shared/FileMatcher.cs#L871). If you include the item or the item group, the future removes are not checked and excluded. Since we are unable to track from which include the item was added this indeed could lead to double match check for remove globes. And we also could not just remove matching against globes in the remove, it would lead to bug. We might want to try applying the future removes on all other types of include together with the proposed change, similar as to how it is done for including with globes. \r\n\r\n@JaynieBai I am not sure I understood your idea for the change. However, I suggested some analysis of my own above. Please tell me if you need any more comments on this. Note: the order of includes and removals matters, if we go for changing includes, we will need to exclude from there only future removals.",
        "createdAt": "2022-11-21T12:10:01Z",
        "updatedAt": "2022-11-21T12:10:01Z",
        "author": {
          "login": "AR-May"
        }
      }
    ]
  }
}