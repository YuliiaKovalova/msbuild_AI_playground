{
  "number": 9179,
  "title": "[Bug]: Properties being removed from project as part of solution build, leading to race conditions.",
  "body": "### Issue Description\n\nHello! We've been having intermittent failures when building one of our solutions. It includes a library being built at the top-level as well as because it is a dependency of another project in the solution. We are running into the file access issue described [here](https://learn.microsoft.com/en-us/visualstudio/msbuild/fix-intermittent-build-failures?view=vs-2022), suggesting a race condition during the build.\r\n\r\nI investigated the binlogs (would like to avoid posting them), and indeed there is a difference in `Properties/Global` for both of them. The build triggered because it's included as a dependency is missing `TargetFramework`. So that presumably is causing the project to be built twice.\r\n\r\nMy confusion is that the log includes a line that says\r\n```\r\nRemoving Properties for project\r\n```\r\nand the project in question. It is removing one property: `TargetFramework`.\r\n\r\nSo, in summation, based on my research, the project is being built twice, leading to a race condition, because it is missing `TargetFramework`, and it is missing `TargetFramework` because something (MSBuild? dotnet?) is deciding to remove the property.\r\n\r\nMy question is, is my assessment correct? And if so, how do I get it to stop removing that property?\r\n\r\nApologies if this has been answered elsewhere or already filed, I couldn't find it.\n\n### Steps to Reproduce\n\nThe command I'm running is\r\n```\r\ndotnet build $SOLUTION_FILE --configuration Release --self-contained True --verbosity Normal /property:WarningLevel=0 --noLogo -p:$RUNTIME_PROP_NAME=win-x64 --framework net6.0\r\n```\n\n### Expected Behavior\n\nBuild consistently succeeds.\n\n### Actual Behavior\n\nBuild intermittently fails with a file access error.\n\n### Analysis\n\n_No response_\n\n### Versions & Configurations\n\nWindows 11\r\ndotnet 6.0.406\r\ndotnet msbuild --version outputs\r\n```\r\nMSBuild version 17.3.2+561848881  for .NET\r\n17.3.2.46303\r\n```",
  "state": "OPEN",
  "createdAt": "2023-08-28T21:54:36Z",
  "updatedAt": "2024-10-11T14:10:34Z",
  "closedAt": null,
  "author": {
    "login": "orehmane"
  },
  "labels": [
    "bug",
    "backlog",
    "Priority:2",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "This is the expected behavior, though I'm having a hard time finding a canonical bug--https://github.com/dotnet/sdk/issues/26690 is too new. https://github.com/dotnet/sdk/issues/9585 is also related.\r\n\r\nIn short: don't specify a `TargetFramework` when building a solution, because it causes build race conditions exactly as you describe.\r\n\r\n@dsplaisted do we have a better canonical bug for this problem? We should also consider doing TF negotiation from sln->individual projects again.\r\n\r\n",
        "createdAt": "2023-08-28T22:07:35Z",
        "updatedAt": "2023-08-28T22:07:35Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Thanks for your help! So in the case of a solution that includes multi-targeted projects, it's not possible to build only for a specific framework without causing this race condition?",
        "createdAt": "2023-08-28T22:36:04Z",
        "updatedAt": "2023-08-28T22:36:04Z",
        "author": {
          "login": "orehmane"
        }
      },
      {
        "body": "@orehmane Just to provide some background detail that may help:\r\n\r\nA solution file (.sln) is not an MSBuild file. When a solution file is passed to MSBuild, MSBuild creates a ['meta project'](https://learn.microsoft.com/en-us/visualstudio/msbuild/how-to-build-specific-targets-in-solutions-by-using-msbuild-exe?view=vs-2022#troubleshooting) in memory and runs it. The meta project builds each of the projects included in the solution.\r\n\r\nThe `Removing Properties for project` message indicates that one or more [global properties](https://learn.microsoft.com/en-us/visualstudio/msbuild/msbuild-properties?view=vs-2022#global-properties) are being 'undefined' for a project.\r\n\r\nThe `--framework` option to `dotnet build` manipulates the `TargetFramework` property. The documentation for the `--framework` option says that \"The framework must be defined in the [project file](https://learn.microsoft.com/en-us/dotnet/core/project-sdk/overview).\" ~~so, in broad strokes, the `--framework` option performs an intersection (aka AND) operation against a project's existing `TargetFramework` property and updates the `TargetFramework` property value to the result.~~ The solution meta project doesn't define a `TargetFramework` property for itself.\r\n\r\n_(Updated to strikeout and remove incorrect information.)_",
        "createdAt": "2023-08-29T14:17:35Z",
        "updatedAt": "2023-08-29T15:05:08Z",
        "author": {
          "login": "jrdodds"
        }
      },
      {
        "body": "> in the case of a solution that includes multi-targeted projects, it's not possible to build only for a specific framework without causing this race condition?\r\n\r\nCorrect.",
        "createdAt": "2023-08-29T14:51:37Z",
        "updatedAt": "2023-08-29T14:51:37Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> in broad strokes, the `--framework` option performs an intersection (aka AND) operation against a project's existing `TargetFramework` property and updates the `TargetFramework` property value to the result.\r\n\r\n@jrdodds this isn't quite right--`--framework {foo}` is implemented by passing `-p:TargetFramework={foo}` along to MSBuild. It doesn't inspect the project file (or solution) that's being built first. The docs are indicating that it is confusing and almost certainly wrong to override what's in the project file--though it can in some cases work (for instance if you have a plain template 6.0 console app, you can build it as 8.0 with `dotnet build --framework net8.0` and it'll almost certainly work, since there aren't any significant breaking changes to it in the net6->net8 update).",
        "createdAt": "2023-08-29T14:56:33Z",
        "updatedAt": "2023-08-29T14:56:33Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald Thanks for the correction.",
        "createdAt": "2023-08-29T15:00:15Z",
        "updatedAt": "2023-08-29T15:00:15Z",
        "author": {
          "login": "jrdodds"
        }
      },
      {
        "body": "Details on the race:\r\n\r\nGiven an `Overall.sln` solution with two projects, a `WebApp.csproj` that has `<TargetFrameworks>net6.0;net7.0</TargetFrameworks>` and a `Library.csproj` with only `<TargetFramework>net6.0</TargetFramework>`, if you specify a TF as a global property for the solution, you get this:\r\n\r\n```mermaid\r\n---\r\ntitle: Solution TargetFramework race\r\n---\r\nflowchart TD\r\n    subgraph WebApp.csproj\r\n        P_net6[WebApp<br/>TF=net6.0]\r\n    end\r\n    subgraph \"Library.csproj\"\r\n        L_net6[Library<br/>global TF=net6.0]\r\n        L[Library<br/>global TF=''<br/>TF=net6.0]\r\n    end\r\n    sln[Overall.sln] --> P_net6\r\n    sln --> L_net6\r\n    P_net6 <-->|get TFs| Library.csproj\r\n    P_net6 --> L\r\n```\r\n\r\nThe bottom two have all the same properties (`TF=net6.0`) but appear different to the MSBuild engine, because their _global_ properties are different. So they run separately and in parallel, and can cause data races.",
        "createdAt": "2023-08-29T16:14:13Z",
        "updatedAt": "2023-08-29T16:14:13Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald What is follow up with this issue, please?",
        "createdAt": "2024-02-01T11:04:40Z",
        "updatedAt": "2024-02-01T11:04:40Z",
        "author": {
          "login": "rokonec"
        }
      },
      {
        "body": "Is there any update on the issue? Still having it in **.net 8**",
        "createdAt": "2024-08-09T01:02:26Z",
        "updatedAt": "2024-08-09T01:02:26Z",
        "author": {
          "login": "sevenate"
        }
      },
      {
        "body": "Cross-site dupe: https://github.com/dotnet/sdk/issues/38575",
        "createdAt": "2024-10-11T14:10:32Z",
        "updatedAt": "2024-10-11T14:10:32Z",
        "author": {
          "login": "jhudsoncedaron"
        }
      }
    ]
  }
}