{
  "number": 291,
  "title": "Needs new debugger ... or something",
  "body": "So, um, right now, debugging complex build processes is harder than it has to be:\n1. The (formerly?) experimental `MSBUILDDEBUGGING` approach is extremely slow, seems brittle, has an unfortunate dependence on Just My Code, and for some scenarios requires running Visual Studio under the debugger.  (It's _very_ easy to lose control of the target build process.) However, if you can manage to get to point in the build that you are interested in, it _can_ provide some quite useful information about the state of things at that time.\n2. Log output seems to provide more-or-less enough information, but finding the relevant portions for a complex build, especially one with many recursive invocations, is fairly painful.\n\nSo, we could really use a better approach to debugging.  Perhaps something based on stepping back and forth through some kind machine-readable of log file?\n",
  "state": "OPEN",
  "createdAt": "2015-10-19T03:26:59Z",
  "updatedAt": "2025-06-02T08:30:37Z",
  "closedAt": null,
  "author": {
    "login": "SamB"
  },
  "milestone": {
    "title": "Consider for Next Major Version"
  },
  "assignees": {
    "nodes": []
  },
  "labels": [
    "Area: Debuggability",
    "User Experience",
    "triaged"
  ],
  "comments": {
    "nodes": [
      {
        "body": "I'm not sure if you're referring to the undocumented/unsupported Registry Key (DebuggerEnabled) discussed here: http://blogs.msdn.com/b/visualstudio/archive/2010/07/06/debugging-msbuild-script-with-visual-studio.aspx\n\nWhile I agree that debugger is less than ideal, in most cases it seems to meet any needs I've ever run into (even in extremely complex build script scenarios). Is there a particular scenario you're running into that you could describe in better detail? \n",
        "createdAt": "2015-10-19T03:33:16Z",
        "author": {
          "login": "aolszowka"
        }
      },
      {
        "body": "@aolszowka Can you elaborate on cases where you've found the debugger useful?  Since it's never been \"officially supported\" and since no one on the MSBuild team ever used it to debug build problems and we couldn't find an advocate for it, we're currently planning to remove it entirely from future releases (see for example #144).\n",
        "createdAt": "2015-10-19T16:18:50Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@aolszowka: I was referring to that functionality, yes, though it seems to be a lot simpler to just set `MSBUILDDEBUGGING=1` in the environment manually rather than mucking about with those registry keys, what with the version-dependence and WoW64 redirection and all that, just to persuade MSBuild to set the very same environment variable.\n\nI've tried it on a few different things, mostly using VS's MSBuild 14.0 release binaries, and kept seeming to lose control of the target; \"step over\" and \"step out\" seemed the worst, but on at least one occasion I had \"step in\" more-or-less hang both the target process and the IDE instance I was running the debugger in (though for some reason they did not use much CPU, and the debugger stopped acting hung once I killed the target).\n\nIn one of my earlier attempts to use the feature, I tried it using a self-built copy of MSBuild, and I discovered that it really doesn't work very well when MSBuild is considered \"My Code\".  (Or when \"Just My Code\" is off.)\n\nIt's also quite tricky to figure out which elements could possibly have breakpoints set on them, and I really can't see any way around this that doesn't involve knowing the future (though it would help if there were indicators in the margin for each possible breakpoint in already-loaded code ...)\n\nIn conclusion, it seems to me that the main thing that wouldn't be easier and more efficient to implement in a trace-replay-based debugger is to step through Task code, but given the reliance on \"Just My Code\" that's kind of limited in applicability, too.  The other thing is that you don't get UI \"for free\", and have to either write IDE/editor-specific code or a freestanding tool, but given the quality of the \"free\" UI, this would probably be more-or-less necessary anyway.\n\nBut I'd already seen someone mention removal of this feature as if it were all-but-inevitable, so I didn't think it was really necessary to go into so much detail (if you can call it detail).\n",
        "createdAt": "2015-10-20T00:46:03Z",
        "author": {
          "login": "SamB"
        }
      },
      {
        "body": "@rainersigwald @SamB \nLooking at the various issues it does seem inevitable that the current \"experimental\" debugger is going away. I want to enforce SamB's comments that some form of debugging beyond trace logging is very desirable. As a relatively new customizer of MSBuild scripts I am finding it exceedingly difficult to follow just how my script it executing. I am having the same 14.0 release issues described above.\nI know the comment was made the the MSBuild team members don't use the debugger, but that is a select group of MSBuild script experts so it isn't really a valid sample of those who write MSBuild scripts.\n",
        "createdAt": "2015-11-13T15:31:25Z",
        "author": {
          "login": "MarkStega"
        }
      },
      {
        "body": "It would be nice if this feature were _improved_ rather than _dropped_, if only for its enormous value in aiding comprehension of the stock MSBuild targets files.\n",
        "createdAt": "2016-03-17T10:34:15Z",
        "author": {
          "login": "drvink"
        }
      },
      {
        "body": "OK, I'm going to try to focus this discussion around a proposal. Thoughts? \r\n\r\nMotivation\r\n----------\r\nI believe it is time to give debugging another attempt, from a different angle.\r\n\r\nAlthough I have a soft spot in my heart for the VS based debugger, it was finicky and heavyweight. In innumerable hours debugging build process I never used my own debugger. I relied on logs and dumping values with the `<Warning>` tag.  It is slow work and not much has improved since then.\r\n\r\nMost of the time I have simple questions:\r\n\r\n 1. What is setting this property/adding this item?\r\n 2. What is the value of this property/item list at this point?\r\n 3. Why is this condition true/false?\r\n\r\nThere are other questions I ask but what I'm proposing could be extended to cover most of them. \r\n\r\nUsage\r\n-----\r\nWe can get elaborate, but to start simple we need 6 commands and 1 parameter to msbuild.exe\r\n\r\n    msbuild my.csproj /break:<symbol>\r\n    \r\nThis breaks when a property, item type, metadata type, task or target name, warning or error code, or file location are encountered that match the parameter.\r\n\r\nExamples:\r\n\r\n    msbuild my.csproj /break:OverwriteOnUpload\r\n\r\nAlso possible:\r\n\r\n    msbuild my.csproj /break:cloudtest.targets(59)\r\n\r\nThis would build and break into the console:\r\n\r\n    Break at cloudtest.targets(59)\r\n    >\r\n\r\nGet help:\r\n\r\n    >?\r\n    where, show, set, step, break, breaks, go, ??\r\n  \r\n`??` would show descriptions of all the commands - the debugger is completely self documenting.\r\n\r\nGet context:\r\n\r\n    >where\r\n              cloudtest.targets(59): <OverwriteOnUpload Condition=\"'$(OverwriteOnUpload)' == ''\">false</OverwriteOnUpload> \r\n   \r\nDisplay property values matching pattern:\r\n\r\n    >show TestILCZipFileName\r\n    default.zip\r\n\r\nItems:\r\n\r\n    >show Reference\r\n    System.dll\r\n    mscorlib.dll\r\n\r\nIf it forms a valid condition we show the expansion and evaluation:\r\n   \r\n    >show '$(OverwriteOnUpload)' == ''\"\r\n    'true' == ''\r\n    false\r\n\r\nIssued without parameters it would be reasonable for `show` to operate on any condition on the current tag, and also on the body of it.\r\n\r\n    >show\r\n    'true' == ''\r\n    false\r\n    false  \r\n\r\nSet properties:\r\n\r\n    >set OverwriteOnUpload=\r\n    \r\nSingle step:\r\n\r\n    >step\r\n\r\n    >where\r\n    cloudtest.targets(60):     <TimeoutInSeconds Condition=\"'$(TimeoutInSeconds)' == ''\">600</TimeoutInSeconds>\r\n\r\nList breakpoints:\r\n\r\n    >breaks\r\n    OutputPath\r\n    CloudTest.targets(60)\r\n\r\nClear breakpoint (nb: could use a more discoverable syntax)\r\n\r\n    >break -OutputPath\r\n\r\n    >breaks\r\n    CloudTest.targets(60)\r\n\r\nContinue\r\n\r\n    >go\r\n\r\nNormal console logging would interspersed with the debugger commands. (It could be redirected to a file if that was confusing.)\r\n\r\nLimitations\r\n----\r\n\r\nThese limitations come naturally but allow us to hit the 80% case with something simple and quick to use.\r\n\r\n - msbuild.exe only. Almost always, a build issue reproduces at the console and it's easier to work there. \r\n - single processor only. Race bugs are better diagnosed by another means such as using [this logger](https://github.com/dotnet/buildtools/blob/2ba3679dbccd7ee0a79ae8d18fede36232417aff/src/Microsoft.DotNet.Build.Tasks/BinClashLogger.cs) -- that's something to discuss separately.\r\n - line-based. You don't see the full source context as you would in an IDE. I can imagine ways it could be extended in that direction this turns out to be important.\r\n - no attach\r\n - no stepping into managed code. Instead attach a managed code debugger and set a breakpoint in the managed code\r\n\r\nImplementation\r\n----\r\n\r\nThis ought to take significantly less time to implement than the VS debugger because it's less ambitious. It should not need pervasive changes - the most tricky thing would be to figure out how to sychronize the console with the build, as they're async. The console logger is also async and ideally we would flush it before emitting debugging text. By wrapping relevant code inside `if (debugging){ }` there should be no impact to non-debugging scenarios.\r\n\r\nFuture\r\n----\r\n\r\nGoing forward we would add commands based on real world need to keep the set focused and productive. The goal is not to become gdb or ntsd but to be a quick and easy to understand way to jump to the problem in real-world situations.\r\n\r\nOther possible commands\r\n - tracepoint: breakpoint that logs the break and continues - possibly could dump some value\r\n - `callstack` to show you the current target and, which targets invoked it (whether it was an AfterTargets, DependsOnTargets, BeforeTargets, or CallTarget)",
        "createdAt": "2016-12-29T21:21:11Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "This sounds good overall, but why only a single active breakpoint?",
        "createdAt": "2016-12-30T10:40:16Z",
        "author": {
          "login": "drvink"
        }
      },
      {
        "body": "@drvink No reason, just keeping it simple. ",
        "createdAt": "2017-01-01T04:41:48Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "@danmosemsft Having multiple breakpoints (and the ability to enable/disable them) would be nice so that the user need not juggle them manually. Also, given that msbuild already knows how to evaluate conditions, why not allow for conditional breakpoints?\r\n\r\nI appreciate wanting to limit the scope of the feature so as to make easy implementation possible, but part of the value of any interactive debugging facility is not just the ability to examine data, but also to control execution. :)",
        "createdAt": "2017-01-01T08:47:54Z",
        "author": {
          "login": "drvink"
        }
      },
      {
        "body": "I've updated to allow multiple breakpoints.\r\n\r\n@chcosta @joperezr @ericstj would something like this be useful in the majority of the situations you find yourself debugging MSBuild script?",
        "createdAt": "2017-01-03T17:30:06Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": ">would something like this be useful in the majority of the situations you find yourself debugging MSBuild script?\r\n\r\nThis would be super useful! I have more `<Message Text='**DEBUGGING MESSAGE=$(SomeProperty)' Importance=\"High\" />` than I can count to check state of properties/items, evaluate conditions, and to tell how many times I enter a target, and when I enter it. One more feature I would love in this debugger would be a `callstack`-like command. This would show you the current target and, which targets invoked it (whether it was an AfterTargets, DependsOnTargets, BeforeTargets, or CallTarget)",
        "createdAt": "2017-01-03T19:06:10Z",
        "author": {
          "login": "joperezr"
        }
      },
      {
        "body": "For `<Message>` -- perhaps that needs a tracepoint, ie., when hitting a breakpoint, dump something, and continue.\r\n\r\n`callstack` is clearly interesting, I've recorded above as P2 because it's likely significantly more work.\r\n",
        "createdAt": "2017-01-03T19:10:11Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "I like it.  I'd definitely use it.  The main reason I never used the VS debugger was that it always took too long to set it up and get everything working.  So I usually resort to diag logs and pp files.  A self-contained debugger is definitely attractive if it is essentially free to use.  In addition to properties, it'd be nice to have a Break task, a Break API, and a Break property function to make it easy to modify various points of code without having to figure out the commandline parameters.\r\n\r\nI do think conditional breakpoints are a necessity.  A lot of times you have a problem that only reproduces when doing a full stack build.  If you set a breakpoint globally it'd be too noisy (for the same reason things are too noisy when looking at the full-stack diag log).  You'd want to condition the breakpoint on perhaps project or some other derived property that would only be true in some cases to catch the interesting portion of the build.\r\n\r\nNot sure how I feel about limiting it to single-proc.  I've hit plenty of multi-proc issues other than the race conditions.",
        "createdAt": "2017-01-05T17:58:11Z",
        "author": {
          "login": "ericstj"
        }
      },
      {
        "body": "I've written a few tools to help me investigate logs and essentially parse out a single proc which I care about from the inter-leaved multi-proc logs.  So, the interesting thing to me isn't usually multi-proc debugging, but having some mechanism to scope the multi-proc build to a single build thread I care about and determining how I got there.  I'm not sure if I'm actually making an argument for multi-proc or single-proc.  I am saying that I often have to debug a multi-proc build, but only care about what is happening in one of the procs.  I suppose that the way to handle this would be a conditional breakpoint. `break at CloudTest.targets(39) if '$(MSBuildProjectName)'=='blah.proj'`\r\n\r\nRegarding...\r\n```\r\n1. What is setting this property/adding this item?\r\n2. What is the value of this property/item list at this point?\r\n3. Why is this condition true/false?\r\n```\r\nI completely agree, but it's often interesting to know, not just who set a property last or to a specific value, but each instance of when a property was set, changed, skipped, etc up to a particular point.  Perhaps that's the kind of information you mean by 1.  This is even interesting in the initial property context though, not just dynamic evaluation.\r\n\r\nI often debug tasks, but it requires me to recompile the source code to launch a debugger or wait indefinitely for me to attach.  Stepping directly from a target, into the task would be tremendously useful.",
        "createdAt": "2017-01-05T18:45:46Z",
        "author": {
          "login": "chcosta"
        }
      },
      {
        "body": "@chcosta if you want to log one file per proc, you should be able to simply add ` /distributedFileLogger`. It hasn't historically got much use but IIRC that's what it's for.",
        "createdAt": "2017-01-05T18:52:02Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "This definitely sounds interesting and I'd use it. +1 from me",
        "createdAt": "2017-01-11T01:51:30Z",
        "author": {
          "login": "weshaggard"
        }
      },
      {
        "body": "This all seems to be in the right direction. At least in my experience, most of my debugging has involved the `where` and `when` something changed.\r\n\r\nTwo interesting variants that I think would go a long way are:\r\n1. Support a **-WhatIf** switch similar to PowerShell that can evaluate a build script with a no-op on tasks or at least allow tasks to opt into a *what if* behavior.\r\n2. Enable a visualization for the build log that can show the traceability of properties, items, and so on changed during the build; a poor man's IntelliTrace for MSBuild if you will.\r\n\r\nUnderstanding when, where, and why something changed in a build is very useful for troubleshooting IMHO. While a debugger is nifty and useful in some situations, the ability to have a comprehensive visualization of what will happen or what did happen is more effective in tracking down issues. You might liken this approach as something akin to SQL Server's *Estimated Query Plan* and *Actual Query Plan*.\r\n\r\nMy typical investigation into these type of issues today usually involves changing the log level to **Detailed** or **Diagnostic** and then spelunking the log file with a text editor.\r\n",
        "createdAt": "2017-02-02T16:27:15Z",
        "author": {
          "login": "commonsensesoftware"
        }
      },
      {
        "body": "I'd use this...debugging Targets can be really challenging today when things go wrong or don't do things as expected.",
        "createdAt": "2017-02-14T23:27:59Z",
        "author": {
          "login": "clairernovotny"
        }
      },
      {
        "body": "I'm wondering if the latest features in http://msbuildlog.com/ address the needs here.  `/binarylogger` is now built into `MSBuild.exe` so its easier than ever to capture a diagnostic log and the full import graph.",
        "createdAt": "2018-02-05T21:51:38Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "With the introduction of SDK concept, we need something like this to debug the MSBuild props/targets. #1493",
        "createdAt": "2018-06-13T08:19:29Z",
        "author": {
          "login": "Nirmal4G"
        }
      },
      {
        "body": "@jeffkl  is right. Most, but arguably not all, of the requests here are addressed by the MSBuild Structured Binary Log and it's various viewer/analyzer tools. I've personally be using them and find them to be unbelievably valuable. We needed it 10 years ago!\r\n\r\nWhile incredible powerful and easy to search, things can sometimes still be difficult to spelunk. The \\*.binglog format can be used to replay a build. Something that would be nice in a tool would be to visually replay the evaluation. This might be analogous to formula tracing in Excel. You want to visually trace through the log to follow the flow and changes. There's already a timeline and ordered execution tree. If we had a way to set a breakpoint or step through the log visually, I think we'd have everything that has been asked for.\r\n\r\nI'm not sure that interactive debugging is all that useful. Interactively traversing a log would be more useful IMO. Furthermore, that would help diagnose scenarios where you can't interactively debug a build, such as on a build server. However, you'd now be able to interactively walk through a replay. This concept has already proven to be effective with IntelliTrace and historical debugging.",
        "createdAt": "2018-06-13T16:28:41Z",
        "author": {
          "login": "commonsensesoftware"
        }
      },
      {
        "body": "I will say I'm sorry to see the old VS debugging approach go.  I once used it as part of a truly ludicrous MSBuild code coverage collection tool.\r\n\r\nTaskStartedEventArgs only provides the Name and File of the Task being started, which isn't enough to specifically identify which task is running.  So the coverage logger attached to msbuild as a debugger and set a breakpoint on each Task, marking it as covered when the breakpoint was hit.\r\n\r\nIt worked pretty well, except there was a bug that any Tasks that directly used certain stuff from (I think it was) Microsoft.Build.Evaluation themselves would crash if you were running with debugging enabled.",
        "createdAt": "2018-07-12T19:29:23Z",
        "author": {
          "login": "BenNesson"
        }
      },
      {
        "body": "Given the progress with binlogs and http://msbuildlog.com in the past few years I'm curious whether there's still a niche for an actual debugger like described above. \r\n\r\nIn any case I'd be curious if the binlog viewer is missing any scenarios. Feel free to file issues over at https://github.com/KirillOsenkov/MSBuildStructuredLog.",
        "createdAt": "2020-01-03T06:05:53Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "I've used binlogs to debug countless build issues and it is definitely a super powerful tool, thank you so much for all the amazing work @KirillOsenkov! One scenario where I think that a msbuild debugger would still be great would be in order to be able to break in some stage of the build, to analyze files/tempfiles/variables/properties and then to be able to run target by target. I might be wrong but I don't believe that this is something you can use the binlog for and in some advanced diagnostic scenarios it might be super useful.",
        "createdAt": "2020-01-13T23:32:21Z",
        "author": {
          "login": "joperezr"
        }
      },
      {
        "body": "I agree, but then aren't you better off just debugging the real thing at that point though?",
        "createdAt": "2020-01-14T01:13:26Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "We have a fairly complex build with many props file shared across various projects. It's hard to understand sometimes if we have the right configuration setup for conditions, so debugging and seeing the exact evaluation in reference to our props files would be helpful. Was hopeful the old debugger article I found would still work on the core version, but alas.\r\n\r\nBinlog is helpful to a point, but on a complex build it's harder to understand why something didn't happen. Like I think I'm including a reference but it's not built... with a debugger I could see if I actually hit that line in my props file where it's defined and at least eliminate or know if that's the issue or not.",
        "createdAt": "2023-08-04T21:50:55Z",
        "author": {
          "login": "michael-hawker"
        }
      },
      {
        "body": "The vscode extension [MSBuild Project Tools](https://marketplace.visualstudio.com/items?itemName=tintoy.msbuild-project-tools) improves the experience while editing `props`, `targets`, `sln` and `csproj` files in vscode. It isnt perfect, but its _way_ better than what Visual Studio Enterprise provides. The \"above the fold\" description of this extension on the marketplace page does not do it justice! I highly recommend giving it a try.\r\n\r\nThe creator is working on [publishing the language service](https://github.com/tintoy/msbuild-project-tools-server/issues/33) and I was going to attempt to get it working with Visual Studio.\r\n\r\nThis seemed relevant to this thread. It doesn't have debugger support, but it is free and open source \ud83d\ude03:\r\n- https://github.com/tintoy/msbuild-project-tools-vscode\r\n- https://github.com/tintoy/msbuild-project-tools-server",
        "createdAt": "2023-08-14T03:38:52Z",
        "author": {
          "login": "ChristopherHaws"
        }
      },
      {
        "body": "Check out https://github.com/mhutch/MonoDevelop.MSBuildEditor by @mhutch ",
        "createdAt": "2023-08-14T13:20:18Z",
        "author": {
          "login": "KirillOsenkov"
        }
      }
    ]
  }
}