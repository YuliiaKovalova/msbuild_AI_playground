{
  "number": 1453,
  "title": "Predefined Property/ItemGroup elements",
  "body": "Today a property or item is marked as such by being placed in a `<PropertyGroup>` or `<ItemGroup>` element. But what if there was a way to specify in advance what type of element is?\r\nconsider this:\r\n\r\nBefore:\r\n\r\n```\r\n<Project ToolsVersion=\"15.0\" Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <Compile Include=\"**\\*.cs\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter:\r\n\r\n```\r\n(Inside a props file)\r\n...\r\n<UsingProperty Name=\"OutputType\" />\r\n<UsingItem Name=\"Compile \" />\r\n...\r\n```\r\n\r\n```\r\n<Project ToolsVersion=\"15.0\" Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <OutputType>Exe</OutputType>\r\n  <Compile Include=\"**\\*.cs\" />\r\n</Project>\r\n```\r\n\r\nI havent dug super deep into the msbuild code but my understanding is that there is a processing step in there where the project file is expanded and things like default imports are added, perhaps this is something that could be done there as well? I think it really cuts down on the verbosity",
  "state": "CLOSED",
  "createdAt": "2016-12-07T21:31:15Z",
  "updatedAt": "2024-02-21T17:23:35Z",
  "closedAt": "2019-11-04T21:17:27Z",
  "author": {
    "login": "aL3891"
  },
  "labels": [
    "Area: Language",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Backlog"
  },
  "comments": {
    "nodes": [
      {
        "body": "MSBuild is already a hard to understand language, and I'm afraid a feature like this would make it even harder to understand. :)\r\n\r\nIt would make the msbuild code harder to understand because the type of a name would be spread out throughout the top import closure, thus making the question \"what type is this element?\" harder to answer. \r\n\r\nWith today's element groups the type definition is local and the user only has to look a few lines up in the same file to understand the type. Implicit typing forces the user to understand the entire import closure in order to understand the type. For example, this comes up when trying to understand whether to reference the name via `@()` or `$()`.\r\n\r\nOne \"organic\" solution to this is to adopt the dynamic language convention of blending the type somehow in the name, like `FooProperty`, but I honestly don't like that since it is not a machine enforced convention and at some point somebody will misuse / abuse it somehow :). The larger the build logic becomes, the bigger the dynamic typing problem.\r\n\r\nIn addition, nuget packages can bring in arbitrary build logic. What happens if one package in the dependency graph introduces `<UsingProperty Name=\"Foo\" />` and another package introduces `<UsingItem Name=\"Foo\" />`? MSBuild would have to issue an \"ambiguous variable type\" error, which is not that hard. However, the user would have a hard time fixing this issue, she'd have to abandon one of the dependencies.",
        "createdAt": "2016-12-07T23:30:05Z",
        "updatedAt": "2016-12-07T23:33:26Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "That is a valid concern however I feel that this is something tooling can help out with. One of the most common complaints against msbuild syntax in my experience is exactly that it is too verbose and users do not see the need to have PropertyGroup /ItemGroup elements around what they consider to be obvious information.\r\n\r\nI think there is also a lot of information about this encoded in the element names themselves. Output type is naturally a property, Compile is naturally a item. \r\n\r\nIt is true that naming clashes can occur, but they can today as well to a degree. Nothing prevents one nuget package\u00a0from declaring a Property called foo inside a Propertygroup, and another nuget package to do the same. In such cases one approach would to be to have the user set the type explicitly by placing the element inside a Property/Itemgroup element. That could be the general recommendation for any elements that go in a targets/props file. The end user proj file could then have the \"clean\" declarations.\u00a0\r\n\r\nI don't see those two ways to set properties/items as mutually exclusive. :)",
        "createdAt": "2016-12-08T10:27:42Z",
        "updatedAt": "2016-12-09T08:49:03Z",
        "author": {
          "login": "aL3891"
        }
      },
      {
        "body": "Another point for this approach is toolability as well, if the types for certin properties/items are known, tools can provide intellisense for them.",
        "createdAt": "2016-12-08T10:33:38Z",
        "updatedAt": "2016-12-09T08:47:02Z",
        "author": {
          "login": "aL3891"
        }
      },
      {
        "body": "> One \"organic\" solution to this is to adopt the dynamic language convention of blending the type somehow in the name, like FooProperty, but I honestly don't like that since it is not a machine enforced convention and at some point somebody will misuse / abuse it somehow :). \r\n\r\nJust to add some context, the reason my mind went to the `<UsingProperty>` way of doing it is because that would mirror the `<UsingTask>`\u00a0method for declaring tasks. I know its probably a lot more complicated internally but it feels nice and symmetrical :) or at least\u00a0consistent with the existing design philosophy for msbuild",
        "createdAt": "2016-12-09T08:53:25Z",
        "updatedAt": "2016-12-09T08:53:25Z",
        "author": {
          "login": "aL3891"
        }
      },
      {
        "body": "Another addition to this, I found out today that there are already ItemDefinitions : https://msdn.microsoft.com/en-us/library/bb651788.aspx\r\n\r\ncouldn't this data be used to omit the ItemProperty element? Having a PropertyDefinition as well would feel nice and symmetrical :) \r\n",
        "createdAt": "2017-03-23T09:32:13Z",
        "updatedAt": "2017-03-23T09:32:13Z",
        "author": {
          "login": "aL3891"
        }
      },
      {
        "body": "Team triage: this is not something that we had other folks asking for. As such, we are going to close this issue for now. We feel like there are other language improvements that would be more beneficial to a broader group of msbuild users.",
        "createdAt": "2019-11-04T21:17:27Z",
        "updatedAt": "2019-11-04T21:17:27Z",
        "author": {
          "login": "livarcocc"
        }
      }
    ]
  }
}