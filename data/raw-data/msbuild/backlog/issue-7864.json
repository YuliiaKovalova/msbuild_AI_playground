{
  "number": 7864,
  "title": "Serialization of Targets when awaiting for a single target",
  "body": "### Issue Description\r\nAn behavior when building a \"Fast\" and \"Slow\" target, when a project reference for \"Fast\" target, the build waits for both \"Fast\" and \"Slow\" to finish.  This blocks P2P from continuing when \"Fast\" is done.\r\n\r\n![image](https://user-images.githubusercontent.com/19828377/183220710-6bb3e584-f1b2-4ff6-8314-a4f89b1eda8f.png)\r\n\r\nWith a bad workaround,\r\n![image](https://user-images.githubusercontent.com/19828377/183220771-9119b7e5-bdae-49ff-8c97-0ae2942eb88b.png)\r\n\r\n\r\n### Steps to Reproduce\r\nAttached binlog with projects.  [BuildWorkers.zip](https://github.com/dotnet/msbuild/files/9273865/BuildWorkers.zip)\r\n\r\nmsbuild.exe /m Solution.proj\r\n\r\n### Expected Behavior\r\nI expect \"Slow\" targets from both worker projects to run in parallel.  The \"fast\" target will stagger because of the project dependency.\r\n\r\n### Actual Behavior\r\nI see that Worker1.proj runs \"Fast+Slow\" targets, then Worker2.proj \"Fast+Slow\" in serialization.\r\n\r\n### Analysis\r\nNo Idea.\r\n\r\n### Versions & Configurations\r\nRepros in VS2022 and VS2019, probably even earlier.\r\n",
  "state": "OPEN",
  "createdAt": "2022-08-05T22:44:19Z",
  "updatedAt": "2024-12-10T15:56:27Z",
  "closedAt": null,
  "author": {
    "login": "yuehuang010"
  },
  "labels": [
    "bug",
    "Area: Performance",
    "Partner request",
    "Area: Engine",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "@rainersigwald, could you please take a look?",
        "createdAt": "2022-08-22T12:51:09Z",
        "updatedAt": "2022-08-22T12:51:09Z",
        "author": {
          "login": "AR-May"
        }
      },
      {
        "body": "Any idea when this will be investigated? This is important for us!\r\n\r\nthx!",
        "createdAt": "2022-08-30T06:35:50Z",
        "updatedAt": "2022-08-30T06:35:50Z",
        "author": {
          "login": "CDAlexanderW"
        }
      },
      {
        "body": "> Any idea when this will be investigated? This is important for us!\r\n\r\nCan you please explain why it's important for you? This is extremely long-standing MSBuild behavior and the fix will not be easy, but it hasn't been at the top of the priority list because it's not generally super impactful. So I'd love to get data otherwise.",
        "createdAt": "2022-08-30T14:20:43Z",
        "updatedAt": "2022-08-30T14:20:43Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> > Any idea when this will be investigated? This is important for us!\r\n> \r\n> Can you please explain why it's important for you? This is extremely long-standing MSBuild behavior and the fix will not be easy, but it hasn't been at the top of the priority list because it's not generally super impactful. So I'd love to get data otherwise.\r\n\r\nIt looks like this may block AllowParallelCompileInReferencedProjects from working correctly.",
        "createdAt": "2022-09-01T06:04:27Z",
        "updatedAt": "2022-09-01T06:04:27Z",
        "author": {
          "login": "CDAlexanderW"
        }
      },
      {
        "body": "Hi, providing some context.  AllowParallelCompileInReferencedProjects is an experimental feature to speed vcxproj when building from the command line.  It splits the project into 3 passes that don't have project reference dependency on similar passes.  This in turns allows Pass 1 to run in parallel with other projects Pass 1.  Pass 2 depend its P2P's Pass 1.  (likewise, Pass 3 depends on Pass 2) To make the dependency, Pass 2 invokes MSBuild task on P2P's Pass 1, but as the bug states, it blocks far more than just the specific target.\r\n\r\nMost MSBuild task target (full) Build or to get outputs, so the entire project has to finish before returning and the build's outputs only relevant at the end of the build.  So single pass build won't hit this issue. ",
        "createdAt": "2022-09-01T21:35:48Z",
        "updatedAt": "2022-09-01T21:35:48Z",
        "author": {
          "login": "yuehuang010"
        }
      },
      {
        "body": "Adding my voice to this issue: our use case is that we have a couple of compilation units that are quite heavy to build (typically by orders of magnitude compared to the average) in base libraries. Those compilation units collapse a normally fully parallel build to a single-threaded, single project build point as a base library finishes to compile those heavy compilation units. Making those compilation units lighter by splitting them to increase parallelization usually means duplicating _a lot_ of frontend work that ends up in a slower build overall, so this is not a fix.\r\n\r\nLots of work could be accomplish during that time by starting the build phases of downstream libraries in the solution, for which `AllowParallelCompileInReferencedProjects` is the adequate way to express that. This would be a huge time saver for us.",
        "createdAt": "2023-10-31T14:42:14Z",
        "updatedAt": "2023-10-31T14:42:14Z",
        "author": {
          "login": "ak-slongchamps"
        }
      },
      {
        "body": "> Hi, providing some context. AllowParallelCompileInReferencedProjects is an experimental feature to speed vcxproj when building from the command line. It splits the project into 3 passes that don't have project reference dependency on similar passes. This in turns allows Pass 1 to run in parallel with other projects Pass 1. Pass 2 depend its P2P's Pass 1. (likewise, Pass 3 depends on Pass 2) To make the dependency, Pass 2 invokes MSBuild task on P2P's Pass 1, but as the bug states, it blocks far more than just the specific target.\n> \n> Most MSBuild task target (full) Build or to get outputs, so the entire project has to finish before returning and the build's outputs only relevant at the end of the build. So single pass build won't hit this issue.\n\nWhile that *may* be true for vcxproj (Visual C++ projec6ts) solution files with only csproj (C# projects) seems to suffer from this issue I think on one of my solution files. But a large build slowdown on my end seems to be from some of dotnet/arcade however.\n\nEven when I changed it up where my ``sfxproj`` files simply reference prebuilt dll's of my projects and have a dummy csproj project file that simply uses the NoTargets .NET SDK and invokes the ``MSBuild`` task for ``restore;Build`` on the related csproj projects to build these dlls that the same csproj file references to build an exe installer bundle for a custom runtime and reference pack. The main issue with this still is that dotnet/arcade seems to duplicate the generation for the x86, x64, and the arm64 intermediate msi installers that gets packed into the exe bundle installer.\n\nIf 6the above could be solved with the speedup to the building of the dll files that are then used to make those installers then my build time could significantly reduce from 120~260 seconds to about 60 seconds or so.",
        "createdAt": "2024-12-10T15:55:00Z",
        "updatedAt": "2024-12-10T15:56:27Z",
        "author": {
          "login": "AraHaan"
        }
      }
    ]
  }
}