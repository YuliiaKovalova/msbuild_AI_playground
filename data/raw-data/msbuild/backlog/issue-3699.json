{
  "number": 3699,
  "title": "Standardize LastWriteTime value for nonexistent files",
  "body": "MSBuild has mixed usage on whether ```LastWriteTime``` of a nonexistent file is represented by ```DateTime.MinValue``` or ```DateTime.FromFIleTimeUtc(0)``` (.NET API's choice of value).\r\n\r\nThis leads to boilerplate code converting from one format to the other:\r\n```csharp\r\nDateTime lastWriteTime = File.GetLastWriteTimeUtc(fullPath);\r\nbool fileExists = lastWriteTime != DateTime.FromFileTimeUtc(0);\r\n\r\nfileModifiedTime = fileExists ? lastWriteTime : DateTime.MinValue;\r\n```\r\n\r\nUnclear results requiring to dig through code (what if ```componentTimestamp``` was populated via ```NativeMethodsShared``` returning ```DateTime.MinValue```?):\r\n```csharp\r\nif (DateTime.Compare(File.GetLastWriteTime(ReferenceInfo.strippedTypeLibPath), componentTimestamp) != 0)\r\n{\r\n    // blah blah\r\n}\r\n```\r\n\r\nOr having to check both values:\r\n```csharp\r\nprivate bool IsExistingFileTime(DateTime lastModified)\r\n{\r\n    return lastModified != DateTime.MinValue && lastModified != DateTime.FromFileTimeUtc(0);\r\n}\r\n```\r\n\r\nWhich is unavoidable in some spots due to delegates (is this ```NativeMethodsShared.GetLastWriteFileUtcTime()``` or ```File.GetLastWriteTimeUtc()```?):\r\n```csharp\r\ninternal delegate DateTime GetLastWriteTime(string path);\r\n```\r\n\r\nI think the ideal solution is to follow what's already returned by .NET APIs and use a constant for ```DateTime.FromFileTimeUtc(0)```.",
  "state": "OPEN",
  "createdAt": "2018-09-04T18:24:12Z",
  "updatedAt": "2024-02-21T16:33:04Z",
  "closedAt": null,
  "author": {
    "login": "ccastanedaucf"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Agreed: we should unify, and we should unify on \"what corefx does\".",
        "createdAt": "2018-09-04T22:43:07Z",
        "updatedAt": "2018-09-04T22:43:07Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}