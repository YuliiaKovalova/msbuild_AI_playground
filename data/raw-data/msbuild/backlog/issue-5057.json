{
  "number": 5057,
  "title": "Slow in-place build after upgrade to sdk build",
  "body": "I have Visual Studio 2019 version `16.4.1 `and MSBuild version `16.4.0+e901037fe for .NET Framework`.\r\n\r\nI have a solution with around 250 projects (mix of `csproj` and `vcxproj`). All target `net4.8` or produces native images.  All projects are currently using \"old\" style `csproj` (`<Project DefaultTargets=\"Build\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\" ToolsVersion=\"4.0\">`). `ToolsVersion` is `4.0` but I think it is not important to my case.\r\n\r\nRecently I wanted to have a look on \"new style\" builds (\"sdk\") and I converted one small `csproj`  with excellent [CsprojToVs2017](https://github.com/hvanbakel/CsprojToVs2017). This went smooth and there is no problem (except I had to set `AppendTargetFrameworkToOutputPath` to `false` to adjust `OutputPath`). This `cspro`j has one direct dependency but more than 70 indirect ones.\r\n\r\nMy problem is that it takes too long for subsequent builds to complete. Even smallest change in my project takes around 8 seconds to build in Visual Studio (via `r-click-> Build` or `Ctrl+B`).  I installed [Project System Tools](https://marketplace.visualstudio.com/items?itemName=VisualStudioProductTeam.ProjectSystemTools) and by looking into resulting logs I see that biggest offender is  `_GetProjectReferenceTargetFrameworkProperties:`\r\n\r\n```\r\n       34 ms  FindReferenceAssembliesForReferences       1 calls\r\n       59 ms  _CopyFilesMarkedCopyLocal                  1 calls\r\n       88 ms  AssignTargetPaths                         81 calls\r\n      148 ms  ResolveAssemblyReferences                  1 calls\r\n      483 ms  GetCopyToOutputDirectoryItems             81 calls\r\n     1227 ms  ResolveProjectReferences                   1 calls\r\n     5699 ms  _GetProjectReferenceTargetFrameworkProperties  81 calls\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:00:08.60\r\n```\r\n\r\nLooking at definition for [`_GetProjectReferenceTargetFrameworkProperties`](https://github.com/microsoft/msbuild/blob/e812790eabece155f9ea7cbc13d57ce1ad7bff19/src/Tasks/Microsoft.Common.CurrentVersion.targets#L1581) I tried setting `SkipGetTargetFrameworkProperties` but it did not change situation\r\n\r\n```\r\n <ProjectReference Include=\"..\\project\\project.csproj\" SkipGetTargetFrameworkProperties=\"true\" />\r\n```\r\n\r\nDo I hit some edge case or is it just \"regular\" RAR problem mentioned so often in issues here? Is there any workaround? I do not need multitargetting currently.\r\n\r\n",
  "state": "CLOSED",
  "createdAt": "2020-01-15T07:17:15Z",
  "updatedAt": "2024-02-21T14:19:31Z",
  "closedAt": "2021-04-22T11:26:53Z",
  "author": {
    "login": "MichalSznajder"
  },
  "labels": [
    "Area: Performance",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Discussion"
  },
  "comments": {
    "nodes": [
      {
        "body": "> This `cspro`j has one direct dependency but more than 70 indirect ones.\r\n\r\nCan you try setting `<DisableTransitiveProjectReferences>true</DisableTransitiveProjectReferences>` in the project with one direct dependency?",
        "createdAt": "2020-04-29T16:22:34Z",
        "updatedAt": "2020-04-29T16:22:34Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "[perf triage]\r\nIs this still an issue? Does the setting DisableTransitiveProjectReferences helped?",
        "createdAt": "2021-04-16T13:16:43Z",
        "updatedAt": "2021-04-16T13:16:43Z",
        "author": {
          "login": "AR-May"
        }
      },
      {
        "body": "I cannot tell any longer as I am not working with this code (I left company). And I longer posses code that is so huge (it was i range of 2 MLOC in a single solution)\r\n\r\nAs for DisableTransitiveProjectReferences: I don't remember. I think it might have helped but I am not sure.",
        "createdAt": "2021-04-18T12:46:21Z",
        "updatedAt": "2021-04-18T12:46:21Z",
        "author": {
          "login": "MichalSznajder"
        }
      },
      {
        "body": "Got it, thank you for your response!",
        "createdAt": "2021-04-21T08:07:51Z",
        "updatedAt": "2021-04-21T08:07:51Z",
        "author": {
          "login": "AR-May"
        }
      },
      {
        "body": "[Perf triage]\r\nClosing this issue as outdated.",
        "createdAt": "2021-04-22T11:26:53Z",
        "updatedAt": "2021-04-22T11:26:53Z",
        "author": {
          "login": "AR-May"
        }
      }
    ]
  }
}