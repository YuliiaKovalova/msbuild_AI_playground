{
  "number": 7942,
  "title": "DotNet 6.0 MSBuild (amd64 dlls) gave this unhandled Exception when Building a DotNet 6.0-Windows Project from my code",
  "body": "I am building a Project from my code using all required .Net 6.0 MSBuild (amd64) dlls.  I am getting this error when I run the build project code.\r\n\r\nAlso, I do not know why in this error it is mentioning **\\..\\tools\\net472\\Microsoft.NET.Build.Tasks.dll** when I am not referencing Net472 at all.\r\n\r\nRegards\r\nGarry\r\n\r\n-----------\r\nError Stack......\r\n-----------\r\nProject \"GoodbyteOurDllsAndCoderMaster.csproj\" (Rebuild target(s)):\r\n\t: ERROR C:\\Program Files\\dotnet\\sdk\\6.0.400\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.TargetFrameworkInference.targets(120,5): The \"AllowEmptyTelemetry\" task could not be instantiated from \"C:\\Program Files\\dotnet\\sdk\\6.0.400\\Sdks\\Microsoft.NET.Sdk\\targets\\..\\tools\\net472\\Microsoft.NET.Build.Tasks.dll\". Method not found: 'Byte[] System.AppDomainSetup.GetConfigurationBytes()'.\r\n\t: ERROR C:\\Program Files\\dotnet\\sdk\\6.0.400\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.TargetFrameworkInference.targets(120,5): The \"AllowEmptyTelemetry\" task has been declared or used incorrectly, or failed during construction. Check the spelling of the task name and the assembly name.\r\n\t: ERROR (0,0): This is an unhandled exception in MSBuild -- PLEASE UPVOTE AN EXISTING ISSUE OR FILE A NEW ONE AT https://aka.ms/msbuild/unhandled.\r\n    System.TypeLoadException: Could not load type 'System.Runtime.Remoting.RemotingServices' from assembly 'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.\r\n   at Microsoft.Build.BackEnd.TaskExecutionHost.Dispose(Boolean disposing)\r\n   at Microsoft.Build.BackEnd.TaskExecutionHost.Dispose()\r\n   at Microsoft.Build.BackEnd.TaskBuilder.ShutdownComponent()\r\n   at Microsoft.Build.BackEnd.TargetBuilder.BuildTargets(ProjectLoggingContext loggingContext, BuildRequestEntry entry, IRequestBuilderCallback callback, String[] targetNames, Lookup baseLookup, CancellationToken cancellationToken)\r\n   at Microsoft.Build.BackEnd.RequestBuilder.BuildProject()\r\n   at Microsoft.Build.BackEnd.RequestBuilder.BuildAndReport()\r\nDone building project \"GoodbyteOurDllsAndCoderMaster.csproj\" -- FAILED.",
  "state": "CLOSED",
  "createdAt": "2022-09-04T13:10:02Z",
  "updatedAt": "2024-02-21T17:00:07Z",
  "closedAt": "2022-09-07T13:25:39Z",
  "author": {
    "login": "garevaul"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "How are you invoking the build? Are you using the MSBuild API? Are you using MSBuildLocator? What is your application's TargetFramework?",
        "createdAt": "2022-09-04T14:49:21Z",
        "updatedAt": "2022-09-04T14:49:21Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Hi Rainer,\r\n\r\nI am running my Build project code from a Net6.0-Windows project. I am referencing all the MSBuild dlls from the location 'C:\\Program Files\\Microsoft Visual Studio\\2022\\Professional\\Msbuild\\Current\\Bin\\amd64\\...'\r\n\r\nThe Project I am Targeting/Building is also a Net6.0-Windows project which has references to various other 'Net6.0' and 'Net6.0-Windows' Dlls.\r\n\r\nThe Error when debugging is shown in this image >>\r\n![image](https://user-images.githubusercontent.com/15125247/188321479-60f2744e-9a39-438f-a0df-d3b0ac574214.png)\r\n\r\nThe Code I am using to build the Project is this;\r\n\r\n```\r\n var projectCollection = new ProjectCollection();\r\n                var buildParameters = new BuildParameters(projectCollection);\r\n                var globalProperty = new Dictionary<String, String>();\r\n                globalProperty.Add(\"Configuration\", \"Debug\");\r\n                globalProperty.Add(\"Platform\", \"Any CPU\");\r\n                BuildManager.DefaultBuildManager.ResetCaches();\r\n                var buildRequest = new BuildRequestData(projectOrSolutionFilePath, globalProperty, null, new String[] { \"Rebuild\" }, null);\r\n                var buildResult = BuildManager.DefaultBuildManager.Build(buildParameters, buildRequest);\r\n```\r\n\r\n",
        "createdAt": "2022-09-04T15:35:46Z",
        "updatedAt": "2022-09-04T15:35:46Z",
        "author": {
          "login": "garevaul"
        }
      },
      {
        "body": "Hi Rainer \n\nI am new to Github. I commented directly to the question at Github instead of replying to this notification. Hope you got the notification of that comment.\n\nRegards\nBikramjeeth\n\nOn 4 Sept 2022, 20:19, at 20:19, Rainer Sigwald ***@***.***> wrote:\n>How are you invoking the build? Are you using the MSBuild API? Are you\n>using MSBuildLocator? What is your application's TargetFramework?\n>\n>-- \n>Reply to this email directly or view it on GitHub:\n>https://github.com/dotnet/msbuild/issues/7942#issuecomment-1236357634\n>You are receiving this because you authored the thread.\n>\n>Message ID: ***@***.***>\n",
        "createdAt": "2022-09-04T16:53:49Z",
        "updatedAt": "2022-09-04T16:53:49Z",
        "author": {
          "login": "garevaul"
        }
      },
      {
        "body": "@garevaul \r\n\r\nI think it's quite obvious that you have reference to MSBuild that comes with Visual Studio, but your project is targeted against .NET 6.0 using TFM of `net6.0-windows`. The MSBuild that comes with Visual Studio requires .NET  Framework runtime, and this is totally different, therefore you should not mix your NET 6.0 projects with references that require .NET Framework.\r\n\r\nI recommend you to use MSBuild references in the form of official MSBuild's nuget package: https://www.nuget.org/packages/Microsoft.Build\r\nWhy? Because this nuget of MSBuild supports both .NET Framework and NET 6.0:\r\n\r\n![image](https://user-images.githubusercontent.com/8773147/188329219-67d1b406-c66f-4bcc-a570-1e945c87f86b.png)\r\n\r\nAnd also don't forget to also add nuget package of Microsoft.Build.Framework, because Microsoft.Build requires it: https://www.nuget.org/packages/Microsoft.Build.Framework/\r\n\r\nNote: if you add Microsoft.Build nuget package, the Microsoft.Build.Framework will be added as resolved nuget package as well when you restore nuget package of your project if you haven't added Microsoft.Build.Framework package.\r\n\r\n@rainersigwald \r\nFeel free to correct me \ud83d\ude42 ",
        "createdAt": "2022-09-04T19:04:13Z",
        "updatedAt": "2022-09-04T19:04:13Z",
        "author": {
          "login": "eriawan"
        }
      },
      {
        "body": "Hi @eriawan @rainersigwald,\r\n\r\nI used the nuget MSBuild packages. It went through the previous error. But it is giving this error now. I tried looking for a nuget package by the name 'Microsoft.Common.props', but it is not there. \r\nError..............................\r\nProject \"GoodbyteOurDllsAndCoderMaster.csproj\" (Rebuild target(s)):\r\n\t: ERROR C:\\Program Files\\dotnet\\sdk\\6.0.400\\Sdks\\Microsoft.NET.Sdk\\Sdk\\Sdk.props(40,3): The imported project \"D:\\Goodbyte Projects OUR UTILITY\\GoodbyteMaster\\GoodbyteMaster\\bin\\Debug\\net6.0-windows\\Current\\Microsoft.Common.props\" was not found. Confirm that the expression in the Import declaration \"D:\\Goodbyte Projects OUR UTILITY\\GoodbyteMaster\\GoodbyteMaster\\bin\\Debug\\net6.0-windows\\Current\\Microsoft.Common.props\" is correct, and that the file exists on disk.\r\nDone building project \"GoodbyteOurDllsAndCoderMaster.csproj\" -- FAILED.\r\nError..............................\r\n\r\n**Please Note:** I have Installed the .Net 6.0 SDK using Winget/Choco. But they did not install in the **C:\\Program Files\\dotnet\\sdk\\** location. So I downloaded the dotnet-sdk-6.0.400-win-x64.zip binary file from ''https://dotnet.microsoft.com/en-us/download/dotnet/6.0'  and unzipped it in this location.\r\n\r\nAnd I added a System Environment Variable **MSBuildSDKsPath** with value **C:\\Program Files\\dotnet\\sdk\\6.0.400\\Sdks**\r\n\r\nIf MSBuildSDKsPath is not defined in Environment variables, then the error is DotNet.Sdk not found. \r\n\r\nAlso about the '\\bin\\Debug\\net6.0-windows\\Current\\' path mentioned in the error, there is No Folder by the name 'Current' in my project's folder '\\bin\\Debug\\net6.0-windows\\'\r\n",
        "createdAt": "2022-09-05T01:38:35Z",
        "updatedAt": "2022-09-06T05:21:49Z",
        "author": {
          "login": "garevaul"
        }
      },
      {
        "body": "It sounds like you are not using MSBuildLocator. Can you follow the directions at https://docs.microsoft.com/visualstudio/msbuild/updating-an-existing-application?view=vs-2022 ?",
        "createdAt": "2022-09-06T13:59:33Z",
        "updatedAt": "2022-09-06T13:59:33Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Hi @rainersigwald\r\n\r\nThanx. It works Excellent after using MSBuildLocator.\r\n\r\nBut I need to ask you that I guess the MSBuild Locator points to the Nugets Installed in the c:\\users\\<>\\.nuget\\packages\\ in the PC, and MSBuild action in the Project uses those MSBuild Nuget packages.\r\n\r\nIs it like that?\r\n\r\nIf so then, we have given  ExcludeAssets=\"runtime\" to all the MSBuild packages entries in the csproj file (Except to the MSBuildLocator). So the MSBuild Packages are Not included in the Runtime, except the MSBuildLocator dll.\r\n\r\nBut the MSBuild packages are there on **MY computer** in c:\\users\\<>\\.nuget\\packages\\\r\n\r\nBut if the same application is deployed on some other machine, then how will the application use those MSBuild packages because there you just have the MSBuildLocator dll, and the other MSBuild packages are not there on that other machine.\r\n\r\nHow does it work?\r\n\r\nRegards\r\nBikramjeeth\r\n\r\n\r\n",
        "createdAt": "2022-09-07T03:30:54Z",
        "updatedAt": "2022-09-07T03:30:54Z",
        "author": {
          "login": "garevaul"
        }
      },
      {
        "body": "@garevaul MSBuildLocator finds a copy of MSBuild that is installed on the machine that's running the application, either through Visual Studio or through the .NET SDK. That way your application that uses MSBuild can build using the same logic that VS/`dotnet build` would use on that machine.",
        "createdAt": "2022-09-07T10:15:43Z",
        "updatedAt": "2022-09-07T10:15:43Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Ok @rainersigwald thanx a zillion. It was kind of you to take up the issue and resolve it.\r\n\r\nSpecial thanx to @eriawan for your on dot guidance.\r\n\r\nRegards\r\n@garevaul \r\n\r\n",
        "createdAt": "2022-09-07T10:27:00Z",
        "updatedAt": "2022-09-07T10:27:00Z",
        "author": {
          "login": "garevaul"
        }
      }
    ]
  }
}