{
  "number": 4303,
  "title": "Solution dependency leads to error MSB4057: The target \"GetTargetPath\" does not exist in the project",
  "body": "There is a problem with solution dependencies that I believe was introduced with MSBuild 15.9, and is also a problem with 16.0.\r\n\r\nThe following scenario causes the problem;\r\n- There is a project that has `<GeneratePackageOnBuild>true</GeneratePackageOnBuild>` set\r\n- It has a solution dependency on a second project, and that project is multi-targeted.\r\n\r\n### Steps to reproduce\r\n\r\nBuild the attached project with `MSBuild.exe` or `dotnet build`: [GetTargetPathRepro.zip](https://github.com/Microsoft/msbuild/files/3070674/GetTargetPathRepro.zip)\r\n\r\n\r\n### Expected  behavior\r\n\r\nThe solution should compile without errors.\r\n\r\n### Actual behavior\r\nThe following error occurs:\r\n```\r\n\"C:\\Users\\Brandon\\source\\repos\\GetTargetPathRepro\\GetTargetPathRepro.sln\" (default target) (1:2) ->\r\n\"C:\\Users\\Brandon\\source\\repos\\GetTargetPathRepro\\ClassLibrary1\\ClassLibrary1.csproj.metaproj\" (default target) (4) ->\r\n\"C:\\Users\\Brandon\\source\\repos\\GetTargetPathRepro\\ClassLibrary1\\ClassLibrary1.csproj\" (default target) (2:6) ->\r\n\"C:\\Users\\Brandon\\source\\repos\\GetTargetPathRepro\\ClassLibrary1\\ClassLibrary1.csproj\" (_GetFrameworkAssemblyReferences target) (2:10) ->\r\n\"C:\\Users\\Brandon\\source\\repos\\GetTargetPathRepro\\ClassLibrary2\\ClassLibrary2.csproj\" (GetTargetPath target) (3:15) ->\r\n  C:\\Users\\Brandon\\source\\repos\\GetTargetPathRepro\\ClassLibrary2\\ClassLibrary2.csproj : error MSB4057: The target \"GetTargetPath\" does not exist in the project.\r\n\r\n    0 Warning(s)\r\n    1 Error(s)\r\n```\r\n\r\n### Environment data\r\nIt repros with MSBuild 15.9.21.664 and 16.0.461.62831.\r\nIt also repros with .NET Core SDK 2.2.106 and 3.0.100-preview3-010431\r\n\r\nI believe it worked fine before MSBuild 15.9, but I don't know an exact version.\r\n\r\n",
  "state": "OPEN",
  "createdAt": "2019-04-11T21:42:21Z",
  "updatedAt": "2024-11-08T18:13:00Z",
  "closedAt": null,
  "author": {
    "login": "bording"
  },
  "labels": [
    "Area: Solution (.sln)",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "This is fairly involved. It's related to https://github.com/Microsoft/msbuild/commit/3258497c668ff3d0cd699975923b6cd593a1703d, which was in 15.8.\r\n\r\nNuGet packaging calls `_GetFrameworkAssemblyReferences` which builds the current project (ClassLibrary1) with a specified `TargetFramework` and `BuildProjectReferences = false`. That is a distinct build from the \"real\" build of that project, so it creates a new project instance. That instance then tries to `ResolveProjectReferences`, which fails because when `BuildProjectReferences != true`, it calls `GetTargetPath` instead of the default target. That then fails, because `GetTargetPath` isn't defined for the outer build of a multitargeted project.\r\n\r\nI think NuGet should special case the GeneratePackageOnBuild case for a single-targeted project to collapse to the current build, which already has references resolved.\r\n\r\nThis can be worked around by adding a Directory.Build.props for your solution with this property:\r\n\r\n```xml\r\n<Project>\r\n <PropertyGroup>\r\n  <AddSyntheticProjectReferencesForSolutionDependencies>false</AddSyntheticProjectReferencesForSolutionDependencies>\r\n </PropertyGroup>\r\n</Project>\r\n```",
        "createdAt": "2019-04-11T22:11:05Z",
        "updatedAt": "2019-04-11T22:11:05Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Since building from Visual Studio seems work fine and not result in an error, I assume that's because it has a different way of invoking all of this?\r\n\r\n> This can be worked around by adding a Directory.Build.props for your solution with this property:\r\n\r\nThe workaround I came up with that seems to be working was to switch to a `ProjectReference` with \r\n`ReferenceOutputAssembly=\"false\"` and `PrivateAssets=\"All\"` set.",
        "createdAt": "2019-04-11T22:26:09Z",
        "updatedAt": "2019-04-11T22:26:09Z",
        "author": {
          "login": "bording"
        }
      },
      {
        "body": "> I think NuGet should special case the GeneratePackageOnBuild case for a single-targeted project to collapse to the current build, which already has references resolved.\r\n\r\nI could be misunderstanding what you're saying here, but the problem still occurs when ClassLibrary1 is multi-targeted a well.",
        "createdAt": "2019-04-11T22:30:54Z",
        "updatedAt": "2019-04-11T22:30:54Z",
        "author": {
          "login": "bording"
        }
      },
      {
        "body": "> Since building from Visual Studio seems work fine and not result in an error, I assume that's because it has a different way of invoking all of this?\r\n\r\nYes, unfortunately. VS builds projects in a solution using a pretty different mechanism from MSBuild's solution handling.\r\n\r\n> The workaround I came up with that seems to be working was to switch to a `ProjectReference` with\r\n> `ReferenceOutputAssembly=\"false\"` and `PrivateAssets=\"All\"` set.\r\n\r\nYeah, if that works for you I'd prefer it over a solution dependency--it's clearer from the MSBuild side.\r\n",
        "createdAt": "2019-04-12T15:13:07Z",
        "updatedAt": "2019-04-12T15:13:07Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "FWIW, I had 2 references to the same project within the solution. Opening the csproj file with a text editor indicated that (Visual Studio did not, neither did a 'remove project reference' > 'add project reference').\r\n\r\nThe 2 references had different guids, 1 of them was the incorrect one.",
        "createdAt": "2019-09-30T09:58:41Z",
        "updatedAt": "2019-09-30T09:58:41Z",
        "author": {
          "login": "sebashek"
        }
      },
      {
        "body": "I had the same error and somewhat similar to @sebashek, I had two identical project references listed in a single project file. Removing one of the references fixed the issue.",
        "createdAt": "2019-11-26T11:36:18Z",
        "updatedAt": "2019-11-26T11:36:18Z",
        "author": {
          "login": "matiasdd"
        }
      },
      {
        "body": "@rainersigwald I see this still has no milestone. Any plans to address at some point?",
        "createdAt": "2020-03-10T20:19:07Z",
        "updatedAt": "2020-03-10T20:19:07Z",
        "author": {
          "login": "bording"
        }
      },
      {
        "body": "I had the same issue. When I modified a project and changed its assembly name, an NUnitTest project referencing the modified project couldn't build anymore. Other projects referencing the modified project wasn't affected.\r\n\r\nI noticed that this error was purely because of ***a space*** in the middle of the new `AssemblyName` of the modified project. When I removed the space NUnit project started working again.\r\n\r\nThis bug is basically preventing me from having a space in name of any assembly which has a unit test.\r\n\r\n*workaround*: rename assembly and remove spaces",
        "createdAt": "2020-04-16T14:06:04Z",
        "updatedAt": "2021-03-26T15:57:06Z",
        "author": {
          "login": "bizzbizz"
        }
      },
      {
        "body": "i'm getting this error in visual studio 2019 using a solution with a mix of old-style and new style multi-targeted csproj files.\r\n\r\nnot sure where to go from here.",
        "createdAt": "2020-09-18T19:20:45Z",
        "updatedAt": "2020-09-18T19:20:45Z",
        "author": {
          "login": "coderb"
        }
      },
      {
        "body": "Not sure if this is related But I came here for the error, whil inspecting my csporj I noticed I had somehow included the same projectreference twice! After removing the duplicate my error went away. So at least there are more reasons that you can get this error",
        "createdAt": "2020-12-07T14:37:37Z",
        "updatedAt": "2020-12-07T14:37:37Z",
        "author": {
          "login": "jbennink"
        }
      },
      {
        "body": "This is very problematic for CMake projects that use `include_external_msproject()` to add manually crafted multi-target C# projects. Workaround does not work in this case.",
        "createdAt": "2021-03-02T09:12:53Z",
        "updatedAt": "2021-03-02T09:12:53Z",
        "author": {
          "login": "rokups"
        }
      },
      {
        "body": "I had the same double project reference in the csproj as others, removing that fixed it.",
        "createdAt": "2021-03-26T10:55:54Z",
        "updatedAt": "2021-03-26T10:55:54Z",
        "author": {
          "login": "Ian1971"
        }
      },
      {
        "body": "@rokups - did you find a solution for the problem with `include_external_msproject()`? I seem to be stumbling over the same issue.",
        "createdAt": "2021-08-11T13:22:46Z",
        "updatedAt": "2021-08-11T13:22:46Z",
        "author": {
          "login": "NorbertNemec"
        }
      },
      {
        "body": "I do not remember. I am not dealing with this issue any more, but i can not find any relevant commits from the time of my post. Not sure if this happened in some experimental branch that i later scrapped... Sorry for being useless :|",
        "createdAt": "2021-08-11T14:21:06Z",
        "updatedAt": "2021-08-11T14:21:06Z",
        "author": {
          "login": "rokups"
        }
      },
      {
        "body": "After long struggles with the problem using `include_external_msproject()` I finally found an applicable workaround on  https://github.com/wixtoolset/issues/issues/5705:\r\n\r\n```\r\n  <Target Name=\"GetTargetPath\" Returns=\"@(_FakeOutputPath)\">\r\n    <ItemGroup>\r\n      <_FakeOutputPath Include=\"$(MSBuildProjectDirectory)\\$(PackageOutputPath)\\$(AssemblyName).dll\" />\r\n    </ItemGroup>\r\n  </Target>\r\n```\r\n",
        "createdAt": "2021-08-11T16:17:01Z",
        "updatedAt": "2021-08-11T16:17:01Z",
        "author": {
          "login": "NorbertNemec"
        }
      },
      {
        "body": "I seemed to get this after changing TargetFramework --> TargetFrameworks. The project I did this in started failing to build, but only in builds with other projects that depended on it (worked when I built it by itself). In the end I only needed one target framework so dropped the `s` again and that seemed to force VS to re-evaluate something that no amount of cleaning/rebuilding or opening/closing VS could solve. \ud83e\udd37\ud83c\udffb\u200d\u2642\ufe0f ",
        "createdAt": "2021-11-18T13:40:07Z",
        "updatedAt": "2021-11-18T13:41:21Z",
        "author": {
          "login": "benmccallum"
        }
      },
      {
        "body": "This also happened to me with 17.0.1, I have created a bug report here: https://developercommunity.visualstudio.com/t/Multi-framework-C-project-fails-build-w/1590856?space=8&q=guhidalg&entry=problem",
        "createdAt": "2021-11-23T15:00:49Z",
        "updatedAt": "2021-11-23T15:00:49Z",
        "author": {
          "login": "ghidalgo3"
        }
      },
      {
        "body": "I added a comment to your report @ghidalgo3. It's too complicated to create a simple repro though.",
        "createdAt": "2021-12-16T15:27:01Z",
        "updatedAt": "2021-12-16T15:27:01Z",
        "author": {
          "login": "kwaazaar"
        }
      },
      {
        "body": "> I had the same issue. When I modified a project and changed its assembly name, an NUnitTest project referencing the modified project couldn't build anymore. Other projects referencing the modified project wasn't affected.\r\n> \r\n> I noticed that this error was purely because of _**a space**_ in the middle of the new `AssemblyName` of the modified project. When I removed the space NUnit project started working again.\r\n> \r\n> This bug is basically preventing me from having a space in name of any assembly which has a unit test.\r\n> \r\n> _workaround_: rename assembly and remove spaces\r\n\r\nThis was the fix for me, using xUnit. My Test assembly was referencing several projects, and the problems were only with the ones that had spaces in them, but I never would have thought that this sort of thing would still cause problems in 2022.",
        "createdAt": "2022-05-03T17:13:00Z",
        "updatedAt": "2022-05-03T17:23:05Z",
        "author": {
          "login": "TheRealAyCe"
        }
      },
      {
        "body": "For me this issue got introduced when I started setting `TargetPlatformMinVersion` in the UWP project, because I wanted a smaller min-version but wanted to use the newer SDK. Only happens to the project referencing the multi-targeted project (which have the same min/max versions for UWP).\r\n![image](https://user-images.githubusercontent.com/1378165/194597844-0d0ff555-2caa-42f8-8621-f6333cabf77f.png)\r\n",
        "createdAt": "2022-10-07T15:44:37Z",
        "updatedAt": "2022-10-07T16:02:37Z",
        "author": {
          "login": "dotMorten"
        }
      },
      {
        "body": "Found a workaround for UWP case: In the second project pluralize TFM so it says `TargetFrameworks` and problem goes away \ud83e\udd26 ",
        "createdAt": "2022-10-07T17:47:08Z",
        "updatedAt": "2022-10-07T17:47:08Z",
        "author": {
          "login": "dotMorten"
        }
      },
      {
        "body": "I just had the same issue with the same conditions as described above:\n> The following scenario causes the problem;\n>\n>    There is a project that has `<GeneratePackageOnBuild>true</GeneratePackageOnBuild>` set\n>    It has a solution dependency on a second project, and that project is multi-targeted.\n\nOnly solution that worked for me was changing `TargetFramework` to `TargetFrameworks` as suggested by @dotMorten for the referencing project. No UWP involved in my case.",
        "createdAt": "2024-11-08T18:12:58Z",
        "updatedAt": "2024-11-08T18:12:58Z",
        "author": {
          "login": "cheesi"
        }
      }
    ]
  }
}