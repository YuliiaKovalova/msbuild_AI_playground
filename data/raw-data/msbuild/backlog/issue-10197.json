{
  "number": 10197,
  "title": "Q: Verifying NuGet single multi targeting build assets importation",
  "body": "### Discussed in https://github.com/dotnet/msbuild/discussions/10192\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **mwpowellhtx** May 30, 2024</sup>\r\nHello,\r\n\r\nI am evaluating my [`BumpAssemblyVersions`](https://github.com/mwpowellhtx/BumpAssemblyVersions) project, whether I need to update and pull forward appropriate forwards/backwards compatible [`MSBuild`](https://github.com/dotnet/msbuild) dependencies. I am assuming I do since the last known [`Microsoft.Build`](https://nuget.org/packages/Microsoft.Build) dependency at `1.8.0` was something like `15.9.X` (specifically `15.9.20`). Also `Engine`, `Framework`, `Utilities.Core`, couple of other odd ones as well. Yeah I know it has been a minute since I had to look at this.\r\n\r\nBest guess, I need to rebuild with the updated versions. \r\n\r\nQuestion when I do that, is it backwards compatible with the prior versions? `15+`, `16+`, `17+`? Or do I need specifically built projects around those?\r\n\r\nThanks...</div>\r\n\r\nCould use some sort of acknowledgement, clarification around this. Two main questions, if you don't mind.\r\n\r\n1. Do we in fact need to pull forward our `Microsoft.Build` suite dependencies to current `17.+` versions. The naive plausible impression is, probably yes, but I want to understand that better.\r\n1.  Whether we do, do we also need to consider projects that focus on specific `VS` tiers, `2017`, `2019`, `2022+`, for example?\r\n\r\nAlternatively, I am also open to considering current build technologies, if possible. The main goals of my project are to bump versions, in whatever forms they may be presented.\r\n\r\n1. In `CSPROJ` form, as _Xml elements_.\r\n1. In source form, i.e. as in `AssemblyInfo.cs` style `Attribute` instances.\r\n\r\nThose are the main goals. Maybe there are better ways of doing that today.",
  "state": "CLOSED",
  "createdAt": "2024-05-31T16:26:24Z",
  "updatedAt": "2024-06-11T18:38:43Z",
  "closedAt": "2024-06-11T18:38:43Z",
  "author": {
    "login": "mwpowellhtx"
  },
  "labels": [],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Okay, I ran build with a more detailed verbosity logging. I found this entry, which beggars the question, which targets are involved from one generation of VS to the next? And is there a way in which to gauge that within a `.PROPS` or `.TARGETS` file?\r\n\r\nFrom a VS prompt:\r\n\r\n```\r\nL:\\Source\\...\\xUnit.Fluently\\master\\src\\xunit.fluently.assert>msbuild xunit.fluently.assert.csproj -t:Rebuild -fl -flp:logFile=msbuild.log;verbosity=detailed\r\n```\r\n\r\nWith the following log output:\r\n\r\n```\r\nThe target \"DispatchToInnerBuilds\" listed in a BeforeTargets attribute at \"L:\\Source\\Ellumination Technologies\\xUnit.Fluently\\master\\src\\packages\\bumpassemblyversions\\1.8.0\\build\\BumpAssemblyVersions.targets (39,68)\" does not exist in the project, and will be ignored.\r\n```\r\n\r\nFrom the [_BAV source_](https://github.com/mwpowellhtx/BumpAssemblyVersions/blob/602db74feee8d89c054177955efbed40f2dac52f/src/BumpAssemblyVersions/build/BumpAssemblyVersions.targets#L39). The idea there is, we want to be building in the outer most containing target, and not for every inner Build instance, i.e. when things such as multi-target `TargetFrameworks` are involved. i.e. _bump once per Build or Rebuild request only_.\r\n\r\nSo we need to know that from `15+`, `16+`, and `17+`, please. Which target(s) are most approproate.\r\n\r\nAfter that, whether also we should be thinking about keeping up with the `Microsoft.Build` dependencies, and in what level of detail.\r\n\r\nThis is also curious, however, **_what?_** empty? I am confused.\r\n\r\n```\r\nTarget \"BumpAssemblyVersionsBeforeBuild\" skipped, due to false condition; ('$(TargetFrameworks)' == '') was evaluated as ('netstandard2.0;netstandard2.1' == '').\r\n```\r\n\r\nIt is definitely not empty.\r\n\r\n```Xml\r\n<TargetFrameworks>netstandard2.0;netstandard2.1</TargetFrameworks>\r\n```\r\n\r\nThose are the two main areas, `TargetFrameworks` empty, and changing `<Target/>` names from one generation `VS` to the next.",
        "createdAt": "2024-05-31T17:02:56Z",
        "updatedAt": "2024-05-31T17:02:56Z",
        "author": {
          "login": "mwpowellhtx"
        }
      },
      {
        "body": "When I unpack what this actually says, it makes no sense whatsoever. So, we cannot integrate our 3P targets assuming existence of internally provided targets? That makes no sense whatsoever. How do we add value to the build, bumping versions or whatever, when we cannot do that? _\"Does not exist in the project, and will be ignored\"_, **_but of course it does not exist in the project, which is precisely the point_**, we are trying to play nice integrating with msbuild targets!\r\n\r\n```\r\nThe target \"DispatchToInnerBuilds\" listed in a BeforeTargets attribute at \"L:\\Source\\Ellumination Technologies\\xUnit.Fluently\\master\\src\\packages\\bumpassemblyversions\\1.8.0\\build\\BumpAssemblyVersions.targets (39,68)\" does not exist in the project, and will be ignored.\r\n```\r\n\r\nJust for grins, listing the targets, the target in question does exist, and would be encountered, apparently, so it is not that the target does not exist. Actually, a better listing, if possible, would be to not prune for uniqueness; I just want to see the dry run, i.e. _all the targets as they would normally be encountered, in the order in which they would be encountered_. I do not know if that option is available on the _msbuild_ CL.\r\n\r\n```\r\nL:\\Source\\...\\xUnit.Fluently\\master\\src\\xunit.fluently.assert>msbuild xunit.fluently.assert.csproj --targets\r\n```\r\n\r\n```\r\nMSBuild version 17.10.4 for .NET Framework\r\nAfterSdkPublish\r\nPreBuild\r\nPackableOnGeneratePackageOnBuild\r\n_CheckForUnsupportedArtifactsPath\r\n_GetRequiredWorkloads\r\nResolvePackageDependenciesDesignTime\r\nCollectSDKReferencesDesignTime\r\nCollectResolvedSDKReferencesDesignTime\r\nResolveFrameworkReferences\r\nResolveProjectReferencesDesignTime2\r\nResolveFrameworkReferencesDesignTime\r\nCollectPackageReferences\r\nCollectSuggestedWorkloads\r\n_CheckCompileDesignTimePrerequisite\r\nCollectAnalyzersDesignTime\r\nCollectResolvedCompilationReferencesDesignTime\r\nCollectUpToDateCheckInputDesignTime\r\nCollectUpToDateCheckOutputDesignTime\r\nCollectUpToDateCheckBuiltDesignTime\r\nCollectBuildAccelerationIncompatiblePackageDesignTime\r\nCollectCopyToOutputDirectoryItemDesignTime\r\n_FixRazorEditorConfigFiles\r\nCompileDesignTime\r\nGetTargetFrameworks\r\n_ComputeTargetFrameworkItems\r\nGetTargetFrameworksWithPlatformFromInnerBuilds\r\nInitializeSourceControlInformation\r\nDispatchToInnerBuilds\r\nBuild\r\n_SetBuildInnerTarget\r\nClean\r\nRebuild\r\nRestore\r\nGenerateRestoreGraphFile\r\nCollectCentralPackageVersions\r\nCollectPackageDownloads\r\nCollectFrameworkReferences\r\n_LoadRestoreGraphEntryPoints\r\n_FilterRestoreGraphProjectInputItems\r\n_GenerateRestoreGraph\r\n_GenerateRestoreGraphProjectEntry\r\n_GenerateRestoreSpecs\r\n_GenerateDotnetCliToolReferenceSpecs\r\n_GetProjectJsonPath\r\n_GetRestoreProjectStyle\r\nEnableIntermediateOutputPathMismatchWarning\r\n_GetRestoreTargetFrameworksOutput\r\n_GetRestoreTargetFrameworksAsItems\r\n_GetRestoreSettings\r\n_GetRestoreSettingsCurrentProject\r\n_GetRestoreSettingsAllFrameworks\r\n_GetRestoreSettingsPerFramework\r\n_GenerateRestoreProjectSpec\r\n_GenerateProjectRestoreGraph\r\n_GenerateRestoreDependencies\r\n_GenerateProjectRestoreGraphAllFrameworks\r\n_GenerateProjectRestoreGraphCurrentProject\r\n_GenerateProjectRestoreGraphPerFramework\r\n_GenerateRestoreProjectPathItemsCurrentProject\r\n_GenerateRestoreProjectPathItemsPerFramework\r\n_GenerateRestoreProjectPathItems\r\n_GenerateRestoreProjectPathItemsAllFrameworks\r\n_GenerateRestoreProjectPathWalk\r\n_GetAllRestoreProjectPathItems\r\n_GetRestoreSettingsOverrides\r\n_GetRestorePackagesPathOverride\r\n_GetRestoreRepositoryPathOverride\r\n_GetRestoreSourcesOverride\r\n_GetRestoreFallbackFoldersOverride\r\n_GetRestoreTargetFrameworkOverride\r\n_GetTargetFrameworkOverrides\r\n_IsProjectRestoreSupported\r\nInitializeSourceControlInformationFromSourceControlManager\r\nSetEmbeddedFilesFromSourceControlManagerUntrackedFiles\r\n_SourceLinkHasSingleProvider\r\n_InitializeSourceControlInformationFromSourceControlManager\r\nSourceControlManagerPublishTranslatedUrls\r\n_InitializeGitHubSourceLinkUrl\r\nTranslateGitHubUrlsInSourceControlInformation\r\n_InitializeGitLabSourceLinkUrl\r\nTranslateGitLabUrlsInSourceControlInformation\r\n_InitializeAzureReposGitSourceLinkUrl\r\nTranslateAzureReposGitUrlsInSourceControlInformation\r\n_InitializeBitbucketGitSourceLinkUrl\r\nTranslateBitbucketGitUrlsInSourceControlInformation\r\nPublish\r\nGetAllRuntimeIdentifiers\r\nGetPackagingOutputs\r\nCollectApiCompatInputs\r\nRunPackageValidation\r\nGetReferencesForApiCompatValidatePackage\r\n_GetReferencePathFromInnerProjects\r\n_GetAbsoluteOutputPathsForPack\r\n_GetOutputItemsFromPack\r\n_GetTargetFrameworksOutput\r\n_PackAsBuildAfterTarget\r\n_CleanPackageFiles\r\n_CalculateInputsOutputsForPack\r\nPack\r\n_IntermediatePack\r\nGenerateNuspec\r\n_InitializeNuspecRepositoryInformationProperties\r\n_LoadPackInputItems\r\n_GetProjectReferenceVersions\r\n_GetProjectVersion\r\n_WalkEachTargetPerFramework\r\n_GetFrameworksWithSuppressedDependencies\r\n_GetFrameworkAssemblyReferences\r\n_GetBuildOutputFilesWithTfm\r\n_GetTfmSpecificContentForPackage\r\n_GetDebugSymbolsWithTfm\r\n_AddPriFileToPackBuildOutput\r\n_GetPackageFiles\r\n```",
        "createdAt": "2024-05-31T19:10:56Z",
        "updatedAt": "2024-05-31T19:10:56Z",
        "author": {
          "login": "mwpowellhtx"
        }
      },
      {
        "body": "As a thought experiment, I tried with both `VS2019` and `VS2022` shell command line build, with similar results. Neither of them are bumping versions like I expect.\r\n\r\n```\r\n...>msbuild xunit.fluently.assert.csproj -t:Rebuild -fl -flp:logFile=msbuild.log;verbosity=detailed\r\n```\r\n\r\n2019 build log attached:\r\n\r\n[vs2019_msbuild.log](https://github.com/user-attachments/files/15526072/vs2019_msbuild.log)\r\n\r\n2022 build log attached:\r\n\r\n[vs2022_msbuild.log](https://github.com/user-attachments/files/15526080/vs2022_msbuild.log)\r\n",
        "createdAt": "2024-06-02T16:41:38Z",
        "updatedAt": "2024-06-02T16:41:38Z",
        "author": {
          "login": "mwpowellhtx"
        }
      },
      {
        "body": "As a thought experiment, I also tried also in a `VS2017` prompt, and does not support `netstandard2.0+`, apparently; unless maybe I can persuade a more up to date `Sdk` in that instance.",
        "createdAt": "2024-06-02T17:43:02Z",
        "updatedAt": "2024-06-02T17:43:02Z",
        "author": {
          "login": "mwpowellhtx"
        }
      },
      {
        "body": "As a clue, might possibly be related to a [recent NuGet single/multi-targeting strategy](https://learn.microsoft.com/en-us/visualstudio/msbuild/target-build-order). Definitely it is something we can investigate further.",
        "createdAt": "2024-06-02T19:02:14Z",
        "updatedAt": "2024-06-02T19:02:14Z",
        "author": {
          "login": "mwpowellhtx"
        }
      },
      {
        "body": "\ud83d\udca1 I think we may have something here, the [_NuGet folder structures_](https://learn.microsoft.com/en-us/nuget/concepts/msbuild-props-and-targets#build-folders) have changed, definitely divergent from when I originally pursued the BAV solution. It's a bit tricky coordinating single/multi _\"one and only one pass\"_ strategies given that, probably redundant to a certain extent, but we'll investigate how we can orchestrate our build process in that area.\r\n\r\n\ud83d\udca1 another clue, we definitely need to be aware of, no need to do any direct inclusions of any `.targets` or `.props`, as it seems these would be [_automatically rolled into the build process_](https://learn.microsoft.com/en-us/nuget/concepts/msbuild-props-and-targets#build-folders).\r\n\r\nWe'll pursue both of these angles and see if we can persuade a more kosher _NuGet savvy_ process.",
        "createdAt": "2024-06-02T20:01:58Z",
        "updatedAt": "2024-06-02T20:01:58Z",
        "author": {
          "login": "mwpowellhtx"
        }
      },
      {
        "body": "So in summary thus far, I think I've [_identified perhaps 75% of the issue_](https://github.com/dotnet/msbuild/issues/10197#issuecomment-2144004384) and have a fairly strong grasp at how things have changed with regard to the latest nuget versions. If I understand things correctly, that should simplify much of my packaging and delivery, with the `build` and `buildMultiTargeting` there to receive my `.props` and `.targets`, and the `.g.` wiring _\"just works\"_; that'd be fantastic! Plus I can focus on just the appropriate `BeforeTargets` in either instance, since the outer <Import/> manages the `$(TargetFramework)` conditions for me, no muss no fuss.\r\n\r\nThe remaining part I need to clarify, pulling my `Microsoft.Build` packages forward to latest versions. Is that backwards compatible? And to what degree do I need to think about that aspect? Currently as stated have been in the `15.9+` range.",
        "createdAt": "2024-06-03T04:18:23Z",
        "updatedAt": "2024-06-03T04:18:23Z",
        "author": {
          "login": "mwpowellhtx"
        }
      },
      {
        "body": "Hello @mwpowellhtx! As for the remaining part: I believe I answered to that in the Discussions.\r\nOne more tip that might be useful for you when you figure out what is going during the build. I see that you use file logger. It is very beneficial to investigate what is happening with your builds using the binlog: https://github.com/dotnet/msbuild/blob/main/documentation/wiki/Binary-Log.md\r\nYou can check when the target was run/why it was skipped etc.",
        "createdAt": "2024-06-04T15:39:11Z",
        "updatedAt": "2024-06-04T15:39:11Z",
        "author": {
          "login": "AR-May"
        }
      },
      {
        "body": "> Hello @mwpowellhtx! As for the remaining part: I believe I answered to that in the Discussions.\r\n\r\nYes, thank you. For now, I may pin the idea of pulling `Microsoft.Build` dependencies forward, but we'll see. Remains to be seen at the moment.\r\n\r\n> One more tip that might be useful for you when you figure out what is going during the build. I see that you use file logger. It is very beneficial to investigate what is happening with your builds using the binlog: https://github.com/dotnet/msbuild/blob/main/documentation/wiki/Binary-Log.md You can check when the target was run/why it was skipped etc.\r\n\r\n> Hello @mwpowellhtx! As for the remaining part: I believe I answered to that in the Discussions. One more tip that might be useful for you when you figure out what is going during the build. I see that you use file logger. It is very beneficial to investigate what is happening with your builds using the binlog: https://github.com/dotnet/msbuild/blob/main/documentation/wiki/Binary-Log.md You can check when the target was run/why it was skipped etc.\r\n\r\nGood to know. The messages I did receive were not making a lot of sense, at least in the textual format. That is, until I was clued in via discord channels as to the NuGet variable being factored in. This I was unwaware of, more than likely it is because of my targets not landing in an appropriate `build` or `buildMultiTargeting` directory, for instance. Given that assumption, the `MSBuild` messages start making a lot more sense.\r\n\r\nIn closing, will hang onto the discussion and issues for now. When I start to see positive results, will circle around and close out.",
        "createdAt": "2024-06-04T16:33:51Z",
        "updatedAt": "2024-06-04T16:33:51Z",
        "author": {
          "login": "mwpowellhtx"
        }
      },
      {
        "body": "Need some clarification, and getting some mixed feedback from discord. From _single-_ to _multi-targeting scenarios_, I want for my targets to evaluate exactly once and only once, regardless of the overarching `$(TargetFramework)` context. Which if we understand the `NuGet` variable, `build` is evaluating for each and every inner build, whereas, possibly, `buildMultiTargeting` is evaluating for the _multi- scenario_ for the outer build. This is pretty critical to coordinating my targets, so I need to understand that better, if possible.",
        "createdAt": "2024-06-04T20:58:51Z",
        "updatedAt": "2024-06-04T20:58:51Z",
        "author": {
          "login": "mwpowellhtx"
        }
      },
      {
        "body": "Okay, so initial single-targeting feedback, so far so good.\r\n\r\nHowever, in the multi-targeting scenario, it is not working so good. I think the inner is getting confused from the outer. This is my build output. At least bumps are happening, but as you can see, multiple times. Presumably for outer, and each of the inners.\r\n\r\n```\r\n1>'MultiTargeting.ProjXml.Demo.csproj': Bumped 'Version' from '2024.158.1550.4' to '2024.158.1603.0'\r\n1>'MultiTargeting.ProjXml.Demo.csproj': Bumped 'AssemblyVersion' from '2024.158.1550.4' to '2024.158.1603.0'\r\n1>'MultiTargeting.ProjXml.Demo.csproj': Bumped 'FileVersion' from '2024.158.1550.4' to '2024.158.1603.0'\r\n1>'MultiTargeting.ProjXml.Demo.csproj': Bumped 'InformationalVersion' from '2024.158.1550.4' to '2024.158.1603.0'\r\n1>'MultiTargeting.ProjXml.Demo.csproj': Bumped 'PackageVersion' from '2024.158.1550.4' to '2024.158.1603.0'\r\n1>'MultiTargeting.ProjXml.Demo.csproj': Bumped 'Version' from '2024.158.1603.0' to '2024.158.1603.1'\r\n1>'MultiTargeting.ProjXml.Demo.csproj': Bumped 'Version' from '2024.158.1603.0' to '2024.158.1603.1'\r\n1>'MultiTargeting.ProjXml.Demo.csproj': Bumped 'AssemblyVersion' from '2024.158.1603.0' to '2024.158.1603.1'\r\n1>'MultiTargeting.ProjXml.Demo.csproj': Bumped 'AssemblyVersion' from '2024.158.1603.0' to '2024.158.1603.1'\r\n1>'MultiTargeting.ProjXml.Demo.csproj': Bumped 'FileVersion' from '2024.158.1603.0' to '2024.158.1603.1'\r\n1>'MultiTargeting.ProjXml.Demo.csproj': Bumped 'FileVersion' from '2024.158.1603.0' to '2024.158.1603.1'\r\n1>'MultiTargeting.ProjXml.Demo.csproj': Bumped 'InformationalVersion' from '2024.158.1603.0' to '2024.158.1603.1'\r\n1>'MultiTargeting.ProjXml.Demo.csproj': Bumped 'PackageVersion' from '2024.158.1603.0' to '2024.158.1603.1'\r\n1>'MultiTargeting.ProjXml.Demo.csproj': Bumped 'InformationalVersion' from '2024.158.1603.0' to '2024.158.1603.1'\r\n1>'MultiTargeting.ProjXml.Demo.csproj': Bumped 'PackageVersion' from '2024.158.1603.0' to '2024.158.1603.1'\r\n```\r\n\r\nLooks like from above, one bump per outer plus x2 inners. The targets:\r\n\r\n```xml\r\n<PropertyGroup>\r\n    <TargetFrameworks>netcoreapp3.1;net8.0</TargetFrameworks>\r\n</PropertyGroup>\r\n```\r\n\r\nHowever, I'm not sure also maybe specs are not also somehow being piled up incorrectly from inner to outer. Maybe we also need `$(TargetFramework)` comprehension conditioning those, who knows. It might be interesting to also report the number of specifications we think are being processed.\r\n\r\nThe actual specs are:\r\n\r\n```xml\r\n<ItemGroup>\r\n    <BumpVersionSpec Include=\"Version\" DefaultVersion=\"0.0.0.0\" CreateNew=\"true\" UseUtc=\"true\" MayReset=\"true\" MajorProviderTemplate=\"YearVersion\" MinorProviderTemplate=\"DayOfYear\" PatchProviderTemplate=\"HourMinute\" BuildProviderTemplate=\"Increment\" />\r\n    <BumpVersionSpec Include=\"AssemblyVersion\" DefaultVersion=\"0.0.0.0\" CreateNew=\"true\" UseUtc=\"true\" MayReset=\"true\" MajorProviderTemplate=\"YearVersion\" MinorProviderTemplate=\"DayOfYear\" PatchProviderTemplate=\"HourMinute\" BuildProviderTemplate=\"Increment\" />\r\n    <BumpVersionSpec Include=\"FileVersion\" DefaultVersion=\"0.0.0.0\" CreateNew=\"true\" UseUtc=\"true\" MayReset=\"true\" MajorProviderTemplate=\"YearVersion\" MinorProviderTemplate=\"DayOfYear\" PatchProviderTemplate=\"HourMinute\" BuildProviderTemplate=\"Increment\" />\r\n    <BumpVersionSpec Include=\"InformationalVersion\" DefaultVersion=\"0.0.0.0\" CreateNew=\"true\" UseUtc=\"true\" MayReset=\"true\" MajorProviderTemplate=\"YearVersion\" MinorProviderTemplate=\"DayOfYear\" PatchProviderTemplate=\"HourMinute\" BuildProviderTemplate=\"Increment\" />\r\n    <BumpVersionSpec Include=\"PackageVersion\" DefaultVersion=\"0.0.0.0\" CreateNew=\"true\" UseUtc=\"true\" MayReset=\"true\" MajorProviderTemplate=\"YearVersion\" MinorProviderTemplate=\"DayOfYear\" PatchProviderTemplate=\"HourMinute\" BuildProviderTemplate=\"Increment\" />\r\n</ItemGroup>\r\n```\r\n\r\nThoughts in the multi- scenario... would it be possible somehow to inject a key file or something on first run? All other iterations forward from that point would be ignored when the file exists? Afterwards delete it.\r\n\r\nSo as far as solving this dilemma, I have to tracks of thinking. What can I do in the `MSBuild` perspective to better condition things. On the actual `CustomTask` level, can we better instrument things to prevent piling up these versioning duplicates?",
        "createdAt": "2024-06-06T15:59:46Z",
        "updatedAt": "2024-06-06T16:08:10Z",
        "author": {
          "login": "mwpowellhtx"
        }
      },
      {
        "body": "So far the best thing I could come up with is to better condition the specs themselves. If there are better ideas, I am open to them.\r\n\r\n```xml\r\n<ItemGroup Condition=\"'$(TargetFramework)' == ''\">\r\n    <!--               ^^^^^^^^^^^^^^^^^^     -->\r\n    <BumpVersionSpec Include=\"Version\" DefaultVersion=\"0.0.0.0\" CreateNew=\"true\" UseUtc=\"true\" MayReset=\"true\" MajorProviderTemplate=\"YearVersion\" MinorProviderTemplate=\"DayOfYear\" PatchProviderTemplate=\"HourMinute\" BuildProviderTemplate=\"Increment\" />\r\n    <BumpVersionSpec Include=\"AssemblyVersion\" DefaultVersion=\"0.0.0.0\" CreateNew=\"true\" UseUtc=\"true\" MayReset=\"true\" MajorProviderTemplate=\"YearVersion\" MinorProviderTemplate=\"DayOfYear\" PatchProviderTemplate=\"HourMinute\" BuildProviderTemplate=\"Increment\" />\r\n    <BumpVersionSpec Include=\"FileVersion\" DefaultVersion=\"0.0.0.0\" CreateNew=\"true\" UseUtc=\"true\" MayReset=\"true\" MajorProviderTemplate=\"YearVersion\" MinorProviderTemplate=\"DayOfYear\" PatchProviderTemplate=\"HourMinute\" BuildProviderTemplate=\"Increment\" />\r\n    <BumpVersionSpec Include=\"InformationalVersion\" DefaultVersion=\"0.0.0.0\" CreateNew=\"true\" UseUtc=\"true\" MayReset=\"true\" MajorProviderTemplate=\"YearVersion\" MinorProviderTemplate=\"DayOfYear\" PatchProviderTemplate=\"HourMinute\" BuildProviderTemplate=\"Increment\" />\r\n    <BumpVersionSpec Include=\"PackageVersion\" DefaultVersion=\"0.0.0.0\" CreateNew=\"true\" UseUtc=\"true\" MayReset=\"true\" MajorProviderTemplate=\"YearVersion\" MinorProviderTemplate=\"DayOfYear\" PatchProviderTemplate=\"HourMinute\" BuildProviderTemplate=\"Increment\" />\r\n</ItemGroup>\r\n```",
        "createdAt": "2024-06-06T17:47:46Z",
        "updatedAt": "2024-06-06T17:47:46Z",
        "author": {
          "login": "mwpowellhtx"
        }
      },
      {
        "body": "@AR-May curious, any other suggestions than my recent learnings from it? If there's a better idea, I'm open to it, So far seems like better coordination with `TargetFramework` is the right approach, however.",
        "createdAt": "2024-06-07T15:16:54Z",
        "updatedAt": "2024-06-07T15:16:54Z",
        "author": {
          "login": "mwpowellhtx"
        }
      },
      {
        "body": "@AR-May Follow up, I went the next step, from _\"raw\"_ importation of sandboxed BAV assets, to local NuGet package sources.\r\n\r\nHowever, we are having difficulty, it seems that only the `buildTransitive` assets are being imported. Whereas, I half expected, based on some other _.generated._ imports, that I would see both `build` and `buildMultiTargeting` assets also imported, under `TargetFramework` conditions. However, neither of these is happening. Either/both of these is critical, because we are making the assumption we should receive one or the other, and we make appropriate `.props` declarations, which our transitive (i.e. _\"shared\"_ ?) assets then utilize.\r\n\r\nThis is an example generated nuget props and targets. Trying to test integration of my `BumpAssemblyVersions` package from local sources. However, only the `buildTransitive` bits are being imported. What about the `build` and `buildMultiTargeting`, which are also there? It is critical that ALL of those get imported, regardless.\r\n\r\n```xml\r\n<ImportGroup Condition=\" '$(ExcludeRestorePackageImports)' != 'true' \">\r\n  <Import Project=\"$(NuGetPackageRoot)\\bumpassemblyversions\\1.9.0\\buildTransitive\\BumpAssemblyVersions.props\" Condition=\"Exists('$(NuGetPackageRoot)\\bumpassemblyversions\\1.9.0\\buildTransitive\\BumpAssemblyVersions.props')\" />\r\n</ImportGroup>\r\n```\r\n\r\n```xml\r\n<ImportGroup Condition=\" '$(ExcludeRestorePackageImports)' != 'true' \">\r\n  <Import Project=\"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\netstandard.library\\2.0.3\\build\\netstandard2.0\\NETStandard.Library.targets\" Condition=\"Exists('C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\netstandard.library\\2.0.3\\build\\netstandard2.0\\NETStandard.Library.targets')\" />\r\n  <Import Project=\"$(NuGetPackageRoot)\\bumpassemblyversions\\1.9.0\\buildTransitive\\BumpAssemblyVersions.targets\" Condition=\"Exists('$(NuGetPackageRoot)\\bumpassemblyversions\\1.9.0\\buildTransitive\\BumpAssemblyVersions.targets')\" />\r\n</ImportGroup>\r\n```",
        "createdAt": "2024-06-09T17:57:48Z",
        "updatedAt": "2024-06-09T17:57:48Z",
        "author": {
          "login": "mwpowellhtx"
        }
      },
      {
        "body": "For what we are trying to accomplish, I suppose it would not be the worst thing to just factor `build` (`buildMultiTargeting`) property declarations instead to `buildTransitive`, and do the conditioning within, i.e.\r\n\r\n```xml\r\n<PropertyGroup Condition=\"'$(TargetFramework)' != ''\">\r\n    <BavBeforeTargets>BeforeBuild</BavBeforeTargets>\r\n</PropertyGroup>\r\n\r\n<PropertyGroup Condition=\"'$(TargetFramework)' == ''\">\r\n    <BavBeforeTargets>DispatchToInnerBuilds</BavBeforeTargets>\r\n</PropertyGroup>\r\n```\r\n\r\nWhich we then use, i.e. `BeforeTargets=\"$(BavBeforeTargets)\"` in our `<Target/>`.",
        "createdAt": "2024-06-09T18:01:56Z",
        "updatedAt": "2024-06-09T18:02:46Z",
        "author": {
          "login": "mwpowellhtx"
        }
      },
      {
        "body": "> @AR-May curious, any other suggestions than my recent learnings from it? If there's a better idea, I'm open to it, So far seems like better coordination with `TargetFramework` is the right approach, however.\r\n\r\n@mwpowellhtx yes, it seems as you need to know whether `TargetFramework` or `TargetFrameworks` were used in the build. Also, consider using property `IsCrossTargetingBuild` to coordinate that you run the target for the outer build only.",
        "createdAt": "2024-06-10T08:42:57Z",
        "updatedAt": "2024-06-10T08:42:57Z",
        "author": {
          "login": "AR-May"
        }
      },
      {
        "body": "> > @AR-May curious, any other suggestions than my recent learnings from it? If there's a better idea, I'm open to it, So far seems like better coordination with `TargetFramework` is the right approach, however.\r\n> \r\n> @mwpowellhtx yes, it seems as you need to know whether `TargetFramework` or `TargetFrameworks` were used in the build. Also, consider using property `IsCrossTargetingBuild` to coordinate that you run the target for the outer build only.\r\n\r\nTo clarify, I do not need to know per se, whether a subscriber project is _single-_ or _multi-targeting_. But I do need to respond accordingly. I thought that `build` and `buildMultiTargeting` was the way to convey those assets for `MSBuild` consumption under those conditions? But apparently all we get are `buildTransitive`. Is that behavior feature documented somewhere? And is that a bug? Or is that intended? And is it documented?\r\n\r\nTo clarify further, `IsCrossTargetingBuild` would not work in the single-targeting instance. Again, the baseline requirement is that my target runs before the outer-most build, agnostic of whether single- or multi-targeting.\r\n\r\nFrom a prior discussion, the best possible time to do that, we think, is before `BeforeBuild` targets for _single_; before `DispatchToInnerBuilds` targets for _multi_. Again, assuming appropriate `build[MultiTargeting]` importation; or sufficient workarounds.",
        "createdAt": "2024-06-10T14:22:29Z",
        "updatedAt": "2024-06-10T14:22:29Z",
        "author": {
          "login": "mwpowellhtx"
        }
      },
      {
        "body": "@mwpowellhtx can we take several steps back here? What are you trying to do? How are you trying to do it? Are you a NuGet package, or logic in a single repo?",
        "createdAt": "2024-06-10T14:44:13Z",
        "updatedAt": "2024-06-10T14:44:13Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> @mwpowellhtx can we take several steps back here? What are you trying to do? How are you trying to do it? Are you a NuGet package, or logic in a single repo?\r\n\r\nIt is deployed as a NuGet package. So we bumped into the change in `build[MultiTargeting|Transitive]` semantics. Were previously deploying `build` assets; but we want to support mutli-target scenarios as well.\r\n\r\nCurrent best estimates are, can do our own internal conditioning, assuming the assets will prefer `buildTransitive` only.\r\n\r\n```xml\r\n<PropertyGroup Condition=\"'$(TargetFramework)' != ''\">\r\n    <BavBeforeTargets>BeforeBuild</BavBeforeTargets>\r\n</PropertyGroup>\r\n\r\n<PropertyGroup Condition=\"'$(TargetFramework)' == ''\">\r\n    <BavBeforeTargets>DispatchToInnerBuilds</BavBeforeTargets>\r\n</PropertyGroup>\r\n```\r\n\r\n[`Discord MSBuild`](https://discord.com/channels/732297728826277939/732310858776182866) discussion duly noted, BTW.\r\n\r\nNotwithstanding a complete reconsideration of our approach.",
        "createdAt": "2024-06-10T15:24:27Z",
        "updatedAt": "2024-06-10T15:24:27Z",
        "author": {
          "login": "mwpowellhtx"
        }
      },
      {
        "body": "@rainersigwald Appreciate the effort and attention helping us sort through all this.\r\n\r\nBit of feedback trying to make `buildTransitive` work, for starters.\r\n\r\n_\"When\"_ are _transitive properties/targets_ `.g.` importations happening? The timing feels different from `build[MultiTargeting]` scenarios. i.e. we are not seeing `$(TargetFramework)` having been defined at that moment. At which point any assumptions that were depending upon `$(TargetFramework)` for anything are invalid.\r\n\r\nAt least in our current packaging approach, the alternative may be that if we deployed one `build` path, and another `buildMultiTargeting`, how could we best consolidate properties, targets, without necessarily having to duplicate a bunch of assets. Seems very repetitive in nature.",
        "createdAt": "2024-06-10T16:55:22Z",
        "updatedAt": "2024-06-10T16:55:22Z",
        "author": {
          "login": "mwpowellhtx"
        }
      },
      {
        "body": "> _\"When\"_ are _transitive properties/targets_ `.g.` importations happening? The timing feels different from `build[MultiTargeting]` scenarios. i.e. we are not seeing `$(TargetFramework)` having been defined at that moment.\r\n\r\nthe same import order applies. The difference you're observing may be because inner builds get TargetFramework defined \"early\" as a global property, while single-targeted builds have it defined in the body of the project file.\r\n\r\n> if we deployed one `build` path, and another `buildMultiTargeting`, how could we best consolidate properties, targets, without necessarily having to duplicate a bunch of assets. Seems very repetitive in nature.\r\n\r\nYou can `<Import` a common file from the various scenarios.",
        "createdAt": "2024-06-10T17:05:02Z",
        "updatedAt": "2024-06-10T17:05:02Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> > _\"When\"_ are _transitive properties/targets_ `.g.` importations happening? The timing feels different from `build[MultiTargeting]` scenarios. i.e. we are not seeing `$(TargetFramework)` having been defined at that moment.\r\n> \r\n> the same import order applies. The difference you're observing may be because inner builds get TargetFramework defined \"early\" as a global property, while single-targeted builds have it defined in the body of the project file.\r\n\r\nWhich makes sense, perfectly understandable.\r\n\r\n> > if we deployed one `build` path, and another `buildMultiTargeting`, how could we best consolidate properties, targets, without necessarily having to duplicate a bunch of assets. Seems very repetitive in nature.\r\n> \r\n> You can `<Import` a common file from the various scenarios.\r\n\r\nI understand we _\"can\"_ in principle. But NuGet balks over that while packaging, apparently... which is one reason we are considering does `builtTransitive` fit the bill. However, at the moment, it seems probably not; so we'll think on how to coordinate `build` versus `buildMultiTargeting`.\r\n\r\nThe good news is that at least in early end to end sandbox integration testing, we appear to be seeing a positive application of the strategies, at least to begin with. We are now end to end testing in a fully packaged environment.\r\n\r\nAlso, to be fair, \ud83d\udcaf acknowledging the concerns, suggestions, etc, conveyed via discord. First, we want to try to reposition best we can in the current delivery modality. Then we may consider alternative measures, git, hooks, more of a CI/CD outlook.\r\n\r\nOkay doke... I think I understand what I need to do next stitching it back together again.\r\n\r\nBest \ud83c\udf7b ",
        "createdAt": "2024-06-10T17:27:12Z",
        "updatedAt": "2024-06-10T17:27:12Z",
        "author": {
          "login": "mwpowellhtx"
        }
      },
      {
        "body": "> NuGet balks over that while packaging, apparently\r\n\r\nSay more please, NuGet shouldn't have any problems with this pattern.",
        "createdAt": "2024-06-10T19:00:08Z",
        "updatedAt": "2024-06-10T19:00:08Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> > NuGet balks over that while packaging, apparently\r\n> \r\n> Say more please, NuGet shouldn't have any problems with this pattern.\r\n\r\nI shall; pulling that together just now.\r\n\r\n@rainersigwald Hmm, well, not quite sure what I was seeing when the NuGet messages, warnings, errors, etc. Little bit befuddled over that at this point. Now that I have the `build` and `buildMultiTargeting` appropriately packaged, internal importations correct, seems to be working now.\r\n\r\nI'd definitely like to circle around at some point bandwidth permitting and strongly consider a more CI/CD friendly way of facilitating the whole procedure, however.\r\n\r\nAn example output, from one build to the next.\r\n\r\n```\r\n1>BumpAssemblyVersions: Bumping 'Version;AssemblyVersion;FileVersion;InformationalVersion;PackageVersion' (5) specifications.\r\n1>BumpAssemblyVersions: Bumping project 'L:\\Source\\...\\BumpAssemblyVersions\\master\\usage\\package\\Usage.Examples.Multitarget.Hybrid\\Usage.Examples.Multitarget.Hybrid.csproj'.\r\n1>'Usage.Examples.Multitarget.Hybrid.csproj': Bumped 'Version' from '2024.162.2022.1' to '2024.162.2026.0'\r\n1>'Usage.Examples.Multitarget.Hybrid.csproj': Bumped 'AssemblyVersion' from '2024.162.2022.1' to '2024.162.2026.0'\r\n1>'Usage.Examples.Multitarget.Hybrid.csproj': Bumped 'FileVersion' from '2024.162.2022.1' to '2024.162.2026.0'\r\n1>'Usage.Examples.Multitarget.Hybrid.csproj': Bumped 'InformationalVersion' from '2024.162.2022.1' to '2024.162.2026.0'\r\n1>'Usage.Examples.Multitarget.Hybrid.csproj': Bumped 'PackageVersion' from '2024.162.2022.1' to '2024.162.2026.0'\r\n```\r\n\r\n```\r\n1>BumpAssemblyVersions: Bumping 'Version;AssemblyVersion;FileVersion;InformationalVersion;PackageVersion' (5) specifications.\r\n1>BumpAssemblyVersions: Bumping project 'L:\\Source\\...\\BumpAssemblyVersions\\master\\usage\\package\\Usage.Examples.Multitarget.Hybrid\\Usage.Examples.Multitarget.Hybrid.csproj'.\r\n1>'Usage.Examples.Multitarget.Hybrid.csproj': Bumped 'Version' from '2024.162.2026.0' to '2024.162.2026.1'\r\n1>'Usage.Examples.Multitarget.Hybrid.csproj': Bumped 'AssemblyVersion' from '2024.162.2026.0' to '2024.162.2026.1'\r\n1>'Usage.Examples.Multitarget.Hybrid.csproj': Bumped 'FileVersion' from '2024.162.2026.0' to '2024.162.2026.1'\r\n1>'Usage.Examples.Multitarget.Hybrid.csproj': Bumped 'InformationalVersion' from '2024.162.2026.0' to '2024.162.2026.1'\r\n1>'Usage.Examples.Multitarget.Hybrid.csproj': Bumped 'PackageVersion' from '2024.162.2026.0' to '2024.162.2026.1'\r\n```\r\n\r\nAs well as in the multi-targeting scenario, one build to the next.\r\n\r\n```\r\n1>BumpAssemblyVersions: Bumping 'Version;AssemblyVersion;FileVersion;InformationalVersion;PackageVersion' (5) specifications.\r\n1>BumpAssemblyVersions: Bumping project 'L:\\Source\\...\\BumpAssemblyVersions\\master\\usage\\direct\\MultiTargeting.ProjXml.Demo\\MultiTargeting.ProjXml.Demo.csproj'.\r\n1>'MultiTargeting.ProjXml.Demo.csproj': Bumped 'Version' from '2024.162.2014.1' to '2024.162.2028.0'\r\n1>'MultiTargeting.ProjXml.Demo.csproj': Bumped 'AssemblyVersion' from '2024.162.2014.1' to '2024.162.2028.0'\r\n1>'MultiTargeting.ProjXml.Demo.csproj': Bumped 'FileVersion' from '2024.162.2014.1' to '2024.162.2028.0'\r\n1>'MultiTargeting.ProjXml.Demo.csproj': Bumped 'InformationalVersion' from '2024.162.2014.1' to '2024.162.2028.0'\r\n1>'MultiTargeting.ProjXml.Demo.csproj': Bumped 'PackageVersion' from '2024.162.2014.1' to '2024.162.2028.0'\r\n```\r\n\r\n```\r\n1>BumpAssemblyVersions: Bumping 'Version;AssemblyVersion;FileVersion;InformationalVersion;PackageVersion' (5) specifications.\r\n1>BumpAssemblyVersions: Bumping project 'L:\\Source\\...\\BumpAssemblyVersions\\master\\usage\\direct\\MultiTargeting.ProjXml.Demo\\MultiTargeting.ProjXml.Demo.csproj'.\r\n1>'MultiTargeting.ProjXml.Demo.csproj': Bumped 'Version' from '2024.162.2028.0' to '2024.162.2029.0'\r\n1>'MultiTargeting.ProjXml.Demo.csproj': Bumped 'AssemblyVersion' from '2024.162.2028.0' to '2024.162.2029.0'\r\n1>'MultiTargeting.ProjXml.Demo.csproj': Bumped 'FileVersion' from '2024.162.2028.0' to '2024.162.2029.0'\r\n1>'MultiTargeting.ProjXml.Demo.csproj': Bumped 'InformationalVersion' from '2024.162.2028.0' to '2024.162.2029.0'\r\n1>'MultiTargeting.ProjXml.Demo.csproj': Bumped 'PackageVersion' from '2024.162.2028.0' to '2024.162.2029.0'\r\n```\r\n",
        "createdAt": "2024-06-10T19:17:15Z",
        "updatedAt": "2024-06-10T20:30:18Z",
        "author": {
          "login": "mwpowellhtx"
        }
      },
      {
        "body": "Updated the title reflecting the root cause what was sorted out. Closing.",
        "createdAt": "2024-06-11T18:38:43Z",
        "updatedAt": "2024-06-11T18:38:43Z",
        "author": {
          "login": "mwpowellhtx"
        }
      }
    ]
  }
}