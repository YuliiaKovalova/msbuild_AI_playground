{
  "number": 6020,
  "title": "Thousands (!) of instances of MSBuild DOS'ing computer",
  "body": "### Issue Description\r\nWhile (manually, from within VS) editing a Solution-loaded SDK-style .csproj, in a VS Solution containing 10-15 projects, and saving it (CTRL+S) and _possibly_ also starting a Solution build, all of a sudden the computer became ... shall we say _unresponsive_.\r\n\r\nLong story short, there were over two thousand five hundred more processes than normal running, consuming _all_ available RAM and swap-space, effectively creating a system-wide denial-of-service. If we assume each msbuild process is paired with a conhost process, it still sums up to over 1250 MSBuild.exe processes. That's not good on a system with 16 GB of RAM.\r\n\r\nActually, I'd say it's _insane_, unless you have an 8-socket system with 64 cores each, and several TB of RAM - which rules out pretty much all computers on this planet where Windows and VS is installed.\r\n\r\nWhether these MSBuild processes were all spawned by VS, or if MSBuild itself created a \"fork-bomb\" is for me as a user completely irrelevant, when the end result is the same - an unusable computer.\r\n\r\nI therefore suggest some sanity-checking, to disallow the process to start up more \"fully\" if some limits are reached. Some threshold ideas could be\r\n\r\n1. a system-wide counter of how many MSBuild instances are running, and never allow more than... IDK, twice the number of CPU's? At least the limit should be well below 100 times the amount of CPU's.\r\n2. A sanity check on how much memory has been consumed, compared to what's available, and use that as another factor, e.g. if < 1% RAM is available, it could be a good indicator it's _way_ past time to put on the emergency brakes.\r\n \r\n### Steps to Reproduce\r\nDear lord, please don't even try it. If unlucky you might be forced to hard-reset the computer. Besides, if you encounter this condition it would be nigh impossible to debug it anyway.\r\n\r\nThat's a reason I opted to make this a \"Performance Issue\" instead of a bug report. System performance became close to 0.0%.\r\n",
  "state": "CLOSED",
  "createdAt": "2021-01-11T18:03:32Z",
  "updatedAt": "2024-02-21T14:15:45Z",
  "closedAt": "2023-05-31T10:01:18Z",
  "author": {
    "login": "tamlin-mike"
  },
  "labels": [
    "Area: Performance",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "Forgind"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "@Forgind sounds like another node handshake problem, can you investigate?",
        "createdAt": "2021-01-11T22:46:21Z",
        "updatedAt": "2021-01-11T22:46:35Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Is this a recurring problem, or did it just happen once?\r\n\r\nHave you noticed any times when you had more open MSBuild processes than you would have expected? (I admit it's hard to notice unless you constantly monitor all open processes on your computer.)\r\n\r\nHow long had it been since you'd last restarted your computer? (Some reports indicate that MSBuild doesn't always succeed in killing its nodes when it tries to, and if they build up for long enough, it might cause a sudden crash.)\r\n\r\nWhat version of MSBuild were you using?\r\n\r\nI'm not sure if this would work, but if you can recreate the problem, can you try setting (the environment variable) MSBUILDDEBUGCOMM to 1 and MSBUILDDEBUGPATH to a folder you can find and uploading all the files within?",
        "createdAt": "2021-01-12T01:36:07Z",
        "updatedAt": "2021-01-12T01:36:07Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "@Forgind It has happened twice, probably while editing the same csproj.\r\n\r\nI have not noticed any other times any excessive memory load (the only indication of this bug, since it seemed all those processes were simply sitting idle with no measurable CPU load).\r\n\r\nSystem uptime only 7 days. Previously this solution (before editing the csproj) has been working fine with system uptime of a couple of months.\r\n\r\nNot sure what version of MSBuild. The one included in 16.7.7 I guess?\r\n\r\n> but if you can recreate the problem\r\n\r\nThanks, but I'd rather not. :-) Still, those env. vars are good to know about. I'll keep them in mind, should the problem persist. Thanks.",
        "createdAt": "2021-01-12T04:45:32Z",
        "updatedAt": "2021-01-12T04:45:32Z",
        "author": {
          "login": "tamlin-mike"
        }
      },
      {
        "body": "@Forgind since we changed the node reuse and connection rules a while a go, it might be possible now to build in a cap for the number of processes attempted to launch in a single build session. I think that wasn't feasible in the initial implementation because it allowed cross-originating-process stealing but since https://github.com/dotnet/msbuild/pull/3158 might be more feasible.\r\n\r\nNote that there can't be a process-lifetime cap; you can keep VS open for weeks and have MSBuild nodes shut down idle a bunch of times and it's completely reasonable to start new ones thousands of times.\r\n\r\nIn general, I don't think a resource-aware cap on processes is a good path forward. If we could reproduce the bug that's causing the extra nodes it wouldn't be necessary, and even if we can't, hanging builds indefinitely or crashing is only marginally better than the buggy behavior.",
        "createdAt": "2021-01-12T12:44:39Z",
        "updatedAt": "2021-01-12T12:44:39Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald, limiting the processes created in a single run would certainly prevent it from blowing up quickly, but it wouldn't necessarily resolve it long-term unless we rely on people restarting or otherwise killing MSBuild processes often.\r\n\r\nNote that my PR would only affect disconnected nodes, so it shouldn't prevent a particular process from running indefinitely as long as it's constantly in use. Idle processes would be the ones being shut down more aggressively.\r\n\r\nI agree that root-causing the issue is far better, but I haven't succeeded in isolating anything that ties up all the symptoms neatly. If my PR works as intended, it would resolve the issue because if there were ever an excess of nodes, it would cut out idle nodes before making new ones, effectively restarting them. This wouldn't crash the build creating nodes, just any other builds running concurrently, which should be less common. (Probability of having this excess node problem * probability of running multiple builds simultaneously) As long as the user runs just one build at a time, the only symptom should be a slightly slower build as it restarts nodes it could have reused. This is far superior to crashing or, worse, having the entire computer become unresponsive as in tamlin-mike's case.",
        "createdAt": "2021-01-13T01:24:45Z",
        "updatedAt": "2021-01-13T01:24:45Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "@tamlin-mike, I'm trying to figure out what's different about your system or what you did and mine and what I did. Can you run https://github.com/dotnet/msbuild/blob/master/scripts/EnumerateMSBuild.ps1 from an administrator powershell window and attach the results? Can you also upload any environment variables you can share?",
        "createdAt": "2021-01-13T01:28:11Z",
        "updatedAt": "2021-01-13T01:28:11Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "@Forgind I don't think there's anything in my system setup that provoked this, I'm more leaning towards a bug in VS or MSBuild itself, and its handling of manually modified .csproj's (possibly in conjunction with nuget management, or some cached project data in e.g. _obj_).\r\n\r\nSince this is the first time I ever experienced this (actually it was two times during a 24h timeframe, but the circumstances were equivalent), with many many thousands of builds using a multitude of projects and Solutions for a number of years, I'm not convinced the system or its setup has anything to do with this bug.\r\n\r\nThe only _MSBuild.exe_ versions the script found were 16.7.0+b89cb5fde99e8cdffdeb1807545ef2fc9b7dfaca (32- and 64-bit respectively)\r\n\r\n(That script is btw is adding a ton of SPC characters after the filenames in the logfile, the hard-coded width seemingly space-pads every line to become 403 character - might want to fix that).\r\n\r\nThe little extra information I have is:\r\n\r\n* During the time I had 2 instances of VS running, having different solutions open. Both were started from same cmdprompt, that in turn was started from a previous (since long shut down) VS using \"ALT-T L C\". The reason they are started like this is to be able to set alternate TEMP and TMP env vars.\r\n* The projects in the Solution are using a mixture of both \"hard-coded\" assembly references (_Reference Include_, which we're trying to get away from) and nuget package references.\r\n* IIRC, what I had done was to add a few nuget packages to the project using VS' nuget package management GUI, remove a few explicit assembly references from it (from git history I believe the specific assemblies that could come into play would be System.Collections.Immutable and Microsoft.CodeAnalysis.CSharp), and adding (or uncommenting) a PostBuild target to one or more of the existing projects.\r\n* Added one existing csproj to the Solution. That added project had probably been _xcopy_'d from a different Solution, and probably its _obj_ directory was intact from previous builds in its previous location. Provided the _obj_ dir was intact, that could potentially be an important puzzle-piece.\r\n\r\nWhat I then experienced was that upon trying to (re?-)build, VS seemingly did nothing, and slowly reported that 4-6 projects failed. I turned on progressively more \"chatty\" logging using VS' Run/Build dialog, only to get the same result. Only \"failed\", no other log messages at all. At that point I realized it wasn't even running MSBuild as it should. In hindsight, at this point system memory was probably already exhausted by the thousands of effectively-zombie processes, and VS just don't bother telling you that's the reason for the failures.\r\n\r\nThat's about the only valuable information I can provide. I'm sorry it's so vague, but I hope it can help you at least begin to suspect some areas that could trigger this bug.",
        "createdAt": "2021-01-13T15:35:07Z",
        "updatedAt": "2021-01-13T15:35:07Z",
        "author": {
          "login": "tamlin-mike"
        }
      },
      {
        "body": "I got an idea.\r\n\r\nFor at least Windows host, this process explosion could be prevented by sticking the MSBuild processes in a Job Object, specifically using the _ActiveProcessLimit_ [https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-jobobject_basic_limit_information](url)\r\n\r\nWhile it obviously wouldn't fix the underlying cause (that may or may not ever be identified and/or fixed), it would prevent the code from running amok, if and when it does.",
        "createdAt": "2021-01-14T09:39:58Z",
        "updatedAt": "2021-01-14T09:39:58Z",
        "author": {
          "login": "tamlin-mike"
        }
      },
      {
        "body": "I do think limiting the number of processes that can be created in a given build is a good direction, but I think a Job Object might play badly with long-lived MSBuild processes, and then there'd be builds that can't even get started unless you kill all processes.\r\n\r\nDo you normally use /nodeReuse:true? I'm wondering if one part of it could be the entrypoint node exiting before its worker children, leaving them orphaned and unable to finish their exit code. Then, since they're still taking up resources, MSBuild can't connect to worker nodes and makes extra before quitting, and whatever originally invokes MSBuild can't connect either and makes a lot of entrypoint nodes that make more worker nodes and exacerbate the problem. On a related note, how many cores do you have?\r\n\r\nI'm also planning to find a good place to add some logging so that if this happens again to anyone, they'll be able to send us logs that pinpoint the problem. That's a little hard without knowing what the problem is, though.\r\n\r\nWe released a patch for a possibly unrelated node connection issue in 16.7...9? that affected a node's ability to connect to its children, so it's also possible the problem will go away on its own, though I'm not too hopeful on that front.",
        "createdAt": "2021-01-19T16:11:43Z",
        "updatedAt": "2021-01-19T16:11:43Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "Does VS start MSBuild with _/nodeReuse:true_ ? MSBuild is practically never (read: _maybe_ once every two years) invoked manually here, it's just a slave to VS and whatever arguments VS feeds it.\r\n\r\n4 core system + HT, so 8 effectively.\r\n\r\nAs a follow-up on the way this might have happened, I have since encountered one of those \"a few hundred seemingly-zombie MSBuild processes\" conditions. That happened without any editing of project files or other mucking around. Since it was only a few hundred I managed to terminate them before they caused harm to the system.\r\n\r\nThe Solution have a some projects running post-processing on the produced assemblies (DLL's). The only thing I can come to think of that is different from previous versions (that work without this problem) is a somewhat long-running (up to 20-ish seconds maybe?) post-processing by Fody, using its magic (no explicit _PostBuild_ Target in the project files). That output is then further processed by a _PostBuild_ Target, but that last step was already performed in previous versions of the projects. The Fody step can on occasion fail (sometimes by a bug in our \"weaver\", sometimes by the VBCSCompiler, we guess, is holding a lock on the PDB even after the binary is produced).\r\n\r\nMaybe (but here I'm speculating) one of the post-processing steps (either Fody or the explicit _PostBuild_ Target) terminated with an error. Could that perhaps excercise a not normally taken and therefore less tested code path in MSBuild?",
        "createdAt": "2021-01-20T10:41:55Z",
        "updatedAt": "2021-01-20T10:41:55Z",
        "author": {
          "login": "tamlin-mike"
        }
      },
      {
        "body": "@tamlin-mike, if you're still hitting this, is it possible you're using MSBuildLocator? I had thousands of MSBuild processes starting on my machine (twice because I went too far in a \"controlled\" debugging session -_-) until it crashed when I was investigating a bug specific to MSBuildLocator.",
        "createdAt": "2021-10-29T22:21:54Z",
        "updatedAt": "2021-10-29T22:21:54Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "@Forgind Afraid not. It was a pretty much vanilla VS installation.\r\n\r\nHappy to see you managed to repro. :-)",
        "createdAt": "2021-10-31T16:57:55Z",
        "updatedAt": "2021-10-31T16:57:55Z",
        "author": {
          "login": "tamlin-mike"
        }
      },
      {
        "body": "Haven't heared about other cases since.\r\n@tamlin-mike - please feel free to reopen with details if you hit this again",
        "createdAt": "2023-05-31T10:01:18Z",
        "updatedAt": "2023-05-31T10:01:18Z",
        "author": {
          "login": "JanKrivanek"
        }
      }
    ]
  }
}