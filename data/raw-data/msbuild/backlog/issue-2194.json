{
  "number": 2194,
  "title": "Unable to find 15.0 toolset in a project with MSBuild in it's name.",
  "body": "Repro steps:\r\n\r\n- Create a project called \"MSBuildTest\" (or something with msbuild in the name) and reference the Microsoft.Build package.\r\n- Add the following code \r\n\r\n```csharp\r\n        static void Main(string[] args)\r\n        {\r\n            AppDomain.CurrentDomain.AssemblyResolve += (sender, eventArgs) =>\r\n            {\r\n                string msbuildPath = @\"C:\\Program Files (x86)\\Microsoft Visual Studio\\D15PreRel\\MSBuild\\15.0\\Bin\\\";\r\n                var targetAssembly = Path.Combine(msbuildPath, new AssemblyName(eventArgs.Name).Name + \".dll\");\r\n                return File.Exists(targetAssembly) ? Assembly.LoadFrom(targetAssembly) : null;\r\n            };\r\n            Run();\r\n        }\r\n\r\n        private static void Run()\r\n        {\r\n            ProjectCollection collection = new ProjectCollection();\r\n            var project = collection.LoadProject(@\"ConsoleApp.csproj\");\r\n        }\r\n```\r\n- Make sure there's a ConsoleApp.csproj which has ToolsVersion=\"15.0\" in it.\r\n\r\nExpected: The project should loaded fine.\r\n\r\nFound: Throws \r\n```\r\nMicrosoft.Build.Exceptions.InvalidProjectFileException: 'The tools version \"15.0\" is unrecognized. Available tools versions are \"2.0\", \"3.5\", \"4.0\".  ConsoleApp.csproj'\r\n```\r\n\r\nThis is because BuildEnvironmentHelper tries to ascertain the mode in which msbuild is launched and one of the checks it does is to look at the process name and sees if it contains \u201cMSBuild\u201d. In this case, it think the BuildMode is Standalone and doesn't read msbuild.exe.config and hence doesn't get the 15.0 toolset.",
  "state": "CLOSED",
  "createdAt": "2017-06-08T00:15:40Z",
  "updatedAt": "2024-02-21T17:18:37Z",
  "closedAt": "2018-02-09T16:10:09Z",
  "author": {
    "login": "srivatsn"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Consider for Next Major Version"
  },
  "comments": {
    "nodes": [
      {
        "body": "Relevant code is [here](https://github.com/Microsoft/msbuild/blob/54f7f93393cd96f237b419854ee8f2d7ab3acd71/src/Shared/BuildEnvironmentHelper.cs#L332-L333)\r\n\r\n```C#\r\nPath.GetFileNameWithoutExtension(processName)?\r\n  .IndexOf(s, StringComparison.OrdinalIgnoreCase) >= 0);\r\n```\r\n\r\nCould be `.Equals(s, StringComparison.OrdinalIgnoreCase)` for this case, but not the test-runner cases. Maybe we could switch it up to be a regex match?",
        "createdAt": "2017-06-08T16:10:42Z",
        "updatedAt": "2017-06-08T16:10:42Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I hoped that setting the environment variable `MSBUILD_EXE_PATH` would work around this, but it doesn't, because that always defaults to standalone mode, which is the problem here.",
        "createdAt": "2017-06-08T17:54:55Z",
        "updatedAt": "2017-06-08T17:54:55Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "The same problem occurs if the process's image name contains `DEVENV` or `BLEND`.",
        "createdAt": "2017-06-20T12:46:10Z",
        "updatedAt": "2017-06-20T12:46:10Z",
        "author": {
          "login": "williamb1024"
        }
      },
      {
        "body": "Running \r\n\r\nMicrosoft Visual Studio Enterprise 2017 Int Preview\r\nVersion 15.3.0 Preview 3.0 [26620.0.d15rel]\r\nVisualStudio.15.IntPreview/15.3.0-pre.3.0+26620.0.d15rel\r\n\r\nand still seeing this in an xunit test running through the xunit.runner.visualstudio runner from within the VSTS test explorer.",
        "createdAt": "2017-07-03T00:57:46Z",
        "updatedAt": "2017-07-03T00:57:46Z",
        "author": {
          "login": "kzu"
        }
      },
      {
        "body": "I stumbled into it too... thanks for reporting it. \r\n\r\nI guess the first thing you do to test that lib is to create a MsBuild test application with MsBuild in the name...",
        "createdAt": "2017-07-26T19:01:15Z",
        "updatedAt": "2017-08-24T20:14:51Z",
        "author": {
          "login": "jairbubbles"
        }
      },
      {
        "body": "While the `IsProcessInList` heuristic is broader than it needs to be, the actual problem is that most of the `TryFromXXX` methods rely on a single heuristic and then return a `BuildEnvironment` without double checking if it actually is a valid one. This causes the calling loop to break the chain of try-methods and return an invalid build environment. Since heuristics can always have false-positives, validating the guess would be a more robust fix than just making `IsProcessInList` more strict.",
        "createdAt": "2017-08-17T19:23:32Z",
        "updatedAt": "2017-08-17T19:23:32Z",
        "author": {
          "login": "weltkante"
        }
      },
      {
        "body": "I've run into this too. Great find!",
        "createdAt": "2017-08-24T19:36:26Z",
        "updatedAt": "2017-08-24T19:36:26Z",
        "author": {
          "login": "DustinCampbell"
        }
      },
      {
        "body": "Forgot about this problem and just ran into it again. :smile:",
        "createdAt": "2017-09-21T20:00:52Z",
        "updatedAt": "2017-09-21T20:00:52Z",
        "author": {
          "login": "DustinCampbell"
        }
      },
      {
        "body": "Well maybe we should add a link to this issue in the exception :smile:",
        "createdAt": "2017-09-21T20:03:59Z",
        "updatedAt": "2017-09-21T20:03:59Z",
        "author": {
          "login": "jairbubbles"
        }
      },
      {
        "body": "Well, the exception is that it can't find the toolset, so that's a _bit_ heavy handed. \ud83d\ude38 ",
        "createdAt": "2017-09-21T20:07:29Z",
        "updatedAt": "2017-09-21T20:07:29Z",
        "author": {
          "login": "DustinCampbell"
        }
      }
    ]
  }
}