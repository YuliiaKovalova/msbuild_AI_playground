{
  "number": 5822,
  "title": "CodeTaskFactory on amd64 MSBuild doesn't deduplicate references to MSBuild assemblies",
  "body": "<!-- This is a template that helps us provide quicker feedback. Please use any relevant sections and delete anything you don't need. -->\r\n\r\n### Issue Description\r\n<!--\r\n* Please include a clear and concise description of the problem.\r\n-->\r\n\r\n### Steps to Reproduce\r\n\r\n```xml\r\n<Project>\r\n\r\n  <UsingTask\r\n    TaskName=\"DoNothing\"\r\n    TaskFactory=\"CodeTaskFactory\"\r\n    AssemblyFile=\"$(MSBuildToolsPath)\\Microsoft.Build.Tasks.Core.dll\" >\r\n    <ParameterGroup />\r\n    <Task>\r\n      <!-- NOTE: these references aren't necessary because we add MSBuild references automatically -->\r\n      <Reference Include=\"$(MSBuildToolsPath)\\Microsoft.Build.Framework.dll\"/>\r\n      <Reference Include=\"$(MSBuildToolsPath)\\Microsoft.Build.Utilities.Core.dll\"/>\r\n      \r\n      <Code Type=\"Fragment\" Language=\"cs\">\r\n      </Code>\r\n    </Task>\r\n  </UsingTask>\r\n\r\n  <Target Name=\"Go\">\r\n    <DoNothing />\r\n  </Target>\r\n</Project>\r\n\r\n```\r\n\r\n### Expected Behavior\r\n\r\n```sh-session\r\n\u276f msbuild .\\foo.proj\r\nMicrosoft (R) Build Engine version 16.9.0-preview-20513-07+c10f34c4e for .NET Framework\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:00:00.18\r\n```\r\n\r\n### Actual Behavior\r\n\r\n```sh-session\r\n\u276f &\"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Preview\\MSBuild\\Current\\Bin\\amd64\\MSBuild.exe\" .\\foo.proj\r\nMicrosoft (R) Build Engine version 16.9.0-preview-20513-07+c10f34c4e for .NET Framework\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\nS:\\msbuild\\foo.proj(17,5): error : The source file for this compilation can be found at: \"C:\\Users\\raines\\AppData\\Local\\Temp\\b5e9b929-26a6-4041-b605-9fa0c90aa869.txt\"\r\nS:\\msbuild\\foo.proj(17,5): error MSB3758: An error has occurred during compilation. error CS1703: An assembly with the same identity 'Microsoft.Build.Framework, Version=15.1.0\r\n.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' has already been imported. Try removing one of the duplicate references.\r\nS:\\msbuild\\foo.proj(17,5): error MSB3758: An error has occurred during compilation. error CS1703: An assembly with the same identity 'Microsoft.Build.Utilities.Core, Version=1\r\n5.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' has already been imported. Try removing one of the duplicate references.\r\nS:\\msbuild\\foo.proj(17,5): error MSB4175: The task factory \"CodeTaskFactory\" could not be loaded from the assembly \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Preview\r\n\\MSBuild\\Current\\Bin\\amd64\\Microsoft.Build.Tasks.Core.dll\". The task factory must return a value for the \"TaskType\" property.\r\n\r\nBuild FAILED.\r\n\r\nS:\\msbuild\\foo.proj(17,5): error : The source file for this compilation can be found at: \"C:\\Users\\raines\\AppData\\Local\\Temp\\b5e9b929-26a6-4041-b605-9fa0c90aa869.txt\"\r\nS:\\msbuild\\foo.proj(17,5): error MSB3758: An error has occurred during compilation. error CS1703: An assembly with the same identity 'Microsoft.Build.Framework, Version=15.1.0\r\n.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' has already been imported. Try removing one of the duplicate references.\r\nS:\\msbuild\\foo.proj(17,5): error MSB3758: An error has occurred during compilation. error CS1703: An assembly with the same identity 'Microsoft.Build.Utilities.Core, Version=1\r\n5.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' has already been imported. Try removing one of the duplicate references.\r\nS:\\msbuild\\foo.proj(17,5): error MSB4175: The task factory \"CodeTaskFactory\" could not be loaded from the assembly \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Preview\r\n\\MSBuild\\Current\\Bin\\amd64\\Microsoft.Build.Tasks.Core.dll\". The task factory must return a value for the \"TaskType\" property.\r\n    0 Warning(s)\r\n    4 Error(s)\r\n\r\nTime Elapsed 00:00:00.13\r\n```\r\n\r\n### Analysis\r\n\r\nI'm guessing this happens because we're expanding to a path from the amd64 folder instead of the x86 one so a deduplication step gets missed.",
  "state": "CLOSED",
  "createdAt": "2020-10-21T20:57:11Z",
  "updatedAt": "2024-02-21T17:02:16Z",
  "closedAt": "2020-12-21T21:45:09Z",
  "author": {
    "login": "rainersigwald"
  },
  "labels": [
    "bug",
    "Partner request",
    "Visual Studio",
    "For consideration",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "MSBuild 16.9"
  },
  "comments": {
    "nodes": [
      {
        "body": "I did some digging and have identified the problem.\r\n\r\nFirst, there doesn't actually seem to be any explicit deduplication of references. Even when running the 32-bit MSBuild we'll end up with two copies of what `$(MSBuildToolsPath)\\Microsoft.Build.Framework.dll` expands to, and two copies of `$(MSBuildToolsPath)\\Microsoft.Build.Utilities.Core.dll`--the first copy of each is the one `CodeTaskFactory` explicitly adds, while the second is the one added by the `<Reference>`s. Either CodeDom is filtering out the duplicates, or the compiler doesn't care about duplicate reference paths.\r\n\r\nSecond, the binding redirects in the msbuild.exe.config for the 64-bit cause it to load the Microsoft.Build.Framework.dll and Microsoft.Build.Utilities.Core.dll sitting next to the **32-bit** MSBuild.exe:\r\n\r\n``` xml\r\n<dependentAssembly>\r\n  <assemblyIdentity name=\"Microsoft.Build.Framework\" culture=\"neutral\" publicKeyToken=\"b03f5f7f11d50a3a\" />\r\n  <bindingRedirect oldVersion=\"0.0.0.0-99.9.9.9\" newVersion=\"15.1.0.0\" />\r\n  <codeBase version=\"15.1.0.0\" href=\"..\\Microsoft.Build.Framework.dll\" />\r\n</dependentAssembly>\r\n```\r\n\r\nSo we effectively end up with the following references when running the 64-bit MSBuild:\r\n- `$(MSBuildToolsPath)\\..\\Microsoft.Build.Framework.dll`\r\n- `$(MSBuildToolsPath)\\..\\Microsoft.Build.Utilities.Core.dll`\r\n- `$(MSBuildToolsPath)\\Microsoft.Build.Framework.dll`\r\n- `$(MSBuildToolsPath)\\Microsoft.Build.Utilities.Core.dll`\r\n\r\nThe compiler is _not_ fine with being given two different paths to assemblies with the same identity, and it produces errors.\r\n\r\nIt is not clear to me why we are using binding redirects in this way when the assemblies are available right next to the 64-bit MSBuild.exe.",
        "createdAt": "2020-12-02T00:36:32Z",
        "updatedAt": "2020-12-02T00:36:32Z",
        "author": {
          "login": "tmeschter"
        }
      },
      {
        "body": "> It is not clear to me why we are using binding redirects in this way when the assemblies are available right next to the 64-bit MSBuild.exe.\r\n\r\nThis is annoyingly convoluted! We actually tried to remove it before, only to have to put it back in at the last second: https://github.com/dotnet/msbuild/pull/5496. It seems to have to do with types getting serialized across process boundaries.\r\n\r\nI actually think setting a codeBase on the _x86_ version might fix this \ud83d\ude2c",
        "createdAt": "2020-12-16T18:28:13Z",
        "updatedAt": "2020-12-16T18:28:13Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}