{
  "number": 9986,
  "title": "Unexpected warning/error MSB3202",
  "body": "## Attachment\r\n\r\n[ProjectNotFound.zip](https://github.com/dotnet/project-system/files/13226588/ProjectNotFound.zip)\r\n\r\n## Visual Studio Version\r\n\r\nVisual Studio 2022 (17.7.6)\r\n\r\n## Summary\r\n\r\n* Building project, unexpected warning message: `..\\Microsoft.Common.CurrentVersion.targets(1797,5): warning MSB3202: The project file \"xxx.csproj\" was not found.`\r\n* In more large and complex solution, randomly showing the same MSB3202 message but as error and failed to build\r\n\r\n## Steps to Reproduce\r\n\r\n1. Open the solution in attachment file\r\n2. Build the `CompanyName.OrganizationName.PackageName.Hardware` project\r\n3. Open and save `Class1.cs` in the project\r\n4. Build the project again\r\n5. Repeat steps 3 to 4, warning MSB3202 is shown in the output window\r\n\r\n```log\r\nBuild started...\r\n1>------ Build started: Project: CompanyName.OrganizationName.PackageName.Hardware, Configuration: Debug Any CPU ------\r\n1>C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\MSBuild\\Current\\Bin\\arm64\\Microsoft.Common.CurrentVersion.targets(1797,5): warning MSB3202: The project file \"..\\..\\OtherCompanyName.OrganizationName.PackageName\\Network\\OtherCompanyName.OrganizationName.PackageName.Network.Connection\\OtherCompanyName.OrganizationName.PackageName.Network.Connection.csproj\" was not found.\r\n1>Done building project \"CompanyName.OrganizationName.PackageName.Network.Communication.IO.csproj\".\r\n1>CompanyName.OrganizationName.PackageName.Hardware -> C:\\ProjectNotFound\\CompanyName.OrganizationName.PackageName\\CompanyName.OrganizationName.PackageName.Hardware\\bin\\Debug\\net7.0\\CompanyName.OrganizationName.PackageName.Hardware.dll\r\n========== Build: 1 succeeded, 0 failed, 4 up-to-date, 0 skipped ==========\r\n========== Build started at 7:57 PM and took 01.367 seconds ==========\r\n```\r\n\r\n## Expected Behavior\r\n\r\n* Build succeeded without any warning/error MSB3202 message because project file(s) does exist\r\n\r\n## Actual Behavior\r\n\r\n* Unexpected warning/error MSB3202\r\n\r\n## User Impact\r\n\r\n* Failed to build if error MSB3202 is shown \r\n\r\n## Notes\r\n\r\n1. This problem can be found in Visual Studio 2019 also\r\n2. If we use `dotnet build` or `msbuild` command to build the project with the same steps, no warning/error MS3202 is shown\r\n3. If we set `Maximum number of parallel project builds` to 1, no warning/error MS3202 is shown in Visual Studio\r\n4. If we disable `BuildInParallel` in `CompanyName.OrganizationName.PackageName.Hardware` project, no warning/error MS3202 is shown in Visual Studio\r\n5. If we unchecked `Don't call MSBuild if a project appears to be up to date`, no warning/error MS3202 is shown in Visual Studio\r\n6. If we enable `DisableFastUpToDateCheck` in `CompanyName.OrganizationName.PackageName.Network.Builder` and `CompanyName.OrganizationName.PackageName.Network.Communication.IO` projects, no warning/error MS3202 is shown in Visual Studio\r\n7. This issue seems to be related to long path issue\r\n8. Set `LongPathsEnabled = 1` in registry does not help",
  "state": "CLOSED",
  "createdAt": "2023-11-01T12:27:38Z",
  "updatedAt": "2024-09-25T13:33:11Z",
  "closedAt": "2024-09-25T13:33:09Z",
  "author": {
    "login": "Archie-Yang"
  },
  "labels": [
    "backlog",
    "Priority:3",
    "triaged",
    "gathering-feedback"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "MichalPavlik"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "I am also running into this issue.  Turning off the \"Don't call MSBuild if a project appears to be up to date\" option is not an option for us.  Our solution has 491 projects in it.  If this option is turned off, it takes several minutes to build if *no changes are made at all*.\r\n\r\nIs this issue caused by a long path problem?  If so, we can investigate on renaming our projects if necessary.  But if LongPathsEnabled is set to 1 in the registry, there should be no issue at all.",
        "createdAt": "2023-11-09T11:57:19Z",
        "updatedAt": "2023-11-09T11:57:19Z",
        "author": {
          "login": "PondPackMan2023"
        }
      },
      {
        "body": "@drewnoakes @melytc any further thoughts or updates here? Been running into the same thing.",
        "createdAt": "2024-02-27T18:51:23Z",
        "updatedAt": "2024-02-27T18:51:23Z",
        "author": {
          "login": "martyelliott7"
        }
      },
      {
        "body": "There's no update here and we can't give any timeline, sorry. Any update will be posted here directly.",
        "createdAt": "2024-03-12T22:45:50Z",
        "updatedAt": "2024-03-12T22:45:50Z",
        "author": {
          "login": "drewnoakes"
        }
      },
      {
        "body": "@drewnoakes thanks for the update. Just wanted to check, is there any sense of what might be causing this? In particular if there's a specific length at which project file paths start becoming problematic.",
        "createdAt": "2024-03-20T15:35:51Z",
        "updatedAt": "2024-03-20T15:35:51Z",
        "author": {
          "login": "martyelliott7"
        }
      },
      {
        "body": "Could folks who also hit this please verify that all the workarounds listed in the issue actually prevent the error? They seem to all be tweaks to unrelated features, so I'm surprised that they'd all work as described. Maybe the problem is intermittent and some of them don't actually help. Narrowing the list down could help.\n\nThat said the MSB3202 diagnostic is coming from MSBuild directly. VS uses the .NET Framework version of MSBuild, whereas `dotnet build` uses the .NET Core version, which might be a factor.\n\nUnderstanding if the error occurs in a VS Developer Prompt command line build would be helpful.",
        "createdAt": "2024-03-21T09:14:53Z",
        "updatedAt": "2024-03-21T09:14:53Z",
        "author": {
          "login": "drewnoakes"
        }
      },
      {
        "body": "@drewnoakes I can confirm setting the number of parallel project builds to 1 fixes the issue. There are several .NET Framework projects in the solution, so I can't test out with `dotnet build`.\r\n\r\nIf it's any help, this error only gets logged for ~8 or so projects (out of a ~500 project solution) which seem to all have longer paths.",
        "createdAt": "2024-03-31T17:00:49Z",
        "updatedAt": "2024-03-31T17:00:49Z",
        "author": {
          "login": "martyelliott7"
        }
      },
      {
        "body": "Facing the same issue on MacOs and rider as well. \r\ndotnet build works fine\r\n\r\nMoving the entire directory to a simpler path solves the issue",
        "createdAt": "2024-04-05T04:51:09Z",
        "updatedAt": "2024-04-05T04:54:14Z",
        "author": {
          "login": "moxplod"
        }
      },
      {
        "body": "For some more info, this error usually seems to stem from a specific group of projects as well. The projects which throw this error (i.e. the referencing projects, not the referenced projects) all seem to be .NET Framework projects with non-SDK style .csproj files. ",
        "createdAt": "2024-04-08T13:56:25Z",
        "updatedAt": "2024-04-08T13:56:25Z",
        "author": {
          "login": "martyelliott7"
        }
      },
      {
        "body": "That is not the case with me.  Other than C++ projects, all projects are SDK-style.  1/2 of them target net48 and 1/2 target net6 (multitargeting with a single project file is not an option for us).  Though it seems the ones that fail the most often with this issue are net48 targeted projects.",
        "createdAt": "2024-04-08T13:58:56Z",
        "updatedAt": "2024-04-08T13:58:56Z",
        "author": {
          "login": "PondPackMan2023"
        }
      },
      {
        "body": "From looking some more, this seems to be invoked from the _GetProjectReferenceTargetFrameworkProperties target",
        "createdAt": "2024-04-09T00:29:55Z",
        "updatedAt": "2024-04-09T00:29:55Z",
        "author": {
          "login": "martyelliott7"
        }
      },
      {
        "body": "There's enough signal that this isn't VS-specific, so I'm going to move this to MSBuild for further investigation.",
        "createdAt": "2024-04-10T06:01:44Z",
        "updatedAt": "2024-04-10T06:03:16Z",
        "author": {
          "login": "drewnoakes"
        }
      },
      {
        "body": "> There's enough signal that this isn't VS-specific, so I'm going to move this to MSBuild for further investigation.\r\n\r\n@drewnoakes  Can you please provide a link to the issue under MSBuild so those of us interested can follow it?",
        "createdAt": "2024-04-10T10:14:31Z",
        "updatedAt": "2024-04-10T10:14:31Z",
        "author": {
          "login": "PondPackMan2023"
        }
      },
      {
        "body": "> There's enough signal that this isn't VS-specific, so I'm going to move this to MSBuild for further investigation.\r\n\r\nCan you elaborate on this? My read is that all of the failures are in VS. I suspect the workarounds listed are pushing more of the build out-of-proc and thus avoiding the `devenv.exe` `MAX_PATH` restrictions.\r\n\r\nThe overall \"VS should support long paths\" issue is https://developercommunity.visualstudio.com/idea/351628/allow-building-running-and-debugging-a-net-applica.html.\r\n\r\nUnfortunately, I suspect the most expedient option in these cases is to shorten your paths.",
        "createdAt": "2024-04-10T13:59:24Z",
        "updatedAt": "2024-04-10T13:59:24Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@PondPackMan2023 the issue was transferred across repos, so this is still the one to track.\r\n\r\n>> There's enough signal that this isn't VS-specific, so I'm going to move this to MSBuild for further investigation.\r\n>\r\n> Can you elaborate on this? \r\n\r\nI can't see how changing the degree of parallelism would be related to anything in VS, but perhaps it's changing where the build occurs, as you say.\r\n\r\nIf you think any fix here would be on the project system side, please transfer back and provide some guidance, as it's not clear what we could do here. Maybe the issue needs to go to VS platform, who schedule the builds (and aren't on GitHub).",
        "createdAt": "2024-04-11T02:10:28Z",
        "updatedAt": "2024-04-11T02:10:28Z",
        "author": {
          "login": "drewnoakes"
        }
      },
      {
        "body": "Same issue on VS 2022 ver.17.9.6",
        "createdAt": "2024-04-24T10:39:47Z",
        "updatedAt": "2024-04-24T10:39:47Z",
        "author": {
          "login": "ctodor"
        }
      },
      {
        "body": "I tried to repro by using Archie's solution, and I can confirm it's reproable (pretty consistently) on VS 17.10.5. I see warnings in Output Window, but not in Error List.\nIf it's really reproable also with Rider on MacOS, it could be some weird MSBuild issue. I will assign myself for further investigation, but as this issue is not blocking, I will probably get to it in September (earliest).",
        "createdAt": "2024-08-13T14:20:37Z",
        "updatedAt": "2024-08-13T14:24:07Z",
        "author": {
          "login": "MichalPavlik"
        }
      },
      {
        "body": "I've been working on readding multitargeting to our primary solution.  This drops the project count to 543.  But, if the root path is too long, then I start to run into the \"project not found\" build issue.  \r\n\r\nThis issue does not seem to occur with projects that target a single framework.  Right now, our solution has 913 projects.  But this is because we have pairs of C# projects where one targets net48 and the other net6.0-windows.  The project not found issue doesn't occur, even with the \"longer\" paths.  But as soon as I apply multitargeting, things start to break down.\r\n\r\nWhat VS/msbuild appears to be doing is taking the path of the project and then appending the relative project reference path to it but then not resolving it with Path.GetFullPath.  By leaving the relative path portion (..\\..\\..\\..\\Base\\<etc.) it creates a string that is 260+ characters long and that is what causes the build error.\r\n\r\nWe have a plan to mitigate the issue by shortening the paths to the projects and that will help.  But if one of my colleagues ends up using a root path that is too long, then they run into the issue.\r\n\r\nIt seems the *best* fix here is for VS/msbuild to use GetFullPath after doing the appending to get a \"real\" project path of the project reference.  Then if it can't find the project, create the build error.  But don't create the build error on the non-resolved string.\r\n\r\nTwo of my colleagues kept telling me they weren't seeing the problem.  But it ends up they were using a root path of g:\\of and I was using a root path of g:\\src.  That difference of 1 character made all the difference.  \r\n\r\nA string length of 259 works.  260 or more does not.  Multitargeting seems to make the issue occur more frequently.",
        "createdAt": "2024-08-29T18:54:53Z",
        "updatedAt": "2024-08-29T18:54:53Z",
        "author": {
          "login": "PondPackMan2023"
        }
      },
      {
        "body": "I'm wondering if the #9223 (issue #4247) could be related.",
        "createdAt": "2024-09-02T09:48:45Z",
        "updatedAt": "2024-09-02T09:48:45Z",
        "author": {
          "login": "MichalPavlik"
        }
      },
      {
        "body": "I think I found it. There is a check for file existence: https://github.com/dotnet/msbuild/blob/7cf66090a764f0f239671e4877255efe7ba91155/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/MSBuild.cs#L343\n\n... and this abstraction calls https://github.com/dotnet/msbuild/blob/7cf66090a764f0f239671e4877255efe7ba91155/src/Framework/NativeMethods.cs#L1837\n\n... which returns `false`. `System.IO.File.Exists` returns `true` for the same path. If we will get rid of this P/Invoke (https://github.com/dotnet/msbuild/pull/9223#issuecomment-2217451762) then it should resolve this issue.\n\nIt still doesn't explain why is this happening on MacOS. I guess it's a different issue, because the `FileExistsWindows` is Windows only implementation :)",
        "createdAt": "2024-09-04T15:13:44Z",
        "updatedAt": "2024-09-04T15:16:38Z",
        "author": {
          "login": "MichalPavlik"
        }
      },
      {
        "body": "The PR is merged and I tested VS with latest `main` MSBuild. I can't repro the issue anymore, so I'm closing it.",
        "createdAt": "2024-09-25T13:33:09Z",
        "updatedAt": "2024-09-25T13:33:09Z",
        "author": {
          "login": "MichalPavlik"
        }
      }
    ]
  }
}