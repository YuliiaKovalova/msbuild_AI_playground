{
  "number": 10228,
  "title": "[Bug]: No way to load NuGet.Frameworks into Default ALC",
  "body": "### Issue Description\n\nWhile using in-proc BuildManager, theres no way to properly handle NuGet.Frameworks loading.\r\nhttps://github.com/dotnet/msbuild/blob/main/src/Build/Utilities/NuGetFrameworkWrapper.cs#L56\r\n\r\n`assemblyName` are never set while running in none msbuild.exe or Visual Studio, and as far as I can tell, its loaded into a separate temp ALC, and not the default as the rest of the Microsoft Build assemblies.\r\nEither it should be possible to setup that one want it to be loaded into the Default ALC, or the CurrentReflectionContext ALC.\r\n\r\nWith this current behavior im having a hard time not having to include the NuGet.Frameworks.dll published, where it *needs* to be the same version as the NuGet.Frameworks.dll in the dotnet SDK.\n\n### Steps to Reproduce\n\nHave ie. ProjectCreator nuget package or other assemblies that depends on Nuget.Frameworks dll.\r\nUse BuildManager In-Proc to restore projects.\r\nIf published version dont match as the one in the SDK, theres file load failures.\r\n\r\nHave the ability to load the Nuget.Frameworks dll in the Default ALC or CurrentReflectionContext should help\n\n### Expected Behavior\n\nNuGet.Frameworks.dll is loaded correctly, either as part as the MSBuild Locator, or in a more controlled ALC setup.\n\n### Actual Behavior\n\nNuGet.Frameworks.dll needs to be published, and need to match exact dll version as the dotnet sdk, making it hard on dev machines as dotnet sdk is tied to the local installed version.\n\n### Analysis\n\n_No response_\n\n### Versions & Configurations\n\n_No response_",
  "state": "CLOSED",
  "createdAt": "2024-06-12T07:46:56Z",
  "updatedAt": "2024-10-03T12:59:44Z",
  "closedAt": "2024-10-03T12:53:54Z",
  "author": {
    "login": "hknielsen"
  },
  "labels": [
    "bug",
    "Area: MSBuildLocator"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "YuliiaKovalova"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Hi @hknielsen,\r\n\r\nThank you for reporting this issue.\r\n\r\nIt appears to have the same symptoms as described in issue [#10213](https://github.com/dotnet/msbuild/issues/10213). We plan to address it as part of the MSBuildLocator API v2 updates[ (see microsoft/MSBuildLocator#282).](https://github.com/microsoft/MSBuildLocator/issues/282) I am currently compiling a list of breaking changes, and your contributions to this list are welcome.\r\n\r\nPlease stay tuned - this issue is on our roadmap.\r\n",
        "createdAt": "2024-06-18T15:02:32Z",
        "updatedAt": "2024-06-18T15:02:32Z",
        "author": {
          "login": "YuliiaKovalova"
        }
      },
      {
        "body": "Hi @YuliiaKovalova,\r\nThanks, and it would be great if the MSBuildLocator could handle Nuget.Framework loading. That said, MSBuild also need to have some changes because of the code I linked :) So we have control of where and what is loaded into ALC's",
        "createdAt": "2024-07-02T07:40:07Z",
        "updatedAt": "2024-07-02T07:40:07Z",
        "author": {
          "login": "hknielsen"
        }
      },
      {
        "body": "@YuliiaKovalova as this is going to be a breaking change, is there any chance this will be in MSBuild that will follow the net9 timeline? (since this needs msbuild changes as well).",
        "createdAt": "2024-09-18T07:17:29Z",
        "updatedAt": "2024-09-18T07:17:29Z",
        "author": {
          "login": "hknielsen"
        }
      },
      {
        "body": "Hi @hknielsen,\r\n\r\nWe will triage this ticket and I will let you know the priority of it.\r\nStay tuned! ",
        "createdAt": "2024-09-18T07:36:32Z",
        "updatedAt": "2024-09-18T07:36:32Z",
        "author": {
          "login": "YuliiaKovalova"
        }
      },
      {
        "body": "Hi @hknielsen,\r\n\r\nI've thoroughly investigated this ticket and identified that the root cause is related to the **runtime's** assembly loading mechanism. To illustrate the issue, I've prepared a sample project which I'll attach to this ticket.\r\nHere's a breakdown of the situation:\r\n\r\n1. The main project targets .NET 9.0 and loads NuGet.Frameworks.dll from the SDK folder.\r\n2. ProjectCreator has a dependency on an older version of NuGet.Frameworks.dll than the one already loaded in the Assembly Load Context (ALC);\r\n![{C6A7784F-13A2-48B2-9C6E-2166C46335CD}](https://github.com/user-attachments/assets/ed41032e-95c2-4b15-a1ca-abf9b861847e)\r\n\r\n3. The runtime detects a NuGet.Frameworks.dll assembly in the bin folder adjacent to the executable. Consequently, it attempts to load this version instead of the one from the SDK folder ON PROJECT CREATION.\r\n\r\nThis conflict in assembly versions leads to the observed issue.\r\nAs a workaround, it's possible to catch the assembly resolution attempt and return it:\r\n\r\n```\r\n        AppDomain.CurrentDomain.AssemblyResolve += (sender, eventArgs) =>\r\n        {\r\n            var assemblyName = new AssemblyName(eventArgs.Name);\r\n\r\n            var loadedAssembly = AppDomain.CurrentDomain.GetAssemblies().FirstOrDefault(a => a.GetName().Name == assemblyName.Name);\r\n\r\n            if (loadedAssembly != null)\r\n            {\r\n                return loadedAssembly;\r\n            }\r\n\r\n            return null;\r\n        };\r\n```\r\n[repro_sample.zip](https://github.com/user-attachments/files/17194952/repro_sample.zip)\r\n\r\nPlease let us know if this workaround helps. We're documenting restrictions for such libraries as part of https://github.com/dotnet/msbuild/issues/10213.\r\n",
        "createdAt": "2024-09-30T19:03:10Z",
        "updatedAt": "2024-09-30T19:03:10Z",
        "author": {
          "login": "YuliiaKovalova"
        }
      },
      {
        "body": "@YuliiaKovalova it does not work, at least not for our test projects. I think it might be related that its tests and the test system's load in all the assemblies thats in the build folder?\r\nI tried both NUnit and XUnit, with their adapters, and in both cases I cant get it to work.\r\nLet me know if theres other things I can try :)",
        "createdAt": "2024-10-01T08:32:26Z",
        "updatedAt": "2024-10-01T08:39:13Z",
        "author": {
          "login": "hknielsen"
        }
      },
      {
        "body": "Yeah confirmed its loaded before the test runs, and even setting up a `ModuleInitializer` to setup the `AssemblyResolve` its been loaded.",
        "createdAt": "2024-10-01T08:50:47Z",
        "updatedAt": "2024-10-01T08:50:47Z",
        "author": {
          "login": "hknielsen"
        }
      },
      {
        "body": "@YuliiaKovalova This repro gives the exact error that I run into;\r\n[TestProject1.zip](https://github.com/user-attachments/files/17202436/TestProject1.zip)\r\n\r\nI didnt add the AssemblyResolve, but adding it does not help.\r\nAs you can see we use net8, but that should not make any difference I would think, in this case.\r\n",
        "createdAt": "2024-10-01T09:05:11Z",
        "updatedAt": "2024-10-01T09:05:11Z",
        "author": {
          "login": "hknielsen"
        }
      },
      {
        "body": "I see your problem.\r\n\r\nIn the meantime, I have checked that reference to Nuget.Frameworks was removed from MSBuild.ProjectCreation starting from version 11.0.0\r\nhttps://github.com/jeffkl/MSBuildProjectCreator/compare/v10.0.0...v11.0.0\r\n\r\nCould you upgrade the version of this package ? \r\nFor me MSBuild.ProjectCreation v13.0.0 works fine.",
        "createdAt": "2024-10-01T09:35:31Z",
        "updatedAt": "2024-10-01T09:35:31Z",
        "author": {
          "login": "YuliiaKovalova"
        }
      },
      {
        "body": "Upgrading that, then I need to also update the `Microsoft.Build` - tried that, but then have the same issue as `Microsoft.NET.Test.Sdk` package also have a dependency on `NuGet.Frameworks`",
        "createdAt": "2024-10-01T10:41:39Z",
        "updatedAt": "2024-10-01T10:41:39Z",
        "author": {
          "login": "hknielsen"
        }
      },
      {
        "body": "Oh wait, upgrading that as that also has removed that dependency, let me try on our real project",
        "createdAt": "2024-10-01T10:47:00Z",
        "updatedAt": "2024-10-01T10:47:00Z",
        "author": {
          "login": "hknielsen"
        }
      },
      {
        "body": "@YuliiaKovalova that worked! Tests on various IDE's and computers, with various dotnet sdk's. Thanks for the help, this so nice to get solved :)",
        "createdAt": "2024-10-03T12:53:50Z",
        "updatedAt": "2024-10-03T12:53:50Z",
        "author": {
          "login": "hknielsen"
        }
      },
      {
        "body": "@hknielsen thank you for updates! I am sure this discussion will be useful for other customers too.\r\n\r\nHave a nice day!",
        "createdAt": "2024-10-03T12:59:42Z",
        "updatedAt": "2024-10-03T12:59:42Z",
        "author": {
          "login": "YuliiaKovalova"
        }
      }
    ]
  }
}