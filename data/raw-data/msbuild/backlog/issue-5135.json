{
  "number": 5135,
  "title": "Reference of reference of references are not copied (Missing assemblies).",
  "body": "### Steps to reproduce\r\n\r\nSee attached zipped project. \r\n[MsbuildIssue.zip](https://github.com/microsoft/msbuild/files/4226845/MsbuildIssue.zip)\r\n\r\nWhen a project library, say `LibraryA`, references external packages, say `Microsoft.Extensions.Logging.Console` and another library reference `LibraryA`, `LibraryB` and an application references `LibraryB`, some referenced assemblies are not copied over and thus, the application cannot run.\r\n\r\n### MSBuild Command\r\n\r\n`msbuild MsbuildIssue.sln` or build it in Visual Studio 2019.\r\n\r\n### Expected behavior\r\n These assemblies to be found in the folder of the application.\r\n\r\n- Microsoft.Win32.Primitives.dll\r\n- Microsoft.Bcl.AsyncInterfaces.dll\r\n- Microsoft.Bcl.AsyncInterfaces.xml\r\n- Microsoft.Extensions.Configuration.Abstractions.dll\r\n- Microsoft.Extensions.Configuration.Abstractions.xml\r\n- Microsoft.Extensions.Configuration.Binder.dll\r\n- Microsoft.Extensions.Configuration.Binder.xml\r\n- Microsoft.Extensions.Configuration.dll\r\n- Microsoft.Extensions.Configuration.xml\r\n- Microsoft.Extensions.DependencyInjection.Abstractions.dll\r\n- Microsoft.Extensions.DependencyInjection.Abstractions.xml\r\n- Microsoft.Extensions.DependencyInjection.dll\r\n- Microsoft.Extensions.DependencyInjection.xml\r\n- Microsoft.Extensions.Logging.Abstractions.dll\r\n- Microsoft.Extensions.Logging.Abstractions.xml\r\n- Microsoft.Extensions.Logging.Configuration.dll\r\n- Microsoft.Extensions.Logging.Configuration.xml\r\n- Microsoft.Extensions.Logging.Console.dll\r\n- Microsoft.Extensions.Logging.Console.xml\r\n- Microsoft.Extensions.Logging.dll\r\n- Microsoft.Extensions.Logging.xml\r\n- Microsoft.Extensions.Options.ConfigurationExtensions.dll\r\n- Microsoft.Extensions.Options.ConfigurationExtensions.xml\r\n- Microsoft.Extensions.Options.dll\r\n- Microsoft.Extensions.Options.xml\r\n- Microsoft.Extensions.Primitives.dll\r\n- Microsoft.Extensions.Primitives.xml\r\n\r\n### Actual behavior\r\nOnly these assemblies are available.\r\n\r\n- Microsoft.Bcl.AsyncInterfaces.dll\r\n- Microsoft.Bcl.AsyncInterfaces.xml\r\n- Microsoft.Extensions.DependencyInjection.Abstractions.dll\r\n- Microsoft.Extensions.DependencyInjection.Abstractions.xml\r\n- Microsoft.Extensions.DependencyInjection.dll\r\n- Microsoft.Extensions.DependencyInjection.xml\r\n- Microsoft.Extensions.Logging.Abstractions.dll\r\n- Microsoft.Extensions.Logging.Abstractions.xml\r\n- Microsoft.Extensions.Logging.Console.dll\r\n- Microsoft.Extensions.Logging.Console.xml\r\n- Microsoft.Extensions.Logging.dll\r\n- Microsoft.Extensions.Logging.xml\r\n- Microsoft.Extensions.Options.dll\r\n- Microsoft.Extensions.Options.xml\r\n- netstandard.dll\r\n\r\nThe application crash at runtime because of this:\r\n```\r\nSystem.IO.FileNotFoundException: 'Could not load file or assembly 'Microsoft.Extensions.Logging.Configuration, Version=3.1.2.0, Culture=neutral, PublicKeyToken=adb9793829ddae60' or one of its dependencies. The system cannot find the file specified.'\r\n```\r\n\r\n### Environment data\r\n`msbuild /version` output:\r\n\r\n```text\r\nMicrosoft (R) Build Engine version 16.4.0+e901037fe for .NET Framework\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n16.4.0.56107\r\n```\r\n\r\nOS info:\r\n\r\nWindows 10 Pro Build 18362.592\r\n\r\nIf applicable, version of the tool that invokes MSBuild (Visual Studio, dotnet CLI, etc):\r\n\r\nVisual Studio 2019 16.4.2\r\n",
  "state": "OPEN",
  "createdAt": "2020-02-19T19:08:02Z",
  "updatedAt": "2024-02-21T16:29:52Z",
  "closedAt": null,
  "author": {
    "login": "Thoorium"
  },
  "labels": [
    "Area: Common Targets",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Backlog"
  },
  "comments": {
    "nodes": [
      {
        "body": "A small update: This problem happens on .Net Framework 4.6.1 (maybe up to 4.8, didn't test) but it works fine with .Net Core projects.",
        "createdAt": "2020-02-25T15:36:12Z",
        "updatedAt": "2020-02-25T15:36:12Z",
        "author": {
          "login": "Thoorium"
        }
      },
      {
        "body": "I am on .Net Core and I have the same problem..",
        "createdAt": "2020-02-28T12:57:34Z",
        "updatedAt": "2020-02-28T12:57:34Z",
        "author": {
          "login": "Franz333"
        }
      },
      {
        "body": "Same shit here",
        "createdAt": "2020-03-04T23:47:35Z",
        "updatedAt": "2020-03-04T23:47:35Z",
        "author": {
          "login": "solay"
        }
      },
      {
        "body": "If you're seeing this problem on .NET Core (@Franz333), please file a new issue with a repro project. The repro from @Thoorium looks specific to targeting .NET Framework.\r\n\r\nIn that repro, LibraryA has references to NuGet packages with .NET Standard 2.0 assemblies. In LibraryA's build, the target `ImplicitlyExpandNETStandardFacades` notices the direct reference to a netstandard-targeted assembly and includes the .NET Standard \"fa\u00e7ade\" assemblies to be copied to the output directory. That's the desired behavior.\r\n\r\nLibraryB and ApplicationC do not _directly_ reference any .NET Standard assemblies; they reference only each other through `ProjectReference`. Since `ImplicitlyExpandNETStandardFacades` runs before `ResolveAssemblyReference` completes the closure of referenced assemblies, it applies only to _direct_ references, and does not copy the facades to the output directory.\r\n\r\nThere's a workaround for this situation: set the property `DependsOnNETStandard` on the final output project(s). For example,\r\n\r\n```diff\r\ndiff --git a/ApplicationC/ApplicationC.csproj b/ApplicationC/ApplicationC.csproj\r\nindex e1d8c90..3955791 100644\r\n--- a/ApplicationC/ApplicationC.csproj\r\n+++ b/ApplicationC/ApplicationC.csproj\r\n@@ -12,6 +12,7 @@\r\n     <FileAlignment>512</FileAlignment>\r\n     <AutoGenerateBindingRedirects>true</AutoGenerateBindingRedirects>\r\n     <Deterministic>true</Deterministic>\r\n+    <DependsOnNETStandard>true</DependsOnNETStandard>\r\n   </PropertyGroup>\r\n   <PropertyGroup Condition=\" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' \">\r\n     <PlatformTarget>AnyCPU</PlatformTarget>\r\n```\r\n\r\n@dsplaisted, do you think we consider this an SDK bug?",
        "createdAt": "2020-03-18T16:30:06Z",
        "updatedAt": "2020-03-18T16:30:06Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Getting this error over here for `Microsoft.Extensions.Primitives.dll`. `<DependsOnNETStandard>true</DependsOnNETStandard>` didn't help. Got it working adding `<AutoGenerateBindingRedirects>true</AutoGenerateBindingRedirects>`.",
        "createdAt": "2020-07-13T22:04:57Z",
        "updatedAt": "2020-07-13T22:11:14Z",
        "author": {
          "login": "jrocha"
        }
      },
      {
        "body": "Is there a proper solution to this yet? I am hitting this with .Net framework 4.7 and if I add in the suggested line above it appears to negate the action of binding redirects.\r\nThis is quite a common pattern in development as one might have a solution that is for a Windows service, but you want to have a console project too for dev. So having two projects referencing only a single \"entrypoint\" project is a common way of handling this. This bug prevents you from setting up projects in this way.",
        "createdAt": "2020-12-17T22:05:29Z",
        "updatedAt": "2020-12-17T22:05:29Z",
        "author": {
          "login": "AndrewFWolfe"
        }
      }
    ]
  }
}