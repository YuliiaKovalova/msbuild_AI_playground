{
  "number": 4738,
  "title": "Create Map for string reflection in Expander.cs",
  "body": "Currently works by a series of if/else if statements (linear search). Storing these data in a map from function name to function would make it more efficient to access any particular string name, and the corresponding function can be taken from it afterwards. It would be good to try a few types of maps (based on hashing, based on a tree, etc.) to find which is optimal.\r\n\r\nSomething like:\r\nTreeMap<string, fun> map = new TreeMap<string, fun>();\r\nmap.Put(\"copy\", string.Copy);\r\n...\r\nif (TryGetArg(args, out string arg0))\r\n{\r\n    func = map.Get(_methodMethodName);\r\n    returnVal = func(arg0);\r\n    return true;\r\n}\r\n\r\nThis is a further optimization I recommended in #4731 ",
  "state": "CLOSED",
  "createdAt": "2019-09-17T17:17:04Z",
  "updatedAt": "2024-02-21T17:07:04Z",
  "closedAt": "2019-09-17T17:52:45Z",
  "author": {
    "login": "Forgind"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Duplicate of #2217",
        "createdAt": "2019-09-17T17:52:45Z",
        "updatedAt": "2019-09-17T17:52:45Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "This is a good idea but substantially more complicated than described because we need to dispatch based not just on extracted function name but also argument types. #2217 describes the problem in detail.",
        "createdAt": "2019-09-17T17:53:53Z",
        "updatedAt": "2019-09-17T17:53:53Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I admit mine was something of a toy example for exactly the reason you described, but it would not be unduly complicated to either split first by argument or take the function that comes out of the map, access its parameters and their types, and search for arguments accordingly. I also don't see how it's closely related to #2217, since that focuses more on fixing big problems in certain places rather than a small but global improvement.",
        "createdAt": "2019-09-17T23:42:58Z",
        "updatedAt": "2019-09-17T23:42:58Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "Unless this starts showing up in profiles as a hot area, I'd prefer to avoid making the implementation more complex for theoretical gains, since the whole thing should be deleted with a systematic fix to #2217. Right now property-function calls are only an observable problem when calling methods that aren't in the \"fast path\" list; lookups in that list don't seem to be important.",
        "createdAt": "2019-09-18T14:43:17Z",
        "updatedAt": "2019-09-18T14:43:17Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}