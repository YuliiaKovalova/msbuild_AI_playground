{
  "number": 10628,
  "title": "[Bug]: Enabling msbuild engine logging can cause EndBuild to fail",
  "body": "### Issue Description\r\n\r\nThis was encountered while investigating an issue where design time builds were very slow. It turns out, EndBuild failed, leaving the DTBB service in an invalid state, causing CPS based projects to fallback to the slower, legacy build pipeline.\r\n\r\nThe DTBB service is being improved to better handle EndBuild throwing exceptions. However, this exception may still be thrown. Also, repeated opening and closing of the file may be less performant than keeping the file opened, and could be locked by the antivirus.\r\n\r\nFor more details, please refer to the internal devdiv item AB#2235125\r\n\r\n```\r\nException object: 000002225a4a7658\r\nException type:   System.IO.IOException\r\nMessage:          The process cannot access the file 'C:\\Temp\\msbuild\\SchedulerState_57780.txt' because it is being used by another process.\r\nInnerException:   <none>\r\nStackTrace (generated):\r\n    SP               IP               Function\r\n    000000B2140BE830 00007FFABC760917 mscorlib_ni!System.IO.__Error.WinIOError(Int32, System.String)+0x3a7\r\n    000000B2140BE880 00007FFABC7B165F mscorlib_ni!System.IO.FileStream.Init(System.String, System.IO.FileMode, System.IO.FileAccess, Int32, Boolean, System.IO.FileShare, Int32, System.IO.FileOptions, SECURITY_ATTRIBUTES, System.String, Boolean, Boolean, Boolean)+0x42f\r\n    000000B2140BE950 00007FFABC7FFCB4 mscorlib_ni!System.IO.FileStream..ctor(System.String, System.IO.FileMode, System.IO.FileAccess, System.IO.FileShare, Int32, System.IO.FileOptions)+0x84\r\n    000000B2140BEA00 00007FFA099393C8 Microsoft_Build_ni!Microsoft.Build.Shared.FileUtilities.OpenWrite(System.String, Boolean, System.Text.Encoding)+0x58\r\n    000000B2140BEA60 00007FFA099730D2 Microsoft_Build_ni!Microsoft.Build.BackEnd.Scheduler.DumpSchedulerState()+0xe2\r\n    000000B2140BEB60 00007FFA09972324 Microsoft_Build_ni!Microsoft.Build.BackEnd.Scheduler.ScheduleUnassignedRequests(System.Collections.Generic.List`1<Microsoft.Build.BackEnd.ScheduleResponse>)+0x434\r\n    000000B2140BEBE0 00007FFA09976295 Microsoft_Build_ni!Microsoft.Build.BackEnd.Scheduler.ReportResult(Int32, Microsoft.Build.Execution.BuildResult)+0x255\r\n    000000B2140BEC80 00007FFA099693AC Microsoft_Build_ni!Microsoft.Build.Execution.BuildManager.HandleResult(Int32, Microsoft.Build.Execution.BuildResult)+0xfc\r\n    000000B2140BED10 00007FFA09968890 Microsoft_Build_ni!Microsoft.Build.Execution.BuildManager.ProcessPacket(Int32, Microsoft.Build.BackEnd.INodePacket)+0xf0\r\n    000000B2140BED80 00007FFA09965F9E Microsoft_Build_ni!Microsoft.Build.Execution.BuildManager.ProcessWorkQueue(System.Action)+0x9e\r\n    000000B2135BE310 00007FFABD145040 mscorlib_ni!System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()+0x20\r\n    000000B2135BE340 00007FFA09967E31 Microsoft_Build_ni!Microsoft.Build.Execution.BuildManager.EndBuild()+0x4b1\r\n    000000B2135BE4C0 00007FFA233237F1 Microsoft_VisualStudio_ProjectServices_ni!Microsoft.VisualStudio.ProjectServices.BuildManagerAdapter.Microsoft.VisualStudio.ProjectServices.IBuildManager.EndBuildAsync()+0x11\r\n    000000B2135BE4F0 00007FFA2334C258 Microsoft_VisualStudio_ProjectServices_ni!Microsoft.VisualStudio.ProjectServices.DesignTimeBuildScheduler+<EndBuildAsync>d__40.MoveNext()+0x48\r\n    000000B2135BE600 00007FFABD145040 mscorlib_ni!System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()+0x20\r\n    000000B2135BE630 00007FFABC80D66E mscorlib_ni!System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(System.Threading.Tasks.Task)+0x3e\r\n    000000B2135BE660 00007FFA2334CBF0 Microsoft_VisualStudio_ProjectServices_ni!Microsoft.VisualStudio.ProjectServices.DesignTimeBuildScheduler+<SubmitNextAsync>d__59.MoveNext()+0x140\r\n    000000B2135BE820 00007FFABD145040 mscorlib_ni!System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()+0x20\r\n    000000B2135BE850 00007FFA2334C49C Microsoft_VisualStudio_ProjectServices_ni!Microsoft.VisualStudio.ProjectServices.DesignTimeBuildScheduler+<FeedMSBuildAsync>d__58.MoveNext()+0xfc\r\n    000000B2135BE960 00007FFABD145040 mscorlib_ni!System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()+0x20\r\n    000000B2135BE990 00007FFABC80D66E mscorlib_ni!System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(System.Threading.Tasks.Task)+0x3e\r\n    000000B2135BE9C0 00007FFA2334B60F Microsoft_VisualStudio_ProjectServices_ni!Microsoft.VisualStudio.ProjectServices.DesignTimeBuildScheduler+<CompleteOneAsync>d__53.MoveNext()+0x19f\r\n```\r\n\r\n### Steps to Reproduce\r\n\r\nNo repro, for dump please refer to internal devdiv item 2235125\r\n\r\n### Expected Behavior\r\n\r\nThis method should not cause EndBuild to fail.\r\n\r\n### Actual Behavior\r\n\r\nEndBuild fails, leading to DTBB Service in invalid state (that issue is being fixed on the DTBB side)\r\n\r\n### Analysis\r\n\r\n_No response_\r\n\r\n### Versions & Configurations\r\n\r\n_No response_",
  "state": "CLOSED",
  "createdAt": "2024-09-07T02:04:35Z",
  "updatedAt": "2024-09-25T14:14:09Z",
  "closedAt": "2024-09-25T14:14:06Z",
  "author": {
    "login": "adrianvmsft"
  },
  "labels": [
    "bug",
    "Priority:2",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "rainersigwald"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "> Also, repeated opening and closing of the file may be less performant than keeping the file opened\r\n\r\nIt is more robust to crashing, though, which I think is why this was decided long ago.\r\n\r\nI agree that this logging should be best-effort and not cause a crash.",
        "createdAt": "2024-09-09T15:33:34Z",
        "updatedAt": "2024-09-09T15:33:34Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Is this logging to the file logger? Why not a binlog instead?",
        "createdAt": "2024-09-09T15:53:54Z",
        "updatedAt": "2024-09-09T15:53:54Z",
        "author": {
          "login": "baronfel"
        }
      },
      {
        "body": "This is engine/scheduler-state logging that is also enabled with MSBUILDDEBUGENGINE. Which we should maybe reconsider, it is rarely useful even to us.",
        "createdAt": "2024-09-09T15:59:38Z",
        "updatedAt": "2024-09-09T15:59:38Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> This is engine/scheduler-state logging that is also enabled with MSBUILDDEBUGENGINE. Which we should maybe reconsider, it is rarely useful even to us.\r\n\r\n#10639",
        "createdAt": "2024-09-10T14:23:40Z",
        "updatedAt": "2024-09-10T14:23:40Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Fixed with #10642.",
        "createdAt": "2024-09-25T14:14:06Z",
        "updatedAt": "2024-09-25T14:14:06Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}