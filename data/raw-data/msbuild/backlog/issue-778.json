{
  "number": 778,
  "title": "Microsoft.AppxPackage.Targets causes build failures",
  "body": "**Customer reported the following issue:**\n\nDescription: When attempting to run a build using MSBuild in a batch file, projects are failing due to the following exception: \n\n```\nC:\\Program Files (x86)\\MSBuild\\Microsoft\\VisualStudio\\v14.0\\AppxPackage\\Microsoft.AppXPackage.Targets(283,22): error MSB4086: A numeric comparison was attempted on \"10.0.11000.0\" that evaluates to \"10.0.11000.0\" instead of a number, in condition \"'$(TargetPlatformVersion)' >= '10.0.11000.0'\". [MyProject.csproj] \n```\n\n This appears to be caused by the following segment within Microsoft.AppXPackage.Targets: \n\n``` XML\n <PropertyGroup> \n <SdkIsRS1OrLater>False</SdkIsRS1OrLater> \n <SdkIsRS1OrLater Condition=\"'$(TargetPlatformVersion)' &gt;= '10.0.11000.0'\">True</SdkIsRS1OrLater> \n </PropertyGroup> \n```\n\nSwitching the VisualStudioVersion flag in the batch file from 14.0 to 12.0 causes this batch file to build successfully. Additionally, it was running fine with 14.0 prior to the upgrade to Update 3. \n\n Strangely, this appears to build fine when running directly inside Visual Studio. \n\n Visual Studio Version: 14.0.25421.03 \n\n Repro Steps:Create a batch file with the following script. When running the build, the error will surface. \n\n```\n @echo off \n set CLRHome=%SystemRoot%\\Microsoft.NET\\Framework\\v4.0.30319 \n set MSTestDir=%vs140comnTools%..\\IDE \n Set VisualStudioVersion=14.0 \n set Path=%Path%;%CLRHome%;%MSTestDir% \n\n MSBuild ./LocalBuild.proj /v:m /clp:Summary; /m:%multiCore% /nr:False /nologo \n```\n\nImpact: Builds are unable to run with ToolsVersion 14.0. Any developer running exclusively 2015 updating to Update 3 will be unable to build the solutions from the batch files.\n",
  "state": "CLOSED",
  "createdAt": "2016-07-12T22:34:06Z",
  "updatedAt": "2024-02-21T17:27:07Z",
  "closedAt": "2016-11-17T17:04:30Z",
  "author": {
    "login": "Sarabeth-Jaffe-Microsoft"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Starting point: investigate changes on Property functions before/after Dev14 Update 3.\n",
        "createdAt": "2016-07-12T22:35:34Z",
        "updatedAt": "2016-07-12T22:35:34Z",
        "author": {
          "login": "Sarabeth-Jaffe-Microsoft"
        }
      },
      {
        "body": "I have attached a sample application that is seeing this issue. With VS2015 Update 3 installed, execute RunLocalBuild.cmd within the solution folder.\n\nCommenting the line in the .targets file (noted above) stops this issue occurring.\n\n[DemoApp1.zip](https://github.com/Microsoft/msbuild/files/361465/DemoApp1.zip)\n",
        "createdAt": "2016-07-13T12:36:19Z",
        "updatedAt": "2016-07-13T12:36:19Z",
        "author": {
          "login": "ObsidianPhoenix"
        }
      },
      {
        "body": "I have also encountered this with the following simple repro steps:\n1. Create a UWP app in Visual Studio\n2. Load the unmodified .csproj file using the constructor for `Microsoft.Build.Evaluation.Project` which takes a string for file name\n3. Observe the exception\n",
        "createdAt": "2016-07-20T15:20:02Z",
        "updatedAt": "2016-07-20T16:08:51Z",
        "author": {
          "login": "vchelaru"
        }
      },
      {
        "body": "@vchelaru How are you referencing MSBuild in the project that builds the code in which you do the project load? Do the references point to version `14.0`, or `4.0`?\n\nThere are two copies of MSBuild on most machines--one (4.0) installed with the .NET Framework (removing it would be a breaking change in the framework, so we leave it there, stale), and one (14.0) installed with Visual Studio or the Build Tools installer. New functionality is available only in the up-to-date assembly, and version-number comparisons were added in the 12.0 timeframe (I think).\n",
        "createdAt": "2016-07-20T15:28:43Z",
        "updatedAt": "2016-07-20T15:28:43Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald thanks so much for taking the time to respond.\n\nI am referencing the following assembly:\n\n```\nAssembly Microsoft.Build, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\n// C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.6\\Microsoft.Build.dll\n```\n\nSo you're saying that I could reference the .dll that comes with Visual Studio to work around this issue? If so, does that mean I will have to distribute the .dll with my app? I can't count on users of my app to have VS installed, so I can't use the VS-installed version in its install location.\n",
        "createdAt": "2016-07-20T15:37:31Z",
        "updatedAt": "2016-07-20T15:38:01Z",
        "author": {
          "login": "vchelaru"
        }
      },
      {
        "body": "@vchelaru That is a stale version of MSBuild. To understand UWP projects within your app, you'll have to use the newer binaries. To get MSBuild 14.0 installed, you can use the [Build Tools 2015 Update 3](https://go.microsoft.com/fwlink/?LinkId=615458) installer--you don't have to have all of VS installed.\n\nRight now, that installer is the only way to get MSBuild installed. For the next release, we should have official NuGet packages that you could consume.\n",
        "createdAt": "2016-07-20T18:46:15Z",
        "updatedAt": "2016-07-20T18:46:15Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Just to confirm, this _does_ appear to be an MSBuild version issue. If I replace the top of the batch file from \n\n```\n@echo off \nset CLRHome=%SystemRoot%\\Microsoft.NET\\Framework\\v4.0.30319 \nset MSTestDir=%vs140comnTools%..\\IDE \nSet VisualStudioVersion=14.0 \nset Path=%Path%;%CLRHome%;%MSTestDir% \n\nMSBuild ./LocalBuild.proj /v:m /clp:Summary; /m:%multiCore% /nr:False /nologo \n```\n\nto \n\n```\n@echo off\ncall \"%vs140comnTools%\\VsDevCmd.bat\"\n\nMSBuild ./LocalBuild.proj /v:m /clp:Summary; /m:%multiCore% /nr:False /nologo \n```\n\nThis problem resolves.\n",
        "createdAt": "2016-07-21T13:11:22Z",
        "updatedAt": "2016-07-21T13:11:22Z",
        "author": {
          "login": "ObsidianPhoenix"
        }
      },
      {
        "body": "Hello,\n\nWe're also repo'ing this in our area; to work around it we've commented out Line 283 in Microsoft.AppxPackage.Targets:\n\n`<!--<SdkIsRS1OrLater Condition=\"'$(TargetPlatformVersion)' &gt;= '10.0.11000.0'\">True</SdkIsRS1OrLater>-->`\n\nThank you\n",
        "createdAt": "2016-07-21T14:14:39Z",
        "updatedAt": "2016-07-21T14:14:39Z",
        "author": {
          "login": "aolszowka"
        }
      },
      {
        "body": "I fixed this by specifying `ToolsVersion=\"14.0\"` in the .csproj, rather than some old `4.0` or `12.0` I had on some projects.\n",
        "createdAt": "2016-08-01T22:00:01Z",
        "updatedAt": "2016-08-01T22:00:01Z",
        "author": {
          "login": "kzu"
        }
      },
      {
        "body": "Are there any updates to this? we are currently dealing with a broken TFS 2012 build server due to this.\n\nWe have a Xamarin PCL project with UWP, WinPhone (8.0, Silverlight) & Android projects.\n\nIf I don't set the tools version, I get this error in the UWP project.\n\nC:\\Program Files (x86)\\MSBuild\\Microsoft\\WindowsXaml\\v14.0\\Microsoft.Windows.UI.Xaml.Common.targets (6): A numeric comparison was attempted on \"$(TargetPlatformMinVersion)\" that evaluates to \"10.0.10240.0\" instead of a number, in condition \"'$(TargetPlatformIdentifier)' == 'UAP' And '$(TargetPlatformMinVersion)' != '' And '$(TargetPlatformMinVersion)' > '10.0.10587.0'\".\n\nIf I set the tools version (/tv:14.0) I get the following (x4) as well as the one above.\n\nC:\\Program Files (x86)\\MSBuild\\Microsoft\\VisualStudio\\v14.0\\AppxPackage\\Microsoft.AppXPackage.Targets (283): A numeric comparison was attempted on \"10.0.11000.0\" that evaluates to \"10.0.11000.0\" instead of a number, in condition \"'$(TargetPlatformVersion)' >= '10.0.11000.0'\".\n\nHas anyone actually got this working on a build server?\n\nWe have actually ended up trying to install VS2015 on the build server, but this still doesn't work, as well as installing the MSBuild tools update 3 from the link above.\n",
        "createdAt": "2016-09-20T04:29:57Z",
        "updatedAt": "2016-09-20T04:29:57Z",
        "author": {
          "login": "StacyHenwood"
        }
      },
      {
        "body": "@StacyHenwood If you are using v14 of the tools you must use MSBuild v14 (ie the one from the Visual Studio 14.0 tools folder) to build your solution.\n\nI suspect your TFS Build server will either be using MSBuild v12 from Visual Studio 12.0 tools folder or v4.x from the .net framework. I don't recall how this is controlled for your build but it might the the ToolPath property.\n",
        "createdAt": "2016-09-20T09:46:37Z",
        "updatedAt": "2016-09-20T09:46:37Z",
        "author": {
          "login": "Nyami"
        }
      },
      {
        "body": "@Nyami Thanks for the information. That's what I thought I was doing, by setting the /tv:14.0 and /p:VisualStudioVersion=14 settings in the MSBuild parameters in the build template (TfvsTemplate.12.xaml). Note that this template does not have a ToolsPath option, so I cant just update it there.\n\nWhen I look in the logs I see some very strange things. \n\nNear the start I see the following:\nRun optional script before MSBuild\n  MSBuild auto-detection: using msbuild version '14.0' from 'C:\\Program Files (x86)\\MSBuild\\14.0\\bin'.\n\nBut further on, where the errors are, I see this (note: wrong tools version):\nRun MSBuild\n  C:\\Program Files (x86)\\MSBuild\\12.0\\bin\\MSBuild.exe /nologo /noconsolelogger \"C:\\Builds\\2[SNIP]\n\nMy google-fu must be weak today, because I cannot find out how to make the build server use the correct version of the tools with that template. \n",
        "createdAt": "2016-09-21T00:14:45Z",
        "updatedAt": "2016-09-21T00:14:45Z",
        "author": {
          "login": "StacyHenwood"
        }
      },
      {
        "body": "I think the path for MSBuild will be set on the \"Run MSBuild\" activity within TfvsTemplate.12.xaml, if this is the case you should update the template.\n\nedit: My google-fu appears to be strong today.. http://stackoverflow.com/a/32262541/802228\n",
        "createdAt": "2016-09-21T07:55:25Z",
        "updatedAt": "2016-09-21T07:58:08Z",
        "author": {
          "login": "Nyami"
        }
      },
      {
        "body": "@Nyami I have previously looked at that stackoverflow article, and discovered that it is not using the TfvcTemplate.12.xaml template - it is using an older one, and the parameters have changed significantly.\n\nThe TfvcTemplate.12.xaml template does not have the ToolPath parameter within the Run MSBuild parameter.\n\nI appreciate your continued help.\n",
        "createdAt": "2016-09-21T20:39:29Z",
        "updatedAt": "2016-09-21T20:39:29Z",
        "author": {
          "login": "StacyHenwood"
        }
      },
      {
        "body": "Ok, so I have managed to get the correct version of MSBuild to run in my builds. \n\nIts definitely a hack, but its the only way I could get this to work properly.\n\nI have changed the following Registry keys:\n\n```\nHKLM\\SOFTWARE\\Wow6432Node\\Microsoft\\MSBuild\\12.0\\MSBuildOverrideTasksPath\nHKLM\\SOFTWARE\\Wow6432Node\\Microsoft\\MSBuild\\ToolsVersions\\12.0\\MSBuildToolsPath\n```\n\nfrom: \n`C:\\Program Files (x86)\\MSBuild\\12.0\\bin\\`\n\nto: \n`C:\\Program Files (x86)\\MSBuild\\14.0\\bin\\`\n\nI realise that this is most definitely not going to be the recommended way of doing this, but there seems to be no way of forcing TFSBuild to use the correct version any other way. \n",
        "createdAt": "2016-09-22T02:05:40Z",
        "updatedAt": "2016-09-22T02:05:40Z",
        "author": {
          "login": "StacyHenwood"
        }
      },
      {
        "body": "What is the status of this - is it still work in progress? Still experiencing this issue with VS15 Update 3, and have managed to resolve by commenting out line 283 in Microsoft.AppxPackage.Targets as per a previous recommendation.\n",
        "createdAt": "2016-10-05T02:49:29Z",
        "updatedAt": "2016-10-05T02:49:29Z",
        "author": {
          "login": "develohpanda"
        }
      },
      {
        "body": "Closing this as there's nothing more we can do from our side. The entry-point MSBuild must be a new enough MSBuild.\n",
        "createdAt": "2016-11-17T17:04:30Z",
        "updatedAt": "2016-11-17T17:04:30Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}