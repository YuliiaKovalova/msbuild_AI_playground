{
  "number": 7108,
  "title": "CodeTaskFactory can cause later task failures by loading a redundant copy of Microsoft.Build.Framework",
  "body": "This was reported and investigated (thanks!) offline by @KevinRansom.\r\n\r\nThe F# build failed when built with 64-bit MSBuild, with a failure like this:\r\n\r\n```\r\nerror MSB4018: The \"GetPackOutputItemsTask\" task failed unexpectedly. [S:\\fsharp\\src\\fsharp\\FSharp.Core\\FSharp.Core.fsproj]\r\nerror MSB4018: System.ArrayTypeMismatchException: Attempted to access an element as a type incompatible with the array. [S:\\fsharp\\src\\fsharp\\FSharp.Core\\FSharp.Core.fsproj]\r\nerror MSB4018:    at System.Collections.Generic.List`1.Add(T item) [S:\\fsharp\\src\\fsharp\\FSharp.Core\\FSharp.Core.fsproj]\r\nerror MSB4018:    at NuGet.Build.Tasks.Pack.GetPackOutputItemsTask.Execute() [S:\\fsharp\\src\\fsharp\\FSharp.Core\\FSharp.Core.fsproj]\r\nerror MSB4018:    at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute() [S:\\fsharp\\src\\fsharp\\FSharp.Core\\FSharp.Core.fsproj]\r\nerror MSB4018:    at Microsoft.Build.BackEnd.TaskBuilder.<ExecuteInstantiatedTask>d__26.MoveNext() [S:\\fsharp\\src\\fsharp\\FSharp.Core\\FSharp.Core.fsproj]\r\n```\r\n\r\nDebugging revealed that multiple copies of `Microsoft.Build.Framework.dll` were loaded--one from the `MSBuild\\bin` directory, and one from `MSBuild\\bin\\amd64`.\r\n\r\nThe former makes sense because of the codebase we specify\r\n\r\nhttps://github.com/dotnet/msbuild/blob/01e6196d5df534dec8c16a1417ff04638330c790/src/MSBuild/app.amd64.config#L19-L23\r\n\r\nBut the latter did not.\r\n\r\nAfter some more debugging we found that the assembly was being loaded here\r\n\r\nhttps://github.com/dotnet/msbuild/blob/01e6196d5df534dec8c16a1417ff04638330c790/src/Tasks/CodeTaskFactory.cs#L680-L686\r\n\r\nAs a result of entries in a `CodeTaskFactory` task definition:\r\n\r\n```xml\r\n      <Reference Include=\"$(MSBuildToolsPath)\\Microsoft.Build.Framework.dll\"/>\r\n      <Reference Include=\"$(MSBuildToolsPath)\\Microsoft.Build.Utilities.Core.dll\"/>\r\n```\r\n\r\nIn 64-bit MSBuild, `$(MSBuildToolsPath)` resolves to the `amd64` folder, passing that copy of `Microsoft.Build.Framework.dll` to `UnsafeLoadFrom`.\r\n\r\nWe then ignore the reference because it's provided by default\r\n\r\nhttps://github.com/dotnet/msbuild/blob/01e6196d5df534dec8c16a1417ff04638330c790/src/Tasks/CodeTaskFactory.cs#L689-L696\r\n\r\nBut having already loaded it, it becomes possible to get incompatible definitions of `ITaskItem`, which is what happened to the ([perfectly reasonably authored](https://github.com/NuGet/NuGet.Client/blob/e0edb52d2ee204ab1117c9a592addc705cc76471/src/NuGet.Core/NuGet.Build.Tasks.Pack/GetPackOutputItemsTask.cs#L57-L59)) NuGet task.\r\n\r\n```c#\r\n            var outputs = new List<ITaskItem>();\r\n            outputs.Add(new TaskItem(Path.Combine(PackageOutputPath, nupkgFileName)));\r\n            outputs.Add(new TaskItem(Path.Combine(NuspecOutputPath, nuspecFileName)));\r\n```",
  "state": "CLOSED",
  "createdAt": "2021-12-01T16:35:49Z",
  "updatedAt": "2024-02-21T17:00:51Z",
  "closedAt": "2021-12-06T23:14:15Z",
  "author": {
    "login": "rainersigwald"
  },
  "labels": [
    "bug",
    "Partner request",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "rainersigwald"
      }
    ]
  },
  "milestone": {
    "title": "VS 17.1"
  },
  "comments": {
    "nodes": [
      {
        "body": "## Workarounds\r\n\r\nThis can be worked around by changing the `CodeTaskFactory` task definition to remove the Framework and Utilities.Core references--we provide them by default and don't require that they be specified.",
        "createdAt": "2021-12-01T16:38:55Z",
        "updatedAt": "2021-12-01T16:38:55Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I'm in the throes of moving the .NET Project System build to VS2022. We hit this issue today, packing a VB project:\r\n\r\nhttps://dev.azure.com/dnceng/public/_build/results?buildId=1492964&view=logs&j=908bce63-940e-59f8-7204-204b1f5ead0b&t=2c2fdffc-ec6b-5664-5bad-2d9431cb9fe3&l=10563\r\n\r\nIt's likely that this issue surfaced in response to a change to the `Build.Windows.Amd64.VS2022.Pre.Open` image, made in response to https://github.com/dotnet/project-system/pull/7786. More detail at https://github.com/dotnet/core-eng/issues/15030.",
        "createdAt": "2021-12-01T22:10:28Z",
        "updatedAt": "2021-12-01T22:14:55Z",
        "author": {
          "login": "drewnoakes"
        }
      },
      {
        "body": "@drewnoakes you may wish to use a 32-bit MSBuild until the fix is deployed in your environment.",
        "createdAt": "2021-12-01T22:21:56Z",
        "updatedAt": "2021-12-01T22:21:56Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}