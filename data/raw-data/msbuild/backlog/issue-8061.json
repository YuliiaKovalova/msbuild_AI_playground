{
  "number": 8061,
  "title": "[Proposal] Add adapter for `TaskLoggingHelper` and `ILogger`",
  "body": "## Context\r\nA common setup that we have is that we have some business logic in some library. We want to then call into this logic from different entrypoints:\r\n- CLI tool\r\n- Web service\r\n- MSBuild tasks\r\n\r\nThe usual way to approach this is to use `Microsoft.Extensions.DependencyInjection` to build the classes and `Microsoft.Extensions.Logging.ILogger` for generic logging. Then, in various environments, we inject the right logger:\r\n- The CLI will usually plug in the console logger via `.AddConsole()`\r\n- The web service can for instance make the service log into Application Insights via `.AddApplicationInsightsTelemetry()`\r\n\r\nThe MSBuild environment uses the `Microsoft.Build.Utilities.Task.Log` member (`TaskLoggingHelper` class) but it is not possible to plug this well together with the `ILogger` interface that is quite native to .NET these days.\r\n\r\n## Goal\r\n\r\nIdeally, similarly to the other options, we would have:\r\n- [ ] An adapter that would get an instance of the `TaskLoggingHelper` as a parameter and would implement the `ILogger` interface.\r\n- [ ] An easy way how to inject task's `Log` as the `ILogger` interface through the dependency injection.\r\n\r\nThe adapter should ideally adhere to verbosity rules and similar setting.\r\n\r\n## Example\r\n\r\nSomething like this comes to mind:\r\n```csharp\r\npublic class CustomTask : Task\r\n{\r\n    private readonly IServiceProvider _serviceProvider;\r\n\r\n    public VirtualMonoRepo_Initialize()\r\n    {\r\n        _serviceProvider = CreateServiceProvider();\r\n    }\r\n\r\n    public override bool Execute()\r\n    {\r\n        var myCustomLogic = _serviceProvider.GetRequiredService<IBusinessLogic>();\r\n        return myCustomLogic.DoSomething();\r\n    }\r\n\r\n    private IServiceProvider CreateServiceProvider() =>\r\n          new ServiceCollection()\r\n                .AddBusinessLogic()  // this registers my app's classes into DI\r\n                .AddTaskLogging(Log) // this registers current task's logger as ILogger\r\n                .BuildServiceProvider();\r\n}\r\n```\r\n\r\n",
  "state": "OPEN",
  "createdAt": "2022-10-13T13:23:20Z",
  "updatedAt": "2024-01-31T08:16:03Z",
  "closedAt": null,
  "author": {
    "login": "premun"
  },
  "labels": [
    "backlog",
    "Feature Request",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Backlog"
  },
  "comments": {
    "nodes": [
      {
        "body": "Would the logger expect the state object to implement `IReadOnlyCollection<KeyValuePair<string, object>>`, and then recognise keys such as \"Subcategory\", \"File\", \"LineNumber\"?",
        "createdAt": "2022-10-13T14:27:05Z",
        "updatedAt": "2022-10-13T14:27:05Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "Honestly, I didn't think this 100% through as I don't know the specifics of the `TaskLoggingHelper` so I'd imagine this could a subject to further specification.\r\nI only know, I've tried a similar setup like this and had a bit hacky quick way to achieve this rather than a proper solution.\r\nI might clean up the code and share it here later if I have time.",
        "createdAt": "2022-10-14T07:39:32Z",
        "updatedAt": "2022-10-14T07:39:32Z",
        "author": {
          "login": "premun"
        }
      },
      {
        "body": "@matkoch I was wondering whether you have dealt with this situation?",
        "createdAt": "2022-10-24T09:11:49Z",
        "updatedAt": "2022-10-24T09:11:49Z",
        "author": {
          "login": "premun"
        }
      },
      {
        "body": "I have implemented something related: logging interfaces and classes that can output to a SARIF 2.1.0 file or to MSBuild-compatible Console.Error. I don't think Microsoft.Extensions.Logging.ILogger would have been a good fit for that; it seems more suitable for logging in which the logger provider does not understand the semantics of the data structures and just needs to serialize them somewhere for later processing.",
        "createdAt": "2022-10-24T10:51:09Z",
        "updatedAt": "2022-10-24T10:51:09Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "I just found another .NET team that has implemented roughly the same as what I need/had in mind:\r\nhttps://github.com/dotnet/templating/blob/fedcb3c6e2eeafd13822f10ec4f0b8d0576c7af5/tools/Microsoft.TemplateEngine.Authoring.Tasks/Utilities/MSBuildLogger.cs",
        "createdAt": "2022-11-09T16:46:15Z",
        "updatedAt": "2022-11-09T16:46:15Z",
        "author": {
          "login": "premun"
        }
      },
      {
        "body": "When this is tackled, [this blog](https://nblumhardt.com/2016/11/ilogger-beginscope/) is a great resource for how we should tackle the 'BeginScope' implementation.",
        "createdAt": "2023-01-03T21:19:59Z",
        "updatedAt": "2023-01-03T21:19:59Z",
        "author": {
          "login": "baronfel"
        }
      }
    ]
  }
}