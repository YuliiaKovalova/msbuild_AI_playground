{
  "number": 4199,
  "title": "Prevent allocating SyncObject in Microsoft.Build!Microsoft.Build.Collections.CopyOnWriteDictionary+CopyOnWriteBackingDictionary",
  "body": "Based on memory dump of loading a large .Net Core solution, millions of System.Object was allocation to be used as SyncObject, uses 12M memory.\r\n\r\nMore than 1.6 m is used by ProjectItemInstance in projectInstances to preserve direct metadata.\r\n\r\nName | Inc % | Inc | Inc Ct\r\n-- | -- | -- | --\r\nmscorlib!Object | 1.1 | 12,630,199 | 1,052,913.125\r\n+ Microsoft.Build!Microsoft.Build.Collections.CopyOnWriteDictionary+CopyOnWriteBackingDictionary | 0.1 | 1,615,835.250 | 134,661.891\r\n\r\nWe never copy/share the project instance, so there is no reason to trigger us to allocation the SyncObject here, the SyncObject is allocated in two places:\r\n\r\nCreateItemsSnapshot initialize a dictionary. During that phase, the dictionary is not being shared, so we should be able to introduce a constructor to add items without taking a lock (going through the modification logic.)\r\n\r\nAnother place is the dictionary is cloned inside the ProjectItemInstance constructor.  AddRef was done inside a lock, which can be done through Interlock.\r\n\r\nAlso, the reference count is 2 after the constructor, so it will always be copied during the first modification, which sounds strange, but it doesn't affect our performance anyway. (We create an immutable ProjectInstance)",
  "state": "CLOSED",
  "createdAt": "2019-02-26T02:15:26Z",
  "updatedAt": "2024-02-21T17:09:04Z",
  "closedAt": "2020-08-20T20:19:46Z",
  "author": {
    "login": "lifengl"
  },
  "labels": [
    "Area: Performance",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "MSBuild 16.8 preview 1"
  },
  "comments": {
    "nodes": []
  }
}