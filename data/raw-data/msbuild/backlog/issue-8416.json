{
  "number": 8416,
  "title": "Inventory public API differences by diffing PublicAPIs.txt",
  "body": "Inventory differences:\n\ndiff-build-api: no action needed\none real difference; required\n\ndiff-framework-api: action possible\n**All differences related to XamlTypes. Can be done. Known issue: https://github.com/dotnet/msbuild/issues/6045**\n\ndiff-stringtools-35: no action needed\nnet35 doesn't have spans, so SpanBasedStringBuilder can't exist. Required methods from it must be reimplemented in some form for net35. No action.\n\ndiff-tasks-api: 5 we can fix, 6 we can maybe fix. **(Should anything ClickOnce be ported? Can ask John/Sujit)**\n**AL: can be ported: https://github.com/dotnet/msbuild/issues/350**\nAppDomainIsolatedTaskExtension: no need to port, as app domains are framework-specific\n**AspNetCompiler: I think this can be ported, but I don't see an associated issue.**\nCodeTaskFactory uses code dom, which I believe is a framework-specific concept. In any case, it is superseded by RoslynCodeTaskFactory, which is supported on core, so no action needed.\nManifestUtilities.TrustInfo: This is mostly supported on Core but without support for partial trust. I don't know the ins and outs of that decision, but it seemed very intentional, so I'd say no action needed.\n*GenerateBootstrapper: This is from ClickOnce, which I think is mostly (exclusively?) used in Visual Studio. I don't see any reason it can't be ported, but I don't see any reason it's necessary, and I don't see any customers asking for it.*\nGenerateTrustInfo: See ManifestUtilities.TrustInfo\n*GetFrameworkSdkPath: This looks portable to me, but I'm not sure why a customer using core would want to find framework bits.*\nGetInstalledSdkLocations: This seems to have been ported.\nGetSDKReferenceFiles: This seems to have been ported.\nIFixedTypeInfo: This seems to have been ported.\n*RegisterAssembly/UnregisterAssembly: This is COM support from .NET Core, which is apparently a supported scenario. The \"com\" available on linux/mac must preprocess all the com data, and there's no interop version available, so though we can port this to core, it probably isn't worth making it cross-plat.*\n*RequiresFramework35SP1Assembly: This seems easy to port but not at all high priority.*\n**ResolveNativeReference: I don't see any reason this shouldn't be ported to core. Related (but slightly different): https://github.com/dotnet/msbuild/issues/8144**\nResolveSDKReference: This seems to have been ported.\n*UpdateManifest: I see no reason this shouldn't be ported, nor do I see a strong reason to do so. ClickOnce.*\n**WinMDExp: I believe this is windows-specific, but it should be able to be ported to core. I don't see any customers clamoring for it.**\n**Xaml...various: see XamlTypes above.**\nSGen.SkipTaskExecution/ValidateParameters: This is not supported on .NET Core. We have a nice error message telling users to use the Microsoft XML Serializer Generator package instead with a link. No action needed.\n*ManifestUtilities.SecurityUtilities: ClickOnce-specific. I don't see a good reason to keep it to framework, but I don't see people asking for it.*\n\ndiff-utilities-api: no action needed\nAppDomains are a Framework concept. ALC is available on Core instead. AppDomainIsolatedTask does not need porting.\nAssemblyFoldersExInfo and GetAssemblyFoldersExInfo were ported to Core about a month before Ben's diff; I'm guessing he used an old version of MSBuild. No action needed.\nCanonicalTracked(In/Out)putFiles, ExecutableType, FileTracker, FlatTrackingData, UpToDateCheckType, and DependencyFilter are used as part of FileTracker for VS. It does not need porting. If its usage ever expands, some parts of that are as easy as deleting an ifdef.\nTaskLoggingHelper.MarkAsInactive is for app domains and uses a feature (ILease) only available on Framework. It would be a hard and pointless port. Same applies to InitializeLifeTimeService for AppDomainIsolatedTask, TaskItem, and TaskLoggingHelper. No action required.",
  "state": "OPEN",
  "createdAt": "2023-02-07T17:18:23Z",
  "updatedAt": "2024-02-21T16:27:50Z",
  "closedAt": null,
  "author": {
    "login": "marcpopMSFT"
  },
  "labels": [
    "backlog",
    "Priority:3",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": []
  }
}