{
  "number": 3727,
  "title": "MSBuild.exe selecting wrong targets",
  "body": "### Steps to reproduce\r\n\r\nSample zip: \r\n[MSBuildPackageIssue.zip](https://github.com/Microsoft/msbuild/files/2365571/MSBuildPackageIssue.zip) (Courtesy of @tom-englert from this issue: https://github.com/Fody/Fody/issues/537#issuecomment-419723936)\r\n\r\nThe zip contains a simple solution with a PackageReference, and the package simply emits a message (allowing us to see which version was selected).\r\nThe referenced package exists in two versions: `1.0.0` and `1.1.0`.\r\n\r\nReproduction steps:\r\n\r\n- Unzip the zip\r\n- Open a command line and navigate to the folder\r\n- Run `.\\build.cmd`\r\n  - Take note of the path in the DebugTestTarget (Should be `1.0.0`, the same as in the .csproj file) \u2713\r\n- Edit `MSBuildPackageIssue\\MSBuildPackageIssue.csproj`, and change the Version of the `MySamplePackage` reference to `1.1.0`.\r\n- Run `.\\build.cmd` again.\r\n  - Note that the DebugTestTarget still outputs `1.0.0`as the version! \ud83d\udc1e\r\n- Run `.\\build.cmd` again.\r\n  - Note that the DebugTestTarget is now correctly `1.1.0`. \u2713\r\n\r\nChanging back and forth between the two versions, we can see that after a change, we need to call the `build.cmd` twice before the correct version is selected.\r\n\r\nI was also able to reproduce the bug by calling MSBuild directly like this:\r\n`\"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\MSBuild\\15.0\\Bin\\MSBuild.exe\" /target:Restore;Rebuild MSBuildPackageIssue.sln`.\r\n\r\n### Expected  behavior\r\nThe version stated in the .csproj should be selected in every run of `build.cmd`\r\n\r\n### Actual behavior\r\nThe version stated in the .csproj is not correct in the first run of `build.cmd` after the version in the .csproj has changed.\r\n\r\n### Environment data\r\n`msbuild /version` output:\r\nMicrosoft (R) Build Engine version 15.8.168+ga8fba1ebd7 for .NET Framework\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n15.8.168.64424\r\n\r\nOS info:\r\nWindows 10 Pro, 64 bit, 1803\r\n\r\nIf applicable, version of the tool that invokes MSBuild (Visual Studio, dotnet CLI, etc):\r\ncmd.exe (10.0.17134.254) or powershell.exe (5.1.17134.228 is the output from `$PSVersionTable.PSVersion`)\r\n",
  "state": "CLOSED",
  "createdAt": "2018-09-10T07:45:42Z",
  "updatedAt": "2024-02-21T17:11:22Z",
  "closedAt": "2020-06-02T17:22:38Z",
  "author": {
    "login": "bendiknesbo"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "An interesting aspect might be that it works fine when you call just `msbuild /restore`, but not when specifying a target.",
        "createdAt": "2018-09-11T15:34:55Z",
        "updatedAt": "2018-09-11T15:34:55Z",
        "author": {
          "login": "tom-englert"
        }
      },
      {
        "body": "There are quite a few problems with the sample code you've given. The primary one you're running into is the reason we have the `/restore` argument to MSBuild, as @tom-englert points out -- see https://github.com/Microsoft/msbuild/pull/2414.\r\n\r\nThe fix for that is to plumb the Restore target through your traversal project\r\n\r\n```xml\r\n  <Target Name=\"Restore\">\r\n    <MSBuild Projects = \"@(ProjectsToBuild)\" \r\n             Targets=\"Restore\"\r\n             Properties=\"Configuration=$(Configuration)\" />\r\n  </Target>\r\n```\r\n\r\nand change the build script to run `msbuild.exe /restore config.msbuild /target:CoreBuild`. That way the restore operation is sufficiently segregated from the build to pick up the updated logic in the build.\r\n\r\n### Other changes I recommend\r\n\r\n* Passing `OutputPath` as a global property to a solution is a bad idea, because it means that the output paths for each project within the solution will collide. I would not set it in your `config.msbuild` at all.\r\n* Using `%(ProjectsToBuild.Filename)` in the `<MSBuild` call in `CoreBuild` will [batch ](https://docs.microsoft.com/en-us/visualstudio/msbuild/item-metadata-in-task-batching?view=vs-2017) the call, causing each project to build serially. This means you can't take advantage of parallel builds with `msbuild.exe /m`, which can be a huge performance improvement. Another reason to remove the `OutputPath` specification.",
        "createdAt": "2018-09-11T16:24:11Z",
        "updatedAt": "2018-09-11T16:24:11Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Thank you @rainersigwald.\r\nIndeed, adding `/restore` argument to MSBuild (Side-note: I can't see that this switch is [documented](https://docs.microsoft.com/en-us/visualstudio/msbuild/msbuild-command-line-reference?view=vs-2017) on the web, but I can see it by running `MSBuild.exe /h`), and adding the new \"Restore\"-target fixes the problem we were experiencing.\r\n\r\nInterestingly, adding the Restore-target, and running `BuildAll` target does not work (without the `/restore` argument in `build.cmd`:\r\n`<Target Name=\"BuildAll\" DependsOnTargets=\"Restore;CoreBuild\"/>`\r\n\r\n",
        "createdAt": "2018-09-12T08:38:26Z",
        "updatedAt": "2018-09-12T08:38:26Z",
        "author": {
          "login": "bendiknesbo"
        }
      },
      {
        "body": "@rainersigwald I think this can be closed, the /restore is the solution",
        "createdAt": "2020-06-02T15:41:13Z",
        "updatedAt": "2020-06-02T15:41:13Z",
        "author": {
          "login": "tom-englert"
        }
      }
    ]
  }
}