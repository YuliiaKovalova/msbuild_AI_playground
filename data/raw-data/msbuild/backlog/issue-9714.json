{
  "number": 9714,
  "title": "[Feature Request]: Add ability to build multiple projects on the command line without sln or slnf",
  "body": "### Summary\n\nI would like to know the background story of why this is not possible to do today and figured I would ask if it was possible to make this happen. \n\n### Background and Motivation\n\nSolution files...................\r\n\r\nToday I can build multiple projects with dotnet build by passing in a solution or solution filter to specify the projects I want to build. Additionally, I have the ability to build a single project without a sln or slnf by passing in the name of the project directly. Therefore,  it seems like there is no limitation on building multiple projects in a single dotnet build call. \r\n\r\nThe only reason I have had to create solution files is so that I can have the ability to build multiple related projects at a time. That's it, they do nothing more and they clutter the file tree. Recently, I have had to be able to 'select' individual projects or groups of projects to build within a file tree. This has led me to solution filters, which feel like a cludge over already crusty solution files.\r\n\r\nFurthermore, I can invoke the MSBuild task within a project file and pass to it an item list of projects to build! This further solidifies my belief that there is no limitation of building without solution files.\n\n### Proposed Feature\n\nAdd the ability to pass a list of projects to the dotnet cli / msbuild cli to build without a solution file instead of being limited by a single project input. I think this would get rid of the requirement for many people to need solution files. It can make build automation and selecting the projects to build much easier by allowing them just to be specified on the command line directly.\r\n\r\nProposal(s):\r\n\r\n1. Allow the user to specify multiple project paths on the command line in the invocation. This would just be an extended feature of the existing command line.\r\n2. If (1) is not possible, provide a new command line option for specifying multiple projects. The 'how' is not important. Could be a single option delimited by a special character or a repeated option such as: \"-proj proj1path.proj -proj proj2path.proj\"\n\n### Alternative Designs\n\n_No response_",
  "state": "OPEN",
  "createdAt": "2024-02-07T15:34:10Z",
  "updatedAt": "2024-07-26T12:31:43Z",
  "closedAt": null,
  "author": {
    "login": "LostTime76"
  },
  "labels": [
    "help wanted",
    "backlog",
    "needs-design",
    "Feature Request",
    "Partner request",
    "Priority:3",
    "triaged",
    "gathering-feedback"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "baronfel"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Can I work on this feature?",
        "createdAt": "2024-02-16T10:44:52Z",
        "updatedAt": "2024-02-16T10:44:52Z",
        "author": {
          "login": "naeemaei"
        }
      },
      {
        "body": "This seems like a logical and natural extension of the existing MSBuild CLI Grammar - we'd love to see a pull request in this space!\r\n\r\nThere are a few things to think about here:\r\n* There are multiple ways to specify a project - either explicitly via passing project files as command line arguments or implicitly discovering a project from the current working directory. We should define how the build should behave when 'implicit discovery' occurs\r\n  * **Proposal**: any change to allow multiple projects should only apply when multiple projects are provided directly on the command line - there should be _no change_ to implicit discovery.\r\n* MSbuild can accept .binlog files as an input - this allows for 'replaying' a previous build, often with different loggers/analysis enabled. We should define how the build would run if both binlog inputs and project files were specified.\r\n  * **Proposal**: if both .binlog and project files are specified at the command line, an error should be thrown instructing the user to provide only a single binlog file or one or more project files.\r\n* MSbuild can accept solution files, solution filters, and project files on the command line. We should define what the expected behavior is when combinations of these types of files are specified.\r\n  * **Proposal**: Only multiple project files should be allowed to be passed - multiple solutions or solution filters, and combinations of solutions/solution filters/project files should raise an error saying that only multiple project files are allowed to be passed to MSbuild.\r\n    * **Reasoning**: solutions and solution filters are converted to a 'metaproject' with a lot of implicit behaviors that don't directly align to project-file-based usage of MSBuild - it is unclear how to reasonable combine/merge these different kinds of inputs.\r\n\r\nUseful links\r\n* [here is where the project argument is defined](https://github.com/dotnet/msbuild/blob/5768954b7fac850d5a721ea4c4e37403564059c2/src/MSBuild/CommandLineSwitches.cs#L235) - this will likely need to be changed to remove the `DuplicateSwitchError` and allow `multi params`",
        "createdAt": "2024-03-25T16:13:06Z",
        "updatedAt": "2024-03-25T16:13:06Z",
        "author": {
          "login": "baronfel"
        }
      },
      {
        "body": "@naeemaei I realized I forgot to @ you directly - if you'd like to contribute this feature we'd love to help you implement it!",
        "createdAt": "2024-05-15T20:45:29Z",
        "updatedAt": "2024-05-15T20:45:29Z",
        "author": {
          "login": "baronfel"
        }
      },
      {
        "body": "@baronfel Yes, I'd like to contribute.",
        "createdAt": "2024-05-24T10:02:55Z",
        "updatedAt": "2024-05-24T10:02:55Z",
        "author": {
          "login": "naeemaei"
        }
      },
      {
        "body": "This issue has label gathering-feedback, so if there's any specific feedback you'd like, please let me know. In short, I feel being able to pass multiple projects to a single CLI invocation and have it automatically do a P2P traversal (something that I think does not happen with slnf files) would help simplify CI scripts for my complex and multi-pipeline product.",
        "createdAt": "2024-07-26T07:11:21Z",
        "updatedAt": "2024-07-26T07:11:21Z",
        "author": {
          "login": "zivkan"
        }
      },
      {
        "body": "No feedback required at this point, just need to do the work. \n\nI have talked to other teams like DevKit and it would help their story for not needing to generate a solution file to enable builds in repos that don't have them. ",
        "createdAt": "2024-07-26T12:31:42Z",
        "updatedAt": "2024-07-26T12:31:42Z",
        "author": {
          "login": "baronfel"
        }
      }
    ]
  }
}