{
  "number": 8541,
  "title": "[Bug]: Please re-initilize \"_terminatedTool\" in class Microsoft.Build.Utilities.ToolTask",
  "body": "### Issue Description\n\nIn the following code:\r\nhttps://github.com/dotnet/msbuild/blob/main/src/Utilities/ToolTask.cs\r\n\r\nThe private field `_terminatedTool` has not be initialized in method `ExecuteTool()`. As a result, in rare cases where:\r\n\r\n1. `ToolTask.Execute()` being called multiple times from derived classes, and;\r\n2. The tool execution being timed out once.\r\n\r\nSuch timed-out state will be incorrectly permanent, impacting all following `ToolTask.Execute()` calls, and forcing the method to return `false` even if the execution succeeded.\r\n\r\nThe problem can be easily addressed by reinitializing `_terminatedTool` field to `false` in method `ExecuteTool()`, along with other private fields.\r\n\r\nThanks!\n\n### Steps to Reproduce\n\n1. Create a CLI tool that would wait the amount of time (ms) specified on command line;\r\n2. Create a `ToolTask` derived class to execute that tool;\r\n3. Override `Execute()`, calling `base.Execute()` multiple times to execute the tool multiple times;\r\n4. In the first execution, set delay to a larger value (>100s), and set it to smaller value in all subsequent execution (< 1s);\r\n5. Set `Timeout` of the task to 5s, so the first call will timed out, and subsequent ones won't;\r\n6. Watch how all subsequent `base.Execute()`  returns `false`, so the task never succeeds.\n\n### Expected Behavior\n\nThe first execution timed out (and fail), but subsequent execution should succeed.\n\n### Actual Behavior\n\nAfter the first execution timed out, all subsequent execution failed even if they actually succeeded.\n\n### Analysis\n\nPrivate field `_terminatedTool` has not been reinitialized correctly in `ToolTask.ExecuteTool()` method.\n\n### Versions & Configurations\n\nThe latest version (17.5).",
  "state": "CLOSED",
  "createdAt": "2023-03-07T16:08:13Z",
  "updatedAt": "2024-02-21T14:05:47Z",
  "closedAt": "2023-04-06T08:40:49Z",
  "author": {
    "login": "gpwen"
  },
  "labels": [
    "bug",
    "backlog",
    "Priority:3",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "gpwen"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "The problem found in MSBuild version 17.4.1.60106, but it's the same in the latest version.",
        "createdAt": "2023-03-07T16:11:49Z",
        "updatedAt": "2023-03-07T16:11:49Z",
        "author": {
          "login": "gpwen"
        }
      },
      {
        "body": "I think that would be a reasonable change, though `ToolTask` is not particularly oriented to running multiple tools. @gpwen would you be interested in submitting a PR?",
        "createdAt": "2023-03-07T20:51:53Z",
        "updatedAt": "2023-03-07T20:51:53Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Thanks for considering the change. I'll submit a PR.\r\n\r\nSome background: I need to execute an external command repeatedly (predefined number of maximum repeats) with timeout until it succeeds. Not sure if I can execute another MSBuild task from within a task, which would look better. I called base.Execute() multiple times as a workaround. I know it's probably not a good idea after read through the code. Really appreciate if you can suggest an alternative.",
        "createdAt": "2023-03-07T23:50:39Z",
        "updatedAt": "2023-03-07T23:50:39Z",
        "author": {
          "login": "gpwen"
        }
      },
      {
        "body": "I don't know there are Linux/Mac tests. Sorry for the unit test break in the first commit. I'm more than happy to make those work. The second commit should do the trick.",
        "createdAt": "2023-03-08T07:17:17Z",
        "updatedAt": "2023-03-08T07:17:17Z",
        "author": {
          "login": "gpwen"
        }
      },
      {
        "body": "> Not sure if I can execute another MSBuild task from within a task\r\n\r\nIt is possible to do this, by manually calling the constructor and property accessors of the task, including setting `BuildEngine`\r\n\r\nhttps://github.com/dotnet/msbuild/blob/1a6d753a7648baf0cc991af0c0d254a41d36eba6/src/Framework/ITask.cs#L14-L18\r\n\r\nand then calling `Execute()`. However, I don't generally recommend it and it doesn't seem obviously better than your current retrying-`ToolTask` approach.\r\n",
        "createdAt": "2023-03-08T14:43:00Z",
        "updatedAt": "2023-03-08T14:43:00Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Thanks for the information! It's good to know I can do that as well.",
        "createdAt": "2023-03-08T16:16:14Z",
        "updatedAt": "2023-03-08T16:16:14Z",
        "author": {
          "login": "gpwen"
        }
      }
    ]
  }
}