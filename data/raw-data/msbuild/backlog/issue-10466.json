{
  "number": 10466,
  "title": "[Bug]: Strange behavior evaluating properties in <UsingTask/>",
  "body": "### Issue Description\r\n\r\nI have a custom TaskFactory: WasmTaskFactory in a NuGet Package \"MSBuildWasm\", the package defines MSBuildWasm.props. \r\n```xml\r\n<PropertyGroup>    <MSBuildWasmAssembly>$(MSBuildThisFileDirectory)..\\tasks\\net8.0\\$(MSBuildThisFileName).dll</MSBuildWasmAssembly>\r\n</PropertyGroup>\r\n```\r\n\r\nI want to use the factory from the package to create tasks in a project build:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n...\r\n  <ItemGroup>\r\n    <PackageReference Include=\"MSBuildWasm\" Version=\"0.1.0\" />\r\n  </ItemGroup>\r\n  \r\n  <UsingTask \r\n\t  TaskName=\"Template\"\r\n\t  AssemblyFile=\"$(MSBuildWasmAssembly)\"\r\n\t  TaskFactory=\"WasmTaskFactory\" >\r\n    <Task>rust_template\\target\\wasm32-wasi\\release\\rust_template.wasm</Task> \r\n  </UsingTask>\r\n\r\n  <Target Name=\"WasmTasks\" AfterTargets=\"Build\">\r\n    <Template/>\r\n  </Target>\r\n\r\n</Project>\r\n```\r\n\r\nthis produces\r\n`Template.csproj(19,34): error MSB4022: The result \"\" of evaluating the value \"$(MSBuildWasmAssembly)\" of the \"AssemblyFile\" attribute in element <UsingTask> is not valid.` \r\n\r\n**But**! When I add a space in \r\n`AssemblyFile=\"$(MSBuildWasmAssembly) \"` it works: creates the Template task and runs it. \r\n\r\n*What?*\r\n\r\n### Steps to Reproduce\r\n\r\nhttps://github.com/JanProvaznik/MSBuildWasm/blob/dev/janpro/package_and_template/templates/RustWasmTaskTemplate/RustWasmTaskTemplate.csproj\r\n\r\n1. package with .props\r\n2. include package in project\r\n3. `<UsingTask AssemblyFile=\"$(PropertyFromPackageProps)\" TaskFactory=\"FactoryFromPackage\">`\r\n4. dotnet build\r\n\r\n### Expected Behavior\r\n\r\nIt should work without the added space\r\n\r\n### Actual Behavior\r\n\r\nIt does not work without the space\r\n\r\n### Analysis\r\n\r\nhttps://github.com/dotnet/msbuild/issues/642 likely related\r\n\r\n### Versions & Configurations\r\nWindows\r\nOn linux the workaround with space doesn't work as it recognizes a path ending with a space as different from the file.",
  "state": "CLOSED",
  "createdAt": "2024-07-31T13:15:01Z",
  "updatedAt": "2024-08-01T16:46:42Z",
  "closedAt": "2024-08-01T16:46:41Z",
  "author": {
    "login": "JanProvaznik"
  },
  "labels": [
    "bug"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Does the error occur only when NuGet packages haven't been fully restored yet, e.g. during `dotnet restore` or during the implicit restore in `dotnet build`?  If so, then perhaps `Condition=\"$(MSBuildWasmAssembly) != ''\"` on the UsingTask element would avoid the error.",
        "createdAt": "2024-08-01T02:39:03Z",
        "updatedAt": "2024-08-01T02:39:03Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "The ExcludeRestorePackageImports property may also be involved.  NuGet-generated props and targets files have a `'$(ExcludeRestorePackageImports)' != 'true'` condition around the imports, and NuGet seems to have some code that sets `ExcludeRestorePackageImports=true` when restoring.  <https://github.com/NuGet/NuGet.Client/blob/3274cb8cd4bccf8f1b0c06c01c58627ee5373c2a/src/NuGet.Core/NuGet.Build.Tasks/NuGet.targets#L90-L91>",
        "createdAt": "2024-08-01T02:48:43Z",
        "updatedAt": "2024-08-01T02:48:43Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "You're right adding the condition solves the issue, it's about the restore.\r\nDuring restore MSBuild only checks and reports that AssemblyFile parameter isn't \"\", but \" \" or any other invalid path to a .dll is ignored and blows up only later when the factory is actually needed to make a Task.",
        "createdAt": "2024-08-01T16:25:27Z",
        "updatedAt": "2024-08-01T16:25:27Z",
        "author": {
          "login": "JanProvaznik"
        }
      },
      {
        "body": "MSBuild perhaps could not check AssemblyFile having a value during restore but it's a very rare behavior with a simple workaround.",
        "createdAt": "2024-08-01T16:46:41Z",
        "updatedAt": "2024-08-01T16:46:41Z",
        "author": {
          "login": "JanProvaznik"
        }
      }
    ]
  }
}