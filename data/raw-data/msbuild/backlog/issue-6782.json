{
  "number": 6782,
  "title": "Out-of-proc builds in a custom .NET Core process are not possible",
  "body": "### Issue Description\r\nIf you write a custom application in .NET Core, use MSBuildLocator to find .NET Core MSBuild, and attempt to do an out-of-process build, then the MSBuild BuildManager will attempt to launch the node as the user's custom application.\r\n\r\n### Steps to Reproduce\r\n* Create a custom .NET Core application named `Foo.exe`\r\n* Use MSBuildLocator to find MSBuild in .NET Core\r\n* Build a project with `DisableInProcNode` set to `true`\r\n\r\n### Expected Behavior\r\nMSBuild APIs correctly build project out-of-proc\r\n\r\n### Actual Behavior\r\nMSBuild APIs attempt to launch an out-of-proc node with `Foo.exe` instead of `MSBuild.exe`\r\n\r\n### Analysis\r\nThis is happening because this call:\r\n\r\nhttps://github.com/dotnet/msbuild/blob/aac64bbabfcea279aa34875563848003887e8c84/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs#L483\r\n\r\nBut GetCurrentHost assumes that MSBuild.exe is the entry application which is not always correct:\r\n\r\nhttps://github.com/dotnet/msbuild/blob/aac64bbabfcea279aa34875563848003887e8c84/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs#L594-L608\r\n\r\nIn some cases, the current process is not MSBuild.exe.\r\n\r\nInstead, this code should use the current `dotnet.exe` that is running that application and use the MSBuild location which is already done here:\r\n\r\nhttps://github.com/dotnet/msbuild/blob/aac64bbabfcea279aa34875563848003887e8c84/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs#L435-L437\r\n\r\nThere is another bug where we prepend the path to MSBuild.dll twice:\r\n\r\nhttps://github.com/dotnet/msbuild/blob/aac64bbabfcea279aa34875563848003887e8c84/src/Build/BackEnd/Components/Communications/NodeProviderOutOfProcBase.cs#L484\r\n\r\nBut that doesn't seem to break anything as dotnet.exe correctly ignores that it was given two applications to run!\r\n\r\n### Versions & Configurations\r\nAny version of .NET Core MSBuild\r\n",
  "state": "CLOSED",
  "createdAt": "2021-08-23T17:25:17Z",
  "updatedAt": "2024-02-21T14:11:50Z",
  "closedAt": "2021-09-30T17:20:30Z",
  "author": {
    "login": "jeffkl"
  },
  "labels": [
    "bug",
    "needs-design",
    "Partner request",
    "For consideration",
    "Partner:NuGet",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "VS 17.0"
  },
  "comments": {
    "nodes": [
      {
        "body": "Good news and bad news:\r\nI made a console app as you described and tried running it. Mine happened to be named 6782, so it made 6782.exe as you described.\r\nIt also made more than 1. In fact, it made hundreds very quickly and kept making more until my computer completely died. Everything started going really slowly after just a minute or so, and then the screen turned black, and I had to force it to shut down. That was last week, and I decided to take the rest of the day off after that. This week, I'd forgotten (blocked out?) that memory, so I tried it again, but I did manage to kill the hundreds of 6782.exes before my computer was completely overwhelmed, though it was touch and go there for a little bit. Task Manager was no help at all because it couldn't kill them fast enough. I'm guessing they came in at about 5/second.\r\nOn the positive side, I don't want to touch my repro because now we have a reliable repro for \"hundreds of MSBuild processes\" (probably?). It would be great to know what's going on there.",
        "createdAt": "2021-09-24T20:09:52Z",
        "updatedAt": "2021-09-24T20:09:52Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "@Forgind I did the same exact thing, glad I'm not the only sucker \ud83d\ude1b \ud83d\ude06 \r\n\r\nSome good news is that I was able to work around it via reflection to set the private member:\r\n\r\nhttps://github.com/jeffkl/MSBuildProjectCreator/blob/1f262b528bd03297e5967aff8f3268589dd55410/src/Microsoft.Build.Utilities.ProjectCreation/BuildManagerHost.cs#L80",
        "createdAt": "2021-09-24T20:16:45Z",
        "updatedAt": "2021-09-24T20:16:45Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "So having looked into this a little more, I think the problem is that there is no `dotnet.exe` process involved. In my case, 6782.exe was acting as dotnet.exe in loading msbuild.dll and executing its code, but that means I can't just look for a dotnet.exe nearby and replace GetCurrentHost() with that. I think the best option is to use <path_to_MSBuild.dll>.upOneLevel() + \"dotnet.exe\".",
        "createdAt": "2021-09-24T23:20:59Z",
        "updatedAt": "2021-09-24T23:20:59Z",
        "author": {
          "login": "Forgind"
        }
      }
    ]
  }
}