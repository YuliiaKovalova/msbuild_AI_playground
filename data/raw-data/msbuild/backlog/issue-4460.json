{
  "number": 4460,
  "title": "Access `AllEvaluatedItems` (not just ordered with respect to items of the same item type) from within .csproj",
  "body": "### Feature Enquiry\r\n\r\nIs it possible from inside a .csproj file (perhaps using a custom MSBuild task) to access an ordered list of project items that are not just ordered with respect to the same item type? So, in the example below, being able to determine that one dog comes before the cat and another one comes after it.\r\n```\r\n<ItemGroup>\r\n    <dog Include=\"bark\" />\r\n    <cat Include=\"meow\" />\r\n    <dog Include=\"woof\" />\r\n</ItemGroup>\r\n\r\n<!--\r\n@(dog) is only ordered with respect to other dogs :(\r\n!-->\r\n```\r\nI'm aware that this [property](https://docs.microsoft.com/en-us/dotnet/api/microsoft.build.evaluation.project.allevaluateditems?view=netframework-4.8#Microsoft_Build_Evaluation_Project_AllEvaluatedItems) appears to provide this behaviour, but I only know how to access this from a VS extension project, not from inside MSBuild. Is this possible?\r\n\r\n",
  "state": "OPEN",
  "createdAt": "2019-06-21T19:22:14Z",
  "updatedAt": "2024-02-21T16:31:06Z",
  "closedAt": null,
  "author": {
    "login": "aodl"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Discussion"
  },
  "comments": {
    "nodes": [
      {
        "body": "No, that's not possible.\r\n\r\nAs a rule, MSBuild doesn't make it possible to observe project state from inside a project; rather it requires explicit reference to the items or properties you are referencing. This makes it easier to reason about what a given snippet of code will do.\r\n\r\nMay I ask what you're doing that led you to ask about this?",
        "createdAt": "2019-06-21T19:26:34Z",
        "updatedAt": "2019-06-21T19:26:34Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "That's a shame. It would be nice if MSBuild exposed a way to enumerate all project items in the order that they are declared (irrespective of item type).\r\n\r\nWhat I would like to be able to do is declare some `ProjectReferences` before some `PackageReferences` and vice versa in a project file, like below \u2193, and then be able to determine the exact ordering at build time in a task:\r\n```xml\r\n<ItemGroup>\r\n   <PackageReference Include=\"somePackage\">\r\n   <ProjectReference Include=\"someProject\">\r\n   <PackageReference Include=\"someOtherPackage\">\r\n   <ProjectReference Include=\"someOtherProject\">\r\n</ItemGroup>\r\n\r\n<!--  or even...  -->\r\n\r\n<ItemGroup>\r\n   <PackageReference Include=\"somePackage\">\r\n</ItemGroup>\r\n<ItemGroup>\r\n   <ProjectReference Include=\"someProject\">\r\n</ItemGroup>\r\n<ItemGroup>\r\n   <PackageReference Include=\"someOtherPackage\">\r\n</ItemGroup>\r\n<ItemGroup>\r\n   <ProjectReference Include=\"someOtherProject\">\r\n</ItemGroup>\r\n\r\n<!-- and then... -->\r\n\r\n<Task Name=\"WriteOrderedRefsToFile\" BeforeTargets=\"BeforeBuild\">\r\n<!-- write the ordered references to a file for lookup at runtime -->\r\n</Task>\r\n```\r\n\r\nEssentially I would like the order that a project's dependencies are declared in to be meaningful (regardless of whether they are project or package references), and at runtime I can use this order to affect the execution order of 'jobs' exposed by those dependencies.\r\n\r\nCan you think of a way to achieve this? At the moment I'm stuck doing something like this (unless of course I want to depend on a custom VS extension). \r\n```\r\n<ItemGroup>\r\n  <ProjectReference Include=\"someProject\" RefOrder=\"1\">\r\n  <PackageReference Include=\"someProject\" RefOrder=\"2\">\r\n  <ProjectReference Include=\"someProject\" RefOrder=\"3\">\r\n</ItemGroup>\r\n```\r\n\r\n\u2191 this approach isn't very convenient/maintainable as new references are added or when reordering is required :(",
        "createdAt": "2019-06-21T20:27:58Z",
        "updatedAt": "2019-06-21T20:27:58Z",
        "author": {
          "login": "aodl"
        }
      },
      {
        "body": "And why do you need to implement such approach? What are you trying to achieve with that. I believe the manual approach is the only thing that I can think of. Though, in my opinion, neither of them would be particularly maintainable.",
        "createdAt": "2019-06-25T15:42:20Z",
        "updatedAt": "2019-06-25T15:42:20Z",
        "author": {
          "login": "livarcocc"
        }
      },
      {
        "body": "There are three reasons I can think of;\r\n- **Why order matters**: The dependencies in question each encapsulate a handler that's responsible for participating in a chain of responsibility. The ordering may need to change from time to time (as new handlers are added / some are no longer needed / handler responsibilities evolve / etc.).\r\n- **Why use the declarative project item ordering instead of some imperative C# code**: Project item order has recently been given UI support (although there is [further work to be done](https://github.com/dotnet/project-system/issues/1896)). The `SortByDisplayOrder` project capability provides support for ordering project tree nodes in VS according to their project item ordering in the .csproj file, and for re-ordering those project items using 'Move up' and 'Move down' commands exposed by the Solution Explorer. \r\n- **Why put the handlers in separate assemblies in the first place**: Separating the 'handlers' into assemblies provides easy reuse in other projects that can compose and chains these handlers quickly and easily. The handlers themselves may be non-trivial, and deserve to be separate projects.\r\n\r\nAll in all, this means that the behaviour of the 'chain of responsibilities' is apparent simply by peeking at the composing project in the solution explorer, and that is also where the developer performs the reordering, at the click of a button / tap of the keyboard \u2191 \u2193. It's also naturally where the developer can add and remove handlers, and pull them into other composing projects.\r\n\r\n*Note: `SortByDisplayOrder` doesn't quite work out-of-the-box for the reference tree, but this enhancement can be provided fairly simply with a custom VSIX extension*\r\n ",
        "createdAt": "2019-06-26T21:05:53Z",
        "updatedAt": "2019-06-26T21:05:53Z",
        "author": {
          "login": "aodl"
        }
      }
    ]
  }
}