{
  "number": 7528,
  "title": "Option to fail builds when a ProjectReference does not exist",
  "body": "I have a project, `MyApp`, that depends on a source generator project, `MySourceGenerator`, like so:\r\n\r\n`MyApp.csproj`:\r\n```xml\r\n...\r\n<ItemGroup>\r\n\t<ProjectReference Include=\"..\\MySourceGenerator\\MySourceGenerator.csproj\" OutputItemType=\"Analyzer\" ReferenceOutputAssembly=\"false\" SetTargetFramework=\"TargetFramework=netstandard2.0\" />\r\n</ItemGroup>\r\n...\r\n```\r\n\r\n`MySourceGenerator` generates a class that code in `MyApp` relies on. If `MySourceGenerator` isn't found, `MyApp` fails to build, because the class that it expects `MySourceGenerator` to emit is missing, but it's difficult to find the root of the issue, because the missing project reference shows up as a warning instead of an error: `\"warning : The referenced project '..\\MySourceGenerator\\MySourceGenerator.csproj' does not exist.\"`\r\n\r\nI'd like to request a feature to be able to mark a `<ProjectReference>` as required, so that if it's missing, an error would be shown instead of a warning \ud83d\ude42",
  "state": "CLOSED",
  "createdAt": "2022-04-08T09:30:03Z",
  "updatedAt": "2024-07-23T21:46:46Z",
  "closedAt": "2024-07-23T21:46:45Z",
  "author": {
    "login": "Eli-Black-Work"
  },
  "labels": [
    "needs-design",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Backlog"
  },
  "comments": {
    "nodes": [
      {
        "body": "Sounds reasonable to me, though that shouldn't be taken as the team signing off. I think all you'd have to do is add an error corresponding to [this warning](https://github.com/dotnet/msbuild/blob/65cb4d29255ae23c07203d10c99c993fe6ee0671/src/Tasks/Microsoft.Common.CurrentVersion.targets#L2061-L2063) and give them complementary conditions based on whether it's in some \"MSBuildUnskippableProjectReference\" property.",
        "createdAt": "2022-04-12T22:51:29Z",
        "updatedAt": "2022-04-12T22:51:29Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "First of all, why is it a warning instead of an error? Anything that doesn't exist should give out an error, not warning. So that it would prompt us to look into it and fix them.",
        "createdAt": "2022-04-23T02:46:11Z",
        "updatedAt": "2022-04-23T02:46:11Z",
        "author": {
          "login": "Nirmal4G"
        }
      },
      {
        "body": "Team Triage: Adding a better error code for missing project references makes a lot of sense. What is the scenario that your `MySourceGenerator.csproj` is missing entirely?",
        "createdAt": "2022-04-28T16:37:08Z",
        "updatedAt": "2022-04-28T16:37:08Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "@BenVillalobos I think I had been manually modifying `MyApp.csproj` and messed up the path to `MySourceGenerator.csproj`",
        "createdAt": "2022-05-09T04:00:11Z",
        "updatedAt": "2022-05-09T04:00:11Z",
        "author": {
          "login": "Eli-Black-Work"
        }
      },
      {
        "body": "Actually, maybe I had incorrectly resolved some conflicts when applying a Git stash.\r\n\r\nEither way, just user error, but would still be nice to show an error instead of a warning \ud83d\ude42",
        "createdAt": "2022-05-09T04:03:14Z",
        "updatedAt": "2022-05-09T04:03:14Z",
        "author": {
          "login": "Eli-Black-Work"
        }
      },
      {
        "body": "@Bosch-Eli-Black sounds good :) retitled and triaged accordingly.",
        "createdAt": "2022-05-09T23:55:04Z",
        "updatedAt": "2022-05-09T23:55:04Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "I also suggest that only project references that are part of the build pipeline should emit error, others can emit a warning. Since, I have seen projects that generate projects on the fly or some that are not actually referenced but uses non-compiled assets from referenced projects' intermediate build.\n\nSo, we can use `ReferenceOutputAssembly`, `OutputItemType` and other metadata to check if the project reference is actually needed!",
        "createdAt": "2022-05-10T06:50:06Z",
        "updatedAt": "2022-05-10T06:50:06Z",
        "author": {
          "login": "Nirmal4G"
        }
      },
      {
        "body": "@Nirmal4G I see, I can envision some logic in Common.CurrentVersion.Targets contain some sort of `<Error Condition=\"@(ProjectReference.Identity != '' and !Exists(%(ProjectReference.Identity)) and '%(ProjectReference.ReferenceOutputAssembly)' == 'true'\"/>` \r\n\r\nThe message would imply \"you're saying you need binaries out of this thing, but we can't build it because _it doesn't exist_, what gives?\"",
        "createdAt": "2022-05-10T22:04:11Z",
        "updatedAt": "2022-05-10T22:04:11Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "I'm not sure I followed the above discussion, but if possible, I think it'd make sense for missing source generators to by default emit an error, instead of a warning \ud83d\ude42",
        "createdAt": "2022-05-13T05:49:28Z",
        "updatedAt": "2022-05-13T05:49:28Z",
        "author": {
          "login": "Eli-Black-Work"
        }
      },
      {
        "body": "@BenVillalobos Yep, that's a start.",
        "createdAt": "2022-06-08T21:04:47Z",
        "updatedAt": "2022-06-08T21:04:47Z",
        "author": {
          "login": "Nirmal4G"
        }
      },
      {
        "body": "Any update on this one? Came across this issue after a user error in one of our projects. Was expecting that it would have failed the build, but it did not ",
        "createdAt": "2024-05-20T11:34:57Z",
        "updatedAt": "2024-05-20T11:34:57Z",
        "author": {
          "login": "kaylumah"
        }
      },
      {
        "body": "Just ran into this issue today, and would love to know if there are any updates?",
        "createdAt": "2024-07-12T16:36:41Z",
        "updatedAt": "2024-07-12T16:36:41Z",
        "author": {
          "login": "patrickserrano"
        }
      }
    ]
  }
}