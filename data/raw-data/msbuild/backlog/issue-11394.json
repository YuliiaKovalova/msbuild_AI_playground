{
  "number": 11394,
  "title": "SimpleProjectRootElementCache throws on SDK resolution",
  "body": "### Issue Description\n\nIn QuickBuild we opt-into `MsBuildUseSimpleProjectRootElementCacheConcurrency`, and recently this started causing exceptions:\n\nStack:\n\n```\nSystem.NotImplementedException: The method or operation is not implemented.\n   at Microsoft.Build.Evaluation.SimpleProjectRootElementCache.OnProjectRootElementDirtied(ProjectRootElement sender, ProjectXmlChangedEventArgs e)\n   at Microsoft.Build.Evaluation.Evaluator`4.<>c__DisplayClass71_0.<CreateProjectForSdkResult>g__InnerCreate|0(String _, ProjectRootElementCacheBase __)\n   at Microsoft.Build.Evaluation.SimpleProjectRootElementCache.<>c__DisplayClass4_0.<GetFromOrAddToCache>b__0(String key)\n   at System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(TKey key, Func`2 valueFactory)\n   at Microsoft.Build.Evaluation.Evaluator`4.CreateProjectForSdkResult(SdkResult sdkResult)\n   at Microsoft.Build.Evaluation.Evaluator`4.ExpandAndLoadImportsFromUnescapedImportExpressionConditioned(String directoryOfImportingFile, ProjectImportElement importElement, List`1& projects, SdkResult& sdkResult)\n   at Microsoft.Build.Evaluation.Evaluator`4.ExpandAndLoadImports(String directoryOfImportingFile, ProjectImportElement importElement, SdkResult& sdkResult)\n   at Microsoft.Build.Evaluation.Evaluator`4.EvaluateImportElement(String directoryOfImportingFile, ProjectImportElement importElement)\n   at Microsoft.Build.Evaluation.Evaluator`4.PerformDepthFirstPass(ProjectRootElement currentProjectOrImport)\n   at Microsoft.Build.Evaluation.Evaluator`4.EvaluateImportElement(String directoryOfImportingFile, ProjectImportElement importElement)\n   at Microsoft.Build.Evaluation.Evaluator`4.PerformDepthFirstPass(ProjectRootElement currentProjectOrImport)\n   at Microsoft.Build.Evaluation.Evaluator`4.EvaluateImportElement(String directoryOfImportingFile, ProjectImportElement importElement)\n   at Microsoft.Build.Evaluation.Evaluator`4.PerformDepthFirstPass(ProjectRootElement currentProjectOrImport)\n   at Microsoft.Build.Evaluation.Evaluator`4.Evaluate()\n   at Microsoft.Build.Evaluation.Evaluator`4.Evaluate(IEvaluatorData`4 data, Project project, ProjectRootElement root, ProjectLoadSettings loadSettings, Int32 maxNodeCount, PropertyDictionary`1 environmentProperties, ILoggingService loggingService, IItemFactory`2 itemFactory, IToolsetProvider toolsetProvider, IDirectoryCacheFactory directoryCacheFactory, ProjectRootElementCacheBase projectRootElementCache, BuildEventContext buildEventContext, ISdkResolverService sdkResolverService, Int32 submissionId, EvaluationContext evaluationContext, Boolean interactive)\n   at Microsoft.Build.Execution.ProjectInstance.Initialize(ProjectRootElement xml, IDictionary`2 globalProperties, String explicitToolsVersion, String explicitSubToolsetVersion, Int32 visualStudioVersionFromSolution, BuildParameters buildParameters, ILoggingService loggingService, BuildEventContext buildEventContext, ISdkResolverService sdkResolverService, Int32 submissionId, Nullable`1 projectLoadSettings, EvaluationContext evaluationContext, IDirectoryCacheFactory directoryCacheFactory)\n   at Microsoft.Build.Execution.ProjectInstance..ctor(String projectFile, IDictionary`2 globalProperties, String toolsVersion, String subToolsetVersion, ProjectCollection projectCollection, Nullable`1 projectLoadSettings, EvaluationContext evaluationContext, IDirectoryCacheFactory directoryCacheFactory, Boolean interactive)\n   at Microsoft.Build.Execution.ProjectInstance.FromFile(String file, ProjectOptions options)\n   at Enlistment.DependencyParserV2.<>c__DisplayClass31_0.<ParseDirectory>b__1(String projectPath, Dictionary`2 globalProperties, ProjectCollection projCollection) in F:\\dbs\\el\\cb_m\\private\\BuildEngine\\Enlistment.Library\\src\\DependencyParserV2.cs:line 242\nERROR Error ENL21900:\nOffending file: D:\\Code\\CloudBuild\\private\\BuildEngine\\dirs.proj\nReason: Unexpected exception was thrown while parsing D:\\Code\\CloudBuild\\private\\BuildEngine\\dirs.proj.\nNotImplementedException message: The method or operation is not implemented..\nStack trace:    at Microsoft.Build.Evaluation.SimpleProjectRootElementCache.OnProjectRootElementDirtied(ProjectRootElement sender, ProjectXmlChangedEventArgs e)\n   at Microsoft.Build.Evaluation.Evaluator`4.<>c__DisplayClass71_0.<CreateProjectForSdkResult>g__InnerCreate|0(String _, ProjectRootElementCacheBase __)\n   at Microsoft.Build.Evaluation.SimpleProjectRootElementCache.<>c__DisplayClass4_0.<GetFromOrAddToCache>b__0(String key)\n   at System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(TKey key, Func`2 valueFactory)\n   at Microsoft.Build.Evaluation.Evaluator`4.CreateProjectForSdkResult(SdkResult sdkResult)\n   at Microsoft.Build.Evaluation.Evaluator`4.ExpandAndLoadImportsFromUnescapedImportExpressionConditioned(String directoryOfImportingFile, ProjectImportElement importElement, List`1& projects, SdkResult& sdkResult)\n   at Microsoft.Build.Evaluation.Evaluator`4.ExpandAndLoadImports(String directoryOfImportingFile, ProjectImportElement importElement, SdkResult& sdkResult)\n   at Microsoft.Build.Evaluation.Evaluator`4.EvaluateImportElement(String directoryOfImportingFile, ProjectImportElement importElement)\n   at Microsoft.Build.Evaluation.Evaluator`4.PerformDepthFirstPass(ProjectRootElement currentProjectOrImport)\n   at Microsoft.Build.Evaluation.Evaluator`4.EvaluateImportElement(String directoryOfImportingFile, ProjectImportElement importElement)\n   at Microsoft.Build.Evaluation.Evaluator`4.PerformDepthFirstPass(ProjectRootElement currentProjectOrImport)\n   at Microsoft.Build.Evaluation.Evaluator`4.EvaluateImportElement(String directoryOfImportingFile, ProjectImportElement importElement)\n   at Microsoft.Build.Evaluation.Evaluator`4.PerformDepthFirstPass(ProjectRootElement currentProjectOrImport)\n   at Microsoft.Build.Evaluation.Evaluator`4.Evaluate()\n   at Microsoft.Build.Evaluation.Evaluator`4.Evaluate(IEvaluatorData`4 data, Project project, ProjectRootElement root, ProjectLoadSettings loadSettings, Int32 maxNodeCount, PropertyDictionary`1 environmentProperties, ILoggingService loggingService, IItemFactory`2 itemFactory, IToolsetProvider toolsetProvider, IDirectoryCacheFactory directoryCacheFactory, ProjectRootElementCacheBase projectRootElementCache, BuildEventContext buildEventContext, ISdkResolverService sdkResolverService, Int32 submissionId, EvaluationContext evaluationContext, Boolean interactive)\n   at Microsoft.Build.Execution.ProjectInstance.Initialize(ProjectRootElement xml, IDictionary`2 globalProperties, String explicitToolsVersion, String explicitSubToolsetVersion, Int32 visualStudioVersionFromSolution, BuildParameters buildParameters, ILoggingService loggingService, BuildEventContext buildEventContext, ISdkResolverService sdkResolverService, Int32 submissionId, Nullable`1 projectLoadSettings, EvaluationContext evaluationContext, IDirectoryCacheFactory directoryCacheFactory)\n   at Microsoft.Build.Execution.ProjectInstance..ctor(String projectFile, IDictionary`2 globalProperties, String toolsVersion, String subToolsetVersion, ProjectCollection projectCollection, Nullable`1 projectLoadSettings, EvaluationContext evaluationContext, IDirectoryCacheFactory directoryCacheFactory, Boolean interactive)\n   at Microsoft.Build.Execution.ProjectInstance.FromFile(String file, ProjectOptions options)\n```\n\nI don't have an exact version that this started and haven't isolated the issue to a specific change at this point.\n\nThe throw appears to happen here when setting the FullPath of the ProjectRootElement, which calls `MarkDirty` which calls `OnProjectRootElementDirtied` which is not implemented in `SimpleProjectRootElementCache`:\n![Image](https://github.com/user-attachments/assets/db405467-8282-4044-83c9-429f474f36e1)",
  "state": "CLOSED",
  "createdAt": "2025-02-05T16:52:00Z",
  "updatedAt": "2025-02-26T16:35:25Z",
  "closedAt": "2025-02-26T16:35:25Z",
  "author": {
    "login": "dfederm"
  },
  "milestone": null,
  "assignees": {
    "nodes": [
      {
        "login": "surayya-MS"
      }
    ]
  },
  "labels": [
    "triaged"
  ],
  "comments": {
    "nodes": [
      {
        "body": "Version where it repros:\n```\n>msbuild /version\nMSBuild version 17.14.0-preview-25063-09+3b7f99137 for .NET Framework\n17.14.0.6309\n```\n\nVersion where it does not:\n```\n>msbuild /version\nMSBuild version 17.13.9+e0f243f1e for .NET Framework\n17.13.9.7704\n```\n\nSorry, I don't have a more narrow range, just public preview vs int preview.",
        "createdAt": "2025-02-05T17:14:11Z",
        "author": {
          "login": "dfederm"
        }
      },
      {
        "body": "I believe this change triggered the issue: https://github.com/dotnet/sdk/pull/45364 (backported via https://github.com/dotnet/sdk/pull/45459)\n\nIt appears to be adding `PropertiesToAdd` to the sdk result. Before when there were none, the `CreateProjectForSdkResult` code path would be skipped, but now that it's populated, `CreateProjectForSdkResult` is being called which appears to create a `ProjectRootElement` on the fly and causes `SimpleProjectRootElementCache` to throw.",
        "createdAt": "2025-02-05T17:31:14Z",
        "author": {
          "login": "dfederm"
        }
      },
      {
        "body": "This implies that the `CreateProjectForSdkResult` method is using APIs which are causing a lot of dirtiness events to be raised unnecessarily. When loading a project file from disk, the XML document is parsed and then put into the `ProjectRootElement` all at once. `CreateProjectForSdkResult` is adding to the XML one element at a time.\n\nA possible solution which both fixes this bug and may (very slightly) improve performance would be to build the XmlDocument first and use the overload of `ProjectRootElement` which takes a `XmlDocumentWithLocation`. That would avoid all the unnecessary events from being raised.",
        "createdAt": "2025-02-05T17:45:24Z",
        "author": {
          "login": "dfederm"
        }
      },
      {
        "body": "> the sdk result. Before when there were none, the `CreateProjectForSdkResult` code path would be skipped, but now that it's populated, `CreateProjectForSdkResult` is being called which appears to create a `ProjectRootElement` on the fly and causes `SimpleProjectRootElementCache` to throw.\n\ncc: @surayya-MS @baronfel ",
        "createdAt": "2025-02-06T14:09:34Z",
        "author": {
          "login": "YuliiaKovalova"
        }
      },
      {
        "body": "@jeffkl @AndyGerlicher fyi it looks like this affects `slngen` too.",
        "createdAt": "2025-02-06T18:43:01Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald @surayya-MS I have engineers reporting it their flows are broken (inability to use slngen, our entry point) - what's the current workaround/advice we're giving here? Is my understanding correct from the issue that it's the MSBuild version that broke binary compat here? (are we adding the old overload back?)",
        "createdAt": "2025-02-12T17:08:10Z",
        "author": {
          "login": "NickCraver"
        }
      },
      {
        "body": "It's not exactly a binary compat thing, it's the interaction of the SDK and the not-exactly-supported `MsBuildUseSimpleProjectRootElementCacheConcurrency`. I wonder if while investigating a long-term fix we should see if we can produce an `slngen` that doesn't use that.\n\nOr I guess we could ignore the env var in MSBuild . . .",
        "createdAt": "2025-02-12T17:14:03Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "If it helps, I've just advised our team to not upgrade to 17.13.x if they haven't, and rollback if they have - this one's a pretty nasty blocker to doing much of anything given it's how we launch VS. If I can help unblock something here, happy to lend a hand.",
        "createdAt": "2025-02-12T17:16:58Z",
        "author": {
          "login": "NickCraver"
        }
      },
      {
        "body": "Wait, you're seeing this in 17.13? I only saw it in 17.14 builds, that definitely bumps the priority.",
        "createdAt": "2025-02-12T17:56:49Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> Wait, you're seeing this in 17.13? I only saw it in 17.14 builds, that definitely bumps the priority.\n\nyes, after update from 17.12.4 to 17.3 our team (200+ developers) is not able to generate sln files, spent few hours repairing and later reinstalling VS, until I run into this open bug, so now I know it's not my wrong VS installation",
        "createdAt": "2025-02-12T18:07:04Z",
        "author": {
          "login": "PiDiBi"
        }
      },
      {
        "body": "> not-exactly-supported MsBuildUseSimpleProjectRootElementCacheConcurrency\n\nOne discussion we had on our end is if this is still even useful. At the time it had significant performance gains for large repos, but perhaps it's worth re-evaluating to see if that's still the case.",
        "createdAt": "2025-02-12T19:48:45Z",
        "author": {
          "login": "dfederm"
        }
      },
      {
        "body": "@NickCraver @pidibi Please give slngen v12.0.10 a chance; it should opt out of the problematic behavior automatically for affected VS/MSBuild builds.",
        "createdAt": "2025-02-12T21:40:23Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald Looking good here, thanks a ton for the quick turnaround - I'll push a new tools manifest and get the team going.",
        "createdAt": "2025-02-12T21:54:03Z",
        "author": {
          "login": "NickCraver"
        }
      },
      {
        "body": "Thank you @dfederm for the detailed bug description and pointing to the exact places in code that trow exception. The problem is exactly what you described. I'm currently investigating to find the best solution.",
        "createdAt": "2025-02-13T16:49:34Z",
        "author": {
          "login": "surayya-MS"
        }
      }
    ]
  }
}