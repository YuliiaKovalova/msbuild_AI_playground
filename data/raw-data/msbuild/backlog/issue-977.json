{
  "number": 977,
  "title": "Feature Request: ExecShell",
  "body": "Throwing this up for discussion based on the conversations today around extension inference in exec. \n\nLet's flesh out the requirements, and features this task should implement. \n## Extension Inference\n\nFrom the migration perspective, extension inference is a must, and which extensions are inferred should be configurable via a semicolon delimited list passed as a task parameter (`InferredExtensions`?)\n\nDetermining the first token in the passed in `Command` for this task, is a difficult but solved problem. We can take advantage of existing implementations of these algorithms.\n\nFor breaking apart the input string array into tokens we can use the implementation in CoreFX that does this:\nhttps://github.com/dotnet/corefx/blob/master/src/System.Diagnostics.Process/src/System/Diagnostics/Process.Unix.cs#L437\n\nAfter mutating the tokens, to recombine them into a single string for use by Process.Start, we can use the analog implementation of the above algorithm present in the cli:\nhttps://github.com/dotnet/cli/blob/rel/1.0.0/src/Microsoft.DotNet.Cli.Utils/ArgumentEscaper.cs#L23\n\n@rainersigwald @livarcocc @eerhardt @cdmihai @AndyGerlicher @Sarabeth-Jaffe-Microsoft \n",
  "state": "OPEN",
  "createdAt": "2016-08-29T23:38:55Z",
  "updatedAt": "2024-02-21T16:38:17Z",
  "closedAt": null,
  "author": {
    "login": "brthor"
  },
  "labels": [
    "xplat",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "To take a step back: the motivation for this desire is that it's common practice (look even in our own repo!) to have two copies of a script, for example `build.sh` for *nix and `build.cmd` for Windows. But then it's a hassle to refer to the script in an `Exec` task, because you have to splice in a different script depending on the current environment.\n\nThe `dotnet` CLI solved this in `project.json` by being smart: given a tool definition like `build argument1 argument2`, there was logical fallback behavior to determine that `build` might be a script, and then to order candidates to find the best one.\n\nWe thought about adding similar behavior to `Exec`. But that's concerning, because `Exec` has always behaved as though its contents were themselves in a script, and changing that seems risky.\n\nCreating a new built-in task `ExecScript` task would have no compat impact, and the behavior could be clear from the arguments and call location.\n",
        "createdAt": "2016-08-30T15:37:30Z",
        "updatedAt": "2016-08-30T15:37:30Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Would it make sense to add a property to Exec like `IsScript=true` which could enable this logic?  I'm worried maintaining to tasks might be a problem.  Unless this `ExecScript` just inherits from `Exec`...\n",
        "createdAt": "2016-08-30T15:45:45Z",
        "updatedAt": "2016-08-30T15:47:11Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "\u2753 Open design question:\n\nWhat should the arguments to this task be? I see a decision point:\n- \"Command Line\" as an argument.\n  - \u2795: Directly analagous to `Exec`\n  - \u2795: Requires minimal logic at conversion-from-`project.json` time\n  - \u2796: Requires parsing the command line for every task execution--and that's not trivial\n- Separate \"script\" and \"arguments\" arguments\n  - \u2795: Makes it very clear at the call site what will be substituted\n  - \u2795: Simpler to implement\n  - \u2795: More analagous to `Process.Start`\n  - \u2796: Requires conversion logic to handle the tokenization + splitting\n  - \u2796: More verbose, somewhat harder to call correctly\n\nI lean toward the latter: a simpler implementation is more likely to be correct, and conversion is a point-in-time problem; we should provide a good way to deal with the long future.\n",
        "createdAt": "2016-08-30T15:45:55Z",
        "updatedAt": "2016-08-30T15:45:55Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "\u2753 Open design question:\n\nIs there an opportunity to combine this with #399 (direct `Process.Start` with no shell layer)? Some of the design considerations are similar.\n",
        "createdAt": "2016-08-30T15:47:58Z",
        "updatedAt": "2016-08-30T15:47:58Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Maybe `ExecScript` could have an `InvocationMode` parameter which defaults to using `Process.Start`, but the user could also pick a shell exec?\n",
        "createdAt": "2016-08-30T17:52:20Z",
        "updatedAt": "2016-08-30T17:52:20Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "Aside: I do not like the name `ExecShell`, as it implies invokes a shell, which sounds crazy. \n\nExtension inference also seems unnecessary.\n\nHere's why: `Process.Start()` will automatically check some filename extensions including `.exe` and `.cmd` to determine file extensions to use. For example, if you have a `foo.cmd` file, and you [`Process.Start(\"foo\", \"\")`](https://msdn.microsoft.com/en-us/library/h6ak8zt5%28v=vs.110%29.aspx), `foo.cmd` will be executed.\n\n> Similarly, in the same way that the **Run** dialog box can accept an executable file name with or without the .exe extension, the .exe extension is optional in the _fileName_ parameter.\n\nThis thus provides a portable cross-platform pattern: instead of platform-specific file-extensions, _embrace convention_: provide a `build` script for Unix, and a `build.cmd` script for Windows. `<ExecProcess FileName=\"build\" .../>` will be `Process.Start (\"build\", ...)`, and on Unix that will invoke `build`, while on Windows that will build `build.cmd`, and everybody is happy. :-)\n\nI thus think that this issue is actually a duplicate of Issue #399.\n",
        "createdAt": "2016-08-30T18:40:12Z",
        "updatedAt": "2016-08-30T18:51:26Z",
        "author": {
          "login": "jonpryor"
        }
      },
      {
        "body": "Thanks for taking this a step back and looking at the high level @rainersigwald \n\n`ExecShell` was entirely something I made up and I like `ExecScript` as the name quite a bit better, it fits with the intentions.\n\n> Is there an opportunity to combine this with #399 (direct Process.Start with no shell layer)? Some of the design considerations are similar.\n\nFrom my experience dealing with splitting, recombining command line arguments in the cli, avoiding a shell layer will make this problem simpler. \ud83d\udc4d for this\n\n> What should the arguments to this task be? I see a decision point:\n\nI would like to propose a 3rd option (very similar to option #2) which will create less indirection from a user perspective. \n- Separate \"Executable\" and \"Arguments\" (Arguments takes in an item group or semicolon delimited property)\n\n\u2795: Makes it very clear at the call site what will end up in my string[] args in main of my next program, Users don't need to worry about escaping, string[] args will be the exact strings put into the items\n\u2795: Makes it very clear at the call site what will be substituted\n\u2795: Simpler to implement, can leverage CLI code for escaping\n\u2795: More analagous to Process.Start, except the bad parts where you need to escape things\n\u2796: Requires conversion logic to handle the tokenization + splitting\n\u2796: More verbose, somewhat harder to call correctly\n\nI think the primary difference here is that Arguments is an item group. The intention is that whatever strings are put in there will be the exact argument array passed to the `Executable`. This puts the onus of escaping properly on us, and not on the users. This is possible if we do as Rainer suggested and use Process.Start directly rather than use a shell layer. Using a shell layer will be much more difficult to implement this correctly on all platforms. CLI implemented this with robust tests surrounding it, so potential for reuse is there. \n\n@cdmihai \n\n> Maybe ExecScript could have an InvocationMode parameter which defaults to using Process.Start, but the user could also pick a shell exec?\n\nThis is very similar to Process.Start but would require that we develop escaping logic for every supported shell or put that onus on the user. \n\n@jonpryor \n\n> Extension inference also seems unnecessary.\n\nThe extension inference you're referring to is only present on Windows AFAIK and IIRC is based on the PATHEXT environment variable. The Windows only piece is enough reason to need this feature, but I think the fact that the inferred extensions are based on an environment variable is very undesirable for creating reproducible, deterministic builds.\n\nThe example you've given supposes that build has no extension, but what if build has the `sh` extension, or I have a `build.sh` and `build.py` that I want to use on different platforms, where bash isn't available. That's somewhat contrived but I think shows a basic use case for script extension inference on all platforms.\n",
        "createdAt": "2016-08-30T21:44:48Z",
        "updatedAt": "2016-08-30T21:44:48Z",
        "author": {
          "login": "brthor"
        }
      },
      {
        "body": "Do we have enough to make a choice here? If so, can we pick one and get an ETA to when we can get this in?\n",
        "createdAt": "2016-09-06T18:38:21Z",
        "updatedAt": "2016-09-06T18:38:21Z",
        "author": {
          "login": "livarcocc"
        }
      },
      {
        "body": "To weigh somewhat on the \"extensionless\" scripts mentioned above, I don't think we should force our users down a specific convention in this case given the prevalent amount of evidence that people do, in fact, use the `.sh` extension for their build scripts (and, as @brthor mentioned, there are other languages you may opt for in this use case). Forcing people to mess with their scripts in this way sounds like a non-optimal UX to me. \n",
        "createdAt": "2016-09-07T19:17:43Z",
        "updatedAt": "2016-09-07T19:17:43Z",
        "author": {
          "login": "blackdwarf"
        }
      }
    ]
  }
}