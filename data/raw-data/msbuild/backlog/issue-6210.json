{
  "number": 6210,
  "title": "Unable to produce framework-less nuget using msbuild sdk project",
  "body": "<!-- This is a template that helps us provide quicker feedback. Please use any relevant sections and delete anything you don't need. -->\r\n\r\n### Issue Description\r\n\r\nI'm attempting to use the new sdk targets to build a frameworkless nuget package. This package contains no .net code, so should have no framework dependencies. However, when I create an SDK style project (either using notargets, or the C# sdk), I get build errors.\r\n\r\nNote, we do have a workaround for this bug to (a) set the framework to some dummy value, and (b) disable dependencies. However this is pretty fragile, and would prefer to align with supported msbuild features if possible.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Create a new C# project\r\n2. Change the SDK to Microsoft.Build.NoTargets/2.0.1\r\n3. Remove the `<TargetFramework>` and `<TargetFrameworks>` lists\r\n4. Add at least one `<None Pack=\"true\"... >` item to the project\r\n5. `dotnet pack`\r\n\r\nI tested on both dotnetsdk3.1 and net6.0 preview.\r\n\r\n### Expected Behavior\r\nA nuget package is produced. That project has \r\n\r\n### Actual Behavior\r\non dotnetsdk3.1:\r\n\r\n```\r\nC:\\Program Files\\dotnet\\sdk\\3.1.406\\NuGet.targets(128,5): error : Value cannot be null. (Parameter 'folderName') [C:\\scratch\\examplenuget\\examplenuget.csproj]\r\n```\r\n\r\non net60sdk:\r\n\r\n```\r\nC:\\Program Files\\dotnet\\sdk\\6.0.100-preview.1.21103.13\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.TargetFrameworkInference.targets(92,5): error NETSDK1013: The TargetFramework value '' was not recognized. It may be misspelled. If not, then the TargetFrameworkIdentifier and/or TargetFrameworkVersion properties must be specified explicitly. [C:\\scratch\\examplenuget\\examplenuget.csproj]\r\n```\r\n\r\n### Analysis\r\nLooking at nuget.targets, it seems like this machinery really doesn't expect frameworkless code. We know msbuild in the past had very poor support for non-framework project types, but were hoping that it had improved with the new sdks.\r\n\r\nAdding `<TargetFramework>netstandard2.0</TargetFramework>` silences the build errors, but the produces a bad nuspec -- specifically, it has an unnecessary and undesirable netstandard2.0 entry:\r\n\r\n```\r\n<dependencies>\r\n  <group targetFramework=\".NETStandard2.0\" />\r\n</dependencies>\r\n```\r\n\r\nPrevious versions of our nuget using proprietary project types did not include this dependency. While we'd like to get off of using proprietary tools to build nuget files, we also need to not regress our dependencies list.\r\n\r\n### Versions & Configurations\r\n- Windows 10 and,\r\n- dotnetsdk 3.1.406 or\r\n- net60sdk 6.0.100-preview.1.21103.13\r\n\r\n\r\n### Attach a binlog\r\nn/a",
  "state": "CLOSED",
  "createdAt": "2021-03-02T19:57:32Z",
  "updatedAt": "2024-02-21T14:14:38Z",
  "closedAt": "2021-03-05T18:28:23Z",
  "author": {
    "login": "ghost"
  },
  "labels": [
    "bug",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "Forgind"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Team Triage: @nkolev92 is this supported / does this seem like a nuget or msbuild issue?",
        "createdAt": "2021-03-03T16:25:52Z",
        "updatedAt": "2021-03-03T16:25:52Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "NuGet and the SDK both require a target framework to restore, build & pack.\r\n\r\n> Note, we do have a workaround for this bug to (a) set the framework to some dummy value, and (b) disable dependencies. However this is pretty fragile, and would prefer to align with supported msbuild features if possible.\r\n\r\nThat's the recommended way. There are pack switches that allow granular control over what gets packed. ",
        "createdAt": "2021-03-03T20:09:49Z",
        "updatedAt": "2021-03-03T20:09:49Z",
        "author": {
          "login": "nkolev92"
        }
      },
      {
        "body": "Sounds like you started with the best way, so closing this.",
        "createdAt": "2021-03-05T18:28:23Z",
        "updatedAt": "2021-03-05T18:28:23Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "@Forgind - how would I go about filing a feature request for this in future releases? This is really a pain to workaround and educate developers on.",
        "createdAt": "2021-03-05T18:35:27Z",
        "updatedAt": "2021-03-05T18:35:27Z",
        "author": {
          "login": "ghost"
        }
      },
      {
        "body": "That would depend on where the feature would have to be built. From `NuGet and the SDK both require a target framework`, I would assume filing an issue very similar to this one in one or both of those repos would be appropriate.\r\nhttps://github.com/dotnet/sdk\r\nand\r\nhttps://github.com/NuGet/NuGet.Client\r\nare the right repos, I believe.\r\n\r\n(Feel free to step in, nkolev92, if I'm off.)",
        "createdAt": "2021-03-07T18:41:06Z",
        "updatedAt": "2021-03-07T18:41:43Z",
        "author": {
          "login": "Forgind"
        }
      }
    ]
  }
}