{
  "number": 4249,
  "title": "<Sdk> element does not respect Conditions",
  "body": "### Steps to reproduce\r\n\r\nProject file\r\n```xml\r\n<Project>\r\n  <Sdk Name=\"DoesNotExist\" Condition=\"false\" />\r\n  <Target Name=\"Build\" />\r\n</Project>\r\n```\r\n\r\nCommand line\r\n```\r\nmsbuild\r\n```\r\n\r\n### Expected  behavior\r\nSuccessful build\r\n\r\n### Actual behavior\r\nError similar to:\r\n```\r\nE:\\tmp\\test\\Test.proj : error : C:\\Program Files\\dotnet\\sdk\\2.1.601\\Sdks\\DoesNotExist\\Sdk not found. Check that a recent enough .NET Core SDK is installed and/or increase the version specified in global.json.\r\n```\r\n\r\n### Environment data\r\n`msbuild /version` output:\r\n```\r\nMicrosoft (R) Build Engine version 16.0.450+ga8dc7f1d34 for .NET Framework\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n16.0.450.56488\r\n```\r\nOS info: Win10\r\n",
  "state": "OPEN",
  "createdAt": "2019-03-19T22:34:52Z",
  "updatedAt": "2024-02-21T16:31:40Z",
  "closedAt": null,
  "author": {
    "login": "dfederm"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Note that a workaround is to extract out a targets file that does nothing but use the Sdk, and then conditionally import that targets file.\r\n\r\nIt's slightly semantically different though, but could work in many cases.\r\n\r\nIE:\r\nFoo.proj\r\n```\r\n<Project>\r\n  <Import Project=\"Sdk.targets\" Condition=\"false\" />\r\n  <Target Name=\"Build\" />\r\n</Project>\r\n```\r\n\r\nSdk.targets:\r\n```\r\n<Project>\r\n  <Sdk Name=\"DoesNotExist\" />\r\n</Project>\r\n```",
        "createdAt": "2019-03-19T22:39:41Z",
        "updatedAt": "2019-03-19T22:39:41Z",
        "author": {
          "login": "dfederm"
        }
      },
      {
        "body": "This feels \"by design\" to me. I wish we errored when the condition was detected, but I don't know if anyone has used this construct (and thus would be broken by the change from \"silent weird behavior\" to \"invalid project\").",
        "createdAt": "2019-03-19T22:40:36Z",
        "updatedAt": "2019-03-19T22:40:36Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> Sdk.targets:\r\n> \r\n> ```\r\n> <Project>\r\n>   <Sdk Name=\"DoesNotExist\" />\r\n> </Project>\r\n> ```\r\n\r\nThis doesn't throw an error? \ud83d\ude2c\r\n\r\nDon't do this: use an Sdk only in your entry-point project.",
        "createdAt": "2019-03-19T22:41:16Z",
        "updatedAt": "2019-03-19T22:41:16Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> This doesn't throw an error? \ud83d\ude2c\r\n\r\nIt doesn't because it doesn't end up getting imported since the condition is false :)\r\n\r\n> Don't do this: use an Sdk only in your entry-point project.\r\n\r\nIt can be helpful to be in Directory.Build.targets if all your projects need to use a particular SDK, eg Microsoft.Build.CentralPackageVersions.\r\n\r\nAnother workaround as per our offline discussion is to do:\r\n```\r\n<Import Sdk=\"SomeSdk\" Project=\"Sdk.props\" Condition=\"$(SomeCondition)\" />\r\n<!-- Rest of the stuff -->\r\n<Import Sdk=\"SomeSdk\" Project=\"Sdk.targets\" Condition=\"$(SomeCondition)\" />\r\n```",
        "createdAt": "2019-03-19T22:55:07Z",
        "updatedAt": "2019-03-19T22:55:25Z",
        "author": {
          "login": "dfederm"
        }
      },
      {
        "body": "I think we could transfer the condition from the `<Sdk />` element to the implicit import:\r\n\r\nSo \r\n```xml\r\n<Project>\r\n  <Sdk Name=\"DoesNotExist\" Condition=\"false\" />\r\n  <Target Name=\"Build\" />\r\n</Project>\r\n```\r\n\r\nWould become:\r\n\r\n```xml\r\n<Project>\r\n  <Import Project=\"Sdk.props\" Sdk=\"DoesNotExist\" Condition=\"false\" />\r\n  <Target Name=\"Build\" />\r\n  <Import Project=\"Sdk.targets\" Sdk=\"DoesNotExist\" Condition=\"false\" />\r\n</Project>\r\n```\r\n\r\nWe can't actually apply conditions to `<Sdk />` elements because the implicit imports are added way before property evaluation.  But transferring the conditions to the `<Import />` elements would make this work.  A single `<Sdk />` element does become an import at the top and bottom so people would have to understand that the condition might change.\r\n\r\nSo this:\r\n\r\n```xml\r\n<Project>\r\n  <Sdk Name=\"DoesNotExist\" Condition=\"'$(Something)' == 'true'\" />\r\n  <PropertyGroup>\r\n    <Something>True</Something>\r\n  </PropertyGroup>\r\n  <Target Name=\"Build\" />\r\n</Project>\r\n```\r\n\r\nWould get expanded to this:\r\n```xml\r\n<Project>\r\n  <Import Project=\"Sdk.props\" Sdk=\"DoesNotExist\" Condition=\"'$(Something)' == 'true'\" />\r\n  <PropertyGroup>\r\n    <Something>True</Something>\r\n  </PropertyGroup>\r\n  <Target Name=\"Build\" />\r\n  <Import Project=\"Sdk.targets\" Sdk=\"DoesNotExist\" Condition=\"'$(Something)' == 'true'\" />\r\n</Project>\r\n```\r\n\r\nAnd the `Sdk.props` would not be imported but the `Sdk.targets` would be.  Just something to consider.",
        "createdAt": "2019-03-20T03:31:18Z",
        "updatedAt": "2019-03-20T03:31:18Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "That feels like a change that's not worth the risk to me:\r\n\r\n* possiblity of torn imports that you point out (condition changes between props and targets)\r\n* paying attention to the condition could break someone (`Condition=\"false\"` was ignored before, would be consumed now).\r\n\r\nI wish it could have been that way from the beginning, though.",
        "createdAt": "2019-03-20T15:47:22Z",
        "updatedAt": "2019-03-20T15:47:22Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I find it a pain that it's considered a risk to break someone. I think in this case it should be ok to break someone as a vast majority of users would probably expect the Condition part of the element to be expanded to the ``<Import Project=... Sdk=... Condition=... />``.\r\n\r\nWhy is it you ask? Because let's use ``Microsoft.NET.Sdk`` and ``Microsoft.NET.Sdk.Web`` for example, while ``Sdk.props`` defines a property when it's imported, ``Sdk.targets`` in those sdk's do not so there is the possibility that the ``Sdk.targets`` for those sdks can be imported multiple times within one's custom msbuild sdk that imports one (or both) of those sdks conditionally. That is why one would want to use the ``<Sdk>`` element inside of their custom .NET SDK's only to find that they now run into this issue (which I feel should be fixed).",
        "createdAt": "2022-09-18T07:22:21Z",
        "updatedAt": "2022-09-18T07:27:32Z",
        "author": {
          "login": "AraHaan"
        }
      },
      {
        "body": "MSBuild has [change waves](https://docs.microsoft.com/visualstudio/msbuild/change-waves) now, so the warning about Condition not being supported in Sdk could be made conditional on that.",
        "createdAt": "2022-09-18T09:46:53Z",
        "updatedAt": "2022-09-18T09:48:09Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      }
    ]
  }
}