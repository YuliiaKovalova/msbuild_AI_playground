{
  "number": 7438,
  "title": "Conditional Project Reference in subproject not resolved or compiled",
  "body": "<!-- NOTE: The MSBuild team receives a lot of issues and we need to prioritize them accordingly. Please understand that we may not get to your issue for some time. -->\r\n<!-- This is a template that helps us provide quicker feedback. Please use any relevant sections and delete anything you don't need. -->\r\n\r\n<!--\r\n* Here are some useful links to help you figure out what's wrong.\r\n* Our wiki: https://github.com/microsoft/msbuild/blob/master/documentation/wiki/Home.md\r\n* General Help: https://github.com/microsoft/msbuild/blob/master/documentation/wiki/Something's-wrong-in-my-build.md\r\n* Tips & Tricks: https://github.com/microsoft/msbuild/blob/master/documentation/wiki/MSBuild-Tips-%26-Tricks.md\r\n-->\r\n\r\n### Issue Description\r\n<!--\r\n* Please include a clear and concise description of the problem.\r\n-->\r\nWhen a project contains a reference to another project with conditional dependencies, such as\r\n\r\n```xml\r\n\r\n<ItemGroup>\r\n\t<PackageReference Condition=\"'$(WinUITarget)' == '2.x'\" Include=\"Uno.UI\" Version=\"4.0.13\"/>\r\n\t<PackageReference Condition=\"'$(WinUITarget)' == '3.x'\" Include=\"Uno.WinUI\" Version=\"4.0.13\"/>\r\n</ItemGroup>\r\n\r\n```\r\n\r\nInvestigating the binlog, the package reference is picked up by some Targets (`ResolvePackageAssets`, `CollectPackageReferences`, etc), but not other Targets (`ResolveAssemblyReferences`, `CoreCompile`), causing the final build to fail due to namespaces from those packages not resolving.\r\n\r\n### Steps to Reproduce\r\n<!--\r\n* Include as much of the following if possible:\r\n\r\n* A minimal sample project that reproduces the issue.\r\n* Your zipped project.\r\n* IDE / CLI steps to create the project and reproduce the behaviour.\r\n* Your command line invocation\r\n\r\nIf providing steps to reproduce the issue proves difficult, consider attaching a binlog:\r\n[Details on sharing binary logs](https://aka.ms/msbuild/binlog)\r\n[More information on binary logs](https://github.com/dotnet/msbuild/blob/main/documentation/wiki/Binary-Log.md)\r\nNOTE: Binary logs capture environment information. Ensure it does not include any information you don't want to be public before you attach one.\r\nIf you want to share one just with Microsoft, you can [report a problem through Visual Studio](https://developercommunity.visualstudio.com/report) and share it privately with Microsoft.\r\n-->\r\n\r\nA fully, minimal repro will be available here until this issue is closed\r\nhttps://github.com/Arlodotexe/ConditionalPackageReferenceTest\r\n\r\nOtherwise, a backup of the repository and the binlogs are attached:\r\n[ConditionalPackageReferenceTest.zip](https://github.com/dotnet/msbuild/files/8188985/ConditionalPackageReferenceTest.zip)\r\n[ConditionalPackageReferenceTest.binlogs.zip](https://github.com/dotnet/msbuild/files/8188986/ConditionalPackageReferenceTest.binlogs.zip)\r\n\r\n### Expected Behavior\r\n<!--\r\n* Include what you are trying to do, and the expected output or behavior.\r\n-->\r\nBuild should succeed when package references are conditional.\r\n\r\n### Actual Behavior\r\n<!--\r\n* Include the actual output or behavior.\r\n-->\r\nInnermost project fails to build due to the assembly in the conditional package reference not being passed to the `CoreCompile` task.\r\n",
  "state": "CLOSED",
  "createdAt": "2022-03-04T22:07:49Z",
  "updatedAt": "2024-02-21T14:09:29Z",
  "closedAt": "2022-05-22T19:00:54Z",
  "author": {
    "login": "Arlodotexe"
  },
  "labels": [
    "needs-more-info",
    "author-responded",
    "stale",
    "closed-by-bot",
    "needs-attention",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Pinging @nkolev92  _just in case_ it's something obvious from the nuget side of things",
        "createdAt": "2022-03-07T23:49:54Z",
        "updatedAt": "2022-03-07T23:49:54Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "AdditionalProperties, UndefineProperties and the likes just won't work through ProjectReference. \r\n\r\nhttps://github.com/NuGet/Home/issues/7286 Feel free to upvote that issue for the NuGet side of it all. \r\nI think there might be more on the SDK/MSBuild side, but I just haven't done enough digging on that end to know what that may look like. \r\n",
        "createdAt": "2022-03-08T01:30:43Z",
        "updatedAt": "2022-03-08T01:30:43Z",
        "author": {
          "login": "nkolev92"
        }
      },
      {
        "body": "Thanks @nkolev92, I think we're hitting this limitation mentioned in the docs page [here](https://docs.microsoft.com/en-us/nuget/consume-packages/package-references-in-project-files#adding-a-packagereference-condition):\r\n\r\n> You can use a condition to control whether a package is included, where conditions can use any MSBuild variable or a variable defined in the targets or props file. _However, at presently, only the TargetFramework variable is supported.\r\n\r\nIs that the issue you linked to or would it be a different one?",
        "createdAt": "2022-03-08T17:19:36Z",
        "updatedAt": "2022-03-08T17:19:36Z",
        "author": {
          "login": "michael-hawker"
        }
      },
      {
        "body": "I think that docs statement is an oversimplification. Technically you can set references based on a property, but that property is not the pivot. The pivot for a restore graph is TargetFramework only, meaning each value in TargetFrameworks gets its own graph.\r\n\r\nI don't think that's the same thing as the issue here.",
        "createdAt": "2022-03-08T23:36:15Z",
        "updatedAt": "2022-03-08T23:36:15Z",
        "author": {
          "login": "nkolev92"
        }
      },
      {
        "body": "Team Triage: Do you see this issue when using `Microsoft.NET.Sdk` as your SDK instead of `MSBuild.Sdk.Extras`?",
        "createdAt": "2022-03-31T16:51:03Z",
        "updatedAt": "2022-03-31T16:51:03Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "This issue is marked as stale because feedback has been requested for 30 days with no response. Please respond within 14 days or this issue will be closed due to inactivity.",
        "createdAt": "2022-05-08T00:01:00Z",
        "updatedAt": "2022-05-08T00:01:00Z",
        "author": {
          "login": "ghost"
        }
      },
      {
        "body": "This issue was closed due to inactivity. If you can still reproduce this bug, please comment with the requested information, detailed steps to reproduce the problem, or any other notes that might help in the investigation.",
        "createdAt": "2022-05-22T19:00:56Z",
        "updatedAt": "2022-05-22T19:00:56Z",
        "author": {
          "login": "ghost"
        }
      },
      {
        "body": "@Arlodotexe looks like there was a question for you about the SDK type from end of March.",
        "createdAt": "2022-05-23T05:56:25Z",
        "updatedAt": "2022-05-23T05:56:25Z",
        "author": {
          "login": "michael-hawker"
        }
      },
      {
        "body": "> @Arlodotexe looks like there was a question for you about the SDK type from end of March.\r\n\r\nThanks @michael-hawker, I wasn't sure that this was directed at me.\r\n\r\nComing back to this, it looks like the repro I provided only works from the command line using `msbuild /r /bl`, not in Visual Studio. You'll notice errors such as `The type or namespace name 'Windows' could not be found`, caused by the Uno nuget package not being selected.\r\n\r\nWe've temporarily worked around this in our project by effectively not using this approach, and instead switching between these 2 packages (WinUI 2 and 3) when under netstandard2.0 by running a PowerShell script before opening the solution.\r\n\r\n---\r\n\r\n>  Team Triage: Do you see this issue when using Microsoft.NET.Sdk as your SDK instead of MSBuild.Sdk.Extras?\r\n\r\nSwitching either/both library and wasm head to use `Microsoft.NET.Sdk` doesn't have any effect.",
        "createdAt": "2022-05-23T20:21:24Z",
        "updatedAt": "2022-05-23T20:21:24Z",
        "author": {
          "login": "Arlodotexe"
        }
      },
      {
        "body": "> switch between these 2 packages (WinUI 2 and 3) when under `netstandard2.0` by running a PowerShell script before opening the solution.\n\nA better solution would be to use `Platforms`/`Platform` similar to what MSBuild repo uses.",
        "createdAt": "2022-06-08T21:11:06Z",
        "updatedAt": "2022-06-08T21:11:06Z",
        "author": {
          "login": "Nirmal4G"
        }
      },
      {
        "body": "@BenVillalobos is this enough info from Arlo or are you looking for more?",
        "createdAt": "2022-06-08T22:16:51Z",
        "updatedAt": "2022-06-08T22:16:51Z",
        "author": {
          "login": "michael-hawker"
        }
      },
      {
        "body": "After months of using our current workaround and organizing projects around it, I've realized that conditionally imported props files with PackageReferences don't have this issue.\r\n\r\nWhich means we might have a workaround*. Put the package references in a props file, add your condition to the prop import, and it should work even in a library project / subproject.\r\n\r\n```xml\r\n<Project Import=\"File.props\" Condition=\"'$(Variable)' == 'true'\"/>\r\n```\r\n\r\n*Still needs to be tested. There's an equal chance that what I'm seeing is `Exists()` working while `'$(Variable)' == 'true'` isn't. Either way, it yields a potential workaround.\r\n\r\n\r\nUpdate:\r\nAfter some tests, I've narrowed down some odd behavior that may be related to why we can't use variables to swap PackageReferences:\r\n- `$(TargetFramework)` doesn't have a value when used as a condition on a `<PropertyGroup>`.\r\n- `$(TargetFramework)` doesn't have a value when used as a condition on a property within a `<PropertyGroup>`.\r\n- `$(TargetFramework)` doesn't have a value when used as the value of a property within a `<PropertyGroup>`.\r\n- `$(TargetFramework)` doesn't have a value when used on an `<Import Project=\"$(TargetFramework)\">`.\r\n- `$(TargetFramework)` does have a value when used on an `<Import>` Condition.\r\n- `$(TargetFramework)` does have a value when used on an `<ItemGroup>`.\r\n- `$(TargetFramework)` does have a value when used something within an `<ItemGroup>`.\r\n\r\nSince this seems to be an issue with how variables are evaluated, `Exists()` and all the other MSBuild property functions still work as expected. \r\n\r\nUpdate 2:\r\nAfter more testing, it appears that when the library project being built is `netstandard2.0`:\r\n-  `$(TargetFramework)` **does** have a value when used as a condition on a property within a `<PropertyGroup>`.\r\n\r\nI'll keep gathering more information.",
        "createdAt": "2022-07-12T22:43:35Z",
        "updatedAt": "2022-07-15T18:49:00Z",
        "author": {
          "login": "Arlodotexe"
        }
      },
      {
        "body": "@Arlodotexe\r\n\r\nThere will be differences when using `TargetFrameworks` vs `TargetFramework` since multi-build comes into play. The outer build will be based on an empty `TargetFramework` and the inner build will have that property populated. And some MSBuild task invocations (_based on how they are implemented_) remove some global properties when dispatching an inner build. So, you could use a differently named property like `LibraryFramework` and `LibraryFrameworks` that would not go into global property removals.\r\n\r\nThat's why you're seeing these differences. But these two do concern me!\r\n\r\n> `$(TargetFramework)` doesn't have a value when used on an `<Import Project=\"$(TargetFramework)\">`.\r\n`$(TargetFramework)` does have a value when used on an `<Import>` Condition.\r\n\r\nThey should behave the same unless they are in different places like before/after `TargetFramework` declaration!\r\n\r\nAs I previously mentioned here in this <https://github.com/dotnet/msbuild/issues/7438#issuecomment-1150419199>, this could be a potential solution.",
        "createdAt": "2022-07-13T05:30:34Z",
        "updatedAt": "2022-07-13T05:34:01Z",
        "author": {
          "login": "Nirmal4G"
        }
      },
      {
        "body": "After more testing and gathering information, it seems that in non-SDK style projects, `TargetFramework` just isn't consistently available during certain steps in the build process.\r\n\r\nFor now, I've worked around this by avoiding using `TargetFramework` to switch between packages in our project heads, opting instead to add them to the csproj or a props file referenced by it, with no conditions anywhere.\r\n\r\nFor our library projects, since they're all SDK style, they don't have this issue.\r\nThanks to that, I was able to create a props file like this for our library projects:\r\n\r\n```xml\r\n<Project>\r\n    <!-- WinUI 2 / UWP -->\r\n    <ItemGroup Condition=\"'$(IsUwp)' == 'true'\">\r\n        <PackageReference Include=\"Microsoft.Toolkit.Uwp.UI.Controls.Primitives\" Version=\"7.1.2\"/>\r\n    </ItemGroup>\r\n\r\n    <!-- WinUI 2 / Uno -->\r\n    <ItemGroup Condition=\"'$(IsUno)' == 'true' AND '$(WinUIMajorVersion)' == '2'\">\r\n        <PackageReference Include=\"Uno.Microsoft.Toolkit.Uwp.UI.Controls.Primitives\" Version=\"7.1.11\"/>\r\n    </ItemGroup>\r\n\r\n    <!-- WinUI 3 / WinAppSdk -->\r\n    <ItemGroup Condition=\"'$(IsWinAppSdk)' == 'true'\">\r\n        <PackageReference Include=\"CommunityToolkit.WinUI.UI.Controls.Primitives\" Version=\"7.1.2\"/>\r\n    </ItemGroup>\r\n    \r\n    <!-- WinUI 3 / Uno -->\r\n    <ItemGroup Condition=\"'$(IsUno)' == 'true' AND '$(WinUIMajorVersion)' == '3'\">\r\n        <PackageReference Include=\"Uno.CommunityToolkit.WinUI.UI.Controls.Primitives\" Version=\"7.1.100-dev.15.g12261e2626\"/>\r\n    </ItemGroup>\r\n</Project>\r\n```\r\n\r\nWe've got a full workaround for now, but our setup no longer looks like that provided in the issue description. That means we haven't actually fixed the filed issue (despite this issue being closed).",
        "createdAt": "2022-07-19T01:20:51Z",
        "updatedAt": "2022-07-19T01:20:51Z",
        "author": {
          "login": "Arlodotexe"
        }
      }
    ]
  }
}