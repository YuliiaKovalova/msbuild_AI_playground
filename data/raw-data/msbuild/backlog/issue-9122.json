{
  "number": 9122,
  "title": "[Feature Request]: Expose the hash MSBuild uses to determine if a project should be built",
  "body": "### Summary\n\nDuring the MSBuild process expose a property which is the expected build output hash for a project so third parties can use it to make decisions in custom MSBuild tasks. \n\n### Background and Motivation\n\nIf the hash to determine if a project should be built or not is exposed then third parties could write custom tooling to implement distributed build caching. BeforeBuild we could check if the hash exists in the distributed cache and if it does download it. AfterBuild if the result doesn't already exist then we could push the results to the remote cache. The hope is to provide a C# and MSBuild native solution for distributed build caching. \r\n\r\nWhile there are higher level build systems that provide a version of distributed build caching in the C# ecosystem the correctness that an MSBuild generated hash would provide is key. As the ecosystem continues to evolve that hash would continue to be a source of truth whereas higher level build systems that aren't integrated with MSBuild provide incorrect results and run into bugs.\n\n### Proposed Feature\n\nI have no proposal. I feel like this may already be possible but could not find it, so I wanted to open an issue to start the discussion. Apologies if I should have created a different type of issue. \n\n### Alternative Designs\n\n_No response_",
  "state": "CLOSED",
  "createdAt": "2023-08-13T00:41:57Z",
  "updatedAt": "2024-03-05T13:15:01Z",
  "closedAt": "2024-03-05T10:47:37Z",
  "author": {
    "login": "Cjewett"
  },
  "labels": [
    "Feature Request",
    "author-responded"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "JaynieBai"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Hey @Cjewett, I don't think I understand what you're asking for. Can you elaborate on what you think might be hashed, at what time?\r\n\r\n> If the hash to determine if a project should be built or not\r\n\r\nSpecifically, this doesn't make sense to me. MSBuild _always_ builds projects. MSBuild's unit of incremental build is the Target (see the docs on [Incremental Builds](https://learn.microsoft.com/visualstudio/msbuild/incremental-builds)), and no hashing is involved--it's timestamp-based.",
        "createdAt": "2023-08-22T13:56:28Z",
        "updatedAt": "2023-08-22T13:56:28Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "For a per-target decision, there's hashing in the _GenerateCompileDependencyCache target, to detect if source files have to be compiled again; mere timestamps do not detect if some input files of the previous build have been removed. <https://github.com/dotnet/msbuild/blob/8e4c5731440bf770f73447758ef51b4cae31a057/src/Tasks/Microsoft.Common.CurrentVersion.targets#L3395-L3425>\n\nBut I don't understand \"expected build output hash\".  In the _GenerateCompileDependencyCache case, the hash is computed from the source file names and settings, not from the output.",
        "createdAt": "2023-08-22T15:10:38Z",
        "updatedAt": "2023-08-23T04:48:31Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "@rainersigwald @KalleOlaviNiemitalo Thanks for the responses and sorry for the confusion!\r\n\r\nMy assumption was that when MSBuild is determining if a project should or should not be built it is processing a set of inputs the project requires, performing calculations on those inputs and generating a hash, and then comparing that to a hash of the existing outputs. It sounds like no hash is calculated or maybe a combination of time and hash is used based on both responses. I still need to go over the docs and code links to gain a better understanding. \r\n\r\nReally what I'm getting at is MSBuild is processing a set of inputs and making a decision on if the code needs to be compiled again or not. We want to understand if it's possible to piggyback off of that logic and introduce distributed build cache functionality with custom targets.\r\n\r\nHypothetical scenario: \r\n1. Target Inputs does not match Outputs locally.\r\n2. Check distributed build cache if Inputs exists.\r\n3a. [Remote Cache Hit] If yes then download Outputs from distributed build cache instead of executing the Target that would have generated the Outputs locally.\r\n3b. [Remote Cache Miss] If no then execute the Target that would generate the Outputs locally. Upon completion upload the Inputs to map to the Outputs in the distributed build cache.\r\n\r\nDoes that clear the confusion? If not I'm happy to add more context and try to explain further. \r\n\r\n\r\n\r\n",
        "createdAt": "2023-08-23T08:57:53Z",
        "updatedAt": "2023-08-23T09:08:09Z",
        "author": {
          "login": "Cjewett"
        }
      },
      {
        "body": "@Cjewett You are trying to distribute the targets of a project? That will be impractical.\r\n\r\nThe `Inputs` and `Outputs` attributes on [`Target`](https://learn.microsoft.com/en-us/visualstudio/msbuild/target-element-msbuild?view=vs-2022) are optional and, when present, the values are dynamic. Most targets are logic and don't produce output files. Properties and items in the project are shared and are not scoped to targets.",
        "createdAt": "2023-08-23T15:06:16Z",
        "updatedAt": "2023-08-23T15:06:16Z",
        "author": {
          "login": "jrdodds"
        }
      },
      {
        "body": "@jrdodds Not necessarily all targets in a project but for some yes.\r\n\r\nI guess I'm a bit confused and that is likely due to my lack of understanding of the MSBuild ecosystem. \r\n\r\nWhen you run a build, and more specifically when it is determining if a project should be compiled, is it looking at an Inputs? And doesn't that map to a deterministic Outputs? https://learn.microsoft.com/en-us/visualstudio/msbuild/incremental-builds?view=vs-2022#output-inference \r\n\r\nJust thinking out loud here but based on the code below\r\nhttps://github.com/dotnet/msbuild/blob/8e4c5731440bf770f73447758ef51b4cae31a057/src/Tasks/Microsoft.Common.CurrentVersion.targets#L3395-L3425\r\n@KalleOlaviNiemitalo's explanation, and I admit further explanation by ChatGPT :laughing: it looks like some cache is being generated to determine if a project should be built. Would it not be possible to take that file, hash it, and expose it in MSBuild? That way you can use the hash and some extended MSBuild functionality to determine if a remote cache contains the build output already, and if so download cached result to the csproj's build output directory. Then it can continue down its normal build flow. \r\n\r\n\r\n",
        "createdAt": "2023-08-23T19:03:20Z",
        "updatedAt": "2023-08-23T19:03:20Z",
        "author": {
          "login": "Cjewett"
        }
      },
      {
        "body": "@Cjewett ChatGPT has probably given you misinformation. But you are probably still better off than these [lawyers](https://arstechnica.com/tech-policy/2023/06/lawyers-have-real-bad-day-in-court-after-citing-fake-cases-made-up-by-chatgpt/). :smiley:\r\n\r\nMSBuild doesn't pre-determine if a project needs to be built or not. MSBuild loads the project and follows the instructions in the project. Other tools that wrap MSBuild may have file tracking and/or caching. When you build a solution in Visual Studio and the build output reports some number of projects \"skipped\", that's Visual Studio and not MSBuild.\r\n\r\nTarget inputs and outputs are not deterministic.\r\n\r\nOutput inference is not determining target outputs. If a target has a task (or tasks) with an [`Output` element](https://learn.microsoft.com/en-us/visualstudio/msbuild/output-element-msbuild?view=vs-2022)  and the target is up to date, output inference will modify the property or item in the `Output` element as if the target had run.\r\n\r\n@KalleOlaviNiemitalo's example is hashing the inputs to see if the inputs match the inputs seen in the last build. The `.CoreCompileInputs.cache` file is a generated artifact of the build. As the comment explains, this is an additional step to catch the cases where a file has been added or removed. The cache file alone is not sufficient to know if a target needs to be run.",
        "createdAt": "2023-08-24T00:38:21Z",
        "updatedAt": "2023-08-24T00:38:21Z",
        "author": {
          "login": "jrdodds"
        }
      },
      {
        "body": "@jrdodds Thanks again for further explanation! Wanted to acknowledge I've read this and intend to respond but need to pivot to another piece of work for a few work days. ",
        "createdAt": "2023-08-25T23:04:11Z",
        "updatedAt": "2023-08-25T23:04:11Z",
        "author": {
          "login": "Cjewett"
        }
      },
      {
        "body": "@jrdodds Apologies for the delay. \r\n\r\nSo I think an example of what [nx-dotnet](https://www.nx-dotnet.com/) is doing is worth using because their solution does work.\r\n\r\nWhat they do is they add a target:\r\n```xml\r\n<Project>\r\n  <PropertyGroup>\r\n    <MSBuildProjectDirRelativePath>$([MSBuild]::MakeRelative($(RepoRoot), $(MSBuildProjectDirectory)))</MSBuildProjectDirRelativePath>\r\n    <NodeModulesRelativePath>$([MSBuild]::MakeRelative($(MSBuildProjectDirectory), $(RepoRoot)))</NodeModulesRelativePath>\r\n  </PropertyGroup>\r\n  <Target Name=\"CheckNxModuleBoundaries\" BeforeTargets=\"Build\">\r\n    <Exec Command=\"node $(NodeModulesRelativePath)/node_modules/.pnpm/@nx-dotnet+core@1.22.0_@nrwl+workspace@16.8.1_nx@16.8.1_typescript@4.9.5/node_modules/@nx-dotnet/core/src/tasks/check-module-boundaries.js --project-root &quot;$(MSBuildProjectDirRelativePath)&quot;\"/>\r\n  </Target>\r\n</Project>\r\n```\r\n\r\nThat check-module-boundaries.js is checking if the contents of the MSBuildProjectDirRelativePath matches what exists in nx-cloud according to whatever logic nx is using. If it does then copy the contents to the machine. When the next steps occur within the MSBuild process it will not build because whatever check happens after doesn't think a build needs to occur. Is there anything with fundamentally wrong with the solution they've rolled out? \r\n\r\nThere are certainly edge cases that are not caught such as changing repository level files (Directory.Packages.props), but as far as I can tell it does work. My hope is that a Microsoft solution could replace or provide a key for the logic they're using in the check-module-boundaries.js because we want something that will grow with the MSBuild ecosystem rather than live outside of it if that makes sense. \r\n\r\n\r\n\r\n",
        "createdAt": "2023-09-18T19:51:36Z",
        "updatedAt": "2023-09-18T20:03:58Z",
        "author": {
          "login": "Cjewett"
        }
      },
      {
        "body": "> Is there anything with fundamentally wrong with the solution they've rolled out?\r\n> \r\n> There are certainly edge cases that are not caught such as changing repository level files (Directory.Packages.props),\r\n\r\nYes, exactly. There's also a lot of other tricks one could pull in build logic to make trouble here.\r\n\r\nThis is a fundamental problem with layering a new incrementality model on the existing one: it's pretty doable to get it _ok_, and almost impossible to get it _right_.",
        "createdAt": "2023-09-18T19:57:09Z",
        "updatedAt": "2023-09-18T19:57:09Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> That check-module-boundaries.js is checking if the contents of the MSBuildProjectDirRelativePath matches what exists in nx-cloud according to whatever logic nx is using.\r\n\r\nComparing nx-dotnet and MSBuild is helpful to understanding what you are asking for but it is an apple to an orange comparison.\r\n\r\n> My hope is that a Microsoft solution could replace or provide a key for the logic they're using ...\r\n\r\nMSBuild was designed to build and, as the build proceeds, skip steps that are already up-to-date. Your feature request seems to be that MSBuild should have a completely different \"incrementality model\" that supports project caching.\r\n\r\nThis may be off-topic but if this is an XY problem then maybe this gets at the X. Do you trigger your builds only when there is a source control change? Do you use an internal package server? I ask because the individual package can be focused, the package builds can be distributed, and the package is the cached build product.",
        "createdAt": "2023-09-18T22:20:28Z",
        "updatedAt": "2023-09-18T22:20:28Z",
        "author": {
          "login": "jrdodds"
        }
      },
      {
        "body": "> Comparing nx-dotnet and MSBuild is helpful to understanding what you are asking for but it is an apple to an orange comparison.\r\n\r\nApologies if it seems like I was trying to compare nx-dotnet and MSBuild as that wasn't the intent. It was more so to show how others who have wanted distributed build caching have hooked into the MSBuild process to accomplish that. \r\n\r\n> This is a fundamental problem with layering a new incrementality model on the existing one: it's pretty doable to get it ok, and almost impossible to get it right.\r\n\r\nI agree which is why I wanted to start this conversation. I think those maintainers would agree that if Microsoft offered functionality to replace the `check-module-boundaries.js` piece it would be a happy day. \r\n\r\n> MSBuild was designed to build and, as the build proceeds, skip steps that are already up-to-date. Your feature request seems to be that MSBuild should have a completely different \"incrementality model\" that supports project caching.\r\n\r\nIt's possible that is where this conversation has ended up. My goal coming in was to see if this piece could be exposed.\r\n\r\n> as the build proceeds, skip steps that are already up-to-date\r\n\r\nMy assumption was if the check to determine if something was already up-to-date is exposed then maybe we could use that logic to determine if the build exists in a cache externally like nx-dotnet does but with MSBuild logic that is less fragile. It doesn't sound like that is possible though.\r\n\r\n> This may be off-topic but if this is an XY problem then maybe this gets at the X. Do you trigger your builds only when there is a source control change? Do you use an internal package server? I ask because the individual package can be focused, the package builds can be distributed, and the package is the cached build product.\r\n\r\nWe trigger builds only when there is a source control change, only build projects that were impacted by the Git changes, use RAM disks for increased performance on our build machines, and more.\r\n\r\nI assume with the internal packages what you're getting at is creating NuGet packages of the projects and referencing them from other projects via NuGet. We do have a NuGet server but in the case of this monorepository we are not leveraging it to distribute builds in the way that you described. There are a lot of fundamental changes that would need to happen and as you can imagine those type of changes take time and philosophical shifts to move forward.",
        "createdAt": "2023-09-19T13:55:49Z",
        "updatedAt": "2023-09-19T13:55:49Z",
        "author": {
          "login": "Cjewett"
        }
      },
      {
        "body": "> I think those maintainers would agree that if Microsoft offered functionality to replace the `check-module-boundaries.js` piece it would be a happy day.\r\n\r\nWell, some medium-good news for you: https://github.com/dotnet/msbuild/pull/9214 is a step in this direction. See also https://github.com/dotnet/msbuild/blob/main/documentation/specs/project-cache.md (which isn't updated for the new PR).\r\n\r\n> My goal coming in was to see if this piece could be exposed.\r\n\r\nThe important thing to understand is \"this piece\" _doesn't exist_. It was not part of the design of MSBuild. That's a major limitation of MSBuild compared to more modern build systems. Microsoft is interested in adding it in, but it's quite difficult--the effort required to get [CloudBuild](https://www.microsoft.com/en-us/research/publication/cloudbuild-microsofts-distributed-and-caching-build-service/), the main internal-to-Microsoft distribution+caching system, working on a repo is so high\r\n\r\n[BuildXL](https://github.com/microsoft/BuildXL) is another distribution and caching layer that can be applied on top of MSBuild. It provides its own understanding of the inputs/outputs based on interception and observation of the I/O syscalls made by MSBuild.exe and its launched processes.",
        "createdAt": "2023-09-19T14:29:16Z",
        "updatedAt": "2023-09-19T14:29:16Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> > as the build proceeds, skip steps that are already up-to-date\r\n>\r\n> My assumption was if the check to determine if something was already up-to-date is exposed ...\r\n\r\nOne problem is that you want the result of the check to be available and 'exposed' before MSBuild has performed the check.",
        "createdAt": "2023-09-19T14:31:15Z",
        "updatedAt": "2023-09-19T14:31:15Z",
        "author": {
          "login": "jrdodds"
        }
      },
      {
        "body": "> I assume with the internal packages what you're getting at is creating NuGet packages of the projects and referencing them from other projects via NuGet. We do have a NuGet server but in the case of this monorepository we are not leveraging it to distribute builds in the way that you described. There are a lot of fundamental changes that would need to happen and as you can imagine those type[s] of changes take time and philosophical shifts to move forward.\r\n\r\nOh, I'm very familiar with situations like those you describe. Good luck. :smiley:\r\n\r\nAnd thanks for the conversation.",
        "createdAt": "2023-09-19T21:57:32Z",
        "updatedAt": "2023-09-19T21:57:32Z",
        "author": {
          "login": "jrdodds"
        }
      },
      {
        "body": "@jrdodds Likewise! Appreciate all of your responses, guidance, and teachings. \r\n\r\n@rainersigwald It looks like the functionality in https://github.com/dotnet/msbuild/pull/9214 would fill that void which is super exciting! Thanks for sending that. It looks like that functionality will roll out in 17.8 correct? Is there an expectation to update the docs to show an example or outline how to create one of these plugins in a more tutorial-like manner or should we plan to dig into the source to understand what is going on?\r\n\r\nAlso, as this discussion is running its course I'm unsure how we want to approach the status of this issue. I'm happy to close it if we're able to track the work related to the project-cache.md design doc and related work since it seems like that is the way forward and has been in the works for quite some time. ",
        "createdAt": "2023-09-28T10:27:10Z",
        "updatedAt": "2023-09-28T10:28:48Z",
        "author": {
          "login": "Cjewett"
        }
      },
      {
        "body": "> It looks like that functionality will roll out in 17.8 correct? \r\n\r\nCorrect, though note that now that 17.9 is out there are fixes to improve the experience as https://github.com/microsoft/MSBuildCache matures.\r\n\r\n> Is there an expectation to update the docs to show an example or outline how to create one of these plugins in a more tutorial-like manner or should we plan to dig into the source to understand what is going on?\r\n\r\n@dfederm @AndyGerlicher This is a good question. I don't think we have plans to write detailed docs in the short term, right?\r\n\r\n> Also, as this discussion is running its course I'm unsure how we want to approach the status of this issue.\r\n\r\nI'm going to close for now but please let us know what questions you have!",
        "createdAt": "2024-03-05T10:47:37Z",
        "updatedAt": "2024-03-05T10:47:37Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald I'm okay closing this one. I have an e-mail chain open with @dfederm and have been keeping up to date with their improvements. We're doing the groundwork to have a pipeline which tests these changes internally as new updates roll out. Thanks everyone for the input here. Excited for this one! ",
        "createdAt": "2024-03-05T13:14:59Z",
        "updatedAt": "2024-03-05T13:14:59Z",
        "author": {
          "login": "Cjewett"
        }
      }
    ]
  }
}