{
  "number": 9521,
  "title": "[Feature Request]: Add support for object instantiation to property functions",
  "body": "### Summary\n\nProperty functions currently support invoking methods but users have to come up with creative ways to new up objects. This is a proposal to add a supported syntax for instantiating objects and calling their constructors.\n\n### Background and Motivation\n\nObjects can be created using awkward workarounds like this one:\r\n\r\n`$(MSBuildProjectDirectory.GetType().Assembly.GetType('System.AppDomain').GetProperty('CurrentDomain').GetValue(null, null).CreateInstanceAndUnwrap(mscorlib, Type.Of.The.Object.To.Instantiate))`\r\n\n\n### Proposed Feature\n\nAdd a supported syntax equivalent to the C# _new_. Preferably containing the customary word _new_, although something like `$([Type.Of.The.Object.To.Instantiate]::.ctor(Parameters))` would also do.\n\n### Alternative Designs\n\n_No response_",
  "state": "OPEN",
  "createdAt": "2023-12-12T11:21:15Z",
  "updatedAt": "2024-04-09T13:42:44Z",
  "closedAt": null,
  "author": {
    "login": "ladipro"
  },
  "labels": [
    "Feature Request",
    "Area: Documentation",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "PowerShell uses <code>[<var>Namespace.TypeName</var>]::new(<var>arguments</var>)</code>.  I wonder if this has ever caused conflicts with a static method actually named `new`.  A static factory method would usually be named `Create` instead.\n\nIs this feature request primarily for the `MSBUILDENABLEALLPROPERTYFUNCTIONS=1` case?",
        "createdAt": "2023-12-12T13:19:38Z",
        "updatedAt": "2023-12-12T13:20:02Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "Turns out MSBuild already understands `$([Type.Of.The.Object.To.Instantiate]::new(Parameters))` but it's useful only with  `MSBUILDENABLEALLPROPERTYFUNCTIONS` as you pointed out. I suspect @rainersigwald knows the history on this, in particular the reasons why it's not documented.",
        "createdAt": "2023-12-12T13:40:09Z",
        "updatedAt": "2023-12-12T13:40:09Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "I imagine there could have been two reasons for the opt-in:\n\n- Enforcing portability to alternative implementations of the MSBuild language, where the .NET BCL is not available.  Sort of like how XAML was implemented in both managed-code WPF and in unmanaged WinRT.  Nowadays this might be useful with a native-AOT compiled, trimmed MSBuild.\n- Securely loading and evaluating an untrusted project.  Nowadays this would be better served by process or virtual-machine isolation, where it's easier to be sure that there are no loopholes.\n\nI can't believe allowing access to GetType() was part of the original design.\n",
        "createdAt": "2023-12-12T14:35:31Z",
        "updatedAt": "2023-12-12T14:35:31Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "Oh, the GetType() hack was already blocked in <https://github.com/dotnet/msbuild/pull/6769> and this was documented at [Breaking change: MSBuild 17 doesn't support GetType() - .NET | Microsoft Learn](https://learn.microsoft.com/en-us/dotnet/core/compatibility/sdk/6.0/calling-gettype-property-functions).",
        "createdAt": "2024-04-03T07:23:32Z",
        "updatedAt": "2024-04-03T07:23:32Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "The blocking doesn't work though.  Filed <https://github.com/dotnet/msbuild/issues/9967>.",
        "createdAt": "2024-04-03T07:39:33Z",
        "updatedAt": "2024-04-03T07:39:33Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      }
    ]
  }
}