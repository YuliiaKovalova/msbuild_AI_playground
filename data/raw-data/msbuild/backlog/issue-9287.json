{
  "number": 9287,
  "title": "[Bug]: dotnet build excludes some embedded files",
  "body": "### Issue Description\n\nSome names of embedded files cause them to not be embedded into the built dll when building the project using `dotnet build`. However, when building using Visual Studio or `msbuild` the embedded file is included.\r\n\r\nA file that will be excluded is one whose name ends in something like _1.X-A.txt_\n\n### Steps to Reproduce\n\n### Showing that it works via msbuild\r\n\r\n- Change to the directory of the project.\r\n- Run `dotnet restore`\r\n- Run `msbuild`\r\n- Run the built exe: `bin\\Debug\\net6.0\\EmbeddedResourceNotFound.exe`\r\n\r\nThe program prints the contents of the embedded file as expected.\r\n\r\n### Fails via dotnet build\r\n\r\n- Clean: `dotnet clean`\r\n- Build: `dotnet build`\r\n- Run the built exe: `bin\\Debug\\net6.0\\EmbeddedResourceNotFound.exe`\r\n\r\nThe program fails with\r\n```\r\nUnhandled exception. System.Exception: Resource [EmbeddedResourceNotFound.Resources.1.X-A.txt] not found.\r\n```\r\n\r\n\r\n[EmbeddedResourceNotFound.zip](https://github.com/dotnet/msbuild/files/12750148/EmbeddedResourceNotFound.zip)\r\n\n\n### Expected Behavior\n\n`dotnet build` should produce a binary that correctly embeds the file regardless of the file name.\n\n### Actual Behavior\n\n`dotnet build` does not include the embedded file into the binary if its name ends in something like _1.X-A.txt_\n\n### Analysis\n\n_No response_\n\n### Versions & Configurations\n\n_No response_",
  "state": "CLOSED",
  "createdAt": "2023-09-28T13:52:40Z",
  "updatedAt": "2024-02-21T14:03:29Z",
  "closedAt": "2023-11-09T16:11:22Z",
  "author": {
    "login": "bhaeussermann"
  },
  "labels": [
    "bug",
    "backlog",
    "Priority:2",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": ".NET 9.0"
  },
  "comments": {
    "nodes": [
      {
        "body": "I replicated the issue with the example code.\r\n\r\nWhen I first built the example project as provided, I noticed that a satellite resource assembly is generated in an `X-A` sub-directory.\r\n\r\nI added a `1.Y-B.txt` file in the project directory and set it as an embedded resource. I also added a `hello.txt` file in the `Resources` sub-directory and set it as an embedded resource.\r\n\r\n```xml\r\n  <ItemGroup>\r\n    <EmbeddedResource Include=\"Resources\\1.X-A.txt\" />\r\n    <EmbeddedResource Include=\"1.Y-B.txt\" />\r\n    <EmbeddedResource Include=\"Resources\\hello.txt\" />\r\n  </ItemGroup>\r\n```\r\n\r\nThe `1.Y-B.txt` and `hello.txt` files are embedded in the `EmbeddedResourceNotFound.dll` as expected.\r\n\r\n`X-A` resembles a CultureInfo name. My guess is that a file in a sub-directory (I tested renaming `Resources` and adding a sub-directory under `Resources`) with a name ending in what resembles a CultureInfo name and a file extension is being treated as a localized resource.\r\n\r\nThe work-around is to either move `1.X-A.txt` to the project folder or rename the file so that the name doesn't resemble a CultureInfo name.\r\n\r\nAs to how and why the behavior is different between `msbuild` and `dotnet msbuild` -- I don't know. I did observe that on macOS `-p:GenerateSatelliteAssembliesForCore=false` will cause the build to fail because an attempt will be made to run `AL.exe` which is not available. This may be a clue or it may be another issue.",
        "createdAt": "2023-10-01T18:53:07Z",
        "updatedAt": "2023-10-01T18:53:07Z",
        "author": {
          "login": "jrdodds"
        }
      },
      {
        "body": "> The work-around is to either move `1.X-A.txt` to the project folder or rename the file so that the name doesn't resemble a CultureInfo name.\r\n\r\nNeither is necessary--you can instead set the metadata `WithCulture=\"false\"` on the items. https://github.com/dotnet/msbuild/pull/5824\r\n\r\n[The docs on this](https://learn.microsoft.com/visualstudio/msbuild/assignculture-task) could definitely be improved.\r\n\r\nI'm also surprised `X-A` is being accepted as a \"predefined\" culture identifier--I would expect it to be rejected like @jrdodds's `Y-B`.\r\n\r\nhttps://github.com/dotnet/msbuild/blob/d074c1250646c338f7eacb1ff8d9cbe5cf8ef3c6/src/Tasks/CultureInfoCache.cs#L70",
        "createdAt": "2023-10-02T15:42:03Z",
        "updatedAt": "2023-10-02T15:42:03Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I tested the following and it works:\r\n\r\n```xml\r\n    <EmbeddedResource Include=\"Resources\\1.X-A.txt\" WithCulture=\"false\" />\r\n```\r\n\r\n`CultureInfo.GetCultureInfo(\"X-A\", true).DisplayName` returns `\"Private-Use=a\"`. There are multiple Private-Use `CultureInfo` objects. `\"X-Z\"` returns `\"Private-Use=z\"` and `\"X-1\"` returns `\"Private-Use=1\"`.",
        "createdAt": "2023-10-03T19:09:40Z",
        "updatedAt": "2023-10-03T19:09:40Z",
        "author": {
          "login": "jrdodds"
        }
      },
      {
        "body": "Closing this as a duplicate of #9152. We can't really change this behavior, but we plan on creating MSBuild Analyzers that could detect non-deterministic locale names like this and direct the user to add explicit WithCulture metadata to prevent this kind of foot-gun.",
        "createdAt": "2023-11-09T16:11:22Z",
        "updatedAt": "2023-11-09T16:11:22Z",
        "author": {
          "login": "baronfel"
        }
      }
    ]
  }
}