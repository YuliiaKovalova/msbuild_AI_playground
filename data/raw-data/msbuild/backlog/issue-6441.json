{
  "number": 6441,
  "title": "AssemblySearchPaths lacks $(OutDir) when building SDK style",
  "body": "### Issue Description\r\nWe use shared bin directory for local and CI builds.\r\nBefore migrating to SDK style we could reference assemblies from previously built solutions like this:\r\n```\r\n<Reference Include=\"SomeAssembly\" />\r\n```\r\nAfter migration to SDK style this reference is no longer recognized. It is silently ignored, the build breaks.\r\n\r\n### Steps to Reproduce\r\n1. Take a legacy project, put some assembly into its OutDir and reference as shown above. The build should pass\r\n2. Migrate the project to SDK and build - the build should fail.\r\n\r\n### Analysis\r\nC:\\Program Files\\dotnet\\sdk\\5.0.202\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.props defines **AssemblySearchPaths** like this:\r\n```\r\n    <AssemblySearchPaths Condition=\" '$(AssemblySearchPaths)' == '' \">{CandidateAssemblyFiles};{HintPathFromItem};{TargetFrameworkDirectory};{RawFileName}</AssemblySearchPaths>\r\n```\r\nIt omits `$(OutDir)`. Then C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\\MSBuild\\Current\\Bin\\Microsoft.Common.CurrentVersion.targets is imported and it contains the following code:\r\n```\r\n    <AssemblySearchPaths Condition=\" '$(AssemblySearchPaths)' == ''\">\r\n      {CandidateAssemblyFiles};\r\n      $(ReferencePath);\r\n      {HintPathFromItem};\r\n      {TargetFrameworkDirectory};\r\n      $(AssemblyFoldersConfigFileSearchPath)\r\n      {Registry:$(FrameworkRegistryBase),$(TargetFrameworkVersion),$(AssemblyFoldersSuffix)$(AssemblyFoldersExConditions)};\r\n      {AssemblyFolders};\r\n      {GAC};\r\n      {RawFileName};\r\n      $(OutDir)\r\n    </AssemblySearchPaths>\r\n```\r\nHowever, **AssemblySearchPaths** has already been set and nothing happens here.\r\n\r\nIn the legacy projects this is the only definition of **AssemblySearchPaths** and thus it has `$(OutDir)`.\r\n\r\nThe workaround is to add the following code to Directory.Build.targets:\r\n```\r\n<AssemblySearchPaths>$(AssemblySearchPaths);$(OutDir)</AssemblySearchPaths>\r\n```\r\n### Versions & Configurations\r\n\r\n- Windows 10\r\n- VS 16.9.4\r\n- msbuild 16.9.0.16703\r\n\r\n### Attach a binlog\r\nMy solution contains too many projects. I did not come up with minimal repro, but it should be trivial. Let me know if you insist on the binary log.",
  "state": "CLOSED",
  "createdAt": "2021-05-11T19:27:52Z",
  "updatedAt": "2021-05-19T15:12:09Z",
  "closedAt": "2021-05-12T15:15:22Z",
  "author": {
    "login": "MarkKharitonov"
  },
  "labels": [
    "bug",
    "needs-triage"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Team Triage: This is intentionally left out of the sdk, see: \r\n\r\nhttps://github.com/dotnet/sdk/blob/6945e3694c918eea4c8c4fb6217e1485b179994b/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.Sdk.props#L92-L93\r\n\r\nHere's the PR that introduced it: https://github.com/dotnet/sdk/pull/176\r\n\r\nYour change is the way to go if you want to opt into this in your projects.",
        "createdAt": "2021-05-12T15:15:22Z",
        "updatedAt": "2021-05-12T15:15:22Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "I understand why GAC and registry were removed. But removing output directory is a mistake, in my opinion.\r\nImagine migrating code from legacy to SDK style in the presence of a shared bin directory and multiple solutions. Not a far fetched scenario. You do all by the book, but your references now stop working. Go figure why.\r\n\r\nCan you provide the rationale behind the removal of `$(OutDir)` from that list ? ",
        "createdAt": "2021-05-13T04:31:19Z",
        "updatedAt": "2021-05-13T04:31:19Z",
        "author": {
          "login": "MarkKharitonov"
        }
      },
      {
        "body": "I agree with @MarkKharitonov . I'm my case, I'm also missing $(ReferencePath) in this list, which removal seems to have broken VB.NET Projects \"Reference Path\" tab in Visual Studio. If $(ReferencePath) is emtpy, what implications would it have in performance? Why not have it?",
        "createdAt": "2021-05-13T12:36:32Z",
        "updatedAt": "2021-05-13T12:37:09Z",
        "author": {
          "login": "jhudler"
        }
      },
      {
        "body": "Team Triage: This is by design now, but if you feel strongly about this please open up an issue over in dotnet/sdk.",
        "createdAt": "2021-05-19T15:12:09Z",
        "updatedAt": "2021-05-19T15:12:09Z",
        "author": {
          "login": "benvillalobos"
        }
      }
    ]
  }
}