{
  "number": 11855,
  "title": "Prototype and evaluate offloading all tasks to task host processes.",
  "body": "Many custom tasks are not thread-safe, which can lead to issues when executed in a single-node, multithreaded environment. We propose to eventually run all MSBuild and SDK tasks within a single node, while offloading customer-defined tasks to a separate task host process. We will start though with offloading all the tasks to task host and moving the tasks to the process once we make them thread safe.\n\nThe goal of this issue is to \n- prototype offloading all tasks to the task host to ensure we can have customers tasks' compatibility with single-node, multithreaded task execution. \n- evaluate available prototypes of single-node, multithreaded msbuild.",
  "state": "CLOSED",
  "createdAt": "2025-05-18T15:07:49Z",
  "updatedAt": "2025-06-02T12:26:42Z",
  "closedAt": "2025-06-02T12:26:40Z",
  "author": {
    "login": "AR-May"
  },
  "milestone": null,
  "assignees": {
    "nodes": [
      {
        "login": "AR-May"
      }
    ]
  },
  "labels": [
    "Area: Tasks"
  ],
  "comments": {
    "nodes": [
      {
        "body": "I have found the environment variable that already does exactly what we need: MSBUILDFORCEALLTASKSOUTOFPROC. So, the needed infrastructure to run \nall the tasks out of proc is already there.\nIt does not apply though to:\n- Couple of MSBuild tasks that for sure would not work in the task host like \"MSBuild\" and \"CallTarget\".\n- It does not apply to tasks from XamlTaskFactory, CodeTaskFactory and RoslynTaskFactory - those we will need to re-work to let their tasks run out of proc.\n",
        "createdAt": "2025-05-20T15:20:00Z",
        "author": {
          "login": "AR-May"
        }
      },
      {
        "body": "Resurrected branch with multi-threaded MSBuild: https://github.com/dotnet/msbuild/tree/dev/AR-May/multi-threaded-msbuild-3",
        "createdAt": "2025-06-02T12:22:16Z",
        "author": {
          "login": "AR-May"
        }
      },
      {
        "body": "I have not managed to run all of the tasks in the taskhost due to multiple race conditions arising during the execution. The prototype was not done with taskhosts support in mind. I however identified above some of the issues we would need to fix for the idea to work. I am leaving the race-condition free implementation of the taskhost to #11335",
        "createdAt": "2025-06-02T12:26:40Z",
        "author": {
          "login": "AR-May"
        }
      }
    ]
  }
}