{
  "number": 1695,
  "title": "Metaproj caching doesn't take change in targets into account",
  "body": "Msbuild caches metaproj generated based on the first invocation. New targets used in subsequent invocations they are not found. \r\n\r\nA workaround is to change the value of Properties passed to subsequent invocations.\r\n\r\n### Repro\r\n\r\n[Repro.zip](https://github.com/Microsoft/msbuild/files/772095/Repro.zip)\r\n\r\nCreate a new .NET Core library App, add build.proj that runs msbuild 3 times with targets like so:\r\n\r\n```\r\n    <MSBuild Projects=\"ClassLibrary14.sln\" Properties=\"$(Props)\" Targets=\"Restore\"/>    \r\n    <MSBuild Projects=\"ClassLibrary14.sln\" Properties=\"$(Props)\" Targets=\"Build\"/>\r\n    <MSBuild Projects=\"ClassLibrary14.sln\" Properties=\"$(Props)\" Targets=\"Pack\"/>\r\n```\r\n\r\nI get an error:\r\n\r\n```\r\nProject \"build.proj\" (1) is building \"ClassLibrary14.sln\" (2:3) on node 1 (Pack target(s)).\r\nClassLibrary14.sln.metaproj : error MSB4057: The target \"Pack\" does not exist in the project. [ClassLi\r\nbrary14.sln]\r\n```\r\n\r\nWhen running the Pack build separately everything works fine:\r\n\r\n```\r\nmsbuild \"ClassLibrary14.sln\" /t:Pack\r\n```\r\n\r\n```\r\nSuccessfully created package 'bin\\Debug\\ClassLibrary14.1.0.0.nupkg'\r\n```",
  "state": "CLOSED",
  "createdAt": "2017-02-13T18:58:45Z",
  "updatedAt": "2024-02-21T17:21:56Z",
  "closedAt": "2020-02-10T22:03:24Z",
  "author": {
    "login": "tmat"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "This is because the `SolutionProjectGenerator` does not take into account the target names when it caches the generated metaproj.  The first invocation in `build.proj` generates the metaproj with only Build, Clean, Rebuild, and Publish along with Pack from the NuGet file imported for all solutions.  Subsequent calls re-use the cached metaproj which does not contain the `Pack` target.\r\n\r\nThe workarounds are to specify all of the targets in the same `<MSBuild />` invocation:\r\n\r\n```xml\r\n<MSBuild Projects=\"ClassLibrary14.sln\" Properties=\"$(Props)\" Targets=\"Restore;Build;Pack\"/>  \r\n```\r\n\r\nWhich generates all of the correct targets in the metaproj.\r\n\r\nAlternatively, you can invalidate the cached metaproj with a property:\r\n\r\n```xml\r\n<MSBuild Projects=\"ClassLibrary14.sln\" Properties=\"$(Props)\" Targets=\"Restore\"/>    \r\n<MSBuild Projects=\"ClassLibrary14.sln\" Properties=\"$(Props)\" Targets=\"Build\"/>\r\n<MSBuild Projects=\"ClassLibrary14.sln\" Properties=\"$(Props);Packing=true\" Targets=\"Pack\"/>\r\n```\r\n\r\nThe property is arbitrary as it just makes the metaproj be re-generated so it will contain the `Pack` target.\r\n",
        "createdAt": "2017-02-13T19:11:01Z",
        "updatedAt": "2017-02-13T19:11:01Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "I don't see a way to do this, since there's not currently a way to add a target to an already-partially-built project in memory. There's a reasonable workaround with setting properties, so I'm going to close this won't-fix.",
        "createdAt": "2020-02-10T22:03:24Z",
        "updatedAt": "2020-02-10T22:03:24Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}