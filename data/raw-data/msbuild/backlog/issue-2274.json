{
  "number": 2274,
  "title": "'dotnet build' assumes \"Build Dependencies -> Project Dependencies\" are project references",
  "body": "_From @evildour on July 5, 2017 15:54_\n\n## Steps to reproduce\r\nCreate new .NET Core class library (and solution) in VS 2017\r\nRight click solution and add new .NET Core class library\r\nEdit csproj file for the 2nd class library\r\nChange its TargetFramework from netcoreapp1.1 to net45\r\nRight click on the first class library's project and click \"Build dependencies -> Project dependencies...\"\r\nCheck the box to make it depend on the other class library\r\nRebuild in VS (everything works fine)\r\nOpen a command line and go to the sln file's directory\r\nRun 'dotnet build'\r\n\r\n## Expected  behavior\r\nThe build succeeds as it did in VS.\r\n\r\n## Actual behavior\r\nThe following error occurs:\r\nProject '...' targets '.NETFramework,Version=v4.5'. It cannot be referenced by a project that targets '.NETCoreApp,Version=v1.1'.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n.NET Command Line Tools (1.0.4)\r\n\r\nProduct Information:\r\n Version:            1.0.4\r\n Commit SHA-1 hash:  af1e6684fd\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.10586\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\1.0.4\r\n\r\n\r\n\r\n\r\n\n\n_Copied from original issue: dotnet/cli#7075_",
  "state": "OPEN",
  "createdAt": "2017-07-10T20:41:38Z",
  "updatedAt": "2024-06-13T07:12:06Z",
  "closedAt": null,
  "author": {
    "login": "livarcocc"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Moving to msbuild, per @rainersigwald ",
        "createdAt": "2017-07-10T20:41:39Z",
        "updatedAt": "2017-07-10T20:41:39Z",
        "author": {
          "login": "livarcocc"
        }
      },
      {
        "body": "**TL;DR**\r\nWe suggest that the `Microsoft.Net.Sdk` set the `AddSyntheticProjectReferencesForSolutionDependencies` property to false in its props. Builds would then behave the same for VS, dotnet build, and direct msbuild invocations. The impact would also be minimal, since it would be scoped for sdk based projects, and the sln based project dependencies are obsolete either way.\r\n\r\nSolutions files offer the capability of defining build ordering. This is probably obsolete functionality from the time before MSBuild. Here is a sln snippet containing a project dependency:\r\n```\r\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"Core\", \"Core\\Core.csproj\", \"{334778F6-6AC6-4BBA-AC3A-0D9AF15503EE}\"\r\n\tProjectSection(ProjectDependencies) = postProject\r\n\t\t{5BDF9C4F-F6FA-4DD3-8F60-0FE79B7A77A3} = {5BDF9C4F-F6FA-4DD3-8F60-0FE79B7A77A3}\r\n\tEndProjectSection\r\nEndProject\r\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"FF\", \"FF\\FF.csproj\", \"{5BDF9C4F-F6FA-4DD3-8F60-0FE79B7A77A3}\"\r\nEndProject\r\n```\r\nThe above snippet states that `FF.csproj` must be built before `Core.csproj`.\r\n\r\nMSBuild converts solution files into in-memory msbuild projects (called meta projects), and then proceeds to build the meta projects. They are very similar to traversal targets. To write these in-memory to disk, you have to set the `MSBuildEmitSolution` environment variable.\r\n\r\nFor some reason I don't understand, sln project dependencies are implemented twice in msbuild's sln interpretation:\r\n1. When a project has dependencies, MSBuild generates a new metaproject for that project and calls the MSBuild task twice, once on the dependencies and then again on the project itself. When no sln project dependencies are specified, there exists only one meta project. So in our example above, MSBuild generates `Core.csproj.metaproj` which first MSBuilds `FF.csproj` and then `Core.csproj`.\r\n2. The main solution meta project defines a property containing the solution project dependencies:\r\n```xml\r\n    <CurrentSolutionConfigurationContents>\r\n      <SolutionConfiguration \r\n        xmlns=\"\">\r\n        <ProjectConfiguration Project=\"{334778F6-6AC6-4BBA-AC3A-0D9AF15503EE}\" AbsolutePath=\"D:\\projects\\tests\\projects\\CoreOnFF\\Core\\Core.csproj\" BuildProjectInSolution=\"True\">Debug|AnyCPU\r\n          <ProjectDependency Project=\"{5BDF9C4F-F6FA-4DD3-8F60-0FE79B7A77A3}\" />\r\n        </ProjectConfiguration>\r\n        <ProjectConfiguration Project=\"{5BDF9C4F-F6FA-4DD3-8F60-0FE79B7A77A3}\" AbsolutePath=\"D:\\projects\\tests\\projects\\CoreOnFF\\FF\\FF.csproj\" BuildProjectInSolution=\"True\">Debug|AnyCPU</ProjectConfiguration>\r\n      </SolutionConfiguration>\r\n    </CurrentSolutionConfigurationContents>\r\n```\r\nThis property is then recursively piped down to projects and gets read in [Microsoft.Common.CurrentVersion.targets:AssignProjectConfiguration](https://github.com/Microsoft/msbuild/blob/master/src/Tasks/Microsoft.Common.CurrentVersion.targets#L1441). `AssignProjectConfiguration` then [parses this property and injects extra items](https://github.com/Microsoft/msbuild/blob/master/src/Tasks/AssignProjectConfiguration.cs#L329-L339) into the `ProjectReference` item, representing the extra dependencies from the solution file.\r\n\r\nMechanism 1. seems sufficient to obtain the same behaviour as VS. Mechanism 2. is the one causing the crash in this issue because it injects the full framework project as a `ProjectReference` project dependency into the .net core project. I don't understand why mechanism 2. even exists.\r\n\r\nTo turn off mechanism 2. the following property must be set to false: `/p:AddSyntheticProjectReferencesForSolutionDependencies=false`. The build then succeeds, with the correct sln based project ordering.",
        "createdAt": "2017-07-12T18:06:45Z",
        "updatedAt": "2017-07-12T18:08:40Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "The reason this longstanding behavior breaks the build is that the sdk doesn't respect `ProjectReference`s with `ReferenceOutputAssembly=false`, which is tracked by https://github.com/dotnet/sdk/issues/939.\r\n\r\nBut it still seems odd to have this belt-and suspenders approach.",
        "createdAt": "2017-07-14T21:45:03Z",
        "updatedAt": "2017-07-14T21:45:03Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "There's a dup of this here: https://github.com/Microsoft/msbuild/issues/2511.",
        "createdAt": "2017-10-10T04:20:49Z",
        "updatedAt": "2017-10-10T04:20:49Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "@cdmihai\r\nI was happy to try the `AddSyntheticProjectReferencesForSolutionDependencies=false` workaround but it unfortunately doesn't work.\r\n\r\nConsider this sln:\r\n- ProjectA\r\n- ProjectB (ProjectDependency => ProjectA)\r\n- ProjectC (ProjectReference => ProjectB)\r\n\r\nProjectB and ProjectC build order is not enforced by the sln. If ProjectC is built first, it will build ProjectB because it's a ProjectReference (without going through the metaproj), but with `AddSyntheticProjectReferencesForSolutionDependencies=false`, ProjectA won't be built before ProjectB and the build may fail.\r\n\r\nThe second workaround would be to specify a ProjectDependency even if there is a ProjectReference between the projects, but this is unmaintainable.\r\n\r\nThe proper behavior would be achieved if the build tree was processed manually by getting each project's ProjectReference, correlated with custom BuildDependencies, and built with `BuildProjectReferences=false`\r\n\r\nAnother solution could be to add an option to skip the build when a TargetFramework is not supported instead of failing.",
        "createdAt": "2018-10-02T19:04:55Z",
        "updatedAt": "2018-10-02T19:04:55Z",
        "author": {
          "login": "JeffCyr"
        }
      },
      {
        "body": "I think the issues with synthetic project references have mostly been addressed and should work for single-TFM projects in VS 15.8 / 2.1.4xx CLIs.\r\nAn issue with multi-targeting projects has been fixed in 15.9 / 2.1.5xx, @JeffCyr could you try to build this with the preview bits and not setting the `AddSyntheticProjectReferencesForSolutionDependencies` property to `false`?",
        "createdAt": "2018-10-03T06:38:47Z",
        "updatedAt": "2018-10-03T06:38:47Z",
        "author": {
          "login": "dasMulli"
        }
      },
      {
        "body": "Hey, there is a reason for the synthetic references to exist! Thanks @JeffCyr.\r\n\r\nRepro: [mixed-dependencies.zip](https://github.com/Microsoft/msbuild/files/2439467/mixed-dependencies.zip)\r\n\r\nI think the best way forward in this situation is to change the B->A link to a ProjectReference, either setting the TF for the reference explicitly\r\n\r\n```xml\r\n<ProjectReference Include=\"..\\ProjectA\\ProjectA.csproj\"\r\n                  SetTargetFramework=\"TargetFramework=net46\"\r\n                  ReferenceOutputAssembly=\"false\" />\r\n```\r\n\r\nOr adding A's TF to B's `AssetTargetFallback` property\r\n\r\n```xml\r\n  <PropertyGroup>\r\n    <AssetTargetFallback>netcoreapp2.0</AssetTargetFallback>\r\n  </PropertyGroup>\r\n```\r\n\r\nUnfortunately, we can't make this behavior the default for `ReferenceOutputAssembly=\"false\"`, because that broke people that depended on the TF negotiation being correct even when not referencing the output directly.",
        "createdAt": "2018-10-03T14:38:14Z",
        "updatedAt": "2018-10-03T14:38:14Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@dasMulli I confirm that the issue is fixed in VS 15.9 Preview 3, thanks.",
        "createdAt": "2018-10-09T13:50:51Z",
        "updatedAt": "2018-10-09T13:50:51Z",
        "author": {
          "login": "JeffCyr"
        }
      },
      {
        "body": "It would be interesting to solve this problem. We were searching many days and couldn't explain what was happening. The different behaviors of dotnet build and MSBuild are really a pain point and costs of a lot of investigation time.",
        "createdAt": "2024-06-12T05:33:35Z",
        "updatedAt": "2024-06-12T05:33:35Z",
        "author": {
          "login": "msedi"
        }
      },
      {
        "body": "> The different behaviors of dotnet build and MSBuild are really a pain point and costs of a lot of investigation time.\r\n\r\nPlease start a new issue with details--the behavior described in this issue does not vary between `MSBuild.exe` and `dotnet build`.",
        "createdAt": "2024-06-12T13:22:37Z",
        "updatedAt": "2024-06-12T13:22:37Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald: Thanks, if have opened an issue: #10234",
        "createdAt": "2024-06-13T07:12:05Z",
        "updatedAt": "2024-06-13T07:12:05Z",
        "author": {
          "login": "msedi"
        }
      }
    ]
  }
}