{
  "number": 10431,
  "title": "[Bug] [BuildCheck]: BC0103 used environment variable does not trigger when property is defined in target",
  "body": "### Issue Description\n\nUsed environment variable analyzer behavior differs: If assignment happened outside the target the message appears and when in the target it does not. From the [BC0103 rule documentation](https://github.com/dotnet/msbuild/blob/8b03742aafd18a26a5d03cd045e4d24963886503/documentation/specs/BuildCheck/Codes.md#bc0103---used-environment-variable) I am unable to figure out whether this is expected behavior or a bug.\n\n### Steps to Reproduce\n\n1. Create a project `env_var.proj` with following content:\r\n\r\n```\r\n<Project>\r\n  <Target Name=\"Hello\">\r\n    <PropertyGroup>\r\n      <ReadFromEnvVariable>$(TEST)</ReadFromEnvVariable>\r\n    </PropertyGroup>\r\n    <Message Importance=\"High\" Text=\"$(ReadFromEnvVariable)\" />\r\n  </Target>\r\n</Project>\r\n```\r\n2. Define the env variable: `$env:TEST=\"test\"`\r\n3. Build with analyzers: `MSBuild.exe .\\env_var.proj /m:1 /analyze /t:Hello`\n\n### Expected Behavior\n\nBuild outputs \r\n```\r\nMSBuild.exe .\\env_var.proj /m:1 /analyze /t:Hello\r\nMSBuild version 17.12.0-dev-24373-01+8b03742aa for .NET Framework\r\nBuild started 7/23/2024 4:43:07 PM.\r\nThe BuildCheck is enabled for this build.\r\nC:\\Users\\alinama\\work\\shared-ouput\\env-var\\env_var.proj (3,5): https://aka.ms/buil\r\ndcheck/codes#BC0103 - Property is derived from environment variable: 'TEST' with v\r\nalue: 'test'. Properties should be passed explicitly using the /p option.\r\nProject \"C:\\Users\\alinama\\work\\shared-ouput\\env-var\\env_var.proj\" on node 1 (Hello\r\n target(s)).\r\nHello:\r\n  test\r\nDone Building Project \"C:\\Users\\alinama\\work\\shared-ouput\\env-var\\env_var.proj\" (H\r\nello target(s)).\r\n\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n```\n\n### Actual Behavior\n\nBuild outputs \r\n```\r\nBuild started 7/23/2024 4:43:26 PM.\r\nThe BuildCheck is enabled for this build.\r\nProject \"C:\\Users\\alinama\\work\\shared-ouput\\env-var\\env_var.proj\" on node 1 (Hello\r\n target(s)).\r\nHello:\r\n  test\r\nDone Building Project \"C:\\Users\\alinama\\work\\shared-ouput\\env-var\\env_var.proj\" (H\r\nello target(s)).\r\n\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:00:00.60\r\n```\n\n### Analysis\n\nIf assignment happened outside the target, the output consists of the BC0103 message:\r\n```\r\n<Project>\r\n  <PropertyGroup>\r\n    <ReadFromEnvVariable>$(TEST)</ReadFromEnvVariable>\r\n  </PropertyGroup>\r\n  <Target Name=\"Hello\">\r\n    <Message Importance=\"High\" Text=\"$(ReadFromEnvVariable)\" />\r\n  </Target>\r\n</Project>\r\n```\r\nWhat is interesting is that we have [BC0103 test](https://github.com/dotnet/msbuild/blob/8b03742aafd18a26a5d03cd045e4d24963886503/src/BuildCheck.UnitTests/EndToEndTests.cs#L54) that checks the [assignment in the target](https://github.com/dotnet/msbuild/blob/8b03742aafd18a26a5d03cd045e4d24963886503/src/BuildCheck.UnitTests/TestAssets/SampleAnalyzerIntegrationTest/Project1#L20), and it throws the message BC0103. I am yet unsure what is exactly different in these two cases and brings such difference.\n\n### Versions & Configurations\n\n_No response_",
  "state": "CLOSED",
  "createdAt": "2024-07-23T14:57:45Z",
  "updatedAt": "2024-08-20T08:41:45Z",
  "closedAt": "2024-08-20T08:41:45Z",
  "author": {
    "login": "AR-May"
  },
  "labels": [
    "bug",
    "Priority:2",
    "triaged",
    "Area: BuildCheck"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "YuliiaKovalova"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": []
  }
}