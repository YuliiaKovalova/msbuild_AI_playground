{
  "number": 8276,
  "title": "NuGet package contentFiles don't get copied when downgrading package on incremental build",
  "body": "### Issue Description\r\nWhen using incremental builds, the NuGet contentFiles out of a NuGet package may not be copied when downgrading to an older version of the package. NuGet marks the files as PreserveNewest, which in this scenario is causing problems, as the \"newer\" files that we don't one during our downgrade, is preserved over the file we do want, the older version.\r\n\r\n### Steps to Reproduce\r\nUsing a simple C# project, reference a NuGet package that contains contentFiles that have copyToOutput=true set.\r\nIn our case the NuGet package has a .dll in lib\\net472 and a contentFile in contentFiles\\any\\net472 (lets call it hash.txt, containing the hash of the dll, so it needs to remain in sync)\r\n\r\n1. Reference version 1.0 of the NuGet package and build the project\r\n  Notice the output contains version 1.0 of the .dll and the content file\r\n2. Update the NuGet reference to version 2.0 of the NuGet package and build the project\r\n  Notice the output contains version 2.0 of the .dll and the content file\r\n3. Revert back to version 1.0 of the NuGet package and build the project and build the project\r\n  Notice the output contains version 1.0 of the .dll and version 2.0 of the content file\r\n\r\nWe have narrowed the issue down to the generated nuget.g.props file, which correctly mentions the \"hash.txt\" file with its metadata, of which the important one is\r\n``` \r\n<CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>\r\n```\r\nMSBuild is not copying the file, because the file in the output is already newer and also does not consider this file during the IncrementalClean, as this target does not seem to do a timestamp check, only check for Orphans.\r\n\r\nFor simplicity, lets say our nuspec files look like below, the work fine in general.\r\n\r\n```\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<package xmlns=\"http://schemas.microsoft.com/packaging/2011/08/nuspec.xsd\">\r\n  <metadata>\r\n    <id>PackageName</id>\r\n    <version>2.0.0</version>\r\n    <contentFiles>\r\n      <!-- Include Assets as Content -->\r\n      <files include=\"**\\*.*\" buildAction=\"None\" copyToOutput=\"true\" />\r\n    </contentFiles>\r\n    <dependencies>\r\n      <group targetFramework=\".NETFramework4.7.2\" />\r\n    </dependencies>\r\n  </metadata>\r\n  <files>\r\n    <file src=\"bin\\Release\\AssemblyName.dll\" target=\"lib\\net472\" />\r\n    <file src=\"bin\\Release\\Hash.txt\" target=\"contentFiles\\any\\net472\" />\r\n  </files>\r\n</package>\r\n```\r\n### Expected Behavior\r\nWe would expect MSBuild to understand the contentFiles need to be replaced with the previous version\r\n\r\n### Actual Behavior\r\nMSBuild ignores the copy step as the target file is newer\r\n\r\n### Analysis\r\nWe believe this problem goes back to the generated nuget.g.props file, when setting copyToOutput=\"true\" in the nuspec file, NuGet always flags the files with \"PreserveNewest\", while we believe it should treat it the same as the libraries, these are correctly copied when downgrading a package version.\r\nGiving the package builder an option to say the copy step should use \"Always\" it would help, but this would add unnecessary build time as well. While only None, PreserveNewest and Always are available in MSBuild, an option to specify \"copy if different\" would be best, skip if the file is the same, otherwise copy. Which is basically what \"Always\" is supposed to do, only always does an overwrite even if the file is the same, which depending on the amount of files comes with a price and IO load.\r\n\r\n### Versions & Configurations\r\nThis can be reproduced in Visual Studio 2022 version 17.2, using NuGet 6.2\r\n\r\n### Workarround\r\nWe managed to find a \"hack\" to influence the behaviour in 2 ways, both using Always instead of PreserveNewest, which for our 1200 csproj files, add some additional build time.\r\n\r\n1. Update all our NuGet packages .props files to set a different value for the CopyToOutputDirectory\r\n```\r\n<ItemGroup> \r\n  <None Update=\"@(None)\">\r\n    <CopyToOutputDirectory Condition=\"%(CopyToOutputDirectory) == 'PreserveNewest'\">Always</CopyToOutputDirectory>\r\n  </None>\r\n</ItemGroup>\r\n```\r\n2. Update all None includes from our NuGet packages to always copy to the output direct.\r\nPut this in the Directory.Build.Targets\r\n```\r\n<ItemGroup> \r\n  <None Update=\"@(None)\">\r\n    <CopyToOutputDirectory Condition=\"%(CopyToOutputDirectory) == 'PreserveNewest' AND $([System.String]::new('%(NuGetPackageId)').Contains('CompanyPrefix.'))\">Always</CopyToOutputDirectory>\r\n  </None>\r\n</ItemGroup>\r\n```",
  "state": "CLOSED",
  "createdAt": "2023-01-03T14:26:32Z",
  "updatedAt": "2023-05-09T15:58:17Z",
  "closedAt": "2023-05-09T15:58:17Z",
  "author": {
    "login": "bh-sijtnic"
  },
  "labels": [
    "bug",
    "needs-triage"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "JanKrivanek"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Copying to nuget team, as it is nuget issue: https://github.com/NuGet/Home/issues/12578\r\nAt the same time opened MSBuild feature request, that would need to be implemented to facilitate fixing: https://github.com/dotnet/msbuild/issues/8743",
        "createdAt": "2023-05-09T15:58:16Z",
        "updatedAt": "2023-05-09T15:58:16Z",
        "author": {
          "login": "JanKrivanek"
        }
      }
    ]
  }
}