{
  "number": 9375,
  "title": "[Bug]: Hang and/or MSB0001 when building `terminal` repo with `/graph`",
  "body": "### Issue Description\n\n```\nMicrosoft.Build.Framework.InternalErrorException\n  HResult=0x80131500\n  Message=MSB0001: Internal MSBuild Error: nodes should include solution projects\n  Source=Microsoft.Build\n  StackTrace:\n   at Microsoft.Build.Shared.ErrorUtilities.ThrowInternalError(String message, Exception innerException, Object[] args)\n\n \tMicrosoft.Build.dll!Microsoft.Build.Shared.ErrorUtilities.ThrowInternalError(string message, System.Exception innerException, object[] args)\tUnknown\n \tMicrosoft.Build.dll!Microsoft.Build.Graph.GraphBuilder.AddEdgesFromSolution(System.Collections.Generic.IReadOnlyDictionary<Microsoft.Build.BackEnd.ConfigurationMetadata, Microsoft.Build.Graph.ParsedProject> allParsedProjects, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IReadOnlyCollection<string>> solutionDependencies, Microsoft.Build.Graph.GraphBuilder.GraphEdges edges)\tUnknown\n \tMicrosoft.Build.dll!Microsoft.Build.Graph.GraphBuilder.AddEdges(System.Collections.Generic.Dictionary<Microsoft.Build.BackEnd.ConfigurationMetadata, Microsoft.Build.Graph.ParsedProject> allParsedProjects)\tUnknown\n \tMicrosoft.Build.dll!Microsoft.Build.Graph.GraphBuilder.BuildGraph()\tUnknown\n \tMicrosoft.Build.dll!Microsoft.Build.Graph.ProjectGraph.ProjectGraph(System.Collections.Generic.IEnumerable<Microsoft.Build.Graph.ProjectGraphEntryPoint> entryPoints, Microsoft.Build.Evaluation.ProjectCollection projectCollection, Microsoft.Build.Graph.ProjectGraph.ProjectInstanceFactoryFunc projectInstanceFactory, int degreeOfParallelism, System.Threading.CancellationToken cancellationToken)\tUnknown\n \tMicrosoft.Build.dll!Microsoft.Build.Execution.BuildManager.ExecuteGraphBuildScheduler(Microsoft.Build.Graph.GraphBuildSubmission submission)\tUnknown\n \tMicrosoft.Build.dll!Microsoft.Build.Execution.BuildManager.ExecuteSubmission.AnonymousMethod__0()\tUnknown\n```\n\n### Steps to Reproduce\n\n1. Clone `https://github.com/johnterickson/terminal/commit/1f7018c5071fcb5bc3d86870c21c8cfe65540a91`\n2. `tools\\razzle.cmd`\n3. `bcz`\n\n### Expected Behavior\n\nBuild 1) succeeds or 2) fails with useful info\n\n### Actual Behavior\n\nMsBuild.exe hangs\n\n### Analysis\n\nI hooked up a debugger to capture the above stack trace.\n\n### Versions & Configurations\n\nusing msbuild version '17.7.2.37605' from 'C:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\MSBuild\\Current\\Bin\\amd64'",
  "state": "CLOSED",
  "createdAt": "2023-10-31T20:54:39Z",
  "updatedAt": "2024-02-21T14:03:10Z",
  "closedAt": "2023-11-23T14:10:38Z",
  "author": {
    "login": "johnterickson"
  },
  "labels": [
    "bug",
    "Partner request",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "dfederm"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "The exception means that there is a sln-dependency which isn't in the graph. But the solution was just parsed to produce the graph, so that means a project in the sln didn't make it into the graph.\r\n\r\nUpon digging deeper, it look like this happens for projects which aren't \"well-known\" project types. In `GraphBuilder`:\r\n\r\n```cs\r\n            IReadOnlyCollection<ProjectInSolution> GetBuildableProjects(SolutionFile solutionFile)\r\n            {\r\n                return solutionFile.ProjectsInOrder.Where(p => p.ProjectType == SolutionProjectType.KnownToBeMSBuildFormat && solutionFile.ProjectShouldBuild(p.RelativePath)).ToImmutableArray();\r\n            }\r\n```\r\n\r\nIn this case the project you're hitting (a wapproj) is not \"well-known\" so it isn't considered.\r\n\r\nThe code should instead follow what MSBuild does when actually building a sln, ie the logic in `SolutionProjectGenerator`. This logic has logic for `WouldProjectBuild` and `CanBuildDirectly` for considering a project in a sln.",
        "createdAt": "2023-10-31T22:28:59Z",
        "updatedAt": "2023-10-31T22:28:59Z",
        "author": {
          "login": "dfederm"
        }
      }
    ]
  }
}