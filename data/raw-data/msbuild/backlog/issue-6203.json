{
  "number": 6203,
  "title": "Failed to properly account for ' in string",
  "body": "### Issue Description\r\nYou guys haven't properly escaped/enclosed the strings you're using in the following build targets:\r\n\r\nMicrosoft.NET.Sdk.Razor.StaticWebAssets.targets\r\n\r\nDeleting/renaming the user folder is not possible as the folder was created when the Azure Active Directory user was added to the computer.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Login to a computer using a user account that contains an apostrophe in the name\r\n2. Open a .net core 3.1 project, or any other project that uses the Microsoft.NET.Sdk.Razor.StaticWebAssets.targets build target\r\n3. Try to build the project and/or run the project\r\n4. An error will be thrown similar to the error added to the \"Actual Behavior\" section below\r\n\r\nThis is where the error is initially thrown in the build target: \r\n![image](https://user-images.githubusercontent.com/31373350/109427006-fd42ff80-79b5-11eb-8fbf-09c309864962.png)\r\n\r\n\r\n<!--\r\n* Include as much of the following as possible:\r\n\r\n* A minimal sample project that reproduces the issue.\r\n* Your zipped project.\r\n* IDE / CLI steps to create the project and reproduce the behaviour.\r\n* Your command line invocation\r\n-->\r\n\r\n### Expected Behavior\r\nThe project should properly reference the file and the project will build\r\n\r\n### Actual Behavior\r\nThe file can't be referenced because the file path contains an apostrophe (') within the user's folder name. This can be seen by the bolded folder name in the error below:\r\n\r\nMSB4113\tSpecified condition \"$([System.String]::Copy('%(Identity)').Replace('\\','/').StartsWith('wwwroot/'))\" evaluates to \"$([System.String]::Copy('C:\\Users\\**BillO'Malley**\\.nuget\\packages\\wkhtmlwrapper.image\\1.0.89\\contentFiles\\any\\netstandard2.0\\Executables\\image.win.exe').Replace('\\','/').StartsWith('wwwroot/'))\" instead of a boolean.\r\n\r\n\r\n### Analysis\r\nFolder and file paths must allow for special characters and the Microsoft.NET.Sdk.Razor.StaticWebAssets.targets build target should escape these characters.\r\n\r\n### Versions & Configurations\r\nMicrosoft (R) Build Engine version 16.8.3+39993bd9d for .NET Framework\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n16.8.3.61104",
  "state": "OPEN",
  "createdAt": "2021-02-28T17:29:25Z",
  "updatedAt": "2024-01-31T08:21:51Z",
  "closedAt": null,
  "author": {
    "login": "womalley"
  },
  "labels": [
    "bug",
    "needs-design",
    "Area: Language",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Backlog"
  },
  "comments": {
    "nodes": [
      {
        "body": "Team Triage: `Microsoft.NET.Sdk.Razor.StaticWebAssets.targets` lives in the SDK.",
        "createdAt": "2021-03-10T16:42:10Z",
        "updatedAt": "2021-03-10T16:42:10Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "Initial investigation notes:\r\n\r\nThe issue isn't specifically with `Microsoft.NET.Sdk.Razor.StaticWebAssets.targets`, it has to do with how we handle single quotes with metadata.\r\n\r\nI can successfully repro this with any metadata that contains a `'`. Here's my repro project:\r\n```xml\r\n  <ItemGroup>\r\n    <Content Include=\"c:\\some\\path\\with\\user'name\\file.txt\">\r\n      <MetadataWithPercent>c:/some%stuff</MetadataWithPercent>\r\n      <MetadataWithsinglequote>c:/some'stuff</MetadataWithsinglequote>\r\n      <MetadataWithEscapedSingleQuote>c:/some%27stuff</MetadataWithEscapedSingleQuote>\r\n    </Content>\r\n  </ItemGroup>\r\n\r\n  <Target Name=\"6203\">\r\n    <ItemGroup>\r\n      <SomeType Include=\"@(Content)\"\r\n                Condition=\"$([System.String]::Copy('%(Content.MetadataWithsinglequote)').Replace('\\', '/').StartsWith('c:/'))\">\r\n      </SomeType>\r\n    </ItemGroup>\r\n  </Target>\r\n```\r\nThe build passes if I use `Content.MetadataWithEscapedSingleQuote` but fails on `MetadataWithsinglequote`.\r\n\r\nMy initial thoughts for a solution would be to make sure to escape all special characters (though it looks like only the single quote would need this) when pulling the metadata out.\r\n\r\nNotable areas of code:\r\nExpander line 764 is where we regex-replace metadata with their actual values when parsing an expression.\r\n\r\nThere's a bit of a workaround if you store your projects outside of your user path, `c:/src` for example.",
        "createdAt": "2021-03-11T23:20:06Z",
        "updatedAt": "2021-03-11T23:27:51Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "I was hoping that this could also be resolved in NuGet's handling of NuGet package content. If I create a classlib project that references\r\n\r\n```xml\r\n    <PackageReference Include=\"WkHtmlWrapper.Image\" Version=\"1.0.89\" />\r\n```\r\n\r\nThe restore-generated `.nuget.g.props` has this in it:\r\n\r\n```xml\r\n  <ItemGroup Condition=\" '$(ExcludeRestorePackageImports)' != 'true' \">\r\n    <Content Include=\"$(NuGetPackageRoot)wkhtmlwrapper.image/1.0.89/contentFiles/any/netstandard2.0/Executables/image.win.exe\" Condition=\"Exists('$(NuGetPackageRoot)wkhtmlwrapper.image/1.0.89/contentFiles/any/netstandard2.0/Executables/image.win.exe')\">\r\n      <NuGetPackageId>WkHtmlWrapper.Image</NuGetPackageId>\r\n      <NuGetPackageVersion>1.0.89</NuGetPackageVersion>\r\n      <NuGetItemType>Content</NuGetItemType>\r\n      <Pack>false</Pack>\r\n      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>\r\n      <TargetPath>Executables/image.win.exe</TargetPath>\r\n      <DestinationSubDirectory>Executables/</DestinationSubDirectory>\r\n      <Private>True</Private>\r\n      <Link>Executables/image.win.exe</Link>\r\n    </Content>\r\n  </ItemGroup>\r\n```\r\n\r\nIf `$(NuGetPackageRoot)` has a `'` in it, you hit this problem. Unfortunately, you can't escape that property when defining it, because then the `Exists` condition doesn't work correctly.\r\n\r\nIdeally, we'd be in a proper recursive parser and know which quote matched which. But since we've had confusing textual-expansion-in-place behavior for a long time, that would be a pretty big behavior change.",
        "createdAt": "2021-06-17T11:00:29Z",
        "updatedAt": "2021-06-17T11:00:29Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}