{
  "number": 1755,
  "title": "MSBuild extensions should get dependencies from the package cache",
  "body": "MSBuild extensions on .NET Framework have to embed all their own dependencies in the NuGet package that delivers them. This makes them extra large even though the user may already have similar contents in their package cache elsewhere.\r\n\r\nIn the MSBuild Core world, it is unreasonable for MSBuild extensions to embed all their own dependencies because the dependencies may vary with the OS and CPU architecture. This would be very large, and anyway MSBuild doesn't provide Tasks a way for the CoreCLR to load the assemblies appropriately.\r\n\r\nThis should work recursively for a Task, as an MSBuild Task itself may support \"extensions\" of its own (such as [CodeGeneration.Roslyn](https://github.com/aarnott/codegeneration.roslyn)) which may come with their own dependencies as well.\r\n\r\nThis applies to both managed and unmanaged DLLs. \r\n\r\nSee also https://github.com/Microsoft/msbuild/issues/858#issuecomment-238268449",
  "state": "CLOSED",
  "createdAt": "2017-02-27T02:36:28Z",
  "updatedAt": "2024-02-21T17:21:29Z",
  "closedAt": "2020-06-24T16:09:53Z",
  "author": {
    "login": "AArnott"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Running into this very issue, I think; or at minimum a close neighbor, [with some slight, key philosophical CGR differences](https://github.com/mwpowellhtx/Code.Generation.Roslyn).",
        "createdAt": "2019-08-01T21:20:38Z",
        "updatedAt": "2019-08-01T21:20:38Z",
        "author": {
          "login": "mwpowellhtx"
        }
      },
      {
        "body": "Is there any known workaround to this? It's just hit me badly after a day of switching to using a custom MsBuild Task",
        "createdAt": "2020-06-16T14:04:36Z",
        "updatedAt": "2020-06-16T14:04:36Z",
        "author": {
          "login": "mungojam"
        }
      },
      {
        "body": "@mungojam The task can redistribute all non-system dependencies. #5037 will resolve this in the future.",
        "createdAt": "2020-06-24T16:09:28Z",
        "updatedAt": "2020-06-24T16:09:28Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Duplicate of #5037",
        "createdAt": "2020-06-24T16:09:53Z",
        "updatedAt": "2020-06-24T16:09:53Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald Thanks for looking at this issue. I don't see it as a duplicate of #5037 however. It's not just that msbuild tasks have their own ALC. I'm proposing that the ALC come preconfigured to load dependencies from the nuget package cache so that runtime dependencies don't have to even ship with the msbuild task. Also, since runtime dependencies vary based on OS and .NET runtime, msbuild tasks would get very heavy if they shipped the transitive closure of all their nuget package dependencies for every single OS and runtime, while the nuget package cache can very efficiently represent this.",
        "createdAt": "2020-06-24T16:13:42Z",
        "updatedAt": "2020-06-24T16:13:42Z",
        "author": {
          "login": "AArnott"
        }
      },
      {
        "body": "`AssemblyDependencyResolver` does all that, and is covered by #5037.",
        "createdAt": "2020-06-24T16:17:35Z",
        "updatedAt": "2020-06-24T16:17:35Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}