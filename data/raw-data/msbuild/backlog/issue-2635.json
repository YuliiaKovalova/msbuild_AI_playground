{
  "number": 2635,
  "title": "2nd Level Dependency With Mismatched Version Missing",
  "body": "## Setup\r\n\r\nProjectA (Class Library) - Direct Nuget dependency on Lib1 which has indirect nuget dependency on Lib2\r\nProjectB (Console Application) - Project reference to ProjectA\r\n\r\nLib1 nuget states version >= 1.0.0\r\nLib2 is version 1.1.0\r\n\r\n## The Observed Result\r\n\r\nProjectA compiles fine & has both Lib1 and Lib2 in the bin.\r\nProjectB compiles fine, has ProjectA.dll and Lib1 in the bin.\r\nProjectB is missing Lib2.\r\nProjectB (Console Application) has a runtime error since Lib2 is not present\r\n\r\n## Initial Findings\r\n\r\nMSBuild output states that it will not take Lib2 (when compiling ProjectB) as there is a mismatch in the \"FusionName\" which appears to be the assembly plus the version and key.\r\n\r\n## Looking at MSBuild Code\r\n\r\nThis may be (i'm tried debugging, but its tough) related to assembly unification.\r\nFor some reason ProjectB requires a specific version whereas ProjectA does not.",
  "state": "OPEN",
  "createdAt": "2017-10-12T11:46:51Z",
  "updatedAt": "2024-02-21T16:35:36Z",
  "closedAt": null,
  "author": {
    "login": "BlythMeister"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "It would seem that somewhere around the unification process of compiling ProjectB it is decides that we need a specific version of both Lib1 and Lib2.  \n\nBut through debugging I can't work out why...",
        "createdAt": "2017-10-12T17:18:07Z",
        "updatedAt": "2017-10-12T17:18:07Z",
        "author": {
          "login": "BlythMeister"
        }
      },
      {
        "body": "I think this may also be a similar issue i flagged a few months ago and asked if Paket could do something clever (https://github.com/fsprojects/Paket/issues/2560)\r\n\r\nThe difference here being that the 2nd level dependency was FSharp.Core.\r\nIn this case, FSharp.Core is located at the right version on the machine.\r\n\r\nBut had this not been FSharp.Core, the same problem would have existed.\r\n\r\nOn that issue, i created a small scale of the problem: https://github.com/BlythMeister/DependencyHell\r\nThis might help whoever can help :)",
        "createdAt": "2017-10-13T08:41:06Z",
        "updatedAt": "2017-10-13T08:41:06Z",
        "author": {
          "login": "BlythMeister"
        }
      }
    ]
  }
}