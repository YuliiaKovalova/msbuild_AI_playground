{
  "number": 911,
  "title": "Exceptions thrown by ToolTask aren't diagnosable",
  "body": "We got a report of an internal build that failed with this error:\n\n```\nMicrosoft.CppCommon.targets(356,5): error MSB6003: The specified task executable \"CL.EXE\" could not be run. Access to the path 'F:\\REDACTED\\x86\\CL.read.1.tlog' is denied.\n```\n\nThat's thrown from [`ToolTask`](https://github.com/Microsoft/msbuild/blob/204cfd215fdc1c92322b0b22165cc8c4c3259e02/src/Utilities/ToolTask.cs#L1676), which uses this method:\n\n``` C#\n/// <summary>\n/// This method takes in an exception and if MSBuildDiagnostics is set then it will display the stack trace\n/// if it is not set only the message will be displayed, this is to fix the problem where the user was getting\n/// stack trace when a shorter message was better\n/// </summary>\n/// <returns>exception message</returns>\nprivate string GetErrorMessageWithDiagnosticsCheck(Exception e)\n{\n    // If MSBuildDiagnostics is set show stack trace information\n    if (Environment.GetEnvironmentVariable(\"MSBuildDiagnostics\") != null)\n    {\n        // Includes stack trace\n        return e.ToString();\n    }\n    else\n    {\n        // does not include stack trace\n        return e.Message;\n    }\n}\n```\n\nThis was clearly intentionally added (it looks like it was in the Orcas/VS2008 time frame), but it seems like a bad idea--it makes the error above basically undiagnosable, because you have no idea what's complaining about permissions.\n\nMSBuild should at least log the stack to the higher logging verbosities, though it might be better to just roll back to including the whole stack trace all the time.\n",
  "state": "CLOSED",
  "createdAt": "2016-08-17T21:27:30Z",
  "updatedAt": "2024-02-21T17:26:31Z",
  "closedAt": "2018-08-06T18:12:47Z",
  "author": {
    "login": "rainersigwald"
  },
  "labels": [
    "Feature Request",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "There's similar code in TaskLoggingHelper.LogErrorFromException().\n",
        "createdAt": "2016-08-17T22:53:47Z",
        "updatedAt": "2016-08-17T22:54:31Z",
        "author": {
          "login": "akoeplinger"
        }
      },
      {
        "body": "> MSBuild should at least log the stack to the higher logging verbosities, though it might be better to just roll back to including the whole stack trace all the time.\r\n\r\nWhich higher level verbosities were you considering? ",
        "createdAt": "2017-02-09T21:01:06Z",
        "updatedAt": "2017-02-09T21:01:06Z",
        "author": {
          "login": "jaredpar"
        }
      },
      {
        "body": "Since the environment variable that enables the stack dump is `\"MSBuildDiagnostics\"`, then Diagnostic level sounds like a good place. Or would the stack be so helpful that lower levels are more appropriate? ",
        "createdAt": "2017-02-09T21:27:00Z",
        "updatedAt": "2017-02-09T21:28:08Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "@cdmihai \r\n\r\nI'd argue for it being lower.  My (possibly incorrect) view of diagnostics is to discover why MSBuild is behaving the way it did.  Generally this is used to track down bugs in my build definitions / tasks.  Basically helping me diagnose the bad things I did in my build files. \r\n\r\nExceptions in build tasks are the opposite.  I've asked the task to do what should be a valid operation and it's failing due to an unanticipated scenario.  My build tasks are valid here, the task is wrong.  Hence this should show up during normal execution of MSBuild.  \r\n\r\n\r\n\r\n",
        "createdAt": "2017-02-09T21:42:47Z",
        "updatedAt": "2017-02-09T21:42:47Z",
        "author": {
          "login": "jaredpar"
        }
      },
      {
        "body": "I think I agree, and would prefer to just log the stack trace all the time (in this exceptional circumstance).",
        "createdAt": "2017-02-09T21:44:50Z",
        "updatedAt": "2017-02-09T21:44:50Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}