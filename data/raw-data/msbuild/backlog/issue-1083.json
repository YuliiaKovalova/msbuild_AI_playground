{
  "number": 1083,
  "title": "Design time builds (and /preprocess) can hang unexpectedly in the presence of wildcards",
  "body": "The project below should do absolutely nothing. The expansion of the `**` wildcard is protected by the check that `$(MyPath)` has some value. When executed with msbuild.exe it finishes immediately\n\nHowever when opening in VS, or building with msbuild.exe /preprocess flag, it will hang for a long time (from 1 to 30 minutes perhaps) while it expands `\\**` to bring in every single file on the entire drive. During this time there is no feedback about what is happening or indication of the problem.\n\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<Project ToolsVersion=\"4.0\" DefaultTargets=\"Build\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n  <ItemGroup Condition=\"'$(MyPath)' != ''\">\n    <Compile Include=\"$(MyPath)\\**\" />\n  </ItemGroup>\n <Target Name=\"build\"/>\n</Project>\n```\n\nThe reason for this is sort of by design -- when loading a project (rather than merely building it) conditions on items and itemgroups are intentionally ignored. The reason for this is because we want to show them in the VS solution explorer even if they have a condition on such as `'$(Condition)' == 'Debug'`. That way the user can double click and edit the file.\n\nThe problem as you can see is that we expand wildcards even when the wildcard expression isn't valid. The protecting condition is being ignored.\n\nA hacky workaround should you hit this is to move the slash inside the property, so you have eg \n\n`<Compile Include=\"$(MyPath)**\" />`\n\n(It's a good convention to always end properties with a slash if they represent a directory). With this form, it will only enumerate files underneath the project folder which presumably won't take long.\n\nThis is not a contrived scenario, in a complex build it is very easy to write an expression like the one above and it's entirely valid. Then projects take very long time to open in VS and it's impossible to figure out why without debugging MSBuild.\n\nWhat is the correct \"fix\" here? It needs some thought but a quick and easy suggestion is to special case  expanding files from the root. When in a project loading situation, projects will never be at the root of the drive. Just skip such expansions in the expander code, at least outside of targets.\n",
  "state": "CLOSED",
  "createdAt": "2016-09-23T23:06:01Z",
  "updatedAt": "2024-02-21T17:25:40Z",
  "closedAt": "2022-04-11T17:58:47Z",
  "author": {
    "login": "danmoseley"
  },
  "labels": [
    "needs-design",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "VS 17.2"
  },
  "comments": {
    "nodes": [
      {
        "body": "This problem caused all the developers in the CoreFX repo to be almost unable to work in VS for a day or so...\n",
        "createdAt": "2016-09-23T23:07:11Z",
        "updatedAt": "2016-09-23T23:07:11Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "> a quick and easy suggestion is to special case expanding files from the root.\n\nThat sounds reasonable to me. Personally I have hit this issue numerous times over the years on large projects. I've even actually seen build files wipe out drives with the resulting itemgroup.\n",
        "createdAt": "2016-09-24T00:17:15Z",
        "updatedAt": "2016-09-24T00:17:15Z",
        "author": {
          "login": "JeremyKuhne"
        }
      },
      {
        "body": "> a quick and easy suggestion is to special case expanding files from the root\n\nI don't like this in general, because I could see a build process using a whole drive as scratch space and then wanting to do, say, `Include=\"B:\\**\"`.\n\nBut I could see special-casing the initial-backslash case, which Windows itself special cases to mean \"the root of the current drive\". So `Include=\"\\**\"` and also `Include=\"$(ExpandsToEmptyString)\\**\"` would not expand.\n\nI do worry about diagnosability in this case though--there's no way to know from the outside that this thing that looks like a wildcard expansion will not actually expand. Seems like at least a warning would be justified.\n\n@cdmihai You've been messing about with wildcards lately--thoughts?\n",
        "createdAt": "2016-09-26T15:32:36Z",
        "updatedAt": "2016-09-26T15:32:36Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> I could see special-casing the initial-backslash case\n\nThat is what I was thinking of by \"root\". If you have a volume specified it was likely intentional. In the Unix case it also would be pretty bad and likely unintentional to specify `\"/**\"`.\n\nIf we wanted to dial it back a bit, `\"$(ExpandsToEmptyString)\\**\"` alone would likely solve the problem.\n",
        "createdAt": "2016-09-26T17:05:22Z",
        "updatedAt": "2016-09-26T17:05:22Z",
        "author": {
          "login": "JeremyKuhne"
        }
      },
      {
        "body": "An alternative would be to use `Path.Combine` as a property function instead of doing the path stitching by hand. We could create an MSBuild intrinsic function that is not as wordy as `[System.IO.Path]::Combine`\n\nThis way, if the first argument is empty, the path separator is not appended.\n\nMaybe something like `\"$(MyPath).CombineWith('**')\"` or `\"$(MyPath).Join('**')\"`\n",
        "createdAt": "2016-09-26T23:34:20Z",
        "updatedAt": "2016-09-26T23:40:28Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "Another alternative is to introduce some special processing to items. Whenever an item with path separators is encountered it is deconstructed into path fragments and then the path fragments are re-combined with `Path.Combine()`. This way fragments that evaluated to empty string do not get a slash appended after them.\n\nThe risk here though is that we are changing build behaviour, so people's builds will start behaving differently. I'd rather do my previous suggestion of adding some special functions like `Include=\"$(dir1).Join($(dir2).Join($(dir3)).Join(\"**\"))\"`\n",
        "createdAt": "2016-09-28T01:33:49Z",
        "updatedAt": "2016-09-28T01:36:02Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "I just diagnosed an OOM crash in Office builds that was the result of a very similar situation.\n",
        "createdAt": "2016-10-04T23:02:48Z",
        "updatedAt": "2016-10-04T23:02:48Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I would prefer not to expect users to solve this by changing all their uses of wildcards (which is what the new function implies). There are innumerable lines of MSBuild script out there already that would forever remain vunerable to this potentially crippling problem (out of memory building or not loading into VS is a crippling problem) that is very hard for a user to self diagnose. That risk vs. benefit ratio may be high enough to do a breaking change for the corner case here.\n",
        "createdAt": "2016-10-12T00:02:58Z",
        "updatedAt": "2016-10-12T00:02:58Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "We have changewaves now. I'd like to reconsider doing the \"breaking\" change here.",
        "createdAt": "2021-05-21T22:17:03Z",
        "updatedAt": "2021-05-21T22:17:03Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Another option might be a timeout on the enumeration - it won't make desktop users happy but the build lab won't hang indefinitely",
        "createdAt": "2021-05-21T23:31:40Z",
        "updatedAt": "2021-05-21T23:31:40Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "@mruxmohan4 your PR #7029 adds a warning for this case with an opt-in error. That was the best we thought we could do for the moment, right? Should we close this?",
        "createdAt": "2022-04-11T17:22:41Z",
        "updatedAt": "2022-04-11T17:22:41Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald Yes, I think this can be closed.",
        "createdAt": "2022-04-11T17:29:28Z",
        "updatedAt": "2022-04-11T17:29:28Z",
        "author": {
          "login": "mruxmohan4"
        }
      }
    ]
  }
}