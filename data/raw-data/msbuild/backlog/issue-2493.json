{
  "number": 2493,
  "title": "Need to document BuildEnvironmentHelper's dependency on env vars",
  "body": "BuildEnvironmentHelper has a lot of implicit, subtle and hard to discover dependencies on environment variables.\r\n\r\nThe behavior of MSBuild in a regular `cmd` vs. a devenv command prompt is very different. In a VS command prompt it is able to find its toolset from a VS installation.\r\n\r\nConsumers of MSBuild need to know what environment variables to set to make MSBuild work \"fine\". The logic I can think of that can go wrong is:\r\n 1. Finding the toolset\r\n 2. Finding SDK Resolvers (the DotNetMSBuildSdkResolver in particular)\r\n 3. Finding Microsoft.Common.props from Sdk.props\r\n\r\nBasically this simple program gives very different behavior based on which environment you start it from:\r\n```\r\n            var filePath = @\"C:\\SourceBrowser\\src\\HtmlGenerator\\HtmlGenerator.csproj\";\r\n            // Environment.SetEnvironmentVariable(\"VSINSTALLDIR\", @\"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\");\r\n            // Environment.SetEnvironmentVariable(\"VisualStudioVersion\", @\"15.0\");\r\n            var project = new Project(filePath);\r\n```\r\n\r\nBy default it throws this:\r\n```\r\nMicrosoft.Build.Exceptions.InvalidProjectFileException: 'The SDK 'Microsoft.NET.Sdk' specified could not be found.  C:\\SourceBrowser\\src\\HtmlGenerator\\HtmlGenerator.csproj'\r\n```\r\n\r\nIf you uncomment the two environment variables, it throws this:\r\n```\r\nMicrosoft.Build.Exceptions.InvalidProjectFileException: 'The imported project \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\MSBuild\\15.0\\Bin\\15.0\\Microsoft.Common.props\" was not found. Confirm that the path in the <Import> declaration is correct, and that the file exists on disk.  C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\MSBuild\\Sdks\\Microsoft.NET.Sdk\\Sdk\\Sdk.props'\r\n```\r\n\r\n",
  "state": "CLOSED",
  "createdAt": "2017-08-31T22:36:09Z",
  "updatedAt": "2024-02-21T17:16:54Z",
  "closedAt": "2021-10-22T19:33:51Z",
  "author": {
    "login": "KirillOsenkov"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Another issue that's really hard to investigate is that if you host MSBuild evaluation APIs in a DotnetCore app, it won't read the toolset from configuration file (`FEATURE_SYSTEM_CONFIGURATION` is false).\r\n\r\nSwitching the host app to target `net46` fixes that issue.",
        "createdAt": "2017-08-31T23:25:38Z",
        "updatedAt": "2017-08-31T23:25:38Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "http://source.dot.net/#Microsoft.Build/Definition/ToolsetReader.cs,112\r\n",
        "createdAt": "2017-09-08T22:36:54Z",
        "updatedAt": "2017-09-08T22:36:54Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "I think this is/should be resolved by https://github.com/microsoft/MSBuildLocator and by improvements to `BuildEnvironmentHelper` that make it work better when called outside of a Developer Command Prompt.",
        "createdAt": "2021-10-22T19:33:51Z",
        "updatedAt": "2021-10-22T19:33:51Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}