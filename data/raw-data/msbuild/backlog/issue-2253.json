{
  "number": 2253,
  "title": "GenerateResource cannot extract resources from ARM binaries",
  "body": "This was reported via feedback as https://developercommunity.visualstudio.com/content/problem/54934/uwp-resx-strings-not-merged-into-the-pri-file-for.html and as https://connect.microsoft.com/VisualStudio/feedback/details/2345310/. Internal bug [189984](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/189984).\r\n\r\nIf a UWP app project that builds an appx package refers to a DLL compiled for ARM that embeds resources, those resources are silently ignored rather than packaged into the PRI.\r\n\r\nThis is because of a `BadImageFormatException`\r\n\r\n```\r\n\u00a0\u00a0 at System.Reflection.RuntimeAssembly._nLoad(AssemblyName fileName, String codeBase, Evidence assemblySecurity, RuntimeAssembly locationHint, StackCrawlMark& stackMark, IntPtr pPrivHostBinder, Boolean throwOnFileNotFound, Boolean forIntrospection, Boolean suppressSecurityChecks)\r\n\u00a0\u00a0 at System.Reflection.RuntimeAssembly.nLoad(AssemblyName fileName, String codeBase, Evidence assemblySecurity, RuntimeAssembly locationHint, StackCrawlMark& stackMark, IntPtr pPrivHostBinder, Boolean throwOnFileNotFound, Boolean forIntrospection, Boolean suppressSecurityChecks)\r\n\u00a0\u00a0 at System.Reflection.RuntimeAssembly.InternalLoadAssemblyName(AssemblyName assemblyRef, Evidence assemblySecurity, RuntimeAssembly reqAssembly, StackCrawlMark& stackMark, IntPtr pPrivHostBinder, Boolean throwOnFileNotFound, Boolean forIntrospection, Boolean suppressSecurityChecks)\r\n\u00a0\u00a0 at System.Reflection.RuntimeAssembly.InternalLoadFrom(String assemblyFile, Evidence securityEvidence, Byte[] hashValue, AssemblyHashAlgorithm hashAlgorithm, Boolean forIntrospection, Boolean suppressSecurityChecks, StackCrawlMark& stackMark)\r\n\u00a0\u00a0 at System.Reflection.Assembly.UnsafeLoadFrom(String assemblyFile)\r\n\u00a0\u00a0 at Microsoft.Build.Tasks.ProcessResourceFiles.ReadAssemblyResources(String name, String outFileOrDir) in E:\\A\\_work\\8\\s\\src\\Tasks\\GenerateResource.cs:line 2958\r\n```\r\n\u00a0\r\nThrown [here ](https://github.com/Microsoft/msbuild/blob/f45785fb104c30080024affe855cd10ad27c6d4e/src/Tasks/GenerateResource.cs#L2958) and silently ignored [here](https://github.com/Microsoft/msbuild/blob/f45785fb104c30080024affe855cd10ad27c6d4e/src/Tasks/GenerateResource.cs#L2997-L3003).\r\n",
  "state": "OPEN",
  "createdAt": "2017-06-29T01:12:42Z",
  "updatedAt": "2024-02-21T16:36:30Z",
  "closedAt": null,
  "author": {
    "login": "rainersigwald"
  },
  "labels": [
    "Area: Task: GenerateResource",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "MSBuild 16.6"
  },
  "comments": {
    "nodes": [
      {
        "body": "## Workaround\r\n\r\nCompile the libraries to AnyCPU rather than ARM.",
        "createdAt": "2017-06-29T01:17:08Z",
        "updatedAt": "2017-06-29T01:17:08Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "This didn't make the cut for 15.3. Moving out.",
        "createdAt": "2017-07-26T17:19:22Z",
        "updatedAt": "2017-07-26T17:19:22Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I suspect the fix here is to move that task to use a metadata reader rather than reflection.  Typically its bad-news for build tools to use reflection/assembly.load since those have parity with the build-time framework not the targeted framework. ",
        "createdAt": "2017-08-16T22:51:09Z",
        "updatedAt": "2017-08-16T22:51:09Z",
        "author": {
          "login": "ericstj"
        }
      },
      {
        "body": "@ericstj Yes, I've been asking for help with that approach, because as far as I can tell `System.Reflection.Metadata` doesn't expose enough information: https://github.com/Microsoft/msbuild/pull/2254#discussion_r129891209.",
        "createdAt": "2017-08-16T22:57:43Z",
        "updatedAt": "2017-08-16T22:57:43Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Ah, I missed that.  I've added some info.  S.R.M is a bit confusing sometimes since it's much lower in the stack.  I suspect you need to get a binary blob and wrap that in a stream.",
        "createdAt": "2017-08-16T23:03:08Z",
        "updatedAt": "2017-08-16T23:03:08Z",
        "author": {
          "login": "ericstj"
        }
      }
    ]
  }
}