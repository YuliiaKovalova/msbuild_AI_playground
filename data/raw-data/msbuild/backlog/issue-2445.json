{
  "number": 2445,
  "title": "Creating UWP AppxBundle works in VS Store Wizard but fails in msbuild",
  "body": "We're developing UWP app - main app is built using C#/XAML plus it's referencing several our C++ libs.\r\nBuilding this app for Store works when using the Store -> Create App Packages Wizard in Visual Studio 2017.\r\n\r\nThe problem is that **we're unable to build our app into AppxBundle using just PowerShell and msbuild**.\r\nWe'd like to be able to build our app automatically on our build/CI server. We've read thoroughly this article but with no success:\r\nhttps://docs.microsoft.com/en-us/windows/uwp/packaging/auto-build-package-uwp-apps\r\n\r\n**The build fails because msbuild is ignoring custom OutDir properties when building the second 'arm' package part for the AppxBundle.**\r\n![ga0ql2z](https://user-images.githubusercontent.com/3041397/29366852-6c701264-829b-11e7-9add-5801f3611415.png)\r\n\r\n**Here is a minimal zip repro for our problem**: https://1drv.ms/u/s!AlURSa6JiyiVo5FJuYVe4v0k7FSjxQ\r\n\r\nIf you open it VS2017 and try to build it using the Store -> Create App Packages wizard, it works as expected.\r\n\r\nIf you try to run the build.ps1 script, it fails. Note that path to nuget.exe is expected in the PATH env var.\r\nSo our question is, how to replicate in PowerShell the identical build process that is used in Visual Studio Create App Packages Wizard? If the project can be build in VS, it should be possible to build it in PowerShell as well.\r\n\r\nAs far as I know the **UapAppxPackageBuildMode=StoreUpload** msbuild mode should work exactly like the VS Store Wizard, but it is behaving differently now.",
  "state": "OPEN",
  "createdAt": "2017-08-16T13:57:13Z",
  "updatedAt": "2024-02-21T16:36:03Z",
  "closedAt": null,
  "author": {
    "login": "martinsuchan"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "@vitek-karas @MattWhilden how best to route this issue? It feel more related to UWP targets than to msbuild itself.",
        "createdAt": "2017-09-05T16:38:06Z",
        "updatedAt": "2017-09-05T16:38:06Z",
        "author": {
          "login": "karelz"
        }
      },
      {
        "body": "I've sent this internally to a team in VS to take look...",
        "createdAt": "2017-09-05T16:47:26Z",
        "updatedAt": "2017-09-05T16:47:26Z",
        "author": {
          "login": "vitek-karas"
        }
      },
      {
        "body": "@diverdan92 and his team will look into this.",
        "createdAt": "2017-09-05T20:31:43Z",
        "updatedAt": "2017-09-05T20:31:43Z",
        "author": {
          "login": "vitek-karas"
        }
      },
      {
        "body": "Just to summarize, the goal is to have **a possibility to build UWP .appxupload package from PowerShell in the exactly same way it is created in the VS Store Wizard**, ideally just by providing the same data (project, configuration, platform).\r\nRight now msbuild uses different build workflow when building for Store and it fails for our project.",
        "createdAt": "2017-09-06T09:57:42Z",
        "updatedAt": "2017-09-06T09:57:42Z",
        "author": {
          "login": "martinsuchan"
        }
      },
      {
        "body": "There's one more required parameter. For non-x86 builds the AppxBundlePlatforms value must be passed. In this case: **AppxBundlePlatforms=\"ARM\"** (the quotes around ARM are important).\r\n\r\nWhat was happening here is that the main package would build with ARM, but dependent packages build using the default platform (this is by design). In the end, this will end up dropping Utils.lib in the x86 path while the main project continues to try to build for ARM and winds up searching for the dependency in the wrong place.\r\n\r\nMy commandline looked like this:\r\n_msbuild MainApp.sln /p:UapAppxPackageBuildMode=StoreUpload;AppxBundlePlatforms=\"ARM\"_",
        "createdAt": "2017-09-12T22:26:32Z",
        "updatedAt": "2017-09-12T22:26:59Z",
        "author": {
          "login": "mirkomuggli"
        }
      },
      {
        "body": "@mirkomuggli Hi, as you can see in the repro I provided above, I pass the proper AppxBundlePlatforms parameter and it still does not work:\r\n\r\n    msbuild $sln /p:Configuration=$config /p:Platform=x86 /p:AppxBundlePlatforms=\"x86|arm\" /p:AppxBundle=Always /p:UapAppxPackageBuildMode=StoreUpload\r\n\r\nAlso note that the goal here is to build AppxBundle with both x86 and ARM package - this does not work. If I try to build AppxBundle with just ARM or just x86, it works as expected.",
        "createdAt": "2017-09-13T14:12:33Z",
        "updatedAt": "2017-09-13T14:12:53Z",
        "author": {
          "login": "martinsuchan"
        }
      },
      {
        "body": "Very curious. The commandline you shared successfully builds an Arm & x86 .appxUpload with the test app you've provided.\r\n\r\nIf you can, please try this again in the latest VS Preview just to rule out any issues we've recently addressed.\r\n\r\nAlso, please run the same commandline with the following at the end.\r\n  `/v:diag > buildlog.log`\r\nThat'll create a diagnostic log and allow me to investigate further.",
        "createdAt": "2017-09-15T22:44:42Z",
        "updatedAt": "2017-09-15T22:44:42Z",
        "author": {
          "login": "mirkomuggli"
        }
      },
      {
        "body": "Have you tried the actual sample in my first post? There is nothing wrong with the command, but it does not work with a specific project configuration we have, even thought this project configuration works in the Visual Studio Build for Store wizard.",
        "createdAt": "2017-09-16T08:39:34Z",
        "updatedAt": "2017-09-16T08:39:34Z",
        "author": {
          "login": "martinsuchan"
        }
      },
      {
        "body": "I've just tested the msbuild from latest Visual Studio Preview with my repro -> same results, same error.  \r\nHere's the zipped log you requested.\r\n[buildlog.zip](https://github.com/Microsoft/msbuild/files/1308355/buildlog.zip)\r\n",
        "createdAt": "2017-09-16T13:23:42Z",
        "updatedAt": "2017-09-16T13:23:42Z",
        "author": {
          "login": "martinsuchan"
        }
      },
      {
        "body": "@mirkomuggli Hi Mirko, any update on this issue? Have you tried the minimal zip repro for this problem?",
        "createdAt": "2017-09-26T14:32:01Z",
        "updatedAt": "2017-09-26T14:32:01Z",
        "author": {
          "login": "martinsuchan"
        }
      },
      {
        "body": "@martinsuchan Hi Martin. I was finally able to track down the issue and am working on a fix. The plan is to roll it out with 15.6. I'll let you know when it's available - in a preview release or otherwise.",
        "createdAt": "2017-11-28T14:55:54Z",
        "updatedAt": "2017-11-28T14:55:54Z",
        "author": {
          "login": "mirkomuggli"
        }
      },
      {
        "body": "@mirkomuggli Hi, thanks for the update! It's great to hear you were able to reproduce it and it will be fixed.  \r\nAs I mentioned, the goal is simple - we should be able to build any UWP solution (C#/VB/C++/cppwinrt) using the msbuild.exe in the exactly same way it is built in the \"Create App Packages\" wizard.  \r\nLooking forward to test it in VS 15.6 Preview!",
        "createdAt": "2017-11-28T15:06:54Z",
        "updatedAt": "2017-11-28T15:06:54Z",
        "author": {
          "login": "martinsuchan"
        }
      },
      {
        "body": "Note I've created [tracking ticket on the Visual Studio Developer Community](https://developercommunity.visualstudio.com/content/problem/164983/creating-uwp-appxbundle-works-in-vs-store-wizard-b.html) web.    \r\nBased on [VS 15.6 Preview 1 changelog](https://www.visualstudio.com/en-us/news/releasenotes/vs2017-preview-relnotes), it's not fixed yet.",
        "createdAt": "2017-12-11T08:23:40Z",
        "updatedAt": "2017-12-11T08:23:40Z",
        "author": {
          "login": "martinsuchan"
        }
      },
      {
        "body": "encounter the same issue",
        "createdAt": "2017-12-18T02:43:27Z",
        "updatedAt": "2017-12-18T02:43:27Z",
        "author": {
          "login": "icodingforfood"
        }
      },
      {
        "body": "Updated to Visual Studio 2017 15.6 Preview 5 and this issue is still not fixed. cc @mirkomuggli ",
        "createdAt": "2018-02-15T14:59:01Z",
        "updatedAt": "2018-02-15T14:59:01Z",
        "author": {
          "login": "martinsuchan"
        }
      },
      {
        "body": "There also seems to be an issue here that when I pass in `/p:Configuration=\"Release.UWP\"` to prevent it building my other platforms, this is ignored in subsequent the x64 and arm builds (it works for the first x86 build) and so it tries to build the iOS and Android projects which are selected in Release build and then fails.\r\nThis is with the VSTS build task created by the UWP build template.",
        "createdAt": "2018-03-13T20:49:32Z",
        "updatedAt": "2018-03-13T20:49:32Z",
        "author": {
          "login": "CZEMacLeod"
        }
      },
      {
        "body": "For clarification, it appears that the Solution configuration passed in is ignored when building other platforms, and the project configuration is then used as the Solution configuration.\r\n\r\nE.g. When calling MSBuild with the arguments `/p:Configuration=\"XYZ\" /p:Platform=x86 /p:AppxBundlePlatforms=\"x86|x64|arm\"` and the solution has the UWP project mapped in Configuration Manager with XYZ|x86 -> ABC|x86, it then runs inner builds of the _solution_ with `/p:Configuration=\"ABC\" /p:Platform=x64` and `/p:Configuration=\"ABC\" /p:Platform=arm` which may have different projects selected to build etc.\r\n\r\nI worked around my issue for now by copying the project configuration ABC as XYZ for each platform in the UWP project and setting the solution configuration to XYZ|x86 -> XYZ|x86; unfortunately this causes some other unwanted behaviours because (in my case) the configuration is no longer `Release` but is `Release.UWP`.",
        "createdAt": "2018-03-13T21:41:36Z",
        "updatedAt": "2018-03-13T21:41:36Z",
        "author": {
          "login": "CZEMacLeod"
        }
      },
      {
        "body": "The above is, essentially, correct. Because of the way we do multi-architecture builds from the command line the fix is proving exceedingly tricky.\r\nIt IS on my plate (and keeping me awake at night) and it will get fixed but, unfortunately, I can't make any promises around timing at this point.",
        "createdAt": "2018-03-13T21:50:04Z",
        "updatedAt": "2018-03-13T21:50:32Z",
        "author": {
          "login": "mirkomuggli"
        }
      },
      {
        "body": "@mirkomuggli Would a (temporary) solution be to have a property such as SolutionConfiguration which would be set to Configuration if it is not set in Microsoft.AppxPackage.Targets and then use that variable instead of Configuration in the various MSBuild tasks and other places?\r\nI would be happy with using something like `/p:Configuration=\"XYZ\" /p:SolutionConfiguration=\"XYZ\" /p:Platform=x86 /p:AppxBundlePlatforms=\"x86|x64|arm\"`.\r\nAlthough it seems to me that this property should be set in the solution 'metaproj'.\r\nI see in the template that there appears to already be something similar in place for AspNet\r\n```\r\n  <PropertyGroup Condition=\" ('$(AspNetConfiguration)' == '') \">\r\n    <AspNetConfiguration>$(Configuration)</AspNetConfiguration>\r\n  </PropertyGroup>\r\n```\r\nWould it be possible to use \r\n```\r\n  <Import Project=\"$(MSBuildExtensionsPath)\\$(MSBuildToolsVersion)\\SolutionFile\\ImportBefore\\*\" Condition=\"'$(ImportByWildcardBeforeSolution)' != 'false' and exists('$(MSBuildExtensionsPath)\\$(MSBuildToolsVersion)\\SolutionFile\\ImportBefore')\" />\r\n```\r\nto implement this at the solution level, although you would probably have to do something before build in order to add SolutionConfiguration to AdditionalProperties or modify CurrentSolutionConfigurationContents to add the configuration to the SolutionConfiguration XML",
        "createdAt": "2018-03-13T22:51:26Z",
        "updatedAt": "2018-03-13T22:51:26Z",
        "author": {
          "login": "CZEMacLeod"
        }
      },
      {
        "body": "@mirkomuggli \r\nI did a quick trial of the Importxxx\\* trick for a solution and my (not very elegant) files are attached.\r\nPlace them in `C:\\Program Files (x86)\\Microsoft Visual Studio\\Preview\\Professional\\MSBuild\\15.0\\SolutionFile` under `ImportBefore` and `ImportAfter` folders respectively (these folders may not exist) and you should see it work.\r\nIn any project file or imported targets file you can then access both `$(Configuration)` and `$(SolutionConfiguration)` which may (or may not) be the same.\r\n\r\n[SolutionFile.zip](https://github.com/Microsoft/msbuild/files/1809102/SolutionFile.zip)\r\n\r\nYou could then add something like\r\n```\r\n<PropertyGroup>\r\n  <AppxConfiguration Condition=\"'$(AppxConfiguration)'=='' and '$(SolutionConfiguration)' != ''\">$(SolutionConfiguration)</AppxConfiguration>\r\n  <AppxConfiguration Condition=\"'$(AppxConfiguration)'==''\">$(Configuration)</AppxConfiguration>\r\n</PropertyGroup>\r\n```\r\nto Microsoft.AppxPackage.Targets and swap all references to `$(Configuration)` to `$(AppxConfiguration)`",
        "createdAt": "2018-03-14T00:09:07Z",
        "updatedAt": "2018-03-14T00:09:07Z",
        "author": {
          "login": "CZEMacLeod"
        }
      },
      {
        "body": "Hm. that should work. I'll dive into this early next week and report my findings.\r\nThanks!",
        "createdAt": "2018-03-15T15:51:33Z",
        "updatedAt": "2018-03-15T15:51:33Z",
        "author": {
          "login": "mirkomuggli"
        }
      },
      {
        "body": "Just a scheduling update, I'm afraid: had a hectic week followed by one spent mostly bedridden. I have an idea for a real fix here, just need to put out some fires first.",
        "createdAt": "2018-04-02T20:20:05Z",
        "updatedAt": "2018-04-02T20:20:05Z",
        "author": {
          "login": "mirkomuggli"
        }
      },
      {
        "body": "I worked around this issue by passing in `/p:BuildPlatform=\"$(BuildPlatform)\"` as another MSBuild argument in the VSTS Build task. BuildPlatform is a VSTS variable fixed to `x64` that will not change for the dependent builds, while the Platform property gets changed by MSBuild for each build.\r\n\r\nThen I added conditional Content tags in my UWP App project's csproj which compare `$(BuildPlatform)` with `$(Platform)` and either reference a path like `\\x64\\release` or `x64\\release\\x86`.\r\nThe `$(BuildPlatform) == ''` checks are to leave the local VisualStudio \"Create Package\" build unmodified.\r\n\r\n```\r\n<Content Include=\"$(SolutionDir)MyCppProject\\bin\\$(Platform)\\$(Configuration)\\MyCpp.exe\" Condition=\"('$(BuildPlatform)' == '') Or ('$(BuildPlatform)' == '$(Platform)')\">\r\n  <CopyToOutputDirectory>Always</CopyToOutputDirectory>\r\n</Content>\r\n<Content Include=\"$(SolutionDir)MyCppProject\\bin\\$(BuildPlatform)\\$(Configuration)\\$(Platform)\\MyCpp.exe\" Condition=\"('$(BuildPlatform)' != '') And ('$(BuildPlatform)' != '$(Platform)')\">\r\n  <CopyToOutputDirectory>Always</CopyToOutputDirectory>\r\n</Content>\r\n```\r\n\r\nI have not submitted to the Store yet, but the created AppxBundle looks as expected and contains the native CPP assembly for each platform.\r\n\r\n@mirkomuggli ",
        "createdAt": "2018-05-02T05:07:26Z",
        "updatedAt": "2018-05-02T05:07:26Z",
        "author": {
          "login": "DominikMe"
        }
      },
      {
        "body": "Hi @mirkomuggli , have you found time to solve this issue?",
        "createdAt": "2018-06-07T06:25:52Z",
        "updatedAt": "2018-06-07T06:25:52Z",
        "author": {
          "login": "FurryX"
        }
      },
      {
        "body": "Potentially. \r\nThis issue's been stumping a few folks on the team until someone stumbled on an old flag that alters the output folder structure due to a TeamBuild requirement from way back when.\r\n\r\nThe flag is: UseSubFolderForOutputDirDuringMultiPlatformBuild\r\nI just tried setting this to false in the quickbuild script included in the sample project, and the build succeeded.\r\n\r\nCan you give that a try on your end?\r\nWould be awesome (and incredibly frustrating) if it's that easy.",
        "createdAt": "2018-06-14T21:37:12Z",
        "updatedAt": "2018-06-14T21:37:12Z",
        "author": {
          "login": "mirkomuggli"
        }
      },
      {
        "body": "I can confirm setting this flag to 'false' fixed the problem for us.  \r\nIt would be better though to have working behavior in msbuild without need to search for hidden flags, any chance to make the 'false' behavior the default one?",
        "createdAt": "2018-06-15T12:26:06Z",
        "updatedAt": "2018-06-15T12:26:06Z",
        "author": {
          "login": "martinsuchan"
        }
      },
      {
        "body": "I've left more details on the Developer Community ticket, available here: [https://developercommunity.visualstudio.com/content/problem/164983/creating-uwp-appxbundle-works-in-vs-store-wizard-b.html](https://developercommunity.visualstudio.com/content/problem/164983/creating-uwp-appxbundle-works-in-vs-store-wizard-b.html)",
        "createdAt": "2018-06-15T14:43:35Z",
        "updatedAt": "2018-06-15T14:43:35Z",
        "author": {
          "login": "mirkomuggli"
        }
      },
      {
        "body": "In working to address issue #xxxx I found the following msbuild command sequence helped me build only what I wanted (x64 vs arm64) when launching mach build -r/-d --uwp.\r\n\r\nWithout the /property:AppxBundle=Always;AppxBundlePlatforms=platform (\"x64\" | \"arm64), the msbuild attempts to build every project (arm/x64/debug/release) within the solution.\r\n\r\nmsbuild /m:4 /p:project=ServoApp .\\support\\hololens\\servoapp.sln /p:SolutionDir=.\\support\\hololens /p:Configuration=\"Debug\" /p:Platform=\"x64\" /property:AppxBundle=Always;AppxBundlePlatforms=\"x64\"\r\n",
        "createdAt": "2019-08-13T15:11:10Z",
        "updatedAt": "2019-08-13T15:11:10Z",
        "author": {
          "login": "angelortiz1007"
        }
      },
      {
        "body": "> In working to address issue #xxxx I found the following msbuild command sequence helped me build only what I wanted (x64 vs arm64) when launching mach build -r/-d --uwp.\r\n> Without the /property:AppxBundle=Always;AppxBundlePlatforms=platform (\"x64\" | \"arm64), the msbuild attempts to build every project (arm/x64/debug/release) within the solution.\r\n> msbuild /m:4 /p:project=ServoApp .\\support\\hololens\\servoapp.sln /p:SolutionDir=.\\support\\hololens /p:Configuration=\"Debug\" /p:Platform=\"x64\" /property:AppxBundle=Always;AppxBundlePlatforms=\"x64\"\r\n\r\nSorry to reference issue #xxxx.  Issue I meant to reference is: https://github.com/servo/servo/issues/23753\r\n",
        "createdAt": "2019-08-13T15:12:11Z",
        "updatedAt": "2019-08-13T15:12:11Z",
        "author": {
          "login": "angelortiz1007"
        }
      },
      {
        "body": "\r\n\r\n\r\n> Create App Packages\r\n\r\nmartinsuchan:\r\n\r\nI'm using  your StoreBuildTest.sln from https://1drv.ms/u/s!AlURSa6JiyiVo5FJuYVe4v0k7FSjxQ.\r\n\r\nSo some of the problem lies in the solution macros and the other 2 project's macros (utils and Mainlib).  It appears that when you build with the .sln all the macros know where everything is located and you are able to build the utils.lib, followed by mainlib.dll and finally the main app.\r\n\r\n**There are 2 issues/problems:**\r\n_Problem 1_\r\nWhen you use msbuild those macros ($(solutiondir) etc...) are not known and therefore msbuild will NOT find the .libs.\r\n\r\n_Problem 2_\r\nSeems to be where **utils.lib** is being created.  When you use the .sln file it is put in the StoreBuildTest\\**Win32**\\Release\\lib_UWP.  \r\n\r\nif you build **utils.lib** using **msbuild** using:\r\nmsbuild /m:4 .\\utils\\Utils.vcxproj /p:Configuration=\"release\" /p:Platform=\"x86\" /p:AppxBundle=Always;AppxBundlePlatforms=\"x86\" \r\n\r\n_**utils.lib** is placed in:_\r\nStoreBuildTest\\**Utils**\\Win32\\release\\lib_UWP\r\n\r\n**Resolution:**\r\nTry the following in your build.ps1 file.  I tried them from a CMD prompt and was able to build.  The main one you would like to execute is the last one that uses the **mainapp.sln**.  The key to all the build process was to have the **/p:SolutionDir=%CD%\\StoreBuildTest\\StoreBuildTest\\**\r\n\r\n_msbuild /m:4 .\\utils\\Utils.vcxproj /p:Configuration=\"release\" /p:Platform=\"x86\" /p:AppxBundle=Always;AppxBundlePlatforms=\"x86\" /p:SolutionDir=%CD%\\StoreBuildTest\\StoreBuildTest\\\r\n\r\nmsbuild /m:4 .\\MainLib\\MainLib.vcxproj /p:Configuration=\"release\" /p:Platform=\"x86\" /p:AppxBundle=Always;AppxBundlePlatforms=\"x86\" /p:SolutionDir=%CD%\\StoreBuildTest\\StoreBuildTest\\_\r\n\r\n**msbuild /m:4 mainapp.sln /p:Configuration=\"release\" /p:Platform=\"x86\" /p:AppxBundle=Always;AppxBundlePlatforms=\"x86\" /p:SolutionDir=%CD%\\StoreBuildTest\\StoreBuildTest\\**\r\n\r\n\r\n",
        "createdAt": "2019-08-14T20:08:08Z",
        "updatedAt": "2019-08-14T20:08:08Z",
        "author": {
          "login": "angelortiz1007"
        }
      },
      {
        "body": "@angelortiz1007 Hi, we've already fixed the issue some time ago using the `UseSubFolderForOutputDirDuringMultiPlatformBuild=false` flag, see the answer from @mirkomuggli .",
        "createdAt": "2019-08-16T07:22:14Z",
        "updatedAt": "2019-08-16T07:22:14Z",
        "author": {
          "login": "martinsuchan"
        }
      }
    ]
  }
}