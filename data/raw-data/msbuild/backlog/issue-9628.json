{
  "number": 9628,
  "title": "Analyzers prototyping - Configuration module",
  "body": "### Context\r\n\r\n#9627\r\n\r\nConfiguration module will be responsible for loading user settings from `.editorconfig`s in a structured form. The OM for configuration will yet be determined - we should be able to support strongly typed configuration, but it will be known at compile time and can be assumed 'hardcoded'. It should as well be possible to pass-through a custome key-value pairs as configuration - basically anything that is not recognized by existing OM will be stuffed to a lookup and provided to the analyzer.\r\nNote `.editorconfig` files are hierarchical - more details https://editorconfig.org/#file-location\r\nPlus `.editorconfig` might be included in nuget packages and written to source location during restore phase. Thiough for a V1 we might just decide to ignore configuration changes upon build start. \r\n\r\n\r\n### Things to be investigated and decided\r\n\r\n* Rules group, naming (e.g. `dotnet_diagnostic.MSB00123.severity = warning`)\r\n* Any additional support for grouping? (e.g. how to effectively distinguish all rules imported from specific package)\r\n* Where/How to discover .editorconfig files (e.g. Roslyn consider hieratchical editorconfig files in included sources locations plus packed in regular nugets or analyzer nugets)\r\n\r\n### References\r\n\r\n* https://editorconfig.org/\r\n* https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/configuration-files\r\n* Roslyn imlementation:\r\n  * https://github.com/dotnet/roslyn/blob/8a7ca9af3360ef388b6dad61c95e2d0629d7a032/src/Compilers/Core/Portable/CommandLine/AnalyzerConfig.cs\r\n  * https://github.com/dotnet/roslyn/tree/8a7ca9af3360ef388b6dad61c95e2d0629d7a032/src/Workspaces/SharedUtilitiesAndExtensions/Compiler/Core/EditorConfig\r\n* https://www.mytechramblings.com/posts/configure-roslyn-analyzers-using-editorconfig \r\n\r\n\r\n### Followup work in scope of this epic:\r\n* [x] https://github.com/dotnet/msbuild/issues/10123\r\n* [x] https://github.com/dotnet/msbuild/issues/10232\r\n* [x] https://github.com/dotnet/msbuild/issues/10315\r\n\r\n### Moved to post-net9.0:\r\n* [x] https://github.com/dotnet/msbuild/issues/9823\r\n* [ ] https://github.com/dotnet/msbuild/issues/10314",
  "state": "CLOSED",
  "createdAt": "2024-01-11T11:54:28Z",
  "updatedAt": "2024-10-23T13:17:01Z",
  "closedAt": "2024-08-05T12:55:35Z",
  "author": {
    "login": "JanKrivanek"
  },
  "labels": [
    "triaged",
    "Area: BuildCheck"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "f-alizada"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "@JanKrivanek thanks for the detailed description! \r\nI have few clarification questions: \r\n\r\n- (The OM for configuration will yet be determined - we should be able to support strongly typed configuration) Do I understand correctly that we are referring here to the known properties for example: IsEnabled, Severity or any other predefined analyzer or we are aiming to support all properties as strongly typed? \r\n- Where/How to discover .editorconfig files (e.g. Roslyn consider hieratchical editorconfig files in included sources locations plus packed in regular nugets or analyzer nugets) Could you please clarify the concerns with following the specification of editorconfig, not to introduce different implementation with different behaviour.  ",
        "createdAt": "2024-02-12T13:06:30Z",
        "updatedAt": "2024-02-12T13:06:30Z",
        "author": {
          "login": "f-alizada"
        }
      },
      {
        "body": "* Strong typing - the infra requird configuration will be known at compile time (and changing rarely if ever) - so that can be hardcoded. Everything else discovered in editorconfig will be passed just as strings key-value pairs (and this is not even strong requirement for v1)\r\n* discovery - any location being discovered will follow the standard of going up the folder structure, untill root=true is hit in editorconfig or untill root of the driv is hit. That means that the configuration will need to be given for specific locations (the caller of the Configuration module will need to specify location). The .editorconfig files can as well be placed as resources in the nuget file and appear in the sources tree during the restore/evaluation time - this probably won't change implementation, as analyzers will run after the restore phase and hence all .editorconfig files will be already in place. But it might be good idea to check with Roslyn team whether they chosen to somehow special-case handle such .editorconfig files packed within nugets.",
        "createdAt": "2024-02-12T18:19:25Z",
        "updatedAt": "2024-02-12T18:19:25Z",
        "author": {
          "login": "JanKrivanek"
        }
      }
    ]
  }
}