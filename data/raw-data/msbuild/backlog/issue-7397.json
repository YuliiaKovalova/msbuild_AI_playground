{
  "number": 7397,
  "title": "CompileDependsOn can't be set in .csproj in SDK style projects",
  "body": "### Issue Description\r\n\r\nMsBuild property `CompileDependsOn` is overridden in SDK style projects [here](https://github.com/dotnet/msbuild/blob/v17.1.0/src/Tasks/Microsoft.Common.CurrentVersion.targets#L3456).  \r\n`Microsoft.Common.CurrentVersion.targets` is imported (indirectly) by `SDK.targets`, which means when using the implicit SDK import style: `<Project Sdk=\"Microsoft.NET.Sdk.Web\">`, then `SDK.targets` is the last `<Import>` in the `<Project>`, thus [Microsoft.Common.CurrentVersion.targets](https://github.com/dotnet/msbuild/blob/v17.1.0/src/Tasks/Microsoft.Common.CurrentVersion.targets#L3456) always overrides `CompileDependsOn` if it is set in a `.csproj`\r\n\r\n### Steps to Reproduce\r\n\r\n    <Project Sdk=\"Microsoft.NET.Sdk\">\r\n      <PropertyGroup>\r\n        <CompileDependsOn>MyTarget;$(CompileDependsOn)</CompileDependsOn>\r\n      </PropertyGroup>\r\n    </Project>\r\n\r\nUsing the above in eg a `.csproj`, property `CompileDependsOn` won't contain `MyTarget`.  \r\nYou can try it out using [this prepared demo repository](https://github.com/nvirth/MsBuildPropertyOverrideIssue)\r\n\r\n### Expected Behavior\r\n\r\nMsBuild property `CompileDependsOn` should contain `MyTarget`\r\n\r\n### Actual Behavior\r\n\r\nMsBuild property `CompileDependsOn` does not contain `MyTarget`, because `CompileDependsOn` is overridden later by [Microsoft.Common.CurrentVersion.targets](https://github.com/dotnet/msbuild/blob/v17.1.0/src/Tasks/Microsoft.Common.CurrentVersion.targets#L3456)\r\n\r\n### Analysis\r\n\r\nMsBuild properties in [Microsoft.Common.CurrentVersion.targets](https://github.com/dotnet/msbuild/blob/v17.1.0/src/Tasks/Microsoft.Common.CurrentVersion.targets) are written like \"declarations\". Like these properties would be created here, but that's not the case, since [Microsoft.Common.CurrentVersion.targets](https://github.com/dotnet/msbuild/blob/v17.1.0/src/Tasks/Microsoft.Common.CurrentVersion.targets) is `<Import>`-ed from `SDK.targets` - which is implicitely imported as the last `<Import>` of the `<Project>` - and not from `SDK.props`.\r\n\r\n[Microsoft.Common.CurrentVersion.targets](https://github.com/dotnet/msbuild/blob/v17.1.0/src/Tasks/Microsoft.Common.CurrentVersion.targets) should handle properties like they could be declared already; it should not override these properties, but append to them. Like `<CompileDependsOn>MyTarget;$(CompileDependsOn)</CompileDependsOn>`\r\n\r\n",
  "state": "CLOSED",
  "createdAt": "2022-02-16T15:59:52Z",
  "updatedAt": "2022-08-18T16:58:13Z",
  "closedAt": "2022-08-18T16:58:12Z",
  "author": {
    "login": "nvirth"
  },
  "labels": [
    "bug",
    "needs-more-info",
    "needs-triage",
    "author-responded"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "This isn't quite a duplicate of #1680, but is a result of the same thing and generally the recommendations are the same.",
        "createdAt": "2022-02-16T16:18:31Z",
        "updatedAt": "2022-02-16T16:18:31Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "So moving things around in common targets is a very dangerous change, and it won't happen.\r\n\r\nWhat about then changing in [Microsoft.Common.CurrentVersion.targets](https://github.com/dotnet/msbuild/blob/v17.1.0/src/Tasks/Microsoft.Common.CurrentVersion.targets#L3456) CompileDependsOn (and CleanDependsOn, and the others) like this?\r\n\r\n    <CompileDependsOn>$(CompileDependsOn);...</CompileDependsOn>\r\n\r\n",
        "createdAt": "2022-02-17T12:39:19Z",
        "updatedAt": "2022-02-17T12:39:19Z",
        "author": {
          "login": "nvirth"
        }
      },
      {
        "body": "Team triage:\r\nDo you have a scenario in mind that needs this?",
        "createdAt": "2022-02-17T17:10:46Z",
        "updatedAt": "2022-02-17T17:10:46Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "I do have, if this was asked from me",
        "createdAt": "2022-02-28T16:21:31Z",
        "updatedAt": "2022-02-28T16:21:31Z",
        "author": {
          "login": "nvirth"
        }
      },
      {
        "body": "Can you explain that scenario?",
        "createdAt": "2022-02-28T16:39:09Z",
        "updatedAt": "2022-02-28T16:39:09Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "We have smg like `Common.targets`, which is `<Import>`-ed in many `.csproj`s.  \r\nThis `.targets` hooks in custom Targets into `CompileDependsOn` and `CleanDependsOn`.  \r\nPreviously, this `Common.targets` was only included in old style `.csproj`s, where it worked fine.  \r\nNow, we have new projects using the SDK style format where this does not work by default, only with workarounds.\r\n\r\nSo, one scenario, where this current github issue causes problems, is upgrading an old format `.csproj` to the new SDK style `.csproj` format. Things were just silently missing from the build/clean.\r\n\r\nAnother one is using a `Common.targets` in both old and SDK style `.csproj`s.  \r\nIt is possible, but we only with workarounds.  \r\nWhen using workarounds, you need to be aware of them, which makes maintenance harder and extension more fragile.\r\n\r\nOne workaround is using explicit SDK import and ordering `Common.target`'s import later than that. But then it turned out the `Common.target` just initializes some NuGets, so it has to be imported before the targets delivered by these packages. Which by default just comes with the SDK `.targets` import. Which has to be before `Common.target`. To break circular dependencies, import these nugets (using `<PackageRefenrece GeneratePathProperty=\"true\"/>`) explicitely in the correct place, move them out from the SDK `.targets` import... This works, but it gets into spaghetti soon.  \r\n\r\nAnother workaround is to move the `CompileDependsOn` setting in `Common.targets` into a `Target`, and call that in `InitialTargets`.  \r\nBut then a part of the Properties are set during the evaluation phase, another part of them during the execution phase.  \r\nWhich works, but is not ideal. You may need to be aware of this fact when extending the `.targets` files.  ",
        "createdAt": "2022-03-02T13:26:41Z",
        "updatedAt": "2022-03-02T13:26:41Z",
        "author": {
          "login": "nvirth"
        }
      },
      {
        "body": "Team triage: Can you try rewriting your hooks to use BeforeTargets or AfterTargets instead?\r\n\r\nCompileDependsOn and CleanDependsOn are properties, and their only relevance is their value at the time compile or clean actually execute. If you add your targets to one of them after compile/clean execute, it will be ignored. Similarly, if you add it before but it gets overwritten later, it will be ignored. BeforeTargets and AfterTargets are more reliable.\r\n\r\nIn particular, Microsoft.Common.CurrentVersion.targets sets an explicit value for CompileDependsOn, so that might explain why your workaround works, but as you said, it quickly turned into spaghetti, as you had other reasons to need to import the SDK .targets first. There may well be something similar in the SDK.",
        "createdAt": "2022-03-10T17:46:15Z",
        "updatedAt": "2022-03-10T17:46:15Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "I will try using `AfterTargets=\"Compile\"` in future developments.",
        "createdAt": "2022-03-16T10:50:57Z",
        "updatedAt": "2022-03-16T10:50:57Z",
        "author": {
          "login": "nvirth"
        }
      },
      {
        "body": "Also you can import your `Common.targets` in `Directory.Build.targets`. There's also the `CustomAfterMicrosoftCommonTargets` property. Both would have the same effect as importing after MSBuild targets in the legacy csproj. But only the former can override the targets in implicit NuGet imports. _I don't know why anyone mention this?_",
        "createdAt": "2022-04-23T03:41:53Z",
        "updatedAt": "2022-04-28T02:04:01Z",
        "author": {
          "login": "Nirmal4G"
        }
      },
      {
        "body": "Closing, feel free to reopen",
        "createdAt": "2022-08-18T16:58:12Z",
        "updatedAt": "2022-08-18T16:58:12Z",
        "author": {
          "login": "benvillalobos"
        }
      }
    ]
  }
}