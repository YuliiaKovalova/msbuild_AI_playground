{
  "number": 10046,
  "title": "Complex project setup with plugins and git submodules, need help building very specific output",
  "body": "Hello everyone. I have some questions about getting my build to work the way I want. The issue appears fairly complex and I have been unable to receive any help from anywhere else. Please keep in mind that this project is over 10 years old and riddled with some bad design choices.\r\n\r\nLet me explain.\r\n\r\n### The App\r\n\r\n```\r\nMyApp/\r\n\u251c\u2500 plugins/\r\n\u2502  \u2514\u2500 Directory.Build.props\r\n\u251c\u2500 lib/\r\n\u251c\u2500 src/\r\n\u2502  \u251c\u2500 MyApp/\r\n\u2502  \u251c\u2500 MyApp.Core/\r\n\u2502  \u251c\u2500 MyApp.Register/\r\n\u2502  \u251c\u2500 MyApp.View/\r\n\u2502  \u251c\u2500 MyApp.UpdateManager/\r\n\u2502  \u2514\u2500 Directory.Build.props\r\n\u251c\u2500 test\r\n\u2502  \u251c\u2500 MyApp.*.UnitTests/\r\n\u2502  \u2514\u2500 Directory.Build.props\r\n\u251c\u2500 Directory.Build.props\r\n\u2514\u2500 MyApp.sln\r\n```\r\n\r\nFirstly I need to mention one extremely important point: **every sub-directory in `MyApp/plugins/` and `MyApp/lib/` is a `git` submodule**. This means that they all need to exist and require the ability to be built on their very own.\r\n\r\n1. A connection to the parent `MyApp` repository or directory must still be given, because all of the plugins reference `MyApp.Core` and `MyApp.UpdateManager`. I was planning on handling this via a `Directory.Build.props` file in `MyApp/plugins/` which sets a property like `$(MyAppSrcDirectory)`.\r\n2. `MyApp/src/MyApp/` must remain the startup project of the solution.\r\n3. Building and running (I am willing to accept publishing here as well) `MyApp/src/MyApp/` must build the following projects as well (they are required for `MyApp` to run with all functionality):\r\n   - `MyApp/src/MyApp.Register`\r\n   - `MyApp/src/MyApp.UpdateManager` as `OutputType=WinExe` (it's `Library` by default, which is required for the other projects)\r\n   - all projects in `MyApp/plugins/`, placed in a `Plugins/` sub-directory in the output directory.\r\n4. Duplicate assemblies which are already present in the output directory should be omitted from the `Plugins/` sub-directory.\r\n\r\n### The Plugins\r\n\r\n```\r\nMyApp.SomePlugin/\r\n\u251c\u2500 src/\r\n\u2502  \u2514\u2500 MyApp.SomePlugin/\r\n\u251c\u2500 test\r\n\u2502  \u2514\u2500 MyApp.SomePlugin.UnitTests/\r\n\u251c\u2500 Directory.Build.props\r\n\u2514\u2500 MyApp.SomePlugin.sln\r\n```\r\n\r\nAs mentioned, all plugins are `git` submodules. That means when only the plugin is cloned on its own, there must be a way to build it even then. A requirement for this, of course, is that `MyApp` must also be cloned, but this can be a shallow, non-recursive clone. When building the plugin, the user then merely passes the path to the required directories: `dotnet build -p:MyAppSrcDirectory=...`.\r\n\r\n### Directory.Build.props\r\n\r\nSince `Directory.Build.props` files help me apply a lot of properties all at once on relevant projects, I use them everywhere. That means I am also using them in the plugin projects. This obviously causes some problems:\r\n\r\n1. If I can, I don't want to conditionally import a `Directory.Build.props` from the directory above in the plugins. The `Import` needs to be conditional, because the plugin may be cloned *not* as a submodule of `MyApp`, which means the `Directory.Build.props` file in a directory above would not exist.  \r\n   I am currently doing this to include `MyApp/plugins/Directory.Build.props`, which sets the aforementioned `$(MyAppSrcDirectory)`, which is in turn used in the `ProjectReference`s of the plugins.\r\n2. I set `UseArtifactsOutput` to `true` in all top-level `Directory.Build.props` files. I want the artifacts to be placed in the same directory for all projects, including the plugins. This is hindered because the plugins' top-level `Directory.Build.props` file overwrites the `ArtifactsPath` from `MyApp/Directory.Build.props`.\r\n\r\n### MyApp.sln\r\n\r\nThis might be the most frustrating part. I personally work exclusively on the command line. But most users will want to clone the repository (recursively), open the solution file, press F6, and have a complete running app. This is difficult to fulfill due to the fairly complex output structure.\r\n\r\nAdditionally, the `MyApp/` solution file includes the plugin projects themselves as well, which probably causes issues when building the entire solution.\r\n\r\n---\r\n\r\nThat's the gist of it.\r\n\r\nI'm looking for some help on what I need to do to get this to work the way I need. I'm desperate at this point. Please ask any clarifying questions and I'll be happy to provide more information.",
  "state": "OPEN",
  "createdAt": "2024-04-20T13:39:31Z",
  "updatedAt": "2024-04-23T13:35:45Z",
  "closedAt": null,
  "author": {
    "login": "just-ero"
  },
  "labels": [],
  "assignees": {
    "nodes": [
      {
        "login": "rainersigwald"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Perhaps the SolutionDir property can be useful for conditions in the plugin projects.  IIRC, it is set by Visual Studio; not sure about command-line MSBuild, but if not, then [Directory.Solution.props](https://learn.microsoft.com/visualstudio/msbuild/customize-solution-build) could set it \u2014 this might have to be done via an ItemDefinitionGroup that adds AdditionalProperties metadata to ProjectReference items.",
        "createdAt": "2024-04-20T15:19:14Z",
        "updatedAt": "2024-04-20T15:24:24Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "I'm so confused about what any of that means. Please include examples.",
        "createdAt": "2024-04-20T15:27:43Z",
        "updatedAt": "2024-04-20T15:27:43Z",
        "author": {
          "login": "just-ero"
        }
      }
    ]
  }
}