{
  "number": 5451,
  "title": "Exec Command UseCommandProcessor = \"True\" is missing cmd.exe",
  "body": "When setting `UseCommandProcessor = \"True\"`  in an `<exec ..` task, the commandline switches `/Q /D /C` are generated, but the required `cmd.exe` is missing in the generated code.\r\n\r\n### Steps to reproduce\r\nOpen this project file in Visual Studio 2019 and build:\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<Project ToolsVersion=\"Current\" DefaultTargets=\"Build\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\r\n  <PropertyGroup Condition=\" '$(Configuration)|$(Platform)' == 'Debug' \">\r\n    <OutputPath>bin\\</OutputPath>\r\n  </PropertyGroup>\r\n  <PropertyGroup>\r\n    <RootNamespace>VerilogIssue</RootNamespace>\r\n    <ProjectGuid>{C32098DE-768D-4521-8C70-119A087D9407}</ProjectGuid>\r\n  </PropertyGroup>\r\n  <PropertyGroup>\r\n    <InstallBuildDependenciesCmd>.\\build\\vs-prog.bat</InstallBuildDependenciesCmd>\r\n    <PipelineDependsOn>\r\n      InstallBuildDependencies;\r\n    </PipelineDependsOn>\r\n</PropertyGroup>\r\n\r\n  <ItemGroup>\r\n  </ItemGroup>\r\n  <Target Name=\"Build\">\r\n    <Exec Command=\"ping 192.168.1.1\" UseCommandProcessor = \"True\" YieldDuringToolExecution=\"True\" ConsoleToMSBuild=\"true\" Condition=\"'$(Configuration)'=='Debug' \">\r\n      <Output TaskParameter=\"ConsoleOutput\" ItemName=\"OutputOfExec\" />\r\n    </Exec> \r\n  </Target>\r\n  <Target Name=\"Rebuild\" DependsOnTargets=\"Clean;Build\">\r\n  </Target>\r\n  <Target Name=\"Clean\">\r\n  </Target>\r\n</Project>\r\n```\r\n\r\nDirectory contents:\r\n```\r\n(none)\r\n```\r\n\r\n### Expected behavior\r\n\r\nAs noted in the [documentation](https://docs.microsoft.com/en-us/visualstudio/msbuild/exec-task?view=vs-2019), setting [UseCommandProcessor](https://docs.microsoft.com/en-us/dotnet/api/microsoft.build.utilities.tooltask.usecommandprocessor?view=netframework-4.8) = \"true\" should:\r\n\r\n>When set to true, this task creates a batch file for the command line and executes it by using the command-processor instead of executing the command directly.\r\n\r\nFirst, no batch file is created... instead it appears there's an attempt to wrap with just `cmd.exe`.\r\n\r\nFurther, as shown in the example below, the `cmd.exe` is missing, and should should have been added like this:\r\n```\r\ncmd.exe /Q /D /C C:\\Users\\gojimmypi\\AppData\\Local\\Temp\\tmp8e500fe3f5f24fbd896f954d39d199f5.exec.cmd \r\n```\r\n\r\n### Actual behavior\r\nNote in particular the 7th line:\r\n```\r\n1>  C:\\Users\\gojimmypi\\source\\repos\\Verilog45\\Verilog45>/Q /D /C ....\r\n```\r\nfrom the full build output:\r\n```\r\n1>------ Build started: Project: VerilogIssue, Configuration: Debug Any CPU ------\r\n1>Build started 6/21/2020 11:41:07 AM.\r\n1>Build:\r\n1>  ping 192.168.1.1\r\n1>  ping 192.168.1.1\r\n1>  \r\n1>  C:\\Users\\gojimmypi\\source\\repos\\Verilog45\\Verilog45>/Q /D /C C:\\Users\\gojimmypi\\AppData\\Local\\Temp\\tmp8e500fe3f5f24fbd896f954d39d199f5.exec.cmd \r\n1>  '/Q' is not recognized as an internal or external command,\r\n1>  operable program or batch file.\r\n1>C:\\Users\\gojimmypi\\source\\repos\\Verilog45\\Verilog45\\VerilogIssue.csproj(20,5): error MSB3073: The command \"ping 192.168.1.1\" exited with code 1.\r\n1>\r\n1>Build FAILED.\r\n1>\r\n1>\"C:\\Users\\gojimmypi\\source\\repos\\Verilog45\\Verilog45\\VerilogIssue.csproj\" (Build target) (1) ->\r\n1>(Build target) -> \r\n1>  C:\\Users\\gojimmypi\\source\\repos\\Verilog45\\Verilog45\\VerilogIssue.csproj(20,5): error MSB3073: The command \"ping 192.168.1.1\" exited with code 1.\r\n1>\r\n1>    0 Warning(s)\r\n1>    1 Error(s)\r\n1>\r\n1>Time Elapsed 00:00:00.08\r\n========== Build: 0 succeeded, 1 failed, 0 up-to-date, 0 skipped ==========\r\n\r\n```\r\n### Environment data\r\n`msbuild /version` output:\r\n\r\n```\r\nC:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise>msbuild /version\r\nMicrosoft (R) Build Engine version 16.5.0+d4cbfca49 for .NET Framework\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n16.5.0.12403\r\n```\r\n\r\nOS info:\r\n\r\n```\r\nMicrosoft Windows [Version 10.0.18363.900]\r\n```\r\n\r\nIf applicable, version of the tool that invokes MSBuild (Visual Studio, dotnet CLI, etc):\r\n\r\n```\r\nMicrosoft Visual Studio Enterprise 2019 (3)\r\nVersion 16.6.1\r\nVisualStudio.16.Release/16.6.1+30128.74\r\nMicrosoft .NET Framework\r\nVersion 4.8.03752\r\n\r\nInstalled Version: Enterprise\r\n```\r\n\r\nedit: this is related to https://github.com/gojimmypi/VerilogLanguageExtension/pull/25#issuecomment-640307560",
  "state": "OPEN",
  "createdAt": "2020-06-21T18:58:54Z",
  "updatedAt": "2025-04-04T18:48:53Z",
  "closedAt": null,
  "author": {
    "login": "gojimmypi"
  },
  "milestone": {
    "title": "Backlog"
  },
  "assignees": {
    "nodes": []
  },
  "labels": [
    "bug",
    "help wanted",
    "Area: Tasks",
    "triaged"
  ],
  "comments": {
    "nodes": [
      {
        "body": "Nice bug!\r\n\r\n`Exec` _always_ uses a `cmd.exe` wrapper (on Windows; on *nix it's `/bin/sh`), so it's redundant to specify `UseCommandProcessor`. But it shouldn't cause a difference in behavior!",
        "createdAt": "2020-06-24T15:39:30Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I was wondering about the redundancy specification... this was my final hope of trying to get `msbuild` to send messages from a long running, external process to the output window as described [here](https://github.com/gojimmypi/VerilogLanguageExtension/pull/25#issuecomment-640259595) while executing without having to wait until the end of the process.\r\n\r\n@rainersigwald given your response, I would assume that the `UseCommandProcessor` will not fix this problem, and that all of the text from a long running, external process only burps out messages at completion time? Is there any way around this to be able to see messages as they are generated? \r\n\r\nI can see the messages in real time in an optional DOS Window that pops up, but this is not the most graceful as the window closes upon completion, and it would be nice to have the messages in the `output` window of Visual Studio.",
        "createdAt": "2020-06-24T16:03:06Z",
        "author": {
          "login": "gojimmypi"
        }
      },
      {
        "body": "I don't reproduce that behavior; with this project I get real-time output from ping\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netstandard2.0</TargetFramework>\r\n    <RootNamespace>_5451</RootNamespace>\r\n  </PropertyGroup>\r\n\r\n  <Target Name=\"LogStuffInRealTime\" BeforeTargets=\"CoreCompile\">\r\n    <Exec Command=\"ping 127.0.0.1\" YieldDuringToolExecution=\"True\" ConsoleToMSBuild=\"true\" StandardOutputImportance=\"high\">\r\n      <Output TaskParameter=\"ConsoleOutput\" ItemName=\"OutputOfExec\" />\r\n    </Exec> \r\n  </Target>\r\n</Project>\r\n```\r\n\r\n![real_time_ping](https://user-images.githubusercontent.com/3347530/85759606-bbe7ab00-b6d6-11ea-82ad-ea6fa19012c2.gif)\r\n",
        "createdAt": "2020-06-25T16:28:34Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald ah yes! that's brilliant! How did you know to use that `Project Sdk` project file type?\r\n\r\nIt seems the only difference is your project wrapper with a `TargetFramework` :\r\n\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netstandard2.0</TargetFramework>\r\n    <RootNamespace>_5451</RootNamespace>\r\n  </PropertyGroup>\r\n</Project>\r\n```\r\n\r\nversus what Visual Studio generates for me:\r\n\r\n```\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<Project ToolsVersion=\"Current\" DefaultTargets=\"Build\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\r\n</Project>\r\n```\r\nFor instance, this exhibits the delay:\r\n```\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<Project ToolsVersion=\"Current\" DefaultTargets=\"Build\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\r\n  <PropertyGroup Condition=\" '$(Configuration)|$(Platform)' == 'Debug' \">\r\n    <OutputPath>bin\\</OutputPath>\r\n  </PropertyGroup>\r\n\r\n  <Target Name=\"Build\">\r\n    <Exec Command=\"ping 127.0.0.1\" YieldDuringToolExecution=\"True\" ConsoleToMSBuild=\"true\" StandardOutputImportance=\"high\">\r\n      <Output TaskParameter=\"ConsoleOutput\" ItemName=\"OutputOfExec\" />\r\n    </Exec>\r\n  </Target>\r\n  <Target Name=\"Rebuild\" DependsOnTargets=\"Clean;Build\">\r\n  </Target>\r\n  <Target Name=\"Clean\">\r\n  </Target>\r\n</Project>\r\n```\r\n\r\nand nothing at all happens here:\r\n\r\n```\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<Project ToolsVersion=\"Current\" DefaultTargets=\"Build\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\r\n  <PropertyGroup Condition=\" '$(Configuration)|$(Platform)' == 'Debug' \">\r\n    <OutputPath>bin\\</OutputPath>\r\n  </PropertyGroup>\r\n\r\n  <Target Name=\"LogStuffInRealTime\" BeforeTargets=\"CoreCompile\">\r\n    <Exec Command=\"ping 127.0.0.1\" YieldDuringToolExecution=\"True\" ConsoleToMSBuild=\"true\" StandardOutputImportance=\"high\">\r\n      <Output TaskParameter=\"ConsoleOutput\" ItemName=\"OutputOfExec\" />\r\n    </Exec>\r\n  </Target>\r\n\r\n  <Target Name=\"Build\">\r\n  </Target>\r\n  <Target Name=\"Rebuild\" DependsOnTargets=\"Clean;Build\">\r\n  </Target>\r\n  <Target Name=\"Clean\">\r\n  </Target>\r\n</Project>\r\n```\r\n\r\n\r\n\r\nI'm using this version of visual Studio:\r\n\r\n```\r\nMicrosoft Visual Studio Enterprise 2019 (3)\r\nVersion 16.6.1\r\nVisualStudio.16.Release/16.6.1+30128.74\r\nMicrosoft .NET Framework\r\nVersion 4.8.03752\r\n\r\nInstalled Version: Enterprise\r\n```",
        "createdAt": "2020-06-25T19:05:47Z",
        "author": {
          "login": "gojimmypi"
        }
      },
      {
        "body": "I did some investigation of this issue. This is not a new issue and the behavior seems to have changed since the original report.\r\n\r\nThe `Exec` task appears to perform regardless of whether `UseCommandProcessor` is `false` or `true`. I was unable to reproduce the defect of a missing `cmd.exe`. However, `Exec` always uses a batch file and when `UseCommandProcessor` is `true`, there are two temporary batch files created[^1].\r\n\r\n`Exec` derives from `ToolTaskExtension` which derives from `ToolTask`.\r\n\r\n`ToolTask` implements `UseCommandProcessor` and generates a batch file when `UseCommandProcessor` is true.\r\n\r\n`Exec` essentially ignores that the `UseCommandProcessor` parameter exists and always generates a batch file.\r\n\r\nRefactoring should be done so that `Exec` always sets `UseCommandProcessor` to `true` and leverages `ToolTask` to generate the batch file. The `UseCommandProcessor` parameter can't be removed from `Exec` (because of legacy code) but `Exec` should silently never allow `false`.\r\n\r\n[^1]: @gojimmypi expected to see the generated batch file in the project directory but, at least in the current code, the temporary batch files are generated in a temp directory.",
        "createdAt": "2023-06-28T18:11:09Z",
        "author": {
          "login": "jrdodds"
        }
      },
      {
        "body": "@jrdodds interesting update, thanks for the info.\r\n\r\nDo you know if there's any change in behavior for VS2022?",
        "createdAt": "2023-06-28T18:42:54Z",
        "author": {
          "login": "gojimmypi"
        }
      },
      {
        "body": "@gojimmypi I primarily investigated by stepping through a unit test for the `Exec` task.\r\n\r\nIn a Visual Studio \"Developer Command Prompt\" if you run `msbuild -version`, what version is reported?",
        "createdAt": "2023-06-28T19:05:56Z",
        "author": {
          "login": "jrdodds"
        }
      },
      {
        "body": "Juuuuuust got bit by this. This is a great bug because it shows who reads the docs. \ud83d\ude06 ",
        "createdAt": "2025-04-04T18:48:52Z",
        "author": {
          "login": "mletterle"
        }
      }
    ]
  }
}