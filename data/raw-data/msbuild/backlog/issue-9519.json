{
  "number": 9519,
  "title": "Introduce [MSBuild]::StableStringHash overload(s) with alternative hashing",
  "body": "### Blocked By\r\n\r\n~~#9572~~\r\nhttps://devdiv.visualstudio.com/DevDiv/_workitems/edit/1937630\r\n\r\n### Context\r\n\r\n#9387 introduced improved hashing for [`[MSBuild]::StableStringHash`](https://learn.microsoft.com/en-us/visualstudio/msbuild/property-functions?view=vs-2022#msbuild-stablestringhash), that however broke internal functionality relying on the hash to be stable between versions (despite documented otherwise).\r\n\r\n### Proposal\r\n\r\nThe easiest way around it is to keep the current property function untouched, but introduce a new overload taking an enum argument:\r\n\r\n```\r\n<!-- Works unchanged -->\r\n[MSBuild]::StableStringHash($x)\r\n\r\n<!-- \r\n  $hashAlgo will currently allow:\r\n    'GetHashCode' - the legacy behavior (mimicking string.GetHashCode)\r\n    'FNV1a_32' - Fawler-Noll-Vo 1a 32bit\r\n-->\r\n[MSBuild]::StableStringHash($x, $hashAlgo)\r\n```\r\n\r\nThis way other hashes (like xxHash) can be introduced in the future\r\n\r\n### Related\r\n\r\n * #8812 - leveraging the FNV, we can improve the speed of `Hash` task (as we contemplated usage of xxHash)\r\n * #7131",
  "state": "CLOSED",
  "createdAt": "2023-12-12T10:34:38Z",
  "updatedAt": "2024-02-16T11:27:23Z",
  "closedAt": "2024-02-16T11:27:23Z",
  "author": {
    "login": "JanKrivanek"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "JanKrivanek"
      }
    ]
  },
  "milestone": {
    "title": ".NET 9.0"
  },
  "comments": {
    "nodes": [
      {
        "body": "This should not have been closed yet; 5af9301a6d46fd40ab1420467d3291519f62c7e6 mentioned this issue but did not implement the feature request.",
        "createdAt": "2023-12-13T09:14:39Z",
        "updatedAt": "2023-12-13T09:15:56Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "Why not just change the existing method rather than add an overload? Keeping it simple. Would it just cause one unnecessary builds on upgrade?",
        "createdAt": "2023-12-13T14:52:43Z",
        "updatedAt": "2023-12-13T14:52:43Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "hashtag we tried, @danmoseley.\r\n\r\nThe change caused a category of problem that's new now that we have caching plugins. The cache used today for some internal Microsoft repos (like the VS repo for example) is populated on official builds from CloudBuild, which run on a recent stable MSBuild, so the caches have the old hash behavior burned in if relevant. When a new hash behavior is deployed to the cache clients (local dev machines), the cache stops functioning correctly.",
        "createdAt": "2023-12-13T14:58:18Z",
        "updatedAt": "2023-12-13T14:58:18Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Let's not move the hashing utils to StringTools until the #9572 is resolved - as we'd broke the DevKit!",
        "createdAt": "2023-12-22T12:42:13Z",
        "updatedAt": "2023-12-22T12:42:13Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "Blocked by [AB#1937630](https://devdiv.visualstudio.com/0bdbc590-a062-4c3f-b0f6-9383f67865ee/_workitems/edit/1937630)",
        "createdAt": "2024-01-10T06:52:59Z",
        "updatedAt": "2024-01-10T06:52:59Z",
        "author": {
          "login": "JanKrivanek"
        }
      }
    ]
  }
}