{
  "number": 928,
  "title": "Breaking change in Microsoft.Common.targets (UseSymboliclinksIfPossible)",
  "body": "This is introduced in #742. We (community contribution!) added support for symbolic links on the `Copy` task. I just happened to be looking into an issue with Xamarin targets and stumbled upon an issue.\n\nIn `Microsoft.Common.CurrentVersion.targets` we now call `Copy` like:\n\n``` XML\n<Copy\n    SourceFiles = \"@(_SourceItemsToCopyToOutputDirectory)\"\n    DestinationFiles = \"@(_SourceItemsToCopyToOutputDirectory->'$(OutDir)%(TargetPath)')\"\n    OverwriteReadOnlyFiles=\"$(OverwriteReadOnlyFiles)\"\n    Retries=\"$(CopyRetryCount)\"\n    RetryDelayMilliseconds=\"$(CopyRetryDelayMilliseconds)\"\n    UseHardlinksIfPossible=\"$(CreateHardLinksForAdditionalFilesIfPossible)\"\n    UseSymboliclinksIfPossible=\"$(CreateSymbolicLinksForAdditionalFilesIfPossible)\"\n```\n\nI don't see any problem with this in general. However, the Xamarin targets (specifically iOS are the targets I'm looking at) add `<UsingTask TaskName=\"Microsoft.Build.Tasks.Copy\" AssemblyFile=\"Xamarin.iOS.Tasks.dll\"/>`. This causes all `Copy` tasks to use the one from `Xamarin.iOS.Tasks.dll` rather than the builtin. Unfortunetely, this `Copy` task derives from `Microsoft.Build.Tasks.v4.0.dll` which does not have the new `UseSymboliclinksIfPossible` property.\n\nIt seems like we have a few options. 1) Fix Xamarin targets to bind to a more recent version of MSBuild (`Microsoft.Build.Tasks.Core`). This would have implications as to what version the target could run on (MSBuild 14+) but would be preferable if that's ok. 2) Modify the targets to not specify the property unless it's set. This seems like it could be pretty ugly. Or 3) find a way to turn on this feature in a backwards compatible way?\n\n@kzu do you have any input on this? Is option 1 something you could do?\n",
  "state": "CLOSED",
  "createdAt": "2016-08-22T20:44:17Z",
  "updatedAt": "2024-02-21T17:26:21Z",
  "closedAt": "2016-09-24T21:04:41Z",
  "author": {
    "login": "AndyGerlicher"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Another option would be to add a property with this name to the Xamarin override. It could be ignored--it just has to exist. That would be backward compatible since you can always add an optional property and it'll just get a default value.\n",
        "createdAt": "2016-08-23T14:19:19Z",
        "updatedAt": "2016-08-23T14:19:19Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Yes, but the problem with that @rainersigwald is that the local-side of the build would not have this new feature, since we'd continue to inherit from the 4.0 task.\n\nWe can implement a mix of option 1 and 3:\n- Move the tasks that override the built-in ones to two assemblies: Xamarin.Build.Tasks and Xamarin.Build.Tasks.Core, with the latter inheriting from the 14+ ones.\n- Conditionally declare the `Using` depending on the MSBuildToolsVersion being `>=` than 14\n- Declare the property in the pre-14 Tasks assembly so that they are no-op and \"just work\" (do nothing) on pre-14 builds (i.e. xbuild)\n",
        "createdAt": "2016-08-23T15:03:20Z",
        "updatedAt": "2016-08-23T15:03:55Z",
        "author": {
          "login": "kzu"
        }
      },
      {
        "body": "How about we change the common targets to something like this, to allow old and new behaviour. Xamarin msbuild code can make sure `CreateSymbolicLinksForAdditionalFilesIfPossible` is not set to true\n\n``` xml\n<Copy Condition=\"'$(CreateSymbolicLinksForAdditionalFilesIfPossible)' == 'true'\"\n    SourceFiles = \"@(_SourceItemsToCopyToOutputDirectory)\"\n    DestinationFiles = \"@(_SourceItemsToCopyToOutputDirectory->'$(OutDir)%(TargetPath)')\"\n    OverwriteReadOnlyFiles=\"$(OverwriteReadOnlyFiles)\"\n    Retries=\"$(CopyRetryCount)\"\n    RetryDelayMilliseconds=\"$(CopyRetryDelayMilliseconds)\"\n    UseHardlinksIfPossible=\"$(CreateHardLinksForAdditionalFilesIfPossible)\"\n    UseSymboliclinksIfPossible=\"$(CreateSymbolicLinksForAdditionalFilesIfPossible)\"\n\n<Copy Condition=\"'$(CreateSymbolicLinksForAdditionalFilesIfPossible)' != 'true'\"\n    SourceFiles = \"@(_SourceItemsToCopyToOutputDirectory)\"\n    DestinationFiles = \"@(_SourceItemsToCopyToOutputDirectory->'$(OutDir)%(TargetPath)')\"\n    OverwriteReadOnlyFiles=\"$(OverwriteReadOnlyFiles)\"\n    Retries=\"$(CopyRetryCount)\"\n    RetryDelayMilliseconds=\"$(CopyRetryDelayMilliseconds)\"\n    UseHardlinksIfPossible=\"$(CreateHardLinksForAdditionalFilesIfPossible)\"\n```\n",
        "createdAt": "2016-08-23T16:12:04Z",
        "updatedAt": "2016-08-23T16:13:02Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "@cdmihai that was option 2 and is super ugly as there are quite a few call sites to consider. I don't think that's a very reasonable option :(. \n\n@rainersigwald suggestion seems good. Xamarin task can have that property (`public bool UseSymboliclinksIfPossible { get; set; }` that does nothing. This would solve the issue completely and is probably the least impactful. The task could still inherit from 4.0 and be fine since it will technically have the property. You could also have the set throw if set to true so if someone expected to use it they would know they could not. @kzu this seems like it could be the option that would have the least impact on mono msbuild as well since it would still be the v4.0 dll.\n",
        "createdAt": "2016-08-23T17:00:05Z",
        "updatedAt": "2016-08-23T17:00:05Z",
        "author": {
          "login": "AndyGerlicher"
        }
      },
      {
        "body": "@AndyGerlicher my concern is that we'd be breaking symlink behavior on Xamarin projects so people won't be able to leverage it at all, even for targets that don't involve remotely building on the Mac (i.e. you can still use Copy on Windows only if you add a `Condition=\" '$(BuildSessionId)' == '' \"` for example. But maybe it's too much of a corner case. \n\nWe can fix it with the given suggestion, and wait for users to ask for the additional support if needed.\n",
        "createdAt": "2016-08-23T18:09:48Z",
        "updatedAt": "2016-08-23T18:09:48Z",
        "author": {
          "login": "kzu"
        }
      },
      {
        "body": "PRs on their way at https://github.com/xamarin/xamarin-macios/pull/648 (master) and https://github.com/xamarin/xamarin-macios/pull/649 (cycle8 / next dev15 drop)\n",
        "createdAt": "2016-08-23T18:22:08Z",
        "updatedAt": "2016-08-23T18:22:08Z",
        "author": {
          "login": "kzu"
        }
      },
      {
        "body": "@kzu is there a build I could try and verify the fix?\n",
        "createdAt": "2016-08-23T21:06:44Z",
        "updatedAt": "2016-08-23T21:06:44Z",
        "author": {
          "login": "AndyGerlicher"
        }
      },
      {
        "body": "@AndyGerlicher not yet, likely tonight or early tomorrow\n",
        "createdAt": "2016-08-23T21:37:17Z",
        "updatedAt": "2016-08-23T21:37:17Z",
        "author": {
          "login": "kzu"
        }
      }
    ]
  }
}