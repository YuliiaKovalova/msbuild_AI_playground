{
  "number": 7977,
  "title": "support unix/dotnet style switches",
  "body": "Probably there's existing discussion/ a dupe that I didn't find. https://github.com/dotnet/msbuild/issues/5714 seems somewhat related.\r\n\r\nMSBuild switch syntax was not created with Unix ways in mind, and this has become more obvious in recent years on Unix, and also on Windows when using tools like dotnet.exe on Windows that prefer Unix conventions and aggregate MSBuild switches. For example. `build.cmd -ci -arch x64 -os windows -s clr.aot+libs -rc Release -lc Release  /p:CrossBuild=false ` (an example of a command to build dotnet/runtime) and `dotnet build -c debug /t:test`\r\n\r\nIdeally I could write `build.cmd -ci -arch x64 -os windows -s clr.aot+libs -rc Release -lc Release  -p CrossBuild=false ` and `dotnet build -c debug -t test`\r\n\r\nMSBuild already accepts `--XXX` for multi character switches and `-X` for single character ones. It also does not reject `--` but does not respect it either -- for example `nonexistent.csproj --` produces \"Project file does not exist\" even though I'd expect it to look like an invalid flag rather than a file. To be fully consistent it would need to (I think):\r\n\r\n1. Allow \"valued\" switches to use space rather than colon\r\n2. Ideally respect \"--\" \r\n\r\nI'm wondering whether this could be possible without generally breaking existing scripts. If I have `dotnet build -c debug -t:test -p:configuration=debug my.csproj` and now write `dotnet build -c debug -t test -p configuration=debug my.csproj`, it should still be possible to unambiguously that the project was `my.csproj` and not `test`. However, optional-valued switches may be a problem. If `-m:4` becomes `-m 4`, is the 4 the project name or should it continue to implicitly build a project in the working directory?\r\n\r\nJust curious whether there's been discussion about this, as the mixture of colon and space style is a bit ugly.",
  "state": "OPEN",
  "createdAt": "2022-09-15T21:50:51Z",
  "updatedAt": "2024-01-31T08:16:15Z",
  "closedAt": null,
  "author": {
    "login": "danmoseley"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "I bet @baronfel will have thoughts here.\r\n\r\nWhat would you want `--` to indicate? I don't see an analogous MSBuild operation to \"everything from here is a single string you shouldn't parse\".",
        "createdAt": "2022-09-15T21:59:53Z",
        "updatedAt": "2022-09-15T21:59:53Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> MSBuild already accepts `--XXX` for multi character switches and `-X` for single character ones.\r\n\r\nWe actually respect `-` `--` and `/` prefixes for all of our arguments today, regardless of single/multichar.",
        "createdAt": "2022-09-15T22:02:52Z",
        "updatedAt": "2022-09-15T22:02:52Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> What would you want -- to indicate?\r\n\r\nIt would mean \"nothing before here is a project file, everything after is a project file\". I'm not sure whether it would be needed to break ambiguity unless a file name started with -- or - so perhaps it's minor/low priority?\r\n\r\n> We actually respect - -- and / prefixes for all of our arguments today, regardless of single/multichar.\r\n\r\nYup -- I think it'd be a clear non goal to reject syntax that is not Unix. The goal would be to allow Unix syntax ([POSIX](https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap12.html))",
        "createdAt": "2022-09-15T22:04:53Z",
        "updatedAt": "2022-09-15T22:08:46Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "If we look to add unix support, we should _really really_ look into just evaluating if System.CommandLine can represent the MSBuild CLI. It already handles most (all?) of the questions described above (regarding precedence of `-m` for example) in an unambiguous way. It also supports `--` in the UNIX way by default, meaning it parses each of the tokens to the right as an 'argument' and allows the application to decide what to do with them (which mostly means forwarding along, but can mean many other things).",
        "createdAt": "2022-09-15T22:16:56Z",
        "updatedAt": "2022-09-15T22:16:56Z",
        "author": {
          "login": "baronfel"
        }
      },
      {
        "body": "Does MSBuild parse arguments outside of the context of 'dotnet' ? As I loosely understand it, many of the sub-commands of 'dotnet' already use System.CommandLine, in some kind of delegated way.\r\ncc @terrajobst as we were talking about this",
        "createdAt": "2022-09-15T22:21:47Z",
        "updatedAt": "2022-09-15T22:21:47Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "@danmoseley MSBuild has a parser of its own and it actually runs all the time even if the .NET CLI calls into MSBuild. The .NET CLI calls the `Main` method of MSBuild directly with a string[] if ran in-proc, otherwise it's shelling out to `dotnet msbuild.dll` with those same arguments.\r\n\r\nSeparately, msbuild.exe for full framework needs to parse as well, so any .NET CLI-focused solution will pass that binary by entirely.",
        "createdAt": "2022-09-15T22:24:58Z",
        "updatedAt": "2022-09-15T22:25:14Z",
        "author": {
          "login": "baronfel"
        }
      },
      {
        "body": "For anyone that does not know , the main part of the .NET CLI uses System.CommandLine but still in a non-standard way because it has a lot of legacy code to clean up. @baronfel has led cleaning that up on a sane timeline. `dotnet new` uses System.CommandLine starting in .NET 7, and it was key to modernizing the Ux. \r\n\r\nAlso, @vlada-shubina did great work to supply hidden backwards compat for `dotnet new` to avoid breaking scripts. I do not know if that would be possible for MSBuild. ",
        "createdAt": "2022-09-16T13:42:43Z",
        "updatedAt": "2022-09-16T13:42:43Z",
        "author": {
          "login": "KathleenDollard"
        }
      },
      {
        "body": "> It would mean \"nothing before here is a project file, everything after is a project file\". \r\n\r\nAccording to [Utility Syntax Guidelines](https://pubs.opengroup.org/onlinepubs/009695399/basedefs/xbd_chap12.html#tag_12_02) in _The Open Group Base Specifications Issue 6_, the arguments that follow `--` can only be operands, but the arguments that precede `--` can be options or operands. Git deviates from this by not allowing file name operands before `--`. I don't think MSBuild should follow Git's example.",
        "createdAt": "2022-09-16T15:48:52Z",
        "updatedAt": "2022-09-16T15:48:52Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "As an aside, I've sometimes wanted to pass more than one project (to build in parallel) so I hope any parser would not assume there was one or zero.",
        "createdAt": "2022-09-16T16:02:29Z",
        "updatedAt": "2022-09-16T16:02:29Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "> Git deviates from this by not allowing file name operands before `--`.\r\n\r\nThat doesn't appear to be true to me:\r\n\r\n```sh-session\r\n\u276f git rm .\\global.json -- .\\NuGet.config\r\nrm 'NuGet.config'\r\nrm 'global.json'\r\n```\r\n\r\n> I don't think MSBuild should follow Git's example.\r\n\r\nWe would not take any breaking changes to the argument parsing, only augmentations.\r\n\r\n> I've sometimes wanted to pass more than one project (to build in parallel) so I hope any parser would not assume there was one or zero.\r\n\r\nThis has definitely come up before but I can't find a bug. It's a good idea IMO but doesn't need to be tied to this change.\r\n\r\n",
        "createdAt": "2022-09-16T16:54:14Z",
        "updatedAt": "2022-09-16T16:57:09Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> This has definitely come up before but I can't find a bug. It's a good idea IMO but doesn't need to be tied to this change.\r\n\r\nRight, I just mean that I think it could be added if we choose at some point without introducing ambiguity, I hope that remains true",
        "createdAt": "2022-09-16T16:58:36Z",
        "updatedAt": "2022-09-16T16:58:36Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "> That doesn't appear to be true to me:\r\n\r\nPerhaps it ignores it unless ambiguity exists.\r\n```\r\nC:\\git\\runtime>git show -q HEAD\r\ncommit 1d025196ae0d0f1e0b17e2e6033234e1937d997b (HEAD -> main, upstream/main, upstream/HEAD)\r\n\r\nC:\\git\\runtime>dir > head\r\n\r\nC:\\git\\runtime>git show -q HEAD\r\nfatal: ambiguous argument 'HEAD': both revision and filename\r\nUse '--' to separate paths from revisions, like this:\r\n'git <command> [<revision>...] -- [<file>...]'\r\n```",
        "createdAt": "2022-09-16T17:01:07Z",
        "updatedAt": "2022-09-16T17:01:36Z",
        "author": {
          "login": "danmoseley"
        }
      }
    ]
  }
}