{
  "number": 1479,
  "title": "Target framework attribute file should be written to IntermediateOutputPath",
  "body": "Currently [GenerateTargetFrameworkMonikerAttribute](https://source.dot.net/#MSBuildFiles/C/ProgramFiles(x86)/MSBuild/14.0/bin_/amd64/Microsoft.Common.CurrentVersion.targets,2984) defaults to write the target framework attribute file to `%TEMP%`.  This means if multiple projects are building at once and the file doesn't exist, they can hit a race condition.  The currently solution is to have the `<WriteLinesToFile />` task marked to `ContinueOnError` which emits a warning.\r\n\r\nI propose that we instead default to have the target framework attribute file be written to the `IntermediateOutputPath` which in most cases would be unique per project.  The overhead on small projects would be very minimal and in large projects they would no longer have the race condition.  I would change [this line](https://source.dot.net/#MSBuildFiles/C/ProgramFiles(x86)/MSBuild/14.0/bin_/amd64/Microsoft.Common.CurrentVersion.targets,2973) to say:\r\n\r\n``` xml\r\n<TargetFrameworkMonikerAssemblyAttributesPath\r\n    Condition=\"'$(TargetFrameworkMonikerAssemblyAttributesPath)' == ''\">\r\n    $([System.IO.Path]::Combine('$(IntermediateOutputPath)','$(TargetFrameworkMoniker).AssemblyAttributes$(DefaultLanguageSourceExtension)'))\r\n</TargetFrameworkMonikerAssemblyAttributesPath>\r\n```\r\n\r\nFYI @jaredpar ",
  "state": "CLOSED",
  "createdAt": "2016-12-14T19:19:19Z",
  "updatedAt": "2024-02-21T17:23:22Z",
  "closedAt": "2020-02-12T18:13:58Z",
  "author": {
    "login": "jeffkl"
  },
  "labels": [
    "bug",
    "help wanted",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "MSBuild 16.6 Preview1"
  },
  "comments": {
    "nodes": [
      {
        "body": "That's exactly what we did in Roslyn and it seems to be working great\r\n\r\nhttps://github.com/dotnet/roslyn/pull/15905\r\n",
        "createdAt": "2016-12-14T21:45:46Z",
        "updatedAt": "2016-12-14T21:45:46Z",
        "author": {
          "login": "jaredpar"
        }
      },
      {
        "body": "Related issue https://github.com/dotnet/roslyn/issues/10116",
        "createdAt": "2016-12-14T21:50:47Z",
        "updatedAt": "2016-12-14T21:50:47Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "@AndyGerlicher Is there anything technical or organizational holding this up for such a distant release, or would I be able to file a pull request for this change?\r\n\r\nIt looks to me like a simple change to `src/Tasks/Microsoft.Common.CurrentVersion.targets`.",
        "createdAt": "2017-05-04T01:00:06Z",
        "updatedAt": "2017-05-04T01:00:06Z",
        "author": {
          "login": "yaakov-h"
        }
      },
      {
        "body": "Another complication: When written into `/tmp` in linux and not cleaned up, other users on a shared system may be unable to access the file and compilation will fail for these users. This impacts usage in schools and academic institutions.\r\n\r\nhttps://stackoverflow.com/questions/45950644/prevent-net-core-2-0-from-leaving-files-in-tmp-on-rhel7",
        "createdAt": "2017-08-30T05:38:34Z",
        "updatedAt": "2017-08-30T16:35:22Z",
        "author": {
          "login": "dasMulli"
        }
      },
      {
        "body": "On a shared institutional Linux system like ours, one problem is as @dasMulli [described](https://github.com/Microsoft/msbuild/issues/1479#issuecomment-325886928), with compilation failing. Another problem is lifecycle control: Our sysadmin does not want files in the global `/tmp` living beyond their useful life. He will not install .NET Core for us until both problems are solved.\r\n\r\nBeing \"solved\", from the sysadmin's perspective, entails a solution which applies to all current & future users at all times; which does not depend on user discipline; and which does not make impositions on any of the system's non-.NET users. So it cannot depend on the user remembering to override the built-in default in their project files, for instance.\r\n\r\nIt sounds like [@jeffkl's proposal](https://github.com/Microsoft/msbuild/issues/1479#issue-195620743) could solve both problems for us. Whether it does solve them depends on the default behavior of `IntermediateOutputPath`. If, by default, it **always** places its files inside the user's working directory, rather than in a shared space like `$TMPDIR`, then it solves our problems. I think [this VS reference](https://msdn.microsoft.com/en-us/library/bb629394.aspx) is saying that _its_ default is inside the project's `obj` directory. That would be good for us, too.\r\n\r\nAnother desirable property: the user not having to depend on developer discipline, either. A richer, but more complex solution might have a hierarchy of settings: a systemwide setting in `/etc`, with priority over a user setting, which itself has priority over any project setting. I wrote up a more complete proposal for this kind of scheme, but I am hoping @jeffkl's idea suits our needs as I think it would! Can anyone answer my question about `IntermediateOutputPath`?",
        "createdAt": "2017-09-04T15:13:49Z",
        "updatedAt": "2017-09-04T15:15:28Z",
        "author": {
          "login": "noahplusplus"
        }
      },
      {
        "body": "I think there are two options here:\r\n\r\n1. Use `IntermediateOutputPath` (=> `obj\\{Configuration}\\{TFM}\\`) or `BaseIntermediateOutputPath`.\r\n    * Note that the default filename is not project-unique so either keep the current \"multiple projects may use it\" code for shared intermediate output paths or rename the file (`{projectName}.{TF},{TFV}.cs`).\r\n2. Use a different global directory (`~/.dotnet/` comes to my mind which is already cluttered by a few .NET Core things). \r\n    * maybe do it only on *nix?\r\n\r\nPersonally, I favour option 1 with a project-unique filename like `My.Cool.Thing.NETCoreApp,v2.0.cs`.\r\nDownside: A bit more IO during first project load in tooling.",
        "createdAt": "2017-09-04T15:26:07Z",
        "updatedAt": "2017-09-04T15:27:38Z",
        "author": {
          "login": "dasMulli"
        }
      },
      {
        "body": "1 sounds good to me.\r\n\r\n2 would still throw an unnecessary warning when building projects in parallel, due to conflicts on the same shared file. \r\n\r\nI don't think the unique file name is needed, since the obj path is already unique.",
        "createdAt": "2017-09-04T18:00:39Z",
        "updatedAt": "2017-09-04T18:00:39Z",
        "author": {
          "login": "yaakov-h"
        }
      },
      {
        "body": "Getting rid of the warning is a good, forgot about that.\r\n\r\nSome projects are configured to use a shared intermediate output path or even a shared base intermediate output path so if the file name is unique to the projects, there won't be conflicts. If it is not unique, then we're in the warning-instead-of-error and race condition handling business again \ud83d\ude22. Any change should not break these projects..",
        "createdAt": "2017-09-04T18:36:16Z",
        "updatedAt": "2017-09-04T18:36:16Z",
        "author": {
          "login": "dasMulli"
        }
      },
      {
        "body": "I don't think any change proposed here would break them any more than they are broken today.",
        "createdAt": "2017-09-04T19:04:58Z",
        "updatedAt": "2017-09-04T19:04:58Z",
        "author": {
          "login": "yaakov-h"
        }
      },
      {
        "body": "@dasMulli said:\r\n\r\n> I think there are two options here:\r\n\r\nOne other option - for Linux at least - is to use [`XDG_RUNTIME_DIR `](https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html):\r\n\r\n> $XDG_RUNTIME_DIR defines the base directory relative to which user-specific non-essential runtime files and other file objects (such as sockets, named pipes, ...) should be stored. The directory MUST be owned by the user, and he MUST be the only one having read and write access to it. Its Unix access mode MUST be 0700. \r\n\r\nIf this data is not meant to be kept around, this is probably the best location on modern Linux systems.\r\n\r\n",
        "createdAt": "2017-09-05T20:03:46Z",
        "updatedAt": "2017-09-05T20:03:46Z",
        "author": {
          "login": "omajid"
        }
      },
      {
        "body": "I saw this last week on one of our build servers where we do concurrent builds.\r\nNot sure, but is the solution still blocked on something?",
        "createdAt": "2017-11-04T21:18:31Z",
        "updatedAt": "2017-11-04T21:18:31Z",
        "author": {
          "login": "japj"
        }
      },
      {
        "body": "/cc @nguerrera \r\nWhy isn't this attribute (```TargetFrameworkAttribute```) generated to the AssemblyInfo.cs file like the other assembly level attributes? ",
        "createdAt": "2017-11-28T22:11:38Z",
        "updatedAt": "2017-11-28T22:12:12Z",
        "author": {
          "login": "tmat"
        }
      },
      {
        "body": "@tmat It's different code that happens for all projects vs. generated assembly info being SDK project feature.",
        "createdAt": "2017-11-28T22:33:18Z",
        "updatedAt": "2017-11-28T22:33:18Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "Can the SDK suppress it and write it to the AssemblyInfo.cs?",
        "createdAt": "2017-11-28T23:02:23Z",
        "updatedAt": "2017-11-28T23:02:23Z",
        "author": {
          "login": "tmat"
        }
      },
      {
        "body": "I am agree to @tmat \r\nSdk-based projects have some autogenerated files:\r\n- AssemblyInfo.cs with assembly attributes (AssemblyVersion, AssemblyTitle).\r\n- RazorAssemblyInfo.cs with razor-related attributes (RazorLanguageVersion)\r\n- UserSecretsAssemblyInfo.cs with UserSecretsId attribute\r\n\r\nFor TargetFramework attribute implementation can be the same:\r\n- TargetFrameworkAssemblyInfo.cs, for example\r\n\r\nkeeping autogenerated .cs file with TargetFramework attribute in Temp folder making some troubles:\r\n- race conditions as this issue described\r\n- TeamCity internally cleaned Temp folder after each build, preventing incremental builds to work. Every TeamCity build call a csharp compiler, because *.cs not match output files (autogenerated file has been deleted)\r\n\r\n@AndyGerlicher can you take a look at my comment?",
        "createdAt": "2018-10-25T05:20:48Z",
        "updatedAt": "2018-10-25T05:24:21Z",
        "author": {
          "login": "maximpashuk"
        }
      },
      {
        "body": "If someone is moved to open a PR for this I think we'd be willing to take it now for early v16 previews.",
        "createdAt": "2018-10-25T14:03:13Z",
        "updatedAt": "2018-10-25T14:03:13Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald I had a PR which didn't go very well: https://github.com/Microsoft/msbuild/pull/2571",
        "createdAt": "2018-10-25T14:44:07Z",
        "updatedAt": "2018-10-25T14:44:07Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "I think everything except the perf concerns is resolved by using `IntermediateOutputDirectory` (not `Base...`). And my guess is that the perf impact won't be very large, though I have no proof of that.",
        "createdAt": "2018-10-25T14:47:33Z",
        "updatedAt": "2018-10-25T14:47:33Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I think it should be a compiler argument but that wasn't a popular opinion.  It seems so arbitrary to write a file to get an assembly attribute added.",
        "createdAt": "2018-10-25T14:49:12Z",
        "updatedAt": "2018-10-25T14:49:12Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "That'd work for me too, but I'd rather change this now, then add that feature, rather than waiting.",
        "createdAt": "2018-10-25T14:51:26Z",
        "updatedAt": "2018-10-25T14:51:26Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I'm hitting what @maximpashuk noted:\r\n\r\n> TeamCity internally cleaned Temp folder after each build, preventing incremental builds to work. Every TeamCity build call a csharp compiler, because *.cs not match output files (autogenerated file has been deleted)\r\n\r\nIs there a known workaround in the meantime?",
        "createdAt": "2019-07-17T20:30:35Z",
        "updatedAt": "2019-07-17T20:30:35Z",
        "author": {
          "login": "Kazark"
        }
      },
      {
        "body": "@Kazark \r\n\r\nIn root solution directory I created a file **Directory.Build.props** with following content\r\n\r\n```xml\r\n<Project>\r\n\r\n  <!-- incremental builds in TeamCity -->\r\n  <PropertyGroup>\r\n    <TargetFrameworkMonikerAssemblyAttributesPath>obj\\TargetFrameworkAttribute.cs</TargetFrameworkMonikerAssemblyAttributesPath>\r\n  </PropertyGroup>\r\n\r\n</Project>\r\n```\r\n\r\nProbably this is not a best solution, but it works, incremental builds now works in TeamCity as expected.",
        "createdAt": "2019-07-18T02:08:49Z",
        "updatedAt": "2019-07-18T02:09:13Z",
        "author": {
          "login": "maximpashuk"
        }
      },
      {
        "body": "I vote for @tmat and @maximpashuk solution, intermediate dir all the things and into the Sdk, we go! \ud83d\ude01",
        "createdAt": "2019-07-18T02:21:55Z",
        "updatedAt": "2019-07-18T02:22:38Z",
        "author": {
          "login": "Nirmal4G"
        }
      },
      {
        "body": "@maximpashuk Makes sense. Thanks. That should get me past it for now.",
        "createdAt": "2019-07-18T16:24:23Z",
        "updatedAt": "2019-07-18T16:24:23Z",
        "author": {
          "login": "Kazark"
        }
      },
      {
        "body": "@livarcocc would it be possible to prioritize this? This is an impactful issue that's very easy to fix and has been open for three years now. Seems like low-hanging fruit.",
        "createdAt": "2020-01-05T01:57:13Z",
        "updatedAt": "2020-01-05T01:57:13Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "With the fix for this being merged into `master` now, which release will it be a part of? I see that this issue is on the 16.5 milestone, so does that mean it will be in that release, or does the fix also need to be ported to another branch?",
        "createdAt": "2020-02-12T18:27:06Z",
        "updatedAt": "2020-02-12T18:27:06Z",
        "author": {
          "login": "bording"
        }
      },
      {
        "body": "@bording I updated the milestone to 16.6 as I believe master is 16.6. ",
        "createdAt": "2020-02-12T18:36:15Z",
        "updatedAt": "2020-02-12T18:36:15Z",
        "author": {
          "login": "tmat"
        }
      },
      {
        "body": "https://stackoverflow.com/a/62146077/714557",
        "createdAt": "2020-06-02T07:39:53Z",
        "updatedAt": "2020-06-02T07:39:53Z",
        "author": {
          "login": "BearSleepy"
        }
      },
      {
        "body": "> @bording I updated the milestone to 16.6 as I believe master is 16.6.\r\n\r\nworks now for me in 16.6.2. I see `.NETStandard,Version=v2.0.AssemblyAttributes.cs` in `\\project\\obj\\Debug\\netstandard2.0`",
        "createdAt": "2020-06-26T09:43:23Z",
        "updatedAt": "2020-06-26T09:43:23Z",
        "author": {
          "login": "MagicAndre1981"
        }
      }
    ]
  }
}