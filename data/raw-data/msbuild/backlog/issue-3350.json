{
  "number": 3350,
  "title": "DefineConstants should be considered for CoreCompile incrementality",
  "body": "_From @JustArchi on May 25, 2018 19:58_\n\nLet's assume that you have a C# project similar to below:\r\n\r\n```csharp\r\n#if CUSTOM_PUBLISH\r\npublic static readonly CustomPublish = true;\r\n#else\r\npublic static readonly CustomPublish = false;\r\n#endif\r\n```\r\n\r\nWith proper `DefineConstants` in csproj:\r\n\r\n```xml\r\n  <PropertyGroup Condition=\"'$(CUSTOM_PUBLISH)' != ''\">\r\n    <DefineConstants>$(DefineConstants);CUSTOM_PUBLISH</DefineConstants>\r\n  </PropertyGroup>\r\n```\r\n\r\nIf you execute following two commands:\r\n\r\n```\r\ndotnet build\r\ndotnet publish -o out /p:CUSTOM_PUBLISH=true\r\n```\r\n\r\nThen execute `out\\Program.dll`, `CustomPublish` will still be `false` as `dotnet publish` did not trigger project rebuild done previously by `dotnet build` which didn't use the switch. This will not happen if you execute `dotnet publish` command on the clean tree, without executing `dotnet build` firstly.\r\n\r\nMy first question, is this intended? If yes, what is the recommended way to go about this? `dotnet clean`, or maybe something else? I can understand the rationale behind that, but I'm not entirely sure if `dotnet` should act in this way.\r\n\r\nThank you in advance.\n\n_Copied from original issue: dotnet/cli#9349_",
  "state": "CLOSED",
  "createdAt": "2018-05-25T22:09:41Z",
  "updatedAt": "2024-02-21T17:12:58Z",
  "closedAt": "2018-12-05T16:02:07Z",
  "author": {
    "login": "rainersigwald"
  },
  "labels": [
    "Area: Common Targets",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "MSBuild 16.0"
  },
  "comments": {
    "nodes": [
      {
        "body": "_From @livarcocc on May 25, 2018 21:17_\n\nI don't think this is an issue in the SDK. I tried on a non-sdk style project and I got the same results. This may be MSBuild's incremental check.\r\n\r\n@rainersigwald are you aware of any such issues on MSBuild's side?",
        "createdAt": "2018-05-25T22:09:41Z",
        "updatedAt": "2018-05-25T22:09:41Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "This is a general problem with the MSBuild incrementality model, but in this case we have already developed a mechanism to solve it. I'll move this to MSBuild and elaborate there.",
        "createdAt": "2018-05-25T22:09:42Z",
        "updatedAt": "2018-05-25T22:09:42Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Thanks for moving. I'll keep looking here \ud83d\ude42",
        "createdAt": "2018-05-25T22:13:39Z",
        "updatedAt": "2018-05-25T22:13:39Z",
        "author": {
          "login": "JustArchi"
        }
      },
      {
        "body": "The core problem here is that MSBuild incrementality depends on the output file being newer than its input files. That's still the case here, because no files have changed--but _the output of the compiler_ would change if it were to run again.\r\n\r\nFortunately, we have a way to deal with cases like this:\r\n\r\nhttps://github.com/Microsoft/msbuild/blob/e7ea68da3ee0929a07cc36e877a32d5e444efefb/src/Tasks/Microsoft.Common.CurrentVersion.targets#L3404-L3431\r\n\r\nWe should add `$(DefineConstants)` to that hash, so that it causes the compiler to rerun if it doesn't match the last run.\r\n\r\nThis isn't a fully general solution to the missed-builds-on-property-changes problem. That's a much bigger issue, considered in #701.",
        "createdAt": "2018-05-25T22:18:57Z",
        "updatedAt": "2018-05-25T22:18:57Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Is there any way to patch this in `csproj`? I'm wondering if there is some possible workaround to use until this issue is dealt with.",
        "createdAt": "2018-06-01T04:21:36Z",
        "updatedAt": "2018-06-01T04:21:36Z",
        "author": {
          "login": "JustArchi"
        }
      },
      {
        "body": "@JustArchi yes you can add this (not the universally correct approach but should be enough for your case):\r\n\r\n```xml\r\n  <ItemGroup>\r\n    <CoreCompileCache Include=\"$(DefineConstants)\" />\r\n  </ItemGroup>\r\n```",
        "createdAt": "2018-06-01T10:53:56Z",
        "updatedAt": "2018-06-01T11:06:09Z",
        "author": {
          "login": "dasMulli"
        }
      },
      {
        "body": "This worked for me, thank you a lot! \ud83c\udf89",
        "createdAt": "2018-06-01T18:28:14Z",
        "updatedAt": "2018-06-01T18:28:14Z",
        "author": {
          "login": "JustArchi"
        }
      },
      {
        "body": "@rainersigwald any objections to considering `$(DefineConstants)` by default? Seems quite reasonable.. or should this somehow be done by roslyn targets? (after all, it is their concern)",
        "createdAt": "2018-11-03T09:50:02Z",
        "updatedAt": "2018-11-03T09:50:02Z",
        "author": {
          "login": "dasMulli"
        }
      },
      {
        "body": "I think we should do it, and 16.0 is a great time for the change. But we should run it by the compiler folks.\r\n\r\n@jaredpar would you object to us adding `$(DefineConstants)` to `@(CoreCompileCache)` so that `CoreCompile` is rerun if constants change (as well as source-list changes)?",
        "createdAt": "2018-11-06T15:19:08Z",
        "updatedAt": "2018-11-06T15:19:08Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "That seems pretty reasonable to me. Well more it just seems correct to do this. \r\n\r\nCC @agocke  in case I'm missing anything.",
        "createdAt": "2018-11-08T18:20:26Z",
        "updatedAt": "2018-11-08T18:20:26Z",
        "author": {
          "login": "jaredpar"
        }
      }
    ]
  }
}