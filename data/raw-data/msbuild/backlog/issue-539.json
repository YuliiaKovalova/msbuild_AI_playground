{
  "number": 539,
  "title": "[RFC] Detecting current OS",
  "body": "MSBuild sets the `$(OS)` property to OSX/Unix/Windows at runtime, which can be used in targets to determine the current OS. But `xbuild` has been using `$(OS)==Unix` on OSX and Linux, because of an old mono bug. And it continues to do so for compatibility reasons.\n\nIt makes sense for MSBuild to follow the same, since users would want to use it with existing targets. PR #538 reverts back to that behavior.  So, for non-windows case, `$(OS)` property is effectively acting as a `IsUnixLike`. Considering it like that, `$(OS)` should probably have only two values now - `Windows_NT` and `Unix`.\n\nNow, I think it might be useful to be able to differentiate between `OSX` and other specific unices. But maybe we should use some other (new) property for that? `$(OSName)` ? I am not sure how the CoreCLR case is affected by this, but AFAIU, it would be in the same boat.\n\nThoughts?\n",
  "state": "CLOSED",
  "createdAt": "2016-03-22T18:24:13Z",
  "updatedAt": "2024-02-21T17:28:44Z",
  "closedAt": "2017-03-31T23:51:21Z",
  "author": {
    "login": "radical"
  },
  "labels": [
    "help wanted",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "We just discussed this in Xamarin and we came to the conclusion that MSBuild changing `$(OS)` to OSX is too much of a breaking change for us, so when we adopt MSBuild we need to quirk this to return `Unix` again to prevent breaking existing code. This has the unfortunate side effect of creating a behavior difference based on the runtime.\n\n@rainersigwald you said in https://github.com/Microsoft/msbuild/issues/446#issuecomment-175205322 that you think it's reasonable to update conditions when moving to MSBuild, but is there a chance we can revisit this decision?\n",
        "createdAt": "2016-03-22T19:03:20Z",
        "updatedAt": "2016-03-22T19:03:53Z",
        "author": {
          "login": "akoeplinger"
        }
      },
      {
        "body": "For bad added context, there are [**140** matches on github for `.targets` files which contain both `OS` and `Unix`](https://github.com/search?utf8=\u2713&q=Condition+OS+Unix+extension%3Atargets&type=Code&ref=searchresults) (my possibly futile effort at capturing constructs similar to `Condition=\"'$(OS)' == 'Unix'\"`).\n\nThere are [**1,653** matches](https://github.com/search?q=Condition+OS+Unix+extension%3Acsproj&ref=searchresults&type=Code&utf8=\u2713) when targeting `.csproj` files.\n\nThis isn't necessarily \"a lot\" -- or even accurate? -- but it does show that plenty of existing code files use `$(OS)` in one form or another, and adding a new value has the potential to _break_ all of these existing files.\n\nChanging `$(OS)` to be `OSX` instead of `Unix` is at minimum a possible compatibility break, and I believe shows that the \"abstraction\" isn't abstract enough. Users would likely be better served with an alternate mechanism that was more conducive to supporting new platforms without requiring auditing all existing use of e.g. `$(OS)`, though I'm not sure what such an abstraction would resemble.\n",
        "createdAt": "2016-03-22T19:09:26Z",
        "updatedAt": "2016-03-22T19:09:26Z",
        "author": {
          "login": "jonpryor"
        }
      },
      {
        "body": "We discussed this a bit today in our team meeting. This is a tricky one because msbuild isn't exactly the same as xbuild. So if we're migrating users from xbuild to msbuild, while we want it to be as easy as possible we definitely don't want to implement \"bugs\" in msbuild to match xbuild behavior (to the largest extent possible). \"Bug\" is a stretch here, but it's definitely not behavior we would choose (at least in hindsight).\n\nFew options we talked about:\n1. Keep `$(OS)` as is: `Windows_NT`, `OSX`, `Unix`\n   1. OS override in the xbuild targets fork (if possible).\n   2. Breaking change for xbuild -> msbuild.\n2. Match xbuild behavior for `$(OS)`: `Windows_NT`, `Unix`\n   1. Rename the current `$(OS)` to something else and keep `OSX` in that one.\n   2. Add `$(OSPlatform)` property, match [OSPlatform](https://github.com/dotnet/corefx/blob/master/src/System.Runtime.InteropServices.RuntimeInformation/src/System/Runtime/InteropServices/RuntimeInformation/OSPlatform.cs) `Linux`, `Windows`, `OS`. Document to prefer `$(OSPlatform)` for .NET Core.\n3. Diverge the #if code between Mono and Core and keep both implementations.\n\nPersonally I think this should not be done in MSBuild but passed off to the Runtime. The closest thing I know of there would be to use [OSPlatform](https://github.com/dotnet/corefx/blob/master/src/System.Runtime.InteropServices.RuntimeInformation/src/System/Runtime/InteropServices/RuntimeInformation/OSPlatform.cs). Unfortunately that a) doesn't include `Unix` at all, b) `Windows_NT` is changed to `Windows`, and c) sadly because of the way that's implemented MSBuild would have to change to add another value. What I don't really want to do is keep `$(OS)` as legacy for xbuild compat and add a 2nd way that's again custom to MSBuild (which is basically 2.i) for those who do want to distinguish.\n\nAlso for the statistics @jonpryor mentioned, most of those 1600+ hits are `'$(OS)' != 'Windows_NT'` so those would not break. Not that it makes it much better since there are exceptions, but it is much smaller than 1600.\n\nThoughts? We will discuss this again during our team triage tomorrow.\n",
        "createdAt": "2016-03-28T22:38:58Z",
        "updatedAt": "2016-03-28T22:38:58Z",
        "author": {
          "login": "AndyGerlicher"
        }
      },
      {
        "body": "I would lean towards option 2, matching the xbuild behavior, as right now it has a lot more adoption than .NET Core MSBuild and it is better to keep this behavior consistent if possible.\n\nThe [OSPlatform](https://github.com/dotnet/corefx/blob/master/src/System.Runtime.InteropServices.RuntimeInformation/src/System/Runtime/InteropServices/RuntimeInformation/OSPlatform.cs) APIs don't allow you to get the name (by design), they only allow you to check to see if you are on a specified OS.  So if we want to expose this functionality, I think we should do so as an intrinsic function instead of a property, ie `IsOSPlatform('OSX')`.\n",
        "createdAt": "2016-03-28T23:07:54Z",
        "updatedAt": "2016-03-28T23:07:54Z",
        "author": {
          "login": "dsplaisted"
        }
      },
      {
        "body": "Team Triage: Marking as up-for-grabs. We would like to make `$(OS)` follow the xbuild behavior (`Windows_NT`, `Unix`) and implement what @dsplaisted mentioned (`IsOSPlatform('OSX')`).\n",
        "createdAt": "2016-03-29T22:35:12Z",
        "updatedAt": "2016-03-29T22:35:12Z",
        "author": {
          "login": "AndyGerlicher"
        }
      },
      {
        "body": "We talked about this a bit more. It's unfortunate that `IsOSPlatform` is CoreCLR-only, so we might need to have a special case for running on the full framework that returns `false` for anything that's not `Windows`.\n",
        "createdAt": "2016-03-29T22:45:59Z",
        "updatedAt": "2016-03-29T22:45:59Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald afaik you can use the System.Runtime.InteropServices.RuntimeInformation package which has these new APIs on full framework too, but @ericstj can confirm.\n",
        "createdAt": "2016-03-29T22:57:21Z",
        "updatedAt": "2016-03-29T22:57:21Z",
        "author": {
          "login": "akoeplinger"
        }
      },
      {
        "body": "Hello, just wanted to chime in with the detection task I have added today using `RuntimeInformation` in one of our projects:\r\nhttps://github.com/am11/libsass-net/blob/68861f8/LibSass.NET/LibSass.NET.csproj#L75-L107\r\n\r\nI saw @jeffkl's pull request https://github.com/Microsoft/msbuild/pull/1486, which will probably allow us to get rid of the reflection calls and make code look decent, but is there a way to get the list of all dependencies that are in closure of `S.R.IS.RuntimeInformation`, that we would need to specify?\r\n\r\nRegardless, it would be nice to get this information using [RuntimeInformation type](https://docs.microsoft.com/en-us/dotnet/core/api/system.runtime.interopservices.runtimeinformation) (which provides xplat OS description and architectures beyond X86/X64 ; ARM and ARM64 etc.) intrinsically from MSBuild.  :)\r\n\r\nNote that the project is targeting Framework 4.0 at the moment, while `S.R.IS.RuntimeInformation` v4.3.0 only provides support for Framework v4.5+, so I added the entry in `packages.config`, restored package and load it using `Assembly.LoadFrom` in our inline task and it worked! Is it some sort of a false-positive behavior?\r\n\r\n(cc: @nschonni, @darrenkopp for visibility)",
        "createdAt": "2017-01-19T14:27:33Z",
        "updatedAt": "2017-01-19T14:27:33Z",
        "author": {
          "login": "am11"
        }
      },
      {
        "body": "@am11 I made a sample based on your needs that doesn't use reflection: https://github.com/jeffkl/MSBuild-NetCore/tree/master/src/UsingTaskWithReference\r\n\r\nI only needed to add a reference to `System.Runtime` to make it work.  ",
        "createdAt": "2017-01-19T15:48:41Z",
        "updatedAt": "2017-01-19T15:48:41Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "@jeffkl, thanks a lot! \ud83c\udf89 Running into few issues with MSBuild v14.0, I have started a thread in your repo: jeffkl/MSBuild-NetCore#1. :)",
        "createdAt": "2017-01-19T16:23:30Z",
        "updatedAt": "2017-01-19T16:23:30Z",
        "author": {
          "login": "am11"
        }
      },
      {
        "body": "So I wanted to figure out \"am I building on OSX or not?\" and came across this issue.  I want to know whether I am building on Windows, OSX, or Linux, and I want to know it statically (so I can set some other properties statically).\r\n\r\nI've figured out that if I'm running MSBuild on .NET Core, I can call `RuntimeInformation`:\r\n\r\n```xml\r\n  <PropertyGroup>\r\n    <IsWindows Condition=\"'$(OS)' == 'Windows_NT'\">true</IsWindows>\r\n  </PropertyGroup>\r\n  \r\n  <PropertyGroup Condition=\"'$(MSBuildRuntimeType)' == 'Core'\">\r\n    <IsOSX Condition=\"'$([System.Runtime.InteropServices.RuntimeInformation]::IsOSPlatform($([System.Runtime.InteropServices.OSPlatform]::OSX)))' == 'true'\">true</IsOSX>\r\n    <IsLinux Condition=\"'$([System.Runtime.InteropServices.RuntimeInformation]::IsOSPlatform($([System.Runtime.InteropServices.OSPlatform]::Linux)))' == 'true'\">true</IsLinux>\r\n  </PropertyGroup>\r\n\r\n  <Target Name=\"PrintRID\" BeforeTargets=\"Build\">\r\n    <Message Text=\"IsWindows $(IsWindows)\" Importance=\"high\" />\r\n    <Message Text=\"IsOSX $(IsOSX)\" Importance=\"high\" />\r\n    <Message Text=\"IsLinux $(IsLinux)\" Importance=\"high\" />\r\n  </Target>\r\n```\r\n\r\nThe above works in Visual Studio and when using `dotnet build`.  However, there is another case I need to consider: what if my project is building using MSBuild running on Mono?  @radical - do you know how I can tell statically whether I am on OSX or Linux in MSBuild on Mono?",
        "createdAt": "2017-03-28T22:57:51Z",
        "updatedAt": "2017-03-28T22:57:51Z",
        "author": {
          "login": "eerhardt"
        }
      },
      {
        "body": "@eerhardt the above should work on Mono MSBuild as well since (recent) Mono ships with System.Runtime.InteropServices.RuntimeInformation. You'll need to change the MSBuildRuntimeType check of course.",
        "createdAt": "2017-03-28T23:12:07Z",
        "updatedAt": "2017-03-28T23:12:07Z",
        "author": {
          "login": "akoeplinger"
        }
      },
      {
        "body": "Perfect!  That's exactly what I wanted to hear.\r\n\r\nAnd since RuntimeInformation is available on `netstandard1.1`, I think MSBuild could even support these checks on `Full` MSBuild, if they shipped with `System.Runtime.InteropServices.RuntimeInformation` as well.  That would completely eliminate the need for the `$(MSBuildRuntimeType)` check all together.",
        "createdAt": "2017-03-28T23:14:37Z",
        "updatedAt": "2017-03-28T23:14:37Z",
        "author": {
          "login": "eerhardt"
        }
      },
      {
        "body": "Hmm, seems we're missing the FEATURE_RUNTIMEINFORMATION in dir.props in our Mono MSBuild build so it might not be available at runtime. @radical I don't see a reason why this shouldn't work, could you look into enabling it?",
        "createdAt": "2017-03-28T23:15:09Z",
        "updatedAt": "2017-03-28T23:15:32Z",
        "author": {
          "login": "akoeplinger"
        }
      },
      {
        "body": "Enabled cross-platform in #1926",
        "createdAt": "2017-03-31T23:51:21Z",
        "updatedAt": "2017-03-31T23:51:30Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "The above trick does not work with regular .NET on VS 2017.   What incarnation should someone use to detect Mac/Linux/Windows platforms?",
        "createdAt": "2017-05-21T04:06:47Z",
        "updatedAt": "2017-05-21T04:06:47Z",
        "author": {
          "login": "migueldeicaza"
        }
      },
      {
        "body": "@migueldeicaza It should be there with the next big Visual Studio update. Daily CLI builds should also have it. It brings the following new stuff: https://github.com/Microsoft/visualstudio-docs/pull/111",
        "createdAt": "2017-05-23T20:31:08Z",
        "updatedAt": "2017-05-23T20:31:08Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "@jsauvexamarin ",
        "createdAt": "2017-11-28T20:10:37Z",
        "updatedAt": "2017-11-28T20:10:37Z",
        "author": {
          "login": "bhanu1989"
        }
      },
      {
        "body": "For the record, you can use `$([MSBuild]::IsOsPlatform())` since MSBuild 15.3, see https://github.com/microsoft/msbuild/issues/2468#issuecomment-451194455.\r\n\r\nSample usage:\r\n```xml\r\n<PropertyGroup>\r\n  <OpenCommand Condition=\"$([MSBuild]::IsOSPlatform('Linux'))\">xdg-open</OpenCommand>\r\n  <OpenCommand Condition=\"$([MSBuild]::IsOSPlatform('OSX'))\">open</OpenCommand>\r\n  <OpenCommand Condition=\"$([MSBuild]::IsOSPlatform('Windows'))\">explorer</OpenCommand>\r\n</PropertyGroup>\r\n```",
        "createdAt": "2019-10-04T00:10:58Z",
        "updatedAt": "2020-08-25T14:30:05Z",
        "author": {
          "login": "0xced"
        }
      }
    ]
  }
}