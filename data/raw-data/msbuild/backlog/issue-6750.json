{
  "number": 6750,
  "title": "Unreliable equality comparisons in SdkResultItem",
  "body": "<!-- This is a template that helps us provide quicker feedback. Please use any relevant sections and delete anything you don't need. -->\r\n\r\n### Issue Description\r\n\r\nFound some problems when reviewing the SdkResultItem.Equals and SdkResultItem.GetHashCode implementations from <https://github.com/dotnet/msbuild/pull/5269>. I don't know whether these methods can actually be called at all in normal use of the SDK.\r\n\r\n### Equals can throw KeyNotFoundException\r\n\r\n<https://github.com/dotnet/msbuild/blob/0538acc04cc2c953f220f9ec3f3764db1769defe/src/Framework/Sdk/SdkResultItem.cs#L33-L53>\r\n\r\nIf this.Metadata.Count == item.Metadata.Count, but the keys are not the same, then `item.Metadata[kvp.Key]` throws System.Collections.Generic.KeyNotFoundException.\r\n\r\nIf the method is actually used, this could be fixed by using TryGetValue.\r\n\r\n#### PowerShell demo\r\n\r\n```\r\nPS C:\\> Add-Type -Path \"C:\\Program Files\\dotnet\\sdk\\6.0.100-preview.6.21355.2\\Microsoft.Build.Framework.dll\"\r\nPS C:\\> $a = [Microsoft.Build.Framework.SdkResultItem]::new()\r\nPS C:\\> $a.ItemSpec = \"abc\"\r\nPS C:\\> $a.Metadata.Add(\"Def\", \"42\")\r\nPS C:\\> $b = [Microsoft.Build.Framework.SdkResultItem]::new()\r\nPS C:\\> $b.ItemSpec = \"abc\"\r\nPS C:\\> $b.Metadata.Add(\"Ghi\", \"42\")\r\nPS C:\\> $a.Equals($b)\r\nMethodInvocationException: Exception calling \"Equals\" with \"1\" argument(s): \"The given key 'Def' was not present in the dictionary.\"\r\n```\r\n\r\n### GetHashCode depends on Dictionary order\r\n\r\n<https://github.com/dotnet/msbuild/blob/0538acc04cc2c953f220f9ec3f3764db1769defe/src/Framework/Sdk/SdkResultItem.cs#L62-L66>\r\n\r\nThe resulting hash code depends on the order in which Dictionary\\<string, string>.GetEnumerator() returns the key-value pairs. This order can differ even if the two metadata dictionaries contain the same keys and the same values.  Thus, GetHashCode() can return a different hash code even if Equals(object) return true.\r\n\r\nIf the method is actually used, this could be fixed by computing a hash code for each KeyValuePair individually and combining them with `^` or `+` so that the result is the same regardless of order.  Alternatively, omit the metadata from the hash code altogether; I imagine any hash tables where SdkResultItem instances are used as keys would be unlikely to have multiple instances for the same item spec.\r\n\r\n#### PowerShell demo\r\n\r\nI'm not sure it will happen every time.\r\n\r\n```\r\nPS C:\\> $a = [Microsoft.Build.Framework.SdkResultItem]::new()\r\nPS C:\\> $b = [Microsoft.Build.Framework.SdkResultItem]::new()\r\nPS C:\\> $a.Metadata.Add(\"1\", \"\")\r\nPS C:\\> $a.Metadata.Add(\"2\", \"\")\r\nPS C:\\> $a.Metadata.Add(\"3\", \"\")\r\nPS C:\\> $a.Metadata.Add(\"4\", \"\")\r\nPS C:\\> $a.Metadata.Remove(\"2\")\r\nTrue\r\nPS C:\\> $a.Metadata.Remove(\"3\")\r\nTrue\r\nPS C:\\> $b.Metadata.Add(\"1\", \"\")\r\nPS C:\\> $b.Metadata.Add(\"4\", \"\")\r\nPS C:\\> $a.GetHashCode()\r\n-641818147\r\nPS C:\\> $b.GetHashCode()\r\n-641818147\r\nPS C:\\> $a.Metadata.Add(\"5\", \"\")\r\nPS C:\\> $b.Metadata.Add(\"5\", \"\")\r\nPS C:\\> $a.GetHashCode()\r\n1124618266\r\nPS C:\\> $b.GetHashCode()\r\n1418271594\r\nPS C:\\> $a.Equals($b)\r\nTrue\r\n```\r\n\r\n### Unnecessary null checks\r\n\r\nSdkResultItem.Metadata is a read-only property and assigned non-null in the constructor, so the null checks `Metadata?.Count` and `if (Metadata != null)` are not needed.\r\n\r\n### Inconsistent case sensitivity for metadata keys\r\n\r\nDescribed in [this comment](https://github.com/dotnet/msbuild/issues/6750#issuecomment-898233796).",
  "state": "CLOSED",
  "createdAt": "2021-08-11T21:49:12Z",
  "updatedAt": "2024-02-21T14:12:04Z",
  "closedAt": "2021-11-29T17:56:18Z",
  "author": {
    "login": "KalleOlaviNiemitalo"
  },
  "labels": [
    "bug",
    "help wanted",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "eriawan"
      }
    ]
  },
  "milestone": {
    "title": "Backlog"
  },
  "comments": {
    "nodes": [
      {
        "body": "Team Triage: Thanks for filing the issue! We've marked it as up for grabs, would you like to try fixing it?",
        "createdAt": "2021-08-12T16:11:58Z",
        "updatedAt": "2021-08-12T16:11:58Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "No, I don't think I will be fixing this.",
        "createdAt": "2021-08-12T16:58:01Z",
        "updatedAt": "2021-08-12T16:58:01Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "Found another problem.\r\n\r\n### Inconsistent case sensitivity for metadata keys\r\n\r\n`kvp.Key.GetHashCode()` used by SdkResultItem.GetHashCode is case-sensitive but the `item.Metadata[kvp.Key]` lookups in SdkResultItem.Equals use `StringComparer.OrdinalIgnoreCase` because the dictionary was constructed with that.\r\n\r\n#### PowerShell demo\r\n\r\n```\r\nPS C:\\> Add-Type -Path \"C:\\Program Files\\dotnet\\sdk\\6.0.100-preview.7.21379.14\\Microsoft.Build.Framework.dll\"\r\nPS C:\\> $a = [Microsoft.Build.Framework.SdkResultItem]::new()\r\nPS C:\\> $b = [Microsoft.Build.Framework.SdkResultItem]::new()\r\nPS C:\\> $a.ItemSpec = \"abc\"\r\nPS C:\\> $b.ItemSpec = \"abc\"\r\nPS C:\\> $a.Metadata.Add(\"def\", \"42\")\r\nPS C:\\> $b.Metadata.Add(\"DEF\", \"42\")\r\nPS C:\\> $a.GetHashCode()\r\n1626094109\r\nPS C:\\> $b.GetHashCode()\r\n-1678616852\r\nPS C:\\> $a.Equals($b)\r\nTrue\r\n```",
        "createdAt": "2021-08-13T06:54:42Z",
        "updatedAt": "2021-08-31T13:52:37Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "@BenVillalobos \r\n\r\nI think I will take this partially, on these two suggestions first: \"Equals can throw KeyNotFoundException\" and \"Unnecessary null check\" because my internal team depends on this.\r\n\r\nAfter that, I will try to fix the equality comparison for granular unordered key-value\r\n\r\nPlease assign this to me.",
        "createdAt": "2021-08-30T22:43:06Z",
        "updatedAt": "2021-08-30T22:43:06Z",
        "author": {
          "login": "eriawan"
        }
      },
      {
        "body": "@eriawan Sounds good, thanks for picking this up!",
        "createdAt": "2021-08-30T22:49:36Z",
        "updatedAt": "2021-08-30T22:49:36Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "@BenVillalobos \r\n\r\nthanks! I'm starting to work on this \ud83d\ude42 ",
        "createdAt": "2021-09-04T18:47:05Z",
        "updatedAt": "2021-09-04T18:47:05Z",
        "author": {
          "login": "eriawan"
        }
      }
    ]
  }
}