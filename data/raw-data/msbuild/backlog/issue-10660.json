{
  "number": 10660,
  "title": "[Feature Request]: Make error message more helpful when `TaskItem.ItemSpec` is not set",
  "body": "### Summary\n\nHello,\r\n\r\nImprove error message if `ItemSpec` is missing on a `TaskItem`\n\n### Background and Motivation\n\nWhen creating a custom MSBuild task, it took me several hours to figure out why I was getting this error:\r\n\r\n```\r\nerror MSB4028: The \"EasyBuild.PackageReleaseNotes.Tasks.GetCurrentReleaseTask\" task's outputs could not be retrieved from the \"CurrentRelease\" parameter. Parameter \"includeEscaped\" cannot have zero length.\r\n```\r\n\r\nThe reason was that I didn't set the `TaskItem.ItemSpec` value.\n\n### Proposed Feature\n\nImprove the error message to mention that ItemSpec should be set.\r\n\r\n```\r\nThe \"EasyBuild.PackageReleaseNotes.Tasks.GetCurrentReleaseTask\" task's outputs could not be retrieved from the \"CurrentRelease\" parameter. Please set the value of ItemSpec, in your task.\r\n```\n\n### Alternative Designs\n\nAnother solution would be to change the constructor of `TaskItem` to take a mandatory `ItemSpec` value, but I suspect it would be too big of a breaking change.",
  "state": "OPEN",
  "createdAt": "2024-09-13T14:01:03Z",
  "updatedAt": "2024-10-15T14:10:07Z",
  "closedAt": null,
  "author": {
    "login": "MangelMaxime"
  },
  "labels": [
    "Area: Debuggability",
    "Feature Request",
    "Area: Documentation",
    "Priority:3",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "I think this could be solvable by introducing a more specific error message [here](https://github.com/dotnet/msbuild/blob/491b0df3b47f6b640562cbbab37e1fce7d1725b2/src/Build/Instance/ProjectItemInstance.cs#L1018) - right now we have a generic 'could not bind property' message, but for something as important as the Identity/ItemSpec it makes sense to have a more directed message.",
        "createdAt": "2024-09-13T14:45:25Z",
        "updatedAt": "2024-09-13T14:45:25Z",
        "author": {
          "login": "baronfel"
        }
      },
      {
        "body": "@MangelMaxime can you confirm that you called `new TaskItem()` (the parameterless constructor)? \r\n\r\nWe should document that that is not ever intended to be called in normal code, it's just there as a trap :(",
        "createdAt": "2024-09-17T13:51:22Z",
        "updatedAt": "2024-09-17T13:51:22Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald\r\n\r\nThis is indeed what I am doing:\r\n\r\n```fs\r\nthis.CurrentRelease <- TaskItem()\r\nthis.CurrentRelease.ItemSpec <- version.Version.ToString()\r\nthis.CurrentRelease.SetMetadata(\"Version\", version.Version.ToString())\r\n```\r\n\r\nBased on your message, I suppose `TaskItem` have other constructors, but I didn't think to check for them. Because it didn't occurred to me that a \"trap constructor\" would exist \ud83d\ude05",
        "createdAt": "2024-09-17T14:01:15Z",
        "updatedAt": "2024-09-17T14:01:15Z",
        "author": {
          "login": "MangelMaxime"
        }
      },
      {
        "body": "Yeah that's completely fair!\r\n\r\nI'd recommend using [`TaskItem(string itemSpec, IDictionary itemMetadata)`](https://learn.microsoft.com/en-us/dotnet/api/microsoft.build.utilities.taskitem.-ctor?view=msbuild-17-netcore#microsoft-build-utilities-taskitem-ctor(system-string-system-collections-idictionary)), or `new TaskItem(string)` and then set metadata.\r\n\r\n. . . now we should make the docs say the same. And maybe even hide that \"so this type is COM-createable\" ctor from IntelliSense or something so it's less tempting?",
        "createdAt": "2024-09-17T14:05:40Z",
        "updatedAt": "2024-09-17T14:05:40Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}