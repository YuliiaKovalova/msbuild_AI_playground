{
  "number": 10910,
  "title": "MSBuild does not log \"fatal\" error messages from Clang as MSbuild errors",
  "body": "### Issue Description\n\nFor certain classes of errors (like missing files) the Clang compiler logs a \"fatal\" error, ex)\n_fatal.c:1:10: fatal error: 'nosuchfile.h' file not found_\n\nWhen run through MSBuild, using for example the Exec task this error message is not logged as an error through the MSbuild log system and is instead logged as normal text output, most likely because the word \"fatal\" breaks the detection of canonical errors.\n\n### Steps to Reproduce\n\n[fatal.zip](https://github.com/user-attachments/files/17572997/fatal.zip)\n\nWith the LLVM toolset support installed for Visual Studio and running from a Visual Studio developer prompt:\n* To reproduce an example of a fatal error message:\n **clang.exe fatal.c**\n_fatal.c:1:10: fatal error: 'nosuchfile.h' file not found\n    1 | #include <nosuchfile.h>\n      |          ^~~~~~~~~~~~~~\n1 error generated._\n\n* To reproduce the behaviour from MSBuild:\n**MSbuild fatal.proj**\n\n### Expected Behavior\n\nMSBuild should detect the message from Clang as an error and log an MSBuild error message along the lines of:\n_fatal.c(1,10): error ABCDEF: nosuchfile.h: No such file or directory [fatal.proj]_\n\n### Actual Behavior\n\nThe output from Clang is logged as normal message instead of an error\n\n### Analysis\n\nThe regexes in src\\Shared\\CanonicalError.cs  does not account for the extra word \"fatal\" in these kind of error messages and therefore fails to detect them as actual errors\n\n### Versions & Configurations\n\nmsbuild -version\n**MSBuild version 17.9.8+b34f75857 for .NET Framework\n17.9.8.16306**\n\nclang -v\n**clang version 17.0.3\nTarget: i686-pc-windows-msvc\nThread model: posix\nInstalledDir: C:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\VC\\Tools\\Llvm\\bin**",
  "state": "OPEN",
  "createdAt": "2024-10-30T13:27:17Z",
  "updatedAt": "2024-11-05T15:10:09Z",
  "closedAt": null,
  "author": {
    "login": "sejonyv"
  },
  "labels": [
    "triaged",
    "gathering-feedback"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "The canonical error format is specifically for MSBuild errors and is provided as a convenience. If a tool wants to accurately report errors from the Exec task, it should use the available knobs (like CustomErrorRegularExpression, CustomWarningRegularExpression, IgnoreStandardErrorWarningFormat from the [docs](https://learn.microsoft.com/visualstudio/msbuild/exec-task#parameters)) to massage the output into MSBuild's model. We cannot ship knowledge of every possible tool that can be invoked via Exec. ",
        "createdAt": "2024-10-30T13:53:22Z",
        "updatedAt": "2024-10-30T13:53:22Z",
        "author": {
          "login": "baronfel"
        }
      },
      {
        "body": "_\"We cannot ship knowledge of every possible tool that can be invoked via Exec.\"_\n\nWhile I agree that this is a completely fair statement in general, MSBuild already has built in custom support specifically for the error/warning formats of Clang and GCC as evidenced by the \"s_originCategoryCodeTextExpression2\"  regex in CanonicalError and also specific unittests for Clang and GCC messages so to me it would make sense to have complete support also for the \"fatal\" form.\nBut if not I guess this is mostly an inconvenience,  the failure can still be detected via the exit code but you may need to dig through logfiles to find the actual root cause instead of being able to tell directly from the build summary.",
        "createdAt": "2024-10-30T14:35:10Z",
        "updatedAt": "2024-10-30T14:35:10Z",
        "author": {
          "login": "sejonyv"
        }
      },
      {
        "body": "This is a strong point - I didn't realize we _already_ had some level of compatibility for these error types specifically. If we can add support for detecting \"fatal error\" then that seems reasonable - though I think it would only be \"error\" level severity in MSBuild still.",
        "createdAt": "2024-10-30T15:04:22Z",
        "updatedAt": "2024-10-30T15:04:22Z",
        "author": {
          "login": "baronfel"
        }
      },
      {
        "body": "I wish we didn't have that in there. Looks like it went in in the first mono-support commit.\n\nDespite it being there I'm a bit concerned about extending the regex, since that could theoretically take passing builds to failing. Do we know if these compilers reliably return a failure code after emitting a `fatal` message? If they do that's a pretty good mitigation and taking this would only map failing-with-only-message builds to failing-with-clear-error builds.",
        "createdAt": "2024-10-31T20:37:58Z",
        "updatedAt": "2024-10-31T20:37:58Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "FYI. In VC, the clang task has a custom error parser.  ",
        "createdAt": "2024-11-04T06:12:24Z",
        "updatedAt": "2024-11-04T06:12:24Z",
        "author": {
          "login": "yuehuang010"
        }
      }
    ]
  }
}