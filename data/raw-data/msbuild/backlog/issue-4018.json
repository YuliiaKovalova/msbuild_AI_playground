{
  "number": 4018,
  "title": "Task for pre-processing source files",
  "body": "I'd like to contribute to MSBuild a task we wrote for aspnet that I think would be generally useful. Is this something MSBuild would accept as a PR?\r\n\r\n### GenerateFileFromTemplate\r\n\r\nPurpose: pre-process a source file using MSBuild variables.\r\n**Usage:**\r\n```xml\r\n<GenerateFileFromTemplate\r\n   TemplateFile=\"MyFile.cs.in\"\r\n   OutputPath=\"$(IntermediateOutputPath)MyFile.cs\"\r\n   Properties=\"ClassName=Banana;Method=Abc\" />\r\n```\r\n**Template file example**\r\n```\r\n// MyFile.cs.in\r\npublic class ${ClassName}\r\n{\r\n  public void Method${MethodName}()\r\n  {\r\n     Console.WriteLine(\"`${NotReplacedDueToBacktick}\"\");\r\n  }\r\n}\r\n```\r\n\r\n**Template syntax**:\r\n * variables in the template file use powershell/bash syntax: `${VarName}`.\r\n * if you need a file with `${...}`, you can escape this with a backtick: <code>`${...}</code>\r\n\r\n**Justification**:\r\nWriteLinesToFile is good, but I've frequently run into problems with it when I need to write a file that has `\\`, `/`, or `;` in it.\r\n\r\nCurrent implementation: https://github.com/aspnet/BuildTools/blob/master/modules/BuildTools.Tasks/GenerateFileFromTemplate.cs, https://github.com/aspnet/BuildTools/blob/master/test/BuildTools.Tasks.Tests/GenerateFileFromTemplateTests.cs\r\n\r\n\r\ncc @jeffkl  @livarcocc ",
  "state": "OPEN",
  "createdAt": "2018-12-18T17:35:53Z",
  "updatedAt": "2024-02-21T16:32:14Z",
  "closedAt": null,
  "author": {
    "login": "natemcmaster"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Ping. Anyone from MSBuild interested in this? If I were to make a PR, would you accept it?\r\n\r\nTagging in @rainersigwald since you're the only MSBuild contributor that I know still works on this repo.",
        "createdAt": "2019-04-30T20:38:08Z",
        "updatedAt": "2019-04-30T20:38:08Z",
        "author": {
          "login": "natemcmaster"
        }
      },
      {
        "body": "This is surely useful, but I'm not sure whether we should add it to core MSBuild. As you mention, we have readlinesfromfile/writelinestofile, which can help in this scenario (but I agree it's clunky).\r\n\r\nFor more advanced uses, there's [T4](https://docs.microsoft.com/en-us/visualstudio/modeling/code-generation-and-t4-text-templates?view=vs-2019), which has a nice open-source implementation https://github.com/mono/t4.\r\n\r\nI'm concerned that we'd take this, and folks would immediately start asking for more features until it turned into a t4 equivalent, which I don't think is appropriate for MSBuild.\r\n\r\nOther @Microsoft/msbuild-maintainers might have different opinions, though.",
        "createdAt": "2019-04-30T20:54:17Z",
        "updatedAt": "2019-04-30T20:54:17Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> WriteLinesToFile is good, but I've frequently run into problems with it when I need to write a file that has \\, /, or ; in it.\r\n\r\nCan you fix those problems instead? :)",
        "createdAt": "2019-05-01T00:44:10Z",
        "updatedAt": "2019-05-01T00:44:10Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "Not sure it's that easy. The problems I ran into seem to related to a much bigger subject with strings vs paths - https://github.com/Microsoft/msbuild/issues/1024. \r\n\r\nRepro: run this on Linux. Output in both cases has the backslash flipped to a forward slash. `{ \"key\": \"value /\" with a quote\" }`.\r\n```xml\r\n<Project>\r\n    <Target Name=\"Build\">\r\n        <PropertyGroup>\r\n            <Content>{ \"key\": \"value \\\" with a quote\" }</Content>\r\n        </PropertyGroup>\r\n\r\n        <WriteLinesToFile Lines=\"$(Content)\" File=\"out1.txt\" Overwrite=\"true\" />\r\n        <WriteLinesToFile Lines=\"$([MSBuild]::Escape($(Content)))\" File=\"out2.txt\" Overwrite=\"true\" />\r\n    </Target>\r\n</Project>\r\n```\r\n\r\n\r\nI agree that adding a t4 equivalent is inappropriate for MSBuild and can understand the hesitance to add to MSBuild itself. Is there an alternative? For example, have we considered making a NuGet package of MSBuild tasks that fall into the 'useful but maybe not for everyone' category? The existing implementation of GenerateFileFromTemplate I mentioned has lived in the aspnet build tools repo for years. I think it would be generally useful for others and am looking for the right vehicle to share it with others.",
        "createdAt": "2019-05-01T01:03:22Z",
        "updatedAt": "2019-05-01T01:03:22Z",
        "author": {
          "login": "natemcmaster"
        }
      },
      {
        "body": "A big side-effect of ReadLinesToFile / WriteLinesToFile is that it raises all the content into the msbuild session, bloating logs and slowing down the build.  It's also not scalable: imagine trying to preprocess/evaluate a 1MB file with a dozen replacements.  Additionally it requires people to know MSBuild tricks in order to do anything useful, which becomes a big blocker.\r\n\r\nWe don't need T4 with a code-execution model, MSBuild has tasks for that.  We need a simple pre-processor for simple code-generation tasks.",
        "createdAt": "2019-05-01T06:21:37Z",
        "updatedAt": "2019-05-01T06:41:07Z",
        "author": {
          "login": "ericstj"
        }
      },
      {
        "body": "So then the path of least resistance is having something like GenerateFileFromTemplate directly in MSBuild. The other options imply heavier work on msbuild, or extra maintenance to keep a separate nuget package of utility tasks.\r\n",
        "createdAt": "2019-05-01T16:58:46Z",
        "updatedAt": "2019-05-01T16:58:46Z",
        "author": {
          "login": "cdmihai"
        }
      }
    ]
  }
}