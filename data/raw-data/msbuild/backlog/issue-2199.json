{
  "number": 2199,
  "title": "ImplicitlyExpandDesignTimeFacades must trigger off of netstandard.dll once it is inbox",
  "body": "Today ImplicitlyExpandDesignTimeFacades conditions the injection of facades based only on a reference to System.Runtime.\r\n\r\nThat works for contract-based PCLs, but not for netstandard libraries.  We'll want to also inject facades when netstandard.dll is referenced once netstandard.dll goes inbox.\r\n\r\n/cc @alexghi",
  "state": "CLOSED",
  "createdAt": "2017-06-08T17:32:39Z",
  "updatedAt": "2024-02-21T17:18:35Z",
  "closedAt": "2017-10-02T20:05:17Z",
  "author": {
    "login": "ericstj"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "* Approximately when is \"once it is inbox\" -- that is, do we need this for 15.3?\r\n* This would just be roughly adding a check to the [is-any-dependency `System.Runtime` clause](https://github.com/Microsoft/msbuild/blob/54f7f93393cd96f237b419854ee8f2d7ab3acd71/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs#L2239), right?\r\n\r\nPossibly related: https://github.com/Microsoft/msbuild/pull/1520#issuecomment-271342350 -- do we need `ImplicitlyExpandDesignTimeFacades` at all?",
        "createdAt": "2017-06-08T20:14:23Z",
        "updatedAt": "2017-06-08T20:14:23Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "/cc @alexghi\r\n\r\nWe're having a meeting tomorrow to discuss this work where hopefully we can determine schedule.\r\n\r\nYes, I suspect that we could reuse the clause you point out.\r\n\r\n>  do we need ImplicitlyExpandDesignTimeFacades at all?\r\n\r\nI think that one is a bit independent and a riskier change.  \r\n\r\nCertainly if ImplicitlyExpandDesignTimeFacades were removed this issue would not be required, but removing it and promoting all ReferenceDependencyPaths could either break existing apps if there happened to be type conflicts in the ReferenceDependencyPaths (not in the facades, but in other indirect dependencies).  Potentially if we filtered ReferenceDependencyPaths down to facades we could mitigate that risk.  I'd lean towards first doing this netstandard change and investigating the removal of ImplicitlyExpandDesignTimeFacades as a separate issue.\r\n",
        "createdAt": "2017-06-08T20:29:47Z",
        "updatedAt": "2017-06-08T20:29:47Z",
        "author": {
          "login": "ericstj"
        }
      },
      {
        "body": "I wanted to make it clear that this work is *required* in order to make NETStandard2.0 work once it's inbox in .NET 4.7.1.  ",
        "createdAt": "2017-09-27T19:27:50Z",
        "updatedAt": "2017-09-27T19:27:50Z",
        "author": {
          "login": "ericstj"
        }
      },
      {
        "body": "@ericstj How come this fix is not available yet to customers when net471 was released three weeks ago? See https://github.com/dotnet/corefx/issues/24716#issuecomment-338125612 for some context.",
        "createdAt": "2017-11-10T14:46:11Z",
        "updatedAt": "2017-11-10T14:46:44Z",
        "author": {
          "login": "stijnherreman"
        }
      }
    ]
  }
}