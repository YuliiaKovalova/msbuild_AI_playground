{
  "number": 365,
  "title": "CoreResGen should use Inputs in Microsoft.Common.CurrentVersion.targets",
  "body": "CoreResGen Target in Microsoft.Common.CurrentVersion.targets doesn't use inputs, but the timestamps of references are checked in GenerateResource.cs -> ShouldRebuildResgenOutputFile\n\nWhy? Targets like CoreCompile also have a huge list of inputs and outputs.\n\nBecause this is part of the task, it makes it harder and to extend / override this part of the build.\n",
  "state": "CLOSED",
  "createdAt": "2015-11-20T10:33:48Z",
  "updatedAt": "2024-02-21T17:29:44Z",
  "closedAt": "2015-11-24T23:56:00Z",
  "author": {
    "login": "tverboon"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "The reason is obliquely hidden in the doc comment for that method:\n\n``` C#\n        /// <summary>\n        /// Determines if the given output file is up to date with respect to the\n        /// the given input file by comparing timestamps of the two files as well as\n        /// (if the source is a .resx) the linked files inside the .resx file itself\n        /// </summary>\n        /// <param name=\"sourceFilePath\"></param>\n        /// <param name=\"outputFilePath\"></param>\n        /// <returns></returns>\n        private bool ShouldRebuildResgenOutputFile(string sourceFilePath, string outputFilePath)\n```\n\nBecause the `.resx` file format allows references to other files (that aren't mentioned in MSBuild anywhwere--you point only to a `.resx` which may then point to other files), to determine whether an output is up to date requires checking the `.resx` file itself _and anything it references_ against the output.\n\nSince the linked files are listed in the `.resx` file but _not_ in MSBuild anywhere, we can't specify them as `Inputs` to the task.  So the task implemented its own incrementality.\n\n@tverboon can you elaborate on what difficulties you're having as a result of this?\n",
        "createdAt": "2015-11-20T16:52:52Z",
        "updatedAt": "2015-11-20T16:52:52Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Thank you for response. I realized this when I was trying to customize a target in MSBuild and I was figuring out what the inputs should be.\nSo, obviously this is not a defect and I agree having this task to manage it is the best solution.\n\nSome background on what I am trying to accomplish. We have a build consisting of hundreds of projects, we can already successfully build these incrementally,  but a build of a project that is referenced by other projects will cause a chain reaction in builds, because the referenced assembly has changed. I am trying to prevent this by analyzing the assembly in a custom task after build for the public methods and writing this to a file based on target path. I am using these files in the next build as Input for a custom CoreCompile. Instead of the References, I use my generated files. This works, but then the GenerateResources task is using the References to determine if it should rebuild resgen output file and it should because the reference is updated. Because the Resgen output is updated, this again causes a rebuild of the project because the inputs of the resource is newer.\n\nObviously this is right, because in my scenario the build won\u2019t be 100% correct in all cases, but a simple rebuild of the referenced project will fix this. We still have to investigate if performance gains are big enough to take the initial penalty and the fact that it won\u2019t be correct with resources.\n\nThanks again.\n\n> On 20 nov. 2015, at 17:53, Rainer Sigwald notifications@github.com wrote:\n> \n> The reason is obliquely hidden in the doc comment for that method:\n> \n> ```\n>     /// <summary>\n>     /// Determines if the given output file is up to date with respect to the\n>     /// the given input file by comparing timestamps of the two files as well as\n>     /// (if the source is a .resx) the linked files inside the .resx file itself\n>     /// </summary>\n>     /// <param name=\"sourceFilePath\"></param>\n>     /// <param name=\"outputFilePath\"></param>\n>     /// <returns></returns>\n>     private bool ShouldRebuildResgenOutputFile(string sourceFilePath, string outputFilePath)\n> ```\n> \n> Because the .resx file format allows references to other files (that aren't mentioned in MSBuild anywhwere--you point only to a .resx which may then point to other files), to determine whether an output is up to date requires checking the .resx file itself and anything it references against the output.\n> \n> Since the linked files are listed in the .resx file but not in MSBuild anywhere, we can't specify them as Inputs to the task. So the task implemented its own incrementality.\n> \n> @tverboon https://github.com/tverboon can you elaborate on what difficulties you're having as a result of this?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub https://github.com/Microsoft/msbuild/issues/365#issuecomment-158457921.\n",
        "createdAt": "2015-11-21T08:03:42Z",
        "updatedAt": "2015-11-21T08:03:42Z",
        "author": {
          "login": "tverboon"
        }
      },
      {
        "body": "@tverboon I'm going to close this since I don't think we can do any better in the core MSBuild engine.  However, you may be interested in some work that Roslyn is doing to produce deterministic outputs from the compiler (https://github.com/dotnet/roslyn/issues/372) and explicit reference assemblies from the compiler (https://github.com/dotnet/roslyn/issues/2184).  Those changes, with restructured C# targets that use them, will enable stopping the rebuilt-reference cascade.\n",
        "createdAt": "2015-11-24T23:56:00Z",
        "updatedAt": "2015-11-24T23:56:00Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}