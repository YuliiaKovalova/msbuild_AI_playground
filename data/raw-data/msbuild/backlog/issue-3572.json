{
  "number": 3572,
  "title": "MSBuild on .NET Core does not allow tasks with same assembly name, but different assembly versions",
  "body": "With desktop MSBuild / VS, we've gotten around issues with node reuse and varying versions of the SDK by increasing the assembly version of the SDK tasks on every build. (Aside: we've regressed that a bunch of times with infrastructure changes.)\r\n\r\nHowever, this does not work on .NET Core. I suspect we haven't noticed this until now because node reuse has only made its way to .NET Core recently.\r\n\r\n### Steps to reproduce\r\n\r\nRun ReproCore.cmd from https://github.com/nguerrera/repros/commit/fc1e1df38786edff4258c6c2ed09ec6f4c89c4a3\r\n\r\n**WARNING**: First step of repro kills msbuild.exe processes, so don't do this with real builds in progress in parallel.\r\n\r\nCommand line\r\n```\r\ngit clone https://github.com/nguerrera/repros\r\ncd repros\r\ngit checkout fc1e1df38786edff4258c6c2ed09ec6f4c89c4a3\r\ncd NodeReuseAndAssemblyVer\r\nReproCore.cmd\r\n```\r\n\r\n### Expected  behavior\r\n\r\nFinal build command  in .cmd succeeds as it does on Desktop (try ReproDesktop.cmd instead).\r\n\r\n### Actual behavior\r\n\r\n```\r\nD:\\Src\\repros\\NodeReuseAndAssemblyVer\\repro.proj(16,9): error MSB4062: The \"MyTask\" task could not be loaded from the assembly D:\\Src\\repros\\NodeReuseAndAssemblyVer\\bin\\2.0.0\\netstandard2.0\\MyTask.dll.\r\nAssembly with same name is already loaded Confirm that the <UsingTask> declaration is correct, that the assembly and all its dependencies are available, and that the task contains a public class that implements\r\nMicrosoft.Build.Framework.ITask.\r\n```\r\n\r\n### Environment data\r\n```\r\nMicrosoft (R) Build Engine version 15.8.160-preview+gaf9d27ba72 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n15.8.160.40367\r\n\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.400-preview-009171\r\n Commit:    6f5d38734b\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.400-preview-009171\\\r\n```\r\n\r\ncc @davkean @rainersigwald @dsplaisted ",
  "state": "CLOSED",
  "createdAt": "2018-08-01T19:04:08Z",
  "updatedAt": "2024-02-21T17:12:07Z",
  "closedAt": "2019-12-16T20:31:11Z",
  "author": {
    "login": "nguerrera"
  },
  "labels": [
    "bug",
    ".NET Core",
    "Area: Engine",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Hmm, this repro might not be good because the assembly isn't strong name signed. I suspect desktop is silently reloading old version. Let me update it to strong name sign the assembly...",
        "createdAt": "2018-08-01T19:21:28Z",
        "updatedAt": "2018-08-01T19:21:28Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "Repro fixed to strong name task. Still gives the unexpected behavior on core.",
        "createdAt": "2018-08-01T19:26:26Z",
        "updatedAt": "2018-08-01T19:26:26Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "Huh. This check seems like it'd do it, but I haven't debugged at all\r\n\r\nhttps://github.com/Microsoft/msbuild/blob/901c77484df3eece289829c431542d69c0294999/src/Shared/CoreCLRAssemblyLoader.cs#L126-L132",
        "createdAt": "2018-08-01T19:46:26Z",
        "updatedAt": "2018-08-01T19:46:26Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "This may be a limitation of putting all tasks in default assembly load context.",
        "createdAt": "2018-08-01T19:49:39Z",
        "updatedAt": "2018-08-01T19:49:39Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "That's plausible. This throws:\r\n\r\n![image](https://user-images.githubusercontent.com/3347530/43545563-d678b332-959b-11e8-837b-b22f68dfc7f8.png)\r\n\r\n```\r\nSystem.IO.FileLoadException: Assembly with same name is already loaded\r\n   at System.Runtime.Loader.AssemblyLoadContext.LoadFromPath(IntPtr ptrNativeAssemblyLoadContext, String ilPath, String niPath, ObjectHandleOnStack retAssembly)\r\n   at System.Runtime.Loader.AssemblyLoadContext.LoadFromAssemblyPath(String assemblyPath)\r\n   at Microsoft.Build.Shared.CoreClrAssemblyLoader.LoadAndCache(String fullPath) in /_/src/Shared/CoreCLRAssemblyLoader.cs:line 146\r\n   at Microsoft.Build.Shared.CoreClrAssemblyLoader.LoadFromPath(String fullPath) in /_/src/Shared/CoreCLRAssemblyLoader.cs:line 72\r\n   at Microsoft.Build.Shared.TypeLoader.LoadAssembly(AssemblyLoadInfo assemblyLoadInfo) in /_/src/Shared/TypeLoader.cs:line 181\r\n   at Microsoft.Build.Shared.TypeLoader.AssemblyInfoToLoadedTypes.ScanAssemblyForPublicTypes() in /_/src/Shared/TypeLoader.cs:line 370\r\n   at Microsoft.Build.Shared.TypeLoader.AssemblyInfoToLoadedTypes.<>c__DisplayClass8_0.<GetLoadedTypeByTypeName>b__0(String key) in /_/src/Shared/TypeLoader.cs:line 341\r\n   at System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(TKey key, Func`2 valueFactory)\r\n   at Microsoft.Build.Shared.TypeLoader.AssemblyInfoToLoadedTypes.GetLoadedTypeByTypeName(String typeName) in /_/src/Shared/TypeLoader.cs:line 314\r\n   at Microsoft.Build.Shared.TypeLoader.GetLoadedType(ConcurrentDictionary`2 cache, String typeName, AssemblyLoadInfo assembly) in /_/src/Shared/TypeLoader.cs:line 242\r\n   at Microsoft.Build.Shared.TypeLoader.Load(String typeName, AssemblyLoadInfo assembly) in /_/src/Shared/TypeLoader.cs:line 208\r\n   at Microsoft.Build.BackEnd.AssemblyTaskFactory.InitializeFactory(AssemblyLoadInfo loadInfo, String taskName, IDictionary`2 taskParameters, String taskElementContents, IDictionary`2 taskFactoryIdentityParameters, Boolean taskHostFactoryExplicitlyRequested, TargetLoggingContext targetLoggingContext, ElementLocation elementLocation, String taskProjectFile) in /_/src/Build/Instance/TaskFactories/AssemblyTaskFactory.cs:line 278\r\n```\r\n\r\nAnd indeed, from https://github.com/dotnet/coreclr/blob/master/Documentation/design-docs/assemblyloadcontext.md#custom-loadcontext\r\n\r\n> Multiple assemblies with the same simple name cannot be loaded into a single load context (*Default* or *Custom*). Also, .Net Core ignores strong name token for assembly binding process.\r\n\r\nSo I guess we should have a load context per . . . assembly path?",
        "createdAt": "2018-08-01T20:10:01Z",
        "updatedAt": "2018-08-01T20:10:01Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> So I guess we should have a load context per . . . assembly path?\r\n\r\nYes. More precisely, per UsingTask AssemblyFile path. Dependencies of the task would come into the same load context as the task.\r\n\r\nThis is very much related to the challenges that @natemcmaster outlined here: https://natemcmaster.com/blog/2018/07/25/netcore-plugins/\r\n\r\nMany things he has mentioned have bit msbuild loading tasks and roslyn loading analyzers in turn.\r\n\r\ncc @jeffschwMSFT",
        "createdAt": "2018-08-01T20:23:14Z",
        "updatedAt": "2018-08-01T21:12:58Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "I guess this comes down to more motivation for https://github.com/Microsoft/msbuild/issues/1754",
        "createdAt": "2018-08-01T20:29:52Z",
        "updatedAt": "2018-08-01T20:29:52Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "I'm currently using something similar to https://github.com/AArnott/Nerdbank.MSBuildExtension/blob/master/src/Nerdbank.MSBuildExtension/netstandard1.5/ContextIsolatedTask.cs\r\nto work around conflicting references.\r\n\r\nWhat popped up on SO was that loading assemblies that are also used by the SDK (newtonsoft.json) are impossible to load (without a custom AssemblyLoadContext to execute your logic).\r\n\r\nTL;DR having a load context per task assembly in general would be great! (https://github.com/Microsoft/msbuild/issues/1754)",
        "createdAt": "2018-08-01T20:38:38Z",
        "updatedAt": "2018-08-01T20:38:38Z",
        "author": {
          "login": "dasMulli"
        }
      },
      {
        "body": "What's the status of this bug? Customers are encountering problems with the build tasks in Grpc.Tools:\r\n\r\nhttps://github.com/grpc/grpc/issues/20501",
        "createdAt": "2019-12-14T19:23:14Z",
        "updatedAt": "2019-12-14T19:23:14Z",
        "author": {
          "login": "JamesNK"
        }
      },
      {
        "body": "I believe #4916 would address this and planned for 16.5 / sdk 3.1.200, right, @rainersigwald ?",
        "createdAt": "2019-12-15T00:28:35Z",
        "updatedAt": "2019-12-15T00:28:35Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "Correct; I'll close this as a duplicate.",
        "createdAt": "2019-12-16T20:30:54Z",
        "updatedAt": "2019-12-16T20:30:54Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Duplicate of #1754 ",
        "createdAt": "2019-12-16T20:31:11Z",
        "updatedAt": "2019-12-16T20:31:11Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}