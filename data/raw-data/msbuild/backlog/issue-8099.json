{
  "number": 8099,
  "title": "MSBuild does not honor solution Project Dependencies",
  "body": "### Issue Description\r\nThere does not appear to be a functional way to represent a soft (build order only) project dependency using the MSBuild command line. Visual Studio has a feature to indicate that one project depends on another without referencing it, which works, but when building from the command line these relationships are not honored.\r\n\r\n### Steps to Reproduce\r\n\r\nIn one scenario we need this functionality, we have a basic pattern with at least 3 projects (this is slightly simplified from our real world implementation, but expresses the important moving parts):\r\n- A _Contracts_ project that contains serializable POCO DTO types and service interfaces.\r\n- A _Web API_ project with controllers that implement service interfaces and return the DTOs.\r\n- A _Client_ project that contains generated typed HTTP clients (which also implement the service interfaces so that shared code can swap implementations between server-side and client-side)\r\n\r\nThe _Contracts_ project is a fairly straightforward class library that targets netstandard2.0.\r\n\r\nThe _Web API_ project is an ASP.NET Core project (currently targeting netcore3.1, but with some prototypes migrating to net6 that have the same issues) that references the _Contracts_ project. There is a post-build target that generates an Open API Specification file describing the controllers (NSwag json output).\r\n\r\nThe _Client_ project is a class library that targets netstandard2.0 and references the _Contracts_ project. There is a pre-build step that uses NSwag to generate typed HTTP clients (and some supporting extension methods for registering them in a service collection, etc.). This project has a loose build order dependency on the _Web API_ project (because it consumes the swagger json file produced post-build in the _Web API_, but it can not--and does not want to--reference the netcoreapp3.1 project from the netstandard2.0 project). \r\n\r\n### Expected Behavior\r\n\r\nIn Visual Studio we use the \"Project Dependencies\" dialog to indicate that _Client_ depends on Web API and it works well within the IDE. Ideally that feature would just work when building from the command line as well. \r\n\r\n### Actual Behavior\r\n\r\nWhen a clean source tree is checked out or the bin/obj directories are cleaned out (or, really, when the swagger json file does not exist on disk) the build fails because the _Client_ project builds before the Web API project is finished.\r\n\r\n### Analysis\r\n\r\nWe've tried a variety of ways to work around this with a `ProjectReference` from the _Client_ project to the _Web API_ project, but can't seem to figure out the right metadata/configuration to express the loose dependency. Any guidance would be greatly appreciated. Here are some of the things we've tried in a variety of combinations:\r\n\r\n```xml\r\n<ProjectReference Include=\"..\\AspNetCore.TestHarness\\AspNetCore.TestHarness.csproj\">\r\n  <Private>false</Private>\r\n  <ReferenceOutputAssembly>false</ReferenceOutputAssembly>\r\n  <ExcludeAssets>all</ExcludeAssets>\r\n  <PrivateAssets>all</PrivateAssets>\r\n  <DisableTransitiveProjectReferences>true</DisableTransitiveProjectReferences>\r\n  <DisableTransitiveFrameworkReferences>true</DisableTransitiveFrameworkReferences>\r\n  <SkipGetTargetFrameworkProperties>true</SkipGetTargetFrameworkProperties>\r\n</ProjectReference>\r\n```\r\n\r\nSome references found along the way:\r\n- https://devblogs.microsoft.com/visualstudio/incorrect-solution-build-ordering-when-using-msbuild-exe/\r\n- https://github.com/dotnet/msbuild/issues/4371\r\n- https://github.com/dotnet/sdk/issues/11803\r\n- https://github.com/microsoft/MSBuildSdks/issues/191\r\n\r\n### Versions & Configurations\r\n\r\nThis has been an ongoing struggle with VS 2017, 2019, and 2022 in a variety of different scenarios. One of the latest machines I reproduced this on is running:\r\n\r\nMSBuild version 17.3.1+2badb37d1 for .NET Framework\r\n17.3.1.41501\r\n",
  "state": "CLOSED",
  "createdAt": "2022-10-27T21:39:11Z",
  "updatedAt": "2022-12-21T00:39:44Z",
  "closedAt": "2022-12-21T00:39:44Z",
  "author": {
    "login": "TheXenocide"
  },
  "labels": [
    "bug",
    "needs-triage"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "> ### Actual Behavior\r\n> When a clean source tree is checked out or the bin/obj directories are cleaned out (or, really, when the swagger json file does not exist on disk) the build fails because the _Client_ project builds before the Web API project is finished.\r\n\r\nCan you please be very specific about how you're doing the builds?\r\n\r\nDetails about what you're seeing with the XML you shared would also be helpful.",
        "createdAt": "2022-10-27T21:44:10Z",
        "updatedAt": "2022-10-27T21:44:10Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Our NSwag generation functionality is packaged together with a variety of other features in a custom SDK I can't share here or I would already have a repro project up for you, but I will try to extract out the functionality necessary to repro the issue if I can find some time (very busy trying to prepare for a release these days).\r\n\r\nThere's not much to say from the output of the above XML except that, somehow the Client project builds way earlier than the Web API project which seems like it's disregarding the reference entirely (maybe we've disabled too many of the relevant functionlities with the metadata?). The only error we get with the whole set of those specified is that the json file our NSwag client generation is trying to use doesn't exist (NSwag throws a `FileNotFoundException`) and then much further down that particular solution's build log the Web API project builds and successfully generates a swagger document.\r\n\r\nIn past experiments (which I don't have a lot of time to rerun at the immediate moment, but will try to gather some sensible permutations if it will help, though it seems like the repro solution would probably be a better priority) if we omit various metadata from that set then we wind up with TFM validation errors (you can't target netcoreapp3.1 from netstandard2.0) or with that disabled and other metadata omitted we generate NuGet packages with dependencies we don't actually want (like server-side ASP.NET Core libraries/transitive references being referenced from the client-side package, etc.)\r\n\r\nOne separate workaround (not using ProjectReference for the loose dependency at all) that we've used in CI/CD environments is to disable parallel builds and make sure the project entries in solution file are in an order that places the Web API project before the Client project because it seems MSBuild somewhat honors the order they appear in when the projects have equivalent order in the sorted dependency hierarchy, but this doesn't fit all situations if the dependency hierarchy with other real project references places them at different orders (I believe we \"fixed\" any of those we had a while back when we split things into smaller solutions for other purposes, but anecdotally I believe I remember the challenge/behavior). That said, it would be nice if we could properly leverage parallel builds; also it doesn't seem to work quite as reliably for me when running scripts on dev machines, though I'm not sure what's different.",
        "createdAt": "2022-10-27T22:13:36Z",
        "updatedAt": "2022-10-27T22:13:36Z",
        "author": {
          "login": "TheXenocide"
        }
      },
      {
        "body": "I'm not sure if this is helpful, but I think there's an option on ProjectReference items (ReferenceOutputAssembly?) that, when set to false, basically just says \"build the other thing first.\"\r\n\r\nDoesn't directly fix your situation, but if you could use that as a workaround.",
        "createdAt": "2022-10-27T22:43:23Z",
        "updatedAt": "2022-10-27T22:43:23Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "@Forgind yeah, we started with that (and it's in the sample attempt at a workaround above) but there were still side effects from transitive dependencies so we've been trying to add more metadata to varying (unsuccessful) results.",
        "createdAt": "2022-10-28T15:57:58Z",
        "updatedAt": "2022-10-28T15:57:58Z",
        "author": {
          "login": "TheXenocide"
        }
      },
      {
        "body": "> Can you please be very specific about how you're doing the builds?\r\n\r\nI didn't see an answer to this. Are you building the solution, or individual projects? Exactly how?",
        "createdAt": "2022-10-28T16:01:13Z",
        "updatedAt": "2022-10-28T16:01:13Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> The only error we get with the whole set of those specified is that the json file our NSwag client generation is trying to use doesn't exist\r\n\r\nHow is this file specified in the Client project?",
        "createdAt": "2022-10-28T16:02:23Z",
        "updatedAt": "2022-10-28T16:02:23Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> Can you please be very specific about how you're doing the builds?\r\n\r\nMSBuild.exe [path to solution] /t:Restore;Build\r\n\r\n> How is this file specified in the Client project?\r\n\r\nA Target in our custom MSBuild SDK somewhat like [this guidance](https://learn.microsoft.com/en-us/visualstudio/msbuild/tutorial-rest-api-client-msbuild?view=vs-2022#option-1-exec-task), reused throughout a number of solutions. We define some custom Item groups for parameters and paths and are looking at reworking some of it as we move to .NET 6 (especially if we can get a decent solution to the dependency order concern). If we build the solution and it fails then build just the client project it succeeds because the swagger document now exists, just not at the time the client project tried to build in the solution build order. There are some other improvements we can make with better input/output tracking for build optimization, but those aren't related to the build order issue. In its current incarnation, the client project contains something like the following:\r\n```XML\r\n<ItemGroup>\r\n  <ApiClientAdditionalNamespaces Include=\"System.Configuration\" />\r\n  <!-- ... etc. ... -->\r\n</ItemGroup>\r\n\r\n<ItemGroup>\r\n  <SwaggerClient Include=\"ApiClient\">\r\n    <Swagger>[... path to swagger document ...].json</Swagger>\r\n    <AdditionalNamespaces>@(ApiClientAdditionalNamespaces)</AdditionalNamespaces>\r\n    <GenerateSyncMethods>false</GenerateSyncMethods>\r\n  </SwaggerClient>\r\n  \r\n  <Compile Include=\"obj\\$(Configuration)\\$(TargetFramework)\\SwaggerClient\\ApiClient.Generated.cs\" Link=\"ApiClient.Generated.cs\">\r\n    <DependentUpon>ApiClient.cs</DependentUpon>\r\n  </Compile>\r\n</ItemGroup>\r\n```\r\n\r\nHonestly, if there's a nice way to export the path to the swagger document from the ProjectReference that would be a lovely benefit to this \"workaround\" approach and we might be able to better abstract a few things, but the most painful part is the build order at the immediate moment.",
        "createdAt": "2022-10-28T18:18:20Z",
        "updatedAt": "2022-10-28T18:18:43Z",
        "author": {
          "login": "TheXenocide"
        }
      },
      {
        "body": "> MSBuild.exe [path to solution] /t:Restore;Build\n\nBetter use `/restore /t:Build` instead, so that the build phase will reload any MSBuild files that were updated during restore. I don't see how that could cause the problem with project dependencies, though.",
        "createdAt": "2022-10-28T22:18:28Z",
        "updatedAt": "2022-10-28T22:18:28Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "> Better use `/restore /t:Build` instead\r\n\r\nAh, thanks for the heads up! I think I've actually seen the side effects of that before, just didn't know /restore was an option.",
        "createdAt": "2022-10-28T23:38:11Z",
        "updatedAt": "2022-10-28T23:38:11Z",
        "author": {
          "login": "TheXenocide"
        }
      },
      {
        "body": "For reference, when I say \"Solution Project Dependencies\" I mean our SLN file has a fragment that looks something like this:\r\n\r\n```plaintext\r\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"AspNetCore.TestHarness\", \"AspNetCore.TestHarness\\AspNetCore.TestHarness.csproj\", \"{21F13BC5-C640-422B-9AD5-757F6FE20957}\"\r\nEndProject\r\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"AspNetCore.TestHarness.Client\", \"AspNetCore.TestHarness.Client\\AspNetCore.TestHarness.Client.csproj\", \"{C3F56781-79BB-4C55-B806-196119BD73C5}\"\r\n\tProjectSection(ProjectDependencies) = postProject\r\n\t\t{21F13BC5-C640-422B-9AD5-757F6FE20957} = {21F13BC5-C640-422B-9AD5-757F6FE20957}\r\n\tEndProjectSection\r\nEndProject\r\n```\r\n\r\nThe part not being honored is the `ProjectSection(ProjectDependencies) = postProject` section, which works as expected in Visual Studio but is not honored when I build from the command line. Important to note is that I forgot to include the `/m` on the command line example above, but it's a very simple invocation of MSBuild and these are the only parameters.\r\n\r\nRealistically, if we can get that loose ProjectReference to work in some way it would be even better for us than the solution dependencies in the long run because we could make a new `ItemGroupDefinition` like `NSwagGenerationReference` that would generate the necessary project reference and, ideally, get the path to the generated swagger document from the referenced project itself (which it knows and calculates based on its own properties/items) so that we don't have as many manual properties and item includes. Ideally we would put all of the work in our SDK so that the projects would have very simple reusable logic (we use this pattern in many separate solutions) but it's unclear what makes the ProjectReference impact build order which is the first step to better abstracting this pattern.\r\n\r\nThat said, this still feels like a bug since the behavior differs and, even though the solution file is not an XML file, the functionality is still built into it and seems like it should be honored during command line builds.",
        "createdAt": "2022-11-03T18:59:39Z",
        "updatedAt": "2022-11-03T18:59:39Z",
        "author": {
          "login": "TheXenocide"
        }
      },
      {
        "body": "> the functionality is still built into it and seems like it should be honored during command line builds.\r\n\r\nThat is the case generally; when a project has solution build dependencies we treat it specially to enforce them. To determine what's going wrong in your specific case I think we'd need a repro or a [binary log](https://aka.ms/msbuild/binlog), which might have more information than you're willing to share.",
        "createdAt": "2022-11-11T18:03:16Z",
        "updatedAt": "2022-11-11T18:03:16Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> I think we'd need a repro or a [binary log](https://aka.ms/msbuild/binlog)\r\n\r\nYeah, I thought that might be the case. I just got back from vacation and this is now impacting some of our CI builds, even with the solution reordering trick we tried before. I'll try to extract out a repro, though I have a funny feeling once it's in a more simple solution the issue might not repro and I'm not 100% sure what conditions contribute to it. If so is there a way we can more confidentially share binlogs so we don't share any proprietary/sensitive build information on the open internet?",
        "createdAt": "2022-11-28T22:41:44Z",
        "updatedAt": "2022-11-28T22:41:44Z",
        "author": {
          "login": "TheXenocide"
        }
      },
      {
        "body": "Yes! [Open a feedback ticket](https://docs.microsoft.com/visualstudio/ide/feedback-options), which offers uploads confidential to Microsoft.\r\n\r\nAfter it's created, that will open an internal bug. If you post the link here we can short-circuit the normal \"find the right team for this\" process.",
        "createdAt": "2022-11-28T22:48:38Z",
        "updatedAt": "2022-11-28T22:48:38Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I was trying to create a minimal repro together in spare time but got sidetracked by a production issue as soon as I got back from holiday so apologies on the delay for additional information. In the meantime our build server has started failing in a way that is blocking development/testing so I'm going to get some binlogs together ASAP because this has become a high priority blocker for us in the time since we last spoke, and then I'll get back to trying to get the repro together (which I'm mildly concerned may be difficult to isolate in a standalone solution).",
        "createdAt": "2022-12-05T16:19:48Z",
        "updatedAt": "2022-12-05T16:19:48Z",
        "author": {
          "login": "TheXenocide"
        }
      },
      {
        "body": "I had a few hiccups but was eventually able to get repro binlogs up in a [feedback ticket](https://developercommunity.visualstudio.com/t/MSBuild-does-not-honor-solution-Project/10222784). \r\n\r\nWe did find a workaround that was sufficient for our CI/CD environment (for now) which was a more aggressive attempt at our previous workaround: we manually sorted every project in the text of the sln file to match the build order, where previously we simply had to move the Client project below the Server project. \r\n\r\nAnother interesting detail I found was that the issue only happens locally when the `-m` (parallel build) switch is specified; single-threaded builds appear to work correctly (at least in the couple cases I tested). Unfortunately, the workaround still doesn't fix the issue in local builds using the `-m` switch, but it has at least unblocked us. I tried to include a good variety of binlogs both from our CI/CD environment as well as from a local development machine so that you can compare working and non-working scenarios.",
        "createdAt": "2022-12-06T19:18:17Z",
        "updatedAt": "2022-12-06T19:18:17Z",
        "author": {
          "login": "TheXenocide"
        }
      },
      {
        "body": "So I'm in the process of renovating our NSwag design for our custom project SDKs during our migration to .NET 6 and I was hoping for an update on this. In the absence of a shorter term solution for the solution-defined project dependencies, and because I'm hoping to make a more elegant solution that can be expressed in the project file XML, is there any guidance on how I might best create a soft `ProjectReference` that would enforce the desired dependency without need for solution-defined project dependencies and without adding any actual compile-time or nuspec generation dependencies between the client library and the Web API library? We already have our own wrapper functionality for reusable NSwag behavior (generation properties/namespaces, etc.), but I'm tentatively thinking about adding support for something like the following (from the client library csproj file):\r\n\r\n```xml\r\n<NSwagProjectReference Include=\"..\\WebAPI\\WebApi.csproj\">\r\n  <ConfigurationMetadata>Some other values</ConfigurationMetadata>\r\n</NSwagProjectReference>\r\n```\r\n\r\nwhich might be transformed by the project SDK into an actual `ProjectReference` that could be enforced by MSBuild; something like:\r\n\r\n```xml\r\n<ProjectReference Include=\"@(NSwagProjectReference)\">\r\n  <Private>false</Private>\r\n  <ReferenceOutputAssembly>false</ReferenceOutputAssembly>\r\n  <ExcludeAssets>all</ExcludeAssets>\r\n  <PrivateAssets>all</PrivateAssets>\r\n  <DisableTransitiveProjectReferences>true</DisableTransitiveProjectReferences>\r\n  <DisableTransitiveFrameworkReferences>true</DisableTransitiveFrameworkReferences>\r\n  <SkipGetTargetFrameworkProperties>true</SkipGetTargetFrameworkProperties>\r\n</ProjectReference>\r\n```\r\n\r\nI'm also hoping to use it to get known output names from the reference instead of hardcoding names and paths to the json file, by using the `MSBuild` task with `TargetOutputs` (in a similar way to how other dependency information is retrieved across project boundaries), but I'm mostly concerned about what metadata to use or not use in the `ProjectReference` (or some more appropriate way to define the dependency) in order to ensure the MSBuild command line honors it. The set of metadata specified above seemed to be disregarded, and subsets seemed to add references we didn't want to certain aspects of the client library's outputs.\r\n\r\nKeeping in mind the client library is targeting `netstandard2.0` and is only dependent on a generated json file from the Web API (soon to be targeting `net6`) project.",
        "createdAt": "2022-12-16T19:43:58Z",
        "updatedAt": "2022-12-16T19:43:58Z",
        "author": {
          "login": "TheXenocide"
        }
      },
      {
        "body": "That looks basically ok to me--have you tried it and are you seeing problems?",
        "createdAt": "2022-12-16T19:55:11Z",
        "updatedAt": "2022-12-16T19:55:11Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> have you tried it and are you seeing problems?\r\n\r\nYeah, with that complete set of metadata we tried that locally and saw no change in behavior for local parallel builds (the Client build ran before the Web API build, even with the project reference being specified). I didn't collect binlogs back when I experimented with that (a while ago, before I ever opened this ticket) but if anyone is looking at the binlogs from the feedback ticket, that was applied in our \"Common\" solution (the first post in this issue mentions that we added it to the client project; the names are slightly modified from the actual project names in the solution, but I think you can see which projects that would refer to). I didn't try every permutation, but the experience I had with the full set specified here was that it stopped honoring the ProjectReference with the full set, though with a subset of that metadata (I think maybe Private, ReferenceOutputAssembly, and SkipTargetFrameworkProperties?) it did honor the dependency, but it added a bunch of inaccurate dependency information to the client assembly/nuget package (like the client nuget package wanted consumers to reference ASP.NET Core server-side libraries that they definitely shouldn't need to reference, especially given our client library is targeting .NET Standard because there are still .NET Classic 4.8 consumers of it).\r\n\r\nI had a hard time creating a repro without extracting half of our custom SDK functionality around all this in the time I had allotted to solving our original issue and since we found a workaround for it, I no longer had capacity to focus on it much, but since I am now working on a new task we already had planned for our .NET 6 upgrade looking at rewriting some of this behavior, I'll try to do my initial development with this metadata set against some minimal test projects not using any of our other stuff to see if it works or repros before I migrate the logic back into our custom SDK (yay for a chance at prototyping that might offer a 2 birds one stone opportunity). I'll update with my findings.",
        "createdAt": "2022-12-16T20:25:09Z",
        "updatedAt": "2022-12-16T20:25:09Z",
        "author": {
          "login": "TheXenocide"
        }
      },
      {
        "body": "Looking at your CommonComponents binlog, I can see\r\n\r\n```xml\r\n  <Target Name=\"NSwagClientGenCore\"\r\n          AfterTargets=\"BeforeBuild\"\r\n```\r\n\r\nThat is _very_ early in the build process--specifically it's before handling `ProjectReference`s. Can you change that to `AfterTargets=\"ResolveProjectReferences\"`?\r\n\r\nMSBuild discovers references dynamically, and doesn't treat `@(ProjectReference)` specially (except in `-graph` mode). The `ResolveProjectReferences` target has an `<MSBuild` task call that builds the other projects--but the referencing project can _start_ building before the referenced one.",
        "createdAt": "2022-12-16T21:00:09Z",
        "updatedAt": "2022-12-16T21:00:09Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Ooh, okay, I'll totally give that a whirl on the next go around. Do you think that would be impacted in solutions relying on solution-defined project dependencies (as in not using this ProjectReference-based model I'm working toward)? Trying to determine if I should try it out on a local build in the pre-.NET 6 codebase to see if that solves the issues in the existing stuff (It seems a little more obvious to me, even from naming alone, how it might be implicated in the ProjectReference-oriented code).",
        "createdAt": "2022-12-16T23:13:07Z",
        "updatedAt": "2022-12-16T23:13:07Z",
        "author": {
          "login": "TheXenocide"
        }
      },
      {
        "body": "The same mechanism applies to the solution ordering, when MSBuild applies it. When VS applies it it works differently.\r\n\r\nSo I think it's worth trying the change in your existing codebase.",
        "createdAt": "2022-12-17T21:31:59Z",
        "updatedAt": "2022-12-17T21:31:59Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald after testing several scenarios against the existing codebase, that does appear to have solved the local console parallel build issues. Thanks so much! I guess I'm unclear on how Visual Studio behaves differently while using MSBuild under the hood, but given that works with the old solution-based project dependencies, I'm optimistic that it will also work with the new ProjectReference-based approach I'm working on. Thanks very kindly for the help!",
        "createdAt": "2022-12-21T00:39:44Z",
        "updatedAt": "2022-12-21T00:39:44Z",
        "author": {
          "login": "TheXenocide"
        }
      }
    ]
  }
}