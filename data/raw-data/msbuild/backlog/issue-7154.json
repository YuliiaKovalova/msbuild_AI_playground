{
  "number": 7154,
  "title": "NoWarn property is not set correct when using Turkish OS Language",
  "body": "### Issue Description\r\nWhen building the project [Mvc.Api.Analyzers.Test.csproj](https://github.com/dotnet/aspnetcore/blob/main/src/Mvc/Mvc.Api.Analyzers/test/Mvc.Api.Analyzers.Test.csproj) that contains a `NoWarn` property configured to `<NoWarn>$(NoWarn);IDE0161</NoWarn>` on a Windows machine (Turkish language) fails with the following error.\r\n\r\n`aspnetcore\\src\\Mvc\\Mvc.Api.Analyzers\\test\\TestFiles\\ActualApiResponseMetadataFactoryTest\\GetDefaultStatusCodeTest.cs(8,1): error IDE0161: Dosya kapsaml\u0131 namespace \u00f6\u011fesine d\u00f6n\u00fc\u015ft\u00fcr [aspnetcore\\src\\Mvc\\Mvc.Api.Analyzers\\test\\Mvc.Api.Analyzers.Test.csproj]`\r\n\r\n### Steps to Reproduce\r\n\r\n1. Open Command Prompt as administrator, create a new Repos folder under %userprofile% and navigate to it\r\n```cd %userprofile%\r\n   mkdir Repos\r\n   cd Repos\r\n   git clone --recursive https://github.com/dotnet/aspnetcore\r\n```\r\n2. Open Windows PowerShell, navigate to AspNetCore: `cd Repros/AspNetCore`\r\n3. On Windows PowerShell, Run: `Set-ExecutionPolicy RemoteSigned -Scope CurrentUser` , Type `Y`\r\n4. On Windows PowerShell, Run: `.\\restore.cmd`, then change into the `src/Mvc/Mvc.Api.Analyzers/test` directory and run `dotnet build`\r\n\r\n### Expected Behavior\r\n```\r\n\"C:\\Program Files\\Microsoft Visual Studio\\2022\\Preview\\MSBuild\\Current\\Bin\\Roslyn\\csc.exe\" \r\n/noconfig \r\n/unsafe- \r\n/checked-\r\n/nowarn:1701,1702,1705,NETSDK1138,CS8969,IDE0161,NU5105,RS0041,CA1416,1701,1702 \r\n/fullpaths /nostdlib+ /errorreport:prompt /warn:6 \r\n/define:TRACE;DEBUG;NET;NET7_0;NETCOREAPP;NET5_0_OR_GREATER;NET6_0_OR_GREATER;NET7_0_OR_GREATER;NETCOREAPP1_0_OR_GREATER;NETCOREAPP1_1_OR_GREATER;NETCOREAPP2_0_OR_GREATER;NETCOREAPP2_1_OR_GREATER;NETCOREAPP2_2_OR_GREATER;NETCOREAPP3_0_OR_GREATER;NETCOREAPP3_1_OR_GREATER /highentropyva+ \r\n[additional lines ommited]\r\n/warnaserror+:NU1605 /warnaserror-:CS1591,xUnit1004\r\n```\r\n\r\n### Actual Behavior\r\n```\r\n\"C:\\Program Files\\Microsoft Visual Studio\\2022\\Preview\\MSBuild\\Current\\Bin\\Roslyn\\csc.exe\" \r\n/noconfig \r\n/unsafe- \r\n/checked-\r\n/nowarn:1701,1702,1705,NETSDK1138,CS8969,\"IDE0161\",NU5105,RS0041,CA1416,1701,1702 \r\n/fullpaths /nostdlib+ /errorreport:prompt /warn:6 \r\n/define:TRACE;DEBUG;NET;NET7_0;NETCOREAPP;NET5_0_OR_GREATER;NET6_0_OR_GREATER;NET7_0_OR_GREATER;NETCOREAPP1_0_OR_GREATER;NETCOREAPP1_1_OR_GREATER;NETCOREAPP2_0_OR_GREATER;NETCOREAPP2_1_OR_GREATER;NETCOREAPP2_2_OR_GREATER;NETCOREAPP3_0_OR_GREATER;NETCOREAPP3_1_OR_GREATER /highentropyva+ \r\n[additional lines ommited]\r\n/warnaserror+:NU1605 /warnaserror-:CS1591,xUnit1004\r\n```\r\n\r\n### Versions & Configurations\r\nOS: Win10 x64 20H2 TRK\r\n\r\n### Attach a binlog\r\n[BinLogs.zip](https://github.com/dotnet/msbuild/files/7721758/BinLog.zip)\r\n",
  "state": "CLOSED",
  "createdAt": "2021-12-15T18:14:46Z",
  "updatedAt": "2024-02-21T14:10:38Z",
  "closedAt": "2022-03-28T20:18:52Z",
  "author": {
    "login": "brunolins16"
  },
  "labels": [
    "bug",
    "Area: Localization",
    "Partner request",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "Forgind"
      }
    ]
  },
  "milestone": {
    "title": "VS 17.2"
  },
  "comments": {
    "nodes": [
      {
        "body": "What a great bug report! Thanks for the detail\r\n\r\nI thought it might be a Roslyn bug but it is in fact in MSBuild. This code that decides if we should quote a part of a string is going wrong:\r\n\r\nhttps://github.com/dotnet/msbuild/blob/386a8308da295523efff3ed1abb2e2ee60d30dcc/src/Utilities/CommandLineBuilder.cs#L194-L204\r\n\r\nI suspect the Turkish `I \u0131 \u0130 i`.\r\n\r\nThis is exactly the situation described in [this Regex doc about using invariant culture comparison](https://docs.microsoft.com/dotnet/standard/base-types/regular-expression-options#comparison-using-the-invariant-culture) and I suspect that's the fix here.",
        "createdAt": "2021-12-15T18:36:32Z",
        "updatedAt": "2021-12-15T18:36:32Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald I think you are right about `I \u0131 \u0130 i` because I did a dummy test to set as `DE0161` and it behaves correctly.",
        "createdAt": "2021-12-15T18:38:53Z",
        "updatedAt": "2021-12-15T18:38:53Z",
        "author": {
          "login": "brunolins16"
        }
      },
      {
        "body": "Noticed this because we've been doing thinking about case insensitivity in regex recently. I think this is the only instance of the bug in MSBuild, but a perf note: the regex engine had/has some inefficiencies when using RegexOptions.IgnoreCase. In older versions, it makes no attempt to determine apriori that casing is irrelevant to the pattern. So even if my pattern is `\\d+` it will dutifully ToLower() every character in the input before checking that it matches `\\d`. Given that, adding RegexOptions.InvariantCulture if possible is an improvement, as char.ToLowerInvariant() is a little faster. Or, removing RegexOptions.IgnoreCase if it's not relevant is even better. For example, by inspection of `s_filenameLocationFromOrigin` regex we know that lower casing will not affect any match, so it needn't have RegexOptions.IgnoreCase.\r\n\r\nIn MSBuild I'm guessing the hottest regexes are the warning/error matchers -- which could probably be RegexOptions.InvariantCulture, since the text that matches `error` or `warning` is the same in all cultures. (In .NET 6, a-z except for i is [special cased](https://github.com/danmoseley/runtime/blob/2879e6ca886eb084335ccd0a579019fbe359628e/src/libraries/System.Text.RegularExpressions/src/System/Text/RegularExpressions/RegexCharClass.cs#L1358)). I'm not suggesting that's worth changing unless it actually produces meaningful perf improvements.\r\n\r\nIn .NET 7 we expect all this to be taken care of automatically, and will also change to change to consistently use the culture at construction time (if ignore case is applied) -- this is tracked by https://github.com/dotnet/runtime/issues/61048.\r\n\r\nBTW, if and when MSBuild builds against net7.0, you will likely want to switch over to the regex source generator for patterns that are statically constructed instead of compiling them at runtime.",
        "createdAt": "2021-12-15T23:41:25Z",
        "updatedAt": "2021-12-15T23:41:25Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "I'm not sure if it's the same issue or not, but I ran `build.cmd --noWarn:SYSLIB0011` and got:\r\n\r\n```\r\nMSBUILD : error MSB1025: MSBuild \u00e7al\u0131\u015ft\u0131r\u0131l\u0131rken bir i\u00e7 hata olu\u015ftu.\r\nMicrosoft.Build.Shared.InternalErrorException: MSB0001: Internal MSBuild Error: The switch name extracted from either the partially or completely unquoted arg should be the same.\r\n   konum: Microsoft.Build.Shared.ErrorUtilities.ThrowInternalError(String message, Exception innerException, Object[] args)\r\n   konum: Microsoft.Build.CommandLine.MSBuildApp.ExtractSwitchParameters(String commandLineArg, String unquotedCommandLineArg, Int32 doubleQuotesRemovedFromArg, String switchName, Int32 switchParameterIndicator)\r\n   konum: Microsoft.Build.CommandLine.MSBuildApp.GatherCommandLineSwitches(List`1 commandLineArgs, CommandLineSwitches commandLineSwitches)\r\n   konum: Microsoft.Build.CommandLine.MSBuildApp.GatherAllSwitches(String commandLine, CommandLineSwitches& switchesFromAutoResponseFile, CommandLineSwitches& switchesNotFromAutoResponseFile)\r\n   konum: Microsoft.Build.CommandLine.MSBuildApp.Execute(String commandLine)\r\n\r\n\u0130\u015flenmeyen \u00d6zel Durum: Microsoft.Build.Shared.InternalErrorException: MSB0001: Internal MSBuild Error: The switch name extracted from either the partially or completely unquoted arg should be the same.\r\n   konum: Microsoft.Build.Shared.ErrorUtilities.ThrowInternalError(String message, Exception innerException, Object[] args)\r\n   konum: Microsoft.Build.CommandLine.MSBuildApp.ExtractSwitchParameters(String commandLineArg, String unquotedCommandLineArg, Int32 doubleQuotesRemovedFromArg, String switchName, Int32 switchParameterIndicator)\r\n   konum: Microsoft.Build.CommandLine.MSBuildApp.GatherCommandLineSwitches(List`1 commandLineArgs, CommandLineSwitches commandLineSwitches)\r\n   konum: Microsoft.Build.CommandLine.MSBuildApp.GatherAllSwitches(String commandLine, CommandLineSwitches& switchesFromAutoResponseFile, CommandLineSwitches& switchesNotFromAutoResponseFile)\r\n   konum: Microsoft.Build.CommandLine.MSBuildApp.Execute(String commandLine)\r\n   konum: Microsoft.Build.CommandLine.MSBuildApp.Main()\r\nBuild failed with exit code -532462766. Check errors above.\r\n```",
        "createdAt": "2022-02-04T00:09:19Z",
        "updatedAt": "2022-02-04T00:09:19Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "I think that's the same bug. BTW, our shipping product is containing strings like this (`\"The switch name extracted from either the partially or completely unquoted arg should be the same.\"`) .. and that string has probably only been used once ever -- in this repro case. Have you considered removing all the InternalErrorException strings and replacing with codes (or just using line numbers). Seems like it could save a fair bit.",
        "createdAt": "2022-02-04T01:52:53Z",
        "updatedAt": "2022-02-04T01:52:53Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "I seem to get a passed build if I use a bootstrap build of current main but not if I use the msbuild from VS 17.0.5; not sure what the difference is.",
        "createdAt": "2022-02-23T01:06:24Z",
        "updatedAt": "2022-02-23T01:06:24Z",
        "author": {
          "login": "Forgind"
        }
      }
    ]
  }
}