{
  "number": 1289,
  "title": "DSL based generic project format with remotely acquirable plugins",
  "body": "TL;DR: __Gradle is good. Be like Gradle.__\r\n\r\nModern build tools are not just build tools, but they require complete project management tooling capability. This includes-\r\n\r\n- Project description\r\n- Build procedure\r\n- Test and other task running capabilities\r\n- Integration with package management tools (like nuget or npm)\r\n- Support plugins (and support for pulling plugins on-demand over Internet from some repository)\r\n- Versioning, deployment and continuous integration (Specialized build and task management)\r\n- Basic integration with version control tools (like querying current state)\r\n\r\nCurrently MSBuild has most of these capabilities. But those capabilities are obscured behind it's XML based file format IMHO. I do not see these as short term goals. But as a long term vision, I think MSBuild can look at other successful build tools like __Gradle__ and incorporate some of their good things. I shall try to describe a few such points comparing MSBuild with Gradle-\r\n\r\n- __DSL Based format:__ Most of us programmers use procedural techniques for programming. So, procedural languages always clicks for us. So, a procedural DSL will be a lot easier to our eyes than current declarative XML. Specially when we try to tweak the build process a bit, or add some little extra step, XML becomes an obstruction. But a DSL will be much easier. Many a times, current `.*proj` files are like opaque binary files to developers- no hand-editing, only edit through Visual studio dialog. Hand-editing a DSL will be trivial.  Ant and Maven was XML based and Gradle choose a DSL, which was good for them. With __Powershell__ going cross-platform, I feel DSL can be based on it. DSL from Cake project can be another option. But others may have different choices. And this can be discussed later.\r\n- __Generic project format and Plugins:__ I think MSBuild should become more generic and avoid coupling with other tools. There need not to have different project formats or `*.*proj` file extensions for different kind of projects. Even the full project file name can be generic and constant like `project.msbuild` or `project.build`. And plugins can be used to manage project types. Gradle uses `project.gradle` files and plugin specifies the project type. And, these plugins should reside in a repository in web with a qualified name and a specific version can be pulled by MSBuild over Internet on demand- just like Gradle. And the good thing is- multiple plugins can be applied to same project. So, different language files like C# and F# will be able to share same project. And MSBuild should not be tightly coupled with Nuget or even Visual Studio. I should easily be able to use MSBuild without any IDE, by just hand-editing project files and invoking commands from terminal. Visual studio will be just internally using MSBuild for its project management and provide a GUI for editing project file. Some more thoughts about project format in this [comment](#issuecomment-262322144).\r\n\r\nI know many of the things I am proposing are long shot. Some of these capabilities are currently managed by others tools like [Dotnet CLI](https://github.com/dotnet/cli) or [Common Project System](https://github.com/Microsoft/VSProjectSystem) of Visual studio. But this is what I feel the future of MSBuild should be like. And this may solve [many](https://github.com/Microsoft/msbuild/issues/613) [current](https://github.com/Microsoft/msbuild/issues/16) [dissatisfactions](https://github.com/Microsoft/msbuild/issues/1236) with MSBuild.\r\n\r\nWhat I am proposing may look like this `project.build` file (which replaces `ConsoleProject.csproj` file)-\r\n``` C#\r\nusing Microsoft.CSharp;\r\n\r\nPlugins.Apply(Microsoft.CSharp.ConsoleApplication, \"1.0.1\");\r\n\r\nCSharp{\r\n    TargetFramework : \"netstandard1.6\",\r\n    Compile.Include : \"**\\*.cs\",\r\n    Information{\r\n        ApplicationName : \"Console App\",\r\n        VersionName : \"1.0\",\r\n        Author : \"Mr. Awesome\"\r\n    }\r\n    BuildTypes {\r\n        Debug {\r\n            LogEnabled : true,\r\n            LogLevel : 3\r\n        },\r\n        Release {\r\n            LogEnabled : false,\r\n            Native : true\r\n        }\r\n    }\r\n}\r\n\r\nDependencies{\r\n    Project{\r\n        \"ExternalProject\"\r\n    },\r\n    Library{\r\n        \"ExternalLib\" : \"../ExternalLib.dll\"\r\n    },\r\n    Nuget{\r\n        \"Microsoft.NETCore.App\" : \"1.0.0\",\r\n        \"Microsoft.NET.SDK\" : \"1.0.0\"\r\n    },\r\n    Myget{},\r\n    NPM{}\r\n}\r\n\r\nTasks{\r\n    CleanBuild(){\r\n        if(BuildDirectory.Exists()){\r\n            Clean();\r\n        }\r\n        Build();\r\n    }\r\n}\r\n```\r\n\r\nAnother format using .net class can be found [here](#issuecomment-265740595).",
  "state": "CLOSED",
  "createdAt": "2016-11-01T10:54:26Z",
  "updatedAt": "2024-02-21T17:24:43Z",
  "closedAt": "2020-03-25T16:30:02Z",
  "author": {
    "login": "gulshan"
  },
  "labels": [
    "needs-design",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Solid post, @gulshan.  Thank you for your contribution to the community. \ud83d\udc4d \n",
        "createdAt": "2016-11-18T12:03:28Z",
        "updatedAt": "2016-11-18T12:03:28Z",
        "author": {
          "login": "Mike-E-angelo"
        }
      },
      {
        "body": "@gulshan Would love to see a sample of this DSL that you are suggesting. \r\n\r\nNot as in \"design me a DSL\" but more of a \"Here's how it could look like\".\r\n\r\nWould help gather support for your cause. \r\n\r\nThanks to @Mike-EEE for moving me from one issue to the other. \ud83d\ude09 ",
        "createdAt": "2016-11-22T13:26:18Z",
        "updatedAt": "2016-11-22T13:26:18Z",
        "author": {
          "login": "MaximRouiller"
        }
      },
      {
        "body": "Haha right, @MaximRouiller?  My baby has already grown a little long in the tooth for only being around 6 months, haha.  But, it's nice to capture the history, sentiment and dialogue, IMO.  Hopefully along with issues like this one it will lead to consensus, direction, and most importantly _action_ towards improving MSBuild.",
        "createdAt": "2016-11-22T13:51:31Z",
        "updatedAt": "2016-11-22T13:51:31Z",
        "author": {
          "login": "Mike-E-angelo"
        }
      },
      {
        "body": "@Mike-EEE \r\n\r\nMy belief is, it will end up like ASP.NET. It will get rewritten. \ud83d\ude09 \r\n\r\nThing is... you don't want to rewrite the build system while Xamarin has just been bought and you just rewrote ASP.NET. From scratch. Too many moving pieces and too many customers who will have a \"Taco Bell bathroom experience\" but with bricks. \r\n\r\nSo you change one piece at a time. First, ASP.NET. Once everything is relatively stable and you stop re-inventing the framework, then you can move to a bigger project. I already see investments being made to the project system with [dotnet/roslyn-project-system](https://github.com/dotnet/roslyn-project-system). \r\n\r\nNow, whether my prediction about an MSBUILD rewrite is to hold true or not... that's a WHOLE different story. May never happen. The only thing I know is that there were always one constant in our domain.\r\n\r\nChange.",
        "createdAt": "2016-11-22T14:02:20Z",
        "updatedAt": "2016-11-22T14:02:20Z",
        "author": {
          "login": "MaximRouiller"
        }
      },
      {
        "body": "@Mike-EEE Thanks for the support!\r\n@MaximRouiller The project file `project.build` can look something like-\r\n\r\n[ Example moved to [top post](#issue-186506848) to accumulate votes \ud83d\ude04 ]\r\n\r\nAnd I am not proposing to fully rewrite MSBuild with all its internals. I am just proposing a DSL frontend with some new features. Let's see what happens.",
        "createdAt": "2016-11-22T14:50:19Z",
        "updatedAt": "2016-11-22T16:05:44Z",
        "author": {
          "login": "gulshan"
        }
      },
      {
        "body": "@MaximRouiller I have a little more faith in this than you do, I suppose.  We are not asking for sweeping changes to the internals, but how _input_ is fed into those internals.  @gulshan you have inspired me.  Along with @jnm2's challenge in the other thread I am going try to assemble something that looks remotely close to what I am after here. \ud83d\udc4d ",
        "createdAt": "2016-11-22T15:46:55Z",
        "updatedAt": "2016-11-22T15:46:55Z",
        "author": {
          "login": "Mike-E-angelo"
        }
      },
      {
        "body": "@Mike-EEE Thread carefully. We may find ourselves with a 25th build system. \r\n\r\nSomething similar already exist with [Cake](http://www.cakebuild.net/docs/fundamentals/dependencies).",
        "createdAt": "2016-11-22T16:00:44Z",
        "updatedAt": "2016-11-22T16:00:44Z",
        "author": {
          "login": "MaximRouiller"
        }
      },
      {
        "body": "Yeah, but with MSBuild idioms and entities.  Like @gulshan says, let's see what happens. \ud83d\ude04 ",
        "createdAt": "2016-11-22T16:08:21Z",
        "updatedAt": "2016-11-22T16:08:21Z",
        "author": {
          "login": "Mike-E-angelo"
        }
      },
      {
        "body": "Hey actually guys, Cake is not like msbuild. Cake is build orchestration, exactly like the new TFS build definitions. Both Cake and TFS call into msbuild, or vstest, or NuGet publish, etc. Neither Cake nor TFS build actually call `csc` with `.cs` files or anything like that.\r\n\r\nhttp://www.cakebuild.net/dsl\r\n\r\n(Cake is frickin awesome though...)",
        "createdAt": "2016-11-22T16:25:00Z",
        "updatedAt": "2016-11-22T16:53:01Z",
        "author": {
          "login": "jnm2"
        }
      },
      {
        "body": "If you're writing a new build system, the most important factor to me is that you cleanly isolate the project definition from the build script. The project definition must _absolutely_ be treated as data and be readable and writable by tooling. The build script will then gather the information it needs through a project definition format adapter which reads the project definition. (You should have multiple pluggable format adapters so that the build system can gather the same information from an XML csproj or a project.json or your own custom format that you like. That way people can continue using Visual Studio csprojs which is an important capability for the new build system.) The build script itself could be a full DSL though.",
        "createdAt": "2016-11-22T16:38:11Z",
        "updatedAt": "2016-11-22T16:54:20Z",
        "author": {
          "login": "jnm2"
        }
      },
      {
        "body": "> You should have multiple pluggable format adapters so that the build system can gather the same information from an XML csproj or a project.json or your own custom format that you like...\r\n\r\nThat pretty much sums up my position on this as well.  The project file is simply an input _data_ file (which is described in POCOs, that way it can leverage tooling greatness) which is then used by the build _process_.\r\n\r\nIn my ideal world, the process file(s) are also comprised of serialized POCOs and can also be described in different formats as well.  Figuring out how to do this would involve some work, as there would have to be a registry of sorts to know all supported formats and to select the appropriate serializer to load it into memory.  But, for the sake of discussion we can keep it simple and say that it is simply XML.  Or simply JSON.  \r\n\r\nI lied.  Nothing is simple here. \ud83d\ude1b",
        "createdAt": "2016-11-22T17:09:03Z",
        "updatedAt": "2016-11-22T17:09:24Z",
        "author": {
          "login": "Mike-E-angelo"
        }
      },
      {
        "body": "Just to be clear... I know what you mean, but I would consider POCO an _implementation detail_ of the format adapter. If I was writing such an adapter, I would _not_ want to use POCOs because they would be slow and heap overhead. I'd prefer to do fast forward-only reading of the XML or JSON or other text, as or if the build system needs it, rather than construct a massive single universe of every possible setting in the linked project files.",
        "createdAt": "2016-11-22T17:15:27Z",
        "updatedAt": "2016-11-22T17:18:51Z",
        "author": {
          "login": "jnm2"
        }
      },
      {
        "body": "> If you're writing a new build system, the most important factor to me is that you cleanly isolate the project definition from the build script.\r\n\r\n@jnm2 Initially, I was also in that camp. But, this is what changed my mind. Generally there are a lot of types of projects supported by a build system like MSBUILD. So, it can be a C# asp.net app, a VB Windows Forms app, a F# Xamarin app or C++ server app, but will have different project properties. If we have separate project definition file, be the format JSON, XML or POCO, either you go with a generic and lenient schema, or you have multiple project types with strongly enforced schema. (Current MSBuild is probably worst of both worlds- multiple project formats- `.csproj`, `.fsproj`, `.vbproj` etc and yet all follow same generic structure and schema. Thus `ItemGroup` and `PropertyGroup` things cannot be removed and nobody is happy.) Consider some type of project needs some new properties/attributes. Then both of these approaches may not be so user-friendly.\r\n\r\nHere I am proposing not only a DSL but also a plugin based architecture. So, all the project types are actually plugins of MSBuild. And they will define their own format of project description. And DSL will be used to provide that description, with strongly-typed support. Plugins can easily update or even change their project format, which will be carried to the developers by errors or warnings in DSL. BTW, plugins are all versioned, so no worry of breaking projects if plugin version not updated. Multiple plugins can be used in same project. Using Typescript with asp.net will be just setting up plugins. This kind of flexibility is very hard(even if possible) with simple data formats.\r\n\r\nAnother thing is, most of the projects do not use custom build logic. So, even if build logic is allowed in DSL based format, very few people will use/see it. And one can always separate the custom build logic into a separate file and include that in the project file.\r\n\r\nAnd lastly, Gradle is using DSL very successfully for project description. You rarely hear or see any complain about the project format. So, as I have said, MSBuild can just be like Gradle. Oh, MSBuild also allows project description from build logic in same file!",
        "createdAt": "2016-11-22T18:21:58Z",
        "updatedAt": "2016-12-01T07:25:39Z",
        "author": {
          "login": "gulshan"
        }
      },
      {
        "body": "I would prefer something like the above, except idiomatic C# rather than something gradle-y. Better yet, why not just ask for a C# file (with a special name, i.e. `build.csc`) that implements a spec? It could even just support any old CLR language! This would allow a developer to be as flexible as needed.\r\n\r\nThis would also provide an avenue for easy backwards-compatibility with existing build systems like the existing MSBuild `csproj` files, which could ship with an `csproj` compatible implementation of the spec.",
        "createdAt": "2016-11-22T19:01:04Z",
        "updatedAt": "2016-11-22T21:15:33Z",
        "author": {
          "login": "davidvedvick"
        }
      },
      {
        "body": ">  I would not want to use POCOs because they would be slow and heap overhead.\r\n\r\nAh that's the thing, the XML and JSON are describing objects that the build process understands, correct?\r\n\r\nAlright, I took some time to provide a **_VERY_** rough sketch of what I am thinking of, and have posted that here: https://github.com/Microsoft/msbuild/issues/613#issuecomment-262339197\r\n\r\nPlease let me know if you have any questions.  Sorry for the cross-posting.  Now I'm confused more than usual. \ud83d\ude1b ",
        "createdAt": "2016-11-22T19:11:49Z",
        "updatedAt": "2016-11-22T19:25:53Z",
        "author": {
          "login": "Mike-E-angelo"
        }
      },
      {
        "body": "@Mike-EEE Making `model` the default namespace and removing unused namespaces will make the file cleaner I guess.",
        "createdAt": "2016-11-22T19:21:22Z",
        "updatedAt": "2016-11-22T19:21:22Z",
        "author": {
          "login": "gulshan"
        }
      },
      {
        "body": "Yes @gulshan, Xaml is chatty and verbose, and that is a valid criticism of the format.  There are new flavors emerging such as [OmniXaml](https://gitter.im/SuperJMN/OmniXAML) that are tackling that aspect.  However, what is important here is the features that are gleaned from this, which I hope the screenshot successfully captures.\r\n\r\nAgain, the idea here is that the content that you see in `Project.xaml` would also be described in a Project.json (or Project.xml or Project.ini) as well -- as well as being compliant in the format in which it is described.",
        "createdAt": "2016-11-22T19:28:18Z",
        "updatedAt": "2016-11-22T19:29:45Z",
        "author": {
          "login": "Mike-E-angelo"
        }
      },
      {
        "body": "I got a comment on this proposal on [Twitter](https://twitter.com/atheken/status/804643988611465216) saying-\r\n\r\n> I think we already have too many scripting languages for this. Another DSL that I edit infrequently is a no-go.\r\n\r\nAnd I that quite true- a language already known to user will be better than a new DSL. In fact, Gradle do not made a new DSL, they used Groovy and now Kotlin scripts. So, I thought, how about using C# Script in this case. So, my DSL example in the top post became this in C# Script `project.build.csx`-\r\n\r\n``` C#\r\n#r \"nuget: Microsoft.CSharp/1.0.1\"\r\n\r\nusing Microsoft.Build;\r\nusing Microsoft.CSharp;\r\n\r\nProject = new CSharp.ConsoleApplication{\r\n    TargetFramework = TargetFrameworks.Netstandard16,\r\n    FileIncludePattern = \"**\\*.cs\",\r\n    ProjectInformation = new Information{\r\n        ApplicationName = \"My Console App\",\r\n        VersionName = \"1.0\",\r\n        Author = \"Mr. Awesome\"\r\n    },\r\n    BuildTypes = new List<BuildType>{\r\n        new BuildType{\r\n            Name = BuildType.Debug,\r\n            LogEnabled = true,\r\n            LogLevel = Log.Debug\r\n        },\r\n        new BuildType{\r\n            Name = BuildType.Release,\r\n            LogEnabled = false,\r\n            Native = true\r\n        }\r\n    },\r\n    Dependencies = new List<Dependency>{\r\n        new ProjectDependency{ Name = \"ExternalProject\", Path = \"../ExternalProject\" },\r\n        new AssemblyDependency{ Name = \"ExternalLib\", Path = \"../ExternalLib.dll\" },\r\n        new NugetDependency{ Name = \"Microsoft.NETCore.App\", Version = \"1.0.0\" },\r\n        new NugetDependency{ Name = \"Microsoft.NET.SDK\", Version = \"1.0.0\" },\r\n        new NugetDependency{\r\n            Name = \"Microsoft.NET.Tools-pre\", Version = \"1.0.0\",\r\n            SourcePath=\"https://www.myget.org/F/Microsoft.NET.Tools-pre\"     // For Myget\r\n        }\r\n        //new NPMDependency{}\r\n    }\r\n};\r\n\r\nTask<Artifact> async CleanBuild()\r\n{\r\n    if (BuildDirectory.Exists())\r\n    {\r\n        await Clean();\r\n    }\r\n    return Build();\r\n}\r\n```\r\n\r\nThe pros in this case is-\r\n- This is just regular C#, no need to learn a new language. The intellisense and other tooling is there to help.\r\n- As MsBuild itself is build with C#, there will be very fluid connection between the tool and the script.\r\n- No separate repository is needed for plugins, Nuget can be used in this case. I am using a [planned C# script feature](https://github.com/dotnet/roslyn/issues/5654) to load plugin from Nuget.\r\n- If someone wants, they can use other .net scripting like F# script with a `project.build.fsx` file. After all, it's .net API, can be used by any .net language.\r\n- It's kind of similar with the POCO based project format suggested in #613 , but come with APIs also, which is more straight forward I guess.",
        "createdAt": "2016-12-05T10:38:14Z",
        "updatedAt": "2016-12-06T13:42:28Z",
        "author": {
          "login": "gulshan"
        }
      },
      {
        "body": "Yessss.... you got it, @gulshan.  This is why POCO is the best-o.  Ha ha.  Once you are using plain ol' CLR objects, you can do anything with them, which then means:\r\n\r\n- You can _serialize_ them in any format in which you have a supporting serializer. Which THEN means\r\n- You can design those objects in a _designer_ that is built for that format. Which THEN means\r\n- _Cheaper development and maintenance costs for your solutions_.\r\n\r\nLower [TCO ](https://en.wikipedia.org/wiki/Total_cost_of_ownership) is the way to go, yo. \ud83d\ude1b \r\n\r\n> but more straight forward I guess.\r\n\r\nYeah, that issue has unfortunately been butchered by conversation and misunderstandings. I've actually been working to flesh out the POC above that demonstrates more of what we're after here.  I will try to incorporate more of your modelling efforts. \ud83d\udc4d ",
        "createdAt": "2016-12-05T10:45:50Z",
        "updatedAt": "2016-12-05T10:47:51Z",
        "author": {
          "login": "Mike-E-angelo"
        }
      },
      {
        "body": "@gulshan My only problem with this is how does the NuGet package manager work? How do plugins like ReSharper add or remove references automatically? And how do PowerShell scripts work that are intended to have the same effect on each project, like installing NuGet packages or adding files to the compilation?\r\n\r\nIn every case the changes would not be persisted without editing the script you wrote, which could be as hard as solving the halting problem.",
        "createdAt": "2016-12-05T12:54:47Z",
        "updatedAt": "2016-12-05T12:55:45Z",
        "author": {
          "login": "jnm2"
        }
      },
      {
        "body": "@jnm2 Again borrowing from Gradle. Yes, other tools do have to edit the script to persist changes. For them, there has to be a tooling API, like Gradle has [one](https://docs.gradle.org/current/userguide/embedding.html).",
        "createdAt": "2016-12-05T13:12:31Z",
        "updatedAt": "2016-12-05T13:12:31Z",
        "author": {
          "login": "gulshan"
        }
      },
      {
        "body": "Looks like #16 had some discussion about scripting and to use C# script. It also seems, Microsoft is(was?) cooking something regarding the build system in private-\r\n\r\n>We don\u2019t have anything to announce right now, but you might be interested in [some](https://twitter.com/xjoeduffyx/status/686785616030240768) [things](http://research.microsoft.com/en-us/projects/tse/internships.aspx#ID15) that have been posted externally.",
        "createdAt": "2016-12-05T13:23:18Z",
        "updatedAt": "2016-12-05T13:23:18Z",
        "author": {
          "login": "gulshan"
        }
      },
      {
        "body": "> This API allows you to execute and monitor builds and to query Gradle about the details of a build.\r\n\r\n@gulshan I read the whole page and see nothing about modifying the script, only about executing and monitoring and querying.\r\n\r\nI'm not sure what their approach would be, but you can't get around the halting problem without severely limiting the freedom of the language.",
        "createdAt": "2016-12-05T13:27:49Z",
        "updatedAt": "2016-12-05T13:28:39Z",
        "author": {
          "login": "jnm2"
        }
      },
      {
        "body": "@jnm2 Actually, as I have used, IDE do change the script, if I change something from GUI. May be some custom API is in use.\r\n\r\nAfter some searching it seems Gradle do have the possibility of Halting problem. Some links about it-\r\n- [http://wiki.apidesign.org/wiki/Gradle](http://wiki.apidesign.org/wiki/Gradle)\r\n- [http://delivervalue.blogspot.com/2015/03/so-what-about-this-halting-problem-in.html](http://delivervalue.blogspot.com/2015/03/so-what-about-this-halting-problem-in.html)\r\n- [http://blog.cacoethes.co.uk/gradle/comments-on-recent-gradle-criticisms](http://blog.cacoethes.co.uk/gradle/comments-on-recent-gradle-criticisms)\r\n\r\nAnd it seems, Gradle went the way of using existing language instead of building a new restricted one.\r\n\r\nAs mentioned in the first link, limiting the language from indefinite looping is the solution. Can that be done using Roslyn analyzer?",
        "createdAt": "2016-12-05T14:33:32Z",
        "updatedAt": "2016-12-05T14:33:32Z",
        "author": {
          "login": "gulshan"
        }
      },
      {
        "body": "> As mentioned in the first link, limiting the language from indefinite looping is the solution. Can that be done using Roslyn analyzer?\r\n\r\nNot without solving the halting problem. :D",
        "createdAt": "2016-12-05T15:26:49Z",
        "updatedAt": "2016-12-05T15:27:35Z",
        "author": {
          "login": "jnm2"
        }
      },
      {
        "body": "To be fair, you can warn if you encounter `for`, `while`, `goto` or recursion (or delegate invocation, any could lead to recursion) but you can't tell whether it's dangerous or not.\r\n\r\nTo be even fairer the halting problem isn't the immediate problem, though it could become part of it. The immediate problem is along the lines of, how does a tool add references if I'm generating the references list using linq off some JSON.NET object I read in from another whole file?\r\n\r\nIt's the same problem any time you move from a declarative format to a scripting format.",
        "createdAt": "2016-12-05T15:29:41Z",
        "updatedAt": "2016-12-05T15:32:28Z",
        "author": {
          "login": "jnm2"
        }
      },
      {
        "body": "I would rather make these constructs(recursion, `goto`, `while` and `for`) outright illegal to prevent halting problem, by raising compilation errors. `foreach` will be the only looping construct then. If possible, the `IEnumerable` (on which `foreach` is looping) has to be immutable inside `foreach` block, using Roslyn.\r\n\r\nAnd I fail to see the problem with adding reference within a script. Is it impossible or source of other problems like halting problem? If it were impossible, Gradle could not have done that.",
        "createdAt": "2016-12-06T08:02:48Z",
        "updatedAt": "2016-12-06T08:02:48Z",
        "author": {
          "login": "gulshan"
        }
      },
      {
        "body": "Well, here's what I'm thinking. How does NuGet package manager or command line deal with installing a new package into this?\r\n\r\n```c#\r\nProject = new CSharp.ConsoleApplication\r\n{\r\n    Dependencies = ReadDependencyFile(\"customformat\")\r\n};\r\n\r\nIReadOnlyCollection<Dependency> ReadDependencyFile(string path)\r\n{\r\n    using (var file = File.OpenText(path))\r\n        return new JsonSerializer().Deserialize<IReadOnlyCollection<Dependency>>(file);\r\n}\r\n```",
        "createdAt": "2016-12-06T13:14:12Z",
        "updatedAt": "2016-12-06T13:14:45Z",
        "author": {
          "login": "jnm2"
        }
      },
      {
        "body": "I think, tools should be working with convention. In this case the convention is- defining the dependencies within actual project file. There can even be multiple conventions. Then a tool has to build support for each of the conventions separately. So, keeping the dependencies in a separate file can be another convention, which has to be supported by tools separately. But if user goes out of convention, then s/he cannot expect support from tooling and has to assume responsibility for that.\r\n\r\nFor example, now MSBuild is introducing new features in the project file/format. So, other tools like Resharper has to build support for them. There is no automatic support.",
        "createdAt": "2016-12-06T14:06:15Z",
        "updatedAt": "2016-12-06T14:06:15Z",
        "author": {
          "login": "gulshan"
        }
      },
      {
        "body": "#1392 , #1436 , #1439 and dotnet/sdk#436 all are discussing SDKs and other build time tools and how they can plug into MSBuild. These SDKs and tools are similar to my proposed plugins. Just there shuold be a lot more scope of programmability for them.",
        "createdAt": "2016-12-07T13:57:16Z",
        "updatedAt": "2016-12-07T13:57:16Z",
        "author": {
          "login": "gulshan"
        }
      },
      {
        "body": "A very nice clean suggestion by @galich\r\n\r\nhttps://gist.github.com/danfma/c45087b2464cfb10e4f9935921f1acd7#gistcomment-1907390\r\n\r\n```c#\r\nProject\r\n    .UseCSharp(6)\r\n    .WithPackage(\"Microsoft.NETCore.App\", \"1.0.0\")\r\n    .WithPackage(\"Microsoft.NET.SDK\", \"1.0.0\")\r\n    .WithFramework(\"netcoreapp1.0\", dependencies: framework => framework.AddSomething())\r\n    .Compile(\"**/*.cs\")\r\n    .OutputExe();\r\n```",
        "createdAt": "2016-12-08T08:53:12Z",
        "updatedAt": "2016-12-08T08:54:29Z",
        "author": {
          "login": "laurencee"
        }
      },
      {
        "body": "Following different discussions, I am starting to envision the high level architecture of my proposal-\r\n\r\n- MSBuild should supply an interface (or abstract class) like `IProject` and extension class(es) based on the interface supplying various functionality.\r\n- Among the public APIs, an attribute like `[MSBuildTask]` along with a special signature will be used to select methods, which will be available as \"MSBuild Tasks\" and can be invoked from command line or other tools.\r\n- There will be plugins to MSBuild. Plugins are regular .net libraries, which can provide many things on top of MSBuild supplied API-\r\n    - Implement the `IProject` for a certain type of project like `CSharpProject` or `FSharpProject`.\r\n    - There can be child project inheriting other projects defined by other (or same) plugins like `FSharpLibrary` or `ASPNETWebApp`. That means, a plugin can depend on other plugins.\r\n    - Add extension classes/methods for `IProject` and implementation.\r\n    - And any other crazy stuff you can think of.\r\n- Sorry, I think some crazy stuffs should be disallowed in plugins to prevent unpleasant outcomes like indefinite looping (aka the halting problem). The restrictions will be applied by roslyn analyzer. One such restriction is no recursion, `goto`, `while` loops and `for` loops are allowed. Only `foreach` over a read-only/freezed collection will be allowed.\r\n- The main MSBuild has to be installed as an app/tool. But plugins will be acquired using Nuget. That will facilitate version and dependency management.\r\n- Plugins can be acquired on project basis. But there should be aggressive caching in use to avoid fetching same version of some plugin multiple times.\r\n- I prefer plugins to be hosted in a separate repository other than nuget.com, so that all the plugins will be rigorously tested, manually reviewed by the a responsible team as well as rated by users.\r\n- The end user or developer will be using a regular .net class file implementing the `IProject` interface to define/describe a project. But commonly it will be inheriting a project class supplied by a plugin. A `partial` class definition scheme can be used along with XAML files in this case like being used in WPF. (Hey @Mike-EEE )\r\n- The project file will refer to the plugins it needs using C# script nuget package reference syntax mentioned here- dotnet/roslyn#5654.\r\n- The project class will define/describe itself in the public default(parameter-less) constructor. So, a project/plugin can provide a constructor, which actually build the project reading from a xml, json or any other type of file. (But there is a [concern for external tools](#issuecomment-265146567) here.)\r\n- End developer will also be able to define MSBuild tasks, matching the attribute and signature already mentioned.\r\n- Other abilities and restrictions of plugins would also be applied to project class files using roslyn analyzer. \r\n- There will be a MSBuild tooling API, which will enable the external tools to read (and edit if necessary) the project class file. Visual Studio will just be one such tool.\r\n\r\nA slightly changed version of the project class file according to this architecture-\r\n\r\n``` C#\r\n#r \"nuget: Microsoft.CSharp/1.0.1\"\r\n\r\nusing Microsoft.Build;\r\nusing Microsoft.CSharp;\r\n\r\npublic class MyConsoleApp : CSharp.ConsoleApplication\r\n{\r\n    public MyConsoleApp()\r\n    {\r\n        TargetFramework = TargetFrameworks.Netstandard16;\r\n        FileIncludePattern = @\"**\\*.cs\";\r\n        ProjectInformation = new Information{\r\n            ApplicationName = \"My Console App\",\r\n            VersionName = \"1.0\",\r\n            Author = \"Mr. Awesome\"\r\n        };\r\n        BuildTypes[BuildType.Debug] = new BuildType{ LogEnabled = true, LogLevel = Log.Debug };\r\n        BuildTypes[BuildType.Release] = new BuildType{  LogEnabled = false, IsNative = true };\r\n\r\n        Dependencies.AddRange(new List<Dependency>{\r\n            new ProjectDependency{ Name = \"ExternalProject\", Path = \"../ExternalProject\" },\r\n            new AssemblyDependency{ Name = \"ExternalLib\", Path = \"../ExternalLib.dll\" },\r\n            new NugetDependency{ Name = \"Microsoft.NETCore.App\", Version = \"1.0.0\" },\r\n            new NugetDependency{ Name = \"Microsoft.NET.SDK\", Version = \"1.0.0\" },\r\n            new NugetDependency{     // For Myget\r\n                Name = \"Microsoft.NET.Tools-pre\", Version = \"1.0.0\",\r\n                SourcePath=\"https://www.myget.org/F/Microsoft.NET.Tools-pre\"\r\n            }\r\n            //new NPMDependency{}\r\n        });\r\n    }\r\n\r\n    [MSBuildTask]\r\n    public async Task<Artifact> CleanBuild()\r\n    {\r\n        if (BuildDirectory.Exists())\r\n        {\r\n            await Clean();\r\n        }\r\n        return Build();\r\n    }\r\n}\r\n```\r\nAny thoughts?",
        "createdAt": "2016-12-08T13:34:22Z",
        "updatedAt": "2016-12-14T11:27:37Z",
        "author": {
          "login": "gulshan"
        }
      },
      {
        "body": "Add to recursion prevention that you can't invoke a delegate. As a corollary, you also can't use LINQ.\r\n\r\nI think that a better idea is to time out after a second (by default) if the code hasn't finished running.",
        "createdAt": "2016-12-08T16:15:07Z",
        "updatedAt": "2016-12-08T16:16:52Z",
        "author": {
          "login": "jnm2"
        }
      },
      {
        "body": "Why is it up to the build system to prevent halting? Developers should be\r\nallowed to break their build this way if they want to IMO. It should also\r\nbe up to them to not break it, if that's what they want.\r\n\r\nOn Thu, Dec 8, 2016 at 10:16 AM, Joseph Musser <notifications@github.com>\r\nwrote:\r\n\r\n> I think that a better idea is to time out after a second (by default) if\r\n> the code hasn't finished running.\r\n>\r\n> \u2014\r\n> You are receiving this because you commented.\r\n> Reply to this email directly, view it on GitHub\r\n> <https://github.com/Microsoft/msbuild/issues/1289#issuecomment-265781187>,\r\n> or mute the thread\r\n> <https://github.com/notifications/unsubscribe-auth/AA2j38HFr0XUok6CVDbmQ2ldVo8qYWbyks5rGC11gaJpZM4Kl-Za>\r\n> .\r\n>\r\n",
        "createdAt": "2016-12-08T16:22:37Z",
        "updatedAt": "2016-12-08T16:23:26Z",
        "author": {
          "login": "davidvedvick"
        }
      },
      {
        "body": "The minimal project file according to https://github.com/Microsoft/msbuild/issues/1289#issuecomment-265740595 -\r\n```C#\r\n#r \"nuget: Microsoft.Build.CSharp/1.1.0\"\r\n\r\nusing Microsoft.Build;\r\n\r\npublic class MyConsoleApp : CSharp.ConsoleApplication\r\n{\r\n    public MyConsoleApp()\r\n    {\r\n        TargetFramework = TargetFrameworks.Netstandard16;\r\n        FileIncludePattern = @\"**\\*.cs\";\r\n    }\r\n}\r\n```",
        "createdAt": "2016-12-09T05:43:37Z",
        "updatedAt": "2016-12-09T10:54:17Z",
        "author": {
          "login": "gulshan"
        }
      },
      {
        "body": "@gulshan I'd think that file include pattern would be a good safe default value (considering you declared it as a CSharp.ConsoleApplication) so you probably shouldn't even need to specify it.",
        "createdAt": "2016-12-09T10:25:13Z",
        "updatedAt": "2016-12-09T10:25:13Z",
        "author": {
          "login": "laurencee"
        }
      },
      {
        "body": "Do I hear a ONE LINE PROJECT??? :)",
        "createdAt": "2016-12-09T10:36:22Z",
        "updatedAt": "2016-12-09T10:36:22Z",
        "author": {
          "login": "Mike-E-angelo"
        }
      },
      {
        "body": "@laurencee @Mike-EEE Going all default in minimal project? Sounds good to me. \ud83d\ude04 \r\n```C#\r\n#r \"nuget: Microsoft.Build.CSharp/1.1.0\"\r\n\r\npublic class MyConsoleApp : Microsoft.Build.CSharp.ConsoleApplication {}\r\n```",
        "createdAt": "2016-12-09T10:53:30Z",
        "updatedAt": "2016-12-09T10:53:30Z",
        "author": {
          "login": "gulshan"
        }
      },
      {
        "body": "As long as **minimalistic build tool compiles and runs C# app that performs actual build** - I'm ready to grow 3rd hand to say \ud83d\udc4d !\r\n\r\n@gulshan version is a good one and can be built on top of minimalistic build tool. As well as many others, people tend to have different opinions and ideas are changing over time. Look at ORM, DI or ASP.NET - some prefer attributed syntax, some prefer fluent, some load models from config files. Keep the door open for alternative ideas.",
        "createdAt": "2016-12-09T11:12:46Z",
        "updatedAt": "2016-12-09T11:12:46Z",
        "author": {
          "login": "galich"
        }
      },
      {
        "body": "@galich As this is just .net code, one can make a plugin to inherit or extend a project type and provide all sorts of things. All the doors are wide open!",
        "createdAt": "2016-12-09T11:25:37Z",
        "updatedAt": "2016-12-09T11:25:37Z",
        "author": {
          "login": "gulshan"
        }
      },
      {
        "body": "Some more description of upcoming SDKs is provided in #1493 . An programmatically implementable .net interface `ISdkResolver` will be used for integration with other tools like Visual Studio, VS Code, Monodevelop, plain CLI. Good to know.",
        "createdAt": "2016-12-19T18:02:00Z",
        "updatedAt": "2016-12-19T18:02:00Z",
        "author": {
          "login": "gulshan"
        }
      },
      {
        "body": "Team triage: We don't plan language overhauls in the foreseeable future.",
        "createdAt": "2020-03-25T16:30:02Z",
        "updatedAt": "2020-03-25T16:30:02Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}