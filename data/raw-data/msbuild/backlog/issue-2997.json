{
  "number": 2997,
  "title": "Creating a Microsoft.Build.Evaluation.Project with an SDK fails with an \"Internal MSBuild Error\"",
  "body": "Microsoft Visual Studio Enterprise 2017 Int Preview\r\nVersion 15.6.0 Preview 5.0 [27411.0.d15.6]\r\n\r\n1. Run the following:\r\n\r\n``` C#\r\n\r\n           var projectRootElement = @\"\r\n<Project Sdk=\"\"Microsoft.NET.Sdk\"\">\r\n\r\n</Project>\"\r\n\r\n            var stringReader = new System.IO.StringReader(projectRootElement);\r\n            var xmlReader = new XmlTextReader(stringReader);\r\n            var root = ProjectRootElement.Create(xmlReader);\r\n            var project = new Project(root);\r\n```\r\n\r\n```\r\nResult StackTrace:\t\r\nat Microsoft.Build.Shared.ErrorUtilities.ThrowInternalError(String message, Object[] args)\r\n   at Microsoft.Build.Shared.ErrorUtilities.VerifyThrow(Boolean condition, String unformattedMessage, Object arg0)\r\n   at Microsoft.Build.Shared.AssemblyResources.GetStringFromEngineResources(String name)\r\n   at Microsoft.Build.Shared.AssemblyResources.GetString(String name)\r\n   at Microsoft.Build.BackEnd.Logging.LoggingService.LogWarningFromText(BuildEventContext buildEventContext, String subcategoryResourceName, String warningCode, String helpKeyword, BuildEventFileInfo file, String message)\r\n   at Microsoft.Build.BackEnd.Logging.LoggingService.LogWarning(BuildEventContext buildEventContext, String subcategoryResourceName, BuildEventFileInfo file, String messageResourceName, Object[] messageArgs)\r\n   at Microsoft.Build.BackEnd.SdkResolverLoader.LoadResolvers(LoggingContext loggingContext, ElementLocation location)\r\n   at Microsoft.Build.BackEnd.SdkResolution.Initialize(LoggingContext loggingContext, ElementLocation location)\r\n   at Microsoft.Build.BackEnd.SdkResolution.GetSdkPath(SdkReference sdk, LoggingContext loggingContext, ElementLocation sdkReferenceLocation, String solutionPath, String projectPath)\r\n   at Microsoft.Build.Evaluation.Evaluator`4.ExpandAndLoadImportsFromUnescapedImportExpressionConditioned(String directoryOfImportingFile, ProjectImportElement importElement, List`1& projects, Boolean throwOnFileNotExistsError)\r\n   at Microsoft.Build.Evaluation.Evaluator`4.ExpandAndLoadImports(String directoryOfImportingFile, ProjectImportElement importElement)\r\n   at Microsoft.Build.Evaluation.Evaluator`4.EvaluateImportElement(String directoryOfImportingFile, ProjectImportElement importElement)\r\n   at Microsoft.Build.Evaluation.Evaluator`4.PerformDepthFirstPass(ProjectRootElement currentProjectOrImport)\r\n   at Microsoft.Build.Evaluation.Evaluator`4.Evaluate(ILoggingService loggingService, BuildEventContext buildEventContext)\r\n   at Microsoft.Build.Evaluation.Evaluator`4.Evaluate(IEvaluatorData`4 data, ProjectRootElement root, ProjectLoadSettings loadSettings, Int32 maxNodeCount, PropertyDictionary`1 environmentProperties, ILoggingService loggingService, IItemFactory`2 itemFactory, IToolsetProvider toolsetProvider, ProjectRootElementCache projectRootElementCache, BuildEventContext buildEventContext, ProjectInstance projectInstanceIfAnyForDebuggerOnly, SdkResolution sdkResolution)\r\n   at Microsoft.Build.Evaluation.Project.Reevaluate(ILoggingService loggingServiceForEvaluation, ProjectLoadSettings loadSettings)\r\n   at Microsoft.Build.Evaluation.Project.ReevaluateIfNecessary(ILoggingService loggingServiceForEvaluation, ProjectLoadSettings loadSettings)\r\n   at Microsoft.Build.Evaluation.Project.Initialize(IDictionary`2 globalProperties, String toolsVersion, String subToolsetVersion, ProjectLoadSettings loadSettings)\r\n   at Microsoft.Build.Evaluation.Project..ctor(ProjectRootElement xml, IDictionary`2 globalProperties, String toolsVersion, String subToolsetVersion, ProjectCollection projectCollection, ProjectLoadSettings loadSettings)\r\n   at Microsoft.Build.Evaluation.Project..ctor(ProjectRootElement xml)\r\n   at Microsoft.VisualStudio.ProjectSystem.VS.Input.Commands.Ordering.OrderingHelperTests.MoveDownFolder_ContainsNestedFolder_IsSuccessful()\r\nResult Message:\tMicrosoft.Build.Shared.InternalErrorException : MSB0001: Internal MSBuild Error: Missing resource ''\r\n```\r\n\r\nThis is failing all our tests that use MSBuild.",
  "state": "CLOSED",
  "createdAt": "2018-02-15T02:25:54Z",
  "updatedAt": "2024-02-21T17:14:28Z",
  "closedAt": "2018-03-08T10:31:52Z",
  "author": {
    "login": "davkean"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "@jeffkl Was there any changes around this?",
        "createdAt": "2018-02-15T02:27:33Z",
        "updatedAt": "2018-02-15T02:27:33Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "> Was there any changes around this?\r\n\r\nI sort of rewrote the whole thing in 15.6...\r\n\r\nIt looks like from the stack trace that MSBuild is trying to log a warning from an embedded resource string but the resource was not found.  What is the layout of your assemblies?  Do you have `en\\Microsoft.Build.resources.dll`?\r\n\r\nI'll also see if I can repro the problem.",
        "createdAt": "2018-02-15T15:58:14Z",
        "updatedAt": "2018-02-15T15:58:14Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "Hmm another thing is the stack trace doesn't make sense.  The `Microsoft.Build.BackEnd.SdkResolution` class does not exist anymore.  Are you sure your `Microsoft.Build.dll` is 15.6?\r\n\r\nThis is the only `LogWarning` call in the now deleted class:\r\n\r\nhttps://github.com/Microsoft/msbuild/blob/d026eba43c429802f14ad4bfe57b18e56d2519c7/src/Build/BackEnd/Components/SdkResolution/SdkResolverLoader.cs#L49\r\n\r\nMy commit on Jan 8 to improve SDK resolution https://github.com/Microsoft/msbuild/commit/03d1435c95e6a85fbf949f94958e743bc44c4186",
        "createdAt": "2018-02-15T16:05:39Z",
        "updatedAt": "2018-02-15T16:05:39Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "I am using `15.1.548` and have started seeing this since updating my VS to 15.6. Not sure if thats a coincidence\r\n\r\nOutput:\r\n\r\n> Message: Microsoft.Build.Shared.InternalErrorException : MSB0001: Internal MSBuild Error: Missing resource ''\r\n\r\n> Test Name:\tDnnVsProjectSystem.BuildTools.Tests.ManifestBuildTests.Replaces_Tokens_In_Manifest\r\nTest FullName:\tDnnVsProjectSystem.BuildTools.Tests.ManifestBuildTests.Replaces_Tokens_In_Manifest\r\nTest Source:\tE:\\Repos\\DnnVsProjectSystem\\src\\DnnVsProjectSystem.BuildTools.Tests\\ManifestBuildTests.cs : line 88\r\nTest Outcome:\tFailed\r\nTest Duration:\t0:00:01.462\r\n\r\nResult StackTrace:\t\r\n> at Microsoft.Build.Shared.ErrorUtilities.ThrowInternalError(String message, Object[] args)\r\n   at Microsoft.Build.Shared.ErrorUtilities.VerifyThrow(Boolean condition, String unformattedMessage, Object arg0)\r\n   at Microsoft.Build.Shared.AssemblyResources.GetStringFromEngineResources(String name)\r\n   at Microsoft.Build.Shared.AssemblyResources.GetString(String name)\r\n   at Microsoft.Build.BackEnd.Logging.LoggingService.LogWarningFromText(BuildEventContext buildEventContext, String subcategoryResourceName, String warningCode, String helpKeyword, BuildEventFileInfo file, String message)\r\n   at Microsoft.Build.BackEnd.Logging.LoggingService.LogWarning(BuildEventContext buildEventContext, String subcategoryResourceName, BuildEventFileInfo file, String messageResourceName, Object[] messageArgs)\r\n   at Microsoft.Build.BackEnd.SdkResolverLoader.LoadResolvers(LoggingContext loggingContext, ElementLocation location)\r\n   at Microsoft.Build.BackEnd.SdkResolution.Initialize(LoggingContext loggingContext, ElementLocation location)\r\n   at Microsoft.Build.BackEnd.SdkResolution.GetSdkPath(SdkReference sdk, LoggingContext loggingContext, ElementLocation sdkReferenceLocation, String solutionPath, String projectPath)\r\n   at Microsoft.Build.Evaluation.Evaluator`4.ExpandAndLoadImportsFromUnescapedImportExpressionConditioned(String directoryOfImportingFile, ProjectImportElement importElement, List`1& projects, Boolean throwOnFileNotExistsError)\r\n   at Microsoft.Build.Evaluation.Evaluator`4.ExpandAndLoadImports(String directoryOfImportingFile, ProjectImportElement importElement)\r\n   at Microsoft.Build.Evaluation.Evaluator`4.EvaluateImportElement(String directoryOfImportingFile, ProjectImportElement importElement)\r\n   at Microsoft.Build.Evaluation.Evaluator`4.PerformDepthFirstPass(ProjectRootElement currentProjectOrImport)\r\n   at Microsoft.Build.Evaluation.Evaluator`4.Evaluate(ILoggingService loggingService, BuildEventContext buildEventContext)\r\n   at Microsoft.Build.Evaluation.Evaluator`4.Evaluate(IEvaluatorData`4 data, ProjectRootElement root, ProjectLoadSettings loadSettings, Int32 maxNodeCount, PropertyDictionary`1 environmentProperties, ILoggingService loggingService, IItemFactory`2 itemFactory, IToolsetProvider toolsetProvider, ProjectRootElementCache projectRootElementCache, BuildEventContext buildEventContext, ProjectInstance projectInstanceIfAnyForDebuggerOnly, SdkResolution sdkResolution)\r\n   at Microsoft.Build.Evaluation.Project.Reevaluate(ILoggingService loggingServiceForEvaluation, ProjectLoadSettings loadSettings)\r\n   at Microsoft.Build.Evaluation.Project.ReevaluateIfNecessary(ILoggingService loggingServiceForEvaluation, ProjectLoadSettings loadSettings)\r\n   at Microsoft.Build.Evaluation.Project.Initialize(IDictionary`2 globalProperties, String toolsVersion, String subToolsetVersion, ProjectLoadSettings loadSettings)\r\n   at Microsoft.Build.Evaluation.Project..ctor(String projectFile, IDictionary`2 globalProperties, String toolsVersion, String subToolsetVersion, ProjectCollection projectCollection, ProjectLoadSettings loadSettings)\r\n   at Microsoft.Build.Evaluation.ProjectCollection.LoadProject(String fileName, IDictionary`2 globalProperties, String toolsVersion)\r\n   at Microsoft.Build.Evaluation.ProjectCollection.LoadProject(String fileName)\r\n   at DnnVsProjectSystem.BuildTools.Tests.MsBuildHelper.Build(String fileName, Action`1 configure, String& consoleOutput) in E:\\Repos\\DnnVsProjectSystem\\src\\DnnVsProjectSystem.BuildTools.Tests\\Util\\MsBuildHelper.cs:line 108\r\n   at DnnVsProjectSystem.BuildTools.Tests.ManifestBuildTests.BuildTestProject(String projectFileName, Boolean assertIsSuccess, Action`1 onBeforeBuild, String& consoleOutput) in E:\\Repos\\DnnVsProjectSystem\\src\\DnnVsProjectSystem.BuildTools.Tests\\ManifestBuildTests.cs:line 198\r\n   at DnnVsProjectSystem.BuildTools.Tests.ManifestBuildTests.WhenProjectIsBuilt(String projectName, Boolean assertSuccess, Action`1 assert) in E:\\Repos\\DnnVsProjectSystem\\src\\DnnVsProjectSystem.BuildTools.Tests\\ManifestBuildTests.cs:line 136\r\n   at DnnVsProjectSystem.BuildTools.Tests.ManifestBuildTests.Replaces_Tokens_In_Manifest() in E:\\Repos\\DnnVsProjectSystem\\src\\DnnVsProjectSystem.BuildTools.Tests\\ManifestBuildTests.cs:line 89\r\nResult Message:\tMicrosoft.Build.Shared.InternalErrorException : MSB0001: Internal MSBuild Error: Missing resource ''\r\n\r\n\r\n\r\n",
        "createdAt": "2018-03-06T22:50:38Z",
        "updatedAt": "2018-03-06T22:51:28Z",
        "author": {
          "login": "dazinator"
        }
      },
      {
        "body": "@dazinator the stack trace references a class that no longer exists.  Are you sure you're running the latest MSBuild?  When you compile your app, are you getting the assemblies from a NuGet package?",
        "createdAt": "2018-03-06T22:58:20Z",
        "updatedAt": "2018-03-06T22:58:20Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "@jeffkl Here is some more info:\n\nI see this error thrown when trying to load an sdk style proj file into a ProjectCollection during a unit test. \n\nMy unit test project is xunit and targets net461.\n\nIt has a project reference to the project containing the msbuild task that it is testing. \n\nThe test first does some \"prep\" work by attempting to build the task project itself (which I also have open in VS) and then pack the task project in order to produce a nuget package with a packageversion that the test has supplied. The test then generates a proj file that has a package reference to the nuget package with the version it created in the previous step. The test then restores this test proj file and then builds the test proj file - and then asserts on the output of the build to see if the msbuild task contained in the package did its job.\n\nThe msbuild task project is compiled against :-\n\n- Microsoft.Build.Framework `15.1.548`\n- Microsoft.Build.Utilities.Core `15.1.548`\n\nMy test project actually pulls in a higher version of those msbuild packages plus a couple exrtra:\n\n- Microsoft.Build.Framework `15.3.409`\n- Microsoft.Build.Utilities.Core `15.3.409`\n- Microsoft.Build.Tasks.Core `15.3.409`\n- Microsoft.Build `15.3.409`\n\n..and then uses an app.config binding redirect to downgrade the `MsBuild.Framework` binary to `newVersion=15.1.0`\n\nThis was a workaround after many many attempts at trying to load an SDK style project file using msbuild nuget packages, unsuccessfully, this was the only approach I could find that worked.\n\nWhen the test runs it also has to set the following Environment Variables before trying to load a project with msbuild, otherwise I was seeing all sorts of other problems raised elsewhere about not being able to find certain paths:\n\n```\n                    Environment.SetEnvironmentVariable(\"VSINSTALLDIR\", \"C:\\\\Program Files (x86)\\\\Microsoft Visual Studio\\\\2017\\\\Community\"):\n\n            Environment.SetEnvironmentVariable(\"VisualStudioVersion\", \"15.0\");\n\n```\n\nThis test has been running fine, but like I say, today it has started breaking when trying to load an sdk style project, and the only thing I can think of that has changed is the vs upgrade. Perhaps I am missing something!",
        "createdAt": "2018-03-07T00:25:53Z",
        "updatedAt": "2018-03-07T00:26:11Z",
        "author": {
          "login": "dazinator"
        }
      },
      {
        "body": "@dazinator Is there anyway you can use something like fusion log viewer or procmon to verify which `Microsoft.Build.dll` is being loaded?  Its definitely not loading the one you installed with 15.6 because the class in the stack trace is long gone.  It could be a bug in 15.3 that we've fixed but the mystery is still why it started to manifest all of a sudden.  I haven't been able to repro the issue.\r\n\r\n@davkean Are you still hitting this?",
        "createdAt": "2018-03-07T04:43:32Z",
        "updatedAt": "2018-03-07T04:43:32Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "@dazinator, maybe one more attempt and try compiling against 15.6.82 from NuGet (released 8 days ago) or 15.7.0-preview-000066 from myget (released 12 hours ago) to see if the problem persists. \r\nFor myget preview, add msbuild feed as [additional sources](https://github.com/NuGet/Home/wiki/%5BSpec%5D-NuGet-settings-in-MSBuild#project-properties):\r\n\r\n```xml\r\n<PropertyGroup>\r\n  <RestoreAdditionalProjectSources>https://dotnet.myget.org/F/msbuild/api/v3/index.json</RestoreAdditionalProjectSources>\r\n</PropertyGroup>\r\n```",
        "createdAt": "2018-03-07T05:16:32Z",
        "updatedAt": "2018-03-07T05:16:32Z",
        "author": {
          "login": "ghost"
        }
      },
      {
        "body": "I have figured out the problem.  MSBuild 15.3 shipped with two bugs in the SDK resolver loader logic:\r\n\r\n1. When searching for classes in an SDK resolver, `abstract` classes [were not filtered out](https://github.com/Microsoft/msbuild/blob/v15.3.409.57025/src/Build/BackEnd/Components/SdkResolution/SdkResolverLoader.cs#L44).  If an SDK resolver had a class that inherited `SdkResolver` but was `abstract`, it would attempt to create an instance of the `abstract` class and throw an exception\r\n2. The above exception would be caught and logged as a warning but the `LogWarning` call passed `String.Empty` [instead of null](https://github.com/Microsoft/msbuild/blob/v15.3.409.57025/src/Build/BackEnd/Components/SdkResolution/SdkResolverLoader.cs#L49) which would throw an internal error which is treated as a fatal MSBuild error\r\n\r\nWe fixed the two bugs in MSBuild 15.6 but we also shippped a NuGet-based SDK resolver which has a public `abstract` class that inherits from `SdkResolver`. \r\n\r\nYour unit tests are using MSBuild 15.3 to create an MSBuild environment but are pointing to the installation of MSBuild 15.6.  The logic in `Microsoft.Build.dll` is loading SDK resolvers from the installed location and so you hit these bugs.\r\n\r\nYou can update your references to the latest MSBuild which will fix the issue.  We cannot patch 15.3 to fix the bugs and we can't patch 15.6 to remove the `abstract` class that is causing the bugs to manifest.\r\n\r\nIn some cases, it might be best to use [MSBuildLocator](https://github.com/Microsoft/MSBuildLocator) instead which finds and loads the `Microsoft.Build.dll` from the installed location rather than your output directory.  This means that even if you're compiled against an older version, you'll be running the latest `Microsoft.Build.dll`.\r\n\r\nFYI @AndyGerlicher ",
        "createdAt": "2018-03-07T16:30:45Z",
        "updatedAt": "2018-03-07T16:36:42Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "@jeffkl  Thank you for investigating and I am glad for the answer.\r\nI will try what you have suggested, MSBuildLocator seems like a good way forward.\r\n\r\nOn a slight tangent, may I ask, in the situation where I have an msbuild task compiled against 15.1 and I know that msbuild environments in the wild might be on 15.1, or 15.3 or 15.6, I need to test that my msbuild task works in all those msbuild environments. In this case would `MSBuildLocator` be a capable strategy - for example, can I install `15.1`, `15.3`, and `15.6` alongside each other on a single machine and then use MSBuildLocator at test time to use the specific version required for the test? If so are you able point me towards the best way of setting up 15.1, 15.3, and 15.6 on a single machine?",
        "createdAt": "2018-03-07T17:38:40Z",
        "updatedAt": "2018-03-07T17:40:03Z",
        "author": {
          "login": "dazinator"
        }
      },
      {
        "body": "@dazinator if you have just a task library, you should not have to worry about testing against all versions.  MSBuild's assembly version is always `15.1` so your references will be that and you'll get whatever versions are next to `MSBuild.exe`.  \r\n\r\nYou'll only need to use MSBuildLocator if you want to programatically evaluate or build projects outside of MSBuild.exe.  This is common in unit tests or a custom program that does stuff with projects.",
        "createdAt": "2018-03-07T17:49:22Z",
        "updatedAt": "2018-03-07T17:49:22Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "@jeffkl Ok thanks. I would prefer to have test coverage of my task running in various different msbuild environments but I suppose I can consider dropping that idea if MSBuild \"swears\" to maintain compatibility with 15.1 :-)\r\n\r\nI'll switch to MSBuildLocator for my tests and update my references in my test project to 15.6. Thanks again.",
        "createdAt": "2018-03-07T17:54:40Z",
        "updatedAt": "2018-03-07T17:54:40Z",
        "author": {
          "login": "dazinator"
        }
      },
      {
        "body": "We try very hard to not break back compat especially for tasks.  If we do, please open an issue!  Unfortunately, doing programmatic evaluations and builds is just more complex because you need to load `Microsoft.Build.dll` in order to find MSBuild and we don't put our assemblies in the GAC anymore.   This is because you can have numerous instances of Visual Studio installed side-by-side.  So programmatic evaluations need to load `Microsoft.Build.dll` from the appropriate installed location rather than their own.  \r\n\r\nBut again, task assemblies are loaded by MSBuild itself and do not have to worry about it.  Even if we shipped MSBuild 16.0, we have assembly binding redirects in our app.config so your task compiled against 15.1 would still work, unless of course there was a breaking change, which again we try very hard not to do.",
        "createdAt": "2018-03-07T17:59:38Z",
        "updatedAt": "2018-03-07T17:59:38Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "~Going to reopen this~. Sorry missed bunch of context.",
        "createdAt": "2018-03-08T10:31:52Z",
        "updatedAt": "2018-03-08T10:32:10Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "Also hit here: https://github.com/dotnet/docfx/issues/2491",
        "createdAt": "2018-03-08T10:33:09Z",
        "updatedAt": "2018-03-08T10:33:09Z",
        "author": {
          "login": "davkean"
        }
      }
    ]
  }
}