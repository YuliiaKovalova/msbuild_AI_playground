{
  "number": 3366,
  "title": "MSBuild Generally Inconsistent/Buggy Behavior",
  "body": "We are trying to leverage MSBuild 15 for our build system and have just hit bug after bug due to inconsistencies in the overall MSBuild implementation. It\u2019s always been the case that it\u2019s tricky dealing with differences between how devenv and command line MSBuilds work. In MSBuild 15 and with dotnet core MSBuild, it\u2019s gotten so bad that we have ended up needing to write unit tests just to verify all the different build variations actually work. There are builds via\r\n\r\n- devenv\r\n- MSBuild.exe (VS Tools version)\r\n- dotnet build \r\n- dotnet pack (with implicit build)\r\n- dotnet msbuild \r\n- dotnet restore && dotnet build\r\n\r\nEach one of the above behaves differently...in some cases, massively differently. \r\n\r\nThen the above list gets multiplied by 2 because sln file builds behave totally different from (cs)proj file builds. \r\n\r\nWhat I\u2019d like to know is - which of the above build scenarios/models should we be designing for to get the best level of support and stability going forward? It\u2019s borderline impossible to support them all. \r\n\r\nOur basic desire is to have a build script that runs \r\n\r\ndotnet pack my.sln -o artifacts \r\n\r\nA test script that runs \r\n\r\ndotnet test my.sln -a ...\r\n\r\nAnd have Visual Studio builds work as well\r\n\r\nCalling msbuild.exe would be equally okay vs. dotnet.exe if it actually worked. \r\n\r\nIt sounds easy but it\u2019s so far from it....\r\n\r\nWith a simple solution consisting of:\r\n- classic csproj\r\n- sdk csproj targeting multiple frameworks (with GeneratePackageOnBuild set to true)\r\n- a net461 console app that needs a PackageReference to the nuget package produced by the aforementioned csproj (must be a PackageReference because the package has custom msbuild targets)\r\n- a pssproj with Pester tests \r\n- a sqlproj\r\n\r\nBasically, what we\u2019ve found\r\n\r\n- solution restores behave vastly differently between msbuild.exe /t:Restore, dotnet restore and Visual Studio restore. We can hack around it but calling nested MSBuilds in custom targets, but that will make one scenario work and break another... There are tons of issues filed around this behavior but it\u2019s never been addressed. Here is one\r\nhttps://github.com/NuGet/Home/issues/4627\r\n\r\nThen there is the issue with calling pack on the sln when a csproj in it has GeneratePackageOnBuild set to true. \r\n\r\nThen there is the issue that vstest via dotnet test doesn\u2019t find PowerShell tests (only vstest.exe does)...but calling msbuild.exe /t:vstest doesn\u2019t seem to be supported. \r\n\r\nWhat\u2019s a good strategy here?\r\n\r\n",
  "state": "OPEN",
  "createdAt": "2018-06-04T17:10:02Z",
  "updatedAt": "2024-02-21T16:33:52Z",
  "closedAt": null,
  "author": {
    "login": "jnevins-gcm"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": ">Then there is the issue that vstest via dotnet test doesn\u2019t find PowerShell tests (only vstest.exe does)...but calling msbuild.exe /t:vstest doesn\u2019t seem to be supported.\r\n\r\nDid you try using `dotnet vstest`?\r\n\r\nAlso, I've been using custom targets with msbuild for some time and I've never hit big inconsistencies between VS, the MSBuild CLI and the .NET CLI. Do you have some concrete examples for those differences?",
        "createdAt": "2018-06-05T00:00:01Z",
        "updatedAt": "2018-06-05T00:00:01Z",
        "author": {
          "login": "jp2masa"
        }
      },
      {
        "body": "Thanks for the reply. To your first question - no, no tests are found even when doing dotnet vstest - I assume it might be because the PowerShell Tools TestAdapter is compiled for the NETFramework version of MSBuild (task assemblies are not cross compatible)....but I can\u2019t be sure. \r\n\r\nRegarding inconsistencies - the biggest is around what targets get called for sln package restores \r\n\r\n- Visual Studio integrated restore doesn\u2019t seem to call any targets I can hook into at all (CollectPackageReferences, etc). Further, package level imports don\u2019t seem to get loaded at all when performing a solution restore from Visual Studio (e.g. a Directory.Build.props in the solution path will get imported but not one in the project folder). It\u2019s different than all other scenarios because of the generated meta project.\r\n\r\n- dotnet cli performs an implicit solution restore too (it calls a sln level restore across all projects). Some targets I can hook into do actually get called for this one. \r\n\r\n- the common targets imported by dotnet msbuild are of course completely different than the ones used by visual studio\r\n\r\nEssentially I have two goals here:\r\n\r\n- be able to use the CLI (msbuild desktop, dotnet, any is fine as long as I can run it on a build machine) and Visual Studio to consistently get the same behavior when restoring, building, rebuilding, packing, cleaning a solution with the above makeup. If you create a really simple solution with the makeup I mentioned (projects totally empty), you\u2019ll see it\u2019s broken out of the box in so many different ways. \r\n\r\n- be able to have Project A in an sln refer to Project B in the same sln as a PackageReference  (so the custom build props/targets in Project B\u2019s nupkg get imported when A is built ",
        "createdAt": "2018-06-05T00:34:13Z",
        "updatedAt": "2018-06-05T00:34:13Z",
        "author": {
          "login": "jnevins-gcm"
        }
      },
      {
        "body": "AFAIK, the common targets are the same for all environments. The main difference is that on VS it loads design time targets, which include some targets used at design time to resolve references, as well as project capability includes used by the project system.\r\n\r\n`Restore` is the target which creates the assets file I think, I'm not sure if VS calls that target, as it calls restore using some NuGet VS interop APIs (https://github.com/dotnet/project-system/blob/master/src/Microsoft.VisualStudio.ProjectSystem.Managed.VS/ProjectSystem/VS/NuGet/PackageRestoreInitiator.PackageRestoreInitiatorInstance.cs).",
        "createdAt": "2018-06-05T00:53:38Z",
        "updatedAt": "2018-06-05T00:53:38Z",
        "author": {
          "login": "jp2masa"
        }
      },
      {
        "body": "That link is actually great - the interop APIs explain why Restore isn\u2019t called. \r\n\r\nBut the problem is that you literally can\u2019t call the Restore target yourself if an sln Restore is performed by VS or the dotnet CLI (AFAIK)...or at least you can\u2019t without a ton of hacking around stuff (which introduces even more variability between CLI vs VS\r\n\r\nhttps://github.com/Microsoft/msbuild/issues/2455",
        "createdAt": "2018-06-05T01:00:05Z",
        "updatedAt": "2018-06-05T01:00:05Z",
        "author": {
          "login": "jnevins-gcm"
        }
      },
      {
        "body": "Also - dotnet vstest doesn't work at all ...seems like another known bug that's marked as resolved...but not actually\r\n\r\nI'm running\r\n.NET Command Line Tools (2.1.201)\r\n\r\nhttps://github.com/Microsoft/vstest/issues/326\r\n\r\nI get\r\n```\r\n\r\n$ dotnet vstest Build.Tests.ps1\r\nMicrosoft (R) Test Execution Command Line Tool Version 15.7.0\r\nCopyright (c) Microsoft Corporation.  All rights reserved.\r\n\r\nStarting test execution, please wait...\r\nSystem.IO.FileNotFoundException: Unable to find tests for D:\\....\\Build.Tests.ps1. Make sure test project has a nuget reference of package \"Microsoft.NET.Test.Sdk\" and framework version settings are appropriate. Rerun with /diag option to diagnose further.\r\n   at Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Hosting.DotnetTestHostManager.GetTestHostProcessStartInfo(IEnumerable`1 sources, IDictionary`2 environmentVariables, TestRunnerConnectionInfo connectionInfo)\r\n   at Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyOperationManager.SetupChannel(IEnumerable`1 sources, CancellationToken cancellationToken)\r\n   at Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Client.ProxyExecutionManager.StartTestRun(TestRunCriteria testRunCriteria, ITestRunEventsHandler eventHandler)\r\n\r\nTest Run Aborted.\r\n\r\n```\r\nI am, of course, referencing that package",
        "createdAt": "2018-06-05T14:35:00Z",
        "updatedAt": "2018-06-05T14:43:22Z",
        "author": {
          "login": "jnevins-gcm"
        }
      },
      {
        "body": "And `msbuild.exe /t:vstest` also fails:\r\n\r\n`$ \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\MSBuild\\15.0\\Bin\\MSBuild.exe\" IntegrationTests.pssproj /t:vstest`\r\n`\r\nD:\\Dev\\...\\IntegrationTests.pssproj : error MSB4057: The target \"vstest\" does not exist in the project.    \r\n`\r\nAnd yet another scenario behaves differently:\r\n`\r\ndotnet msbuild AzureFunctions.PowerShellIntegrationTests.pssproj /t:vstest          `\r\n\r\ndoesn't error out but still doesn't find my tests\r\n\r\n```\r\nTest run for D:\\....\\Build.Tests.ps1(.NETFramework,Version=v4.0)\r\nMicrosoft (R) Test Execution Command Line Tool Version 15.7.0\r\nCopyright (c) Microsoft Corporation.  All rights reserved.\r\n\r\nStarting test execution, please wait...\r\nMultiple versions of same extension found. Selecting the highest version.\r\n  Microsoft.VisualStudio.TestPlatform.Extensions.GenericTestAdapter : 15.0.27703.2009\r\n  Microsoft.VisualStudio.TestPlatform.Extensions.OrderedTestAdapter : 15.0.27703.2009\r\n```\r\n\r\nVS Test Explorer also fails to load the tests...but with yet another different error                                                                                             \r\n\r\nThis is what I mean by inconsistent/buggy - different behavior (all non-functional) depending on where you're running from. It's truly horrific.",
        "createdAt": "2018-06-05T14:38:14Z",
        "updatedAt": "2018-06-05T14:43:53Z",
        "author": {
          "login": "jnevins-gcm"
        }
      },
      {
        "body": "I can only agree and add:\r\nWe have the same kind of inconsistencies with dotnet pack, nuget pack & msbuild /t:Pack.\r\nDepending on which are used packages are generated differently. Some even outright fail with features documented as polyglot of all three.\r\n\r\nI understand why these issues exist & i'm not trying to pile on, It just begs the question as to where the responsibilities actually reside? Why does the nuget cli have a /build flag? Why is VSTest built into dotnet to achieve dotnet test but not built into msbuild the same as dotnet restore is built into the dotnet cli but also msbuild /t:Restore ? Where is the single source of truth? Why is dotnet adhering to a \"global.json\" file for SDK nuget resolution, while nuget is about to introduce a repo-wide packages.json? I am sorry, but this whole thing is starting to get out of hand. I am maintaining about 1000 csprojs at work desperately trying to distribute this responsibility, but i just keep being thrown back by stuff like this.",
        "createdAt": "2018-10-08T14:54:32Z",
        "updatedAt": "2018-10-08T14:54:32Z",
        "author": {
          "login": "MeikTranel"
        }
      }
    ]
  }
}