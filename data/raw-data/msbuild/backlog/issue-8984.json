{
  "number": 8984,
  "title": "[Performance]: Glob expansion inside targets is missing important Exclude optimization",
  "body": "### Issue Description\n\nWhen glob expansion runs in a target via `ItemGroupIntrinsicTask`, it separately enumerates includes and excludes, then does the subtraction of their results. This may be prohibitively slow when excludes refer to large subdirectories.\n\n### Steps to Reproduce\n\n```xml\r\n<Project>\r\n  <Target Name=\"Build\">\r\n    <ItemGroup>\r\n      <MyResources Include=\"**\\*.png;**\\*.jpg\" Exclude=\"bin\\**\\*.*;obj\\**\\*.*\" />\r\n    </ItemGroup>\r\n    <Message Text=\"MyResources.Count: @(MyResources->Count())\" />\r\n  </Target>\r\n</Project>\r\n```\r\n\r\nWhen evaluating the glob, there is no need to recurse into `bin` or `obj` at all. MSBuild can simply skip these directories when it enumerates all `.png` and `.jpg` files.\n\n### Data\n\nAn internal project is seeing >10 minutes spent running the `ItemGroupIntrinsicTask` due to this issue.\n\n### Analysis\n\nThese are the problematic calls: https://github.com/dotnet/msbuild/blob/39e20dce0c00a572f1fbd20a0a520d4e941bbc33/src/Build/BackEnd/Components/RequestBuilder/IntrinsicTasks/ItemGroupIntrinsicTask.cs#L469-L481\n\n### Versions & Configurations\n\n_No response_\n\n### Regression\n\n- [ ] yes\n- [X] no\n\n### Regression Details\n\n_No response_",
  "state": "CLOSED",
  "createdAt": "2023-06-30T13:51:26Z",
  "updatedAt": "2024-02-21T14:04:25Z",
  "closedAt": "2023-07-24T08:52:07Z",
  "author": {
    "login": "ladipro"
  },
  "labels": [
    "backlog",
    "Area: Performance",
    "Priority:2",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "YuliiaKovalova"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": ">When evaluating the glob, there is no need to recurse into bin or obj at all.\r\n\r\nIs that so? `Bin` folder - possibly, but I am unsure about `obj`. I wonder if this could be a breaking change.",
        "createdAt": "2023-07-04T14:37:15Z",
        "updatedAt": "2023-07-04T14:37:15Z",
        "author": {
          "login": "AR-May"
        }
      },
      {
        "body": "> > When evaluating the glob, there is no need to recurse into bin or obj at all.\r\n> \r\n> Is that so? `Bin` folder - possibly, but I am unsure about `obj`. I wonder if this could be a breaking change.\r\n\r\nThe `bin` and `obj` here refers to the specific example in Steps to Reproduce. Fixing this perf issue is not expected to change anything functionally.",
        "createdAt": "2023-07-11T12:54:38Z",
        "updatedAt": "2023-07-11T12:54:38Z",
        "author": {
          "login": "ladipro"
        }
      }
    ]
  }
}