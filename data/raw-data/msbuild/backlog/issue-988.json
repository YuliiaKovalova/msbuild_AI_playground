{
  "number": 988,
  "title": "Allow \"Exclude\" as an alias for \"Remove\"",
  "body": "## Background\n\nMSBuild now allows developers to remove an item statically via the use of \"Remove\", previously you could only do this within a target.\n\n``` XML\n<ItemGroup>\n    <Compile Include=\"*.cs\" Exclude=\"DoNotCompile.cs\" />\n    <Compile Remove=\"AlsoDoNotCompile.cs\" />\n</ItemGroup>\n```\n\nThis is quite powerful and allows you to remove an item statically, without needing to change the original item declaration. For example, a wildcard could be implicitly imported in a props file, and the Remove in a project file.\n## Problem\n\nThe name \"Remove\" makes sense in the context that there's an existing feature, previously we just allowed it within a target, we now allow it everywhere. \n\nIn terms of symmetry of terms however, the name does not make sense. You \"add\" and \"remove\" files from a list, or \"include\" and \"exclude\" files from a list. You do not \"add\" and \"exclude\" files from a list or \"include\" and \"remove\" files from a list.\n\nGiven existence of \"Include\" already, naturally developers are going to gravitate towards using \"Exclude\" by itself (I personally ran into this), only to be told that it's not valid syntax.\n## Proposal\n\nBased on above, we should allow the use of \"Exclude\" in the same places that you can \"Remove\", ie the above example could become:\n\n``` XML\n<ItemGroup>\n    <Compile Include=\"*.cs\" Exclude=\"DoNotCompile.cs\" />\n    <Compile Exclude=\"AlsoDoNotCompile.cs\" />\n</ItemGroup>\n```\n\nOr in a target:\n\n``` XML\n<Target Name=\"RemoveFiles\">\n    <Compile Exclude=\"AlsoDoNotCompile.cs\" />\n</Target>\n```\n\nThis means when Exclude is on the same item as a Include, it excludes items from the Include. When Exclude is by itself, it excludes items from the current list of all items.\n## Compatibility\n\nGiven it has never been valid to use 'Exclude' by itself without an 'Include' - this change should not have an impact on compatibility.\n\nThis issue was filed on behalf of feedback by @shanselman.\n",
  "state": "CLOSED",
  "createdAt": "2016-09-01T20:24:50Z",
  "updatedAt": "2024-02-21T17:26:07Z",
  "closedAt": "2019-11-04T21:55:38Z",
  "author": {
    "login": "davkean"
  },
  "labels": [
    "backlog",
    "Area: Language",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Backlog"
  },
  "comments": {
    "nodes": [
      {
        "body": "tag @Sarabeth-Jaffe-Microsoft @rainersigwald @cdmihai and @AndyGerlicher \n",
        "createdAt": "2016-09-01T20:25:24Z",
        "updatedAt": "2016-09-01T20:25:24Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "What if we wanted to support removing all items except the ones that match a pattern?  Currently we don't support this, but if we did I'd expect it to look like this:\n\n``` xml\n<Compile Remove=\"obj\\**\\*.*\" Exclude=\"obj\\generated\\*.cs\" />\n```\n\nThat would mean to remove all compile items from the `obj` directory **except** `.cs` files in `obj\\generated`.\n\nBut if `Exclude` can be an alias for `Remove`, then this could start to get confusing.  What do you think?\n",
        "createdAt": "2016-09-08T02:04:58Z",
        "updatedAt": "2016-09-08T02:04:58Z",
        "author": {
          "login": "dsplaisted"
        }
      },
      {
        "body": "Very good point @dsplaisted. I'd be for having `Exclude` scoped down to mean filtering the applicability of the current item operation. And we can enable it for all item operations (include, remove, update, keepmetadata, updatemetadata).\n\nIf exclude is the only attribute present in the item element, then it would be interpreted as an exclude for a global Update. See #955 \n",
        "createdAt": "2016-09-08T18:18:32Z",
        "updatedAt": "2016-09-08T18:21:05Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "I'm not sure what the right thing to do is.  I think the request coming from @shanselman is reasonable, and is how people would generally expect it to work.  When you think about the details and edge cases though, it starts to get confusing.\n\n> If exclude is the only attribute present in the item element, then it would be interpreted as an exclude for a global Update. See #955\n\nThis follows naturally from the existing behavior and the changes we are making, but I think it ends up in a place that would be confusing, or at least not the expected behavior for most people.\n",
        "createdAt": "2016-09-09T23:34:46Z",
        "updatedAt": "2016-09-09T23:34:46Z",
        "author": {
          "login": "dsplaisted"
        }
      },
      {
        "body": "I'm not sure about backward compatibility but I think it  would be clearer if had \"Except\" instead of \"Exclude\"  to mean filtering the applicability of the current item operation. Then we could use \"Exclude\" instead of \"Remove\" or allow both\r\n\r\n\r\n```\r\n<ItemGroup>\r\n    <Compile Include=\"*.cs\" Except=\"DoNotCompile.cs\" />\r\n    <Compile Exclude=\"AlsoDoNotCompile.cs\" />\r\n</ItemGroup>\r\n```\r\n\r\n```\r\n<Compile Exclude=\"obj\\**\\*.*\" Except=\"obj\\generated\\*.cs\" />\r\n```",
        "createdAt": "2017-03-16T08:26:35Z",
        "updatedAt": "2017-03-16T08:26:35Z",
        "author": {
          "login": "cannn"
        }
      },
      {
        "body": "I like @cannn's suggestion. Except seems like a more suitable term for modifying the main item operation. Exclude could then be aliased to Remove as a main item operation. Back-compat would be fine, since we'd bake in the rule that Exclude can only appear besides Include, in which case it's aliased to Except. @Microsoft/msbuild-maintainers for more opinions.\r\n\r\n```xml\r\n<Compile Include=\"*.cs\" Except=\"DoNotCompile.cs\" />\r\n<Compile Remove=\"**/bin/**/*.cs\" Except=\"DoNotRemoveMe.cs\" />\r\n\r\n<!-- Exclude as an alias to Remove -->\r\n<Compile Exclude=\"**/bin/**/*.cs\" Except=\"DoNotRemoveMe.cs\" />\r\n```",
        "createdAt": "2017-03-16T16:50:26Z",
        "updatedAt": "2017-03-16T16:51:39Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "I agree that `Except` is a better name for what `Exclude` does. But I'm not in favor of adding it as an alias now for language-complexity reasons. Under what circumstances should the API choose one over the other when manipulating a project? How would a user familiar with the current rules interpret `Except`? And what does the error look like if you have \r\n\r\n```xml\r\n<Compile Remove=\"**/obj/**\" Exclude=\"**/bin/**/*.cs\" Except=\"DoNotRemoveMe.cs\" />\r\n```",
        "createdAt": "2017-03-16T16:56:14Z",
        "updatedAt": "2017-03-16T16:56:14Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "- API favor: We'd champion Except as the new Exclude, so we'd change the APIs to use Except instead of today's Exclude.\r\n- What if both Exclude and Except appear for an Include operation. We'd issue a warning saying the preferred operation modifier is Except, but we accept both so we merge the two. Or just error.",
        "createdAt": "2017-03-16T17:52:32Z",
        "updatedAt": "2017-03-16T17:53:27Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "What if `Add=\"..\"` could be used instead of `Include`? Then the meaning of other existing attributes wouldn't need to change and the verbs would be `Add`, `Update` and `Remove` with `Include` staying around for compatibility.",
        "createdAt": "2017-03-16T18:25:39Z",
        "updatedAt": "2017-03-16T18:25:39Z",
        "author": {
          "login": "dasMulli"
        }
      },
      {
        "body": "At this point, I believe folks are used to the way things work and changing this would be a breaking change. Closing.",
        "createdAt": "2019-11-04T21:55:38Z",
        "updatedAt": "2019-11-04T21:55:38Z",
        "author": {
          "login": "livarcocc"
        }
      },
      {
        "body": "It wouldn't need to be a breaking change if Exclude and Remove were both supported, right?",
        "createdAt": "2019-11-05T15:02:16Z",
        "updatedAt": "2019-11-05T15:02:16Z",
        "author": {
          "login": "MisinformedDNA"
        }
      }
    ]
  }
}