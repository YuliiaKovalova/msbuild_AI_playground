{
  "number": 1277,
  "title": "Add GetFileAbove intrinsic function",
  "body": "The CoreFX repo contains [over 1,000 instances](https://github.com/dotnet/corefx/search?utf8=%E2%9C%93&q=getdirectorynameoffileabove) of this pattern:\n`<Import Project=\"$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), dir.props))\\dir.props\" />`\n\nit seems to me it ought to be possible to write this more compactly like\n\n`<Import Project=\"$([MSBuild]::GetFileAbove(dir.props)\" />`\n\nThis assumes that an intrinsic function can get passed the current file's location as an implicit parameter. I haven't looked at the code but I assume it can.\n\nOnce this is added, it should be fairly easy to search and replace to the new syntax.\n",
  "state": "CLOSED",
  "createdAt": "2016-10-27T23:08:02Z",
  "updatedAt": "2024-02-21T17:24:47Z",
  "closedAt": "2016-12-09T17:19:48Z",
  "author": {
    "login": "danmoseley"
  },
  "labels": [
    "User Experience",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "jeffkl"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "IElementLocation is available to Expander at the point it calls the intrinsic function\nhttps://github.com/Microsoft/msbuild/blob/6cd2c4b3e94ef2fae38d6270a54d2948fb1d1ac2/src/XMakeBuildEngine/Evaluation/Expander.cs#L2864\n",
        "createdAt": "2016-10-28T17:03:58Z",
        "updatedAt": "2016-10-28T17:03:58Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "I'm working on implementing this.  The `IElementLocation` is just the location in XML where the property function call is.  But my initial design on this relies on the current directory which is set to the project directory when building a project.\r\n\r\n``` xml\r\n<Import Project=\"$([MSBuild]::GetPathOfFileAbove(dir.props)\" />\r\n```\r\n\r\nThe implementation calls `Path.GetFullPath()` on whatever is passed in.  So you could still specify `..\\dir.props` or something and the function would make it an absolute path based on the current directory.  You could also be more exact if necessary with:\r\n\r\n``` xml\r\n<Import Project=\"$([MSBuild]::GetPathOfFileAbove('$(MSBuildProjectDirectory)\\dir.props')\" />\r\n```\r\n\r\nOnce it has the absolute path, it would then call `Path.GetDirectoryName()` and pass that off to `GetDirectoryNameOfFileAbove()` which would do the search.\r\n\r\n@danmosemsft Does that sound like it will meet your requirements?\r\n\r\n@Microsoft/msbuild-maintainers thoughts?",
        "createdAt": "2016-11-28T20:32:35Z",
        "updatedAt": "2016-11-28T20:32:35Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "Hi @jeffkl. In all the instances in CoreFX, `$(MSBuildThisFileDirectory)` is used. My assumption, although I don't know for sure, is that this is typical: the use case is to locate some file above the current file, whatever the importing project is. The situation being a hierarchy of `.props` files, each increasingly specialized, but extending any and all `.props` files above. Each of the `.props` files and the project itself has this tag, and the whole thing self-assembles. I can't think of a case where you would want a `.props` file to import something relative to the project file that's importing it.\r\n\r\nSo I don't think `Path.GetFullPath()` would work. That's why I was thinking of `IElementLocation.File` or similar.",
        "createdAt": "2016-11-28T20:42:47Z",
        "updatedAt": "2016-11-28T20:42:47Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "Gotcha.  So is it too much of a burden for them all to be: \r\n``` xml\r\n<Import Project=\"$([MSBuild]::GetPathOfFileAbove('$(MSBuildThisFileDirectory)dir.props')\" />\r\n```\r\n\r\nAnother thought is to have an overload which takes a \"starting directory\" like `GetDirectoryNameOfFileAbove()`.  The default would be `$(MSBuildThisFileDirectory)`.",
        "createdAt": "2016-11-28T20:45:37Z",
        "updatedAt": "2016-11-28T20:45:37Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "`<Import Project=\"$([MSBuild]::GetPathOfFileAbove('$(MSBuildThisFileDirectory)dir.props')\" />` would be an improvement, but I think the pattern is sufficiently common that it's worth making it as simple as  `<Import Project=\"$([MSBuild]::GetPathOfFileAbove(dir.props)\" />`. \r\n\r\nThis assumes it's reasonable to assume that `GetPathOfFileAbove` is relative to the current tag, but I think that's implied by the \"Above\" part implies that, plus my assertion is it's the common pattern.\r\n\r\nThis is not a blocking issue or anything - I simply noticed a common pattern that could potentially be simpler. I certainly don't have a strong opinion so your call ..",
        "createdAt": "2016-11-28T20:56:55Z",
        "updatedAt": "2016-11-28T20:56:55Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "I really want this function as well.  From what I can tell, the only real design decision here is if you pass a relative path (like just a file name), should it be made absolute to the current working directory or current file directory.  Since this function is new, we can go with whatever we want.  \r\n\r\nI'll discuss it with the team and see what we come up with!",
        "createdAt": "2016-11-28T21:00:44Z",
        "updatedAt": "2016-11-28T21:00:44Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "My 2\u00a2: error if someone puts in a relative path. It should be a filename only.",
        "createdAt": "2016-11-28T21:12:42Z",
        "updatedAt": "2016-11-28T21:12:42Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "The evaluator has access to `IEvaluatorData.Directory` via the `_data` field: https://github.com/Microsoft/msbuild/blob/xplat/src/XMakeBuildEngine/Evaluation/Evaluator.cs#L105\r\n\r\nIt (_hopefully_) represents the directory of the project file msbuild was invoked on.\r\n\r\nSo the code that interprets `GetFileAbove` can use that as the starting lookup point.",
        "createdAt": "2016-11-29T01:17:43Z",
        "updatedAt": "2016-11-29T01:20:38Z",
        "author": {
          "login": "cdmihai"
        }
      }
    ]
  }
}