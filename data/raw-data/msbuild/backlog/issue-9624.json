{
  "number": 9624,
  "title": "[Feature Request]: Types for file paths and plain text",
  "body": "### Summary\n\nIn documentation/specs/proposed, [security-metadata.md](https://github.com/dotnet/msbuild/blob/1725b247e8737804076c8ff3b09fcee02ecdf51e/documentation/specs/proposed/security-metadata.md) states:\r\n\r\n> We envision MSBuild to have a first-class-[citizen] type system for [its] data and tasks. 'Secret' would be one of the data types ...\r\n\r\nIf a type system is introduced, please include a file path type and a plain text type.\n\n### Background and Motivation\n\nWhen a `TaskItem` is constructed (or `ItemSpec` is set), the value is passed through `FileUtilities.FixFilePath`:\r\n\r\nhttps://github.com/dotnet/msbuild/blob/1725b247e8737804076c8ff3b09fcee02ecdf51e/src/Utilities/TaskItem.cs#L75-L81\r\n\r\nhttps://github.com/dotnet/msbuild/blob/1725b247e8737804076c8ff3b09fcee02ecdf51e/src/Utilities/TaskItem.cs#L152-L163\r\n\r\nhttps://github.com/dotnet/msbuild/blob/1725b247e8737804076c8ff3b09fcee02ecdf51e/src/Shared/FileUtilities.cs#L543-L546\r\n\r\n`FixFilePath` makes no change under Windows (where `Path.DirectorySeparatorChar` will be `'\\\\'`) but on *NIX OSs (macOS and Linux) a `\\` character will be replaced with a `/` character. This makes some sense for file paths but when an Item collection is used for data that is not file paths and that contains `\\` characters, the data is corrupted.\r\n\r\nThis issue shows up in multiple places and ways but one example is using the `ReadLinesFromFile` task to read a JavaScript file that has code using regular expressions. The `\\` character is an escape character in REs. The same MSBuild project will work correctly on Windows and corrupt the RE expressions on Linux and macOS.\n\n### Proposed Feature\n\n- Have a plain text type for values that should not be interpreted.\r\n- Have a file path type that supports making file paths portable/convertible.\r\n  - Can be defined with a relative path in either a Windows style or a UNIX style and, when its value is accessed, it tries to default to the current platform.\r\n  - It should be possible to explicitly get a UNIX style path under Windows and vice versa.\r\n  - Converting fully qualified paths may not be supported.\r\n\n\n### Alternative Designs\n\n_No response_",
  "state": "OPEN",
  "createdAt": "2024-01-10T17:08:08Z",
  "updatedAt": "2025-04-03T18:58:18Z",
  "closedAt": null,
  "author": {
    "login": "jrdodds"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "backlog",
    "Feature Request",
    "Priority:3",
    "triaged",
    "gathering-feedback"
  ],
  "comments": {
    "nodes": [
      {
        "body": "See bugs #1622 and #3468.",
        "createdAt": "2024-01-10T17:12:13Z",
        "author": {
          "login": "jrdodds"
        }
      },
      {
        "body": "FYI @baronfel\r\n\r\nThank you @jrdodds for a nice suggestion.\r\nThe strong type system is not yet on the top of MSBuild team priority list (though it's something that was discussed internaly couple times).",
        "createdAt": "2024-01-16T15:05:32Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "[SO question](https://stackoverflow.com/q/77734733/9971404) issue that started this issue.",
        "createdAt": "2024-01-16T15:24:51Z",
        "author": {
          "login": "lonix1"
        }
      },
      {
        "body": "Related issue - #11083 ",
        "createdAt": "2024-12-11T12:22:32Z",
        "author": {
          "login": "jrdodds"
        }
      },
      {
        "body": "Having a strongly-typed string for `Path`s doesn't just benefit MSBuild but all of .NET! This should be added to the Core Framework itself.",
        "createdAt": "2025-04-03T18:58:16Z",
        "author": {
          "login": "Nirmal4G"
        }
      }
    ]
  }
}