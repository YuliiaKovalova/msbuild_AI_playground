{
  "number": 9712,
  "title": "[Bug]: Manged to Unmanaged ProjectReference built Platform mismatch",
  "body": "### Issue Description\n\nIn a csproj referencing a vcxproj may result in mismatched platforms being built (Platform flows from csproj to vcxproj, Platform is deleted).\r\n\r\n\n\n### Steps to Reproduce\n\n- Unpack Repro\r\n[traversal-test.zip](https://github.com/dotnet/msbuild/files/14182777/traversal-test.zip)\r\n- Run ` msbuild /Restore /bl /p:Configuration=Release dirs.proj`\r\n- Check in artifacts\\bin\\Shared folder for output.\n\n### Expected Behavior\n\nBuilding with Microsoft.Build.Traversal and set Platform should respect the PlatformLookupTable and not delete target Platform from ProjectReference.\r\nOutput in `artifacts\\bin\\Share` should be:\r\n- `Win32`\r\n- `x64`\r\n\r\nWithout any other folder (e.g. `Debug`, `Release`, `x86`).\n\n### Actual Behavior\n\nObserve that in `artifacts\\bin\\Shared\\` three folders are created - \"Release\", \"Win32\", \"x64\".\r\nRelease was created (check binlog) by the project dependency in csproj, when built with Platform=x86\r\nWin32 was created from dirs.proj where `Platform=Win32`\r\nx64 was created from dirs.proj and not rebuilt from csproj where `Platform=x64`.\r\nWith `EnableDynamicPlatformResolution=False` the output is created in `artifacts\\bin\\Shared\\x86` which is wrong as well.\r\n\r\nRunning\r\n```\r\nmsbuild /Restore /bl /p:Platform=x86 traversal-test.sln\r\n```\r\nDoes not create the erroneous `artifacts\\bin\\Shared\\Release`-folder.\n\n### Analysis\n\nChecking the binlog I found `Target Name=_GetProjectReferencePlatformProperties Project=app.csproj` adding `_MSBuildProjectReferenceExistent` with `UndefineProperties = ;TargetFramework;TargetFramework;RuntimeIdentifier;SelfContained;Platform`.\n\n### Versions & Configurations\n\nTBA\r\nVS 17.8\r\n.NET 8 Sdk\r\nWindows 11 23h2",
  "state": "CLOSED",
  "createdAt": "2024-02-06T15:46:00Z",
  "updatedAt": "2024-04-02T10:15:35Z",
  "closedAt": "2024-03-28T12:34:10Z",
  "author": {
    "login": "AliveDevil"
  },
  "labels": [
    "bug",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "JanKrivanek"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "@MIchaelRShea - do you have any quick idea on reason/remedy for this?",
        "createdAt": "2024-02-20T15:51:03Z",
        "updatedAt": "2024-02-20T15:51:03Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "I used following workaround:\r\nIn Directory.Build.props I rewrite all OutputPaths that would result in `Win32`-platforms to `x86`.\r\nI replaced the ProjectReference `Platform=\"$(Platform)\"` with `SetPlatform=\"Platform=$(Platform)\"`.\r\nWithout rewriting Win32->x86 output paths I get\r\n- x64\r\n- Win32\r\n- x86",
        "createdAt": "2024-02-20T16:39:45Z",
        "updatedAt": "2024-02-20T16:39:45Z",
        "author": {
          "login": "AliveDevil"
        }
      },
      {
        "body": "Some quick observations:\r\n\r\nDirectory.Build.props:\r\n\r\n```xml\r\n<OutputPath Condition=\"'$(Platform)' == 'AnyCPU'\">$(BaseOutputPath)$(Configuration)\\</OutputPath>\r\n<OutputPath Condition=\"'$(Platform)' != 'AnyCPU'\">$(BaseOutputPath)$(Platform)\\$(Configuration)\\</OutputPath>\r\n```\r\n\r\nThere are two possibilites how the artifacts/bin/shared/Release folder can be created:\r\n * $(Platform) == 'AnyCPU'\r\n * $(Platform) is empty\r\n\r\nAnd the second case actually hapens here:\r\n\r\n<img width=\"1055\" alt=\"image\" src=\"https://github.com/dotnet/msbuild/assets/3809076/037f93b8-5a90-47aa-9e9f-f4cdf80583cf\">\r\n\r\n\r\n\r\n\r\nIt looks to me this is the reason: https://github.com/dotnet/msbuild/pull/8106\r\nspecifically: `Add catch-all if statement that prevents global property Platform to be passed to referenced projects when redundant`\r\n\r\n@MIchaelRShea - can you please comment if setting the negotiated platform to empty is expected to have the side effect of `Platform` property being actually empty, or if it is a bug?\r\n\r\n\r\n<img width=\"534\" alt=\"image\" src=\"https://github.com/dotnet/msbuild/assets/3809076/1327f8c8-4e11-4360-b0e5-4993bf192189\">\r\n\r\n",
        "createdAt": "2024-03-14T20:18:45Z",
        "updatedAt": "2024-03-14T20:39:30Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "@AliveDevil You are relying on `Platform` property in Directory.Build.props, while it is set in the .csproj file. So unless this is passed as a global property by the platform negotiation - it can result empty.\r\nSo either you would need move those definitions so that they use initialized Platform prop (so either into project files or into .target file or into an explicit import file which will be imported after Platform is set) or stop relying on it (possibly e.g. via using artifacts output? https://learn.microsoft.com/en-us/dotnet/core/sdk/artifacts-output)",
        "createdAt": "2024-03-27T14:50:27Z",
        "updatedAt": "2024-03-27T14:50:27Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "Artifacts Output isn't an option - as the vcxproj in the attached sample project can't use them, or I'd have to recreate that within vcxproj.\r\n\r\nSo \u2026 if I were to set `OutputPath` relying on `Platform` in Directory.Build.targets, it should work, because the Platform is set in `Microsoft.Cpp.props` or `Microsoft.Cpp.targets` instead of `Microsoft.Cpp.Default.props`.\r\n\r\nI'll check that later, when I have access to my Windows dev machine.",
        "createdAt": "2024-03-27T18:54:16Z",
        "updatedAt": "2024-03-27T18:54:16Z",
        "author": {
          "login": "AliveDevil"
        }
      },
      {
        "body": "Checked, and it required some trial and error.\r\nIt looks like with Directory.Build.props defining BaseOutput and BaseIntermediate it is enough to keep the NuGet-files in the artifacts-path.\r\n\r\nI cannot set IntermediateOutputPath, OutputPath, IntDir and OutDir in Directory.Build.targets as it is imported too late, so that NuGet imported packages store data in the wrong path (esp. CppWinRT)\r\n\r\nThus for vcxprojs the import must happen after `Microsoft.Cpp.props` but before `Microsoft.Cpp.targets`.\r\nAt the end, I settled with a `Default.Artifacts.props` file that is included in the vcxproj, with content\r\n<details>\r\n<summary>Default.Artifacts.props</summary>\r\n\r\n```\r\n<Project>\r\n\t<PropertyGroup>\r\n\t\t<OutputPath Condition=\"'$(Platform)' == 'AnyCPU'\">$(BaseOutputPath)$(Configuration)\\</OutputPath>\r\n\t\t<OutputPath Condition=\"'$(Platform)' != 'AnyCPU'\">$(BaseOutputPath)$(Platform)\\$(Configuration)\\</OutputPath>\r\n\t\r\n\t\t<IntermediateOutputPath Condition=\"'$(Platform)' == 'AnyCPU'\">$(BaseIntermediateOutputPath)$(Configuration)\\</IntermediateOutputPath>\r\n\t\t<IntermediateOutputPath Condition=\"'$(Platform)' != 'AnyCPU'\">$(BaseIntermediateOutputPath)$(Platform)\\$(Configuration)\\</IntermediateOutputPath>\r\n\t\r\n\t\t<OutDir>$(OutputPath)</OutDir>\r\n\t\t<IntDir>$(IntermediateOutputPath)</IntDir>\r\n\t\r\n\t\t<GeneratedFilesDir>$(IntermediateOutputPath)Generated Files\\</GeneratedFilesDir>\r\n\t</PropertyGroup>\r\n</Project>\r\n```\r\n</details>\r\n\r\nFeels a bit hacky.",
        "createdAt": "2024-03-28T12:34:11Z",
        "updatedAt": "2024-03-28T12:34:11Z",
        "author": {
          "login": "AliveDevil"
        }
      },
      {
        "body": "Btw. would moe projects be involved - you can still import the declarations, they just would need to be in an explicitly imported msbuild file - that way the implicit imports are processed before the explicit import",
        "createdAt": "2024-04-02T10:15:34Z",
        "updatedAt": "2024-04-02T10:15:34Z",
        "author": {
          "login": "JanKrivanek"
        }
      }
    ]
  }
}