{
  "number": 3352,
  "title": "Evaluating project file from .Net Core application throws StackOverflowException",
  "body": "### Steps to reproduce\r\n\r\nI'm trying to evaluate project file from .Net Core application using `Microsoft.Build` packages. Target project uses `Microsoft.NET.Sdk`. The approach is similar to `Microsoft.Build.Locator` package, where `Microsoft.Build` dependencies are marked with `ExcludeAssets=\"runtime\"`. Instead loading them from application directory, the application uses `AppDomain.CurrentDomain.AssemblyResolve` to load assemblies from SDK directory.\r\n\r\nYou can find sample over here: https://github.com/kovalikp/MSBuildCoreTest\r\n\r\n### Expected  behavior\r\n\r\nBeing able to load project get list of targets from project file.\r\n\r\n### Actual behavior\r\n\r\nApplication crashes on `Exception Unhandled: System.StackOverflowException`. Exception does not have stack trace or any other useful data.\r\n\r\n### Environment data\r\n\r\nOS info:\r\nWindows 10\r\nVersion\t10.0.17134 Build 17134\r\n\r\nMicrosoft Visual Studio Enterprise 2017 \r\nVersion 15.7.2\r\nVisualStudio.15.Release/15.7.2+27703.2018\r\n\r\nProject target framework:\r\nnetcoreapp2.0\r\n\r\nNuGet package \r\nMicrosoft.Build 15.7.179\r\n\r\ndotnet \r\nsdk 2.1.201\r\n",
  "state": "CLOSED",
  "createdAt": "2018-05-27T13:06:53Z",
  "updatedAt": "2024-02-21T17:12:57Z",
  "closedAt": "2018-11-19T16:53:30Z",
  "author": {
    "login": "kovalikp"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "I ran into the same issue. I was able to work around it by not excluding the assets from the MSBuild nuget packages, delivering them with my application, and disabling my custom MSBuildLocator. I would prefer to simply load the version supplied in the dotnet SDK since the workaround makes my deliverable much bigger.",
        "createdAt": "2018-08-17T17:51:29Z",
        "updatedAt": "2018-08-17T17:51:29Z",
        "author": {
          "login": "JoeRobich"
        }
      },
      {
        "body": "I found a preferable work around. Instead of including the package assets, if I load the MSBuild assemblies from the dotnet sdk folder upfront (`Assembly.LoadFrom`), everything works as expected.",
        "createdAt": "2018-08-27T20:05:16Z",
        "updatedAt": "2018-08-27T20:05:16Z",
        "author": {
          "login": "JoeRobich"
        }
      }
    ]
  }
}