{
  "number": 557,
  "title": "Versioning scheme for package, assembly, and file versions",
  "body": "On xplat, we use different version numbers for packages (e.g. 0.1.0-preview-00022-160326), and assemblies and file versions (e.g. 14.1.0.0).\n\nWe should come up with a consistent story where we use one common set of version number seeds to generate package versions, assembly versions, and file versions. We should also define what is the version number relationship between multiple targeted platforms (#556)\n",
  "state": "CLOSED",
  "createdAt": "2016-04-07T22:02:31Z",
  "updatedAt": "2024-02-21T17:28:35Z",
  "closedAt": "2016-10-21T22:12:02Z",
  "author": {
    "login": "cdmihai"
  },
  "labels": [
    "needs-design",
    "packaging",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "jeffkl"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "# Proposal\n\nBuild numbers will be defined with major.minor[-tag] in the `version.json`.  The build number will remain as `0` while the git commit height and build definition's revision will be appended to the tag.  The build definition's build number is currently set to `$(Date:yyyyDDmm)(Rev:.r)` which generates build numbers like `20160918.1`.  Local builds will use a revision of just 0.\n\n# Example\n\nversion.json\n\n``` json\n{\n  \"version\": \"15.1-preview\",\n  \"publicReleaseRefSpec\": [\n    \"^refs/heads/master$\",\n    \"^refs/heads/xplat$\"\n  ]\n}\n```\n- Major version: `15`\n- Minor version: `1`\n- Prerelease tag `-preview`\n\nBuild number from official build\n`20161017.1`\n\nThe resulting NuGet package version would be `15.1.0-preview-000333-01`.  If we did multiple builds in a single day, the revision would increment giving is the ability to publish 99 packages per day.\n\n# Required changes\n1. The build definition will need to be updated to include 2 digits of the revision.  If it's left at 1, we can only publish 9 packages per day.\n2. Update `version.json` with the correct prerelease tag\n3. Add target to `CreateNuGetPackages.proj` like this:\n\n``` xml\n  <Target Name=\"GetNuGetPackageVersionEx\" DependsOnTargets=\"GetNuGetPackageVersion\">\n\n    <PropertyGroup>\n      <_BuildRevisionRegEx>\\d{8}\\.(?&lt;Revision&gt;\\d{1,2})</_BuildRevisionRegEx>\n    </PropertyGroup>\n\n    <!-- Display an error if the build number from VSTS is not in the format yyyyMMdd-r -->\n    <Error Text=\"The BUILD_NUMBER property '$(BUILD_NUMBER)' is not in the expected format.  Expected the format of '$(_BuildRevisionRegEx)'.\" Condition=\"'$(BUILD_NUMBER)' != '' And !$([System.Text.RegularExpressions.Regex]::IsMatch($(BUILD_NUMBER), $(_BuildRevisionRegEx)))\" />\n\n    <!--\n    This target is used to customize the versions generated by NerdBank.GitVersioning.  The $(PrereleaseVersion) is read from version.json and\n    then the date and build number is appended.\n  -->\n    <PropertyGroup>\n      <BuildNumber>0</BuildNumber>\n      <!-- Local builds always have a revision of 00 -->\n      <BuildRevision Condition=\"'$(BUILD_NUMBER)' == ''\">00</BuildRevision>\n\n      <!-- Official builds have a revision starting with 01 every day -->\n      <BuildRevision Condition=\"'$(BUILD_NUMBER)' != ''\">$([System.Int32]::Parse($([System.Text.RegularExpressions.Regex]::Match($(BUILD_NUMBER), $(_BuildRevisionRegEx)).Groups[\"Revision\"].Value)).ToString('D2'))</BuildRevision>\n\n      <PrereleaseVersion Condition=\"'$(PrereleaseVersion)' != '' And '$(BuildVersionNumberComponent)' != ''\">$(PrereleaseVersion)-$([System.Int32]::Parse($(BuildVersionNumberComponent)).ToString('D6'))-$(BuildRevision)</PrereleaseVersion>\n\n      <!-- Override the NuGet package version provided by Nerdbank.GitVersioning -->\n      <NuGetPackageVersion>$(MajorMinorVersion).$(BuildNumber)$(PrereleaseVersion)</NuGetPackageVersion>\n    </PropertyGroup>\n  </Target>\n```\n\nLet me know what you think @cdmihai, @AndyGerlicher, and @rainersigwald \n",
        "createdAt": "2016-10-17T20:18:21Z",
        "updatedAt": "2016-10-18T22:37:02Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "99/day should be enough for anyone! /ducks\n\nThis sounds fine. Do we need NerdBank.GitVersioning any more? I guess it still gives us commit ID version stamping into the binaries--but anything else?\n",
        "createdAt": "2016-10-17T20:33:13Z",
        "updatedAt": "2016-10-17T20:33:13Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Yes, the commit ID is more important for the assembly versions.  My proposal doesn't cover that yet, I think I need to have a quick discussion on what we want there.\n\nI don't think we need it personally.  The CLI runs a git.exe command to get the commit height which we could use.  \n",
        "createdAt": "2016-10-17T22:05:02Z",
        "updatedAt": "2016-10-17T22:05:02Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "Looks good.\n- We won't publish separate nuget packages for desktop / xplat / mono? build flavors right? Both desktop and xplat dlls ship together in the same nuget package (and in future mono?). Asking because otherwise this scheme would lead to version conflicts.\n- Watch out for the nuget version length limitation of 20 characters. [The limitation got taken out today.](https://github.com/NuGet/Home/issues/2735) but it may take some time to propagate to our repo.\n",
        "createdAt": "2016-10-18T00:46:44Z",
        "updatedAt": "2016-10-18T00:46:51Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "> We won't publish separate nuget packages for desktop / xplat / mono? build flavors right?\n\nWe technically published packages out of master and xplat but they have different versioning schemes.  Packages out of master are `0.1.0` and will go away soon.\n\n> Watch out for the nuget version length limitation of 20 characters.\n\nI did take this into account, we'll need to be careful of the prerelease tag we use.  `Preview` is nice and short and works well, but something like `prerelease` gets us closer to the limit.\n",
        "createdAt": "2016-10-18T13:46:19Z",
        "updatedAt": "2016-10-18T13:46:19Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "So I followed Mihai's link and wandered into a discovery that apparently SemVer 2.0 suggests [using dots instead of hyphens in the pre-release identifiers](http://semver.org/#spec-item-9), suggesting that `15.1.0-preview.20161017.01` is preferable to `15.1.0-preview-20161017-01`.\n\nI don't care about SemVer whatsoever but it might be better to go with the flow. Though the hyphenated world you're proposing matches more closely with what corefx and friends are doing. So maybe ignore this whole thing \ud83d\ude25 \n",
        "createdAt": "2016-10-18T15:13:08Z",
        "updatedAt": "2016-10-18T15:13:08Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> Apparently SemVer 2.0 suggests using dots instead of hyphens in the pre-release identifiers\n\nI didn't read it as suggesting one way or the other but that's still interesting to know.  I think we're better off sticking with the schema we've seen other teams at MS use.  The tag will go away when we release anyway, so I'm not sure if it really matters.\n",
        "createdAt": "2016-10-18T16:32:32Z",
        "updatedAt": "2016-10-18T16:32:32Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "Per Andy, I'm switching to using the git commit height.\n",
        "createdAt": "2016-10-18T22:37:19Z",
        "updatedAt": "2016-10-18T22:37:19Z",
        "author": {
          "login": "jeffkl"
        }
      }
    ]
  }
}