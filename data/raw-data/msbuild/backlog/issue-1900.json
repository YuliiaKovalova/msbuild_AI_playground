{
  "number": 1900,
  "title": "ResolveComReference task fails when executing build from child AppDomain",
  "body": "I've run into following problem, when trying to execute build in child app domain of main process:\r\n\r\n```\r\nInvoke-MSBuild : C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\MSBuild\\15.0\\Bin\\Microsoft.Common.CurrentVersion.targets(2545,5): \r\nerror MSB4061: The \"ResolveComReference\" task could not be instantiated from \"Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\". \r\nCould not load file or assembly 'Microsoft.Build, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies.\r\nThe system cannot find the file specified.\r\n```\r\nThe issue appears to be caused by fact that build is being run from child app domain of main process (powershell.exe in my case). `ResolveComReference` (extended from `AppDomainIsolatedTaskExtension`) does not use ApplicationBase of child appdomain, but instead uses ApplicationBase of parent PowerShell process.\r\n\r\nLog from Fuslogvw.exe (Assembly Binding Log Viewer)\r\n```\r\n*** Assembly Binder Log Entry  (2017-03-22 @ 22:53:23) ***\r\n\r\nThe operation failed.\r\nBind result: hr = 0x80070002. The system cannot find the file specified.\r\n\r\nAssembly manager loaded from:  C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\clr.dll\r\nRunning under executable  C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\r\n--- A detailed error log follows. \r\n\r\n=== Pre-bind state information ===\r\nLOG: DisplayName = Microsoft.Build, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\r\n (Fully-specified)\r\nLOG: Appbase = file:///C:/Windows/System32/WindowsPowerShell/v1.0/\r\nLOG: Initial PrivatePath = NULL\r\nLOG: Dynamic Base = NULL\r\nLOG: Cache Base = NULL\r\nLOG: AppName = powershell.exe\r\nCalling assembly : (Unknown).\r\n===\r\nLOG: This bind starts in default load context.\r\nLOG: No application configuration file found.\r\nLOG: Using host configuration file: \r\nLOG: Using machine configuration file from C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\config\\machine.config.\r\nLOG: GAC Lookup was unsuccessful.\r\nLOG: Attempting download of new URL file:///C:/Windows/System32/WindowsPowerShell/v1.0/Microsoft.Build.DLL.\r\nLOG: Attempting download of new URL file:///C:/Windows/System32/WindowsPowerShell/v1.0/Microsoft.Build/Microsoft.Build.DLL.\r\nLOG: Attempting download of new URL file:///C:/Windows/System32/WindowsPowerShell/v1.0/Microsoft.Build.EXE.\r\nLOG: Attempting download of new URL file:///C:/Windows/System32/WindowsPowerShell/v1.0/Microsoft.Build/Microsoft.Build.EXE.\r\nLOG: All probing URLs attempted and failed.\r\n```",
  "state": "OPEN",
  "createdAt": "2017-03-22T22:28:18Z",
  "updatedAt": "2024-02-21T16:37:08Z",
  "closedAt": null,
  "author": {
    "login": "kovalikp"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "I think MSBuild might need to set a resolution hook for its own assemblies when starting the new appdomain for an isolated task.\r\n\r\nThis was also the root cause of https://github.com/tunnelvisionlabs/antlr4cs/issues/173.",
        "createdAt": "2017-03-22T22:30:27Z",
        "updatedAt": "2017-03-22T22:30:27Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I would love to see this fixed. This issue prevents us from using live unit testing in a project",
        "createdAt": "2019-01-15T06:22:37Z",
        "updatedAt": "2019-01-15T06:22:37Z",
        "author": {
          "login": "PaulVrugt"
        }
      },
      {
        "body": "I'm in the same boat. This is preventing my team from using live unit testing as well.\r\n\r\nThis issue is linked by the following MS Dev Community problem: \r\nhttps://developercommunity.visualstudio.com/content/problem/309213/live-unit-testing-not-starting-when-having-a-com-r.html",
        "createdAt": "2019-01-18T17:00:44Z",
        "updatedAt": "2019-01-18T17:05:52Z",
        "author": {
          "login": "bartsipes"
        }
      },
      {
        "body": "This is still causing issues with Live Unit testing in VS 2019.\r\n\r\nSee https://developercommunity.visualstudio.com/content/problem/402919/live-unit-testing-doesnt-work-with-xamarinforms-in.html\r\n",
        "createdAt": "2019-03-11T09:16:02Z",
        "updatedAt": "2019-03-11T09:16:02Z",
        "author": {
          "login": "stevehurcombe"
        }
      },
      {
        "body": "I'm also having trouble with this. The workaround suggested [here](https://developercommunity.visualstudio.com/content/problem/309213/live-unit-testing-not-starting-when-having-a-com-r.html) doesn't seem to be accurate any more. The suggested workaround:\r\n\r\n> Copy System.Runtime.InteropServices.RuntimeInformation.dll present under \r\n> C:\\Program Files (x86)\\Microsoft Visual Studio\\Preview\\Enterprise\\Common7\\IDE\\PrivateAssemblies\\ to \r\n> C:\\Program Files (x86)\\Microsoft Visual Studio\\Preview\\Enterprise\\Common7\\ServiceHub\\Hosts\\ServiceHub.Host.CLR.x86\\. (Change the paths to match your local VS install location.)\r\n\r\nProblem is, that dll doesn't exist at that path in my installation (VS 2019, 16.2.4). I can find it in 17 other locations, but I wouldn't know which one to copy, if this is still a viable way to fix it.\r\n\r\nResult of a search for the file:\r\n\r\n![2019_09_13_14_57_25](https://user-images.githubusercontent.com/1224973/64864245-fea03100-d636-11e9-87e6-6dd206429ec9.png)\r\n",
        "createdAt": "2019-09-13T13:00:02Z",
        "updatedAt": "2019-09-13T13:00:02Z",
        "author": {
          "login": "mavaa"
        }
      }
    ]
  }
}