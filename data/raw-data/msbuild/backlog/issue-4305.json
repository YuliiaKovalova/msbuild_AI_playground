{
  "number": 4305,
  "title": "Inconsistency in item expansion",
  "body": "I'm not really sure if it's a bug or by design, but I've found an inconsistency in how properties are expanded to items.\r\n\r\nIt looks like they don't get split on `;` if you use a property function in the expression, unless you do that manually with `string.Split`.\r\n\r\nIf this is by design, is this documented somewhere? The closest documentation I could find was [there](https://docs.microsoft.com/en-us/visualstudio/msbuild/comparing-properties-and-items?view=vs-2019#conversions-between-strings-and-item-lists) but it doesn't go into details.\r\n\r\n### Steps to reproduce\r\n\r\nBuild this:\r\n\r\n```xml\r\n<Project InitialTargets=\"Build\">\r\n  <PropertyGroup>\r\n    <PropA>foo;bar;baz</PropA>\r\n    <PropB>$(PropA)</PropB>\r\n    <PropC>$(PropA.ToLower())</PropC>\r\n    <PropD>$(PropA.ToLower().Split(';'))</PropD>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <ItemA Include=\"$(PropA)\" />\r\n    <ItemB Include=\"$(PropB)\" />\r\n    <ItemC Include=\"$(PropC)\" />\r\n    <ItemD Include=\"$(PropD)\" />\r\n  </ItemGroup>\r\n\r\n  <Target Name=\"Build\">\r\n    <Message Importance=\"High\" Text=\"ItemA: @(ItemA, '|')\" />\r\n    <Message Importance=\"High\" Text=\"ItemB: @(ItemB, '|')\" />\r\n    <Message Importance=\"High\" Text=\"ItemC: @(ItemC, '|')\" />\r\n    <Message Importance=\"High\" Text=\"ItemD: @(ItemD, '|')\" />\r\n  </Target>\r\n</Project>\r\n```\r\n\r\n### Expected  behavior\r\n\r\n```\r\n  ItemA: foo|bar|baz\r\n  ItemB: foo|bar|baz\r\n  ItemC: foo|bar|baz\r\n  ItemD: foo|bar|baz\r\n```\r\n\r\n### Actual behavior\r\n\r\n```\r\n  ItemA: foo|bar|baz\r\n  ItemB: foo|bar|baz\r\n  ItemC: foo;bar;baz\r\n  ItemD: foo|bar|baz\r\n```\r\n\r\nNotice the difference in `ItemC`:\r\n\r\n![image](https://user-images.githubusercontent.com/7913492/56100499-a0e9aa80-5f19-11e9-8553-8f3e6e2471dc.png)\r\n\r\ndespite all properties having the same value:\r\n\r\n![image](https://user-images.githubusercontent.com/7913492/56100509-c2e32d00-5f19-11e9-9eae-fdf5f7c71c8a.png)\r\n\r\n### Environment data\r\n\r\nMicrosoft (R) Build Engine version 16.0.461+g6ff56ef63c for .NET Framework\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n16.0.461.62831\r\n\r\n\r\n\r\n",
  "state": "CLOSED",
  "createdAt": "2019-04-14T23:02:47Z",
  "updatedAt": "2024-02-21T17:08:40Z",
  "closedAt": "2019-04-25T18:44:48Z",
  "author": {
    "login": "ltrzesniewski"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "I don't know if it's a bug or by design either, but it's now The Way It Is.\r\n\r\nWhat's causing this is that the MSBuild engine internally has two types of string: escaped and unescaped. There's some documentaiton on [what characters get escaped](https://docs.microsoft.com/visualstudio/msbuild/msbuild-special-characters). Strings returned from property functions are escaped, so that when they're consumed in other ways you get literal semicolons instead of element-delimiting ones.\r\n\r\nYou can treat the output of a property function in the normal way by wrapping the property function `$([MSBuild]::Unescape())` around the property function you're using:\r\n\r\n```diff\r\ndiff --git a/repro.csproj b/repro.csproj\r\nindex 0d63bbb..b323608 100644\r\n--- a/repro.csproj\r\n+++ b/repro.csproj\r\n@@ -2,7 +2,7 @@\r\n   <PropertyGroup>\r\n     <PropA>foo;bar;baz</PropA>\r\n     <PropB>$(PropA)</PropB>\r\n-    <PropC>$(PropA.ToLower())</PropC>\r\n+    <PropC>$([MSBuild]::Unescape($(PropA.ToLower())))</PropC>\r\n     <PropD>$(PropA.ToLower().Split(';'))</PropD>\r\n   </PropertyGroup>\r\n ```\r\n\r\nWe should at least add a paragraph to the property-function doc page indicating that return values are escaped strings.",
        "createdAt": "2019-04-15T15:32:00Z",
        "updatedAt": "2019-04-15T15:32:00Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@ltrzesniewski would https://github.com/MicrosoftDocs/visualstudio-docs/pull/3082 help?",
        "createdAt": "2019-04-15T15:41:47Z",
        "updatedAt": "2019-04-15T15:41:47Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Thanks for the explanation! The docs change is helpful.\r\n\r\nI wasn't aware strings can have two different types internally, so I think adding that info to the docs would also be useful. This issue is confusing because neither MSBuild nor the Structured Log Viewer tell you that a given string is escaped.\r\n",
        "createdAt": "2019-04-15T15:54:27Z",
        "updatedAt": "2019-04-15T15:54:27Z",
        "author": {
          "login": "ltrzesniewski"
        }
      }
    ]
  }
}