{
  "number": 7348,
  "title": "[Feature Request] Add an option to error out when not incremental",
  "body": "### Feature Request\r\n## Add an option to MSBuild.exe:\r\n1) [Discussion] Add an option to MSBuild to enable this mode.  It can either warn or error.  In the case to warn, only issue one warning per (? project or node).  ie.  msbuild.exe -i:error\r\n1) Error out once a \\<Target\\> with Inputs and Output detects files are out of date.  \r\n1) Error out in ToolTask when SkipTaskExecution returns false.\r\n1) Error out in WriteLinesToFile task when WriteOnlyWhenDifferent is true and write is engaged.\r\n1) Error out in Copy task when SkipUnchangedFiles is true and copy operation is engaged.\r\n1) ... other task ... ?  Other task could be added later.\r\n1) Expose this property that is accessible from 3rd task.\r\n\r\n\r\n### Reason\r\nThe two use case that comes to mind is testing and investigation.  At the moment, its very hard to test if the build is incremental.  At status quo, the incremental build is just a shorter build.  Its hard prove that the shorter build is truly incremental.  A test can parse the log but that is not consistent and requires a custom tests for each target/task.\r\nWhen there is an incremental issue, investigation is slow because parsing the log is hard as Task and Targets print different messages and its difficult to determine which was the first item that broke incremental.  Adding a universal message can help but it might not suit all use cases.  Another benefit of an error is the shorter rerun time.  \r\n\r\nI scoped the feature down to minimal and non-breaking.  Other solution exists and open for discussion.\r\n\r\nThanks.",
  "state": "CLOSED",
  "createdAt": "2022-01-28T21:41:04Z",
  "updatedAt": "2024-02-21T14:10:00Z",
  "closedAt": "2023-04-04T20:02:18Z",
  "author": {
    "login": "yuehuang010"
  },
  "labels": [
    "Partner request",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Are there uses for this outside people who work on dev tools? It doesn't solve all your problems, but you can identify an incremental build by the number of projects not up-to-date when the build summarizes its results:\r\n========== Build: 30 succeeded, 0 failed, 0 up-to-date, 0 skipped ==========\r\nvs.\r\n========== Build: 0 succeeded, 0 failed, 30 up-to-date, 0 skipped ==========\r\n\r\nAlternatively, you can add something [here](https://github.com/dotnet/msbuild/blob/de1d7a295d709c3a748cc46cd5dc9bddd624ea46/src/Build/BackEnd/Components/RequestBuilder/TargetEntry.cs#L4660 that sends that error or not depending on dependencyResult. I'm just not sure I see the widespread customer impact, currently.",
        "createdAt": "2022-02-03T00:20:24Z",
        "updatedAt": "2022-02-03T00:20:24Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "I believe incremental should be a first party feature and tooling should enable testing of the feature.  A long that line, the feature will allow tool authors a way to tests incrementality, which in turn leads to better experience for those using the product.\r\n\r\nThe fast up to date check is an IDE feature to estimate the inputs and outputs of the build.  Fast UTD doesn't work on the command line also Fast UTD doesn't works well with 3rd party extensions.  Another way to approach the problem is to move Fast UTD to into MSBuild.  It will be a more complex solution, but I am down if that path is chosen.",
        "createdAt": "2022-02-03T01:05:05Z",
        "updatedAt": "2022-02-03T01:05:05Z",
        "author": {
          "login": "yuehuang010"
        }
      },
      {
        "body": "The feature is similar to make --question.\r\n````\r\n\u2018-q\u2019\r\n\u2018--question\u2019\r\n\u201cQuestion\u201d. Silently check whether the targets are up to date, but do not execute recipes;\r\n the exit code shows whether any updates are needed.\r\n````",
        "createdAt": "2022-09-01T21:55:09Z",
        "updatedAt": "2022-09-01T21:55:09Z",
        "author": {
          "login": "yuehuang010"
        }
      }
    ]
  }
}