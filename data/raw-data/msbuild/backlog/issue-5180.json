{
  "number": 5180,
  "title": "Improve RemoveDependenciesFromEntryIfMissing() when there is a lot of input files.",
  "body": "### Steps to reproduce\r\nCreate a C++ Project with 300+ files.  For simplicity, each file is a clones, named fromo file1.cpp to file file300.cpp.  MSBuild project can use <ClCompile Include=\"file*.cpp\" />\r\n```\r\n#include <windows.h>\r\n#include <__msvc_all_public_headers.hpp>\r\nint somefunction() { return 0; }\r\n```\r\n\r\nmsbuild.exe /t:ClCompile /p:UseMultiToolTask=true\r\n\r\nI added some telemetry:\r\nPostExecuteTool Part 1: 414ms\r\nPostExecuteTool Part 2: 493ms\r\nPostExecuteTool Part 2.1: 531ms\r\nPostExecuteTool Part 2.2: 4800ms<!-- Jump here is only calling RemoveDependenciesFromEntryIfMissing()\r\nPostExecuteTool Part 3: 4967ms\r\nPostExecuteTool Total: 5019ms\r\n\r\n### Expected behavior\r\nRemoveDependenciesFromEntryIfMissing() should take less time.  100ms or less.\r\n\r\n### Actual behavior\r\nRemoveDependenciesFromEntryIfMissing() is took 4 seconds.\r\n\r\n### Notes:\r\nCanonicalTrackedInputFiles.RemoveDependenciesFromEntryIfMissing() has a N^2 loop that is calling FileExists().  Adding a simple cache would speed up this process timing a lot.\r\n\r\nOS info:\r\nWindows 10, running under VS developer command prompt.",
  "state": "CLOSED",
  "createdAt": "2020-03-17T21:37:54Z",
  "updatedAt": "2024-02-21T17:04:40Z",
  "closedAt": "2020-06-24T19:01:47Z",
  "author": {
    "login": "yuehuang010"
  },
  "labels": [
    "Area: Performance",
    "Partner request",
    "Area: C++ tasks and targets",
    "Area: FileTracker",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "benvillalobos"
      }
    ]
  },
  "milestone": {
    "title": "MSBuild 16.7 Preview 4"
  },
  "comments": {
    "nodes": [
      {
        "body": "So current status is that it definitely won't be making it into P2, so apologies for that. But this is now the #1 item on my plate. After getting a more detailed explanation on this area of code  and being able to debug it more (thanks Rainer), you'll hopefully be seeing more activity on my end.",
        "createdAt": "2020-05-21T23:53:25Z",
        "updatedAt": "2020-05-21T23:53:25Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "Notes as I go: A lot of the dependency files are checked whether or not they exist hundreds of times. Using a simple HashSet to store all of the files that were detected in the file check, I was able to bring down the time in the worst case from 860msec to 28msec (using a stopwatch capturing the outer for-loop and logging that to a file). But as you can see, it's a significant improvement.\r\n\r\nQuestion: Let's say a file was not found in first iteration of this function during a build, is it worth continually checking for that file further along in the build? My current implementation is a straightforward \"have we seen that the file exists already? if so, never look for it again\", do I need to consider scenarios where perhaps the file no longer exists, or the file didn't exist originally, but shows up at a later point?\r\n\r\n//cc: @rainersigwald ",
        "createdAt": "2020-05-27T23:19:24Z",
        "updatedAt": "2020-05-27T23:19:24Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "It is probably safe to the assume that HashSet is good for the lifetime of the class.  A smarter system could share with a global system and only need to check the \"write\" logs as the write is the only difference.  \r\n\r\nCould also take a look at the Constructor?  I stopwatched it taking 400ms (while not as much as RemoveDependenciesFromEntryIfMissing()), I expected it to take only 40-50ms.  I refactored disk access from the timer and it still took the same time, thus issue is somewhere else.  \r\n\r\n*edit* I should add when I say Constructor() I really meant the function ConstructDependencyTable().  This inner loop is also a great candidate for parallel foreach.  \r\n\r\nThanks.\r\n",
        "createdAt": "2020-05-28T04:08:53Z",
        "updatedAt": "2020-05-28T04:33:40Z",
        "author": {
          "login": "yuehuang010"
        }
      }
    ]
  }
}