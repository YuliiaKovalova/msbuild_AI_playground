{
  "number": 5683,
  "title": "Support tlbreference (for registration-free COM) in TlbReference Task",
  "body": "When using `<ComFileReference>` items, tlbimp is invoked for each one separately, and any `importlib` references to other typelibs are expected to resolve through the registry. This can fail if the typelibs are use importlib to reference one another, but are not entered in the registry, e.g. building on CI with artifacts retrieved by a package manager, or importing from a COM server DLL which also contain a WinSxS manifest and is intended for ues via [registration-free COM](https://docs.microsoft.com/en-us/dotnet/framework/interop/configure-net-framework-based-com-components-for-reg).\r\n\r\ntlbimp.exe does support this use-case, via its [`/tlbreference` command-line switch](https://docs.microsoft.com/en-us/dotnet/framework/tools/tlbimp-exe-type-library-importer). But while TlbReference.GenerateWrapper does support `/reference` in both the tool paths https://github.com/dotnet/msbuild/blob/e70a3159d64f9ed6ec3b60253ef863fa883a99b1/src/Tasks/TlbReference.cs#L174\r\nit does not seem to in the non-tool path, and neither supports the use of /tlbreference\r\nhttps://github.com/dotnet/msbuild/blob/e70a3159d64f9ed6ec3b60253ef863fa883a99b1/src/Tasks/TlbReference.cs#L261\r\n\r\nIt would be nice if there was support for a `<TlbReference>` property in within the `<ComFileReference>` item, or (maybe even better) some easy way, perhpas even just on-by-default, to simple make all typelibs mentioned by `<ComFileReference>` items available to mutually satisfy each other's importlib references, falling back to the registry only for a libid not found among the explicitly-named files.\r\n\r\nFor even more bonus points, it would be wonderful if this could (presumably optionally) generate the appropriate `<dependentAssembly>` manifest from `<ComFileReference>` items that have an `<assemblyIdentity>`.\r\n\r\nFor the non-tool path, an easy way to achieve this would just be to LoadLibrary on each typelib mentioned by `<ComFileReference>` before beginning to translate any of them. From previous experience, the implementation of ITypeInfo::GetRefTypeInfo seems to be able to find things in already-loaded typelibraries even if they are not in the registry. For the external tool path, that could involve passing a number of `/tlbreference:path` options, some probably unnecessary.\r\n\r\nThis is not really an issue for `<COMReference>` items, since those are themselves looked-up via the registry, so it seems reasonable to expect that their dependencies would be registered as well.",
  "state": "OPEN",
  "createdAt": "2020-08-27T17:42:00Z",
  "updatedAt": "2024-02-21T16:28:59Z",
  "closedAt": null,
  "author": {
    "login": "puetzk"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Need to do some re-testing; this may become a bigger more of an issue after #8980 gets fixed, since some .tlb files were apparently getting registered inadvertently (which might have been helping builds succeed, albeit not in the intended way).",
        "createdAt": "2023-06-29T23:10:20Z",
        "updatedAt": "2023-06-29T23:10:20Z",
        "author": {
          "login": "puetzk"
        }
      },
      {
        "body": "\r\n> For the non-tool path, an easy way to achieve this would just be to LoadLibrary on each typelib \r\n\r\nActually, (since that issue pointed out a place where the tlbimp.exe code can be seen) it looks like this may be most of what `/tlbreference` does anyway. it [builds a list of paths](https://github.com/clrinterop/TypeLibraryImporter/blob/b76f55e11cca50c647ebf444e4d884fa85d0cbfb/TlbImp/TlbImp.cs#L345-L360), [loads each file](https://github.com/clrinterop/TypeLibraryImporter/blob/b76f55e11cca50c647ebf444e4d884fa85d0cbfb/TlbImp/tlbimpcode.cs#L190-L201), [stores the pointers in `s_RefTypeLibraries`](https://github.com/clrinterop/TypeLibraryImporter/blob/b76f55e11cca50c647ebf444e4d884fa85d0cbfb/TlbImp/tlbimpcode.cs#L559)\r\n\r\nIt does then plug these into TypeLibResolverHelper, but just having loaded them up front is enough for `ITypeInfo::GetRefTypeInfo(HREFTYPE)` to work, so that's most of it...",
        "createdAt": "2023-06-29T23:12:44Z",
        "updatedAt": "2023-06-29T23:12:44Z",
        "author": {
          "login": "puetzk"
        }
      }
    ]
  }
}