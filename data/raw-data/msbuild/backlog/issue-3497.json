{
  "number": 3497,
  "title": "Support setting a root output path for all projects in a repo or solution with a single property",
  "body": "Currently there are several different properties that control where project output goes.  If you want all project output for a repo to go under a single folder, it is certainly possible to set this up, but it involves setting several properties, and knowing how to include `$(MSBuildProjectName)` as part of the path.  For example, you can put the following in a Directory.Build.props file (assuming all your projects use Microsoft.NET.Sdk):\r\n\r\n```xml\r\n<RepoRoot>$([System.IO.Path]::GetFullPath('$(MSBuildThisFileDirectory)'))</RepoRoot>\r\n<BaseOutputPath>$(RepoRoot)artifacts\\bin\\$(MSBuildProjectName)\\</BaseOutputPath>\r\n<BaseIntermediateOutputPath>$(RepoRoot)artifacts\\obj\\$(MSBuildProjectName)\\</BaseIntermediateOutputPath>\r\n```\r\n\r\nWe would like to add a single property (for example `RootOutputPath`) that handles this automatically.\r\n\r\nSee also https://github.com/dotnet/sdk/issues/867\r\n",
  "state": "CLOSED",
  "createdAt": "2018-07-09T22:01:45Z",
  "updatedAt": "2024-02-21T17:12:24Z",
  "closedAt": "2023-07-18T20:42:54Z",
  "author": {
    "login": "dsplaisted"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "MSBuild 16.6"
  },
  "comments": {
    "nodes": [
      {
        "body": "Straw man:\r\n\r\n- OutputPath: `<RootOutputPath>\\bin\\<MSBuildProjectName>\\<Configuration>\\[Platform]\\[TargetFramework]\\[RuntimeIdentifier]`\r\n- IntermediateOutputPath: `<RootOutputPath>\\obj\\<MSBuildProjectName>\\<Configuration>\\[Platform]\\[TargetFramework]\\[RuntimeIdentifier]`\r\n- PackageOutputPath: `<RootOutputPath>\\packages\\<Configuration>`",
        "createdAt": "2018-07-09T22:50:30Z",
        "updatedAt": "2018-07-09T22:50:30Z",
        "author": {
          "login": "dsplaisted"
        }
      },
      {
        "body": "I found that I also need to default the `$(Configuration)` to `Debug` otherwise it will misplace the `obj` after a `git clean`. Here's what I arrived at:\r\n\r\nDirectory.Build.props\r\n```xml\r\n<Project>\r\n\r\n  <PropertyGroup>\r\n    <Configuration Condition=\"$(Configuration) == ''\">Debug</Configuration>\r\n    <RepoRoot>$([System.IO.Path]::GetFullPath('$(MSBuildThisFileDirectory)\\..\\..\\'))</RepoRoot>\r\n    <BaseOutputPath>$(RepoRoot)bin\\$(Configuration)\\$(MSBuildProjectName)\\</BaseOutputPath>\r\n    <BaseIntermediateOutputPath>$(RepoRoot)obj\\$(Configuration)\\$(MSBuildProjectName)\\</BaseIntermediateOutputPath>\r\n  </PropertyGroup>\r\n\r\n</Project>\r\n```\r\n\r\nConsoleApp1.csproj:\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>net46</TargetFramework>\r\n    <OutputType>Exe</OutputType>\r\n    <OutDir>$(RepoRoot)bin\\$(Configuration)</OutDir>\r\n  </PropertyGroup>\r\n\r\n</Project>\r\n```",
        "createdAt": "2018-07-17T03:16:21Z",
        "updatedAt": "2018-07-17T03:16:21Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "Never mind, `$(Configuration)` isn't even set by the time Directory.Build.props is running, so my Directory.Build.props can't rely on `$(Configuration)` at all. ",
        "createdAt": "2018-07-17T03:19:26Z",
        "updatedAt": "2018-07-17T03:19:26Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "Updated straw man:\r\n\r\n- OutputPath: `<RootOutputPath>\\bin\\<MSBuildProjectName>\\[Platform]\\<Configuration>\\[TargetFramework]\\[RuntimeIdentifier]`\r\n- IntermediateOutputPath: `<RootOutputPath>\\obj\\<MSBuildProjectName>\\[Platform]\\<Configuration>\\[TargetFramework]\\[RuntimeIdentifier]`\r\n- PackageOutputPath: `<RootOutputPath>\\packages\\<Configuration>`\r\n\r\nThis swaps the position of Platform and Configuration, to match what the current logic in MSBuild and the .NET SDK use.",
        "createdAt": "2020-01-02T13:22:44Z",
        "updatedAt": "2020-01-02T13:22:44Z",
        "author": {
          "login": "dsplaisted"
        }
      },
      {
        "body": "I think the following are the files where changes need to be made to support this:\r\n\r\n - Microsoft.Common.props - Use `RootOutputPath` to calculate `BaseIntermediateOutputPath` and `MSBuildProjectExtensionsPath`\r\n- Microsoft.Common.CurrentVersion.targets - Update OutputPath and IntermediateOutputPath logic to use RootOutputPath if it's set\r\n- Microsoft.NET.DefaultOutputPaths.targets (in dotnet/sdk repo) - Use RootOutputPath in output and intermediate output path calculation\r\n\r\nWe might also be able to unify some of the logic between Microsoft.Common.CurrentVersion.targets and Microsoft.NET.DefaultOutputPaths.targets, but that may be more complex / risky than would be worth it.\r\n\r\n`RootOutputPath` should be set before the MSBuild common .props are evaluated, typically by including it in a Directory.Build.props file.  If it's not set before then (for example if it's set in the body of a project file), then all paths except the MSBuildProjectExtensionsPath should be derived from it, and a warning should be generated.  We already do this for setting `BaseIntermediateOutputPath`, for example:\r\n\r\n> warning MSB3539: The value of the property \"BaseIntermediateOutputPath\" was modified after it was used by MSBuild which can lead to unexpected build results. Tools such as NuGet will write outputs to the path specified by the \"MSBuildProjectExtensionsPath\" instead. To set this property, you must do so before Microsoft.Common.props is imported, for example by using Directory.Build.props.  For more information, please visit https://go.microsoft.com/fwlink/?linkid=869650\r\n\r\nWe should either update this warning to also cover `RootOutputPath`, or introduce a new, similar warning.",
        "createdAt": "2020-01-02T16:55:13Z",
        "updatedAt": "2020-01-02T16:55:13Z",
        "author": {
          "login": "dsplaisted"
        }
      },
      {
        "body": "This is what I came up with a while back:\r\nhttps://gist.github.com/KirillOsenkov/2330e9b358f8801d176e84dffd2e98ee",
        "createdAt": "2020-01-02T18:31:13Z",
        "updatedAt": "2020-01-02T18:31:13Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "@dsplaisted I'm not a fan of deep folder hierarchy.\r\n\r\nCan't we take all the variables that identifies as a build parameter and put them into single property and use that property in the path. That way we can reuse that property later on and also have an identifier that effectively identifies a build config.\r\n\r\n<details>\r\n<summary>What I did before:</summary>\r\n<br/>\r\n\r\nIn the `Microsoft.NET.DefaultOutputPaths.props`/`Microsoft.Common.props`\r\n\r\n```xml\r\n<!--\r\n\tWe need to initialize `BuildFolder` separately and before the `MSBuild.OutputPaths.targets` import,\r\n\tsince `MSBuildProjectExtensionsPath` uses it to import custom props from Package Managers and Tools.\r\n-->\r\n<PropertyGroup Label=\"Build\">\r\n\t<BuildFolder Condition=\"'$(BuildFolder)' == ''\">build</BuildFolder>\r\n\t<BuildPath Condition=\"'$(BuildPath)' == ''\">$(BuildFolder)\\</BuildPath>\r\n\t<BuildPath Condition=\"!HasTrailingSlash('$(BuildPath)')\">$(BuildPath)\\</BuildPath>\r\n\t<BuildPath Condition=\"$([System.IO.Path]::IsPathRooted('$(BuildPath)')) AND !$(BuildPath.StartsWith('$(MSBuildProjectDirectory)'))\">$(BuildPath)$(BuildFolder)\\$(MSBuildProjectName)\\</BuildPath>\r\n\t<_InitialBuildPath>$(BuildPath)</_InitialBuildPath>\r\n</PropertyGroup>\r\n```\r\n\r\nIn the `Microsoft.NET.DefaultOutputPaths.targets`/`Microsoft.Common.targets`\r\n\r\n```xml\r\n<PropertyGroup Label=\"Build\">\r\n\t<IntermediateOutputFolder Condition=\"'$(IntermediateOutputFolder)' == ''\">obj</IntermediateOutputFolder>\r\n\t<BaseIntermediateOutputPath>$(BuildPath)$(IntermediateOutputFolder)\\</BaseIntermediateOutputPath>\r\n\t<IntermediateOutputPath>$(BaseIntermediateOutputPath)</IntermediateOutputPath>\r\n\r\n\t<OutputFolder Condition=\"'$(OutputFolder)' == ''\">bin</OutputFolder>\r\n\t<BaseOutputPath>$(BuildPath)$(OutputFolder)\\</BaseOutputPath>\r\n\t<OutputPath>$(BaseOutputPath)</OutputPath>\r\n</PropertyGroup>\r\n```\r\n\r\nAnd wherever we want to append a property that differentiates a build, we do this there... make sure that property won't change afterwards.\r\n\r\nFor e.g.:\r\n\r\n```xml\r\n<!-- Each property is appended where it's set after and won't change afterwards -->\r\n<PropertyGroup Condition=\"'$(Configuration)' != ''\">\r\n\t<BuildContext Condition=\"!$(BuildContext.EndsWith('-'))\">$(BuildContext)-</BuildContext>\r\n\t<BuildContext>$(BuildContext)$(Configuration)</BuildContext>\r\n</PropertyGroup>\r\n\r\n<PropertyGroup Condition=\"'$(Platform)' != '' AND '$(Platform)' != 'AnyCPU'\">\r\n\t<BuildContext Condition=\"!$(BuildContext.EndsWith('-'))\">$(BuildContext)-</BuildContext>\r\n\t<BuildContext>$(BuildContext)$(Platform)</BuildContext>\r\n</PropertyGroup>\r\n```\r\n\r\nThen, we append the build identifier to the path at the very last in property evaluation or may be, if possible, first in one of the preparation targets...\r\n\r\n```xml\r\n<!-- Place these at last in evaluation or first in targets -->\r\n<PropertyGroup>\r\n\t<BuildContext Condition=\"'$(BuildContext.Trim('-'))' != ''\">$(BuildContext.Trim('-'))</BuildContext>\r\n</PropertyGroup>\r\n\r\n<PropertyGroup Condition=\"'$(BuildContext)' != ''\">\r\n\t<IntermediateOutputPath>$(IntermediateOutputPath)$(BuildContext)\\</IntermediateOutputPath>\r\n\t<OutputPath>$(OutputPath)$(BuildContext)\\</OutputPath>\r\n</PropertyGroup>\r\n```\r\n\r\nThat's how I'm currently using it.\r\n\r\n</details>\r\n\r\n#### Note\r\n\r\nI created it when the first .NET Sdk was released and have never changed the logic, even though v1->v2->v3 had some changes that broke many people's build.",
        "createdAt": "2020-01-08T10:53:14Z",
        "updatedAt": "2020-06-10T00:45:27Z",
        "author": {
          "login": "Nirmal4G"
        }
      },
      {
        "body": "Here's my Gist that I use in both Sdk and Legacy projects:\r\n\r\n[MSBuild Output Configurations](https://gist.github.com/Nirmal4G/4f37c56d601c92a8e53927a3ee32c1ef)",
        "createdAt": "2020-01-08T12:01:58Z",
        "updatedAt": "2020-01-08T12:01:58Z",
        "author": {
          "login": "Nirmal4G"
        }
      },
      {
        "body": "Any status on this?",
        "createdAt": "2020-04-05T20:12:35Z",
        "updatedAt": "2020-04-05T20:12:35Z",
        "author": {
          "login": "Nirmal4G"
        }
      },
      {
        "body": "We'd like to do this in .NET 5, but we're not sure if we'll be able to or not yet.",
        "createdAt": "2020-04-06T17:00:38Z",
        "updatedAt": "2020-04-06T17:00:38Z",
        "author": {
          "login": "dsplaisted"
        }
      },
      {
        "body": "I most definitely vote yes on this feature.  As I mentioned in #3483, some of these work-arounds mentioned might run into issues with WPF projects.  ",
        "createdAt": "2020-06-06T18:29:39Z",
        "updatedAt": "2020-06-06T18:29:39Z",
        "author": {
          "login": "jtbrower"
        }
      },
      {
        "body": "Here's my take on this via `BuildDir` property: Nirmal4G@a9563c04adb0255815acd3dbfd1f13896ac4d530\r\n\r\nSDK's side: Nirmal4G/dotnet-sdk@ab012dcf481a25a8bdd9b5a8247c7baf9313a1b9\r\n\r\n- It does introduce `build`^ via `BuildDir` and `publish`^ via `PublishDir` in the project root.\r\n- Uses `BuildDir` for Path mismatch warning between props/targets.\r\n- It moves `MSBuildProjectExtensionsPath` to `BuildDir`.\r\n\r\nThus, freeing up `BaseIntermediateOutputPath` from Common props. I believe this will serve up nicely in years to come.\r\n\r\n> ^Note: we can prepend `~` in order to differentiate it from source folders. We could also have `BuildDirName` and use the existing `PublishDirName` to make the folder names overridable!",
        "createdAt": "2020-07-29T20:19:40Z",
        "updatedAt": "2020-12-29T02:06:10Z",
        "author": {
          "login": "Nirmal4G"
        }
      },
      {
        "body": "@dsplaisted Can I give a gentle nudge on this for .NET 6? \ud83d\ude04 I run into this on every new project.",
        "createdAt": "2021-03-28T06:58:39Z",
        "updatedAt": "2021-03-28T06:58:39Z",
        "author": {
          "login": "agocke"
        }
      },
      {
        "body": "@agocke There's already a PR out (#6105), though it isn't finished yet. We'd also like to fix this in the .NET 6 timeframe.",
        "createdAt": "2021-03-28T17:53:49Z",
        "updatedAt": "2021-03-28T17:53:49Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "A most simple workaround i was able to hack after reading all related info here, because other published examples messed up my builds for whatever reason. I'm using it for `dotnet publish` exclusively and only with absolute path supplied from CLI.\r\n\r\n> `Directory.Build.props`\r\n```xml\r\n<Project>\r\n  <PropertyGroup>\r\n    <PublishDir>$(SmartOutputPath)\\$(MSBuildProjectName)</PublishDir>\r\n  </PropertyGroup>\r\n</Project>\r\n```\r\n\r\n> `Usage`\r\n```bash\r\ncp Directory.Build.props ./ # from whatever place you store ci-cd related files\r\ndotnet publish src/Apps.sln -p:SmartOutputPath=$PWD/publish # abs paths only!\r\n```\r\n\r\nResults:\r\n* `publish/Apps.Project1/...`\r\n* `publish/Apps.Project2/...`",
        "createdAt": "2023-05-24T01:28:59Z",
        "updatedAt": "2023-05-24T01:29:52Z",
        "author": {
          "login": "Rast1234"
        }
      },
      {
        "body": "I was wondering, isn\u2019t this now covered by the dotnet 8 sdk? \r\nhttps://devblogs.microsoft.com/dotnet/announcing-dotnet-8-preview-3/#simplified-output-path",
        "createdAt": "2023-05-24T04:47:32Z",
        "updatedAt": "2023-05-24T04:47:32Z",
        "author": {
          "login": "japj"
        }
      },
      {
        "body": "> I was wondering, isn\u2019t this now covered by the dotnet 8 sdk? https://devblogs.microsoft.com/dotnet/announcing-dotnet-8-preview-3/#simplified-output-path\r\n\r\nYes, `ArtifactsPath` in the .NET 8 SDK should address this.",
        "createdAt": "2023-05-25T13:44:44Z",
        "updatedAt": "2023-05-25T13:44:57Z",
        "author": {
          "login": "dsplaisted"
        }
      },
      {
        "body": "I see that in .net 8 artifacts are flattened by project, but not by structure if projects were placed in different subfolders. What happens if i have a solution with `src/App/App.csproj` and `src/tests/App.csproj`? in older SDKs with the `publish -o` option it was not trivial to detect that artifacts were colliding (imo it should be an error).",
        "createdAt": "2023-05-25T17:19:06Z",
        "updatedAt": "2023-05-25T17:19:06Z",
        "author": {
          "login": "Rast1234"
        }
      },
      {
        "body": "> I see that in .net 8 artifacts are flattened by project, but not by structure if projects were placed in different subfolders. What happens if i have a solution with `src/App/App.csproj` and `src/tests/App.csproj`? in older SDKs with the `publish -o` option it was not trivial to detect that artifacts were colliding (imo it should be an error).\r\n\r\n@Rast1234 [This comment](https://github.com/dotnet/designs/pull/281#issuecomment-1510445020) shows how you can preserve the project structure in the output path.\r\n\r\nIt would be ideal if we could generate an error if there is a conflict, but since the projects are built separately I can't think of a good way that we would detect this.",
        "createdAt": "2023-05-25T19:12:40Z",
        "updatedAt": "2023-05-25T19:12:40Z",
        "author": {
          "login": "dsplaisted"
        }
      },
      {
        "body": "closing in favor of `ArtifactsPath`.",
        "createdAt": "2023-07-18T20:42:54Z",
        "updatedAt": "2023-07-18T20:42:54Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "The `ArtifactsPath` only works in projects that use the .NET SDK. What about the other projects in a solution? This issue is about having a common path structure for all types of projects that MSBuild / VS IDE supports.",
        "createdAt": "2023-08-24T02:57:54Z",
        "updatedAt": "2023-08-24T02:57:54Z",
        "author": {
          "login": "Nirmal4G"
        }
      }
    ]
  }
}