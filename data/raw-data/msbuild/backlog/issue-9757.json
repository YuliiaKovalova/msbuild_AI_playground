{
  "number": 9757,
  "title": "[Bug]: Numeric comparison uses current culture",
  "body": "### Issue Description\r\n\r\nWe hit this in https://github.com/dotnet/runtime/issues/98550 where a numeric comparison fails in the fi_FI culture because it uses `U+2212 : MINUS SIGN` instead of `-` for negative numbers.\r\n\r\nI'm not sure whether this is intentional or a bug.\r\n\r\n### Steps to Reproduce\r\n\r\n```xml\r\n<Project>\r\n\r\n  <PropertyGroup>\r\n    <_value>$([MSBuild]::Subtract(0, 1))</_value>\r\n    <_otherValue Condition=\"'$(_value)' &gt; -1\">true</_otherValue>\r\n  </PropertyGroup>\r\n\r\n  <Target Name=\"Build\" />\r\n</Project>\r\n```\r\n\r\n### Expected Behavior\r\n\r\nNo error.\r\n\r\n### Actual Behavior\r\n\r\n```bash\r\n$ LANG=fi_FI dotnet msbuild culture.proj\r\nMSBuild version 17.10.0-preview-24101-01+07fd5d51f for .NET\r\n  culture failed with errors (0,0s)\r\n    /Users/alexander/dev/test/culture.proj(5,18): error MSB4086: A numeric comparison was attempted on \"$(_value)\" that evaluates to \"\u22121\" instead of a number, in condition \"'$(_value)' > -1\". [/Users/alexander/dev/test/culture.proj]\r\n```\r\n\r\nNote that the \"\u22121\" in the error message uses `U+2212 : MINUS SIGN`\r\n\r\n### Analysis\r\n\r\n_No response_\r\n\r\n### Versions & Configurations\r\n\r\nFails with both 8.0.100 and 9.0.100 P1 dotnet SDKs.",
  "state": "CLOSED",
  "createdAt": "2024-02-17T11:33:13Z",
  "updatedAt": "2024-03-28T11:50:51Z",
  "closedAt": "2024-03-28T11:50:51Z",
  "author": {
    "login": "akoeplinger"
  },
  "labels": [
    "bug",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "f-alizada"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Ah looks like this was reported in https://github.com/dotnet/msbuild/issues/5502 too but I'm not sure we should've closed the issue back then.",
        "createdAt": "2024-02-17T11:39:37Z",
        "updatedAt": "2024-02-17T11:39:37Z",
        "author": {
          "login": "akoeplinger"
        }
      },
      {
        "body": "Yeah I thought it looked familiar. But IIRC I didn't see any numeric parse that wasn't culture invariant. I remember fixing an unrelated regex that wasn't, though.",
        "createdAt": "2024-02-17T17:40:58Z",
        "updatedAt": "2024-02-17T17:40:58Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "It was https://github.com/dotnet/msbuild/issues/7499 and some are still missing invariant but not relevant to this.",
        "createdAt": "2024-02-17T17:44:44Z",
        "updatedAt": "2024-02-17T17:44:44Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "From @danmoseley in https://github.com/dotnet/runtime/issues/98550#issuecomment-1965368012\r\n\r\n> @rainersigwald\r\n> \r\n> > It looks like <_indexOfPeriod>$(_originalTargetOS.IndexOf('.'))</_indexOfPeriod> causes the int->string conversion to happen with current culture:\r\n> \r\n> this seems like something MSBuild should consider fixing -- by whatever trick inside the binder. Anything culture-specific by default in a build seems like a bug to me. wdyt?\r\n\r\nThis looks like the problem, as opposed to the string->int conversion that's actually reporting the problem (but appears to be culture neutral or it would understand the localized `U+2212`.\r\n\r\nI agree on principle that everything should be culture-neutral. As usual, I'm worried about regressions--but that feels like something we could try behind a changewave.",
        "createdAt": "2024-02-26T22:09:26Z",
        "updatedAt": "2024-02-26T22:09:26Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "As @rainersigwald  mentioned the problem in different approaches to converting string -> int and int -> string \r\nThe code to reproduce the issue:\r\n\r\n```\r\npublic static void CheckConvertToString()\r\n{\r\n    Thread.CurrentThread.CurrentCulture = new CultureInfo(\"fi_FI\");\r\n\r\n    long minusOne = -1;\r\n    object minusOneObj = minusOne;\r\n    string minusOneString = minusOneObj.ToString();\r\n\r\n    Console.WriteLine((int)minusOneString.ToString()[0]); // 8722\r\n\r\n\r\n    // This will not be parsed. This scenario happens in MSBuild\r\n    if (Double.TryParse(minusOneString, NumberStyles.AllowDecimalPoint | NumberStyles.AllowLeadingSign, CultureInfo.InvariantCulture.NumberFormat, out var val))\r\n    {\r\n        Console.WriteLine($\"parsed neutral = {val}\");\r\n    }\r\n    else\r\n    {\r\n        Console.WriteLine(\"Not parsed neutral\");\r\n    }\r\n\r\n    // this will be parsed. \r\n    if (Double.TryParse(minusOneString, out var val2))\r\n    {\r\n        Console.WriteLine($\"parsed  Non neutral = {val2}\");\r\n    }\r\n    else\r\n    {\r\n        Console.WriteLine(\"Not parsed Non neutral\");\r\n    }\r\n}\r\n```\r\n\r\nThe issue described earlier reproducible on unix following the steps. However I was not able to reproduce the issue on windows yet (except the simple code).\r\nThe fix would be in https://github.com/dotnet/msbuild/blob/0326fd7c9e131c4c26bac3c0f72a43ef9fd2812c/src/Build/Evaluation/Expander.cs#L1417 to convert Culture neutral in case the object is a number. \r\nTemp fix tested and verified it is working.\r\n",
        "createdAt": "2024-03-12T10:47:15Z",
        "updatedAt": "2024-03-12T10:47:15Z",
        "author": {
          "login": "f-alizada"
        }
      },
      {
        "body": "Update to the previous comment: In case there  Thread.CurrentThread.CurrentCulture = new CultureInfo(\"fi_FI\"); is not set and the CultureInfo is set from the Windows settings there is no errors. ",
        "createdAt": "2024-03-14T11:18:31Z",
        "updatedAt": "2024-03-14T11:18:31Z",
        "author": {
          "login": "f-alizada"
        }
      }
    ]
  }
}