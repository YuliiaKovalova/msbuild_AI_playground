{
  "number": 9678,
  "title": "Static graph construction does not use a shared evaluation context",
  "body": "With a tiny API consumer project (reference `Microsoft.Build.MSBuildLocator` and `Microsoft.Build`:\r\n\r\n```c#\r\nusing Microsoft.Build.Graph;\r\nusing Microsoft.Build.Locator;\r\n\r\nnamespace GraphBuilderApp\r\n{\r\n    internal class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            MSBuildLocator.RegisterDefaults();\r\n            DoMSBuildStuff();\r\n        }\r\n\r\n        private static void DoMSBuildStuff()\r\n        {\r\n            ProjectGraph graph = new ProjectGraph(@\"C:\\src\\msbuild\\MSBuild.sln\");\r\n\r\n            System.Console.WriteLine($\"Projects in the solution: {graph.ProjectNodes.Count}\");\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nRun under tracing and look at events like `Microsoft-Build/SdkResolverServiceFindResolversManifests/Stop` and `Microsoft-Build/SdkResolverResolveSdk/Stop`. In my test run (on the MSBuild repo), I see a lot of wasted work:\r\n\r\n| Event | Count | Total time |\r\n|--------|--------:|--------:|\r\n| `FindResolversManifests`| 84| 597ms |\r\n| `SdkResolverResolveSdk`| 314 | 17,328ms |\r\n\r\nDebugging through, each project evaluated by the graph is in its own `EvaluationContext`, so they share nothing--including the list of resolvers.",
  "state": "CLOSED",
  "createdAt": "2024-01-24T22:45:59Z",
  "updatedAt": "2024-10-01T12:46:48Z",
  "closedAt": "2024-04-24T18:46:58Z",
  "author": {
    "login": "rainersigwald"
  },
  "labels": [
    "Area: Performance",
    "Area: Static Graph",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "rainersigwald"
      }
    ]
  },
  "milestone": {
    "title": "VS 17.10"
  },
  "comments": {
    "nodes": [
      {
        "body": "Just to add some info here. Here is my before/after fixing this on the client side.\r\n\r\nWith `EvaluationContext.SharingPolicy.Shared`:\r\n```\r\nStatic graph loaded in 5.975 seconds: 811 nodes, 4299 edges\r\n```\r\nWith default (`EvaluationContext.SharingPolicy.Isolated`):\r\n```\r\nStatic graph loaded in 10.701 seconds: 811 nodes, 4299 edges\r\n```\r\n\r\nThis is pretty significant! Definitely worth updating the default.",
        "createdAt": "2024-04-24T17:42:29Z",
        "updatedAt": "2024-04-24T17:42:29Z",
        "author": {
          "login": "AndyGerlicher"
        }
      },
      {
        "body": "hi @rainersigwald , sorry to hijack this old issue. \r\n\r\nI know the driver for this issue was to use a shared `EvaluationContext` in order to prevent repeating work.\r\nHowever, this feature would also allow me to create a `ProjectGraph` which uses a custom `MSBuildFileSystemBase`. (related to #7956) (we use a custom based file system which allows us to build a `ProjectGraph` from a git commit)\r\n\r\nI was expecting to be able to do this:\r\n```csharp\r\nvar evaluationContext = EvaluationContext.Create(EvaluationContext.SharingPolicy.Shared, fileSystem);\r\nProjectGraph.ProjectInstanceFactoryFunc fn = (projectPath, globalProperties, projectCollection) =>\r\n{\r\n    return new ProjectInstance(\r\n        projectPath,\r\n        globalProperties,\r\n        \"current\",\r\n        subToolsetVersion: null,\r\n        projectCollection,\r\n        evaluationContext); // << Fails due to internal constructor\r\n};\r\n\r\nvar entrypoints = allProjects.Select(p => new ProjectGraphEntryPoint(p));\r\nvar output = new ProjectGraph(entrypoints, ProjectCollection.GlobalProjectCollection, fn);\r\n```\r\n\r\nBut unfortunately I cannot instantiate a `ProjectInstance` supplying an `EvaluationContext` since the constructor is `internal`. Is this intentional?\r\n\r\nIf so, should I raise a new issue to support this feature?\r\n\r\nThank you :+1: \r\nLeo.",
        "createdAt": "2024-10-01T12:46:46Z",
        "updatedAt": "2024-10-01T12:46:46Z",
        "author": {
          "login": "leonardochaia"
        }
      }
    ]
  }
}