{
  "number": 9617,
  "title": "Support showing default MSBuild output when using CLI-based project evaluation",
  "body": "### Is your feature request related to a problem? Please describe.\r\n\r\nIn a CI pipeline, I would like to use the CLI-based project evaluation to capture information to be passed to the next step while still have the default MSBuild output appear in the CI log.\r\n\r\nCurrently, when using CLI-based project evaluation, the default output MSBuild output becomes unavailable because standard output is used to print the evaluation result.\r\n\r\nAlso in other use-cases, it may be desired to still have the default MSBuild output shown while using project evaluation.\r\n\r\n### Describe the solution you'd like\r\n\r\nAllow the result of the project evaluation to be written to a file instead of writing it to standard output. Standard output can then be used for the usual MSBuild output.\r\n\r\n### Additional information\r\n\r\nhttps://github.com/dotnet/sdk/issues/36694 is a bug report that is also requesting for allowing the evaluation to be written to a file.\r\n\r\ncc @baronfel",
  "state": "CLOSED",
  "createdAt": "2023-12-13T19:13:11Z",
  "updatedAt": "2024-04-11T08:12:54Z",
  "closedAt": "2024-04-11T08:12:54Z",
  "author": {
    "login": "tmds"
  },
  "labels": [
    "Area: NetSDK"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "Forgind"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "@rainersigwald @rokonec Any interest in having the output of this command written to a file? Should I move this bug to msbuild since it's in the CLI evaluation? Any plans for supporting this for other loggers?",
        "createdAt": "2024-01-09T21:55:19Z",
        "updatedAt": "2024-01-09T21:55:19Z",
        "author": {
          "login": "marcpopMSFT"
        }
      },
      {
        "body": "I'm generally in favor of having some way of specifying this, because it's not really feasible or easy for any given command against the .NET CLI to be known to be free of errant output in the stdout stream at this time (due to things like the first-run output, workload updates, and arbitrary MSBuild tasks using Console.WriteLine).   If this proposed new `-evaluation-results-file` is used, then the normal stdout output for MSBuild could be freed up as suggested by @tmds. ",
        "createdAt": "2024-01-09T22:30:46Z",
        "updatedAt": "2024-01-09T22:30:46Z",
        "author": {
          "login": "baronfel"
        }
      },
      {
        "body": "Is to possible to address it by `dotnet build /flp:logfile=output.txt ...; cat output.txt`?",
        "createdAt": "2024-01-12T22:13:43Z",
        "updatedAt": "2024-01-13T20:14:32Z",
        "author": {
          "login": "rokonec"
        }
      },
      {
        "body": "> Is to possible to address it by `dotnet build /flp:logfile=output.txt ...; cat output.txt`?\r\n\r\nThis is clever, but without having tested it, I don't think it works, unfortunately. When using get*, we turn off the console logger and custom loggers. If you request a file logger, you can have it, but we also change the verbosity to quiet, and since SetParameterizedSwitch appends rather than prepends, and the verbosity switch looks at the last one set, your logs would always be quiet even if you requested something else.\r\n\r\nLooking back at that, I'm not convinced that's really the right design, but that's a separate question.",
        "createdAt": "2024-01-14T11:18:30Z",
        "updatedAt": "2024-01-14T11:18:30Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "@Forgind  I have just tried `msbuild -getTargetResult:build \"/flp:logfile=o.txt;v=n\"` from powershell and it seems to be working.\r\nI suppose /flp turns it back again, which is great.",
        "createdAt": "2024-01-15T20:43:09Z",
        "updatedAt": "2024-01-15T20:43:09Z",
        "author": {
          "login": "rokonec"
        }
      },
      {
        "body": "> @Forgind I have just tried `msbuild -getTargetResult:build \"/flp:logfile=o.txt;v=n\"` from powershell and it seems to be working. I suppose /flp turns it back again, which is great.\r\n\r\nGreat point! I'd forgotten you could set the file logger's verbosity separately from the rest of the build. I like that as a workaround.",
        "createdAt": "2024-01-16T23:45:59Z",
        "updatedAt": "2024-01-16T23:45:59Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "Using the existing file logger mechanism sounds like a perfect fix here - @tmds is that a viable resolution? I don't want to make a new feature unless the existing mechanism can't satisfy your need.",
        "createdAt": "2024-01-17T19:25:28Z",
        "updatedAt": "2024-01-17T19:25:28Z",
        "author": {
          "login": "baronfel"
        }
      },
      {
        "body": "For my usage, I'd like the output to appear on terminal as before, that is: streaming as the build progresses.\r\nThat doesn't happen with the file logger.\r\n\r\nAlso, enabling this through `/flp:logfile=o.txt;v=n` is hard to remember (and requires quotes with bash), and it doesn't work with other flags like `--verbosity`.\r\n\r\nThe file logger is a workaround, but I'm hoping for something more first-class.\r\n@Forgind made a PR for this: https://github.com/dotnet/msbuild/pull/9640.",
        "createdAt": "2024-01-18T08:00:35Z",
        "updatedAt": "2024-01-18T08:00:35Z",
        "author": {
          "login": "tmds"
        }
      },
      {
        "body": "> @Forgind I have just tried `msbuild -getTargetResult:build \"/flp:logfile=o.txt;v=n\"` from powershell and it seems to be working. I suppose /flp turns it back again, which is great.\r\n\r\n@rokonec \r\nOn the Windows platform, it works normally.\r\nOn the Linux platform, it does not output log files, and the terminal does not have any output.",
        "createdAt": "2024-01-18T13:12:20Z",
        "updatedAt": "2024-01-18T13:12:20Z",
        "author": {
          "login": "VAllens"
        }
      },
      {
        "body": "> On the Linux platform, it does not output log files, and the terminal does not have any output.\r\n\r\nWhen I run `dotnet msbuild -getTargetResult:build \"/flp:logfile=o.txt;v=n\"` on Linux, it has the expected behavior of writing the evaluation output to the terminal, and the log output to the `o.txt` file.\r\n\r\nnote: it's important to include the `\"` to avoid the shell interpreting the `;` as the end of the command.",
        "createdAt": "2024-01-18T13:19:18Z",
        "updatedAt": "2024-01-18T13:19:18Z",
        "author": {
          "login": "tmds"
        }
      },
      {
        "body": "> > On the Linux platform, it does not output log files, and the terminal does not have any output.\r\n> \r\n> When I run on Linux, it has the expected behavior of writing the evaluation output to the terminal, and the log output to the file.`dotnet msbuild -getTargetResult:build \"/flp:logfile=o.txt;v=n\"``o.txt`\r\n> \r\n> note: it's important to include the to avoid the shell interpreting the as the end of the command.`\"``;`\r\n\r\nOh, I'm sorry, I made a mistake.\r\n\r\nI noticed a detail that I used `dotnet build` instead of `dotnet msbuild`.\r\n\r\nNow, I am using `dotnet msbuild` on the Linux platform and everything is going smoothly.",
        "createdAt": "2024-01-19T02:01:28Z",
        "updatedAt": "2024-01-19T02:02:29Z",
        "author": {
          "login": "VAllens"
        }
      },
      {
        "body": "Fixed by https://github.com/dotnet/msbuild/pull/9640.",
        "createdAt": "2024-04-11T08:12:54Z",
        "updatedAt": "2024-04-11T08:12:54Z",
        "author": {
          "login": "tmds"
        }
      }
    ]
  }
}