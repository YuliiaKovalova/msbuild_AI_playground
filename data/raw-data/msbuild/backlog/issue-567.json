{
  "number": 567,
  "title": "Can't build on UNIX",
  "body": "Hi. I can't build the latest xplat commit (See 5a2dcc67bff636fa8107bbf08e1852a2e34121b8) on Mac OS X 10.11.\n\nAfter checking out the latest xplat, I run `./cibuild` and always get the following output:\n\n```\nUnsupported target detected: . Configuring as if for CoreCLR\nUnsupported host detected: . Configuring as if for CoreCLR\nInstalling dotnet cli...\nRestoring BuildTools version 1.0.25-prerelease-00231-07...\nERROR: Could not restore build tools correctly. See '/Volumes/DATA/Build/msb/buildme/init-tools.log' for more details.\nInitializing BuildTools...\n./init-tools.sh: line 84: /Volumes/DATA/Build/msb/buildme/packages/Microsoft.DotNet.BuildTools/1.0.25-prerelease-00231-07/lib/init-tools.sh: No such file or directory\nDone initializing tools.\nBuild Command: ./Tools/corerun  ./Tools/MSBuild.exe ./build.proj /t:Build /p:OS=OSX /p:Configuration=Debug-NetCore /verbosity:minimal  /m /fl  \"/flp:v=diag;logfile=./msbuild.log\"\n./cibuild.sh: line 42: ./Tools/corerun: No such file or directory\n```\n\nAfter looking at `init-tools.log`, found the following:\n\n```\nunning: /Volumes/DATA/Build/msb/buildme/init-tools.sh\nInstalling 'https://dotnetcli.blob.core.windows.net/dotnet/beta/Binaries/1.0.0-beta-002173/dotnet-dev-osx-x64.1.0.0-beta-002173.tar.gz' to '/Volumes/DATA/Build/msb/buildme/Tools/dotnetcli/dotnet.tar'\nRunning: /Volumes/DATA/Build/msb/buildme/Tools/dotnetcli/dotnet restore \"/Volumes/DATA/Build/msb/buildme/Tools/1.0.25-prerelease-00231-07/project.json\" --packages /Volumes/DATA/Build/msb/buildme/packages --source https://dotnet.myget.org/F/dotnet-buildtools/api/v3/index.json\nlog  : Restoring packages for /Volumes/DATA/Build/msb/buildme/Tools/1.0.25-prerelease-00231-07/project.json...\nerror: Failed to retrieve information from remote source '/Volumes/DATA/Build/msb/buildme/packages'.\nerror: Unable to load the service index for source https://dotnet.myget.org/F/dotnet-buildtools/api/v3/index.json.\nerror:   The type initializer for 'Crypto' threw an exception.\nerror:   Unable to load DLL 'System.Security.Cryptography.Native': The specified module could not be found.\nerror:    (Exception from HRESULT: 0x8007007E)\nRunning: /Volumes/DATA/Build/msb/buildme/packages/Microsoft.DotNet.BuildTools/1.0.25-prerelease-00231-07/lib/init-tools.sh /Volumes/DATA/Build/msb/buildme /Volumes/DATA/Build/msb/buildme/Tools/dotnetcli/dotnet /Volumes/DATA/Build/msb/buildme/Tools\n```\n\nI notice a few things:\n1. The `packages` subdirectory never got created.\n2. I can browse to `https://dotnet.myget.org/F/dotnet-buildtools/api/v3/index.json` even when the scripts says its index can't be loaded.\n3. Maybe package `System.Security.Cryptography.Native` is outdated in the dependency mappings?\n4. The same commit was built successfully on Jenkins at http://dotnet-ci.cloudapp.net/job/Microsoft_msbuild/job/innerloop_xplat_OSX/87/ .\n\nIs there any pre-configuration I need to make in order to build locally?\n",
  "state": "CLOSED",
  "createdAt": "2016-04-09T10:35:43Z",
  "updatedAt": "2024-02-21T17:28:32Z",
  "closedAt": "2016-05-10T22:53:52Z",
  "author": {
    "login": "JunielKatarn"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "I just verified the issue also appears on Ubuntu.\nI ran `./cibuild.sh --scope Compile` (same as latest successful build at http://dotnet-ci.cloudapp.net/job/Microsoft_msbuild/job/innerloop_xplat_Ubuntu/lastBuild/console), and found the same error.\n\nCoreRun is not being downloaded/installed.\n",
        "createdAt": "2016-04-12T01:58:29Z",
        "updatedAt": "2016-04-12T01:58:29Z",
        "author": {
          "login": "JunielKatarn"
        }
      },
      {
        "body": "That's interesting; like the CI servers I can build on both OS X and Linux. Sadly, `ERROR_MOD_NOT_FOUND` is not particularly informative!\n\nI don't think this is related to our `project.json`, since it appears to be a crypto failure when connecting over HTTP. It looks to me like you have a bad on-disk deployment of the `dotnet` CLI. But I don't know why that would be failing for you.\n\nDo you have a `System.Security.Cryptography.Native.so` anywhere under `Tools/dotnetcli` (on Ubuntu--on OS X it's `.dylib`)?\n",
        "createdAt": "2016-04-12T15:32:29Z",
        "updatedAt": "2016-04-12T15:32:29Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "On a fresh install of `Ubuntu 15.10`, it seems to failing running `dotnet` with ..\n\n`Failed to initialize CoreCLR, HRESULT: 0x80131500`\n\nLooking at it with strace, it seems to be looking for `libicuuc.so.52` and `libicui18n.so.52`, and at least on `Ubuntu 15.10` that I tried this on, `libicu*so.55` is available.\n\nI don't have any trouble building on OSX 10.11.4 , but my OSX install might not really be \"clean\"!\n",
        "createdAt": "2016-04-12T17:03:06Z",
        "updatedAt": "2016-04-12T17:03:20Z",
        "author": {
          "login": "radical"
        }
      },
      {
        "body": "@radical Ubuntu 15.10 isn't supported by .NET Core/CLI yet (https://github.com/dotnet/cli/issues/2072), so this is expected.\n",
        "createdAt": "2016-04-12T17:13:56Z",
        "updatedAt": "2016-04-12T17:13:56Z",
        "author": {
          "login": "akoeplinger"
        }
      },
      {
        "body": "@JunielKatarn which version of Ubuntu are you running?\n",
        "createdAt": "2016-04-12T17:15:18Z",
        "updatedAt": "2016-04-12T17:15:18Z",
        "author": {
          "login": "radical"
        }
      },
      {
        "body": "For OSX, I would `rm -Rf bin/ Tools/ packages/` and then try the build again.\n",
        "createdAt": "2016-04-12T17:17:57Z",
        "updatedAt": "2016-04-12T17:17:57Z",
        "author": {
          "login": "radical"
        }
      },
      {
        "body": "@radical It's 15.10. I guess it's not supported, then.\nAlso, for OS X (10.11.4), I tried using a clean checkout (nothing built previously).\nFails every time.\n\nMaybe I misread instructions? Do I need to install something before?\nOr, should the `cibuild.sh` script resolve/fetch all dependencies by itself?\n",
        "createdAt": "2016-04-12T18:54:05Z",
        "updatedAt": "2016-04-12T18:54:05Z",
        "author": {
          "login": "JunielKatarn"
        }
      },
      {
        "body": "My Mac is also not clean, but I'm pretty sure `cibuild.sh` should do everything you need. Do you see `System.Security.Cryptography.Native.dylib` under the `Tools/dotnetcli` folder when starting from scratch on OS X?\n",
        "createdAt": "2016-04-12T19:18:11Z",
        "updatedAt": "2016-04-12T19:18:11Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I do see that dylib under `./Tools/dotnetcli/shared/Microsoft.NETCore.App/1.0.0-rc2-23931/System.Security.Cryptography.Native.dylib`.\n\nI'm afraid cibuild.sh is not working for me :(\nIf it's any use, I here is a ZIP file containing the generated `Tools` subdirectory, along with the build log:\nhttps://www.dropbox.com/sh/var5r5pbn5hwn38/AAAKitK_BwuWKvF9121TlmLma\n",
        "createdAt": "2016-04-15T10:11:00Z",
        "updatedAt": "2016-04-15T10:11:00Z",
        "author": {
          "login": "JunielKatarn"
        }
      },
      {
        "body": "@JunielKatarn Any progress resolving this issue? I'm running into it myself.\n",
        "createdAt": "2016-04-22T18:22:25Z",
        "updatedAt": "2016-04-22T18:22:25Z",
        "author": {
          "login": "Sarabeth-Jaffe-Microsoft"
        }
      },
      {
        "body": "No progress, I'm afraid. I run into this issue both in OS X (El Capitan), and the last 3 releases of Ubuntu (including brand new 16.04).\n\nIn short, the .NET tools are not getting downloaded correctly.\n\n@cdmihai, @rainersigwald, do you guys have any pointers?\n",
        "createdAt": "2016-04-22T18:27:54Z",
        "updatedAt": "2016-04-22T18:27:54Z",
        "author": {
          "login": "JunielKatarn"
        }
      },
      {
        "body": "Try to update to the xplat HEAD, and try again. Your logs suggest that it is trying to fetch an older version:\n\n`EXEC : warning : Unable to find version '1.2.0-beta-20151112-01' of package 'Microsoft.Net.Compilers'`\n\nThis was updated in https://github.com/Microsoft/msbuild/commit/9dd9195913e49459d40e9e5c38977f52a856a09a\n",
        "createdAt": "2016-04-22T18:32:15Z",
        "updatedAt": "2016-04-22T18:32:15Z",
        "author": {
          "login": "radical"
        }
      },
      {
        "body": "Your original post says that you are building - 5a2dcc6 but still getting the older version? I would update to the latest xplat, `git-clean -xdf` my checkout and try again.\n",
        "createdAt": "2016-04-22T18:34:06Z",
        "updatedAt": "2016-04-22T18:34:06Z",
        "author": {
          "login": "radical"
        }
      },
      {
        "body": "@radical Updating to the head commit and cleaning the local repository goes without saying :). It's always my first course of action, when things like this don't work.\n\nThese were my exact steps as of 5 minutes ago:\n1. Fresh clone from xplat.<br/>`git clone git@github.com:Microsoft/msbuild.git --branch xplat`\n2. Verify the latest commit matches the branch head (c93ad0d05139c4b37b6448dfc89fc293d2cc5f65 as of this post).\n3. Get into the clone's working directory, and run the build script.<br/>`./cibuild.sh --target Compile`\n\nThe result is the exact same error. No `./Tools/corerun` file (See my comment from last week).\n",
        "createdAt": "2016-04-22T18:49:46Z",
        "updatedAt": "2016-04-22T18:52:23Z",
        "author": {
          "login": "JunielKatarn"
        }
      },
      {
        "body": "And can you share the logs from this build?\n",
        "createdAt": "2016-04-22T18:51:33Z",
        "updatedAt": "2016-04-22T18:51:33Z",
        "author": {
          "login": "radical"
        }
      },
      {
        "body": "Ah, so the problem is that something transitively depends on an old DNX package:\n\n```\nEXEC : warning : Unable to find version '1.0.0-rc2-16177' of package 'dnx-coreclr-darwin-x64'. [/Volumes/DATA/Build/msb/buildme/build.proj]\n  find: /Volumes/DATA/Build/msb/buildme/packages/dnx-coreclr-darwin-x64.1.0.0-rc2-16177: No such file or directory\n```\n\nAnd indeed that doesn't seem to be present on https://www.myget.org/feed/aspnetvnext/package/nuget/dnx-coreclr-darwin-x64\n\n. . . but I tried deleting my `~/.nuget` folder, and the build passed without that package. And NuGet doesn't explain what the chain of dependencies was that led to it. So I'm still pretty confused.\n",
        "createdAt": "2016-04-22T19:39:09Z",
        "updatedAt": "2016-04-22T19:39:09Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "After performing the same steps @JunielKatarn followed, this is my output:\n\n```\nMacintosh:msbuild appleprouduser$ ./cibuild.sh\nUnsupported target detected: . Configuring as if for CoreCLR\nUnsupported host detected: . Configuring as if for CoreCLR\nInstalling dotnet cli...\nRestoring BuildTools version 1.0.25-prerelease-00231-07...\nERROR: Could not restore build tools correctly. See '/Users/appleprouduser/Dropbox/MSBuild/msbuild/init-tools.log' for more details.\nInitializing BuildTools...\n./init-tools.sh: line 84: /Users/appleprouduser/Dropbox/MSBuild/msbuild/packages/Microsoft.DotNet.BuildTools/1.0.25-prerelease-00231-07/lib/init-tools.sh: No such file or directory\nDone initializing tools.\nBuild Command: ./Tools/corerun  ./Tools/MSBuild.exe ./build.proj /t:Build /p:OS=OSX /p:Configuration=Debug-NetCore /verbosity:minimal  /m /fl  \"/flp:v=diag;logfile=./msbuild.log\"\n./cibuild.sh: line 42: ./Tools/corerun: No such file or directory\n```\n\nAnd this is my init-tools.log file:\n\n```\nRunning: /Users/appleprouduser/Dropbox/MSBuild/msbuild/init-tools.sh\nInstalling 'https://dotnetcli.blob.core.windows.net/dotnet/beta/Binaries/1.0.0-beta-002173/dotnet-dev-osx-x64.1.0.0-beta-002173.tar.gz' to '/Users/appleprouduser/Dropbox/MSBuild/msbuild/Tools/dotnetcli/dotnet.tar'\nRunning: /Users/appleprouduser/Dropbox/MSBuild/msbuild/Tools/dotnetcli/dotnet restore \"/Users/appleprouduser/Dropbox/MSBuild/msbuild/Tools/1.0.25-prerelease-00231-07/project.json\" --packages /Users/appleprouduser/Dropbox/MSBuild/msbuild/packages --source https://dotnet.myget.org/F/dotnet-buildtools/api/v3/index.json\nlog  : Restoring packages for /Users/appleprouduser/Dropbox/MSBuild/msbuild/Tools/1.0.25-prerelease-00231-07/project.json...\nerror: Failed to retrieve information from remote source '/Users/appleprouduser/Dropbox/MSBuild/msbuild/packages'.\nerror: Unable to load the service index for source https://dotnet.myget.org/F/dotnet-buildtools/api/v3/index.json.\nerror:   The type initializer for 'Crypto' threw an exception.\nerror:   Unable to load DLL 'System.Security.Cryptography.Native': The specified module could not be found.\nerror:    (Exception from HRESULT: 0x8007007E)\nRunning: /Users/appleprouduser/Dropbox/MSBuild/msbuild/packages/Microsoft.DotNet.BuildTools/1.0.25-prerelease-00231-07/lib/init-tools.sh /Users/appleprouduser/Dropbox/MSBuild/msbuild /Users/appleprouduser/Dropbox/MSBuild/msbuild/Tools/dotnetcli/dotnet /Users/appleprouduser/Dropbox/MSBuild/msbuild/Tools\n```\n",
        "createdAt": "2016-04-22T20:45:48Z",
        "updatedAt": "2016-04-22T20:47:43Z",
        "author": {
          "login": "Sarabeth-Jaffe-Microsoft"
        }
      },
      {
        "body": "@Sarabeth-Jaffe-Microsoft that looks like the original error @JunielKatarn had. Do _you_ see `./Tools/dotnetcli/shared/Microsoft.NETCore.App/1.0.0-rc2-23931/System.Security.Cryptography.Native.dylib`?\n\nI created a new user on my Mac and was able to clone + `./cibuild` with no trouble.\n",
        "createdAt": "2016-04-22T21:06:34Z",
        "updatedAt": "2016-04-22T21:06:34Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald I'm not with my Mac right now, but at least on Ubuntu, I do see `Tools/dotnetcli/shared/Microsoft.NETCore.App/1.0.0-rc2-23931/System.Security.Cryptography.Native.so`.\nPlease note, Ubuntu has exactly the same symptoms as OS X.\n",
        "createdAt": "2016-04-22T21:33:10Z",
        "updatedAt": "2016-04-22T21:33:10Z",
        "author": {
          "login": "JunielKatarn"
        }
      },
      {
        "body": "@rainersigwald I do have that file. (Using Mac OSX 10.11.4 in case that matters.)\n",
        "createdAt": "2016-04-22T21:44:35Z",
        "updatedAt": "2016-04-22T21:44:35Z",
        "author": {
          "login": "Sarabeth-Jaffe-Microsoft"
        }
      },
      {
        "body": "I found this in the CLI issues: https://github.com/dotnet/cli/issues/1161\n\nDo you have openssl? We might have found an implicit system dependency :)\n",
        "createdAt": "2016-04-22T21:51:36Z",
        "updatedAt": "2016-04-22T21:51:36Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "@cdmihai That does look awfully suspicious. `brew list --versions` tells me I have `openssl 1.02e_1` installed--and that would be machine wide, explaining my non-repro with a new user.\n",
        "createdAt": "2016-04-22T21:55:34Z",
        "updatedAt": "2016-04-22T21:55:34Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I have not installed brew on my Mac OS instance.\nMy Ubuntu installation is also pretty out-of-the-box, so it might also lack openssl.\n\nShould a third-party software like brew be required at all to get MSBuild to compile?\n",
        "createdAt": "2016-04-22T22:06:49Z",
        "updatedAt": "2016-04-22T22:10:47Z",
        "author": {
          "login": "JunielKatarn"
        }
      },
      {
        "body": "@JunielKatarn MSBuild doesn't (or at least shouldn't) have any dependencies on homebrew. However, since we use the `dotnet` CLI tool to download the packages we need (for compilers and build-and runtime references), we're at the mercy of any dependencies they choose to take.\n\nIn this case, the dependency is on having a dynamic OpenSSL library available; it shouldn't care about how that came about. `brew install openssl` and `apt-get install openssl` are easy, but you could also try [building from source](https://wiki.openssl.org/index.php/Compilation_and_Installation#Mac).\n",
        "createdAt": "2016-04-22T22:17:11Z",
        "updatedAt": "2016-04-22T22:17:11Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Downloaded brew & updated openssl:\n\n```\nMacintosh:msbuild appleprouduser$ openssl version -a\nOpenSSL 1.0.2g  1 Mar 2016\nbuilt on: reproducible build, date unspecified\n```\n",
        "createdAt": "2016-04-22T22:47:02Z",
        "updatedAt": "2016-04-22T22:47:02Z",
        "author": {
          "login": "Sarabeth-Jaffe-Microsoft"
        }
      },
      {
        "body": "@rainersigwald suggested:\n\n```\ngit clean -xdf\n```\n\nAnd it looks like it runs with no errors! Not sure if that command is all that's needed or if updating Openssl is necessary.\n",
        "createdAt": "2016-04-22T23:01:25Z",
        "updatedAt": "2016-04-22T23:01:25Z",
        "author": {
          "login": "Sarabeth-Jaffe-Microsoft"
        }
      },
      {
        "body": "> apt-get install openssl are easy, but you could also try building from source.\n\n@rainersigwald Ubuntu comes with openssl installed by default.\nActually, I have the exact same version as @Sarabeth-Jaffe-Microsoft in OS X (1.0.2g).\n\nI'll try it on OS X later tonight.\n",
        "createdAt": "2016-04-23T00:33:07Z",
        "updatedAt": "2016-04-23T00:33:07Z",
        "author": {
          "login": "JunielKatarn"
        }
      },
      {
        "body": "I have confirmed that upgrading OpenSSL in OS X via homebrew solved the issue.\nI would keep this issue upen until the workaround steps are added to the README file, or the transitive dependency goes away.\n\nIn short (@Sarabeth-Jaffe-Microsoft , please confirm):\n1. Install homebrew from http://brew.sh.\n2. `brew install openssl`\n3. `brew link openssl --force` (to put homebrew's OpenSSL in front of Apple's OpenSSL).\n\nThe issue on Ubuntu is still not resolved.\n",
        "createdAt": "2016-04-23T06:11:30Z",
        "updatedAt": "2016-04-23T06:11:30Z",
        "author": {
          "login": "JunielKatarn"
        }
      },
      {
        "body": "@Sarabeth-Jaffe-Microsoft `git clean -xdf` only cleaned up files that were downloaded/created in your repo. It worked around a problem (#590) that the initialization process decided (erroneously) that it was already complete, then failed later.\n",
        "createdAt": "2016-04-25T14:26:26Z",
        "updatedAt": "2016-04-25T14:26:26Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@JunielKatarn \n\n> I would keep this issue upen until the workaround steps are added to the README file, or the transitive dependency goes away.\n\nAgreed. Since we're probably stuck with the dependency, a clear error on our part might be nice too.\n\n> `brew link openssl --force` (to put homebrew's OpenSSL in front of Apple's OpenSSL).\n\nI don't think this is required (on my working Mac, `openssl version` returns `OpenSSL 0.9.8zh 14 Jan 2016` which is the system one).\n\n> The issue on Ubuntu is still not resolved.\n\nOk, let's dig in further. On my working Ubuntu 14.04 system, I did this \n\n``` diff\ndiff --git a/init-tools.sh b/init-tools.sh\nindex 033a652..7fa299d 100755\n--- a/init-tools.sh\n+++ b/init-tools.sh\n@@ -75,7 +75,7 @@ if [ ! -e $__PROJECT_JSON_FILE ]; then\n     if [ ! -e $__BUILD_TOOLS_PATH ]; then\n         echo \"Restoring BuildTools version $__BUILD_TOOLS_PACKAGE_VERSION...\"\n         echo \"Running: $__DOTNET_CMD restore \\\"$__PROJECT_JSON_FILE\\\" --packages $__PACKAGES_DIR --source $__BUILDTOOLS_SOURCE\" >> $__init_tools_log\n-        $__DOTNET_CMD restore \"$__PROJECT_JSON_FILE\" --packages $__PACKAGES_DIR --source $__BUILDTOOLS_SOURCE >> $__init_tools_log\n+        strace -f -e trace=file $__DOTNET_CMD restore \"$__PROJECT_JSON_FILE\" --packages $__PACKAGES_DIR --source $__BUILDTOOLS_SOURCE >> $__init_tools_log 2>&1\n         if [ ! -e \"$__BUILD_TOOLS_PATH/init-tools.sh\" ]; then echo \"ERROR: Could not restore build tools correctly. See '$__init_tools_log' for more details.\"; fi\n     fi\n```\n\nAnd I see this around loading crypto:\n\n```\n[pid 13479] open(\"/home/vagrant/src/msbuild/Tools/dotnetcli/shared/Microsoft.NETCore.App/1.0.0-rc2-23931/System.Security.Cryptography.Native.so\", O_RDONLY|O_CLOEXEC) = 120        \n[pid 13479] open(\"/etc/ld.so.cache\", O_RDONLY|O_CLOEXEC) = 120                                                                                                                     \n[pid 13479] access(\"/etc/ld.so.nohwcap\", F_OK) = -1 ENOENT (No such file or directory)                                                                                             \n[pid 13479] open(\"/lib/x86_64-linux-gnu/libcrypto.so.1.0.0\", O_RDONLY|O_CLOEXEC) = 120                                                                                             \n[pid 13479] access(\"/etc/ld.so.nohwcap\", F_OK) = -1 ENOENT (No such file or directory)                                                                                             \n[pid 13479] open(\"/lib/x86_64-linux-gnu/libssl.so.1.0.0\", O_RDONLY|O_CLOEXEC) = 120                                                                                                \n[pid 13479] open(\"/dev/urandom\", O_RDONLY|O_NOCTTY|O_NONBLOCK) = 120                                                                                                               \n[pid 13479] open(\"/usr/lib/ssl/openssl.cnf\", O_RDONLY) = 120\n```\n\nCan you make a similar change and post `init-tools.log`? Hopefully there's a glaringly obvious difference . . .\n",
        "createdAt": "2016-04-25T14:56:51Z",
        "updatedAt": "2016-04-25T15:45:20Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "On a clean Ubuntu 14.04 VM, I get this failure:\n\n```\n$ /home/vagrant/msbuild/Tools/dotnetcli/dotnet restore \"/home/vagrant/msbuild/Tools/1.0.25-prerelease-00231-07/project.json\" --packages /home/vagrant/msbuild/packages --source https://dotnet.myget.org/F/dotnet-buildtools/api/v3/index.json\nFailed to load /home/vagrant/msbuild/Tools/dotnetcli/shared/Microsoft.NETCore.App/1.0.0-rc2-23931/libcoreclr.so, error: libunwind.so.8: cannot open shared object file: No such file or directory\nFailed to bind to coreclr\n```\n\nThis appears to have been resolved with `sudo apt-get install libunwind8`, so I think we have another hidden dependency (and needed update to the docs).\n",
        "createdAt": "2016-04-25T15:27:35Z",
        "updatedAt": "2016-04-25T15:27:35Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Until the hidden dependencies are resolved, I updated the build instructions in the [README](https://github.com/Microsoft/msbuild/wiki/Building-Testing-and-Debugging-on-.Net-Core-MSBuild). Feel free to update it if I left anything out! \n",
        "createdAt": "2016-04-25T23:39:36Z",
        "updatedAt": "2016-04-25T23:39:36Z",
        "author": {
          "login": "Sarabeth-Jaffe-Microsoft"
        }
      },
      {
        "body": "@Sarabeth-Jaffe-Microsoft \n\nIs libunwind8 for both mac and linux, or only linux?\n",
        "createdAt": "2016-04-27T18:55:02Z",
        "updatedAt": "2016-04-27T18:55:02Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "@cdmihai Looks like it's Linux and FreeBSD only, though I'm not sure how stack walking works on the Mac:\n\nhttps://github.com/dotnet/coreclr/blob/775003a4c72f0acc37eab84628fcef541533ba4e/Documentation/building/osx-instructions.md mentions OpenSSL but not libunwind\n\nhttps://github.com/dotnet/coreclr/blob/775003a4c72f0acc37eab84628fcef541533ba4e/Documentation/building/linux-instructions.md mentions `libunwind8`.\n",
        "createdAt": "2016-04-27T19:48:32Z",
        "updatedAt": "2016-04-27T19:48:32Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@cdmihai @rainersigwald Got it, just clarified it in the documentation. \n",
        "createdAt": "2016-04-27T19:54:08Z",
        "updatedAt": "2016-04-27T19:54:08Z",
        "author": {
          "login": "Sarabeth-Jaffe-Microsoft"
        }
      },
      {
        "body": "I still see the issue under Ubuntu. Can you reopen?\n",
        "createdAt": "2016-05-03T23:13:03Z",
        "updatedAt": "2016-05-03T23:13:03Z",
        "author": {
          "login": "JunielKatarn"
        }
      },
      {
        "body": "@JunielKatarn What issue, exactly? Did you install `libunwind8`?\n",
        "createdAt": "2016-05-04T14:42:48Z",
        "updatedAt": "2016-05-04T14:42:48Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald \nYes, I have `libunwind8` installed. Still getting the same error.\nThat said, I AM using Ubuntu 16.04, which may not be supported.\nI'll try again with 14.04 and post the results here.\n",
        "createdAt": "2016-05-07T08:07:12Z",
        "updatedAt": "2016-05-07T08:07:12Z",
        "author": {
          "login": "JunielKatarn"
        }
      },
      {
        "body": "@JunielKatarn, can you please paste in the error you're getting? Hard to follow the thread to figure out which error you're referring to.\n",
        "createdAt": "2016-05-09T19:02:01Z",
        "updatedAt": "2016-05-09T19:02:01Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "@JunielKatarn I'm also interested in the error, but I bet it will be that you're using 16.04. AFAIK, .NET Core is only currently supported on 14.04 (though it [looks like](https://github.com/dotnet/coreclr/pull/4599) folks might be working on modernizing.\n\nI added that explicitly to the xplat build instructions: https://github.com/Microsoft/msbuild/wiki/Building-Testing-and-Debugging-on-.Net-Core-MSBuild/7884f4d239eedb6a47e170530d031c7d7ab28313\n",
        "createdAt": "2016-05-09T19:19:53Z",
        "updatedAt": "2016-05-09T19:19:53Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald, @cdmihai \nI just set up a brand new Ubuntu 14.04 instance, installed `libunwind8`, and MSBuild got built successfully off the shelf.\n\nI think it's safe to assume the issue lies with 16.04/corerun incompatibility.\n",
        "createdAt": "2016-05-10T05:07:17Z",
        "updatedAt": "2016-05-10T05:07:17Z",
        "author": {
          "login": "JunielKatarn"
        }
      }
    ]
  }
}