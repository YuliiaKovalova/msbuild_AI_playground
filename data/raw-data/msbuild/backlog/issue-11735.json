{
  "number": 11735,
  "title": "Dotnet MSBuild: Get Property does not expand properties",
  "body": "\n\n### Describe the bug\nUnlike building thee project or uses msbuild properties in `launchsettings.json` the dotnet cli command `dotnet msbuild --getProperty` does not expand properties correctly, which returns results that don't match other implementations. \n\n### To Reproduce\n```xml\n<Project>\n  <ItemGroup>\n    <Item Include=\"1\"/>\n    <Item Include=\"2\"/>\n  </ItemGroup>\n  <PropertyGroup>\n    <DynamicValue>@(Item)</DynamicValue>  \n </PropertyGroup>\n <Target Name=\"Print\">\n    <Message Importance=\"high\" Text=\"Value: $(DynamicValue)\"/>\n </Target>\n</Project>\n```\nSave that xml as `Example.target` and run ` dotnet msbuild Example.target --getProperty:DynamicValue` which will return `@(Item)` instead of the correct `1;2` like building the project or uses launch settings. \n\nIf you run `dotnet msbuild  Example.targe -t:Print` you will see it output the correct value of  `1;2`\n\n### Fun Facts\n- Rider had the same implementation as the dotnet cli and labeled it as a bug. I filled an issue with them https://youtrack.jetbrains.com/issue/RIDER-123106",
  "state": "OPEN",
  "createdAt": "2025-03-20T04:30:23Z",
  "updatedAt": "2025-04-24T21:18:39Z",
  "closedAt": null,
  "author": {
    "login": "ByronMayne"
  },
  "milestone": null,
  "assignees": {
    "nodes": [
      {
        "login": "rainersigwald"
      }
    ]
  },
  "labels": [
    "Area: Documentation",
    "Priority:2",
    "triaged"
  ],
  "comments": {
    "nodes": [
      {
        "body": "Triage: the getProperty feature is an MSBuild feature. Properties are evaluated before Items so the behavior makes sense even if it's not what you expected. I think if you set the property in a target and then explicitly ran the target when calling getProperty.\n\nI wonder if MSBuild should potentially detect this (ie when it's about to return @ in the getProperty output) and let the customer know how to get this to work.",
        "createdAt": "2025-04-15T20:16:58Z",
        "author": {
          "login": "marcpopMSFT"
        }
      },
      {
        "body": "Just from the documentation it does not mention that there is a difference, which at least there should be a call out. MSBuild is a beast and it's easy to fall into these little edge cases. Based of the docs it makes it appear like it would be the exact same value as if you are doing a build, which is not the case. \n \n> You can get the values that MSBuild items and properties would have without executing a build. This option is helpful when you need these values as inputs for the desired build process, but you need to evaluate a project to get the value. -- [docs ](https://learn.microsoft.com/en-us/visualstudio/msbuild/evaluate-items-and-properties?view=vs-2022)\n",
        "createdAt": "2025-04-16T14:58:38Z",
        "author": {
          "login": "ByronMayne"
        }
      },
      {
        "body": "In other words, I'd expect `--getProperty` to get the property value _after all evaluation, including properties and items_. While I agree that the scenario in question is rather uncommon, let's consider what the use of the property value after substituting of other properties is, but before substituting any items.\n\nThe user has a string `@(Item)`, and what are they supposed to do with that? The only thing that comes to mind would be to parse it, then invoke the corresponding `--getItem` commands to resolve the items in question, and then substitute them manually.\n\nBut this is what MSBuild already does! We have this logic! It is just not wired up with the `--getProperty` mechanism.",
        "createdAt": "2025-04-16T19:30:35Z",
        "author": {
          "login": "ForNeVeR"
        }
      },
      {
        "body": "You worded that much better then I would! ",
        "createdAt": "2025-04-21T16:17:27Z",
        "author": {
          "login": "ByronMayne"
        }
      },
      {
        "body": "Ok, so this is By Design, but very confusing.\n\n> In other words, I'd expect --getProperty to get the property value after all evaluation, including properties and items.\n\nThat's exactly what we do! The value after evaluation is the string `@(Item)`.\n\nWhen a task is invoked, we recursively expand:\n\n1. `Value: $(DynamicValue)`\n2. `Value: @(Item)`\n3. `Value: 1;2`\n\nWe have some documentation on this: [subtle effects of the evaluation order](https://learn.microsoft.com/visualstudio/msbuild/comparing-properties-and-items#subtle-effects-of-the-evaluation-order)--and man does that \"subtle\" deserve emphasis :(\n\nI would not want to do task-invocation-style recursive expansion automatically with `-getProperty`, because I think the right philosophy is that that should be a wrapper over using the API to evaluate a project and call [`GetPropertyValue`](https://learn.microsoft.com/dotnet/api/microsoft.build.evaluation.project.getpropertyvalue), which would have the described behavior.\n\nI could be convinced about an opt-in mode, though! Getting back an `@()` isn't super helpful.\n\nThe original feature request (https://github.com/dotnet/msbuild/issues/3911) that turned into `-getProperty` and friends was for `-evaluate:{expression}`, which might have bypassed this; I would expect `-evaluate:$(DynamicValue)` to go through the recursive expansion above, if it existed. That plays very badly with multiple returns though.",
        "createdAt": "2025-04-24T15:32:51Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@ghogen we should see if we can find a way to make the above behavior clearer in docs.",
        "createdAt": "2025-04-24T15:33:34Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I would maybe vote for different commands like `-getProperty` and `-getEvaluatedProperty` ?\n\n`-evaluate:` also looks quite nice, to be honest, but I cannot say it's often necessary.\n\n(I _do_ use `-getProperty` and `-getItem` in some of my small tools, so these options are quite useful and practical even as they are implemented)",
        "createdAt": "2025-04-24T21:18:27Z",
        "author": {
          "login": "ForNeVeR"
        }
      }
    ]
  }
}