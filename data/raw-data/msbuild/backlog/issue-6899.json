{
  "number": 6899,
  "title": "Getting 'Duplicate 'System.ReflectionAssembly...Attribute' attribute' build error when leveraging BaseIntermediateOutputPath and MSBuildProjectExtensionsPath",
  "body": "Hi,\r\n\r\nI have a project that uses the following MSBuild properties defined in a root-level `Directory.Build.props` file:\r\n\r\n```\r\n<PropertyGroup>\r\n    <MSBuildProjectExtensionsPath>obj\\$(PlatformName)</MSBuildProjectExtensionsPath>\r\n    <BaseIntermediateOutputPath>obj\\$(PlatformName)</BaseIntermediateOutputPath>    \r\n    <BaseOutputPath>bin\\$(PlatformName)</BaseOutputPath>              \r\n  </PropertyGroup>\r\n```\r\n\r\nThe `PlatformName` property is set either as an argument on `msbuild.exe` or derived by the name of the Visual Studio solution containing the project (we have a solution per platform and multiple projects per solution. A project can be contained in multiple solutions). The `PlatformName` property is also used to drive certain conditional MSBuild properties, conditional project/package references, etc.\r\n\r\nWe build the first platform using: \r\n\r\n`msbuild MyProject.csproj /p:PlatformName=Platform1` /restore\r\n\r\nThis will result in a successful build, populating the project's `obj` folder like:\r\n```\r\nobj\\Platform1\\.. //note: Contains project.assets.json etc.\r\nobj\\Platform1\\Debug\\..\r\nobj\\Platform1\\Debug\\netcoreapp3.1\\..\r\n```\r\n\r\nNote: We can keep (re)building the project using the same command without any issue.\r\n\r\nAfter the first successful build we build the second platform after the first one using:\r\n\r\n`msbuild MyProject.csproj /p:PlatformName=Platform2` /restore\r\n\r\nThis will result in a failed build with a bunch of errors similar to the following:\r\n\r\n```\r\nerror CS0579: Duplicate 'System.Reflection.AssemblyDescriptionAttribute' attribute\r\nerror CS0579: Duplicate 'System.Reflection.AssemblyVersionAttribute'\r\nerror CS0579: Duplicate 'System.Reflection.AssemblyTitleAttribute'\r\nerror CS0579: Duplicate 'System.Reflection.AssemblyProductAttribute'\r\n...\r\n```\r\n\r\nThe project's `obj` folder structure now looks like this:\r\n\r\n```\r\nobj\\Platform1\\..\r\nobj\\Platform1\\Debug\\..\r\nobj\\Platform1\\Debug\\netcoreapp3.1\\..\r\nobj\\Platform1\\Debug\\netstandard2.0\\..\r\nobj\\Platform2\\..\r\nobj\\Platform2\\Debug\\..\r\nobj\\Platform2\\Debug\\netcoreapp3.1\\.. \r\nobj\\Platform2\\Debug\\netstandard2.0\\.. \r\n```\r\n\r\nNote: If we now build the first project again it will fail with similar errors.\r\n\r\nThe folder structure looks as I would expect when reading [the documentation](https://docs.microsoft.com/en-us/visualstudio/msbuild/common-msbuild-project-properties?view=vs-2019) on `MSBuildProjectExtensionsPath` and `BaseIntermediateOutputPath` and I can't think of a reason why this scenario could not be supported. It looks like MSBuild finds both `<ProjectName>.AssemblyInfo.cs` files located in the two `obj\\$(PlatformName)\\$(Configuration)\\$(TargetFramework)\\` folders instead of just looking at the folder specified by `MSBuildProjectExtensionsPath` and/or `BaseIntermediateOutputPath`. \r\n\r\nAm I missing something? Is there another MSBuild property that needs to be set to get this to work?\r\n\r\nAny help/insights would be greatly appreciated!\r\n\r\nRegards,\r\n\r\nWouter\r\n",
  "state": "CLOSED",
  "createdAt": "2021-09-30T11:09:09Z",
  "updatedAt": "2024-02-21T14:11:29Z",
  "closedAt": "2021-10-01T18:32:11Z",
  "author": {
    "login": "wouterroos"
  },
  "labels": [
    "needs-attention",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Team Triage: Does your project use the `Microsoft.NET.SDK`?",
        "createdAt": "2021-09-30T16:29:18Z",
        "updatedAt": "2021-09-30T16:29:18Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "@BenVillalobos thanks for getting back to me so quickly. Yes the project does use the `Microsoft.NET.SDK`.",
        "createdAt": "2021-09-30T17:40:36Z",
        "updatedAt": "2021-09-30T17:40:36Z",
        "author": {
          "login": "wouterroos"
        }
      },
      {
        "body": "We think this might be an sdk issue where it's automatically excluding certain files based on the intermediateoutputpath, and because yours is customized it might miss some necessary excludes. @dsplaisted might have more info on this process, I'm only aware at a high level.",
        "createdAt": "2021-09-30T18:28:38Z",
        "updatedAt": "2021-09-30T18:28:38Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "Try adding something like this to your project Directory.Build.targets:\r\n\r\n```xml\r\n    <DefaultItemExcludes>$(DefaultItemExcludes);obj/**</DefaultItemExcludes>\r\n```",
        "createdAt": "2021-09-30T19:41:10Z",
        "updatedAt": "2021-09-30T19:41:10Z",
        "author": {
          "login": "dsplaisted"
        }
      },
      {
        "body": "@dsplaisted That seems to solve the issue, thanks! I'm curious though on why this is needed.",
        "createdAt": "2021-10-01T06:35:31Z",
        "updatedAt": "2021-10-01T06:35:31Z",
        "author": {
          "login": "wouterroos"
        }
      },
      {
        "body": "@wouterroos It's needed because by default all `.cs` files in your project folder (and in subfolders) are automatically included in the compilation.  The base output and intermediate output paths (by default `bin` and `obj`) are excluded from this.  However, since the intermediate output path depends on the platform, the generated files in the intermediate output from a different platform won't be excluded by default.  For example, when building for `Platform2`, it knows to exclude the files in `obj\\Platform2`, but not `obj\\Platform1`.\r\n\r\nThe `DefaultItemExcludes` property lets you add additional folders that should be ignored from the default includes.",
        "createdAt": "2021-10-01T18:32:11Z",
        "updatedAt": "2021-10-01T18:32:11Z",
        "author": {
          "login": "dsplaisted"
        }
      }
    ]
  }
}