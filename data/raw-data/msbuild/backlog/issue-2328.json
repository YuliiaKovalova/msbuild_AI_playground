{
  "number": 2328,
  "title": "Refactoring: LazyItemOperation should mutate items for all the operations that do mutations",
  "body": "Benefit: reduce the chances of introducing bugs by reducing clones\r\nWhen is it worth doing: when new item operations are added which mutate existing items\r\nRisk: perf\r\n\r\nWhenever an item operation needs to mutate existing items (for now only Update), it first has to clone them. Otherwise the mutations leak into the item cache and weird behaviour starts happening, like future operations mutating the state of past operations.\r\n\r\nUpdate does this in a [custom manner](https://github.com/Microsoft/msbuild/blob/master/src/Build/Evaluation/LazyItemEvaluator.UpdateOperation.cs#L38-L41). \r\nTo enable all operations that mutate existing items to automatically benefit from cloning the following refactorings are needed:\r\n- [LazyItemOperation.SelectItems](https://github.com/Microsoft/msbuild/blob/master/src/Build/Evaluation/LazyItemEvaluator.LazyItemOperation.cs#L57) needs to disambiguate between newly added items and existing items (providing their index in the list builder)\r\n- [LazyItemOperation.MutateItems](https://github.com/Microsoft/msbuild/blob/master/src/Build/Evaluation/LazyItemEvaluator.LazyItemOperation.cs#L62) (or maybe a new method that runs before MutateItems) needs to become a template that takes the input of SelectItems and clones the already existing items. \r\n- Update should switch to using Select / Mutate / Save instead of reimplementing Apply\r\n",
  "state": "OPEN",
  "createdAt": "2017-07-19T22:18:04Z",
  "updatedAt": "2024-02-21T16:36:21Z",
  "closedAt": null,
  "author": {
    "login": "cdmihai"
  },
  "labels": [
    "Refactoring",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": []
  }
}