{
  "number": 3479,
  "title": "ItemGroup item condition with metadata doesn't work in Project",
  "body": "`ItemGroup` with an item which has a condition with item metadata doesn't work in `Project`, but it works in a `Target`.\r\n\r\n### Steps to reproduce\r\n\r\n#### Example `ItemGroup`\r\n```xml\r\n<ItemGroup>\r\n    <ContentX Include=\"@(Content)\" Condition=\"'%(Content.X)' == 'abc'\" />\r\n</ItemGroup>\r\n```\r\n\r\nThis works in a `Target`, but not in `Project`.\r\n\r\n#### Command line\r\n```\r\nmsbuild\r\n```\r\nor\r\n```\r\ndotnet build\r\n```\r\n\r\n### Expected  behavior\r\nIt uses the metadata to evaluate the condition.\r\n\r\n### Actual behavior\r\nIt throws an exception:\r\n```\r\nerror MSB4191: The reference to custom metadata \"X\" at position 1 is not allowed in this condition \"'%(Content.X)' == 'abc'\".\r\n```\r\n\r\n### Environment data\r\n`msbuild /version` output:\r\n15.7.179.6572\r\n\r\nOS info:\r\nWindows 10\r\n\r\nIf applicable, version of the tool that invokes MSBuild (Visual Studio, dotnet CLI, etc):\r\n- Visual Studio: 15.7.4.\r\n- .NET CLI: 2.1.300.",
  "state": "OPEN",
  "createdAt": "2018-07-04T19:56:02Z",
  "updatedAt": "2025-04-29T13:58:01Z",
  "closedAt": null,
  "author": {
    "login": "jp2masa"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "Area: Language",
    "Area: Documentation",
    "Priority:3",
    "triaged"
  ],
  "comments": {
    "nodes": [
      {
        "body": "@jp2masa \r\nThere's another way to achieve it outside of targets:\r\n\r\n```xml\r\n      <ContentX Include=\"@(Content->HasMetadata('X')->WithMetadataValue('X','abc'))\"/>\r\n```\r\nDocumentation: https://docs.microsoft.com/de-de/visualstudio/msbuild/item-functions?view=vs-2019\r\n\r\nIt's important to check/filter first whether X is defined with HasMetadata, because WithMetadataValue throws an error, if the give meta value is not defined.",
        "createdAt": "2021-01-16T05:37:23Z",
        "author": {
          "login": "TFTomSun"
        }
      },
      {
        "body": "Thanks for the alternative solution. I just realized that its negation would be:\r\n\r\n```csproj\r\n      <ContentX Include=\"@(Content)\" Exclude=\"@(Content->HasMetadata('X')->WithMetadataValue('X','abc'))\"/>\r\n```\r\nbecause:\r\n```csproj\r\n      <ContentX Include=\"@(!Content->HasMetadata('X')->WithMetadataValue('X','abc'))\"/>\r\n```\r\nwill (silently) set the value to `@(!Content->HasMetadata('X')->WithMetadataValue('X','abc'))` without raising any errors (which is a bit counterintuitive given the other similar situations where the exclamation mark is allowed).",
        "createdAt": "2021-07-07T19:47:17Z",
        "author": {
          "login": "am11"
        }
      },
      {
        "body": "I have same issue where I need to filter based on built-in metadata. Works when that same ItemGroup are inside a Task.\r\nIe.\r\n```\r\nerror MSB4190: The reference to the built-in metadata \"RootDir\" at position 1 is not allowed in this condition \"'%(RootDir)' == '$(MSBuildProjectExtensionsPath)'\"\r\n```",
        "createdAt": "2023-08-29T12:50:25Z",
        "author": {
          "login": "hknielsen"
        }
      },
      {
        "body": "Is this actually supposed to work? I don\u2019t know what the actual limitations are supposed to be, but top-level `ItemGroup` seems to be intentionally feature-limited for performance. The actual expansion may happen after parsing whereas executing a condition based on metadata would require expansion to be performed during parsing unless things are made a lot more complicated\u2026?",
        "createdAt": "2023-08-29T12:58:41Z",
        "author": {
          "login": "binki"
        }
      },
      {
        "body": "It's always been this way -- outside of Targets, each element is evaluated as a single entity, whereas syntax like ` Condition=\"'%(Content.X)' == 'abc'\"` implies \"batching\" -- evaluating for each distinct bucket, which only happens inside of Targets. Later, filtering like `->WithMetadataValue('X','abc')` became possible.\r\n\r\nI don't know of a fundamental reason why batching can't happen outside of targets, at least on Conditions, if someone was willing to do all the work and prove that performance wasn't negatively impacted.",
        "createdAt": "2023-09-26T03:10:31Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "@svew\r\n> The official MSBuild documentation _frequently_ shows the bugged example as working code, so I'm really hoping that you're wrong about it having always worked this way, otherwsie it's a bad omen for the accuracy of MSBuild docs generally... See this example on the [Use MSBuild items and item types](https://learn.microsoft.com/en-us/visualstudio/msbuild/msbuild-items?view=vs-2022#BKMK_Transforming) page:\r\n\r\nThe example you mention includes `<Target/>`. This issue is also sort of a feature request; docs bugs should probably be filed as separate issues (but, again, I think that example is fine).",
        "createdAt": "2024-03-18T23:33:57Z",
        "author": {
          "login": "binki"
        }
      },
      {
        "body": "> @svew\n> > The official MSBuild documentation _frequently_ shows the bugged example as working code, so I'm really hoping that you're wrong about it having always worked this way, otherwsie it's a bad omen for the accuracy of MSBuild docs generally... See this example on the [Use MSBuild items and item types](https://learn.microsoft.com/en-us/visualstudio/msbuild/msbuild-items?view=vs-2022#BKMK_Transforming) page:\n> \n> The example you mention includes `<Target/>`. This issue is also sort of a feature request; docs bugs should probably be filed as separate issues (but, again, I think that example is fine).\n\nYou are correct, it doesn't actually refer to this item, I deleted the comment once I realized",
        "createdAt": "2024-03-18T23:36:00Z",
        "author": {
          "login": "svew"
        }
      },
      {
        "body": "Triage: We probably will not change this in the near future. But we can update the documentation for the error so it is easier to find a solution when you run into this.",
        "createdAt": "2025-04-29T13:57:59Z",
        "author": {
          "login": "maridematte"
        }
      }
    ]
  }
}