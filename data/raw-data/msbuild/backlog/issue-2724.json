{
  "number": 2724,
  "title": "AssignCulture task incorrectly categorizes some EmbeddedResources as culture-specific",
  "body": "### Steps to reproduce\r\n\r\nCreate a class library with a file `Index.Id.cshtml` marked as embedded resource.\r\nBuild.\r\n\r\nProject file\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <None Remove=\"Index.Id.html\" />\r\n  </ItemGroup>\r\n\r\n  <ItemGroup>\r\n    <EmbeddedResource Include=\"Index.Id.html\">\r\n      <CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>\r\n    </EmbeddedResource>\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\r\n\r\n### Expected  behavior\r\nShould be part of the embedded resource of the assembly\r\n\r\n### Actual behavior\r\nA resource assembly for the `Id` culture is created and this file added to it.\r\n\r\nMy understanding is that when the `AssignCulture` task runs, it finds `Id` to be a valid culture. I confirmed it by looking at `msbuild.log`.\r\n\r\nI could suggest for this task to look into a group properties to skip the files. So I could at least mark the files as non resx.",
  "state": "OPEN",
  "createdAt": "2017-11-16T17:52:07Z",
  "updatedAt": "2024-02-21T16:35:28Z",
  "closedAt": null,
  "author": {
    "login": "sebastienros"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "I found a solution\r\n\r\n```\r\n<EmbeddedResource Include=\"\">\r\n  <WithCulture>false</WithCulture>\r\n</EmbeddedResource>\r\n```",
        "createdAt": "2017-11-17T17:19:38Z",
        "updatedAt": "2017-11-17T17:19:47Z",
        "author": {
          "login": "sebastienros"
        }
      },
      {
        "body": "Just for infos, you can reopen the issue.\r\n\r\nMy mistake, i also needed to use `Culture = ''` and after some targets because msbuild assign itself these metadata. This prevent from having a culture assembly, and the file is embedded in the assembly.\r\n\r\nBut then the resource name no longer has the `.Id` part. So, here, what i needed to do. Note: here all embedded resources are updated but this is not mandatory.\r\n\r\n    <Target Name=\"EmbeddModuleAssets\" BeforeTargets=\"BeforeBuild\">\r\n    ...\r\n        <EmbeddedResource Update=\"@(EmbeddedResource)\" Condition=\"'%(EmbeddedResource.Link)' == ''\">\r\n          <LogicalName>$([System.String]::new('$(MSBuildProjectName)\\%(RelativeDir)%(FileName)%(Extension)').Replace('\\', '.').Replace('/', '.'))</LogicalName>\r\n      </EmbeddedResource>\r\n    ...\r\n    </Target>\r\n\r\n    <Target Name=\"UpdateModuleAssets\" AfterTargets=\"CreateManifestResourceNames\">\r\n      <ItemGroup>\r\n        <EmbeddedResource Update=\"@(EmbeddedResource)\" Condition=\"'%(EmbeddedResource.WithCulture)' == 'true'\">\r\n          <WithCulture>false</WithCulture>\r\n          <Culture></Culture>\r\n        </EmbeddedResource>\r\n      </ItemGroup>\r\n    </Target>\r\n",
        "createdAt": "2017-12-04T02:14:14Z",
        "updatedAt": "2017-12-04T02:14:14Z",
        "author": {
          "login": "jtkech"
        }
      }
    ]
  }
}