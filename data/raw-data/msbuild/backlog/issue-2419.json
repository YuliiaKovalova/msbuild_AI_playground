{
  "number": 2419,
  "title": "MSBuild has non-trivial overhead due to JIT'ing",
  "body": "VisualStudio.15.IntPreview/15.3.0-pre.7.0+26730.0.d15rel\r\n\r\n1. Enlist in Roslyn (assuming e:\\Roslyn, otherwise change paths)\r\n2. Restore.cmd\r\n3. Run:\r\n\r\n```\r\nmsbuild /nologo /m:1 /v:m /clp:Summary;PerformanceSummary /flp:v:d /t:ReportAssetsLogMessages /p:\"SolutionFileName=Roslyn.sln;LangName=en-US;Configuration=Debug;LangID=1033;DesignTimeBuild=true;SolutionDir=E:\\\\roslyn\\\\;SolutionExt=.sln;BuildingInsideVisualStudio=true;DefineExplicitDefaults=true;Platform=AnyCPU;SolutionPath=E:\\\\roslyn\\\\Roslyn.sln;SolutionName=Roslyn;DevEnvDir=C:\\Program Files (x86)\\Microsoft Visual Studio\\Enterprise\\Common7\\IDE;BuildingProject=false\" E:\\roslyn\\src\\Compilers\\Core\\CodeAnalysisTest\\CodeAnalysisTest.csproj\r\n```\r\n\r\n```\r\nProject Evaluation Performance Summary:\r\n      149 ms  E:\\roslyn\\src\\Compilers\\Core\\CodeAnalysisTest\\CodeAnalysisTest.csproj   1 calls\r\n\r\nProject Performance Summary:\r\n      142 ms  E:\\roslyn\\src\\Compilers\\Core\\CodeAnalysisTest\\CodeAnalysisTest.csproj   1 calls\r\n                142 ms  ReportAssetsLogMessages                    1 calls\r\n\r\nTarget Performance Summary:\r\n      141 ms  ReportAssetsLogMessages                    1 calls\r\n\r\nTask Performance Summary:\r\n      134 ms  ReportAssetsLogMessages                    1 calls\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n```\r\n\r\nIn the above, the following binaries are JIT'd consuming 150ms of CPU time, is this expected?\r\n\r\nName | JitTimemsec | Num Methods | IL Size | Native Size\r\n-- | -- | -- | -- | --\r\nTOTAL | 155.3 | 568 | 48,467 | 133,499\r\nC:\\Program Files (x86)\\Microsoft Visual Studio\\Preview\\Enterprise\\MSBuild\\15.0\\Bin\\System.Collections.Immutable.dll | 22.7 | 23 | 888 | 2,038\r\nC:\\Program Files (x86)\\Microsoft Visual Studio\\Preview\\Enterprise\\MSBuild\\15.0\\Bin\\Microsoft.Build.dll | 19.8 | 79 | 8,163 | 17,994\r\nC:\\Program Files (x86)\\Microsoft Visual Studio\\Preview\\Enterprise\\MSBuild\\15.0\\Bin\\Microsoft.Build.Utilities.Core.dll | 1.0 | 2 | 343 | 728\r\nC:\\Program Files (x86)\\Microsoft Visual Studio\\Preview\\Enterprise\\MSBuild\\15.0\\bin\\MSBuild.exe | 0.8 | 1 | 67 | 153\r\nC:\\Program Files (x86)\\Microsoft Visual Studio\\Preview\\Enterprise\\MSBuild\\15.0\\Bin\\Microsoft.Build.Framework.dll | 0.5 | 5 | 169 | 335\r\n",
  "state": "CLOSED",
  "createdAt": "2017-08-11T04:50:22Z",
  "updatedAt": "2024-02-21T17:17:21Z",
  "closedAt": "2021-08-13T09:58:40Z",
  "author": {
    "login": "davkean"
  },
  "labels": [
    "backlog",
    "Area: Performance",
    "For consideration",
    "Priority:2",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "VS 17.0"
  },
  "comments": {
    "nodes": [
      {
        "body": "When I tried to NGEN these binaries manually, it seems like they already had NGEN entries - are you passing MSBuild's config file to NGEN so that it generates images based on the binding policy?",
        "createdAt": "2017-08-11T04:53:24Z",
        "updatedAt": "2017-08-11T04:53:24Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "Hmm, I tried manually passing a config or appbase to ngen and Immutable - it doesn't help, we still JIT it - perhaps it's just some of the generic methods that we can't produce native code up front for?",
        "createdAt": "2017-08-11T05:01:44Z",
        "updatedAt": "2017-08-11T05:01:44Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "Use Advanced Group -> Jit Stats in PerfView to see what's being JIT'd.",
        "createdAt": "2017-08-11T05:02:47Z",
        "updatedAt": "2017-08-11T05:02:47Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "I can see these NGEN images getting loaded:\r\n\r\n![image](https://user-images.githubusercontent.com/1103906/29202853-522ea6e4-7eaf-11e7-9c15-9c47e856341a.png)\r\n![image](https://user-images.githubusercontent.com/1103906/29202863-6fa849b4-7eaf-11e7-8945-fecc356f5805.png)\r\n![image](https://user-images.githubusercontent.com/1103906/29202905-c14bc67e-7eaf-11e7-81e7-e91189e84467.png)\r\n![image](https://user-images.githubusercontent.com/1103906/29202916-de0479aa-7eaf-11e7-8c80-04e91b45361f.png)\r\n\r\nBut it appears that are exhibiting patterns that cause them to be JIT'd.\r\n\r\n\r\n",
        "createdAt": "2017-08-11T06:13:03Z",
        "updatedAt": "2017-08-11T06:13:03Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "Note, I filed https://github.com/dotnet/corefx/issues/23125 against CoreFx for the Immutable JIT which mostly is 1 method.",
        "createdAt": "2017-08-11T06:14:21Z",
        "updatedAt": "2017-08-11T06:15:26Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "We ngen through the VSIX:\r\n\r\nhttps://github.com/Microsoft/msbuild/blob/2d8a4341875e532bdf25a14f208f62a7bb547774/setup/files.swr#L25\r\n\r\nRPS has caught performance regressions when we accidentally didn't in the past, as well as when our binding redirect mismatched with VS's. So the \"they're NGENed but still getting JITted\" theory rings true to me.",
        "createdAt": "2017-08-11T14:47:16Z",
        "updatedAt": "2017-08-11T14:47:16Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "when trying to run command in summary getting error\r\n```\r\nroslyn\\src\\Compilers\\Core\\CodeAnalysisTest\\CodeAnalysisTest.csproj : \r\n error MSB4057: The target \"ReportAssetsLogMessages\" does not exist in the project.\r\n```\r\ne.g.\r\n```\r\nC:\\GitHub\\roslyn\\src\\Compilers\\Core\\CodeAnalysisTest\\CodeAnalysisTest.csproj : error MSB4057: The target \"ReportAssetsLogMessages\" does not exist in the project.\r\n\r\nProject Evaluation Performance Summary:\r\n     6005 ms  C:\\GitHub\\roslyn\\src\\Compilers\\Core\\CodeAnalysisTest\\CodeAnalysisTest.csproj   1 calls\r\n\r\nProject Performance Summary:\r\n      378 ms  C:\\GitHub\\roslyn\\src\\Compilers\\Core\\CodeAnalysisTest\\CodeAnalysisTest.csproj   1 calls\r\n                378 ms  ReportAssetsLogMessages                    1 calls\r\n\r\nBuild FAILED.\r\n\r\nC:\\GitHub\\roslyn\\src\\Compilers\\Core\\CodeAnalysisTest\\CodeAnalysisTest.csproj : error MSB4057: The target \"ReportAssetsLogMessages\" does not exist in the project.\r\n    0 Warning(s)\r\n    1 Error(s)\r\n\r\nTime Elapsed 00:00:08.60\r\n```",
        "createdAt": "2017-08-14T04:26:36Z",
        "updatedAt": "2017-08-14T04:26:36Z",
        "author": {
          "login": "benaadams"
        }
      },
      {
        "body": "@davkean is there a roslyn branch that has `ReportAssetsLogMessages`? Can't find the jitted Immutable method",
        "createdAt": "2017-08-14T04:53:13Z",
        "updatedAt": "2017-08-14T05:03:22Z",
        "author": {
          "login": "benaadams"
        }
      },
      {
        "body": "Need to be on 15.3 build.",
        "createdAt": "2017-08-14T05:27:27Z",
        "updatedAt": "2017-08-14T05:27:27Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "https://github.com/Microsoft/msbuild/tree/vs15.3 ?\r\nOr https://github.com/dotnet/roslyn/tree/dev15.3.x ?",
        "createdAt": "2017-08-14T05:59:10Z",
        "updatedAt": "2017-08-14T05:59:10Z",
        "author": {
          "login": "benaadams"
        }
      },
      {
        "body": "Ah, sorry - I thought we back ported this to 1.1, I'm guessing we didn't? If so, install the latest 2.0 CLI to get this target.",
        "createdAt": "2017-08-14T06:00:33Z",
        "updatedAt": "2017-08-14T06:00:33Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "Ah am running with CoreRun.exe as have to target standalone and its not producing an exe; will rummage. Know where to look now :)",
        "createdAt": "2017-08-14T06:03:35Z",
        "updatedAt": "2017-08-14T06:03:35Z",
        "author": {
          "login": "benaadams"
        }
      },
      {
        "body": "It comes from http://github.com/dotnet/sdk.",
        "createdAt": "2017-08-14T06:05:27Z",
        "updatedAt": "2017-08-14T06:05:27Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "Ah, copied all the stuff from `Microsoft Visual Studio\\Preview\\Enterprise\\MSBuild` (Sdk/Microsoft/15) to the MSBuild directory, mostly seems to work - now getting an issue reading registry for CodeAnalysis\r\n```\r\nC:\\GitHub\\msbuild\\bin\\Release-NetCore\\AnyCPU\\Windows_NT\\Windows_NT_Deployment>.\\CoreRun.exe MSBuild.dll  /nologo /m:1 /v:m /clp:Summary;PerformanceSummary /flp:v:d /t:ReportAssetsLogMessages /p:\"SolutionFileName=Roslyn.sln;LangName=en-US;Configuration=Debug;LangID=1033;DesignTimeBuild=true;SolutionDir=C:\\\\GitHub\\\\roslyn\\\\;SolutionExt=.sln;BuildingInsideVisualStudio=true;DefineExplicitDefaults=true;Platform=AnyCPU;SolutionPath=C:\\\\GitHub\\\\roslyn\\\\Roslyn.sln;SolutionName=Roslyn;DevEnvDir=C:\\Program Files (x86)\\Microsoft Visual Studio\\Preview\\Enterprise\\Common7\\IDE;BuildingProject=false\" C:\\GitHub\\roslyn\\src\\Compilers\\Core\\CodeAnalysisTest\\CodeAnalysisTest.csproj\r\nC:\\GitHub\\msbuild\\bin\\Release-NetCore\\AnyCPU\\Windows_NT\\Windows_NT_Deployment\\Microsoft\\VisualStudio\\v15.0\\CodeAnalysis\\\r\n\r\nMicrosoft.CodeAnalysis.targets(26,5): error MSB4184: The expression \r\n\"Registry:HKEY_LOCAL_MACHINE\\Software\\Microsoft\\VisualStudio\\15.0\\Setup\\EDev@StanDir\" \r\ncannot be evaluated.  [C:\\GitHub\\roslyn\\src\\Compilers\\Core\\CodeAnalysisTest\\CodeAnalysisTest.csproj]\r\n\r\nProject Evaluation Performance Summary:\r\n        0 ms  C:\\GitHub\\roslyn\\src\\Compilers\\Core\\CodeAnalysisTest\\CodeAnalysisTest.csproj   1 calls\r\n\r\nProject Performance Summary:\r\n      126 ms  C:\\GitHub\\roslyn\\src\\Compilers\\Core\\CodeAnalysisTest\\CodeAnalysisTest.csproj   1 calls\r\n                126 ms  ReportAssetsLogMessages                    1 calls\r\n\r\nBuild FAILED.\r\n\r\nC:\\GitHub\\msbuild\\bin\\Release-NetCore\\AnyCPU\\Windows_NT\\Windows_NT_Deployment\\Microsoft\\VisualStudio\\v15.0\\CodeAnalysis\\Microsoft.CodeAnalysis.targets(26,5): \r\nerror MSB4184: The expression \"Registry:HKEY_LOCAL_MACHINE\\Software\\Microsoft\\VisualStudio\\15.0\\Setup\\EDev@StanDir\" \r\ncannot be evaluated.  [C:\\GitHub\\roslyn\\src\\Compilers\\Core\\CodeAnalysisTest\\CodeAnalysisTest.csproj]\r\n    0 Warning(s)\r\n    1 Error(s)\r\n\r\nTime Elapsed 00:00:05.19\r\n```\r\nCan keep looking if you have any tips?",
        "createdAt": "2017-08-14T15:45:12Z",
        "updatedAt": "2017-08-14T15:45:12Z",
        "author": {
          "login": "benaadams"
        }
      },
      {
        "body": "@benaadams I suspect some of your bad time is mixing full framework world (installed to Program Files/VS) with coreclr msbuild.\r\n\r\nLooks like you can safely delete `C:\\GitHub\\msbuild\\bin\\Release-NetCore\\AnyCPU\\Windows_NT\\Windows_NT_Deployment\\Microsoft\\VisualStudio\\v15.0\\CodeAnalysis\\Microsoft.CodeAnalysis.targets`; it's covered by an existence check:\r\n\r\nhttps://github.com/Microsoft/msbuild/blob/2d8a4341875e532bdf25a14f208f62a7bb547774/src/Tasks/Microsoft.Common.CurrentVersion.targets#L5768-L5772\r\n\r\n-------\r\n\r\nThe way I usually hack around with private bits of MSBuild in .NET Core scenarios is:\r\n\r\n* Download and unzip an SDK from, say, https://dotnetcli.blob.core.windows.net/dotnet/Sdk/release/2.0.0/dotnet-sdk-latest-win-x64.zip\r\n* Or just copy `C:\\Program Files\\dotnet\\` to a folder of choice\r\n* Make sure path points to it.\r\n* Overwrite as desired. Interesting bits:\r\n  * `{root}\\sdk\\2.0.0\\` has the MSBuild assemblies and core MSBuild targets.\r\n  * `sdk\\2.0.0\\MSBuild.deps.json` may interfere with loading private `System.*` assemblies and need to be altered.\r\n  * SDKs in `sdk\\2.0.0\\Sdks\\Microsoft.NET.Sdk` and parallel\r\n\r\nYou can do a similar thing with full framework MSBuild from the VS folder, but you have to search around for more bits.\r\n\r\nWe should have scripts to do that for you: #2425",
        "createdAt": "2017-08-14T16:01:27Z",
        "updatedAt": "2017-08-14T16:01:27Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Oh wait, I don't think the SDK has all of the design-time targets. So if you really want to test on corefx, you'll probably have to do what you're doing and keep mangling things 'til they work :(",
        "createdAt": "2017-08-14T16:42:46Z",
        "updatedAt": "2017-08-14T16:42:46Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "In a trace I did for this: https://github.com/dotnet/sdk/issues/1534, 56.3% of CPU time was just spent JITing. Node reuse doesn't help here because we don't reuse a node when there's only a single project.",
        "createdAt": "2017-08-24T06:46:25Z",
        "updatedAt": "2017-08-24T06:46:25Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "Reproduced with latest bits and the Build target (as ReportAssetsLogMessages no longer exists) and seeing >1.2 second of cummulative JIT time which is indeed excessive.\r\n\r\nSimply running NGEN on MSBuild.exe reduced it by ~40%. Something is indeed off here.",
        "createdAt": "2021-04-13T12:28:59Z",
        "updatedAt": "2021-04-13T12:28:59Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "Doesn't look worth keeping around now that #6666 is in. There is still some JITting but it's caused by platform constraints - mainly generics - rather than a bug on our side. We're looking at tweaking our IBC optimization process in #6067.",
        "createdAt": "2021-08-13T09:58:40Z",
        "updatedAt": "2021-08-13T09:58:40Z",
        "author": {
          "login": "ladipro"
        }
      }
    ]
  }
}