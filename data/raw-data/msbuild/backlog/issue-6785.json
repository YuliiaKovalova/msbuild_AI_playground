{
  "number": 6785,
  "title": "ResolveAssemblyReferences not run when project does not have project references",
  "body": "## Summary\r\n\r\nProject `MyLib` has a `PackageReference` with `PrivateAssets=\"compile\"`, so that the package's dependencies don't leak as public APIs to downstream projects. Whatever package was used by this `PackageReference` has a dependency on `PkgA` 1.0.0\r\n\r\nProject `MyLib` is packed into `MyLib.1.0.0.nupkg`\r\n\r\nProject `MyApp` has a `PackageReference` to `MyLib` 1.0.0, and also `PkgA` 2.0.0, but not `ProjectReference` to anything.\r\n\r\nIt appears that ResolveAssemblyReferences is not run, and therefore no binding redirects are created for `PkgA.dll`. Therefore, at runtime when `MyLib.dll` tries to access `PkgA.dll, Version=1.0.0`, but instead finds `PkgA.dll, Version=2.0.0`, the fusion loader throws an assembly load exception.\r\n\r\n## Repro steps\r\n\r\nIt's a bit involved, sorry \ud83d\ude1e \r\n\r\n[npnjRuntie.zip](https://github.com/dotnet/sdk/files/6025829/npnjRuntie.zip)\r\n\r\nIn this repro:\r\n\r\n* `MyLib` has `<PackageReference Include=\"NuGet.Protocol\" Version=\"4.9.4\" PrivateAssets=\"compile\" />`\r\n* NuGet.Protocol has a dependency on Newtonsoft.Json version 9.0.0\r\n* Pack MyLib to get `MyLib.1.0.0.nupkg`, and copy it to `$(root)\\nupkgs\\`.\r\n* Now, clear `$(root)\\gpf` if MyApp has already been restored, and then restore MyApp.\r\n* MyApp has `<PackageReference Include=\"MyLib\" Version=\"1.0.0\" />` and `<PackageReference Include=\"Newtonsoft.Json\" Version=\"12.0.2\" />`\r\n\r\nRun MyApp\r\n\r\n## Actual\r\n\r\n`MyApp.exe.config` does not have any binding redirects. Running the app gives this error:\r\n\r\n> Unhandled Exception: NuGet.Protocol.Core.Types.FatalProtocolException: Unable to load the service index for source https://api.nuget.org/v3/index.json. ---> System.IO.FileLoadException: Could not load file or assembly 'Newtonsoft.Json, Version=9.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed' or one of its dependencies. The located assembly's manifest definition does not match the assembly reference. (Exception from HRESULT: 0x80131040)\r\n\r\n## Expected\r\n\r\nModify MyApp's csproj and change `<PackageReference Include=\"MyLib\" Version=\"1.0.0\" />` to `<ProjectReference Include=\"..\\MyLib\\MyLib.csproj\" />`, and run the app again.\r\n\r\nNow `MyApp.exe.config` has a binding redirect for Newtonsoft.Json, and running the app works without error.\r\n\r\n## Analysis\r\n\r\nComparing the `project.assets.json` file of `MyApp` when `MyLib` is a `PackageReference` and `ProjectReference`, they're pretty much the same, except for MyLib being a project rather than a package. Therefore, I do not believe the problem is due to NuGet, but is instead due to the .NET SDK or msbuild.\r\n\r\nLooking at binlogs of the two builds, when using the project reference, I see that ResolveAssemblyReferences is run, but when using the package reference, I see a log message explicitly saying `No suggested binding redirects from ResolveAssemblyReferences`.  The binlog shows that `ResolveAssemblyReferences` did not run, although I didn't figure out why before creating this issue.",
  "state": "OPEN",
  "createdAt": "2021-02-22T23:32:31Z",
  "updatedAt": "2024-01-31T08:21:56Z",
  "closedAt": null,
  "author": {
    "login": "zivkan"
  },
  "labels": [
    "Area: Task: Resolve Assembly References (RAR)",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Backlog"
  },
  "comments": {
    "nodes": [
      {
        "body": "I couldn't figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one area label.",
        "createdAt": "2021-02-22T23:32:35Z",
        "updatedAt": "2021-02-22T23:32:35Z",
        "author": {
          "login": "ghost"
        }
      },
      {
        "body": "This looks like a bug (or feature?) in the `ResolveAssemblyReferences` task.  It appears that it may not be reading the assembly references of `MyLib.dll` in the `PackageReference` case.  This may be because it is passed in under `Assemblies` instead of `AssemblyFiles`, or because it has `ExternallyResolved` set to `true`.\r\n\r\nAttached are the binlogs.\r\n[Binlogs.zip](https://github.com/dotnet/sdk/files/7043272/Binlogs.zip)\r\n",
        "createdAt": "2021-08-25T02:51:43Z",
        "updatedAt": "2021-08-25T02:51:43Z",
        "author": {
          "login": "dsplaisted"
        }
      },
      {
        "body": "@marcpopMSFT @rainersigwald for triage",
        "createdAt": "2021-08-25T02:52:21Z",
        "updatedAt": "2021-08-25T02:52:21Z",
        "author": {
          "login": "dsplaisted"
        }
      },
      {
        "body": "> because it has `ExternallyResolved` set to `true`.\r\n\r\nI believe this is the culprit here but haven't confirmed.",
        "createdAt": "2021-08-25T03:25:07Z",
        "updatedAt": "2021-08-25T03:25:07Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}