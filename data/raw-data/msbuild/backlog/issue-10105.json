{
  "number": 10105,
  "title": "[Bug]: Inconsistent floating point behaviour changed between msbuild 16 and 17",
  "body": "### Issue Description\r\n\r\nRunning in Swedish regional settings, certain expressions that involve dividing and rounding values from msbuild properties return different results in msbuild 17 compared to msbuild 16. I suspect it's related to #8710 from 17.8.\r\n\r\n\r\n\r\n### Steps to Reproduce\r\n\r\nIn summary, I take TotalSeconds (double) from a TimeSpan and put that in an msbuild property. Depending on how I then combined dividing and rounding in separate or combined expressions, the output is different.\r\n\r\nThe following msbuild file show the differences:\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<Project\r\n xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\"\r\n         ToolsVersion=\"Current\"\r\n         DefaultTargets=\"Build\">\r\n\r\n    <Target Name=\"Build\">\r\n    \r\n        <PropertyGroup>\r\n            <TotalSeconds>$([System.DateTime]::UtcNow.Subtract($([System.DateTime]::UtcNow.Date)).TotalSeconds)</TotalSeconds>\r\n    \r\n            <Divided>$([MSBuild]::Divide($(TotalSeconds), 2))</Divided>\r\n            <ThenRounded>$([System.Math]::Round($(Divided)))</ThenRounded>\r\n    \r\n            <CombinedDivideAndRound>$([System.Math]::Round($([MSBuild]::Divide($(TotalSeconds), 2))))</CombinedDivideAndRound>\r\n    \r\n            <AllInOne>$([System.Math]::Round($([MSBuild]::Divide($([System.DateTime]::UtcNow.Subtract($([System.DateTime]::UtcNow.Date)).TotalSeconds), 2))))</AllInOne>\r\n        </PropertyGroup>\r\n  \r\n         <!-- This will output something like 31161,3224946. -->\r\n        <Message Text=\"TotalSeconds: $(TotalSeconds)\" Importance=\"High\"/>\r\n        \r\n        <!-- Sending the msbuild (string?) property $(TotalSeconds) to the msbuild Divide function.\r\n             Seems msbuild 16 will understand the decimal comma, while msbuild 17 will ignore it (thousand sep?) -->\r\n        <!-- MSBUILD 16 output: 15580,66112473 -->\r\n        <!-- MSBUILD 17 output: 1558066112473 -->\r\n        <Message Text=\"Divided: $(Divided)\" Importance=\"High\"/>\r\n        \r\n        <!-- Sending the msbuild (string?) property $(Divided) to the Math Round function.\r\n             In this case also msbuild 16 will ignore the decimal comma that we got in $(Divided)\r\n             on that version. -->\r\n        <!-- MSBUILD 16 output: 1558066112473 -->\r\n        <!-- MSBUILD 17 output: 1558066112473 -->\r\n        <Message Text=\"ThenRounded: $(ThenRounded)\" Importance=\"High\"/>\r\n        \r\n        <!-- Sending the output from divide directly to round in a single expression. -->\r\n        <!-- MSBUILD 16 output: 15581 -->\r\n        <!-- MSBUILD 17 output: 1558066112473 -->\r\n        <Message Text=\"CombinedDivideAndRound: $(CombinedDivideAndRound)\" Importance=\"High\"/>\r\n        \r\n        <!-- Everything in a single expression. Correct output on both versions. But the expression is long and difficult to read... -->\r\n        <!-- MSBUILD 16 output: 15581 -->\r\n        <!-- MSBUILD 17 output: 15581 -->\r\n        <Message Text=\"AllInOne: $(AllInOne)\" Importance=\"High\"/>\r\n    </Target>\r\n\r\n</Project>\r\n```\r\n\r\n\r\n### Expected Behavior\r\n\r\nI *don't* want to claim this is really the expected output, but it is the *actual* output on msbuild 16.11:\r\n\r\n```\r\n> \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Professional\\MSBuild\\Current\\Bin\\amd64\\MSBuild.exe\" dividetest.msbuild\r\n  TotalSeconds: 34655,5998993\r\n  Divided: 17327,79994965\r\n  ThenRounded: 1732779994965\r\n  CombinedDivideAndRound: 17328\r\n  AllInOne: 17328\r\n```\r\n\r\n### Actual Behavior\r\n\r\nThis is the actual output from msbuild 17.8:\r\n\r\n```\r\n\"C:\\Program Files\\Microsoft Visual Studio\\2022\\Professional\\MSBuild\\Current\\Bin\\amd64\\MSBuild.exe\" dividetest.msbuild\r\n  TotalSeconds: 34738,1944274\r\n  Divided: 173690972137\r\n  ThenRounded: 173690972137\r\n  CombinedDivideAndRound: 173690972137\r\n  AllInOne: 17369\r\n```\r\n\r\n### Analysis\r\n\r\nIt seems that on v16, msbuild will honour the decimal *comma* when it's present in a string msbuild property passed to `Divide`, but not when passed to `Round`. For `Round` I assume it is instead perceived as a thousands separator.\r\n\r\nIn v17, it is perceived as a thousands separator also for the `Divide` method.\r\n\r\nWhen the different methods are combined into a single expression it seems to work and produce the correct result - I suppose in this case it never round-trips as a string msbuild property. But the expression gets long and difficult to read.\r\n\r\nI suspect this is related to the application of InvariantCulture for double TryParse as part of #8710. \r\n\r\nI do hesitate to claim this is a bug... Perhaps it is as intended, but it does raise an interesting dilemma:\r\n\r\nWhen a floating point value is put in a string msbuild property, a decimal comma will be used. When later trying to use this property as an argument to something that takes a double, the decimal comma will be silently treated as a thousands separator instead. It is inconsistent. And to make matters worse, I suppose the same syntax will work fine in regions using a decimal point, but then produce incorrect results if run by someone in e.g. Swedish regional format settings.\r\n\r\nIf double parsing will insist on requiring decimal *point*, should msbuild not take care to use that also when converting doubles to strings?\r\n\r\nSo far I haven't found any docs talking about this subject in terms of \"best practice\" or similar.\r\n\r\n### Versions & Configurations\r\n\r\n_No response_",
  "state": "CLOSED",
  "createdAt": "2024-05-05T09:50:48Z",
  "updatedAt": "2024-09-25T12:15:09Z",
  "closedAt": "2024-09-25T12:15:09Z",
  "author": {
    "login": "oskarb"
  },
  "labels": [
    "bug",
    "Priority:1",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "MichalPavlik"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "@jrdodds @tannergooding ",
        "createdAt": "2024-05-05T17:24:20Z",
        "updatedAt": "2024-05-05T17:24:20Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "The change in PR #8710 was for BUG #8798",
        "createdAt": "2024-05-05T18:26:09Z",
        "updatedAt": "2024-05-05T18:26:09Z",
        "author": {
          "login": "jrdodds"
        }
      },
      {
        "body": "@rainersigwald, @baronfel What would be the best strategy here? From engineering point of view, I would prefer to have everything invariant, but it could be a break change for some customers :| Other option is to revert the change and be dependent on current active culture.",
        "createdAt": "2024-09-24T12:27:13Z",
        "updatedAt": "2024-09-24T12:27:13Z",
        "author": {
          "login": "MichalPavlik"
        }
      },
      {
        "body": "As for this excerpt from my analysis, regarding the inconsistency:\r\n\r\n> When a floating point value is put in a string msbuild property, a decimal comma will be used. When later trying to use this property as an argument to something that takes a double, the decimal comma will be silently treated as a thousands separator instead. It is inconsistent. And to make matters worse, I suppose the same syntax will work fine in regions using a decimal point, but then produce incorrect results if run by someone in e.g. Swedish regional format settings.\r\n\r\n> If double parsing will insist on requiring decimal point, should msbuild not take care to use that also when converting doubles to strings?\r\n\r\nI now think that this inconsistency is what #9874 was about. It was resolved in 17.11.\r\n\r\nBack in May when we started getting 17.8 I summarised and worked around the issue like this:\r\n\r\n```xml\r\n<!--Calculation of AllieraBuildSeconds. Seconds since midnight divided by two. -->\r\n  <PropertyGroup>\r\n    <!-- On msbuild 16 it worked to have separate properties like this, even with Swedish formatting\r\n         putting a decimal comma in TotalSeconds. On msbuild 17 (17.8) it will instead parse that back\r\n         as a thousands separator, producing a much too large value. Putting it all in a single expression works.\r\n         See msbuild issues #8710 and #10105. Possibly #9874 fixes it in 17.11 (changewave 17.12) by always using a decimal point? -->\r\n    <!-- <TotalSeconds>$([System.DateTime]::UtcNow.Subtract($([System.DateTime]::UtcNow.Date)).TotalSeconds)</TotalSeconds> -->\r\n    <!-- <AllieraBuildSeconds>$([System.Math]::Round($([MSBuild]::Divide($(TotalSeconds), 2))))</AllieraBuildSeconds> -->\r\n    <AllieraBuildSeconds>$([System.Math]::Round($([MSBuild]::Divide($([System.DateTime]::UtcNow.Subtract($([System.DateTime]::UtcNow.Date)).TotalSeconds), 2))))</AllieraBuildSeconds>\r\n  </PropertyGroup>\r\n```\r\n\r\nAnd *now*, when *some* developers have moved to 17.11 we got a similar error in a different, but related code block, that I handled and described in this way just last week:\r\n\r\n```xml\r\n <!--Calculation of AllieraBuildDays. Days passed since the introduction of the current versioning schema. -->\r\n  <PropertyGroup>\r\n    <!-- The following two lines fail from msbuils 17.11 likely due to msbuild change #9874. Before this change,\r\n         TotalDays would be coerced to string using decimal *comma* in Swedish locale, and ToDouble() would parse\r\n         that as expected using the same locale. Starting in 17.11 (changewave 17.12), msbuild will always use \r\n         a decimal point when converting to string, which .Net ToDouble() will not accept. We could fix for 17.11 by\r\n         just removing the ToDouble(), but then on 17.10 and earlier there will still be a decimal comma and\r\n         msbuild built-in coercion back to double will interpret it as a thousands separator. -->\r\n    <!-- <TotalDays>$([System.DateTime]::UtcNow.Subtract($([System.DateTime]::Parse(\"2020-01-01\"))).TotalDays)</TotalDays> -->\r\n    <!-- <AllieraBuildDays>$([System.Math]::Floor($([System.Convert]::ToDouble($(TotalDays)))))</AllieraBuildDays> -->\r\n    <AllieraBuildDays>$([System.Math]::Floor($([System.DateTime]::UtcNow.Subtract($([System.DateTime]::Parse(\"2020-01-01\"))).TotalDays)))</AllieraBuildDays>\r\n  </PropertyGroup>\r\n```\r\n\r\nSo at the moment I'm thinking that\r\n\r\n  * From 17.11 msbuild seems consistent in that string conversion both *from* and *to* double/decimal is consistent - always using invariant culture in both cases, if I understand the various issues/PR:s correctly.\r\n  * However, for some cases it can be tricky to write an expression that works and produces the same result on both v16, v17.8 and v17.11. In my two cases I resolved it my making it one very long expression, which presumably simply skips the string conversion to avoid the problems on older versions.\r\n\r\nThe very long expressions are a bit difficult to read but I suppose they could be simplified after enough time has passed. I suppose conditionals and separate expressions could be an option.\r\n\r\nAs for the specific behaviour I wanted in my code - maybe there are other ways to do it but it was what I came up with in reasonable time.\r\n\r\nSo unless you see some wider problem here I suspect this can be closed.",
        "createdAt": "2024-09-24T21:54:01Z",
        "updatedAt": "2024-09-24T21:56:23Z",
        "author": {
          "login": "oskarb"
        }
      },
      {
        "body": "I see, thanks for the info. You could try to use overloads for number parsing and `Convert.ToString` to define culture you want.\r\n\r\nFor example:\r\n```xml\r\n<Message Text=\"$([System.Double]::Parse('1234,56', $([System.Globalization.CultureInfo]::GetCultureInfo('cs-CZ'))))\" Importance=\"High\" />\r\n<Message Text=\"$([System.Double]::Parse('1234,56', $([System.Globalization.CultureInfo]::GetCultureInfo('en-US'))))\" Importance=\"High\" />\r\n```\r\noutputs\r\n```\r\n1234.56\r\n123456\r\n```\r\nso they are parsed differently.\r\n\r\nI'm closing this issue, but feel free to reopen it if you need additional support.",
        "createdAt": "2024-09-25T12:15:09Z",
        "updatedAt": "2024-09-25T12:15:09Z",
        "author": {
          "login": "MichalPavlik"
        }
      }
    ]
  }
}