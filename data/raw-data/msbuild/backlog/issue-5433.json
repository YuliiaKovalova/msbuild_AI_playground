{
  "number": 5433,
  "title": "BuiltProjectOutputGroup target is missing dependency on target that sets AppConfig property",
  "body": "As a result `BuiltProjectOutputGroup` may not include the generated .config file, depending on the order in which targets are executed.\r\n\r\n`BuiltProjectOutputGroup` target includes the .config file by reading `AppConfig` property:\r\n\r\n```xml\r\n<_BuiltProjectOutputGroupOutputIntermediate Include=\"$(AppConfig)\" Condition=\"'$(AddAppConfigToBuildOutputs)'=='true'\">\r\n```\r\n\r\nthis property is set in `GenerateBindingRedirectsUpdateAppConfig` but `BuiltProjectOutputGroup` does not depend on this target.",
  "state": "OPEN",
  "createdAt": "2020-06-16T18:24:37Z",
  "updatedAt": "2024-02-21T16:29:16Z",
  "closedAt": null,
  "author": {
    "login": "tmat"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Notes:\r\n\r\n`$(AppConfig)` can also be defined in `PrepareForBuild`\r\n\r\nhttps://github.com/microsoft/msbuild/blob/9eb5d09e6cd262375e37a15a779d56ab274167c8/src/Tasks/Microsoft.Common.CurrentVersion.targets#L1119-L1122\r\n\r\nBut that looks only at `@(None)`/`@(Content)`. The missing case is when there's no checked-in `app.config` file, but `ResolveAssemblyReferences`/`GenerateBindingRedirects` creates one.\r\n\r\nThere's a potential compat/perf problem with the straightforward fix: pulling RAR (and `ResolveProjectReferences`) into this target which was previously super fast could be bad. This needs to be thought through--can we just do it? Does it need conditions? Entirely opt-in, or not during design time, or ???",
        "createdAt": "2020-06-16T18:28:34Z",
        "updatedAt": "2020-06-16T18:28:34Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}