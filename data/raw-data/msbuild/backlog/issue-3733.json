{
  "number": 3733,
  "title": "Error after updating Visual Studio 2017 to v15.8.2 when running unit tests: Method 'Microsoft.Build.Utilities.ToolLocationHelper.GetPathToStandardLibraries' not found",
  "body": "Posted in developercommunity.visualstudio.com as well:\r\nhttps://developercommunity.visualstudio.com/content/problem/333202/error-after-updating-to-1582-when-running-unit-tes.html\r\n\r\nAfter upgrading to Visual Studio 2017 v15.8.2 and running rosyln-based unit tests, they all fail.\r\n\r\nThe failure is on the line of code at **workspace.Diagnostics.Any** query:\r\n\r\n```\r\n[SetUpFixture]\r\npublic class SolutionSetup\r\n    {\r\n    [OneTimeSetUp]\r\n    public async Task Load()\r\n    {\r\n        EnsureMsBuildCanBeFound();\r\n        var solutionPath = GetSolutionPath();\r\n        var workspace = MSBuildWorkspace.Create();\r\n        Solution = await workspace.OpenSolutionAsync(solutionPath);\r\n\r\n        if (workspace.Diagnostics.Any(d => !d.Message.Contains(\"If you have not done a build you can ignore this error\")))\r\n            Assert.Fail($\"Failed to load solution: {string.Join(\", \", workspace.Diagnostics.Select(d => d.Message))}\");\r\n        ...\r\n        }\r\n...\r\n}\r\n```\r\n\r\nFull stack trace:\r\nMsbuild failed when processing the file 'D:\\Projects\\IXRS\\Study\\IXRS.Client.Web.Tests\\IXRS.Client.Web.Tests.csproj' with message: **Invalid static method invocation syntax**: \"[Microsoft.Build.Utilities.ToolLocationHelper]::GetPathToStandardLibraries($(TargetFrameworkIdentifier), $(TargetFrameworkVersion), $(TargetFrameworkProfile), $(PlatformTarget), $(TargetFrameworkRootPath), $(TargetFrameworkFallbackSearchPaths))\". **Method 'Microsoft.Build.Utilities.ToolLocationHelper.GetPathToStandardLibraries' not found**. Static method invocation should be of the form: $([FullTypeName]::Method()), e.g. $([System.IO.Path]::Combine(`a`, b)). C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\MSBuild\\15.0\\Bin\\Microsoft.Common.CurrentVersion.targets\r\n\r\n## Things I've Tried\r\nUpdate Microsoft.CodeAnalysis package from 2.6.1 to 2.9.0 (and all subsequent dependencies that go along with that package).\r\n![image](https://user-images.githubusercontent.com/2428993/45448051-6ed04b80-b69f-11e8-88c0-aced3d5119e4.png)\r\n\r\nThis didn't work as once the upgrade was done, the compiler threw an exception that is no longer recognized MSBuildWorkspace\r\n![image](https://user-images.githubusercontent.com/2428993/45448077-7e4f9480-b69f-11e8-91a0-89277301105b.png)\r\n\r\nI then went out to find the missing NuGet package (where MSBuildWorkspace was moved to) and installed it:\r\n![image](https://user-images.githubusercontent.com/2428993/45448102-8b6c8380-b69f-11e8-98b3-e939cd01babe.png)\r\n\r\nthe compiler error went away, but the same exact exception was thrown when running the roslyn-based tests\r\n\r\nI THINK this is an MSBuild issue... just strange that upgrading to VS 2017 v15.8.2 would cause this type of failure.",
  "state": "OPEN",
  "createdAt": "2018-09-12T19:25:56Z",
  "updatedAt": "2024-02-21T16:33:00Z",
  "closedAt": null,
  "author": {
    "login": "mgmccarthy"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "That error is [usually](https://developercommunity.visualstudio.com/content/problem/338245/msb1025-error-for-any-projects-after-upgrade-to-vs.html) a result of the machine having (incorrectly) had `Microsoft.Build.*` assemblies added to the GAC. Can you try running these commands from an administrator developer command prompt?\r\n\r\n```\r\ngacutil /u \"MSBuild, Version=15.1.0.0\"\r\ngacutil /u \"Microsoft.Build.Conversion.Core, Version=15.1.0.0\"\r\ngacutil /u \"Microsoft.Build, Version=15.1.0.0\"\r\ngacutil /u \"Microsoft.Build.Engine, Version=15.1.0.0\"\r\ngacutil /u \"Microsoft.Build.Tasks.Core, Version=15.1.0.0\"\r\ngacutil /u \"Microsoft.Build.Utilities.Core, Version=15.1.0.0\"\r\ngacutil /u \"Microsoft.Build.Framework, Version=15.1.0.0\"\r\n```",
        "createdAt": "2018-10-09T15:21:40Z",
        "updatedAt": "2018-10-09T15:21:40Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "does that include msbuild 14.x assemblies that were added by VS 2015? We are having this issue and the commands you listed above didnt uninstall anything. VS 2017 version 15.8.28010.2036. ",
        "createdAt": "2018-10-19T14:47:13Z",
        "updatedAt": "2018-10-19T14:47:13Z",
        "author": {
          "login": "ghost"
        }
      },
      {
        "body": "@fifthgearonline MSBuild 14.0 assemblies _should_ be in the GAC if VS 2015 or Build Tools 2015 is installed. What is the exact error you're getting?",
        "createdAt": "2018-10-23T15:02:13Z",
        "updatedAt": "2018-10-23T15:02:13Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald Same issue when loading a .csproj using MSBuildWorkspace. It was working when i had only VS2015 installed, but since I installed vs2017, I get this error : -- ERROR: Msbuild failed when processing the file 'D:\\DCGF_KillCA\\Externals\\XRoslyn\\MyTypes\\MyTypes.csproj' with message: Invalid static method invocation syntax: \"[Microsoft.Build.Utilities.ToolLocationHelper]::GetPathToStandardLibraries($(TargetFrameworkIdentifier), $(TargetFrameworkVersion), $(TargetFrameworkProfile), $(PlatformTarget), $(TargetFrameworkRootPath), $(TargetFrameworkFallbackSearchPaths))\". M\u00e9thode 'Microsoft.Build.Utilities.ToolLocationHelper.GetPathToStandardLibraries' introuvable. Static method invocation should be of the form: $([FullTypeName]::Method()), e.g. $([System.IO.Path]::Combine(`a`, `b`)).   C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\MSBuild\\15.0\\Bin\\Microsoft.Common.CurrentVersion.targets",
        "createdAt": "2018-12-21T08:32:01Z",
        "updatedAt": "2018-12-21T08:32:01Z",
        "author": {
          "login": "jlarbi"
        }
      },
      {
        "body": "Previously, I assume it was doing stuff in C:\\Program Files (x86)\\Microsoft Visual Studio\\2015\\.... and it was working",
        "createdAt": "2018-12-21T08:34:09Z",
        "updatedAt": "2018-12-21T08:34:09Z",
        "author": {
          "login": "jlarbi"
        }
      },
      {
        "body": "The code : \r\nvar lBuildConfiguration = new Dictionary<string, string>\r\n            {\r\n               { \"Configuration\", \"Release\" }, // Or \"Debug\", or whatever is known to your projects.\r\n               { \"Platform\", \"x86\" }, // Or x64, AnyCPU, etc...\r\n               { \"CheckForSystemRuntimeDependency\", \"true\" }\r\n               // ... more properties that could influence your property,\r\n            };\r\n\r\n            this.mWork = MSBuildWorkspace.Create( lBuildConfiguration );\r\n            this.mWork.LoadMetadataForReferencedProjects = true;\r\n            this.mWork.SkipUnrecognizedProjects = false;\r\n            // Load the project straight.\r\n             this.mProject = this.mWork.OpenProjectAsync( pProjectPath ).Result;\r\n\r\nCan we force a MSbuild version in config strings?",
        "createdAt": "2018-12-21T08:36:21Z",
        "updatedAt": "2018-12-21T08:36:21Z",
        "author": {
          "login": "jlarbi"
        }
      },
      {
        "body": "I suspecte when trying to load a csproj (inducing there is no solution at open time) MSbuildWorkspace create a default one to load my csproj in it. In the case there was only VS2015, the default solution created was VS2015, but now there is vs2017, the default solution MSbuildWorkspace is creating is a VS2017 temp sln which attempt to load a csproj vs2015 formatted that obviously mismatches in matter of (MSBuildExtensionsPath)\\$(MSBuildToolsVersion) or whatever... ",
        "createdAt": "2018-12-21T08:52:09Z",
        "updatedAt": "2018-12-21T08:52:09Z",
        "author": {
          "login": "jlarbi"
        }
      },
      {
        "body": "I started getting this exact issue after a visual studio upgrade.\r\n~~Does it make a difference that I am relying on this workaround? (from https://github.com/Microsoft/msbuild/issues/2369):\r\n`Environment.SetEnvironmentVariable(\"MSBUILD_EXE_PATH\", @\"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\MSBuild\\15.0\\Bin\\MSBuild.exe\");`~~\r\n\r\nOh and I do not get any 15.x versions listed when executing gacutil /l Microsoft.Build\r\n\r\nEdit: Upgraded Microsoft.Build to 15.9.20 and Microsoft.CodeAnalysis to 2.10.0 and no longer need workaround. Issue remains.",
        "createdAt": "2019-01-05T08:34:09Z",
        "updatedAt": "2019-01-05T09:43:41Z",
        "author": {
          "login": "Chetic"
        }
      },
      {
        "body": "> That error is [usually](https://developercommunity.visualstudio.com/content/problem/338245/msb1025-error-for-any-projects-after-upgrade-to-vs.html) a result of the machine having (incorrectly) had `Microsoft.Build.*` assemblies added to the GAC. Can you try running these commands from an administrator developer command prompt?\r\n> \r\n> ```\r\n> gacutil /u \"MSBuild, Version=15.1.0.0\"\r\n> gacutil /u \"Microsoft.Build.Conversion.Core, Version=15.1.0.0\"\r\n> gacutil /u \"Microsoft.Build, Version=15.1.0.0\"\r\n> gacutil /u \"Microsoft.Build.Engine, Version=15.1.0.0\"\r\n> gacutil /u \"Microsoft.Build.Tasks.Core, Version=15.1.0.0\"\r\n> gacutil /u \"Microsoft.Build.Utilities.Core, Version=15.1.0.0\"\r\n> gacutil /u \"Microsoft.Build.Framework, Version=15.1.0.0\"\r\n> ```\r\n\r\nAmazing this works for me, I have had upgraded VS2017 to 15.9.12 and started having an issue with error \r\nMethod not found: 'Int32 Microsoft.Build.Execution.ProjectInstance.get_EvaluationId()'.\r\n\r\nThanks\r\n",
        "createdAt": "2019-06-04T10:36:49Z",
        "updatedAt": "2019-06-04T10:36:49Z",
        "author": {
          "login": "syszone"
        }
      }
    ]
  }
}