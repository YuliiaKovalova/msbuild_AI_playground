{
  "number": 1875,
  "title": "Evaluating projects to determine OutputPath",
  "body": "Our CI script was using `$\"**/bin/{configuration}/**/*test*.dll\"` and `$\"../../Common/**/bin/{configuration}/**/*test*.dll\"` to search for test assemblies for VSTest, but it's very messy. It picks up things like Microsoft's TestFramework dll many times which clutters the log with warnings, and it picks up the same dll more than once because some projects reference a core test dll which gets copied to the output folder of multiple other test projects.\r\n\r\nSo, I thought, I can solve the entire glob matching mess with something more 1:1 with our actual intention, which is to run each output test assembly in the solution.\r\n\r\nSo I referenced `Microsoft.Build` and `Microsoft.Build.Runtime`, and tried this as a test:\r\n```c#\r\nforeach (var slnProject in SolutionFile.Parse(solutionPath).ProjectsInOrder)\r\n{\r\n    var project = new Project(slnProject.AbsolutePath);\r\n    var outputPath = project.GetPropertyValue(\"OutputPath\");\r\n}\r\n```\r\n\r\nOf course the `new Project` line crashes because it tries to import the SDK relative to Microsoft.Build.dll which came from NuGet without any SDKs. I know we are waiting for SDKs to be published on NuGet, so is this a dead end?\r\n\r\nIs there currently any way to succeed at my objective of locating all assemblies compiled by a solution? If so, what's the lightest weight recommended solution?",
  "state": "CLOSED",
  "createdAt": "2017-03-16T15:58:33Z",
  "updatedAt": "2024-02-21T17:20:40Z",
  "closedAt": "2017-03-21T22:29:52Z",
  "author": {
    "login": "jnm2"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Are you doing this from MSBuild on the full .NET Framework or the .NET Core MSBuild?\r\n\r\nThe former should automagically handle this for you; the latter is unfortunately a bit harder. A possible but brittle solution would be to set the environment variable `MSBuildSdksPath` to the path within your `dotnet` CLI location--maybe by finding the cli executable and constructing a relative path? I don't think it's exposed in a nicer way at the moment.\r\n\r\nRelated: https://github.com/dotnet/cli/issues/5650.",
        "createdAt": "2017-03-16T16:03:50Z",
        "updatedAt": "2017-03-16T16:03:50Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> Are you doing this from MSBuild on the full .NET Framework or the .NET Core MSBuild?\r\n\r\nI'm doing this from a Cake build script on the full .NET Framework, so pretty much the same as a net462 console app. Cake has the ability to locate MSBuild 15 but this code is running outside MSBuild, in preparation for calling VSTest.console.exe.",
        "createdAt": "2017-03-16T16:08:17Z",
        "updatedAt": "2017-03-16T16:08:17Z",
        "author": {
          "login": "jnm2"
        }
      },
      {
        "body": "@jnm2  Can you check what msbuild dlls get loaded in your repro? Are they the ones under Visual Studio? ",
        "createdAt": "2017-03-16T18:16:00Z",
        "updatedAt": "2017-03-16T18:16:00Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "@cdmihai Debug > Modules shows Microsoft.Build.dll and Microsoft.Build.Framework.dll both loaded from the console project's output folder. This is the repro:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>net462</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.Build\" Version=\"15.1.548\" />\r\n    <PackageReference Include=\"Microsoft.Build.Runtime\" Version=\"15.1.548\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\r\n\r\n```c#\r\nusing Microsoft.Build.Construction;\r\nusing Microsoft.Build.Evaluation;\r\n\r\npublic static class Program\r\n{\r\n    public static void Main()\r\n    {\r\n        const string solutionPath = @\"solution path\";\r\n\r\n        foreach (var slnProject in SolutionFile.Parse(solutionPath).ProjectsInOrder)\r\n        {\r\n            var project = new Project(slnProject.AbsolutePath);\r\n            var outputPath = project.GetPropertyValue(\"OutputPath\");\r\n        }\r\n    }\r\n}\r\n```",
        "createdAt": "2017-03-16T18:29:23Z",
        "updatedAt": "2017-03-16T18:29:46Z",
        "author": {
          "login": "jnm2"
        }
      },
      {
        "body": "Since setting up build evaluation is really hard at the moment, you could do sth like the EF team is doing for `dotnet ef`: Drop an extension targets file and make it generate parseable output or write a file with all the properties you need. Then call it using `dotnet msbuild your.csproj /t:WriteConfigToFile`. @natemcmaster has written a great blog post about it: http://www.natemcmaster.com/blog/2016/12/26/project-evalutation-cli-tool/\r\n\r\nSetting up the right properties (and unsetting some during execution!) is tricky. There is [some code](https://github.com/OmniSharp/omnisharp-roslyn/blob/dev/src/OmniSharp.MSBuild/MSBuildEnvironment.cs) in omnisharp-roslyn that sets it up but it is hard to do. I've even tried using msbuild targets that generate C# files with constants set to the msbuild variables used during build, but it was flaky at best.",
        "createdAt": "2017-03-16T18:50:28Z",
        "updatedAt": "2017-03-16T18:50:28Z",
        "author": {
          "login": "dasMulli"
        }
      },
      {
        "body": "See also https://github.com/dotnet/cli/issues/5300",
        "createdAt": "2017-03-16T19:55:10Z",
        "updatedAt": "2017-03-16T19:55:10Z",
        "author": {
          "login": "natemcmaster"
        }
      },
      {
        "body": "Team Triage:\r\nClosing this as duplicate. See #1096 in our repo and also https://github.com/dotnet/sdk/issues/300. We don't really have a good solution to this at this time. Creating a full usable distribution of MSBuild is difficult.",
        "createdAt": "2017-03-21T22:29:52Z",
        "updatedAt": "2017-03-21T22:29:52Z",
        "author": {
          "login": "AndyGerlicher"
        }
      }
    ]
  }
}