{
  "number": 4245,
  "title": "PackageReference \"auto-binding\" not including correct version",
  "body": "I have a large solution that I've transitioned over to PackageReference, and I've been having an unbelievably difficult time getting assembly versions to work correctly.  As a workaround, I manually added about a hundred or so entries to the `<assemblyBindings>` section of the web.config, but my understanding is that this should be automatically done now.  Additionally, every time I update a nuget package, I have to go through and update a dozen or so of these `<assemblyBinding>` entries to match up with what the nuget package dependencies are.  To make things worse, some of the old workarounds, such as running a powershell script to update the `<assemblyBinding>` rows or else double clicking an entry in the Visual Studio Warnings window to update an `<assemblyBinding>` don't work when using PackageReference.\r\n\r\nSince this isn't a sustainable way to do things, so I'd like to submit this ticket to have you take a look at our setup and figure out why the automatic `assemblyBinding` isn't working as expected.\r\n\r\nThe most recent exception I'm working through is:\r\n```\r\nCould not load file or assembly 'Microsoft.ApplicationInsights, Version=2.5.1.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of its dependencies. The located assembly's manifest definition does not match the assembly reference. (Exception from HRESULT: 0x80131040)\r\n```\r\n\r\nAccording to the `project.assets.json` file, this assembly is referenced by (a dependency of) two different packages:\r\n1. An internal nuget package has a dependency on version 2.8.1\r\n2. The nuget package \"Serilog.Sinks.ApplicationInsights/2.6.0\" has a dependency on version 2.5.1.\r\n\r\nSo, I would expect MSBuild to automatically add an `<assemblyBinding>` to use version 2.8.1, but it does not.\r\n\r\nAdditionally, if I go into the `\\bin` folder, I see version `2.8.1.22898` is present there, which seems correct.\r\n\r\nAlso, all projects are .Net 4.7.2, which I've read is supposed to help with problems like this, but didn't in our case.",
  "state": "OPEN",
  "createdAt": "2019-03-18T18:20:38Z",
  "updatedAt": "2024-02-21T16:31:42Z",
  "closedAt": null,
  "author": {
    "login": "joshmouch"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "It seems that the issue is that the following csproj setting:\r\n`<GenerateBindingRedirectsOutputType>true</GenerateBindingRedirectsOutputType>`\r\nIs being ignored.  In the build log, I get the following:\r\n```\r\n8>Target \"GenerateBindingRedirects\" skipped, due to false condition; ('$(AutoGenerateBindingRedirects)' == 'true' and '$(GenerateBindingRedirectsOutputType)' == 'true') was evaluated as ('true' == 'true' and '' == 'true').\r\n```\r\n",
        "createdAt": "2019-03-18T21:06:28Z",
        "updatedAt": "2019-03-18T21:06:28Z",
        "author": {
          "login": "joshmouch"
        }
      },
      {
        "body": "I figured this out.  I had to:\r\n1. Directly reference the nuget package.  Referencing a project that references a project that references the nuget package didn't work.\r\n2. Include the GenerateBindingRedirects and AutoGenerateBindingRedirects csproj settings.\r\n",
        "createdAt": "2019-03-18T22:06:38Z",
        "updatedAt": "2019-03-18T22:06:38Z",
        "author": {
          "login": "joshmouch"
        }
      },
      {
        "body": "Actually, that didn't fully fix it.  It believe another part of the problem is that the `AutoGeneratedBindingRedirects` writes to a file called YourAssemblyName.dll.config.   However, Asp.Net Core doesn't use that config file (it looks at web.config), so the auto generated bindings are ignored.",
        "createdAt": "2019-03-19T15:39:29Z",
        "updatedAt": "2019-03-19T15:39:29Z",
        "author": {
          "login": "joshmouch"
        }
      },
      {
        "body": "I have a workaround.  Until AutoGenerateBindingRedirects is working correctly with Web Apps, I've added code to automatically resolve any assemblies using whatever's available in the `BIN` folder:\r\n\r\nI added this to Global.asax.cs:Application_Start()\r\n```\r\nAppDomain.CurrentDomain.AssemblyResolve += delegate (object sender2, ResolveEventArgs e2)\r\n\t\t\t{\r\n\t\t\t\tvar requestedNameAssembly = new AssemblyName(e2.Name);\r\n\t\t\t\tvar requestedName = requestedNameAssembly.Name;\r\n\t\t\t\tif (requestedName.EndsWith(\".resources\")) return null;\r\n\t\t\t\tvar binFolder = System.Web.Hosting.HostingEnvironment.MapPath(\"~/bin\");\r\n\t\t\t\tvar fullPath = Path.Combine(binFolder, requestedName) + \".dll\";\r\n\t\t\t\tif (File.Exists(fullPath))\r\n\t\t\t\t{\r\n\t\t\t\t\treturn Assembly.LoadFrom(fullPath);\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn null;\r\n\t\t\t};\r\n```",
        "createdAt": "2019-03-19T16:50:01Z",
        "updatedAt": "2019-03-19T16:50:01Z",
        "author": {
          "login": "joshmouch"
        }
      }
    ]
  }
}