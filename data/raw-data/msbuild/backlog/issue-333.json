{
  "number": 333,
  "title": "Better error message for malformed item transformations",
  "body": "A definition of an item `ThisItem`\n\n```\n<ItemGroup>\n    <ThisItem Include=\"@(AnotherItem->$(APath)\\%(Filename)%(Extension))\" />\n</ItemGroup>\n```\n\nFollowed by a usage of `ThisItem` of the form:\n\n`%(ThisItem.FullPath)`\n\nFails with the error: _error MSB4023: Cannot evaluate the item metadata \"%(FullPath)\". The item metadata \"%(FullPath)\" cannot be applied to the path \"@(AnotherItem->c:\\projects\\msbuild\\bin\\Debug-NetCore\\Windows_NT_Deployment_Test)\". Illegal characters in path\"._\n\nThe error is currently caught when the malformed item is used, not when the malformed item is created. Instead, the error should be caught at item definition with a text mentioning the missing single quotes (correct definition is \"@(AnotherItem->'$(APath)\\%(Filename)%(Extension)')\")\n",
  "state": "OPEN",
  "createdAt": "2015-11-05T21:33:33Z",
  "updatedAt": "2024-02-21T16:38:55Z",
  "closedAt": null,
  "author": {
    "login": "cdmihai"
  },
  "labels": [
    "help wanted",
    "User Experience",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Note that the reason this isn't an error now is that MSBuild's model is permissive.  When it determines that the item transformation isn't valid (it's either missing quotes--`@(AnotherItem->'$(APath)\\%(Filename)%(Extension)')`--or it's missing an item function name after the `->`), it falls back to interpreting what it can as literal text (`@(AnotherItem->`), property expansions (`$(APath)` \u2192 `c:\\projects\\msbuild\\bin\\Debug-NetCore\\Windows_NT_Deployment_Test`), and shared metadata (`%(Filename)` and `%(Extension)` without an item qualifier, which both expand to the empty string).\n\nThere are even tests to enforce this behavior, such as [`ExpandItemVectorFunctionsInvalid2`](https://github.com/Microsoft/msbuild/blob/a4e0dd5f4b31a6c9acb1bab25ac401c438c3dfac/src/XMakeBuildEngine/UnitTests/Evaluation/Expander_Tests.cs#L295)!\n\nBecause this permissiveness is a fairly core property of MSBuild, we can't take the approach I would really want (a parse error when considering the item in the first place).  We also probably can't introduce a hard error for this situation, because it would be easy for many customers to have taken an inadvertent dependency on the current behavior.  I think the best we could do is emit a warning.\n",
        "createdAt": "2015-11-05T21:52:04Z",
        "updatedAt": "2015-11-05T21:52:04Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I agree. In this case, for the sake of internal consistency, it would be better to have a warning when there's a missing item qualifier.\n",
        "createdAt": "2015-11-11T01:42:56Z",
        "updatedAt": "2015-11-11T01:42:56Z",
        "author": {
          "login": "cdmihai"
        }
      }
    ]
  }
}