{
  "number": 6599,
  "title": "Glob matching has bad first-call performance on .NET Framework 64-bit",
  "body": "### Issue Description\r\nGlob matching exposed via the `IMSBuildGlob.IsMatch` call internally uses compiled regular expressions. Generating and JITting these is significantly slower on 64-bit .NET Framework compared to 32-bit Framework (likely due to a different JIT implementation). The cumulative cost could be as high as seconds in common Visual Studio scenarios.\r\n\r\n### Steps to Reproduce\r\nCall [Project.GetAllGlobs()](https://docs.microsoft.com/en-us/dotnet/api/microsoft.build.evaluation.project.getallglobs?view=msbuild-16-netcore#Microsoft_Build_Evaluation_Project_GetAllGlobs), then call [IsMatch](https://docs.microsoft.com/en-us/dotnet/api/microsoft.build.globbing.imsbuildglob.ismatch?view=msbuild-16-netcore) on the globs extracted from the result.\r\n\r\nExpected:\r\nMatching globs against strings is near instantaneous for first- as well following calls.\r\n\r\nActual:\r\nFirst call is slow, measured at ~26 ms on my setup.\r\n\r\n### Data\r\nUse the following sample regular expression:\r\n```\r\n^(?<FIXEDDIR>C:[/\\\\]+src[/\\\\]+_test[/\\\\]+aa[/\\\\]+bin[/\\\\]+Debug[/\\\\]+)(?<WILDCARDDIR>((.*/)|(.*\\\\)|()))(?<FILENAME>[^/\\\\]*)$\r\n```\r\n\r\n### Analysis\r\nFirst call of Regex.Match() on the above compiled regex costs:\r\n- ~8 ms on .NET Framework x86\r\n- ~26 ms on .NET Framework x64\r\n- ~0.2 ms on .NET Core x64\r\n\r\n### Versions & Configurations\r\nReproduced with 17.0.0-preview-21317-11+c579afe9c but has been in MSBuild for several major releases.\r\n\r\n### Regression?\r\nYes from Visual Studio point of view because the product now runs on 64-bit Framework (previously 32-bit Framework). More details in this [internal bug](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/1338419).\r\n\r\n### Attach a binlog\r\nN/A\r\n",
  "state": "CLOSED",
  "createdAt": "2021-06-21T11:29:43Z",
  "updatedAt": "2024-02-21T14:12:59Z",
  "closedAt": "2021-07-09T18:41:42Z",
  "author": {
    "login": "ladipro"
  },
  "labels": [
    "Area: Performance",
    "Visual Studio",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "ladipro"
      }
    ]
  },
  "milestone": {
    "title": "VS 17.0"
  },
  "comments": {
    "nodes": [
      {
        "body": "More suggestions from @ToddGrun: We could simplify the regex captures:\r\n- If the regex always has `FIXEDDIR`, `WILDCARDDIR`, `FILENAME` in this order and capturing everything between `^` and `$`, we could omit one of them and calculate it using the other two on demand, simply using lengths.\r\n- Additionally, `FILENAME` always goes from the last slash to the end of the string, so again, it should be easy to extract it without capturing.",
        "createdAt": "2021-06-21T12:07:42Z",
        "updatedAt": "2021-06-21T12:07:42Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "Further refactoring opportunity: `FileMatcher.Result.fixedDirectoryPart` is unused and can be deleted. Same for `filenamePart` on this type.",
        "createdAt": "2021-06-21T12:17:17Z",
        "updatedAt": "2021-06-21T12:17:17Z",
        "author": {
          "login": "ladipro"
        }
      }
    ]
  }
}