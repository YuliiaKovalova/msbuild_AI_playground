{
  "number": 416,
  "title": "non-invasive target property overrides",
  "body": "MSBuild target files must explicitly decide to include a .props file in order to receive any properties. This makes complex, modular applications with third-party dependencies difficult to work with using only MSBuild without a meta-build generator.\n\nAn example where this is a problem is when one project has another included in its source tree via a mechanism like a Git submodule. The dependent project's files are not part of the main project and so cannot be modified without forking.\n\nFor instance, if a project Neat Game wanted to pull in the project Cool Renderer for graphics, but the developers of Neat Game wanted to keep all build artefacts in a particular directory, there is no way for the developers of the game to override the `OutDir`, `IntDir`, etc. of any MSBuild targets or `.vcxproj` files in Cool Renderer without modifying the sources of Cool Renderer itself.\n\nLikewise, if Cool Renderer requires configuration (e.g. via setting UserMacro values or the like) before being built, there's no way for a project consuming Cool Renderer to inject those values into the MSBuild files of Cool Renderer.\n\nPopular meta-build systems solve this problem by inverting how files are included. In MSBuild, a target's `.vcxproj` must include property files, while in CMake a developer is free to `set` variables before ever including the target's build definition. You can fake the feature with enough wrangling of hand-written `.target` files and the like, but that structure is not particularly amenable to IDEs.\n\nI'm not entirely sure what a good solution might be. Perhaps a potential solution may be to allow the `.sln` file that imports the `.vcxproj` files to provide additional `.props` file overrides.\n\nThis is a request for developers to be able to _easily_ ship MSBuild files for non-trivial configurable libraries that can be consumed by downstream developers with complex build needs. These sorts of problems are very easy to solve with CMake or its ilk but are difficult (if not impossible) to handle with just MSBuild itself.\n",
  "state": "CLOSED",
  "createdAt": "2015-12-24T01:20:00Z",
  "updatedAt": "2024-02-21T17:29:27Z",
  "closedAt": "2019-07-24T21:07:24Z",
  "author": {
    "login": "seanmiddleditch"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Team triage: We don't see a clear solution to this either, and it hasn't gotten a ton of interest since it was filed, so closing this.",
        "createdAt": "2019-07-24T21:07:24Z",
        "updatedAt": "2019-07-24T21:07:24Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}