{
  "number": 3432,
  "title": "Keep track of which global properties/env variables were actually used",
  "body": "Proposal: Every time we use an environment variable or a global property, we should mark it as used, so that we can log which variables were actually consumed during the build.\r\n\r\nThis would be very useful to determine the \"closure\" of the build where it depends on the environment. For example, people may inadvertently rely on the \"Version\" variable, and CI may set that, causing undesired side effects.\r\n\r\nSeveral times now I've seen VSTS CI build breaks because the codebase assumed that Version is of a certain format, and CI was setting it to something else.",
  "state": "CLOSED",
  "createdAt": "2018-06-20T18:41:22Z",
  "updatedAt": "2024-02-21T17:12:37Z",
  "closedAt": "2023-08-26T11:05:49Z",
  "author": {
    "login": "KirillOsenkov"
  },
  "labels": [
    "Area: Debuggability",
    "Feature: Warning Waves",
    "Area: Logging",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "KirillOsenkov"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "I'm not sure I understand how the tracing would help with the problem you're describing. Can you elaborate?",
        "createdAt": "2018-06-20T18:54:25Z",
        "updatedAt": "2018-06-20T18:54:25Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Originally what I wanted was, blacklisting sensitive variables from `.binlog` or the MSBuild itself from consuming those in a build.",
        "createdAt": "2018-06-20T19:13:32Z",
        "updatedAt": "2018-06-20T19:14:04Z",
        "author": {
          "login": "Nirmal4G"
        }
      },
      {
        "body": "Yes, just include the environment variables that are actually used. \r\n\r\nAlso eyeballing the list of consumed variables would indicate a hidden dependency on the environment. It's good to be mindful of places your build depends on implicit environment, and minimize/control those places. Good for deterministic/reproducible builds.",
        "createdAt": "2018-06-20T21:03:07Z",
        "updatedAt": "2018-06-20T21:03:07Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "MSBuild reads the environment variables up front right now, and injects them as properties. We'd have to switch for a just in time fallback lookup mechanism which respects the property precedence (cmd line (aka global properties), environment, project).\r\n\r\nThis might be a significant perf opportunity as well, as we could read only the env vars that are used. On the other hand, I don't remember if MSBuild guarantees an environment snapshot, in which case the perf benefit is not that large as we'd still have to read everything upfront. But at least we wouldn't convert them right away into properties.",
        "createdAt": "2018-07-17T19:34:49Z",
        "updatedAt": "2018-07-17T19:35:18Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "Also, this could be a good step towards a potential strict execution mode.",
        "createdAt": "2018-07-17T19:36:14Z",
        "updatedAt": "2018-07-17T19:36:14Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "relevant snippets:\r\n\r\nhttps://github.com/Microsoft/msbuild/blob/87f6fd25c6782b6bf90aefc00bf2598d99519576/src/Build/Evaluation/Evaluator.cs#L687-L695\r\n\r\nhttps://github.com/Microsoft/msbuild/blob/87f6fd25c6782b6bf90aefc00bf2598d99519576/src/Build/Evaluation/Evaluator.cs#L1318-L1322\r\n\r\nIf we had scoped lookups and an Environment scope, it could potentially be shared among all projects in a build (I think; pretty sure new env isn't picked up if you set it in a project and then `<MSBuild>` another).",
        "createdAt": "2018-07-17T19:47:14Z",
        "updatedAt": "2018-07-17T19:47:14Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Currently investigating this.",
        "createdAt": "2019-06-07T16:31:58Z",
        "updatedAt": "2019-06-07T16:31:58Z",
        "author": {
          "login": "maneely"
        }
      },
      {
        "body": "Reopening since #4437 was reverted",
        "createdAt": "2019-12-03T16:42:04Z",
        "updatedAt": "2019-12-03T16:42:04Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "I added a new feature that allows tasks to get global properties, so anything that needs to know what global properties were used should tie into that as well\r\n\r\nhttps://github.com/microsoft/msbuild/pull/4939",
        "createdAt": "2019-12-03T16:42:56Z",
        "updatedAt": "2019-12-03T16:42:56Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "> I added a new feature that allows tasks to get global properties, so anything that needs to know what global properties were used should tie into that as well\r\n> \r\n> #4939\r\n\r\nIn hindsight, would it be better to reimplement #4939 such that the API only allows for getting a global property by name? Getting all of them makes tracking really hard.",
        "createdAt": "2019-12-03T17:36:22Z",
        "updatedAt": "2019-12-03T17:36:22Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "I need all global properties, so I would have had to add an API that just returned the name of all of them and then got each one of their values. ",
        "createdAt": "2019-12-03T17:38:28Z",
        "updatedAt": "2019-12-03T17:38:28Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "I hope that using the new API is so rare that it's ok to just pessimistically mark all global props as read if it's used.",
        "createdAt": "2019-12-03T17:44:51Z",
        "updatedAt": "2019-12-03T17:44:51Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "See also https://github.com/microsoft/msbuild/issues/5015",
        "createdAt": "2019-12-31T22:16:07Z",
        "updatedAt": "2019-12-31T22:16:07Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "Is this still necessary now that we separately track Environment Variables and only log those to the BinLog?",
        "createdAt": "2023-08-25T13:48:59Z",
        "updatedAt": "2023-08-25T13:48:59Z",
        "author": {
          "login": "baronfel"
        }
      },
      {
        "body": "We don't track global properties today, and they could _conceivably_ be useful--but I'm having a hard time articulating a concrete use case. I'd be ok with closing",
        "createdAt": "2023-08-25T14:25:17Z",
        "updatedAt": "2023-08-25T14:25:17Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}