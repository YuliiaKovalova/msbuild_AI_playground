{
  "number": 1452,
  "title": "Implicit exist condition for imports",
  "body": "Right now a lot of times you see something like this\r\n\r\n    <Import Project=\"path\\to\\foo.targets\" Condition=\"Exists('path\\to\\foo.targets')\" />\r\n\r\nBut is there a reason not to always have an implicit check if an import exist instead of failing the build if it's not found? Perhaps there should be a log message or something, but not having that exist condition would make things a lot less verbose :) ",
  "state": "CLOSED",
  "createdAt": "2016-12-07T21:19:40Z",
  "updatedAt": "2024-02-21T17:23:36Z",
  "closedAt": "2019-11-04T21:18:33Z",
  "author": {
    "login": "aL3891"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "I don't think such a check should be the default as you propose. In fact, I think many of the cases that do have this check are wrong, and should cause failures.\r\n\r\nA danger of the if-exists check is that in many (most?) cases, the build that happens with chunks of its build logic missing is _wrong_, but there's no obvious way to know that. If you fail to import the props file that sets the `FIX_ALL_BUGS` preprocessor flag, the build might complete without errors but be producing the wrong thing.\r\n\r\nI would be more amenable to reducing the verbose and error-prone nature of this check by adding an attribute along the lines of `IfExists=\"true\"`, though. That might also be the best way to do this for #1400.",
        "createdAt": "2016-12-07T23:31:32Z",
        "updatedAt": "2016-12-07T23:31:32Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "But there are already instances where imports are loaded dynamically with wildcards, is that so different? a nugget restore will place a bunch of targets on disk that are required for the build to work, but not there by default and not checked for,\r\n\r\nHaving a less verbose `IfExists` attribute as you suggest would be a step in the right direction though.",
        "createdAt": "2016-12-08T10:38:06Z",
        "updatedAt": "2016-12-09T08:55:14Z",
        "author": {
          "login": "aL3891"
        }
      },
      {
        "body": "My workaround below:\r\n```\r\n<PropertyGroup>\r\n  <JenskinsTarget>$([MSBuild]::GetPathOfFileAbove('Directory.Build.targets', '$(MSBuildThisFileDirectory)../'))</JenskinsTarget>\r\n</PropertyGroup>\r\n<Import Project=\"$(JenskinsTarget)\" Condition=\"exists('$(JenskinsTarget)')\" />\r\n```",
        "createdAt": "2018-07-31T13:10:40Z",
        "updatedAt": "2018-07-31T13:11:46Z",
        "author": {
          "login": "quasarea"
        }
      },
      {
        "body": "Duplicate of #822",
        "createdAt": "2019-11-04T21:18:33Z",
        "updatedAt": "2019-11-04T21:18:33Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}