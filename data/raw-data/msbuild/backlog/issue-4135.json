{
  "number": 4135,
  "title": "Error during SDK resolution has no code",
  "body": "_Reported offline by @lifengl._\r\n\r\n> When a solution happens to have a global.json and points to some SDK not installed, CPS will fail to load the project with some confusing message (something like \u201cincomplete project\u201d).  If I use msbuild command line, it will produce a much understandable message string, like:\r\n> \r\n> ```\r\n> D:\\Sources\\CpsDBG\\src\\CpsDbgCore\\CpsDbgCore.csproj : error : Unable to locate the .NET Core SDK. Check that it is installed and that the version specified in global.json (if any) matches the installed version.\r\n> ```\r\n> \r\n> we did get this build event to tell us that the SDK cannot be resolved.  But there is no code or anything, which is not localized for us to identify this message.  Can msbuild carry a meaningful code in this case?\r\n> \r\n> ```\r\n> {Microsoft.Build.Framework.BuildErrorEventArgs}\r\n>     BuildEventContext: {Microsoft.Build.Framework.BuildEventContext}\r\n>     Code: null\r\n>     ColumnNumber: 0\r\n>     EndColumnNumber: 0\r\n>     EndLineNumber: 0\r\n>     File: \"C:\\\\s\\\\CpsDBG\\\\src\\\\CpsDbg\\\\CpsDbg.csproj\"\r\n>     HelpKeyword: null\r\n>     LineNumber: 0\r\n>     Message: \"Unable to locate the .NET Core SDK. Check that it is installed and that the version specified in global.json (if any) matches the installed version.\"\r\n>     ProjectFile: null\r\n>     SenderName: \"MSBuild\"\r\n>     Subcategory: null\r\n>     ThreadId: 53\r\n>     Timestamp: {2/4/2019 12:33:31 PM}\r\n>     _localTimestamp: {2/4/2019 12:33:31 PM}\r\n>     arguments: null\r\n>     buildEventContext: {Microsoft.Build.Framework.BuildEventContext}\r\n>     code: null\r\n>     columnNumber: 0\r\n>     endColumnNumber: 0\r\n>     endLineNumber: 0\r\n>     file: \"C:\\\\s\\\\CpsDBG\\\\src\\\\CpsDbg\\\\CpsDbg.csproj\"\r\n>     helpKeyword: null\r\n>     lineNumber: 0\r\n>     locker: {object}\r\n>     message: \"Unable to locate the .NET Core SDK. Check that it is installed and that the version specified in global.json (if any) matches the installed version.\"\r\n>     originalCultureInfo: {en-US}\r\n>     originalCultureName: \"en-US\"\r\n>     projectFile: null\r\n>     senderName: \"MSBuild\"\r\n>     subcategory: null\r\n>     threadId: 53\r\n>     timestamp: {2/4/2019 8:33:31 PM}\r\n> ```\r\n>\r\n> BTW, we didn\u2019t get an exception in this scenario, because we set flags like `MSBuild.ProjectLoadSettings.IgnoreMissingImports | MSBuild.ProjectLoadSettings.IgnoreInvalidImports`.",
  "state": "CLOSED",
  "createdAt": "2019-02-04T22:27:58Z",
  "updatedAt": "2024-02-21T17:09:25Z",
  "closedAt": "2019-10-23T01:07:55Z",
  "author": {
    "login": "rainersigwald"
  },
  "labels": [
    "Area: Debuggability",
    "Partner request",
    "Area: Engine",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "nguerrera"
      }
    ]
  },
  "milestone": {
    "title": "MSBuild 16.4"
  },
  "comments": {
    "nodes": [
      {
        "body": "Can we not preserve anything with Build*Error*EventArgs and use it in the ultimate message? Like as the shortest term fix, just append all build error events to the \"project file is incomplete\" message. Are there any errors that we want to suppress entirely here?",
        "createdAt": "2019-02-04T23:02:32Z",
        "updatedAt": "2019-02-04T23:02:32Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "Going with @nguerrera's plan for 16.0.",
        "createdAt": "2019-02-06T21:53:14Z",
        "updatedAt": "2019-02-06T21:53:14Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Just talked to @nguerrera. He mentioned this has been implemented in CPS actually.",
        "createdAt": "2019-10-23T01:07:40Z",
        "updatedAt": "2019-10-23T01:07:40Z",
        "author": {
          "login": "livarcocc"
        }
      }
    ]
  }
}