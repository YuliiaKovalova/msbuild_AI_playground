{
  "number": 6970,
  "title": "MSBuild.exe spuriously dies with BadImageFormatException on BuildEnvironmentHelper.get_Instance()",
  "body": "\r\n### Issue Description\r\nI periodically get MSBuild failures.  I previously reported a separate issue that was closed due to lack of reproducibility.  However, this time, the Windows Event Log dump seems more helpful than previously. See Actual Behavior below.\r\n\r\n\r\n### Steps to Reproduce\r\nI have no idea.  Feeling a bit like Steve Martin in THE JERK right now just opening this ticket, but it needs fixing.\r\n\r\n### Expected Behavior\r\nNo Crashes\r\n\r\n### Actual Behavior\r\nMSBuild.exe crashes. Windows Event Log has the following error messages:\r\n\r\n```\r\nError\t10/18/2021 7:28:28 PM\tApplication Error\t1000\t(100)\r\nFaulting application name: MSBuild.exe, version: 16.10.2.30804, time stamp: 0xe420bb9d\r\nFaulting module name: KERNELBASE.dll, version: 10.0.14393.4350, time stamp: 0x606eb12a\r\nException code: 0xe0434352\r\nFault offset: 0x000dc602\r\nFaulting process id: 0x4f18\r\nFaulting application start time: 0x01d7c477dac329c3\r\nFaulting application path: C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Professional\\MSBuild\\Current\\Bin\\MSBuild.exe\r\nFaulting module path: C:\\Windows\\System32\\KERNELBASE.dll\r\nReport Id: e3f0efcd-1087-488f-a7be-497ecb67a096\r\nFaulting package full name: \r\nFaulting package-relative application ID: \r\n```\r\n\r\n```\r\nError\t10/18/2021 7:28:28 PM\t.NET Runtime\t1026\tNone\r\nApplication: MSBuild.exe\r\nFramework Version: v4.0.30319\r\nDescription: The process was terminated due to an unhandled exception.\r\nException Info: System.BadImageFormatException\r\n   at Microsoft.Build.Shared.BuildEnvironmentHelper.get_Instance()\r\n   at Microsoft.Build.Utilities.Traits.get_Instance()\r\n   at Microsoft.Build.CommandLine.MSBuildApp.Execute(System.String)\r\n   at Microsoft.Build.CommandLine.MSBuildApp.Main()\r\n```\r\n\r\n```\r\nError\t10/18/2021 7:27:58 PM\tApplication Error\t1000\t(100)\r\nFaulting application name: MSBuild.exe, version: 16.10.2.30804, time stamp: 0xe420bb9d\r\nFaulting module name: KERNELBASE.dll, version: 10.0.14393.4350, time stamp: 0x606eb12a\r\nException code: 0xe0434352\r\nFault offset: 0x000dc602\r\nFaulting process id: 0x3e60\r\nFaulting application start time: 0x01d7c477c8e27647\r\nFaulting application path: C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Professional\\MSBuild\\Current\\Bin\\MSBuild.exe\r\nFaulting module path: C:\\Windows\\System32\\KERNELBASE.dll\r\nReport Id: 89447d74-5d51-4095-8f31-0aeae7ea35ae\r\nFaulting package full name: \r\nFaulting package-relative application ID: \r\n```\r\n\r\n```\r\nError\t10/18/2021 7:27:58 PM\t.NET Runtime\t1026\tNone\r\nApplication: MSBuild.exe\r\nFramework Version: v4.0.30319\r\nDescription: The process was terminated due to an unhandled exception.\r\nException Info: System.BadImageFormatException\r\n   at Microsoft.Build.Shared.BuildEnvironmentHelper.get_Instance()\r\n   at Microsoft.Build.Utilities.Traits.get_Instance()\r\n   at Microsoft.Build.CommandLine.MSBuildApp.Execute(System.String)\r\n   at Microsoft.Build.CommandLine.MSBuildApp.Main()\r\n```\r\n\r\n### Analysis\r\nIt might be inside BuildEnvironmentHelper.Instance property. There are 5 places inside MSBuildApp that call this helper Instance property, see https://github.com/dotnet/msbuild/blob/bbb9655b007be6d079985f3a7ec14f5d82a18f64/src/MSBuild/XMake.cs\r\n\r\n### Versions & Configurations\r\nMSBuild.exe, version: 16.10.2.30804\r\n\r\n### Attach a binlog\r\nHow do I attach a binlog if most often the process that crashes is a background process created by VS Tools? https://docs.microsoft.com/en-us/visualstudio/msbuild/obtaining-build-logs-with-msbuild?view=vs-2019 is actually not at all helpful in this regard.",
  "state": "CLOSED",
  "createdAt": "2021-10-18T23:41:41Z",
  "updatedAt": "2024-02-21T14:11:20Z",
  "closedAt": "2021-12-26T19:00:53Z",
  "author": {
    "login": "jzabroski"
  },
  "labels": [
    "bug",
    "needs-more-info",
    "stale",
    "closed-by-bot",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Actually, it looks like any line here could cause this issue: https://github.com/dotnet/msbuild/blob/bbb9655b007be6d079985f3a7ec14f5d82a18f64/src/Shared/BuildEnvironmentHelper.cs#L74-L315\r\n\r\nYikes.  How is Microsoft testing this huge dependency tree?  It seems impossible.  What human being understands what this does?\r\n\r\nIt of course would be great first step if the Try methods reported their own exceptions, rather than reporting BuildEnvironment singleton failed to create via a cryptic TypeLoadInitializationException - but I dont understand why this manifests as a BadImageFormatException.  Have not studied the code close enough to figure that out yet.",
        "createdAt": "2021-10-18T23:57:53Z",
        "updatedAt": "2021-10-19T00:00:14Z",
        "author": {
          "login": "jzabroski"
        }
      },
      {
        "body": "It seems BadImageFormatException can happen if a bad assembly is loaded.  It would seem to therefore make some sense if MSBuild were to be improved to read the assembly metadata and determine if the types needed are from the right assembly, but I have not really written such code myself, so that is just a working theory.  In any case, it seems this probing logic is rather unintelligent and could be made more debuggable.",
        "createdAt": "2021-10-19T15:10:07Z",
        "updatedAt": "2021-10-19T15:10:07Z",
        "author": {
          "login": "jzabroski"
        }
      },
      {
        "body": "That explanation seems plausible. I'm assuming it was originally written that way to try to have neat code, but it would be cleaner (in my opinion) like:\r\n\r\n```C#\r\nBuildEnvironment env = TryFromEnvironmentVariable() ??\r\n                           TryFromVisualStudioProcess() ??\r\n                           TryFromMSBuildProcess() ??\r\n                           TryFromDevConsole() ??\r\n                           TryFromSetupApi() ??\r\n                           TryFromAppContextBaseDirectory();\r\n\r\nif (env is not null)\r\n{\r\n    return env;\r\n}\r\n...\r\n```\r\n\r\nIf you also have get_Instance check whether it was already initialized and return if so, else Initialize(), I think it would have the added benefit of giving you a more complete call stack, which should help with figuring out what the real root of this problem is. It might be worth trying that with your repro.",
        "createdAt": "2021-10-27T15:58:38Z",
        "updatedAt": "2021-10-27T15:58:38Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "I was wondering if just having a static constructor on BuildEnvironment that does nothing important would also avoid the bad image format exception and a more useful exception.  But that is a gray area in my knowledge of how the runtime handles these.  To be honest, I try not to ever write code that can fail in a ctor.  The design pattern I was taught in my 20s was \"create, set, use\".",
        "createdAt": "2021-10-27T17:54:56Z",
        "updatedAt": "2021-10-27T17:55:29Z",
        "author": {
          "login": "jzabroski"
        }
      },
      {
        "body": "@Forgind I thought about your proposal a bit more, and I suspect that re-writing it that way won't solve the issue, but it may change the windows event log exception that is logged into something more actionable.  It would also make the code more readable.\r\n\r\nThat said, if it were me, I would seek to write this code in such a way that de-coupled candidate paths from side effects.  One possible solution would be to write the beginning of the method this way:\r\n\r\n```c#\r\n        private static BuildEnvironment Initialize()\r\n        {\r\n            // See https://github.com/Microsoft/msbuild/issues/1461 for specification of ordering and details.\r\n            var env = TryFromEnvironmentVariable() ??\r\n                           TryFromVisualStudioProcess() ??\r\n                           TryFromMSBuildProcess() ??\r\n                           TryFromDevConsole() ??\r\n                           TryFromSetupApi() ??\r\n                           TryFromAppContextBaseDirectory();\r\n\r\n            if (env != null)\r\n                 return env;\r\n\r\n            // If we can't find a suitable environment, continue in the 'None' mode. If not running tests,\r\n            // we will use the current running process for the CurrentMSBuildExePath value.  This is likely\r\n            // wrong, but many things use the CurrentMSBuildToolsDirectory value which must be set for basic\r\n            // functionality to work.\r\n            //\r\n            // If we are running tests, then the current running process may be a test runner located in the\r\n            // NuGet packages folder.  So in that case, we use the location of the current assembly, which\r\n            // will be in the output path of the test project, which is what we want.\r\n\r\n            string msbuildExePath;\r\n            if (s_runningTests())\r\n            {\r\n                msbuildExePath = typeof(BuildEnvironmentHelper).Assembly.Location;\r\n            }\r\n```\r\n\r\nSeparately, the following is a bit of duplicate code compared to other parts of code in the same file:\r\n\r\nhttps://github.com/dotnet/msbuild/blob/bbb9655b007be6d079985f3a7ec14f5d82a18f64/src/Shared/BuildEnvironmentHelper.cs#L181-L183\r\n\r\nhttps://github.com/dotnet/msbuild/blob/bbb9655b007be6d079985f3a7ec14f5d82a18f64/src/Shared/BuildEnvironmentHelper.cs#L295-L298\r\n\r\nAlthough, I must say, it's strange that on lines 295-298, the method is saying it's searching for MSBuild.exe, but it's actually searching for *both* MSBuild.exe and MSBuild.dll.  I don't know - this code is Gone Wild.\r\n\r\nWhat do you think?  CC @rainersigwald \r\n\r\nAs you can see in #6404 I have been having this problem quite a bit, dating back to at least May 3rd, 2021.",
        "createdAt": "2021-11-01T21:54:26Z",
        "updatedAt": "2021-11-01T21:54:26Z",
        "author": {
          "login": "jzabroski"
        }
      },
      {
        "body": "I also think that these lines should be their own method, so that the Initialize thing can be made even clearer/simpler:\r\n\r\nhttps://github.com/dotnet/msbuild/blob/bbb9655b007be6d079985f3a7ec14f5d82a18f64/src/Shared/BuildEnvironmentHelper.cs#L95-L119\r\n\r\n```c#\r\n        private static BuildEnvironment TryFromNoneMode()\r\n        {\r\n            // If we can't find a suitable environment, continue in the 'None' mode. If not running tests,\r\n            // we will use the current running process for the CurrentMSBuildExePath value.  This is likely\r\n            // wrong, but many things use the CurrentMSBuildToolsDirectory value which must be set for basic\r\n            // functionality to work.\r\n            //\r\n            // If we are running tests, then the current running process may be a test runner located in the\r\n            // NuGet packages folder.  So in that case, we use the location of the current assembly, which\r\n            // will be in the output path of the test project, which is what we want.\r\n\r\n            string msbuildExePath;\r\n            if (s_runningTests())\r\n            {\r\n                msbuildExePath = typeof(BuildEnvironmentHelper).Assembly.Location;\r\n            }\r\n            else\r\n            {\r\n                msbuildExePath = s_getProcessFromRunningProcess();\r\n            }\r\n\r\n            return new BuildEnvironment(\r\n                BuildEnvironmentMode.None,\r\n                msbuildExePath,\r\n                runningTests: s_runningTests(),\r\n                runningInVisualStudio: false,\r\n                visualStudioPath: null);\r\n        }\r\n```\r\n\r\nwhich would then make your initialization code read like this:\r\n\r\n```c#\r\n        private static BuildEnvironment Initialize()\r\n        {\r\n            // See https://github.com/Microsoft/msbuild/issues/1461 for specification of ordering and details.\r\n            return TryFromEnvironmentVariable() ??\r\n                           TryFromVisualStudioProcess() ??\r\n                           TryFromMSBuildProcess() ??\r\n                           TryFromDevConsole() ??\r\n                           TryFromSetupApi() ??\r\n                           TryFromAppContextBaseDirectory() ??\r\n                           TryFromNoneMode();\r\n        }\r\n```",
        "createdAt": "2021-11-01T21:59:52Z",
        "updatedAt": "2021-11-01T21:59:52Z",
        "author": {
          "login": "jzabroski"
        }
      },
      {
        "body": "Separately, I do think it's a bit weird 'running tests' is not an environment mode, and is assigned to the wonky state of None, but whatever.",
        "createdAt": "2021-11-01T22:00:39Z",
        "updatedAt": "2021-11-01T22:00:39Z",
        "author": {
          "login": "jzabroski"
        }
      },
      {
        "body": "Those refactorings look good to me. As you said, they wouldn't resolve the problem, but they should make it a good bit easier to figure out what exactly the problem is.\r\n\r\nThis code, like most code, was written piecemeal, so I'm sure there are places where comments don't quite line up or where we do duplicate work. I'd be a little careful around duplicate work just because I seem to remember there was some \"duplicate work\" I found recently that we stopped doing. It promptly broke, so we started doing it again. That said, I'm always happy to not do unnecessary work.\r\n\r\nI am wondering about the \"TryFromNoneMode\" name...I'm not sure what a better name would be, but it doesn't feel quite right, since you're not trying to use None mode the same way you're looking in an environment variable, MSBuild process, etc. \"TryConstructInDefaultMode\"?",
        "createdAt": "2021-11-01T23:06:44Z",
        "updatedAt": "2021-11-01T23:06:44Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "None Mode is very much just as magical as all this other stuff.",
        "createdAt": "2021-11-02T02:51:21Z",
        "updatedAt": "2021-11-02T02:51:21Z",
        "author": {
          "login": "jzabroski"
        }
      },
      {
        "body": "`TryFromNoneMode` could be named `ContinueInNoneMode`, as that is what the original comments suggest:\r\n\r\n> If we can't find a suitable environment, continue in the 'None' mode.",
        "createdAt": "2021-11-02T14:07:34Z",
        "updatedAt": "2021-11-02T14:07:34Z",
        "author": {
          "login": "jzabroski"
        }
      },
      {
        "body": "I'm not too worried about the name. If you just use it to help with debugging, it doesn't really matter what it is; if you submit it as a PR, I'm sure someone else will have an opinion \ud83d\ude42",
        "createdAt": "2021-11-02T22:51:25Z",
        "updatedAt": "2021-11-02T22:51:25Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "Happened again with the latest Visual Studio. \r\n\r\nWindows Event Log entries were:\r\n\r\n```\r\nApplication: MSBuild.exe\r\nFramework Version: v4.0.30319\r\nDescription: The process was terminated due to an unhandled exception.\r\nException Info: System.BadImageFormatException\r\n   at Microsoft.Build.Shared.BuildEnvironmentHelper.get_Instance()\r\n   at Microsoft.Build.Utilities.Traits.get_Instance()\r\n   at Microsoft.Build.CommandLine.MSBuildApp.Execute(System.String)\r\n   at Microsoft.Build.CommandLine.MSBuildApp.Main()\r\n```\r\n\r\n```\r\nFaulting application name: MSBuild.exe, version: 16.11.1.47101, time stamp: 0xa5031179\r\nFaulting module name: KERNELBASE.dll, version: 10.0.14393.4350, time stamp: 0x606eb12a\r\nException code: 0xe0434352\r\nFault offset: 0x000dc602\r\nFaulting process id: 0x51f0\r\nFaulting application start time: 0x01d7d0e715245d9f\r\nFaulting application path: C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Professional\\MSBuild\\Current\\Bin\\MSBuild.exe\r\nFaulting module path: C:\\Windows\\System32\\KERNELBASE.dll\r\nReport Id: 7f2151a4-1fc9-43ce-9957-88c51a965c22\r\nFaulting package full name: \r\nFaulting package-relative application ID: \r\n```",
        "createdAt": "2021-11-03T19:16:54Z",
        "updatedAt": "2021-11-03T19:16:54Z",
        "author": {
          "login": "jzabroski"
        }
      },
      {
        "body": "The callstack is not very helpful here. Can you try getting a memory dump of the crash (perhaps with [`procdump.exe` as a postmortem debugger](https://docs.microsoft.com/windows-hardware/drivers/debugger/enabling-postmortem-debugging#window-sysinternals-procdump)?",
        "createdAt": "2021-11-03T19:29:14Z",
        "updatedAt": "2021-11-03T19:29:14Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "This issue is marked as stale because feedback has been requested for 30 days with no response. Please respond within 14 days or this issue will be closed due to inactivity.",
        "createdAt": "2021-12-12T00:00:55Z",
        "updatedAt": "2021-12-12T00:00:55Z",
        "author": {
          "login": "ghost"
        }
      },
      {
        "body": "This issue was closed due to inactivity. If you can still reproduce this bug, please comment with the requested information, detailed steps to reproduce the problem, or any other notes that might help in the investigation.",
        "createdAt": "2021-12-26T19:00:54Z",
        "updatedAt": "2021-12-26T19:00:54Z",
        "author": {
          "login": "ghost"
        }
      }
    ]
  }
}