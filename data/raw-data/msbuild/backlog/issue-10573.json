{
  "number": 10573,
  "title": "[Bug]: No idiomatic method to prevent content files from referenced projects overwriting files in main project",
  "body": "### Issue Description\n\nI have read about `ErrorOnDuplicatePublishOutputFiles` but that only works on Publish (i.e. not build), and isn't what I want. I want to be able to specify that a file should not be brought in from the referenced project at all. I have tried adding `PrivateAssets=none` to the `ProjectReference` in the csproj file, to no avail.\n\n### Steps to Reproduce\n\n1. Clone https://github.com/nbarnwell/ConflictingContentFilesTest\r\n2. Build in Visual Studio\n\n### Expected Behavior\n\nThe appsettings file in the output folder should be the one from the main project.\n\n### Actual Behavior\n\nThe appsettings file in the output folder is the one from the ExternalLibrary project.\n\n### Analysis\n\nI believe this is a change in behaviour of project references from .NET Framework? I understand bringing in content files from _packages_, but not projects. With a package, you have deliberately packaged it to contain certain files, but that step is implicit in _project_ references, so you have no control over what is brought in. There is some setting somewhere about not bringing in content files from _transitive_ project references, but that's not what I'm looking for, either.\n\n### Versions & Configurations\n\nMSBuild version 17.10.4+10fbfbf2e for .NET Framework\r\n17.10.4.21802\r\n\r\nMicrosoft Visual Studio Professional 2022 (64-bit) - Current\r\nVersion 17.10.4",
  "state": "CLOSED",
  "createdAt": "2024-08-27T09:23:45Z",
  "updatedAt": "2024-10-09T08:14:22Z",
  "closedAt": "2024-10-09T08:14:21Z",
  "author": {
    "login": "nbarnwell"
  },
  "labels": [
    "bug"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "GangWang01"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "If the application project has its own `appsettings.json` file, then `'$(CopyConflictingTransitiveContent)' == 'false'` from <https://github.com/dotnet/msbuild/pull/4931> should already prevent the `appsettings.json` of the referenced project from being copied.  I wonder why that's not working.",
        "createdAt": "2024-08-27T11:30:04Z",
        "updatedAt": "2024-08-27T11:30:04Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "I have asked that, but apparently \"transitive\" content is when a project references a project that itself references another project? So for ProjectA->ProjectB->ProjectC, ProjectC's content files wouldn't end up in ProjectA's build output. That's not the problem I'm having, though. This is direct project reference's content files, not transitive ones. Although, I've read a lot of similar-but-not-the-same issues now and I'm starting to get confused with the various responses, hence the desire for the MS-approved \"idiomatic\" way to stop this happening.",
        "createdAt": "2024-08-27T12:34:05Z",
        "updatedAt": "2024-08-27T12:35:38Z",
        "author": {
          "login": "nbarnwell"
        }
      },
      {
        "body": "Out of interest, I asked Github Copilot:\r\n\r\n> How do I prevent content files from a referenced project from overwriting files with the same name in the referencing project?\r\n\r\nAnd it offered me something that I edited to:\r\n\r\n```\r\n  <ItemGroup>\r\n    <!-- Exclude specific content files from being copied -->\r\n    <Content Remove=\"ExternalLibrary\\appsettings.json\" />\r\n  </ItemGroup>\r\n\r\n  <Target Name=\"CopyReferencedContent\" AfterTargets=\"Build\">\r\n    <!-- Manually copy content files if needed, with conditions -->\r\n    <Copy SourceFiles=\"appsettings.json\" DestinationFolder=\"$(OutputPath)\" SkipUnchangedFiles=\"true\" />\r\n  </Target>\r\n```\r\n\r\nThat does seem to work in my sample repro project. This can't be the idiomatic solution to this, though? Surely?",
        "createdAt": "2024-08-27T13:44:46Z",
        "updatedAt": "2024-08-27T13:44:46Z",
        "author": {
          "login": "nbarnwell"
        }
      },
      {
        "body": "`<Content Remove=\"ExternalLibrary\\appsettings.json\" />` looks unnecessary in the application project.",
        "createdAt": "2024-08-27T14:45:39Z",
        "updatedAt": "2024-08-27T14:45:39Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "> `<Content Remove=\"ExternalLibrary\\appsettings.json\" />` looks unnecessary in the application project.\r\n\r\nI agree, but it's AI, so it's to be taken with a pinch of salt. This is another attempt which appears to work so far (though I've had varying results with various solutions so I don't quite trust it enough to just be a \"drop-in\" when this happens in future):\r\n\r\n```\r\n  <ItemGroup>\r\n    <Content Update=\"appsettings.json\">\r\n      <ExcludeFromSingleFile>true</ExcludeFromSingleFile>\r\n      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>\r\n      <CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>\r\n    </Content>\r\n    <None Remove=\"appsettings.json\" />\r\n    <Content Include=\"appsettings.json\">\r\n      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>\r\n    </Content>\r\n  </ItemGroup>\r\n```",
        "createdAt": "2024-08-27T15:03:31Z",
        "updatedAt": "2024-08-27T15:03:31Z",
        "author": {
          "login": "nbarnwell"
        }
      },
      {
        "body": "> 2. Build in Visual Studio\r\n\r\nDo you get the same results if you build the solution with `dotnet build`?",
        "createdAt": "2024-08-27T15:05:16Z",
        "updatedAt": "2024-08-27T15:05:16Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "Re `CopyConflictingTransitiveContent` -- despite \"Transitive\" in the name, it should work in your scenario (except it will fool the [Fast Up-to-date Check](https://github.com/dotnet/project-system/blob/02033da2c6e238403885f6ec1bb6995f83dc2c2b/docs/up-to-date-check.md)).  I suppose the content is transitive in the sense that there is a reference from the application project to the library project, and a reference from the library project to the content file.\r\n\r\nAre you using [Visual Studio build acceleration](https://aka.ms/vs-build-acceleration)?  That doesn't seem to respect the `CopyConflictingTransitiveContent` logic.",
        "createdAt": "2024-08-27T15:12:41Z",
        "updatedAt": "2024-08-27T15:12:41Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "This might be a duplicate of <https://github.com/dotnet/project-system/issues/9001>.  If so, the fix <https://github.com/dotnet/project-system/pull/9454> is included in Visual Studio 2022 version 17.11.1.  AFAICT, it was not backported to LTSC 17.10 versions.",
        "createdAt": "2024-08-27T15:45:01Z",
        "updatedAt": "2024-08-27T15:45:18Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "> This might be a duplicate of [dotnet/project-system#9001](https://github.com/dotnet/project-system/issues/9001). If so, the fix [dotnet/project-system#9454](https://github.com/dotnet/project-system/pull/9454) is included in Visual Studio 2022 version 17.11.1. AFAICT, it was not backported to LTSC 17.10 versions.\r\n\r\nThat's interesting - my Visual Studio did an update only yesterday and is now on that version. I'll do some more tests.",
        "createdAt": "2024-08-28T07:59:51Z",
        "updatedAt": "2024-08-28T07:59:51Z",
        "author": {
          "login": "nbarnwell"
        }
      },
      {
        "body": "> This might be a duplicate of [dotnet/project-system#9001](https://github.com/dotnet/project-system/issues/9001). If so, the fix [dotnet/project-system#9454](https://github.com/dotnet/project-system/pull/9454) is included in Visual Studio 2022 version 17.11.1. AFAICT, it was not backported to LTSC 17.10 versions.\r\n\r\nWell, I've done several builds on VS 17.11.1 on both the original project that I couldn't share, and the example repro project, and with basic csproj values (i.e. no special targets or properties beyond what VS puts in when you set a file as Content etc), I seem to get the correct appsettings.json file now.\r\n\r\nSo it seems like my issue might possibly be fixed, though it'll take a little while to earn my trust. :)\r\n\r\nLast question - does your understanding of the fix rule out similar issues on AzDO build agents? I'm asking because it sounds like the fix was for the VS-specific build acceleration and therefore msbuild (i.e. `dotnet build`) was never affected?\r\n\r\nThanks for your help with this. I'd been losing my mind trying to make sense of all the seemingly related github issues. :S",
        "createdAt": "2024-08-28T08:21:58Z",
        "updatedAt": "2024-08-28T08:25:17Z",
        "author": {
          "login": "nbarnwell"
        }
      },
      {
        "body": "IIRC, if you set a more verbose logging level under \"SDK-Style Projects\" / \"Up to Date Checks\" in the options of Visual Studio 2022 version 17.11.1 and build the project, then the Output window will report that it disabled build acceleration because of conflicting files.\r\n\r\nFor lower versions of Visual Studio, you can set `<AccelerateBuildsInVisualStudio>false</AccelerateBuildsInVisualStudio>` in the source and it should have the same effect.\r\n\r\nI don't know for sure whether AzDO build agents can use build acceleration.",
        "createdAt": "2024-08-28T11:20:50Z",
        "updatedAt": "2024-08-28T11:20:50Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "Team triage: @GangWang01 could you please try to reproduce and investigate the issue?",
        "createdAt": "2024-09-17T14:48:42Z",
        "updatedAt": "2024-09-17T14:48:42Z",
        "author": {
          "login": "AR-May"
        }
      },
      {
        "body": "With the provided steps to reproduce and VS version I could not reproduce. The appsettings.json file in the output folder was from the main project, not the referenced project.\r\n![image](https://github.com/user-attachments/assets/f9b2b473-d049-4a1b-b90d-6378387ccea4)\r\n\r\nhttps://github.com/dotnet/msbuild/pull/4931 works well and gets the referenced project's appsettings.json removed from the list of items copied to output folder.\r\n![image](https://github.com/user-attachments/assets/04dc0498-7d09-46ff-8c50-699d464c0e74)\r\n",
        "createdAt": "2024-09-23T08:28:20Z",
        "updatedAt": "2024-09-23T08:28:20Z",
        "author": {
          "login": "GangWang01"
        }
      },
      {
        "body": "@GangWang01 IIRC the issue would occur on Visual Studio 2022 version 17.10.\\* if you enable build acceleration in VS options and build the solution **twice**.  On the second build it would not use MSBuild and would just do the build-acceleration file copy and mess it up.",
        "createdAt": "2024-09-23T09:31:55Z",
        "updatedAt": "2024-09-23T09:31:55Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "@KalleOlaviNiemitalo Build acceleration did copy the appsettings.json file from referenced project to the output folder of main project when doing the second build with any change to the appsettings.json file from referenced project. It doesn't have the logic like `CopyConflictingTransitiveContent`.",
        "createdAt": "2024-09-24T10:40:14Z",
        "updatedAt": "2024-09-24T10:41:43Z",
        "author": {
          "login": "GangWang01"
        }
      },
      {
        "body": "> This might be a duplicate of [dotnet/project-system#9001](https://github.com/dotnet/project-system/issues/9001). If so, the fix [dotnet/project-system#9454](https://github.com/dotnet/project-system/pull/9454) is included in Visual Studio 2022 version 17.11.1. AFAICT, it was not backported to LTSC 17.10 versions.\r\n\r\nAs @KalleOlaviNiemitalo pointed out, it's duplicate with the issue of project system.\r\n\r\n",
        "createdAt": "2024-09-25T08:27:58Z",
        "updatedAt": "2024-09-25T08:27:58Z",
        "author": {
          "login": "GangWang01"
        }
      },
      {
        "body": "Closed as it's an issue of project system and it should be fixed in 17.11 according to the milestone in the pull request https://github.com/dotnet/project-system/pull/9454.",
        "createdAt": "2024-10-09T08:14:21Z",
        "updatedAt": "2024-10-09T08:14:21Z",
        "author": {
          "login": "GangWang01"
        }
      }
    ]
  }
}