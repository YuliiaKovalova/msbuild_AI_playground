{
  "number": 5037,
  "title": "Update plugin assembly loading for .NET 3/5",
  "body": "Several improvements to #4916 are possible once we're moved to target .NET 3+:\r\n\r\n- [x] Name AssemblyLoadContexts\r\n- [ ] Use `AssemblyDependencyResolver` to make native dependencies easier to handle (https://github.com/microsoft/msbuild/pull/4916#discussion_r363712530)\r\n- [ ] Audit MSBuild's dependencies and consider handling `Resolving` rather than `Load` (https://github.com/microsoft/msbuild/pull/4916/files/6d4c3b1e2adcd6ce97233b85489c514b2b990949#r363710290, https://github.com/microsoft/msbuild/pull/4916#discussion_r363715494)",
  "state": "CLOSED",
  "createdAt": "2020-01-08T16:59:48Z",
  "updatedAt": "2024-02-21T17:05:32Z",
  "closedAt": "2023-08-21T11:06:09Z",
  "author": {
    "login": "rainersigwald"
  },
  "labels": [
    "Area: Engine",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": ".NET 7.0"
  },
  "comments": {
    "nodes": [
      {
        "body": "Note: this was already mostly done in https://github.com/microsoft/msbuild/commit/90ac0c3110ddbc112780fdb009079dc6288e5bd7. We could mostly pull back to that, but we'll need to keep the escape hatches and other behaviors of the current implementation.",
        "createdAt": "2020-02-10T18:06:50Z",
        "updatedAt": "2020-02-10T18:06:50Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Please to take a look at the unique requirements proposed by #1755 which was recently duped against this one. The goal being that now that msbuild isn't a Windows, .NET Framework only process, we need a more scalable, simpler model for plugins to ship without shipping the full transitive closure of their own runtime dependencies for every single OS+runtime, while still being able to run on each of these.",
        "createdAt": "2020-06-24T16:15:23Z",
        "updatedAt": "2020-06-24T16:15:23Z",
        "author": {
          "login": "AArnott"
        }
      },
      {
        "body": "@AArnott are you saying there are MSBuild-specific requirements that are not covered by [`AssemblyDependencyResolver`](https://docs.microsoft.com/en-us/dotnet/api/system.runtime.loader.assemblydependencyresolver?view=netcore-3.1)? None jumped out at me.",
        "createdAt": "2020-06-24T16:18:43Z",
        "updatedAt": "2020-06-24T16:18:55Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald I'm not sure. I don't see anything in the `AssemblyDependencyResolver` doc to suggest that it can load a plugin's dependencies from the nuget package cache.",
        "createdAt": "2020-06-24T16:38:41Z",
        "updatedAt": "2020-06-24T16:38:41Z",
        "author": {
          "login": "AArnott"
        }
      },
      {
        "body": "@rainersigwald Are there examples how to plugin with this in view? Thank you...",
        "createdAt": "2021-01-07T17:55:26Z",
        "updatedAt": "2021-01-07T17:55:26Z",
        "author": {
          "login": "mwpowellhtx"
        }
      },
      {
        "body": "You might be interested in https://docs.microsoft.com/dotnet/core/tutorials/creating-app-with-plugin-support#plugin-with-library-dependencies, @mwpowellhtx.",
        "createdAt": "2021-01-07T18:02:31Z",
        "updatedAt": "2021-01-07T18:02:31Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Hi @rainersigwald, I've recently come across a memory leak caused by the fact that assemblies are loaded into `AssemblyLoadContext` but they are never unloaded. \r\nThe memory footprint of loaded assemblies is small enough that this problem can be ignored most of the time. But for us it is a problem as we want to build a long running service which uses msbuild libraries to evaluate project files.  Fortunately there is a workaround (https://github.com/dotnet/msbuild/pull/5098) so we are not blocked on this problem anymore, but it would be great if it was fixed.\r\n\r\nAccording to my tests, it is actually quite an easy fix. It is enough to construct the `AssemblyLoadContext` with `isCollectible = true` (available in .NET 3+). When the ALC is collectible, it will automatically unload assemblies when they are not needed (https://github.com/dotnet/runtime/blob/84bad7e24589169975ec8a599743110d703c761b/src/libraries/System.Private.CoreLib/src/System/Runtime/Loader/AssemblyLoadContext.cs#L113-L125).\r\n\r\nDocumentation says that it is pretty safe, as the assembly will be unloaded only if it is no longer referenced/used (https://docs.microsoft.com/en-us/dotnet/standard/assembly/unloadability). I wonder whether you see any problems with making ALC collectible? Would you accept a PR for it?",
        "createdAt": "2021-09-10T11:12:24Z",
        "updatedAt": "2021-09-10T11:12:24Z",
        "author": {
          "login": "marcin-krystianc"
        }
      },
      {
        "body": "@marcin-krystianc We considered making the ALCs collectible, but that can harm performance in some cases--specifically, when we're reusing MSBuild nodes for a subsequent build, having the tasks loaded (and JITted) from a previous run can speed up the dev inner loop.\r\n\r\nI'm a bit confused by the leak you're describing, though. Some questions:\r\n\r\n1. Are you really only evaluating projects? That shouldn't require any tasks and shouldn't use any ALCs.\r\n2. When you observe the leak, what is causing creation of new ALCs? There should be one per task assembly, so assuming you're not constantly changing task assemblies, I would expect extremely slow growth.\r\n3. How does the workaround from #5098 help? Without that, all the tasks should be loaded into the default ALC and not be collectible, so the growth characteristics should be roughly the same.",
        "createdAt": "2021-09-10T13:52:25Z",
        "updatedAt": "2021-09-10T13:52:49Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "\r\nAd 1\r\nYes, to reproduce the problem it is enough to evaluate projects. You are right that project evaluation doesn't require creating new MsBuild tasks, but the leak is not related to tasks at all. There are SdkResolvers which need to be loaded for the project file evaluation (E.g.: `Microsoft.Build.NuGetSdkResolver.dll`, `Microsoft.NET.Sdk.WorkloadMSBuildSdkResolver.dll`).\r\nExample call stack is:\r\n```\r\nAssemblyLoadContext.LoadFromAssemblyPath() \r\nCoreClrAssemblyLoader.LoadUsingPluginContext()\r\nCoreClrAssemblyLoader.LoadFromPath()\r\nSdkResolverLoader.LoadResolverAssembly()\r\nSdkResolverLoader.LoadResolvers()\r\nSdkResolverLoader.LoadResolvers()\r\nSdkResolverService.Initialize()\r\nSdkResolverService.ResolveSdk()\r\nCachingSdkResolverService.<>n__0()\r\nCachingSdkResolverService.<>c__DisplayClass3_0.<ResolveSdk>b__1()\r\nLazy<SdkResult>.ViaFactory()\r\nLazy<SdkResult>.ExecutionAndPublication()\r\nLazy<SdkResult>.CreateValue()\r\nLazy<__Canon>.get_Value()\r\nCachingSdkResolverService.ResolveSdk()\r\nEvaluator<ProjectProperty, ProjectItem, ProjectMetadata, ProjectItemDefinition>.ExpandAndLoadImportsFromUnescapedImportExpressionConditioned()\r\nEvaluator<ProjectProperty, ProjectItem, ProjectMetadata, ProjectItemDefinition>.ExpandAndLoadImports()\r\nEvaluator<ProjectProperty, ProjectItem, ProjectMetadata, ProjectItemDefinition>.EvaluateImportElement()\r\nEvaluator<ProjectProperty, ProjectItem, ProjectMetadata, ProjectItemDefinition>.PerformDepthFirstPass()\r\nEvaluator<ProjectProperty, ProjectItem, ProjectMetadata, ProjectItemDefinition>.Evaluate()\r\nEvaluator<ProjectProperty, ProjectItem, ProjectMetadata, ProjectItemDefinition>.Evaluate()\r\nProject.ProjectImpl.Reevaluate()\r\nProject.ProjectImpl.ReevaluateIfNecessary()\r\nProject.ProjectImpl.ReevaluateIfNecessary()\r\nProject.ProjectImpl.ReevaluateIfNecessary()\r\nProject.ProjectImpl.Initialize()\r\nnew Project()\r\nProject.FromFile()\r\n...\r\n```\r\n\r\nAd 2\r\nNew ALC are created because SdkResolvers need to be loaded for each evaluated project.\r\nThere is a cache for them called `CachingSdkResolverService` (in the `EvaluationContext`) so they are loaded only once per each instance of that cache. If it was possible to use single `EvaluationContext` for the whole lifetime of our long running service that would fix the leak from ALCs, unfortunately it is not possible as it creates other memory leaks (e.g. from the [EngineFileUtilities](https://github.com/dotnet/msbuild/blob/8f208e60995dce87ecd5f0edd313b23ef1d67bb8/src/Build/Evaluation/Context/EvaluationContext.cs#L66)).\r\n\r\nHere is simplified version of our code in which we create an `EvaluationContext` for each solution we process:\r\n```\r\nvoiid ProcessSolution(string path)\r\n{\r\n\tusing (var projectCollection = new ProjectCollection())\r\n\t{\r\n\t\tvar projectOptions = new ProjectOptions\r\n\t\t{\r\n\t\t\tProjectCollection = projectCollection,\r\n\t\t\tLoadSettings = ProjectLoadSettings.IgnoreEmptyImports | ProjectLoadSettings.IgnoreInvalidImports |\r\n\t\t\t\t\t\t \u00a0 ProjectLoadSettings.RecordDuplicateButNotCircularImports | ProjectLoadSettings.IgnoreMissingImports,\r\n\t\t\tEvaluationContext = EvaluationContext.Create(EvaluationContext.SharingPolicy.Shared),\r\n\t\t};\r\n\t\t\r\n\t\tvar solutionFile = SolutionFile.Parse(path);\r\n\t\tvar projects = solutionFile.ProjectsInOrder\r\n\t\t\t.Where(x => x.ProjectType == SolutionProjectType.KnownToBeMSBuildFormat)\r\n\t\t\t.Select(x => Project.FromFile(x.AbsolutePath, projectOptions))\r\n\t\t\t.ToList();\r\n\t\t...\r\n\t}\r\n}\r\n```\r\n\r\nAd 3\r\nMy understanding is that when the plugin ALCs are disabled then only the default ALC is used. With the single default ALC all subsequent load requests for already loaded assemblies basically do nothing. In case of SkdResolvers, their path is always the same (e.g. `c:\\Program Files\\dotnet\\sdk\\5.0.302\\SdkResolvers\\...`) so such assembly is loaded only once into memory and the memory leak is not observed anymore.\r\n\r\n\r\n",
        "createdAt": "2021-09-13T08:56:44Z",
        "updatedAt": "2021-09-13T08:56:44Z",
        "author": {
          "login": "marcin-krystianc"
        }
      },
      {
        "body": "@marcin-krystianc Ah, thank you for the details! That should be resolvable; I filed https://github.com/dotnet/msbuild/issues/6842.",
        "createdAt": "2021-09-13T13:39:52Z",
        "updatedAt": "2021-09-13T13:39:52Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald, is this issue still relevant? All linked PRs in original post were merged.",
        "createdAt": "2023-08-20T19:53:26Z",
        "updatedAt": "2023-08-20T19:56:32Z",
        "author": {
          "login": "MichalPavlik"
        }
      },
      {
        "body": "I don't think we rigorously did\r\n\r\n> * Audit MSBuild's dependencies and consider handling `Resolving` rather than `Load` (https://github.com/microsoft/msbuild/pull/4916/files/6d4c3b1e2adcd6ce97233b85489c514b2b990949#r363710290, https://github.com/microsoft/msbuild/pull/4916#discussion_r363715494)\r\n\r\nBut yes, I think we can close.",
        "createdAt": "2023-08-21T11:06:09Z",
        "updatedAt": "2023-08-21T11:06:09Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}