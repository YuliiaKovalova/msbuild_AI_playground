{
  "number": 4098,
  "title": " MSBUILD : corefx: error MSB4017: The build stopped unexpectedly because of an unexpected logger failure.",
  "body": "In corefx build https://dnceng.visualstudio.com/internal/_build/results?buildId=79263\r\nfailed with this issue. \r\nThe connected issue is : https://github.com/dotnet/core-eng/issues/5071\r\nThe issue seems to be similar to \r\n\r\n- Microsoft/msbuild#4012\r\n- Microsoft/msbuild#3193\r\n- Microsoft/msbuild#2153\r\n- \r\n\r\n```\r\n2019-01-24T06:33:05.0754128Z MSBUILD : error MSB4017: The build stopped unexpectedly because of an unexpected logger failure.\r\n2019-01-24T06:33:05.0761011Z Microsoft.Build.Exceptions.InternalLoggerException: The build stopped unexpectedly because of an unexpected logger failure. ---> System.NullReferenceException: Object reference not set to an instance of an object.\r\n2019-01-24T06:33:05.0765474Z    at Microsoft.Build.Logging.BuildEventArgsWriter.Write(ITaskItem item)\r\n2019-01-24T06:33:05.0766136Z    at Microsoft.Build.Logging.BuildEventArgsWriter.WriteItems(IEnumerable items)\r\n2019-01-24T06:33:05.0766272Z    at Microsoft.Build.Logging.BuildEventArgsWriter.Write(ProjectStartedEventArgs e)\r\n2019-01-24T06:33:05.0773982Z    at Microsoft.Build.Logging.BuildEventArgsWriter.Write(BuildEventArgs e)\r\n2019-01-24T06:33:05.0774216Z    at Microsoft.Build.Logging.BinaryLogger.Write(BuildEventArgs e)\r\n2019-01-24T06:33:05.0774341Z    at Microsoft.Build.Logging.BinaryLogger.EventSource_AnyEventRaised(Object sender, BuildEventArgs e)\r\n2019-01-24T06:33:05.0782331Z    at Microsoft.Build.Evaluation.ProjectCollection.ReusableLogger.AnyEventRaisedHandler(Object sender, BuildEventArgs e)\r\n2019-01-24T06:33:05.0782512Z    at Microsoft.Build.BackEnd.Logging.EventSourceSink.RaiseAnyEvent(Object sender, BuildEventArgs buildEvent)\r\n2019-01-24T06:33:05.0782990Z    --- End of inner exception stack trace ---\r\n2019-01-24T06:33:05.0801948Z    at Microsoft.Build.Exceptions.InternalLoggerException.Throw(Exception innerException, BuildEventArgs e, String messageResourceName, Boolean initializationException, String[] messageArgs)\r\n2019-01-24T06:33:05.0802906Z    at Microsoft.Build.BackEnd.Logging.EventSourceSink.RaiseAnyEvent(Object sender, BuildEventArgs buildEvent)\r\n2019-01-24T06:33:05.0805951Z    at Microsoft.Build.BackEnd.Logging.EventSourceSink.RaiseStatusEvent(Object sender, BuildStatusEventArgs buildEvent)\r\n2019-01-24T06:33:05.0806894Z    at Microsoft.Build.BackEnd.Logging.EventSourceSink.RaiseProjectStartedEvent(Object sender, ProjectStartedEventArgs buildEvent)\r\n2019-01-24T06:33:05.0812100Z    at Microsoft.Build.BackEnd.Logging.EventSourceSink.Consume(BuildEventArgs buildEvent)\r\n2019-01-24T06:33:05.0812253Z    at Microsoft.Build.BackEnd.Logging.EventSourceSink.Consume(BuildEventArgs buildEvent, Int32 sinkId)\r\n2019-01-24T06:33:05.0812409Z    at Microsoft.Build.BackEnd.Logging.EventRedirectorToSink.Microsoft.Build.Framework.IEventRedirector.ForwardEvent(BuildEventArgs buildEvent)\r\n2019-01-24T06:33:05.0812594Z    at Microsoft.Build.BackEnd.Logging.CentralForwardingLogger.EventSource_AnyEventRaised(Object sender, BuildEventArgs buildEvent)\r\n2019-01-24T06:33:05.0817397Z    at Microsoft.Build.BackEnd.Logging.EventSourceSink.RaiseAnyEvent(Object sender, BuildEventArgs buildEvent)\r\n```",
  "state": "OPEN",
  "createdAt": "2019-01-24T17:26:45Z",
  "updatedAt": "2024-02-21T16:32:01Z",
  "closedAt": null,
  "author": {
    "login": "robertborr"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Looks like we could nullref in that method if we were passed null:\r\n\r\nhttps://github.com/Microsoft/msbuild/blob/966cdf2ac602e359530ad63f608e6cbba9c9fd0f/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs#L538-L549\r\n\r\nIt's coming from a `ProjectStartedEventArgs`\r\n\r\nhttps://github.com/Microsoft/msbuild/blob/966cdf2ac602e359530ad63f608e6cbba9c9fd0f/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs#L181\r\n\r\nAnd that ctor mostly just passes along the passed-in item list which I wouldn't expect to have any null entries.\r\n\r\n@robertborr Does this repro consistently?",
        "createdAt": "2019-01-24T19:33:35Z",
        "updatedAt": "2019-01-24T19:33:35Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "We just hit this in another Linux build.\r\n\r\nhttps://dev.azure.com/dnceng/public/_build/results?buildId=81583\r\n\r\nNote that the callstack shown differs by 1 line after Write(ITaskItem item) call. It has item.CloneCustomMetadata in the callstack, which tells me that item wouldn't be null in that case.\r\n\r\n```diff\r\n2019-01-28T21:50:31.9837577Z Microsoft.Build.Exceptions.InternalLoggerException: The build stopped unexpectedly because of an unexpected logger failure. ---> System.NullReferenceException: Object reference not set to an instance of an object.\r\n+ 2019-01-28T21:50:31.9838228Z    at Microsoft.Build.Execution.ProjectItemInstance.TaskItem.CloneCustomMetadata()\r\n2019-01-28T21:50:31.9838392Z    at Microsoft.Build.Logging.BuildEventArgsWriter.Write(ITaskItem item)\r\n2019-01-28T21:50:31.9838539Z    at Microsoft.Build.Logging.BuildEventArgsWriter.WriteItems(IEnumerable items)\r\n2019-01-28T21:50:31.9838676Z    at Microsoft.Build.Logging.BuildEventArgsWriter.Write(ProjectStartedEventArgs e)\r\n2019-01-28T21:50:31.9838827Z    at Microsoft.Build.Logging.BuildEventArgsWriter.Write(BuildEventArgs e)\r\n2019-01-28T21:50:31.9838971Z    at Microsoft.Build.Logging.BinaryLogger.Write(BuildEventArgs e)\r\n2019-01-28T21:50:31.9839121Z    at Microsoft.Build.Logging.BinaryLogger.EventSource_AnyEventRaised(Object sender, BuildEventArgs e)\r\n2019-01-28T21:50:31.9839279Z    at Microsoft.Build.Evaluation.ProjectCollection.ReusableLogger.AnyEventRaisedHandler(Object sender, BuildEventArgs e)\r\n2019-01-28T21:50:31.9839452Z    at Microsoft.Build.BackEnd.Logging.EventSourceSink.RaiseAnyEvent(Object sender, BuildEventArgs buildEvent)\r\n2019-01-28T21:50:31.9839907Z    --- End of inner exception stack trace ---\r\n2019-01-28T21:50:31.9840084Z    at Microsoft.Build.Exceptions.InternalLoggerException.Throw(Exception innerException, BuildEventArgs e, String messageResourceName, Boolean initializationException, String[] messageArgs)\r\n2019-01-28T21:50:31.9840288Z    at Microsoft.Build.BackEnd.Logging.EventSourceSink.RaiseAnyEvent(Object sender, BuildEventArgs buildEvent)\r\n2019-01-28T21:50:31.9840463Z    at Microsoft.Build.BackEnd.Logging.EventSourceSink.RaiseStatusEvent(Object sender, BuildStatusEventArgs buildEvent)\r\n2019-01-28T21:50:31.9840644Z    at Microsoft.Build.BackEnd.Logging.EventSourceSink.RaiseProjectStartedEvent(Object sender, ProjectStartedEventArgs buildEvent)\r\n2019-01-28T21:50:31.9840800Z    at Microsoft.Build.BackEnd.Logging.EventSourceSink.Consume(BuildEventArgs buildEvent)\r\n2019-01-28T21:50:31.9840960Z    at Microsoft.Build.BackEnd.Logging.EventSourceSink.Consume(BuildEventArgs buildEvent, Int32 sinkId)\r\n2019-01-28T21:50:31.9841160Z    at Microsoft.Build.BackEnd.Logging.EventRedirectorToSink.Microsoft.Build.Framework.IEventRedirector.ForwardEvent(BuildEventArgs buildEvent)\r\n2019-01-28T21:50:31.9841349Z    at Microsoft.Build.BackEnd.Logging.CentralForwardingLogger.EventSource_AnyEventRaised(Object sender, BuildEventArgs buildEvent)\r\n2019-01-28T21:50:31.9841512Z    at Microsoft.Build.BackEnd.Logging.EventSourceSink.RaiseAnyEvent(Object sender, BuildEventArgs buildEvent)\r\n2019-01-28T21:50:32.0326589Z Build failed (exit code '1').\r\n```",
        "createdAt": "2019-01-28T23:10:23Z",
        "updatedAt": "2019-01-28T23:10:23Z",
        "author": {
          "login": "safern"
        }
      },
      {
        "body": "There are two implementations of `CloneCustomMetadata()` ... ProjectItemInstance and TaskItem. I assume the logger gets the former:\r\n```c#\r\n            public IDictionary CloneCustomMetadata()\r\n            {\r\n                Dictionary<string, string> clonedMetadata = new Dictionary<string, string>(MSBuildNameIgnoreCaseComparer.Default);\r\n\r\n                foreach (ProjectMetadataInstance metadatum in MetadataCollection)\r\n                {\r\n                    clonedMetadata[metadatum.Name] = metadatum.EvaluatedValue;\r\n                }\r\n\r\n                return clonedMetadata;\r\n            }\r\n``` \r\n`clonedMetadata` cannot be null. Also since `MetadataCollection` getter is not on the stack, and looks too big to inline I assume the NullReferenceException does not come from within it. And by inspection, it will never return null either. So either the dictionary contains a null `metadatum` - and from a quick look (I didn't look carefully), it should not, because it uses `key` off each entry as its internal key - or something else is happening. \r\n\r\nImplementation of `CloneCustomMetadata()` in TaskItem, if that's relevant, is similar, again the source and target collection is checked for null.\r\n\r\nSuggestion - some unprotected concurrent read and write to the backing dictionary here, either source or destination. That can often manifest as a NullReferenceException when accessing a dictionary. Since there's definitely multithreading going on here, perhaps one thread didn't properly \"let go\" of this item before it got to the logging thread?\r\n\r\nIf that's a possibility, as well as code inspection, another possibility is swapping out the relevant `Dictionary<K,V>`'s with some custom dictionary that immediatley breaks into the debugger when a write occurs to it concurrent with another read (or write). That might possibly, in stress runs, cause this issue to happen locally, and make it possible to find the \"other\" callstack.",
        "createdAt": "2019-01-29T22:19:32Z",
        "updatedAt": "2019-01-29T22:22:57Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "@chabiss has a consistent repro of this.",
        "createdAt": "2019-03-09T23:40:35Z",
        "updatedAt": "2019-09-06T15:20:04Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "Sorry, no his stack is different:\r\n\r\n```\r\nMSBUILD : error MSB4015: The build stopped unexpectedly because the \"ReusableLogger\" logger failed unexpectedly during shutdown.\r\nSystem.IO.Compression.ZLibException: The stream state of the underlying compression routine is inconsistent.\r\n   at System.IO.Compression.DeflaterZLib.Deflate(FlushCode flushCode)\r\n   at System.IO.Compression.DeflaterZLib.ReadDeflateOutput(Byte[] outputBuffer, FlushCode flushCode, Int32& bytesRead)\r\n   at System.IO.Compression.DeflaterZLib.System.IO.Compression.IDeflater.GetDeflateOutput(Byte[] outputBuffer)\r\n   at System.IO.Compression.DeflateStream.WriteDeflaterOutput(Boolean isAsync)\r\n   at System.IO.Compression.DeflateStream.InternalWrite(Byte[] array, Int32 offset, Int32 count, Boolean isAsync)\r\n   at System.IO.Compression.DeflateStream.Write(Byte[] array, Int32 offset, Int32 count)\r\n   at System.IO.Compression.GZipStream.Write(Byte[] array, Int32 offset, Int32 count)\r\n   at System.IO.Stream.WriteByte(Byte value)\r\n   at System.IO.BinaryWriter.Write(Byte value)\r\n   at Microsoft.Build.Logging.BuildEventArgsWriter.Write7BitEncodedInt(BinaryWriter writer, Int32 value)\r\n   at Microsoft.Build.Logging.BuildEventArgsWriter.WriteBlob(BinaryLogRecordKind kind, Byte[] bytes)\r\n   at Microsoft.Build.Logging.BinaryLogger.Shutdown()\r\n   at Microsoft.Build.Evaluation.ProjectCollection.ReusableLogger.Shutdown()\r\n   at Microsoft.Build.BackEnd.Logging.LoggingService.ShutdownLogger(ILogger logger)\r\n```",
        "createdAt": "2019-03-09T23:44:43Z",
        "updatedAt": "2019-09-06T15:20:12Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "@AArnott is seeing this in Razzle:\r\n\r\n```\r\nMSBUILD : error MSB4015: The build stopped unexpectedly because the \"ReusableLogger\" logger failed unexpectedly during shutdown.\r\nSystem.IO.Compression.ZLibException: The stream state of the underlying compression routine is inconsistent.\r\n   at System.IO.Compression.DeflaterZLib.Deflate(FlushCode flushCode)\r\n   at System.IO.Compression.DeflaterZLib.ReadDeflateOutput(Byte[] outputBuffer, FlushCode flushCode, Int32& bytesRead)\r\n   at System.IO.Compression.DeflaterZLib.System.IO.Compression.IDeflater.GetDeflateOutput(Byte[] outputBuffer)\r\n   at System.IO.Compression.DeflateStream.WriteDeflaterOutput(Boolean isAsync)\r\n   at System.IO.Compression.DeflateStream.InternalWrite(Byte[] array, Int32 offset, Int32 count, Boolean isAsync)\r\n   at System.IO.Compression.DeflateStream.Write(Byte[] array, Int32 offset, Int32 count)\r\n   at System.IO.Compression.GZipStream.Write(Byte[] array, Int32 offset, Int32 count)\r\n   at System.IO.Stream.WriteByte(Byte value)\r\n   at System.IO.BinaryWriter.Write(Byte value)\r\n   at Microsoft.Build.Logging.BuildEventArgsWriter.Write7BitEncodedInt(BinaryWriter writer, Int32 value)\r\n   at Microsoft.Build.Logging.BuildEventArgsWriter.WriteBlob(BinaryLogRecordKind kind, Byte[] bytes)\r\n   at Microsoft.Build.Logging.BinaryLogger.Shutdown()\r\n   at Microsoft.Build.Evaluation.ProjectCollection.ReusableLogger.Shutdown()\r\n   at Microsoft.Build.BackEnd.Logging.LoggingService.ShutdownLogger(ILogger logger)\r\n```",
        "createdAt": "2019-05-23T22:52:16Z",
        "updatedAt": "2019-09-06T15:20:21Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "What I saw was caused by a DEVPATH that pointed to a bad file. Thanks, @KirillOsenkov ",
        "createdAt": "2019-05-24T03:03:31Z",
        "updatedAt": "2019-09-06T15:20:32Z",
        "author": {
          "login": "AArnott"
        }
      },
      {
        "body": "@aarnott let me know if you think there\u2019s a way to harden against this case and give a better error message instead of crashing.",
        "createdAt": "2019-05-24T03:45:35Z",
        "updatedAt": "2019-09-06T15:20:40Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "There's really not. The environment caused a mismatched system.dll to be loaded.",
        "createdAt": "2019-05-24T04:17:01Z",
        "updatedAt": "2019-09-06T15:20:46Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "Happened again in corefx: https://dnceng.visualstudio.com/public/_build/results?buildId=339171&view=logs",
        "createdAt": "2019-09-06T11:21:39Z",
        "updatedAt": "2019-09-06T11:21:39Z",
        "author": {
          "login": "ViktorHofer"
        }
      },
      {
        "body": "(Minimized the conversation about separate issue with internal VS builds that also happened to manifest with a logger exception. That issue was not a bug in msbuild, but a severe misconfiguration of the internal build environment causing incorrect framework assemblies.)",
        "createdAt": "2019-09-06T15:22:17Z",
        "updatedAt": "2019-09-06T15:24:20Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "The fact that it's intermittent suggests to me that Dan is right and it's an unprotected Dictionary access (race condition). If some metadata.Name was actually null we'd see it reliably all the time.\r\n\r\nJust locking around it would probably be expensive?",
        "createdAt": "2019-09-06T16:17:35Z",
        "updatedAt": "2019-09-06T16:17:35Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "Hi, I'm blocked by this issue. May I know if there is any workaround here? Thanks!\r\n\r\nI encountered this issue when I build our projects (starting from changing TFM to netcoreapp5.0). \r\nI got my first few builds run successfully. \r\nBut after that, builds constantly failed on Linux and Mac for this issue. \r\nThe first build: https://dev.azure.com/devdiv/DevDiv/_build/results?buildId=3219078&view=logs\r\nThe failed build: \r\nhttps://dev.azure.com/devdiv/DevDiv/_build/results?buildId=3223655\r\nhttps://dev.azure.com/devdiv/DevDiv/_build/results?buildId=3219861\r\nhttps://dev.azure.com/devdiv/DevDiv/_build/results?buildId=3221751\r\nAll the failed builds have following error messages:\r\n```\r\nMSBUILD : error MSB4017: The build stopped unexpectedly because of an unexpected logger failure.\r\nMicrosoft.Build.Exceptions.InternalLoggerException: The build stopped unexpectedly because of an unexpected logger failure.\r\n ---> System.ArgumentException: An item with the same key has already been added. Key: TargetFrameworkVersion\r\n   at System.Collections.Generic.Dictionary`2.TryInsert(TKey key, TValue value, InsertionBehavior behavior)\r\n   at System.Collections.Generic.Dictionary`2.Add(TKey key, TValue value)\r\n   at Microsoft.DotNet.Tools.MSBuild.MSBuildLogger.FormatAndSend(ITelemetry telemetry, TelemetryEventArgs args) in /_/src/dotnet/commands/dotnet-msbuild/MSBuildLogger.cs:line 98\r\n   at Microsoft.DotNet.Tools.MSBuild.MSBuildLogger.OnTelemetryLogged(Object sender, TelemetryEventArgs args) in /_/src/dotnet/commands/dotnet-msbuild/MSBuildLogger.cs:line 114\r\n   at Microsoft.Build.BackEnd.Logging.EventSourceSink.RaiseTelemetryEvent(Object sender, TelemetryEventArgs buildEvent)\r\n   --- End of inner exception stack trace ---\r\n   at Microsoft.Build.Exceptions.InternalLoggerException.Throw(Exception innerException, BuildEventArgs e, String messageResourceName, Boolean initializationException, String[] messageArgs)\r\n   at Microsoft.Build.BackEnd.Logging.EventSourceSink.RaiseTelemetryEvent(Object sender, TelemetryEventArgs buildEvent)\r\n   at Microsoft.Build.BackEnd.Logging.EventSourceSink.Consume(BuildEventArgs buildEvent)\r\n   at Microsoft.Build.BackEnd.Logging.EventSourceSink.Consume(BuildEventArgs buildEvent, Int32 sinkId)\r\n   at Microsoft.Build.BackEnd.Logging.EventRedirectorToSink.Microsoft.Build.Framework.IEventRedirector.ForwardEvent(BuildEventArgs buildEvent)\r\n   at Microsoft.DotNet.Tools.MSBuild.MSBuildForwardingLogger.<Initialize>b__16_0(Object sender, TelemetryEventArgs args) in /_/src/dotnet/commands/dotnet-msbuild/MSBuildForwardingLogger.cs:line 23\r\n   at Microsoft.Build.BackEnd.Logging.EventSourceSink.RaiseTelemetryEvent(Object sender, TelemetryEventArgs buildEvent)\r\n```",
        "createdAt": "2019-11-07T19:12:20Z",
        "updatedAt": "2019-11-07T19:12:20Z",
        "author": {
          "login": "heng-liu"
        }
      },
      {
        "body": "@heng-liu your callstack is different, it looks like a bug in `Microsoft.DotNet.Tools.MSBuild.MSBuildLogger.FormatAndSend`",
        "createdAt": "2019-11-07T20:01:04Z",
        "updatedAt": "2019-11-07T20:01:04Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "@wli3 another example of an issue with the MSBuildLogger.FormatAndSend. I tagged on on a different issue for this earlier today.",
        "createdAt": "2019-11-07T21:02:04Z",
        "updatedAt": "2019-11-07T21:02:04Z",
        "author": {
          "login": "livarcocc"
        }
      },
      {
        "body": "@heng-liu that is a separate issue. https://github.com/dotnet/sdk/issues/3868",
        "createdAt": "2019-11-07T21:05:56Z",
        "updatedAt": "2019-11-07T21:05:56Z",
        "author": {
          "login": "wli3"
        }
      },
      {
        "body": "Thanks all for your help!",
        "createdAt": "2019-11-07T21:10:05Z",
        "updatedAt": "2019-11-07T21:10:05Z",
        "author": {
          "login": "heng-liu"
        }
      },
      {
        "body": "Hello. Experiencing same issue while trying to compile cmake based project.\r\nUsing external `cmake-3.19.1-win64-x64` install.\r\nHere is the `dotnet.exe --info`:\r\n```\r\n Version:   5.0.100\r\n Commit:    5044b93829\r\n\r\n\u0421\u0440\u0435\u0434\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f:\r\n OS Name:     Windows\r\n OS Version:  10.0.18363\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\5.0.100\\\r\n\r\nHost (useful for support):\r\n  Version: 5.0.0\r\n  Commit:  cf258a14b7\r\n\r\n.NET SDKs installed:\r\n  3.1.201 [C:\\Program Files\\dotnet\\sdk]\r\n  5.0.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.23 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.23 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.23 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 3.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 3.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 5.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\nClean VS 2019 install.\r\n```\r\nMicrosoft Visual Studio Community 2019\r\nVersion 16.8.2\r\nVisualStudio.16.Release/16.8.2+30717.126\r\nMicrosoft .NET Framework\r\nVersion 4.8.03752\r\n\r\nInstalled Version: Community\r\n\r\nVisual C++ 2019   00435-60000-00000-AA055\r\nMicrosoft Visual C++ 2019\r\n\r\nASP.NET and Web Tools 2019   16.8.553.28003\r\nASP.NET and Web Tools 2019\r\n\r\nAzure App Service Tools v3.0.0   16.8.553.28003\r\nAzure App Service Tools v3.0.0\r\n\r\nC# Tools   3.8.0-5.20567.16+53c5d7d3cf13d88978744a32a27c5f8350a8400a\r\nC# components used in the IDE. Depending on your project type and settings, a different version of the compiler may be used.\r\n\r\nCommon Azure Tools   1.10\r\nProvides common services for use by Azure Mobile Services and Microsoft Azure Tools.\r\n\r\nIntelliCode Extension   1.0\r\nIntelliCode Visual Studio Extension Detailed Info\r\n\r\nMicrosoft JVM Debugger   1.0\r\nProvides support for connecting the Visual Studio debugger to JDWP compatible Java Virtual Machines\r\n\r\nMicrosoft MI-Based Debugger   1.0\r\nProvides support for connecting Visual Studio to MI compatible debuggers\r\n\r\nMicrosoft Visual C++ Wizards   1.0\r\nMicrosoft Visual C++ Wizards\r\n\r\nMicrosoft Visual Studio VC Package   1.0\r\nMicrosoft Visual Studio VC Package\r\n\r\nNuGet Package Manager   5.8.0\r\nNuGet Package Manager in Visual Studio. For more information about NuGet, visit https://docs.nuget.org/\r\n\r\nProjectServicesPackage Extension   1.0\r\nProjectServicesPackage Visual Studio Extension Detailed Info\r\n\r\nTest Adapter for Boost.Test   1.0\r\nEnables Visual Studio's testing tools with unit tests written for Boost.Test.  The use terms and Third Party Notices are available in the extension installation directory.\r\n\r\nTest Adapter for Google Test   1.0\r\nEnables Visual Studio's testing tools with unit tests written for Google Test.  The use terms and Third Party Notices are available in the extension installation directory.\r\n\r\nVisual Basic Tools   3.8.0-5.20567.16+53c5d7d3cf13d88978744a32a27c5f8350a8400a\r\nVisual Basic components used in the IDE. Depending on your project type and settings, a different version of the compiler may be used.\r\n\r\nVisual F# Tools   16.8.0-beta.20507.4+da6be68280c89131cdba2045525b80890401defd\r\nMicrosoft Visual F# Tools\r\n\r\nVisual Studio Code Debug Adapter Host Package   1.0\r\nInterop layer for hosting Visual Studio Code debug adapters in Visual Studio\r\n\r\nVisual Studio Tools for CMake   1.0\r\nVisual Studio Tools for CMake\r\n```",
        "createdAt": "2020-11-28T03:19:55Z",
        "updatedAt": "2020-11-28T03:19:55Z",
        "author": {
          "login": "Extrunder"
        }
      },
      {
        "body": "Hello,\r\n\r\nWe are having similar issue with MSBuild `17.1.0` (from **VS 2022 17.1.2** installation) when using maximum CPU count, i.e. `/m`\r\n>MSBUILD : error MSB4017: The build stopped unexpectedly because of an unexpected logger failure.\r\nMicrosoft.Build.Exceptions.InternalLoggerException: The build stopped unexpectedly because of an unexpected logger failure. ---> System.NullReferenceException: Object reference not set to an instance of an object.\r\n    at Microsoft.Build.BackEnd.Logging.ParallelConsoleLogger.WriteMessageAligned(String message, Boolean prefixAlreadyWritten, Int32 prefixAdjustment)\r\n    at Microsoft.Build.BackEnd.Logging.ParallelConsoleLogger.PrintTargetNamePerMessage(BuildMessageEventArgs e, Boolean lightenText)\r\n   at Microsoft.Build.BackEnd.Logging.ParallelConsoleLogger.PrintMessage(BuildMessageEventArgs e, Boolean lightenText)\r\n   at Microsoft.Build.BackEnd.Logging.ParallelConsoleLogger.MessageHandler(Object sender, BuildMessageEventArgs e)\r\n   at Microsoft.Build.Logging.ConsoleLogger.MessageHandler(Object sender, BuildMessageEventArgs e)\r\n   at ColorLogger.ColorLogger.MessageHandler(Object sender, BuildMessageEventArgs e) in C:\\Users\\bouchraREKHADDA\\source\\repos\\ColorLogger\\ColorLogger.cs:line 140\r\n   at Microsoft.Build.Evaluation.ProjectCollection.ReusableLogger.MessageRaisedHandler(Object sender, BuildMessageEventArgs e)\r\nat Microsoft.Build.BackEnd.Logging.EventSourceSink.RaiseMessageEvent(Object sender, BuildMessageEventArgs buildEvent)\r\n--- End of inner exception stack trace ---\r\n    at Microsoft.Build.Exceptions.InternalLoggerException.Throw(Exception innerException, BuildEventArgs e, String \r\n    messageResourceName, Boolean initializationException, String[] messageArgs)\r\n    at Microsoft.Build.BackEnd.Logging.EventSourceSink.RaiseMessageEvent(Object sender, BuildMessageEventArgs buildEvent)\r\n    at Microsoft.Build.BackEnd.Logging.EventSourceSink.Consume(BuildEventArgs buildEvent)\r\n    at Microsoft.Build.BackEnd.Logging.EventSourceSink.Consume(BuildEventArgs buildEvent, Int32 sinkId)\r\n    at \r\n Microsoft.Build.BackEnd.Logging.EventRedirectorToSink.Microsoft.Build.Framework.IEventRedirector.ForwardEvent(BuildEventArgs buildEvent)\r\n    at Microsoft.Build.BackEnd.Logging.CentralForwardingLogger.EventSource_AnyEventRaised(Object sender, BuildEventArgs buildEvent)\r\n    at Microsoft.Build.BackEnd.Logging.EventSourceSink.RaiseAnyEvent(Object sender, BuildEventArgs buildEvent)\r\n    \r\nA full reproduction repository can be found here [bouchraRekhadda/ColorLogger](https://github.com/bouchraRekhadda/ColorLogger)  ",
        "createdAt": "2022-04-08T09:32:31Z",
        "updatedAt": "2022-04-08T09:32:31Z",
        "author": {
          "login": "bouchraRekhadda"
        }
      },
      {
        "body": "Any update please on the [above request](https://github.com/dotnet/msbuild/issues/4098#issuecomment-1092655496) ?\r\nThank you in advance.",
        "createdAt": "2022-04-18T08:06:51Z",
        "updatedAt": "2022-04-18T08:06:51Z",
        "author": {
          "login": "bouchraRekhadda"
        }
      }
    ]
  }
}