{
  "number": 6198,
  "title": "Order of projects in solution file affects build results",
  "body": "**Visual Studio Version**: 16.8.6\r\n\r\n**Summary**:\r\n\r\nThe order in which projects are listed in the solution (.sln) file affects the results of the building process.  In my case, for some orders the build results are correct, and for others they are not.  It seems to me that this is a bug and the order of the projects should not matter at all, since the correct references are set and the derived build order seems valid in both cases.\r\n\r\nMoreover, this problem only occurs when executing `MSBuild Rubjerg.Graphviz.sln` from the commandline (Developer Command Prompt for VS 2019).  From within Visual Studio the build always succeeds.  MSBuild version is the newest: `16.8.3.61104`.\r\n\r\n**Context**:\r\n\r\nI encountered this problem in a [very small opensource project](https://github.com/Rubjerg/Graphviz.NetWrapper), so it's easy for other people to reproduce.  The solution (`Rubjerg.Graphviz.sln`) consists of a single .NET library (`Rubjerg.Graphviz.csproj`) with a dependency on a single C++ library (`GraphvizWrapper.vcxproj`). The remaining projects are test projects.\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Check out the master branch of https://github.com/Rubjerg/Graphviz.NetWrapper\r\n2. Restore the solution nuget packages: `nuget restore Rubjerg.Graphviz.sln`. \r\n3. Build the solution on a command prompt: `MSBuild Rubjerg.Graphviz.sln`.\r\n4. Run the unittests on a command prompt: `packages\\nunit.consolerunner\\3.12.0\\tools\\nunit3-console.exe Rubjerg.Graphviz.Test\\bin\\x64\\Debug\\net48\\Rubjerg.Graphviz.Test.dll`\r\n5. Notice that the build succeeds and the tests pass. This is also indicated by the github workflow run on the latest commit of the master branch.\r\n\r\n6. Clear all build artifacts (e.g. by running `git clean -dfx` in the root of the repository)\r\n7. Change the solution file according to the diff shown in [this reproduction scenario](https://github.com/Rubjerg/Graphviz.NetWrapper/pull/33/files)\r\n8. Repeat step 2, 3 and 4\r\n\r\n**Expected Behavior**:\r\nSucceeding build and succeeding unit tests.\r\n\r\n**Actual Behavior**:\r\nNotice that after step 2 the C++ DLLs are not present in the output directories of the managed projects.  If you execute step 3, you will notice the `System.DllNotFoundException`s.  This is also indicated by the github workflow run on [the reproduction scenario](https://github.com/Rubjerg/Graphviz.NetWrapper/pull/33).\r\n\r\n**User Impact**:\r\nAll clients of our project run into this problem and have to meddle with the project order in the solution file to fix it.\r\n",
  "state": "CLOSED",
  "createdAt": "2021-02-25T09:11:16Z",
  "updatedAt": "2025-01-13T15:38:55Z",
  "closedAt": "2025-01-13T15:38:55Z",
  "author": {
    "login": "chtenb"
  },
  "milestone": null,
  "assignees": {
    "nodes": [
      {
        "login": "SimaTian"
      },
      {
        "login": "JaynieBai"
      }
    ]
  },
  "labels": [
    "has-repro"
  ],
  "comments": {
    "nodes": [
      {
        "body": "Team Triage: Verify the repro works & gather some info, then add the untriaged label.",
        "createdAt": "2021-03-03T16:09:52Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "So I got it to repro and captured binlogs of each build: [solutions.zip](https://github.com/dotnet/msbuild/files/6394239/solutions.zip)\r\n\r\nUnfortunately I couldn't repro after that. The tests seemed to work for me with the updated solution. Are you still seeing this with an updated msbuild?\r\n\r\nIt actually looks like you may have fixed the issue with https://github.com/Rubjerg/Graphviz.NetWrapper/pull/35/files?\r\n\r\nThe general idea here is you want to use ProjectReference to ensure certain projects are built first. When msbuild encounters a `.sln` file, it creates a metaproj file containing various `ProjectReferences`. The order of these references happen to be the same order as what it discovered in the `.sln` file.",
        "createdAt": "2021-04-28T19:23:12Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "I just re-ran the workflow in the reproduction PR for you, and still the same error occurs: https://github.com/Rubjerg/Graphviz.NetWrapper/pull/33/checks?check_run_id=2465253939\r\n\r\nYou should be able to reproduce by checking out that PR which is also referred to in the OP.\r\n\r\nhttps://github.com/Rubjerg/Graphviz.NetWrapper/pull/35/files doesn't seem relevant, because the reproduction PR actually branches off from that commit.\r\n\r\n![image](https://user-images.githubusercontent.com/1030961/116529306-1b0ce200-a8dd-11eb-9975-901c9e0ce2ff.png)\r\n\r\n",
        "createdAt": "2021-04-29T09:23:26Z",
        "author": {
          "login": "chtenb"
        }
      },
      {
        "body": "Using our latest preview `Microsoft (R) Build Engine version 16.10.0-preview-21253-02+fa96a2a81 for .NET Framework` I can't reproduce this behavior. There's a chance this could have been fixed in the meantime. Could you send the full output of `msbuild --version` so I can try on that specific version? Along with a specific commit hash (even if latest/master reproduces the behavior).",
        "createdAt": "2021-05-21T22:17:09Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "On github the build action reports:\r\n\r\n```\r\n> Run msbuild Rubjerg.Graphviz.sln /p:Configuration=Release\r\n\r\nMicrosoft (R) Build Engine version 16.9.0+5e4b48a27 for .NET Framework\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n```",
        "createdAt": "2021-05-22T08:53:51Z",
        "author": {
          "login": "chtenb"
        }
      },
      {
        "body": "@chtenb I tried to reproduce this issue on 16.8.6 with MSBuild 16.8.3+39993bd9d, and I couldn't reproduce this issue. Could you please help to check the repro steps in case I missed something? And to reproduce this issue, we tried to delete 'Rubjerg.Graphviz.Test.dll' manually from directories after step 3, then execute step 4, and we still couldn't get  this issue reproduce, does it make sense?\r\nRepro steps:\r\n1. Clone and check out the master branch of https://github.com/Rubjerg/Graphviz.NetWrapper\r\n2. Open the solution to restore the packages.\r\n3. Executing 'MSBuild Rubjerg.Graphviz.sln' on Developer Command Prompt for VS 2019.\r\n4. Executing 'packages\\nunit.consolerunner\\3.12.0\\tools\\nunit3-console.exe'.\r\n5. Executing 'git clean -dfx'.\r\n6. Change the solution file.\r\n7. Repeat step 2, 3 and 4.\r\n![image](https://user-images.githubusercontent.com/87402472/135246893-1191b0bf-e0d0-44ff-9592-ede089b0a602.png)\r\n",
        "createdAt": "2021-09-29T10:55:43Z",
        "author": {
          "login": "v-codyguan"
        }
      },
      {
        "body": "@v-codyguan It looks like you forgot to pass the test.dll to the testrunner. The full test command of step 4 should be:\r\n\r\n```\r\npackages\\nunit.consolerunner\\3.12.0\\tools\\nunit3-console.exe Rubjerg.Graphviz.Test\\bin\\x64\\Debug\\net48\\Rubjerg.Graphviz.Test.dll\r\n```\r\n\r\nOtherwise your steps look fine. I just repro'd with version `16.11.1+3e40a09f8`.",
        "createdAt": "2021-10-07T07:13:35Z",
        "author": {
          "login": "chtenb"
        }
      },
      {
        "body": "Hi @chtenb thank you for sharing! We can reproduce this issue and contact our engineer in time. Thanks!",
        "createdAt": "2021-10-08T03:03:59Z",
        "author": {
          "login": "v-codyguan"
        }
      },
      {
        "body": "Hi @BenVillalobos We verified this issue on 16.8.6 with MSBuild 16.8.3+39993bd9d and 16.11.4 with 16.11.1+3e40a09f8, this issue reproduced after passing the test.dll to the testrunner in step 4. Could you help to take a look? If you need repro machine, please feel free to contact us!\r\n![Actual](https://user-images.githubusercontent.com/87402472/136492583-089a1dd8-4ed5-4a6c-a95c-c4ec51c9c3b7.png)\r\n\r\n",
        "createdAt": "2021-10-08T03:16:29Z",
        "author": {
          "login": "v-codyguan"
        }
      },
      {
        "body": "This one's a doozy. I don't fully understand the issue here, but I'm fairly certain it has to do with incremental builds. Marking as `needs-attention` for bug triage meeting.\r\n\r\nnote to self: Relevant path where the DLL's need to exist: `Graphviz.NetWrapper\\Rubjerg.Graphviz.Test\\bin\\x64\\Debug\\net48`\r\n\r\nSide note: Passing `/graph` to your msbuild invocation should resolve the issue. It did for me",
        "createdAt": "2021-11-04T18:09:15Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "> Side note: Passing /graph to your msbuild invocation should resolve the issue. It did for me\r\n\r\nInteresting, I didn't know about that parameter. Any reason why that isn't on by default? And can Visual Studio pass it as well?",
        "createdAt": "2021-11-05T09:09:24Z",
        "author": {
          "login": "chtenb"
        }
      },
      {
        "body": "> Any reason why that isn't on by default?\r\n\r\nI don't know the details, just that there are many reasons unfortunately\r\n\r\nYou should be able to set up Command Line Arguments in the properties of your project. You could specify `/graph` there.",
        "createdAt": "2022-03-09T23:52:43Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "Dropping some context on this before it all disappears: Judging by the following symptoms:\r\n\r\n- Changing order of build causes a failure\r\n- /graph fixes it\r\n- A build output isn't present at the right time\r\n\r\nIt's gotta be a build ordering issue, or that a certain project isn't copying the bits to the right place where another project may have been doing that (this is controlled by ReferenceOutputAssembly (see https://github.com/dotnet/msbuild/issues/7986 for notes on that).\r\n\r\nSo this could be a transitive reference issue, which I'm not too sure of a good solution for.\r\n\r\nI think the simplest solution here is for your test project to reference your vcxproj and set `ReferenceOutputAssembly=true` for it so it can copy the output dll to the right place. This shouldn't cause overbuilds.\r\n\r\nAiring out another workaround, you can create a target in your test project that looks for your cpp dll and copies it to where it needs to be in order for this test to run.\r\n\r\nSorry this one took a while to get back to \ud83d\ude05",
        "createdAt": "2022-11-17T19:28:59Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "Thanks for coming back to this! Unfortunately the two workarounds you proposed are not more convenient for me than using a project order in the solution that works. Having all dependent projects reference this C++ project or add a custom target is unfeasible for large solutions and generally undesirable for a project that is meant to be pretty much plug-and-play.\r\n\r\n> So this could be a transitive reference issue, which I'm not too sure of a good solution for.\r\n\r\nBased on my anecdotal experience with build problems I'd definitely think so. Transitive copying behavior (or the lack thereof) has always caused headaches in my projects, especially when C++ projects were involved. \r\n\r\nI hoped that I had provided a tangible problem in this area with this github issue + example project, for which the solution or workaround hopefully could be made an example of for how to solve this nagging problem once and for all :)",
        "createdAt": "2022-11-21T16:19:15Z",
        "author": {
          "login": "chtenb"
        }
      },
      {
        "body": "See if https://github.com/dotnet/msbuild/issues/9709 is related",
        "createdAt": "2024-02-03T04:04:43Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "Tested this issue with MSBuild main branch merged https://github.com/dotnet/msbuild/pull/10836. Still has the error occasionally ----> \"System.DllNotFoundException : Unable to load DLL 'gvc.dll': The specified module could not be found\" when change the project order in solution Rubjerg.Graphviz.sln\n![Image](https://github.com/user-attachments/assets/77a0a4aa-75b5-4d3a-a649-4e7a3847e35f)\nFollowing the step 2 to step 4 at the first time\n![Image](https://github.com/user-attachments/assets/ed6c1efe-1c2c-4f18-b889-49e5a2700d40)\n",
        "createdAt": "2024-10-30T02:22:52Z",
        "author": {
          "login": "JaynieBai"
        }
      },
      {
        "body": "Discussed offline - next steps:\n* Collect binlogs of a build of a success and failed case\n* Attach the binlogs to this bug\n* Try to see if there is a difference between the two binlogs in how they copy the missing dll (gvc.dll)\n* Put your findings (even if they are inconclusive) here, ping team for more help if needed",
        "createdAt": "2025-01-02T09:21:18Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "This is success build log[msbuildSuccess.binlog.txt](https://github.com/user-attachments/files/18345322/msbuildSuccess.binlog.txt)\n\nAfter changed the solution based on [this reproduction scenario](https://github.com/Rubjerg/Graphviz.NetWrapper/pull/33/files) and generated the failed binlog.\n[msbuildFail.binlog.txt](https://github.com/user-attachments/files/18345326/msbuildFail.binlog.txt)\n\nThe differences are None items in the project Rubjerg.Graphviz don't include the binaries (including gvc.dll) generated form native project.\n\n![Image](https://github.com/user-attachments/assets/a61a99e8-0cbe-4701-8210-3f1497265da4)\n",
        "createdAt": "2025-01-08T09:59:15Z",
        "author": {
          "login": "JaynieBai"
        }
      },
      {
        "body": "Hello, building on the work by @JaynieBai and thanks to pointers from @JanKrivanek I have prepared a fix pr for the original repository. This I did because I believe that this isn't a bug per-se, just a weird and somewhat poorly documented behavior of MSBuild.\n\nFor the completeness sake I'm copying a part of my analysis included in the PR:\n\nBasically the issue is that if the item isn't within a target, it is resolved during Evaluation phase - e.g. as soon as the project file is [loaded into the MSBuild](https://learn.microsoft.com/en-us/visualstudio/msbuild/build-process-overview?view=vs-2022), but ProjectReference that is setting up the project dependency ordering is a Target so this happens:\n\n - MSBuild first loads a project (including evaluation) as specified by the .sln file\nthis is affected by the original project ordering change that resulted in the build failing\n - Then it evaluates the targets related to project references, [see here](https://github.com/dotnet/msbuild/blob/main/documentation/ProjectReference-Protocol.md).\n   -specifically ResolveProjectReferences target\n - this builds the referenced projects - however the item is already processed by this point, resulting in an empty copy\n\nBy moving the item into a custom target and forcing order by setting AfterTargets, the files are moved correctly. Tests pass.\n\nWhile I'm not completely sure I got everything correct, this is the conclusion I arrived after going through the MSBuildism blogpost, crosschecking with MSBuild documentation and experimenting on my machine.\nIt might be worth updating the documentation somewhere, if anyone has an idea where, it would be nice (since this behavior is a confluence of several different places)",
        "createdAt": "2025-01-09T11:49:41Z",
        "author": {
          "login": "SimaTian"
        }
      }
    ]
  }
}