{
  "number": 771,
  "title": "MSBuild redistribution",
  "body": "I'm almost entirely sure, this is not the right place to put this, but I didn't really have any better ideas so here goes:\n\nI'm currently working on a project that uses the MSBuild DLLs to analyze sln/csproj files and I was wondering what the recommended way to redistribute them is. Is it ok if I just include them in the NuGet packages/ZIP files of my releases? Are there any licensing issues with that?\n\nI know an alternative would be to require my users to install the MSBuild tools, but I would require MSBuild 14.0 and some of my users are worried that installing the newer MSBuild version could mess up their builds (they still use VS13/MSBuild 12.0).\n\nThanks in advance!\n",
  "state": "CLOSED",
  "createdAt": "2016-07-10T16:08:27Z",
  "updatedAt": "2024-02-21T17:27:12Z",
  "closedAt": "2019-04-05T14:58:23Z",
  "author": {
    "login": "chrischu"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "(with the caveat that I\u2019m not a lawyer)\n\nThe answer depends\u2026\n\nIIRC both Visual Studio and the Build Tools package are governed by EULAs that do not grant redistribution rights of the binaries or packages. \n\nHowever, the open source binaries are governed by a different license; https://github.com/Microsoft/msbuild/blob/master/LICENSE.\n\nWe will soon publish official Nuget packages. @cdmihai @Sarabeth-Jaffe-Microsoft please look into what license we should use in those packages.\n\n@chrischu you should be able to have your customers install the build tools package and it will happily live side by side. We'd be interested to hear otherwise.\n",
        "createdAt": "2016-08-02T19:35:41Z",
        "updatedAt": "2016-08-02T19:35:41Z",
        "author": {
          "login": "Craig-Campbell-MS"
        }
      },
      {
        "body": "@Sarabeth-Jaffe-Microsoft did we figure this out?",
        "createdAt": "2016-11-21T08:02:03Z",
        "updatedAt": "2016-11-21T08:02:03Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "The currently published MSBuild Nuget packages do not use the MIT license either.\r\nCan you comment on why that is the case?",
        "createdAt": "2019-04-03T21:45:33Z",
        "updatedAt": "2019-04-03T21:45:33Z",
        "author": {
          "login": "shartte"
        }
      },
      {
        "body": "Due to these licensing issues JetBrains created their own distributable bundle - https://blog.jetbrains.com/dotnet/2018/04/13/introducing-jetbrains-redistributable-msbuild/\r\n\r\nWhat kind of projects are you analyzing? as long as they don't need VS-specific build tooling (Database projects, classic WPF, test projects using Microsoft Fakes) you should be fine with the .NET Core SDK installed. [Buildalyzer](https://github.com/daveaglick/Buildalyzer) can get most of that wiring set up for you.\r\n\r\nBut yeah build tooling redistribution and usage is complicated.. e.g. you can only use the Build Tools if you have a Visual Studio license. Which is fun because the node.js optionally chains in the 2017 build tools to be able to compile C++ bindings for some nom packages (libsass for example).\r\nSooo.. as long as you these npm packages are open source, one could theoretically argue that you would be entitled to a VS Community license for that operation (but note that this needs more than just MSBuild, but also the VC++ toolchain).",
        "createdAt": "2019-04-04T21:16:00Z",
        "updatedAt": "2019-04-04T21:17:06Z",
        "author": {
          "login": "dasMulli"
        }
      },
      {
        "body": "Yes, we don't need any VS specific tooling. But we'd like to bundle it since we use mono as the backend and not .NET core. We might just end up building our own MSBuild packages for this purpose.",
        "createdAt": "2019-04-04T21:22:26Z",
        "updatedAt": "2019-04-04T21:22:26Z",
        "author": {
          "login": "shartte"
        }
      },
      {
        "body": "Btw the mono distribution also bundles SDKs for building SDK-style projects (`<Project Sdk=\"Microsoft.NET.Sdk\">`) which is kind of useful.. (but I think there's also an SDK resolver in it that looks for newer .NET Core SDK installs)",
        "createdAt": "2019-04-04T21:32:07Z",
        "updatedAt": "2019-04-04T21:32:07Z",
        "author": {
          "login": "dasMulli"
        }
      },
      {
        "body": "The 16.1 packages (prerelease; currently available from [the MyGet feed](https://dotnet.myget.org/gallery/msbuild)) are licensed with the MIT expression, as of #4251.",
        "createdAt": "2019-04-05T14:58:22Z",
        "updatedAt": "2019-04-05T14:58:22Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}