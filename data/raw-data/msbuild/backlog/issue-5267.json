{
  "number": 5267,
  "title": "MSB4017 InternalLoggerException System.ArgumentNullException: Parameter \"projectProperty\" cannot be null.",
  "body": "Porting https://github.com/dotnet/runtime/issues/34820\r\n```\r\n2020-04-10T13:54:36.4464394Z Time Elapsed 00:02:01.94\r\n2020-04-10T13:54:36.4702588Z MSBUILD : error MSB4017: The build stopped unexpectedly because of an unexpected logger failure.\r\n2020-04-10T13:54:36.4708316Z Microsoft.Build.Exceptions.InternalLoggerException: The build stopped unexpectedly because of an unexpected logger failure.\r\n2020-04-10T13:54:36.4709785Z  ---> System.ArgumentNullException: Parameter \"projectProperty\" cannot be null.\r\n2020-04-10T13:54:36.4710517Z    at Microsoft.Build.Shared.ErrorUtilities.VerifyThrowArgumentNull(Object parameter, String parameterName, String resourceName)\r\n2020-04-10T13:54:36.4711180Z    at Microsoft.Build.Collections.CopyOnWritePropertyDictionary`1.Set(T projectProperty)\r\n2020-04-10T13:54:36.4711735Z    at Microsoft.Build.Execution.ProjectItemInstance.TaskItem.get_MetadataCollection()\r\n2020-04-10T13:54:36.4712263Z    at Microsoft.Build.Execution.ProjectItemInstance.TaskItem.CloneCustomMetadata()\r\n2020-04-10T13:54:36.4712784Z    at Microsoft.Build.Logging.BuildEventArgsWriter.Write(ITaskItem item)\r\n2020-04-10T13:54:36.4713290Z    at Microsoft.Build.Logging.BuildEventArgsWriter.WriteItems(IEnumerable items)\r\n2020-04-10T13:54:36.4713915Z    at Microsoft.Build.Logging.BinaryLogger.Write(BuildEventArgs e)\r\n2020-04-10T13:54:36.4714445Z    at Microsoft.Build.BackEnd.Logging.EventSourceSink.RaiseAnyEvent(Object sender, BuildEventArgs buildEvent)\r\n2020-04-10T13:54:36.4715224Z    --- End of inner exception stack trace ---\r\n2020-04-10T13:54:36.4716248Z    at Microsoft.Build.Exceptions.InternalLoggerException.Throw(Exception innerException, BuildEventArgs e, String messageResourceName, Boolean initializationException, String[] messageArgs)\r\n2020-04-10T13:54:36.4717058Z    at Microsoft.Build.BackEnd.Logging.EventSourceSink.RaiseAnyEvent(Object sender, BuildEventArgs buildEvent)\r\n2020-04-10T13:54:36.4717714Z    at Microsoft.Build.BackEnd.Logging.EventSourceSink.RaiseAnyEvent(Object sender, BuildEventArgs buildEvent)\r\n2020-04-10T13:54:36.5134290Z ##[error](NETCORE_ENGINEERING_TELEMETRY=Build) Build failed (exit code '1').\r\n```\r\nthis occurred with `/__w/1/s/.dotnet/sdk/5.0.100-preview.4.20202.8/MSBuild.dll` on Android.\r\n\r\nThis would presumably include the change made to temporarily patch https://github.com/microsoft/msbuild/issues/4322\r\n\r\nIt seems there is some concurrent read/write going on in the dictionary here. It's obviously a copy-on-write dictionary -- should the \"write\" have been forced, before the logging thread gets hold of it @rainersigwald ?",
  "state": "OPEN",
  "createdAt": "2020-04-11T00:04:12Z",
  "updatedAt": "2024-02-21T16:29:34Z",
  "closedAt": null,
  "author": {
    "login": "danmoseley"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "KirillOsenkov"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "@KirillOsenkov  in case this is relevant to the binary logger",
        "createdAt": "2020-04-11T05:06:47Z",
        "updatedAt": "2020-04-11T05:06:47Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "I pulled the binlog from the Libraries Android x86 Debug build and the MSBuild version is: `MSBuild version = \"16.6.0-preview-20173-01+2d82e1a86\"`\r\n\r\nThis version does contain @ViktorHofer fix from https://github.com/microsoft/msbuild/pull/4355/files, however the fix is ineffective because it doesn't surround this call to CloneCustomMetadata:\r\nhttps://github.com/microsoft/msbuild/blob/2f58c1427384aaf012d616ae12849e7d9b5c0f10/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs#L600\r\n\r\n",
        "createdAt": "2020-04-11T05:28:56Z",
        "updatedAt": "2020-04-11T05:28:56Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "Note that the stack in https://github.com/microsoft/msbuild/issues/4322 is different:\r\n\r\n```\r\nSystem.NullReferenceException: Object reference not set to an instance of an object.\r\n   at System.Collections.Generic.Dictionary`2.FindEntry(TKey key)\r\n   at System.Collections.Generic.Dictionary`2.TryGetValue(TKey key, TValue& value)\r\n   at Microsoft.Build.Collections.CopyOnWritePropertyDictionary`1.get_Item(String name)\r\n   at Microsoft.Build.Execution.ProjectItemInstance.TaskItem.GetMetadataEscaped(String metadataName)\r\n   at Microsoft.Build.Execution.ProjectItemInstance.TaskItem.GetMetadata(String metadataName)\r\n   at Microsoft.Build.Logging.BuildEventArgsWriter.Write(ITaskItem item)\r\n```\r\n\r\nwhereas the stack here is:\r\n```\r\nSystem.ArgumentNullException: Parameter \"projectProperty\" cannot be null.\r\nMicrosoft.Build.Shared.ErrorUtilities.VerifyThrowArgumentNull(Object parameter, String parameterName, String resourceName)\r\nMicrosoft.Build.Collections.CopyOnWritePropertyDictionary`1.Set(T projectProperty)\r\nMicrosoft.Build.Execution.ProjectItemInstance.TaskItem.get_MetadataCollection()\r\nMicrosoft.Build.Execution.ProjectItemInstance.TaskItem.CloneCustomMetadata()\r\nMicrosoft.Build.Logging.BuildEventArgsWriter.Write(ITaskItem item)\r\n```\r\n\r\nI think our stack can actually happen when `metadatum` being passed to `Set()` here is null:\r\nhttps://github.com/microsoft/msbuild/blob/2f58c1427384aaf012d616ae12849e7d9b5c0f10/src/Build/Instance/ProjectItemInstance.cs#L1081",
        "createdAt": "2020-04-11T05:34:23Z",
        "updatedAt": "2020-04-11T05:34:23Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "For this case I suggest https://github.com/microsoft/msbuild/pull/5271 as a temporary measure. My understanding is that it's very intermittent, so this plugs the leak and buys us more time to investigate.\r\n\r\nOr likely just kill CopyOnWriteDictionary with prejudice as we've been apparently planning for a while now ;)\r\n\r\nThe real question is how is that metadatum ever null? Should we perhaps add more checks upstream to prevent null from ever being there?",
        "createdAt": "2020-04-11T05:39:25Z",
        "updatedAt": "2020-04-11T05:39:25Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "From inspecting both places I don't see how an element in metadata could be null, other than a race condition (CopyOnWriteDictionary being written to or resized while it's being read).\r\n\r\nOverall COWDictionary is not memory efficient, not threadsafe and looks clumsy. I'm pretty sure this is one of those cases where when we replace it with immutable collections the bug will disappear and we'll never really know what the problem was.",
        "createdAt": "2020-04-11T05:53:32Z",
        "updatedAt": "2020-04-11T05:53:32Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "> CopyOnWriteDictionary being written to or resized while it's being read\r\n\r\nI\u2019m guessing that\u2019s what\u2019s happening. Is this collection expected to be written concurrently? If it is not then changing to a concurrent collection seems like masking the real issue (on top of adding that catch). ConcurrentDictionary is not small or cheap necessarily. ",
        "createdAt": "2020-04-11T21:34:11Z",
        "updatedAt": "2020-04-11T21:34:11Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "We were thinking Immutable, not Concurrent. This would enable atomic updates and lock-free thread safety.",
        "createdAt": "2020-04-11T21:58:33Z",
        "updatedAt": "2020-04-11T21:58:33Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "Ah - I misread \ud83d\ude42",
        "createdAt": "2020-04-11T22:50:02Z",
        "updatedAt": "2020-04-11T22:50:02Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "Yeah, switching to Immutable is a) a direct conceptual replacement, b) a better-designed implementation memory and safety-wise, and c) nontrivial because these things sometimes cross AppDomains and thus need to be binaryformatter serializable. I got stuck on the latter the last time I took a crack at it but I think I know how to do it now and may give it a try again shortly.",
        "createdAt": "2020-04-13T14:28:53Z",
        "updatedAt": "2020-04-13T14:28:53Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}