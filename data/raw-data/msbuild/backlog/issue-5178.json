{
  "number": 5178,
  "title": "InitialTargets cannot reference a target from a PackageReference .targets file",
  "body": "### Steps to reproduce\r\n- Use or migrate a project with/to PackageReference (as opposed to package.config)\r\n- Reference a NuGet package that provides a .targets file which defines a `Target`\r\n- Reference that target in your Project tag's InitialTargets e.g. `<Project ToolsVersion=\"15.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\" InitialTargets=\"MyTarget\">`, where `MyTarget` is the target defined in the package.\r\n\r\n### Expected behavior\r\nMSBuild should run the `MyTarget` target as part of initial targets\r\n\r\n### Actual behavior\r\nMSBuild cannot find the `MyTarget` target . This, however, works fine with package.config type projects.\r\n\r\n`error MSB4057: The target \"MyTarget\" does not exist in the project.`\r\n\r\n### Environment data\r\n`msbuild /version` output: `16.4.0.56107`\r\n\r\nOS info: `Windows 10 18362.657`\r\n\r\nIf applicable, version of the tool that invokes MSBuild: `Visual Studio 2019`\r\n",
  "state": "CLOSED",
  "createdAt": "2020-03-14T16:41:17Z",
  "updatedAt": "2024-02-21T17:04:41Z",
  "closedAt": "2020-03-25T16:01:45Z",
  "author": {
    "login": "alexis-"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Discussion"
  },
  "comments": {
    "nodes": [
      {
        "body": "The difference between `package.config` and `ProjectReference` here is that restore happens _inside MSBuild_ in ProjectReference-driven builds. That means that they must be valid projects both with and without restore--because running Restore means running targets in the project.\r\n\r\nIn your case, before restore there's no `MyTarget`, because it's defined in the package. But MSBuild expects `InitialTargets` to exist, so it errors.\r\n\r\nCan you hook the new target to a point very early in the build instead of as an `InitialTargets`? For example `BeforeTargets=\"BeforeBuild\"`? That also helps in some other circumstances where `InitialTargets` causes problems, for example Visual Studio design-time builds (where you may or may not be surprised to run the new target).",
        "createdAt": "2020-03-16T21:51:44Z",
        "updatedAt": "2020-03-16T21:51:44Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Thanks for the detailed explanation, that is insightful. The issue here is that in my case, `MyTarget` defines variables in a `PropertyGroup` which are then used in the `Condition` attribute of some of my `<Project>`'s Target.\r\n\r\nAn example would be a `Target` which reads the .suo to extract the currently selected Solution configuration to make it available as a MSBuild variable (I think they are called macro ? Apologies if I got the terminology wrong).\r\n\r\nAs far as I could infer, the `Condition` clause is verified before running `BeforeTargets` or `DependsOnTargets`, which leaves no opportunity for the macro to be defined.",
        "createdAt": "2020-03-16T22:31:08Z",
        "updatedAt": "2020-03-16T22:31:08Z",
        "author": {
          "login": "alexis-"
        }
      },
      {
        "body": "> to make it available as a MSBuild variable (I think they are called macro ? Apologies if I got the terminology wrong).\r\n\r\nThere are two types of MSBuild variables, properties (single-valued, strings) and items (multi-valued, can be annotated with metadata). \"Macro\" is sometimes used in Visual Studio contexts but honestly I don't understand why.\r\n\r\n> As far as I could infer, the `Condition` clause is verified before running `BeforeTargets` or `DependsOnTargets`, which leaves no opportunity for the macro to be defined.\r\n\r\nThat's true, but there are many targets defined in common.targets that unconditionally run pretty early in the build. Is `BeforeTargets=\"BeforeBuild\"` too late for you? That should be before any of the load-bearing targets, which generally hook onto `CoreBuild`.\r\n\r\nExtremely detailed docs on target ordering: https://docs.microsoft.com/visualstudio/msbuild/target-build-order?view=vs-2019#determine-the-target-build-order",
        "createdAt": "2020-03-17T12:05:46Z",
        "updatedAt": "2020-03-17T12:05:46Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I had not completely understood the implications of your proposed solution. I have implemented it today, and my issue was indeed solved. Even better, my targets will now be run automatically after adding my NuGet package, without manually editing the `InitialTargets`.\r\n\r\nThank you for your assistance and for the educative process.",
        "createdAt": "2020-03-17T13:14:41Z",
        "updatedAt": "2020-03-17T13:14:41Z",
        "author": {
          "login": "alexis-"
        }
      }
    ]
  }
}