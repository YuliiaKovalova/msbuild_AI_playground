{
  "number": 6960,
  "title": "Allow Microsoft.CodeAnalysis.Collections to be updated by source-build so it isn't a prebuilt dependency",
  "body": "This version is not overridable by source-build:\r\n\r\nhttps://github.com/dotnet/msbuild/blob/15e80d52df3e877e5e9c5df6c3e2df65bf81873f/eng/Packages.props#L12\r\n\r\nThe package is source-only, so it *could* be put into SBRP as a text-only package, but it costs manual maintenance whenever a new version comes along. If we just let source-build upgrade it, msbuild can use the \"live\" version produced by roslyn.\r\n\r\nTo make the Microsoft build consistent with upgrades, it seems like it would make sense to also hook this package up to Maestro++ dependency flow, to get updates in the Microsoft build as well. I don't see anything in https://github.com/dotnet/msbuild/pull/6595 pointing out reasons this package *shouldn't* be auto-updated.\r\n\r\nMaking this change as a patch makes dotnet/msbuild build without prebuilts, locally.\r\n\r\n```diff\r\ndiff --git a/eng/Packages.props b/eng/Packages.props\r\nindex eb0144f9b..0f478634f 100644\r\n--- a/eng/Packages.props\r\n+++ b/eng/Packages.props\r\n@@ -9,7 +9,7 @@\r\n     <PackageReference Update=\"LargeAddressAware\" Version=\"1.0.5\" />\r\n     <PackageReference Update=\"Microsoft.Build.NuGetSdkResolver\" Version=\"$(NuGetBuildTasksVersion)\" />\r\n     <PackageReference Update=\"Microsoft.CodeAnalysis.Build.Tasks\" Version=\"$(MicrosoftNetCompilersToolsetVersion)\" />\r\n-    <PackageReference Update=\"Microsoft.CodeAnalysis.Collections\" Version=\"4.0.0-4.21379.20\" />\r\n+    <PackageReference Update=\"Microsoft.CodeAnalysis.Collections\" Version=\"$(MicrosoftCodeAnalysisCollectionsPackageVersion)\" />\r\n     <PackageReference Update=\"Microsoft.CodeQuality.Analyzers\" Version=\"3.3.0\" PrivateAssets=\"all\" />\r\n     <PackageReference Update=\"Microsoft.DotNet.GenAPI\" Version=\"2.1.0-prerelease-02404-02\" />\r\n     <PackageReference Update=\"Microsoft.DotNet.XUnitExtensions\" Version=\"$(MicrosoftDotNetXUnitExtensionsVersion)\" />\r\ndiff --git a/eng/Versions.props b/eng/Versions.props\r\nindex 7c66217f4..a356b7df0 100644\r\n--- a/eng/Versions.props\r\n+++ b/eng/Versions.props\r\n@@ -26,6 +26,7 @@\r\n   <!-- Production Dependencies -->\r\n   <PropertyGroup>\r\n     <SystemResourcesExtensionsPackageVersion>4.6.0</SystemResourcesExtensionsPackageVersion>\r\n+    <MicrosoftCodeAnalysisCollectionsPackageVersion>4.0.0-4.21379.20</MicrosoftCodeAnalysisCollectionsPackageVersion>\r\n   </PropertyGroup>\r\n   <!-- Toolset Dependencies -->\r\n   <PropertyGroup>\r\n```\r\n",
  "state": "CLOSED",
  "createdAt": "2021-10-14T16:23:02Z",
  "updatedAt": "2024-02-21T17:00:56Z",
  "closedAt": "2021-10-14T23:45:07Z",
  "author": {
    "login": "dagood"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "@sharwell is there any reason _not_ to also set up a subscription so we get the latest ~weekly?",
        "createdAt": "2021-10-14T19:26:12Z",
        "updatedAt": "2021-10-14T19:26:12Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "There is no compatibility assurances between releases. Roslyn is free to make changes including but not limited to:\r\n\r\n* API changes\r\n* Changes to LangVersion requirements\r\n* Changes to target framework requirements\r\n* Changes to project configuration requirements\r\n\r\nAutomated package substitution is (by design) not a supported scenario.",
        "createdAt": "2021-10-14T20:15:16Z",
        "updatedAt": "2021-10-14T20:15:48Z",
        "author": {
          "login": "sharwell"
        }
      },
      {
        "body": "More generally, source package substitution in source build is blanket disallowed, as it forces source build to produce outputs that do not match production. (If source build doesn't build the actual product from source, what's the point?)",
        "createdAt": "2021-10-14T20:17:31Z",
        "updatedAt": "2021-10-14T20:17:31Z",
        "author": {
          "login": "sharwell"
        }
      },
      {
        "body": "Filed https://github.com/dotnet/source-build/issues/2517 to add this particular version to SBRP instead.",
        "createdAt": "2021-10-14T23:45:07Z",
        "updatedAt": "2021-10-14T23:45:07Z",
        "author": {
          "login": "dagood"
        }
      },
      {
        "body": "> More generally, source package substitution in source build is blanket disallowed, as it forces source build to produce outputs that do not match production. (If source build doesn't build the actual product from source, what's the point?)\r\n\r\nIt's not disallowed in general. This is a challenge that source-build has been grappling with since day one. Not having to make changes is a goal, but the .NET SDK simply isn't designed to be able to reasonably build from source like other ecosystems' tools are.\r\n\r\nThe point is building an SDK with the minimal feature gap vs. the Microsoft-built SDK using a process that can deliver servicing releases on time.",
        "createdAt": "2021-10-15T16:51:06Z",
        "updatedAt": "2021-10-15T16:51:06Z",
        "author": {
          "login": "dagood"
        }
      }
    ]
  }
}