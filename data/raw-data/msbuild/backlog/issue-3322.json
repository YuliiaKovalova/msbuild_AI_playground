{
  "number": 3322,
  "title": "Option to exclude properties from /restore",
  "body": "Currently there is no option to exclude certain `/p` arguments from the restore (`/restore`) pass.\r\n`/restoreProperties` only allows to use a different set of global properties as arguments, and (de-facto) unsetting a property via `/rp:Foo=` has a different semantic than not passing a property during restore.\r\n\r\nI'm looking to remove [this hack](https://github.com/dotnet/cli/blob/508f902ed0d49891400a806e9b9785e5434d9789/src/dotnet/commands/RestoringCommand.cs#L73) from the CLI that removes arguments starting with a certain `-p:\u2026` prefix. If a proper way to exclude global properties during restore, this may even remove the need for a separate msbuild invocation when a propery to exclude is present.\r\n\r\nI'm thinking of `/noRestoreProperty:<n>`\r\n\r\n Is this appropriate? I'm willing to implement this myself but want to ask/discuss before submitting a PR :)",
  "state": "OPEN",
  "createdAt": "2018-05-17T05:15:18Z",
  "updatedAt": "2024-02-21T16:34:01Z",
  "closedAt": null,
  "author": {
    "login": "dasMulli"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "I'm a little worried about adding more command-line arguments to make this potentially more confusing.  The intent behind the `/restoreproperties` argument is to use different properties during restore vs build.  There is some precedent with the `GlobalPropertiesToRemove` attribute of the `<MSBuild />` task.  I'm interested to know what others think.",
        "createdAt": "2018-05-17T14:11:19Z",
        "updatedAt": "2018-05-17T14:11:19Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "Yeah `/rp` is a good feature for writing thought out msbuild calls / build scripts etc.\r\nHowever, this issue is more about the CLI scenario where the user can specify any arguments (e.g. to `dotnet build` / `dotnet test -f netcoreapp2.0`) and adding `/restore /noRestoreProperty:TargetFramework` would be a safe way to add auto-restore without needing to parse all arguments exactly the same way msbuild would to make sure it will restore without error (and similar to VS).",
        "createdAt": "2018-05-17T20:46:06Z",
        "updatedAt": "2018-05-17T20:46:06Z",
        "author": {
          "login": "dasMulli"
        }
      },
      {
        "body": "E.g. see this issue where the current behavior has confused a user https://github.com/dotnet/cli/issues/9340",
        "createdAt": "2018-05-24T05:12:55Z",
        "updatedAt": "2018-05-24T05:12:55Z",
        "author": {
          "login": "dasMulli"
        }
      }
    ]
  }
}