{
  "number": 10926,
  "title": "MSBuildNameIgnoreCaseComparer might be optimizable",
  "body": "tl;dr: I don't think we should change anything now but I did some perf investigation on `MSBuildNameIgnoreCaseComparer`.\n\nhttps://github.com/dotnet/msbuild/blob/0cce533e766000b2f6218332447c38ab84985070/src/Shared/MSBuildNameIgnoreCaseComparer.cs#L13-L20\n\n. . . but does that stuff hold true any more? There's been a bit of change since (checks notes) 2010, when it was introduced.\n\nI pulled a copy into a tiny BDN application, seeded with ~30k actual comparisons sourced from a real-world .NET 9 build.\n\nInstrumentation to collect that:\n\n```diff\ndiff --git a/src/Shared/MSBuildNameIgnoreCaseComparer.cs b/src/Shared/MSBuildNameIgnoreCaseComparer.cs\nindex 9517b5f2646..23b11f824c5 100644\n--- a/src/Shared/MSBuildNameIgnoreCaseComparer.cs\n+++ b/src/Shared/MSBuildNameIgnoreCaseComparer.cs\n@@ -3,6 +3,8 @@\n \n using System;\n using System.Collections.Generic;\n+using System.IO;\n+\n using Microsoft.Build.Shared;\n \n #nullable disable\n@@ -19,6 +21,9 @@ namespace Microsoft.Build.Collections\n     [Serializable]\n     internal class MSBuildNameIgnoreCaseComparer : IConstrainedEqualityComparer<string>, IEqualityComparer<string>\n     {\n+        private StreamWriter EqualsLogger = new($@\"S:\\temp\\MSBuildNameIgnoreCaseComparerEquals{Guid.NewGuid()}.txt\");\n+        private StreamWriter HashLogger = new($@\"S:\\temp\\MSBuildNameIgnoreCaseComparerHash{Guid.NewGuid()}.txt\");\n+\n         /// <summary>\n         /// The processor architecture on which we are running, but default it will be x86\n         /// </summary>\n@@ -44,6 +49,8 @@ namespace Microsoft.Build.Collections\n         /// </summary>\n         public bool Equals(string compareToString, string constrainedString, int start, int lengthToCompare)\n         {\n+            EqualsLogger.Write($\"{compareToString}\\u001F{constrainedString}\\u001F{start}\\u001F{lengthToCompare}\\u001E\");\n+\n             if (lengthToCompare < 0)\n             {\n                 ErrorUtilities.ThrowInternalError(\"Invalid lengthToCompare '{0}' {1} {2}\", constrainedString, start, lengthToCompare);\n@@ -116,6 +123,8 @@ namespace Microsoft.Build.Collections\n                 return 0; // per BCL convention\n             }\n \n+            EqualsLogger.Write($\"{obj}\\u001F{start}\\u001F{length}\\u001E\");\n+\n             if ((s_runningProcessorArchitecture != NativeMethodsShared.ProcessorArchitectures.IA64)\n                 && (s_runningProcessorArchitecture != NativeMethodsShared.ProcessorArchitectures.ARM))\n             {\n```\n\nBenchmark program:\n[MSBuildNameIgnoreCaseComparer_Bench.zip](https://github.com/user-attachments/files/17603376/MSBuildNameIgnoreCaseComparer_Bench.zip)\n\n## Benchmark results\n\n### 13900K desktop\n\n```\nBenchmarkDotNet v0.14.0, Windows 11 (10.0.26120.2200)\nUnknown processor\n.NET SDK 9.0.100-rc.2.24474.11\n  [Host]               : .NET 9.0.0 (9.0.24.47305), X64 RyuJIT AVX2\n  .NET 9.0             : .NET 9.0.0 (9.0.24.47305), X64 RyuJIT AVX2\n  .NET Framework 4.7.2 : .NET Framework 4.8.1 (4.8.9032.0), X64 RyuJIT VectorSize=256\n```\n\n| Method                | Job                  | Runtime              | Mean     | Error     | StdDev    | Ratio | RatioSD |\n|---------------------- |--------------------- |--------------------- |---------:|----------:|----------:|------:|--------:|\n| MSBuildNameIgnoreCase | .NET 9.0             | .NET 9.0             | 9.845 ns | 0.1375 ns | 0.1286 ns |  1.00 |    0.02 |\n| BuiltIn               | .NET 9.0             | .NET 9.0             | 9.147 ns | 0.1347 ns | 0.1194 ns |  0.93 |    0.02 |\n|                       |                      |                      |          |           |           |       |         |\n| MSBuildNameIgnoreCase | .NET Framework 4.7.2 | .NET Framework 4.7.2 | 9.166 ns | 0.1201 ns | 0.1064 ns |  1.00 |    0.02 |\n| BuiltIn               | .NET Framework 4.7.2 | .NET Framework 4.7.2 | 9.506 ns | 0.1478 ns | 0.1382 ns |  1.04 |    0.02 |\n\n### Dev box\n\n```\nBenchmarkDotNet v0.14.0, Windows 11 (10.0.26100.2033) (Hyper-V)\nAMD EPYC 7763, 1 CPU, 16 logical and 8 physical cores\n.NET SDK 9.0.100-rc.2.24474.11\n  [Host]               : .NET 9.0.0 (9.0.24.47305), X64 RyuJIT AVX2\n  .NET 9.0             : .NET 9.0.0 (9.0.24.47305), X64 RyuJIT AVX2\n  .NET Framework 4.7.2 : .NET Framework 4.8.1 (4.8.9277.0), X64 RyuJIT VectorSize=256\n```\n\n| Method                | Job                  | Runtime              | Mean     | Error    | StdDev   | Ratio | RatioSD |\n|---------------------- |--------------------- |--------------------- |---------:|---------:|---------:|------:|--------:|\n| MSBuildNameIgnoreCase | .NET 9.0             | .NET 9.0             | 17.50 ns | 0.342 ns | 0.512 ns |  1.00 |    0.04 |\n| BuiltIn               | .NET 9.0             | .NET 9.0             | 16.61 ns | 0.238 ns | 0.199 ns |  0.95 |    0.03 |\n|                       |                      |                      |          |          |          |       |         |\n| MSBuildNameIgnoreCase | .NET Framework 4.7.2 | .NET Framework 4.7.2 | 17.70 ns | 0.114 ns | 0.101 ns |  1.00 |    0.01 |\n| BuiltIn               | .NET Framework 4.7.2 | .NET Framework 4.7.2 | 19.12 ns | 0.146 ns | 0.122 ns |  1.08 |    0.01 |\n\n### macOS ARM64\n\n```\nBenchmarkDotNet v0.14.0, macOS Sequoia 15.1 (24B83) [Darwin 24.1.0]\nApple M3 Pro, 1 CPU, 12 logical and 12 physical cores\n.NET SDK 9.0.100-rc.2.24474.11\n  [Host]   : .NET 9.0.0 (9.0.24.47305), Arm64 RyuJIT AdvSIMD\n  .NET 9.0 : .NET 9.0.0 (9.0.24.47305), Arm64 RyuJIT AdvSIMD\n```\n\n| Method                | Mean      | Error     | StdDev    | Ratio | RatioSD |\n|---------------------- |----------:|----------:|----------:|------:|--------:|\n| MSBuildNameIgnoreCase |  8.007 ns | 0.0594 ns | 0.0527 ns |  1.00 |    0.01 |\n| BuiltIn               | 10.654 ns | 0.2028 ns | 0.1897 ns |  1.33 |    0.02 |\n\n### Codespace\n\n\u26a0\ufe0f `net8.0` because I'm lazy!\n\n```\nBenchmarkDotNet v0.14.0, Ubuntu 20.04.6 LTS (Focal Fossa) (container)\nAMD EPYC 7763, 1 CPU, 2 logical cores and 1 physical core\n.NET SDK 8.0.402\n  [Host]   : .NET 8.0.8 (8.0.824.36612), X64 RyuJIT AVX2\n  .NET 8.0 : .NET 8.0.8 (8.0.824.36612), X64 RyuJIT AVX2\n\nJob=.NET 8.0  Runtime=.NET 8.0  \n```\n\n| Method                | Mean     | Error    | StdDev   | Ratio | RatioSD |\n|---------------------- |---------:|---------:|---------:|------:|--------:|\n| MSBuildNameIgnoreCase | 17.85 ns | 0.424 ns | 1.182 ns |  1.00 |    0.09 |\n| BuiltIn               | 19.07 ns | 0.481 ns | 1.373 ns |  1.07 |    0.10 |\n\n## Conclusions\n\nSo that's not very convincing; maaybe we should consider using `OrdinalIgnoreCase` on Windows/.NET, but it's a big loss in other cases.\n\nI also poked around the same thing with `GetHashCode` with surprising results--I was hoping for a clean win on the case where we allocate a substring (since `string.GetHashCode(ReadOnlySpan<char>)` now exists) but we seem to do that quite rarely, averaging 5 bytes per call in the sample:\n\n[MSBuildNameIgnoreCaseComparer_Bench_with_hashes.zip](https://github.com/user-attachments/files/17603927/MSBuildNameIgnoreCaseComparer_Bench_with_hashes.zip)\n\n| Method                           | Runtime              | Mean       | Error     | StdDev    | Median     | Ratio | RatioSD | Gen0   | Allocated | Alloc Ratio |\n|--------------------------------- |--------------------- |-----------:|----------:|----------:|-----------:|------:|--------:|-------:|----------:|------------:|\n| MSBuildNameIgnoreCase_Hash       | .NET 9.0             |  5.6479 ns | 0.0579 ns | 0.0514 ns |  5.6519 ns | 0.696 |    0.01 |      - |         - |          NA |\n| OrdinalIgnoreCase_Hash_Substring | .NET 9.0             | 12.1174 ns | 0.1419 ns | 0.1328 ns | 12.1209 ns | 1.492 |    0.02 | 0.0002 |       5 B |          NA |\n| OrdinalIgnoreCase_Hash_Span      | .NET 9.0             | 11.3895 ns | 0.0930 ns | 0.0776 ns | 11.3921 ns | 1.403 |    0.02 |      - |         - |          NA |\n| MSBuildNameIgnoreCase_Hash       | .NET Framework 4.7.2 |  8.1208 ns | 0.0942 ns | 0.0881 ns |  8.1265 ns | 1.000 |    0.01 |      - |         - |          NA |\n| OrdinalIgnoreCase_Hash_Substring | .NET Framework 4.7.2 | 19.9626 ns | 0.1757 ns | 0.1643 ns | 19.9121 ns | 2.458 |    0.03 | 0.0007 |       5 B |          NA |\n\nWe can get rid of those allocations but at the cost of almost doubling the compute time, so I guess we can keep allocating sometimes.",
  "state": "OPEN",
  "createdAt": "2024-11-01T20:33:19Z",
  "updatedAt": "2025-06-02T08:26:42Z",
  "closedAt": null,
  "author": {
    "login": "rainersigwald"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "Area: Performance",
    "Priority:2",
    "triaged"
  ],
  "comments": {
    "nodes": []
  }
}