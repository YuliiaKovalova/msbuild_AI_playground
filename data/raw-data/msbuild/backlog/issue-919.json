{
  "number": 919,
  "title": "Project.GetItemProvenance(ProjectItem) does not return Operation.Update results",
  "body": "Have a project file with:\n\n```\n<Compile Include=\"**\\*.cs\" />\n<Compile Update=\"foo.cs\">\n  <Visible>false</Visible>\n</Compile>\n```\n\n`GetItemProvenance` returns the following:\n\n``` C#\nvar item = project.GetItemsByEvaluatedInclude(\"foo.cs\").First(); // Has DirectMetadata of \"Visible=false\"\nvar provenance1 = project.GetItemProvenance(item); // Contains only Glob entry\nvar provenance2 = project.GetItemProvenance(\"foo.cs\", \"Compile\") // Contains both Glob and Update\nbool provenance1.Count == provenance2.Count // false!\n```\n\nI would expect those two results to be the same.\n",
  "state": "CLOSED",
  "createdAt": "2016-08-18T22:55:55Z",
  "updatedAt": "2024-02-21T17:26:25Z",
  "closedAt": "2016-09-09T21:24:15Z",
  "author": {
    "login": "jviau"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "cdmihai"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "The `Project.GetItemProvenance(ProjectItem item)` overload only looks from its location (the ProjectItemElement that produced the ProjectItem) upwards. `Project.GetItemProvenance(string item, string itemType)` looks over all ProjectItemElements.\n\nThat's why provenance1 does not include the update but provenance2 does.\n\nThis behaviour is as defined in #732. Would you want to change the behaviour of the `ProjectItem` overload?  \n",
        "createdAt": "2016-08-18T23:55:47Z",
        "updatedAt": "2016-08-18T23:56:13Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "Flow sensitive behavior is fine, but I would think the Update tag would be included in that flow since it does affect the production of the ProjectItem. Is it possible to change the behavior to include the Update tag?\n",
        "createdAt": "2016-08-19T00:06:57Z",
        "updatedAt": "2016-08-19T00:06:57Z",
        "author": {
          "login": "jviau"
        }
      },
      {
        "body": "So basically make it flow insensitive, with `GetItemProvenance(item)` just calling into `GetItemProvenance(item.EvaluatedInclude, item.ItemType)`? That would make the code easier :)\n",
        "createdAt": "2016-08-19T16:35:25Z",
        "updatedAt": "2016-08-19T16:36:07Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "After an offline discussion we decided to change the `Project.GetItemProvenance(ProjectItem)` overload to only collect project item elements that would affect that project item.\n\nBellow is the new behaviour. `->` marks project items that provenance is called upon. `x` marks project item elements that are captured (besides the actual include element that produced the item itself).\n\n```\n->i\n  i\nx u\n  i\nx u\n```\n\n```\n  i\n->i\nx u\n  i\nx u\n```\n\n```\n  i\n  i\n  i\n  u\n->i\nx u\n```\n\nRemoves are not shown, since by definition they will not get found (Remove deletes the project items)\n",
        "createdAt": "2016-08-19T22:44:12Z",
        "updatedAt": "2016-08-19T22:44:12Z",
        "author": {
          "login": "cdmihai"
        }
      }
    ]
  }
}