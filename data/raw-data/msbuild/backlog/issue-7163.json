{
  "number": 7163,
  "title": "How can we reload the project object if the underlying project file was overwritten outside of the msbuild API?",
  "body": "### Issue Description\r\nI have a situation where there is a `Project` object and the respective project file is restored from a backup string using `File.WriteAllText` API. My goal is to reload the `Project` object.\r\n\r\n### Steps to Reproduce\r\nRun the following code:\r\n\r\nThe project file:\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>net5.0</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.Build\" Version=\"16.11.0\">\r\n      <ExcludeAssets>runtime</ExcludeAssets>\r\n    </PackageReference>\r\n    <PackageReference Include=\"Microsoft.Build.Locator\" Version=\"1.4.1\" />\r\n    <PackageReference Include=\"Microsoft.Build.Utilities.Core\" Version=\"16.11.0\">\r\n      <ExcludeAssets>runtime</ExcludeAssets>\r\n    </PackageReference>\r\n  </ItemGroup>\r\n\r\n  <ItemGroup>\r\n    <None Update=\"Test\\XMLFile1.xml\">\r\n      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>\r\n    </None>\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\r\n\r\n**Test\\XMLFile1.xml**\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <OutputType>Library</OutputType>\r\n    <TargetFramework>net472</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <Reference Include=\"System.IO.Compression\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\n**Program.cs**\r\n```\r\nusing Microsoft.Build.Evaluation;\r\nusing Microsoft.Build.Locator;\r\nusing System;\r\nusing System.IO;\r\nusing System.Linq;\r\nusing System.Reflection;\r\n\r\nclass Program\r\n{\r\n    static void Main()\r\n    {\r\n        MSBuildLocator.RegisterDefaults();\r\n        Console.WriteLine(Environment.GetEnvironmentVariable(\"MSBUILD_EXE_PATH\"));\r\n        Run();\r\n    }\r\n\r\n    static void Run()\r\n    {\r\n        var projectFile = Path.GetFullPath(Assembly.GetExecutingAssembly().Location + \"\\\\..\\\\Test\\\\XMLFile1.xml\");\r\n        var backup = File.ReadAllText(projectFile);\r\n\r\n        var p = GetProject(\"Init\", projectFile);\r\n\r\n        var item = p.GetItems(\"Reference\").First(o => !o.IsImported);\r\n        p.RemoveItem(item);\r\n        p.Save();\r\n        p.ProjectCollection.UnloadProject(p);\r\n\r\n        p = GetProject(\"After modify\", projectFile);\r\n\r\n        File.WriteAllText(projectFile, backup);\r\n        p.ProjectCollection.UnloadProject(p);\r\n\r\n        GetProject(\"After rollback\", projectFile);\r\n    }\r\n\r\n    static Project GetProject(string prompt, string projectFile)\r\n    {\r\n        var p = new Project(projectFile);\r\n        var count = p.GetItems(\"Reference\").Count(o => !o.IsImported);\r\n        Console.WriteLine(prompt + \" : \" + count);\r\n        return p;\r\n    }\r\n}\r\n```\r\n\r\nCompile and run.\r\n\r\n### Expected Behavior\r\n\r\nAfter the file is restored the new `Project` object reflects the new file content. I.e. the output should show **After rollback : 0**\r\n\r\n### Actual Behavior\r\nHere is the actual output:\r\n```\r\nC:\\Program Files\\dotnet\\sdk\\5.0.403\\MSBuild.dll\r\nInit : 1\r\nAfter modify : 0\r\nAfter rollback : 0\r\n```\r\n\r\n### Analysis\r\nUnloading the project from the collection does not seem to affect the ProjectRootElementCache, which seems to hold on to the `Xml` of the project.\r\n",
  "state": "OPEN",
  "createdAt": "2021-12-20T20:56:58Z",
  "updatedAt": "2024-01-31T08:19:26Z",
  "closedAt": null,
  "author": {
    "login": "MarkKharitonov"
  },
  "labels": [
    "bug",
    "backlog",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "One more note - calling `ProjectCollection.UnloadAllProjects` does clear the cache, but is it possible to avoid unloading all the projects?",
        "createdAt": "2021-12-20T21:48:13Z",
        "updatedAt": "2021-12-20T21:48:13Z",
        "author": {
          "login": "MarkKharitonov"
        }
      },
      {
        "body": "So I believe that when you call UnloadProject, it discards _strong_ references from the cache, so if you call GC.Collect afterwards, it should eliminate the weak references and let the external overwrite take precedence.\r\n\r\nIf that doesn't work, we might be able to add an overload that lets you specify that you want it fully taken out of the cache and not just unloaded.",
        "createdAt": "2021-12-23T20:35:07Z",
        "updatedAt": "2021-12-23T20:35:07Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "I actually tried this approach and although it is also my understanding that it should have worked - it does not. Just calling `GC.Collect()` after the second `p.ProjectCollection.UnloadProject(p);` has no effect.",
        "createdAt": "2021-12-23T20:50:20Z",
        "updatedAt": "2021-12-23T20:50:20Z",
        "author": {
          "login": "MarkKharitonov"
        }
      },
      {
        "body": "Hmm...I'm wondering if it's something unrelated to the cache. I made a custom MSBuild with:\r\n```C#\r\nProjectRootElementCache.DiscardAnyWeakReference(ProjectRootElementCache.TryGet(project.ProjectFileLocation.File));\r\nProjectRootElementCache.DiscardStrongReferences();\r\nProjectRootElementCache.DiscardImplicitReferences();\r\n```\r\n\r\nwhen you run UnloadProject and also added GC.Collect() among a couple other tweaks, and it still printed out 1/0/0. I'm not sure what else it would be, though.",
        "createdAt": "2021-12-23T21:16:40Z",
        "updatedAt": "2021-12-23T21:16:40Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "Team triage: Have you tried using MarkDirty? That indicates that we need to take in an update. Then you can trigger ReevaluateIfNecessary manually. You shouldn't have to mess with the ProjectRootElementCache.",
        "createdAt": "2022-01-06T17:26:13Z",
        "updatedAt": "2022-01-06T17:26:13Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "@Forgind - could you provide an exact code snippet to use? Thank you.",
        "createdAt": "2022-01-06T20:55:45Z",
        "updatedAt": "2022-01-06T20:56:00Z",
        "author": {
          "login": "MarkKharitonov"
        }
      },
      {
        "body": "I brought this up again in bug triage because I tried adding the code snippet I mentioned previously and couldn't get it to work. No dice. Might need to debug into MSBuild to see what's really going on.",
        "createdAt": "2022-01-14T14:53:14Z",
        "updatedAt": "2022-01-14T14:53:14Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "Team triage: we are adding this issue as candidate task for user story #8447. The initial investigation done by @Forgind was not successful, so it might take some time to figure out the proper way to do that, fix bugs and update the documentation accordingly  if needed. ",
        "createdAt": "2023-05-09T15:33:01Z",
        "updatedAt": "2023-05-09T15:33:01Z",
        "author": {
          "login": "AR-May"
        }
      }
    ]
  }
}