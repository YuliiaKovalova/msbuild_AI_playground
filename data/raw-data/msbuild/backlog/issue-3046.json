{
  "number": 3046,
  "title": "Warnings are not reported for repeated builds",
  "body": "### Steps to reproduce\r\n\r\n1. `dotnet new classlib`\r\n2. Change Class1.cs to:\r\n\r\n    ```c#\r\n    class C\r\n    {\r\n        async void M() {}\r\n    }\r\n    ```\r\n\r\n3. `dotnet build`\r\n4. `dotnet build`\r\n\r\n### Expected  behavior\r\n\r\nThe second `dotnet build` prints the CS1998 warning, just like the first one.\r\n\r\n### Actual behavior\r\n\r\nThe second `dotnet build` does not print any warnings:\r\n\r\n```\r\n> dotnet build\r\nMicrosoft (R) Build Engine version 15.6.82.30579 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 87,92 ms for C:\\code\\tmp\\hwapp\\hwapp.csproj.\r\nClass1.cs(3,16): warning CS1998: This async method lacks 'await' operators and will run synchronously. Consider using the 'await' operator to await non-blocking API calls, or 'await Task.Run(...)' to do CPU-bound work on a background thread. [C:\\code\\tmp\\hwapp\\hwapp.csproj]\r\n  hwapp -> C:\\code\\tmp\\hwapp\\bin\\Debug\\netstandard2.0\\hwapp.dll\r\n\r\nBuild succeeded.\r\n\r\nClass1.cs(3,16): warning CS1998: This async method lacks 'await' operators and will run synchronously. Consider using the 'await' operator to await non-blocking API calls, or 'await Task.Run(...)' to do CPU-bound work on a background thread. [C:\\code\\tmp\\hwapp\\hwapp.csproj]\r\n    1 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:00:02.37\r\n> dotnet build\r\nMicrosoft (R) Build Engine version 15.6.82.30579 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 81,94 ms for C:\\code\\tmp\\hwapp\\hwapp.csproj.\r\n  hwapp -> C:\\code\\tmp\\hwapp\\bin\\Debug\\netstandard2.0\\hwapp.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:00:01.96\r\n```\r\n\r\nApparently, this happens because targets that are up to date are not re-run. Maybe warnings from previous builds could be saved somewhere and reported again when the target is skipped because it's up to date?\r\n\r\n### Environment data\r\n`dotnet --info` output:\r\n\r\n.NET Command Line Tools (2.1.300-preview2-008251)\r\n\r\nProduct Information:\r\n Version:            2.1.300-preview2-008251\r\n Commit SHA-1 hash:  94fd3fd392\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.300-preview2-008251\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.1.0-preview2-26131-06\r\n  Build    : b13a0d5c331f374afd35ded57b9a4b4ab128864c\r\n\r\n---\r\n\r\nOriginally reported as https://github.com/dotnet/cli/issues/8722.",
  "state": "OPEN",
  "createdAt": "2018-03-04T16:50:17Z",
  "updatedAt": "2024-02-21T16:34:42Z",
  "closedAt": null,
  "author": {
    "login": "svick"
  },
  "labels": [
    "Area: Debuggability",
    "blocked",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Backlog"
  },
  "comments": {
    "nodes": [
      {
        "body": "As mentioned in dotnet/cli#8722:\r\n\r\n> I think you want to use the `--no-incremental` option, i.e.:\r\n> \r\n> ```\r\n> dotnet build --no-incremental\r\n> ```\r\n> \r\n> This does, however, mean a full rebuild.",
        "createdAt": "2018-04-16T18:39:12Z",
        "updatedAt": "2018-04-16T18:39:12Z",
        "author": {
          "login": "petermorlion"
        }
      },
      {
        "body": "The pure-MSBuild way to achieve `dotnet build --no-incremental` is `msbuild /target:Rebuild` which generally just means `Clean;Build`.\r\n\r\nThis is an entirely reasonable request but MSBuild's architecture makes it extremely difficult: the MSBuild engine itself does not have any state store to keep the previous build's warnings in. Its decision to run or not run a target can only look at the current state of files on disk in the current project's environment.\r\n\r\nWe've discussed building a place to store that sort of state before (for example #701) and always come to the conclusion that it was too big/risky a change for too little gain. There is some discussion of the complexity involved in that issue.\r\n",
        "createdAt": "2018-04-16T19:02:31Z",
        "updatedAt": "2018-04-16T19:02:31Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I do not know of any build toolchains that store warning states, nor any reason why we should expect warnings to be repeated if there is not cause to rebuild the file.\r\nI think this issue should be closed for the same reason as https://github.com/dotnet/msbuild/issues/5066",
        "createdAt": "2021-03-16T00:58:01Z",
        "updatedAt": "2021-03-16T00:58:01Z",
        "author": {
          "login": "pchilds"
        }
      },
      {
        "body": "This seems like it should be moved to the docs repo and documented. I ran into this same UX and was confused.",
        "createdAt": "2021-07-26T17:59:01Z",
        "updatedAt": "2021-07-26T17:59:01Z",
        "author": {
          "login": "richlander"
        }
      }
    ]
  }
}