{
  "number": 5096,
  "title": "How to make preprocessor condition work with project name in Shared Project?",
  "body": "I'm sorry if this is not the right place for my question, but I have spent a few days and no result.\r\nShared project is cool thing. And it's cool that shared code can know types from normal projects. But sometimes it leads to: missing type error. \r\nSo the question is: can I make `ConditionalAttribute` or `#if - #endif` to exclude some code for some projects?",
  "state": "CLOSED",
  "createdAt": "2020-01-31T00:22:31Z",
  "updatedAt": "2024-02-21T17:05:16Z",
  "closedAt": "2020-11-10T00:10:12Z",
  "author": {
    "login": "Denis535"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Discussion"
  },
  "comments": {
    "nodes": [
      {
        "body": "I made `Directory.Build.targets` with `DefineConstants`. \r\n\r\n```\r\n<Project>\r\n\r\n  <Target Name=\"DefineConstants\" AfterTargets=\"PrepareForBuild\">\r\n    <PropertyGroup>\r\n      <DefineConstants>$(DefineConstants);$(MSBuildProjectName.Replace('.', '_'))</DefineConstants>\r\n      <DefineConstants Condition=\" '%(PackageReference.Identity)' == 'nunit' \">$(DefineConstants);NUnit</DefineConstants>\r\n    </PropertyGroup>\r\n  </Target>\r\n\r\n  <Target Name=\"PrintProjectInfo\" AfterTargets=\"DefineConstants\">\r\n    <Message Text=\"========== ========== ==========\" Importance=\"high\" />\r\n    <Message Text=\"ProjectName: $(MSBuildProjectName)\" Importance=\"high\" />\r\n    <Message Text=\"PackageReferences: @(PackageReference)\" Importance=\"high\" />\r\n    <Message Text=\"DefineConstants: $(DefineConstants)\" Importance=\"high\" />\r\n    <Message Text=\"========== ========== ==========\" Importance=\"high\" />\r\n  </Target>\r\n\r\n</Project>\r\n```",
        "createdAt": "2020-02-02T23:04:11Z",
        "updatedAt": "2020-11-10T00:09:49Z",
        "author": {
          "login": "Denis535"
        }
      },
      {
        "body": "Instead of debugging by adding targets to print out information, try creating binary logs and using MSBuild Structured Log Viewer to inspect them.  See here: http://msbuildlog.com/",
        "createdAt": "2020-02-10T21:52:52Z",
        "updatedAt": "2020-02-10T21:52:52Z",
        "author": {
          "login": "dsplaisted"
        }
      }
    ]
  }
}