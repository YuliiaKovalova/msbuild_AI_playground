{
  "number": 5982,
  "title": "Expose OperatingSystem APIs as intrinsic property functions",
  "body": "These are new in .NET 5.0: https://docs.microsoft.com/en-us/dotnet/api/system.operatingsystem?view=net-5.0\r\n\r\nThey expose methods for all the common operating systems like `OperatingSystem.IsWindows()` but also still support the API where you pass in a string: `OperatingSystem.IsOSPlatform(string platform)`.\r\n\r\nThe new APIs are easier to understand so we should consider exposing them.",
  "state": "CLOSED",
  "createdAt": "2020-12-21T16:43:59Z",
  "updatedAt": "2024-02-21T17:02:01Z",
  "closedAt": "2023-07-06T07:35:31Z",
  "author": {
    "login": "akoeplinger"
  },
  "labels": [
    "Good First Issue",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "jrdodds"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Hi,\r\nI would like to take this up if still available.\r\nI am a newbie to MSBuild and appreciate any pointers to fix this issue\r\n\r\nThanks.",
        "createdAt": "2021-04-28T13:09:36Z",
        "updatedAt": "2021-04-28T13:09:36Z",
        "author": {
          "login": "vijaya-lakshmi-venkatraman"
        }
      },
      {
        "body": "@vijaya-lakshmi-venkatraman sure, I assigned the issue to you so you can give it a try :)\r\n\r\nI think adding an entry similar to `RuntimeInformation` here should be enough: https://github.com/dotnet/msbuild/blob/5b9216a75e98e19eba84e04a5f30bd35a68f317a/src/Build/Resources/Constants.cs#L379\r\n\r\nYou'll probably need to wrap it in some ifdef, e.g. `FEATURE_OS_APIS`, since the API is only available from .NET 5+, so add the define here in a **new** PropertyGroup for net5.0 here: https://github.com/dotnet/msbuild/blob/5b9216a75e98e19eba84e04a5f30bd35a68f317a/src/Directory.BeforeCommon.targets#L127\r\n\r\nAlso tests would be good :)",
        "createdAt": "2021-04-30T12:56:13Z",
        "updatedAt": "2021-04-30T12:56:13Z",
        "author": {
          "login": "akoeplinger"
        }
      },
      {
        "body": "Thank you for assigning the issue.\r\nI will add a new PropertyGroup as below:\r\n```\r\n <PropertyGroup Condition=\"'$(TargetFramework)' == 'net5.0'\">\r\n    <DefineConstants>$(DefineConstants);FEATURE_OS_APIS</DefineConstants>\r\n  </PropertyGroup>\r\n```\r\nPlease can you explain a bit on the change related to adding an entry similar to RuntimeInformation. \r\nI am afraid I did not get that part :(",
        "createdAt": "2021-05-05T11:41:37Z",
        "updatedAt": "2021-05-05T11:41:37Z",
        "author": {
          "login": "vijaya-lakshmi-venkatraman"
        }
      },
      {
        "body": "It would look something like this:\r\n\r\n```diff\r\n                        var fileType = new Tuple<string, Type>(null, typeof(File));\r\n                        var runtimeInformationType = new Tuple<string, Type>(null, typeof(RuntimeInformation));\r\n                        var osPlatformType = new Tuple<string, Type>(null, typeof(OSPlatform));\r\n+#if FEATURE_OS_APIS\r\n+                       var operatingSystemType = new Tuple<string, Type>(null, typeof(OperatingSystem));\r\n+#endif\r\n\r\n                        // Make specific static methods available (Assembly qualified type names are *NOT* supported, only null which means mscorlib):\r\n                        availableStaticMethods.TryAdd(\"System.Environment::ExpandEnvironmentVariables\", environmentType);\r\n@@ -378,6 +381,9 @@ private static void InitializeAvailableMethods()\r\n                        availableStaticMethods.TryAdd(\"Microsoft.Build.Utilities.ToolLocationHelper\", new Tuple<string, Type>(\"Microsoft.Build.Utilities.ToolLocationHelper, Microsoft.Build.Utilities.Core, Version=\" + MSBuildConstants.CurrentAssemblyVersion + \", Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\", null));\r\n                        availableStaticMethods.TryAdd(\"System.Runtime.InteropServices.RuntimeInformation\", runtimeInformationType);\r\n                        availableStaticMethods.TryAdd(\"System.Runtime.InteropServices.OSPlatform\", osPlatformType);\r\n+#if FEATURE_OS_APIS\r\n+                       availableStaticMethods.TryAdd(\"System.OperatingSystem\", operatingSystemType);\r\n+#endif\r\n\r\n                        s_availableStaticMethods = availableStaticMethods;\r\n                    }\r\n```",
        "createdAt": "2021-05-07T12:25:24Z",
        "updatedAt": "2021-05-07T12:25:31Z",
        "author": {
          "login": "akoeplinger"
        }
      },
      {
        "body": "@vijaya-lakshmi-venkatraman do you still plan to work on this issue or should we put it back into the backlog?",
        "createdAt": "2022-08-10T16:34:35Z",
        "updatedAt": "2022-08-10T16:34:35Z",
        "author": {
          "login": "akoeplinger"
        }
      },
      {
        "body": "Hi @akoeplinger \r\nyes, I have the changes locally but been trying to figure out reg CLA.\r\nHoping to merge and raise a PR soon.",
        "createdAt": "2022-08-22T07:08:46Z",
        "updatedAt": "2022-08-22T07:08:46Z",
        "author": {
          "login": "vijaya-lakshmi-venkatraman"
        }
      },
      {
        "body": "Hi @akoeplinger \r\nDo you know how to get the Corporate CLA signed for contributions?",
        "createdAt": "2022-09-05T10:19:38Z",
        "updatedAt": "2022-09-05T10:19:38Z",
        "author": {
          "login": "vijaya-lakshmi-venkatraman"
        }
      },
      {
        "body": "@vijaya-lakshmi-venkatraman if you open a PR then you'll see a GitHub check with the CLA link and instructions on how to sign it.",
        "createdAt": "2022-09-05T10:40:50Z",
        "updatedAt": "2022-09-05T10:40:50Z",
        "author": {
          "login": "akoeplinger"
        }
      },
      {
        "body": "It'd be my manager that'd sign the CLA.\r\nSo can I request him to sign on the CLA link?",
        "createdAt": "2022-09-06T05:03:15Z",
        "updatedAt": "2022-09-06T05:03:15Z",
        "author": {
          "login": "vijaya-lakshmi-venkatraman"
        }
      },
      {
        "body": "@vijaya-lakshmi-venkatraman as engineers, we unfortunately can't offer legal advice beyond the CLA bot instructions.",
        "createdAt": "2022-09-06T06:58:20Z",
        "updatedAt": "2022-09-06T06:58:20Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "From what I remember when signing the CLA five years ago before I started working for Microsoft you just had to acknowledge that your employer is fine with the contribution, i.e. you're responsible for checking with them but no separate signature required for the CLA. Not sure if it has changed since then so best to check with legal if you're unsure.",
        "createdAt": "2022-09-06T12:38:25Z",
        "updatedAt": "2022-09-06T12:38:25Z",
        "author": {
          "login": "akoeplinger"
        }
      },
      {
        "body": "@akoeplinger @vijaya-lakshmi-venkatraman @danmoseley \r\n\r\nIs anyone currently working on this? \r\n\r\nThe above collaboration makes sense for this specific issue, these Operating Systems APIs are only available in .NET 5.0 so adding the const `FEATURE_OS_APIS` only when it is available in .NET 5.0 and defining those ifdefs in the constant file to ensure it only gets added to the dictionary at that point in time.",
        "createdAt": "2022-10-22T01:51:54Z",
        "updatedAt": "2022-10-22T03:09:53Z",
        "author": {
          "login": "ghost"
        }
      },
      {
        "body": "Hi @WingZer0o, Sorry for the delay in response\r\nI could not sort the CLA issue yet.\r\nI see you have already raised a PR so I have unassigned myself from the issue. \r\n",
        "createdAt": "2022-12-01T10:49:32Z",
        "updatedAt": "2022-12-01T10:49:32Z",
        "author": {
          "login": "vijaya-lakshmi-venkatraman"
        }
      },
      {
        "body": "It seems like efforts on this issue ended without completion. If this work should still be done, please assign the issue to me. Thanks",
        "createdAt": "2023-06-20T23:24:47Z",
        "updatedAt": "2023-06-20T23:24:47Z",
        "author": {
          "login": "jrdodds"
        }
      },
      {
        "body": "@jrdodds I've assigned the issue to you, thanks for giving it a try \ud83d\ude04 \r\n\r\nYou can look at https://github.com/dotnet/msbuild/pull/8082 for the unfinished PR which had some good discussion.",
        "createdAt": "2023-06-21T08:12:27Z",
        "updatedAt": "2023-06-21T08:13:30Z",
        "author": {
          "login": "akoeplinger"
        }
      },
      {
        "body": "In the unfinished PR, there is a discussion about making the static methods available in net472 builds of MSBuild. From the discussion:\r\n\r\n> I think the easiest way to implement this would be to create a new type named `System.OperatingSystem` here in our codebase, with `#if` around it so it only compiles for .NET Framework.\r\n\r\nThe `System.OperatingSystem` type was in .Net Framework 1.1. The static methods were added in .Net 5.0. We can't add a type (as was done for `SupportedOSPlatform`), because the type exists in net472. The type is a `public sealed class` and can't be extended as a `partial`.\r\n\r\nTwo possible options:\r\n- Don't support net472. The `System.OperatingSystem` static methods will be available in net7.0 builds only.\r\n- Don't expose the `System.OperatingSystem` static methods and instead add a set of `[MSBuild]::` intrinsic functions that either call the `System.OperatingSystem` static methods or have an alternate implementation for net472.\r\n\r\nAre there other options?\r\n\r\nAlso, net472 builds can make the assumption that the operating system can only be Windows. What should netstandard2.0 builds do?",
        "createdAt": "2023-06-21T20:57:53Z",
        "updatedAt": "2023-06-21T20:57:53Z",
        "author": {
          "login": "jrdodds"
        }
      },
      {
        "body": "> * Don't support net472. The `System.OperatingSystem` static methods will be available in net7.0 builds only.\r\n\r\nI do not like this; new functionality should be cross-platform.\r\n\r\n> * Don't expose the `System.OperatingSystem` static methods and instead add a set of `[MSBuild]::` intrinsic functions that either call the `System.OperatingSystem` static methods or have an alternate implementation for net472.\r\n\r\nWe already have `[MSBuild]::IsOsPlatform` and `::IsOSUnixLike`, so this doesn't seem worth doing to me.\r\n\r\n> The `System.OperatingSystem` type was in .Net Framework 1.1. The static methods were added in .Net 5.0. We can't add a type (as was done for `SupportedOSPlatform`), because the type exists in net472. The type is a `public sealed class` and can't be extended as a `partial`.\r\n\r\nThis is all true, but we can tweak the idea: we don't necessarily have to dispatch to the real type when a project says `$([System.OperatingSystem]::IsWindows())`. We could treat that specially (in the .NET Framework MSBuild) and dispatch to a private type that reimplements it.\r\n\r\n> Also, net472 builds can make the assumption that the operating system can only be Windows. What should netstandard2.0 builds do?\r\n\r\n\"Anything that compiles.\" There is no scenario where `netstandard2.0` MSBuild assemblies are used at runtime; they're API-surface-only, and this shouldn't affect the public API surface.",
        "createdAt": "2023-06-21T21:09:45Z",
        "updatedAt": "2023-06-21T21:09:45Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> we don't necessarily have to dispatch to the real type when a project says `$([System.OperatingSystem]::IsWindows())`. We could treat that specially (in the .NET Framework MSBuild) and dispatch to a private type that reimplements it.\r\n\r\nCool. Is there an example of how that is done?\r\n\r\n**Update:** I think I see how it works.",
        "createdAt": "2023-06-21T21:58:38Z",
        "updatedAt": "2023-06-22T03:40:25Z",
        "author": {
          "login": "jrdodds"
        }
      }
    ]
  }
}