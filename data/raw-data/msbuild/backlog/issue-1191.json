{
  "number": 1191,
  "title": "Telemetry in MSBuild",
  "body": "# Overview\n\nGiven the changes in .NET Core tooling that are happening with the move to MSBuild, there needs to be a plan on how to collect telemetry when the move is complete, as the CLI tools will not be the primary (and only) way to build .NET Core applications on all supported platforms.\u00a0 \n\nTherefore, MSBuild needs to develop a telemetry pipeline (keeping in mind existing CLI & Visual Studio telemetry pipelines) to gather necessary data to improve our product. \n# Design\n\nWe need to abstract away the telemetry pipeline in MSBuild so that build events can be logged to wherever we need at runtime. Therefore, our proposal is for consumers to receive telemetry as a build event so that MSBuild knows nothing about the actual implementation.  \n\nAnyone can produce telemetry within MSBuild via our telemetry API.  We will have a method in the `LoggingService`, a method in the `TaskLoggingHelper` and a task for use within a target.  MSBuild will also add telemetry to interesting code paths.\n\nMSBuild will log events to the pipeline and the pipeline will need to add additional properties such as session or user IDs.\n# Proposal\n\nFor the first iteration, we'll plumb the telemetry events.  Consumers will need to implement a `Logger` class to receive the events so they can be uploaded.\n\nThe next iteration would be to sync up with Visual Studio about their telemetry pipeline, develop a logger for MSBuild, and then when using MSBuild under Visual Studio the telemetry will go to their pipeline.\n## Using it as a task using properties\n\n``` XML\n<Project>\n\n  <UsingTask\n    TaskName=\"Telemetry\"\n    AssemblyFile=\"Microsoft.Build.Tasks.Core.dll\"\n     />\n\n  <Target Name=\"MyTarget\">\n\n    <Telemetry EventName=\"MyEvent\" EventData=\"a=semicolon;delimited=list;of=properties\" />\n\n  </Target>\n\n\n</Project>\n```\n",
  "state": "CLOSED",
  "createdAt": "2016-10-12T21:46:30Z",
  "updatedAt": "2024-02-21T17:25:13Z",
  "closedAt": "2016-10-25T19:05:05Z",
  "author": {
    "login": "jeffkl"
  },
  "labels": [
    "needs-design",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "jeffkl"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "@Microsoft/msbuild-maintainers please review and comment\n",
        "createdAt": "2016-10-13T21:20:08Z",
        "updatedAt": "2016-10-13T21:20:08Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "Who are the intended producers and receivers of this telemetry? It sounds like this is focused on SDK authors, but I (selfishly) would like internal telemetry as well, for things like \"average eval time per project\".\n\nWe talked about session- and project-wrapping information; is that expressed here in any way?\n\nI'd also like to see at least one example showing this information flowing through to an existing telemetry system to prove out the concept further.\n",
        "createdAt": "2016-10-13T22:30:07Z",
        "updatedAt": "2016-10-13T22:30:07Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@blackdwarf will want to keep an eye on this\n",
        "createdAt": "2016-10-13T22:30:34Z",
        "updatedAt": "2016-10-13T22:30:34Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald \n\n> Who are the intended producers and receivers of this telemetry? It sounds like this is focused on SDK authors, but I (selfishly) would like internal telemetry as well, for things like \"average eval time per project\".\n\nAnyone will be able to call a public static method that we'll create to trace telemetry.  That includes us, as well as any target or task library.  The \"receivers\" will be more limited and in this first iteration it the data will only be uploaded when running under `dotnet.exe` to the DotNet CLI back-end.  I've updated the design.\n\n> We talked about session- and project-wrapping information; is that expressed here in any way?\n\nThanks for pointing that out, I've updated the design but we'll need to brainstorm with the dotnet CLI folks on how that data should be passed to us.  @blackdwarf thoughts?\n\n> I'd also like to see at least one example showing this information flowing through to an existing telemetry system to prove out the concept further.\n\nDo you mean like a code sample or a live demo?\n",
        "createdAt": "2016-10-14T15:28:12Z",
        "updatedAt": "2016-10-14T15:28:12Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "The type with the static method would be in `Microsoft.Build.Framework`, so all of our code can reference it. It will probably make use of `BuildEnvironmentHelper` to find the telemetry adapters (if the telemetry dlls are dropped near the msbuild dlls).\n",
        "createdAt": "2016-10-14T18:32:08Z",
        "updatedAt": "2016-10-14T18:32:08Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "Who would be responsible for adding the session ID to the events? The telemetry plugin adapters, or MSBuild's end point?\n\nSession here means one invocation of msbuild right? Since we do multi-process builds, the session ID will have to be unique across processes over one build instance\n",
        "createdAt": "2016-10-14T18:33:22Z",
        "updatedAt": "2016-10-14T18:36:18Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "What happens if the user does not want telemetry? How do the upstream event collectors signal that to msbuild? Maybe the `ITelemetryPipeline` could also have an `IsOn` method.\n",
        "createdAt": "2016-10-14T18:39:43Z",
        "updatedAt": "2016-10-14T18:39:59Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "Beyond the session ID (which identifies a build instance?), should there also be a user / machine ID, so we can see how often people build and such?\n",
        "createdAt": "2016-10-14T18:47:31Z",
        "updatedAt": "2016-10-14T18:47:31Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "> Who would be responsible for adding the session ID to the events? The telemetry plugin adapters, or MSBuild's end point?\n\nNow that I think about it, MSBuild won't really need to add the properties to the events.  It will just send the events upstream and the pipeline can add the properties!\n\n> What happens if the user does not want telemetry?\n\nTelemetry will be sent to the pipeline and the pipeline will determine if the telemetry should actually be uploaded.\n",
        "createdAt": "2016-10-17T16:55:57Z",
        "updatedAt": "2016-10-17T16:55:57Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "How extensible is this design for future telemetry work?\n\nEstimates on performance hits with this change?\n",
        "createdAt": "2016-10-17T21:45:33Z",
        "updatedAt": "2016-10-17T21:45:33Z",
        "author": {
          "login": "Sarabeth-Jaffe-Microsoft"
        }
      },
      {
        "body": "Some requirements / specs that might drive the extensibility design:\n- we need to be able to emit telemetry events from anywhere in the code (evaluation time + build time)\n- we may need to disambiguate events between projects (e.g., building a csproj with dependencies to other csprojes)\n- telemetry events from a multi proc build need to be the same as the telemetry events of the same build but without multiproc (except maybe for the additional events multiproc would generated (e.g. how many nodes were there, how many nodes it could connect to, statistics on info sent between nodes, etc))\n- some upstream callers might want telemetry turned off\n- some tools might want to \"taint\" all the telemetry events coming from a certain build instance / solution / project with a set of event metadata (like Azure publishing)\n- interaction with logging events. Probably all logger events need to also be telemetry events (target started, target ended, build started, build ended, etc)\n",
        "createdAt": "2016-10-17T23:42:28Z",
        "updatedAt": "2016-10-18T17:56:27Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "> How extensible is this design for future telemetry work?\n\nThe design is pretty basic so I'm hoping it will cover most needs.  Do you have any specific examples of future telemetry needs that might not work with the design?\n\n> Estimates on performance hits with this change?\n\nGood question.  I know that the CLI uses async methods for telemetry so it shouldn't slow anything down.  I think it's going to depend on the shear volume of events and the pipeline itself.\n",
        "createdAt": "2016-10-18T14:14:16Z",
        "updatedAt": "2016-10-18T14:14:16Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "Check out the PR for an early review...\n\n#1226 \n",
        "createdAt": "2016-10-21T04:17:19Z",
        "updatedAt": "2016-10-21T04:17:36Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "To receive telemetry events, loggers can subscribe to the `IEventSource.TelemetryLogged` event.\n",
        "createdAt": "2016-10-25T19:05:05Z",
        "updatedAt": "2016-10-25T19:05:05Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "Is there any documentation for this?",
        "createdAt": "2020-03-20T06:58:09Z",
        "updatedAt": "2020-03-20T06:58:09Z",
        "author": {
          "login": "JohnTortugo"
        }
      }
    ]
  }
}