{
  "number": 2275,
  "title": "dotnet does not generate fsproj.metaproj file, but build process seems to require it",
  "body": "_From @colinbowern on June 25, 2017 20:45_\n\n## Steps to reproduce\r\n1. Install .NET Core on WSL Bash per the [.NET Core Step-by-Step instructions](https://www.microsoft.com/net/core#linuxubuntu)\r\n2. Run through steps to get started with F# on the CLI through to completing \"Writing a Class Library\" on the [Get started with F# with the .NET CLI](https://docs.microsoft.com/en-us/dotnet/fsharp/tutorials/getting-started/getting-started-command-line) documentation\r\n3. Run \"dotnet build\" \r\n\r\n## Expected  behavior\r\nClass library compiles\r\n\r\n## Actual behavior\r\nFailed with error MSB4025: The project file could not be loaded. Could not find file '/mnt/c/Users/colinb/Projects/TestProject/src/Library/Library.fsproj.metaproj\r\n\r\nNo tooling along the way creates a metaproj file. This file does not exist.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n> .NET Command Line Tools (1.0.4)\r\n> \r\n> Product Information:\r\n>  Version:            1.0.4\r\n>  Commit SHA-1 hash:  af1e6684fd\r\n> \r\n> Runtime Environment:\r\n>  OS Name:     ubuntu\r\n>  OS Version:  16.04\r\n>  OS Platform: Linux\r\n>  RID:         ubuntu.16.04-x64\r\n>  Base Path:   /usr/share/dotnet/sdk/1.0.4\r\n\r\n\r\n\r\n\r\n\r\n\n\n_Copied from original issue: dotnet/cli#7000_",
  "state": "CLOSED",
  "createdAt": "2017-07-10T21:27:08Z",
  "updatedAt": "2024-02-21T17:18:10Z",
  "closedAt": "2017-08-10T19:18:14Z",
  "author": {
    "login": "rainersigwald"
  },
  "labels": [
    "bug",
    ".NET Core",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "_From @dmbarbour on June 29, 2017 16:16_\n\nI'm seeing the same problem with any attempt to create a solution. Steps to reproduce:\r\n\r\n    mkdir tmp; cd tmp\r\n    mkdir A; cd A; dotnet new classlib -lang f#; cd ..\r\n    dotnet new sln\r\n    dotnet sln add A/A.fsproj\r\n    dotnet build\r\n\r\nError at this point is: `/tmp/A/A.fsproj.metaproj : error MSB4025: The project file could not be loaded. Could not find file '/tmp/A/A.fsproj.metaproj'`. Same dotnet version as @colinbowern, above.\r\n\r\n**Note:** this issue does not appear with C# projects, only for the F# projects. Further, the `dotnet restore` from the toplevel solution seems to ignore all the F# projects and only restores C# projects.\r\n",
        "createdAt": "2017-07-10T21:27:09Z",
        "updatedAt": "2017-07-10T21:27:09Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "_From @dmbarbour on June 29, 2017 23:29_\n\nI have a workaround: I'm just using a toplevel project instead of a toplevel solution.",
        "createdAt": "2017-07-10T21:27:09Z",
        "updatedAt": "2017-07-10T21:27:09Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "_From @livarcocc on July 10, 2017 21:23_\n\n@rainersigwald Is this something else that msbuild needs to address? Why would it fail to generate the metaproj for a solution with fsprojs? Are we setting the wrong project type, maybe?",
        "createdAt": "2017-07-10T21:27:10Z",
        "updatedAt": "2017-07-10T21:27:10Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "EDIT: Ignore this! Info is superseded.\r\n\r\n@colinbowern I can't reproduce this with your instructions. I ran into #2022, but after applying the workaround for that I can successfully build the solution.\r\n\r\n@dmbarbour's repro does error for me though.\r\n\r\n## Workarounds\r\n1. Don't use the .sln to build; instead build at your \"overall\" project or use a top-level \"traversal\" project that points to your projects (as mentioned https://github.com/Microsoft/msbuild/issues/2275#issuecomment-314252491).\r\n\r\n2. Set the environment variable `MSBuildEmitSolution=1`. This causes MSBuild to emit the files to disk (for debugging), but then they exist and can be found. I don't recommend checking them in.\r\n\r\nExample, after applying the workaround for #2022.\r\n\r\n```ShellSession\r\n$ MSBuildEmitSolution=1 dotnet build tmp.sln\r\nMicrosoft (R) Build Engine version 15.1.1012.6693\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  A -> /mnt/s/work/fs/tmp/A/bin/Debug/netstandard1.6/A.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:00:10.29\r\n```",
        "createdAt": "2017-07-12T20:16:02Z",
        "updatedAt": "2017-07-12T20:33:50Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Sorry, that was bad analysis! \r\n\r\nI'm not sure I can reproduce this issue. I see a different error (`warning MSB4046`) when following @dmbarbour's repro steps.\r\n\r\nMy issue is a (bizarre!) manifestation of #2022. After changing relative-path slash directions in the .sln file, I can build successfully.\r\n\r\nThe problem isn't that the `.metaproj` doesn't exist (it does, in memory); it's that its contents only emit the error:\r\n\r\n```xml\r\n  <Target Name=\"Build\" Condition=\"'$(CurrentSolutionConfigurationContents)' != ''\">\r\n    <Warning Text=\"Error reading project file &quot;A\\A.fsproj&quot;: Could not find file %27/mnt/s/work/fs/temp/A\\A.fsproj%27.\" Code=\"MSB4046\" HelpKeyword=\"MSBuild.SolutionParseErrorReadingProject\" />\r\n  </Target>\r\n  <Target Name=\"Clean\" Condition=\"'$(CurrentSolutionConfigurationContents)' != ''\">\r\n    <Warning Text=\"Error reading project file &quot;A\\A.fsproj&quot;: Could not find file %27/mnt/s/work/fs/temp/A\\A.fsproj%27.\" Code=\"MSB4046\" HelpKeyword=\"MSBuild.SolutionParseErrorReadingProject\" />\r\n  </Target>\r\n  <Target Name=\"Rebuild\" Condition=\"'$(CurrentSolutionConfigurationContents)' != ''\">\r\n    <Warning Text=\"Error reading project file &quot;A\\A.fsproj&quot;: Could not find file %27/mnt/s/work/fs/temp/A\\A.fsproj%27.\" Code=\"MSB4046\" HelpKeyword=\"MSBuild.SolutionParseErrorReadingProject\" />\r\n  </Target>\r\n  <Target Name=\"Publish\" Condition=\"'$(CurrentSolutionConfigurationContents)' != ''\">\r\n    <Warning Text=\"Error reading project file &quot;A\\A.fsproj&quot;: Could not find file %27/mnt/s/work/fs/temp/A\\A.fsproj%27.\" Code=\"MSB4046\" HelpKeyword=\"MSBuild.SolutionParseErrorReadingProject\" />\r\n  </Target>\r\n```\r\n\r\nThat's what the solution-parser does when it [can't open the project](https://github.com/Microsoft/msbuild/blob/9b32575a0efe2e7a4388f1e4a440827cd372a793/src/Build/Construction/Solution/SolutionProjectGenerator.cs#L1775-L1785).\r\n\r\nI also don't seem to be able to reproduce the `MSB4025` using a .NET Core SDK 2.0.0-preview build on macOS.\r\n\r\nIf you see this (@colinbowern especially), I'd like to know more about how your project is set up. A zip file might also be useful.",
        "createdAt": "2017-07-12T20:48:33Z",
        "updatedAt": "2017-07-12T20:48:33Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Closing due to lack of response. If you see this and can give more details about your code, please comment and we can reopen.",
        "createdAt": "2017-08-10T19:18:14Z",
        "updatedAt": "2017-08-10T19:18:14Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I was also having this problem when I noticed that when the project was added to the solution file it got added as `hello\\hello.fsproj` instead of `hello/hello.fsproj`.\r\nAfter manually changing this I was able to build from the sln.",
        "createdAt": "2017-08-10T21:42:16Z",
        "updatedAt": "2017-08-10T21:42:16Z",
        "author": {
          "login": "teves-castro"
        }
      },
      {
        "body": "@rainersigwald  I'm also getting this error on Ubuntu on `dotnet build`. `dotnet restore` works fine:\r\n\r\n> error MSB4025: The project file could not be loaded. Could not find file '***.fsproj.metaproj'\r\n\r\nHowever, it is not consistent. I managed to get it working on one repo by recreating the `.sln` file using `SDK2`. However, trying to fix another repo the same way did not help. Manually switching from \\ to / in the project path fixes it. But don't know if it will work on Windows anymore now.\r\n\r\nSo, for one solution \\ in paths is ok, but for another it's not.\r\n\r\n`dotnet --info`\r\n\r\n> .NET Command Line Tools (2.0.0)\r\n> \r\n> Product Information:\r\n>  Version:            2.0.0\r\n>  Commit SHA-1 hash:  cdcd1928c9\r\n> \r\n> Runtime Environment:\r\n>  OS Name:     ubuntu\r\n>  OS Version:  16.04\r\n>  OS Platform: Linux\r\n>  RID:         ubuntu.16.04-x64\r\n>  Base Path:   /usr/share/dotnet/sdk/2.0.0/\r\n> \r\n> Microsoft .NET Core Shared Framework Host\r\n> \r\n>   Version  : 2.0.0\r\n>   Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d",
        "createdAt": "2017-08-29T11:05:51Z",
        "updatedAt": "2017-08-31T12:06:31Z",
        "author": {
          "login": "atlemann"
        }
      },
      {
        "body": "Hmm...something strange just happened. I tried to recreate the `.sln` file a second time using `SDK2` and deleting the `obj/` and `bin/` folders in the project folder and then doing `dotnet restore` and `dotnet build` and now it works. I don't know why recreating the `.sln` file did not help the first time.",
        "createdAt": "2017-08-31T12:09:47Z",
        "updatedAt": "2017-08-31T12:09:47Z",
        "author": {
          "login": "atlemann"
        }
      },
      {
        "body": "I had a similar problem with Ubuntu 17.\r\n\r\n```shell\r\nrm -r -f obj\r\nrm -r -f bin\r\nsudo dotnet restore\r\nsudo dotnet build\r\n```\r\n\r\nWorks...\r\n\r\nOne possible reason could be that if you run dotnet restore without sudo it will fail silently on restore, not writing all the files but thinking that the restore was ok, and then when you try to build, there are not everything correct.\r\n",
        "createdAt": "2017-10-19T21:03:54Z",
        "updatedAt": "2017-10-20T00:58:40Z",
        "author": {
          "login": "Thorium"
        }
      },
      {
        "body": "yes deleting /obj during the build fixed it for me",
        "createdAt": "2017-11-20T09:08:19Z",
        "updatedAt": "2017-11-20T09:08:19Z",
        "author": {
          "login": "forki"
        }
      },
      {
        "body": "I have the same issue when I add a NodeJS project in my solution.\r\n\r\nHere is the build result\r\n\r\n`[Stage_BlablaSolution] Running shell script\r\n+ sudo dotnet clean BlablaSolution.sln\r\nMicrosoft (R) Build Engine version 15.5.179.9764 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n/var/lib/jenkins/workspace/Stage_BlablaSolution/Tascona.Lib/Tascona.Lib.Utils/Tascona.Lib.Utils.csproj : warning NU1603: NEST 5.5.0 depends on Newtonsoft.Json (>= 10.0.0 && < 11.0.0) but Newtonsoft.Json 10.0.0 was not found. An approximate best match of Newtonsoft.Json 10.0.1 was resolved.\r\n/var/lib/jenkins/workspace/Stage_BlablaSolution/ThirdFlemingo.Net/ThirdFlemingo.UnitTest/ThirdFlemingo.UnitTest.csproj : warning NU1603: NEST 5.5.0 depends on Newtonsoft.Json (>= 10.0.0 && < 11.0.0) but Newtonsoft.Json 10.0.0 was not found. An approximate best match of Newtonsoft.Json 10.0.1 was resolved.\r\n/var/lib/jenkins/workspace/Stage_BlablaSolution/ThirdFlemingo.Net/ThirdFlemingo.Net/ThirdFlemingo.Net.csproj : warning NU1603: NEST 5.5.0 depends on Newtonsoft.Json (>= 10.0.0 && < 11.0.0) but Newtonsoft.Json 10.0.0 was not found. An approximate best match of Newtonsoft.Json 10.0.1 was resolved.\r\n/var/lib/jenkins/workspace/Stage_BlablaSolution/Tascona.Lib/Tascona.Lib.Data.Repo/Tascona.Lib.Data.Repo.csproj : warning NU1603: NEST 5.5.0 depends on Newtonsoft.Json (>= 10.0.0 && < 11.0.0) but Newtonsoft.Json 10.0.0 was not found. An approximate best match of Newtonsoft.Json 10.0.1 was resolved.\r\n/var/lib/jenkins/workspace/Stage_BlablaSolution/Tascona.Lib/Tascona.Lib.Business/Tascona.Lib.Business.csproj : warning NU1603: NEST 5.5.0 depends on Newtonsoft.Json (>= 10.0.0 && < 11.0.0) but Newtonsoft.Json 10.0.0 was not found. An approximate best match of Newtonsoft.Json 10.0.1 was resolved.\r\n/var/lib/jenkins/workspace/Stage_BlablaSolution/Tascona.Lib/Tascona.Lib.Data.DAL/Tascona.Lib.Data.DAL.csproj : warning NU1603: NEST 5.5.0 depends on Newtonsoft.Json (>= 10.0.0 && < 11.0.0) but Newtonsoft.Json 10.0.0 was not found. An approximate best match of Newtonsoft.Json 10.0.1 was resolved.\r\n/var/lib/jenkins/workspace/Stage_BlablaSolution/Tascona.App.Presentation/Tascona.Presentation.Web/Tascona.Presentation.Web.csproj : warning NU1603: NEST 5.5.0 depends on Newtonsoft.Json (>= 10.0.0 && < 11.0.0) but Newtonsoft.Json 10.0.0 was not found. An approximate best match of Newtonsoft.Json 10.0.1 was resolved.\r\n/var/lib/jenkins/workspace/Stage_BlablaSolution/NodejsConsoleApp1/NodejsConsoleApp1.njsproj.metaproj : error MSB4025: The project file could not be loaded. Could not find file '/var/lib/jenkins/workspace/Stage_BlablaSolution/NodejsConsoleApp1/NodejsConsoleApp1.njsproj.metaproj'.`\r\n\r\n\r\nAnd here is the dotnet --info\r\n```\r\n.NET Command Line Tools (2.1.3)\r\n\r\nProduct Information:\r\n Version:            2.1.3\r\n Commit SHA-1 hash:  a0ca411ca5\r\n\r\nRuntime Environment:\r\n OS Name:     ubuntu\r\n OS Version:  16.04\r\n OS Platform: Linux\r\n RID:         ubuntu.16.04-x64\r\n Base Path:   /usr/share/dotnet/sdk/2.1.3/\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.4\r\n  Build    : 7f262f453d8c8479b9af91d34c013b3aa05bc1ff\r\n```",
        "createdAt": "2018-01-05T13:39:11Z",
        "updatedAt": "2018-01-05T13:39:11Z",
        "author": {
          "login": "denizkanmaz"
        }
      },
      {
        "body": "I can reproduce this by attempting to dotnet publish a multi-project solution using WSL.",
        "createdAt": "2018-01-24T13:45:14Z",
        "updatedAt": "2018-01-24T13:45:14Z",
        "author": {
          "login": "berdon"
        }
      },
      {
        "body": "I just ran into this and can confirm that switching .sln project references from `\\` to `/` fixed it. How bizarre.\r\n\r\nHere is my Travis build before: https://travis-ci.org/hedgehogqa/fsharp-hedgehog/builds/338361850\r\nHere it is after: https://travis-ci.org/hedgehogqa/fsharp-hedgehog/builds/338379628\r\n",
        "createdAt": "2018-02-07T08:28:16Z",
        "updatedAt": "2018-02-07T08:28:16Z",
        "author": {
          "login": "Porges"
        }
      },
      {
        "body": "As above, switched `\\` to `/` in my `.sln` solved this.",
        "createdAt": "2018-02-07T14:26:00Z",
        "updatedAt": "2018-02-07T14:26:00Z",
        "author": {
          "login": "Robula"
        }
      },
      {
        "body": "But when you switch from \\ to / in the .sln file things like SonarQube wont work.\r\n\r\nSonarQube.Scanner.MSBuild.exe",
        "createdAt": "2018-02-13T17:55:24Z",
        "updatedAt": "2018-02-13T17:55:24Z",
        "author": {
          "login": "aBetterGamer"
        }
      },
      {
        "body": "Switch from `\\` to `/` in the `.sln` solved for me, but i try another way and removed **ProjectDependencies** from `.sln` file for projects. You can find like this in your `.sln` file:\r\n`ProjectSection(ProjectDependencies) = postProject`\r\n\r\nafter this `.sln` file successfull build with both variant of paths on unix and windows _(i think, what `\\` is more correct variant)_.",
        "createdAt": "2018-02-15T20:52:31Z",
        "updatedAt": "2018-02-15T20:55:23Z",
        "author": {
          "login": "atagirov"
        }
      },
      {
        "body": "Upgraded on MacOS from 2.0.x to 2.1.4 and me too. Workaround with changing slash direction works though.",
        "createdAt": "2018-03-01T08:14:16Z",
        "updatedAt": "2018-03-01T08:14:16Z",
        "author": {
          "login": "orient-man"
        }
      },
      {
        "body": "Ran into the same issue, C# projects only though. Also no `ProjectDependencies` section in my `.sln`. Changing all backslashes to forward slashes in project paths resolved the six errors if the form\r\n```\r\nerror MSB3202: The project file \"/path/to/project.csproj.metaproj\" was not found.\r\n```\r\nwhen trying to `dotnet build` or `dotnet test` my solution with a total of 28 projects. Never had any issues with `dotnet restore` as well. Working on macOS with `dotnet` version 2.1.103.",
        "createdAt": "2018-03-28T16:37:04Z",
        "updatedAt": "2018-03-28T16:37:04Z",
        "author": {
          "login": "takerukoushirou"
        }
      },
      {
        "body": "@takerukoushirou Slash-direction problems should be fixed with #2963 which should be available in the .NET Core SDK versions 2.1.200 and 2.1.300, which have previews available.",
        "createdAt": "2018-03-28T16:40:24Z",
        "updatedAt": "2018-03-28T16:40:24Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald \r\nI now run 2.1.4 but the same problem here. Created a dotnetcore solution using the command line sdk. Edited the solution with VS2017. Tried to build it on macosx -> errors ;-)\r\n\r\n> /src/Informedica.GenUtils.Lib/Informedica.GenUtils.Lib.fsproj.metaproj : error MSB4025: The project file could not be loaded. Could not find file '/src/Informedica.GenUtils.Lib/Informedica.GenUtils.Lib.fsproj.metaproj'.",
        "createdAt": "2018-04-27T08:37:39Z",
        "updatedAt": "2018-04-27T08:38:11Z",
        "author": {
          "login": "halcwb"
        }
      },
      {
        "body": "@halcwb What msbuild version are you using? `dotnet msbuild -version`. As I mention above, this is fixed in the .NET Core SDK 2.1.200 and 2.1.300, neither of which has hit final release yet.",
        "createdAt": "2018-04-27T14:19:31Z",
        "updatedAt": "2018-04-27T14:19:31Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}