{
  "number": 2469,
  "title": "Consider logging item adds/removes during evaluation",
  "body": "This issue https://github.com/KirillOsenkov/MSBuildStructuredLog/issues/113 brings up a point: items added and removed during evaluation are not logged, so the log doesn't have any trace of it.\r\n\r\nWe should consider logging item removes (not sure if logging item adds is valuable because items added and not removed are logged per project).\r\n\r\nI'm on the fence but I think triage should discuss and consider.",
  "state": "OPEN",
  "createdAt": "2017-08-24T18:03:53Z",
  "updatedAt": "2024-02-21T16:35:59Z",
  "closedAt": null,
  "author": {
    "login": "KirillOsenkov"
  },
  "labels": [
    "Area: Debuggability",
    "Area: Logging",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Yeah, that's an interesting one. One wrinkle is that removes aren't necessarily \"removed\" as in added and then removed, thanks to lazy item evaluation. That collapses\r\n\r\n```xml\r\n<ItemGroup>\r\n  <X Include=\"*.cs\" />\r\n  <X Remove=\"*.xaml.cs\" />\r\n</ItemGroup>\r\n```\r\n\r\ninto basically\r\n\r\n```xml\r\n<ItemGroup>\r\n  <X Include=\"*.cs\" Exclude=\"*.xaml.cs\" />\r\n</ItemGroup>\r\n```\r\n\r\nIn the OM, items are annotated with the XML element that caused them to come about. Maybe we could  add something similar to the binary log format?",
        "createdAt": "2017-08-24T18:17:18Z",
        "updatedAt": "2017-08-24T18:17:18Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Good idea. I've opened a new issue to track that work:\r\nhttps://github.com/Microsoft/msbuild/issues/2473",
        "createdAt": "2017-08-24T20:40:54Z",
        "updatedAt": "2017-08-24T20:40:54Z",
        "author": {
          "login": "KirillOsenkov"
        }
      }
    ]
  }
}