{
  "number": 1499,
  "title": "Building portable DLLs that can be tested",
  "body": "As more of Roslyn moves to target .Net Standard we're running into a problem with our unit test DLLs.  Like our code they need to move to target .Net Standard so we can run our tests on desktop, CoreCLR and across operating systems.  Yet there doesn't seem to be a way to build DLLs which target .Net Standard that are easily tested. \r\n\r\nConsider for example the [C# syntax unit test project](https://github.com/dotnet/roslyn/tree/master/src/Compilers/CSharp/Test/Syntax).  This targets .Net Standard and runs on CoreCLR / across OS.   It does so as a part of our CI system with great success. \r\n\r\nThis setup though is frustrating because the project can't be tested directly.  The project.json file lacks a runtimes section hence we can't use `<CopyNuGetImplementations>true</CopyNuGetImplementations>`.  This means the build output of this project lacks the necessary DLLS to make the project runnable.  As a result no unit test app works as a developer would expect: test driven.Net, Test Explorer, xunit console runner, etc .... \r\n\r\nIn order to make the tests runnable we have a deployment project: one for desktop and one for CoreCLR.  These deployment projects are do-nothing EXE which reference all of our portable unit test assemblies.  Because it's an EXE, the runtimes section is valid, NuGet implementations are copied and the output is runnable.  But again none of the standard tooling like TDD.Net / Test Explorer understand this setup.  Hence there is always an extra step for developers to take to run their tests.  \r\n\r\nHow can we setup our portable projects to avoid this?  This seems like a pretty straight forward problem, hopefully someone has figured out a good solution to this.  \r\n\r\nWe've tried adding runtimes sections to the project.json file in our DLL projects.  But that only results in loads of NuGet errors. \r\n",
  "state": "CLOSED",
  "createdAt": "2016-12-20T04:19:47Z",
  "updatedAt": "2024-02-21T17:23:13Z",
  "closedAt": "2020-02-10T21:57:48Z",
  "author": {
    "login": "jaredpar"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "How the msbuild repo did it:\r\n- made the test projects netstandard compliant via a ton of feature flags, the same ones we used to ifdef out the entire msbuild codebase\r\n- p2p references are in the [csproj](https://github.com/Microsoft/msbuild/blob/xplat/src/XMakeBuildEngine/UnitTests/Microsoft.Build.Engine.UnitTests.csproj), while per-TFM nuget dependencies are in the [project.json](https://github.com/Microsoft/msbuild/blob/xplat/src/XMakeBuildEngine/UnitTests/project.json). It took a long time to massages these so stuff restores and works.\r\n- super custom fragile build scripts that make everything work by hand stitching local sdks and massaging what gets into RAR\r\n\r\nWhat we lost:\r\n- unit tests in VS and building in VS. We build and test from the command line, like the CI does. Not a good experience. Fortunately enough of VS works so that we get intellisense and R# mostly works.\r\n\r\nI agree that this is very far from ideal. I think that once the entire .net core environment stabilizes, we should change our builds to rely on dotnet CLI so, we just do things like `dotnet build` and `dotnet test` and then everything `just works`\u2122 inside and outside of VS.\r\n\r\n@piotrpMSFT and @blackdwarf: what's the status on onboarding big projects? Is there any documentation on this? I guess it would be nice for all the dotnet tooling repos to delete their own custom build scripts and adopt the CLI at some point.",
        "createdAt": "2016-12-20T21:40:45Z",
        "updatedAt": "2016-12-20T21:43:29Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "Found a way to get an adhoc deployment using the standard NuGet tasks in Roslyn\r\n\r\nhttps://github.com/jaredpar/roslyn/commit/4f84887a7a4af28ab5c700a77684aa92cbe9d4ae\r\n\r\nEssentially this works by using the lock file from our desktop delpoyment project.  This is the project we used to create a deployment for all of our portable unit test projects.  It's a dummy EXE that has a reference to every single portable unit test project.  \r\n\r\nThis means the lock file has all of the necessary assets for running the portable DLL.  The ResolveNuGetAssets task can be called directly with this lock file and provide the set of assets that need to be copied locally. \r\n\r\nThis \"works\" but it's still very adhoc.  We won't be using this for official builds, only for developer convenience.  Still feel like this needs an official, supported solution.  Otherwise it really lowers the incentive to move to Net Standard for unit test projects. \r\n",
        "createdAt": "2016-12-21T22:57:45Z",
        "updatedAt": "2016-12-21T22:57:45Z",
        "author": {
          "login": "jaredpar"
        }
      },
      {
        "body": "Ideally it would be possible to specify multiple target runtimes and the VS test runner would provide a way to switch between them. Perhaps one of them would be the default and then you'd have an option to run a test under a selected runtime, in case when you need to debug issue or code path specific to certain runtime.",
        "createdAt": "2016-12-21T23:17:24Z",
        "updatedAt": "2016-12-21T23:17:24Z",
        "author": {
          "login": "tmat"
        }
      },
      {
        "body": "Should the solution here be make something like this work properly:\r\nhttps://github.com/Reactive-Extensions/Rx.NET/blob/f339ba7c0821d00f9c0cb29186c97713765a6d03/Rx.NET/Source/Tests.System.Reactive/Tests.System.Reactive.csproj\r\n\r\nIt multi-targets the tests\u00a0and thus doesn't need multiple heads.\r\n\r\nProblem right now is that it doesn't seem to be easy to invoke without an\u00a0`MSBuild /t:Test`\u00a0target that\u00a0\"does the right thing\"",
        "createdAt": "2016-12-22T16:20:14Z",
        "updatedAt": "2016-12-22T16:20:14Z",
        "author": {
          "login": "clairernovotny"
        }
      },
      {
        "body": "@onovotny I'm unsure what the \"right\" solution is here.  My intuition though is that as a developer I should be able to do the following:\r\n\r\n- Define a class library that targets .Net Standard \r\n- Run a build that does a deployment for a given TFM\r\n\r\nThat is essentially what I'm trying to accomplish when I run xunit.  Build + deploy my application for .Net Desktop and invoke xunit on the result. \r\n",
        "createdAt": "2016-12-22T16:34:00Z",
        "updatedAt": "2016-12-22T16:34:00Z",
        "author": {
          "login": "jaredpar"
        }
      },
      {
        "body": "@jaredpar I agree with your idea. It's one of the things we\u00a0couldn't get working correctly \"xUnit tests of PCLs\" because there was no infrastructure behind choosing what\u00a0platform that actually runs on. Best you can do today is use one of the runners\u00a0on the test project containing PCL's. \r\n\r\nThat works for things like xunit.console.exe, but it's unclear what that means in the CoreCLR world? Do we rely on vstest.console with the adapter stuff we've written to support dotnet test? Does that have the context necessary?\r\n\r\nI agree with what you're trying to do though -- have a way of specifying that you want to run a test on multiple platforms. Given the current test adapter pattern, I think that should be something a test host (like vstest.console) should be able to handle (and hopefully wrapped up in a bow with an msbuild target)\u00a0",
        "createdAt": "2016-12-22T16:45:49Z",
        "updatedAt": "2016-12-22T16:45:49Z",
        "author": {
          "login": "clairernovotny"
        }
      },
      {
        "body": "I think this needs to be addressed on multiple layers:\r\n\r\n### dotnet SDK\r\nCurrently one can specify multiple targets for project build via ```<TargetFrameworks>```, which results in the project compiled and deployed multiple times along with all the necessary implementation assemblies and runtime config files for each target framework.\r\n\r\nIf the project is truly portable (i.e. the same code works on all platforms) repeating the compilation steps is unnecessary. In Roslyn, for example, most tests can be made portable and target netstandard and those that can't could be moved to separate \"Desktop\" test projects. We still want to run tests on (possibly multiple versions of) CoreCLR and on Desktop FX. \r\n\r\nWhat I think would be useful here is having the option to specify something like ```<DeploymentFrameworks>``` for a project. Setting this property in context of a ```TargetFramework``` would result in the compilation outputs compiled for that particular TargetFramework to be copied from the intermediate directory to multiple deployment directories (based on the list in DeploymentFrameworks) along with the runtime assemblies and config files specific to the respective DeploymentFramework. In the Roslyn test scenario, we would specify ```TargetFramework=netstandard1.3``` and ```DeploymentFrameworks=netcoreapp1.0;netfx461```, for example.\r\n\r\n### vstest/dotnet test/Test Explorer/Live Unit Testing\r\nAbility to select a DeploymentFramework to run tests on. In VS Test Explorer this could be added as a drop-down list to Test Explorer, for example. ",
        "createdAt": "2017-01-30T21:01:48Z",
        "updatedAt": "2017-01-30T21:05:16Z",
        "author": {
          "login": "tmat"
        }
      },
      {
        "body": "@nguerrera @srivatsn FYI",
        "createdAt": "2017-01-30T21:02:29Z",
        "updatedAt": "2017-01-30T21:02:29Z",
        "author": {
          "login": "tmat"
        }
      },
      {
        "body": "> What I think would be useful here is having the option to specify something like <DeploymentFrameworks> for a project.\r\n\r\nWas thinking along similar lines.  The end goal I'd been thinkiing of was the ability to essentially take a portable DLL project and run the following:\r\n\r\n> msbuild /p:DeploymentTarget=Net46 Example.csproj \r\n\r\nNo need to even modify the project at that point.  That concept makes it easy for all sorts of tooling, including testing, to be written on top of a standard project. ",
        "createdAt": "2017-01-30T21:05:39Z",
        "updatedAt": "2017-01-30T21:05:39Z",
        "author": {
          "login": "jaredpar"
        }
      },
      {
        "body": "Yes, that's the same thing. It needs to be in the .proj file though, so that LUT and Test Explorer can pick the list up.",
        "createdAt": "2017-01-30T21:07:02Z",
        "updatedAt": "2017-01-30T21:07:02Z",
        "author": {
          "login": "tmat"
        }
      },
      {
        "body": "Disagree.  This should be an option that I pass to LUT / Test Explorer.  Absent of an option they could default to the current runtime.  \r\n\r\nMy project file should not have to change from a standard portable DLL in order to enable tests.  ",
        "createdAt": "2017-01-30T22:05:21Z",
        "updatedAt": "2017-01-30T22:05:21Z",
        "author": {
          "login": "jaredpar"
        }
      },
      {
        "body": "I tried out the new SDK stuff and it appears to be [injecting an entry point](https://github.com/Microsoft/vstest/blob/master/src/Microsoft.NET.Test.Sdk.targets) into unit test libraries and [making them EXEs](https://github.com/Microsoft/vstest/blob/master/src/Microsoft.NET.Test.Sdk_props#L16).\r\n\r\nThis effectively makes the unit test a runnable app and its dependencies are placed in the output directory during build along with a `deps.json`.  \r\n\r\n@jaredpar how does this address what you're asking for here?",
        "createdAt": "2017-01-30T22:30:44Z",
        "updatedAt": "2017-01-30T22:30:44Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "@jaredpar Then you'd need another file to store that information in. Where would you store it?",
        "createdAt": "2017-01-30T22:49:04Z",
        "updatedAt": "2017-01-30T22:49:04Z",
        "author": {
          "login": "tmat"
        }
      },
      {
        "body": "@tmat why do I need another file?  There are plenty of session, project level storage files existing today that could be used here.  \r\n\r\n@jeffkl the entry point though shouldn't be needed here.  This is more of a targets / deployment issue.  Don't need to modify the binary to make that happen, just need to give the deployment targets the right information. \r\n\r\n",
        "createdAt": "2017-01-30T22:59:05Z",
        "updatedAt": "2017-01-30T22:59:05Z",
        "author": {
          "login": "jaredpar"
        }
      },
      {
        "body": "@jaredpar I was not suggesting a new file. My question was rather what file would be the best suited for storing this information.",
        "createdAt": "2017-01-30T23:39:02Z",
        "updatedAt": "2017-01-30T23:39:02Z",
        "author": {
          "login": "tmat"
        }
      },
      {
        "body": "@jaredpar Also, if this information was in another file wouldn't all tasks/tools that want to operate on the available deployments need to agree on where the information is stored? Wouldn't it be easier if the list was in fact a project property?",
        "createdAt": "2017-01-30T23:41:40Z",
        "updatedAt": "2017-01-30T23:42:00Z",
        "author": {
          "login": "tmat"
        }
      },
      {
        "body": "@tmat sure and I think it's not the csproj file.  The csproj is a generic build definition for my project that should be re-usable across all builds.  The DeploymentTarget property may be a part of my generic build or it may be relevant only to the exact operation I'm doing at the time.\r\n\r\nToday I may be editing on Visual Studio in Windows.  In that case I'd like to deploy and test on Net46 and CoreClr.  Tomorrow I may be working on VSCode on my MacBook and hence want CoreClr for OSX.  Neither operation should cause me to edit my csproj file.\r\n\r\nAdditionally tomorrow another deveolper may want to run some tests on Linux.  Should they send me a PR to change the csproj file?  Can't see why that's a good workflow. \r\n",
        "createdAt": "2017-01-30T23:42:52Z",
        "updatedAt": "2017-01-30T23:42:52Z",
        "author": {
          "login": "jaredpar"
        }
      },
      {
        "body": "@jaredpar Good point. Agreed.",
        "createdAt": "2017-01-30T23:45:42Z",
        "updatedAt": "2017-01-30T23:45:42Z",
        "author": {
          "login": "tmat"
        }
      },
      {
        "body": "Team triage: closing due to age. This feels like something that might belong in the https://github.com/Microsoft/vstest layer rather than in MSBuild proper.",
        "createdAt": "2020-02-10T21:57:48Z",
        "updatedAt": "2020-02-10T21:57:48Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}