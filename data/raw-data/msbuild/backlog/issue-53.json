{
  "number": 53,
  "title": "MSBuild should handle paths longer than MAX_PATH",
  "body": "As seen in [Fix 260 character file name length limitation](http://visualstudio.uservoice.com/forums/121579-visual-studio/suggestions/2156195-fix-260-character-file-name-length-limitation), there's quite a bit of support for better _longer-than-`MAX_PATH`-filename_ handling.\n\nWill Buik's response w/regard to fixing it was:\n\n> We understand that this can be a frustrating issue, however, fixing it requires a large and complicated architectural change across different products and features including Visual Studio, TFS, MSBuild and the .NET Framework. Dedicating resources to this work item would come at the expense of many other features and innovation.\n\nI wondered, how big can those architectural changes be (for MSBuild)?\n\nAccording to [Naming Files, Paths, and Namespaces: Maximum Path Length Limitation](https://msdn.microsoft.com/en-us/library/aa365247.aspx#maxpath), (which I have mirrored [here](https://github.com/ariccio/altWinDirStat/raw/master/filesystem-docs-n-stuff/Naming%20Files%2C%20Paths%2C%20and%20Namespaces%20%28Windows%29.pdf) ):\n\n> The Windows API has many functions that also have Unicode versions to permit an extended-length path for a maximum total path length of 32,767 characters. This type of path is composed of components separated by backslashes, each up to the value returned in the `lpMaximumComponentLength` parameter of the GetVolumeInformation function (this value is commonly 255 characters). To specify an extended-length path, use the `\"\\\\?\\\"` prefix. For example, `\"\\\\?\\D:\\very long path\"`.\n> _[other stuff]_\n> \n> Because you cannot use the `\"\\\\?\\\"` prefix with a relative path, **relative paths are always limited to a total of MAX_PATH characters**.\n\n_(emphasis mine)_\n\n...Which means that wherever MSBuild uses full paths, we ~~can~~ should be able to just prepend `\"\\\\?\\\"` to ask for a long path. \n\nOf course, we'd need to rework the existing path-length-workaround hack. \n\nThis won't fix the whole ecosystem, but it'll get us just one step closer.\n\nI'd like to fix this myself (it seems simple enough), so in accordance with:\n\n> - Contributions must be discussed with the team first, or they will likely be declined. As our process matures and our experience grows, the team expects to take larger contributions.\n> - Only contributions referencing an approved Issue will be accepted.\n\n...this is the suggested issue.\n\nI'm a native developer at heart, not an experienced C# developer, but this shouldn't require anything crazy.\n\nDirect references to MAX_PATH:\n- [NativeMethods.cs#L15](https://github.com/Microsoft/msbuild/blob/82177a50da735cc0443ac10fa490d69368403d71/src/Utilities/TrackedDependencies/NativeMethods.cs#L15)\n- [NativeMethodsShared_Tests.cs#L53](https://github.com/Microsoft/msbuild/blob/f5d9cfdb9b7d0e8f29c88d21e2a08dc1d167aa9f/src/Shared/UnitTests/NativeMethodsShared_Tests.cs#L53)\n- [NativeMethodsShared.cs#L318](https://github.com/Microsoft/msbuild/blob/82177a50da735cc0443ac10fa490d69368403d71/src/Shared/NativeMethodsShared.cs#L318)\n- [NativeMethodsShared.cs#L540](https://github.com/Microsoft/msbuild/blob/82177a50da735cc0443ac10fa490d69368403d71/src/Shared/NativeMethodsShared.cs#L540)\n- [NativeMethodsShared.cs#L750](https://github.com/Microsoft/msbuild/blob/82177a50da735cc0443ac10fa490d69368403d71/src/Shared/NativeMethodsShared.cs#L750)\n- [FileState.cs#L293](https://github.com/Microsoft/msbuild/blob/82177a50da735cc0443ac10fa490d69368403d71/src/XMakeTasks/FileState.cs#L293)\n- [ComReference.cs#L460](https://github.com/Microsoft/msbuild/blob/82177a50da735cc0443ac10fa490d69368403d71/src/XMakeTasks/ComReference.cs#L460)\n- [TargetsFile_Test.cs#L2041](https://github.com/Microsoft/msbuild/blob/82177a50da735cc0443ac10fa490d69368403d71/src/XMakeBuildEngine/UnitTests/TargetsFile_Test.cs#L2041)\n",
  "state": "CLOSED",
  "createdAt": "2015-03-30T23:16:49Z",
  "updatedAt": "2024-02-21T17:31:57Z",
  "closedAt": "2019-02-06T22:49:31Z",
  "author": {
    "login": "ariccio"
  },
  "labels": [
    "Area: Tasks",
    "Area: Engine",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "rainersigwald"
      }
    ]
  },
  "milestone": {
    "title": "MSBuild 16.0"
  },
  "comments": {
    "nodes": [
      {
        "body": "MSBuild team triage: This isn't a change we're looking to take anytime soon as it would be fairly substantial with implications on dependent tasks and tools.\n",
        "createdAt": "2015-03-31T22:31:40Z",
        "updatedAt": "2015-03-31T22:31:40Z",
        "author": {
          "login": "AndyGerlicher"
        }
      },
      {
        "body": "> [...]it would be fairly substantial with implications on dependent tasks and tools.\n\nCould you be a bit more specific?\n",
        "createdAt": "2015-04-01T23:12:34Z",
        "updatedAt": "2015-04-01T23:12:34Z",
        "author": {
          "login": "ariccio"
        }
      },
      {
        "body": "I'm still curious as to what the substantial implications of an incremental fix for MSBuild in isolation are, exactly. \n",
        "createdAt": "2015-04-08T00:02:01Z",
        "updatedAt": "2015-04-08T00:02:01Z",
        "author": {
          "login": "ariccio"
        }
      },
      {
        "body": "In general, you'd have to have all of the other things you're using understand long paths. There's been a number of discussions internally and externally about the MAX_PATH issue and they always eventually boil down to: \"If we could rewrite everything we'd be good but we can't so there's an infinite sea of compat risk here :-(\".\n\nSo... maybe some day?\n",
        "createdAt": "2015-04-09T21:23:53Z",
        "updatedAt": "2015-04-09T21:23:53Z",
        "author": {
          "login": "MattWhilden"
        }
      },
      {
        "body": "Have you looked at [AlphaFS](http://alphafs.alphaleonis.com/)?\n",
        "createdAt": "2015-04-09T21:40:07Z",
        "updatedAt": "2015-04-09T21:40:07Z",
        "author": {
          "login": "gwojan"
        }
      },
      {
        "body": "The key issue here is that it doesn't really matter if MSBUILD is updated. It's not an island. it passes paths to lots of other things (OS apis, tools etc) and updating yourself in a way that doesn't break them is a Hard Problem (tm). Almost certainly not impossible but there's lots of other work with better payoffs.\n",
        "createdAt": "2015-04-09T22:17:40Z",
        "updatedAt": "2015-04-09T22:17:40Z",
        "author": {
          "login": "MattWhilden"
        }
      },
      {
        "body": "Hmm. The way I see it, is that the entire toolchain is not compatible with paths longer than MAX_PATH, and thus by (incrementally) fixing a single component will not lead to toolchain-wide regression. It'll just be broken in a _different_ place - the entire toolchain, when used as a system, will still be broken, but in a _slightly_ smaller way.\n\nIt's even worse, by the way, as MAX_PATH was only the \"maximum total file **path** length\" for [FAT16](http://blogs.citrix.com/2011/03/01/app-streaming-max_path-considerations-with-user-profiles/), and pre-Unicode/pre-NT APIs. Any documentation that says MAX_PATH is the longest possible file **path** is horribly wrong! MAX_PATH should really have been named MAX_FAT_PATH or MAX_PATH_COMPONENT; any program that was built ~~after Windows NT 3.1 (yes, July 27, 1993,  the earliest default use of NTFS that I know of)~~  to use Unicode APIs with the assumption that MAX_PATH is the longest possible file **path** is, and always was, [terminally broken. GCC 4.9-style broken.](https://lkml.org/lkml/2014/7/24/584)\n\nI can even find [discussions dating more than ten years back](http://osdir.com/ml/network.rsync.general/2002-09/msg00125.html), of developers realizing that assuming MAX_PATH is the maximum length of a path is an outdated (ridiculous) assumption.\n\nAny components that have been retroactively \"fixed\" to ensure compatibility with _only_ paths that are MAX_PATH or shorter - well, that's just crazy.\n\nAlso, I can't imagine that we can break the OS APIs themselves by using them in a documented manner.\n\nSo yeah, it's a Hard Problem\u2122, and [I know that we don't yet have proper time travel](http://blogs.msdn.com/b/oldnewthing/archive/2006/04/03/567318.aspx), but if we attack it incrementally, we either make small (and _effectively non-functional_) improvements, or expose bugs/unforeseen design issues in other components. \n\nI say _effectively non-functional_, because those components that can't handle MAX_PATH are already broken for paths longer than MAX_PATH. I can't imagine that those applications rely internally on the exact full path name that's given to them. \n\nFurthermore, I imagine that OTHER toolchains use MSBuild in ways that are crippled by the MAX_PATH limitations. \n\n...and while new features/better compliance are nice, I think they're counterproductive/add silly complexity if the core components that they're built on are shaky and fail in unexpected ways (e.g. MAX_PATH limitations). Putting it off into the future only makes it harder to fix.\n\nLastly, let me remind you of the nearly 3000 users who voted on \"[Fix 260 character file name length limitation](https://visualstudio.uservoice.com/forums/121579-visual-studio/suggestions/2156195-fix-260-character-file-name-length-limitation)\" before it was declined. There are still users commenting on the issue with frustration.\n\n# Here's an idea\n\nHow about you/we go ahead and make the changes to MSBuild, make it available as a \"preview\" or \"technology demonstration\", and **see what (if anything) breaks**.\n",
        "createdAt": "2015-04-10T00:43:28Z",
        "updatedAt": "2015-04-10T00:43:28Z",
        "author": {
          "login": "ariccio"
        }
      },
      {
        "body": "You seem to understand the issue pretty well. I don't disagree that isn't a frustrating experience some times but they have finite resources and can only take so much risk. I'd be more interested in them making sure cross plat is brought up cleanly but it's up to them. I'm sure they appreciate your enthusiasm and feedback. I'll bow out of this issue for now.. lots of other bugs to track down.\n",
        "createdAt": "2015-04-10T02:05:08Z",
        "updatedAt": "2015-04-10T02:05:08Z",
        "author": {
          "login": "MattWhilden"
        }
      },
      {
        "body": "Fair enough.\n",
        "createdAt": "2015-04-10T02:16:07Z",
        "updatedAt": "2015-04-10T02:16:07Z",
        "author": {
          "login": "ariccio"
        }
      },
      {
        "body": "@ariccio If you have the inclination, I say go for it. Everybody will eventually benefit, especially if more pieces of the toolchain go open source. Saying that it can't be fixed because everything else in every possible toolchain would also have to be fixed immediately is, quite simply, a non-starter and completely unrealistic. The whole point of going open source is to let people scratch their itches, especially when Microsoft doesn't have the resources to do it themselves...\n\nOne way to minimize the risk associated with backwards and toolchain compatibility that Microsoft keeps talking about is to ensure that the current limitation remains the default behavior while making it possible to opt-in to longer paths. The opt-in mechanism can be via any relevant configuration mechanism, including a new command line option, a build file setting, a registry setting and/or some other mechanism.\n",
        "createdAt": "2015-04-10T05:57:22Z",
        "updatedAt": "2015-04-10T05:57:22Z",
        "author": {
          "login": "noamkfir"
        }
      },
      {
        "body": "I'm also in.\n\nEspecially down the road to xplat, where *NIX operating systems do not care about a 260 char path length at all. IF set at all (this may well be -1 to indicate that there is no limit) it for example defaults to 4096 on x86 Linux. On OS X's HFSP the max path length is unlimited (while the file name is limited to 255).\n\nSo, in fact, this issue here is a _blocker_ for xplat.\n\nYes, there _may_ be other places in VS, TFS and other tools that have problems with this, but as long as we want to simply 'MSBuild mysolution' on commandline or on an CI system like AppVoyer or Travis, and happen to have paths longer than 260 chars there, it should not artificially prevent us from doing so.\n\nI also don't see how removing this limitation would break other stuff.\nIf other stuff can't handle paths longer than 260 chars, it already IS broken. It won't break more. I would just break elsewhere.\n\nAnd: Yes. Especially because MSBuild is not an island, but a part in a chain, someone has to start. And MSBuild is the perfect place because it can be used more or less standalone on new DNX projects (because, honestly, Sake is the totally wrong thing for building stuff), and it could be the door-opener to fix the stuff in other places too. Best thing is, that others like the VS or TFS team won't have excuses like 'MSBuild doesn't support that, so why should we change that?' anymore.\n\nWhen talking about where to spent time, it's mostly the time of the community that will be spend here. So why not simply start here, by removing that artifical limitation, pass longer paths around where necessary and, who knows, maybe much less is broken that is currently being thought off and a lot of stuff simply starts to work out of the box?\n",
        "createdAt": "2015-05-28T18:04:48Z",
        "updatedAt": "2015-05-28T18:04:48Z",
        "author": {
          "login": "gingters"
        }
      },
      {
        "body": ":+1: \n\nMediaeval issues like this still prevent us from using proper folder structures and proper file/folder names still. And it's not a corner case: for us **all** of our builds would fail if not copied to the drive root of the build server!\n",
        "createdAt": "2015-05-28T19:59:36Z",
        "updatedAt": "2015-05-28T19:59:36Z",
        "author": {
          "login": "Piedone"
        }
      },
      {
        "body": ":+1: This is something everyone with a complex build in a build system encounters sooner or later and it is quite annoying to work around. Fixing it has to start somewhere.\n",
        "createdAt": "2015-09-04T08:10:21Z",
        "updatedAt": "2015-09-04T08:10:21Z",
        "author": {
          "login": "hacst"
        }
      },
      {
        "body": "Glad to see that people are still voicing their support. Fixing this arcane issue is certainly not a glamorous job - hence the foot-dragging - but it's a desperately important one. \n",
        "createdAt": "2015-09-04T09:27:22Z",
        "updatedAt": "2015-09-04T09:27:22Z",
        "author": {
          "login": "ariccio"
        }
      },
      {
        "body": "I'd also see this open 10 years from now if noone does a start!\n\nBut we also need a Api for full length paths directly in dotnet core!\n",
        "createdAt": "2015-09-06T17:06:04Z",
        "updatedAt": "2015-09-06T17:06:04Z",
        "author": {
          "login": "jogibear9988"
        }
      },
      {
        "body": "Work is now [in progress](https://github.com/dotnet/apireviews/tree/master/2015-08-26-long-path) to enable long path support for .NET Core.  I _think_ the goal is to also add this to the full .NET Framework (@terrajobst can probably confirm whether this is the case).\n\nOnce this is done it should be a lot easier to add support for long paths to MSBuild- long paths should \"just work\" when they are passed to .NET APIs, without having to add the `\\\\?\\` prefix.\n\n@AndyGerlicher Should we consider re-opening this issue?\n",
        "createdAt": "2015-09-06T18:43:43Z",
        "updatedAt": "2015-09-06T18:43:43Z",
        "author": {
          "login": "dsplaisted"
        }
      },
      {
        "body": "> Should we consider re-opening this issue?\n\nTechnically, it _is_ still open.\n\nBut, if long path support is on it's way to the .NET Core, then I'd be totally cool treating this as a _tracking_ issue.\n",
        "createdAt": "2015-09-07T06:18:18Z",
        "updatedAt": "2015-09-07T06:18:18Z",
        "author": {
          "login": "ariccio"
        }
      },
      {
        "body": "Also running in to this same issue (with ASP.NET 5 DNX Beta 7 website publish operation):\n System.ArgumentException: The name can be no more than 260 characters in length.\n\nDo you have an update on when this will be resolved?\n\nThanks!\n",
        "createdAt": "2015-10-14T16:00:27Z",
        "updatedAt": "2015-10-14T16:00:27Z",
        "author": {
          "login": "nalinjay"
        }
      },
      {
        "body": "I know there's been some progress getting long path support in the core clr, but I think it will be a while before it's ported back to the desktop framework. Until that happens, this just isn't really high on our priority list. It's something we would probably do in xplat first since we'll get the core clr updates sooner, but it's not on our radar right now.\n",
        "createdAt": "2015-10-14T17:54:53Z",
        "updatedAt": "2015-10-14T17:54:53Z",
        "author": {
          "login": "AndyGerlicher"
        }
      },
      {
        "body": "Given how far we are with making progress on solving it in .NET Core, I wouldn't invest in handling it in MSBuild. At least for the .NET Core based version it would get a free ride by doing nothing. .NET Framework is a bit more out, but again, our goal is to port those changes back and make it transparent which would mean that MSBuild would get a free ride.\n\nEither way, I don't think doing a duct tape fix in MSBuild is currently worth it.\n",
        "createdAt": "2015-10-14T21:13:53Z",
        "updatedAt": "2015-10-14T21:14:15Z",
        "author": {
          "login": "terrajobst"
        }
      },
      {
        "body": "Completely agree. However the one caveat is we have several places in our code where we check if the path is over some const defined in our code. So we won't quite get a free ride.\n",
        "createdAt": "2015-10-14T21:54:09Z",
        "updatedAt": "2015-10-14T21:54:09Z",
        "author": {
          "login": "AndyGerlicher"
        }
      },
      {
        "body": "If that's the case, I'd encourage you to remove those. This isn't even a long path thing; for cross-platform alone you don't want to restrict paths on Mac/Linux to a Windows specific limit. In other words, removing those checks immediately benefits some customers.\n\n(Also, on Windows you don't really lose anything. You might trade errors against different errors or run for longer before detecting it but that seems like the correct behavior anyways moving forward.)\n",
        "createdAt": "2015-10-14T23:04:28Z",
        "updatedAt": "2015-10-14T23:06:46Z",
        "author": {
          "login": "terrajobst"
        }
      },
      {
        "body": "> Given how far we are with making progress on solving it in .NET Core, I wouldn't invest in handling it in MSBuild.\n\nI'm glad to hear that that project is progressing nicely! Any idea on how long \"a bit more out\" is? \n\nOf course, it's software, so I wont hold it against you as a \"deadline\" of some sort :)\n",
        "createdAt": "2015-10-15T22:02:23Z",
        "updatedAt": "2015-10-15T22:02:23Z",
        "author": {
          "login": "ariccio"
        }
      },
      {
        "body": "We don't have a timeline but I'll keep you posted via our design reviews, Twitter and so on. Hopefully the dev driving it can give us an update in a couple of weeks.\n",
        "createdAt": "2015-10-19T07:08:03Z",
        "updatedAt": "2015-10-19T07:08:03Z",
        "author": {
          "login": "terrajobst"
        }
      },
      {
        "body": "Try to long path tool. It is very helpful. \n",
        "createdAt": "2015-10-21T08:01:38Z",
        "updatedAt": "2015-10-21T08:01:38Z",
        "author": {
          "login": "Damienbarifon"
        }
      },
      {
        "body": "Windows will soon get over this problem: http://news.softpedia.com/news/microsoft-removes-260-characters-path-length-limit-in-windows-10-redstone-504596.shtml Will this expedite the progress?\n",
        "createdAt": "2016-06-13T13:41:01Z",
        "updatedAt": "2016-06-13T13:41:01Z",
        "author": {
          "login": "Piedone"
        }
      },
      {
        "body": "@Piedone We discussed this a bit internally, and it definitely helps. There are a couple of complicating factors:\n- Backwards compatibility: we need to work where Visual Studio does, and we'll probably want to keep our (somewhat nicer) error messages on older OSes.\n- Full .NET Framework: the recent Redstone news talks about Win32 and UWP apps, but it's not clear to me whether a change to the (full, installed) .NET Framework would be required to support this for managed apps on Windows.\n\nThat said, I don't think this is \"distant future\" any more.\n",
        "createdAt": "2016-06-13T16:49:24Z",
        "updatedAt": "2016-06-13T16:49:24Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "That certainly lifts my hopes :-). Thanks for the reply.\n",
        "createdAt": "2016-06-14T19:42:03Z",
        "updatedAt": "2016-06-14T19:42:03Z",
        "author": {
          "login": "Piedone"
        }
      },
      {
        "body": "Note to future implementer: make sure eventual fixes for this include FileTracker and Tracker.exe.\n\n(I just had cause to poke into that code and saw `MAX_PATH` all over the place.)\n",
        "createdAt": "2016-06-30T14:49:48Z",
        "updatedAt": "2016-06-30T14:49:48Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "The path for desktop framework is clearer now. .NET 4.6.2 [supports long paths in `System.IO`](https://blogs.msdn.microsoft.com/dotnet/2016/08/02/announcing-net-framework-4-6-2/#bcl). Since we're not targeting 4.6.2, MSBuild will have to opt in with this app.config section:\n\n``` XML\n  <runtime>\n    <AppContextSwitchOverrides value=\"Switch.System.IO.UseLegacyPathHandling=false\" />\n  </runtime>\n```\n",
        "createdAt": "2016-08-03T13:09:40Z",
        "updatedAt": "2016-08-03T13:09:40Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I have an Assembly with a class derived from Microsoft.Build.Utilities.Task. The task deals with file path names longer than 260 characters. This dll is compiled with a target framework of 4.6.2 \nMy MSBuild Engine is 14.0.25420.1 . What do I need to do ? Where do I add this config option?\n",
        "createdAt": "2016-10-25T20:08:03Z",
        "updatedAt": "2016-10-25T20:08:03Z",
        "author": {
          "login": "mvsrinivasan"
        }
      },
      {
        "body": "@SV-efi You'd have to add that config option in the entrypoint assembly config (`MSBuild.exe.config` or `devenv.exe.config` depending on whether you're targeting command line builds or VS ones).\n\nBut please note: MSBuild hasn't had the required changes to support long paths. If you change the config you'll be unsupported and I suspect things won't work anyway. That'll remain the case until this issue is closed.\n",
        "createdAt": "2016-10-25T20:15:51Z",
        "updatedAt": "2016-10-25T20:15:51Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Thanks @rainersigwald !\n",
        "createdAt": "2016-10-25T20:21:42Z",
        "updatedAt": "2016-10-25T20:21:42Z",
        "author": {
          "login": "mvsrinivasan"
        }
      },
      {
        "body": "In 2016 it shouldn't be necessary to spend time on finding workarounds for issues like that:\r\n(from the CI, which wraps the project in an even deeper directory structure)\r\n```\r\n00:00:11.822 Errors in packages.config projects\r\n00:00:11.824     The specified path, file name, or both are too long. The fully qualified file name must be less than 260 characters, and the directory name must be less than 248 characters.\r\n```\r\nAny improvement would be great!",
        "createdAt": "2016-12-14T14:15:31Z",
        "updatedAt": "2016-12-14T14:15:31Z",
        "author": {
          "login": "twolfart"
        }
      },
      {
        "body": "Any progress on this?",
        "createdAt": "2017-02-23T20:25:31Z",
        "updatedAt": "2017-02-23T20:25:31Z",
        "author": {
          "login": "imakowski"
        }
      },
      {
        "body": "No development progress but this is on our radar for a future release. Would require significant cross-team collaboration to implement correctly.",
        "createdAt": "2017-02-23T20:29:27Z",
        "updatedAt": "2017-02-23T20:34:33Z",
        "author": {
          "login": "Sarabeth-Jaffe-Microsoft"
        }
      },
      {
        "body": "There is a related PR in CoreFX dotnet/corefx#8655 to remove preemptive checks in BCL for `PathTooLongException`: dotnet/corefx#14124.",
        "createdAt": "2017-02-23T21:20:59Z",
        "updatedAt": "2017-03-05T09:03:13Z",
        "author": {
          "login": "am11"
        }
      },
      {
        "body": "Any progress? Please shift this way up the backlog and get that `significant cross-team collaboration` going. I appreciate it may not feature on any marketing checklists but it will be very widely appreciated.\r\n\r\nI curse every time I have to workaround this last-century limitation.\r\n\r\n_Edit: 'Sarabeth-Jaffe-Microsoft was unassigned by ishepherd', um no I didn't :confused:_",
        "createdAt": "2017-08-14T05:38:08Z",
        "updatedAt": "2017-08-14T05:39:46Z",
        "author": {
          "login": "ishepherd"
        }
      },
      {
        "body": "With .NET Framework 4.6.2 partly supporting > MAX_PATH now, this is perhaps an easier task than ever?",
        "createdAt": "2017-10-02T13:42:40Z",
        "updatedAt": "2017-10-02T13:42:40Z",
        "author": {
          "login": "daghb"
        }
      },
      {
        "body": "Every build system on Windows that I encounter requires ugly workarounds due to this old problem. Any progress? I really don't care if MSBuild suddenly needs 10MB more RAM, just make it work. Our build server got a 256GB upgrade on the cheap, which you should try too.",
        "createdAt": "2018-01-18T15:11:22Z",
        "updatedAt": "2018-01-18T15:12:13Z",
        "author": {
          "login": "mdealer"
        }
      },
      {
        "body": "Let me summarize the thread so far because it is quite lengthy: Basically Microsoft teams are telling us that they are not able to provide a working build tool in the year 2018 because of reasons ...\r\n\r\nAs a side note: No problems with path lengths under Cygwin ... that suggests that this issue is very msbuild specific.\r\n\r\n",
        "createdAt": "2018-05-19T19:19:30Z",
        "updatedAt": "2018-05-19T19:24:19Z",
        "author": {
          "login": "michaelheilmann"
        }
      },
      {
        "body": "1996 called, they want their short paths back.\r\n\r\nSeriously though, I'm working on a workaround for this and I'm desperately trying to avoid my Java and PHP colleagues figuring out what I'm working on as my team will be mercilessly mocked. By PHP developers! They have like 10 years of mocking to pay back. \r\n\r\nPlease guys, fix this before somebody on the other camps finds out.",
        "createdAt": "2018-06-18T10:20:52Z",
        "updatedAt": "2018-06-18T10:20:52Z",
        "author": {
          "login": "skiryazov"
        }
      },
      {
        "body": "See also: https://github.com/dotnet/sdk/issues/2132",
        "createdAt": "2018-07-20T20:49:02Z",
        "updatedAt": "2018-07-20T20:49:02Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "I ran into this again today. Apparently, globbing will produce items for files that exceed MAX_PATH, but when those items are passed to built-in tasks such as `<Copy>`, MSBuild chokes.\r\n\r\n> error MSB3030: Could not copy the file \"C:\\src\\aspnet\\Coherence-Signed\\obj\\UnsignedPackages\\Microsoft.AspNetCore.AzureAppServices.SiteExtension.2.2.0-preview1-35029\\content\\store\\x64\\netcoreapp2.2\\microsoft.aspnetcore.azureappservices.hostingstartup\\2.2.0-preview1-35029\\lib\\netcoreapp2.1\\Microsoft.AspNetCore.AzureAppServices.HostingStartup.dll\" because it was not found.\r\n\r\nMy workaround: https://gist.github.com/natemcmaster/1622db9d42156a306d16da8b1dafc795",
        "createdAt": "2018-08-23T16:02:32Z",
        "updatedAt": "2018-08-23T16:02:32Z",
        "author": {
          "login": "natemcmaster"
        }
      },
      {
        "body": " @ccastanedaucf \r\nThis may be addressed by #3503? Either way it's still a work in progress. We're getting closer, but there are still some fundamental \"this string probably isn't a file because it's so long\" logic to weed out in MSBuild.",
        "createdAt": "2018-08-23T17:22:54Z",
        "updatedAt": "2018-08-23T17:22:54Z",
        "author": {
          "login": "AndyGerlicher"
        }
      },
      {
        "body": "`\"this string probably isn't a file because it's so long\" logic to weed out in MSBuild.`\r\nWow, thanks for sharing a pointer to the root cause of all our Windows suffering. There's not only logic to weed out, but also the related developers and managers which find this acceptable to get shipped to millions of people for tens of years to come!",
        "createdAt": "2018-08-27T06:20:54Z",
        "updatedAt": "2018-08-27T06:20:54Z",
        "author": {
          "login": "mdealer"
        }
      },
      {
        "body": "What I was referring to was pretty specific to MSBuild and not necessarily a root cause for the larger ecosystem. And I get the frustration, we are affected by this here as well. But there are a lot of barriers for this particular problem for it to be fully solved. For example:\r\nhttps://github.com/search?q=MAX_PATH&type=Code\r\n\r\nThat search alone has over 1M code hits. Through a modern lens I don't think you'll get an argument from anyone that this was a good idea, but we are trying to address it. Our hope is to have all of these solved for MSBuild in our codebase for the next major release. Unfortunately, even that may not fully help you if one of your dependencies still has path limits.",
        "createdAt": "2018-08-27T19:58:29Z",
        "updatedAt": "2018-08-27T19:58:29Z",
        "author": {
          "login": "AndyGerlicher"
        }
      },
      {
        "body": "I get that MSBuild is just part of the problem but we'll never find out what the rest of the problems are until MSBuild gets out of the way **first** by supporting long paths.  ",
        "createdAt": "2018-09-28T18:51:22Z",
        "updatedAt": "2018-09-28T18:51:22Z",
        "author": {
          "login": "rkeithhill"
        }
      },
      {
        "body": "I encountered this problem while using the `<Copy>` task which fails for paths with length > MAX_PATH. I ended up using a Nuget package [MSBuildTasks](https://github.com/loresoft/msbuildtasks) which had a `<RoboCopy>` task which can handle MAX_PATH. Would be good to have this support natively in `<Copy>`.\r\n",
        "createdAt": "2018-10-01T07:13:30Z",
        "updatedAt": "2018-10-01T07:14:20Z",
        "author": {
          "login": "sanchitabrol"
        }
      },
      {
        "body": "When this will be fixed?",
        "createdAt": "2018-11-08T21:22:05Z",
        "updatedAt": "2018-11-08T21:22:05Z",
        "author": {
          "login": "imakowski"
        }
      },
      {
        "body": "16.0 / VS 2019 seems like a good opportunity to get this in.. given that msbuild (and VS?) now targets 4.7.2 instead of 4.6.\r\nAt least having https://github.com/Microsoft/msbuild/pull/3503 would be great.",
        "createdAt": "2018-11-09T02:22:21Z",
        "updatedAt": "2018-11-09T02:22:21Z",
        "author": {
          "login": "dasMulli"
        }
      },
      {
        "body": "![image](https://user-images.githubusercontent.com/20357531/49163294-beb3cb80-f2fa-11e8-91f3-28908af9d3c0.png)\r\n",
        "createdAt": "2018-11-28T15:45:45Z",
        "updatedAt": "2018-11-28T15:45:45Z",
        "author": {
          "login": "tsibiski"
        }
      },
      {
        "body": "I'm currently using Git with a few nested submodules for an enterprise project. Trying to build a project in the deepest nested submodule (depth 2) is already throwing the path length error. When issues like these limit the separation of responsibilities and the structure of your project overall, really sucks.",
        "createdAt": "2018-11-29T10:39:51Z",
        "updatedAt": "2018-11-29T10:39:51Z",
        "author": {
          "login": "robinabganpat"
        }
      },
      {
        "body": "This bug will be fixed in year 201.  Oops I assigned only 3 characters for handling years!",
        "createdAt": "2018-12-29T17:23:31Z",
        "updatedAt": "2019-01-23T18:44:54Z",
        "author": {
          "login": "mvsrinivasan"
        }
      },
      {
        "body": "Who developed this stuff? A high school computer science graduate? \r\nWhat is the easiest way to hack it? I cannot believe my build is stuck because of a long path. Unbelievable",
        "createdAt": "2019-01-23T02:30:21Z",
        "updatedAt": "2019-01-23T18:44:41Z",
        "author": {
          "login": "elielia"
        }
      },
      {
        "body": "@elielia : Try creating symlinks with shorter path pointing to your actual long paths. ",
        "createdAt": "2019-01-23T04:53:26Z",
        "updatedAt": "2019-01-23T04:53:26Z",
        "author": {
          "login": "mvsrinivasan"
        }
      },
      {
        "body": "@elielia, one approach is to use good old [subst](https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/subst) command to create a virtual drive from project directory and reset the nesting. Run MSBuild in the virtual drive and delete the drive afterwards:\r\n\r\n```powershell\r\n#!/usr/bin/env pwsh\r\n\r\nsubst W: c:\\work\\git\\myLib\r\n\r\nPush-Location W:\\\r\nmsbuild /p:Configuration=Release myLib.sln\r\nPop-Location\r\n\r\nsubst W: /d\r\n```",
        "createdAt": "2019-01-23T09:45:47Z",
        "updatedAt": "2019-01-23T09:45:47Z",
        "author": {
          "login": "am11"
        }
      },
      {
        "body": "These workarounds are the same as saying \"well, just checkout your repo directly into your C: drive\"; they don't help when your repository's inner structure exceeds the limit.\r\n\r\nYes, you could also refactor the repo so that it stays within the limit but - guess what - we've already thought of that and it's far from ideal.",
        "createdAt": "2019-01-23T11:31:08Z",
        "updatedAt": "2019-01-23T11:31:08Z",
        "author": {
          "login": "skiryazov"
        }
      },
      {
        "body": "Another solution - just use the proper build system, something like CMake\r\nor similar. Coupled with Ninja and clang-cl (supposing you are using C/C++) it will greatly [surprise](http://blog.llvm.org/2018/11/30-faster-windows-builds-with-clang-cl_14.html) you,\r\nlike it did [Google Chrome](http://blog.llvm.org/2018/03/clang-is-now-used-to-build-chrome-for.html) and [Mozilla Firefox](https://groups.google.com/forum/m/#!topic/mozilla.dev.platform/wwO48xXFx0A) developers, addionally\r\nprovide you helpful tools like ASAN, UBSAN, etc.",
        "createdAt": "2019-01-23T11:41:12Z",
        "updatedAt": "2019-01-24T02:56:07Z",
        "author": {
          "login": "XVilka"
        }
      },
      {
        "body": "> \r\n> Another solution - just use the proper build system, something like CMake or similar. Coupled with Ninja and clang-cl (supposing you are using C/C++) it will greatly [surprise](http://blog.llvm.org/2018/11/30-faster-windows-builds-with-clang-cl_14.html) you, like it did [Google Chrome](http://blog.llvm.org/2018/03/clang-is-now-used-to-build-chrome-for.html) and [Mozilla Firefox](https://groups.google.com/forum/m/#!topic/mozilla.dev.platform/wwO48xXFx0A) developers, addionally provide you helpful tools like ASAN, UBSAN, etc.\r\n\r\nWell, the first time I encountered this issue was exactly when migrating to CMake.  CMake certainly is a great asset, and CMake makes working around the problem more tractable than other tools, but the problem is not eliminated simply by using CMake. Just saying, for that people do not see CMake as the a golden bullet, it still generates project files for msbuild after all.",
        "createdAt": "2019-01-24T23:53:56Z",
        "updatedAt": "2019-01-24T23:53:56Z",
        "author": {
          "login": "michaelheilmann"
        }
      },
      {
        "body": "Modern CMake can generate ninja files instead.\n\nOn Fri, Jan 25, 2019, 7:54 AM Michael Heilmann <notifications@github.com\nwrote:\n\n> Another solution - just use the proper build system, something like CMake\n> or similar. Coupled with Ninja and clang-cl (supposing you are using C/C++)\n> it will greatly surprise\n> <http://blog.llvm.org/2018/11/30-faster-windows-builds-with-clang-cl_14.html>\n> you, like it did Google Chrome\n> <http://blog.llvm.org/2018/03/clang-is-now-used-to-build-chrome-for.html>\n> and Mozilla Firefox\n> <https://groups.google.com/forum/m/#!topic/mozilla.dev.platform/wwO48xXFx0A>\n> developers, addionally provide you helpful tools like ASAN, UBSAN, etc.\n>\n> Well, the first time I encountered this issue was exactly when migrating\n> to CMake. CMake certainly is a great asset, and CMake makes working around\n> the problem more tractable than other tools, but the problem is not\n> eliminated simply by using CMake. Just saying, for that people do not see\n> CMake as the a golden bullet, it still generates project files for msbuild\n> after all.\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/Microsoft/msbuild/issues/53#issuecomment-457403021>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AAMZ_SK2pEH67yk4b0NMbt68kUZqk8ITks5vGkefgaJpZM4D3alK>\n> .\n>\n",
        "createdAt": "2019-01-25T00:19:51Z",
        "updatedAt": "2019-01-25T00:19:51Z",
        "author": {
          "login": "XVilka"
        }
      },
      {
        "body": "> \r\n> \r\n> What I was referring to was pretty specific to MSBuild and not necessarily a root cause for the larger ecosystem. And I get the frustration, we are affected by this here as well. But there are a lot of barriers for this particular problem for it to be fully solved. For example:\r\n> https://github.com/search?q=MAX_PATH&type=Code\r\n> \r\n> That search alone has over 1M code hits. Through a modern lens I don't think you'll get an argument from anyone that this was a good idea, but we are trying to address it. Our hope is to have all of these solved for MSBuild in our codebase for the next major release. Unfortunately, even that may not fully help you if one of your dependencies still has path limits.\r\n\r\nPut it waaaay up in the prio list and start working. 1M code hits... Jesus... It'll be totally fine if it won't work at first. We'll let you know how it goes in any case.",
        "createdAt": "2019-01-25T17:46:58Z",
        "updatedAt": "2019-01-25T17:46:58Z",
        "author": {
          "login": "mdealer"
        }
      },
      {
        "body": "# `MAX_PATH` in MSBuild 16.0\r\n\r\ntl;dr: Install [Visual Studio 2019 Preview 2](https://visualstudio.microsoft.com/vs/preview/), [enable long paths](https://blogs.msdn.microsoft.com/jeremykuhne/2016/07/30/net-4-6-2-and-long-paths-on-windows-10/), and things are slightly better.\r\n\r\n## What's changed\r\n\r\nAs of Visual Studio 2019 Preview 2 (which includes MSBuild 16.0.360-preview), `MSBuild.exe` now (as of https://github.com/Microsoft/msbuild/pull/3507) opts into support for long paths.\r\n\r\nThis is dependent on .NET Framework, operating system, and host-executable support, so there is a big prerequisite: **you must [enable long paths](https://blogs.msdn.microsoft.com/jeremykuhne/2016/07/30/net-4-6-2-and-long-paths-on-windows-10/) in Windows** by using Group Policy or setting a registry key. There's [Windows documentation](https://docs.microsoft.com/en-us/windows/desktop/fileio/naming-a-file#maximum-path-length-limitation) about the registry key.\r\n\r\n## Does that mean things work?\r\n\r\nNo, for all the reasons detailed in comments above: just because _MSBuild_ works, doesn't mean _your build_ will, because many other tools are involved.\r\n\r\n`devenv.exe`, the main Visual Studio process, does not yet opt into support. That means only command-line builds will be affected by the MSBuild changes.\r\n\r\n## Where should I follow up?\r\n\r\nIf you encounter a long-path problem with a specific executable, tool, or task, ideally report it to the owner of that tool. For instance, I filed https://github.com/dotnet/roslyn/issues/32804 because the C# and VB compilers need to make similar changes to what MSBuild did.\r\n\r\nIf the task is shipped from this repo, please file a new issue in this repo.\r\n\r\nThe overall \"Visual Studio should support long paths\" item is https://developercommunity.visualstudio.com/idea/351628/allow-building-running-and-debugging-a-net-applica.html.",
        "createdAt": "2019-01-30T18:49:41Z",
        "updatedAt": "2019-01-30T18:49:41Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I'm going to close this as \"done as much as we can do for 16.0\". See the comment above for the many caveats involved, and what to do if you find a specific MAX_PATH problem.",
        "createdAt": "2019-02-06T22:49:31Z",
        "updatedAt": "2019-02-06T22:49:31Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Agreed. We're clearly interested in addressing the issue, but we can't drive issues that are stated that broadly.",
        "createdAt": "2019-02-07T02:56:29Z",
        "updatedAt": "2019-02-07T02:56:29Z",
        "author": {
          "login": "terrajobst"
        }
      },
      {
        "body": "@rainersigwald @KathleenDollard @mairaw Can we include the info from [Rainer's comment](https://github.com/Microsoft/msbuild/issues/53#issuecomment-459062618) in the Dev16 release notes and documentation?",
        "createdAt": "2019-02-07T03:07:02Z",
        "updatedAt": "2019-02-07T03:07:02Z",
        "author": {
          "login": "dsplaisted"
        }
      },
      {
        "body": "> tl;dr: Install [Visual Studio 2019 Preview 2](https://visualstudio.microsoft.com/vs/preview/), [enable long paths](https://blogs.msdn.microsoft.com/jeremykuhne/2016/07/30/net-4-6-2-and-long-paths-on-windows-10/), and things are slightly better\r\n\r\nIs there a standalone MSBuild Tools equivalent to this?  I've been able to avoid installing VS on my 10+ build agents so far and I don't plan on starting now with a preview release just to fix this silly problem.",
        "createdAt": "2019-06-25T19:36:57Z",
        "updatedAt": "2019-06-25T19:36:57Z",
        "author": {
          "login": "tcrosen"
        }
      },
      {
        "body": "@rainersigwald was this expected to be fixed in both the 32bit and 64bit (amd64\\msbuild.exe) msbuild binaries? I am getting interesting behavior wherein the 64 bit version throws this error:\r\n\r\n```\r\n\"S:\\Builds\\GenerateInterop-60R39\\WorkingDirectory\\src\\Dotnet\\Source\\Framework\\Interop\\Project\\ComputersUnlimited.Interop.sln\" (Restore target) (1) ->\r\n(Restore target) ->\r\n  C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\\Common7\\IDE\\CommonExtensions\\Microsoft\\NuGet\\NuGet.targets(121,5): error : The specified path, file name, or both are too long. The fully qualified file name must be less than 260 characters, and the directory name must be less than 248 characters. [S:\\Builds\\GenerateInterop-60R39\\WorkingDirectory\\src\\Dotnet\\Source\\Framework\\Interop\\Project\\ComputersUnlimited.Interop.sln]\r\n```\r\n\r\nWhereas using the 32bit version has no such qualms (restores and builds without issue).\r\n\r\nHere's the version from the 64bit and 32bit versions (same):\r\n```\r\nMicrosoft (R) Build Engine version 16.1.76+g14b0a930a7 for .NET Framework\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n```\r\n\r\n I can open a new issue if need be but wanted to start here. If this is something I need to get off to the NuGet guys I can do that as well.",
        "createdAt": "2019-07-16T20:17:22Z",
        "updatedAt": "2019-07-16T20:17:22Z",
        "author": {
          "login": "aolszowka"
        }
      },
      {
        "body": "Has anyone ever seen/verified, that this fix still works?\r\n\r\nI enabled long paths in gpedit.\r\nI checked msbuild.exe resource stuff, still fine.\r\nI use MSBuild v16.2, but the long path issues still exists.\r\n\r\n\"...maximale Pfadlimit des Betriebssystems. Der vollqualifizierte Dateiname muss weniger als 260 Zeichen umfassen\"\r\n\r\nThe issue occurs inside a build-system, which handles the paths (directory-names a.s.o.) by itself, no way/easy way to change them.",
        "createdAt": "2019-12-17T15:24:40Z",
        "updatedAt": "2019-12-17T15:27:13Z",
        "author": {
          "login": "mahaase"
        }
      },
      {
        "body": "@mahaase same problem here. 32bit is still working, 64bit does show the max_path error. Tested with newest visual studio build tools on newest windows 10. Thanks for the tip with 32bit. I was nearly giving up and taking myself to a knit.",
        "createdAt": "2020-04-03T14:04:31Z",
        "updatedAt": "2020-04-03T14:04:31Z",
        "author": {
          "login": "inf9144"
        }
      },
      {
        "body": "@rainersigwald could you please reopen this ticket because of the bug in 64bit?",
        "createdAt": "2020-04-07T16:19:23Z",
        "updatedAt": "2020-04-07T16:19:23Z",
        "author": {
          "login": "inf9144"
        }
      },
      {
        "body": "I think this should be a new issue, with specifics about 64-bit not working as expected",
        "createdAt": "2020-04-07T17:09:01Z",
        "updatedAt": "2020-04-07T17:09:01Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "> \r\n> \r\n> I think this should be a new issue, with specifics about 64-bit not working as expected\r\n\r\nI opened a new ticket for 64-bit variant. I hope the issue will solved soon, now. This bug is a show-stopper. ",
        "createdAt": "2020-05-04T08:20:16Z",
        "updatedAt": "2020-05-04T08:20:16Z",
        "author": {
          "login": "mahaase"
        }
      },
      {
        "body": "Worth linking to it: https://github.com/microsoft/msbuild/issues/5331",
        "createdAt": "2020-05-04T12:08:21Z",
        "updatedAt": "2020-05-04T12:08:21Z",
        "author": {
          "login": "Piedone"
        }
      },
      {
        "body": "Hi, I'm facing the issue with path limit using AWS codebuild (meaning buildspec.yml file) , msbuild and with docker image (mcr.microsoft.com/dotnet/framework/sdk, https://hub.docker.com/_/microsoft-dotnet-framework-sdk).\r\nAny suggestion to make it work using only powershell/cmd command ?\r\nmore documentation : \r\nhttps://aws.amazon.com/fr/blogs/devops/creating-ci-cd-pipelines-for-asp-net-4-x-with-aws-codepipeline-and-aws-elastic-beanstalk/\r\n",
        "createdAt": "2020-10-14T08:21:49Z",
        "updatedAt": "2020-10-14T08:23:12Z",
        "author": {
          "login": "brignolij"
        }
      },
      {
        "body": "@brignolij I'm sorry, I don't know whether the container hosts need the long-path configuration, or just the container images. If setting the [registry key](https://docs.microsoft.com/windows/win32/fileio/maximum-file-path-limitation#enable-long-paths-in-windows-10-version-1607-and-later) inside the container doesn't work, I think you'd have to ask AWS support.",
        "createdAt": "2020-10-14T14:58:48Z",
        "updatedAt": "2020-10-14T14:58:48Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald Thanks for your answer. \r\nI already have a issue open with AWS support, they suggest me to check on msbuild support. I have a project with long path. (lot of files ,folders). So i really want to make it work with long path.\r\ni test this following command into my buildsepc\r\n`Set-ItemProperty 'HKLM:\\System\\CurrentControlSet\\Control\\FileSystem' -Name 'LongPathsEnabled' -value 1`\r\nbut this command requiere a system restart to be effective and this not possible on build system like awscodebuild.\r\nI'm open to any suggestion. \r\nAlso is application manifest file required for .net framework mvc app? \r\nis yes where should we add  ?\r\n```\r\n<application xmlns=\"urn:schemas-microsoft-com:asm.v3\">\r\n    <windowsSettings xmlns:ws2=\"http://schemas.microsoft.com/SMI/2016/WindowsSettings\">\r\n        <ws2:longPathAware>true</ws2:longPathAware>\r\n    </windowsSettings>\r\n</application>\r\n```\r\n\r\nRegards",
        "createdAt": "2020-10-15T08:50:40Z",
        "updatedAt": "2020-10-15T09:43:25Z",
        "author": {
          "login": "brignolij"
        }
      },
      {
        "body": "> @rainersigwald was this expected to be fixed in both the 32bit and 64bit (amd64\\msbuild.exe) msbuild binaries? I am getting interesting behavior wherein the 64 bit version throws this error:\r\n> \r\n> ```\r\n> \"S:\\Builds\\GenerateInterop-60R39\\WorkingDirectory\\src\\Dotnet\\Source\\Framework\\Interop\\Project\\ComputersUnlimited.Interop.sln\" (Restore target) (1) ->\r\n> (Restore target) ->\r\n>   C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\\Common7\\IDE\\CommonExtensions\\Microsoft\\NuGet\\NuGet.targets(121,5): error : The specified path, file name, or both are too long. The fully qualified file name must be less than 260 characters, and the directory name must be less than 248 characters. [S:\\Builds\\GenerateInterop-60R39\\WorkingDirectory\\src\\Dotnet\\Source\\Framework\\Interop\\Project\\ComputersUnlimited.Interop.sln]\r\n> ```\r\n> \r\n> Whereas using the 32bit version has no such qualms (restores and builds without issue).\r\n> \r\n> Here's the version from the 64bit and 32bit versions (same):\r\n> \r\n> ```\r\n> Microsoft (R) Build Engine version 16.1.76+g14b0a930a7 for .NET Framework\r\n> Copyright (C) Microsoft Corporation. All rights reserved.\r\n> ```\r\n> \r\n> I can open a new issue if need be but wanted to start here. If this is something I need to get off to the NuGet guys I can do that as well.\r\n\r\nI just had the same problem.\r\n```\r\nC:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\\MSBuild\\Current\\Bin\\amd64\\MSBuild.exe\r\n\r\nMicrosoft (R) Build Engine version 16.9.0+57a23d249 for .NET Framework\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n```\r\nfails with 'path too long' while\r\n```\r\nC:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\\MSBuild\\Current\\Bin\\MSBuild.exe\r\n\r\nMicrosoft (R) Build Engine version 16.9.0+57a23d249 for .NET Framework\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n```\r\n(without `\\amd64`) works perfectly for the same .sln.",
        "createdAt": "2021-03-18T13:18:46Z",
        "updatedAt": "2021-03-18T13:18:46Z",
        "author": {
          "login": "PhDittmann"
        }
      },
      {
        "body": "Ran into this issue with a report to the `pipenv` backlog that I triaged:  `pip install fastchunking` on windows fails outright with this: https://github.com/pypa/pip/issues/11231\r\n\r\nhttps://docs.microsoft.com/en-us/cpp/error-messages/tool-errors/linker-tools-error-lnk1104?view=msvc-170#paths-that-are-too-long\r\n\r\nI have enabled the registry key for Windows 10 long paths, but the 2019 Visual Studio linker don't care about that.  Is there any path of resolution other than move the temp directory to a shorter path so that hopefully the compiled file path lengths don't exceed 260?",
        "createdAt": "2022-07-06T06:55:58Z",
        "updatedAt": "2022-07-06T06:55:58Z",
        "author": {
          "login": "matteius"
        }
      },
      {
        "body": "Same problem here - unsure why this was closed. ",
        "createdAt": "2023-06-17T15:06:49Z",
        "updatedAt": "2023-06-17T15:06:49Z",
        "author": {
          "login": "hsdk123"
        }
      },
      {
        "body": "@hsdk123 please file a new bug with details of the problem you're seeing.",
        "createdAt": "2023-06-19T13:51:31Z",
        "updatedAt": "2023-06-19T13:51:31Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "The current versions of MSBuild long-path aware in the manifest:\r\n\r\n```\r\n  <application xmlns=\"urn:schemas-microsoft-com:asm.v3\">\r\n      <windowsSettings xmlns:ws2=\"http://schemas.microsoft.com/SMI/2016/WindowsSettings\">\r\n          <ws2:longPathAware>true</ws2:longPathAware>\r\n      </windowsSettings>\r\n  </application>\r\n```\r\n\r\nI'm not sure *WHEN* this was added...",
        "createdAt": "2023-06-22T16:48:08Z",
        "updatedAt": "2023-06-22T16:48:08Z",
        "author": {
          "login": "walbourn"
        }
      },
      {
        "body": "@walbourn https://github.com/dotnet/msbuild/issues/53#issuecomment-459062618.\r\n\r\nI'm going to lock this thread, since the core issues are long fixed and anything that crops up now should get a new issue.",
        "createdAt": "2023-06-22T17:01:42Z",
        "updatedAt": "2023-06-22T17:01:42Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}