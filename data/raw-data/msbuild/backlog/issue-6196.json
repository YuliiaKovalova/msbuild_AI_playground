{
  "number": 6196,
  "title": "Expand Item Metadata in Item Functions",
  "body": "Based on my testing, it is possible to use MSBuild properties in Item Functions, as in this example project:\r\n\r\n```xml\r\n<SomeItem Include=\"path/to/file.VERSION.ext\" />\r\n<SomeItemWithProp Include=\"@(SomeItem->Replace('VERSION', $(Version)))\" />\r\n```\r\n\r\nHowever, it is _not_ possible to use _item metadata_ in Item Functions, as in this example project:\r\n\r\n```xml\r\n<SomeItem Include=\"path/to/file.VERSION.ext\" Version=\"1.2.3\" />\r\n<SomeItemWithMetadata Include=\"@(SomeItem->Replace('VERSION', %(Version)))\" />\r\n<SomeItemWithMetadata Include=\"@(SomeItem->Replace('VERSION', Metadata('Version')))\" />\r\n```\r\n\r\nThe `SomeItemWithMetadata` items will be `path/to/file.%(VERSION).ext` and `path/to/file.Metadata('Version').ext`, resp.\r\n\r\nI think this feature would be generally useful, but let me briefly explain my use case: I am writing managed plugins for the Unity game engine. The C# projects for these plugins need to reference Unity assemblies stored in \"packages\", which Unity stores in a folder called `PackageCache`. There, every package is in a folder called `com.unity.packageName@<version>` where `<version>` is a SemVer string. I want to define MSBuild properties for some of the common assembly/package paths, for reuse between C# projects. So, ideally, I would like my projects to look as follows (with `Project` tags ommitted...):\r\n\r\n```xml\r\n<!-- Shared .props file, imported at top of .csproj files -->\r\n<PropertyGroup>\r\n    <UnityPackageCachePath>./relative/path/to/Unity/project/Library/PackageCache</UnityPackageCachePath>\r\n    <CommonUnityAssemblyAPath>com.unity.packageA@VERSION/sufolders/SomeAssemblyA.dll</CommonUnityAssemblyAPath>\r\n    <CommonUnityAssemblyBPath>com.unity.packageB@VERSION/sufolders/SomeAssemblyB.dll</CommonUnityAssemblyBPath>\r\n</PropertyGroup>\r\n\r\n<!-- Example .csproj file -->\r\n<ItemGroup>\r\n    <UnityReference Include=\"$(CommonUnityAssemblyAPath)\" Version=\"1.2.3\" />\r\n    <UnityReference Include=\"$(CommonUnityAssemblyBPath)\" Version=\"4.5.6\" />\r\n</ItemGroup>\r\n\r\n<!-- Shared .targets file, imported at bottom of .csproj files -->\r\n<ItemGroup>\r\n    <Reference Include=\"@(UnityReference->Replace('VERSION', '%(Version)'))\" Private=\"false\" />\r\n</ItemGroup>\r\n```",
  "state": "OPEN",
  "createdAt": "2021-02-25T03:40:25Z",
  "updatedAt": "2024-01-31T08:21:54Z",
  "closedAt": null,
  "author": {
    "login": "Rabadash8820"
  },
  "labels": [
    "needs-design",
    "Area: Language",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Backlog"
  },
  "comments": {
    "nodes": [
      {
        "body": "#### Alternate Solution: If you're familiar with MSBuild and know how to write custom targets and tasks\r\n\r\nWhat you need to do is, write a custom target `ResolveUnityReferences` that runs before/after (_depends on your needs_) `ResolveReferences` built-in target, in which a custom task that resolves `UnityReference` to `Reference` and/or `ReferencePath` items.",
        "createdAt": "2021-02-27T18:56:07Z",
        "updatedAt": "2021-02-27T18:56:07Z",
        "author": {
          "login": "Nirmal4G"
        }
      },
      {
        "body": "@Nirmal4G Thanks for the suggestion. I did try that, however there's one problem: any `Reference` items created by a Task will not show in the VS Solution Explorer. Because these .props/.targets file are shared between other teams, I would really prefer to give them that visual indicator that a Reference has been added, so the whole process feels less \"automagic\". If I use a literal string in the example project file above, then the `Reference` Items show in the Solution Explorer just fine, so I would really like this behavior to work with `%(Metadata)`.",
        "createdAt": "2021-02-27T19:29:29Z",
        "updatedAt": "2021-02-27T19:29:29Z",
        "author": {
          "login": "Rabadash8820"
        }
      },
      {
        "body": "Any reason this Issue still hasn't been triaged?",
        "createdAt": "2021-04-12T04:21:43Z",
        "updatedAt": "2021-04-12T04:21:43Z",
        "author": {
          "login": "Rabadash8820"
        }
      }
    ]
  }
}