{
  "number": 4210,
  "title": "csproj: Target/Exec regression in VS 2019",
  "body": "### Steps to reproduce\r\n\r\nExtract [CSharpExec.zip](https://github.com/Microsoft/msbuild/files/2932260/CSharpExec.zip).\r\n\r\nAt a VS 2019 RC x64 command prompt with the working directory set to the extracted folder:\r\n\r\n```console\r\n>msbuild CSharpExec.csproj -p:Configuration=Debug -p:VisualStudioVersion=16.0\r\n```\r\n\r\nObserve the build failure.\r\n\r\n### Expected  behavior\r\n\r\nIt is expected to build successfully, as it does at a VS 2017 x64 command prompt:\r\n\r\n```console\r\n>msbuild -version\r\n...\r\n15.9.21.664\r\n\r\n>msbuild CSharpExec.csproj -p:Configuration=Debug -p:VisualStudioVersion=15.0\r\nMicrosoft (R) Build Engine version 15.9.21+g9802d43bc3 for .NET Framework\r\n...(no errors)...\r\n```\r\n\r\n### Actual behavior\r\n\r\nThe build fails at a VS 2019 RC x64 command prompt:\r\n\r\n```console\r\n>msbuild -version\r\n...\r\n16.0.443.30039\r\n\r\n>msbuild CSharpExec.csproj -p:Configuration=Debug -p:VisualStudioVersion=16.0\r\nMicrosoft (R) Build Engine version 16.0.443+g5775d0d6bb for .NET Framework\r\n...\r\n  echo Generating test.cs\r\n  Generating test.cs\r\n  setlocal copy test.cs.in test.cs ...\r\n  Invalid parameter to SETLOCAL command\r\n  ...\r\nC:\\...\\CSharpExec.csproj(44,5): error MSB3073: The command \"setlocal copy test.cs.in test.cs ...\" exited with code 1.\r\n```\r\n",
  "state": "CLOSED",
  "createdAt": "2019-03-05T18:36:48Z",
  "updatedAt": "2024-02-21T17:09:01Z",
  "closedAt": "2019-03-12T16:10:56Z",
  "author": {
    "login": "bradking"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "rainersigwald"
      }
    ]
  },
  "milestone": {
    "title": "MSBuild 16.0"
  },
  "comments": {
    "nodes": [
      {
        "body": "Cc: @jgoshi",
        "createdAt": "2019-03-05T18:37:15Z",
        "updatedAt": "2019-03-05T18:37:15Z",
        "author": {
          "login": "bradking"
        }
      },
      {
        "body": "Thank you Brad. Adding @rainersigwald @livarcocc ",
        "createdAt": "2019-03-05T18:43:35Z",
        "updatedAt": "2019-03-05T18:43:35Z",
        "author": {
          "login": "jgoshi"
        }
      },
      {
        "body": "This appears to have been caused by Microsoft/msbuild#3584, because of an underlying difference in how `XmlReader` and `XmlTextReader `treat whitespace in attributes. The straightforward fix would be to back out that change, at the cost of some GC-pressure problems (that existed in v15). I can\u2019t at the moment see a fix that preserves the current memory behavior but has better whitespace behavior.",
        "createdAt": "2019-03-05T19:02:20Z",
        "updatedAt": "2019-03-05T19:02:20Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "https://github.com/Microsoft/msbuild/blob/404bb795a7a25b4465b0d48d4357c40ac4b3cf61/src/Build/Xml/XmlReaderExtension.cs#L83-L89\r\n\r\nSetting `IgnoreWhitespace = false` here is insufficent; by the time the engine is thinking about creating the task, it's already gotten a whitespace-normalized (newlines mapped to single spaces) copy of the attribute. Only switching back to the `XmlTextReader` implementation restored the expected multiline behavior.",
        "createdAt": "2019-03-05T19:07:00Z",
        "updatedAt": "2019-03-05T19:07:00Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald is a possible fix to use explicit escaped carriage returns in the xml project files generated by CMake, i.e. `&#10;` ? I have created [this PR](https://gitlab.kitware.com/cmake/cmake/merge_requests/3065) on CMake here.",
        "createdAt": "2019-03-05T19:18:34Z",
        "updatedAt": "2019-03-05T19:18:34Z",
        "author": {
          "login": "lukka"
        }
      },
      {
        "body": "@lukka That's a great workaround that appears to work fine in my simplified repro:\r\n\r\n```xml\r\n<Project>\r\n  <Target\r\n    Name=\"test_cs_debug\">\r\n    <!-- <Exec Command=\"echo Generating test.cs\" /> -->\r\n    <Exec Command=\"setlocal&#10;\r\ncopy test.cs.in test.cs&#10;\r\nif %errorlevel% neq 0 goto :cmEnd&#10;\r\n:cmEnd&#10;\r\nendlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone&#10;\r\n:cmErrorLevel&#10;\r\nexit /b %1&#10;\r\n:cmDone&#10;\r\nif %errorlevel% neq 0 goto :VCEnd\" />\r\n  </Target>\r\n</Project>\r\n```\r\n\r\nBut ideally we'd fix the MSBuild behavior change; it wasn't intentional.",
        "createdAt": "2019-03-05T19:22:11Z",
        "updatedAt": "2019-03-05T19:22:11Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Another possible workaround here is to use a property instead of defining the script directly in the Command attribute:\r\n\r\n```xml\r\n<Project>\r\n  <PropertyGroup>\r\n    <CommandToCreateFile>setlocal\r\ncopy test.cs.in test.cs\r\nif %errorlevel% neq 0 goto :cmEnd\r\n:cmEnd\r\nendlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone\r\n:cmErrorLevel\r\nexit /b %1\r\n:cmDone\r\nif %errorlevel% neq 0 goto :VCEnd</CommandToCreateFile>\r\n  </PropertyGroup>\r\n  <Target\r\n    Name=\"test_cs_debug\">\r\n    <!-- <Exec Command=\"echo Generating test.cs\" /> -->\r\n    <Exec Command=\"$(CommandToCreateFile)\" />\r\n  </Target>\r\n</Project>\r\n```",
        "createdAt": "2019-03-06T15:08:58Z",
        "updatedAt": "2019-03-06T15:08:58Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> https://github.com/Microsoft/msbuild/blob/404bb795a7a25b4465b0d48d4357c40ac4b3cf61/src/Build/Xml/XmlReaderExtension.cs#L83-L89\r\n> \r\n> Setting `IgnoreWhitespace = false` here is insufficent; by the time the engine is thinking about creating the task, it's already gotten a whitespace-normalized (newlines mapped to single spaces) copy of the attribute. Only switching back to the `XmlTextReader` implementation restored the expected multiline behavior.\r\n\r\n@krwq Is there anything else we can do than use XmlTextReader and lose the perf benefit of ignoring comments?",
        "createdAt": "2019-03-07T22:08:05Z",
        "updatedAt": "2019-03-07T22:08:05Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "I can't remember anything about this, but XmlTextReader, like many of the major Xml types, is rich with virtual methods. Is it possible to make a more efficient one (dumping comments) by selectively overriding bits?\r\n\r\n[edit] analogous to `ProjectWriter : XmlTextWriter`",
        "createdAt": "2019-03-08T02:06:48Z",
        "updatedAt": "2019-03-08T16:55:36Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "@danmosemsft I hope so, and plan to look into that . . . after 16.0. I'm worried about changing that sort of thing at this point in the release cycle. Reactivated #2576 and assigned it to 16.1.",
        "createdAt": "2019-03-08T15:31:51Z",
        "updatedAt": "2019-03-08T15:31:51Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I'm going to merge this and prepare an insertion-to-VS PR. Don't let that stop anyone from describing a brilliant scoped fix that tweaks XmlReader behavior, should you come up with one!",
        "createdAt": "2019-03-08T16:35:04Z",
        "updatedAt": "2019-03-08T16:35:04Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Have you perhaps tried putting the script in the explicit CDATA i.e.:\r\n\r\n```\r\n<CommandToCreateFile>\r\n<![CDATA[\r\nyour script goes here\r\n]]>\r\n</CommandToCreateFile>\r\n```\r\n\r\n(haven't tried but usually XML parsers treat it as a single blob and don't touch the content - this won't work directly in the attribute though)\r\n\r\nGenerally XML spec allows XML parsers for quite a bit of freedom for handling white spaces and especially new lines (perhaps too much) - I think the only reasonable option to force any behavior to be exactly as desired is do what @danmosemsft has suggested above. Note wrapping XmlReader/Write is quite wide-spread in the XML implementation so I believe that is the right way to go.",
        "createdAt": "2019-03-08T23:09:32Z",
        "updatedAt": "2019-03-08T23:09:32Z",
        "author": {
          "login": "krwq"
        }
      },
      {
        "body": "CDATA is a good idea but I don't think it helps here, since putting the command in a property and referencing the property already works around the attribute-newline difference.\r\n\r\nThis fix was approved for 16.0 and has been checked into an internal VS branch. If you see something like it and your MSBuild version is higher than 16.0.452, please yell loudly.\r\n\r\nThanks for reporting @bradking!",
        "createdAt": "2019-03-12T16:10:56Z",
        "updatedAt": "2019-03-12T16:10:56Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}