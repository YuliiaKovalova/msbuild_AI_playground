{
  "number": 8205,
  "title": "Consider adding a `WithoutMetadataValue` msbuild item function",
  "body": "The following set of [item functions](https://learn.microsoft.com/en-us/visualstudio/msbuild/item-functions?view=vs-2022) allow to condition on or filter items based on metadata:\r\n- AnyHaveMetdataValue\r\n- HasMetadata\r\n- WithMetadataValue\r\n\r\nThese functions make it super simple to include items or condition based on metadata during evaluation time, without the need of batching (inside a target).\r\n\r\nOver the last years I often wished that there would also be a `WithoutMetadataValue` item function so that the following pattern wouldn't require an extra target:\r\n\r\n```xml\r\n<Target Name=\"GetCompileFilteredItems\">\r\n  <ItemGroup>\r\n    <CompileFiltered Include=\"@(Compile->WithMetadataValue('ExcludeFromX', ''))\" />\r\n    <CompileFiltered Include=\"@(Compile->WithMetadataValue('ExcludeFromX', 'false'))\" />\r\n  </ItemGroup>\r\n</Target>\r\n\r\n<Target Name=\"X\"\r\n             Inputs=\"@(CompileFiltered)\"\r\n             Outputs=\"...\"\r\n             DependsOnTargets=\"GetCompileFilteredItems\">\r\n  ...\r\n</Target>\r\n```\r\n\r\nInstead, with a `WithoutMetadtaValue` item function, the filtering can happen just in-time without a separate target.\r\n```xml\r\n<Target Name=\"X\"\r\n             Inputs=\"@(Compile->WithoutMetadataValue('ExcludeFromX', 'true'))\"\r\n             Outputs=\"...\">\r\n  ...\r\n</Target>\r\n```",
  "state": "CLOSED",
  "createdAt": "2022-12-01T08:22:20Z",
  "updatedAt": "2024-02-26T16:43:55Z",
  "closedAt": "2023-06-27T01:52:43Z",
  "author": {
    "login": "ViktorHofer"
  },
  "labels": [
    "Good First Issue",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "JaynieBai"
      }
    ]
  },
  "milestone": {
    "title": "VS 17.8"
  },
  "comments": {
    "nodes": [
      {
        "body": "I'd like to do this. Assigned it to me now.",
        "createdAt": "2022-12-06T06:40:10Z",
        "updatedAt": "2022-12-06T06:40:10Z",
        "author": {
          "login": "JaynieBai"
        }
      },
      {
        "body": "Here\uff0cwe expect to return the items which don't have the metadata value when the metadata name is given. For example\uff0c we expect message with **[One|Three]**  when build the following project? @ViktorHofer  right?   In order to do this, we need to extract metadata name from the item and compare with given metadta name.             [GetMetadataEscaped(string metadataName)](https://github.com/dotnet/msbuild/blob/06231decdb6530a9e98d752f2a90661f66e7a229/src/Build/Instance/ProjectItemInstance.cs#L1265)  return the same empty string between \"metadata not present\" and \"present but set to null or the empty string\". Just like the issue https://github.com/dotnet/msbuild/issues/1030#issuecomment-247372036.   \r\n\r\nAny thoughts, please let me know?\r\n```<Project xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\r\n\t<ItemGroup>\r\n\t\t<_Item Include=\"One\">\r\n\t\t\t<A>true</A>\r\n\t\t</_Item>\r\n\t\t<_Item Include=\"Two\">\r\n\t\t\t<A>false</A>\r\n\t\t</_Item>\r\n\t\t<_Item Include=\"Three\">\r\n\t\t\t<A></A>\r\n\t\t</_Item>\r\n\t\t<_Item Include=\"Four\">\r\n\t\t\t<B></B>\r\n\t\t</_Item>\r\n\t</ItemGroup>\r\n\r\n\t<Target Name=\"AfterBuild\">\r\n\t\t<Message Text=\" [@(_Item->WithoutMetadataValue('A', 'false'), '|')]\"/>\r\n\t</Target>\r\n</Project>```",
        "createdAt": "2022-12-27T09:47:27Z",
        "updatedAt": "2022-12-27T10:29:09Z",
        "author": {
          "login": "JaynieBai"
        }
      },
      {
        "body": "> Here\uff0cwe expect to return the items which don't have the metadata value when the metadata name is given. For example\uff0c we expect message with [One|Three] when build the following project?\r\n\r\nI would expect `WithoutMetadataValue` to return the inverse of `WithMetadataValue`. In your above example, the following output would be printed: `[One|Three|Four]`.",
        "createdAt": "2022-12-28T09:21:52Z",
        "updatedAt": "2022-12-28T09:22:06Z",
        "author": {
          "login": "ViktorHofer"
        }
      },
      {
        "body": "> > Here\uff0cwe expect to return the items which don't have the metadata value when the metadata name is given. For example\uff0c we expect message with [One|Three] when build the following project?\r\n> \r\n> I would expect `WithoutMetadataValue` to return the inverse of `WithMetadataValue`. In your above example, the following output would be printed: `[One|Three|Four]`.\r\n\r\nI see. Thank you. In my above example,when we want to `<Message Text=\" [@(_Item->WithoutMetadataValue('A', ''), '|')]\"/>`, it will print `[One|Two|Four]`. \r\n\r\nOur current [GetMetadataEscaped(string metadataName)](https://github.com/dotnet/msbuild/blob/06231decdb6530a9e98d752f2a90661f66e7a229/src/Build/Instance/ProjectItemInstance.cs#L1265) both GetMetadataEscaped(\"A\") between \"metadata not present\" and \"present but set to null or the empty string\" \r\nreturn emtpy.  @rainersigwald  just as you say in the issue https://github.com/dotnet/msbuild/issues/1030#issuecomment-247372036. MSBuild can't distinguish between \"nonexistent\" and null, but fixing that is a much larger project.  what's your opinion now?",
        "createdAt": "2022-12-29T11:18:21Z",
        "updatedAt": "2023-02-06T03:15:30Z",
        "author": {
          "login": "JaynieBai"
        }
      },
      {
        "body": "@ViktorHofer's target `X` could be written as follows to eliminate the `GetCompileFilteredItems` target:\r\n\r\n```XML\r\n<Target Name=\"X\"\r\n             Inputs=\"@(Compile->WithMetadataValue('ExcludeFromX', ''));@(Compile->WithMetadataValue('ExcludeFromX', 'false'))\"\r\n             Outputs=\"...\">\r\n  ...\r\n</Target>\r\n```\r\n\r\nBut having a `WithoutMetadataValue` item function would be cleaner and more readable.",
        "createdAt": "2023-01-14T17:50:49Z",
        "updatedAt": "2023-01-14T17:50:49Z",
        "author": {
          "login": "jrdodds"
        }
      },
      {
        "body": "MSBuild can distinguish between \"metadata not present\" and \"metadata present but set to an empty value\" because the metadata names are known. See the [`MetadataNames` property](https://learn.microsoft.com/en-us/dotnet/api/microsoft.build.framework.itaskitem.metadatanames?view=msbuild-17). But the implementations of the Item functions don't handle the distinction.\r\n\r\nStarting from @JaynieBai's example code, here are a set of tests of item functions:\r\n\r\n```XML\r\n<Project xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\r\n\r\n  <ItemGroup>\r\n    <_Item Include=\"One\">\r\n      <A>true</A>\r\n    </_Item>\r\n    <_Item Include=\"Two\">\r\n      <A>false</A>\r\n    </_Item>\r\n    <_Item Include=\"Three\">\r\n      <A></A>\r\n    </_Item>\r\n    <_Item Include=\"Four\">\r\n      <B></B>\r\n    </_Item>\r\n  </ItemGroup>\r\n\r\n  <Target Name=\"Tests\" DependsOnTargets=\"WithMetadataValueAFalse;WithMetadataValueAEmpty;HasMetadataA;AnyHaveMetadataValueBEmpty;HasMetadataC;AnyHaveMetadataValueCEmpty;WithMetadataValueANotTrue\" />\r\n\r\n  <Target Name=\"WithMetadataValueAFalse\">\r\n    <Message Text=\" [@(_Item->WithMetadataValue('A', 'false'), '|')]\"/>\r\n  </Target>\r\n\r\n  <Target Name=\"WithMetadataValueAEmpty\">\r\n    <Message Text=\" [@(_Item->WithMetadataValue('A', ''), '|')]\"/>\r\n  </Target>\r\n\r\n  <Target Name=\"HasMetadataA\">\r\n    <Message Text=\" [@(_Item->HasMetadata('A'), '|')]\"/>\r\n  </Target>\r\n\r\n  <Target Name=\"AnyHaveMetadataValueB\">\r\n    <Message Text=\" [@(_Item->AnyHaveMetadataValue('B', ''), '|')]\"/>\r\n  </Target>\r\n\r\n  <Target Name=\"AnyHaveMetadataValueBEmpty\">\r\n    <Message Text=\" [@(_Item->AnyHaveMetadataValue('B', ''), '|')]\"/>\r\n  </Target>\r\n\r\n  <Target Name=\"HasMetadataC\">\r\n    <Message Text=\" [@(_Item->HasMetadata('C'), '|')]\"/>\r\n  </Target>\r\n\r\n  <Target Name=\"AnyHaveMetadataValueCEmpty\">\r\n    <Message Text=\" [@(_Item->AnyHaveMetadataValue('C', ''), '|')]\"/>\r\n  </Target>\r\n\r\n  <Target Name=\"WithMetadataValueANotTrue\">\r\n    <ItemGroup>\r\n      <_Temp Include=\"@(_Item->WithMetadataValue('A', ''));@(_Item->WithMetadataValue('A', 'false'))\"/>\r\n    </ItemGroup>\r\n    <Message Text=\" [@(_Temp, '|')]\"/>\r\n  </Target>\r\n\r\n</Project>\r\n```\r\n\r\nThe output is:\r\n\r\n```\r\nWithMetadataValueAFalse:\r\n   [Two]\r\nWithMetadataValueAEmpty:\r\n   [Three|Four]\r\nHasMetadataA:\r\n   [One|Two]\r\nAnyHaveMetadataValueBEmpty:\r\n   [true]\r\nHasMetadataC:\r\n   []\r\nAnyHaveMetadataValueCEmpty:\r\n   [true]\r\nWithMetadataValueANotTrue:\r\n   [Three|Four|Two]\r\nDone Building Project \"C:\\Users\\jrdodds\\source\\itemfunctions.proj\" (default targets).\r\n```\r\n\r\nNote that `_Item->WithMetadataValue('A', '')` returns `Three;Four` and `_Item->HasMetadata('A')` returns `One;Two`. If the functions distinguished between present and not present, the outputs might reasonably be `Three` and `One;Two;Three`.\r\n\r\nNote that `_Item->HasMetadata('C')` return no items but `_Item->AnyHaveMetadataValue('C', '')` returns `true`, i.e. `AnyHaveMetadataValue` is `true` for metadata that doesn't exist.\r\n\r\nI view the apparent choice to not distinguish between existent but empty and non-existent as counter-productive but there could be a lot of code that depends on the current behavior of the current item functions.",
        "createdAt": "2023-01-14T18:27:32Z",
        "updatedAt": "2023-01-14T18:27:32Z",
        "author": {
          "login": "jrdodds"
        }
      }
    ]
  }
}