{
  "number": 10715,
  "title": "[Bug]: Msbuild drops glob based Item on Unix only",
  "body": "### Issue Description\r\n\r\n`<NuspecProperty Include=\"Output=$(PublishDir)**\\*\" />` in [efcore's `dotnet-ef.csproj`](https://github.com/dotnet/efcore/blob/a0443c1460e33f76094a30dc5ae0524743ed02f5/src/dotnet-ef/dotnet-ef.csproj#L82-L97) (`SetPackageProperties` target) yields different results on Windows and Linux. On Windows, this item is passed cleanly through to the Nuspec generation and pack, yielding the correct pack contents. On Linux, the item is dropped entirely.\r\n\r\nEscaping the *s with %2A works.\r\n\r\n### Steps to Reproduce\r\n\r\nBuild the efcore repo on Windows and Linux and compare the contents of the dotnet-ef package.\r\n\r\n### Expected Behavior\r\n\r\n![image](https://github.com/user-attachments/assets/a9a61317-5d99-4d1b-a794-7cd1c76caa62)\r\n\r\n\r\n### Actual Behavior\r\n\r\nAll dotnet-ef* files are missing.\r\n\r\n### Analysis\r\n\r\n_No response_\r\n\r\n### Versions & Configurations\r\n\r\n8.0.1xx SDK and 9.0.1xx SDKs exhibit the behavior.",
  "state": "CLOSED",
  "createdAt": "2024-09-27T21:49:42Z",
  "updatedAt": "2025-03-19T21:57:11Z",
  "closedAt": "2025-03-19T19:03:49Z",
  "author": {
    "login": "mmitche"
  },
  "milestone": null,
  "assignees": {
    "nodes": [
      {
        "login": "JanProvaznik"
      }
    ]
  },
  "labels": [
    "bug",
    "Priority:2",
    "triaged"
  ],
  "comments": {
    "nodes": [
      {
        "body": "I suspect that on Windows we're hitting some I/O error and it's falling back to \"must be a string literal instead\" (#406) but I don't understand why (we checked offline for MAX_PATH) and I don't understand how it's evaluating to _nothing_ on Linux. We need to debug the execution I think.",
        "createdAt": "2024-09-27T21:53:54Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Investigation:\nThe item is attempted to be expaned in ItemGroupIntrinsicTask. On windows a path heuristic catches that it's invalid.\nThe call stack that creates the difference:\n```\n\tMicrosoft.Build.dll!Microsoft.Build.Shared.FileMatcher.RawFileSpecIsValid(string filespec) Line 1617\tC#\n \tMicrosoft.Build.dll!Microsoft.Build.Shared.FileMatcher.GetFileSpecInfo(string filespec, out string fixedDirectoryPart, out string wildcardDirectoryPart, out string filenamePart, out bool needsRecursion, out bool isLegalFileSpec, Microsoft.Build.Shared.FileMatcher.FixupParts fixupParts) Line 1550\tC#\n \tMicrosoft.Build.dll!Microsoft.Build.Shared.FileMatcher.GetFileSearchData(string projectDirectoryUnescaped, string filespecUnescaped, out bool stripProjectDirectory, out Microsoft.Build.Shared.FileMatcher.RecursionState result) Line 2058\tC#\n \tMicrosoft.Build.dll!Microsoft.Build.Shared.FileMatcher.GetFilesImplementation(string projectDirectoryUnescaped, string filespecUnescaped, System.Collections.Generic.List<string> excludeSpecsUnescaped) Line 2379\tC#\n \tMicrosoft.Build.dll!Microsoft.Build.Shared.FileMatcher.GetFiles(string projectDirectoryUnescaped, string filespecUnescaped, System.Collections.Generic.List<string> excludeSpecsUnescaped) Line 1921\tC#\n \tMicrosoft.Build.dll!Microsoft.Build.Internal.EngineFileUtilities.GetFileList(string directoryEscaped, string filespecEscaped, bool returnEscaped, bool forceEvaluateWildCards, System.Collections.Generic.IEnumerable<string> excludeSpecsEscaped, Microsoft.Build.Shared.FileMatcher fileMatcher, object loggingMechanism, Microsoft.Build.Shared.IElementLocation includeLocation, Microsoft.Build.Shared.IElementLocation excludeLocation, Microsoft.Build.Shared.IElementLocation importLocation, Microsoft.Build.Framework.BuildEventContext buildEventContext, string buildEventFileInfoFullPath, bool disableExcludeDriveEnumerationWarning) Line 341\tC#\n \tMicrosoft.Build.dll!Microsoft.Build.Internal.EngineFileUtilities.GetFileListEscaped(string directoryEscaped, string filespecEscaped, System.Collections.Generic.IEnumerable<string> excludeSpecsEscaped, bool forceEvaluate, Microsoft.Build.Shared.FileMatcher fileMatcher, object loggingMechanism, Microsoft.Build.Shared.IElementLocation includeLocation, Microsoft.Build.Shared.IElementLocation excludeLocation, Microsoft.Build.Shared.IElementLocation importLocation, Microsoft.Build.Framework.BuildEventContext buildEventContext, string buildEventFileInfoFullPath, bool disableExcludeDriveEnumerationWarning) Line 116\tC#\nMicrosoft.Build.dll!Microsoft.Build.BackEnd.ItemGroupIntrinsicTask.ExpandItemIntoItems(Microsoft.Build.Execution.ProjectItemGroupTaskItemInstance originalItem, Microsoft.Build.Evaluation.Expander<Microsoft.Build.Execution.ProjectPropertyInstance, Microsoft.Build.Execution.ProjectItemInstance> expander, System.Collections.Generic.ISet<string> keepMetadata, System.Collections.Generic.ISet<string> removeMetadata, Microsoft.Build.BackEnd.Logging.LoggingContext loggingContext) Line 448\tC#\nMicrosoft.Build.dll!Microsoft.Build.BackEnd.ItemGroupIntrinsicTask.ExecuteAdd(Microsoft.Build.Execution.ProjectItemGroupTaskItemInstance child, Microsoft.Build.BackEnd.ItemBucket bucket, System.Collections.Generic.ISet<string> keepMetadata, System.Collections.Generic.ISet<string> removeMetadata, Microsoft.Build.BackEnd.Logging.LoggingContext loggingContext) Line 168\tC#\n```\nThere is a heuristic in `RawFileSpecIsValid` - filespecs that have `:` on a different place than 2nd character are invalid. The spec from the issue \n1. on windows is: `Output=D:\\efcore\\artifacts\\bin\\dotnet-ef\\Debug\\net8.0\\publish\\**\\*`, so this has `:` at a non2nd spot, is correctly labeled as invalid and the following logic stops trying to expand it and returns it as an item with the `*`s in text.\n2. On linux is: `Output=/home/janprovaznik/efcore/artifacts/bin/dotnet-ef/Debug/net8.0/publish/**\\\\*` the heuristic fails to catch that it's invalid, so it is expanded as if it were a real glob and matches no files -> nothing is added -> the item does not exist -> your complaint.\n\nThe workaround should be the permanent solution. Items that contain wildcard characters but aren't globs for files are not supported, it worked in windows by coincidence.\nSee the wording in the documentation: \n> MSBuild reserves some characters for special use in specific contexts. You only have to escape such characters if you want to use them literally in the context in which they are reserved. For example, an asterisk has special meaning only in the Include and Exclude attributes of an item definition, and in calls to CreateItem. If you want an asterisk to appear as an asterisk in one of those contexts, **you must escape it**. In every other context, just type the asterisk where you want it to appear.\nhttps://learn.microsoft.com/en-us/visualstudio/msbuild/msbuild-special-characters?view=vs-2022",
        "createdAt": "2025-03-19T19:03:49Z",
        "author": {
          "login": "JanProvaznik"
        }
      },
      {
        "body": "This would be a good candidate for an analyzer.",
        "createdAt": "2025-03-19T19:07:45Z",
        "author": {
          "login": "baronfel"
        }
      }
    ]
  }
}