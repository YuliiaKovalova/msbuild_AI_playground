{
  "number": 6518,
  "title": "Rationalize behavior of `TestItemsWithUnexpandableMetadata`",
  "body": "Reenable the test `TestItemsWithUnexpandableMetadata`\r\nhttps://github.com/dotnet/msbuild/blob/46b723ba9ee9f4297d0c8ccbb6dc52e4bd8ea438/src/Build.UnitTests/ConsoleLogger_Tests.cs#L324\r\n\r\nBuild this project:\r\n\r\n```xml\r\n<Project DefaultTargets=\"Build\">\r\n\r\n  <ItemDefinitionGroup>\r\n    <F>\r\n      <MetadataFileName>a\\b\\%(Filename).c</MetadataFileName>\r\n    </F>\r\n  </ItemDefinitionGroup>\r\n\r\n  <ItemGroup>\r\n    <F Include=\"-in &quot;x\\y\\z&quot;\" />\r\n  </ItemGroup>\r\n\r\n <Target Name=\"Build\" />\r\n\r\n</Project>\r\n```\r\n\r\nThe diag console logger currently prints:\r\n```\r\nInitial Items:\r\nF\r\n    -in \"x\\y\\z\"\r\n        MetadataFileName = Cannot expand metadata in expression \"a\\b\\%(Filename).c\". The item metadata \"%(Filename)\" ca\r\nnnot be applied to the path \"-in \"x\\y\\z\"\". Illegal characters in path.\r\n```\r\n\r\nThe logger in unit-test `TestItemsWithUnexpandableMetadata` currently prints:\r\n```\r\nInitial Items:\r\nF\r\n    -in \"x\\y\\z\"\r\n        MetadataFileName = a\\b\\%(Filename).c\r\n```\r\n\r\nAnd I don't know why, nor do I know which behavior is better.",
  "state": "OPEN",
  "createdAt": "2021-06-04T05:41:35Z",
  "updatedAt": "2024-02-21T16:28:33Z",
  "closedAt": null,
  "author": {
    "login": "KirillOsenkov"
  },
  "labels": [
    "testing",
    "Disabled-Tests",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "KirillOsenkov"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "On main branch, here's how it gets to an invalid file char exception:\r\n\r\n```\r\nPath.CheckInvalidPathChars Line 1394\r\nPath.IsPathRooted Line 1190\r\nFileUtilities.ItemSpecModifiers.IsRootDirectory Line 617\r\nFileUtilities.ItemSpecModifiers.GetItemSpecModifier Line 426\r\nBuiltInMetadata.GetMetadataValueEscaped Line 83\r\nProjectItemInstance.TaskItem.GetBuiltInMetadataEscaped Line 1843\r\nProjectItemInstance.TaskItem.BuiltInMetadataTable.GetEscapedValue Line 2178\r\nProjectItemInstance.TaskItem.BuiltInMetadataTable.GetEscapedValueIfPresent Line 2204\r\nProjectItemInstance.TaskItem.BuiltInMetadataTable.GetEscapedValue Line 2189\r\nExpander`2.MetadataExpander.MetadataMatchEvaluator.ExpandSingleMetadata Line 1003\r\nRegexReplacement.Replace\r\nRegex.Replace\r\nRegex.Replace\r\nExpander`2.MetadataExpander.ExpandMetadataLeaveEscaped Line 870\r\nExpander`2.ExpandIntoStringLeaveEscaped Line 414\r\nProjectItemInstance.TaskItem.GetMetadataEscaped Line 1336\r\nProjectItemInstance.TaskItem.GetMetadata Line 1305\r\nBaseConsoleLogger.OutputItems Line 666\r\nBaseConsoleLogger.WriteItems Line 604\r\nSerialConsoleLogger.ProjectStartedHandler Line 273\r\nEventSourceSink.RaiseProjectStartedEvent Line 548\r\n```",
        "createdAt": "2021-06-04T06:08:49Z",
        "updatedAt": "2021-06-04T06:09:50Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "Then the exception bubbles up to here:\r\nhttps://github.com/dotnet/msbuild/blob/206d7ae3e6187e2d214041bf79719600ec197c56/src/Build/Logging/BaseConsoleLogger.cs#L668",
        "createdAt": "2021-06-04T06:11:41Z",
        "updatedAt": "2021-06-04T06:11:41Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "On `ProjectStartedEventArgs`, the item in Items is of type `ProjectItemInstance.TaskItem`, which implements `ITaskItem`, so calling `GetMetadata` and catching the exception works here. This doesn't hold for Items on `ProjectEvaluationFinished`, which have `ProjectItem` instead of `ProjectItemInstance.TaskItem`.",
        "createdAt": "2021-06-04T06:15:01Z",
        "updatedAt": "2021-06-04T06:15:59Z",
        "author": {
          "login": "KirillOsenkov"
        }
      }
    ]
  }
}