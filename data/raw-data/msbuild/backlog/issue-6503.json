{
  "number": 6503,
  "title": "Can only specify the first target in .sln with -target:",
  "body": "### Issue Description\r\n\r\nManually selecting all targets (with `-target:<tgt>`), except the first defined in the `.sln` file, fails. Here is the relevant part of the `.sln` file of our test case:\r\n\r\n```sln\r\nMicrosoft Visual Studio Solution File, Format Version 11.00\r\n# Visual Studio 2019\r\nProject(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"mylib@sha\", \"mylib@sha.vcxproj\", \"{8EFF312E-4085-49DC-86FA-49BEEE91A62D}\"\r\nEndProject\r\nProject(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"prog@exe\", \"prog@exe.vcxproj\", \"{C1DFC6DA-2639-4F2A-8A24-F8954D1A0B14}\"\r\nEndProject\r\nProject(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"mycpplib@sha\", \"mycpplib@sha.vcxproj\", \"{9ABCE8FB-2DA3-42AC-87B1-5B5D7E8E8445}\"\r\nEndProject\r\nProject(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"cppprog@exe\", \"cppprog@exe.vcxproj\", \"{EBFC5EC3-8620-4B68-BADD-33A5D68FDD5F}\"\r\nEndProject\r\n# Some more lines ...\r\n```\r\n\r\n### Steps to Reproduce\r\n\r\nOur failing test case: [6 linkshared.zip](https://github.com/dotnet/msbuild/files/6577466/6.linkshared.zip).\r\n\r\nRun:\r\n```ps1\r\nmsbuild -target:mylib_sha    '.\\build\\shared library linking test.sln'   # Works\r\nmsbuild -target:mycpplib_sha '.\\build\\shared library linking test.sln'   # Fails\r\n```\r\n\r\n### Expected Behavior\r\n\r\nBoth commands succeed.\r\n\r\n### Actual Behavior\r\n\r\nOnly the first command works. Running the second command generates `error MSB4057: The target \"mycpplib_sha\" does not exist in the project.` errors.\r\n\r\n### Analysis\r\n\r\nRemoving the first two `Project()` calls causes the second `msbuild` call to suddenly work, thus it is likely that the first target in the `.sln` file can be specified with `-target`.\r\n\r\n### Versions & Configurations\r\n\r\n- `msbuild -version`: 16.10.0.26302\r\n\r\nThe `.sln` file was generated by meson in our Azure CI. See https://github.com/mesonbuild/meson/pull/8512#issuecomment-852189987 for some more details.",
  "state": "CLOSED",
  "createdAt": "2021-06-01T15:45:23Z",
  "updatedAt": "2021-06-02T03:13:36Z",
  "closedAt": "2021-06-02T03:13:36Z",
  "author": {
    "login": "mensinda"
  },
  "labels": [
    "bug",
    "needs-triage"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "I see this issue [too](https://github.com/jimporter/bfg9000/runs/2714685267) (interestingly enough, meson and my project are doing about the same thing: testing generated project files from a higher-level build system).\r\n\r\nAfter debugging this for a while, it seems that this issue only applies to the command-line invocation of `msbuild`. Running from within Visual Studio works as expected in all cases (at least, all the cases I could think of). From some searching, I gather this is because VS doesn't actually use the command-line `msbuild`, and instead invokes it programmatically (via a library).",
        "createdAt": "2021-06-01T18:02:10Z",
        "updatedAt": "2021-06-01T18:02:10Z",
        "author": {
          "login": "jimporter"
        }
      },
      {
        "body": "I'm seeing this too, and it seems possibly related to #5722 as well.\r\n\r\nYou get pretty wildly different Metaproj generation when specifying either the first target, as noted in this issue, or no target at all\r\n```XML\r\n<Target Name=\"Installer\\Project_Product\" Outputs=\"@(Installer_Project_ProductBuildOutput)\">\r\n    <MSBuild Condition=\"'%(ProjectReference.Identity)' == 'C:\\Projects\\Product\\Tools\\Project.Product.HQ\\Project.Product.HQ.CustomAction\\Project.Product.HQ.CustomAction.csproj'\" ToolsVersion=\"$(ProjectToolsVersion)\" BuildInParallel=\"True\" Projects=\"@(ProjectReference)\" Properties=\"Configuration=Debug; Platform=x86;BuildingSolutionFile=true; CurrentSolutionConfigurationContents=$(CurrentSolutionConfigurationContents); SolutionDir=$(SolutionDir); SolutionExt=$(SolutionExt); SolutionFileName=$(SolutionFileName); SolutionName=$(SolutionName); SolutionPath=$(SolutionPath)\">\r\n      <Output TaskParameter=\"TargetOutputs\" ItemName=\"Installer_Project_ProductBuildOutput\" />\r\n    </MSBuild>\r\n</Target>\r\n```\r\nvs if you specify any of the later targets (e.g. ```msbuild project.sln /t:Installer\\Project_Product```):\r\n```XML\r\n<Target Name=\"Installer\\Project_Product\">\r\n\t<MSBuild BuildInParallel=\"True\" SkipNonexistentProjects=\"%(ProjectReference.SkipNonexistentProjects)\" Projects=\"@(ProjectReference)\" Targets=\"Installer\\Project_Product\" Properties=\"BuildingSolutionFile=true; CurrentSolutionConfigurationContents=$(CurrentSolutionConfigurationContents); SolutionDir=$(SolutionDir); SolutionExt=$(SolutionExt); SolutionFileName=$(SolutionFileName); SolutionName=$(SolutionName); SolutionPath=$(SolutionPath)\" />\r\n</Target>\r\n```\r\n\r\nI referenced #5722 because, interestingly enough, ```msbuild project.sln /t:Installer\\Project_Product:Clean``` and ```msbuild project.sln /t:Installer\\Project_Product:Rebuild``` still function just fine",
        "createdAt": "2021-06-02T00:00:35Z",
        "updatedAt": "2021-06-02T00:00:35Z",
        "author": {
          "login": "VonOgre"
        }
      },
      {
        "body": "I think this is a more interesting manifestation of the bug behind #6373. The fix will go out with VS 16.10.1 ASAP.",
        "createdAt": "2021-06-02T03:11:37Z",
        "updatedAt": "2021-06-02T03:11:37Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}