{
  "number": 1039,
  "title": "Create a NuGet package containing the MSBuild runtime",
  "body": "We need a NuGet package that customers can reference to load projects and evaluate properties/items or do in-proc builds.\n## Proposal\n\nCreate a new package containing the `.props`, `.targets`, and `.tasks` files needed for evaluating projects.  This will supersede the `Microsoft.Build.Targets' and`MSBuild` packages which we will deprecate.\n\nThe new package, `Microsoft.Build.Runtime` will have the following layout:\n\n```\ncontentFiles\n\u2514\u2500 any\n   \u251c\u2500 any\n   |  \u251c\u2500 15.0\n   |  |  \u2514 Microsoft.Common.props\n   |  \u2502  *.props\n   |  \u2502  *.targets\n   |  \u2514  *.tasks\n   \u251c\u2500 net46\n   |  \u2502  MSBuild.exe\n   |  \u2514  MSBuild.exe.config\n   \u2514\u2500 netcoreapp1.0\n      \u2514  MSBuild.exe\n```\n\nThis will place what we consider to be the core MSBuild runtime into the end user's output directory.  \n## Scenarios\n### .NET Core via `dotnet run`\n\nIn this scenario, the CLR loads assemblies from their NuGet package location.  This means that our BuildEnvironmentHelper will need to be updated to look in `AppContext.BaseDirectory` instead of the directory containing `Microsoft.Build.dll`.\n### .NET Core via `dotnet publish`\n\nThis command places all dependencies in a folder named 'publish' and when running an application from this folder, the assemblies are loaded from that directory.  The `AppContext.BaseDirectory` is still the correct place to use as MSBuild directory.\n### .NET Framework via building against net46\n\nNuGet copies all of the referenced assemblies and content files to the output directory.  The `BuildEnvironmentHelper` can remain the same for this scenario and use the directory containing `Microsoft.Build.dll` as the MSBuild directory.\n### Visual Studio\n\nThe `BuildEnvironmentHelper` already looks for the MSBuild directory based on the process name being `devenv.exe` or the `VSINSTALLDIR` environment variable.  This means that extensions within Visual Studio or the Visual Studio Developer Command Prompt will use the MSBuild that ships with Visual Studio and won't need to redistribute the MSBuild runtime.\n### In-proc builds and project evaluation\n\nNot everything will work when building or evaluating projects.  This is because some build logic comes from various teams.  This includes building Azure cloud projects, C++ projects, FSharp, etc.  These teams will need to provide a package that users can reference along with the `Microsoft.Build.Runtime` package that will give them all of the required functionality to evaluate or build their projects.\n## Tasks\n- [x] Update `BuildEnvironmentHelper` to look in `AppContext.BaseDirectory` for .NET Core (#1069)\n- [ ] Create a `.nuspec` that will package up the intended `.props`, `.targets`, and `.tasks` as well as `MSBuild.exe` (#1080)\n- [ ] Discuss the secondary packages with teams like Roslyn that would allow customers to build projects\n### Related issues\n\nThis new package should fix the following issues:\n- #1000 Internal MSBuild Error: could not load type Microsoft.Build.Utilities.ToolLocationHelper\n- #882 Microsoft.Common.props should be contained in a \"15.0\" directory\n- #872 MSBuild package doesn't contain MSBuild.exe.config\n\nIt is also related to:\n- #712 Deployment of targets with MSBuild\n- #356 Create packages to easily acquire and use .NET Core MSBuild\n- #354 Create NuGet package with portable targets files\n- #353 Create NuGet package with .NET Core Roslyn tasks and targets\n- #195 Targets, props, and tasks required for selfhost build should come from NuGet packages\n",
  "state": "CLOSED",
  "createdAt": "2016-09-16T16:21:29Z",
  "updatedAt": "2024-02-21T17:25:54Z",
  "closedAt": "2016-09-26T21:18:03Z",
  "author": {
    "login": "jeffkl"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "jeffkl"
      }
    ]
  },
  "milestone": {
    "title": "Visual Studio 15 Preview 5"
  },
  "comments": {
    "nodes": [
      {
        "body": "I see it's not mentioned above, but was consideration given to the scenario of a DotNetCli tools that need to evaluate a project? e.g. ASP.NET CLI tools \n",
        "createdAt": "2016-09-23T22:05:58Z",
        "updatedAt": "2016-09-23T22:05:58Z",
        "author": {
          "login": "natemcmaster"
        }
      },
      {
        "body": "Yes sorry we consider in-process builds and project evaluation to be the same thing.  So any tool that wants to evaluate a project should be able to reference this package and do project evaluation.  I've tested it out and it works for very basic scenarios.  You must have all of the imports available so we'll probably need to work with other teams to ensure they have packages available for users to reference so that then end up with everything needed to evaluate and build projects.\n\nI have updated the design above to mention project evaluation.\n",
        "createdAt": "2016-09-23T22:12:46Z",
        "updatedAt": "2016-09-23T22:13:58Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "Ok thanks for clarifying.\n",
        "createdAt": "2016-09-23T22:15:58Z",
        "updatedAt": "2016-09-23T22:15:58Z",
        "author": {
          "login": "natemcmaster"
        }
      },
      {
        "body": "I see the PR was merged. Should this be closed at some point?\n",
        "createdAt": "2016-09-26T21:16:28Z",
        "updatedAt": "2016-09-26T21:16:28Z",
        "author": {
          "login": "DustinCampbell"
        }
      },
      {
        "body": "Yeah sorry I was leaving it open while I did some more testing.  I'll close it for now.\n",
        "createdAt": "2016-09-26T21:18:03Z",
        "updatedAt": "2016-09-26T21:18:03Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "Out of curiosity, is this published anywhere yet? I didn't see it in the [dotnet-buildtools](https://dotnet.myget.org/gallery/dotnet-buildtools) feed.\n",
        "createdAt": "2016-09-26T21:20:50Z",
        "updatedAt": "2016-09-26T21:20:50Z",
        "author": {
          "login": "DustinCampbell"
        }
      },
      {
        "body": "@jeffkl which feed is the \"Microsoft.Build.Runtime\" package pushed to?\n",
        "createdAt": "2016-09-26T21:21:16Z",
        "updatedAt": "2016-09-26T21:21:16Z",
        "author": {
          "login": "natemcmaster"
        }
      },
      {
        "body": "Sorry I'm fixing the versioning of the package and then I'll be publishing it.  We had done some work in `master` and are getting that merged into `xplat` so that our packages don't collide.  I'm working on a change right now and hope to publish the packages in the morning.\n",
        "createdAt": "2016-09-26T22:11:07Z",
        "updatedAt": "2016-09-26T22:11:07Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "I have pushed the runtime package to our MSBuild MyGet feed: https://dotnet.myget.org/feed/msbuild/package/nuget/Microsoft.Build.Runtime/15.1.262-preview5\n\nI'll work on getting daily builds pushed there.  Let me know if you have any issues with the package.\n",
        "createdAt": "2016-09-27T04:06:18Z",
        "updatedAt": "2016-09-27T04:06:18Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "I'm going to try the package shortly. Should this be uploaded to https://dotnet.myget.org/gallery/dotnet-buildtools? That's where we're currently grabbing MSBuild packages from.\n",
        "createdAt": "2016-09-28T15:51:42Z",
        "updatedAt": "2016-09-28T15:51:42Z",
        "author": {
          "login": "DustinCampbell"
        }
      },
      {
        "body": "@DustinCampbell by request of the CLI team, we're moving away from the build-tools feed into our own. Unfortunately, right now we're in an awkward transition phase where you might need both.\n",
        "createdAt": "2016-09-28T15:54:07Z",
        "updatedAt": "2016-09-28T15:54:07Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Sounds good. I just wanted to check. I have no worries about changing feeds.\n",
        "createdAt": "2016-09-28T15:56:35Z",
        "updatedAt": "2016-09-28T15:56:35Z",
        "author": {
          "login": "DustinCampbell"
        }
      },
      {
        "body": "So far, I've been unable to successfully add a dependency on this package. It sends OmniSharp restore into fits:\n\nhttps://github.com/OmniSharp/omnisharp-roslyn/blob/dev/src/OmniSharp.MSBuild/project.json\n",
        "createdAt": "2016-09-28T18:05:35Z",
        "updatedAt": "2016-09-28T18:05:35Z",
        "author": {
          "login": "DustinCampbell"
        }
      },
      {
        "body": "Just switching the feed without moving to the new package results in all manner of package downgrades, such as System.Collections from 4.0.11 to 4.0.11-rc3-24128-00 \n",
        "createdAt": "2016-09-28T18:29:09Z",
        "updatedAt": "2016-09-28T18:29:09Z",
        "author": {
          "login": "DustinCampbell"
        }
      }
    ]
  }
}