{
  "number": 3778,
  "title": "Version Update for Visual Studio \"16\"",
  "body": "We need to address versioning concerns with the next major Visual Studio version (\"16\", currently our `master` branch). This proposal outlines our current thinking on what to do to minimize impact to customers and partner teams. Unfortunetely since VisualStudioVersion is revving, even doing nothing will be breaking.\r\n\r\n## Proposal\r\n* File Version: 16.0.32.32432\u2026 16.1.56.3455... etc.  [**Completed**. Not breaking]\r\n  * This has already been updated. Should be no negative impact to customers.\r\n* Assembly Version: 15.1.0.0 [**Completed**. No change from Dev15]\r\n  * This will not rev to avoid customer binding redirect impact.\r\n  * Updating this would have very little positive impact other than to look better.\r\n* VisualStudioVersion: `15.0` -> `16.0` [**Potential Impact**]\r\n  * Potential impact, but needs to change to keep in sync with the environment variable set by VS.\r\n* ToolsVersion: `15.0` -> `Current`  [**Potential Impact**]\r\n  * Changing to 16.0 is a potential break for customer content, so we will have to add \"fallback\" logic (see below).\r\n  * Leaving at 15.0 breaks some user imports that may use ToolsVersion where VisualStudioVersion would have been a better choice.\r\n  * Changing to `Current` breaks the cycle of having to change on every release.\r\n \r\n* Install Location: `<VSRoot>\\MSBuild\\Current\\Bin\\MSBuild.exe`    [**Definite Impact**]\r\n  * Remaining at `15.0` is already impacting teams internally and will break assumptions.\r\n  * Changing to `16.0` will impact partner teams (i.e. NuGet).\r\n  * Changing to `Current` is better than hard coding a new numeric value that will change next release.\r\n  * Adding `Current` to the install path retains relative paths used by MSBuild and others.\r\n \r\n### Required Actions:\r\n\r\n- [x] Update MSBuild to use `Current`\r\n- [ ] Update MSBuild fallback logic to reduce breaking change impact.\r\n- [ ] Update vswhere example (from `15.0` hard coded to `Current`).\r\n- [x] Update MSBuildLocator\r\n- [x] Inform partner teams of the change\r\n \r\n## Fallback Logic\r\nCustomer may be importing $(MSBuildExtensionsPath)\\$(ToolsVersion). To not cause a breaking change, we will add fallback so that ToolsVerison will resolve to $(MSBuildExtensionsPath)\\Current or $(MSBuildExtensionsPath)\\15.0. We have an existing mechanism to support this.\r\n \r\n## Customer Changes\r\n \r\nFinding MSBuild (Install Location Change)\r\nAnyone who wants to find MSBuild will need to update. For example:\r\nhttps://github.com/Microsoft/vswhere#example\r\n \r\nMost examples hard code `15.0`. This proposal would require them to update to `Current` to continue to work.\r\n \r\nKnown examples that hard-code the path:\r\n* NuGet\r\n* MSBuildLocator (owned by MSBuild team and recommended to find MSBuild)\r\n \r\n \r\nInstalling Targets / Extensions\r\nAnyone who is dropping files into <VSRoot>\\ \u2026 \\ $(VS_Major_Version) and importing them as `$(ToolsVersion)` will continue to work (see fallback), but they should update to use either VisualStudioVersion, `Current`, or drop the versioning entirely for instanced components (preferred).\r\n",
  "state": "CLOSED",
  "createdAt": "2018-09-20T16:37:19Z",
  "updatedAt": "2024-02-21T17:11:07Z",
  "closedAt": "2019-02-06T23:36:56Z",
  "author": {
    "login": "AndyGerlicher"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "MSBuild 16.0"
  },
  "comments": {
    "nodes": [
      {
        "body": "I have a PR out now for the first round of changes (#3779).\r\n\r\n@jaredpar the Roslyn setup will need to be updated at the same time since it installs to `15.0\\...` and needs to be changed to `Current\\...`.\r\n\r\n@rrelyea I assume this will also impact NuGet locating MSBuild?",
        "createdAt": "2018-09-20T21:47:35Z",
        "updatedAt": "2018-09-20T21:47:35Z",
        "author": {
          "login": "AndyGerlicher"
        }
      },
      {
        "body": "@rohit21agrawal - can you please dig into our dev branch for the issue Andy raises?",
        "createdAt": "2018-09-20T22:57:48Z",
        "updatedAt": "2018-09-20T22:57:48Z",
        "author": {
          "login": "rrelyea"
        }
      },
      {
        "body": "The NuGet side work is tracked here. \r\nhttps://github.com/NuGet/Home/issues/7325\r\n\r\nIt should only be NuGet.exe that's impacted. \r\n\r\n//cc @rainersigwald ",
        "createdAt": "2018-09-24T23:00:23Z",
        "updatedAt": "2018-09-24T23:00:37Z",
        "author": {
          "login": "nkolev92"
        }
      },
      {
        "body": "Not that it is up to me, but can somebody please explain why the assembly version is not updated to Version 16?",
        "createdAt": "2018-10-18T20:11:03Z",
        "updatedAt": "2018-10-18T20:11:03Z",
        "author": {
          "login": "MeikTranel"
        }
      },
      {
        "body": "> ToolsVersion: 15.0 -> Current [Potential Impact]\r\n> - Changing to Current breaks the cycle of having to change on every release.\r\n\r\nThis is going to break folks who expect MSBuildToolsVersion to be numerical version.  I don't believe we've ever publicly shipped a value for this that wasn't a numerical version.  Are you sure you want to do this?\r\n\r\nHave a look at this github search to get an idea of how many people you're likely to break:\r\nhttps://github.com/search?l=XML&q=MSBuildToolsVersion&type=Code",
        "createdAt": "2018-11-20T23:59:50Z",
        "updatedAt": "2018-11-20T23:59:50Z",
        "author": {
          "login": "ericstj"
        }
      },
      {
        "body": "@MeikTranel because every time that VS version revs, we end up having to make a non-trivial amount of changes in order to react to that. With the move to current, this then becomes a noop for us.\r\n\r\n@ericstj at this point, the change is in and lots of teams have actually spent time reacting to it already. It would not be easy to pull out at this point.",
        "createdAt": "2018-11-21T01:01:42Z",
        "updatedAt": "2018-11-21T01:01:42Z",
        "author": {
          "login": "livarcocc"
        }
      },
      {
        "body": "> at this point, the change is in and lots of teams have actually spent time reacting to it already. It would not be easy to pull out at this point.\r\n\r\nSeems like the sunk cost fallacy.  I'm probably missing the benefit of this breaking change.  It seems to me that we're just trying to hack something that was originally designed to be side-by-side to no longer be side-by-side. ",
        "createdAt": "2018-11-21T01:15:52Z",
        "updatedAt": "2018-11-21T01:15:52Z",
        "author": {
          "login": "ericstj"
        }
      },
      {
        "body": "@livarcocc Oh i'm not specifically mad about about the ToolsVersion. I just think it's messed up that the AssemblyVersion is not being moved up to 16? 15->Current is fine in my books... but 15.1 to 15.1 while the FileVersion as the overall version of the release moves to 16 is gonna wreak havoc for everybody trying to wrap their head around MSBuild Versions.",
        "createdAt": "2018-11-21T10:45:20Z",
        "updatedAt": "2018-11-21T10:45:20Z",
        "author": {
          "login": "MeikTranel"
        }
      },
      {
        "body": "Changing the AssemblyVersion has undesirable downstream effects:\r\n\r\n* All consumers must update their binding redirects to point to the new version.\r\n* It becomes difficult or impossible to write an application that uses the MSBuild API that is compatible with either Visual Studio 2017 and Visual Studio 2019, depending on which is installed on the users machine.\r\n\r\nI agree that it's unfortunate to leave the version at 15.1.0.0 forever. Ideally it'd rev in a more-understandable way. But since we already have to leave it alone for a full VS release cycle (we can't break binary compatibility in for example the 16.2 update), users must already reason about versions using FileVersion (or, inside the MSBuild language, `$(MSBuildVersion)` and friends).\r\n\r\nOn balance, we think leaving the AssemblyVersion fixed has the best tradeoff.",
        "createdAt": "2018-11-21T15:56:06Z",
        "updatedAt": "2018-11-21T15:56:06Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@ericstj like I mentioned above, this prevents us from having to do a bunch of work across many different teams every time that Visual Studio revs their main version. In many cases, it is a re-discover what we missed in the form of bug reports and things that are not working. With this change, we will have to do it only one.",
        "createdAt": "2018-11-21T21:27:03Z",
        "updatedAt": "2018-11-21T21:27:03Z",
        "author": {
          "login": "livarcocc"
        }
      },
      {
        "body": "@livarcocc could you have gotten folks to stop using this property to mean \"side-by-side\" since you now have VS controlling that for you?  It seems to me an equally good fix that would be less breaking would be to ask teams to stop using MSBuildToolsVersion rather than to replace it with a meaningless value.",
        "createdAt": "2018-11-26T18:40:04Z",
        "updatedAt": "2018-11-26T18:40:04Z",
        "author": {
          "login": "ericstj"
        }
      },
      {
        "body": "No, because many of the uses of the property have been baked into user projects via templates.\r\n\r\nIt's a hard requirement that this (from a template class library) continue to work:\r\n\r\n```xml\r\n  <Import Project=\"$(MSBuildExtensionsPath)\\$(MSBuildToolsVersion)\\Microsoft.Common.props\" Condition=\"Exists('$(MSBuildExtensionsPath)\\$(MSBuildToolsVersion)\\Microsoft.Common.props')\" />\r\n```",
        "createdAt": "2018-11-26T19:01:56Z",
        "updatedAt": "2018-11-26T19:01:56Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I see, that's a bummer.  I still think you need to evaluate the scope of the break of changing this from a numeric version to a string value.  If I look above it looks to me like you only considered the break that results from changing from 15.0 -> something else.  Perhaps you could special case the comparsion that uses MSBuildToolsVersion so that it could still be treated as a version, but keep the property expansion to treat it as the string \"current\".\r\n",
        "createdAt": "2018-11-26T20:06:05Z",
        "updatedAt": "2018-11-26T20:06:05Z",
        "author": {
          "login": "ericstj"
        }
      },
      {
        "body": "Hopefully this is the right thread.\r\nI just installed Visual Studio 2019 preview, and I'm now facing issues with my build scripts (using cake build). I get the following error:\r\n\r\n```\r\nMSBUILD : error MSB1040: ToolsVersion is not valid. The tools version \"15.0\" is unrecognized. Available tools versions are \"Current\".\r\nSwitch: 15.0\r\n```\r\n\r\nAnd this is how I configure the `MSBuildSettings` in the script:\r\n\r\n```\r\nnew DotNetCoreMSBuildSettings\r\n    {\r\n        ToolVersion = MSBuildVersion.MSBuild15\r\n    }\r\n```\r\n\r\nI would like to report the error and, if possible, get indications to fix it (I already tried uninstalling the preview, without success).\r\nThe only workaround at the moment is to remove the fixed ToolVersion (leaving it `null`), but that's not an ideal solution (I always prefer to \"pin\" versions to be sure that builds run in a predictable way).",
        "createdAt": "2018-12-06T07:49:39Z",
        "updatedAt": "2018-12-06T07:49:39Z",
        "author": {
          "login": "fleed"
        }
      },
      {
        "body": "Can we get a response to @ericstj's comment -\r\n> Perhaps you could special case the comparsion that uses MSBuildToolsVersion so that it could still be treated as a version, but keep the property expansion to treat it as the string \"current\".\r\n\r\nCurrently you guys only seem to be considering adding fallback logic when using `MSBuildToolsVersion` in a path, but there is also the breaking change when making version comparisons. The current stable version of WiX (v3.11.1) compares `MSBuildToolsVersion` to `4.0` to figure out which targets file to use. In VS2019 Preview 2, when you open a project created with that version of WiX it fails to load with\r\n> A numeric comparison was attempted on \"$(MSBuildToolsVersion)\" that evaluates to \"Current\" instead of a number, in condition \" '$(MSBuildToolsVersion)' == '' OR '$(MSBuildToolsVersion)' < '4.0' \".\r\n\r\nIt would also fail to build from the command line with the same error. I would be surprised if WiX is the only one that would be blocked by this issue.\r\n\r\nTo mitigate this breaking change, I would expect MSBuild not to throw an error when trying to make a version comparison using the `MSBuildToolsVersion` property. It would be annoying, but you could probably just use `15.0` in these comparisons if you don't want to make it return the current version.",
        "createdAt": "2019-01-26T03:53:50Z",
        "updatedAt": "2019-01-26T03:53:50Z",
        "author": {
          "login": "rseanhall"
        }
      },
      {
        "body": "The discussion above mentions `MSBuildExtensionsPath` but it doesn't mention `MSBuildUserExtensionsPath`. This change looks like it will break the per-user extension mechanism.\r\n\r\n`MSBuildUserExtensionsPath` is in the form `C:\\Users\\[user id]\\appdata\\local\\Microsoft\\msbuild` so it is shared by all instances of MSBuild on the machine. Changing `MSBuildToolsVersion` to `Current` will break existing extensions, and it will also break the ability for per-user extension targets to be versioned by folder.\r\n\r\ne.g. `ImportUserLocationsByWildcardBeforeMicrosoftCommonTargets` from `Microsoft.Common.CurrentVersion.targets`:\r\n\r\n```\r\n<Import Project=\"$(MSBuildUserExtensionsPath)\\$(MSBuildToolsVersion)\\Microsoft.Common.targets\\ImportAfter\\*\" Condition=\"'$(ImportUserLocationsByWildcardAfterMicrosoftCommonTargets)' == 'true' and exists('$(MSBuildUserExtensionsPath)\\$(MSBuildToolsVersion)\\Microsoft.Common.targets\\ImportAfter')\"/>\r\n```\r\n\r\nPer-user extension targets are important to third-party extensions as they allow targets to be injected into the build without requiring elevation (e.g. the _[Sonar Scanner for MSBuild](https://docs.sonarqube.org/display/SCAN/Analyzing+with+SonarQube+Scanner+for+MSBuild)_ that provides build integration with _[SonarQube/SonarCloud](https://sonarcloud.io/dashboard?id=sonarscanner-msbuild)_);\r\n\r\nCould this breaking change be avoided by changing the per-user location to use a different build variable (e.g. either `VisualStudioVersion` or a new variable)?\r\n",
        "createdAt": "2019-02-05T13:32:36Z",
        "updatedAt": "2019-02-05T13:32:36Z",
        "author": {
          "login": "duncanp-lseg"
        }
      },
      {
        "body": "> Hopefully this is the right thread.\r\n> I just installed Visual Studio 2019 preview, and I'm now facing issues with my build scripts (using cake build). I get the following error:\r\n> \r\n> ```\r\n> MSBUILD : error MSB1040: ToolsVersion is not valid. The tools version \"15.0\" is unrecognized. Available tools versions are \"Current\".\r\n> Switch: 15.0\r\n> ```\r\n> And this is how I configure the `MSBuildSettings` in the script:\r\n> \r\n> ```\r\n> new DotNetCoreMSBuildSettings\r\n>     {\r\n>         ToolVersion = MSBuildVersion.MSBuild15\r\n>     }\r\n> ```\r\n> I would like to report the error and, if possible, get indications to fix it (I already tried uninstalling the preview, without success).\r\n> The only workaround at the moment is to remove the fixed ToolVersion (leaving it `null`), but that's not an ideal solution (I always prefer to \"pin\" versions to be sure that builds run in a predictable way).\r\n\r\nYou're kind of in the right place. But your issue is more with Cake-Build's way of defaulting in their base task library.\r\nYou should raise an issue over at <https://github.com/cake-build/cake>\r\nAs for immediate help. Cake offers property override methods for all dotnet/msbuild tasks, so you are definitely able to just pass `/p:ToolsVersion=\"15.0\"` from outside which effectively does the same thing.\r\nUse this API:<https://cakebuild.net/api/Cake.Common.Tools.DotNetCore.MSBuild/DotNetCoreMSBuildSettingsExtensions/FE731751>",
        "createdAt": "2019-02-05T13:40:57Z",
        "updatedAt": "2019-02-05T13:42:47Z",
        "author": {
          "login": "MeikTranel"
        }
      },
      {
        "body": "I split out two bugs to consider before 16.0 RTM:\r\n\r\n* #4150 -- version/numeric comparisons around MSBuildToolsVersion\r\n* #4149 -- `MSBuildUserExtensionsPath`\r\n\r\nIf you're interested, please give feedback on those ASAP, as the bar for changes in 16.0 is getting higher and higher.\r\n\r\nClosing this item (the big change) as completed.",
        "createdAt": "2019-02-06T23:36:56Z",
        "updatedAt": "2019-02-06T23:36:56Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}