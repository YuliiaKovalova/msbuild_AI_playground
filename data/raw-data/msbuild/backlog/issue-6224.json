{
  "number": 6224,
  "title": "RAR BadImageReferenceException needs to log the callstack and exception type",
  "body": "I'm investigating a build with this warning from RAR:\r\n\r\n```\r\n/Users/builder/azdo/_work/1/s/main/build/tools/MSBuild/bin/Microsoft.Common.CurrentVersion.targets(2143,5): warning MSB3246: Resolved file has a bad image, no metadata, or is otherwise inaccessible.\r\n```\r\n\r\nThis exception is thrown in four places:\r\nhttps://source.dot.net/#Microsoft.Build.Tasks.Core/AssemblyDependency/BadImageReferenceException.cs,cbeccdcba5e80a17,references\r\n\r\nIt could be a `BadImageFormatException`, `FileNotFoundException`, `FileLoadException` or any other IORelated exception. We throw away the callstack and don't display the type of the underlying exception. We should print the original exception ToString() not just the Message.",
  "state": "CLOSED",
  "createdAt": "2021-03-04T02:58:27Z",
  "updatedAt": "2024-02-21T17:01:51Z",
  "closedAt": "2023-01-06T03:17:57Z",
  "author": {
    "login": "KirillOsenkov"
  },
  "labels": [
    "bug",
    "Area: Debuggability",
    "needs-design",
    "Area: Task: Resolve Assembly References (RAR)",
    "Area: Logging",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "@KirillOsenkov are you investigating this currently?\r\n\r\n/cc: @Forgind ",
        "createdAt": "2021-03-10T16:29:40Z",
        "updatedAt": "2021-03-10T16:29:40Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "No, this one is up-for-grabs if anyone\u2019s interested",
        "createdAt": "2021-03-10T18:29:51Z",
        "updatedAt": "2021-03-10T18:29:51Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "When you said there were four places that threw the exception, did you mean [this](https://github.com/dotnet/msbuild/blob/7bc761a0cc0ecf1a778032ae62ec4490759bd921/src/Tasks/AssemblyDependency/ReferenceTable.cs#L672-L689)? It looks like all the information is saved in an inner exception, so it should be easily accessible when it gets thrown [here](https://github.com/dotnet/msbuild/blob/7bc761a0cc0ecf1a778032ae62ec4490759bd921/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs#L1570-L1574).",
        "createdAt": "2021-03-10T23:32:42Z",
        "updatedAt": "2021-03-10T23:32:42Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "If so, does #6240 look about how you expected?",
        "createdAt": "2021-03-10T23:36:02Z",
        "updatedAt": "2021-03-10T23:36:02Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "Yes, perfect.",
        "createdAt": "2021-03-12T20:30:29Z",
        "updatedAt": "2021-03-12T20:30:29Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "And for completeness, I've found the underlying issue that was causing an AccessDenied exception. Zip on .NET doesn't preserve file permissions, so unpacking the Zip on Mac was creating files with 0 permissions instead of 644:\r\nhttps://github.com/dotnet/runtime/issues/17912#issuecomment-791102025",
        "createdAt": "2021-03-12T20:32:47Z",
        "updatedAt": "2021-03-12T20:32:47Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "Seeing that it was Access Denied and the full ToString() would have certainly helped.",
        "createdAt": "2021-03-12T20:33:24Z",
        "updatedAt": "2021-03-12T20:33:24Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "This looks a bit ugly to the user though\r\n```\r\n...warning MSB3246: Resolved file has a bad image, no metadata, or is otherwise inaccessible. System.BadImageFormatException: Assembly file 'C:\\git\\runtime\\artifacts\\bin\\microsoft.netcore.app.ref\\ref\\net6.0\\System.Security.Cryptography.Encoding.dll' could not be opened -- PE image doesn't contain managed metadata. [...]\r\n...warning MSB3246:    at Microsoft.Build.Shared.AssemblyNameExtension.GetAssemblyNameEx(String path) [...]\r\n...warning MSB3246:    at Microsoft.Build.Tasks.SystemState.GetAssemblyName(String path) [...]\r\n...warning MSB3246:    at Microsoft.Build.Tasks.ReferenceTable.SetPrimaryAssemblyReferenceItem(ITaskItem referenceAssemblyName) [...]\r\n```\r\ndo we want to show these internal frames here?",
        "createdAt": "2021-08-31T02:15:54Z",
        "updatedAt": "2021-08-31T02:15:54Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "Not sure what\u2019s the best way to truncate them: just keep the first text line from ToString() or take just the message from the innermost exception?",
        "createdAt": "2021-08-31T04:04:22Z",
        "updatedAt": "2021-08-31T04:04:22Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "I'm not sure what other variations look like or what information you expect the user to get from them? Maybe log the message normally, but reserve ToString (or StackTrace) for the highest verbosity logging? In this case, the dll was corrupted, when I see callstack from my build tool it makes me think there is a bug in it.",
        "createdAt": "2021-08-31T04:36:29Z",
        "updatedAt": "2021-08-31T04:36:29Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "I agree showing the callstack is unpolished, just curious on how to actually fix this. Because there are nested exceptions so we should probably print the message from each nested exception?",
        "createdAt": "2021-08-31T19:29:03Z",
        "updatedAt": "2021-08-31T19:29:03Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "For the aggregated message including nested you could concat something like [AggregateException does]?(https://github.com/dotnet/runtime/blob/fc854d9921475366875658180afa495d452451be/src/libraries/System.Private.CoreLib/src/System/AggregateException.cs#L346-L367)\r\nI don't think it's the prettiest, but that's precedent.\r\n\r\nFor the diagnostic verbosity, you could dump ToSTring() which will include nested info.",
        "createdAt": "2021-08-31T19:34:00Z",
        "updatedAt": "2021-08-31T19:34:00Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "I'm not opposed to trying to make this clearer/simpler, but it seems lower priority than getting the information out, so I removed my assignment.\r\n\r\nI'm curious if this could be an opportunity to use the check-verbosity-before-logging idea. Diagnostic --> current behavior. Quiet/minimal --> nothing? Normal --> message from innermost exception?",
        "createdAt": "2021-08-31T21:02:32Z",
        "updatedAt": "2021-08-31T21:02:32Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "I guess I meant log the error with the messages, and immediately follow with a low importance message event with the ToString(), perhaps.",
        "createdAt": "2021-08-31T22:46:12Z",
        "updatedAt": "2021-08-31T22:46:12Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "I just hit this a few times building dotnet/runtime. The output folder was \"slightly corrupt\" I guess. I believe a tool that dumps stack to the console looks like it has a bug. I put up a fix.",
        "createdAt": "2022-12-30T01:59:58Z",
        "updatedAt": "2022-12-30T01:59:58Z",
        "author": {
          "login": "danmoseley"
        }
      }
    ]
  }
}