{
  "number": 2916,
  "title": "Document node reuse",
  "body": "I searched docs.microsoft.com for details about node reuse so I could send them to a person who was asking. But there was basically nothing, and a search for [msbuild node reuse] wasn't super helpful, either.\r\n\r\nThere's an announcement blog post: https://blogs.msdn.microsoft.com/msbuild/2007/04/16/node-reuse-in-multiproc-msbuild/\r\n\r\nBut since it's important to tell people with CI servers and so on to disable node reuse, we should have clear documentation in the usual place.",
  "state": "OPEN",
  "createdAt": "2018-01-26T20:15:27Z",
  "updatedAt": "2024-02-21T16:34:59Z",
  "closedAt": null,
  "author": {
    "login": "rainersigwald"
  },
  "labels": [
    "Area: Documentation",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "rainersigwald"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Sent this mail, which can serve as a start:\r\n\r\nWhen you build a multiprocess build (with the `/m` switch to msbuild.exe), MSBuild starts \u201cworker nodes\u201d in the background that by default do not terminate when the build completes. On a subsequent build, MSBuild searches for idle worker nodes and connects to them, saving startup overhead and JIT cost. Since .NET doesn\u2019t offer great ways to unload DLLs, those workers can then hold locks on task DLLs until they hit their idle shutdown.\r\n\r\nThere are a couple of ways to deal with this.\r\n\r\nYou can force this specific task to run in its own short-lived process by [setting `TaskFactory=\"TaskHostFactory\"` in the UsingTask](https://docs.microsoft.com/en-us/visualstudio/msbuild/how-to-configure-targets-and-tasks#task-factories). That is often wise for tasks built in the same build process, but it does have some overhead (for the IPC cost of remoting the execution, plus process startup and JIT in the task host.\r\n\r\nYou can disable node reuse with the command line switch `/nodeReuse:false` or with the environment variable `MSBUILDDISABLENODEREUSE=1.` \r\n",
        "createdAt": "2018-01-26T20:35:57Z",
        "updatedAt": "2018-01-26T20:35:57Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> You can disable node reuse with the command line switch `/nodeReuse:false` or with the environment variable `MSBUILDDISABLENODEREUSE=1`.\r\n\r\nHaving just searched for docs regarding node reuse, this issue was helpful. Quick question: does disabling node reuse with the above methods terminate the MSBuild node upon completion, force spawning a new node at the start of a build, or both? I.e., if node reuse is turned off with the above, will MSBuild still use an existing node if one is found?",
        "createdAt": "2018-08-01T13:53:12Z",
        "updatedAt": "2018-08-01T13:53:12Z",
        "author": {
          "login": "daveaglick"
        }
      },
      {
        "body": "Never mind, just ran across https://github.com/Microsoft/msbuild/issues/339 which explains the situation nicely. I was having some problems with it reusing nodes even after setting `MSBUILDDISABLENODEREUSE` but it looks like that's because I still had a node around from before I made the change with similar handshake properties.\r\n\r\nI would suggest the specifics of this behavior be added to any forthcoming documentation.",
        "createdAt": "2018-08-01T13:58:42Z",
        "updatedAt": "2018-08-01T13:58:42Z",
        "author": {
          "login": "daveaglick"
        }
      },
      {
        "body": "@daveaglick also related: https://github.com/Microsoft/msbuild/pull/3158, getting us to both terminate-at-end-of-build and guarantee-started-fresh.",
        "createdAt": "2018-08-01T15:11:31Z",
        "updatedAt": "2018-08-01T15:11:31Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I'd love to see some figures on how much time is likely to be saved by reusing nodes.  I suspect it's in the sub-second range and thus only has an appreciable impact on small solutions containing only project types with excellent no-op build performance.  (e.g. IME .sqlprojs have terrible incremental build support)",
        "createdAt": "2019-04-05T21:02:55Z",
        "updatedAt": "2019-04-05T21:03:28Z",
        "author": {
          "login": "chipplyman"
        }
      },
      {
        "body": "Having `TaskFactory=\"TaskHostFactory\"` available is great - but it's only available from a particular MSBuild version onwards (16.6? and 6.0.202?) and causes build errors when an older VS/SDK is used.\r\n\r\nWhat is the canonical way to test for that feature to be available? `<UsingTask ... TaskFactory=\"TaskHostFactory\" Condition=\" '$(MSBuildVersion)' >= '16.6' \" />`?\r\n\r\nBut then when building with an older VS/SDK, is there an MSBuild variable indicating the status of node reuse (and/or multi-process builds), so that I can detect it and issue a warning suggesting upgrading or using `-nf:false` (or possibly even switch to using `Exec` to spawn a nested MSBuild to use the task in)?\r\nI see `MSBuildNodeCount` in the list of well-known properties, but not something like `MSBuildNodeReuse`.\r\n\r\nAny chance of getting a feature-test function, perhaps, like `Condition=\" $([MSBuild]::HasFeature('task-host-factory')) \"`. Feels cleaner than a version check.\r\n",
        "createdAt": "2022-06-28T19:47:00Z",
        "updatedAt": "2022-06-28T19:47:00Z",
        "author": {
          "login": "Zastai"
        }
      },
      {
        "body": "@Zastai TaskHostFactory has been in MSBuild since version 4.something (Visual Studio 2012). It was enabled for .NET (Core) SDK dotnet/msbuild#6994 for MSBuild 17.1/.NET SDK 6.0.200.\r\n\r\n> is there an MSBuild variable indicating the status of node reuse\r\n\r\nNo, I don't think so.\r\n\r\n> or multi-process builds\r\n\r\nThere's `$(MSBuildNodeCount)`.\r\n\r\n> Any chance of getting a feature-test function, perhaps, like `Condition=\" $([MSBuild]::HasFeature('task-host-factory')) \"`. Feels cleaner than a version check.\r\n\r\nIndeed, that's strongly preferred when testing for Windows features and I see no reason not to do it (other than \"we could spend that time doing something else\" which is always a pretty good reason). Feel free to file an issue.\r\n\r\n",
        "createdAt": "2022-06-28T20:02:32Z",
        "updatedAt": "2022-06-28T20:02:32Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Right, so either msbuild type 'Full', or 'Core' with version >= 17.1. Will have to investigate when Mono MSBuild got it.\r\nDoable, if not very nice. Will file an issue for the feature test.",
        "createdAt": "2022-06-28T20:05:44Z",
        "updatedAt": "2022-06-28T20:05:44Z",
        "author": {
          "login": "Zastai"
        }
      },
      {
        "body": "Small separate question: is there an MSBuild.exe equivalent of `dotnet build-server shutdown` (which I assume finds and terminates all applicable nodes)?",
        "createdAt": "2022-06-28T20:13:37Z",
        "updatedAt": "2022-06-28T20:13:37Z",
        "author": {
          "login": "Zastai"
        }
      },
      {
        "body": "> is there an MSBuild.exe equivalent of `dotnet build-server shutdown` (which I assume finds and terminates all applicable nodes)?\r\n\r\nThere is no `msbuild.exe` equivalent command-line call to the API that does that (today).",
        "createdAt": "2022-06-28T20:22:42Z",
        "updatedAt": "2022-06-28T20:22:42Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Having said that, I would like to hook MSBuild up to that command when we complete the new MSBuild Server Daemon work and get that incorporated into the SDK.",
        "createdAt": "2022-06-28T20:27:25Z",
        "updatedAt": "2022-06-28T20:27:25Z",
        "author": {
          "login": "baronfel"
        }
      },
      {
        "body": "MSBuild-on-Core is already hooked up to `dotnet build-server shutdown`, but there's no alternative to `taskkill /f /im msbuild.exe` for MSBuild-on-Framework.",
        "createdAt": "2022-06-28T20:28:29Z",
        "updatedAt": "2022-06-28T20:28:29Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}