{
  "number": 10169,
  "title": "Correct way to generate sources for an external project (with incompatible `TargetFramework`)?",
  "body": "I have the following project structure:\r\n\r\n**Project A**\r\n - Generates a JSON file on `AfterTargets=\"PostBuildEvent\"`\r\n\r\n**Project B**\r\n- References project A via `ProjectReference` to ensure correct build order\r\n- Consumes the JSON file inside `AfterTargets=\"AfterResolveReferences\" BeforeTargets=\"CoreCompile\"` and generates source code.\r\n\r\nThis seems to work. However it requires the `TargetFramework` of project A to be compatible with project B, even though **project B does not rely on any of its code**. There are a bunch of issues addressing this problem (See https://github.com/dotnet/msbuild/issues/2661 or https://github.com/dotnet/msbuild/issues/4795), but none of the workarounds described there seem to work.\r\nI am generally wondering if there's some kind of \"best practice\" for dealing with this code generation scenario?\r\n\r\nEDIT: I just found this [blog post](https://jaylee.org/archive/2019/01/25/create-a-buildreference-dependency-between-sdk-style-projects.html) which uses `<UndefineProperties>TargetFramework</UndefineProperties>`. It seems to fix the incompatible `TargetFramework` issue, but it somehow breaks the `AfterResolveReferences` target. It's called multiple times now for some reason.\r\n\r\nEDIT2: After some more testing I made the hack above work. The problem is using multiple `TargetFrameworks` in the referencing project. Targeting just one framework and including the referenced project with `<SkipGetTargetFrameworkProperties>true</SkipGetTargetFrameworkProperties>` seems to do the trick. So for anybody struggling with this in the future:\r\n\r\n```xml\r\n<PropertyGroup>\r\n  <TargetFramework>netstandard2.1</TargetFramework>\r\n</PropertyGroup>\r\n\r\n\r\n...\r\n\r\n<Target Name=\"GenerateSources\" AfterTargets=\"AfterResolveReferences\"  BeforeTargets=\"CoreCompile\" Condition=\"'$(DesignTimeBuild)' != 'true'\">\r\n\r\n  <Exec Command=\"...\" />\r\n\r\n  <ItemGroup>\r\n\t  <Compile Include=\"Generated\\**\\*.cs\" Exclude=\"@(Compile)\" />\r\n  </ItemGroup>\r\n</Target>\r\n\r\n<ItemGroup>\r\n  <ProjectReference Include=\"..\\ProjectToGenerateSourcesFor.csproj\">\r\n\t  <ReferenceOutputAssembly>false</ReferenceOutputAssembly>\r\n\t  <SkipGetTargetFrameworkProperties>true</SkipGetTargetFrameworkProperties>\r\n  </ProjectReference>\r\n</ItemGroup>\r\n```\r\n\r\nThis calls a source generator **after** the referenced project is built and includes generated sources in the compilation. It also works if the referenced project targets a different `TargetFramework`. I still have no idea if that's the best way to do it though. So would be nice if someone more knowledgeable than me could chime in. \r\n\r\n\r\n\r\n",
  "state": "OPEN",
  "createdAt": "2024-05-23T11:24:20Z",
  "updatedAt": "2024-05-28T13:44:17Z",
  "closedAt": null,
  "author": {
    "login": "lvde0"
  },
  "labels": [
    "question"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "MichalPavlik"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": []
  }
}