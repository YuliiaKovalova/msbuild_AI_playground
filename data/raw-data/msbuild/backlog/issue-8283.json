{
  "number": 8283,
  "title": "Item Include of output of Metadata() item function for custom metadata doesn't honor KeepDuplicates=\"false\"",
  "body": "<!-- This is a template that helps us provide quicker feedback. Please use any relevant sections and delete anything you don't need. -->\r\n\r\n### Issue Description\r\n<!--\r\n* Please include a clear and concise description of the problem.\r\n-->\r\n\r\nThe following MSBuild code uses the output of the [intrinsic item function](https://learn.microsoft.com/en-us/visualstudio/msbuild/item-functions?view=vs-2022#intrinsic-item-functions) `Metadata` in the `Include` of an `ItemGroup`.\r\n\r\n```XML\r\n    <ItemGroup>\r\n      <AllSomeItems Include=\"@(Sample->Metadata('SomeItems'))\" KeepDuplicates=\"false\" />\r\n    </ItemGroup>\r\n```\r\n\r\nFor custom metadata (i.e. not [well-known item metadata](https://learn.microsoft.com/en-us/visualstudio/msbuild/msbuild-well-known-item-metadata?view=vs-2022)) duplicates are added despite the `KeepDuplicates=\"false\"` attribute.\r\n\r\n### Steps to Reproduce\r\n<!--\r\n* Include as much of the following as possible:\r\n\r\n* A minimal sample project that reproduces the issue.\r\n* Your zipped project.\r\n* IDE / CLI steps to create the project and reproduce the behaviour.\r\n* Your command line invocation\r\n\r\nIf providing steps to reproduce the issue proves difficult, consider attaching a binlog:\r\n[Details on sharing binary logs](https://aka.ms/msbuild/binlog)\r\n[More information on binary logs](https://github.com/dotnet/msbuild/blob/main/documentation/wiki/Binary-Log.md)\r\nNOTE: Binary logs capture environment information. Ensure it does not include any information you don't want to be public before you attach one.\r\nIf you want to share one just with Microsoft, you can [report a problem through Visual Studio](https://developercommunity.visualstudio.com/report) and share it privately with Microsoft.\r\n-->\r\n\r\n1. Create a file with the following code:\r\n\r\n```XML\r\n<Project xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\r\n\r\n  <Target Name=\"MetadataToItem\">\r\n    <ItemGroup>\r\n      <Sample Include=\"AAA\" SomeItems=\"1;2;3\" />\r\n      <Sample Include=\"BBB\" SomeItems=\"3;4;5\" />\r\n    </ItemGroup>\r\n\r\n    <ItemGroup>\r\n      <AllSomeItems Include=\"@(Sample->Metadata('SomeItems'))\" KeepDuplicates=\"false\" />\r\n    </ItemGroup>\r\n    <Message Text=\"AllSomeItems is @(AllSomeItems)\" />\r\n\r\n    <PropertyGroup>\r\n      <Values>@(Sample->Metadata('SomeItems'))</Values>\r\n    </PropertyGroup>\r\n    <ItemGroup>\r\n      <AllSomeItemsByValues Include=\"$(Values)\" KeepDuplicates=\"false\" />\r\n    </ItemGroup>\r\n    <Message Text=\"AllSomeItemsByValues is @(AllSomeItemsByValues)\" />\r\n\r\n    <ItemGroup>\r\n      <Files Include=\"test.bat\" />\r\n      <Files Include=\"test.proj\" />\r\n      <Files Include=\"test.txt\" />\r\n    </ItemGroup>\r\n\r\n    <ItemGroup>\r\n      <AllFilenames Include=\"@(Files->Metadata('Filename'))\" KeepDuplicates=\"false\" />\r\n    </ItemGroup>\r\n    <Message Text=\"AllFilenames is @(AllFilenames)\" />\r\n  </Target>\r\n\r\n</Project>\r\n```\r\n\r\n2. Name the file test.proj.\r\n3. Create files named test.bat, and test.txt.\r\n4. Run `msbuild test.proj`.\r\n5. Note the output of the `MetadataToItem` target.\r\n\r\n```\r\nMetadataToItem:\r\n  AllSomeItems is 1;2;3;3;4;5\r\n  AllSomeItemsByValues is 1;2;3;4;5\r\n  AllFilenames is test\r\n```\r\n\r\nIn `AllSomeItems`, the value 3 is duplicated. I did not find a difference in 'well-known' metadata values for the two duplicated items.\r\n\r\nFor `AllSomeItemsByValues`, a property is set with the output of the `Metadata` function and the property is used in the `Include`. In this situation, the value 3 is not duplicated.\r\n\r\nFor `AllFilenames`, the 'well-known' metadata `filename` is used and there is no duplication.\r\n\r\nThe problem seems to be with using the `Metadata` function with custom metadata in an `Item` `Include`. Using an intermediate property is a work-around. But, that 'well-known' metadata will work as expected and custom metadata will not, could be a painful 'gotcha' for someone.\r\n\r\n**\\*\\*Update added in Analysis\\*\\***\r\n\r\n### Expected Behavior\r\n<!--\r\n* The expected output or behavior.\r\n-->\r\n\r\nThe expected content of `AllSomeItems` is 1;2;3;4;5.\r\n\r\n### Actual Behavior\r\n<!--\r\n* The actual output or behavior.\r\n-->\r\n\r\nThe actual content of `AllSomeItems` is 1;2;3;3;4;5. The value 3 is duplicated.\r\n\r\n### Analysis\r\n<!--\r\n* If you have an idea where the problem might lie, let us know that here.\r\n* Please include any pointers to code, relevant changes, or related issues you know of.\r\n-->\r\n\r\nThe `Metadata` function is documented as\r\n\r\n> Returns the values of the metadata that have the metadata name.\r\n\r\nBut that is not a completely correct description because the `Metadata` function keeps custom metadata from the source collection -- including the metadata that was passed to the function. The duplicated items for 3 have different `SomeItems` metadata (\"1;2;3\" vs. \"3;4;5\").\r\n\r\nIn the example case, adding `RemoveMetadata=\"SomeItems\"` will produce the desired result.\r\n\r\n```XML\r\n    <ItemGroup>\r\n      <AllSomeItems Include=\"@(Sample->Metadata('SomeItems'))\" RemoveMetadata=\"SomeItems\" KeepDuplicates=\"false\" />\r\n    </ItemGroup>\r\n```\r\n\r\nThis approach works when the custom metadata is known and can be specified. Otherwise, if a clean collection is needed, the set returned by `Metadata()` can be passed through a property or a call of `ClearMetadata()`. \r\n\r\n### Versions & Configurations\r\n<!--\r\n* In a Visual Studio developer command prompt, run `msbuild -version` and paste the output here.\r\n* If applicable, include the version of the tool that invokes MSBuild (Visual Studio, dotnet CLI, etc):\r\n\r\n* Post any other relevant configuration settings here.\r\n*   OS, architecture, etc.\r\n-->\r\n\r\nMSBuild version 17.4.1+9a89d02ff for .NET Framework\r\n17.4.1.60106\r\n\r\nWindows 11 Pro 22H2\r\n64-bit operating system, x64-based processor",
  "state": "CLOSED",
  "createdAt": "2023-01-06T00:42:13Z",
  "updatedAt": "2023-01-08T21:38:33Z",
  "closedAt": "2023-01-08T20:53:39Z",
  "author": {
    "login": "jrdodds"
  },
  "labels": [
    "bug",
    "needs-triage"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Closing this as a bug and will submit a documentation issue.",
        "createdAt": "2023-01-08T20:53:39Z",
        "updatedAt": "2023-01-08T20:53:39Z",
        "author": {
          "login": "jrdodds"
        }
      },
      {
        "body": "Submitted MicrosoftDocs/visualstudio-docs#8827",
        "createdAt": "2023-01-08T21:38:33Z",
        "updatedAt": "2023-01-08T21:38:33Z",
        "author": {
          "login": "jrdodds"
        }
      }
    ]
  }
}