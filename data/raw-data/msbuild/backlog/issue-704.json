{
  "number": 704,
  "title": "Calculate a better MSBuild tools/extensions path",
  "body": "Need to fix the [FileUtilities](https://github.com/Microsoft/msbuild/blob/master/src/Shared/FileUtilities.cs) class and extract logic to a new class. These are the scenarios I want to consider.\n## Tools / Extensions Paths\n- When running in MSBuild.exe:\n  - Set the Tools Path to current directory (expanded, not using `\".\"`).\n  - Assume we're running in `<Root>\\MSBuild\\15.0\\Bin` and choose `<Root>\\MSBuild` for Extensions Path (`ToolsPath\\..\\..`).\n- Running as a dependency and that folder is \"complete\":\n  - Use the reference folder location as the Tools Path.\n  - Assume we're running in `<Root>\\MSBuild\\15.0\\Bin` and choose `<Root>\\MSBuild` for Extension (`ToolsPath\\..\\..`).\n- Running as a dependency that is not \"complete\":\n  - Discard that folder and try to fallback to a well known location. \n  - For Dev15 (`VisualStudioVersion >= 15'`), this would be `%VSINSTALLDIR%\\MSBuild\\15.0\\Bin` for Tools Path and  `%VSINSTALLDIR%\\MSBuild` for Extensions Path.\n\n_Note: By \"complete\" I mean contains enough of MSBuild to do a build. I will probably check for msbuild.exe and msbuild.exe.config as a minimum bar. This will cover the case that you create an app that references Microsoft.Build.*.dll and it gets copied to your output. Your output should not be considered a tools path unless it contains those files._\n## Issues:\n### If `%VSINSTALLDIR%` doesn't exist\n- We could throw an Exception and tell the user to run from a Visual Studio command prompt.? We no longer have the ability to determine a valid location.\n- Use global Visual Studio API to determine a location for Visual Studio (there may be multiple) and pick one of them.\n### Running Open Source Build\n- We don't want to pick up the Visual Studio Tools Path or Extensions Path in this scenario. Note that Extensions Path would be broken by the above logic because our build layout is like `bin\\x86\\Windows_NT\\Debug\\`. The Extensions Path would point to `x86` or something similarly wrong.\n- This isn't really solvable without producing a build layout in the right format and pulling in all our run-time dependencies (what the bootstrap proj does now).\n\nThis is related to #702 which is a temporary workaround.\n",
  "state": "CLOSED",
  "createdAt": "2016-06-16T18:39:03Z",
  "updatedAt": "2024-02-21T17:27:43Z",
  "closedAt": "2016-07-12T21:09:11Z",
  "author": {
    "login": "AndyGerlicher"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "AndyGerlicher"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Related to: #114 \n",
        "createdAt": "2016-06-28T22:37:23Z",
        "updatedAt": "2016-06-28T22:37:23Z",
        "author": {
          "login": "Sarabeth-Jaffe-Microsoft"
        }
      }
    ]
  }
}