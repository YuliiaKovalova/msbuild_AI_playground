{
  "number": 69,
  "title": "MSBuild should generate metaprojects that merge the outputs of the individual MSBuild invocations",
  "body": "This was originally reported in Connect as [MSBuild - TargetOutputs does not include projects with explicit project dependencies listed](https://connect.microsoft.com/VisualStudio/feedback/details/1176406/msbuild-targetoutputs-does-not-include-projects-with-explicit-project-dependencies-listed) as well as on Stack Overflow as [MSBuild TargetOutputs missing assemblies](http://stackoverflow.com/q/11236289/).\n\nI also encountered the issue and was able to track down its cause:\n\nWhen the solution contains a `ProjectDependencies` section for a project, a `.metaproj` MSBuild file is generated, containing something like the following (obtained from the files attached to the Connect report by setting the `MSBuildEmitSolution` environment variable to `1` as per [Debugging MSBuild script with Visual Studio (3)](http://blogs.msdn.com/b/msbuild/archive/2010/07/09/debugging-msbuild-script-with-visual-studio-3.aspx)):\n\n``` xml\n  <Target Name=\"Build\">\n    <MSBuild Projects=\"@(ProjectReference)\" BuildInParallel=\"True\" Properties=\"BuildingSolutionFile=true; CurrentSolutionConfigurationContents=$(CurrentSolutionConfigurationContents); SolutionDir=$(SolutionDir); SolutionExt=$(SolutionExt); SolutionFileName=$(SolutionFileName); SolutionName=$(SolutionName); SolutionPath=$(SolutionPath)\" SkipNonexistentProjects=\"%(ProjectReference.SkipNonexistentProjects)\">\n      <Output TaskParameter=\"TargetOutputs\" ItemName=\"MSBuildIssueBuildOutput\" />\n    </MSBuild>\n    <MSBuild Projects=\"C:\\Users\\odagenais\\oss\\MSBuildIssue\\Repro\\MSBuildIssue\\MSBuildIssue.csproj\" BuildInParallel=\"True\" ToolsVersion=\"$(ProjectToolsVersion)\" Properties=\"Configuration=Debug; Platform=AnyCPU;BuildingSolutionFile=true; CurrentSolutionConfigurationContents=$(CurrentSolutionConfigurationContents); SolutionDir=$(SolutionDir); SolutionExt=$(SolutionExt); SolutionFileName=$(SolutionFileName); SolutionName=$(SolutionName); SolutionPath=$(SolutionPath)\">\n      <Output TaskParameter=\"TargetOutputs\" ItemName=\"MSBuildIssueBuildOutput\" />\n    </MSBuild>\n  </Target>\n```\n\nIt turns out that the second call to MSBuild will NOT append its `TargetOutputs` to the `baseProjectName + \"BuildOutput\"` item (showing up as `MSBuildIssueBuildOutput` here), which is the source of the \"missing assembly\" issue we are seeing.\n\nWhat probably needs to happen, instead, is both invocations of the MSBuild task must write to different items and then merge their values, as follows:\n\n``` xml\n  <Target Name=\"Build\">\n    <MSBuild Projects=\"@(ProjectReference)\" BuildInParallel=\"True\" Properties=\"BuildingSolutionFile=true; CurrentSolutionConfigurationContents=$(CurrentSolutionConfigurationContents); SolutionDir=$(SolutionDir); SolutionExt=$(SolutionExt); SolutionFileName=$(SolutionFileName); SolutionName=$(SolutionName); SolutionPath=$(SolutionPath)\" SkipNonexistentProjects=\"%(ProjectReference.SkipNonexistentProjects)\">\n      <Output TaskParameter=\"TargetOutputs\" ItemName=\"MSBuildIssueReferenceBuildOutput\" />\n    </MSBuild>\n\n    <MSBuild Projects=\"C:\\Users\\odagenais\\oss\\MSBuildIssue\\Repro\\MSBuildIssue\\MSBuildIssue.csproj\" BuildInParallel=\"True\" ToolsVersion=\"$(ProjectToolsVersion)\" Properties=\"Configuration=Debug; Platform=AnyCPU;BuildingSolutionFile=true; CurrentSolutionConfigurationContents=$(CurrentSolutionConfigurationContents); SolutionDir=$(SolutionDir); SolutionExt=$(SolutionExt); SolutionFileName=$(SolutionFileName); SolutionName=$(SolutionName); SolutionPath=$(SolutionPath)\">\n      <Output TaskParameter=\"TargetOutputs\" ItemName=\"MSBuildIssueProjectBuildOutput\" />\n    </MSBuild>\n    <ItemGroup>\n        <MSBuildIssueBuildOutput Include=\"@(MSBuildIssueReferenceBuildOutput);@(MSBuildIssueProjectBuildOutput)\" />\n    </ItemGroup>\n  </Target>\n```\n\nThanks to Microsoft making MSBuild open-source, I was able to track down the code responsible as the `AddMetaprojectTargetForManagedProject()` method in `SolutionProjectGenerator` (among others - it appears there are other methods in this class that could emit consecutive invocations of the `MSBuild` task while assuming the items in the `TargetOutputs` will get merged/appended).\n\nI can make the necessary changes in a branch of my fork and then submit a pull request; the [Contributing Code](https://github.com/Microsoft/msbuild/wiki/Contributing-Code) wiki page suggested I open an issue to first discuss this.  I can see why, because I could see some MSBuild scripts depending on the current behaviour (such that my fix would come as a surprise and break existing builds because an assembly that was supposed to have been collected for unit testing, code analysis, etc. all of a sudden _is_ collected and fails said unit testing, etc.) and so we should probably structure the population of the `baseProjectName + \"BuildOutput\"` item conditional upon a property/flag of some sort, as in the following:\n\n``` xml\n    <ItemGroup>\n        <MSBuildIssueBuildOutput Include=\"@(MSBuildIssueReferenceBuildOutput)\" />\n        <MSBuildIssueBuildOutput Include=\"@(MSBuildIssueProjectBuildOutput)\" Condition=\" '$(IncludeDependencyProject)' != '' \" />\n    </ItemGroup>\n```\n\nOther suggestions sought and welcome, especially from the MSBuild team!\n",
  "state": "CLOSED",
  "createdAt": "2015-04-11T01:25:46Z",
  "updatedAt": "2024-02-21T17:31:50Z",
  "closedAt": "2015-09-08T17:51:26Z",
  "author": {
    "login": "olivierdagenais"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Item creation from the output of a task should append to an item list in the same way a normal Include would.  If that's not happening, I would say that that is the real issue here. \n",
        "createdAt": "2015-04-14T00:40:49Z",
        "updatedAt": "2015-04-14T00:40:49Z",
        "author": {
          "login": "sarajoiner"
        }
      },
      {
        "body": "OK, I'll try to reproduce that specific scenario.\n",
        "createdAt": "2015-04-14T00:43:23Z",
        "updatedAt": "2015-04-14T00:43:23Z",
        "author": {
          "login": "olivierdagenais"
        }
      },
      {
        "body": "> Item creation from the output of a task should append to an item list in the same way a normal Include would.\n\nConfirmed with this MSBuild script:\n\n``` xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<Project ToolsVersion=\"4.0\" DefaultTargets=\"Build\"\n         xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n  <UsingTask TaskName=\"Generator\" TaskFactory=\"CodeTaskFactory\"\n             AssemblyFile=\"$(MSBuildToolsPath)\\Microsoft.Build.Tasks.v4.0.dll\">\n    <ParameterGroup>\n      <StartPoint ParameterType=\"System.Int32\" Required=\"true\" />\n      <Generated ParameterType=\"Microsoft.Build.Framework.ITaskItem[]\" Output=\"true\" />\n    </ParameterGroup>\n    <Task>\n      <Code Type=\"Fragment\" Language=\"cs\"><![CDATA[\nconst int Max = 10;\nGenerated = new TaskItem[Max];\nfor (int c = 0, d = StartPoint; c < Max; c++, d++)\n{\n  Generated[c] = new TaskItem(Convert.ToString(d, 10));\n}]]></Code>\n    </Task>\n  </UsingTask>\n  <Target Name=\"Build\">\n    <Generator StartPoint=\"0\">\n      <Output TaskParameter=\"Generated\" ItemName=\"g\" />\n    </Generator>\n    <Message Importance=\"high\" Text=\"g: @(g)\" />\n\n    <Generator StartPoint=\"20\">\n      <Output TaskParameter=\"Generated\" ItemName=\"g\" />\n    </Generator>\n    <Message Importance=\"high\" Text=\"g: @(g)\" />\n  </Target>\n\n</Project>\n```\n\n...I'll next chase down why the append isn't happening in this particular case.\n",
        "createdAt": "2015-04-17T01:09:15Z",
        "updatedAt": "2015-04-17T01:09:15Z",
        "author": {
          "login": "olivierdagenais"
        }
      },
      {
        "body": "Whoa, I don't understand how I got it so wrong the first time around and after reviewing the `.metaproj` files it seems so obvious now.  I was close, though:  the [generated] `.csproj.metaproj` file's `<Target>` elements are missing an `Outputs` attribute to relay back the contents of (in this case) `MSBuildIssueBuildOutput`:\n\n``` xml\n<Target Name=\"Build\" Outputs=\"@(MSBuildIssueBuildOutput)\">\n  <MSBuild Projects=\"@(ProjectReference)\" BuildInParallel=\"True\" Properties=\"BuildingSolutionFile=true; CurrentSolutionConfigurationContents=$(CurrentSolutionConfigurationContents); SolutionDir=$(SolutionDir); SolutionExt=$(SolutionExt); SolutionFileName=$(SolutionFileName); SolutionName=$(SolutionName); SolutionPath=$(SolutionPath)\" SkipNonexistentProjects=\"%(ProjectReference.SkipNonexistentProjects)\">\n    <Output TaskParameter=\"TargetOutputs\" ItemName=\"MSBuildIssueBuildOutput\" />\n  </MSBuild>\n  <MSBuild Projects=\"C:\\Users\\odagenais\\oss\\MSBuildIssue\\Repro\\MSBuildIssue\\MSBuildIssue.csproj\" BuildInParallel=\"True\" ToolsVersion=\"$(ProjectToolsVersion)\" Properties=\"Configuration=Debug; Platform=AnyCPU;BuildingSolutionFile=true; CurrentSolutionConfigurationContents=$(CurrentSolutionConfigurationContents); SolutionDir=$(SolutionDir); SolutionExt=$(SolutionExt); SolutionFileName=$(SolutionFileName); SolutionName=$(SolutionName); SolutionPath=$(SolutionPath)\">\n    <Output TaskParameter=\"TargetOutputs\" ItemName=\"MSBuildIssueBuildOutput\" />\n  </MSBuild>\n</Target>\n```\n\n...which explains how the repro files would only talk about the other (non-transformed) project; its outputs were indeed properly collected (and were the only ones shown) and it wasn't a _corruption_ of the output of the `.csproj.metaproj` files we were seeing, but rather the _absence_ of output.\n\nFor my next trick, I'll encode my findings into a failing unit test and then we can discuss how to fix this.\n",
        "createdAt": "2015-04-22T17:33:59Z",
        "updatedAt": "2015-04-23T01:20:38Z",
        "author": {
          "login": "olivierdagenais"
        }
      },
      {
        "body": "You can cherry-pick the [failing] unit test as b5f705600c8404f7f09b5fe329f69493cec50a86 in the `69-metaprojects_should_relay_outputs` branch of my fork.\n",
        "createdAt": "2015-04-23T03:17:00Z",
        "updatedAt": "2015-04-23T03:18:00Z",
        "author": {
          "login": "olivierdagenais"
        }
      },
      {
        "body": "I'm developing on Windows 7 with Visual Studio 2013, so I understand there are some tests that are known to fail (as per issue #30) and, according to the README, a sub-optimal experience without VS 2015, but my proposed fix in 0af88d91e8e404680b02a53c7bf08d39efd6c2e3 indeed fixes the broken test I introduced and does not appear to break other tests.\n\nLet me know what you think and I can open a pull request after reviewing other possible instances of this sort of \"missing relay\".\n\nBTW, the unit test I added creates some files in `%LocalAppData%\\Temp\\TempDirForMSBuildUnitTests`, which allows one to also reproduce the defect with older versions of MSBuild (as had been initially reported in the Connect report) by running something like:\n\n```\n\"c:\\Program Files (x86)\\MSBuild\\12.0\\Bin\\MSBuild.exe\" automatic.msbuild /verbosity:minimal\n```\n",
        "createdAt": "2015-04-23T03:38:35Z",
        "updatedAt": "2015-04-23T03:38:35Z",
        "author": {
          "login": "olivierdagenais"
        }
      },
      {
        "body": "What do you think, @sarajoiner?\n",
        "createdAt": "2015-04-28T17:41:38Z",
        "updatedAt": "2015-04-28T17:41:38Z",
        "author": {
          "login": "olivierdagenais"
        }
      },
      {
        "body": "Added a couple of comments.  Definitely looks like you're on the right track to me. :)\n",
        "createdAt": "2015-04-29T00:53:09Z",
        "updatedAt": "2015-04-29T00:53:09Z",
        "author": {
          "login": "sarajoiner"
        }
      },
      {
        "body": "> Added a couple of comments. Definitely looks like you're on the right track to me. :)\n\nFabulous!  Does this mean I satisfy the first two \"limits\" outlined in [Contributing Code](https://github.com/Microsoft/msbuild/wiki/Contributing-Code)?\n\n> - Contributions must be discussed with the team first, or they will likely be declined.\n> - Only contributions referencing an approved Issue will be accepted.\n\nIn other words, does your last comment imply the contribution has been discussed (my pull request will of course address your comments and be more thorough) and that this issue is approved?\n",
        "createdAt": "2015-04-29T01:11:27Z",
        "updatedAt": "2015-04-29T01:11:47Z",
        "author": {
          "login": "olivierdagenais"
        }
      },
      {
        "body": "Ah ...  Unfortunately, I'm not a current member of the MSBuild team.  So my opinion may hold some weight, but I don't think it counts as an official \"go ahead\".\n\n@AndyGerlicher, @ValMenn, @dannyvv, @NikolaiTillmann, would one of you care to weigh in? \n",
        "createdAt": "2015-04-29T01:18:00Z",
        "updatedAt": "2015-04-29T01:18:00Z",
        "author": {
          "login": "sarajoiner"
        }
      }
    ]
  }
}