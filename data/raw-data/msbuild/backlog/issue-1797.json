{
  "number": 1797,
  "title": "VS churns up memory and app hangs during build with multiple targets",
  "body": "![image](https://cloud.githubusercontent.com/assets/83597/23612755/8717f890-0274-11e7-9f3f-a0ce08e5e6e5.png)\r\n\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n    <PropertyGroup>\r\n        <Description>BCrypt.Net, C# implementation of BCrypt, OpenBSD-style Blowfish password hashing</Description>\r\n        <AssemblyTitle>BCrypt.Net-Next</AssemblyTitle>\r\n        <VersionPrefix>2.0.2</VersionPrefix>\r\n        <Authors>https://github.com/BcryptNet/bcrypt.net</Authors>\r\n        <TargetFrameworks>net20;net35;net40;net45;net451;net452;net462;netstandard1.3;netstandard1.6;netcoreapp1.0</TargetFrameworks>\r\n        <AssemblyName>BCrypt.Net-Next</AssemblyName>\r\n        <PackageId>BCrypt.Net</PackageId>\r\n        <PackageTags>bcrypt;BCrypt.Net;cryptography;hashing;password;security</PackageTags>\r\n        <PackageReleaseNotes>Corrects usage of Secure random number generator; change secure equals to match .net identity implmentation; inline vars in encipher method; change UTF8 handling to safer default</PackageReleaseNotes>\r\n        <PackageIconUrl>https://raw.githubusercontent.com/BcryptNet/bcrypt.net/master/ico64.png</PackageIconUrl>\r\n        <PackageProjectUrl>https://github.com/BcryptNet/bcrypt.net</PackageProjectUrl>\r\n        <PackageLicenseUrl>https://github.com/BcryptNet/bcrypt.net/blob/master/licence.txt,</PackageLicenseUrl>\r\n        <RepositoryType>git</RepositoryType>\r\n        <RepositoryUrl>https://github.com/BcryptNet/bcrypt.net</RepositoryUrl>\r\n    </PropertyGroup>\r\n\r\n    <ItemGroup Condition=\" '$(TargetFramework)' == 'net20' \">\r\n        <Reference Include=\"System\" />\r\n    </ItemGroup>\r\n    <PropertyGroup Condition=\" '$(TargetFramework)' == 'net20' \">\r\n        <DefineConstants>$(DefineConstants);LEGACY</DefineConstants>\r\n    </PropertyGroup>\r\n\r\n    <PropertyGroup Condition=\" '$(TargetFramework)' == 'net35' \">\r\n        <DefineConstants>$(DefineConstants);LEGACY</DefineConstants>\r\n    </PropertyGroup>\r\n\r\n    <ItemGroup Condition=\" '$(TargetFramework)' == 'net35' \">\r\n        <Reference Include=\"System\" />\r\n    </ItemGroup>\r\n\r\n    <ItemGroup Condition=\" '$(TargetFramework)' == 'net40' \">\r\n        <Reference Include=\"System\" />\r\n        <Reference Include=\"Microsoft.CSharp\" />\r\n    </ItemGroup>\r\n\r\n    <PropertyGroup Condition=\" '$(TargetFramework)' == 'net40' \">\r\n        <DefineConstants>$(DefineConstants);LEGACY</DefineConstants>\r\n    </PropertyGroup>\r\n\r\n    <ItemGroup Condition=\" '$(TargetFramework)' == 'net45' \">\r\n        <Reference Include=\"System\" />\r\n    </ItemGroup>\r\n\r\n    <ItemGroup Condition=\" '$(TargetFramework)' == 'net451' \">\r\n        <PackageReference Include=\"System.Text.RegularExpressions\" Version=\"4.3.0\" />\r\n        <Reference Include=\"System\" />\r\n        <Reference Include=\"Microsoft.CSharp\" />\r\n    </ItemGroup>\r\n\r\n    <ItemGroup Condition=\" '$(TargetFramework)' == 'net452' \">\r\n        <PackageReference Include=\"System.Text.RegularExpressions\" Version=\"4.3.0\" />\r\n        <Reference Include=\"System\" />\r\n    </ItemGroup>\r\n\r\n    <ItemGroup Condition=\" '$(TargetFramework)' == 'net462' \">\r\n        <PackageReference Include=\"System.Text.RegularExpressions\" Version=\"4.3.0\" />\r\n        <Reference Include=\"System\" />\r\n    </ItemGroup>\r\n\r\n    <ItemGroup Condition=\" '$(TargetFramework)' == 'netstandard1.3' \">\r\n        <PackageReference Include=\"System.Diagnostics.Debug\" Version=\"4.3.0\" />\r\n        <PackageReference Include=\"System.Runtime.Extensions\" Version=\"4.3.0\" />\r\n        <PackageReference Include=\"System.Security.Cryptography.Algorithms\" Version=\"4.3.0\" />\r\n        <PackageReference Include=\"System.Text.Encoding.Extensions\" Version=\"4.3.0\" />\r\n        <PackageReference Include=\"System.Text.RegularExpressions\" Version=\"4.3.0\" />\r\n    </ItemGroup>\r\n\r\n    <ItemGroup Condition=\" '$(TargetFramework)' == 'netstandard1.6' \">\r\n        <PackageReference Include=\"System.Diagnostics.Debug\" Version=\"4.3.0\" />\r\n        <PackageReference Include=\"System.Runtime.Extensions\" Version=\"4.3.0\" />\r\n        <PackageReference Include=\"System.Security.Cryptography.Algorithms\" Version=\"4.3.0\" />\r\n        <PackageReference Include=\"System.Text.Encoding.Extensions\" Version=\"4.3.0\" />\r\n        <PackageReference Include=\"System.Text.RegularExpressions\" Version=\"4.3.0\" />\r\n    </ItemGroup>\r\n\r\n    <ItemGroup Condition=\" '$(TargetFramework)' == 'netcoreapp1.0' \">\r\n        <PackageReference Include=\"System.Diagnostics.Debug\" Version=\"4.3.0\" />\r\n        <PackageReference Include=\"System.Runtime.Extensions\" Version=\"4.3.0\" />\r\n        <PackageReference Include=\"System.Security.Cryptography.Algorithms\" Version=\"4.3.0\" />\r\n        <PackageReference Include=\"System.Text.Encoding.Extensions\" Version=\"4.3.0\" />\r\n        <PackageReference Include=\"System.Text.RegularExpressions\" Version=\"4.3.0\" />\r\n    </ItemGroup>\r\n\r\n</Project>\r\n```\r\n\r\n![image](https://cloud.githubusercontent.com/assets/83597/23613709/7709c6e6-0278-11e7-8795-d956062ce988.png)\r\n\r\nThe proj on trying to open runs restore/build and implodes with xml errors as per the screenshot; This might be more to do with nuget but nuget seems to restore fine and its VS that hangs with msbuild running in task manager. Directly calling msbuild against the csproj works fine. So I'm assuming its also with the multi-targeting. I'm unable to get to the build log in the console as VS hangs.\r\n\r\nAll the parts being separate yet totally reliant on each other its difficult at a glance to pick apart where an issues coming from; more so when VS still locks up on the failure of components.\r\n\r\nIronically (ironic as I have 32gig of ram) VS logs a low memory error;\r\n```\r\nError Information\r\nAppInsightsEvent Name = vs/perf/lowmemoryreached\r\n          Description = Low memory reached.\r\n     TelemetrySession = 'c0a0e37f-4b0d-4979-a14b-9427ff623bf9' Started = True OptIn=True IsInitialized = True Cloned = False\r\n             UTC time = 2017-03-06T13:51:38\r\n\r\n currently running Stack\r\n    at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.SetBucketParametersForNoExceptionFromClr()\r\n    at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.SetInitialBucketParameters(Exception exceptionObject)\r\n    at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport..ctor(FaultEvent faultEvent, TelemetrySession telemetrySession)\r\n    at Microsoft.VisualStudio.Telemetry.SessionChannel.WatsonSessionChannel.PostEvent(TelemetryEvent telemetryEvent)\r\n    at Microsoft.VisualStudio.Telemetry.TelemetrySession.PostEvent(TelemetryEvent telemetryEvent)\r\n    at Microsoft.Performance.ResponseTime.LowMemoryDumpCollectorFactory.LowMemoryDumpCollector.CollectAndSendDump()\r\n    at Microsoft.Performance.ResponseTime.LowMemoryDumpCollectorFactory.LowMemoryDumpCollector.<>c__DisplayClass3_0.<.ctor>b__0(Object <sender>, ElapsedEventArgs <e>)\r\n    at System.Timers.Timer.MyTimerCallback(Object state)\r\n    at System.Threading.TimerQueueTimer.CallCallbackInContext(Object state)\r\n    at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)\r\n    at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)\r\n    at System.Threading.TimerQueueTimer.CallCallback()\r\n    at System.Threading.TimerQueueTimer.Fire()\r\n    at System.Threading.TimerQueue.FireNextTimers()\r\n    at System.Threading.TimerQueue.AppDomainTimerCallback()\r\nTelemetry Session Shared Properties:\r\n   VS.Core.User.Location.GeoId = 242\r\n   VS.Core.ExeName = perfwatson2\r\n   VS.Core.BranchName = d15rel\r\n   VS.Core.User.IsOptedIn = True\r\n   VS.Core.User.IsMicrosoftInternal = False\r\n   VS.Core.User.Type = External\r\n   VS.Core.MacAddressHash = 33c53b4344be78ab998a032ed69f431bcf1cb85e9481d6a8c61667126778367b\r\n   VS.Core.OS.Version = 10.0.14393.48\r\n   VS.Core.User.Id = cd3be1d3-9a6b-4104-a945-3f289a3534eb\r\n   VS.Core.Machine.Id = ffcf252f-e0ba-41c5-8c0b-cf2972d6daf9\r\n   VS.Core.User.PersonalizationVsid = 240c54b5-94d4-4868-a396-1c5a50996b1a\r\n   VS.Core.User.IsMicrosoftInternalDeprecated = False\r\n   VS.Core.ExeVersion = 15.0.26206.0\r\n   VS.Core.TelemetryApi.ProductVersion = 15.0.770-master79B7C1EE\r\n   VS.Core.BuildNumber = 26206\r\nTelemetry event 'vs/perf/lowmemoryreached' properties:\r\n   [VS.Fault.WatsonOptIn] = 'CallbackOptIn'\r\n   [VS.Fault.Exception.ModuleVersion] = '15.0.26206.0'\r\n   [VS.Fault.Exception.Offset] = '661'\r\n   [vs.perfwatson2.dumpcollectiontimems] = '5768'\r\n   [VS.Fault.WatsonReportNumber] = '0'\r\nTelemetry event 'vs/perf/lowmemoryreached' reserved properties:\r\n   [DataModel.Severity] = '10'\r\n   [DataModel.Source] = 'DataModelApi'\r\n   [DataModel.EntityType] = 'Fault'\r\n   [DataModel.EntitySchemaVersion] = '4'\r\n   [DataModel.CorrelationId] = '67588653-1a9d-4f2e-9bd5-bba8b5ee109d'\r\n   [DataModel.ProductName] = 'vs'\r\n   [DataModel.FeatureName] = 'perf'\r\n   [DataModel.EntityName] = 'lowmemoryreached'\r\n   [DataModel.Fault.Exception.StackTrace] = '   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.SetBucketParametersForNoExceptionFromClr()\r\n   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.SetInitialBucketParameters(Exception exceptionObject)\r\n   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport..ctor(FaultEvent faultEvent, TelemetrySession telemetrySession)\r\n   at Microsoft.VisualStudio.Telemetry.SessionChannel.WatsonSessionChannel.PostEvent(TelemetryEvent telemetryEvent)\r\n   at Microsoft.VisualStudio.Telemetry.TelemetrySession.PostEvent(TelemetryEvent telemetryEvent)\r\n   at Microsoft.Performance.ResponseTime.LowMemoryDumpCollectorFactory.LowMemoryDumpCollector.CollectAndSendDump()\r\n   at Microsoft.Performance.ResponseTime.LowMemoryDumpCollectorFactory.LowMemoryDumpCollector.<>c__DisplayClass3_0.<.ctor>b__0(Object <sender>, ElapsedEventArgs <e>)\r\n   at System.Timers.Timer.MyTimerCallback(Object state)\r\n   at System.Threading.TimerQueueTimer.CallCallbackInContext(Object state)\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)\r\n   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)\r\n   at System.Threading.TimerQueueTimer.CallCallback()\r\n   at System.Threading.TimerQueueTimer.Fire()\r\n   at System.Threading.TimerQueue.FireNextTimers()\r\n   at System.Threading.TimerQueue.AppDomainTimerCallback()\r\n'\r\n   [DataModel.Fault.Description] = 'Low memory reached.'\r\n   [DataModel.Fault.BucketParam1] = 'devenv.exe'\r\n   [DataModel.Fault.BucketParam2] = '15.0.26206.0'\r\n   [DataModel.Fault.BucketParam3] = 'vs.perf.lowmemoryreached'\r\n   [DataModel.Fault.BucketParam4] = '3072MB'\r\n   [DataModel.Fault.BucketParam5] = '_'\r\n   [DataModel.Fault.BucketParam6] = '_'\r\n   [DataModel.Fault.BucketParam7] = ''\r\n   [DataModel.Fault.BucketParam8] = ''\r\n   [DataModel.Fault.BucketParam9] = ''\r\n   [DataModel.Fault.BucketParam10] = ''\r\n   [DataModel.Fault.IsSampled] = 'True'\r\n\r\n   CallStack Hash:6863d261\r\n\r\n   Added File C:\\Users\\chris\\AppData\\Local\\Temp\\LowMemoryDump0e78550c-6238-419d-a90b-3a5e48f6519c.dmp\r\n\r\n\r\n\r\n```\r\n\r\n",
  "state": "CLOSED",
  "createdAt": "2017-03-06T14:50:33Z",
  "updatedAt": "2024-02-21T17:21:08Z",
  "closedAt": "2017-03-07T22:06:01Z",
  "author": {
    "login": "ChrisMcKee"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Ok if I leave it, it takes ~9-15 minutes for vs to ungrey itself and the job to complete\r\n\r\nThe build outputs about 60.8mb so that sorta explains a lot; I've uploaded it to SYNC https://cp.sync.com/dl/cc9a32cc0#mpx5n7ki-9dnnwh92-988zvd85-iv272s2q\r\n\r\nHave the VS team not worked out how to call msbuiild without locking the process?\r\n\r\nOn the upside I got to have some dinner and a brew while it compiled; takes me back to Bordland compiler.\r\n\r\n",
        "createdAt": "2017-03-06T15:24:14Z",
        "updatedAt": "2017-03-06T15:24:14Z",
        "author": {
          "login": "ChrisMcKee"
        }
      },
      {
        "body": "Issue seems to be resolved in rtm. ",
        "createdAt": "2017-03-07T22:06:01Z",
        "updatedAt": "2017-03-07T22:06:01Z",
        "author": {
          "login": "ChrisMcKee"
        }
      }
    ]
  }
}