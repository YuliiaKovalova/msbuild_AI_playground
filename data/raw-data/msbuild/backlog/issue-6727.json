{
  "number": 6727,
  "title": "Idea: Enhance MsBuild to use Usn Journal Records for fast up to date checks of files (ala BuildXL)?",
  "body": "As folks working on MsBuild know, there was an optimization done by the [BuildXL](https://github.com/microsoft/BuildXL) team to use the journal metadata available in file systems to quickly know if the contents of a file changed or not. In the Build XL case [they were able](https://github.com/microsoft/BuildXL/blob/d1d0b430961e56a5bd006783ab8bb5c3d563bb60/Public/Src/Utilities/Storage/ChangeTracking/ChangedFileIdInfo.cs) to use the  [FSCTL_READ_USN_JOURNAL, etc ](https://docs.microsoft.com/en-us/windows/win32/api/winioctl/ni-winioctl-fsctl_read_file_usn_data) IOCTL to read [USN_RECORDs](https://docs.microsoft.com/en-us/windows/win32/api/winioctl/ns-winioctl-usn_record_v3) to achieve this.\r\n\r\nWould it be possible to use such an optimization to enhance the MsBuild up to date check?\r\nJust thought I would throw it out there \ud83d\ude04. ",
  "state": "CLOSED",
  "createdAt": "2021-08-02T23:48:03Z",
  "updatedAt": "2024-02-21T14:12:16Z",
  "closedAt": "2021-10-11T13:27:22Z",
  "author": {
    "login": "bgianfo"
  },
  "labels": [
    "Area: Performance",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "rokonec"
      }
    ]
  },
  "milestone": {
    "title": "VS 17.1"
  },
  "comments": {
    "nodes": [
      {
        "body": "Did they ever get it working without a service running with elevated permissions? That would be a blocker for us.",
        "createdAt": "2021-08-03T21:59:43Z",
        "updatedAt": "2021-08-03T21:59:43Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> Did they ever get it working without a service running with elevated permissions?\r\n\r\nFrom browsing [the code](https://github.com/microsoft/BuildXL/blob/e3d1674c2f4d0b0ed9429c93f1e635d2c61f9c1d/Public/Src/Utilities/Native/IO/Windows/FileSystem.Win.cs#L1253-L1294) it appears they can use a different FSCTL depending on when the journal is \"privileged\" or not.\r\nI didn't read all the code, or claim to fully understand the code I did read though, so perhaps there is more to the story. \ud83d\ude03 \r\n\r\nSnippet: \r\n\r\n```csharp\r\n        /// <inheritdoc />\r\n        public unsafe ReadUsnJournalResult TryReadUsnJournal(\r\n            SafeFileHandle volumeHandle,\r\n            byte[] buffer,\r\n            ulong journalId,\r\n            Usn startUsn = default(Usn),\r\n            bool forceJournalVersion2 = false,\r\n            bool isJournalUnprivileged = false)\r\n        {\r\n            Contract.Requires(volumeHandle != null);\r\n            Contract.Requires(buffer != null && buffer.Length > 0);\r\n            Contract.Ensures(Contract.Result<ReadUsnJournalResult>() != null);\r\n\r\n            var readOptions = new ReadUsnJournalData\r\n                              {\r\n                                  MinMajorVersion = 2,\r\n                                  MaxMajorVersion = forceJournalVersion2 ? (ushort) 2 : (ushort) 3,\r\n                                  StartUsn = startUsn,\r\n                                  Timeout = 0,\r\n                                  BytesToWaitFor = 0,\r\n                                  ReasonMask = uint.MaxValue, // TODO: Filter this!\r\n                                  ReturnOnlyOnClose = 0,\r\n                                  UsnJournalID = journalId,\r\n                              };\r\n\r\n            int bytesReturned;\r\n            bool ioctlSuccess;\r\n            int error;\r\n\r\n            fixed (byte* pRecordBuffer = buffer)\r\n            {\r\n                ioctlSuccess = DeviceIoControl(\r\n                    volumeHandle,\r\n                    ioControlCode: isJournalUnprivileged ? NativeIOConstants.FsctlReadUnprivilegedUsnJournal : NativeIOConstants.FsctlReadUsnJournal,\r\n                    inputBuffer: (IntPtr) (&readOptions),\r\n                    inputBufferSize: ReadUsnJournalData.Size,\r\n                    outputBuffer: (IntPtr) pRecordBuffer,\r\n                    outputBufferSize: buffer.Length,\r\n                    bytesReturned: out bytesReturned,\r\n                    overlapped: IntPtr.Zero);\r\n                error = Marshal.GetLastWin32Error();\r\n            }\r\n```\r\n\r\n",
        "createdAt": "2021-08-03T22:19:17Z",
        "updatedAt": "2021-08-03T22:19:17Z",
        "author": {
          "login": "bgianfo"
        }
      },
      {
        "body": "USN is interesting and I think it could be considered for incremental-build related files up to date checks. After start of MSBuild build, each nodes would enumerate USN journal and cache into memory file<->USN relation. Each project would have to persist on disc into /obj folder its incremental-build related files USN map. When project is to be build, such file would be read. File would be considered up-to-date if  its `last build USN` == `current USN`.\r\n\r\nHowever I do not recommend to implement USN journal for MSBuild files up to date checks for following reasons:\r\n- USN journal is on NTFS only and although mostly enabled by default if can be disabled.\r\n- Enabling USN might affect OS performance, especially in cases when enabled on system volume or any other system-busy volume.\r\n- Enabling USN requires admin elevation.\r\n- Many USN API requires admin elevation. BuildXL somehow works around it by using undocumented `FSCTL_READ_UNPRIVILEGED_USN_JOURNAL` which was introduced in Windows 10 recently.\r\n- Non trivial amount of heavy P/Invoke code which needs to be maintained.\r\n- USN is asynchronous and therefore cannot be used for every up to date checks. If a MSBuild task generates/updates file following task could be executed before USN journal propagate files changes with resulting false-positive file up to date check.\r\n- Enumerating USN journal takes a while and there is a chance that actual file up to date checks could be faster than this.\r\n- Querying USN per file was, in my micro benchmark, slower than standard up-to-date check, i.e. GetLastWriteTime.",
        "createdAt": "2021-10-11T08:04:21Z",
        "updatedAt": "2022-10-20T12:54:10Z",
        "author": {
          "login": "rokonec"
        }
      }
    ]
  }
}