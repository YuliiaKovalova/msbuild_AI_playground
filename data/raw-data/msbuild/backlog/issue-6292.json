{
  "number": 6292,
  "title": "MSBuild creates a faulty .net global tool package",
  "body": "### Issue Description\r\n\r\n.NET Global tool built with msbuild creates a faulty nuget packages that gives `An assembly specified in the application dependencies manifest (security-scan.deps.json) was not found` on startup.\r\n\r\n### Steps to Reproduce\r\n\r\nI build on windows, test in docker.\r\n\r\n1. git clone https://github.com/security-code-scan/security-code-scan.git\r\n2. cd security-code-scan\r\n2. git checkout 675161673b3d6f3c72b7f8bd63e2fa43ae1e493b\r\n3. nuget restore SecurityCodeScan.sln\r\n4. msbuild SecurityCodeScan.sln /t:Build /p:Configuration=Release\r\n5. docker run -ti --rm --volume \"<INSERT_YOUR_DIR>SecurityCodeScan.Tool\\\\.NET Core\\bin\":/tmp/app -w /tmp/app mcr.microsoft.com/dotnet/sdk:5.0\r\n6. dotnet tool install --global --add-source Release security-scan\r\n7. export PATH=\"$PATH:/root/.dotnet/tools\"\r\n8. security-scan\r\n\r\n### Expected Behavior\r\n\r\nSuccessful run\r\n\r\n### Actual Behavior\r\n\r\nError:\r\n  An assembly specified in the application dependencies manifest (security-scan.deps.json) was not found:\r\n    package: 'System.Globalization.Extensions', version: '4.3.0'\r\n    path: 'runtimes/unix/lib/netstandard1.3/System.Globalization.Extensions.dll'\r\n\r\n### Analysis\r\n\r\na. If I build the same solution in Visual Studio it produces correct nuget package.\r\nb. If I build the project (and its dependencies) with dotnet: `dotnet build \"SecurityCodeScan.Tool/.NET Core/security-scan.csproj\" --configuration Release` it also produces valid package. (To make it build with dotnet.exe please slightly edit config files, attaching [diff.txt](https://github.com/dotnet/msbuild/files/6192092/diff.txt))\r\n\r\n\r\n### Versions & Configurations\r\n\r\nmsbuild 16.9.0.11203\r\ndotnet 5.0.201\r\n",
  "state": "CLOSED",
  "createdAt": "2021-03-23T18:57:54Z",
  "updatedAt": "2024-02-21T14:14:10Z",
  "closedAt": "2021-09-06T06:40:23Z",
  "author": {
    "login": "JarLob"
  },
  "labels": [
    "bug",
    "needs-more-info",
    "needs-attention",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "benvillalobos"
      },
      {
        "login": "v-zhiyul"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "I had to run `dotnet restore` instead of nuget restore on your solution to get a successful restore. My run of `msbuild SecurityCodeScan.sln /t:Build /p:Configuration=Release` fails with:\r\n```\r\n\"C:\\src\\git\\_customerProjects\\security-code-scan\\SecurityCodeScan.Vsix\\SecurityCodeScan.Vsix.csproj\" (default target) (\r\n4) ->\r\n  C:\\src\\git\\_customerProjects\\security-code-scan\\SecurityCodeScan.Vsix\\SecurityCodeScan.Vsix.csproj(92,11): error MSB4\r\n226: The imported project \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Dogfood\\MSBuild\\Microsoft\\VisualStudio\\v\r\n16.0\\VSSDK\\Microsoft.VsSDK.targets\" was not found. Also, tried to find \"VSSDK\\Microsoft.VsSDK.targets\" in the fallback\r\nsearch path(s) for $(VSToolsPath) - \"C:\\Program Files (x86)\\MSBuild\\Microsoft\\VisualStudio\\v16.0\" . These search paths\r\nare defined in \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Dogfood\\MSBuild\\Current\\Bin\\msbuild.exe.Config\". Co\r\nnfirm that the path in the <Import> declaration is correct, and that the file exists on disk in one of the search paths\r\n```\r\nCould you provide a link to the dependency I'm missing?",
        "createdAt": "2021-04-28T17:06:20Z",
        "updatedAt": "2021-04-28T17:06:20Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "It must be \"Visual Studio extension development\"\r\n\r\n![image](https://user-images.githubusercontent.com/26652396/116926579-2fe1d080-ac63-11eb-853e-3b3b34d1fd6c.png)\r\n",
        "createdAt": "2021-05-03T20:00:22Z",
        "updatedAt": "2021-05-03T20:00:22Z",
        "author": {
          "login": "JarLob"
        }
      },
      {
        "body": "I can't seem to get this to repro.  The msbuild call results in a successful build with some compiler warnings,\r\n\r\ndotnet --version (in the container) 5.0.203\r\nmsbuild --version 16.10.0-preview-21253\r\n\r\ncould you provide the full output of msbuild --version? This includes the hash.",
        "createdAt": "2021-05-21T20:02:51Z",
        "updatedAt": "2021-05-21T20:02:51Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "Did it succeed at step 9.? I didn't write that it fails to build :/",
        "createdAt": "2021-05-22T07:28:03Z",
        "updatedAt": "2021-05-22T07:28:03Z",
        "author": {
          "login": "JarLob"
        }
      },
      {
        "body": "@JarLob I did get a splash screen from running `security-scan`",
        "createdAt": "2021-05-24T19:00:29Z",
        "updatedAt": "2021-05-24T19:00:29Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "Coming back to this, I still can't repro. Had issues once in docker but that was because of a partially malformed path in the repro steps. Even then, running the tool works just fine.\r\n\r\nIs this still an issue on your end? Does this work on a newer version of MSBuild? `16.9.0.11203` is fairly old.",
        "createdAt": "2021-06-28T18:59:26Z",
        "updatedAt": "2021-06-28T19:00:13Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "> Does this work on a newer version of MSBuild? 16.9.0.11203 is fairly old.\r\n\r\nDoing some due dilligence: That version of msbuild is probably what your version of the sdk is using, which is fine. But running `msbuild ...` will likely produce different results from `dotnet msbuild ...` because `msbuild ...` would point to your VS installation instead of your sdk install. \r\n\r\nCould you post the output of `msbuild --version`?",
        "createdAt": "2021-06-28T19:07:32Z",
        "updatedAt": "2021-06-28T19:07:32Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "Hi @BenVillalobos, just tried running Developer Command Prompt for VS 2019. The VS is up to the date, msbuild version is `16.10.2.30804` and cannot reproduce it anymore.",
        "createdAt": "2021-06-29T14:06:03Z",
        "updatedAt": "2021-06-29T14:06:03Z",
        "author": {
          "login": "JarLob"
        }
      },
      {
        "body": "Hit this one again :( Basically reproducible with the latest version, so just skip step 3.\r\nmsbuild 16.10.2.30804\r\ndotnet 5.0.301",
        "createdAt": "2021-07-08T11:02:38Z",
        "updatedAt": "2021-07-08T11:02:38Z",
        "author": {
          "login": "JarLob"
        }
      },
      {
        "body": "This issue is marked as stale because feedback has been requested for 30 days with no response. Please respond within 14 days or this issue will be closed due to inactivity.",
        "createdAt": "2021-08-28T00:01:00Z",
        "updatedAt": "2021-08-28T00:01:00Z",
        "author": {
          "login": "ghost"
        }
      },
      {
        "body": "Is there any feedback I didn't respond?",
        "createdAt": "2021-08-28T06:10:28Z",
        "updatedAt": "2021-08-28T06:10:28Z",
        "author": {
          "login": "JarLob"
        }
      },
      {
        "body": "I tried to repro it with GitHub actions: created a CI build runner at https://github.com/JarLob/security-code-scan/blob/vs2019/.github/workflows/build.yml that built the dotnet tool https://github.com/JarLob/security-code-scan/suites/3631189184/artifacts/87889576 When I downloaded it and installed with `dotnet tool install --global --add-source {mypath} security-scan` it worked correctly. The build log is [logs_5.zip](https://github.com/dotnet/msbuild/files/7083541/logs_5.zip)\r\n\r\nHowever if I download a build artefact from the other CI - https://ci.appveyor.com/api/buildjobs/53p9buj8kejd1taw/artifacts/SecurityCodeScan.Tool%2F.NET%20Core%2Fbin%2FRelease%2Fsecurity-scan.5.2.3.nupkg it fails to run. Attaching the full log here:\r\n[log.txt](https://github.com/dotnet/msbuild/files/7083540/log.txt)\r\n\r\nI see I have a workaround - migrate to GH Actions. Not sure if these logs are useful for you to find what is the cause of the faulty build.",
        "createdAt": "2021-08-31T11:39:26Z",
        "updatedAt": "2021-08-31T11:39:26Z",
        "author": {
          "login": "JarLob"
        }
      },
      {
        "body": "@JarLob We tried to reproduce you provided Repro_Steps without Step 3, but unfortunately we didn\u2019t reproduce it on VS 16.11(MSbuild:16.11.0.30205). So could you help to confirm whether your problem also reproduces after updating to the latest VS(16.11)? ",
        "createdAt": "2021-09-06T06:22:54Z",
        "updatedAt": "2021-09-06T06:22:54Z",
        "author": {
          "login": "v-zhiyul"
        }
      },
      {
        "body": "Whatever",
        "createdAt": "2021-09-06T06:40:23Z",
        "updatedAt": "2021-09-06T06:40:23Z",
        "author": {
          "login": "JarLob"
        }
      }
    ]
  }
}