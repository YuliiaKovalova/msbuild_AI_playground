{
  "number": 9279,
  "title": "[Bug | Question]: Nuget restore + build does not restore nuget package content with missing obj folder",
  "body": "### Issue Description\r\n\r\nI am new to writing msbuild files. I originally thought the issue was a nuget issue, but I am not so sure anymore. The issue I posted in the nuget project is here: https://github.com/NuGet/Home/issues/12902.\r\n\r\nI am not using a standard solution (.sln) file for my build and am manually writing msbuild project files, because I have a mixed project build that I want to parallelize. The solution file does not understand some of my projects. I have a parent msbuild file that invokes MSBuild with the BuildInParallel flag on a set of child projects.\r\n\r\n\r\n\r\n### Steps to Reproduce\r\n\r\n1. Create parent MSBuild project\r\n2. Create child .csproj project that has a package reference to a nuget package that has content to copy to the output directory\r\n3. Delete obj / bin folders in child project\r\n4. Invoke the child project build from the parent project using the MSBuild task\r\n\r\n### Expected Behavior\r\n\r\nThe .csproj build target that executes a pre build nuget restore should copy the nuget package content to the output folder if the obj folder needed to be initially recreated\r\n\r\n### Actual Behavior\r\n\r\nIn a child C# project (.csproj), The build target does a nuget restore and then executes the build. The restore target seems to work fine and restores the packages and the missing obj folder. However, when the build target executes, the content in the nuget package does not get copied to the output folder if the obj folder was initially missing.\r\n\r\n### Analysis\r\n\r\nIt looks to me that what is happening is there is some attachment when the MSBuild task is launched to the nuget.g.props file within the obj folder and it gets imported into the project. If this file is generated in a pre build step, it does not get re imported / reloaded within the build.\r\n\r\nIf I create a parent msbuild project file that instead firstly invokes dotnet restore and then the MSBuild task, the content is copied successfully if the obj folder does not initially exist. I think this is because the dotnet restore exec task generates the nuget.g.props file first. Then the MSBuild task is able to load and import the existing file. \r\n\r\nThis workaround is not ideal, because I need to create a dummy parent project file and directly invoke an exec task with dotnet restore. Ideally MSBuild would reload the nuget.g.props file as a first step in the build target instead of when the MSBuild task was initially created (if that is what is going on).\r\n\r\n### Versions & Configurations\r\n\r\n.NET SDK latest, MSBuild latest",
  "state": "CLOSED",
  "createdAt": "2023-09-27T14:11:47Z",
  "updatedAt": "2024-02-21T14:03:31Z",
  "closedAt": "2023-11-17T19:00:44Z",
  "author": {
    "login": "LostTime76"
  },
  "labels": [
    "bug",
    "needs-more-info",
    "stale",
    "closed-by-bot",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Your analysis is pretty good! This is a limitation of the way NuGet and MSBuild interact.\r\n\r\nAt Restore time, NuGet will create files that will be imported into the projects at build time. Because MSBuild uses a \"first evaluate, then execute\" model, those files have to exist _when the build starts_--if they're created or modified during the build, they won't get noticed. (This is similar to other scripting languages--at some point the interpreter has to read the file from disk and doesn't get visibility into changes after that point).\r\n\r\n> In a child C# project (.csproj), The build target does a nuget restore and then executes the build.\r\n\r\nThis isn't true, `Build` should not trigger `Restore`. Are you seeing otherwise? Or are you manually calling `Restore;Build` or similar?\r\n\r\n> If I create a parent msbuild project file that instead firstly invokes dotnet restore and then the MSBuild task, the content is copied successfully if the obj folder does not initially exist. I think this is because the dotnet restore exec task generates the nuget.g.props file first. Then the MSBuild task is able to load and import the existing file.\r\n\r\nThis is not ideal for another reason: if the `.g.props` files are _modified_ during restore (but they existed before), the build will see the stale version rather than the new one after an inline restore.\r\n\r\nThere is a path forward for you though: `msbuild -restore` (or `dotnet build`) runs `Restore` before the default target _in a special mode_ that ensures everything is up to date for the build. And it's implemented in a way that is pretty decoupled from NuGet details: MSBuild runs the `Restore` target of the project specified, which can do whatever it needs to.\r\n\r\nSo for your case, I'd suggest making the parent MSBuild project's `Restore` target do whatever it needs to do, including calling NuGet restore on the child projects that support it, at which point `dotnet build parent.proj` should work from clean.",
        "createdAt": "2023-09-27T15:23:37Z",
        "updatedAt": "2023-09-27T15:23:37Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> This isn't true, Build should not trigger Restore. Are you seeing otherwise? Or are you manually calling Restore;Build or similar?\r\n\r\nSorry, I was referencing my particular scenario. That was not clear. In my child.csproj build target I was manually invoking a restore using the Before / AfterTargets Attributes. \r\n\r\n> So for your case, I'd suggest making the parent MSBuild project's Restore target do whatever it needs to do, including calling NuGet restore on the child projects that support it, at which point dotnet build parent.proj should work from clean.\r\n\r\nI think this is similar to what I am doing right now. The parent build target invokes the restore then invokes the build, which does work. Not ideal as I need to manage an extra msbuild file per C# project, but it is what it is. \r\n\r\nI thought I might be doing something wrong, but it looks like it is expected behavior. Thanks for your help help. We can close this.",
        "createdAt": "2023-09-27T19:50:49Z",
        "updatedAt": "2023-09-27T19:50:49Z",
        "author": {
          "login": "LostTime76"
        }
      },
      {
        "body": "> Not ideal as I need to manage an extra msbuild file per C# project, but it is what it is.\r\n> \r\n> I thought I might be doing something wrong, but it looks like it is expected behavior.\r\n\r\nI think you can do better than what you're describing.\r\n\r\n> I think this is similar to what I am doing right now. The parent build target invokes the restore then invokes the build, which does work. \r\n\r\nCan you share the exact code where you're doing this? Or a https://aka.ms/msbuild/binlog of your build (note the warnings about the information contained in binlogs and don't share secrets)?\r\n\r\nWhat I'm saying is you need something like this in your parent project:\r\n\r\n```xml\r\n<Target Name=\"Restore\">\r\n  <MSBuild Targets=\"Restore\" ...\r\n</Target>\r\n\r\n<Target Name=\"Build\">\r\n  <MSBuild Targets=\"Build\"...\r\n</Target>\r\n```\r\n\r\nAnd then build with `dotnet build` should Just Work. It sounds like it isn't for you, so I'd like to dig in.",
        "createdAt": "2023-09-27T19:58:29Z",
        "updatedAt": "2023-09-27T19:58:29Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I can't share the project, but I can give you a description of what I am trying to do. My project structure is this: A main folder for the project with sub projects each in their own folder and an msbuild script in the main folder to invoke the build/clean, etc.. targets for all projects. \r\n\r\nMyProj\r\n| - MyProj.proj\r\n| - Proj1(C#)\r\n---| - Proj1.csproj\r\n---| - Proj1.proj\r\n| - Proj2(Non C#)\r\n---| - Proj2.proj\r\n\r\nI want Proj1 and Proj2 to be built in _parallel_. Proj1 has a _runtime_ dependency on Proj2, but not a _build time_ dependency on Proj2. This means I can build Proj2 independent of Proj1. Once Proj1 and Proj2 have both finished building, I need to copy some files from Proj2's folder into Proj1's folder due to that runtime dependency. \r\n\r\nMyProj.proj has a build target and invokes MSBuild with the BuildInParallel flag so that Proj1 & Proj2 build in parallel. Proj1 contains nuget packages (and thus content that needs to be restored into the Proj1 output folder.. hence this issue),\r\n\r\n```xml\r\n<Target Name=\"Build\">\r\n  <MSBuild BuildInParallel=\"true\" Targets=\"Build\" Projects=\"Proj1;Proj2...\"/>\r\n  <CopyTask/>\r\n</Target>\r\n```\r\n\r\nOnce the MyProj.proj MSBuild task completes, I can then copy the generated files from Proj2 to Proj1. \r\n\r\nYou notice that Proj1 contains both Proj1.proj and Proj1.csproj. The MSBuild task in MyProj.proj invokes the build target Proj1.proj. Proj1.proj then invokes the build target in Proj1.csproj.\r\n\r\n```xml\r\n<Target Name=\"Build\">\r\n  <Exec Command=\"dotnet restore Proj1.csproj\"/>\r\n  <MSBuild Projects=\"Proj1.csproj\" Targets=\"Build\" .../>\r\n</Target>\r\n```\r\n\r\nThe reason MyProj.proj invokes Proj1.proj instead of Proj1.csproj is due to the issue that a restore target invoked before the build target within Proj1.csproj restores the packages but does not restore the content to the Proj1 output directory (this issue). Thus, I need to essentially bypass the MSBuild loading logic by manually invoking dotnet restore within Proj1.proj to restore nuget.g.props, then invoke the MSBuild task, which is happy now that nuget.g.props is there and restores the content.\r\n\r\nNot all the sub projects are C#. I think the fact that some sub projects are C# and require nuget restores should be encapsulated in the sub project itself and not the parent MyProj.proj. MyProj.proj simply invokes the sub project's build script. However, I do not mind creating project specific tasks within MyProj.proj like you suggested, but all projects should properly be built in parallel. I should be able to launch a sub project build and have it complete asynchronously. If I start putting restore targets in MyProj.proj, it may invoke restores on the sub C# projects in parallel, but some sub projects do not have \"restores\" and just want to build. \r\n\r\nLet's say I implement a restore target in MyProj.proj that invokes restores on the sub C# projects in parallel and then invokes a dummy \"restore\" target within non C# projects and they just 'build' instead. Ok, everything is launched correctly. However, that restore target will wait until the build completes in Proj2 before moving to the build target within the C# projects.\r\n\r\nI do not believe MSBuild supports launching targets or MSBuild tasks asynchronously and then waiting on their completion further down the line, otherwise, yes, I believe things could be solved more nicely. Something like this:\r\n\r\n```xml\r\n<Target Name=\"Build\">\r\n\t<MSBuild WaitForCompletion=\"false\" Ref=\"task1\"/>\r\n\t<MSBuild WaitForCompletion=\"false\" Ref=\"task2\"/>\r\n\t<MSBuild WaitForCompletion=\"false\" Ref=\"task3\"/>\r\n\t\r\n\t<WaitSync WaitOn=\"task1;task2;task3\"/>\r\n\t\r\n\t<!-- All tasks aligned and completed -->\r\n\t<CopyTask/>\r\n</Target>\r\n```\r\n\r\nSadly, I don't think MSBuild will be getting any sort of async capability so we have to rely on what little does exist today... namely BuildInParallel.",
        "createdAt": "2023-09-28T13:43:02Z",
        "updatedAt": "2023-09-28T14:04:31Z",
        "author": {
          "login": "LostTime76"
        }
      },
      {
        "body": "Team triage: Could you create a repro project that you could share with us? If so we would be able to help you to avoid two invocations.",
        "createdAt": "2023-10-03T13:58:43Z",
        "updatedAt": "2023-10-03T13:58:43Z",
        "author": {
          "login": "AR-May"
        }
      },
      {
        "body": "This issue is marked as stale because feedback has been requested for 30 days with no response. Please respond within 14 days or this issue will be closed due to inactivity.",
        "createdAt": "2023-11-03T00:00:48Z",
        "updatedAt": "2023-11-03T00:00:48Z",
        "author": {
          "login": "ghost"
        }
      },
      {
        "body": "This issue was closed due to inactivity. If you can still reproduce this bug, please comment with the requested information, detailed steps to reproduce the problem, or any other notes that might help in the investigation.",
        "createdAt": "2023-11-17T19:00:45Z",
        "updatedAt": "2023-11-17T19:00:45Z",
        "author": {
          "login": "ghost"
        }
      }
    ]
  }
}