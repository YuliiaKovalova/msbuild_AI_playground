{
  "number": 8803,
  "title": "[Bug]: DestinationSubDirectory not working for \"dotnet build\"",
  "body": "### Issue Description\n\nIn a simple console project, let's reference a library and change its output folder using the less-documented **`DestinationSubDirectory`** metadata:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>net6.0</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <ProjectReference Include=\"..\\FooLib\\FooLib.csproj\"\r\n                      DestinationSubDirectory=\"Libs\\\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\r\nIt works as expected when building in Visual Studio. However, when we issue `dotnet build` it will bloat the output folder. Using **MSBuild version 17.5.0+6f08c67f3**.\r\n```\r\ndotnet build PublishBloatTest.csproj --configuration Release --output .\\artifacts\r\n```\r\n\r\n**Impact**\r\nThe `DestinationSubDirectory` setting is an excellent feature which makes deployment of our complex plugin-based application a lot easier. However, when built via our pipelines we face the above issue. So far, the only workaround we have found is to have an undesirable post-build action where we delete bloat from the output folder.\n\n### Steps to Reproduce\n\n1. Create a console project `MyApp`.\r\n2. Create a library project `FooLib`.\r\n3. Reference `FooLib` and set `DestinationSubDirectory=\"Libs\\\"` on the `ProjectReference`.\r\n4. Run `dotnet build MyApp.csproj --configuration Release --output .\\artifacts`\n\n### Expected Behavior\n\n`FooLib.dll` is only written to the `Libs` folder.\n\n### Actual Behavior\n\n`FooLib.dll` is written to both the root and the `Libs` folder, causing significant bloat in the published app.\n\n### Analysis\n\n_No response_\n\n### Versions & Configurations\n\n```\r\nMSBuild version 17.5.0+6f08c67f3 for .NET Framework\r\n17.5.0.10706\r\n\r\n...\r\n\r\nMicrosoft Visual Studio Professional 2022\r\nVersion 17.5.2\r\nVisualStudio.17.Release/17.5.2+33502.453\r\n```",
  "state": "CLOSED",
  "createdAt": "2023-05-26T14:45:12Z",
  "updatedAt": "2023-06-12T07:20:23Z",
  "closedAt": "2023-06-12T07:20:23Z",
  "author": {
    "login": "znakeeye"
  },
  "labels": [
    "bug",
    "needs-triage"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "JaynieBai"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "[VS.binlog.txt](https://github.com/dotnet/msbuild/files/11633507/VS.binlog.txt)\r\n\r\n[dotnet.binlog.txt](https://github.com/dotnet/msbuild/files/11633716/dotnet.binlog.txt)\r\nCompare the binlogs above and find that if set `--output  .\\artifacts` when build project references it will copy binaries (FooLib.dll) to the output directory. But when build with VS, it will build project references into its default output if not set in project file. \r\nIt means, if set `--output  .\\artifacts` when build with command, both of the parent project and project reference's output directory are the same if the OutDir is not defined in the project file\r\n![image](https://github.com/dotnet/msbuild/assets/26814373/2756f37b-2cbb-4997-8c86-a974e715225a)\r\n",
        "createdAt": "2023-06-02T09:18:30Z",
        "updatedAt": "2023-06-02T09:23:59Z",
        "author": {
          "login": "JaynieBai"
        }
      },
      {
        "body": "> [VS.binlog.txt](https://github.com/dotnet/msbuild/files/11633507/VS.binlog.txt)\r\n> \r\n> [dotnet.binlog.txt](https://github.com/dotnet/msbuild/files/11633716/dotnet.binlog.txt) Compare the binlogs above and find that if set `--output .\\artifacts` when build project references it will copy binaries (FooLib.dll) to the output directory. But when build with VS, it will build project references into its default output if not set in project file. It means, if set `--output .\\artifacts` when build with command, both of the parent project and project reference's output directory are the same if the OutDir is not defined in the project file ![image](https://user-images.githubusercontent.com/26814373/242841306-2756f37b-2cbb-4997-8c86-a974e715225a.png)\r\n\r\nAny conclusion from this? Should we consider this a bug, and is there a workaround?",
        "createdAt": "2023-06-02T09:26:34Z",
        "updatedAt": "2023-06-02T09:26:34Z",
        "author": {
          "login": "znakeeye"
        }
      },
      {
        "body": "@znakeeye You could set project reference project's property OutDir to be the different directory with .\\artifacts directory.",
        "createdAt": "2023-06-02T09:34:18Z",
        "updatedAt": "2023-06-02T09:34:18Z",
        "author": {
          "login": "JaynieBai"
        }
      },
      {
        "body": "Right. If I add the following to `FooLib.csproj` it will no longer bloat the root folder:\r\n```xml\r\n<OutDir>bin</OutDir>\r\n```\r\nMaybe some generic workaround could be applied in `Directory.build.props` or `Directory.build.targets`?",
        "createdAt": "2023-06-02T09:44:26Z",
        "updatedAt": "2023-06-02T09:58:26Z",
        "author": {
          "login": "znakeeye"
        }
      },
      {
        "body": "> Maybe some generic workaround could be applied in `Directory.build.props` or `Directory.build.targets`?\r\n\r\nYes, you can set global properties of the dependent projects in the `Directory.build.props` in order not to bloat the root folder.",
        "createdAt": "2023-06-05T08:47:58Z",
        "updatedAt": "2023-06-05T08:47:58Z",
        "author": {
          "login": "JaynieBai"
        }
      },
      {
        "body": "So is this a bug?\r\n\r\nIdeally, a workaround should extend on the build using some target. Not sure which one though. Is it even possible?\r\n\r\nI guess setting some property means setting `<OutDir>bin</OutDir>` for all projects and hope that nobody specifies `--output bin`. Not a super stable solution.",
        "createdAt": "2023-06-05T09:19:50Z",
        "updatedAt": "2023-06-05T09:19:50Z",
        "author": {
          "login": "znakeeye"
        }
      },
      {
        "body": "> So is this a bug?\r\n\r\nThis is not a bug.\r\n\r\n> Ideally, a workaround should extend on the build using some target. Not sure which one though. Is it even possible?\r\n\r\nThere is no such target to change the global property.\r\n\r\n> I guess setting some property means setting `<OutDir>bin</OutDir>` for all projects and hope that nobody specifies `--output bin`. Not a super stable solution.\r\n\r\nIt depends on your choices. If want all the outputs in the same directory, you can specify `--output bin` or set OutDir in the Directory.build.props. If want in the different directories, set the property OutDir specifically.",
        "createdAt": "2023-06-07T09:15:22Z",
        "updatedAt": "2023-06-07T10:16:53Z",
        "author": {
          "login": "JaynieBai"
        }
      },
      {
        "body": "In my view, it is a bug.\r\n\r\n`VS` and `MsBuild` should behave in the same way. When building in Visual Studio, the folder is not bloated. When building using `dotnet build` it is bloated. Why the difference?",
        "createdAt": "2023-06-07T11:02:38Z",
        "updatedAt": "2023-06-07T11:02:38Z",
        "author": {
          "login": "znakeeye"
        }
      },
      {
        "body": "> In my view, it is a bug.\r\n> \r\n> `VS` and `MsBuild` should behave in the same way. When building in Visual Studio, the folder is not bloated. When building using `dotnet build` it is bloated. Why the difference?\r\n\r\nYour VS and MsBuild  have the different output directories.  VS project uses the default directory bin.  But dotnet build set the global output directory with setting --output",
        "createdAt": "2023-06-08T01:46:30Z",
        "updatedAt": "2023-06-08T01:46:30Z",
        "author": {
          "login": "JaynieBai"
        }
      },
      {
        "body": "Close this issue since this is not bug.",
        "createdAt": "2023-06-12T07:20:23Z",
        "updatedAt": "2023-06-12T07:20:23Z",
        "author": {
          "login": "JaynieBai"
        }
      }
    ]
  }
}