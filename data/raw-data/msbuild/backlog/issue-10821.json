{
  "number": 10821,
  "title": "Binding redirects are not generated for transitive packages with version incremented with central package management transitive pinning",
  "body": "### Describe the bug\r\nI'm not entirely sure if this is a bug with the .NET SDK or with the NuGet client, but I'm reporting it here to start with.\r\n\r\nI've observed that when using enabling `CentralPackageTransitivePinningEnabled`, and using that to pin a package that is a dependency with include=\"Runtime,Build,Native,ContentFiles,Analyzers,BuildTransitive\", binding redirects are not correctly generated for the updated transitive package, despite being needed to run the resulting application.\r\n\r\nI've been trying to compare two different scenarios for building the same application. One in which I pin a version of a transitive dependency explicitly in the application project file, and one where the pinning is done via central package management.\r\n\r\nIn both cases the same dependencies are copied to the output directory, but only in the first case, the `app.config` gets assembly redirects generated for the dependency.\r\n\r\nI've been comparing the msbuild logs of the two setups, and realized that, when the package is pinned using `CentralPackageTransitivePinningEnabled`, the transitive dependencies are not passed in the `Assemblies` parameter to the `ResolveAssemblyReference`, but when it is pinned by adding a `PackageReference` to the transitive dependency directly in the project, it is passed to the `Assemblies` parameter.\r\n\r\nDigging further, it seems as if the transitive dependencies only appear as `runtime` items in `project.assets.json`, and the `compile` group is empty for the transitive dependencies. (\r\nAnd that the `ResovlePackageAssets` target will load them only into `RuntimeCopyLocalItems` and not into `ResolvedCompileFileDefinitions`.)\r\nWithout the  `CentralPackageTransitivePinningEnabled` that makes sense, because without an explicit reference to the package I don't expect to be able to use types defined in it, and I wouldn't want an explicit reference added in my dll to that dependency, since I only link to the intermediate package.\r\n\r\nHowever, the documentation for central package management specifies that `CentralPackageTransitivePinningEnabled`==`true` should create a top level package reference when needed. But it seems like this reference only exists during the version resolution phase, but not when the deciding compile time references in the `project.assets.json` or when deciding on compile time link assemblies.\r\n\r\nWhen it comes to the actual generation of binding redirects, I think it would make sense if the assemblies passed to the `ResolveAssemblyReference` task would include the `RuntimeCopyLocalItems`, and not only the actual top level `References` resolved from the framework and the `ResolvedCompileFileDefinitions`\r\n\r\n### To Reproduce\r\nI put together a minimal solution that illustrates the problem.\r\n\r\nDownload and extract the [TestCPM.zip](https://github.com/user-attachments/files/16982980/TestCPM.zip) and restore and build the solution. The TestCPM.Broject will fail to generate binding redirects for System.Diagnostics.DiagnosticSource, but the TestCPM.Working will generate those redirects.\r\n\r\n### Exceptions (if any)\r\nThere are not exceptions when restoring or building the project. But when running the application, FileLoadException exceptions are thrown for the non-redirected assemblies.\r\ne.g\r\n```\r\nSystem.IO.FileLoadException : Could not load file or assembly 'System.Diagnostics.DiagnosticSource, Version=7.0.0.2, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51' or one of its dependencies. The located assembly's manifest definition does not match the assembly reference. (Exception from HRESULT: 0x80131040)\r\n``` \r\n\r\nAlso looking at the output of the `ResolveAssemblyReference` it shows in result\r\n> Dependency \"System.Diagnostics.DiagnosticSource, Version=7.0.0.2, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51\".\r\n> Could not resolve this reference. Could not locate the assembly \"System.Diagnostics.DiagnosticSource, Version=7.0.0.2, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51\". Check to make sure the assembly exists on disk. If this reference is required by your code, you may get compilation errors.\r\n\r\nBut that doesn't cause any build errors or warnings as far as I can tell.\r\n\r\n### Further technical details\r\n```\r\n.NET SDK:\r\n Version:           8.0.400\r\n Commit:            36fe6dda56\r\n Workload version:  8.0.400-manifests.56cd0383\r\n MSBuild version:   17.11.3+0c8610977\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.19045\r\n OS Platform: Windows\r\n RID:         win-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\8.0.400\\\r\n\r\n.NET workloads installed:\r\nConfigured to use loose manifests when installing new manifests.\r\n [aspire]\r\n   Installation Source: VS 17.11.35222.181\r\n   Manifest Version:    8.1.0/8.0.100\r\n   Manifest Path:       C:\\Program Files\\dotnet\\sdk-manifests\\8.0.100\\microsoft.net.sdk.aspire\\8.1.0\\WorkloadManifest.json\r\n   Install Type:        FileBased\r\n\r\n\r\nHost:\r\n  Version:      8.0.8\r\n  Architecture: x64\r\n  Commit:       08338fcaa5\r\n\r\n.NET SDKs installed:\r\n  8.0.206 [C:\\Program Files\\dotnet\\sdk]\r\n  8.0.400 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.App 7.0.20 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 8.0.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 8.0.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 6.0.33 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 7.0.20 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 8.0.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 8.0.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 6.0.33 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 7.0.20 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 8.0.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 8.0.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nOther architectures found:\r\n  x86   [C:\\Program Files (x86)\\dotnet]\r\n    registered at [HKLM\\SOFTWARE\\dotnet\\Setup\\InstalledVersions\\x86\\InstallLocation]\r\n\r\nEnvironment variables:\r\n  Not set\r\n\r\nglobal.json file:\r\n  Not found\r\n```",
  "state": "OPEN",
  "createdAt": "2024-09-12T16:56:19Z",
  "updatedAt": "2025-05-27T12:25:13Z",
  "closedAt": null,
  "author": {
    "login": "vgriph"
  },
  "milestone": null,
  "assignees": {
    "nodes": [
      {
        "login": "SimaTian"
      }
    ]
  },
  "labels": [
    "Priority:2",
    "Area: NetSDK",
    "triaged"
  ],
  "comments": {
    "nodes": [
      {
        "body": "I figured out a work-araound:\r\n\r\nAdding the following two targets to `Directory.build.targets`:\r\n```\r\n\r\n  <Target Name=\"IncludeRuntimeAssetsInAssemblyResolution\" BeforeTargets=\"ResolveAssemblyReferences\" AfterTargets=\"ResolvePackageAssets\">\r\n    <ItemGroup>\r\n      <Reference Include=\"@(RuntimeCopyLocalItems)\" Exclude=\"@(Reference)\">\r\n        <FromRuntimeAssets>true</FromRuntimeAssets>\r\n      </Reference>\r\n    </ItemGroup>\r\n  </Target>\r\n\r\n  <Target Name=\"ExcludeRuntimeAssetsAfterAssemblyResolution\" BeforeTargets=\"ResolveReferences\" AfterTargets=\"ResolveAssemblyReferences\">\r\n    <ItemGroup>\r\n      <Reference Remove=\"@(Reference)\" Condition=\"'%(Reference.FromRuntimeAssets)' == 'true'\" />\r\n    </ItemGroup>\r\n  </Target>\r\n```",
        "createdAt": "2024-09-13T06:45:23Z",
        "author": {
          "login": "vgriph"
        }
      },
      {
        "body": "Thanks for the deep investigation. Since you pinpointed the version wasn't flowed through to ResolveAssemblyReference, I'm moving to MSBuild for now though this feels like it could require nuget/msbuild/sdk consultation.",
        "createdAt": "2024-10-15T20:18:27Z",
        "author": {
          "login": "marcpopMSFT"
        }
      },
      {
        "body": "I've had to tweak my workaround a bit to get the correct result in complex solutions.\n\n```xml\n  <Target Name=\"IncludeRuntimeAssetsInAssemblyResolution\" AfterTargets=\"ResolveLockFileReferences\">\n    <ItemGroup>\n      <_RuntimeReferences Include=\"@(RuntimeCopyLocalItems)\">\n        <FromRuntimeAssets>true</FromRuntimeAssets>\n        <HintPath>%(Identity)</HintPath>\n      </_RuntimeReferences>\n      <_RuntimeReferences Remove=\"@(Reference)\" MatchOnMetadata=\"FileName\" />\n      <_RuntimeReferences Remove=\"@(Reference)\" MatchOnMetadata=\"HintPath\" />\n    </ItemGroup>\n    <ItemGroup>\n      <Reference Include=\"@(_RuntimeReferences)\" />\n      <RuntimeCopyLocalItems Remove=\"@(_RuntimeReferences)\" />\n    </ItemGroup>\n  </Target>\n\n  <Target Name=\"ExcludeRuntimeAssetsAfterAssemblyResolution\" AfterTargets=\"ResolveAssemblyReferences\">\n    <ItemGroup>\n      <RuntimeCopyLocalItems Include=\"@(Reference)\" Condition=\"'%(Reference.FromRuntimeAssets)' == 'true' AND '%(Reference.CopyLocal)' == 'true'\" />\n      <ReferenceCopyLocalPaths Include=\"@(Reference)\" Condition=\"'$(CopyLocalLockFileAssemblies)' == 'true' AND '%(Reference.FromRuntimeAssets)' == 'true' AND '%(Reference.CopyLocal)' == 'true'\" />\n      <Reference Remove=\"@(Reference)\" Condition=\"'%(Reference.FromRuntimeAssets)' == 'true'\" />\n      <ReferencePath Remove=\"@(ReferencePath)\" Condition=\"'%(ReferencePath.FromRuntimeAssets)' == 'true'\" />\n    </ItemGroup>\n  </Target>\n```",
        "createdAt": "2024-10-18T10:17:48Z",
        "author": {
          "login": "vgriph"
        }
      },
      {
        "body": "I'm currently busy with other stuff. \nSince I was handling other binding redirects related stuff, I will take a look at it eventually, but it might take a while.\nIf anyone wishes to take over, I would consider it a fair game. However since it's prio 2 I reckon it can wait for me.",
        "createdAt": "2025-03-27T19:15:47Z",
        "author": {
          "login": "SimaTian"
        }
      },
      {
        "body": "I've dug through this. \nOnce again, thank you @vgriph for detailed explanation.\n\nThis was already mentioned, but the ResolveAssemblyReferences task doesn't get the data it would need to generate the binding redirects. The input is different from the get-go so the error lies from before the RAR resolution can begin.\n<img width=\"755\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/bfc53f6b-0f9a-4348-bf79-3976ac1a487a\" />\n<img width=\"755\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/3ae65d58-384c-4476-9104-39bd1998ba32\" />\n\nAs described in the ticket, the following is in the package.assets.json\nWorking:\n```\n       \"compile\": {\n          \"lib/net471/Serilog.dll\": {\n            \"related\": \".xml\"\n          }\n        },\n```\nBroken:\n```\n        \"compile\": {\n          \"lib/net471/_._\": {\n            \"related\": \".xml\"\n          }\n        },\n```\nThe transition from the package.assets.json to ResolveAssemblyReference assembly list is handled by dotnet - `ResolvePackageAssets` [see here](https://github.com/dotnet/sdk/blob/ddc320a7573faece02a10ed816d70c45bbb3c4f4/src/Tasks/Microsoft.NET.Build.Tasks/ResolvePackageAssets.cs#L19)\n\nThe one thing that puzzles me is that this also happens when invoking MSBuild.exe (e.g. framework) so there is something more at play here.\n\nFor the next step, I will contact people from NuGet to ask for more information regarding the way the package.assets.json is generated.\n\n\n",
        "createdAt": "2025-05-27T11:46:56Z",
        "author": {
          "login": "SimaTian"
        }
      }
    ]
  }
}