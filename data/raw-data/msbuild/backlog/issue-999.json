{
  "number": 999,
  "title": "MSBuild fails to initialize when used as an API",
  "body": "OS: Windows x64\n\nI'm working on integrating the latest MSBuild bits from MyGet (0.1.0-preview-00033-160829) into OmniSharp. However, it throws when OmniSharp attempts to instantiate a ProjectCollection.\n\n```\nSystem.TypeInitializationException: The type initializer for 'BuildEnvironmentHelperSingleton' threw an exception. ---> System.InvalidOperationException: Could not determine a valid location to MSBuild. Try running this process from the Developer Command Prompt for Visual Studio.\n   at Microsoft.Build.Shared.ErrorUtilities.ThrowInvalidOperation(String resourceName, Object[] args)\n   at Microsoft.Build.Shared.BuildEnvironmentHelper.Initialize()\n   at Microsoft.Build.Shared.BuildEnvironmentHelper.BuildEnvironmentHelperSingleton..cctor()\n   --- End of inner exception stack trace ---\n   at Microsoft.Build.Internal.Utilities.GetEnvironmentProperties()\n   at Microsoft.Build.Evaluation.ProjectCollection.get_EnvironmentProperties()\n   at Microsoft.Build.Evaluation.ProjectCollection.InitializeToolsetCollection()\n   at Microsoft.Build.Evaluation.ProjectCollection..ctor(IDictionary`2 globalProperties, IEnumerable`1 loggers, IEnumerable`1 remoteLoggers, ToolsetDefinitionLocations toolsetDefinitionLocations, Int32 maxNodeCount, Boolean onlyLogCriticalEvents)\n   at OmniSharp.MSBuild.ProjectFile.ProjectFileInfo.Create(String projectFilePath, String solutionDirectory, ILogger logger, MSBuildOptions options, ICollection`1 diagnostics) in C:\\Projects\\omnisharp-roslyn\\src\\OmniSharp.MSBuild\\ProjectFile\\ProjectFileInfo.cs:line 118\n   at OmniSharp.MSBuild.MSBuildProjectSystem.CreateProjectFileInfo(String projectFilePath) in C:\\Projects\\omnisharp-roslyn\\src\\OmniSharp.MSBuild\\MSBuildProjectSystem.cs:line 205\n```\n\nFrom the [MSBuild code](https://github.com/Microsoft/msbuild/blob/60c73c914c01c62f5496c6d04683f77e967bbc68/src/Shared/BuildEnvironmentHelper.cs#L39-L92) that's failing, it looks it's trying very hard to find the location that MSBuild is installed on the machine. However, this is a scenario where MSBuild is being hosted in a different app, so I'm not sure why this would be needed.\n",
  "state": "CLOSED",
  "createdAt": "2016-09-07T20:23:45Z",
  "updatedAt": "2024-02-21T17:26:05Z",
  "closedAt": "2016-09-12T19:08:21Z",
  "author": {
    "login": "DustinCampbell"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "I should mention that this appears to be a regression from 0.1.0-preview-00028-160627, which seems to work fine.\n",
        "createdAt": "2016-09-07T20:33:13Z",
        "updatedAt": "2016-09-07T20:33:13Z",
        "author": {
          "login": "DustinCampbell"
        }
      },
      {
        "body": "Also, OmniSharp is a standalone .NET Core app which uses MSBuild to perform a DesignTimeBuild in order to drive the editing experience for VS Code (and other editors).\n",
        "createdAt": "2016-09-07T21:17:10Z",
        "updatedAt": "2016-09-07T21:17:10Z",
        "author": {
          "login": "DustinCampbell"
        }
      },
      {
        "body": "I've encountered the same issue. For now, my workaround has been to set the environment variable \"MSBUILD_EXE_PATH\" to the full path of msbuild.exe. Unfortunately, this requires knowing where to find it...which is another problem altogether\n",
        "createdAt": "2016-09-07T21:40:19Z",
        "updatedAt": "2016-09-07T21:40:19Z",
        "author": {
          "login": "natemcmaster"
        }
      },
      {
        "body": "That unfortunately assumes that MSBuild is on the system. OmniSharp needs to operate even when MSBuild is not installed elsewhere.\n",
        "createdAt": "2016-09-08T13:09:34Z",
        "updatedAt": "2016-09-08T13:09:34Z",
        "author": {
          "login": "DustinCampbell"
        }
      },
      {
        "body": "@AndyGerlicher, @rainersigwald, @Craig-Campbell-MS: Has anyone looked at this issue yet? It's blocking further work on getting the latest MSBuild bits working for VS Code.\n",
        "createdAt": "2016-09-09T17:25:23Z",
        "updatedAt": "2016-09-09T17:25:23Z",
        "author": {
          "login": "DustinCampbell"
        }
      },
      {
        "body": "Also adding @Sarabeth-Jaffe-Microsoft \n",
        "createdAt": "2016-09-09T17:29:11Z",
        "updatedAt": "2016-09-09T17:29:11Z",
        "author": {
          "login": "DustinCampbell"
        }
      },
      {
        "body": "Thanks for starting a chat over email @AndyGerlicher. It turns out that the problem is that I needed to reference 1 additional package. :smile:. I was referencing the following packages:\n\n```\n\"Microsoft.Build\": \"0.1.0-preview-00033-160829\",\n\"Microsoft.Build.Framework\": \"0.1.0-preview-00033-160829\",\n\"Microsoft.Build.Targets\": \"0.1.0-preview-00033-160829\",\n\"Microsoft.Build.Tasks.Core\": \"0.1.0-preview-00033-160829\",\n\"Microsoft.Build.Utilities.Core\": \"0.1.0-preview-00033-160829\",\n```\n\nHowever, I also needed to reference:\n\n```\n\"MSBuild\": \"0.1.0-preview-00033-160829\",\n```\n\nThat delivers msbuild.exe and gets past the type initializer issue.\n",
        "createdAt": "2016-09-12T18:12:33Z",
        "updatedAt": "2016-09-12T18:12:33Z",
        "author": {
          "login": "DustinCampbell"
        }
      }
    ]
  }
}