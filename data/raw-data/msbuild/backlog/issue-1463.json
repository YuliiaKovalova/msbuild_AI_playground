{
  "number": 1463,
  "title": "cannot use a netstandard class library in a desktop framework project",
  "body": "i'm getting the following error when running an ASP.NET 4.6.2 web application that includes a .netstandard1.5 class library:\r\n\r\n````\r\nCould not load file or assembly 'System.Runtime, Version=4.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. The system cannot find the file specified.\r\n````\r\n\r\nI think the issue is that the reference assemblies aren't copied to the bin directory of the class library, and aren't copied to the bin directory of the ASP.NET project. What's worse is that there could be dozens of such missing reference assemblies, there's no error/warning during build that they're missing, and it's only at runtime do these errors become apparent. the behavior here is different from the non-portable class library case where assemblies referenced by the class library are transitively referenced by the project that imports the class library. in the non-portable case either the assemblies were copied, or the build failed. now we have this dangerous intermediate case where the build succeeds but the assemblies are missing and failure occurs at some unknown time at runtime.\r\n\r\ni should also note that this isn't specific to ASP.NET projects, other 4.6.2 project types (eg console) also suffer from this failure to correctly import assemblies referenced by netstandard class libraries.\r\n\r\nAssembly Load Trace:\r\n````\r\nAssembly manager loaded from:  C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\clr.dll\r\nRunning under executable  C:\\Program Files\\IIS Express\\iisexpress.exe\r\n--- A detailed error log follows. \r\n\r\n=== Pre-bind state information ===\r\nLOG: DisplayName = System.Runtime, Version=4.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\r\n (Fully-specified)\r\nLOG: Appbase = file:///c:/WebApplication3/WebApplication3/\r\nLOG: Initial PrivatePath = c:\\WebApplication3\\WebApplication3\\bin\r\nCalling assembly : ClassLibrary1, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null.\r\n===\r\nLOG: This bind starts in default load context.\r\nLOG: Using application configuration file: c:\\WebApplication3\\WebApplication3\\web.config\r\nLOG: Using host configuration file: C:\\Users\\user\\Documents\\IISExpress\\config\\aspnet.config\r\nLOG: Using machine configuration file from C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\config\\machine.config.\r\nLOG: Post-policy reference: System.Runtime, Version=4.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\r\nLOG: Attempting download of new URL file:///C:/Users/user/AppData/Local/Temp/Temporary ASP.NET Files/root/4dfb4bb4/2cddecba/System.Runtime.DLL.\r\nLOG: Attempting download of new URL file:///C:/Users/user/AppData/Local/Temp/Temporary ASP.NET Files/root/4dfb4bb4/2cddecba/System.Runtime/System.Runtime.DLL.\r\nLOG: Attempting download of new URL file:///c:/WebApplication3/WebApplication3/bin/System.Runtime.DLL.\r\nWRN: Comparing the assembly name resulted in the mismatch: Build Number\r\nERR: Failed to complete setup of assembly (hr = 0x80131040). Probing terminated.\r\n````\r\n\r\nhere's the repro (using VS2015.3):\r\n\r\n- create new project (WebApplication3)\r\n  - 4.6.2\r\n  - ASP.NET empty web application\r\n  - select 'create directory for solution'\r\n  - set as startup project\r\n- right click WebApplication3\r\n  - choose 'Add Global Application Class', Global, OK\r\n- add new 'C# Class Library (Portable)' project (ClassLibrary1)\r\n  - choose .NET Framework 4.6 & ASP.NET Core 1.0 targets\r\n- get properties on ClassLibrary1\r\n  - click 'Target .NET Platform Standard'\r\n  - select .NETStandard1.5\r\n- add reference to ClassLibrary1 to WebApplication3\r\n- in Global.Application_Start, add line:\r\n  - \"new ClassLibrary1.Class1();\"\r\n- f5\r\n\r\nhere's the project:\r\n[WebApplication3.zip](https://github.com/Microsoft/dotnet/files/637679/WebApplication3.zip)\r\n",
  "state": "CLOSED",
  "createdAt": "2016-12-09T19:55:51Z",
  "updatedAt": "2024-02-21T17:23:31Z",
  "closedAt": "2019-07-24T22:31:17Z",
  "author": {
    "login": "Spongman"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "i should add that if the project referencing the netstandard class library is a console application then even explicitly adding a reference to the nuget package for the dependent assembly will not cause that assembly to be copied to the bin directory. again, the build succeeds, but generates an executable that will fail at runtime.\r\n\r\nhere's the project:\r\n[ConsoleApplication3.zip](https://github.com/Microsoft/msbuild/files/643446/ConsoleApplication3.zip)\r\n\r\n",
        "createdAt": "2016-12-10T00:05:35Z",
        "updatedAt": "2016-12-10T00:05:35Z",
        "author": {
          "login": "Spongman"
        }
      },
      {
        "body": "This is an issue with projects that use packages.config for NuGet package references. You should be able to fix it by referencing the NETStandard.Library package from your web app.\r\n\r\nUsing project.json for NuGet references or the upcoming PackageReference in csproj support will also fix this.",
        "createdAt": "2016-12-10T00:15:42Z",
        "updatedAt": "2016-12-10T00:15:42Z",
        "author": {
          "login": "dsplaisted"
        }
      },
      {
        "body": "ok, so referencing the NETStandard library fixes references to 'System.Runtime' and suchlike. But other imported packages, like for example 'System.Collections.Specialized' which include types that already exist in the desktop framework still cause this problem - the build succeeds, but execution fails at type initialization with a FileNotFound exception.\r\n\r\nthis means that I cannot trust the build system as it exists currently - there's no way for me to tell which references i need to include in the desktop framework project.",
        "createdAt": "2016-12-12T20:00:11Z",
        "updatedAt": "2016-12-12T20:00:11Z",
        "author": {
          "login": "Spongman"
        }
      },
      {
        "body": "This should work now.\r\n\r\nif this is still an issue for you with the latest tooling, please file a new issue with details on how to reproduce your scenario.",
        "createdAt": "2019-07-24T22:31:17Z",
        "updatedAt": "2019-07-24T22:31:17Z",
        "author": {
          "login": "livarcocc"
        }
      }
    ]
  }
}