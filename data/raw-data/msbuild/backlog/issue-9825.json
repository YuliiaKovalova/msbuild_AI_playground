{
  "number": 9825,
  "title": "warnaserror not failing the build with exit 1 if only errors present were warnings",
  "body": "When there are no errors in a build, but only warnings that have been promoted to error with **WarnAsError** then the build will not fail with an exit of 1.\r\n\r\n```\r\n$ dotnet build --no-incremental /WarnAsError\r\n\r\n...\r\n\r\nBuild FAILED.\r\n\r\n....cs(28,1): error SA1507: Code must not contain multiple blank lines in a row [....csproj]\r\n    0 Warning(s)\r\n    1 Error(s)\r\n\r\nTime Elapsed 00:00:01.55\r\nExit code =>  0\r\n```\r\n\r\nGiven that there are errors in the build, would expect an exit code of 1\r\n\r\nNote that if there are genuine errors in the build, the build will fail correctly with the correct exit code\r\n\r\nOS: Linux Ubuntu 18.04\r\ndotnet version: 2.2.3-preview",
  "state": "OPEN",
  "createdAt": "2019-04-23T16:42:59Z",
  "updatedAt": "2024-03-05T21:48:42Z",
  "closedAt": null,
  "author": {
    "login": "tf-jorge"
  },
  "labels": [],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "This appears to work in the trivial case:\r\n\r\n```xml\r\n<Project>\r\n <Target Name=\"Build\">\r\n  <Warning Text=\"F\" />\r\n </Target>\r\n</Project>\r\n```\r\n\r\n```sh-session\r\n$ dotnet build /warnaserror     \r\nMicrosoft (R) Build Engine version 16.1.54-preview+gd004974104 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\nS:\\repro\\dotnet\\core-sdk\\issues\\1708\\test.proj(3,3): error : F\r\n\r\nBuild FAILED.\r\n\r\nS:\\repro\\dotnet\\core-sdk\\issues\\1708\\test.proj(3,3): error : F\r\n    0 Warning(s)\r\n    1 Error(s)\r\n\r\nTime Elapsed 00:00:00.35\r\n$ $LASTEXITCODE\r\n1\r\n```\r\n\r\nCan you tell us more about your repro? What kinds of projects do you have, and how many are in the solution? What target is generating the error?",
        "createdAt": "2019-05-07T20:36:36Z",
        "updatedAt": "2019-05-07T20:36:36Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Thanks for your response. I will test your trivial case and look at the target and see if we experience the same problem. One obvious difference is we are running dotnet on Linux.",
        "createdAt": "2019-05-07T20:40:06Z",
        "updatedAt": "2019-05-07T20:40:06Z",
        "author": {
          "login": "juddgaddie"
        }
      },
      {
        "body": "4 projects in the solution\r\n\r\nI just discovered that if I run the exact same build without making any other changes I get an intermittnet 1 exit code, here is my exit codes for running the same command and make no other changes. The output is always displayed correctly.\r\n$ /dotnet build --no-incremental /WarnAsError\r\n0\r\n$ /dotnet build --no-incremental /WarnAsError\r\n1\r\n$ /dotnet build --no-incremental /WarnAsError\r\n0\r\n$ /dotnet build --no-incremental /WarnAsError\r\n0\r\n$ /dotnet build --no-incremental /WarnAsError\r\n0\r\n$ /dotnet build --no-incremental /WarnAsError\r\n1\r\n$ /dotnet build --no-incremental /WarnAsError\r\n1\r\n$ /dotnet build --no-incremental /WarnAsError\r\n1\r\n$ /dotnet build --no-incremental /WarnAsError\r\n0\r\n\r\n$ /dotnet build --no-incremental /WarnAsError\r\n\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n    <PropertyGroup>\r\n        <TargetFramework>netstandard2.0</TargetFramework>\r\n        <CodeAnalysisRuleSet>Myproject.ruleset</CodeAnalysisRuleSet>\r\n        <AssemblyName>My.Project</AssemblyName>\r\n        <RootNamespace>My.Project</RootNamespace>\r\n    </PropertyGroup>\r\n\r\n    <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|AnyCPU'\">\r\n      <DocumentationFile>docgen\\docfile.xml</DocumentationFile>\r\n      <TreatWarningsAsErrors>false</TreatWarningsAsErrors>\r\n      <NoWarn>1701;1702;1591</NoWarn>\r\n    </PropertyGroup>\r\n\r\n    <ItemGroup>\r\n        <PackageReference Include=\"Microsoft.CodeAnalysis.FxCopAnalyzers\" Version=\"2.9.2\">\r\n            <PrivateAssets>all</PrivateAssets>\r\n            <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>\r\n        </PackageReference>\r\n        <PackageReference Include=\"StyleCop.Analyzers\" Version=\"1.0.2\">\r\n          <PrivateAssets>all</PrivateAssets>\r\n          <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>\r\n        </PackageReference>\r\n        <AdditionalFiles Include=\"stylecop.json\" />\r\n    </ItemGroup>\r\n\r\n    <ItemGroup>\r\n      <ProjectReference Include=\"..\\My.Project\\My.Project.csproj\" />\r\n    </ItemGroup>\r\n\r\n</Project>\r\n\r\n```",
        "createdAt": "2019-05-07T21:49:47Z",
        "updatedAt": "2019-05-07T21:49:47Z",
        "author": {
          "login": "juddgaddie"
        }
      },
      {
        "body": "@juddgaddie @rainersigwald any news on this issue?\r\nI'm experiencing the same issues (since last month) where the exitcode is not consistent when using dotnet build /WarnAsError and alternates between 0 and 1 on different runs without code changes.\r\n\r\nThis used to work in the past in a consistent way. Is there a workaround maybe?\r\n",
        "createdAt": "2019-07-11T11:50:45Z",
        "updatedAt": "2019-07-11T11:50:45Z",
        "author": {
          "login": "BTSmolders"
        }
      },
      {
        "body": "I researched various dotnet sdks en think the issue was introduced in the 2.2.2* series/ since msbuild 16.0.450+ga8dc7f1d34:\r\n2.2.101 works; msbuild: 15.9.20+g88f5fadfbe\r\n2.2.104 works; msbuild: 15.9.20+g88f5fadfbe\r\n2.2.202 flaky;\u00a0msbuild: 16.0.450+ga8dc7f1d34\r\n2.2.203 flaky; msbuild: 16.0.450+ga8dc7f1d34\r\n2.2.300 flaky; msbuild: 16.1.76+g14b0a930a7 \r\n2.2.301 flaky; msbuild: 16.1.76+g14b0a930a7\r\n3.0-preview untested\r\n\r\nHopes this helps in tracking down the issue.",
        "createdAt": "2019-07-11T15:21:52Z",
        "updatedAt": "2019-07-11T15:21:52Z",
        "author": {
          "login": "BTSmolders"
        }
      },
      {
        "body": "Good to hear its been reproduced independently. I unfortunately haven't made any progress from above.",
        "createdAt": "2019-07-11T16:25:41Z",
        "updatedAt": "2019-07-11T16:25:41Z",
        "author": {
          "login": "juddgaddie"
        }
      },
      {
        "body": "In the meantime I tested 3.0-preview7 and it has the same flaky behaviour as previous versions.\r\n\r\n@richlander I read your blog posts on 3.0-preview and was wondering if you (or dotnet/msbuild team) know about this issue, since I cannot find it on any backlog/roadmap.\r\nMaybe you can mention someone that can look into this issue?",
        "createdAt": "2019-08-07T09:57:25Z",
        "updatedAt": "2019-08-07T10:04:26Z",
        "author": {
          "login": "BTSmolders"
        }
      },
      {
        "body": "I too have a solution with only warnings.  I am building with `-warnAsError` and using .NET Core SDK 3.0.100 on Azure DevOps.\r\n\r\n- If I build with \"Enable system diagnostics\" checked, then the build fails, the exit code is 1, and the pipeline step fails.\r\n- If I build _without_ \"Enable system diagnostics\" checked, then the build fails, the exit code is not given in the logs, and the pipeline step _passes_.\r\n\r\nI expected the pipeline step to fail with or without \"Enable system diagnostics\" checked.\r\n\r\nIs this essentially the same problem that this issue is about or should I create a new issue?",
        "createdAt": "2019-10-05T20:18:38Z",
        "updatedAt": "2019-10-05T20:18:38Z",
        "author": {
          "login": "TysonMN"
        }
      },
      {
        "body": "Oh, maybe this is just the flaky behavior.  I will retest later.",
        "createdAt": "2019-10-05T20:23:59Z",
        "updatedAt": "2019-10-05T20:23:59Z",
        "author": {
          "login": "TysonMN"
        }
      },
      {
        "body": "Indeed.  Retesting has confirmed that I was just experiencing the previously described flaky behavior.",
        "createdAt": "2019-10-06T00:35:30Z",
        "updatedAt": "2019-10-06T00:35:30Z",
        "author": {
          "login": "TysonMN"
        }
      },
      {
        "body": "> I researched various dotnet sdks en think the issue was introduced in the 2.2.2* series/ since msbuild 16.0.450+ga8dc7f1d34:\r\n> 2.2.101 works; msbuild: 15.9.20+g88f5fadfbe\r\n> 2.2.104 works; msbuild: 15.9.20+g88f5fadfbe\r\n> 2.2.202 flaky; msbuild: 16.0.450+ga8dc7f1d34\r\n> 2.2.203 flaky; msbuild: 16.0.450+ga8dc7f1d34\r\n> 2.2.300 flaky; msbuild: 16.1.76+g14b0a930a7\r\n> 2.2.301 flaky; msbuild: 16.1.76+g14b0a930a7\r\n> 3.0-preview untested\r\n> \r\n> Hopes this helps in tracking down the issue.\r\n\r\n@BTSmolders identified 2.2.202 as the earliest SDK he tested that exhibited the bug, but there were more SDKs that could have been tested.  I think I have tested all the relevant ones, and I would like to share what I learned.\r\n\r\n- 2.1.602 exhibited the bug for me\r\n- 2.1.506 worked for me\r\n- 2.1.600-preview-009426 worked for me\r\n\r\nThe git history of [tag 2.1.602](v2.1.602) has no parallel branches at [tag v2.1.500](https://github.com/dotnet/cli/releases/tag/v2.1.500).  The released SDKs between those two tags form two parallel branches: the \"2.1.600-preview-009426 branch\" and the \"2.1.50X branch\".  The last 2.1.50X release before the release of 2.1.602 was 2.1.506.\r\n\r\nIn summary, I think the bug was introduced somewhere before 2.1.602 and after 2.1.600-preview-009426 and 2.1.506.\r\n\r\nI tested all these SDKs on Azure DevOps using the [Use .NET Core task](https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/tool/dotnet-core-tool-installer?view=azure-devops).",
        "createdAt": "2019-10-06T05:10:37Z",
        "updatedAt": "2019-10-06T05:10:37Z",
        "author": {
          "login": "TysonMN"
        }
      },
      {
        "body": "We have this issue all the time with .NET Core 3.1.200 building in Azure DevOps, which makes harder to review PR (you can't rely in the build result but actually go and check the build task). Should this issue be moved to the [dotnet/sdk](https://github.com/dotnet/sdk/) (before dotnet/cli) repository? Maybe there it can be tracked better and it doesn't look a problem of installation.",
        "createdAt": "2020-04-27T13:29:08Z",
        "updatedAt": "2020-04-27T13:30:37Z",
        "author": {
          "login": "pleonex"
        }
      },
      {
        "body": "@pleonex Can you share a repro of the problem?\r\n\r\nSome of the behaviors described sound like microsoft/msbuild#3046, but I'm not sure that describes everything.",
        "createdAt": "2020-04-27T14:28:28Z",
        "updatedAt": "2020-04-27T14:28:28Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I was able to reproduce it here:\r\n* [Build pipeline](https://dev.azure.com/benito356/WarningBuildRepro/_build/results?buildId=28&view=logs&j=12f1170f-54f2-53f3-20dd-22fc7dff55f9&t=b801fef0-4998-5417-6df0-af092da60315)\r\n* [Code](https://dev.azure.com/benito356/_git/WarningBuildRepro)\r\n\r\nI am not sure if it happened by accident, but this repo started to show the behavior when the only warning started with `CSC`. In my company projects it's reproduced also when there are warnings without the `CSC` start (but it's in a on-premise installation of Azure DevOps).",
        "createdAt": "2020-04-28T15:39:52Z",
        "updatedAt": "2020-04-28T15:39:52Z",
        "author": {
          "login": "pleonex"
        }
      },
      {
        "body": "Hello,\r\nI've the same issue with Azure DevOps and task dotnet build with **-warnaserror** arguments.\r\nFirst build exit with code 1 and dotnet build task considered as failed, but if further re-run build without changes, inside task logs I see Build Failed, but task considered as success.\r\nIn my case with Azure DevOps seems work below solution:\r\n\r\n- I separated dotnet restore and dotnet build tasks.\r\n\r\n- Run dotnet build task with **-warnaserror** **--no-restore** arguments\r\n\r\nafter that dotnet build task considered as failed for first build attempt and all subsequent attempts.\r\nBut need more investigation and also not clear why it works like this.\r\n\r\nalso be sure that don't used sinarqube prepare task before build \r\nhttps://docs.sonarqube.org/latest/analysis/scan/sonarscanner-for-msbuild/\r\n\r\n> The \"begin\" step will modify your build like this:\r\n> \r\n> the active CodeAnalysisRuleSet will be updated to match the SonarQube quality profile\r\n> **WarningsAsErrors will be turned off**\r\n> If your build process cannot tolerate these changes we recommend creating a second build job for SonarQube analysis.",
        "createdAt": "2020-06-09T12:09:58Z",
        "updatedAt": "2020-06-10T10:48:08Z",
        "author": {
          "login": "adhoc-am"
        }
      },
      {
        "body": "We're facing this issue exactly as described. When all of our errors are derived from warnings, msbuild only intermittently exits with an error (exit code 1). So sometimes the build task passes, and sometimes it doesn't.\r\n\r\nThe desired behavior is that we fail the task when \"warnings as errors\" is enabled, every time, consistently. We use this for enhanced code analysis when we have pull requests targeting master. We have a significant amount of code churn and we need an automated solution. Intermittent behavior obviously makes this difficult.\r\n\r\nThis is our current pipeline YAML:\r\n`trigger:\r\n  batch: true\r\n\r\n  branches:\r\n    include:\r\n    - master\r\n    exclude:\r\n    - release\r\n\r\npr:\r\n  autoCancel: true\r\n  branches:\r\n    include:\r\n    - master\r\n    exclude:\r\n    - project/*\r\n\r\npool:\r\n  vmImage: \"windows-latest\"\r\n\r\nsteps:\r\n  - task: NuGetCommand@2\r\n    displayName: Restore NuGet Packages\r\n    inputs:\r\n      command: 'restore'\r\n      restoreSolution: 'Alf.sln'\r\n      feedsToUse: 'config'\r\n      nugetConfigPath: 'NuGet.config'\r\n      \r\n  - task: MSBuild@1\r\n    continueOnError: false\r\n    displayName: Build the ALF Solution\r\n    inputs:\r\n      solution: 'Alf.sln'\r\n      msbuildVersion: '15.0'\r\n      msbuildArguments: '-p:TreatWarningsAsErrors=true -warnaserror -p:LangVersion=7.3'\r\n      clean: true\r\n      maximumCpuCount: true\r\n`\r\n\r\nWe've tried setting \"-p:TreatWarningsAsErrors=true\" alone, \"-warnaserror\"  alone, and a combination of the two. We never get consistent results.\r\n\r\nPlease advise.",
        "createdAt": "2020-09-15T19:31:36Z",
        "updatedAt": "2020-09-15T19:31:36Z",
        "author": {
          "login": "jpactor"
        }
      },
      {
        "body": "I thought of a good workaround that I am now using in my application at work.\r\n\r\nThe behavior I want is to allow warnings on developer machines but treat warnings as errors on our build server.  The configuration on a developer machine is `Debug` and the configuration on the build server is `Release`.  Therefore, doing this in each project files achieves the behavior that I want.\r\n```\r\n<PropertyGroup Condition=\"'$(Configuration)' != 'Debug'\">\r\n  <TreatWarningsAsErrors>true</TreatWarningsAsErrors>\r\n</PropertyGroup>\r\n```\r\n\r\nI haven't noticed this approach exhibiting the bug described in this issue.",
        "createdAt": "2020-09-15T19:54:32Z",
        "updatedAt": "2020-09-15T19:54:32Z",
        "author": {
          "login": "TysonMN"
        }
      },
      {
        "body": "> The behavior I want is to allow warnings on developer machines but treat warnings as errors on our build server.\r\n\r\nThis is exactly the behavior I want as well. It's just really unfortunate we have to use a workaround, instead of just having the feature _working as expected._\r\n\r\nThanks for pointing out the workaround, though! \ud83d\udc4d ",
        "createdAt": "2020-09-23T16:15:02Z",
        "updatedAt": "2020-09-23T16:15:26Z",
        "author": {
          "login": "jpactor"
        }
      },
      {
        "body": "So, is there any progress on this?",
        "createdAt": "2020-10-27T09:01:40Z",
        "updatedAt": "2020-10-27T09:01:40Z",
        "author": {
          "login": "PaulVrugt"
        }
      },
      {
        "body": "dotnet core build does not fail azure devops build when -WarnAsError\r\n---\r\nhaving this issue now too. build errors created with -WarnAsError and/or TreatWarningsAsErrors=true \r\n\r\nadding TreatWarningsAsErrors to project files makes no difference in behavior.\r\n\r\n\r\n\r\n",
        "createdAt": "2020-10-27T13:49:17Z",
        "updatedAt": "2020-10-27T13:49:17Z",
        "author": {
          "login": "BrWelsh"
        }
      },
      {
        "body": "Update: I have since found if building using msbuild instead of dotnet, TreatWarningsAsErrors does work as expected. ",
        "createdAt": "2020-10-27T15:01:36Z",
        "updatedAt": "2020-10-27T15:01:36Z",
        "author": {
          "login": "BrWelsh"
        }
      },
      {
        "body": "I encountered this issue also. Here is the workaround I used:\r\n```\r\ndotnet build --no-incremental -warnAsError | tee ./buildlog.txt\r\ngrep '0 Error(s)' ./buildlog.txt\r\n```\r\n\r\nThe `tee` command duplicates the output to the buildlog file. Then `grep` searches for \"0 Error(s)\" in the buildlog, and if it is not found grep will return non-zero, failing the build.",
        "createdAt": "2020-11-27T17:28:52Z",
        "updatedAt": "2020-11-27T17:28:52Z",
        "author": {
          "login": "default-kramer"
        }
      },
      {
        "body": "https://github.com/dotnet/msbuild/issues/5689\n\nI filed a related issue against msbuild, a few months ago.\n\nI use /graph:true as a workaround. It reliably reproduces the error. ",
        "createdAt": "2021-03-10T07:10:11Z",
        "updatedAt": "2021-03-10T07:10:28Z",
        "author": {
          "login": "atniomn"
        }
      },
      {
        "body": "> I thought of a good workaround that I am now using in my application at work.\r\n> \r\n> The behavior I want is to allow warnings on developer machines but treat warnings as errors on our build server. The configuration on a developer machine is `Debug` and the configuration on the build server is `Release`. Therefore, doing this in each project files achieves the behavior that I want.\r\n> \r\n> ```\r\n> <PropertyGroup Condition=\"'$(Configuration)' != 'Debug'\">\r\n>   <TreatWarningsAsErrors>true</TreatWarningsAsErrors>\r\n> </PropertyGroup>\r\n> ```\r\n> \r\n> I haven't noticed this approach exhibiting the bug described in this issue.\r\n\r\nHow is this actually a workaround? Applying it only to your build server should mean that only your build server will get this behaviour; the one on which intermittent behaviour is crucial.\r\nAs to the other above workarounds, they are all platform dependent. It would be good to get some traction on this issue as it is soon to have a birthday (though if due to 2.1.602 it is actually hitting 24 months) and a build toolchain with intermittent problems is a MAJOR issue. @rainersigwald maybe you can pull in a colleague @microsoft and keep enjoying leave.",
        "createdAt": "2021-03-16T00:48:52Z",
        "updatedAt": "2021-03-16T01:12:27Z",
        "author": {
          "login": "pchilds"
        }
      },
      {
        "body": "> How is this actually a workaround? Applying it only to your build server should mean that only your build server will get this behaviour; the one on which intermittent behaviour is crucial.\r\n\r\nI have been using this solution for six months now, and it is continuing to work perfectly.\r\n\r\nI think we have a misunderstanding.  You seem to not understand my workaround _for my use case_, and I don't know what it is about my workaround that you don't understand.\r\n\r\nCan you elaborate about confusion?  I will do my best to clarify my original comment that you quoted.",
        "createdAt": "2021-03-16T02:53:51Z",
        "updatedAt": "2021-03-16T02:53:51Z",
        "author": {
          "login": "TysonMN"
        }
      },
      {
        "body": "This was likely resolved by https://github.com/dotnet/msbuild/pull/6174, is anyone still seeing this?\r\n\r\nEdit: It should be available as early as VS16.10 preview 1",
        "createdAt": "2021-05-12T00:29:13Z",
        "updatedAt": "2021-05-12T21:29:28Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "I just got it today with .net 6 :(",
        "createdAt": "2022-02-10T08:53:59Z",
        "updatedAt": "2022-02-10T08:53:59Z",
        "author": {
          "login": "mungojam"
        }
      },
      {
        "body": "Happening still.\r\nI'm writing a SourceGenerator and I want to make sure it at least runs on our test project and fail the build if it fails. I added WarningsAsError for CS8785. It's now an error, but I was kind of expecting this would fail the build....and now Im here.",
        "createdAt": "2022-07-20T02:24:07Z",
        "updatedAt": "2022-07-20T02:24:07Z",
        "author": {
          "login": "ghost"
        }
      },
      {
        "body": "Still happening in 6.0.401.",
        "createdAt": "2022-10-04T14:00:04Z",
        "updatedAt": "2022-10-04T14:00:04Z",
        "author": {
          "login": "simonvane"
        }
      },
      {
        "body": "Old issue triage: Ben thought he fixed it in msbuild but there were later report so moving over for analysis.",
        "createdAt": "2024-03-05T21:48:41Z",
        "updatedAt": "2024-03-05T21:48:41Z",
        "author": {
          "login": "marcpopMSFT"
        }
      }
    ]
  }
}