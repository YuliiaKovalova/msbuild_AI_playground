{
  "number": 5793,
  "title": "SDK-style project targeting net471 winform resource has subfolder name in key: MissingManifestResourceException",
  "body": "<!-- This is a template that helps us provide quicker feedback. Please use any relevant sections and delete anything you don't need. -->\r\n\r\n### Issue Description\r\nMy scenario is this:\r\nI have a large line-of-business winforms application, which I am migrating to dotnet5.0. During this migrating period I want to build a net5.0 version and a net471 version -- I dont want to all my customers to migrate all at once.\r\n\r\nFor this I want to build a net471 winforms application using a sdk-style project (so I can easily use multiple TargetFrameworks). \r\n\r\nMy project successfully builds, but fails in runtime. The cause is a Form in a subfolder, which name is not part of its namespace. The generated key for the Form1.resources has the subfolder name in it, but the runtime resourcemanager expects something else.\r\n\r\n### Steps to Reproduce\r\n[WindowsFormsApp2.zip](https://github.com/dotnet/msbuild/files/5365612/WindowsFormsApp2.zip)\r\n- Open the added solution.\r\n- Set framework target to net471.\r\n- Run. You get a \"System.Resources.MissingManifestResourceException\".\r\n- Set framework target to netcore3.1.\r\n- Run. No error.\r\n\r\nP.S. opening Form1.resx file in VSStudio using the Managed Resource Editor gives me a NullReference error -- in my actual migrated project file, I can open all resx files, I don't know why this is.\r\n\r\n### Expected Behavior\r\nI am expecting to get a runnable winforms application targeting net471 using a sdk-style project file.\r\n\r\n### Actual Behavior\r\nI am getting a \"System.Resources.MissingManifestResourceException\" when targeting net471.\r\n\r\n### Analysis\r\nUsing Ilspy, I see \"WindowsFormsApp2.Subfolder.Form1.resources\" in the net471 version. In the netcore3.1 version it says: \"WindowsFormsApp2.Form1.resources\".\r\n\r\n### Versions & Configurations\r\nMicrosoft (R) Build Engine version 16.8.0-preview-20452-03+5dee11854 for .NET Framework\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n16.8.0.45203\r\n\r\n",
  "state": "CLOSED",
  "createdAt": "2020-10-12T14:17:23Z",
  "updatedAt": "2024-02-21T14:16:36Z",
  "closedAt": "2020-10-12T21:06:14Z",
  "author": {
    "login": "msneijders"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "benvillalobos"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Looks like setting EmbeddedResourceUseDependentUponConvention to true in the project file makes it work for net471. I took this from https://docs.microsoft.com/en-us/dotnet/core/resources/manifest-file-names -- but it says here \"true\" is its default value -- am I misreading this?",
        "createdAt": "2020-10-12T14:45:21Z",
        "updatedAt": "2020-10-12T14:45:46Z",
        "author": {
          "login": "msneijders"
        }
      },
      {
        "body": "This is caused by targeting `net471` in an sdk style project, where no `DependentUpon` metadata is set per resource file (like a standard `net471` project would do automatically). See https://github.com/dotnet/docs/issues/16964 for a more explicit description of how these manifest resource names are chosen.\r\n\r\n> Looks like setting EmbeddedResourceUseDependentUponConvention to true in the project file makes it work for net471. I took this from https://docs.microsoft.com/en-us/dotnet/core/resources/manifest-file-names -- but it says here \"true\" is its default value -- am I misreading this?\r\n\r\n\r\n`EmbeddedResourceUseDependentUponConvention` is in fact set to true for all net core apps >= `3.0`, or all netstandard apps >= `2.1`. Here's the snippet of code that defines this in `Microsoft.NET.Sdk.targets`:\r\n```xml\r\n  <PropertyGroup>\r\n    <EmbeddedResourceUseDependentUponConvention\r\n      Condition=\"'$(EmbeddedResourceUseDependentUponConvention)' == '' and\r\n                 (('$(TargetFrameworkIdentifier)' == '.NETCoreApp' and '$(_TargetFrameworkVersionWithoutV)' >= '3.0') or\r\n                  ('$(TargetFrameworkIdentifier)' == '.NETStandard' and '$(_TargetFrameworkVersionWithoutV)' >= '2.1'))\">true</EmbeddedResourceUseDependentUponConvention>\r\n  </PropertyGroup>\r\n```\r\n\r\nIt looks like targeting `net471` from an sdk style project doesn't opt you into the convention, so manually adding it is the right fix here.",
        "createdAt": "2020-10-12T21:06:14Z",
        "updatedAt": "2020-10-12T21:17:47Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "@BenVillalobos The above snippet in the sdk targets should include `.NETFramework` too. Asking us to include is not fair. We should not break expected behavior. People are still using the .NET Framework on Windows, you know!?",
        "createdAt": "2021-02-23T06:57:49Z",
        "updatedAt": "2021-02-23T06:57:49Z",
        "author": {
          "login": "Nirmal4G"
        }
      },
      {
        "body": "@Nirmal4G By default, framework winforms apps generate a `<DependentUpon>` metadata that handles this. So the expected behavior is it uses that data to generate resource names vs automatically inferring it based off of folder structure/namespace. I don't think we considered checking if it were an sdk style project that targeted net472 or net471, or if we can even perform that check (surely there's a property that tells us if a project is sdk style).\r\n\r\nPerhaps we could add another check like: `if sdk style project & netframework: set EmbeddedResourceUseDependentUponConvention`? This is all from memory so I may be off base here.",
        "createdAt": "2021-02-23T23:06:11Z",
        "updatedAt": "2021-02-23T23:06:11Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "@BenVillalobos\r\n\r\nYes, there's a property called `UsingMicrosoftNETSdk` tells us if we're using the .NET SDK targets. But that's not needed, since the above logic is in SDK targets which means it's only available if we use the Sdk-style project file. Updating the above logic to the following is more than enough.\r\n\r\n```xml\r\n\u200b\u00a0\u00a0<\u200bPropertyGroup\u200b Condition\u200b=\u200b\"\u200b'$(EmbeddedResourceUseDependentUponConvention)'\u00a0==\u00a0''\">\r\n    <EmbeddedResourceUseDependentUponConvention\u200b Condition\u200b=\u200b\"'$(TargetFrameworkIdentifier)'\u00a0==\u00a0'.NETFramework'\u00a0and\u00a0'$(_TargetFrameworkVersionWithoutV)'\u00a0>=\u00a0'2.0'\">true</\u200bEmbeddedResourceUseDependentUponConvention\u200b>\r\n    <EmbeddedResourceUseDependentUponConvention\u200b Condition\u200b=\u200b\"'$(TargetFrameworkIdentifier)'\u00a0==\u00a0'.NETStandard'\u00a0and\u00a0'$(_TargetFrameworkVersionWithoutV)'\u00a0>=\u00a0'2.1'\"\u200b>true</\u200bEmbeddedResourceUseDependentUponConvention\u200b>\r\n    <EmbeddedResourceUseDependentUponConvention\u200b Condition\u200b=\u200b\"'$(TargetFrameworkIdentifier)'\u00a0==\u00a0'.NETCoreApp'\u00a0and\u00a0'$(_TargetFrameworkVersionWithoutV)'\u00a0>=\u00a0'3.0'\">true</\u200bEmbeddedResourceUseDependentUponConvention\u200b>\r\n\u00a0\u00a0</\u200bPropertyGroup\u200b>\r\n```\r\n\r\nI don't know why you're limiting the version of the target framework but isn't this depend on the project system and it's relevant targets? If not, then you could simplify to...\r\n\r\n```xml\r\n\u200b\u00a0\u00a0<\u200bPropertyGroup\u200b Condition\u200b=\u200b\"\u200b'$(EmbeddedResourceUseDependentUponConvention)'\u00a0==\u00a0''\">\r\n    <EmbeddedResourceUseDependentUponConvention\u200b Condition\u200b=\u200b\"'$(TargetFrameworkIdentifier)'\u00a0==\u00a0'.NETFramework'\">true</\u200bEmbeddedResourceUseDependentUponConvention\u200b>\r\n    <EmbeddedResourceUseDependentUponConvention\u200b Condition\u200b=\u200b\"'$(TargetFrameworkIdentifier)'\u00a0==\u00a0'.NETStandard'\"\u200b>true</\u200bEmbeddedResourceUseDependentUponConvention\u200b>\r\n    <EmbeddedResourceUseDependentUponConvention\u200b Condition\u200b=\u200b\"'$(TargetFrameworkIdentifier)'\u00a0==\u00a0'.NETCoreApp'\">true</\u200bEmbeddedResourceUseDependentUponConvention\u200b>\r\n\u00a0\u00a0</\u200bPropertyGroup\u200b>\r\n```\r\n",
        "createdAt": "2021-02-24T02:51:45Z",
        "updatedAt": "2021-02-24T02:51:45Z",
        "author": {
          "login": "Nirmal4G"
        }
      }
    ]
  }
}