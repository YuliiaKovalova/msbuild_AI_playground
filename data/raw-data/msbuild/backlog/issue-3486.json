{
  "number": 3486,
  "title": "Microsoft.Build.Runtime package contains mscorlib.dll in contentFiles, which breaks sln that references it",
  "body": "### Steps to reproduce\r\n\r\nThere's an internal solution that I'm working on breaking down further to get a small repro, but the essence of the problem is that referencing the latest (15.8) Microsoft.Build.Runtime brings along an mscorlib.dll in contentFiles. These files end up in ResolveAssemblyReferences, and we pick up the package mscorlib, which breaks compilation.\r\n\r\n### Expected  behavior\r\n\r\nEither the package shouldn't have an mscorlib in it, or it should end up in RAR.\r\n\r\n### Actual behavior\r\n\r\nIt does.\r\n",
  "state": "OPEN",
  "createdAt": "2018-07-06T00:43:30Z",
  "updatedAt": "2024-02-21T16:33:33Z",
  "closedAt": null,
  "author": {
    "login": "panopticoncentral"
  },
  "labels": [
    "bug",
    "packaging",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Backlog"
  },
  "comments": {
    "nodes": [
      {
        "body": "I investigated what's going on and see that the issue is that we are shipping a reference assembly for RoslynCodeTaskFactory as part of content files and content files are included as candidate assemblies for RAR which I didn't realize.\r\n\r\nhttps://github.com/Microsoft/msbuild/blob/master/src/Tasks/Microsoft.Common.CurrentVersion.targets#L2117\r\n\r\nThe workaround is to override `AssemblySearchPaths` to remove `{CandidateAssemblyFiles}`.\r\n\r\n```diff\r\n<AssemblySearchPaths>\r\n-  {CandidateAssemblyFiles};\r\n  $(ReferencePath);\r\n  {HintPathFromItem};\r\n  {TargetFrameworkDirectory};\r\n  $(AssemblyFoldersConfigFileSearchPath)\r\n  {Registry:$(FrameworkRegistryBase),$(TargetFrameworkVersion),$(AssemblyFoldersSuffix)$(AssemblyFoldersExConditions)};\r\n  {AssemblyFolders};\r\n  {GAC};\r\n  {RawFileName};\r\n  $(OutDir)\r\n</AssemblySearchPaths>\r\n```\r\n\r\nTo actually fix this, we'll need to ship a `.props` file in the Runtime package that removes `netstandard.dll` and `mscorlib.dll` from `<Content />` just before RAR runs or we could rename them during the copy to output directory.",
        "createdAt": "2018-08-06T14:16:49Z",
        "updatedAt": "2018-08-06T14:16:49Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "Also hit this, and @jeffkl's fix helped (thanks @rainersigwald!). It would be great if there was an msbuild CI step that builds an app that depends on the locally built msbuild nuget packages to catch regressions to this scenario.",
        "createdAt": "2019-08-12T23:20:49Z",
        "updatedAt": "2019-08-12T23:21:03Z",
        "author": {
          "login": "cdmihai"
        }
      }
    ]
  }
}