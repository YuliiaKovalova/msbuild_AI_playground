{
  "number": 1673,
  "title": "Assign-once properties",
  "body": "Some properties define things that should logically be constant throughout a project, but MSBuild doesn't provide any way to enforce that they're not modified after they've been read.\r\n\r\nTake `BaseIntermediateOutputPath`, for example. Since it's a foundational property, it's read early in SDK .props to set other properties. But that means that it can't just be set in the user's `.csproj`, like most properties--because that's after decisions have already been made according to its earlier value.\r\n\r\nIf there was a way to specify that any write to a given property after it had been read was an authoring error, this could be much easier to chase down.\r\n\r\nThe error shouldn't fire for things that are attempting to set defaults like\r\n\r\n```xml\r\n<P Condition=\" '$(P)' == '' \">DefaultValue</P>\r\n```",
  "state": "OPEN",
  "createdAt": "2017-02-06T16:25:31Z",
  "updatedAt": "2024-02-21T16:37:35Z",
  "closedAt": null,
  "author": {
    "login": "rainersigwald"
  },
  "labels": [
    "Area: Language",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "To avoid dealing with the `<P Condition=\" '$(P)' == '' \">DefaultValue</P>` idiom, would it make sense to have an entire property group as `set-once`?. That way, you can put all the logic for defining a property in a `set-once` property group. All subsequent attempts to write to that property after the first `set-once` occurrence would result in an error\r\n\r\n```xml\r\n<PropertyGroup SetOnce=\"true\">\r\n   <P Condition=\" '$(TFM)' == '1'\">foo</P>\r\n   <P Condition=\" '$(TFM)' == '2'\">bar</P>\r\n   <P Condition=\" '$(P)' == ''\">tar</P>\r\n   <P2>foo</P2>\r\n</PropertyGroup>\r\n\r\n<!--this results in error-->\r\n<PropertyGroup>\r\n   <P2>foo</P2>\r\n</PropertyGroup>\r\n\r\n<!--this results in error-->\r\n<PropertyGroup SetOnce=\"true\">\r\n   <P Condition=\" '$(p)' == '' and '$(TFM)' == '3'\">zar</P>\r\n</PropertyGroup>\r\n```\r\n\r\nOr is this too restrictive?\r\n\r\nAnother issue is the scope of the set-once constraint, should the set-once constraint for a property survive msbuild task invocations or not?",
        "createdAt": "2017-02-07T02:39:53Z",
        "updatedAt": "2017-02-07T02:41:24Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "@rainersigwald, in addition to this, are there any plans to provide an explicit idiom to consumers for accomplishing its reciprocal:\r\n\r\n> override this foundational property <ins>and re-evaluate all dependents</ins>\r\n\r\nat certain stage of the build? (setting the value of `OutputPath` from result of user-defined Inline Tasks for example)\r\n\r\nI couldn't have figured out without @jeffkl's help how to override `OutputPath` and `IntermediateOutputPath` from an inline-task:  jeffkl/MSBuild-NetCore#2. ",
        "createdAt": "2017-02-07T03:18:11Z",
        "updatedAt": "2017-02-07T03:18:11Z",
        "author": {
          "login": "am11"
        }
      },
      {
        "body": "_Originally posted by @kingces95 at #848._\r\n\r\nI ran across a bug where I unintentionally defined a property with the same name as another property defined in a target file I included. It would be nice if msbuild had facilities to help detect this type of issue. For instance, if I could have somehow marked my property immutable then msbuild could have issued an error when the property was subsequently overwritten in the imported target file. \r\n\r\nOne possible way to mark properties as immutable would be via an `IsReadOnly` attribute applied to `property` and `propertyGroup` elements. Also, it would also be nice to be able to change the default to readonly via, possibly, a `ReadOnlyProperties` attribute applied on the `Project` element.\r\n\r\nThere is already a mechanism by which command line properties are treated as immutable. Maybe that same logic could be used to enforce a new readonly property feature. That logic would have to be extended to issue an error instead of silently failing after attempting to update the property as is currently the case for command line properties. I'd like to see an error in that case as well. Possibly enabled via an environment variable ala `MSBuildWarnOnUninitializedProperty` but `MSBuildWarnOnWriteToCommandLineProperty`. \r\n\r\nWarm regards,\r\nChris",
        "createdAt": "2017-02-09T22:09:54Z",
        "updatedAt": "2017-02-09T22:09:54Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "For my set-defaults concern, there's already [code that does that](https://github.com/Microsoft/msbuild/blob/08753ec2a7f596e38b175efa27f31a89bd3c8e1f/src/Build/Evaluation/Expander.cs#L1302-L1320) using `CurrentlyEvaluatingPropertyElementName`. This could piggy-back off that.",
        "createdAt": "2017-02-09T22:26:31Z",
        "updatedAt": "2017-02-09T22:26:31Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@am11 I don't see a way to do that without a massive change to the MSBuild evaluation model which doesn't seem likely. If you'd like to see it, open another issue and we can discuss why it's hard.",
        "createdAt": "2017-02-09T22:27:54Z",
        "updatedAt": "2017-02-09T22:27:54Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}