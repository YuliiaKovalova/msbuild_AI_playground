{
  "number": 4584,
  "title": "Packing iOS binding projects with NativeReference fails",
  "body": "### Steps to reproduce\r\n\r\nI have created a repository with this issue:\r\nhttps://github.com/mattleibow/XamarinNativeReferencesBug\r\n\r\nI have opened an issue on the MSBuild.Sdk.Extras repository as they can add a workaround there as well: https://github.com/onovotny/MSBuildSdkExtras/issues/176\r\n\r\nProject file\r\n```xml\r\n<Project>\r\n<Project Sdk=\"MSBuild.Sdk.Extras/2.0.31\">\r\n  <PropertyGroup>\r\n    <TargetFrameworks>xamarinios1.0</TargetFrameworks>\r\n    <IsBindingProject>true</IsBindingProject>\r\n    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <Compile Remove=\"ApiDefinition.cs\" />\r\n    <Compile Remove=\"StructsAndEnums.cs\" />\r\n    <ObjcBindingApiDefinition Include=\"ApiDefinition.cs\" />\r\n    <ObjcBindingCoreSource Include=\"StructsAndEnums.cs\" />\r\n    <NativeReference Include=\"..\\native\\Aardvark.framework\" Kind=\"Framework\" ForceLoad=\"true\" SmarkLink=\"true\" Frameworks=\"MessageUI\" LinkerFlags=\"-ObjC\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nCommand line\r\n```\r\nmsbuild /restore /t:pack /bl\r\n```\r\n### Expected  behavior\r\nThe project builds with two packages as output.\r\n\r\n### Actual behavior\r\nThe project fails with an error:\r\n> error : The file '/Users/matthew/Projects/Testing/XamarinNativeReferences/source/Square.Aardvark/bin/Debug/xamarinios1.0/Native.Square.Aardvark.manifest' to be packed was not found on disk.\r\n\r\n### Environment data\r\n`msbuild /version` output:\r\n\r\n```\r\nMicrosoft (R) Build Engine version 16.2.0-ci for Mono\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n16.200.19.36501\r\n```\r\n\r\nOS info:\r\nmacOS Mojave 10.14.5 (18F132)",
  "state": "CLOSED",
  "createdAt": "2019-08-06T00:51:41Z",
  "updatedAt": "2024-02-21T17:07:39Z",
  "closedAt": "2022-04-26T16:20:21Z",
  "author": {
    "login": "mattleibow"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "VS 17.3"
  },
  "comments": {
    "nodes": [
      {
        "body": "@chamons your team should probably be aware of / involved in this discussion as well :)",
        "createdAt": "2019-08-06T00:54:54Z",
        "updatedAt": "2019-08-06T00:54:54Z",
        "author": {
          "login": "Redth"
        }
      },
      {
        "body": "@mattleibow why do you believe this is an issue with MSBuild?",
        "createdAt": "2019-08-06T16:53:53Z",
        "updatedAt": "2019-08-06T16:53:53Z",
        "author": {
          "login": "livarcocc"
        }
      },
      {
        "body": "Because MSBuild (Microsoft.Common.CurrentVersion.targets) assumes that all instances of `NativeReference` is a sort of thing used to generate a manifest or something:\r\n\r\nhttps://github.com/microsoft/msbuild/blob/v16.2.32702/src/Tasks/Microsoft.Common.CurrentVersion.targets#L5548-L5554\r\n\r\n```xml\r\n    <ItemGroup>\r\n      <_BuiltProjectOutputGroupOutputIntermediate Include=\"$(OutDir)$(_DeploymentTargetApplicationManifestFileName)\" Condition=\"'@(NativeReference)'!='' or '@(_IsolatedComReference)'!=''\">\r\n        <TargetPath>$(_DeploymentTargetApplicationManifestFileName)</TargetPath>\r\n        <!-- For compatibility with 2.0 -->\r\n        <OriginalItemSpec>$(OutDir)$(_DeploymentTargetApplicationManifestFileName)</OriginalItemSpec>\r\n      </_BuiltProjectOutputGroupOutputIntermediate>\r\n    </ItemGroup>\r\n```\r\n\r\nThe assumption of the existence of a `NativeReference` instance does not mean that we need to have a file named `Native.$(AssemblyName).manifest` added to the output.\r\n\r\nMaybe it should, then in that case, it appears that MSBuild does not output that file for iOS projects. If that file is created, then it causes issues with other parts of the build.\r\n\r\nThat could be a Xamarin thing - not generating the file - so we could move it to the https://github.com/xamarin/xamarin-macios repo. ",
        "createdAt": "2019-08-06T22:58:00Z",
        "updatedAt": "2019-08-06T22:58:00Z",
        "author": {
          "login": "mattleibow"
        }
      },
      {
        "body": "> That could be a Xamarin thing - not generating the file - so we could move it to the https://github.com/xamarin/xamarin-macios repo.\r\n\r\nNo, we (Xamarin) is not generating that file because it serves us no purpose.\r\n\r\n> The assumption of the existence of a `NativeReference` instance does not mean that we need to have a file named `Native.$(AssemblyName).manifest` added to the output.\r\n\r\nThis is the problem: the existence of a `NativeReference` item doesn't mean that such a manifest file will be created.",
        "createdAt": "2021-09-30T15:50:07Z",
        "updatedAt": "2021-09-30T15:50:07Z",
        "author": {
          "login": "rolfbjarne"
        }
      },
      {
        "body": "So we found a workaround for this:\r\n\r\nhttps://github.com/xamarin/xamarin-macios/blob/df395f2cff9b121fb3b7f1dc3a37f2948dbebc04/msbuild/Xamarin.Shared/Xamarin.Shared.targets#L208-L225\r\n\r\nunfortunately the workaround does not work when a project uses `TargetFrameworks` (plural) instead of `TargetFramework` (singular), because in that case none of our targets files are imported.\r\n\r\nExample binlog: [dotnet.binlog.zip](https://github.com/dotnet/msbuild/files/8537561/dotnet.binlog.zip)\r\n\r\nFor comparison here's a buildlog using `TargetFramework` instead: [dotnet-targetframework.binlog.zip](https://github.com/dotnet/msbuild/files/8537572/dotnet-targetframework.binlog.zip)\r\n\r\nThis basically means that we (Xamarin) _can't_ work around it in this scenario, because none of our code is involved in the build (pack) process.\r\n\r\n",
        "createdAt": "2022-04-22T06:42:48Z",
        "updatedAt": "2022-04-22T06:42:48Z",
        "author": {
          "login": "rolfbjarne"
        }
      },
      {
        "body": "> unfortunately the workaround does not work when a project uses `TargetFrameworks` (plural) instead of `TargetFramework` (singular), because in that case none of our targets files are imported.\r\n\r\nYou should be able to hook into the `buildCrossTargeting` imports to get your code into that scenario, but #7564 looks fine to me.\r\n\r\nhttps://github.com/dotnet/msbuild/blob/12bf0a8ae0c4362b0b3fdcfb3eba75132db9bc69/src/Tasks/Microsoft.Common.CrossTargeting.targets#L20-L23",
        "createdAt": "2022-04-22T13:30:49Z",
        "updatedAt": "2022-04-22T13:30:49Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> You should be able to hook into the `buildCrossTargeting` imports to get your code into that scenario\r\n\r\nYou mean we could add a targets file to the `CustomBeforeMicrosoftCommonCrossTargetingTargets` property? Not sure where we could do that, because nothing from our iOS workload is loaded.\r\n",
        "createdAt": "2022-04-22T13:36:41Z",
        "updatedAt": "2022-04-22T13:36:41Z",
        "author": {
          "login": "rolfbjarne"
        }
      },
      {
        "body": "That's what I expected but I might be missing something in the workload implementation.\r\n\r\nDo you have a timeframe for when you need the fix?",
        "createdAt": "2022-04-22T13:42:15Z",
        "updatedAt": "2022-04-22T13:42:15Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> Do you have a timeframe for when you need the fix?\r\n\r\nThe sooner the better of course, but for now it's only been reported internally, so I'm unsure how many customers would be affected. Unless somebody else runs into it, I wouldn't backport this anywhere, and just let it flow to a stable release. I'm guessing that would be with .NET 7 in the fall?\r\n\r\nAlso we have a workaround available, so nobody should be blocked by it.",
        "createdAt": "2022-04-22T13:52:16Z",
        "updatedAt": "2022-04-22T13:52:16Z",
        "author": {
          "login": "rolfbjarne"
        }
      },
      {
        "body": "We can easily get it into 6.0.400, but it would be very difficult to get it into 6.0.300 at this point.",
        "createdAt": "2022-04-22T15:27:05Z",
        "updatedAt": "2022-04-22T15:27:05Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "6.0.400 should work just fine!",
        "createdAt": "2022-04-25T05:41:42Z",
        "updatedAt": "2022-04-25T05:41:42Z",
        "author": {
          "login": "rolfbjarne"
        }
      },
      {
        "body": "A workaround if you don't want to use 6.0.400 while it's in preview:\r\n\r\n```xml\r\n<Target Name=\"RemoveInvalidManifest\" AfterTargets=\"BuiltProjectOutputGroup\">\r\n  <ItemGroup Condition=\"!Exists('$(OutDir)$(_DeploymentTargetApplicationManifestFileName)')\">\r\n    <BuiltProjectOutputGroupOutput Remove=\"$([System.IO.Path]::GetFullPath('$(OutDir)$(_DeploymentTargetApplicationManifestFileName)'))\" />\r\n  </ItemGroup>\r\n</Target>\r\n```\r\n\r\nThis applies the same effect as was done in #7564, and works for me.",
        "createdAt": "2022-07-29T23:02:30Z",
        "updatedAt": "2022-07-29T23:04:45Z",
        "author": {
          "login": "mattjohnsonpint"
        }
      }
    ]
  }
}