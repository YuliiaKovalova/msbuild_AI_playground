{
  "number": 6614,
  "title": "`nologo` should be the default",
  "body": "### Issue Description\r\n\r\nOur goal is to make the command line experience great for developers. This includes `dotnet` and `msbuild`. People often invoke build and want a clean output.\r\n\r\nRelated: https://github.com/PowerShell/PowerShell/issues/15644\r\n\r\n### Steps to Reproduce\r\n\r\nRun `msbuild /v:m`.\r\n\r\n### Expected Behavior\r\n\r\n```text\r\n\u276f msbuild /v:m\r\nConsoleApp1 -> T:\\ConsoleApp1\\ConsoleApp1\\bin\\Debug\\net5.0\\ConsoleApp1.dll\r\n```\r\n\r\n### Actual Behavior\r\n\r\n```text\r\n\u276f msbuild /v:m\r\nMicrosoft (R) Build Engine version 16.11.0-preview-21302-05+5e37cc992 for .NET Framework\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  ConsoleApp1 -> T:\\ConsoleApp1\\ConsoleApp1\\bin\\Debug\\net5.0\\ConsoleApp1.dll\r\n```\r\n",
  "state": "OPEN",
  "createdAt": "2021-06-22T23:43:09Z",
  "updatedAt": "2024-01-31T08:20:53Z",
  "closedAt": null,
  "author": {
    "login": "terrajobst"
  },
  "labels": [
    "Feature Request",
    "Partner request",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "This is especially true in scripts where we want to get output from MSBuild target output into the build process.\n\nThe `nologo` doesn't suppress the response file header and there is no `noRspLogo` option to suppress it manually. Since, MSBuild also adds an extra indentation to the output (_because of the headers_), we have to remove the headers and the extra indent everytime from the output. This affects build perf as well.\n\n- NuGet/NuGet.Client#3623\n- https://github.com/NuGet/NuGet.Client/pull/3623#pullrequestreview-623811451\n\nSo, can we also remove response file header and the 1\u00b0 indentation applied to the MSBuild output (_as indicated in the example above_).",
        "createdAt": "2021-06-23T01:15:08Z",
        "updatedAt": "2021-06-23T01:15:08Z",
        "author": {
          "login": "Nirmal4G"
        }
      },
      {
        "body": "Interesting proposal but I'm not a fan. I've discovered numerous build issues on the build server from realizing which version was installed on it, merely by looking at the output. This is especially true for cloud builds where we don't control the server upgrades",
        "createdAt": "2021-06-23T02:03:37Z",
        "updatedAt": "2021-06-23T02:03:37Z",
        "author": {
          "login": "dotMorten"
        }
      },
      {
        "body": "It's too late in the cycle for us to adopt this without time for user feedback. It is not a universally desired change and it is potentially breaking. \r\n\r\nWe will consider this for a future SDK version, so are not closing it. Further comments for future implementation are welcome. \r\n\r\nI think this is part of a broader problem that user's can't customize their environment with a set of configurations, or a set of options that are applied to all relevant commands, or a response-like file that is always applied, or similar. ",
        "createdAt": "2021-06-23T17:49:39Z",
        "updatedAt": "2021-06-23T17:49:39Z",
        "author": {
          "login": "KathleenDollard"
        }
      },
      {
        "body": "@Nirmal4G feel free to open a separate issue if you would think the response file logo should be handled as a separate issue. Sounds like that could be separately solved.  ",
        "createdAt": "2021-06-23T17:52:11Z",
        "updatedAt": "2021-06-23T17:52:11Z",
        "author": {
          "login": "KathleenDollard"
        }
      },
      {
        "body": "> I think this is part of a broader problem that user's can't customize their environment with a set of configurations\r\n\r\nI don't think it is. To me, it's part of the default experience that should feel polished and blend with user's expectation. The default output of MSBuild on the CLI is close to being unusable. Yes, it's colored, but it's a lot of noise and if you have enough projects scrolling won't help you because the output exceeds the buffer size of the terminal. And unless you're an expert the vast majority of the output is meaningless. And if you're an experienced user you're unlikely to benefit either because a .binlog or a preprocessed project that I can open in an editor is more helpful anyways.\r\n\r\nIf anything, this is part of the broader problem of how we can make the CLI nicer to use by default. But I dislike gating small issues like this behind these cloudy initiatives because in my experience they are rarely funded as a big item and thus end up blocking small incremental changes that in aggregate could make a big difference.\r\n\r\nI think it's OK to say that this change is too late for .NET 6, but personally I don't believe issues like these need a ton of customer validation. It's an aesthetic issue. We should have an opinion on this and we should be the ones deciding the overall look & feel of our CLI experiences.\r\n\r\nWith respect to @dotMorten's argument that this taking information away. I have to admit that I'm not buying this as a counter argument. Any reasonable CI should dump version information of the .NET SDK being used anyway -- we don't need to see this output every time I'm invoking it from the terminal. Also, in my experience the logo itself wasn't sufficient information to trouble shoot version issues -- `dotnet --info` on the other hand has all the information necessary and is the more appropriate avenue for this.\r\n\r\n",
        "createdAt": "2021-06-23T19:09:48Z",
        "updatedAt": "2021-06-23T19:10:19Z",
        "author": {
          "login": "terrajobst"
        }
      },
      {
        "body": "> It's an aesthetic issue.\r\n\r\nI would be _shocked_ if making this change did not break some company build scripts. Our console output is, sadly, part of the ill-defined \"public interface\" of MSBuild.\r\n\r\n> Any reasonable CI should dump version information of the .NET SDK being used anyway\r\n\r\nCan you give an example of a CI system that does this?\r\n\r\n> Also, in my experience the logo itself wasn't sufficient information to trouble shoot version issues -- `dotnet --info` on the other hand has all the information necessary and is the more appropriate avenue for this.\r\n\r\nThis is reasonable, though please remember our non-.NET SDK scenarios.",
        "createdAt": "2021-06-24T17:41:29Z",
        "updatedAt": "2021-06-24T17:41:29Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> > It's an aesthetic issue.\r\n> \r\n> I would be _shocked_ if making this change did not break some company build scripts. Our console output is, sadly, part of the ill-defined \"public interface\" of MSBuild.\r\n\r\nThat's fair. My comment was more talking about the motivation of making this change in order to assess what sort of customer validation is needed.\r\n\r\n> > Any reasonable CI should dump version information of the .NET SDK being used anyway\r\n> \r\n> Can you give an example of a CI system that does this?\r\n\r\nThe default template for GitHub Actions [does this](https://github.com/terrajobst/dotnet-gh-action/runs/2907399638):\r\n\r\n> Run actions/setup-dotnet@v1\r\n>   with:\r\n>     dotnet-version: 5.0.x\r\n> /home/runner/work/_actions/actions/setup-dotnet/v1/externals/install-dotnet.sh --version 5.0.301\r\n\r\nI'm targeting .NET 6 so this fails with this:\r\n\r\n> Error: /home/runner/.dotnet/sdk/5.0.301/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.TargetFrameworkInference.targets(141,5): error NETSDK1045: The current .NET SDK does not support targeting .NET 6.0.  Either target .NET 5.0 or lower, or use a version of the .NET SDK that supports .NET 6.0. \r\n\r\nThe information returned here is sufficient to see what the problem is (using .NET SDK 5.0.301 trying to build a .NET 6 app).",
        "createdAt": "2021-06-24T17:49:50Z",
        "updatedAt": "2021-06-24T17:49:50Z",
        "author": {
          "login": "terrajobst"
        }
      },
      {
        "body": "Maybe an incremental step to solving this is removing this line?\r\n\r\n```\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n```\r\n\r\nIMO, that gets rid of 50% of the noise in the output. I can only think of one other program that prints copyright on default invocation, and that's `gdb`. No other program I use does that.\r\n\r\nAlso, the copyright doesn't even match the LICENSE file in this repo, which says:\r\n\r\n```\r\nCopyright (c) .NET Foundation and contributors\r\n```",
        "createdAt": "2021-09-09T13:40:46Z",
        "updatedAt": "2021-09-09T13:40:46Z",
        "author": {
          "login": "omajid"
        }
      },
      {
        "body": "The reason for emitting these lines originally was to do the same thing that Csc did back then. Which was not a good reason.",
        "createdAt": "2022-04-27T11:33:47Z",
        "updatedAt": "2022-06-03T13:39:10Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "[While the UX was improved](https://github.com/dotnet/msbuild/issues/7575) since the issue was filed, msbuild still emits its informational message:\r\n\r\n```\r\n> dotnet msbuild /v:m\r\nMSBuild version 17.5.0-preview-23054-02+762ae6c6b for .NET\r\n  msbuildverbtest -> C:\\temp\\msbuildverbtest\\bin\\Debug\\net8.0\\msbuildverbtest.dll\r\n```",
        "createdAt": "2023-03-27T10:13:49Z",
        "updatedAt": "2023-03-27T10:13:49Z",
        "author": {
          "login": "ViktorHofer"
        }
      },
      {
        "body": "+1 for suppressing the banner. It was done that way to copy tools like csc.exe, but that reason isn't a useful one. It's not \"necessary\"",
        "createdAt": "2023-03-27T14:07:09Z",
        "updatedAt": "2023-03-27T14:07:09Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "> +1 for suppressing the banner. It was done that way to copy tools like csc.exe, but that reason isn't a useful one. It's not \"necessary\"\r\n\r\nDoes this mean you think that this output\r\n\r\n```\r\n> dotnet msbuild /v:m\r\nMSBuild version 17.5.0-preview-23054-02+762ae6c6b for .NET\r\n  msbuildverbtest -> C:\\temp\\msbuildverbtest\\bin\\Debug\\net8.0\\msbuildverbtest.dll\r\n```\r\n\r\nshould just be \r\n\r\n```\r\n> dotnet msbuild /v:m\r\n  msbuildverbtest -> C:\\temp\\msbuildverbtest\\bin\\Debug\\net8.0\\msbuildverbtest.dll\r\n```\r\n",
        "createdAt": "2023-04-07T00:48:49Z",
        "updatedAt": "2023-04-07T00:48:49Z",
        "author": {
          "login": "terrajobst"
        }
      },
      {
        "body": "Yes I do. Essentially something like -- `/v:quiet` and `/v:minimal` (and probably `/v:normal`) imply `/nologo`.\r\nOr just make `/nologo` the default, and add `/nologo-` or `/logo` if you want it.",
        "createdAt": "2023-04-07T00:57:02Z",
        "updatedAt": "2023-04-07T00:57:02Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "One very easy way to get a similar effect would be to log it as a deferred message (473937ae3004a55df6fcca5eb9affb345ffe4de7).\r\n\r\nThat would produce:\r\n\r\n![image](https://user-images.githubusercontent.com/3347530/231815167-fbad626b-e9f4-4f6a-ad47-86c4068318f0.png)\r\n<details>\r\n  <summary>text</summary>\r\n\r\n```sh-session\r\n\u276f \\msbuild\\.dotnet\\dotnet build\r\n  Determining projects to restore...\r\n  All projects are up-to-date for restore.\r\n  templateLibrary -> S:\\play\\templateLibrary\\bin\\Debug\\netstandard2.0\\templateLibrary.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:00:01.01\r\n```\r\n</details>\r\n\r\n![image](https://user-images.githubusercontent.com/3347530/231816129-e2cab2c8-2db5-40f9-b7ec-a297b67841d4.png)\r\n\r\n<details>\r\n  <summary>text</summary>\r\n\r\n```sh-session\r\n\u276f \\msbuild\\.dotnet\\dotnet build -v:n\r\nBuild started 4/13/2023 10:49:00 AM.\r\nMSBuild version 17.7.0-dev-23213-01+cb5e76064 for .NET\r\n     1>Project \"S:\\play\\templateLibrary\\templateLibrary.csproj\" on node 1 (Restore target(s)).\r\n     1>_GetAllRestoreProjectPathItems:\r\n         Determining projects to restore...\r\n       Restore:\r\n         X.509 certificate chain validation will use the default trust store selected by .NET.\r\n         X.509 certificate chain validation will use the default trust store selected by .NET.\r\n         Assets file has not changed. Skipping assets file writing. Path: S:\\play\\templateLibrary\\obj\\project.assets.json\r\n         Restored S:\\play\\templateLibrary\\templateLibrary.csproj (in 24 ms).\r\n\r\n         NuGet Config files used:\r\n             C:\\Users\\raines\\AppData\\Roaming\\NuGet\\NuGet.Config\r\n             C:\\Program Files (x86)\\NuGet\\Config\\Microsoft.VisualStudio.FallbackLocation.config\r\n             C:\\Program Files (x86)\\NuGet\\Config\\Microsoft.VisualStudio.Offline.config\r\n\r\n         Feeds used:\r\n             https://api.nuget.org/v3/index.json\r\n             C:\\Program Files (x86)\\Microsoft SDKs\\NuGetPackages\\\r\n         All projects are up-to-date for restore.\r\n     1>Done Building Project \"S:\\play\\templateLibrary\\templateLibrary.csproj\" (Restore target(s)).\r\n   1:7>Project \"S:\\play\\templateLibrary\\templateLibrary.csproj\" on node 1 (default targets).\r\n     1>GenerateTargetFrameworkMonikerAttribute:\r\n       Skipping target \"GenerateTargetFrameworkMonikerAttribute\" because all output files are up-to-date with respect to the input files.\r\n       CoreGenerateAssemblyInfo:\r\n       Skipping target \"CoreGenerateAssemblyInfo\" because all output files are up-to-date with respect to the input files.\r\n       CoreCompile:\r\n       Skipping target \"CoreCompile\" because all output files are up-to-date with respect to the input files.\r\n       GenerateBuildDependencyFile:\r\n       Skipping target \"GenerateBuildDependencyFile\" because all output files are up-to-date with respect to the input files.\r\n       CopyFilesToOutputDirectory:\r\n         templateLibrary -> S:\\play\\templateLibrary\\bin\\Debug\\netstandard2.0\\templateLibrary.dll\r\n     1>Done Building Project \"S:\\play\\templateLibrary\\templateLibrary.csproj\" (default targets).\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:00:01.03\r\n```\r\n</details>\r\n\r\nBiggest downside I see of this is that the logo is no longer guaranteed to be the first line.\r\n\r\nWould folks be happy with that?",
        "createdAt": "2023-04-13T15:55:15Z",
        "updatedAt": "2023-04-13T15:55:15Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}