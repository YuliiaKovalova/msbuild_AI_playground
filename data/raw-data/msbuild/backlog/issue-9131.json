{
  "number": 9131,
  "title": "[Broken Build]: Property defined in .user project file (csproj.user) not available in build process",
  "body": "### Issue Description\n\nI am defining custom properties via a **user project file** as descripted [here](https://learn.microsoft.com/en-us/visualstudio/msbuild/customize-your-build). The purpose is exactly the one outlined in the above documentation: I need to make temporary changes (that influence the build process down the line). Those changes mustn't be checked into source control. I have done this a couple of times already and it was always working as I would expect it to.\r\n\r\n Today I started to work on a **multi-target-framework library** (e.g. **.NET 6** and **.NET Standard 2.0**), where properties defined in my user file where not properly applied. If custom targets (e.g. `AfterTargets=\"Build\"` and `AfterTargets=\"Pack\"`) that are defined outside of the user project file try to access those properties, they are only seeing empty strings.\r\n\r\nAfter testing and digging around for some time, I narrowed the strange behavior down to a project defining target frameworks via `TargetFrameworks` (with s) and not the singular one `TargetFramework`.\r\n\r\n## Sample project\r\n\r\nI attached a sample project **ProjectPropertyTest** that reproduces the behavior. It does not contain code, it only centers around its own and a user project file.\r\n\r\n### Project file\r\n\r\nThe `ProjectPropertyTest.csproj` contains all three possible combinations on how to define target frameworks. They can be (un)commented to check the different behaviors. Additionally it has a custom target **WriteValueAfterBuild** executed `AfterTargets=\"Build\"` that outputs a variable named `MyProperty`. The output is prefixed with **DIRECT**.\r\n\r\n### User-Project file\r\n\r\nThe `ProjectPropertyTest.csproj.user` simply initializes the property `MyProperty` with **MyValue** and also outputs it via another custom target **WriteValueAfterBuildFromUser** again executed `AfterTargets=\"Build\"`.  The output is prefixed with **USER**.\r\n\r\n## Tests\r\n\r\nI checked this with three different ways to define target frameworks:\r\n\r\n### Single target framework defined via `TargetFramework`\r\n\r\n```xml\r\n<TargetFramework>net6.0</TargetFramework>\r\n```\r\n\r\n- Both after-build-targets are executed as expected.\r\n- The property `MyProperty` that is only defined in `ProjectPropertyTest.csproj.user` is properly written to the output for **both** targets.\r\n\r\n```shell\r\nRebuild started...\r\n[...]\r\n1>---\u2192 DIRECT: After build of net6.0 and cross-targeting : Value is MyValue.\r\n1>---\u2192 USER: After build of net6.0 and cross-targeting : Value is MyValue.\r\n========== Rebuild All: 1 succeeded, 0 failed, 0 skipped ==========\r\n```\r\n\r\n### Multiple target frameworks defined via `TargetFrameworks`\r\n\r\n```xml\r\n<TargetFrameworks>net6.0;netstandard2.0</TargetFrameworks>\r\n```\r\n\r\n- The after-build-target specified in `ProjectPropertyTest.csproj.user` is executed for every target framework and outputs `MyProperty` properly.\r\n- The after-build-target specified in `ProjectPropertyTest.csproj` is executed for every target framework and an additional time seemingly after all those targets where finished. The output of `MyProperty` is only correct for the execution of the after-build-target for each target framework, but it is missing for the additional execution.\r\n\r\n```shell\r\nRebuild started...\r\n[...]\r\n1>---\u2192 DIRECT: After build of net6.0 and cross-targeting : Value is MyValue.\r\n1>---\u2192 USER: After build of net6.0 and cross-targeting : Value is MyValue.\r\n[...]\r\n1>---\u2192 DIRECT: After build of netstandard2.0 and cross-targeting : Value is MyValue.\r\n1>---\u2192 USER: After build of netstandard2.0 and cross-targeting : Value is MyValue.\r\n1>---\u2192 DIRECT: After build of  and cross-targeting true: Value is .\r\n========== Rebuild All: 1 succeeded, 0 failed, 0 skipped ==========\r\n```\r\n\r\n### Single target framework defined via `TargetFrameworks`\r\n\r\n```xml\r\n<TargetFrameworks>net6.0</TargetFrameworks>\r\n```\r\n\r\n- Basically same as above.\r\n\r\nThe problem is, that when using multiple target frameworks, I can not specify (or override) variables via a **user project file**.\n\n### Steps to Reproduce\n\nSample project: [ProjectPropertyTest.zip](https://github.com/dotnet/msbuild/files/12358186/ProjectPropertyTest.zip)\r\n\r\nManual steps:\r\n- Create a new project.\r\n- Use the `TargetFrameworks` (with s) property to define the target frameworks for your project (even if it is just one).\r\n- Create a user project file.\r\n- Define a property in that user file.\r\n- Create a custom target for `AfterTargets=\"Build\"` in the project to output the property.\r\n\r\n\n\n### Expected Behavior\n\nThe value of the property is written to the output.\n\n### Actual Behavior\n\nThe value of the property is not written to the output. It is just an empty string.\n\n### Ask us questions\n\nIs this expected behavior? And if it is, how is the proper way to define properties via a user project file in multi-target libraries?",
  "state": "CLOSED",
  "createdAt": "2023-08-16T10:06:54Z",
  "updatedAt": "2024-02-21T14:03:54Z",
  "closedAt": "2023-12-15T12:47:07Z",
  "author": {
    "login": "LittleGitPhoenix"
  },
  "labels": [
    "backlog",
    "Priority:2",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "maridematte"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "With a single target framework:\r\n\r\n1. Sdk.targets imports Microsoft.CSharp.Targets, via `$(LanguageTargets)`.\r\n2. Microsoft.CSharp.Targets imports Microsoft.CSharp.CurrentVersion.targets, via `$(CSharpTargetsPath)`.\r\n3. Microsoft.CSharp.CurrentVersion.targets imports Microsoft.Common.targets.\r\n4. Microsoft.Common.targets imports Microsoft.Common.CurrentVersion.targets, via `$(CommonTargetsPath)`.\r\n5. Microsoft.Common.CurrentVersion.targets imports `$(MSBuildProjectFullPath).user`.\r\n\r\nHowever, if `'$(IsCrossTargetingBuild)' == 'true'`, then Microsoft.CSharp.targets imports Microsoft.CSharp.CrossTargeting.targets instead, and that does not import `$(MSBuildProjectFullPath).user`.\r\n\r\nIt has behaved this way since Visual Studio 2017 at least.  I expect changing it now would break people's projects.\r\n\r\nInstead, you could perhaps add logic to the project file or to Directory.Build.props or Directory.Build.targets, to import a per-user file if it exists.",
        "createdAt": "2023-08-16T10:34:57Z",
        "updatedAt": "2023-08-16T10:34:57Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "Thanks for the insight. Just out of curiosity, where did you get that import order from?\r\n\r\nSo, this is the default behavior for some time now, but is it really the expected one? Am I the only one to stumble upon this? And why does **Microsoft.CSharp.CrossTargeting.targets** not import **$(MSBuildProjectFullPath).user**? Is this a bug that became a feature?\r\n\r\nThe documentation for user profiles does not say anything special about multi targeting projects, even though they are common nowadays. It basically only says:\r\n\r\n> *Microsoft.Common.CurrentVersion.targets* imports `$(MSBuildProjectFullPath).user` if it exists, so you can create a file next to your project with that additional extension.\r\n\r\nBeing silly my, I tried it this way and it obviously failed.",
        "createdAt": "2023-08-16T10:51:28Z",
        "updatedAt": "2023-08-16T10:51:28Z",
        "author": {
          "login": "LittleGitPhoenix"
        }
      },
      {
        "body": "One thing just came to my mind. It cannot be that the **user project file** is not imported, as its custom target is actually getting called. It is just, that the whole file (and therefore its properties) seem to be inside its own scope. Could it be, that the import order (the one listed above) is used for each defined target framework, but the the _overall_ build process then ignores the user file? I mean, build is seemingly executed once for every target framework using the _normal_ import order where **Microsoft.CSharp.CurrentVersion.targets** imports the user file thus executing the custom targets specified in it (hence the **USER** output). Those seem to run in their own scope. The _overall_ build process on the other hand uses **Microsoft.CSharp.CrossTargeting.targets** that does not import the user file and therefore custom variables are empty. \r\n\r\nDid I get this right?",
        "createdAt": "2023-08-16T11:32:56Z",
        "updatedAt": "2023-08-16T11:32:56Z",
        "author": {
          "login": "LittleGitPhoenix"
        }
      },
      {
        "body": "> Just out of curiosity, where did you get that import order from?\r\n\r\nBy searching for file names in \\*.targets and \\*.props files of MSBuild, and by searching for \"Importing project\" in `-verbosity:diagnostic` output.",
        "createdAt": "2023-08-16T11:59:07Z",
        "updatedAt": "2023-08-16T11:59:07Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "> build is seemingly executed once for every target framework\r\n\r\nThe DispatchToInnerBuilds target in Microsoft.Common.CrossTargeting.targets does that.  <https://github.com/dotnet/msbuild/blob/971bf70db73ebd5d5e1dde5eb27b8265be9f3169/src/Tasks/Microsoft.Common.CrossTargeting.targets#L123-L133>\r\n\r\nSurprisingly, the search at <https://source.dot.net/> does not find DispatchToInnerBuilds, although it finds other MSBuild targets.",
        "createdAt": "2023-08-16T12:08:09Z",
        "updatedAt": "2023-08-16T12:08:09Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "Microsoft.Common.CrossTargeting.targets also reads the `CustomBeforeMicrosoftCommonCrossTargetingTargets` and `CustomAfterMicrosoftCommonCrossTargetingTargets` properties to which you could hook your own files if you wanted.  However, I feel those properties might be better used for solution-wide or server-wide customization than per-project.",
        "createdAt": "2023-08-16T12:11:35Z",
        "updatedAt": "2023-08-16T12:11:35Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "Note that the /pp switch can show what is imported. If Visual Studio is setting global properties that influence what is imported you would have to pass those too. (I can't help with the discussion just making sure you're aware of that switch)",
        "createdAt": "2023-08-16T12:26:01Z",
        "updatedAt": "2023-08-16T12:26:01Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "Okay, thanks to the both of you for the answers and insights. I still think this is awfully complicated and the documentation is...well...lacking.\r\n\r\nAs **[KalleOlaviNiemitalo](https://github.com/KalleOlaviNiemitalo)** already [suggested above](https://github.com/dotnet/msbuild/issues/9131#issuecomment-1680471385), I decided to go the route with a custom **Directory.Build.targets** file in the root of my repository that will load **user project files** for projects targeting multiple frameworks if they exist. In my opinion this should be the default behavior, whether a single or multiple frameworks are defined for a project.\r\n\r\nHere the code of the **Directory.Build.targets** file (the relevant part is line 12):\r\n\r\n```xml\r\n<Project>\r\n\r\n\t<!-- Import other Directory.Build.targets: https://learn.microsoft.com/en-us/visualstudio/msbuild/customize-by-directory?view=vs-2022#use-case-multi-level-merging -->\r\n\t<PropertyGroup>\r\n\t\t<ParentDirectoryBuildTargetsPath>$([MSBuild]::GetPathOfFileAbove('Directory.Build.targets', '$(MSBuildThisFileDirectory)..\\'))</ParentDirectoryBuildTargetsPath>\r\n\t</PropertyGroup>\r\n\t<ImportGroup>\r\n\t\t<Import Condition=\"$(ParentDirectoryBuildTargetsPath) != ''\" Project=\"$(ParentDirectoryBuildTargetsPath)\" />\r\n\t</ImportGroup>\r\n\t\r\n\t<!-- Since the user project file is not imported for projects targeting multiple frameworks (https://github.com/dotnet/msbuild/issues/9131), manually import the file. -->\r\n\t<Import Project=\"$(MSBuildProjectFullPath).user\" Condition=\"'$(IsCrossTargetingBuild)' == 'true' and Exists('$(MSBuildProjectFullPath).user')\" />\r\n\t\r\n</Project>\r\n```",
        "createdAt": "2023-08-16T14:10:02Z",
        "updatedAt": "2023-08-16T14:10:02Z",
        "author": {
          "login": "LittleGitPhoenix"
        }
      },
      {
        "body": "I'm curious, what settings do your users store in those files that need to be loaded in a crosstargeting build?",
        "createdAt": "2023-08-17T08:59:35Z",
        "updatedAt": "2023-08-17T08:59:35Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "Actually the properties in those user files have nothing to do with the `build` process and are not required by either single- or multi-framework builds - at least in our case. But they are of interest for later processes like `Pack` or `Publish`. Sadly this does not matter as the user file itself is being ignored for multi-framework builds.\r\n\r\nAn example would be a **SignPackage** property. It is evaluated after the regular `Pack` target and based on its state our assemblies will be digitally signed. For _non-CI builds_ this is by default `false`, as signing of intermediate releases is not necessary and would only increase build time. Regular _CI builds_ have this set to `true`, so every software release via our CI/CD pipeline is properly signed. And then there are edge cases where it is required to have local builds (_non-CI_) signed. And therefore the user should be able to set the **SignPackage** property in his user configuration to `true`.",
        "createdAt": "2023-08-17T11:32:26Z",
        "updatedAt": "2023-08-17T11:32:26Z",
        "author": {
          "login": "LittleGitPhoenix"
        }
      }
    ]
  }
}