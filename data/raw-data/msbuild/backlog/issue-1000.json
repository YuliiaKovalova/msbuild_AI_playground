{
  "number": 1000,
  "title": "Internal MSBuild Error: could not load type Microsoft.Build.Utilities.ToolLocationHelper",
  "body": "Encountering an error trying to parse a simple csproj using Microsoft.Build APIs\n\n> Microsoft.Build.Shared.InternalErrorException: MSB0001: Internal MSBuild Error: Type information for Microsoft.Build.Utilities.ToolLocationHelper was present in the whitelist cache as Microsoft.Build.Utilities.ToolLocationHelper, Microsoft.Build.Utilities.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a but the type could not be loaded.\n\n**Repro**\ndotnet cli  1.0.0-preview3-003585\nMicrosoft.Build 0.1.0-preview-00033-160829\nMicrosoft.Build.Framework 0.1.0-preview-00033-160829\n\nProject\n\n``` xml\n<Project ToolsVersion=\"14.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n  <Import Project=\"$(MSBuildExtensionsPath)\\$(MSBuildToolsVersion)\\Microsoft.Common.props\" />\n\n  <PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFrameworkIdentifier>.NETCoreApp</TargetFrameworkIdentifier>\n    <TargetFrameworkVersion>v1.0</TargetFrameworkVersion>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <Compile Include=\"**\\*.cs\" Exclude=\"$(GlobalExclude)\" />\n    <EmbeddedResource Include=\"**\\*.resx\" Exclude=\"$(GlobalExclude)\" />\n    <None Include=\"project.json\" />\n  </ItemGroup>\n\n  <Import Project=\"$(MSBuildToolsPath)\\Microsoft.CSharp.targets\" />\n</Project>\n```\n\nMy code:\n\n``` c#\n            var msBuildFile = RuntimeInformation.IsOSPlatform(OSPlatform.Windows)\n                ? \"MSBuild.exe\"\n                : \"MSBuild\";\n\n            // workaround https://github.com/Microsoft/msbuild/issues/999\n            Environment.SetEnvironmentVariable(\"MSBUILD_EXE_PATH\", Path.Combine(dotNetCoreSdkPath, msBuildFile));\n\n            var globalProperties = new Dictionary<string, string>\n            {\n                { \"DesignTimeBuild\", \"true\" },\n                { \"Configuration\", \"Debug\" },\n                { \"MSBuildExtensionsPath\",  dotNetCoreSdkPath },\n            };\n\n            var xmlReader = XmlReader.Create(csProjFileInfo.CreateReadStream());\n            var projectCollection = new ProjectCollection();\n            return new Project(xmlReader, globalProperties, /*toolsVersion: */ null, projectCollection);\n```\n\nStack trace:\n<details>\n\n```\n Microsoft.Build.Shared.InternalErrorException: MSB0001: Internal MSBuild Error: Type information for Microsoft.Build.Utilities.ToolLocationHelper was present in the whitelist cache as Microsoft.Build.Utilities.ToolLocationHelper, Microsoft.Build.Utilities.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a but the type could not be loaded. unexpectedly null\n   at Microsoft.Build.Shared.ErrorUtilities.ThrowInternalError(String message, Object[] args)\n   at Microsoft.Build.Evaluation.Expander`2.Function`1.GetTypeForStaticMethod(String typeName, String simpleMethodName)\n   at Microsoft.Build.Evaluation.Expander`2.Function`1.ExtractPropertyFunction(String expressionFunction, IElementLocation elementLocation, Object propertyValue, UsedUninitializedProperties usedUnInitializedProperties)\n   at Microsoft.Build.Evaluation.Expander`2.PropertyExpander`1.ExpandPropertyBody(String propertyBody, Object propertyValue, IPropertyProvider`1 properties, ExpanderOptions options, IElementLocation elementLocation, UsedUninitializedProperties usedUninitializedProperties)\n   at Microsoft.Build.Evaluation.Expander`2.PropertyExpander`1.ExpandPropertiesLeaveTypedAndEscaped(String expression, IPropertyProvider`1 properties, ExpanderOptions options, IElementLocation elementLocation, UsedUninitializedProperties usedUninitializedProperties)\n   at Microsoft.Build.Evaluation.Expander`2.PropertyExpander`1.ExpandPropertiesLeaveEscaped(String expression, IPropertyProvider`1 properties, ExpanderOptions options, IElementLocation elementLocation, UsedUninitializedProperties usedUninitializedProperties)\n   at Microsoft.Build.Evaluation.Expander`2.ExpandIntoStringLeaveEscaped(String expression, ExpanderOptions options, IElementLocation elementLocation)\n   at Microsoft.Build.Evaluation.Evaluator`4.EvaluatePropertyElement(ProjectPropertyElement propertyElement)\n   at Microsoft.Build.Evaluation.Evaluator`4.EvaluatePropertyGroupElement(ProjectPropertyGroupElement propertyGroupElement)\n   at Microsoft.Build.Evaluation.Evaluator`4.PerformDepthFirstPass(ProjectRootElement currentProjectOrImport)\n   at Microsoft.Build.Evaluation.Evaluator`4.EvaluateImportElement(String directoryOfImportingFile, ProjectImportElement importElement)\n   at Microsoft.Build.Evaluation.Evaluator`4.PerformDepthFirstPass(ProjectRootElement currentProjectOrImport)\n   at Microsoft.Build.Evaluation.Evaluator`4.EvaluateImportElement(String directoryOfImportingFile, ProjectImportElement importElement)\n   at Microsoft.Build.Evaluation.Evaluator`4.PerformDepthFirstPass(ProjectRootElement currentProjectOrImport)\n   at Microsoft.Build.Evaluation.Evaluator`4.EvaluateImportElement(String directoryOfImportingFile, ProjectImportElement importElement)\n   at Microsoft.Build.Evaluation.Evaluator`4.PerformDepthFirstPass(ProjectRootElement currentProjectOrImport)\n   at Microsoft.Build.Evaluation.Evaluator`4.EvaluateImportElement(String directoryOfImportingFile, ProjectImportElement importElement)\n   at Microsoft.Build.Evaluation.Evaluator`4.PerformDepthFirstPass(ProjectRootElement currentProjectOrImport)\n   at Microsoft.Build.Evaluation.Evaluator`4.Evaluate()\n   at Microsoft.Build.Evaluation.Project.ReevaluateIfNecessary(ILoggingService loggingServiceForEvaluation)\n   at Microsoft.Build.Evaluation.Project.Initialize(IDictionary`2 globalProperties, String toolsVersion, String subToolsetVersion, ProjectLoadSettings loadSettings)\n   at Microsoft.Build.Evaluation.Project..ctor(XmlReader xmlReader, IDictionary`2 globalProperties, String toolsVersion, ProjectCollection projectCollection)\n```\n\n</details>\n",
  "state": "CLOSED",
  "createdAt": "2016-09-07T21:50:47Z",
  "updatedAt": "2024-02-21T17:26:04Z",
  "closedAt": "2016-09-27T04:32:24Z",
  "author": {
    "login": "natemcmaster"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "jeffkl"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Figured out the problem. I need to explicitly add a nuget reference to \"Microsoft.Build.Utilities.Core\": \"0.1.0-*\". The nupkg for Microsoft.Build.Framework should specified Microsoft.Build.Utilities.Core as  dependency. @jeffkl may already be working on that.\n",
        "createdAt": "2016-09-07T23:40:22Z",
        "updatedAt": "2016-09-07T23:40:22Z",
        "author": {
          "login": "natemcmaster"
        }
      },
      {
        "body": "Well, that's confusing. There's no compile-of-MSBuild-time Framework->Utilities dependency; it's coming in from [here](https://github.com/Microsoft/msbuild/blob/master/src/XMakeBuildEngine/Resources/Constants.cs#L342):\n\n``` C#\ns_availableStaticMethods.TryAdd(\"Microsoft.Build.Utilities.ToolLocationHelper\", new Tuple<string, Type>(\"Microsoft.Build.Utilities.ToolLocationHelper, Microsoft.Build.Utilities.Core, Version=\" + MSBuildConstants.CurrentAssemblyVersion + \", Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\", null));\n```\n\nWhich makes a type from Utilities available at evaluation time.\n\nI think the right dependency is actually from `Microsoft.Build` to `Microsoft.Build.Utilities.Core`. But really it would be from our \"runnable\" package . . . @jeffkl thoughts on the best approach?\n",
        "createdAt": "2016-09-08T15:24:28Z",
        "updatedAt": "2016-09-08T15:24:28Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Yeah I see 2 solutions:\n1. Make Microsoft.Build depend on Microsoft.Build.Utilities.Core (just the NuGet package)\n   1. This isn't ideal because there isn't an actual dependency\n2. Handle the type load error gracefully by maybe logging it only in the diagnostic log as a normal message.\n   1. Not entirely sure the implications here but this is my vote.\n",
        "createdAt": "2016-09-08T15:35:35Z",
        "updatedAt": "2016-09-08T15:36:19Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "@jeffkl wouldn't option 2 cause silent failures at eval time? We have a real runtime reference to that assembly, and if anything uses `ToolLocationHelper` static methods (and common targets do), that should really fail if it's not loadable.\n",
        "createdAt": "2016-09-08T15:37:47Z",
        "updatedAt": "2016-09-08T15:37:47Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "These are the only instances I could find:\n\n```\nfindstr /snpic:\"ToolLocationHelper\" *.targets\nXMakeTasks\\Microsoft.Common.CurrentVersion.targets:81:    <FrameworkPathOverride Condition=\"'$(FrameworkPathOverride)' == ''\">$([Microsoft.Build.Utilities.ToolLocationHelper]::GetPathToStandardLibraries($(TargetFrameworkIdentifier), $(TargetFrameworkVersion), $(TargetFrameworkProfile), $(PlatformTarget), $(TargetFrameworkRootPath)))</FrameworkPathOverride>\nXMakeTasks\\Microsoft.Common.CurrentVersion.targets:89:    <TargetPlatformSdkPath Condition=\" '$(TargetPlatformSdkPath)' == ''\">$([Microsoft.Build.Utilities.ToolLocationHelper]::GetPlatformSDKLocation($(TargetPlatformIdentifier), $(TargetPlatformVersion)))</TargetPlatformSdkPath>\nXMakeTasks\\Microsoft.Common.CurrentVersion.targets:96:    <TargetPlatformDisplayName Condition=\"'$(TargetPlatformDisplayName)' == ''\">$([Microsoft.Build.Utilities.ToolLocationHelper]::GetPlatformSDKDisplayName($(TargetPlatformIdentifier), $(TargetPlatformVersion)))</TargetPlatformDisplayName>\n```\n\nWould any of these run in anymore?\n",
        "createdAt": "2016-09-08T15:41:36Z",
        "updatedAt": "2016-09-08T15:41:36Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "This will be fixed by #1080.  When the package is published, programs that want to do project evaluation or in-proc builds will reference Microsoft.Build.Runtime.  This will pull in all of our assemblies as well as the core set of `.props` and `.targets`.  We'll still need to work with partner teams to have packages created that contain stuff like compilers and extensions but it will at least get around the error found in this issue.\n",
        "createdAt": "2016-09-23T20:56:26Z",
        "updatedAt": "2016-09-23T20:56:26Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "This is now fixed and the package is available at https://dotnet.myget.org/feed/msbuild/package/nuget/Microsoft.Build.Runtime/15.1.262-preview5\n",
        "createdAt": "2016-09-27T04:32:24Z",
        "updatedAt": "2016-09-27T04:32:24Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "I'm hitting this. When should I expect the fix to RTM?",
        "createdAt": "2017-03-16T15:29:08Z",
        "updatedAt": "2017-03-16T15:29:08Z",
        "author": {
          "login": "jnm2"
        }
      },
      {
        "body": "@jnm2 The fix was in the final MSBuild 15.1.548 packages (as well as several prereleases before that). Are you using the `Microsoft.Build.Runtime` package? If so, please open a new issue describing your scenario and the failure you're seeing.",
        "createdAt": "2017-03-16T15:50:47Z",
        "updatedAt": "2017-03-16T15:50:47Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald I was not, that fixed it. Is there documentation for the fact that you can't use the `Project` type without failing at runtime unless you reference `Microsoft.Build.Runtime`? Documentation like that would be extremely helpful.",
        "createdAt": "2017-03-16T16:01:44Z",
        "updatedAt": "2017-03-16T16:01:44Z",
        "author": {
          "login": "jnm2"
        }
      }
    ]
  }
}