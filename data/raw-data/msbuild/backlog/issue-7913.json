{
  "number": 7913,
  "title": "MSBuild Server - breaking change detected - custom task runs child process",
  "body": "### Issue Description\r\nWhen custom task runs child process, such as here https://github.com/dotnet/arcade/blob/258a37cd6a7884f771d0f991d9f24d29e292abd0/src/Microsoft.DotNet.Arcade.Sdk/src/InstallDotNetCore.cs#L137-L142 , such processes started from task running at MSBuild server node or worker node will be unattached from stdout/err pipe and outputs from such processes will not make it to target device (console, terminal, file, etc...).\r\n\r\nIn some circumstances, such process can even fail, like it did in linux on https://github.com/dotnet/aspnetcore/pull/43028\r\n\r\nIt can break customers whom:\r\n- Have custom tasks which start child process without outputs redirection.\r\n- And, need outputs from such child processes to be redirected to current process outputs.\r\n\r\n### Steps to Reproduce\r\n* TODO: I will try to create mini repro.\r\n\r\n### Workaround \r\na) opt-out from msbuild server (env var DOTNET_CLI_DO_NOT_USE_MSBUILD_SERVER=1 or build argument /nr:false)\r\nb) change custom tasks to execute process with output redirected and capture those outputs\r\nc) use MSBuild Exec task to run other processes and tools - it has b) already implemented\r\n",
  "state": "OPEN",
  "createdAt": "2022-08-25T16:18:33Z",
  "updatedAt": "2024-01-31T08:16:26Z",
  "closedAt": null,
  "author": {
    "login": "rokonec"
  },
  "labels": [
    "backlog",
    "Area: Performance",
    "Area: API",
    "Area: Application",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "@rainersigwald @baronfel @MattGal \r\nSince there is not possible fix at MSBuild side, we shall discuss how to approach and document this.\r\n",
        "createdAt": "2022-08-25T16:21:11Z",
        "updatedAt": "2022-08-25T16:21:11Z",
        "author": {
          "login": "rokonec"
        }
      },
      {
        "body": "question: were these tasks already broken if run in a worker node (not the entry-point node)?",
        "createdAt": "2022-08-26T14:25:32Z",
        "updatedAt": "2022-08-26T14:25:32Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> question: were these tasks already broken if run in a worker node (not the entry-point node)?\r\n\r\nNot sure,  but the code in question ran across a wide variety of build scenarios in linux for years before this ever started to matter.",
        "createdAt": "2022-08-26T15:13:07Z",
        "updatedAt": "2022-08-26T15:13:07Z",
        "author": {
          "login": "MattGal"
        }
      },
      {
        "body": "> question: were these tasks already broken if run in a worker node (not the entry-point node)?\r\n\r\nThese tasks would probably fail if run from worker node, but it might have been that these have had always run from entry/in-proc node. For example in failing https://github.com/dotnet/aspnetcore/pull/43028 the command is `dotnet build .... Build.proj` which had always run in in-proc node.\r\nThat being said, I do believe that such Tasks are fragile, and customers should consider to rewrite them into more stable version, by leveraging Exect tasks for example. I just hope there is not too much of such customers.\r\nSimilar situation must have had arisen couple of years ago when MSBuild introduce worker nodes.\r\n\r\nNote: This apply only to dotnet CLI as msbuild.exe CLI do not leverage MSBuild server - at the time of writing.\r\n",
        "createdAt": "2022-08-26T19:25:49Z",
        "updatedAt": "2022-08-26T19:26:43Z",
        "author": {
          "login": "rokonec"
        }
      }
    ]
  }
}