{
  "number": 3123,
  "title": "Getting several design time build warnings when opening the Roslyn solution",
  "body": "_From @adrianvmsft on March 23, 2018 1:8_\n\nWhen I open the roslyn solution, I get several (between 5 and even 30 sometimes) warnings like this (in the design time build output window):\r\n\r\n------ Build started: Project: BasicCommandLineTest, Configuration: Debug|AnyCPU, Targets: CollectResolvedSDKReferencesDesignTime, CollectPackageReferences, ResolveComReferencesDesignTime, ResolveProjectReferencesDesignTime, BuiltProjectOutputGroup, CollectBuiltDesignTime, ResolveAssemblyReferencesDesignTime, CollectAnalyzersDesignTime, CollectSDKReferencesDesignTime, ResolvePackageDependenciesDesignTime, CompileDesignTime, CollectResolvedCompilationReferencesDesignTime ------\r\n310>C:\\Program Files (x86)\\Microsoft Visual Studio\\d157stg\\Enterprise\\MSBuild\\15.0\\Bin\\Microsoft.Common.CurrentVersion.targets(2106,5): warning MSB3088: Could not read state file \"D:\\Repos\\roslyn\\Binaries\\Obj\\BasicCommandLineTest\\Debug\\BasicCommandLineTest.vbprojAssemblyReference.cache\". Exception has been thrown by the target of an invocation.\r\n\r\nI am using the latest VS from the d15.7stg branch.\r\n\r\nSystem.Reflection.TargetInvocationException\r\n  HResult=0x80131604\r\n  Message=Exception has been thrown by the target of an invocation.\r\n  Source=mscorlib\r\n  StackTrace:\r\n   at System.RuntimeMethodHandle.SerializationInvoke(IRuntimeMethodInfo method, Object target, SerializationInfo info, StreamingContext& context)\r\n   at System.Runtime.Serialization.ObjectManager.CompleteISerializableObject(Object obj, SerializationInfo info, StreamingContext context)\r\n\r\nInner Exception 1:\r\nSerializationException: Member 'hasAN' was not found.\r\n\r\n\r\n>\tmscorlib.dll!System.Runtime.Serialization.ObjectManager.CompleteISerializableObject(object obj, System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)\tUnknown\r\n \tmscorlib.dll!System.Runtime.Serialization.ObjectManager.FixupSpecialObject(System.Runtime.Serialization.ObjectHolder holder)\tUnknown\r\n \tmscorlib.dll!System.Runtime.Serialization.ObjectManager.DoFixups()\tUnknown\r\n \tmscorlib.dll!System.Runtime.Serialization.Formatters.Binary.ObjectReader.Deserialize(System.Runtime.Remoting.Messaging.HeaderHandler handler, System.Runtime.Serialization.Formatters.Binary.__BinaryParser serParser, bool fCheck, bool isCrossAppDomain, System.Runtime.Remoting.Messaging.IMethodCallMessage methodCallMessage)\tUnknown\r\n \tmscorlib.dll!System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Deserialize(System.IO.Stream serializationStream, System.Runtime.Remoting.Messaging.HeaderHandler handler, bool fCheck, bool isCrossAppDomain, System.Runtime.Remoting.Messaging.IMethodCallMessage methodCallMessage)\tUnknown\r\n \tMicrosoft.Build.Tasks.Core.dll!Microsoft.Build.Tasks.StateFileBase.DeserializeCache(string stateFile, Microsoft.Build.Utilities.TaskLoggingHelper log, System.Type requiredReturnType)\tUnknown\r\n \tMicrosoft.Build.Tasks.Core.dll!Microsoft.Build.Tasks.ResolveAssemblyReference.ReadStateFile()\tUnknown\r\n \tMicrosoft.Build.Tasks.Core.dll!Microsoft.Build.Tasks.ResolveAssemblyReference.Execute(Microsoft.Build.Shared.FileExists fileExists, Microsoft.Build.Shared.DirectoryExists directoryExists, Microsoft.Build.Tasks.GetDirectories getDirectories, Microsoft.Build.Tasks.GetAssemblyName getAssemblyName, Microsoft.Build.Tasks.GetAssemblyMetadata getAssemblyMetadata, Microsoft.Build.Shared.GetRegistrySubKeyNames getRegistrySubKeyNames, Microsoft.Build.Shared.GetRegistrySubKeyDefaultValue getRegistrySubKeyDefaultValue, Microsoft.Build.Tasks.GetLastWriteTime getLastWriteTime, Microsoft.Build.Tasks.GetAssemblyRuntimeVersion getRuntimeVersion, Microsoft.Build.Shared.OpenBaseKey openBaseKey, Microsoft.Build.Tasks.GetAssemblyPathInGac getAssemblyPathInGac, Microsoft.Build.Tasks.IsWinMDFile isWinMDFile, Microsoft.Build.Tasks.ReadMachineTypeFromPEHeader readMachineTypeFromPEHeader)\tUnknown\r\n \tMicrosoft.Build.Tasks.Core.dll!Microsoft.Build.Tasks.ResolveAssemblyReference.Execute()\tUnknown\r\n \tMicrosoft.Build.dll!Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute()\tUnknown\r\n\r\n\n\n_Copied from original issue: dotnet/project-system#3416_",
  "state": "CLOSED",
  "createdAt": "2018-03-23T01:57:13Z",
  "updatedAt": "2024-02-21T17:14:00Z",
  "closedAt": "2018-03-23T18:34:49Z",
  "author": {
    "login": "davkean"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "@rainersigwald did the cache format change?",
        "createdAt": "2018-03-23T01:57:15Z",
        "updatedAt": "2018-03-23T01:57:15Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "Looks related to: https://github.com/Microsoft/msbuild/pull/3107.",
        "createdAt": "2018-03-23T01:57:15Z",
        "updatedAt": "2018-03-23T01:57:15Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "@AndyGerlicher Looks like a break due to a recent PR?",
        "createdAt": "2018-03-23T01:58:41Z",
        "updatedAt": "2018-03-23T01:58:41Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "We inserted into d15.7stg I think last Thursday night (3/16 build) with issues in the serialization format. That was fixed via the PR you linked on Tuesday. So any cache files created in that time could have this issue. Could that be what's going on here? Try deleting *.cache from your obj folder and it shouldn't happen again.",
        "createdAt": "2018-03-23T05:25:26Z",
        "updatedAt": "2018-03-23T05:25:26Z",
        "author": {
          "login": "AndyGerlicher"
        }
      },
      {
        "body": "I thought we had a version in the cache format to bail out early in that case?",
        "createdAt": "2018-03-23T15:30:07Z",
        "updatedAt": "2018-03-23T15:30:07Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "The version field in the cache is verified after the fact :(. It was to prevent issues where auto binary serialization will pass normally but fields might be null. That happened when we renamed parameters with _ using CodeFormatter. With the custom serialization it's throwing before it reads the version field on the base class.\r\n\r\nPossible fix is to manually add an int at the beginning of the stream to detect the version and bail out entirely. We should do that for 15.8 or if we ever change the format again, but I don't think this is worth fixing for that short few day window where the format was bad. If we find another bug I'll include this to invalidate the other though.",
        "createdAt": "2018-03-23T18:34:20Z",
        "updatedAt": "2018-03-23T18:34:20Z",
        "author": {
          "login": "AndyGerlicher"
        }
      },
      {
        "body": "Can you reopen this if you're hitting this outside of that scenario?",
        "createdAt": "2018-03-23T18:34:49Z",
        "updatedAt": "2018-03-23T18:34:49Z",
        "author": {
          "login": "AndyGerlicher"
        }
      }
    ]
  }
}