{
  "number": 6713,
  "title": "Visual Studio FastUpToDate assumes Up-to-Date wrongly",
  "body": "### Issue Description\r\nWhen incrementally building a project with a dependency to another project, content files of the latter won't update in the output directory of the former.\r\n\r\n\r\n### Steps to Reproduce\r\n#### Sample\r\n- [MSBuildBug.zip](https://github.com/dotnet/msbuild/files/6894170/MSBuildBug.zip)\r\n- run the sample, then change the content of the Content file\r\n#### Manually\r\n- Create a dotnet 5.0 executable Project and a library Project\r\n- Make the executable Project reference the library Project\r\n- Add a *testfile.txt* to the library as `Content`, `PreserveNewest`\r\n- Build the executable\r\n- The *testfile.txt* gets copied into the output directory of the executable\r\n- Change the content of the *testfile.txt*\r\n- build the executable again\r\n\r\n### Expected Behavior\r\n- the output directory of the executable should contain the updated content file.\r\n### Actual Behavior\r\n- the output directory of the executable only contains the old one.\r\n\r\n### Analysis\r\n- it doesn't happen when building with dotnet build\r\n- Visual Studio's FastUpToDate doesn't consider the executable project out of date and doesn't call msbuild for it.\r\n- FastUpToDate doesn't know about the content files, but seems to rely on the CopyCompleted file of the library to be touched to determine the UpToDateness of dependent projects.\r\n- In the Microsoft.Common.CurrentVersion.targets only the Target `_CopyFilesMarkedCopyLocal` does touch the CopyCompleted file.\r\n- but for subsequent builds the `_CopyFilesMarkedCopyLocal` is skipped; `_CopyOutOfDateSourceItemsToOutputDirectory` does the copying then.\r\n\r\n\r\n### Versions & Configurations\r\n- OS: Win10\r\n- Msbuild 17.0.0-preview-21329-01+1b7661f36 with Visual Studio Professional 2022 Preview (64-bit) Version 17.0.0 Preview 2.1\r\n- Msbuild 16.10.2+857e5a733 with Visual Studio Professional 2019 Version 16.10.4\r\n\r\n\r\n",
  "state": "CLOSED",
  "createdAt": "2021-07-28T15:19:10Z",
  "updatedAt": "2024-02-21T14:12:21Z",
  "closedAt": "2022-03-07T18:12:53Z",
  "author": {
    "login": "felix-ri"
  },
  "labels": [
    "bug",
    "needs-design",
    "needs-attention",
    "Area: Visual Studio",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "rainersigwald"
      }
    ]
  },
  "milestone": {
    "title": "VS 17.2"
  },
  "comments": {
    "nodes": [
      {
        "body": "This may be fixed as of https://github.com/dotnet/msbuild/pull/6622. What happens when you set `MSBuildCopyContentTransitively` to true in your project?",
        "createdAt": "2021-07-28T20:26:17Z",
        "updatedAt": "2021-07-28T20:26:17Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "I added `<MSBuildCopyContentTransitively>true</MSBuildCopyContentTransitively>` to the properties of both projects, but the behaviour is still the same.",
        "createdAt": "2021-07-29T06:08:16Z",
        "updatedAt": "2021-07-29T06:08:16Z",
        "author": {
          "login": "felix-ri"
        }
      },
      {
        "body": "Team Triage: This doesn't reproduce with `dotnet msbuild` or `msbuild` on the command line so it likely isn't MSBuild. Is this a project-system issue? cc @ocallesp ",
        "createdAt": "2021-07-29T16:18:26Z",
        "updatedAt": "2021-07-29T16:18:26Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "@BenVillalobos I think @felix-ri's analysis is correct. The VS up-to-date check uses the copy marker to identify the up-to-date state of referenced projects. Can the CopyCompleted marker file be touched in `_CopyOutOfDateSourceItemsToOutputDirectory` rather than `_CopyFilesMarkedCopyLocal`?",
        "createdAt": "2021-07-29T21:30:42Z",
        "updatedAt": "2021-07-29T21:30:42Z",
        "author": {
          "login": "drewnoakes"
        }
      },
      {
        "body": "> Can the CopyCompleted marker file be touched in _CopyOutOfDateSourceItemsToOutputDirectory rather than _CopyFilesMarkedCopyLocal?\r\n\r\n@rainersigwald Do you have an idea the impact of this change?",
        "createdAt": "2021-08-05T16:57:15Z",
        "updatedAt": "2021-08-05T16:57:15Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "The problem also occurs with `<CopyToOutputDirectory>Always</CopyToOutputDirectory>`. The corresponding target `_CopyOutOfDateSourceItemsToOutputDirectoryAlways` doesn't touch the Marker File either.",
        "createdAt": "2021-08-06T06:24:50Z",
        "updatedAt": "2021-08-06T06:24:50Z",
        "author": {
          "login": "felix-ri"
        }
      },
      {
        "body": "Team Triage: What's happening is the exe project doesn't have testfile.txt as an input. As a result, FUTD thinks it's up to date WRT its inputs because it's not aware of that input.\r\n\r\nIf we were to change where the CopyComplete marker executed, it wouldn't have an impact because it only cares about implementation assemblies. @drewnoakes, are you suggesting changing the copycomplete marker to mean \"did literally any copy actually happen?\" If so, it _may_ impact downstream referencing projects, but we don't think it's guaranteed to do so. FUTD would fail or return false more often. We'd have to decide whether that's an acceptable tradeoff.",
        "createdAt": "2021-08-19T16:42:36Z",
        "updatedAt": "2021-08-19T16:42:36Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "Another possibility here could be to skip FUTD on any project where a referenced project built (at the project-system layer). That wouldn't be ideal (especially for cross-project-system things like referencing a `csproj.dll` project) but could avoid a bunch of these \"we don't know the full input closure because it's a build-time-discovered thing\" problems.",
        "createdAt": "2021-08-27T17:16:40Z",
        "updatedAt": "2021-08-27T17:16:40Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> @drewnoakes, are you suggesting changing the copycomplete marker to mean \"did literally any copy actually happen?\" If so, it may impact downstream referencing projects, but we don't think it's guaranteed to do so. FUTD would fail or return false more often. We'd have to decide whether that's an acceptable tradeoff.\r\n\r\nI'm not aware of other consumers of that file, but if a project changed in such a way that a consuming project must be rebuilt, then that needs to be visible to the VS FUTD check. The CopyComplete marker is the current mechanism for this. Considering only Visual Studio's consumption of that file, expanding the occasions in which it's touched will trigger more builds in VS. But the problem here is that we're not building when we should, and so that sounds like the fix we want.\r\n\r\nMy understanding is that a more optimal solution would be to have all depending projects model the CopyToOutputDirectory items of those projects they depend upon, taking into account any PrivateAssets logic. Absent that, simply touching the marker seems the correct behaviour to me here.\r\n\r\n> Another possibility here could be to skip FUTD on any project where a referenced project built (at the project-system layer). \r\n\r\nThis would require deep changes to VS, as VS builds project-by-project and very little information flows between builds today, other than simple status flags.",
        "createdAt": "2021-08-30T01:49:10Z",
        "updatedAt": "2021-08-30T01:49:10Z",
        "author": {
          "login": "drewnoakes"
        }
      },
      {
        "body": "From chat with @rainersigwald we first need to sort out ownership (is this an msbuild or a project system bug?). He'll follow up with @drewnoakes . \r\nBut we agree it's definitely important to fix in 17.0 timeframe.\r\nThanks!",
        "createdAt": "2021-09-24T22:30:55Z",
        "updatedAt": "2021-09-24T22:30:55Z",
        "author": {
          "login": "jcouv"
        }
      },
      {
        "body": "@rainersigwald @drewnoakes I didn't see any update on this. Did you get a chance to discuss and confirm the root cause?",
        "createdAt": "2021-10-01T22:01:08Z",
        "updatedAt": "2021-10-01T22:01:08Z",
        "author": {
          "login": "jcouv"
        }
      },
      {
        "body": "This issues impacts our solution of 110 projects.\r\nAs a workaround we use `<DisableFastUpToDateCheck>true</DisableFastUpToDateCheck>` in the projectwide `Directory.Build.props` which helps that the build is correct but it takes longer to partially build the solution.",
        "createdAt": "2021-11-30T09:49:02Z",
        "updatedAt": "2021-11-30T09:49:02Z",
        "author": {
          "login": "Valdiralita"
        }
      },
      {
        "body": "This is a duplicate of https://github.com/dotnet/project-system/issues/4665. @PathogenDavid has kindly [documented some workarounds](https://github.com/PathogenPlayground/TransitiveCopiedConentNotUpdated#workarounds).\r\n\r\nWe are working on a fix for it at the moment. https://github.com/dotnet/project-system/pull/7932 does fix this, but introduces some performance regressions that I'm trying to work around right now. It is expensive to have each project recurse through its references to gather items (which that PR does). That PR also won't keep the list of items up to date over time as referenced projects change, as we don't trigger design-time builds when referenced projects change.",
        "createdAt": "2022-02-24T23:00:54Z",
        "updatedAt": "2022-02-24T23:00:54Z",
        "author": {
          "login": "drewnoakes"
        }
      },
      {
        "body": "Per Drew's comment, closing out this issue and will track it on the project system side going forward.",
        "createdAt": "2022-03-07T18:12:53Z",
        "updatedAt": "2022-03-07T18:12:53Z",
        "author": {
          "login": "marcpopMSFT"
        }
      }
    ]
  }
}