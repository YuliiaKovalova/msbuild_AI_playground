{
  "number": 8404,
  "title": "Huge memory consumption by running dotnet even with just a -? switch",
  "body": "### Issue Description\r\nWhen I type just `dotnet -?` or `dotnet build -?`, it makes huge memory consumption. the machine is Win7, the .NET is the latest.\r\nhere is a nicey screenshot, screwed up a bit by jpg though:\r\n\r\n![dotnetbuildramhog](https://user-images.githubusercontent.com/17954954/216731927-413fa603-f8b0-4db5-ace4-30f59bf64040.jpg)\r\n\r\nof 8GBs of RAM almost all is consumed, even though performance monitor shows 1 or 2 dotnet instances, each having around 600MB commit, but significantly smaller working sets (380KB of a private set, when running just `dotnet -?`). especially for the 2nd one. still, it gets noticeable, that the system pages out a lot, other programs lag after this (black rectangles on screen instead of their client areas). the disk is 5400rpm, not NVMe SSD.\r\n\r\n### Steps to Reproduce\r\njust typing `dotnet [build] -?` or biulding a simple \"hello world\" in the specified below environment is enough to reproduce it.\r\n\r\n### Analysis\r\nwhen running dotnet. both from CLI and VS. no more ideas.\r\n\r\nlooking at the screenshot, it's seen, that the amount increases (for several seconds duration), by 4GB. even though, the dotnet process commit is ~500MB. as said, the working set (any) is way smaller. if that is just a confusion of the counters, why other programs experience the lag, very well observable on the GUI? I don't know if modified time on the pagefile is an accurate measure of paging happened, but while posting this and making the screenshot, the pagefile modified time remained with 6 hours ago.\r\n\r\n### Versions & Configurations\r\n```\r\n>msbuild -version\r\nMSBuild version 17.4.1+9a89d02ff for .NET Framework\r\n17.4.1.60106\r\n```\r\ndotnet CLI and VS IDE. the latest VS (downloaded yesterday).\r\nWindows 7 x64.\r\n\r\n### Regression?\r\nI don't know, since I am a C guy and always have been using MSVC and nmake from command line.\r\n",
  "state": "CLOSED",
  "createdAt": "2023-02-04T00:09:45Z",
  "updatedAt": "2024-04-19T14:12:38Z",
  "closedAt": "2023-02-07T16:02:45Z",
  "author": {
    "login": "z4v4l"
  },
  "labels": [
    "Area: Performance",
    "needs-triage"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": ".NET 7 is not supported on Windows 7. The large memory usage is a known bug that was marked wont-fix: https://github.com/dotnet/runtime/issues/79469.",
        "createdAt": "2023-02-04T02:34:22Z",
        "updatedAt": "2023-02-04T02:34:22Z",
        "author": {
          "login": "reflectronic"
        }
      },
      {
        "body": "> .NET 7 is not supported on Windows 7. The large memory usage is a known bug that was marked wont-fix: [dotnet/runtime#79469](https://github.com/dotnet/runtime/issues/79469).\r\n\r\nbut it's not a .Net app consuming it, it's the dotnet process does. and it's .Net 6.0 long term support.",
        "createdAt": "2023-02-04T06:44:56Z",
        "updatedAt": "2023-02-04T06:44:56Z",
        "author": {
          "login": "z4v4l"
        }
      },
      {
        "body": "MSBuild 17.4 runs on .NET 7. You should add a `global.json` file to your repository limiting the SDK version to 6.",
        "createdAt": "2023-02-04T07:39:09Z",
        "updatedAt": "2023-02-04T07:39:09Z",
        "author": {
          "login": "teo-tsirpanis"
        }
      },
      {
        "body": "> MSBuild 17.4 runs on .NET 7. You should add a `global.json` file to your repository limiting the SDK version to 6.\r\n\r\nthank you. now, it's not only doesn't do 4-5GB commits, but runs instantly. If I put global.json file in a top directory that contains all my dotnet projects directories, would that be enough? I read, that it would, but the doc says \"one of its parent directories\". :)",
        "createdAt": "2023-02-04T23:58:09Z",
        "updatedAt": "2023-02-04T23:58:09Z",
        "author": {
          "login": "z4v4l"
        }
      },
      {
        "body": "It would work but I would recommend you to add it to each repository for consistency among all its developers.",
        "createdAt": "2023-02-05T00:22:59Z",
        "updatedAt": "2023-02-05T00:22:59Z",
        "author": {
          "login": "teo-tsirpanis"
        }
      },
      {
        "body": "Duplicate of https://github.com/dotnet/runtime/issues/79469",
        "createdAt": "2023-02-07T16:02:45Z",
        "updatedAt": "2023-02-07T16:02:45Z",
        "author": {
          "login": "AR-May"
        }
      },
      {
        "body": "for posteriority, tl;dr:\r\nset `DOTNET_EnableWriteXorExecute` env var to `0` ; it was an opt-in in .NET 6, but was default to `1` on .NET 7. It behaves absurdly on Win7 (memory consumption goes through the roof even if no process actually uses it), since it (OS) doesn't support that option too well.\r\n\r\nBoth .NET 7 and .NET 8 (preview) apps/hosts/etc. started using normal amounts of RAM after this for me.",
        "createdAt": "2023-08-06T15:56:14Z",
        "updatedAt": "2023-08-06T16:04:45Z",
        "author": {
          "login": "FyiurAmron"
        }
      },
      {
        "body": "\".NET 7 is not supported on Windows 7. The large memory usage is a known bug that was marked wont-fix\".\r\n`set DOTNET_EnableWriteXorExecute=0` fixes the bug.\r\nOur IT team got into huge trouble today because our server crashed since we migrated from .NET 6 to .NET 8 on a windows 7 terminal server.\r\nOn .NET 6, 30 users could use our app, on .NET 8 it crashed after 5 users because of the huge memory usage.\r\n\r\nIt took us a long time and resources to find the cause of this bug.\r\n\r\nNot happy with the attitude \"We don't care about a huge bug because it's windows 7\".\r\nEspecially if it's that easy to fix. Or at least put a warning somewhere.\r\n",
        "createdAt": "2024-04-19T09:40:00Z",
        "updatedAt": "2024-04-19T09:40:00Z",
        "author": {
          "login": "Charles113"
        }
      },
      {
        "body": "> Not happy with the attitude \"We don't care about a huge bug because it's windows 7\". Especially if it's that easy to fix. Or at least put a warning somewhere.\r\n\r\nThis is not an easy fix from the perspective of the runtime. `EnableWriteXorExecute` is an essential security feature introduced since .NET 7 which can make sure a memory region never be both executable and writable. This can protect apps from potential vulnerability exploitations. Such feature requires system support at least Windows 10, .NET really cannot just \"disable the essential security feature automatically because users want to use it on an unsupported system\".",
        "createdAt": "2024-04-19T14:11:09Z",
        "updatedAt": "2024-04-19T14:11:59Z",
        "author": {
          "login": "hez2010"
        }
      }
    ]
  }
}