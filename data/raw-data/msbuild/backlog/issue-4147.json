{
  "number": 4147,
  "title": "Project Reference does not find project outputs if they are placed in a different folder",
  "body": "### Steps to reproduce\r\n\r\nWe have an ASP.NET MVC project with some controllers that we want to test. In Visual Studio we created a solution containing the project and an MSTest unit test project that references it. In VS the build is successful and the unit tests are successfully run. When we use MSBuild it is unable to build the solution because it cannot find the MVC project output to place into the unit test project.\r\n\r\nThe issue, we believe, is that the $(OutDir) property is changed during the build process so the project reference logic is using the wrong path. In a typical web application the `Microsoft.WebApplication.targets` file is part of the project file. It \"publishes\" the project to the `_PublishedWebsites` folder. This is handled conditionally by comparing the output directory specified to MSBuild with the $(OutDir) variable in the project. If they differ than it appends this extra folder and then copies the \"contents\" of the site to the output.\r\n\r\nFor a solution that only contains an MVC app and support libraries then this works fine. You can specify the appropriate arguments when calling MSBuild and it'll \"publish\" the site. However if the solution contains other projects like console applications or even multiple sites then publishing will cause them to all be output to the same folder which won't work. To handle this case we have a custom build step (via YAML) that generates a `directory.build.targets` file in the solution root before the build runs. Within this custom .targets file is a conditional check to see if this is a website project. If it is then it changes the $(OutDir) variable which will cause the condition in `Microsoft.WebApplication.targets` to detect a difference and publish the site to a different folder.\r\n\r\nWhen the unit test project is built it doesn't recognize the output of the project as being different and looks in the original path. Of course the files don't exist there so it fails.\r\n\r\nTypical MVC project file\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<Project ToolsVersion=\"15.0\" DefaultTargets=\"Build\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\r\n  <Import Project=\"$(MSBuildExtensionsPath)\\$(MSBuildToolsVersion)\\Microsoft.Common.props\" Condition=\"Exists('$(MSBuildExtensionsPath)\\$(MSBuildToolsVersion)\\Microsoft.Common.props')\" />\r\n  <PropertyGroup>\r\n    <Configuration Condition=\" '$(Configuration)' == '' \">Debug</Configuration>\r\n    <Platform Condition=\" '$(Platform)' == '' \">AnyCPU</Platform>\r\n    <SchemaVersion>2.0</SchemaVersion>\r\n    <OutputType>Library</OutputType>\r\n    <AppDesignerFolder>Properties</AppDesignerFolder>\r\n    <RootNamespace>WebApplication1</RootNamespace>\r\n    <AssemblyName>WebApplication1</AssemblyName>\r\n    <TargetFrameworkVersion>v4.7</TargetFrameworkVersion>\r\n    <UseIISExpress>true</UseIISExpress>\r\n    <IISExpressSSLPort>44301</IISExpressSSLPort>\r\n    <AutoGenerateBindingRedirects>true</AutoGenerateBindingRedirects>\r\n  </PropertyGroup>\r\n  <PropertyGroup Condition=\" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' \">\r\n    <DebugSymbols>true</DebugSymbols>\r\n    <DebugType>full</DebugType>\r\n    <Optimize>false</Optimize>\r\n    <OutputPath>bin\\</OutputPath>\r\n    <DefineConstants>DEBUG;TRACE</DefineConstants>\r\n    <ErrorReport>prompt</ErrorReport>\r\n    <WarningLevel>4</WarningLevel>\r\n  </PropertyGroup>\r\n  <PropertyGroup Condition=\" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' \">\r\n    <DebugType>pdbonly</DebugType>\r\n    <Optimize>true</Optimize>\r\n    <OutputPath>bin\\</OutputPath>\r\n    <DefineConstants>TRACE</DefineConstants>\r\n    <ErrorReport>prompt</ErrorReport>\r\n    <WarningLevel>4</WarningLevel>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNet.WebApi\" Version=\"5.2.7\" />\r\n    <PackageReference Include=\"Microsoft.AspNet.WebApi.Client\" Version=\"5.2.7\" />\r\n    <PackageReference Include=\"Microsoft.AspNet.WebApi.Core\" Version=\"5.2.7\" />\r\n    <PackageReference Include=\"Microsoft.AspNet.WebApi.WebHost\" Version=\"5.2.7\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <Reference Include=\"Microsoft.CSharp\" />\r\n    <Reference Include=\"System.Data.DataSetExtensions\" />\r\n    <Reference Include=\"System.Data.Linq\" />\r\n    <Reference Include=\"System.Net.Http\" />\r\n    <Reference Include=\"System\" />\r\n    <Reference Include=\"System.Data\" />\r\n    <Reference Include=\"System.Web.Extensions\" />\r\n    <Reference Include=\"System.Web\" />\r\n    <Reference Include=\"System.Xml\" />\r\n  </ItemGroup>\r\n  <PropertyGroup>\r\n    <VisualStudioVersion Condition=\"'$(VisualStudioVersion)' == ''\">10.0</VisualStudioVersion>\r\n    <VSToolsPath Condition=\"'$(VSToolsPath)' == ''\">$(MSBuildExtensionsPath32)\\Microsoft\\VisualStudio\\v$(VisualStudioVersion)</VSToolsPath>\r\n  </PropertyGroup>\r\n  <Import Project=\"$(MSBuildBinPath)\\Microsoft.CSharp.targets\" />\r\n  <Import Project=\"$(VSToolsPath)\\WebApplications\\Microsoft.WebApplication.targets\" Condition=\"'$(VSToolsPath)' != ''\" />\r\n  <Import Project=\"$(MSBuildExtensionsPath32)\\Microsoft\\VisualStudio\\v10.0\\WebApplications\\Microsoft.WebApplication.targets\" Condition=\"false\" />\r\n  </Project>\r\n```\r\n\r\nGenerated `directory.build.targets` file in root of solution.\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<Project ToolsVersion=\"15.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">     \r\n    <PropertyGroup Condition=\"Exists('$(MSBuildProjectDirectory)\\web.config')\">\r\n        <OutDir>$(OutDir)publish\\</OutDir>\r\n    </PropertyGroup>\r\n</Project>\r\n```\r\n\r\nOutput of a build will be to `$(OutDir)publish\\_PublishedWebsite`.\r\n\r\nTest project with project reference.\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n     <TargetFramework>net47</TargetFramework>\r\n     <AutoGenerateBindingRedirects>true</AutoGenerateBindingRedirects>\r\n     <GenerateBindingRedirectsOutputType>true</GenerateBindingRedirectsOutputType>\r\n  </PropertyGroup>\r\n\r\n   <ItemGroup>  \r\n    <PackageReference Include=\"Microsoft.AspNet.WebApi.Core\" Version=\"5.2.7\" />\r\n    <PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"15.9.0\" />\r\n    <PackageReference Include=\"MSTest.TestAdapter\" Version=\"1.4.0\" />\r\n    <PackageReference Include=\"MSTest.TestFramework\" Version=\"1.4.0\" />\r\n  </ItemGroup>\r\n   \r\n  <ItemGroup>\r\n    <ProjectReference Include=\"..\\WebApplication1\\WebApplication1.csproj\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nMSBuild command that was run: `/p:platform=\"any cpu\" /p:configuration=\"Release\" /p:VisualStudioVersion=\"15.0\" /m`\r\n\r\n### Expected  behavior\r\n\r\nSolution should build the same when called from Azure DevOps via MSBuild task as it does when called from Visual Studio.  Unit tests should be able to use project references to locate outputs of other projects even if the other project uses a different output path.\r\n\r\n### Actual behavior\r\n\r\nWhen run from VS where the `directory.build.targets` file is not used then the project reference works correctly as the output is consistent with what it expected. \r\n\r\nWhen run from a build triggered via Azure DevOps and using the modified output because of the addition of the `directory.build.targets` then the project output is not located. MSBuild is looking in the output directory that was defined in the project file of the project reference rather than what was actually used.\r\n\r\nRelevant section from build log.\r\n\r\n```text\r\nResolveAssemblyReferences:\r\n2019-02-06T20:10:18.3922917Z          Primary reference \"WebApplication1\".\r\n2019-02-06T20:10:18.3922983Z              Could not find dependent files. Expected file \"D:\\a\\1\\s\\WebApplication1\\bin\\WebApplication1.dll\" does not exist.\r\n2019-02-06T20:10:18.3923056Z              Could not find dependent files. Expected file \"D:\\a\\1\\s\\WebApplication1\\bin\\WebApplication1.dll\" does not exist.\r\n2019-02-06T20:10:18.3923099Z              Resolved file path is \"D:\\a\\1\\s\\WebApplication1\\bin\\WebApplication1.dll\".\r\n2019-02-06T20:10:18.3923154Z              Reference found at search path location \"\".\r\n2019-02-06T20:10:18.3923373Z              The ImageRuntimeVersion for this reference is \"\".\r\n\r\n##[error]CSC(0,0): Error CS0006: Metadata file 'D:\\a\\1\\s\\WebApplication1\\bin\\WebApplication1.dll' could not be found\r\n```\r\n\r\n### Environment data\r\nVisual Studio Build Azure DevOps Task: 1.146.0\r\n`msbuild /version` output: 15.0",
  "state": "OPEN",
  "createdAt": "2019-02-06T21:25:21Z",
  "updatedAt": "2024-02-21T16:31:57Z",
  "closedAt": null,
  "author": {
    "login": "CoolDadTx"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Discussion"
  },
  "comments": {
    "nodes": [
      {
        "body": "Because msbuild recently (I presume with an update to Visual Studio) began ignoring our `<OutputPath>` in a .csproj file which is supposed to override the `<OutputPath>` defined in an included .targets file, we attempted to switch to `<OutDir>`.  I then received this same behavior where my unit test project built fine in VS but fails from command line msbuild, due to not being able to locate the output dll from the web project it references.  ASP.NET (not mvc) project targeting 4.7.1 in VS 15.9.15",
        "createdAt": "2019-08-19T23:35:12Z",
        "updatedAt": "2019-08-19T23:35:42Z",
        "author": {
          "login": "DannyMeister"
        }
      },
      {
        "body": "Ran into a similar issue. I was able to work around this by explicitly setting the TargetPath as well as that did not get updated correctly with the different folder.\r\n\r\nFor example:\r\n```Xml\r\n<OutDir>$(MSBuildProjectDirectory)\\somefolder\\otherfolder</OutDir>\r\n<TargetPath>$(Outdir)$(TargetFileName)</TargetPath>\r\n```",
        "createdAt": "2019-11-25T22:36:20Z",
        "updatedAt": "2019-11-25T22:36:20Z",
        "author": {
          "login": "ralph-msft"
        }
      },
      {
        "body": "@ralph-msft identified the core problem: setting `OutDir` too late means that some derived properties (like `$(TargetPath)`) won't see the update, because they used the prior value.\r\n\r\n@CoolDadTx can you use a `Directory.Build.props` to set OutDir instead?",
        "createdAt": "2019-11-25T23:01:45Z",
        "updatedAt": "2019-11-25T23:01:45Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald we could but we already have a working solution in YAML using dynamically generated .targets files so I'm not able to confirm this. But `.props` files run locally and in Azure DevOps so it is impacting both local and server builds. Probably not an issue in this specific case but I'd rather not change what we have working right now.",
        "createdAt": "2019-11-26T14:53:40Z",
        "updatedAt": "2019-11-26T14:53:40Z",
        "author": {
          "login": "CoolDadTx"
        }
      },
      {
        "body": "I am also running into this issue or something very, very close.  I've been creating a master solution for our code base, and I wanted to put the output into a central location to make it easier to \"clean\" out the output for a truly clean build.  The relevant part of the output log previously noted is nearly identical to what I am seeing.  A fix for this or steps to work around t would be extremely helpful.",
        "createdAt": "2023-01-01T04:35:28Z",
        "updatedAt": "2023-01-01T04:35:28Z",
        "author": {
          "login": "MrMontana1889"
        }
      }
    ]
  }
}