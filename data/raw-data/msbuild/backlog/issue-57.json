{
  "number": 57,
  "title": "Help needed: Looking for an \"official\" workaround for Path Too Long",
  "body": "Related: \n- https://github.com/npm/npm/issues/3697#issuecomment-62281110\n- https://social.technet.microsoft.com/Forums/en-US/e84bb703-27df-4966-bdf1-2b5760c71a1f/filesystem-path-too-long?forum=WinPreview2014Feedback\n\nThis is a universally known truth that the Windows limitation of Path Too Long is affecting almost every runtime and programming paradigm. Unfortunately, MSBuild is not different in that regard. Hopefully, someday we will see it get actually _fixed_ by Windows team.. :)\n\nOver at [Web Essentials 2013](https://github.com/madskristensen/webEssentials2013/), we are having issues packaging node.js modules into a `.visx` image, due to too nested dependencies. We are able to mitigate it using [Pri.LongPath](https://github.com/peteraritchie/LongPath) assembly via reflection(https://github.com/madskristensen/WebEssentials2013/pull/1387 & https://github.com/madskristensen/WebEssentials2013/pull/1803), which worked for a while in PreBuildTask, but now it is causing PathTooLong issue with `<Copy> task` on packaging the assets to visx ([WebEssentials2013.csproj#L1038](https://github.com/madskristensen/WebEssentials2013/blob/c8105d56a0b35b83d3e1e95ef306895d7ce5d79e/EditorExtensions/WebEssentials2013.csproj#L1038)). Is there a way we can override the default copying behavior and use _hacks_ like \"Pri.LongPath via reflection\" there as well?\n\nThis is main blocker for WE2013's vNext, which is overdue for quite some now. Any help would be much appreciated by all consumers of Web Essentials! :tada: \n\n//cc @madskristensen, @SLaks.\n",
  "state": "CLOSED",
  "createdAt": "2015-04-01T06:12:04Z",
  "updatedAt": "2024-02-21T17:31:55Z",
  "closedAt": "2015-04-07T22:40:06Z",
  "author": {
    "login": "am11"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "+1\n",
        "createdAt": "2015-04-01T06:23:01Z",
        "updatedAt": "2015-04-01T06:23:01Z",
        "author": {
          "login": "rockstardev"
        }
      },
      {
        "body": "Duplicate of #53?\n",
        "createdAt": "2015-04-01T14:51:33Z",
        "updatedAt": "2015-04-01T14:51:33Z",
        "author": {
          "login": "amanda-mitchell"
        }
      },
      {
        "body": "Yes, duplicate. Well, mostly - NTFS' limitations of a 260-character-long-**path-component** won't change anytime soon (probably, ever). \n\nAnd the Windows team can't just redefine `MAX_PATH` as `33000u`, because then all the programs that did:\n\n``` C++\n_Null_terminated_ wchar_t path_str[ MAX_PATH ] = { 0 };\n```\n\n...would be at risk of a stack overflow (66,000 bytes is way beyond the default stack commit size of 4K).\n\nA better C++ workaround is to (when MAX_PATH isn't enough) do something like:\n\n``` C++\nif ( MAX_PATH_not_enough ) {\n    const rsize_t path_buffer_number_characters = 33000u;\n    std::unique_ptr<_Null_terminated_ wchar_t[]> path_buffer = std::make_unique< wchar_t []>( path_buffer_number_characters);\n    const rsize_t size_in_bytes = ( path_buffer_number_characters * sizeof( path_buffer[ 0 ] );\n    memset( path_buffer.get( ), 0, size_in_bytes );\n    //Use the buffer\n    //Prepend \"\\\\?\\\" if not done already.\n    }\n```\n\nSure, you're using heap - but only in the (hopefully) rare situation when you're dealing with long paths.\n",
        "createdAt": "2015-04-01T23:32:06Z",
        "updatedAt": "2015-04-01T23:32:06Z",
        "author": {
          "login": "ariccio"
        }
      },
      {
        "body": "Closing as duplicate of #53. This is something we would like to have, but not at this time.\n",
        "createdAt": "2015-04-07T22:40:06Z",
        "updatedAt": "2015-04-07T22:40:06Z",
        "author": {
          "login": "AndyGerlicher"
        }
      }
    ]
  }
}