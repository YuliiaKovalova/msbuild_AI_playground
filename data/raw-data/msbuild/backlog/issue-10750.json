{
  "number": 10750,
  "title": "[Broken Build]: FluentMigrator.MSBuild sample won't work on net8.0",
  "body": "### Issue Description\r\n\r\nFluentMigrator.MSBuild version 6.1.4 is packaged following guidance here: this project references nuget package FluentMigrator.MSBuild, which was packaged following the guidance here: https://learn.microsoft.com/en-us/visualstudio/msbuild/tutorial-custom-task-code-generation?view=vs-2022#create-a-nuget-package\r\n\r\nThe problem is that as I am loading an assembly as part of the target, for some reason the reflection calls are failing, even though it looks to me like all the assembly versions match (6.1.4). - This works on .NET Framework 4.8 (TFM net48), but fails on net8.0\r\n\r\nThe other thing I am looking at is [GenerateTemporaryTargetAssemblyTask](https://learn.microsoft.com/en-us/visualstudio/msbuild/generatetemporarytargetassembly-task?view=vs-2022)\r\n\r\n### Steps to Reproduce\r\n\r\nSample project here: https://github.com/fluentmigrator/fluentmigrator/tree/main/samples/FluentMigrator.Example.MSBuild \r\n\r\nTo run: `dotnet.exe msbuild .\\samples\\FluentMigrator.Example.MSBuild\\SampleMigrator.csproj`\r\n\r\nRequires a local database server to run - SQL Server localdb is fine.  If using localdb, you just need to update the connection string appropriately and create an empty FluentMigratorExample database, then you can run the target as described above.\r\n\r\nI ran it using:\r\n```\r\nMSBuild version 17.11.3+0c8610977 for .NET\r\n```\r\nand\r\n\r\n```\r\nPS D:\\source\\fluentmigrator\\> dotnet.exe --list-sdks\r\n6.0.321 [C:\\Program Files\\dotnet\\sdk]\r\n8.0.400 [C:\\Program Files\\dotnet\\sdk]\r\n\r\nPS D:\\source\\fluentmigrator\\> dotnet.exe --list-runtimes\r\nMicrosoft.AspNetCore.App 6.0.26 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\nMicrosoft.AspNetCore.App 6.0.33 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\nMicrosoft.AspNetCore.App 7.0.20 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\nMicrosoft.AspNetCore.App 8.0.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\nMicrosoft.NETCore.App 6.0.26 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\nMicrosoft.NETCore.App 6.0.33 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\nMicrosoft.NETCore.App 7.0.20 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\nMicrosoft.NETCore.App 8.0.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\nMicrosoft.WindowsDesktop.App 6.0.26 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\nMicrosoft.WindowsDesktop.App 6.0.33 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\nMicrosoft.WindowsDesktop.App 7.0.20 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\nMicrosoft.WindowsDesktop.App 8.0.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n```\r\n\r\nNote, this works correctly with a .NET CLI tool - the only difference is the entrypoint - one is MSBuild custom task, the other is a CLI tool.  They share much of the same code.\r\n\r\n```pwsh\r\ndotnet new tool-manifest\r\ndotnet install FluentMigrator.DotNet.Cli --local\r\ndotnet tool run dotnet-fm migrate --processor sqlserver2016 --assembly \"D:\\source\\fluentmigrator\\samples\\FluentMigrator.Example.Migrations\\bin\\Debug\\net8.0\\FluentMigrator.Example.Migrations.dll\" --connection \"Server=(local);Initial Catalog=FluentMigratorExample;Integrated Security=true;TrustServerCertificate=true;Encrypt=true\" --include-untagged-migrations\r\n```\r\n\r\n### Expected Behavior\r\n\r\nMigrations run - no red ink errors should occur - the output should say something similar to the equivalent FluentMigrator.DotNet.Cli tool output, as the two packages use the same TaskExecutor and basically the same Microsoft DI configuration.\r\n\r\n### Actual Behavior\r\n\r\nThe error I get is:\r\n\r\n```\r\nD:\\source\\fluentmigrator\\samples\\FluentMigrator.Example.MSBuild\\SampleMigrator.csproj(17,5): error : While executing mi\r\ngrations the following error was encountered: No migrations found,    at FluentMigrator.Runner.DefaultMigrationInformat\r\nionLoader.FindMigrations(IMigrationSource source, IMigrationRunnerConventions conventions, String namespace, Boolean lo\r\nadNestedNamespaces, String[] tagsToMatch, Boolean includeUntagged) in D:\\a\\1\\s\\src\\FluentMigrator.Runner.Core\\DefaultMi\r\ngrationInformationLoader.cs:line 185\r\n```\r\n\r\nTypically, this is not a hard error message to figure out and I've documented in our FAQ the common causes.  However, what stumps me here is I checked all the common causes and they're not the issue. \r\n\r\n### Ask us questions\r\n\r\n~1. Is there a bridge between MSBuild's ILogger and Microsoft DI ILogger I can use?  Much of the logic that is failing is not in my MSBuild assembly, but in a common shared assembly that uses Microsoft DI ILogger instead.  Having a shim I can wire up would make it a lot easier to debug this problem.~\r\n\r\n2. Is there something I am missing with running dotnet.exe msbuild that could be a problem here?\r\n\r\n3. Could how I am publishing the FluentMigrator.MSBuild task be a problem?  Like, somehow it embeds the wrong reference to an assembly?  How would I diagnose that?\r\n\r\n4. Would [GenerateTemporaryTargetAssembly task[(https://learn.microsoft.com/en-us/visualstudio/msbuild/generatetemporarytargetassembly-task?view=vs-2022) be a better approach? I've never done it so I am a little intimidated it will be a time suck that goes nowhere. There's limited samples I can find that approximate what I am doing.",
  "state": "CLOSED",
  "createdAt": "2024-10-03T14:35:36Z",
  "updatedAt": "2024-11-22T13:14:42Z",
  "closedAt": "2024-11-22T13:14:39Z",
  "author": {
    "login": "jzabroski"
  },
  "labels": [
    "needs-more-info",
    "stale",
    "closed-by-bot",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "After debugging this for another full day,\r\n\r\n1. I was able to create a logging shim for MSBuild's ILogger for Microsoft.Exensions.Logging - crossing that question off.\r\n2. I am wondering why two types would have the same AssemblyFullyQualifiedName and the type hierarchy matches all the way up, including interfaces, but still fail `type(IMigration).IsAssignableFrom(myForwardOnlyMigrationInstance)`.\r\n\r\nThere has to be some obscure scenario in the .NET runtime causing this woe I am facing? The two interfaces are:\r\n\r\nFluentMigrator.IMigration, FluentMigrator.Abstractions, Version=6.1.4.0, Culture=neutral, PublicKeyToken=aacfc7de5acabf05\r\n\r\nFluentMigrator.IMigration, FluentMigrator.Abstractions, Version=6.1.4.0, Culture=neutral, PublicKeyToken=aacfc7de5acabf05",
        "createdAt": "2024-10-03T22:07:35Z",
        "updatedAt": "2024-10-03T22:07:35Z",
        "author": {
          "login": "jzabroski"
        }
      },
      {
        "body": "I still can't figure this out.  This is just bizarre.  I see no evidence this shouldn't be working.  I added a DirtyAssemblyResolveHelper to the FluentMigrator.MSBuild project, and it doesn't fix whatever the issue is.\r\n\r\nI can make DirtyAssemblyResolveHelper stateful and inject an ILogger, I suppose, and trace out any redirects to see what is or isn't being handled. (Functionally, this is simpler than assembly fusion logging, as it would only really come into play calling this one task, vs the entire msbuild build chain)",
        "createdAt": "2024-10-04T16:30:09Z",
        "updatedAt": "2024-10-04T16:30:09Z",
        "author": {
          "login": "jzabroski"
        }
      },
      {
        "body": "Thank you @jzabroski for reporting the issue\r\n\r\nCan you help us in focusing the investigation via providing:\r\n* Concrete details of what makes you beleive assembly loading is the problem? Possibly exact error hit within your task?\r\n* If possible a conscise minimal repro. (no DB server etc.)\r\n* If assemblies loading issues are suspect - please provide ETW traces of the assembly loading during your repro. More details on how to collect this: https://learn.microsoft.com/en-us/dotnet/core/dependency-loading/collect-details\r\n\r\nThank you",
        "createdAt": "2024-10-08T14:26:19Z",
        "updatedAt": "2024-10-08T14:26:19Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "This issue is marked as stale because feedback has been requested for 30 days with no response. Please respond within 14 days or this issue will be closed due to inactivity.\n<!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. -->",
        "createdAt": "2024-11-07T17:08:29Z",
        "updatedAt": "2024-11-07T17:08:29Z",
        "author": {
          "login": "dotnet-policy-service[bot]"
        }
      },
      {
        "body": "This issue was closed due to inactivity. If you can still reproduce this bug, please comment with the requested information, detailed steps to reproduce the problem, or any other notes that might help in the investigation.\n<!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. -->",
        "createdAt": "2024-11-22T13:14:40Z",
        "updatedAt": "2024-11-22T13:14:40Z",
        "author": {
          "login": "dotnet-policy-service[bot]"
        }
      }
    ]
  }
}