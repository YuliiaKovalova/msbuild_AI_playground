{
  "number": 890,
  "title": "Allow Import to accept a delimited list of Project files",
  "body": "I'd like to build up a list of project files to import in an ItemList and import them. So, for example, this:\n\n```\n<Import Project=\"Foo.props\" />\n<Import Project=\"Bar.props\" />\n```\n\n would be equivalent to this:\n\n```\n<ItemGroup>\n  <Projects Include=\"Foo.props;Bar.props\"/>\n</ItemGroup>\n<Import Project=\"@(Projects)\" />\n```\n\nSeems a natural construct... \n\nWarm regards,\nChris\n",
  "state": "CLOSED",
  "createdAt": "2016-08-10T22:10:01Z",
  "updatedAt": "2024-02-21T17:26:38Z",
  "closedAt": "2017-05-02T21:28:34Z",
  "author": {
    "login": "kingces95"
  },
  "labels": [
    "Feature Request",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "IMO, this should just accept the glob pattern and remain one item per row. The reason being, Unix allows `;` and `,` as a valid filename characters so choosing those as separator won't be a good idea. Perhaps we can use `:` instead which is a file separator on Unix and drive letter separator on Windows.\n",
        "createdAt": "2016-08-10T22:45:27Z",
        "updatedAt": "2016-08-10T22:45:27Z",
        "author": {
          "login": "ghost"
        }
      },
      {
        "body": "Hm, isn't that a more general problem not specific to this import feature suggestion? If so, seems worthy of it's own issue. Something like \n\n```\nItemGroup support for file names containing commas and\\or semi-colons\n```\n\nThis issue is asking for a way to import multiple files with a single import statement; It's not intending to make any suggestion about how lists of files are declared.\n",
        "createdAt": "2016-08-11T18:23:10Z",
        "updatedAt": "2016-08-11T18:23:10Z",
        "author": {
          "login": "kingces95"
        }
      },
      {
        "body": "Unfortunately, this is almost impossible given MSBuild's evaluation model. `<Import>` works as a textual include\u2014\u201cpretend the contents of that file were in this file at this position\u201d\u2014and the text of the to-be-imported file could contain anything. The evaluation model is:\n1. Start at the top of the entry-point project and proceed downward, evaluating properties in `PropertyGroup`s **and imports** in `Import`s and `ImportGroup`s. When you see an import, detour to the top of that file and recurse\u2014when done, come back to this point.\n2. Start at the top of the now-complete-with-imports in-memory project, and proceed downward, evaluating item definitions in `ItemDefinitionGroups`.\n3. Start at the top of the complete-with-imports in-memory project, and proceed downward, evaluating items in `ItemGroups`.\n4. Start at the top of the complete-with-imports in-memory project, and proceed downward, evaluating `UsingTask`s.\n5. Start at the top of the complete-with-imports in-memory project, and proceed downward, reading (but not executing) targets in `Target`s.\n\nThe reason you can't import using items is that 3 happens after 1\u2014there are no items in the state of the project as we import files.\n\nWe can't just change that, because it's longstanding MSBuild behavior that all properties are fully evaluated before evaluating items, and changing that would break people.\n",
        "createdAt": "2016-08-11T19:22:08Z",
        "updatedAt": "2016-08-11T19:22:08Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald Ah, I see. Thanks for drafting that. \n\nWell, would it be feasible to pass a delimited list of files? For example could this:\n\n```\n<PropertyGroup>\n    <Imports>foo.props;bar.props</Imports>\n</PropertyGroup>\n<Import Project=\"$(Imports)\" />\n```\n\nbe made equivalent to this:\n\n```\n<Import Project=\"Foo.props\" />\n<Import Project=\"Bar.props\" />\n```\n\nwithout breaking anyone?\n",
        "createdAt": "2016-08-11T19:35:04Z",
        "updatedAt": "2016-08-12T04:27:26Z",
        "author": {
          "login": "kingces95"
        }
      }
    ]
  }
}