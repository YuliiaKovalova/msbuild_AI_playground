{
  "number": 10565,
  "title": "[Bug]: Inconsistent behavior of duplicate path separator in property",
  "body": "### Issue Description\r\n\r\nIn another project, I added the following properties at `<solution-dir>/props/MyProject.Paths.props` (for collecting common directories used throughout project files):\r\n```xml\r\n<PropertyGroup>\r\n  <RootPath>$(MSBuildThisFileDirectory)\\..</RootPath> <!-- Property in question. -->\r\n\r\n  <ArtifactsPath>$(RootPath)\\artifacts</ArtifactsPath>\r\n</PropertyGroup>\r\n```\r\nI add the extra path separator in `RootPath` because I find separating `$(MSBuildThisFileDirectory)` and `..` more readable. This, of course, evaluates to `<MSBuildThisFileDirectory>\\\\..`, which works for me on the CLI and from Visual Studio, as well as in the project's CI.\r\n\r\nHowever, the maintainer of the project had asked me to change this property to remove the extra path separator because the solution would not build otherwise:\r\n```\r\nSystem.IO.DirectoryNotFoundException: Could not find a part of the path 'C:\\Users\\<user>\\<solution-dir>\\props\\artifacts\\obj\\MyProject\\debug\\MyProject.exe.withSupportedRuntime.config'.\r\n   at System.IO.__Error.WinIOError(Int32 errorCode, String maybeFullPath)\r\n   at System.IO.FileStream.Init(String path, FileMode mode, FileAccess access, Int32 rights, Boolean useRights, FileShare share, Int32 bufferSize, FileOptions options, SECURITY_ATTRIBUTES secAttrs, String msgPath, Boolean bFromProxy, Boolean useLongPath, Boolean checkHost)\r\n   at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize)\r\n   at System.Xml.XmlDownloadManager.GetStream(Uri uri, ICredentials credentials, IWebProxy proxy, RequestCachePolicy cachePolicy)\r\n   at System.Xml.XmlUrlResolver.GetEntity(Uri absoluteUri, String role, Type ofObjectToReturn)\r\n   at System.Xml.XmlTextReaderImpl.FinishInitUriString()\r\n   at System.Xml.XmlReaderSettings.CreateReader(String inputUri, XmlParserContext inputContext)\r\n   at System.Xml.Linq.XDocument.Load(String uri, LoadOptions options)\r\n   at Microsoft.Build.Tasks.GenerateBindingRedirects.LoadAppConfig(ITaskItem appConfigItem)\r\n   at Microsoft.Build.Tasks.GenerateBindingRedirects.Execute()\r\n   at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute()\r\n   at Microsoft.Build.BackEnd.TaskBuilder.<ExecuteInstantiatedTask>d__26.MoveNext()\tMyProject\tC:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\MSBuild\\Current\\Bin\\amd64\\Microsoft.Common.CurrentVersion.targets\t2509\t\r\n```\r\n\r\nYou can see here, that MSBuild generates an `artifacts` directory inside of the `props` directory. I have to assume this is because `$(RootPath)` evaluates to an empty string, leaving only `\\artifacts` as the `ArtifactsPath` property.\r\n\r\n### Steps to Reproduce\r\n\r\nAs this does work for both me and the CI, I wouldn't know how to reproduce this.\r\n\r\n### Expected Behavior\r\n\r\nThe evaluation of the properties is consistent across machines.\r\n\r\n### Actual Behavior\r\n\r\nIt is not.\r\n\r\nPerhaps interesting, the below does not work either, not for me, nor for the maintainer:\r\n```xml\r\n<RootPath>$([System.IO.Path]::GetDirectoryName($(MSBuildThisFileDirectory)))</RootPath>\r\n```\r\n\r\nDespite the same being used in other `dotnet`-adjacent repositories: https://github.com/dotnet/java-interop/blob/fcad3368815dffd0f38f64384aa21b0b65367d68/Directory.Build.props#L20-L23.\r\n\r\n### Analysis\r\n\r\n_No response_\r\n\r\n### Versions & Configurations\r\n\r\nWorking:\r\n```\r\nmsbuild --version:  MSBuild version 17.11.2+c078802d4 for .NET Framework\r\n                    17.11.2.32701\r\ndotnet --list-sdks: 9.0.100-preview.7.24407.12\r\n```\r\nNot working:\r\n```\r\nmsbuild --version:  MSBuild version 17.9.8+b34f75857 for .NET Framework\r\n                    17.9.8.16306\r\ndotnet --list-sdks: 8.0.202\r\n```",
  "state": "CLOSED",
  "createdAt": "2024-08-26T00:29:20Z",
  "updatedAt": "2024-10-09T08:10:28Z",
  "closedAt": "2024-10-09T08:10:26Z",
  "author": {
    "login": "just-ero"
  },
  "labels": [
    "bug",
    "needs-investigation",
    "author-responded"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "GangWang01"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "@just-ero I followed your description and created a sample solution trying to reproduce the issue. Unfortunately, I couldn't reproduce it using dotnet 8.0.202 or msbuild.exe 17.9.8, neither the static property function problem `<RootPath>$([System.IO.Path]::GetDirectoryName($(MSBuildThisFileDirectory)))</RootPath>`. \r\n[SampleProjectAndBinaryLog.zip](https://github.com/user-attachments/files/16990998/SampleProjectAndBinaryLog.zip) has the sample solution and build binary log with the name indicating it's built with dotnet cli or msbuild.exe.\r\n\r\nCan you provide a sample solution and steps to reproduce if you could reproduce, as well as [build binary log](https://github.com/dotnet/msbuild/blob/main/documentation/wiki/Providing-Binary-Logs.md) for the investigation? Be aware that binary log might capture sensitive info and be careful before sharing.\r\n\r\n",
        "createdAt": "2024-09-13T08:48:42Z",
        "updatedAt": "2024-09-13T08:48:42Z",
        "author": {
          "login": "GangWang01"
        }
      },
      {
        "body": "Hi, thanks for getting back on this.  \r\n`<RootPath>$([System.IO.Path]::GetDirectoryName($(MSBuildThisFileDirectory)))</RootPath>` still fails for me, placing the artifacts in `props/artifacts`.\r\n\r\nI've created a sample solution at [`just-ero/ParentDirectoryRepro`](https://github.com/just-ero/ParentDirectoryRepro). It includes a binlog in the root of the repository.",
        "createdAt": "2024-09-13T09:10:16Z",
        "updatedAt": "2024-09-13T09:10:16Z",
        "author": {
          "login": "just-ero"
        }
      },
      {
        "body": "I see now that I must not have been clear in my original issue when it comes to `GetDirectoryName`. I thought that method would return the path of the directory above. A simple console app with this code made me believe that:\r\n```cs\r\nConsole.WriteLine(Path.GetDirectoryName(@\"C:\\Some\\Path\"));\r\n```\r\n```\r\nC:\\Some\r\n```",
        "createdAt": "2024-09-13T09:24:02Z",
        "updatedAt": "2024-09-13T09:24:10Z",
        "author": {
          "login": "just-ero"
        }
      },
      {
        "body": "@just-ero \r\nThe method `System.IO.Path.GetDirectoryName` returns different the directories for the pathes below referring to [Example](https://learn.microsoft.com/en-us/dotnet/api/system.io.path.getdirectoryname?view=net-8.0#definition:~:text=GetDirectoryName(%27C%3A%5CMyDir%5C%27)%20returns%20%27C%3A%5CMyDir%27%0AGetDirectoryName(%27C%3A%5CMyDir%27)%20returns%20%27C%3A%5C%27) though they looks similar.\r\n- `C:\\Some\\Path` -> `C:\\Some`\r\n- `C:\\Some\\Path\\` -> `C:\\Some\\Path`\r\n\r\nMSBuild property [MSBuildThisFileDirectory](https://learn.microsoft.com/en-us/visualstudio/msbuild/msbuild-reserved-and-well-known-properties?view=vs-2022#:~:text=MSBuildThisFileDirectory) includes the final backslash in the path. It's the reason that `<RootPath>$([System.IO.Path]::GetDirectoryName($(MSBuildThisFileDirectory)))</RootPath>` is still the directory of the props file `ParentDirectoryRepro.Paths.props`, rather than its parent directory.",
        "createdAt": "2024-09-19T02:52:35Z",
        "updatedAt": "2024-09-19T02:52:35Z",
        "author": {
          "login": "GangWang01"
        }
      },
      {
        "body": "I see.  \r\nThe maintainer for whom it didn't work unfortunately already updated their Visual Studio version and the extra path separator (`$(MSBuildThisFileDirectory)\\..`) now works. Unfortunately that means I don't have any binlogs.  \r\nFeel free to close.",
        "createdAt": "2024-09-20T16:34:39Z",
        "updatedAt": "2024-09-20T16:34:39Z",
        "author": {
          "login": "just-ero"
        }
      },
      {
        "body": "Closed as it's not a real issue. Feel free to re-open if you have any questions/concerns.",
        "createdAt": "2024-10-09T08:10:26Z",
        "updatedAt": "2024-10-09T08:10:26Z",
        "author": {
          "login": "GangWang01"
        }
      }
    ]
  }
}