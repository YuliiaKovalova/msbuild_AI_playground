{
  "number": 4150,
  "title": "'$(MSBuildToolsVersion)' should compare as a version or number",
  "body": "See concerns/ideas in https://github.com/Microsoft/msbuild/issues/3778#issuecomment-441779192 and https://github.com/Microsoft/msbuild/issues/3778#issuecomment-457799037\r\n\r\nNow that `$(MSBuildToolsVersion)` is `Current`, user projects or extensions that condition against it are likely to be broken, with an error like\r\n\r\n```\r\nA numeric comparison was attempted on \"$(MSBuildToolsVersion)\" that evaluates to \"Current\" instead of a number, in condition \" '$(MSBuildToolsVersion)' == '' OR '$(MSBuildToolsVersion)' < '4.0' \".\r\n```",
  "state": "CLOSED",
  "createdAt": "2019-02-06T23:30:39Z",
  "updatedAt": "2024-02-21T17:09:22Z",
  "closedAt": "2019-02-08T18:42:26Z",
  "author": {
    "login": "rainersigwald"
  },
  "labels": [
    "Area: Engine",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "MSBuild 16.0"
  },
  "comments": {
    "nodes": [
      {
        "body": "cc interested parties from #3778 -- @rseanhall and @ericstj.\r\n\r\nWhile it's a bit odd to have a special-case in a numeric comparison for the string `Current`, I agree that it's probably less bad than the current errors, and unlikely to break someone (you'd have to be _depending_ on `'Current' > '3.0'` throwing an invalid-project exception).",
        "createdAt": "2019-02-06T23:35:02Z",
        "updatedAt": "2019-02-06T23:35:02Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Thanks. The main thing WiX needs is for the condition `\" '$(MSBuildToolsVersion)' == '' OR '$(MSBuildToolsVersion)' < '4.0' \"` to evaluate to false. It would be nice if you replace it with `$(VisualStudioVersion)` like you are considering doing for https://github.com/Microsoft/msbuild/issues/4149.",
        "createdAt": "2019-02-07T00:00:49Z",
        "updatedAt": "2019-02-07T00:00:49Z",
        "author": {
          "login": "rseanhall"
        }
      },
      {
        "body": "> It would be nice if you replace it with `$(VisualStudioVersion)` like you are considering doing for #4149.\r\n\r\nThat's . . . a really interesting idea. I think there are 3 options and I now like that one best:\r\n\r\n1. In the context of a numeric comparison, treat the string `Current` as the hard-coded VisualStudioVersion.\r\n1. In the context of a numeric comparison, treat the string `Current` as +\u221e.\r\n1. In the context of a numeric comparison, treat the string `Current` as `15.0` (last time it was set to such a value).\r\n\r\nAnyone have a different preference?",
        "createdAt": "2019-02-07T00:09:26Z",
        "updatedAt": "2019-02-07T00:09:26Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I have no real preference as any one of those three should \"unbreak\" the WiX Toolset. So consider this just a :+1: for the fix in 16.0. :smiley: ",
        "createdAt": "2019-02-07T00:14:34Z",
        "updatedAt": "2019-02-07T00:16:16Z",
        "author": {
          "login": "robmen"
        }
      },
      {
        "body": "I think I like (1) best.\r\n\r\nBut to be sure, how/where is  VisualStudioVersion maintained?\r\n\r\n\r\n\r\n",
        "createdAt": "2019-02-07T00:15:10Z",
        "updatedAt": "2019-02-07T00:15:10Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "So literally 'Current' == '16.0' will be true. Or only '$(MSBuildToolsVersion)' == '16.0' ?",
        "createdAt": "2019-02-07T00:26:59Z",
        "updatedAt": "2019-02-07T00:26:59Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "Is this too breaky to insist that people switch to comparing `VisualStudioVersion` or `MSBuildAssemblyVersion`?  Obviously if the impact is tremendous, I'd vote to make it work.  But if we can get away with it, I'd rather migrate people to a different property since the concept of \"tools version\" was deprecated in 15.0.",
        "createdAt": "2019-02-07T01:23:41Z",
        "updatedAt": "2019-02-07T01:23:41Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "We've actually removed the use of `MSBuildToolsVersion` in the next version of the WiX Toolset. The problem is there are *lots* of existing users that have the \"old\" targets that are designed to work with both MSBuild 3.5 and MSBuild 4.0. The `Current` change breaks all of our existing users.",
        "createdAt": "2019-02-07T02:21:13Z",
        "updatedAt": "2019-02-07T02:21:13Z",
        "author": {
          "login": "robmen"
        }
      },
      {
        "body": "> But to be sure, how/where is VisualStudioVersion maintained?\r\n\r\nIt changes once/VS version, and is defined here:\r\n\r\nhttps://github.com/Microsoft/msbuild/blob/e03296fe14152b4c84e6610d2fd2fd10f1ecba82/src/Shared/Constants.cs#L59-L62\r\n\r\n> So literally 'Current' == '16.0' will be true. Or only '$(MSBuildToolsVersion)' == '16.0' ?\r\n\r\nConveniently, it looks like enough state is passed down that I can do the latter. Which makes me feel better about the whole thing.\r\n\r\n> Is this too breaky to insist that people switch to comparing `VisualStudioVersion` or `MSBuildAssemblyVersion`?\r\n\r\nI think so based on the feedback we've gotten from the limited preview users so far, including WiX here. Especially with the scoping to only the right variable expansion, this is a cheap compat shim for a real problem and I think it's worth doing.",
        "createdAt": "2019-02-07T19:41:15Z",
        "updatedAt": "2019-02-07T19:41:15Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "What version of the VS 2019 preview will this show up in?  For example I just updated to preview 2.2.  ",
        "createdAt": "2019-02-09T02:12:54Z",
        "updatedAt": "2019-02-09T02:12:54Z",
        "author": {
          "login": "chrpai"
        }
      },
      {
        "body": "@chrpai preview 4, which is not yet released (it's not in preview 3 which came out today).",
        "createdAt": "2019-02-13T23:46:02Z",
        "updatedAt": "2019-02-13T23:46:02Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald  Thank you very much!",
        "createdAt": "2019-02-14T00:19:26Z",
        "updatedAt": "2019-02-14T00:19:26Z",
        "author": {
          "login": "chrpai"
        }
      },
      {
        "body": "In the meantime, is there a workaround? We're using Wix 3.11 in https://github.com/aspnet/AspNetCore, and this is one of the last issues preventing us from upgrading to VS2019. I tried overriding MSBuildToolsVersion, but it's reserved property. And based on the way wix.targets is written, I don't think I can avoid evaluation of code that compares MSBuildToolsVersion\r\n\r\n```\r\nerror MSB4004: The \"MSBuildToolsVersion\" property is reserved, and cannot be modified.\r\n```",
        "createdAt": "2019-02-14T01:50:37Z",
        "updatedAt": "2019-02-14T01:50:37Z",
        "author": {
          "login": "natemcmaster"
        }
      },
      {
        "body": "@natemcmaster  email me and I can give you information on a work around.",
        "createdAt": "2019-02-14T01:58:29Z",
        "updatedAt": "2019-02-14T01:58:29Z",
        "author": {
          "login": "chrpai"
        }
      },
      {
        "body": "Actually, I think I found a simple workaround for aspnet. It seems the only usage of MSBuildToolsVersion is in `$(WixInstallPath)\\wix.targets`. It's using MSBuildToolsVersion to determine if it needs to import targets for MSBuild 2.0 - 3.5. I can avoid the troublesome evaluation by importing `$(WixInstallPath)\\wix2010.targets` instead since I know my repo definitely has MSBuild > 4.",
        "createdAt": "2019-02-14T02:44:03Z",
        "updatedAt": "2019-02-14T02:44:03Z",
        "author": {
          "login": "natemcmaster"
        }
      }
    ]
  }
}