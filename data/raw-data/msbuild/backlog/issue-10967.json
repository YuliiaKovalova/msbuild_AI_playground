{
  "number": 10967,
  "title": "Build Error in Visual Studio when Overriding `TargetFramework` in Projects while Using `Directory.Build.props`",
  "body": "### Issue Description\n\nI'm encountering a build error in Visual Studio when using a `Directory.Build.props` file to set the `<TargetFramework>` for my solution, and then override it in specific multitargeted projects.\n\n**Setup:**\n\n- **`Directory.Build.props` at the solution root:**\n\n  ```xml\n  <Project>\n    <PropertyGroup>\n      <TargetFramework>net8.0</TargetFramework>\n      <!-- Other common properties -->\n    </PropertyGroup>\n  </Project>\n  ```\n\n- **Projects in the solution:**\n\n  - Multiple projects inherit from `Directory.Build.props` and target `net8.0`.\n  - Three specific projects (`ProjectA`, `ProjectB`, `ProjectC`) must target multiple frameworks. In their individual `.csproj` files, they override the `TargetFramework` with `TargetFrameworks`:\n\n    ```xml\n    <Project Sdk=\"Microsoft.NET.Sdk\">\n      <PropertyGroup>\n        <TargetFrameworks>netstandard2.0;netstandard2.1;net8.0</TargetFrameworks>\n        <!-- Other project-specific properties -->\n      </PropertyGroup>\n    </Project>\n    ```\n\n**Issue:**\n\n- **Building with Rider and CI Pipelines:**\n\n  - Using Rider (with build tool at `C:\\Program Files\\dotnet\\sdk\\8.0.403\\MSBuild.dll`), the solution builds successfully.\n  - Our CI pipelines also build the solution without issues.\n\n- **Building with Visual Studio 2022 (Up-to-Date):**\n\n  - The build fails with the following error:\n\n    ```\n    Severity    Code    Description    Project          File                                                                         Line    Suppression State\n    Error       -       Project '..\\ProjectC\\ProjectC.csproj' targets 'net8.0'. It cannot be referenced by a project that targets '.NETStandard,Version=v2.0'.    ProjectB (netstandard2.0)    C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\MSBuild\\Current\\Bin\\amd64\\Microsoft.Common.CurrentVersion.targets    1890\n    ```\n\n- **Workaround:**\n\n  - If I remove the `<TargetFramework>` from `Directory.Build.props` and specify it individually in each `.csproj` file, the solution builds successfully in Visual Studio.\n\n**Additional Information:**\n\n- **Environment:**\n\n  - **Visual Studio Version:** Visual Studio 2022 (Up-to-Date)\n  - **.NET SDK Version:** 8.0.403\n  - **MSBuild Path in Rider:** `C:\\Program Files\\dotnet\\sdk\\8.0.403\\MSBuild.dll`\n\n- **What Works:**\n\n  - Building the solution using Rider and our CI pipelines works without issues.\n  - Removing the `<TargetFramework>` from `Directory.Build.props` and specifying it in each `.csproj` allows Visual Studio to build successfully.\n\n### Steps to Reproduce\n\n\n1. **Create a Solution with Multiple Projects:**\n\n   - Some projects will inherit `TargetFramework` from `Directory.Build.props`.\n   - Three projects (`ProjectA`, `ProjectB`, `ProjectC`) will override `TargetFramework` with `TargetFrameworks` in their `.csproj` files.\n\n2. **Set Up `Directory.Build.props`:**\n\n   - Place a `Directory.Build.props` file at the solution root with the following content:\n\n     ```xml\n     <Project>\n       <PropertyGroup>\n         <TargetFramework>net8.0</TargetFramework>\n         <!-- Other common properties -->\n       </PropertyGroup>\n     </Project>\n     ```\n\n3. **Configure the Multitargeted Projects:**\n\n   - In the `.csproj` files for `ProjectA`, `ProjectB`, and `ProjectC`, include:\n\n     ```xml\n     <Project Sdk=\"Microsoft.NET.Sdk\">\n       <PropertyGroup>\n         <TargetFrameworks>netstandard2.0;netstandard2.1;net8.0</TargetFrameworks>\n         <!-- Other project-specific properties -->\n       </PropertyGroup>\n     </Project>\n     ```\n\n4. **Build the Solution in Visual Studio 2022:**\n\n   - Attempt to build the solution.\n\n### Expected Behavior\n\nThe solution builds successfully, respecting the overridden `TargetFrameworks` in the specified projects.\n\n### Actual Behavior\n\nVisual Studio reports a build error stating that a project targeting `net8.0` cannot be referenced by a project that targets `.NETStandard,Version=v2.0`.\n\n**Error Details:**\n\n```\nSeverity    Code    Description    Project          File                                                                         Line    Suppression State\nError       -       Project '..\\ProjectC\\ProjectC.csproj' targets 'net8.0'. It cannot be referenced by a project that targets '.NETStandard,Version=v2.0'.    ProjectB (netstandard2.0)    C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\MSBuild\\Current\\Bin\\amd64\\Microsoft.Common.CurrentVersion.targets    1890\n\n### Ask us questions\n\n- Is this behavior expected in Visual Studio when using `Directory.Build.props` to set `TargetFramework`, and then overriding it in individual projects with `TargetFrameworks`?\n- Are there any known issues or workarounds to resolve this build error in Visual Studio?",
  "state": "CLOSED",
  "createdAt": "2024-11-11T15:34:53Z",
  "updatedAt": "2024-11-19T15:55:38Z",
  "closedAt": "2024-11-19T15:55:37Z",
  "author": {
    "login": "konarx"
  },
  "labels": [],
  "assignees": {
    "nodes": [
      {
        "login": "maridematte"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "**Update:**\n\nI discovered a workaround for the issue by modifying the `Directory.Build.props` file. Instead of using the singular `<TargetFramework>`, I switched to using the plural `<TargetFrameworks>`, even when targeting only a single framework (`net8.0`). This change allows the individual project files to properly override the target frameworks without causing conflicts in Visual Studio.\n\n**Updated `Directory.Build.props`:**\n\n```xml\n<Project>\n  <PropertyGroup>\n    <!-- Suppress MsbuildTargetFrameworkTagInspection -->\n    <TargetFrameworks>net8.0</TargetFrameworks>\n    <!-- Other common properties -->\n  </PropertyGroup>\n  <!-- Additional configurations -->\n</Project>\n```\n\n**Explanation:**\n\n- By using `<TargetFrameworks>` in `Directory.Build.props`, the multitargeted projects can override this property in their `.csproj` files with their own `<TargetFrameworks>` definitions (e.g., `netstandard2.0;netstandard2.1;net8.0`).\n- This change prevents the conflict that was occurring between `<TargetFramework>` and `<TargetFrameworks>`, which Visual Studio seemed unable to resolve correctly.\n- The `<!-- Suppress MsbuildTargetFrameworkTagInspection -->` comment is used to suppress any inspection warnings about using `<TargetFrameworks>` with a single target.\n\n**Result:**\n\n- After making this change, the solution builds successfully in Visual Studio, Rider, and our CI pipelines.\n- Projects that target only `net8.0` inherit the default `<TargetFrameworks>` from `Directory.Build.props` without issues.\n- Multitargeted projects correctly override the property with their specific target frameworks.\n\n**Conclusion:**\n\n- While this workaround resolves the immediate build error, it would be helpful to understand why Visual Studio cannot handle the override from `<TargetFramework>` to `<TargetFrameworks>` when defined in `Directory.Build.props`.\n- Any insights or guidance on this behavior would be appreciated.",
        "createdAt": "2024-11-11T16:41:39Z",
        "updatedAt": "2024-11-11T16:41:39Z",
        "author": {
          "login": "konarx"
        }
      },
      {
        "body": "Thank you for filling this issue. It seems you have found a workaround, but your original solution might work if you leave `TargetFramework` as an empty target in the project that does not include the default framework you have set in `Directory.Build.props`.  So your project file that needs to to overwrite the frameworks might look like\n\n```\n<Project Sdk=\"Microsoft.NET.Sdk\">\n\t<PropertyGroup>\n\t\t<TargetFramework></TargetFramework>\n\t\t<TargetFrameworks>netstandard2.0;netstandard2.1;</TargetFrameworks>\n\t\t<!-- Other project-specific properties -->\n\t</PropertyGroup>\n</Project>\n```\n\nLet me know if that works in your case.\n\nAs for the overriding difference, in the surface it might look like those two (`TargetFramework` and `TargetFrameworks`) function almost the same, but that is not the case. `TargetFrameworks` - plural, will create one extra build to coordinate all the necessary frameworks for that project. It will create individual projects that are almost exactly the same with the only difference being the `TargetFramework` - singular, for every framework on the list. It already has an overriding aspect to it, but it will slow down your build as there is some overhead.",
        "createdAt": "2024-11-18T13:40:20Z",
        "updatedAt": "2024-11-18T13:40:20Z",
        "author": {
          "login": "maridematte"
        }
      },
      {
        "body": "Thank you for the suggestion, @maridematte .\nYes, your workaround does fix the issue. However, this behavior is still inconsistent and should be addressed.\n\nThe key point here is that if a project does not explicitly define a `<TargetFramework>` but inherits one from the parent, MSBuild should still correctly evaluate `<TargetFrameworks>` if it is defined.\nAs a user, I expect the same behavior whether `<TargetFramework>` is omitted entirely or is defined as empty (`<TargetFramework></TargetFramework>`). \n\nCurrently, the need to explicitly set `<TargetFramework></TargetFramework>` feels unintuitive and error-prone. Users may not realize this subtle requirement, especially when transitioning projects to multi-targeting (`<TargetFrameworks>`). This behavior creates confusion and unnecessary workarounds, which detracts from the overall developer experience.\n\n### Request:\nI want to propose that MSBuild/Visual Studio be updated to:\n1. Treat the absence of `<TargetFramework>` in a project file the same as when it is explicitly set to an empty value.\n2. Evaluate `<TargetFrameworks>` if defined, regardless of whether `<TargetFramework>` is inherited or empty.\n\nThis adjustment would make the behavior more predictable and intuitive while aligning with the principle of least surprise for developers.",
        "createdAt": "2024-11-19T08:46:48Z",
        "updatedAt": "2024-11-19T08:46:48Z",
        "author": {
          "login": "konarx"
        }
      },
      {
        "body": "We understand that this behaviour is not great (we also run into it every once in a while). But it is not a change that we can make, as it has the potential to break a lot of builds and introduce a variety of new bugs. ",
        "createdAt": "2024-11-19T15:55:37Z",
        "updatedAt": "2024-11-19T15:55:37Z",
        "author": {
          "login": "maridematte"
        }
      }
    ]
  }
}