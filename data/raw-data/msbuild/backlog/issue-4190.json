{
  "number": 4190,
  "title": "Custom msbuild sdk results in \"Package restore was successful but a package with the ID of \"xyz\" was not installed\"",
  "body": "### Steps to reproduce\r\n\r\nI am trying to build a custom msbuild sdk, and have published this successfully to a TFS 2018Update3 PackageManagement feed.\r\n\r\nHowever I run into the issue that upon first time use of a new version of this sdk I get a \"Package restore was successful but a package with the ID of \"xxx\" was not installed\" error.\r\n\r\nI can confirm that the NuGetSDKResolver has downloaded the nuget correctly and placed it in the global nuget cache with the correct version.\r\n\r\nIf I run the test project through msbuild a second time it succeeds to import sdk.props/targets from the custom sdk.\r\n\r\nI have also tried the same with a simple example and \"Microsoft.Build.CentralPackageVersions\" and this always goes ok on the first try (so I can not replicate the issue with that NuGet sdk).\r\n\r\nI have tried comparing contents of these Sdks (and nuget spec files) to see if I can understand why it is going wrong, but I cannot figure out what the exact cause is.\r\n\r\nAny information on how to further analysis & fix this issue?\r\n\r\nProject file sample2.proj goes wrong (with custom SDK)\r\n```<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <Sdk Name=\"xyz\" Version=\"0.3.32-gb626b61888\"/>\r\n  <PropertyGroup>\r\n    <TargetFramework>netstandard2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Newtonsoft.Json\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nProject sample.proj goes ok (with Microsoft.Build.CentralPackageVersions)\r\n```<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <Sdk Name=\"Microsoft.Build.CentralPackageVersions\" Version=\"2.0.1\" />\r\n  \r\n  <PropertyGroup>\r\n    <TargetFramework>netstandard2.0</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Newtonsoft.Json\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe custom SDK has the following relevant MSBuild information in the nuspec:\r\n```\r\n<tags>MSBuild MSBuildSdk</tags>\r\n<packageTypes>\r\n      <packageType name=\"MSBuildSdk\" />\r\n</packageTypes>\r\n```\r\n\r\n### Environment data\r\n`msbuild /version` output:\r\nMicrosoft (R) Build Engine version 15.8.166+gd4e8d81a88 for .NET Framework\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n15.8.166.59604\r\n\r\nOS info:\r\nWindows 10 1703 (15063.1387)",
  "state": "CLOSED",
  "createdAt": "2019-02-20T15:16:42Z",
  "updatedAt": "2024-02-21T17:09:07Z",
  "closedAt": "2019-02-20T16:46:23Z",
  "author": {
    "login": "japj"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "After restore, the SDK resolver looks for your SDK based on the restore results:\r\n\r\nhttps://github.com/NuGet/NuGet.Client/blob/dev/src/NuGet.Core/Microsoft.Build.NuGetSdkResolver/NuGetSdkResolver.cs#L150\r\n\r\nIs the version and ID of the package exactly the same?  Maybe the case is different?  Can you attach a NUPKG of an SDK that doesn't work?",
        "createdAt": "2019-02-20T15:57:13Z",
        "updatedAt": "2019-02-20T15:57:13Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "Yes indeed, casing is the issue here.\r\n\r\nI can reproduce the problem by:\r\n- remove C:\\Users\\japj\\.nuget\\packages\\microsoft.build.centralpackageversions\r\n- run msbuild test.proj with the following content in test.proj:\r\n```\r\n<Project>\r\n  <Sdk Name=\"Microsoft.Build.CENTRALPACKAGEVERSIONS\" Version=\"2.0.1\" />\r\n</Project>\r\n```\r\n\r\nThanks for the quick pointer, not sure if there is still an issue that needs to be solved though.\r\nI would have expected it to either \"always fail\" or \"always succeed\".\r\nNow it fails the first time, but succeeds after it has previously been downloaded and you run it the 2nd time.",
        "createdAt": "2019-02-20T16:32:01Z",
        "updatedAt": "2019-02-20T16:32:01Z",
        "author": {
          "login": "japj"
        }
      },
      {
        "body": "I think it succeeds the second time because its already downloaded and there's different logic for [locating an on disk package](https://github.com/NuGet/NuGet.Client/blob/dev/src/NuGet.Core/Microsoft.Build.NuGetSdkResolver/NuGetSdkResolver.cs#L205) versus one that was just fetched.\r\n\r\nI think the fix is to just add a `StringComparison` to that `Equals()` call so that its not case sensitive.  I'm going to move this issue to the NuGet repo since thats where the NuGetSdkResolver lives now.\r\n\r\nThanks for reporting this!",
        "createdAt": "2019-02-20T16:42:45Z",
        "updatedAt": "2019-02-20T16:42:45Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "This issue was moved to NuGet/Home#7817",
        "createdAt": "2019-02-20T16:45:29Z",
        "updatedAt": "2019-02-20T16:45:29Z",
        "author": {
          "login": "jeffkl"
        }
      }
    ]
  }
}