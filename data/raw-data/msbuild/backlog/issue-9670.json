{
  "number": 9670,
  "title": "[Bug]: Build with references fails if absolute path contains a symlink",
  "body": "### Issue Description\r\n\r\nA project containing references will fail to build/find reference assemblies if built using relative paths first.\r\n\r\n\r\n### Steps to Reproduce\r\n\r\n\r\n\r\nAttached minimal sample [dotnet-project.zip](https://github.com/dotnet/msbuild/files/13998267/dotnet-project.zip) contains two projects -- `main` referencing `lib`.  The error is reproducible whenever path to filesystem root contains a symlink:\r\n```\r\n#!/bin/sh\r\ncd ~ && mkdir my-projects && cd my-projects\r\n\r\n# either \r\n# unzip ~/dotnet-project.zip \r\n# or\r\nmkdir dotnet-project && cd dotnet-project\r\ndotnet new console -o main\r\ndotnet new classlib -o lib\r\ndotnet add main reference lib\r\n\r\ncd ~ && ln -s my-projects/dotnet-project . && cd dotnet-project\r\n\r\ndotnet build main/main.csproj\r\ndotnet build `pwd`/main/main.csproj\r\n```\r\n\r\n### Expected Behavior\r\n\r\nSecond invocation of `dotnet build` should succeed.\r\n\r\n### Actual Behavior\r\n\r\nSecond build above fails with following message:\r\n```\r\nCSC : error CS0006: Metadata file '/home/user/dotnet-project/lib/obj/Debug/net6.0/ref/lib.dll' could not be found [/home/user/dotnet-project/main/main.csproj]\r\n```\r\nSecond invocation will succeed though.\r\n\r\nWhile inconvenient in general this also breaks C# tooling in VS Code (I cannot compile/run/debug tests whenever a path to a project contains a symlink).\r\n\r\n### Analysis\r\n\r\nFor what it's worth, with the failed build above, the `lib/obj/Debug/net6.0/ref/lib.dll` is the only one not being created -- both `lib/obj/Debug/net6.0/refint/lib.dll` `lib/bin/Debug/net6.0/lib.dll` are still being built successfully.\r\n\r\n### Versions & Configurations\r\n\r\n```\r\n$ DOTNET_CLI_UI_LANGUAGE=en dotnet msbuild -version\r\nMSBuild version 17.8.3+195e7f5a3 for .NET\r\n17.8.3.51904%\r\n\r\n$ echo $SHELL\r\n/bin/zsh\r\n\r\n$ /bin/zsh --version\r\nzsh 5.9 (x86_64-unknown-linux-gnu)\r\n```",
  "state": "OPEN",
  "createdAt": "2024-01-20T15:07:19Z",
  "updatedAt": "2024-10-10T16:01:15Z",
  "closedAt": null,
  "author": {
    "login": "next-mad-hatter"
  },
  "labels": [
    "bug",
    "needs-design",
    "Priority:3",
    "triaged",
    "symlink"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Hello @next-mad-hatter, thank you for raising the issue! \r\nInitial look at the repro logs: \r\nThe file lib.csproj.FileListAbsolute.txt does not contain the ref/lib.dll line when invoked with `pwd` (even if it was produced), however presents in file when invoked using relative path. \r\nThis results the IncrementalClean to delete the 'outdated and not needed file'. when invoked second time since the file is not stored in the FileListAbsolute therefore it is not removed from IncrementalClean step and build succeeds \r\nSo the next steps to understand why it is not reported.",
        "createdAt": "2024-02-08T10:26:30Z",
        "updatedAt": "2024-02-08T10:26:30Z",
        "author": {
          "login": "f-alizada"
        }
      },
      {
        "body": "`    <!-- Find all files in the intermediate output directory. -->\r\n    <FindUnderPath Path=\"$(IntermediateOutputPath)\" Files=\"@(FileWrites)\" UpdateToAbsolutePaths=\"true\">\r\n      <Output TaskParameter=\"InPath\" ItemName=\"_CleanCurrentFileWritesInIntermediate\"/>\r\n    </FindUnderPath>`\r\nIn case the FileWrites list contains the item with absolute path which has symblink it is not being considered under  IntermediateOutputPath. however both of paths logically correct and are the same. ",
        "createdAt": "2024-02-08T12:35:01Z",
        "updatedAt": "2024-02-08T12:35:01Z",
        "author": {
          "login": "f-alizada"
        }
      },
      {
        "body": "In summary: \r\n\r\n-  TargetRefPath is generated and contains the link with symlink in it\r\n-  One of the steps of IncrementalClean is to remove the not needed files from previous build\r\n- While searching /something1/something2/symlink-to-something3/file.dll under the directory  /something1/something2/something-3/file.dll fails to find it based on the logic of comparing . (both links are to the same file one contains symlink another not)\r\n-  Therefore reports file.dll as to be deleted \r\n\r\nWhen invoked second time this does not happen, since the lib.dll is copied to output directory but not reported in files to be deleted results green build. \r\n\r\nHaving that there is a workarounds like running the command with the full path to project , or rerunning the command  @next-mad-hatter please correct me if it is not the case. \r\nA solution to the bug itself that I was thinking is to update the logic of FindUnderPath task to respect the symlinks while comparing the file's directories.  Unless there is a much simplier way to fix that. @rainersigwald could you please take a look on the investigation results and let me know if there anything else could be done in this scenario? :) \r\n",
        "createdAt": "2024-02-08T16:53:34Z",
        "updatedAt": "2024-02-08T16:53:34Z",
        "author": {
          "login": "f-alizada"
        }
      },
      {
        "body": "@f-alizada Thank you for looking into this.\r\n\r\nYes, running the failed command succeeds on second attempt.  Unfortunately, this does not work with the c#-dev-kit toolchain (I have not looked into that further though).\r\n\r\nAnd yes, using the hard path will work -- if one knows that this bug exists.",
        "createdAt": "2024-02-08T19:12:23Z",
        "updatedAt": "2024-02-08T19:12:23Z",
        "author": {
          "login": "next-mad-hatter"
        }
      },
      {
        "body": "Took a second look at the problem. \r\nThe Solution provided in previous investigation will result performance issues in future (thank you @rainersigwald ), So capturing the path where the flow breaks: \r\n\r\nRefLibFullDLL = /home/user/my-projects/dotnet-project/lib/obj/Debug/net6.0/ref/lib.dll(without symlink)\r\nRefLibDLL = /home/user/dotnet-project/lib/obj/Debug/net6.0/ref/lib.dll  (with symlink)\r\nFileWrites =[];\r\n\r\nThe TargetRefPath when project file provided as a full path will be left untouched. \r\n    TargetRefPath = RefLibDLL \r\n\r\nTarget CopyFilesToOutputDirectory\r\n    Task CopyRefAssembly populates the Items FileWrites after copying \r\n        FileWrites + RefDLL = [...,RefDLL,...]\r\n\r\nFlow of refFullLibDll and RefLibDLL in IncrementalClean flow:\r\n_CleanPriorFileWrites = [..., RefLibFullDLL, ...]\r\n_CleanCurrentFileWritesInIntermediate = [...,RefLibDLL,... ]\r\n_CleanCurrentFileWritesWithNoReferences = _CleanCurrentFileWritesInIntermediate + [...] = [...,RefLibDLL,... ]\r\n_CleanCurrentFileWrites = RemoveDuplicates(_CleanCurrentFileWritesWithNoReferences) = [...,RefLibDLL,... ]\r\n_CleanOrphanFileWrites = _CleanPriorFileWrites - _CleanCurrentFileWrites = [..., RefLibFullDLL,...]\r\n_CleanOrphanFileWritesInOutput = FindUnderPath(\"obj/Debug/net6.0/\",  _CleanOrphanFileWrites) = [..., RefLibFullDLL,...]\r\nDelete(Files= _CleanOrphanFileWritesInOutput) -> deletes RefLibFullDLL\r\nHowever the RefLibFullDll == RefLibDLL. \r\n\r\n\r\n@baronfel FYI regarding the c#-dev-kit just in case. \r\n\r\n",
        "createdAt": "2024-02-13T10:55:28Z",
        "updatedAt": "2024-02-13T16:08:52Z",
        "author": {
          "login": "f-alizada"
        }
      },
      {
        "body": "Did some research on possible solutions. \r\n1 - Common fix: We can change the way how do we determine the TargetRefPath -> which may result changes into the flow of fetching msbuildproject directory  => to follow the symlink and save only target folder. \r\n2 - Local fix would be to apply common fix (1) to the CopyRefAssembly output, and get full path of the outputed file. \r\n\r\nAt this point the feature needs design before moving forward: To consider all possible outcomes and investigations on this topic. ",
        "createdAt": "2024-02-15T10:05:23Z",
        "updatedAt": "2024-02-15T10:05:23Z",
        "author": {
          "login": "f-alizada"
        }
      },
      {
        "body": "Update based on the discussion and investigations: \r\nCurrently the issue's priority is low since there is a workaround for the particular problem (for example rerun the build, or calling msbuild with the same path with or without symlink) . \r\nAs an action that was done: the symlink label was created and assigned to the issues concerning [symlink](https://github.com/dotnet/msbuild/labels/symlink) topic. \r\nThe outcome of the addressing the issue by applying local fix for a specific problem brings risk introducing breaking changes. Unless there is a much simpler fix or the priority is higher , we'll need to prepare the design for the fix which will be taking into the account existing functionality. ",
        "createdAt": "2024-02-26T13:28:59Z",
        "updatedAt": "2024-02-26T13:29:59Z",
        "author": {
          "login": "f-alizada"
        }
      }
    ]
  }
}