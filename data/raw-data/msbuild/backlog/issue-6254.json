{
  "number": 6254,
  "title": "Make sure that MSBuild.dll is hostable",
  "body": "Part of .NET 6.0 user story #5866\r\n\r\nTo load MSBuild directly into the CLI process we'll need to assembly-load MSBuild.dll and invoke its `Main` method via reflection. This issue is tracking the effort to:\r\n- Verify that the above is doable, i.e. the command line is always passed as `Main` parameters.\r\n- Introduce a hosting interface or another entry-point if `Main` is not enough.\r\n \r\nThis work is scoped only to the .NET Core version of MSBuild.\r\n\r\nAcceptance criteria: A simple .NET application is able to load MSBuild.dll by path and run it with arbitrary command line arguments with full fidelity. Such a host can be a drop-in replacement for \"dotnet build\".",
  "state": "CLOSED",
  "createdAt": "2021-03-15T11:46:36Z",
  "updatedAt": "2024-02-21T17:01:48Z",
  "closedAt": "2021-03-22T11:37:01Z",
  "author": {
    "login": "ladipro"
  },
  "labels": [
    "Area: Performance",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "ladipro"
      }
    ]
  },
  "milestone": {
    "title": "MSBuild 16.10"
  },
  "comments": {
    "nodes": [
      {
        "body": "Attaching a simple program to host MSBuild.dll. I have verified that command line arguments are passed as `Main` parameters and invoking `Main` is enough. The host must declare the same run-time dependencies as MSBuild.dll, the easy way to do it is placing its executable in the SDK directory alongside MSBuild.dll and passing `--additional-deps MSBuild.deps.json` to dotnet exec.\r\n\r\nThis command line is equivalent to running `dotnet build <dotnet build args>` (replace hard-coded SDK path as needed):\r\n\r\n```\r\ndotnet exec --additional-deps \"\\Program Files\\dotnet\\sdk\\5.0.201\\MSBuild.deps.json\" \"\\Program Files\\dotnet\\sdk\\5.0.201\\build-inproc.dll\"  -maxcpucount -verbosity:m -restore -consoleloggerparameters:Summary \"-distributedlogger:Microsoft.DotNet.Tools.MSBuild.MSBuildLogger,C:\\Program Files\\dotnet\\sdk\\5.0.201\\dotnet.dll*Microsoft.DotNet.Tools.MSBuild.MSBuildForwardingLogger,C:\\Program Files\\dotnet\\sdk\\5.0.201\\dotnet.dll\" <dotnet build args>\r\n```\r\n[build-inproc.zip](https://github.com/dotnet/msbuild/files/6180862/build-inproc.zip)\r\n",
        "createdAt": "2021-03-22T09:17:32Z",
        "updatedAt": "2021-03-22T09:17:32Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "One additional thing that `dotnet build` does is set the `DOTNET_HOST_PATH` environment variable. This is required for e.g. the Roslyn build tasks: https://github.com/dotnet/roslyn/blob/451fa62b3b4071cabba1c0a5c471e6b180f43bab/src/Compilers/Shared/RuntimeHostInfo.cs#L65",
        "createdAt": "2021-03-22T11:35:50Z",
        "updatedAt": "2021-03-22T11:35:50Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "I can successfully build large solutions with the test host and the role of `dotnet build` is understood. Closing.",
        "createdAt": "2021-03-22T11:37:01Z",
        "updatedAt": "2021-03-22T11:37:01Z",
        "author": {
          "login": "ladipro"
        }
      }
    ]
  }
}