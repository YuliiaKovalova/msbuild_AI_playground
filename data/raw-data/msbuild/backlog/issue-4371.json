{
  "number": 4371,
  "title": "How to keep referenced Assembly out of Build Directory? Private not working",
  "body": "### Steps to reproduce\r\n\r\nI'm trying to build a project that has a Project Dependency to another project where the final output folder should not contain the original assembly and its depedencies. Essentially I need to use **Copy Local: No** behavior. This works for assembly references, but not for project references.\r\n\r\nThe options show in Visual Studio and in the project, but they seem to be ignored when the project is built.\r\n\r\nHere's what the relevant project section I'm using looks like:\r\n\r\n```xml\r\n  <ItemGroup>\r\n      <ReferenceOutputAssembly>true</ReferenceOutputAssembly>\r\n    <ProjectReference Include=\"..\\..\\MarkdownMonster\\MarkdownMonster.csproj\">\r\n      <Private>false</Private>\r\n      <CopyLocalSatelliteAssemblies>false</CopyLocalSatelliteAssemblies>\r\n    </ProjectReference>\r\n  </ItemGroup>\r\n```\r\n\r\nThe project above is the main project of the application, and this project is an addin that runs in the context of that host application.\r\n\r\nThe project compiles fine, but the output folder of the addin project still gets all the host project references AND all of its dependencies. IOW, it pulls in the **entire host application**.\r\n\r\n![image](https://user-images.githubusercontent.com/1374013/57575773-e308ed80-73ec-11e9-916d-d4611a7cad97.png)\r\n\r\nI've been working around this by using an explicit assembly reference instead of a project reference like this:\r\n\r\n```xml\r\n<ItemGroup Condition=\" '$(TargetFramework)' == 'netcoreapp3.0'\">\r\n    <Reference Include=\"$(SolutionDir)MarkdownMonster\\bin\\$(Configuration)\\$(TargetFramework)\\win-x86\\MarkdownMonster.dll\">\r\n      <Private>false</Private>\r\n    </Reference> \r\n  </ItemGroup>\r\n  <ItemGroup Condition=\" '$(TargetFramework)' == 'net462'\">\r\n    <Reference Include=\"$(SolutionDir)MarkdownMonster\\bin\\$(Configuration)\\$(TargetFramework)\\win-x86\\MarkdownMonster.exe\">\r\n      <Private>false</Private>\r\n    </Reference>\r\n  </ItemGroup>\r\n```\r\n\r\nThis works as expected, but this has build order problems where often compilation fails if the main project has not been compiled (even if explicitly setting the project dependencies in the solution file).\r\n\r\n\r\n### Other \r\nThis project is a multi-targeted WPF project to build both .NET Core 3.0 and for 4.6.2 and both the 3.0 and 4.6.2 build do the same thing.\r\n\r\nThis used to work just by `Copy Local: No` on the assembly reference added by a project reference in old style .csproj projects.\r\n\r\n### Expected  behavior\r\nI'd like to see a **Project Reference** behave the same way as the **Assembly Reference** with `<Private>false</Private>` providing a compilation reference, but not actually copying the output into the build target folder.\r\n\r\n### Actual behavior\r\nFiles are copied local even Copy Local: No\r\n\r\n\r\n### Environment data\r\n\r\nOS info:\r\nWindows 10\r\ndotnet core SDK 3.0 Preview 5\r\n.NET Core 3.0 WPF Project\r\n",
  "state": "CLOSED",
  "createdAt": "2019-05-11T22:48:59Z",
  "updatedAt": "2024-01-15T04:58:30Z",
  "closedAt": "2022-07-27T00:59:13Z",
  "author": {
    "login": "RickStrahl"
  },
  "labels": [
    "needs-triage"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Any progress on that? We're struggling with this issue as well. Always trashes our modules folder which should only contain the module libraries as their dependencies are resolved at runtime anyways. Can't believe that something so simple still hasn't made it into the toolchain.",
        "createdAt": "2020-10-08T12:41:59Z",
        "updatedAt": "2020-10-08T12:41:59Z",
        "author": {
          "login": "Skyppid"
        }
      },
      {
        "body": "I found answer [here](https://github.com/dotnet/sdk/issues/2491#issuecomment-415843168)\r\nYou need to set PrivateAssets=all to MarkdownMonster.csproj reference",
        "createdAt": "2020-11-20T18:45:08Z",
        "updatedAt": "2020-11-20T22:17:20Z",
        "author": {
          "login": "vfofanov"
        }
      },
      {
        "body": "We also have the problem that project dependency spams our output folders unnecessarily, even when with \r\n```\r\n<Private>false</Private>\r\n <CopyLocalSatelliteAssemblies>false</CopyLocalSatelliteAssemblies>\r\n```\r\n\r\nThe PrivateAssets=all workaround seems only to apply to nuget PackageReference - not to project dependency references. ",
        "createdAt": "2021-04-08T12:50:54Z",
        "updatedAt": "2021-04-08T12:50:54Z",
        "author": {
          "login": "mgexo"
        }
      },
      {
        "body": "You have to apply the `<PrivateAssets>all</PrivateAssets>` to the parent of your dependency, since the copy to output trigger was earlier in dependency tree. This works well. Alternative solution can be to add the dependency again and force it to not copy. Another solution would be to add `PrivateAssets` to `Directory.Build.props` as follows:\r\n```\r\n<Project>\r\n       <ItemDefinitionGroup>\r\n              <PackageReference>\r\n                     <PrivateAssets>all</PrivateAssets>\r\n              </PackageReference>\r\n              <ProjectReference>\r\n                     <PrivateAssets>all</PrivateAssets>\r\n              </ProjectReference>\r\n       </ItemDefinitionGroup>\r\n</Project>\r\n```\r\nSource of this information is https://curia.me/net-core-transitive-references-and-how-to-block-them/\r\n",
        "createdAt": "2021-06-25T08:23:13Z",
        "updatedAt": "2021-06-25T08:23:13Z",
        "author": {
          "login": "trivalik"
        }
      },
      {
        "body": "How is this still not fixed? It was working fine with the old csproj format.",
        "createdAt": "2022-02-14T13:06:26Z",
        "updatedAt": "2022-02-15T07:53:04Z",
        "author": {
          "login": "FlaynGordt"
        }
      },
      {
        "body": "I have found a workaround for this by adding DisableTransitiveProjectReferences to the project settings.",
        "createdAt": "2022-02-15T07:53:18Z",
        "updatedAt": "2022-02-15T07:53:18Z",
        "author": {
          "login": "FlaynGordt"
        }
      },
      {
        "body": "+1 This is so frustrating",
        "createdAt": "2022-03-05T01:04:36Z",
        "updatedAt": "2022-03-05T01:04:36Z",
        "author": {
          "login": "ds5678"
        }
      },
      {
        "body": "None of the recommended workarounds worked for me. I only see two viable options: \r\n\r\n* Write a script for deleting dependency files \r\n* Write a script for copying the nondependency files\r\n\r\nBoth of these are ridiculous and shouldn't be necessary.",
        "createdAt": "2022-03-05T01:34:06Z",
        "updatedAt": "2022-03-05T01:34:06Z",
        "author": {
          "login": "ds5678"
        }
      },
      {
        "body": "@ds5678 If you set `<PrivateAssets>all</PrivateAssets>` for every dependency correct then it should work. If you have a longer dependency chain, then probably every item of the chain require this. You can play arround with msbuild log set to diagnostics to find the cause and set then `PrivateAssets`.",
        "createdAt": "2022-03-07T09:29:31Z",
        "updatedAt": "2022-03-07T09:29:31Z",
        "author": {
          "login": "trivalik"
        }
      },
      {
        "body": "> @ds5678 If you set `<PrivateAssets>all</PrivateAssets>` for every dependency correct then it should work. If you have a longer dependency chain, then probably every item of the chain require this. You can play arround with msbuild log set to diagnostics to find the cause and set then `PrivateAssets`.\r\n\r\nI think that only works for nuget references.",
        "createdAt": "2022-03-07T13:34:04Z",
        "updatedAt": "2022-03-07T13:34:04Z",
        "author": {
          "login": "FlaynGordt"
        }
      },
      {
        "body": "+1 \r\n\r\n> Any progress on that? We're struggling with this issue as well. Always trashes our modules folder which should only contain the module libraries as their dependencies are resolved at runtime anyways.\r\n\r\nReferenced project will not be copied but dependecies of the project will copied to output\r\n",
        "createdAt": "2022-04-10T19:33:41Z",
        "updatedAt": "2022-04-10T19:34:05Z",
        "author": {
          "login": "chrisp0"
        }
      },
      {
        "body": "I've taken to explicitly referencing the project's assembly instead of the project in this case.\r\n\r\n```xml\r\n  <ItemGroup Condition=\" '$(TargetFramework)' == 'net60'\">\r\n    <Reference Include=\"$(SolutionDir)MarkdownMonster\\\\bin\\\\$(Configuration)\\$(TargetFramework)\\\\win-x64\\\\MarkdownMonster.dll\">\r\n      <Private>false</Private>\r\n    </Reference>\r\n  </ItemGroup>\r\n```\r\n\r\nUsing `<Private>false</Private>` keeps the dependencies from being copied over.\r\n\r\nNone of the other things suggested (`<PrivateAssets>`)  in the posts above seem to work for me for using a project reference.\r\n\r\nI fail to see why a project reference should not work the same as a another reference using the same settings. At the end of the day the end result that is expected is the same and you should be able to use a direct reference, Nuget reference or project reference pretty much interchangeably.\r\n",
        "createdAt": "2022-04-10T21:39:40Z",
        "updatedAt": "2022-04-10T22:08:55Z",
        "author": {
          "login": "RickStrahl"
        }
      },
      {
        "body": "Ok, i will try this too\n\nBut maybe it's still a bug after all that  referencing a project works different from referencing a dll/assembly/package. ",
        "createdAt": "2022-04-11T07:18:08Z",
        "updatedAt": "2022-04-11T07:18:47Z",
        "author": {
          "login": "chrisp0"
        }
      },
      {
        "body": "i am heading the same issue atm and its really frustrating that a workflow that is even documented here (https://docs.microsoft.com/en-us/dotnet/core/tutorials/creating-app-with-plugin-support#simple-plugin-with-no-dependencies) is not working cause of that issue",
        "createdAt": "2022-04-12T08:29:09Z",
        "updatedAt": "2022-04-12T08:29:09Z",
        "author": {
          "login": "tisis2"
        }
      },
      {
        "body": "I dont know why, but this ended up working for me:\r\n\r\nIn the library .csproj:\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n\t<PropertyGroup>\r\n\t\t<TargetFramework>net6.0</TargetFramework>\r\n\t\t<ImplicitUsings>enable</ImplicitUsings>\r\n\t\t<Nullable>enable</Nullable>\r\n\t</PropertyGroup>\r\n\r\n\t<ItemGroup>\r\n\t\t<Reference Include=\"Main Project\">\r\n\t\t\t<HintPath>..\\MainProject\\bin\\Debug\\net6.0\\MainProject.dll</HintPath>\r\n\t\t\t<Private>false</Private>\r\n\t\t</Reference>\r\n\t</ItemGroup>\r\n</Project>\r\n\r\n```\r\n\r\nWhen you test, make sure to clean the output folder or you might think it does not work.",
        "createdAt": "2022-05-23T17:53:48Z",
        "updatedAt": "2022-05-23T17:54:31Z",
        "author": {
          "login": "80O"
        }
      },
      {
        "body": "@80O Your hint path looks like it will not work if you clean your solution and build it with \"Release\" configuration.",
        "createdAt": "2022-05-24T06:32:29Z",
        "updatedAt": "2022-05-24T06:32:29Z",
        "author": {
          "login": "trivalik"
        }
      },
      {
        "body": "@80O The syntax you want is this:\r\n\r\n```xml\r\n<ItemGroup>\r\n      <Reference Include=\"$(SolutionDir)MarkdownMonster\\bin\\$(Configuration)\\$(TargetFramework)\\win-x64\\MarkdownMonster.dll\">\r\n      <Private>false</Private>\r\n    </Reference>\r\n</ItemGroup>\r\n```\r\n\r\nThis works, but it shouldn't be this hard. \r\n\r\nThere's no reason we shouldn't be able to reference the `.csproj` as a `<ProjectReference>` and it should be able to figure out to reference the main assembly in the correct folder without all this MsBuild stuff. \r\n\r\nEspecially since none of the tooling (Visual Studio, Rider etc.) will set this up correctly **if you set Copy Local to false**.\r\n\r\nThe no Copy Local is sort of an edge case - typically for Addins or pluggable components - but this should still work and it seems to me this syntax should just work:\r\n\r\n```xml\r\n<ItemGroup>\r\n    <Reference Include=\"$(SolutionDir)MarkdownMonster\\bin\\$(Configuration)\\$(TargetFramework)\\win-x64\\MarkdownMonster.dll\">\r\n      <Private>false</Private>\r\n    </Reference>\r\n</ItemGroup>\r\n```",
        "createdAt": "2022-07-24T23:00:25Z",
        "updatedAt": "2022-07-24T23:02:52Z",
        "author": {
          "login": "RickStrahl"
        }
      },
      {
        "body": "@RickStrahl can you give an example of a project that is behaving as you describe? I set up a small demo at https://github.com/rainersigwald/demo-msbuild-4371, and put up https://github.com/rainersigwald/demo-msbuild-4371/pull/1 to show how I solved the problem you're describing, which didn't require any of the reference juggling.\r\n\r\nI would like to discourage people from replacing `ProjectReference` with `Reference` as much as possible; it's highly likely to cause you build-order-related headaches down the road, in addition to having to hardcode fragile reconstructed paths.\r\n",
        "createdAt": "2022-07-25T20:44:18Z",
        "updatedAt": "2022-07-25T20:44:18Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald In your example it would be enough to set `<Private>False</Private>` for both projects/ProjectReference.\r\nBut if would configure outputdir of `Referencing` by `<BaseOutputPath>SomeWhereElse</BaseOutputPath>` this will not work anymore. Then you have additionally to configure `<PrivateAssets>all</PrivateAssets>` in Referenced project for the ProjectReference TransitiveReferenced. See https://github.com/rainersigwald/demo-msbuild-4371/pull/2",
        "createdAt": "2022-07-26T15:21:34Z",
        "updatedAt": "2022-07-26T15:21:34Z",
        "author": {
          "login": "trivalik"
        }
      },
      {
        "body": "The conversation moved through a few channels, but @RickStrahl [confirmed](https://twitter.com/RickStrahl/status/1552019145612439558) that you can accomplish the goals\r\n\r\n1. Don't mess with the app/referenced project's output directory.\r\n2. Don't copy the app/referenced project to the plugin/referencing project's output folder.\r\n3. Don't copy the app's ProjectReferences to the plugin/referencing project's output folder.\r\n4. Don't copy the app's PackageReferences to the plugin/referencing project's output folder.\r\n\r\nWith a few properties and metadata entries:\r\n\r\n1. Set `Private=\"false\"` on the ProjectReference from the plugin project to the app. This avoids the copies from 2 and 3. VS will do this for you if you set the reference CopyLocal through the UI.\r\n2. Set `ExcludeAssets=\"all\"` on the ProjectReference from the plugin project to the app. This avoids the copies from 4, which arise because at restore time NuGet finds transitive references of both PackageReferences and ProjectReferences. This isn't very discoverable: the XSD does list `ExcludeAssets` for `PackageReference` items but [only in its element form](https://github.com/dotnet/msbuild/blob/65c50fb73faefec0ef2ce8256b802f50cc8236f0/src/MSBuild/MSBuild/Microsoft.Build.CommonTypes.xsd#L697-L703), a subset of #7028. It's also not clear that annotating a ProjectReference in this way applies to transitive assets: #7849.\r\n3. Set `<DisableTransitiveProjectReferences>true</DisableTransitiveProjectReferences>` in the plugin project. This keeps the .NET SDK from creating `ProjectReference` items to all projects that are referenced by any `ProjectReference`s that are directly in the project. This was undocumented (https://github.com/dotnet/docs/issues/30341) and not in the XSD (#7850).",
        "createdAt": "2022-07-26T20:32:02Z",
        "updatedAt": "2022-07-26T20:32:02Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "As a follow up - the solution appears to be in this declaration to reference the main project:\r\n\r\n```xml\r\n<ItemGroup>\r\n    <ProjectReference Include=\"../../MarkdownMonster/MarkdownMonster.csproj\">\r\n        <Private>false</Private>\r\n        <ExcludeAssets>all</ExcludeAssets>\r\n    </ProjectReference>\r\n</ItemGroup>\r\n```\r\n\r\n*It also works with `<IncludeAssets>compile</IncludeAssets>`.*\r\n\r\n> Note that both `Private` and `ExcludeAssets` or `IncludeAssets` have to be used in combination, and Visual Studio's Copy Local=false setting only sets the `Private` flag, so that doesn't work out of box.\r\n\r\nThis generates only the local project main assembly plus any direct project references, but excludes any incoming dependencies from the main `MarkdownMonster` project.\r\n\r\nI've updated and somewhat cleaned up my old post with more detailed information on how to best reference resources from a typical addin style project here:\r\n\r\n[.NET Core SDK Projects: Controlling Output Folders and Dependencies Output](https://weblog.west-wind.com/posts/2019/Apr/30/NET-Core-30-SDK-Projects-Controlling-Output-Folders-and-Content)",
        "createdAt": "2022-07-27T00:59:12Z",
        "updatedAt": "2022-07-27T01:01:19Z",
        "author": {
          "login": "RickStrahl"
        }
      },
      {
        "body": "> @rainersigwald helpfully wrote:\r\n> 1. Set Private=\"false\" on the `ProjectReference` from the plugin project to the app. \r\n\r\nIf desired, there is a further trick to this step. If you have many .dlls that need this treatment, and they are all below a singular file system node (subtree) such that there is a prevailing `Directory.Build.Props` file, then you don't have to manually clutter-up every `.csproj` file all over the place. That job is actually far worse that it seems at first, because for each of those sub-modules, you have to go in and expand each and every one of the  `<ProjectReference>` it makes, within them all, in turn.\r\n\r\nInstead, you can automatically apply the behavior to any/all of the (sub-suib-) `<ProjectReference>` \"mentions\" that are made by any of the respective (subsumed) submodules by doing the following:\r\n\r\nIn an appropriately prevailing <b>Directory.Build.Props</b>:\r\n```xml\r\n<Project>\r\n\t<ItemDefinitionGroup>\r\n\t\t<ProjectReference>\r\n\t\t\t<Private Condition=\"'$(OutputType)' == 'library'\">false</Private>\r\n\t\t</ProjectReference>\r\n\t</ItemDefinitionGroup>\r\n</Project>\r\n```\r\n\r\nIntuitively enough, there's an *extra* level of nesting, which is the magic here: the <code>&lt;Item***Definition***Group&gt;</code> element (note: ***not*** `<ItemGroup>` that you're familiar with), deploys an abstracted operation, like a \"macro\", over any/all number of scoped `<ProjectReference>` elements that may later follow.\r\n\r\nAs with the theory of this solution in general, we only want to affect `.dll` builds, because this is the \"sub-sub-module\" proliferation that becomes so useless and problematic. The common-sense rule-of-thumb (indeed, the **TL;DR;** of the whole issue here IMHO) is that, since a sub-module itself can never be a primary runtime host, it should never receive or privately posess any binaries of any (putative) referents (beyond itself), as a result of--or during the course of--its being built. This is called \"nipping the (`.dll` proliferation) problem in the bud.\"\r\n\r\nOnly the final executable host in a modular system should have to worry about and implement some policy for gathering the disparate parts needed for actual, runtime use, That policy should **not** be \"regularly freeze the hard disk by wastefully reducing-down a gigatic union of 80% binary images which are byte-duplicates, since every sub-module has pointlessly hoarded duplicate copies for itself.\"\r\n\r\nWho cares about tracking overlapping usage between adjacent or unrelated plug-ins? It's a non-problem that can't affect anything; leave it to the host-build where it's comically trivial to just de-duplicate the entire set of all comers, for once and only. In fact, if the method described here is followed assiduously, there's not even any de-duping during the host build--it can just copy each sub-module's \\bin directory into its own, and ideally there will be zero excess-copying and no .DLL file will ever be overwritten. I've done it this way for many years and the builds are obviously way faster, not to mention more reliable due to reduced overwriting collisions in general.\r\n\r\nA similar syntax works for subduing all `<PackageReference>` entries that may happen to be referenced by any/all of the submodules as well:\r\n\r\n```xml\r\n<Project>\r\n\t<ItemDefinitionGroup>\r\n\t\t<PackageReference Condition=\"'$(OutputType)' != 'library'\">\r\n\t\t\t<ExcludeAssets>runtime</ExcludeAssets>\r\n\t\t</PackageReference>\r\n\t</ItemDefinitionGroup>\r\n</Project>\r\n```\r\n\r\nOh, and `<Reference>` works similar to `<ProjectReference>`, but indeed it, and in fact all three of the reference-tag-types I've mentioned are treated independently by  the `<ItemDefinitionGroup>` handing, so you can (or must) deploy any combination of them according to your needs.",
        "createdAt": "2023-04-27T03:01:01Z",
        "updatedAt": "2023-04-27T03:46:14Z",
        "author": {
          "login": "glenn-slayden"
        }
      },
      {
        "body": "I have a `<ProjectReference>` that passes a Transitive ProjectReferences. Both the project A, and its dependency project B require a third project C to build, and A references C through B.\r\nI wish to exclude both B and C from A's build output. In A I can `<DisableTransitiveProjectReferences>true</DisableTransitiveProjectReferences>`, add C's `<ProjectReference>` and add `<Private>False</Private>` to it, but I was wondering if there is another (shorter) way to do it.\r\nAnd no, doing it in an `<ItemDefinitionGroup>` block is undesirable to me, since I want this to apply only to B and C, and not to other `<ProjectReference>`s.",
        "createdAt": "2023-11-29T10:21:03Z",
        "updatedAt": "2023-11-29T10:21:03Z",
        "author": {
          "login": "panagiotidisc"
        }
      },
      {
        "body": "Is there still no good solution",
        "createdAt": "2024-01-15T04:58:29Z",
        "updatedAt": "2024-01-15T04:58:29Z",
        "author": {
          "login": "kimdiego2098"
        }
      }
    ]
  }
}