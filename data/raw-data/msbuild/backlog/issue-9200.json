{
  "number": 9200,
  "title": "[Bug]: Transforming backslashes to slashes next to a property value on macOS",
  "body": "### Issue Description\n\nThis is maybe not a bug, but I did not manage to find a way to get a single trailing backslash when building up a relative path in a project file (please see the repro steps).\r\n\r\nPS If there is an existing/proper way to do this, I would like to know the way. Thank you!\n\n### Steps to Reproduce\n\n\r\n1. Create a simple project:\r\n```xml\r\n<Project>\r\n    <PropertyGroup>\r\n        <RelativePath1>mydir\\$(MyFileName)\\</RelativePath1>\r\n        <RelativePath2>mydir\\$(MyFileName)/////////\\</RelativePath2>\r\n        <RelativePath3>mydir\\$(MyFileName)\\\\</RelativePath3>\r\n    </PropertyGroup>\r\n    <Target Name=\"Print\">\r\n        <Message Text=\"RelativePath1: $(RelativePath1)\" Importance=\"high\"/>\r\n        <Message Text=\"RelativePath2: $(RelativePath2)\" Importance=\"high\"/>\r\n        <Message Text=\"RelativePath3: $(RelativePath3)\" Importance=\"high\"/>\r\n    </Target>\r\n</Project>\r\n```\r\n2. Build the project\r\n```bash\r\ndotnet msbuild -p:MyFileName=file\r\n```\n\n### Expected Behavior\n\nNot sure what is the expected behaviour, but I wanted to achieve to get a single trailing backslash:\r\n```\r\nmydir\\file\\\r\n```\n\n### Actual Behavior\n\nThe build prints out:\r\n```\r\nMSBuild version 17.8.0-preview-23367-03+0ff2a83e9 for .NET\r\n  RelativePath1: mydir\\file/\r\n  RelativePath2: mydir\\file/\r\n  RelativePath3: mydir\\file\\\\\r\n```\r\n\n\n### Analysis\n\n_No response_\n\n### Versions & Configurations\n\ndotnet sdk version: `8.0.100-preview.7.23376.3`\r\nmachine/OS: `MacBookPro M1` - macOS Ventura: `Version 13.5.1 (22G90)`",
  "state": "OPEN",
  "createdAt": "2023-09-01T16:21:37Z",
  "updatedAt": "2024-01-31T08:13:20Z",
  "closedAt": null,
  "author": {
    "login": "ivanpovazan"
  },
  "labels": [
    "bug",
    "backlog",
    "Priority:3",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Workaround: it seem that doing\r\n```xml\r\n<RelativePath1>mydir\\$(MyFileName)%5C</RelativePath1>\r\n```\r\nwould make it print:\r\n```\r\nRelativePath1: mydir\\file\\\r\n```",
        "createdAt": "2023-09-01T16:27:03Z",
        "updatedAt": "2023-09-01T16:27:03Z",
        "author": {
          "login": "ivanpovazan"
        }
      },
      {
        "body": "> PS If there is an existing/proper way to do this, I would like to know the way. Thank you!\r\n\r\nI suspect there is a bug but it's minor because MSBuild will accept both `\\` (Windows) and `/` (U*nix) in a path.\r\n\r\nBecause the directory separator is different between OSes, if you want paths to be consistent within a build, consider avoiding hard coding the directory separator.\r\n\r\nYou can use `Path.Combine()` and [`EnsureTrailingSlash`](https://learn.microsoft.com/en-us/visualstudio/msbuild/property-functions?view=vs-2022#msbuild-ensuretrailingslash), e.g.\r\n\r\n```xml\r\n    <PropertyGroup>\r\n        ...\r\n        <RelativePath4>$([MSBuild]::EnsureTrailingSlash($([System.IO.Path]::Combine('mydir', '$(MyFileName)'))))</RelativePath4>\r\n    </PropertyGroup>\r\n    <Target Name=\"Print\">\r\n        ...\r\n        <Message Text=\"RelativePath4: $(RelativePath4)\" Importance=\"high\"/>\r\n    </Target>\r\n```\r\n\r\nThese functions will use the native directory separator.\r\n\r\nYou can get the native directory separator with `$([System.IO.Path]::DirectorySeparatorChar())`.\r\n\r\n```xml\r\n    <PropertyGroup>\r\n        <DirectorySeparator>$([System.IO.Path]::DirectorySeparatorChar())</DirectorySeparator>\r\n    </PropertyGroup>\r\n```\r\n\r\nWhen the build runs on Windows the paths will use `\\` and when the build runs on macOS the paths will use `/`.\r\n\r\n(Similarly and also related to OS portability, with MSBuild v17.3 and later you can use `$([System.Environment]::NewLine)` and avoid hard coding line endings.)",
        "createdAt": "2023-09-01T23:55:24Z",
        "updatedAt": "2023-09-01T23:55:24Z",
        "author": {
          "login": "jrdodds"
        }
      },
      {
        "body": "@jrdodds thank you for your suggestions!\r\n \r\nHowever, I did not provide enough context to explain why using `Path.Combine()` (and other MSBuild's path related APIs) would not work in our case.\r\n  \r\nWith the support of `Xamarin.iOS` SDK there is a setup where development for iOS platforms is enabled on Windows. In this configuration a Windows machine is used for building the project and is paired with a Mac to use the native build tools and connect to the target device for the app deployment. \r\n\r\nWithin the SDK, we need to construct a relative path, which the runtime will use to lookup files during the app execution. Since the build host (where MSBuild is running) is Windows, and the target platforms is iOS (Unix) the constructed relative path will be invalid if `Path.Combine()`is used, as the path will contain `\\` as separators (instead of expected `/`).\r\n\r\nHaving said all this, as a workaround we use: `.Replace('\\','/')`\r\nFor this cross-platform scenario it is probably better to use `/` everywhere. \r\n\r\n---\r\n\r\nIn any case, the issue reported here is still very much reproducible and is not tied to path manipulation. It is just a use case where it occurred, but I agree it is probably a niche one.",
        "createdAt": "2023-09-05T09:34:57Z",
        "updatedAt": "2023-09-05T09:36:37Z",
        "author": {
          "login": "ivanpovazan"
        }
      }
    ]
  }
}