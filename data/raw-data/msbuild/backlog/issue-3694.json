{
  "number": 3694,
  "title": "Question: obtain ProjectInstance in a right way",
  "body": "### Task\r\nI have to obtain a `ProjectInstance` with build-time items and properties after build. \r\nIn case I have only one target framework everything is simple. But when I have several target frameworks defined by `TargetFrameworks` property it is not so easy because target `DispatchToInnerBuilds` performs build via other `ProjectInstance` objects. \r\n\r\n### Current solution\r\n\r\nSo I have decided to emulate `DispatchToInnerBuilds` behavior:\r\n```c#\r\n\r\nvoid Build(Project originalProject, string[] targets) \r\n{\r\n  var targetFrameworks = GetMultipleTargetFrameworks(originalProject);\r\n  if (targetFrameworks.Any())\r\n  {\r\n    foreach (var targetFramework in targetFrameworks)\r\n    {\r\n      // Specify TargetFramework\r\n      var actualProperties = new Dictionary<string, string>(properties);\r\n      actualProperties[\"TargetFramework\"] = targetFramework;\r\n          \r\n      // Build project \r\n      var project = new Project(originalProject.Xml, actualProperties, null, _projectCollection, );\r\n      var projectInstance = _buildManager.GetProjectInstanceForBuild(project);\r\n      var buildRequestData = new BuildRequestData(projectInstance, targets, null, BuildRequestDataFlags.ProvideProjectStateAfterBuild);\r\n      var request = _buildManager.PendBuildRequest(buildRequestData);\r\n      request.ExecuteAsync(submission => { ... }, null);\r\n    }\r\n  } \r\n  else\r\n  {\r\n   ...\r\n  }\r\n}\r\n```\r\n\r\nAfter executing build in that way I have several `ProjectInstance` objects corresponding to project target frameworks. \r\n\r\n### Problem\r\nUsually it is ok, but I do not run outer build in that way. And this approach does not work with `NuGet.Build.Tasks.Pack.targets`.\r\n\r\nThere is a next target there:\r\n```xml\r\n  <Target Name=\"_PackAsBuildAfterTarget\"\r\n          AfterTargets=\"Build\"\r\n          Condition=\"'$(GeneratePackageOnBuild)' == 'true' AND '$(IsInnerBuild)' != 'true'\"\r\n          DependsOnTargets=\"Pack\">\r\n  </Target>\r\n```\r\n\r\nAnd in my case I run builds only with `IsInnerBuild = true`. \r\n\r\n### Possible solutions (as far as I can see)\r\n\r\n1. Do not emulate `DispatchToInnerBuilds` and obtain `ProjectInstance` somehow. (how?)\r\n2. Run outer build, but without invoking `DispatchToInnerBuilds` target. (how?)\r\n\r\nThanks for any suggestions. Maybe someone knows how to solve the issue in a **right** way...\r\n\r\n",
  "state": "OPEN",
  "createdAt": "2018-09-03T19:28:27Z",
  "updatedAt": "2024-02-21T16:33:05Z",
  "closedAt": null,
  "author": {
    "login": "xtmq"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Any update here, anyone?",
        "createdAt": "2018-10-31T07:07:50Z",
        "updatedAt": "2018-10-31T07:07:50Z",
        "author": {
          "login": "xtmq"
        }
      }
    ]
  }
}