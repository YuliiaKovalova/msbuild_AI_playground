{
  "number": 4809,
  "title": "ItemGroup inside skipped Target still gets called",
  "body": "Apparently, ItemGroups inside Targets are always called, no matter if the target gets skipped or not. Is this the expected behavior?\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>net472</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n    <Target Name=\"Test\" BeforeTargets=\"Ts2LangBuild\">\r\n\t\t<Message Text=\"CompileBefore:@(Compile)\" Importance=\"high\" />    \r\n    </Target>\r\n    \r\n    <Target Name=\"Test2\" AfterTargets=\"Ts2LangBuild\">\r\n\t\t<Message Text=\"CompileAfter: @(Compile)\" Importance=\"high\" />    \r\n    </Target>\r\n\r\n    <Target Name=\"Ts2LangBuild\" BeforeTargets=\"CoreCompile\" Inputs=\"test.ts\" Outputs=\"testOutput.txt\">\r\n        ....\r\n        <ItemGroup>\r\n            ....\r\n            <Compile Remove=\"@(Compile)\" />\r\n            ....\r\n        </ItemGroup>\r\n        <Message Text=\"The target is called: %(PackageFiles.FullPath)\" Importance=\"high\" />\r\n    </Target>\r\n</Project>\r\n```\r\n\r\nIf I build this project, the target **Ts2LangBuild** is reported as skipped but **CompileAfter** returns empty because the **<Compile Remove .. />** is still called.\r\n\r\nIf a target gets skipped I expect that everything inside it getting skipped as well. Why is **ItemGroup** not skipped?\r\n\r\nUsing MSBuild 16.2.37902.0.",
  "state": "CLOSED",
  "createdAt": "2019-10-11T15:47:58Z",
  "updatedAt": "2024-02-21T17:06:36Z",
  "closedAt": "2019-10-14T11:00:58Z",
  "author": {
    "login": "Jmales"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Discussion"
  },
  "comments": {
    "nodes": [
      {
        "body": "Yes, this is expected; it's documented as [output inference](https://docs.microsoft.com/en-us/visualstudio/msbuild/incremental-builds#output-inference).\r\n\r\nSkipping item creation in targets that were skipped as up-to-date would be bad in some situations. For example:\r\n\r\n* Target `A` runs before the compiler and generates some code `C.cs` based on `input.txt`\r\n* `A` defines inputs/outputs so it can be run incrementally.\r\n\r\n1. Build the project completely\r\n   1. `A` is out of date so it generates `C.cs` and adds it to the `Compile` item.\r\n   1. The compiler sees `C.cs`\r\n1. Edit a source file but _not_ `input.txt`\r\n1. Build the project incrementally\r\n   1. `A` is skipped because it is up to date\r\n   1. Without output inference, `C.cs` doesn't get added to `@(Compile)`\r\n   1. The compiler fails when code refers to types defined in `C.cs`.",
        "createdAt": "2019-10-11T16:09:57Z",
        "updatedAt": "2019-10-11T16:09:57Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Thanks a lot for the answer @rainersigwald.  Didn't knew about that at all!\r\n\r\nSo, in my case, how do I avoid an Item Group or a Compile Remove to get called when a target gets skipped? \r\n\r\nI think I need that because in my specific case I remove the duplicates from a list so I need all of this inside my target:\r\n\r\n```xml\r\n         <ItemGroup>\r\n                     <CompileList Include=\"@(Compile->'%(FullPath)')\"/>\r\n         </ItemGroup>\r\n\r\n        <CreateItem Include=\"$(ProjectDir)Generated\\**\\*.cs\">\r\n\t\t\t<Output TaskParameter=\"Include\" ItemName=\"CompileList\"/>\r\n        </CreateItem>\r\n \r\n        <RemoveDuplicates Inputs=\"@(CompileList)\">\r\n\t\t\t<Output TaskParameter=\"Filtered\" ItemName=\"FilteredCompile\" />\r\n        </RemoveDuplicates>\r\n         \r\n         <ItemGroup>\r\n\t\t <Compile Remove=\"@(Compile)\" />\r\n\t\t <Compile Include=\"@(FilteredCompile)\" />\r\n         </ItemGroup>\r\n```\r\n\r\nAnd RemoveDuplicates doesn't seem to be running when the target gets skipped. Using **diagnostic** verbosity level I noticed that the `CompileList` list is created and that ` @(Compile)` list is removed, resulting is an empty `@(Compile)` list . That's probably due to `FilteredCompile` is empty (can't know for sure because I can't put a **Message** inside an **ItemGroup**.\r\n",
        "createdAt": "2019-10-11T16:26:17Z",
        "updatedAt": "2019-10-11T16:29:19Z",
        "author": {
          "login": "Jmales"
        }
      },
      {
        "body": "Can you move the item manipulations to an always-run target (no inputs/outputs) that depends on the incremental target that generates the files?",
        "createdAt": "2019-10-11T16:28:18Z",
        "updatedAt": "2019-10-11T16:28:18Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Yeah I can, and that seems to solve the issue at hands. Thanks a lot mate, you have been a great help in this and in other issues that I stumble upon ;)\r\n\r\nStill, I wonder why `Compile Remove`, `Somelist Include`, etc get called when the target gets skipped but not the `RemoveDuplicates`? Is it because task `RemoveDuplicates` is not an  item creation task and only item creation tasks are called as part of the output inference?",
        "createdAt": "2019-10-11T16:42:28Z",
        "updatedAt": "2019-10-11T16:43:03Z",
        "author": {
          "login": "Jmales"
        }
      },
      {
        "body": "> Still, I wonder why `Compile Remove`, `Somelist Include`, etc get called when the target gets skipped but not the `RemoveDuplicates`? Is it because task `RemoveDuplicates` is not an item creation task and only item creation tasks are called as part of the output inference?\r\n\r\nExactly. While `RemoveDuplicates` is shipped with MSBuild and we could probably predicts its results, that's not true of a task in general, since they can run arbitrary .NET code. So the predictor predicts only \"standard\" item operations.",
        "createdAt": "2019-10-15T14:51:35Z",
        "updatedAt": "2019-10-15T14:51:35Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Thanks for the suggestion @rainersigwald but I don't see how that would solve the issue: the always-run target will always run, which is not what @Jmales wants. @Jmales wants to conditionally manipulate the itemgroup items based on whether or not the target is run. Even though you `DependsOnTargets` on a skipped target, the item group manipulation target will still run whether or not the incremental target runs.\r\n\r\nSimilar to @rainersigwald's suggestion, move the item manipulation to a separate target, but then use [`CallTarget` task](https://docs.microsoft.com/en-us/visualstudio/msbuild/calltarget-task?view=vs-2019) from within your incremental target to call the itemgroup item manipulation target:\r\n\r\n```xml\r\n<Project ...>\r\n\r\n    <Target Name=\"UpdateMyItems\">\r\n        <ItemGroup>\r\n            <!-- This is just an example of some item group manipulation. -->\r\n            <SomeItemType Remove=\"@(SomeItemType)\" />\r\n            <SomeItemType Include=\"SomeDirectory\\**\" />\r\n        </ItemGroup>\r\n    </Target>\r\n\r\n    <Target Name=\"MyIncrementalTarget\" Inputs=\"...\" Outputs=\"...\">\r\n        <SomeTask1 ... />\r\n        <SomeTask2 ... />\r\n\r\n        <CallTarget Targets=\"UpdateMyItems\" />\r\n\r\n        <!-- This task does not see the updated item group, it still sees the old entries. -->\r\n        <SomeTask3 ... />\r\n    </Target>\r\n\r\n    <Target Name=\"CanSeeUpdates\" DependsOnTargets=\"MyIncrementalTarget\">\r\n        <SomeTask4 ... /> <!-- This task is exposed to the new updates made by UpdateMyItems target. -->\r\n    </Target>\r\n\r\n</Project>\r\n```\r\n\r\nWith this, the `UpdateMyItems` target will not be called if `MyIncrementalTarget` is skipped due to its incremental nature.\r\n\r\nNote that `SomeTask3` does not see the updated `SomeItemType` item group. However, subsequent targets do see the new manipulations to item group(s).",
        "createdAt": "2020-08-12T19:25:23Z",
        "updatedAt": "2020-08-13T00:47:23Z",
        "author": {
          "login": "Daniel-Khodabakhsh"
        }
      }
    ]
  }
}