{
  "number": 11277,
  "title": "Post build event is run an extra time with empty values when multi-targeting",
  "body": "### Issue Description\n\nI've added a post build event to my csproj to sign DLLs (getting this to run in the Azure DevOps pipeline was hell -- took a day.)\n\n```\n  <Target Name=\"AzureSignTool\" AfterTargets=\"Build\" Condition=\"'$(TargetFileName)' != ''\">\n    <Message Importance=\"High\" Text=\"Running azuresigntool for $(TargetFileName).\" />\n    <Exec Command=\"azuresigntool sign --azure-key-vault-tenant-id &quot;$(AzureSignTool_TenantId)&quot; -kvu $(AzureSignTool_KeyVaultUrl) -kvi $(AzureSignTool_ClientId) -kvs $(AzureSignTool_ClientSecret) -kvc CodeSigningCert &quot;$(ProjectDir)$(OutDir)$(TargetFileName)&quot;\" />\n  </Target>\n```\n\nThe `Condition` is required beause the target is run for ever `<Frameworks` _and_ again for the empty string.\n\nThe problem happens when you use `<TargetFrameworks` instead of `<TargetFramework`. Example attached.\n\n### Steps to Reproduce\n\n[ConsoleAppPostBuildEvent.zip](https://github.com/user-attachments/files/18408481/ConsoleAppPostBuildEvent.zip)\n\n### Expected Behavior\n\nDon't run the post build event an additional time.\n\n### Actual Behavior\n\nRuns post build event once for every frameowrk and agan with empty parameter values.\n\n### Analysis\n\n_No response_\n\n### Versions & Configurations\n\n_No response_",
  "state": "OPEN",
  "createdAt": "2025-01-14T09:37:49Z",
  "updatedAt": "2025-01-14T16:44:38Z",
  "closedAt": null,
  "author": {
    "login": "rwb196884"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "Area: Documentation",
    "Priority:2",
    "triaged"
  ],
  "comments": {
    "nodes": [
      {
        "body": "This is expected behaviour, and we need to improve the documentation around it. But how it works, when you have `TargetFrameworks` (plural) defined, it adds another invisible build. Informally we call it the \"outer-build\". This allows us to prep all builds with the correct targetframeworks and have one nice call all around. \n\nThis extra post build that you are seeing is from the outer build, that is also used in some cases, and removal would probably break a lot of builds.",
        "createdAt": "2025-01-14T16:01:15Z",
        "author": {
          "login": "maridematte"
        }
      },
      {
        "body": "@maridematte we should probably add some documentation about the general pattern to https://learn.microsoft.com/en-us/dotnet/standard/frameworks - I can log a docs bug for that. I don't see that it's been specified anywhere.",
        "createdAt": "2025-01-14T16:03:28Z",
        "author": {
          "login": "baronfel"
        }
      },
      {
        "body": "@rwb196884 for reference, here is the main bit of code relating to multi-targeted builds: https://github.com/dotnet/msbuild/blob/27b56aea0f62ee13245d278d5427796fed7ef07a/src/Tasks/Microsoft.Common.CrossTargeting.targets#L109-L162\n\nWhen building, as @maridematte said you should expect more than one build of the project to occur:\n\n* one outer build to discover the values of `TargetFrameworks`\n* one 'inner' build per individual value of `TargetFrameworks`\n\nAs a result, it's very important to make sure that targets run in the correct context - this is why NuGet packages that ship MSBuild targets have both the `build` and `buildMultitargeting` directories - this enforces a separation between targets that can run in single-TFM and 'outer' builds vs those that should only run in 'inner' builds.\n\nIf you'd like to ensure that your target only runs when a single TFM has been specified, you probably need to add an additional check to your Condition like `'$(IsCrossTargetingBuild)' != 'true'`. `IsCrossTargetingBuild` is set to `true` if `TargetFrameworks` is present and no single `TargetFramework` has been chosen - so it's true in the outer build and unset/false-y in the inner builds. ",
        "createdAt": "2025-01-14T16:44:36Z",
        "author": {
          "login": "baronfel"
        }
      }
    ]
  }
}