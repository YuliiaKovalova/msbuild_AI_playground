{
  "number": 2442,
  "title": "_GenerateCompileDependencyCache is still consuming non-trivial time in design-time build",
  "body": "This was \"fixed\" here: https://github.com/Microsoft/msbuild/issues/2276, but with latest bits in master, I'm still seeing this target _and_ CoreCompile show up on the radar on an up-to-date build: https://github.com/dotnet/sdk/issues/1496.\r\n\r\nI thought CoreCompile was only supposed to be called on a dirty build?",
  "state": "OPEN",
  "createdAt": "2017-08-16T09:30:28Z",
  "updatedAt": "2025-06-02T08:26:55Z",
  "closedAt": null,
  "author": {
    "login": "davkean"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "Area: Performance",
    "Priority:2",
    "triaged"
  ],
  "comments": {
    "nodes": [
      {
        "body": "Hmm, it seems  CoreCompile is still being called when one of it's outputs doesn't exist:\r\n\r\n```\r\nTarget \"CoreCompile\" in file \"E:\\msbuild\\bin\\Release\\x86\\Windows_NT\\Output\\Roslyn\\Microsoft.CSharp.Core.targets\" from project \"BarBare.csproj\" (target \"Compile\" depends on it):\r\nBuilding target \"CoreCompile\" completely.\r\nOutput file \"obj\\Debug\\FooBar.UnitTest.dll\" does not exist.\r\n```\r\n\r\nWhich means that _GenerateCompileDependencyCache is basically running for nothing in that case.",
        "createdAt": "2017-08-16T09:37:39Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "I think we should decide what's quicker in the design-time build case; calling _GenerateCompileDependencyCache or generating the command-line args. Does _GenerateCompileDependencyCache actually save anything when we're just generating command-line args?",
        "createdAt": "2017-08-16T09:39:13Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "I still think I agree that skipping it during design-time builds is reasonable. It's there only to catch the case that a file on disk was added or deleted and if so run the compiler. I expect that just generating the command line should be cheap enough to do for all DT builds.\r\n\r\nThe `CoreCompile` inputs/outputs will cause it to run every time in your pre-actual-build example, as well as when any source file has been saved but the build hasn't been run yet. The combination of the two is probably common enough to provide additional weight for this.\r\n\r\n@davkean have you tried\r\n\r\n```diff\r\n-   <Target Name=\"_GenerateCompileDependencyCache\" DependsOnTargets=\"ResolveAssemblyReferences\">\r\n+   <Target Name=\"_GenerateCompileDependencyCache\" DependsOnTargets=\"ResolveAssemblyReferences\" Condition=\"'$(DesignTimeBuild)' != 'true'\">\r\n```",
        "createdAt": "2017-08-16T17:03:20Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald DesignTimeBuild is only set for new project system - so we need to come up with a combination of DesignTImeBuild and BuildingProject that avoids https://github.com/Microsoft/msbuild/issues/2417.",
        "createdAt": "2017-08-17T00:47:17Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "This target is consuming the 6th most design-time build time in our new telemetry, with a 95% percentile time of 23 milliseconds.",
        "createdAt": "2017-11-10T23:21:30Z",
        "author": {
          "login": "davkean"
        }
      }
    ]
  }
}