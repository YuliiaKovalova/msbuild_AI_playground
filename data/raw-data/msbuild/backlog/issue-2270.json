{
  "number": 2270,
  "title": "Removing metadata to avoid slow ITaskItem[] parameter handling",
  "body": "I've tracked it down to about 100ms ~ 115ms per `ITaskItem[]` parameter, both input and output. \r\nThe items being sent are the `ReferenceCopyLocalPaths` items, which together with metadata take 982 lines when printed by `/v:diag` in this particular project.\r\n\r\nI was quite surprised that it takes nearly that long to serialize the items and metadata, since I'm in-proc, but that aside... the clear solution is to not be sending that amount of metadata back and forth which the custom task doesn't need in the first place. I got the target down from 450ms to 110ms by changing the semantics of the output parameter and making it a `string[]`.\r\n\r\nThe part I'm having trouble with is that at minimum I need to send a tuple of (Identity, FullPath) for each item in `ReferenceCopyLocalPaths`. I can't figure out a way to do this. Any time I create a new group of items from `ReferenceCopyLocalPaths`, all the metadata comes along. There's got to be a way to create a new group with the same identity for each item and only `FullPath` metadata, right? I couldn't find a way to clear or reset metadata in the documentation.",
  "state": "CLOSED",
  "createdAt": "2017-07-07T13:38:49Z",
  "updatedAt": "2024-02-21T17:18:12Z",
  "closedAt": "2017-07-07T16:00:27Z",
  "author": {
    "login": "jnm2"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "(Why do I care about 110ms? Multiply that by 23 projects in the solution, and that's over two and a half seconds of waiting to run or debug, on top of whatever time it actually takes my task code to execute.)",
        "createdAt": "2017-07-07T13:41:06Z",
        "updatedAt": "2017-07-07T14:37:28Z",
        "author": {
          "login": "jnm2"
        }
      },
      {
        "body": "I feel like I'm missing some context here, based on the first couple of paragraphs of this issue. If this doesn't answer your question, can you be more explicit about what you're doing and what problem you're trying to solve?\r\n\r\nTo answer this:\r\n\r\n> Any time I create a new group of items from `ReferenceCopyLocalPaths`, all the metadata comes along. There's got to be a way to create a new group with the same identity for each item and only `FullPath` metadata, right? I couldn't find a way to clear or reset metadata in the documentation.\r\n\r\nHave you explored `KeepMetadata` or `RemoveMetadata` when creating a new item? They're documented [in the syntax documentation for Items](https://docs.microsoft.com/en-us/visualstudio/msbuild/item-element-msbuild) and in the [Item \"concepts\" page](https://docs.microsoft.com/en-us/visualstudio/msbuild/msbuild-items#BKMK_KeepMetadata). Feedback on what you were looking for to improve discoverability of those docs is welcome!\r\n\r\nNote that `FullPath` is [well-known Item metadata](https://docs.microsoft.com/en-us/visualstudio/msbuild/msbuild-well-known-item-metadata), and you can't prevent the output item having it. But I think listing it in `KeepMetadata` should be harmless and accomplish the stripping of all custom metadata that you want.",
        "createdAt": "2017-07-07T15:45:48Z",
        "updatedAt": "2017-07-07T15:45:48Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> Have you explored KeepMetadata or RemoveMetadata when creating a new item?\r\n\r\nThat's perfect! Only 92 lines are logged now and the overhead for this parameter is down to 12ms!\r\n\r\nI'm embarrassed that I didn't see it in the Item syntax documentation. I was in that page and the ItemGroup and Item Metadata pages and mainly following google searches for \"msbuild item remove metadata.\"\r\n\r\nThank you!",
        "createdAt": "2017-07-07T16:00:27Z",
        "updatedAt": "2017-07-07T16:01:34Z",
        "author": {
          "login": "jnm2"
        }
      },
      {
        "body": "The entire target now runs in 110ms. Pretty sweet!\r\n\r\n> I feel like I'm missing some context here, based on the first couple of paragraphs of this issue. \r\n\r\nMy problem is solved, though I am pretty curious why it takes 100ms to send 92 items with an average of 9.6 custom metadata properties per item from a target to custom task's `ITaskItem[]` parameter. Not sure what context would be helpful beyond that?",
        "createdAt": "2017-07-07T16:07:44Z",
        "updatedAt": "2017-07-07T16:09:49Z",
        "author": {
          "login": "jnm2"
        }
      },
      {
        "body": "@jnm2 What log level (and what logger) are you using when measuring those timings? The console and file loggers do definitely slow the build down when cranked up to `Diagnostic`--that's part of the reason we introduced the binary logger.",
        "createdAt": "2017-07-07T16:09:56Z",
        "updatedAt": "2017-07-07T16:09:56Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald Ad-hoc `msbuild /v:diag > out.log`. It didn't occur to me that might be messing with the timings! How bad is it? Is there a better way to time just one target, which is the only target I care about?",
        "createdAt": "2017-07-07T16:13:19Z",
        "updatedAt": "2017-07-07T16:13:19Z",
        "author": {
          "login": "jnm2"
        }
      },
      {
        "body": "There is! Check out the logger parameter [`PerformanceSummary`](https://docs.microsoft.com/en-us/visualstudio/msbuild/msbuild-command-line-reference#switches-for-loggers).",
        "createdAt": "2017-07-07T16:17:09Z",
        "updatedAt": "2017-07-07T16:17:09Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "That's really cool! Apparently the entire target is running in 100\u00b15ms. Let me time ReferenceCopyLocalPaths on its own. ",
        "createdAt": "2017-07-07T16:25:12Z",
        "updatedAt": "2017-07-07T16:25:12Z",
        "author": {
          "login": "jnm2"
        }
      },
      {
        "body": "@rainersigwald `ReferenceCopyLocalPaths` takes 0 ms. \ud83d\ude01 \r\n\r\nSorry for the rookie mistakes. I really appreciate you taking the time to educate me here.",
        "createdAt": "2017-07-07T16:28:29Z",
        "updatedAt": "2017-07-07T16:28:29Z",
        "author": {
          "login": "jnm2"
        }
      }
    ]
  }
}