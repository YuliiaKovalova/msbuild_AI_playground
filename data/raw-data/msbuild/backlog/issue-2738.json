{
  "number": 2738,
  "title": "Support \"portable\" (.NET Standard 2.0) tasks",
  "body": "Currently, MSBuild targets .NET Standard 1.3 and .NET Framework 4.6.  If you want to build a task that runs on both .NET Core and full framework MSBuild, you can reference the .NET Core versions of the MSBuild libraries, which target .NET Standard 1.3.  When running on full framework MSBuild, these references would bind to the full framework implementations (similar to the \"bait and switch\" technique).\r\n\r\nAs part of [upgrading to .NET Core 2.0](https://github.com/Microsoft/msbuild/issues/2706), the .NET Core versions of the MSBuild libraries will target .NET Standard 2.0.  This means they won't load on .NET 4.6.  They can load on .NET 4.6.1, but the proper .NET Standard facades need to be available.",
  "state": "CLOSED",
  "createdAt": "2017-11-21T23:28:36Z",
  "updatedAt": "2024-02-21T17:15:35Z",
  "closedAt": "2022-01-21T20:01:32Z",
  "author": {
    "login": "dsplaisted"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Does the world get simpler here if we change the minimum required desktop version of MSBuild to be 4.6.1? ",
        "createdAt": "2017-11-27T17:38:32Z",
        "updatedAt": "2017-11-27T17:38:32Z",
        "author": {
          "login": "jaredpar"
        }
      },
      {
        "body": "I've resolved this with my latest changes.  GenAPI creates source files which are used to create reference assemblies that go in the NuGet packages.  The MSBuild APIs themselves are still compatible with .NET Standard 1.3, so I am compiling the reference assemblies for .NET Standard 1.3 in addition to .NET 4.6 and 2.0, and putting them all in the NuGet package.",
        "createdAt": "2018-01-08T04:22:23Z",
        "updatedAt": "2018-01-08T04:22:23Z",
        "author": {
          "login": "dsplaisted"
        }
      },
      {
        "body": "It looks like this may be a problem once again.  Enabling binary serialization is causing types to be used in public APIs which aren't available in .NET Standard 1.3.",
        "createdAt": "2018-01-18T19:33:36Z",
        "updatedAt": "2018-01-18T19:33:36Z",
        "author": {
          "login": "dsplaisted"
        }
      },
      {
        "body": "Cross-linking this with https://github.com/dotnet/sdk/issues/1855#issuecomment-359918270\r\n\r\nby @ericstj \r\n> the bigger problem here is that the whole premise is busted: NETStandard libraries themselves aren't publishable/runnable since they may depend on packages with framework specific implementations and selecting at runtime between frameworks isn't something that any framework understands nor is it persisted by NuGet.",
        "createdAt": "2018-01-23T20:34:58Z",
        "updatedAt": "2018-01-23T20:34:58Z",
        "author": {
          "login": "dasMulli"
        }
      },
      {
        "body": "This mostly works today: if your task has no references outside of .NET Standard 2.0 itself, it'll work fine on both flavors of MSBuild.\r\n\r\nThis part remains\r\n\r\n> NETStandard libraries themselves aren't publishable/runnable since they may depend on packages with framework specific implementations\r\n\r\nAnd we should still publish better guidance (#4198).",
        "createdAt": "2022-01-21T20:01:32Z",
        "updatedAt": "2022-01-21T20:01:32Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}