{
  "number": 2476,
  "title": "Broken behavior of item meta data access with MSBuild 15.3.409.57025",
  "body": "I get the following build error with the latest MSBuild version:\r\n\r\n> C:\\Development\\ws\\Main\\Environment\\Targets\\TomSun.Targets.SmartInclude.targets(11,7): error MSB4184: The expression \"[S\r\nystem.IO.File]::ReadAllText(%(FullPath))\" cannot be evaluated. Could not find file 'C:\\Development\\ws\\Main\\Environment\\\r\nBuilds\\%(FullPath)'. [C:\\Development\\ws\\Main\\Environment\\Builds\\BuildAndPlugins.csproj]\r\n\r\nThe itemgroup that contains the code which leads to the error:\r\n```xml\r\n  <ItemGroup>\r\n    <SmartIncludeContent Include=\"@(SmartInclude)\">\r\n      <Content>$([System.IO.File]::ReadAllText(%(FullPath)))</Content>\r\n      <IncludeType>$([System.String]::new(%(Content)).Split('|').GetValue(0))</IncludeType>\r\n      <DirectoryPart>$([System.String]::new(%(Content)).Split('|').GetValue(1))</DirectoryPart>\r\n      <FilePart>$([System.String]::new(%(Content)).Split('|').GetValue(2))</FilePart>\r\n      <DirectoryRelative>$([System.IO.Path]::Combine($(MSBuildProjectDirectory),%(DirectoryPart)))</DirectoryRelative>\r\n      <DirectoryAbsolute>$([System.IO.Path]::GetFullPath(%(DirectoryRelative)))</DirectoryAbsolute>\r\n      <Files>$([System.IO.Directory]::GetFiles(%(DirectoryAbsolute),%(FilePart),SearchOption.AllDirectories))</Files>\r\n      <OriginalRelativeDir>%(RelativeDir)</OriginalRelativeDir>\r\n      <LinkRequired>$([System.String]::new(%(Content)).Contains('..\\'))</LinkRequired>\r\n      <Link Condition=\"%(LinkRequired)\">%(OriginalRelativeDir)%(FileName)%(Extension)</Link>\r\n  </SmartIncludeContent>\r\n    <SmartIncludeFiles Include=\"@(SmartIncludeContent -> Metadata('Files'))\">\r\n      \r\n    </SmartIncludeFiles>\r\n\r\n  </ItemGroup>\r\n```\r\n\r\n\r\n \r\nThe itemgroup is defined directly under the project node, not within a target. It seems that accessing/evaluating item meta data within the itemgroup itself doesn't work anymore or the processing order of property functions and item meta data evaluation changed. I didn't have such issues with the previous MSBuild versions (<= MSBuild of VS2017Update2). Is that a known bug? Is that an intended behavior change? (Don't hope so)\r\nUnfortunately that bug breaks my build at many places. Thats just one example where it hits me.\r\n\r\nIs there a way to get back the old MSBuild behavior when you have already installed VS2017 Update 3?\r\nOh I just recognized that it also prevents me from opening the projects in Visual Studio. Which means i can't do anything anymore with Update 3 installed. I really need help on this. \r\n\r\nUpdate:\r\nIt seems that the issue had been found here #1932 and the guys dealing with it thought it is fixed, but from my point of view it is not fixed.\r\n\r\nUpdate2:\r\nI played a bit around, here is another example. There seem to be different behaviors between the property functions (e.g. string::new and MSBuild::Add):\r\n\r\n```xml\r\n\r\n  <SmartProjectReference Include=\"@(SmartProjectReferenceWorkaround2)\">\r\n      <Ok1>$([System.String]::new('%(HelpIndex)'))</Ok1>\r\n      <Ok2>$([System.String]::new('%(StartSearchPatternLength)'))</Ok2>\r\n      <Ok3>$([MSBuild]::Add(1,2 ))</Ok3>\r\n      <Fails>$([MSBuild]::Add(%(HelpIndex),%(StartSearchPatternLength) ))</Fails>\r\n     </SmartProjectReference>\r\n```\r\nOk1-3 do what you would expect. They evaluate and calculate fine. \r\nOk1 and Ok2 were the cases been fixed with #1932 \r\nHowever, the add call for the MetaValue 'Fails' leads to the following build error:\r\n\r\n> Invalid static method invocation syntax: \"[MSBuild]::Add(%(HelpIndex),%(StartSearchPatternLength) )\". Method '[MSBuild]::Add' not found. Static method invocation should be of the form: $([FullTypeName]::Method()), e.g. $([System.IO.Path]::Combine(`a`, `b`)).\r\n\r\nUpdate3:\r\nI could reduce the issue down to such a simple, strange difference between two property functions:\r\n\r\n```xml\r\n <SimpleSample>\r\n      <Value>5</Value>\r\n      <Ok>$([System.String]::new('%(Value)'))</Ok>\r\n      <BuildFailure>$([System.Int32]::Parse('%(Value)'))</BuildFailure>\r\n    </SimpleSample>\r\n```",
  "state": "OPEN",
  "createdAt": "2017-08-26T12:12:11Z",
  "updatedAt": "2024-02-21T16:35:56Z",
  "closedAt": null,
  "author": {
    "login": "TFTomSun"
  },
  "labels": [
    "bug",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Anyone here? That issue breaks the build of existing projects and I didn't find a way to go back to VS2017 Update 2. I would really appreciate any feedback.\r\nHere is a project where I broke down the issue to its core.  That project can be opened and build in MSBuild/VS Versions < 2017.3 \r\n[PropertyFunctionsInItemGroupBug.zip](https://github.com/Microsoft/msbuild/files/1272847/PropertyFunctionsInItemGroupBug.zip)\r\n",
        "createdAt": "2017-09-03T10:28:29Z",
        "updatedAt": "2017-09-03T10:28:29Z",
        "author": {
          "login": "TFTomSun"
        }
      },
      {
        "body": "@KirillOsenkov can you please have a look on the issue. It is very important for me to know whether and when it will be fixed. It's very easy to reproduce it. In all versions of Visual Studio up to VS2017 Update 2 the samples (e.g. see update 3) worked. With VS2017 Update 3 using property functions within item meta data breaks the build in most of the cases.",
        "createdAt": "2017-10-26T19:33:29Z",
        "updatedAt": "2017-10-26T19:33:29Z",
        "author": {
          "login": "TFTomSun"
        }
      },
      {
        "body": "@cdmihai @AndyGerlicher ",
        "createdAt": "2017-10-26T20:38:26Z",
        "updatedAt": "2017-10-26T20:38:26Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "Another instance is `$([MSBuild]::GetRegistryValue(`%(Identity)`, ``))`",
        "createdAt": "2017-11-09T17:48:06Z",
        "updatedAt": "2017-11-09T17:48:06Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "Why this fails: at operation construction time, the metadata has properties expanded [to search for potential item references hidden behind properties](https://github.com/Microsoft/msbuild/blob/master/src/Build/Evaluation/LazyItemEvaluator.cs#L540-L562). This also expands property functions. If metadata references other metadata, it does not get expanded, thus sending the metadata reference expression to the property function. \r\n\r\nWhy do some property functions referencing metadata still work? By luck\r\n- `$([System.String]::new('%(M)'))` works because there is special casing for constructors. It then binds to String::new(byte[]) and evaluates to \"%(M)\"\r\n- `$([System.Environment]::GetEnvironmentVariable('%(M)'))` works because it returns null\r\n\r\nOne fix that I can think of is to do a \"mock\" evaluation of metadata at construction time.",
        "createdAt": "2017-11-09T17:51:51Z",
        "updatedAt": "2017-11-09T17:52:51Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "Hi, can anyone tell me when this issue will be fixed? It breaks my build since August already. ",
        "createdAt": "2017-12-27T10:17:35Z",
        "updatedAt": "2017-12-27T10:18:12Z",
        "author": {
          "login": "TFTomSun"
        }
      },
      {
        "body": "@cdmihai  I'm running into the same issue. Is there any update on this?",
        "createdAt": "2018-04-23T13:43:38Z",
        "updatedAt": "2018-04-23T13:43:38Z",
        "author": {
          "login": "theknut"
        }
      },
      {
        "body": "Is this a regression? If yes, what's the lastest version of MSBuild that didn't have this bug?",
        "createdAt": "2018-10-05T05:07:59Z",
        "updatedAt": "2018-10-05T05:07:59Z",
        "author": {
          "login": "knocte"
        }
      },
      {
        "body": "@knocte I think in visual studio 2017 update 2 it was still fine. I don't know the msbuild version that it used",
        "createdAt": "2018-10-05T05:17:58Z",
        "updatedAt": "2018-10-05T05:17:58Z",
        "author": {
          "login": "TFTomSun"
        }
      }
    ]
  }
}