{
  "number": 653,
  "title": "Cannot build WPF app using Microsoft.Build.* version 14",
  "body": "I have a WPF app using C# 6 features. My understanding is that necessitates the use of MSBuild 14. However, if I reference version 14 of the Microsoft.Build\\* assemblies, I cannot successfully build a WPF project.\n\nInstead I get an InvalidCastException that `MarkupCompilePass1` cannot be casted to an `ITask`:\n\n```\nSystem.InvalidCastException occurred\nMessage: Exception thrown: 'System.InvalidCastException' in Microsoft.Build.dll\nAdditional information: Unable to cast object of type 'Microsoft.Build.Tasks.Windows.MarkupCompilePass1' to type 'Microsoft.Build.Framework.ITask'.\n```\n\nA full and and basic sample of this can be found [here](https://github.com/agc93/msbuild-sample), but the steps can be summarised as follows:\n1. New blank solution\n2. New WPF application (from VS template)\n3. New Console Application (from VS template)\n4. Add references to v14 MSBuild libraries through Add References > Extensions\n5. Attempt to build WPF application project from console app\n\n```\n            var pc = new ProjectCollection();\n            var path = Directory.CreateDirectory(Path.GetTempPath() + Guid.NewGuid().ToString(\"N\") + \"\\\\\");\n            var props = new Dictionary<string, string>\n            {\n                {\"Configuration\", \"Debug\"},\n                {\"Platform\", \"AnyCPU\"},\n                {\"OutputPath\", path.FullName}\n            };\n            var buildParams = new BuildParameters(pc)\n            {\n                DetailedSummary = true,\n                Loggers = new List<ILogger> {new ConsoleLogger()},\n                DefaultToolsVersion = \"14.0\"\n            };\n            var targets = new List<string> {\"PrepareForBuild\", \"Clean\", \"Build\", \"Publish\"};\n            var reqData = new BuildRequestData(GetProjectPath(), props, \"14.0\", targets.ToArray(), null);\n                Log(\"Starting MSBuild build\");\n                BuildManager.DefaultBuildManager.BeginBuild(buildParams);\n                var buildResult = BuildManager.DefaultBuildManager.BuildRequest(reqData);\n                Log($\"MSBuild build complete: {buildResult.OverallResult}\");\n\n```\n\nThis code will fail with an `InvalidCastException` and the build will fail with no error message.\n\nIs this expected behaviour? Are there extra targets now?\n\nPlease let me know if you need more information.\n",
  "state": "CLOSED",
  "createdAt": "2016-05-25T17:01:12Z",
  "updatedAt": "2024-02-21T17:28:03Z",
  "closedAt": "2016-05-26T14:21:46Z",
  "author": {
    "login": "agc93"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Thanks for an excellent bug report, with repro! This isn't something we can fix with a change to MSBuild itself, but you can fix the problem in your client application.\n\nSince `PresentationBuildTasks` (where the XAML/WPF tasks live) was compiled against an old version of MSBuild, this error arises when the application can't handle multiple different definitions of `ITask` (the new one from your v14.0 references, and the old one transitively from WPF).\n\nFortunately, this problem isn't unique to MSBuild, and .NET provides us a solution: [Binding Redirects](https://msdn.microsoft.com/en-us/library/7wd6ex19%28v=vs.110%29.aspx). I was able to make your repro executable work by providing this `app.config` file:\n\n``` XML\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<configuration>\n  <startup>\n    <supportedRuntime version=\"v4.0\" sku=\".NETFramework,Version=v4.5.2\" />\n  </startup>\n  <runtime>\n    <assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\">\n      <dependentAssembly>\n        <assemblyIdentity name=\"Microsoft.Build.Framework\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\"/>\n        <bindingRedirect oldVersion=\"0.0.0.0-99.9.9.9\" newVersion=\"14.0.0.0\"/>\n      </dependentAssembly>\n      <dependentAssembly>\n        <assemblyIdentity name=\"Microsoft.Build.Framework\" culture=\"neutral\" publicKeyToken=\"b03f5f7f11d50a3a\" />\n        <bindingRedirect oldVersion=\"0.0.0.0-99.9.9.9\" newVersion=\"14.0.0.0\" />\n      </dependentAssembly>\n      <dependentAssembly>\n        <assemblyIdentity name=\"Microsoft.Build\" culture=\"neutral\" publicKeyToken=\"b03f5f7f11d50a3a\" />\n        <bindingRedirect oldVersion=\"0.0.0.0-99.9.9.9\" newVersion=\"14.0.0.0\" />\n      </dependentAssembly>\n    </assemblyBinding>\n  </runtime>\n</configuration>\n```\n\n`MSBuild.exe` itself uses the same mechanism: check out `C:\\Program Files (x86)\\MSBuild\\14.0\\Bin\\MSBuild.exe.config` on your machine.\n",
        "createdAt": "2016-05-25T17:40:25Z",
        "updatedAt": "2016-05-25T17:40:25Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Awesome, I just put in a binding redirect and the build went through! Thanks heaps.\n\nIf you don't mind the quizzing: how does .NET determine where to load redirects from? For example, if I have a Console app calling a Class Library (with the Microsoft.Build references) building _something_, do the redirects need to go in the app.config for the console app (the running app) or the library (the app with the references)?\n",
        "createdAt": "2016-05-26T04:22:28Z",
        "updatedAt": "2016-05-26T04:22:28Z",
        "author": {
          "login": "agc93"
        }
      },
      {
        "body": "> how does .NET determine where to load redirects from? \n\nI believe it's a property of the _executable_, and the only place the loader looks for redirects is `{executablepath}\\{executablename}.exe.config`. But I don't know the area deeply and I would not be surprised if that's wrong!\n\nI'm going to close this issue since you're up and running.\n",
        "createdAt": "2016-05-26T14:21:45Z",
        "updatedAt": "2016-05-26T14:21:45Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I've used the code that @agc93 provided and modified it using the instructions for [updating an existing application to MSBuild 15](https://docs.microsoft.com/en-us/visualstudio/msbuild/updating-an-existing-application?view=vs-2017). I believe I've done everything correctly, but I just can't seem to build a WPF project, or any solution containing a WPF project. I always get the following:\r\n\r\n`Target MarkupCompilePass1:\r\n    C:\\WINDOWS\\Microsoft.NET\\Framework\\v4.0.30319\\Microsoft.WinFx.targets(268,9): error MC1000: Unknown build error, 'Object reference not set to an instance of an object.'\r\nDone building target \"MarkupCompilePass1\" in project \"WpfApplication.csproj\" -- FAILED.`\r\n\r\nYou can find an updated [repo](https://github.com/lancesnead/msbuild-sample) with [my changes here](https://github.com/agc93/msbuild-sample/compare/master...lancesnead:master).\r\n\r\nI'm in the process of updating our internal build application to use MSBuild 15, but am currently stuck trying to figure out this error. Any help you could provide would be greatly appreciated!\r\n",
        "createdAt": "2019-08-08T19:08:21Z",
        "updatedAt": "2019-08-08T19:09:01Z",
        "author": {
          "login": "lancesnead"
        }
      }
    ]
  }
}