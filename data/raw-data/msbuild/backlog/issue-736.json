{
  "number": 736,
  "title": "Enhance OM: Non-exploding item APIs",
  "body": "Some item operations explode the list. We have to provide alternative behavior that does not explode list.\n\n```\nThe following comment is copy pasted from the evaluator:\n///A ProjectItemElement could have resulted in several items if it contains wildcards or item or property expressions.\n///Before any edit to a ProjectItem (remove, rename, set metadata, or remove metadata) this must be called to make\n///sure that the edit does not affect any other ProjectItems originating in the same ProjectItemElement.\nProject.SplitItemElementIfNecessary(ProjectItemElement itemElement)\n```\n\n**Project.RemoveItem(ProjectItem) (1-2 weeks)**\n- Scenarios\n  - User deletes file via file system or via VS\n    - CPS reacts by calling RemoveItem on all ProjectItems with that value\n- The current Project.RemoveItem(ProjectItem) \n  - Removes item inside the Include attribute\n  - Explodes the item tag if it evaluated to multiple items\n- Modifications to not explode\n  - If Include contains only (globs and literal strings) \n    - If item is covered by glob, then don't do anything\n    - If item is covered by literal list, remove all the literals that have the same value as the item to remove\n      - Extra credit for removing literals that have properties inside of them (Include=\"foo$(prop)\")\n  - Else (items and properties present: Include=\"*.a;@(AnItem);$(AProperty);3.a;2.a;3.a\") \n    - Option1\n      - Apply previous behavior (explode)\n      - Justification\n        - If you don't explode and add an exclude, csproj becomes bloated over time as the user deletes elements\n        - CPS should call RemoveItem on the correct item tags (e.g. call RemoveItem on tags that reference the item directly via globs / literals, and not on the tags that indirectly reference that item)\n    - Option2\n      - Split the item tag in 2 tags:\n        - A tag with just the globs and the literals, and then recursivelly call RemoveItem on this tag\n        - A tag with the indirect references and add the item to remove in the exclude\n    - Option3\n      - Split the item tag in more tags:\n        - A tag with just the globs and the literals, and then recursivelly call RemoveItem on this tag\n        - Explode the items coming from indirect references \n\n**Add Exclude for Item (1 week) - CPS currently has own implementation. We could add our own so they don't have to implement it**\n- Scenarios\n  - User wants to exclude a file from the build\n  - CPS wants to add an exclude to implement project model semantics\n- Inputs\n  - Overload1\n    - Item - the ProjectItem whose underlying ProjectItemElement needs to have the exclude applied to\n  - Overload2\n    - Element - the ProjectItemElement to append the exclude on\n    - directoryToIgnore - full path to a directory to ignore. The exclude attribute gets appended with \"directoryToIgnore/*_/_.*\"\n- Returns\n  -  Same implementation as RemoveItem:  true if item was present in the project\n- Remarks\n  - Edits the underlying xml for the specified item to exclude the item's evaluated value / directory\n  - Does not do anything if the exclude tag already has an exclude containing it\n\n``` c#\n//exclude a single file, and you know it's corresponding ProjectItem\nbool ExcludeItem(ProjectItem item)\n\n//exclude a whole directory, and you know the corresponding ProjectItemElement where to add the exclude\nbool ExcludeItem(ProjectItemElement element, string directoryToIgnore)\n```\n\n**ProjectItem.(Set|Remove)metadata (TODO)**\nIn the presence of globs, the new Item Update attribute should be used instead of these.\n\n**ProjectItem.Rename (~1-2 weeks)**\n- Modifications to not explode\n  - If Include contains only (globs and literal strings) \n    - Same as remove, but rename literals instead of delete.\n    - [?] what to do if old name is in glob but new name is not in glob?\n      - Option1: Add the new name that is not in glob as a literal\n      - Option2: don't do anything\n    - [?] what to do if literal incorporates a property\n      - Don't do anything\n      - Raise exception\n      - Explode the item out and rename, potentially breaking the build logic\n  - Else (items and properties present: Include=\"*.a;@(AnItem);$(AProperty);3.a;2.a;3.a\") \n    - Option1 from RemoveItem\n      - Apply previous behavior (explode)\n      - Justification\n        - If you don't explode and add an exclude, csproj becomes bloated over time as the user deletes elements\n        - CPS should call RemoveItem on the correct item tags (e.g. call RemoveItem on tags that reference the item directly via globs / literals, and not on the tags that indirectly reference that item)\n    - Option3 from RemoveItem\n      - Split the item tag in more tags:\n        - A tag with just the globs and the literals, and then recursively call Rename on this tag\n        - Explode the items coming from indirect references and rename \n\n**Project.AddItem (TODO)**\n- Only works (does not explode) when:\n  - the existing item or item group has no condition\n  - the existing item tag has no excludes\n  - neither the item nor the considered item tag have metadata\n\n**Flag to propagate item operations instead of exploding (2 weeks)**\n- [?] do we want this?\n- Recursively propagate the above operations on indirect references\n  - act on glob and literal lists\n  - Recursivelycall the same operation on referenced items\n  - explode referenced properties \n    - Do string magic inside the properties. Recursively, since properties can reference each other. \n",
  "state": "CLOSED",
  "createdAt": "2016-06-27T22:36:44Z",
  "updatedAt": "2024-02-21T17:27:26Z",
  "closedAt": "2016-10-11T17:17:06Z",
  "author": {
    "login": "cdmihai"
  },
  "labels": [
    "Feature - Globbing",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "cdmihai"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "I'd say that the minimum work we need to do here is provide an option to just fail if the requested operation _would_ explode the glob--then a caller could reconsider and do something else. That wouldn't require any additional MSBuild language concepts, but would allow smarter behavior. Of course, it also makes the caller more complex.\n",
        "createdAt": "2016-06-28T13:26:45Z",
        "updatedAt": "2016-06-28T13:26:45Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "First implementation: throw instead of explode\nNext: do something smarter\n",
        "createdAt": "2016-08-19T21:38:01Z",
        "updatedAt": "2016-09-16T16:54:39Z",
        "author": {
          "login": "cdmihai"
        }
      }
    ]
  }
}