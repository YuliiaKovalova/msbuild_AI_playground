{
  "number": 3955,
  "title": "Fails building RESX when it contains a 3rd party type not present in GAC or HintPath, but present through NuGet packageReference",
  "body": "### Steps to reproduce\r\n\r\nThis is a .NET Framework 4.6.1 WinForms project.\r\nUse a 3rd party library that injects its types into RESX file. In my case I use Developer Express WinForms suite. Everything is fine while DevExpress assemblies are in GAC and probably also works when they are accessible through a HintPath.\r\nHowever, it doesn't work when NuGet feed is used for DevExpress packages (in my case also packageReference is used).\r\n\r\nRESX file excerpt\r\n```xml\r\n<assembly alias=\"DevExpress.Utils.v18.1\" name=\"DevExpress.Utils.v18.1, Version=18.1.7.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a\" />\r\n  <data name=\"imageCollection.ImageStream\" type=\"DevExpress.Utils.ImageCollectionStreamer, DevExpress.Utils.v18.1\" mimetype=\"application/x-microsoft.net.object.bytearray.base64\">\r\n    <value>\r\n        SOMEVALUEHERE\r\n</value>\r\n  </data>\r\n```\r\nCommand line\r\n```\r\nMSBuild.exe /v:minimal /p:Configuration=\"Release\" /target:Build \"PATH/MYSOLUTION.sln\" /m\r\n```\r\n### Expected  behavior\r\n\r\nMSBuild should find the reference to DevExpress.Utils.v18.1 assembly through NuGet location.\r\n\r\n### Actual behavior\r\n\r\nBuild fails with\r\nSOMEPATH\\FILE.resx(133,5): error MSB3103: Invalid Resx file. Type DevExpress.Utils.ImageCollectionStreamer, DevExpress.Utils.v18.1, Version=18.1.7.0, Culture=neutral, PublicKeyToken=b88d1754d700e49a in the data at line 127, position 4 cannot be located. Line 133, position 5. [PATH\\PROJECT.csproj]\r\n\r\n### Environment data\r\n\r\nMSBuild is run from 'Microsoft Visual Studio/2017/BuildTools/MSBuild/15.0/Bin/amd64'.\r\n\r\n### Possible workaround\r\n\r\nIs there a way to let MSBuild know the path of said assembly through arguments as a workaround for now?",
  "state": "CLOSED",
  "createdAt": "2018-11-23T16:38:41Z",
  "updatedAt": "2024-02-21T17:10:21Z",
  "closedAt": "2018-11-29T15:11:21Z",
  "author": {
    "login": "MihaMarkic"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "After experimenting and digging into this error I found out that it's a wrong and misleading error. The real error was in solution configuration but it was manifesting, oddly, as the error mentioned in the post above. Oh, well.",
        "createdAt": "2018-11-29T15:11:21Z",
        "updatedAt": "2018-11-29T15:11:21Z",
        "author": {
          "login": "MihaMarkic"
        }
      },
      {
        "body": "@MihaMarkic any chance you remember what was the issue in the end? Getting the same problem here at the moment.\r\nThanks in advance",
        "createdAt": "2019-11-27T17:47:35Z",
        "updatedAt": "2019-11-27T17:47:35Z",
        "author": {
          "login": "albigi"
        }
      },
      {
        "body": "@albigi I wish I was younger :) Check out if all projects in solution are checked for building. Also create a minimal repro project (which would build I assume) and compare the csproj files.",
        "createdAt": "2019-11-28T09:20:24Z",
        "updatedAt": "2019-11-28T09:20:24Z",
        "author": {
          "login": "MihaMarkic"
        }
      },
      {
        "body": "In case someone else hits this one: For me it was caused by the fact that I referenced a netcore DevExpress package in a .NET 4.7 framework app. I founds this after many hours by looking at the references passed to resgen.exe during the build process (set verbosity to detailed). Not at all obvious from the original error message...",
        "createdAt": "2021-02-18T20:49:04Z",
        "updatedAt": "2021-02-18T20:49:04Z",
        "author": {
          "login": "svenschmidt75"
        }
      }
    ]
  }
}