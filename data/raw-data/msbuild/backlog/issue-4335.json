{
  "number": 4335,
  "title": "RAR should call Path.GetFullPath() on the AppConfigFile parameter",
  "body": "When the path to the app.config file is an absolute path that contains a `\\\\` double backslash RAR doesn't find the app.config file.\r\n\r\nHere RAR is trying to open the app.config file without normalizing the path:\r\nhttps://github.com/Microsoft/msbuild/blob/64a5b6be6d4c1a45c02537a08dca8dd1db09f7f2/src/Tasks/AppConfig/AppConfig.cs#L26\r\n\r\nIf an XmlReader.Create is passed an absolute path with `\\\\..` then it's not normalized correctly:\r\n```\r\nvar reader = XmlReader.Create(@\"C:\\a\\b\\\\..\\c\"); // will try to read from C:\\a\\b\\c instead of C:\\a\\c\r\n```\r\n\r\nThis is because `XmlUrlResolver` doesn't do it right:\r\n```\r\n            var resolver = new XmlUrlResolver();\r\n            var uri = resolver.ResolveUri(null, @\"C:\\a\\b\\\\..\\c\"); // C:/a/b/c, instead of C:/a/c\r\n```\r\n\r\nThe attached .csproj:\r\n[RarAppConfigPath.zip](https://github.com/Microsoft/msbuild/files/3119300/RarAppConfigPath.zip)\r\n\r\nFails to build with:\r\n```\r\nC:\\Temp\\RarAppConfigPath\\\\A\\B\\\\..\\app.config : error MSB3249: Application Configuration file \"C:\\Temp\\RarAppConfigPat\r\nh\\\\A\\B\\\\..\\app.config\" is invalid. Could not find file 'C:\\Temp\\RarAppConfigPath\\A\\B\\app.config'.\r\n```\r\n\r\nNote how it should be finding `A\\app.config` but is instead looking for `A\\B\\app.config` which doesn't exist.",
  "state": "CLOSED",
  "createdAt": "2019-04-26T00:44:54Z",
  "updatedAt": "2024-02-21T17:08:35Z",
  "closedAt": "2020-01-24T23:03:54Z",
  "author": {
    "login": "KirillOsenkov"
  },
  "labels": [
    "help wanted",
    "Area: Tasks",
    "Area: Task: Resolve Assembly References (RAR)",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "KirillOsenkov"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Is the discrepancy between Path.GetFullPath vs XmlUrlResolver a BCL bug in the latter?",
        "createdAt": "2019-04-26T15:14:18Z",
        "updatedAt": "2019-04-26T15:14:18Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "Yup, certainly a bug in XmlUrlResolver. It should ignore the second backslash.",
        "createdAt": "2019-04-26T18:07:26Z",
        "updatedAt": "2019-04-26T18:07:26Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "^ @krwq",
        "createdAt": "2019-04-29T20:51:51Z",
        "updatedAt": "2019-04-29T20:51:51Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "Xml only does following:\r\n\r\nhttps://github.com/dotnet/corefx/blob/master/src/System.Private.Xml/src/System/Xml/XmlResolver.cs#L40-L45\r\nWhich possibly is related with https://github.com/dotnet/corefx/commit/f2df042b1b1772920286e0d3a87830315d6c2562 (cc: @tmds)\r\n\r\n<s>Does anyone have rights to move this issue to corefx?</s>\r\n\r\nI'm wondering should Uri even normalize double slashes? IMO this is msbuild specific",
        "createdAt": "2019-04-30T01:58:00Z",
        "updatedAt": "2019-04-30T02:00:51Z",
        "author": {
          "login": "krwq"
        }
      },
      {
        "body": "@krwq what does the latest corefx output here?\r\n\r\n```\r\nvar resolver = new XmlUrlResolver();\r\nvar uri = resolver.ResolveUri(null, @\"C:\\a\\b\\\\..\\c\"); // C:/a/b/c (which is incorrect, should be C:/a/c)\r\n```\r\n\r\n`Path.GetFullPath(@\"C:\\a\\b\\\\..\\c\")` returns `C:\\a\\c` which is correct.",
        "createdAt": "2019-04-30T02:07:02Z",
        "updatedAt": "2019-04-30T02:07:02Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "@KirillOsenkov note that the parameter to resolver is uri represented as string not a path:\r\n`new Uri(@\"C:\\a\\b\\\\..\\c\", UriKind.RelativeOrAbsolute).ToString()` => `file:///C:/a/b/c`\r\n",
        "createdAt": "2019-04-30T02:23:23Z",
        "updatedAt": "2019-04-30T02:23:23Z",
        "author": {
          "login": "krwq"
        }
      },
      {
        "body": "Oh, are you saying that it's the Uri constructor, and not the XmlUrlResolver?",
        "createdAt": "2019-04-30T02:40:19Z",
        "updatedAt": "2019-04-30T02:40:19Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "Yes, indeed, so it's a bug in Uri then...",
        "createdAt": "2019-04-30T02:42:52Z",
        "updatedAt": "2019-04-30T02:42:52Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "Yes - cc: @wtgodbe",
        "createdAt": "2019-04-30T03:35:23Z",
        "updatedAt": "2019-04-30T03:35:23Z",
        "author": {
          "login": "krwq"
        }
      },
      {
        "body": "http uris show the same behavior:\r\n`new Uri(\"http://www.google.com/a/b//../c\").ToString()` returns `\"http://www.google.com/a/b/c\"`",
        "createdAt": "2019-04-30T07:21:47Z",
        "updatedAt": "2019-04-30T07:21:47Z",
        "author": {
          "login": "tmds"
        }
      },
      {
        "body": "Looking",
        "createdAt": "2019-04-30T17:41:18Z",
        "updatedAt": "2019-04-30T17:41:18Z",
        "author": {
          "login": "wtgodbe"
        }
      },
      {
        "body": "I believe this behavior is by-design. As per [RFC 3986 Section 3.3](https://tools.ietf.org/html/rfc3986#section-3.3), we define a `path` in a URI as a sequence of path `segments`, separated by the `/` character. One valid path segment is the empty string, so when we see `//` in a path, we'd treat the empty string between the two slashes as a segment. Therefore the `..` that comes after `//` would reference that empty string path and eliminate it, and correctly convert `/a/b//../c` to `a/b/c`. \r\n\r\nThis occurs in code here: https://github.com/dotnet/corefx/blob/be8feef62c5a3f14c13b35e67a523765b84a770e/src/System.Private.Uri/src/System/Uri.cs#L5061-L5072. This loop iterates backwards from the end of the URI string to the beginning. At the moment the loop is examining the first of the two slashes, it knows it's just seen a `/..` sequence, and should therefore eliminate the next path segment it sees. As it is currently examining a `/`, it knows that the string in between the current `/` and the subsequent `/` is the segment to be eliminated (in this case, the empty string), so it copies the path segment that followed the `/..` (in this case, `c`) to the index after the current `/`.\r\n\r\nCC @wfurt @davidsh @karelz, in case they disagree with my assessment.",
        "createdAt": "2019-04-30T20:09:43Z",
        "updatedAt": "2019-04-30T20:09:43Z",
        "author": {
          "login": "wtgodbe"
        }
      },
      {
        "body": "There is a long history of issues caused by components such as XML trying to use System.Uri with platform filepaths. The RFCs for Uri such as 3986 don't have crisp definitions for filepaths in the absence of a scheme designator. Some behaviors that XML needs would be better suited to using the System.IO.Path methods instead of System.Uri.\r\n\r\nFor example, \"file:///etc/hosts\" is a URI that explicitly uses the \"file\" scheme. It uses forward slashes. But things like \"C:\\a\\b\\\\..\\c\" have no URI scheme at all. They are implicit \"file\" scheme paths. The RFC doesn't talk much about that. We invented several behaviors in the .NET System.Uri class to handle those as best as possible. There are different conversions we do from backward slash to forward slash for example.\r\n\r\nThere are also different behaviors that are scheme specific. Some of those may map to handling path components. So, you can't expect \"http\" and \"file\" URIs to behave exactly the same all the time.\r\n\r\nIn the latest .NET Core, we made more changes to the handling of file paths in order to make things work better on Linux. \r\n\r\nIn summary, I'm not sure yet whether to consider this particular problem a bug or a by-design behavior in Uri. I think it needs further studying before considering any change to Uri.\r\n\r\nI also recommend gathering more information about what other Uri implementations do in this case.  For example, what does .NET Framework do? What about WinRT Windows.Foundation.Uri? That one is based on URLMON which is used on Windows for IE/Edge/WinInet. On .NET, Windows.Foundation.Uri is a hidden class and is exposed only as System.Uri to callers. To use it requires using C++/CX or JavaScript. \r\n\r\nLooking at what browsers do with similar URIs would also be useful. All of these things will help inform the best decision on whether we can/should make a change to Uri for this scenario.\r\n",
        "createdAt": "2019-04-30T21:04:29Z",
        "updatedAt": "2019-04-30T21:07:04Z",
        "author": {
          "login": "davidsh"
        }
      },
      {
        "body": ".NET Framework has the same behavior (`new Uri(\"http://www.google.com/a/b//../c\").ToString()` -> `\"http://www.google.com/a/b/c\"`). I can look into what other implementations/browsers do.",
        "createdAt": "2019-04-30T21:19:36Z",
        "updatedAt": "2019-04-30T21:19:36Z",
        "author": {
          "login": "wtgodbe"
        }
      },
      {
        "body": "Chrome, Edge & Safari have the same behavior as well.",
        "createdAt": "2019-04-30T21:26:23Z",
        "updatedAt": "2019-04-30T21:26:23Z",
        "author": {
          "login": "wtgodbe"
        }
      },
      {
        "body": ">new Uri(\"http://www.google.com/a/b//../c\").ToString()\r\n\r\nI recommend you always use the .AbsoluteUri method for comparison.\r\n\r\n```c#\r\nvar uri = new Uri(\"http://www.google.com/a/b//../c\");\r\nConsole.WriteLine(uri.AbsoluteUri.ToString());\r\n```\r\n",
        "createdAt": "2019-04-30T21:36:52Z",
        "updatedAt": "2019-04-30T21:36:52Z",
        "author": {
          "login": "davidsh"
        }
      },
      {
        "body": "> I recommend you always use the .AbsoluteUri method for comparison.\r\n\r\nLooks like the `AbsoluteUri` gives the same result as well.\r\n\r\nBased on offline conversation with @dthaler, it looks like this is indeed by-design. This is also called out in the below blog post by Dave Risney:\r\n\r\nhttps://davescoolblog.blogspot.com/2011/11/uri-empty-path-segments-matter.html",
        "createdAt": "2019-04-30T21:41:29Z",
        "updatedAt": "2019-04-30T21:41:29Z",
        "author": {
          "login": "wtgodbe"
        }
      },
      {
        "body": "OK then it looks like MSBuild should just call `Path.GetFullPath()` to sanitize the file path to app.config before it enters the XML world. \r\n\r\nIt was very informative, thanks to all!",
        "createdAt": "2019-04-30T22:21:38Z",
        "updatedAt": "2019-04-30T22:21:38Z",
        "author": {
          "login": "KirillOsenkov"
        }
      }
    ]
  }
}