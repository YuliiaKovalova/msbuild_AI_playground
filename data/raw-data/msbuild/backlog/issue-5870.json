{
  "number": 5870,
  "title": "Pack in Visual Studio fails with transitive project reference in a clean state",
  "body": "Visual Studio Version: 16.8.0\r\nSteps to reproduce:\r\n- clone master of https://github.com/AppGates/AppGates.Build.Versioning\r\n- pack external library (it's not relevant for this scenario, but I used that repo for another issue too)\r\n- clean referencing library\r\n- pack referencing library \r\n-> build error, the transitive library (project reference) is not built during pack\r\n\r\nExpected behavior:\r\nThe transitive project reference is built, like the direct project references of the packed project.",
  "state": "OPEN",
  "createdAt": "2020-11-07T16:31:53Z",
  "updatedAt": "2024-01-31T08:22:42Z",
  "closedAt": null,
  "author": {
    "login": "TFTomSun"
  },
  "labels": [
    "bug",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Team Triage: Does this fail only in Visual Studio? Have you tried on the command line?",
        "createdAt": "2020-11-11T16:56:36Z",
        "updatedAt": "2020-11-11T16:56:36Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "This fails also by directly using msbuild.",
        "createdAt": "2020-11-13T07:48:25Z",
        "updatedAt": "2020-11-13T07:48:25Z",
        "author": {
          "login": "LeonsBuntis"
        }
      },
      {
        "body": "In case somebody is interested. I implemented a workaround, by bypassing the visual studio pack and trigger a build with GeneratePackageOnBuild=true instead.\r\n\r\n```xml\r\n <PropertyGroup>\r\n    <IsPackableCopy>true</IsPackableCopy>\r\n    <IsPackableCopy Condition=\"'$(IsPackable)' == 'false'\">false</IsPackableCopy>\r\n  </PropertyGroup>\r\n\r\n  <!--Avoid the weird half dependency build of Visual Studio during pack-->\r\n  <PropertyGroup >\r\n        <IsPackable>false</IsPackable>\r\n  </PropertyGroup>\r\n\r\n  <Target Name=\"CustomPack\" AfterTargets=\"Pack\" >\r\n    <PropertyGroup>\r\n      <CustomPackBuildProperties>\r\n        GeneratePackageOnBuild=true;\r\n        NoBuild=false;\r\n        BuildingProject=true;\r\n        <!--BuildDependsOn=$(BuildDependsOn_Copy);-->\r\n        <!--IsPackable=true;-->\r\n        BuildingInsideVisualStudio=false;\r\n        IsLocalBuild=$(IsLocalBuild);\r\n      </CustomPackBuildProperties>\r\n    </PropertyGroup>\r\n    <Message Text=\"IsPackableCopy: $(IsPackableCopy)\"/>\r\n    <MSBuild\r\n       Targets=\"Restore;Build\"\r\n      Condition=\"$(IsPackableCopy)\"\r\n             Projects=\"$(MSBuildProjectFullPath)\"\r\n             Properties=\"$(CustomPackBuildProperties)\"/>\r\n    \r\n  </Target>\r\n\r\n\r\n\r\n```\r\n",
        "createdAt": "2020-11-13T11:03:18Z",
        "updatedAt": "2020-11-13T11:03:18Z",
        "author": {
          "login": "TFTomSun"
        }
      },
      {
        "body": "Team Triage: Out of curiosity, does this repro when you pass `/graph` as a parameter for your build?",
        "createdAt": "2020-11-18T16:52:29Z",
        "updatedAt": "2020-11-18T16:52:29Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "@Forgind See if this repros.",
        "createdAt": "2020-11-25T17:04:27Z",
        "updatedAt": "2020-11-25T17:04:27Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "The problem here appears to be the intertwined dependencies of Pack and Build. I don't fully understand why, but it seems that in certain scenarios, Build depends on Pack, so there can't be an explicit dependency of Pack on Build because that would be a circular dependency in those cases. In this case, Pack is trying to execute the targets it depends on\u2014which doesn't include Build\u2014before Build executes. Specifically, it tries to execute GenerateNuspec, which expected Build to have executed already, but it hadn't, so this fails.\r\n\r\nThe easiest fix I found was to run with `/t:Build;Pack`. I'm still confused as to the logic [here](https://github.com/NuGet/NuGet.Client/pull/1148), but perhaps there's a solution buried there somewhere.",
        "createdAt": "2020-12-10T21:55:09Z",
        "updatedAt": "2020-12-10T21:55:09Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "@Forgind there's a build flag \"GeneratePackageOnBuild\". That might be the reason why build depends on pack.\r\n\r\n@Forgind but your fix won't work within visual studio, right? At least I don't know how I could configure VS to call not just the pack target on the project on which I click pack. ",
        "createdAt": "2020-12-11T10:00:09Z",
        "updatedAt": "2020-12-11T10:03:20Z",
        "author": {
          "login": "TFTomSun"
        }
      },
      {
        "body": "Maybe it makes sense to have Build sometimes depend on Pack from GeneratePackageOnBuild but Pack depend on Build's dependencies?",
        "createdAt": "2020-12-28T17:50:39Z",
        "updatedAt": "2020-12-28T17:50:39Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "@Forgind When I make some changes on the source code, I expect, that the source code is built before it is packed, right?\r\nI've recently created a build package, that fixes the Visual Studio pack behavior to what I'd expect to happen, when I click on the pack context menu entry of a project file in VS:\r\n\r\n- Restore the root project and it's project dependencies to ensure that floating dependencies are up to date\r\n- (Delta-)Build the root project and it's dependencies\r\n- Pack the root project and it's dependencies\r\n\r\nThe package name is [AppGates.Net.Build.TransitivePack](https://www.nuget.org/packages/AppGates.Net.Build.TransitivePack/) \r\nThe project url is https://gitlab.com/appgates/net/build\r\n",
        "createdAt": "2020-12-29T10:25:57Z",
        "updatedAt": "2020-12-29T10:27:57Z",
        "author": {
          "login": "TFTomSun"
        }
      },
      {
        "body": "Correct. The tricky part is that the `Build` target doesn't really do anything\u2014it's just something logic can hook into. It's intended to be the last target to actually be executed, after `BeforeBuild` and also after `AfterBuild`. That might be more confusing than necessary, but it's helpful in getting the final build result (succeeded, failed) to consider everything and not just the result of half of the total build process.\r\n\r\nYour solution (and the workaround) should work, I think, but they both make the Build complete before Pack starts. I think that would mean that if there's a problem with Pack but not with Build, it will report success anyway.\r\n\r\nMaybe a simpler solution to what I posed above that still retains the accurate reporting would be to have Pack depend on AfterBuild? Or hook into that some other way? I'll have to look more at build ordering before I know if that makes sense.",
        "createdAt": "2020-12-30T16:23:51Z",
        "updatedAt": "2020-12-30T16:23:51Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "@Forgind  I don't think that there's an issue with unexpected the success results. Did you try out the package? The package implementation is different to what I posted above. Actually I turned off the complete default build and pack behavior in case Pack is called inside VisualStudio. There were simply to many weird side effects with the current VS behavior, especially with project dependencies and a mixture of single target and multi target projects.\r\n\r\nInstead I call the build and the pack targets on my own in a target that I attached after Pack.\r\n\r\nOf course I would appreciate a simpler solution. But I can tell you, there are a lot of corner cases and it took me quite long to make it work for the corner cases that I know up to now. If you try to find a better solution have a look at the single/multi target project mixture. The multi target projects build seems to be completely different (with these InnerBuilds, but the pack needs to be done outside, etc.). That has also an impact on the Targets/hooks that you could use for another pack logic. ",
        "createdAt": "2020-12-31T08:12:28Z",
        "updatedAt": "2020-12-31T08:21:46Z",
        "author": {
          "login": "TFTomSun"
        }
      }
    ]
  }
}