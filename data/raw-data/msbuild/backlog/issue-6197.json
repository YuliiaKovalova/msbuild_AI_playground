{
  "number": 6197,
  "title": "Support nuget pack targets in static graph with isolation",
  "body": "Building a graph containing packable (which triggers the nuget pack targets to run) projects that are not terminal leaves triggers the isolation constraints.\r\n\r\nThe pack logic is run on the outer build nodes. The nuget pack targets use the MSBuild task to call into various nodes not predicted by the static graph, and thus fails isolation constraints:\r\n- outer build pack computes its transitive closure and only MSBuild calls into closure nodes that are outer builds themselves (via `Pack -> GenerateNuspec -> _GetProjectReferenceVersions`).\r\n- outer build pack calls into its inner builds nodes multiple times. Some of the calls match the inner build nodes predicted by static graph, but some do not, as they add extra global properties (via `Pack -> GenerateNuspec -> _WalkEachTargetPerFramework`).\r\n\r\nWe need to enhance the static graph declaration expressivity (probably the [ProjectReferenceTargets protocol](https://github.com/dotnet/msbuild/blob/master/documentation/specs/static-graph.md#inferring-which-targets-to-run-for-a-project-within-the-graph)) to allow the nuget team to express the funky calling patterns that nuget pack is doing, such that static graph can predict and create nodes that capture those calls.\r\n\r\nGeneralizing what pack is doing:\r\n- a project can express that it depends on its closure. This is already implemented via [AddTransitiveProjectReferencesInStaticGraph](https://github.com/dotnet/msbuild/blob/master/documentation/specs/static-graph.md#constructing-the-project-graph)\r\n  - enhance this ability to also filter the closure by global properties. In nuget's particular case, filter the closure to only include outer builds (that is, filter by ignoring nodes that have the TargetFramework global property set).\r\n- a project can express that it further decorates some of the nodes predicted by the graph with extra global properties. In nuget's particular case, this is the outer build calling into the the inner build nodes with additional global properties.",
  "state": "OPEN",
  "createdAt": "2021-02-25T19:49:50Z",
  "updatedAt": "2024-01-31T08:21:52Z",
  "closedAt": null,
  "author": {
    "login": "cdmihai"
  },
  "labels": [
    "needs-design",
    "Area: Static Graph",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Backlog"
  },
  "comments": {
    "nodes": [
      {
        "body": "I think we may have encountered this issue. We added the `-graphBuild` flag to our Azure DevOps pipelines, but it did not generate all the expected NuGet packages.\r\n\r\nWe have a basic repro project and steps to reproduce it, if needed:\r\n[Repro.zip](https://github.com/dotnet/msbuild/files/6746495/Repro.zip)\r\n\r\n- It's just a basic solution with two netstandard projects: Enumerations and Exceptions. \r\n- Exceptions references the Eumerations project.\r\n- When building the project with `GeneratePackageOnBuild` set to true and the Static Graph disabled, both packages are generated as expected.\r\n```\r\ndotnet build .\\Contracts.sln -c Release -graphBuild:False /p:GeneratePackageOnBuild=True\r\nMicrosoft (R) Build Engine version 16.10.1+2fd48ab73 for .NET\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Determining projects to restore...\r\n  Restored D:\\W\\Test\\Exceptions\\Exceptions.csproj (in 161 ms).\r\n  Restored D:\\W\\Test\\Enumerations\\Enumerations.csproj (in 161 ms).\r\n  Enumerations -> D:\\W\\Test\\Enumerations\\bin\\Release\\netstandard2.0\\Contracts.Enumerations.dll\r\n  Successfully created package 'D:\\W\\Test\\Enumerations\\bin\\Release\\Contracts.Enumerations.1.0.0.nupkg'.\r\n  Exceptions -> D:\\W\\Test\\Exceptions\\bin\\Release\\netstandard2.0\\Contracts.Exceptions.dll\r\n  Successfully created package 'D:\\W\\Test\\Exceptions\\bin\\Release\\Contracts.Exceptions.1.0.0.nupkg'.\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:00:01.58\r\n```\r\n- If the `-graphBuild` variable is enabled, then only the outer project's NuGet package (`Contracts.Exceptions.nupkg`) is generated. `Contracts.Enumerations.nupkg` is not generated.\r\n\r\n```\r\ndotnet build .\\Contracts.sln -c Release -graphBuild:True /p:GeneratePackageOnBuild=True\r\nMicrosoft (R) Build Engine version 16.10.1+2fd48ab73 for .NET\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Determining projects to restore...\r\n  Restored D:\\W\\Test\\Exceptions\\Exceptions.csproj (in 160 ms).\r\n  Restored D:\\W\\Test\\Enumerations\\Enumerations.csproj (in 160 ms).\r\nStatic graph loaded in 0,137 seconds: 4 nodes, 3 edges\r\n  Enumerations -> D:\\W\\Test\\Enumerations\\bin\\Release\\netstandard2.0\\Contracts.Enumerations.dll\r\n  Exceptions -> D:\\W\\Test\\Exceptions\\bin\\Release\\netstandard2.0\\Contracts.Exceptions.dll\r\n  Successfully created package 'D:\\W\\Test\\Exceptions\\bin\\Release\\Contracts.Exceptions.1.0.0.nupkg'.\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:00:01.57\r\n```",
        "createdAt": "2021-07-01T08:15:02Z",
        "updatedAt": "2021-07-01T08:15:02Z",
        "author": {
          "login": "Starkie"
        }
      }
    ]
  }
}