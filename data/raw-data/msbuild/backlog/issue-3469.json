{
  "number": 3469,
  "title": "Build target not importing implicit imports when using MSBuild API",
  "body": "I've been struggling with this for a while now. When I build with the MSBuild API, it doesn't appear that the imports are being processed. At a minimum, `NETStandard.Library.targets` is not imported which means the core assemblies aren't added to references so I get a ton of errors like this:\r\n\r\n```\r\nobj\\Debug\\netstandard2.0\\ProjectToBuild.AssemblyInfo.cs(10,12): error CS0246:\r\nThe type or namespace name 'System' could not be found (are you missing a using\r\ndirective or an assembly reference?)\r\n\r\n...\r\n\r\nClass1.cs(5,18): error CS0518: Predefined type 'System.Object' is not defined or imported\r\n\r\nClass1.cs(7,16): error CS0518: Predefined type 'System.Void' is not defined or imported\r\n```\r\n\r\nI thought at first maybe it was something exotic with my project (I'm doing a lot of hacky stuff), but I was able to repro with a much simpler set of conditions. Basically, given a .NET Standard project to compile, and a .NET Core host with the following code:\r\n\r\n```\r\nStringBuilder logBuilder = new StringBuilder();\r\nConsoleLogger logger = new ConsoleLogger(Microsoft.Build.Framework.LoggerVerbosity.Normal, x => logBuilder.AppendLine(x), null, null);\r\nstring path = @\"..\\..\\..\\..\\ProjectToBuild\\ProjectToBuild.csproj\";\r\nDictionary<string, string> environmentVars = new Dictionary<string, string>\r\n{\r\n    { \"MSBuildExtensionsPath\", @\"C:\\\\Program Files\\\\dotnet\\\\sdk\\\\2.1.300\\\\\" },\r\n    { \"MSBuildExtensionsPath32\", @\"C:\\\\Program Files\\\\dotnet\\\\sdk\\\\2.1.300\\\\\" },\r\n    { \"MSBuildExtensionsPath64\", @\"C:\\\\Program Files\\\\dotnet\\\\sdk\\\\2.1.300\\\\\" },\r\n    { \"MSBuildSDKsPath\", @\"C:\\\\Program Files\\\\dotnet\\\\sdk\\\\2.1.300\\\\Sdks\" },\r\n    { \"MSBUILD_EXE_PATH\", @\"C:\\\\Program Files\\\\dotnet\\\\sdk\\\\2.1.300\\\\MSBuild.dll\" }\r\n};\r\nDictionary<string, string> globalProps = new Dictionary<string, string>\r\n{\r\n    { \"MSBuildExtensionsPath\", @\"C:\\\\Program Files\\\\dotnet\\\\sdk\\\\2.1.300\\\\\" },\r\n    { \"MSBuildExtensionsPath32\", @\"C:\\\\Program Files\\\\dotnet\\\\sdk\\\\2.1.300\\\\\" },\r\n    { \"MSBuildExtensionsPath64\", @\"C:\\\\Program Files\\\\dotnet\\\\sdk\\\\2.1.300\\\\\" },\r\n    { \"MSBuildSDKsPath\", @\"C:\\\\Program Files\\\\dotnet\\\\sdk\\\\2.1.300\\\\Sdks\" },\r\n    { \"RoslynTargetsPath\", @\"C:\\\\Program Files\\\\dotnet\\\\sdk\\\\2.1.300\\\\Roslyn\" },\r\n    { \"NuGetRestoreTargets\", @\"C:\\\\Program Files\\\\dotnet\\\\sdk\\\\2.1.300\\\\\\\\NuGet.targets\" }\r\n};\r\nProjectCollection projectCollection = new ProjectCollection(globalProps);\r\nprojectCollection.RemoveAllToolsets();  // Make sure we're only using the latest tools\r\nprojectCollection.AddToolset(new Toolset(ToolLocationHelper.CurrentToolsVersion, @\"C:\\\\Program Files\\\\dotnet\\\\sdk\\\\2.1.300\", projectCollection, string.Empty));\r\nprojectCollection.DefaultToolsVersion = ToolLocationHelper.CurrentToolsVersion;\r\nusing (new TemporaryEnvironment(environmentVars))\r\n{\r\n    using (Stream stream = File.OpenRead(path))\r\n    {\r\n        using (XmlReader reader = XmlReader.Create(stream))\r\n        {\r\n            ProjectRootElement root = ProjectRootElement.Create(reader);\r\n            root.FullPath = path;\r\n            Project project = new Project(root, globalProps, ToolLocationHelper.CurrentToolsVersion, projectCollection);\r\n            Console.WriteLine(project.Imports.Count);\r\n            ProjectInstance instance = project.CreateProjectInstance();\r\n            BuildResult buildResult = BuildManager.DefaultBuildManager.Build(\r\n                new BuildParameters(projectCollection)\r\n                {\r\n                    Loggers = new[] { logger }\r\n                },\r\n                new BuildRequestData(instance, new[] { \"Restore\", \"Clean\", \"Build\" }));\r\n            Console.WriteLine(buildResult.OverallResult.ToString());\r\n            Console.WriteLine(logBuilder);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nI've tried various permutations of \"Restore\" before \"Clean\" and \"Build\", both as a separate submission and as part of the same submission. The result is always the same.\r\n\r\nNote that if Visual Studio builds the target project first and creates `obj` and `bin` folders with artifacts the build will succeed, so it appears I'm clearly missing some part of the process.\r\n\r\nI've attached a solution that can repro the problem, but note that the library to build needs to have all artifacts cleared from `obj` and `bin` for the repro to fail in this way (which is important for my use case - I need to be able to build projects from scratch).\r\n\r\nI would greatly appreciate any tips or insight into what I'm doing wrong.\r\n\r\n[MSBuildTest.zip](https://github.com/Microsoft/msbuild/files/2156884/MSBuildTest.zip)\r\n",
  "state": "CLOSED",
  "createdAt": "2018-07-02T21:44:41Z",
  "updatedAt": "2024-02-21T17:12:29Z",
  "closedAt": "2018-10-10T12:26:09Z",
  "author": {
    "login": "daveaglick"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "If it's getting to the point of running the compiler, it's importing implicit imports--otherwise a .NET Core project wouldn't have any targets defined and would error out to that effect.\r\n\r\nSounds like you're hitting the evaluation cache. As a first approximation, you need to set different global properties for the call to `Restore`. That will ensure that we re-evaluate the project and thus run the does-the-nuget-generated-props-and-targets-files check again, so they can be imported in the `Build` request.\r\n\r\nCan you give that a shot?",
        "createdAt": "2018-07-02T22:03:58Z",
        "updatedAt": "2018-07-02T22:03:58Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald How much difference are we talking about, and any tips on where to make the change (there's so many spots where global props get passed/set)? I tried:\r\n* Mutating the dictionary I passed to the `Project` before each submission\r\n* Setting an empty dictionary when creating the `Project` and then setting `BuildParameters.GlobalProperties` to the actual dictionary for the second submission following Restore\r\n* Creating a new `ProjectInstance` from the `Project` for each submission and then calling `ProjectInstance.SetProperty(...)` with different key/value pairs before each submission\r\n\r\nFor example:\r\n\r\n```\r\nProject project = new Project(root, new Dictionary<string, string>(), ToolLocationHelper.CurrentToolsVersion, projectCollection);\r\nProjectInstance instance = project.CreateProjectInstance();\r\nBuildResult buildResult = BuildManager.DefaultBuildManager.Build(\r\n    new BuildParameters(projectCollection)\r\n    {\r\n        Loggers = new[] { logger },\r\n        GlobalProperties = new Dictionary<string, string>()\r\n    },\r\n    new BuildRequestData(instance, new[] { \"Restore\" }));\r\n                        \r\nbuildResult = BuildManager.DefaultBuildManager.Build(\r\n    new BuildParameters(projectCollection)\r\n    {\r\n        Loggers = new[] { logger },\r\n        GlobalProperties = globalProps\r\n    },\r\n    new BuildRequestData(instance, new[] { \"Clean\", \"Build\" }));\r\n```\r\n\r\nNothing I do seems to make much difference.\r\n",
        "createdAt": "2018-07-02T22:33:50Z",
        "updatedAt": "2018-07-02T22:34:07Z",
        "author": {
          "login": "daveaglick"
        }
      },
      {
        "body": "Mentioning cache problems got me on the right track :tada:. It turns out I have to create a `Project` for the Restore target submission and then instantiate an entirely new one for the Clean and Build target submission. Something must be getting cached inside the `Project`. There might be some way to invalidate the cache and use the same `Project` instance, but I couldn't find it.\r\n\r\nTotally thrilled I've got it working now, but would love to understand more about how the cache is working under the hood and why a new `Project` is needed to get the restore/build sequence to work correctly.",
        "createdAt": "2018-07-03T14:18:42Z",
        "updatedAt": "2018-07-03T14:18:42Z",
        "author": {
          "login": "daveaglick"
        }
      },
      {
        "body": "I\u2019ll go ahead and close this since I got it working...and then totally bailed on the whole idea :smile:",
        "createdAt": "2018-10-10T12:26:09Z",
        "updatedAt": "2018-10-10T12:26:09Z",
        "author": {
          "login": "daveaglick"
        }
      }
    ]
  }
}