{
  "number": 10060,
  "title": "[Feature Request]: Implement support for native ARM64 enablement in NetFx AnyCPU executables",
  "body": "### Summary\r\n\r\nWindows is adding support for \"arm64\" as the supported architecture listed in the Win32 executable manifest. AnyCPU executables with such an element in the manifest will run natively on ARM64 Windows. This issue is about having MSBuild support the new thing by adding a new property called `PreferNativeArm64`.\r\n\r\n### Background and Motivation\r\n\r\nThe behavior on ARM64 Windows so far has been for AnyCPU executables to run emulated, out of the fear that the developer may not have anticipated such an architecture when they built the program. This is similar to the `Prefer32Bit` property, which was added some time ago to keep AnyCPU executables running in 32-bit WoW on x64 Windows.\r\n\r\n### Proposed Feature\r\n\r\nA new property called `PreferNativeArm64` is understood by common targets. Notable differences between `PreferNativeArm64` and the existing `Prefer32Bit` prop are:\r\n- `Prefer32Bit` is true by default and the developer has to opt out by setting it to false. `PreferNativeArm64` is a false-by-default opt-in switch.\r\n- `Prefer32Bit` translates to a bit in the COR header while `PreferNativeArm64` makes the toolchain add an element to the Win32 manifest embedded in the executable.\r\n\r\nAt high level, if the new property is set to true, MSBuild will generate a manifest file with the following contents:\r\n\r\n```xml\r\n<assembly xmlns=\"urn:schemas-microsoft-com:asm.v1\" manifestVersion=\"1.0\" xmlns:asmv3=\"urn:schemas-microsoft-com:asm.v3\">\r\n  <assemblyIdentity version=\"1.0.0.0\" name=\"MyApplication.app\"/>\r\n  <trustInfo xmlns=\"urn:schemas-microsoft-com:asm.v2\">\r\n    <security>\r\n      <requestedPrivileges xmlns=\"urn:schemas-microsoft-com:asm.v3\">\r\n        <requestedExecutionLevel level=\"asInvoker\" uiAccess=\"false\"/>\r\n      </requestedPrivileges>\r\n    </security>\r\n  </trustInfo>\r\n  <asmv3:application>\r\n    <asmv3:windowsSettings xmlns=\"http://schemas.microsoft.com/SMI/2024/WindowsSettings\">\r\n      <supportedArchitectures>amd64 arm64</supportedArchitectures>\r\n    </asmv3:windowsSettings>\r\n  </asmv3:application>\r\n</assembly>\r\n```\r\n\r\nThe contents is combined from two sources. It is the new `<supportedArchitectures>` element merged with the contents of the file named `default.win32manifest` in the .NET Framework install folder (commonly C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319). This ensures that the manifest will be the same as what's embedded by the C#/VB compiler by default, other than the new element.\r\n\r\nIf the project already specifies a custom Win32 manifest using the `ApplicationManifest` property, this file is used as a source instead of `default.win32manifest` and the `<supportedArchitectures>` element is merged into it. That way the manifest will be the same as what's embedded by the C#/VB compiler when it's passed a `-win32manifest`, other than the new element.\r\n\r\nError conditions:\r\n- If `PreferNativeArm64` is true and `Prefer32Bit` is explicitly set to true, a build error is reported. These two options are mutually exclusive.\r\n- If `PreferNativeArm64` is true and the `NoWin32Manifest` is true, a build error is reported. These two options are mutually exclusive.\r\n- If `PreferNativeArm64` is true, a custom manifest is specified using `ApplicationManifest`, and the manifest already contains the `<supportedArchitectures>` element with something else than \"amd64 arm64\", a build error is reported.\r\n- If `PreferNativeArm64` is true and the project does not target .NET Framework, a build warning is reported. This is similar to how the build already warns about `Prefer32Bit` when not targeting .NET Framework.\r\n- If `PreferNativeArm64` is true and the project targets other platform than AnyCPU, a build warning is reported. `Prefer32Bit` does not seem to implement this validation in common targets.\r\n\r\n### Alternative Designs\r\n\r\nWe could alternatively add a new flag to the C#/VB compiler, pushing the work of injecting the `<supportedArchitectures>` element to the default or user-specified manifest down to the compiler. However, MSBuild is better positioned for this work because it is a single choking point for potentially multiple compilers.",
  "state": "CLOSED",
  "createdAt": "2024-04-23T13:50:51Z",
  "updatedAt": "2024-05-29T06:23:53Z",
  "closedAt": "2024-05-29T06:23:53Z",
  "author": {
    "login": "ladipro"
  },
  "labels": [
    "Feature Request",
    "Partner request",
    "Priority:1",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "YuliiaKovalova"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "cc @rainersigwald @tmeschter\r\n\r\nThe project system in VS will likely expose the new prop as a check box with some of the validation specified above, e.g. enabled only when targeting NetFx AnyCPU.",
        "createdAt": "2024-04-23T14:00:59Z",
        "updatedAt": "2024-04-23T14:00:59Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "The supportedArchitectures documentation <https://learn.microsoft.com/en-us/windows/win32/sbscs/application-manifests#supportedarchitectures> says\n\n> For IL-only .NET executables, specifies a list of native processor architectures the application is compatible with.\n\nWhich seems to mean that the element applies only to .NET and not to .NET Framework.  Is it actually the other way around?  This text came from <https://github.com/MicrosoftDocs/win32/pull/1803>.",
        "createdAt": "2024-05-28T14:04:58Z",
        "updatedAt": "2024-05-28T14:04:58Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "It's the other way round - Windows is not involved with activating the runtime for .NET (Core) executables.",
        "createdAt": "2024-05-28T14:17:07Z",
        "updatedAt": "2024-05-28T14:17:07Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "@KalleOlaviNiemitalo thank you for pointing it out. Documentation update: https://github.com/MicrosoftDocs/win32/pull/1855",
        "createdAt": "2024-05-28T20:08:31Z",
        "updatedAt": "2024-05-28T20:08:31Z",
        "author": {
          "login": "ladipro"
        }
      }
    ]
  }
}