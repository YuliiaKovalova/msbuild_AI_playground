{
  "number": 10947,
  "title": "Propose/Design the way of referencing/using VS OTel",
  "body": "### Motivation\n\nVS OTel collector and extensions require dependencies that are currently only VS specific ([Microsoft.VisualStudio.OpenTelemetry.ClientExtensions](https://devdiv.visualstudio.com/DevDiv/_artifacts/feed/VS/NuGet/Microsoft.VisualStudio.OpenTelemetry.ClientExtensions/overview/0.1.700-beta), [Microsoft.VisualStudio.OpenTelemetry.Collector](https://devdiv.visualstudio.com/DevDiv/_artifacts/feed/VS/NuGet/Microsoft.VisualStudio.OpenTelemetry.Collector/overview/0.1.700-beta)). We need to start collector ourselves if we want to collect data from standalone process (msbuild.exe run).\n\nAdditionaly - We currently produce the MSBuild bits - including the msbuild.exe - from our GH repo, that is expected to be source-buildable.\nThe requirement technicaly applies only to the core version.\nAlso - we want runnable bootstrap - in order not to break our testing infra\n\n### Goal\n\nPropose/Design the way of referencing/mounting VS OTel extensions and collector. The proposal should be approved by msbuild team + product construction team.",
  "state": "CLOSED",
  "createdAt": "2024-11-07T16:16:53Z",
  "updatedAt": "2025-04-02T13:40:28Z",
  "closedAt": "2025-04-02T13:40:28Z",
  "author": {
    "login": "JanKrivanek"
  },
  "milestone": null,
  "assignees": {
    "nodes": [
      {
        "login": "JanKrivanek"
      },
      {
        "login": "JanProvaznik"
      }
    ]
  },
  "labels": [
    "Priority:1",
    "triaged"
  ],
  "comments": {
    "nodes": [
      {
        "body": "Inspiration provided by @baronfel: https://github.com/baronfel/otel-startup-hook",
        "createdAt": "2024-11-07T16:31:30Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "2 possible paths: \n\n1) add the telemetry to Microsoft.Build.Framework.dlls, this is explored in https://github.com/dotnet/msbuild/pull/11084\n\ta) OpenTelemetry part compiles in core and framework\n\tb) VS Telemetry part compiles only in framework\n\tc) Controlled by env vars if there is an otel var present it will start the local collector, should not start collector when in VS\n\td) if there is an optout it should not start\n\n- this would require a lot of packages added to sourcebuild, see: https://github.com/dotnet/msbuild/pull/11084/checks?check_run_id=34194384310\n\n\n2) Ship another DLL in .NET Framework distribution of MSBuild that is then loaded in XMake or BuildManager at the start of the build\n    a)  add helper methods for easily creating .NET traces (System.Diagnostics.Activity) compatible with the VS OTel format in Microsoft.Build.Framework\n    b) new DLL which is in Framework somehow hooked at the beginning (analogously to how core's Startups hook work) of a build and starts TracerProvider, starts Collector if MSBuild.exe\n    c) document how to hook your own collector (activity names/prefixes,) and point to e.g. [baronfel/otel-startup-hook](https://github.com/baronfel/otel-startup-hook) with samples\n@JanKrivanek please add details here\n\n@rainersigwald @baronfel thoughts?",
        "createdAt": "2024-12-10T14:28:36Z",
        "author": {
          "login": "JanProvaznik"
        }
      },
      {
        "body": "Proposal that we've been putting together with @JanProvaznik:\n\nWe'll instrument only leveraging System.Diagnostic primitives, plus add minimal pluggability - creating no bariers for SourceBuild nor for consuming the data via exporter of choice.\n\n* .NET Version of MSBuild\n   * Exporting to our endpoints\n      * Will remain unchanged for now (driven by sdk, data emited to System.Diagnoastic primitives won't be considered) \n   * Customizable exporting to user endpoints\n      * It'd be up to users to hook the telemetry exporter leveraging the Host Startup Hook.\n      * The TraceName(s) will be documented in our doc\n      * We'll point (in the same doc) to https://github.com/baronfel/otel-startup-hook as a reference\n      * The doc will as well contain sample usage (setting of env vars)\n* NetFx version of MSBuild \n  * Exporting to our endpoints\n     * VS Telemetry exporter will be compiled-in only for NetFx, it'll be started only if MSBuild is not hosted in VS and if users didn't opted out (TBD: define exact conditions for this)\n     * It'll be started in Xmake or BuildManager (whichever is called first)\n  *  Customizable exporting to user endpoints\n     * Let's consider adding customizable startup hooking (e.g. `MSBUILD_STARTUP_HOOKS` analogy to `DOTNET_STARTUP_HOOKS`, maybe applicalbe even for API calls) - this way we'd enable custom exporting of data without need to stick to any specific collector/exporter\n     * The exporting hooked by custom hook versus the VS hooked exporting should be independent and can happen at the same time (or none if opted out)",
        "createdAt": "2024-12-10T14:31:40Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "@JanProvaznik HAHA - we've nicely jinxed on this \ud83d\ude04 ",
        "createdAt": "2024-12-10T14:33:30Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "Summary from discussion:\nThere might be interest in the future from 1ES for hooking collector in MSBuild.exe\n- @JanKrivanek will look into if there is an already an existing implementation of Startup hooking for Framework\n  - we can implement it ourselves using reflection if not found/unusable\nVS collector can be hardcoded with conditional compilation for now.\n\nWe can proceed to implementation\n- Be careful not to allocate metadata when activity would not be client side sampled.\nWe push for collector being started in VS, we don't want to hook it ourselves when in VS, sampling both client and server side.",
        "createdAt": "2024-12-11T16:35:45Z",
        "author": {
          "login": "JanProvaznik"
        }
      },
      {
        "body": "As for .NET Fx hooking - we might try to leverage `APPDOMAIN_MANAGER_TYPE` https://www.rapid7.com/blog/post/2023/05/05/appdomain-manager-injection-new-techniques-for-red-teams/",
        "createdAt": "2024-12-11T18:20:16Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "> [rapid7.com/blog/post/2023/05/05/appdomain-manager-injection-new-techniques-for-red-teams](https://www.rapid7.com/blog/post/2023/05/05/appdomain-manager-injection-new-techniques-for-red-teams/)\n\nThanks, I investigated this and found it quite clunky.\nYou have to place the hook in the same spot as MSBuild.exe and this leads to assembly version conflicts (System.Memory) of MSBuild and the hook dlls.",
        "createdAt": "2024-12-12T14:43:29Z",
        "author": {
          "login": "JanProvaznik"
        }
      },
      {
        "body": "https://github.com/JanProvaznik/otel-startup-hook/tree/doublehook\nhttps://github.com/dotnet/msbuild/issues/11148",
        "createdAt": "2024-12-16T10:57:58Z",
        "author": {
          "login": "JanProvaznik"
        }
      },
      {
        "body": "State of the investigation:\nSo for VS case: we create ActivitySource and Exporter (and add it to TracerProvider). VS has the collector (will have once it's implemented in January).\nMSBuild.exe case: we create ActivitySource, Exporter, Collector - for prototype v1 include in Microsoft.Build.Framework, prototype v2 also enable hooking custom exporters/collectors via doublehook https://github.com/dotnet/msbuild/issues/11148\ncore case: only create Activity Source, people can hook with core hook https://github.com/baronfel/otel-startup-hook",
        "createdAt": "2024-12-16T11:54:19Z",
        "author": {
          "login": "JanProvaznik"
        }
      }
    ]
  }
}