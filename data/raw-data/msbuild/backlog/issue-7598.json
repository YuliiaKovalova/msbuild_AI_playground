{
  "number": 7598,
  "title": "Explore regex source generator",
  "body": ".NET 7 introduces a [regular expression source generator](https://devblogs.microsoft.com/dotnet/announcing-dotnet-7-preview-2/#introducing-the-new-regex-source-generator) that can generate a bunch of code at compile time to make a more optimal matcher.\r\n\r\nSince MSBuild uses many regular expressions and knows a bunch of them at compile time, we should adopt this.\r\n\r\nPossible locations:\r\n\r\n- [ ] When [validating property/item names](https://github.com/dotnet/msbuild/blob/10dbde3bf1986251a5e958af8c7391ad0d9e7f11/src/Shared/XmlUtilities.cs#L132-L184) (thanks @lambdageek)\r\n- [ ] in `CanonicalError`\r\n- [ ] in `ConditionEvaluator`\r\n- [ ] In `SolutionFile.cs`\r\n\r\n(non-exhaustive)",
  "state": "OPEN",
  "createdAt": "2022-05-04T16:14:08Z",
  "updatedAt": "2024-02-21T16:28:03Z",
  "closedAt": null,
  "author": {
    "login": "rainersigwald"
  },
  "labels": [
    "help wanted",
    "backlog",
    "Area: Performance",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "nikijohnson77"
      }
    ]
  },
  "milestone": {
    "title": ".NET 7.0"
  },
  "comments": {
    "nodes": [
      {
        "body": "It would be nice if the .NET Framework version of msbuild could go away for .NET Core based ones and have Visual Studio use the one from only the .NET SDK so it does not have to bundle a version of msbuild as well to where the .NET Core msbuild can compile both .NET SDK style projects and non-sdk style projects.\r\n\r\nThis would also help improve the quality of msbuild (and Visual Studio) as a whole.",
        "createdAt": "2022-05-04T20:58:50Z",
        "updatedAt": "2022-05-04T21:00:08Z",
        "author": {
          "login": "AraHaan"
        }
      },
      {
        "body": "@rainersigwald How much of perf. win do you expect here? ",
        "createdAt": "2022-05-09T12:40:02Z",
        "updatedAt": "2022-05-09T12:40:02Z",
        "author": {
          "login": "AR-May"
        }
      },
      {
        "body": "It is mostly a startup win.\nNote that the build for .NET Framework would still need to use the existing pattern, as alluded above. The generator is only for targeting .NET 7+",
        "createdAt": "2022-05-09T14:27:59Z",
        "updatedAt": "2022-05-09T14:27:59Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "I wouldn't expect a huge win on anything, but some of the pattern matches are in warm inner loops:\r\n\r\n1. Validating every property/item name (so hundreds/project evaluation + many at execution time).\r\n2. Scanning every line of `ToolTask` output.\r\n\r\nAs Dan mentioned, startup time is reduced and there may be possibilities for inlining/JIT magic.\r\n\r\nI wish we could use the generator for our .NET Framework target for unification, but alas.",
        "createdAt": "2022-05-09T14:35:13Z",
        "updatedAt": "2022-05-09T14:35:13Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Cc @stephentoub fyi",
        "createdAt": "2022-05-09T14:42:55Z",
        "updatedAt": "2022-05-09T14:42:55Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "> I wish we could use the generator for our .NET Framework target for unification, but alas.\r\n\r\nYeah, you'll end up wanting to do something like:\r\n```C#\r\n#if NET7_0_OR_GREATER\r\n[RegexGenerator(Pattern)]\r\npublic static partial Regex AwesomeSauce();\r\n#else\r\npublic static Regex AwesomeSauce() => s_regex;\r\nprivate static readonly Regex s_regex = new Regex(Pattern, RegexOptions.Compiled);\r\n#endif\r\n```\r\n",
        "createdAt": "2022-05-09T14:46:06Z",
        "updatedAt": "2022-05-09T14:47:00Z",
        "author": {
          "login": "stephentoub"
        }
      },
      {
        "body": "Just noting this is blocked on https://github.com/dotnet/msbuild/pull/7790",
        "createdAt": "2022-08-18T18:58:57Z",
        "updatedAt": "2022-08-18T18:58:57Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "Looks like #7790 has been merged, so this is unblocked? \ud83d\ude42",
        "createdAt": "2022-09-26T08:51:56Z",
        "updatedAt": "2022-09-26T08:51:56Z",
        "author": {
          "login": "Eli-Black-Work"
        }
      },
      {
        "body": "@Bosch-Eli-Black Yes, but to be clear it remains low-priority for the core team.",
        "createdAt": "2022-09-26T13:42:14Z",
        "updatedAt": "2022-09-26T13:42:14Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald Understood \ud83d\ude42",
        "createdAt": "2022-09-27T02:29:33Z",
        "updatedAt": "2022-09-27T02:29:33Z",
        "author": {
          "login": "Eli-Black-Work"
        }
      },
      {
        "body": "@Bosch-Eli-Black I expect they'd accept a PR? (and related https://github.com/dotnet/msbuild/issues/7499 too)",
        "createdAt": "2022-09-27T03:08:57Z",
        "updatedAt": "2022-09-27T03:08:57Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "@danmoseley Haha, ah, yes, I'd love to! \ud83d\ude42  I've just begun working through my company's procedures for getting authorization to contribute to open source projects, though, and I'm afraid that may take a very long time indeed.",
        "createdAt": "2022-09-27T03:13:02Z",
        "updatedAt": "2022-09-27T03:13:02Z",
        "author": {
          "login": "Eli-Black-Work"
        }
      },
      {
        "body": "Do you need any help I don't mind helping so just let me know if you do cuz I just did one of myself last night my project I got done with it last night\r\n",
        "createdAt": "2022-10-27T20:06:03Z",
        "updatedAt": "2022-10-27T20:06:03Z",
        "author": {
          "login": "nikijohnson77"
        }
      },
      {
        "body": "@nikijohnson77 We'd love some! Thanks for volunteering; I just assigned it to you. Submit a PR whenever you're ready, and feel free to ask questions.",
        "createdAt": "2022-10-27T20:16:53Z",
        "updatedAt": "2022-10-27T20:16:53Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "> ```cs\r\n> #if NET7_0_OR_GREATER\r\n> [RegexGenerator(Pattern)]\r\n> public static partial Regex AwesomeSauce();\r\n> #else\r\n> public static Regex AwesomeSauce() => s_regex;\r\n> private static readonly Regex s_regex = new Regex(Pattern, RegexOptions.Compiled);\r\n> #endif\r\n> ```\r\n\r\nDo you have a definition to distinguish different target currently? such as NET7_0_OR_GREATER.  @Forgind ",
        "createdAt": "2022-11-30T08:48:17Z",
        "updatedAt": "2022-11-30T08:48:40Z",
        "author": {
          "login": "JaynieBai"
        }
      },
      {
        "body": "`NET7_0_OR_GREATER` comes via the SDK, so every project that uses the `Microsoft.NET.Sdk` should have access to it.",
        "createdAt": "2022-11-30T09:10:56Z",
        "updatedAt": "2022-11-30T09:10:56Z",
        "author": {
          "login": "ViktorHofer"
        }
      },
      {
        "body": "> `NET7_0_OR_GREATER` comes via the SDK, so every project that uses the `Microsoft.NET.Sdk` should have access to it.\r\n\r\nonly if the project targets .NET 7 in its list of target frameworks otherwise the maximum defined is ``NET6_0_OR_GREATER`` if up to .NET 6 is in it.",
        "createdAt": "2022-11-30T09:26:27Z",
        "updatedAt": "2022-11-30T09:27:05Z",
        "author": {
          "login": "AraHaan"
        }
      },
      {
        "body": "In the MSBuild codebase we generally try to avoid generic ifdefs like `NET7_0_OR_GREATER` in favor of specific ones like `FEATURE_REGEX_GENERATOR`, defined like\r\n\r\nhttps://github.com/dotnet/msbuild/blob/ee6f71d15eea77c970815d9105ab9520876c5042/src/Directory.BeforeCommon.targets#L88-L95\r\n\r\nThis is helpful because it self-documents _why_ the code is conditionally compiled; while I don't expect it in this case it's conceivable that the regex source generator could someday work on .NET Framework 4.7.2 targets, and if it did adopting it would mean searching for the specific feature, rather than having to look at all net7+ stuff.",
        "createdAt": "2022-11-30T14:30:02Z",
        "updatedAt": "2022-11-30T14:30:02Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> while I don't expect it in this case it's conceivable that the regex source generator could someday work on .NET Framework 4.7.2 targets\r\n\r\nHighly unlikely ;-)",
        "createdAt": "2022-11-30T14:39:19Z",
        "updatedAt": "2022-11-30T14:39:19Z",
        "author": {
          "login": "stephentoub"
        }
      },
      {
        "body": "But if I keep whining about it in this thread . . . \ud83d\ude07\r\n\r\nWe got most of our benefit from the granular ifdefs in the other direction: there were lots of features that were not in .NET Core 1.0 that got ported later, and the ifdefs let us gradually reunify a bunch of code. I still prefer the granular-ifdef strategy for its \"documentation\" of why things are conditional.",
        "createdAt": "2022-11-30T14:43:43Z",
        "updatedAt": "2022-11-30T14:43:43Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> But if I keep whining about it in this thread . . . \ud83d\ude07\r\n\r\nYour voice will get tired. \ud83d\ude1b ",
        "createdAt": "2022-11-30T14:45:01Z",
        "updatedAt": "2022-11-30T14:45:01Z",
        "author": {
          "login": "stephentoub"
        }
      },
      {
        "body": "Alternatively, one can't stop them from defining their own version of the .NET 7 attribute for the source generator and install the generator as a nuget package on non-.NET 7 targets, right? If so, that might also be an option to reunify the code.",
        "createdAt": "2022-11-30T14:59:14Z",
        "updatedAt": "2022-11-30T14:59:52Z",
        "author": {
          "login": "AraHaan"
        }
      },
      {
        "body": "> Alternatively, one can't stop them from defining their own version of the .NET 7 attribute for the source generator and install the generator as a nuget package on non-.NET 7 targets, right? If so, that might also be an option to reunify the code.\r\n\r\nThe generator emits code that uses APIs new to .NET 7, including how the generated code plugs into Regex itself.",
        "createdAt": "2022-11-30T15:01:43Z",
        "updatedAt": "2022-11-30T15:01:43Z",
        "author": {
          "login": "stephentoub"
        }
      },
      {
        "body": "If the pattern is relatively straightforward and stable another option is to inspect the generated code and adjust it to make your own hardcoded pattern matcher, no Regex involved.",
        "createdAt": "2022-11-30T15:39:18Z",
        "updatedAt": "2022-11-30T15:39:31Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "Just noting that I edited the OP to add a new location, where startup time might be a noticeable win: in solution parsing\r\n\r\nhttps://github.com/dotnet/msbuild/blob/01532a937629682bb2d397ffa3e0b49ef4492ac5/src/Build/Construction/Solution/SolutionFile.cs#L37-L70\r\n\r\nSince that's one of the first things we do in a `dotnet build foo.sln` scenario, the compiled-already-ness would likely remove regex compilation from a critical path.",
        "createdAt": "2022-12-06T16:54:31Z",
        "updatedAt": "2022-12-06T16:54:31Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Reducing JITting is also helpful if Native AOT is ever a goal. (But given MSBuild reflects over assemblies it dynamically discovers, perhaps that would be challenging..)",
        "createdAt": "2022-12-06T17:22:06Z",
        "updatedAt": "2022-12-06T17:22:06Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "@nikijohnson77 how is it going on this?",
        "createdAt": "2022-12-06T17:22:34Z",
        "updatedAt": "2022-12-06T17:22:34Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "Wait why is the regex used for solution parsing, if only there was a library that msbuild could use that uses a much better way of parsing solution files that is just as fast as .NET 7's regex.",
        "createdAt": "2022-12-06T17:57:12Z",
        "updatedAt": "2022-12-06T17:57:12Z",
        "author": {
          "login": "AraHaan"
        }
      },
      {
        "body": "@AraHaan the change to use a source generated regex is quite localized and straightforward. If you're proposing replacing the component, that is best discussed in an issue specific to that (which I'm guessing exists)",
        "createdAt": "2022-12-06T19:10:05Z",
        "updatedAt": "2022-12-06T19:10:05Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "OK, so I played with this and it's quite doable, but a little less than straightforward because of the complexity of MSBuild regexes, and the fact that they are built up from strings (which sometimes themselves are built up from strings).\r\n\r\nAs an extreme example, take this regex\r\nhttps://github.com/dotnet/msbuild/blob/a6f6699d1f70bf79db82030938d2c5e52d1e4d2e/src/Build/Evaluation/Expander.cs#L3040-L3049\r\nwhich includes strings that are themselves built up, eg.,\r\nhttps://github.com/dotnet/msbuild/blob/a6f6699d1f70bf79db82030938d2c5e52d1e4d2e/src/Build/Evaluation/Expander.cs#L3060\r\n\r\nThe generator can work on this, creating\r\n```c#\r\n[GeneratedRegex(\"((?<=@\\\\(\\\\s*[A-Za-z_][A-Za-z_0-9\\\\-]*\\\\s*->\\\\s*'[^']*)%\\\\(\\\\s*(?<ITEM_SPECIFICATION>(?<ITEM_TYPE>[A-Za-z_][A-Za-z_0-9\\\\-]*)\\\\s*\\\\.\\\\s*)?(?<NAME>[A-Za-z_][A-Za-z_0-9\\\\-]*)\\\\s*\\\\)(?![^']*'(\\\\s*,\\\\s*'[^']*')?\\\\s*\\\\)))|((?<!@\\\\(\\\\s*[A-Za-z_][A-Za-z_0-9\\\\-]*\\\\s*->\\\\s*'[^']*)%\\\\(\\\\s*(?<ITEM_SPECIFICATION>(?<ITEM_TYPE>[A-Za-z_][A-Za-z_0-9\\\\-]*)\\\\s*\\\\.\\\\s*)?(?<NAME>[A-Za-z_][A-Za-z_0-9\\\\-]*)\\\\s*\\\\)(?=[^']*'(\\\\s*,\\\\s*'[^']*')?\\\\s*\\\\)))|((?<!@\\\\(\\\\s*[A-Za-z_][A-Za-z_0-9\\\\-]*\\\\s*->\\\\s*'[^']*@)%\\\\(\\\\s*(?<ITEM_SPECIFICATION>(?<ITEM_TYPE>[A-Za-z_][A-Za-z_0-9\\\\-]*)\\\\s*\\\\.\\\\s*)?(?<NAME>[A-Za-z_][A-Za-z_0-9\\\\-]*)\\\\s*\\\\)(?![^']*'(\\\\s*,\\\\s*'[^']*')?\\\\s*\\\\)))\",RegexOptions.ExplicitCapture|RegexOptions.Compiled|RegexOptions.IgnorePatternWhitespace)]\r\n```\r\n\r\nIt's probably worth converting to a verbatim string (put a @ at the front and replace \\\\ with \\) in order to make them more readable. I opened suggestion https://github.com/dotnet/runtime/issues/79895 for that.\r\n\r\nnow I have\r\n```c#\r\n[GeneratedRegex(@\"((?<=@\\(\\s*[A-Za-z_][A-Za-z_0-9\\-]*\\s*->\\s*'[^']*)%\\(\\s*(?<ITEM_SPECIFICATION>(?<ITEM_TYPE>[A-Za-z_][A-Za-z_0-9\\-]*)\\s*\\.\\s*)?(?<NAME>[A-Za-z_][A-Za-z_0-9\\-]*)\\s*\\)(?![^']*'(\\s*,\\s*'[^']*')?\\s*\\)))|((?<!@\\(\\s*[A-Za-z_][A-Za-z_0-9\\-]*\\s*->\\s*'[^']*)%\\(\\s*(?<ITEM_SPECIFICATION>(?<ITEM_TYPE>[A-Za-z_][A-Za-z_0-9\\-]*)\\s*\\.\\s*)?(?<NAME>[A-Za-z_][A-Za-z_0-9\\-]*)\\s*\\)(?=[^']*'(\\s*,\\s*'[^']*')?\\s*\\)))|((?<!@\\(\\s*[A-Za-z_][A-Za-z_0-9\\-]*\\s*->\\s*'[^']*@)%\\(\\s*(?<ITEM_SPECIFICATION>(?<ITEM_TYPE>[A-Za-z_][A-Za-z_0-9\\-]*)\\s*\\.\\s*)?(?<NAME>[A-Za-z_][A-Za-z_0-9\\-]*)\\s*\\)(?![^']*'(\\s*,\\s*'[^']*')?\\s*\\)))\",RegexOptions.ExplicitCapture|RegexOptions.Compiled|RegexOptions.IgnorePatternWhitespace)]\r\n```\r\nThe names of the substring variables had been acting as self documentation, so potentially one could manually add those as comments, something like this:\r\n```c#\r\n            [GeneratedRegex(@\"\r\n    ((?<=@\\(\\s*[A-Za-z_][A-Za-z_0-9\\-]*\\s*->\\s*'[^']*        # ItemVectorWithTransformLHS\r\n)\r\n    %\\(\\s* (?<ITEM_SPECIFICATION>(?<ITEM_TYPE>[A-Za-z_][A-Za-z_0-9\\-]*)\\s*\\.\\s*)? (?<NAME>[A-Za-z_][A-Za-z_0-9\\-]*) \\s*\\)        # ItemMetadataSpecification\r\n(?!\r\n    [^']*'(\\s*,\\s*'[^']*')?\\s*\\)        # ItemVectorWithTransformRHS\r\n)) | ((?<!\r\n    @\\(\\s*[A-Za-z_][A-Za-z_0-9\\-]*\\s*->\\s*'[^']*        # ItemVectorWithTransformLHS\r\n)\r\n    %\\(\\s* (?<ITEM_SPECIFICATION>(?<ITEM_TYPE>[A-Za-z_][A-Za-z_0-9\\-]*)\\s*\\.\\s*)? (?<NAME>[A-Za-z_][A-Za-z_0-9\\-]*) \\s*\\)        # ItemMetadataSpecification\r\n(?=\r\n    [^']*'(\\s*,\\s*'[^']*')?\\s*\\)        # ItemVectorWithTransformRHS\r\n)) | ((?<!\r\n    @\\(\\s*[A-Za-z_][A-Za-z_0-9\\-]*\\s*->\\s*'[^']*        # ItemVectorWithTransformLHS\r\n@)\r\n    %\\(\\s* (?<ITEM_SPECIFICATION>(?<ITEM_TYPE>[A-Za-z_][A-Za-z_0-9\\-]*)\\s*\\.\\s*)? (?<NAME>[A-Za-z_][A-Za-z_0-9\\-]*) \\s*\\)        # ItemMetadataSpecification\r\n(?!\r\n    [^']*'(\\s*,\\s*'[^']*')?\\s*\\)        # ItemVectorWithTransformRHS      \r\n))\r\n\", RegexOptions.ExplicitCapture | RegexOptions.Compiled | RegexOptions.IgnorePatternWhitespace)]\r\n```\r\n\r\nTBH I'm not sure that's clearer. I don't think I would bother. It would be better to just memorialize the existing fragments in comments, rather than in the regex.\r\n\r\nNote one other wrinkle - a number of these files compile for older versions than .NET 7. So it is necessary to wrap these in #if, so something like\r\n```c#\r\n            internal static readonly Lazy<Regex> ItemMetadataPattern = new Lazy<Regex>(\r\n                () => new Regex(ItemMetadataSpecification,\r\n                    RegexOptions.IgnorePatternWhitespace | RegexOptions.ExplicitCapture | RegexOptions.Compiled));\r\n```\r\nbecomes\r\n```c#\r\n            internal static readonly Lazy<Regex> ItemMetadataPattern = new Lazy<Regex>(() => \r\n#if NET7_0_OR_GREATER\r\n                GetItemMetadataPatternRegex());\r\n#else\r\n                new Regex(ItemMetadataSpecification,\r\n                    RegexOptions.IgnorePatternWhitespace | RegexOptions.ExplicitCapture | RegexOptions.Compiled));\r\n#endif\r\n\r\n#if NET7_0_OR_GREATER\r\n            [GeneratedRegex(\"%\\\\(\\\\s* (?<ITEM_SPECIFICATION>(?<ITEM_TYPE>[A-Za-z_][A-Za-z_0-9\\\\-]*)\\\\s*\\\\.\\\\s*)? (?<NAME>[A-Za-z_][A-Za-z_0-9\\\\-]*) \\\\s*\\\\)\", RegexOptions.ExplicitCapture | RegexOptions.Compiled | RegexOptions.IgnorePatternWhitespace)]\r\n            private static partial Regex GetItemMetadataPatternRegex();\r\n#endif\r\n```\r\nThese #if's aren't pretty, but it's worth it to eliminate all this JIT work at runtime when running on .NET 7+.\r\n\r\nI note that most of the Regexes in the code are constructed lazily, since https://github.com/dotnet/msbuild/pull/1199 to delay generating the IL. I don't think that's necessary for the source generated ones, as constructing them is cheap. However, it's probably simplest to still put them inside the lazy construction, as I've done above, so that all the places that use them can remain unchanged.",
        "createdAt": "2022-12-22T01:02:20Z",
        "updatedAt": "2022-12-22T01:05:30Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "I also hit a couple of issues using the fixer\r\nhttps://github.com/dotnet/runtime/issues/79891 --- this is partially fixed in .NET 8 builds\r\nhttps://github.com/dotnet/runtime/issues/79892 --- I dealt with this by just partially reverting the changes.\r\n\r\nNeither stop it working, just make a little more manual tuning necessary.\r\n\r\n@nikijohnson77 does this make sense? LMK if you need more help.",
        "createdAt": "2022-12-22T01:04:46Z",
        "updatedAt": "2022-12-22T01:04:46Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "Doesn't the regex source generator support references to named string constants in the attribute argument?",
        "createdAt": "2022-12-22T07:11:40Z",
        "updatedAt": "2022-12-22T07:11:40Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "I feel like the regex string can be further simplified and made smaller (by defining common parts in each as const and then use string interpolation). So then even in the .NET 7's attribute code, it would use the constant used for the input regex string.",
        "createdAt": "2022-12-23T00:07:48Z",
        "updatedAt": "2022-12-23T00:09:26Z",
        "author": {
          "login": "AraHaan"
        }
      },
      {
        "body": "If that works - great.",
        "createdAt": "2022-12-23T03:41:58Z",
        "updatedAt": "2022-12-23T03:41:58Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "the issues I linked above are now mostly fixed. Is anyone (@AraHaan @KalleOlaviNiemitalo?) interested in doing this? might start with just enabling one or two to see how it goes.",
        "createdAt": "2023-04-19T19:10:30Z",
        "updatedAt": "2023-04-19T19:10:30Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "I been busy lately but I could see what could be done on this when I have more time.",
        "createdAt": "2023-04-23T09:27:53Z",
        "updatedAt": "2023-04-23T09:27:53Z",
        "author": {
          "login": "AraHaan"
        }
      },
      {
        "body": "Ty",
        "createdAt": "2023-07-02T20:08:09Z",
        "updatedAt": "2023-07-02T20:08:09Z",
        "author": {
          "login": "nikijohnson77"
        }
      },
      {
        "body": "Done",
        "createdAt": "2023-07-13T02:33:52Z",
        "updatedAt": "2023-07-13T02:33:52Z",
        "author": {
          "login": "nikijohnson77"
        }
      }
    ]
  }
}