{
  "number": 11201,
  "title": "Support executing Powershell scripts in Exec task",
  "body": "### Summary\n\nExtend the Exec task to support executing Powershell scripts either using pwsh.exe or powershell.exe\n\n### Background and Motivation\n\nCurrently, the Exec task is hardcoded to use `cmd.exe` on Windows, and specifying `ToolPath` and `ToolExe` parameters to Exec task having them point to for example `pwsh.exe` does not help, because there is some internal processing and adding command line parameters specific to `cmd.exe`\n\nHaving support for Powershell scripts in Exec task adds a high level of flexibility to `PreBuildEvent` and `PostBuildEvent` as Powershell has a log more features than `cmd.exe` and batch scripts.\n\n### Proposed Feature\n\nSupporting Powershell as command prcoessor requires some changes in the `Exec` task class. These are centered around the places where the command tool is evaluated, where the potential batch file is written and the execution of the command is hanndled. As far as I can see, it will only be in this class, changes are required.\n\nTo avoid changing designers for `PreBuildEvent` and `PostBuildEvent`, an option could be to specify the wanted command processor in a comment line first in the script. Then based on this comment line, the `Exec` class resolves the command processor.\n\nThe comment could be something like \n\n```\n#!shell:<processor>\n```\n\nwhere `<processor>` would be either `cmd`, `pwsh` or `powershell`. If no specified, `cmd` would be default as today.\n\nIf `pwsh` is not installed, there are two options:\n\n1. Fallback to `powershell`\n2. Fail the task\n\n\n\n### Alternative Designs\n\n_No response_",
  "state": "OPEN",
  "createdAt": "2024-12-30T09:54:30Z",
  "updatedAt": "2025-01-14T14:40:37Z",
  "closedAt": null,
  "author": {
    "login": "bstordrup"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "triaged",
    "gathering-feedback"
  ],
  "comments": {
    "nodes": [
      {
        "body": "Hi @bstordrup,\n\nThank you for the proposed feature. \nIt's already partially supported by https://github.com/dotnet/msbuild/blob/main/src/Utilities/ToolTask.cs#L61 class. \nPlease check the example that invokes power shell script: https://github.com/dotnet/msbuild/blob/main/src/MSBuild.Bootstrap.Utils/Tasks/InstallDotNetCoreTask.cs.",
        "createdAt": "2025-01-02T08:30:00Z",
        "author": {
          "login": "YuliiaKovalova"
        }
      },
      {
        "body": "Hi @YuliiaKovalova,\n\nThe example you mention overrides the ToolName property on the ToolTask to be `powershell.exe`.\n\nBut my point is not generating a `Task` instance for this - the point is to allow you to use a PowerShell script *directly*  in for example the `PreBuildEvent`.\n\nTry for example to put the following in the `PreBuildEvent` field in the Project properties page:\n\n```\nGet-ChildItems $(TargetDir)\n```\n\nand then build the project.\n\nWhen I tried, I got failing build.\n\nThe contents of the `PreBuildEvent` field is in the project file (for Sdk style projects) transformed into a `Target` containing an `Exec` task. And the `Exec` task defaults to `cmd.exe` for Windows or `sh` for non-Windows.",
        "createdAt": "2025-01-02T13:32:00Z",
        "author": {
          "login": "bstordrup"
        }
      }
    ]
  }
}