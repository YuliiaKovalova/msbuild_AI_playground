{
  "number": 772,
  "title": "Assembly search path should be more configurable to support reproducible builds",
  "body": "Hi MSBuild team,\n\nas briefly mentioned in #749 I stumbled over MSBuild's default assembly search path and lost quite some time with that. I was diagnosing an issue and deleted some internally provisioned assemblies to make sure I was getting the right ones, but wasn't due to MSBuild resolving dependencies from the OutputPath/OutDir. This was highly surprising to me, and in fact it's problematic in our build since we have other tools in play.\n\nWhat I would expect is that MSBuild is transforming a set of inputs to a set of outputs. Resolving assemblies from the OutputPath is conflating the concepts and is creating problems in workflows where the output path is regularly populated by other tools. I do have a fix, but it's ugly.\n\nThe larger issue is that of reproducible builds. As you're aware there are a number of locations in the AssemblySearchPath. If I were to make an architectural decision to depend only on Framework and internally provisioned assemblies (i.e. no arbitrary GAC contents etc.), I would need to go out of my way to check and document that (In fact we have the moral equivalent of this decision due to our target platform) and still any dev could break it in a rush without even noticing.\n\nIf I could limit the search path in msbuild, or have the assembly resolution task fail or warn on project-designated \"bad\" sources we'd be in a better position. The bad sources could be greyed in VS to make it abundantly clear to devs what's going on.\n",
  "state": "CLOSED",
  "createdAt": "2016-07-10T16:24:21Z",
  "updatedAt": "2024-02-21T17:27:11Z",
  "closedAt": "2021-12-21T15:10:42Z",
  "author": {
    "login": "simonthum"
  },
  "labels": [
    "User Experience",
    "Area: Task: Resolve Assembly References (RAR)",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Backlog"
  },
  "comments": {
    "nodes": [
      {
        "body": "@nguerrera This idea seems like it'd play well with some of the things you're working on, especially around cross-targeting from desktop MSBuild (but still making sure that references come from packages and not other locations).\n",
        "createdAt": "2016-09-26T18:31:37Z",
        "updatedAt": "2016-09-26T18:31:37Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "You _can_ override AssemblySearchPaths so I'm not sure what the request is here.\n\nI've made the default for our new project system exclude GAC, registry-based locations, and output directories. I sympathize with the spirit here because all of those have caused me nothing but pain over the years. :)\n",
        "createdAt": "2016-09-30T16:40:08Z",
        "updatedAt": "2016-09-30T16:40:08Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "@nguerrera In summary, the request is to make it easier to control assembly resolution or change AssemblySeachPath.\n\nYes I can do that now, but if I want to retain the ability to resolve against a target framework (i.e. externally provisioned metadata-only assemblies) then I'd have to know where they are to re-add them somehow or remove the paths I don't want by matching them character-by-character in my build files.\n\nI'm doing the latter, but one day the characters introducing that path are going to change and I know I won't note.\n\nIf you know a better way to achieve the above, please let me know!\n",
        "createdAt": "2016-09-30T18:30:26Z",
        "updatedAt": "2016-09-30T18:30:26Z",
        "author": {
          "login": "simonthum"
        }
      },
      {
        "body": "I'll add toggles for each line in https://github.com/Microsoft/msbuild/blob/master/src/Tasks/Microsoft.Common.CurrentVersion.targets#L565-L576.\r\nThat way people can have fine grained control, and the SDK can use the toggles instead of rewriting the search paths.",
        "createdAt": "2018-08-07T23:58:33Z",
        "updatedAt": "2018-08-07T23:58:33Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "I think it'd be nice to have a single toggle for what we think is right, too. That'd make it easy to make an existing project more robust in this way, and not require converting to the SDK or setting several toggles.",
        "createdAt": "2018-08-08T14:51:52Z",
        "updatedAt": "2018-08-08T14:51:52Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Is this what we think is right? `{HintPathFromItem};{RawFileName}`\r\nMore lenient: `{HintPathFromItem};{TargetFrameworkDirectory};{RawFileName}`\r\nDoes `TargetFrameworkDirectory` even make sense for .net core? Should we have two good ones, one for full framework and one for .net core?\r\n\r\nFor reference, the SDK has these: https://github.com/dotnet/sdk/blob/6945e3694c918eea4c8c4fb6217e1485b179994b/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.Sdk.props#L93\r\n\r\nAnd I guess we won't touch the design time search paths, as that's VS' property: https://github.com/Microsoft/msbuild/blob/master/src/Tasks/Microsoft.Common.CurrentVersion.targets#L2621. They're more restrictive than the non design time ones.\r\n\r\nSo, I guess my proposal is now:\r\n- add a toggle for using a \"machine independent\" set. Options: `UseRestrictedRARSearchPaths` / `UseMinimalRARSearchPaths` / `UseExplicitRARSearchPaths` (meaning there's no search, something points directly to the path on disk)\r\n- also add a toggle for each line in the current ones. I don't know how useful this is. Sounds useful only if we get the minimal set wrong, and users want to tweak.\r\n",
        "createdAt": "2018-08-08T17:01:00Z",
        "updatedAt": "2018-08-08T17:01:00Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "I think we need to keep `{TargetFrameworkDirectory}` to support bare references to framework types, like\r\n\r\n```xml\r\n<Reference Include=\"System.Xml\" />\r\n```\r\n\r\nThose are extremely common in .NET Framework-targeting projects, and it should be safe enough since we ensure the targeting pack for the target framework is installed.",
        "createdAt": "2018-08-08T18:14:20Z",
        "updatedAt": "2018-08-08T18:14:20Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Note there's some debate about HintPathFromItem. My position is that it is fine if there's nothing in front of it, but see this thread: https://github.com/dotnet/arcade/pull/428#discussion_r207396516",
        "createdAt": "2018-08-08T20:23:41Z",
        "updatedAt": "2018-08-08T20:23:41Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "We haven't had any problems with TargetFrameworkDirectory. We always have it set in Core, but we clear out the directories: https://github.com/dotnet/sdk/blob/7aaaeaf06d49047648609337b0ecd1a2b8cf97b8/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.DisableStandardFrameworkResolution.targets#L17-L26",
        "createdAt": "2018-08-08T20:26:27Z",
        "updatedAt": "2018-08-08T20:26:27Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "I'm with Nick on `{HintPathFromItem}`: put it first; leave it in. Too much Internet Code that uses it, because VS has long used it, even if we change VS to not  use it any more.",
        "createdAt": "2018-08-08T20:31:19Z",
        "updatedAt": "2018-08-08T20:31:19Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "We decided to just add better documentation on how to set assembly search paths as opposed to introducing new toggles, since the toggles would be more complicated than just setting the right property to the right values.",
        "createdAt": "2018-08-14T00:07:38Z",
        "updatedAt": "2018-08-14T00:07:38Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "@cdmihai That sounds reasonable.\r\n\r\nBut please provide examples, I've always found it painful to work with ASP, e.g. when I had to fight an SDK that did not like to be installed in applicable project folders by failing to resolve native assemblies.",
        "createdAt": "2018-09-15T19:01:06Z",
        "updatedAt": "2018-09-15T19:01:06Z",
        "author": {
          "login": "simonthum"
        }
      },
      {
        "body": "Seconded immensely! I would love there to be an opt-in mode where msbuild worked _soley_ off the installed SDK and nugets, and ignored everything else on the system.\r\n\r\nHere's what my team has found so far that we had to override to get that behavior:\r\n\r\n- TargetFrameworkRootPath=[undefined]. For netframework targeting projects, this gets initialized to point to your visual studio or net framework reference assembly installation. Not only is this not installed by the dotnetsdk, but the assembly versions are different for some assemblies (System.Net.Http?) between the vs one and the net framework reference assemblies. Instead, we override this property to `[Undefined]` and issue a warning if the user doesn't import the Microsoft.NETFramework.ReferenceAssemblies nuget.\r\n- DisableImplicitNuGetFallbackFolder=true. This was hiding some security issues. Some older dotnet sdks populated the fallback folder with nugets that have since been reported in CVEs. This was hard to discover as nuget restore wasn't pulling the packages down for some developers (that had previously installed earlier dotnetsdks), but was for others (which had never used the older sdks).\r\n- AssemblySearchPaths. We just plain remove GAC from that list. Ours is now set to \r\n  ```\r\n  <AssemblySearchPaths>\r\n    {CandidateAssemblyFiles};\r\n    {HintPathFromItem};\r\n    {TargetFrameworkDirectory};\r\n    {RawFileName};\r\n    $(OutDir)\r\n  </AssemblySearchPaths>\r\n  ```\r\n  But we could likely do better here.\r\n\r\n",
        "createdAt": "2021-04-19T17:24:04Z",
        "updatedAt": "2021-04-19T17:34:51Z",
        "author": {
          "login": "ghost"
        }
      },
      {
        "body": "Maybe we could start a wiki or doc to record all the settings that users should configure on dotnetsdk in order to set themselves up for reproducible builds?",
        "createdAt": "2021-04-19T17:33:16Z",
        "updatedAt": "2021-04-19T17:33:16Z",
        "author": {
          "login": "ghost"
        }
      },
      {
        "body": "@nguerrera \r\n\r\n> I've made the default for our new project system exclude GAC, registry-based locations, and output directories. I sympathize with the spirit here because all of those have caused me nothing but pain over the years. :)\r\n\r\nNick, can you point me to this new project system? We just moved to sdk style `<Project Sdk=\"Microsoft.NET.Sdk\">`, but are still seeing GAC on AssemblySearchPath by default when targetting netframework. \r\n\r\n> You can override AssemblySearchPaths so I'm not sure what the request is here\r\n\r\nTrue, and I'm definitely thankful that we can override this setting. But it's hard to determine the full set of settings needed to configure a reproducible build for even the simplest projects. Maybe a doc on reproduceable builds that documents all the settings needed to achieve this? Or perhaps a nuget package that checks for anti-reproducible settings and warns for them, so users can know if they've checked a good set of options? \r\n\r\nI'm just spit-balling some ideas here.",
        "createdAt": "2021-04-19T17:42:12Z",
        "updatedAt": "2021-04-19T17:42:12Z",
        "author": {
          "login": "ghost"
        }
      },
      {
        "body": "> The larger issue is that of reproducible builds. As you're aware there are a number of locations in the AssemblySearchPath. If I were to make an architectural decision to depend only on Framework and internally provisioned assemblies (i.e. no arbitrary GAC contents etc.), I would need to go out of my way to check and document that (In fact we have the moral equivalent of this decision due to our target platform) and still any dev could break it in a rush without even noticing.\r\n\r\nThis problem isn't one I would prescribe to build reproducibility. \r\n\r\nGenerally *reproducible* builds are builds that [meet the qualification](https://reproducible-builds.org/) of given the same inputs they will produce the same outputs (byte for byte). The fact that `$(AssemblySearchPath)` looks in a lot of places on the machine for resolution is immaterial to reproducibility. If the environment is the same, that is the machine state has the same set of files in all of the places considered by `$(AssemblySearchPath)`, then MSBuild will pick the same assemblies (same input, same output). \r\n\r\nThe request here is more around build *isolation*. Essentially the fact that `$(AssemblySearchPath)` looks for artifacts on the machine that weren't either a part of the .NET SDK or produced by my build means unwanted machine state is factoring into my build (my build is not isolated from other machine state). Removing say the GAC from `$(AssemblySearchPaths)` isn't changing the *reproducibility* of your build, it's just changing the state which is part of the \"input\" to your build. \r\n\r\nThis may seem like a pedantic point to make but it's an important one. The .NET SDK meets the *reproducibility* requirement for builds in the core scenarios. That is **very** important to us. The ability to *isolate* builds from other state on the machine is in many cases supported but not as well documented and understood. For example I couldn't rattle off all the extension points of MSBuild :smile: \r\n\r\nI'm not trying to diminish the bug report here or the arguments. I would very much like it if were easier to configure MSBuild to be more isolated. But that's separate from whether or not it's outputs are reproducible. \r\n\r\n> I would love there to be an opt-in mode where msbuild worked soley off the installed SDK and nugets, and ignored everything else on the system.\r\n\r\nThis is essentially an ask for a very strict *isolated* mode for MSBuild.  Again not disagreeing, but it's different than *reprocubility*. \r\n\r\n> Maybe we could start a wiki or doc to record all the settings that users should configure on dotnetsdk in order to set themselves up for reproducible builds?\r\n\r\nI think that would be very valuable. You listed a good number of the ones above but there are more. For example you need to ensure that you use a different NuGet folder if you want to be truly isolated from other builds on the machine. Having a shared place where we could list off all the items that impact isolation, and the pros / cons of flipping them, would likely be beneficial to a number of build maintainers in .NET. \r\n\r\n",
        "createdAt": "2021-04-20T19:19:16Z",
        "updatedAt": "2021-04-20T19:26:12Z",
        "author": {
          "login": "jaredpar"
        }
      },
      {
        "body": "> If the environment is the same, that is the machine state has the same set of files in all of the places considered by `$(AssemblySearchPath)`, then MSBuild will pick the same assemblies (same input, same output).\r\n\r\nYes, but one of the principles of reproducible-builds.org for build systems is \"Capture as little as possible from the environment\". While you _can_ say that your minimal environment is the entirety of everything installed on your build machine, it's very much against the intent here. Why depend on the GAC at all when there are fine alternatives available in the form of self contained reference assembly packages that can be restored deterministically?",
        "createdAt": "2021-04-20T19:34:13Z",
        "updatedAt": "2021-04-20T19:34:13Z",
        "author": {
          "login": "ghost"
        }
      },
      {
        "body": "> Nick, can you point me to this new project system? We just moved to sdk style <Project Sdk=\"Microsoft.NET.Sdk\">, but are still seeing GAC on AssemblySearchPath by default when targetting netframework.\r\n\r\n@aaronla-ms Hmm, I suspect there's something else in your projects causing this. I just checked with the following csproj:\r\n\r\n``` xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>net472</TargetFramework>\r\n  </PropertyGroup>\r\n</Project>\r\n```\r\n\r\nI get the following AssemblySearchPaths:\r\n\r\n![image](https://user-images.githubusercontent.com/75470/115476463-c1c6f380-a1f6-11eb-9067-51a0dcd0a4b2.png)\r\n\r\nI also don't see anything conditioning this on TargetFramework:\r\n\r\nhttps://github.com/dotnet/sdk/blob/4b47852bda23ec4fed8bcadf8186aa5cfb217cd7/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.Sdk.props#L91\r\n\r\nIf you can share repro steps or a https://aka.ms/binlog, we can probably chase down what's happening.\r\n",
        "createdAt": "2021-04-20T23:40:57Z",
        "updatedAt": "2021-04-20T23:40:57Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "Ah, @nguerrera  you're right; in our latest master, that's gone. Not sure where we got it from, but it's definitely not there now in dotnetsdk 3.1.407\r\n\r\nWe do see TargetFrameworkDirectory gets auto-resolved to sniff out registry and program files still, but it looks like i can remove `<AssemblySearchPath>` from our IsolatedBuild.props, and just keep the override of `TargetFrameworkPath=[undefined]`",
        "createdAt": "2021-04-20T23:48:57Z",
        "updatedAt": "2021-04-20T23:49:51Z",
        "author": {
          "login": "ghost"
        }
      },
      {
        "body": "@jaredpar \r\n\r\n> Removing say the GAC from $(AssemblySearchPaths) isn't changing the reproducibility of your build, it's just changing the state which is part of the \"input\" to your build.\r\n\r\n> This may seem like a pedantic point to make but it's an important one. The .NET SDK meets the reproducibility requirement for builds in the core scenarios.\r\n\r\nPerhaps you've had different experience, but I've it to be unrealistic to assume users will have the same Visual Studio or GAC configuration. E.g. some users are running VS 2019 Preview, some are using VS 2017 because they don't really use VS much, and yet others have some weird versions of Newtonsoft.Json installed in their GAC because some installer thought that was a Good Idea.\r\n\r\nWhile it could work in theory, I just haven't found it to last long in practice. We've had better success by pruning dependencies on Program Files, GAC, and registry where practical.",
        "createdAt": "2021-04-21T00:13:19Z",
        "updatedAt": "2021-04-21T00:13:19Z",
        "author": {
          "login": "ghost"
        }
      },
      {
        "body": "> Yes, but one of the principles of reproducible-builds.org for build systems is \"Capture as little as possible from the environment\". While you can say that your minimal environment is the entirety of everything installed on your build machine, it's very much against the intent here.\r\n\r\nCompletely agree. Ideally you should focus on adding as much isolation to the build as possible. All the production builds I maintain attempt to do this. At the end of the day though there is a difference between problems of isolation and reproducibility. That is the main point I wanted to get across because they are diff problems and have diff priorities, requirements, etc ... attached to them. \r\n\r\n> Why depend on the GAC at all when there are fine alternatives available in the form of self contained reference assembly packages that can be restored deterministically?\r\n\r\nThere are historic reasons why MSBuild needs to do this. It's similar to asking \"why is the default of the C# compiler to have non-deterministic builds?\" The answer, for both cases, is because if we did the \"better\" thing it would break customers when they moved to a new version of Visual Studio. The only realistic option is to provide knobs, and ideally permanent opt-ins, to let customers who care get on the golden path for these types of scenarios. \r\n\r\n",
        "createdAt": "2021-04-21T00:17:43Z",
        "updatedAt": "2021-04-21T00:17:43Z",
        "author": {
          "login": "jaredpar"
        }
      },
      {
        "body": "@jaredpar The source you linked say \"Reproducible builds are a set of software development practices that create an _independently-verifiable_ path from source to binary code.\" (emphasis mine)\r\n\r\nAs is explained in more detail under \"How?\", the concept of isolation is part of that definition, they also advocate for a way to recreate a \"close enough\" environment.\r\n\r\nThis leaves us with the two aspects you mention:\r\n* deterministic, idempotent or reproducible in the narrow sense: AFAICT in roslyn this is realized.\r\n* ability to recreate, pre-define or isolate the build: This still needs better msbuild support.\r\n\r\nFor clarity, let's stick with the notion that reproducible builds need at least both.\r\n\r\n@aaronla-ms I'm happy to share my snippets, but it seems you already found more tricks than me. BTW I dropped OutDir and never missed it since.",
        "createdAt": "2021-04-25T19:09:03Z",
        "updatedAt": "2021-04-25T19:09:30Z",
        "author": {
          "login": "simonthum"
        }
      },
      {
        "body": "> ability to recreate, pre-define or isolate the build: This still needs better msbuild support.\r\n\r\nOnly the last item there needs better build support. Technologies like docker or simple setup instructions can solve the first two without changes to msbuild. ",
        "createdAt": "2021-04-26T00:57:28Z",
        "updatedAt": "2021-04-26T00:57:28Z",
        "author": {
          "login": "jaredpar"
        }
      },
      {
        "body": "> @aaronla-ms I'm happy to share my snippets, but it seems you already found more tricks than me. BTW I dropped OutDir and never missed it since.\r\n\r\nYou give  me too much credit! But yeah, I feel your pain too. \r\n\r\nPlease feel free to share what you've found so far. Open communication is the best way we can mutually learn in this sort of ad-hoc design space :)",
        "createdAt": "2021-04-26T16:37:59Z",
        "updatedAt": "2021-04-26T16:37:59Z",
        "author": {
          "login": "ghost"
        }
      },
      {
        "body": "@jaredpar  I agree, I binned those together solely by purpose.\r\n\r\nI think a collection of build isolation settings and tricks would get the job done, most of the time. I'll post what I manage to find in my project files.",
        "createdAt": "2021-04-26T21:08:44Z",
        "updatedAt": "2021-04-26T21:08:44Z",
        "author": {
          "login": "simonthum"
        }
      },
      {
        "body": "> I think a collection of build isolation settings and tricks would get the job done, most of the time. I'll post what I manage to find in my project files.\r\n\r\nWould really like to see this. If we can get a doc going somewhere I'm more than happy to help contrib. Know we've accumulated a few settings over the years.\r\n\r\nI'm also interested to see how we eventually categorize settings. I'm guessing items like removing GAC from the `$(AssemblySearchPaths)` is likely to be fairly non-controversial. Removing that is very important to maintaining build isolation. But what about the NuGet restore directory? If you want true isolation then that needs to be solution specific otherwise you can get into cross feed poisoning issues (unless you use lock files). But I'm guessing some teams would probably end up sharing this directory because of the perf gains associated with doing so. \r\n",
        "createdAt": "2021-04-26T23:04:11Z",
        "updatedAt": "2021-04-26T23:04:11Z",
        "author": {
          "login": "jaredpar"
        }
      },
      {
        "body": "> If you want true isolation then that needs to be solution specific otherwise you can get into cross feed poisoning issues (unless you use lock files). But I'm guessing some teams would probably end up sharing this directory because of the perf gains associated with doing so.\r\n\r\nOh, it gets worse than that. Our old build infrastructure doesn't permit per-repo package directories, and at time has restored the _wrong package contents_ when some peer team had a private feed with a manually modified version of the nuget under the same name and version. And forget about cross repo poisoning -- I've seen dozens of peers fail to notice feed configuration errors because a previous commit of that repo had restored packages into the cache.\r\n\r\nI'm currently recommending my peers use a shared cache, but merge validation builds _always_ use a clean cache. That way devs don't have to pay the restore cost, but we don't regress main.",
        "createdAt": "2021-04-26T23:49:51Z",
        "updatedAt": "2021-04-26T23:49:51Z",
        "author": {
          "login": "ghost"
        }
      },
      {
        "body": "I think resolved via #7008? I didn't read all the conversation, so let me know if not.",
        "createdAt": "2021-12-21T15:10:41Z",
        "updatedAt": "2021-12-21T15:10:41Z",
        "author": {
          "login": "Forgind"
        }
      }
    ]
  }
}