{
  "number": 181,
  "title": "Create NuGet package for CoreCLR binaries.",
  "body": "",
  "state": "CLOSED",
  "createdAt": "2015-09-03T20:09:55Z",
  "updatedAt": "2024-02-21T17:30:55Z",
  "closedAt": "2015-09-24T22:17:55Z",
  "author": {
    "login": "AndyGerlicher"
  },
  "labels": [
    ".NET Core",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Sprint 89"
  },
  "comments": {
    "nodes": [
      {
        "body": ":+1: Would love to have this. \n",
        "createdAt": "2015-09-03T21:30:41Z",
        "updatedAt": "2015-09-03T21:30:41Z",
        "author": {
          "login": "jaredpar"
        }
      },
      {
        "body": "I've got an initial stab at a nuspec for a package [here](https://github.com/dsplaisted/msbuild/blob/3345c27cc8ac47d3c14a3491cf2e24e5d6a248de/src/nuget/Microsoft.Build.NetCore.nuspec).  It includes the Microsoft.Build.Framework, Microsoft.Build.Utilities.Core, and Microsoft.Build.Tasks.Core assemblies, which is what the Roslyn tasks need to reference.  I've also made changes to [a fork of Roslyn](https://github.com/dsplaisted/roslyn/tree/netcore-buildtask) to build against this package.\n\nHere are some outstanding questions:\n- [x] Do we create one package for all the assemblies or a separate package per assembly?\n  - I propose we create a separate package per assembly.  That's what we've been doing with for .NET Core.\n- [x] Should the package(s) be exclusive to .NET Core, or should it also be reference-able from projects targeting .NET Framework?\n  - I propose making it work for both.  We can either add metadata that will cause the assemblies to be referenced from the GAC when targeting .NET Framework, or we can add the assemblies to the package itself if we think they won't always be in the GAC.\n- [x] What name should we use for the package id(s)?\n  - If we go with my proposals for the first two items, then we can simply use the assembly name as the NuGet package ID\n- [x] What should the other package metadata be (title, summary, description, license, project URL, icon)?\n- [x] How do we make sure that the dependencies listed are correct?\n  - @onovotny has written a [NuSpec Reference Generator](https://github.com/onovotny/ReferenceGenerator/blob/master/readme.md) which looks like it can do this automatically.  Let's see if we can use that.\n- [ ] How do we set up a process for publishing this to MyGet, and eventually shipping packages with fully signed binaries?\n\nAny comments?\n",
        "createdAt": "2015-09-08T23:03:54Z",
        "updatedAt": "2015-09-11T22:42:04Z",
        "author": {
          "login": "dsplaisted"
        }
      },
      {
        "body": "W.r.t. the Reference generator, I'm happy to make changes if there are any issues/requirements that it doesn't do yet.\n",
        "createdAt": "2015-09-09T01:54:51Z",
        "updatedAt": "2015-09-09T01:54:51Z",
        "author": {
          "login": "clairernovotny"
        }
      }
    ]
  }
}