{
  "number": 6034,
  "title": "MSBuild evaluation for Netcore is 3x slower than Netframework causing slow solution load times",
  "body": "### Issue Description\r\nIn an effort to improve solution load for netcore projects, I have analyzed MSBuild evaluation times between netcore and netframework evaluation times and find that netcore is around 3x slower in evaluations than netframework. Some of the issues listed below smell like bugs and other need more profiling to understand the problem better. Cutting this Issue to track after meeting with Rainer and team and Ladi, Alina and Roman.\r\n\r\n### Steps to Reproduce\r\n**Measuring conditions**\r\n- The netcore and netframework projects are identical in terms of files, folders, number of projects, project types, solution folders with the only difference being one targets Netframework and the other targets Netcore.\r\n- All traces include the Microsoft-Build events\r\n- The measurements are for a warm load with a VS start to ensure the startup thread info gets collected for the trace. \r\n- - After VS was installed and a few solution opens were done, \r\n- - PerfView collect is started\r\n- - Open VS and continue without code\r\n- - Click File and select the measuring project from Recent and open the solution\r\n- - Stop the PerfView collect\r\n\r\n### Data\r\n- Full solutions and traces at `\\\\SLNATSCALE002\\CoreVsFramework` shared with Ladi and Alina. \r\n- The traces contain 20, 400 and 1000 projects for both core and framework. Again both identical except the target framework.\r\n- The solutions will contain sln files with projects counts as a multiplier of the base project size of 20 with steps going all the way to 100. Example: MultiCore20__0050.sln is 20*50=solution containing 1000 projects. \r\n- The 400 project solutions (MultiCore20_0020.sln and MultiFramework20_0020.sln) and traces are good to analyze without worrying about of OOM issues on the devbox, but showing issues amplified enough to narrow down problem.\r\n\r\n#### Current State of Evaluation\r\n|               | NETFRAMEWORK     | NETFRAMEWORK          | NETCORE          | NETCORE               |\r\n|---------------|------------------|-----------------------|------------------|-----------------------|\r\n| Solution size | OpenSolutionFile | ReEvaluateIfNecessary | OpenSolutionFile | ReEvaluateIfNecessary |\r\n| 20 projects   | 4776             | 472                   | 7313             | 1274                  |\r\n| 400 projects  | 11383            | 6357                  | 26551            | 15481                 |\r\n| 1000 projects | 36414            | 15444                 | 74555            | 38427                 |\r\n\r\n#### Evaluation phase split (400 projects)\r\n\u00a0 | Core (in ms) | Metadata | Framework (in   ms) | Metadata\r\n-- | -- | -- | -- | --\r\nPass0 | 337 | \u00a0 | 117 | \u00a0\r\nPass1 (properties, imports) | 18180 | Properties = 735/project   \u00a0   Imports = 83/project | 4535 | Properties = 613/project   \u00a0   Imports = 56/project\r\nPass2 (item definitions) | 36 | \u00a0 | 9 | \u00a0\r\nPass3 (project items properties) | 7771 | 245/project | 1796 | 50/project\r\nPass4 (NumberOfUsingTaskElements) | 672 | 101/project | 149 | 57/project\r\nPass5 (read targets) | 1069 | 475-481/project (Cost on each project | 295 | 332-335 / project   (First project takes the bulk cost)\r\nEvaluateCondition | 109 | 1964 | 56 | 1397\r\nExpandGlob | 989 | 4/project | 14 | 1/project\r\nParse | 24 | \u00a0 | 23 | \u00a0\r\nLoadDocument | 705 | 1298 = 3 per project + 138 common props and   targets | 179 | 1 per project + 138 common props and   targets\r\nTrue Evaluation Cost | 28065 | \u00a0 | 6901 | \u00a0\r\n\r\n#### Breakdown of issues\r\n- [x] Additional profiling per pass for netcore projects                                                     | [#6070](https://github.com/dotnet/msbuild/issues/6070) \r\n- [x] SdkResolution.SdkResolverService should be globalized for netcore evaluation                           | [#6060](https://github.com/dotnet/msbuild/issues/6060)\r\n- [x] Switch System.IO usage with Microsoft.IO usage to reduce string allocations                                                     | [#6075](https://github.com/dotnet/msbuild/issues/6075) \r\n- [x] Optimize string building and interning                                                                 | [#5663](https://github.com/dotnet/msbuild/issues/5663) \r\n- [x] Glob pattern matching improvements for netcore/CPS                                                     | [#6069](https://github.com/dotnet/msbuild/issues/6069) \r\n- [x] Avoid disk scans for projects by relying on DirectoryTree from CPS                                     | [#6068](https://github.com/dotnet/msbuild/issues/6068) \r\n- [x] LogProjectEvaluationStarted is expensive for netcore and increases with projects                       | [#6065](https://github.com/dotnet/msbuild/issues/6065) \r\n- [x] LoggingContext.LogBuildEvent is slow but has a static cost                                             | [#6066](https://github.com/dotnet/msbuild/issues/6066) \r\n- [x] Microsoft.Build.Internal.EngineFileUtilities.GetFileListEscaped is 3x slower for netcore projects      | [#6061](https://github.com/dotnet/msbuild/issues/6061) \r\n- [x] DecorateItemsWithMetadata is 3x slower for netcore projects                                            | [#6062](https://github.com/dotnet/msbuild/issues/6062) \r\n- [x] ExpandPropertiesLeaveEscaped using ReuseableStringBuilder 50% slower than OpportunisticIntern          | [#6063](https://github.com/dotnet/msbuild/issues/6063)\r\n- [x] ProcessMetadataElements 5x slower for netcore projects                                                | [#6064](https://github.com/dotnet/msbuild/issues/6064) \r\n- [x] Expand the MSBuild optprof scenarios to have more representative dotnet/project-system + CPS scenarios | [#6067](https://github.com/dotnet/msbuild/issues/6067) \r\n- [x] Address issues with ETW traces in Evaluator                                                     | [#6039](https://github.com/dotnet/msbuild/issues/6039) \r\n- [x] Reduce GC pressure in InterningBinaryReader.ReadString                                                    | [#3210](https://github.com/dotnet/msbuild/issues/3210) \r\n- [x] TargetResult.TranslateItems is not pooling read buffers                                                    | [#6291](https://github.com/dotnet/msbuild/issues/6291) \r\n- [x] potential lock contention in ProjectRootElementCache.Get                                                    | [#3039](https://github.com/dotnet/msbuild/issues/3039) \r\n- [x] reuse CPS directory tree to resolve file globbings (instead of accessing the file system)                                                    | [#5467](https://github.com/dotnet/msbuild/issues/5467) \r\n\r\nFull analysis at [MSBuild-performance-improvements](https://dev.azure.com/devdiv/DevDiv/_wiki/wikis/DevDiv.wiki/19834/MSBuild-performance-improvements) and [MSBuild Performance.docx](https://microsoft-my.sharepoint.com/:w:/p/arkalyan/EUcbX4iyv8RGq7FpglKdSesBhip-PZa2EAvg5y-xEkOAWg?e=vTeKVf).\r\n\r\n### Versions & Configurations\r\nVS version = 16.9.0 Preview 4.0 [30912.315.main]\r\nMSBuild version = 16.9.0.6202\r\n\r\n### Attach a binlog\r\nTraces and solutions are at \\SLNATSCALE002\\CoreVsFramework. Numbers are consistent across different runs.\r\n\r\n@ladipro and @rainersigwald FYI.",
  "state": "CLOSED",
  "createdAt": "2021-01-14T17:22:05Z",
  "updatedAt": "2024-02-21T14:15:39Z",
  "closedAt": "2021-10-21T13:45:17Z",
  "author": {
    "login": "arunchndr"
  },
  "labels": [
    "Area: Performance",
    "Priority:1",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "ladipro"
      }
    ]
  },
  "milestone": {
    "title": "VS 17.0"
  },
  "comments": {
    "nodes": [
      {
        "body": "Team Triage: first step: need to identify how this issue aligns with the existing [user story](https://github.com/dotnet/msbuild/issues/5873).",
        "createdAt": "2021-01-21T13:17:34Z",
        "updatedAt": "2021-01-21T13:17:34Z",
        "author": {
          "login": "AR-May"
        }
      },
      {
        "body": "@ladipro: Added #3210 to this parent. It looks like it was already solved by you as a part of #5663 and #6063? ",
        "createdAt": "2021-02-10T19:08:30Z",
        "updatedAt": "2021-02-10T19:08:30Z",
        "author": {
          "login": "arunchndr"
        }
      },
      {
        "body": "@arkalyanms, you're right, I've closed #3210, thank you!",
        "createdAt": "2021-03-02T11:57:23Z",
        "updatedAt": "2021-03-02T11:57:23Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "On a more recent pass with the latest evaluation fixes, there were 2 other issues that started showing - #3039 and #5467. \r\n\r\n@AndyGerlicher #3039 seems to manifest when using the PRE cache. Do you know if using MSBUILDUSESIMPLEPROJECTROOTELEMENTCACHECONCURRENCY viable given the lock bug?",
        "createdAt": "2021-04-20T00:02:24Z",
        "updatedAt": "2021-04-20T00:02:24Z",
        "author": {
          "login": "arunchndr"
        }
      },
      {
        "body": "All child issues are closed. Thank you @arkalyanms for driving this effort!\r\n\r\nI have opened https://github.com/dotnet/msbuild/issues/6977 to track further improvements now enabled by referencing Microsoft.IO.Redist. It will be tackled as part of a different epic.",
        "createdAt": "2021-10-21T13:45:17Z",
        "updatedAt": "2021-10-21T13:45:17Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "Thank you for working on these fixes @ladipro and @AR-May! \r\n\r\nIn one of our more recent meetings, we spoke about moving the sdk resolver cache out of the evaluation context so it is shared irrespective of a caller's use of the shared evaluation context. Should we open a backlog issue for that?",
        "createdAt": "2021-10-21T16:39:35Z",
        "updatedAt": "2021-10-21T16:39:35Z",
        "author": {
          "login": "arunchndr"
        }
      },
      {
        "body": "@arkalyanms good point, I have opened #6987. Rainer already has a draft PR out addressing the repeated SDK resolver enumerations.",
        "createdAt": "2021-10-25T14:09:01Z",
        "updatedAt": "2021-10-25T14:09:01Z",
        "author": {
          "login": "ladipro"
        }
      }
    ]
  }
}