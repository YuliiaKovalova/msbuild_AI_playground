{
  "number": 10898,
  "title": "Satellite assemblies with 3-character language codes are not copied to the output from NuGet packages",
  "body": "### Issue Description\n\nWhen satellite assemblies are packaged in .nupkg files and then referenced by another project, none of the cultures with 3-character language codes are copied into the build output.\n\nThis is known to happen for build, publish, and pack as tool. There may be more cases, such as single file with embedded resources.\n\nThe behavior is the same in Visual Studio 2022 (Version 17.11.5) as well as the .NET SDK 8.0.403.\n\nThe following neutral cultures are known to be failing:\n\nagq ars asa ast bas bem bez brx ccp cgg chr ckb dav dje dsb dua dyo ebu ewo fil fur gsw guz haw hsb jgo jmc kab kam kde kea khq kkj kln kok ksb ksf ksh lag lkt lrc luo luy mas mer mfe mgh mgo mua mzn naq nds nmg nnh nus nyn qu rof rwk sah saq sbp seh ses shi shi-Latn shi-Tfng smn teo twq tzm vai vai-Latn vai-Vaii vun wae xog yav zgh\n\n## Feature Request:\n\nWe have to patch this for all of the SDK versions in the wild. This is being done with our NuGet package using a `buildTransitive` .targets file. Please provide a way to detect when running on an SDK that you have fixed so we can skip our patch.\n\n### Steps to Reproduce\n\nFrom the repro project: https://github.com/NightOwl888/IssueMSBuild3LetterLanguageCodes\n\n1. Build ProjectA. It will create a ProjectA.1.0.0.nupkg file in the repo root.\n2. Check the contents of ProjectA.1.0.0.nupkg. Both `en` and `agq` languages are present, as expected.\n3. Build ProjectB.\n4. Check the build output. Only `en` is present, `agq` is not.\n\n### Expected Behavior\n\nMSBuild copies all `.resources.dll` files and their directory to the output.\n\n### Actual Behavior\n\nMSBuild copies satellite assemblies for cultures with 2-letter language codes, but does not copy the ones for 3-letter language codes to the output.\n\n### Analysis\n\n_No response_\n\n### Versions & Configurations\n\n```\nMSBuild version 17.11.9+a69bbaaf5 for .NET\n17.11.9.46202\n\n\nF:\\Users\\shad\\source\\repos\\IssueMSBuild3LetterLanguageCodes>dotnet --version\n8.0.403\n```\n\nThis is on Windows 10 x64.",
  "state": "CLOSED",
  "createdAt": "2024-10-28T17:49:23Z",
  "updatedAt": "2024-10-31T20:00:47Z",
  "closedAt": "2024-10-28T18:31:19Z",
  "author": {
    "login": "NightOwl888"
  },
  "labels": [
    "Partner:NuGet",
    "Area: NetSDK"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "The problem seems to lie in how NuGet has created the project.assets.json. Here is the relevant section:\n\n```json\n\"targets\": {\n        \"net8.0\": {\n            \"ProjectA/1.0.0\": {\n                \"type\": \"package\",\n                \"compile\": {\n                    \"lib/net8.0/ProjectA.dll\": {}\n                },\n                \"runtime\": {\n                    \"lib/net8.0/ProjectA.dll\": {}\n                },\n                \"resource\": {\n                    \"lib/net8.0/en/ProjectA.resources.dll\": {\n                        \"locale\": \"en\"\n                    }\n                }\n            }\n        }\n    },\n```\n\nThe SDK relies on the 'resource' key in this object to tag resources in the NuGet package with their locale - in this case the `agq` resource is not there. If you manually add the `agq` resource to the object like so:\n\n```json\n\"targets\": {\n        \"net8.0\": {\n            \"ProjectA/1.0.0\": {\n                \"type\": \"package\",\n                \"compile\": {\n                    \"lib/net8.0/ProjectA.dll\": {}\n                },\n                \"runtime\": {\n                    \"lib/net8.0/ProjectA.dll\": {}\n                },\n                \"resource\": {\n                    \"lib/net8.0/en/ProjectA.resources.dll\": {\n                        \"locale\": \"en\"\n                    },\n                    \"lib/net8.0/agq/ProjectA.resources.dll\": {\n                        \"locale\": \"agq\"\n                    }\n                }\n            }\n        }\n    },\n```\n\nand then build or publish ProjectB with `dotnet publish --no-restore -bl` you can see that the file is recognized and copied to the publish directory as expected.\n\nIt turns out that this is a duplicate of an existing issue: https://github.com/NuGet/Home/issues/12253. So I'm going to tag this appropriately and close this in favor of this issue.",
        "createdAt": "2024-10-28T18:31:19Z",
        "updatedAt": "2024-10-28T18:31:19Z",
        "author": {
          "login": "baronfel"
        }
      },
      {
        "body": "After a bit of experimentation, it looks like this solution will work for publish **only**.\n\n- It doesn't copy the satellite assemblies to the build output for debugging, but I have found that updating the `.deps.json` file after the `GenerateBuildDependencyFile` target will make MSBuild copy the files.\n\n- I tested it with the [single file deployment example](https://learn.microsoft.com/en-us/dotnet/core/deploying/single-file/overview?tabs=cli#sample-project-file) (except changed to `net8.0`) and only `en` makes it to output there even though the `obj/project.assets.json` file was updated as you suggested.\n\n- `PackAsTool` also doesn't seem to work reliably with this approach, although it did work once and I am not sure what I was doing differently when it did. \n\nWe are running the patch for `obj/project.assets.json` after the `GenerateBuildRuntimeConfigurationFiles` target. Maybe there is another target that would work better? Or do `PackAsTool` and single-file deployment require another approach?\n\nWe need this to work 100% of the time regardless of how the end user is building their project. About 1/4 of the resource files we deploy have 3-letter language codes and it isn't obvious to our end users when they are missing.\n\nNote that we also want our patch to respect `SatelliteResourceLanguages`, which is now how we are recommending users exclude resources from their distribution.",
        "createdAt": "2024-10-31T18:46:26Z",
        "updatedAt": "2024-10-31T18:46:26Z",
        "author": {
          "login": "NightOwl888"
        }
      },
      {
        "body": "At this point there is a PR with a fix at the NuGet level (https://github.com/NuGet/NuGet.Client/pull/6124) so the thing to do would be to get that merged and then either wait for the 9.0.200 SDK release early next year, or ask the NuGet team to backport the fix to the 9.0.100 releases, which requires them to gather justification and get approval.",
        "createdAt": "2024-10-31T18:48:43Z",
        "updatedAt": "2024-10-31T18:48:43Z",
        "author": {
          "login": "baronfel"
        }
      },
      {
        "body": "Thanks.\n\nUnfortunately, we don't control which SDK our users use and currently all supported .NET versions are broken in this way. Most of them may not even be completely aware that they depend on us through another dependency, so informing them to upgrade would probably need to be done through a build warning when you finally have a working SDK to upgrade to. Are you going to backport to .NET 8? Because I am sure requiring users to upgrade from an LTS to an STS SDK for their build is going to ruffle some feathers.\n\nIn the meantime, we will need a reliable way to patch the broken SDKs. Is it possible you could provide a shim `.targets` file for those who require a fix today for their users to be happy? Or document a complete workaround (even if that just means posting it here)?",
        "createdAt": "2024-10-31T19:27:08Z",
        "updatedAt": "2024-10-31T19:27:08Z",
        "author": {
          "login": "NightOwl888"
        }
      },
      {
        "body": "> Are you going to backport to .NET 8?\n\nYour feedback is key to making this happen - do you have rough user numbers and/or any idea of which SDKs your users are using? At this point basically only .NET 8 SDKs are in support, so we wouldn't backport to 6.x or 7.x.\n\n> we will need a reliable way to patch the broken SDKs\n\nSince this change is in NuGet, and inside the implementation of the Restore task, there is no easy way for you to patch the behavior.",
        "createdAt": "2024-10-31T19:30:50Z",
        "updatedAt": "2024-10-31T19:30:50Z",
        "author": {
          "login": "baronfel"
        }
      },
      {
        "body": "> do you have rough user numbers and/or any idea of which SDKs your users are using?\n\nWhich SDK versions, no.\n\nCurrently we are still in prerelease, so our numbers may be misleading. We are averaging 350 downloads per day, most through SaxonCS and Lucene.Net.ICU. Our project is gaining some momentum though, and it is possible we will be out of prerelease by the time your patch is available.\n\nI am sure we are not the only project that is affected by this, and it is so subtle it is hard to notice so it may be under reported.\n\n> we wouldn't backport to 6.x or 7.x.\n\nThat is fine. We don't intend to support SDKs that you don't.",
        "createdAt": "2024-10-31T20:00:46Z",
        "updatedAt": "2024-10-31T20:00:46Z",
        "author": {
          "login": "NightOwl888"
        }
      }
    ]
  }
}