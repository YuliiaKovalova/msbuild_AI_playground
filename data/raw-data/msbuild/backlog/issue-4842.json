{
  "number": 4842,
  "title": "NuGet pack raises a warning, which is turned into an error, but the build still passes",
  "body": "I'm building NuGet packages in my repo, and newer SDKs are now raising a warning (which my project says warnings as errors) but that isn't causing my build to fail.\r\n\r\n```\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100\\Sdks\\NuGet.Build.Tasks.Pack\\buildCrossTargeting\\NuGet.Build.Tasks.Pack.targets(198,5): error NU5048: The 'PackageIconUrl'/'iconUrl' element is deprecated. Consider using the 'PackageIcon'/'icon' element instead. Learn more at https://aka.ms/deprecateIconUrl [F:\\git\\machinelearning\\pkg\\Microsoft.ML.CpuMath\\Microsoft.ML.CpuMath.nupkgproj]\r\n```\r\n\r\n### Steps to reproduce\r\n\r\n1. Unzip [MSBuildBug.zip](https://github.com/microsoft/msbuild/files/3758180/MSBuildBug.zip)\r\n2. `dotnet build`\r\nnotice the red errors, but the output saying `Build succeeded`.\r\n3. `echo $LASTEXITCODE`\r\n\r\nreturns: `0`\r\n\r\n### Expected  behavior\r\n\r\nI expect the build should fail if there are errors during the build.\r\n\r\n### Actual behavior\r\n\r\nThe build prints errors to the console (even in red), but the build succeeds and the `$LASTEXITCODE` returns `0`. So this won't fail any Azure DevOps CI builds.\r\n\r\n### Environment data\r\n```\r\n> dotnet --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100\r\n Commit:    04339c3a26\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18363\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0\r\n  Commit:  7d57652f33\r\n```\r\n",
  "state": "CLOSED",
  "createdAt": "2019-10-22T19:55:46Z",
  "updatedAt": "2024-02-21T17:06:28Z",
  "closedAt": "2021-06-28T19:14:38Z",
  "author": {
    "login": "eerhardt"
  },
  "labels": [
    "under-investigation",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "benvillalobos"
      }
    ]
  },
  "milestone": {
    "title": "MSBuild 16.6"
  },
  "comments": {
    "nodes": [
      {
        "body": "+1 we also see this and want want to have the warn-as-error protection in the build system.\r\n\r\nSee lines 18, 20, 22, and 69 here: \r\n\r\nhttps://ci.appveyor.com/project/JayBazuzi/pipelines/builds/30988237#L18\r\n",
        "createdAt": "2020-02-22T19:53:54Z",
        "updatedAt": "2020-02-22T19:53:54Z",
        "author": {
          "login": "JayBazuzi"
        }
      },
      {
        "body": "Can confirm that this happens on 3.0.103, does _not_ happen on 3.1.100, and does not happen on 5.0.\r\n\r\nAnother observation is that it fails _only the first time_. If I hit save in vs code (with no changes) and run dotnet build again, it will fail.",
        "createdAt": "2021-02-10T20:21:15Z",
        "updatedAt": "2021-02-10T20:21:15Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "A bit more investigating. It looks like the nuget pack task understands both the warningsaserrors flag and treatwarningsaserrors property.\r\n\r\n### using `msbuild`\r\n=== Without TreatWarningsAsErrors in the project ===\r\n1. run `msbuild`, it warns. `echo %ERRORLEVEL%` = 0\r\n2. run `msbuild /warnaserror`, It errors. `echo %ERRORLEVEL%` = 1\r\n=== With TreatWarningsAsErrors set to true in the project ===\r\n1. run `msbuild`, it errors, build succeeds, `echo %ERRORLEVEL%` = 0\r\n2. run `msbuild /warnaserror`, it errors, build fails, `echo %ERRORLEVEL%` = 1\r\n\r\n### using `dotnet build`\r\n=== Without TreatWarningsAsErrors in the project ===\r\n1. `dotnet build`: warnings, build succeeds, errorlevel=0\r\n2. `dotnet build /warnaserror`: errors, build fails, errorlevel=1\r\n=== With TreatWarningsAsErrors set to true in the project ===\r\n1. `dotnet build`: errors, build succeeds, %ERRORLEVEL% = 0\r\n2. `dotnet build /warnaserror`: errors, build fails, %ERRORLEVEL% = 1 <-- this alternates between builds?\r\n\r\nLooks like this boils down to `TreatWarningsAsErrors` being treated differently than passing `/warnaserror` on the cmd line.",
        "createdAt": "2021-02-10T21:40:59Z",
        "updatedAt": "2021-02-10T21:41:39Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "PR's that merged these features (for quick reference): \r\nhttps://github.com/dotnet/msbuild/pull/1928\r\nhttps://github.com/dotnet/msbuild/pull/1355",
        "createdAt": "2021-02-10T21:48:18Z",
        "updatedAt": "2021-02-10T21:48:18Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "Turns out there's a distinction between `TreatWarningsAsErrors` and `MSBuildTreatWarningsAsErrors`. The former has to do with:\r\n`WinMDExp`\r\n`Csc`\r\nand `Vbc` from what I could find.\r\n\r\nThe latter has to do with warnings logged through the build system. So setting MSBuildWarningsAsErrors to true will have msbuild fail properly. Let me know if this works for you!",
        "createdAt": "2021-03-02T02:45:12Z",
        "updatedAt": "2021-03-02T02:45:12Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "Closing as resolved.",
        "createdAt": "2021-06-28T19:14:38Z",
        "updatedAt": "2021-06-28T19:14:38Z",
        "author": {
          "login": "benvillalobos"
        }
      }
    ]
  }
}