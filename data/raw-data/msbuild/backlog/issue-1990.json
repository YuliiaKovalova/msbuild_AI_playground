{
  "number": 1990,
  "title": "Incremental build(?) gets in the way of Compile directive  ",
  "body": "Because of the slow msbuild times https://github.com/dotnet/cli/issues/5918, and because there is no up to date check in the project system yet https://github.com/dotnet/project-system/issues/62 I'm trying to optimize our CI times in other creative ways.\r\n\r\nIn project.json times and until I got tired of it in msbuild times we just did as many `dotnet test projpath` as there were test projects,  however currently this pointlessly rebuilds before every `dotnet build/test/run/whatever` invocation. (even though incrementally built already msbuild still takes 2 seconds per project)   \r\n\r\nThis is why I've created a `Tests.All` project that, with some glue work and tricks, imports all code from our other test projects into one project so we can run just `dotnet test Tests.All` saving heaps of time every test run.\r\n\r\nThe build of `Tests.All` fails if any of the project's code that is included via `Compile Include` (so not a project reference) has been built before as part of its own project.\r\nIt works if `Tests.All` is the 'first' project to be built (or after cleaning the obj/ folders of the compile included projects).\r\n\r\nI'll have a small repro up in a sec\r\n\r\nWhat of course should happen is that this information is ignored if we are just including a project's code\r\n",
  "state": "CLOSED",
  "createdAt": "2017-04-18T20:16:46Z",
  "updatedAt": "2024-02-21T17:19:50Z",
  "closedAt": "2017-04-18T20:53:50Z",
  "author": {
    "login": "NinoFloris"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Ok so here it is https://github.com/NinoFloris/MSBuildIssue1990/tree/master",
        "createdAt": "2017-04-18T20:32:54Z",
        "updatedAt": "2017-04-18T20:32:54Z",
        "author": {
          "login": "NinoFloris"
        }
      },
      {
        "body": "fyi I've had success reducing build times by doing the entire workflow from MSBuild using a project file as build script: https://gist.github.com/dasMulli/69f5303aa79a8cd4060e44891c90fd2d (invoked via `dotnet msbuild build.proj`)",
        "createdAt": "2017-04-18T20:41:18Z",
        "updatedAt": "2017-04-18T20:41:18Z",
        "author": {
          "login": "dasMulli"
        }
      },
      {
        "body": "You didn't account for the exclusions of the `bin` and `obj` directories of the other projects, so the generated `AssemblyInfo` file for `Test` gets included, as well as the generated `AssemblyInfo` file from the `Tests.All` project.\r\n\r\nFrom a diag log of your repro:\r\n```\r\n                     Task Parameter:\r\n                         Sources=\r\n                             ../Tests/obj\\Debug\\netcoreapp1.1\\Tests.AssemblyInfo.cs\r\n                             ../Tests/obj\\Debug\\netcoreapp1.1\\Tests.Program.cs\r\n                             C:\\Users\\raines\\AppData\\Local\\Temp\\.NETCoreApp,Version=v1.1.AssemblyAttributes.cs\r\n                             obj\\Debug\\netcoreapp1.1\\Tests.All.Program.cs\r\n                             obj\\Debug\\netcoreapp1.1\\Tests.All.AssemblyInfo.cs (TaskId:24)\r\n```\r\n\r\nLeading to the double-definition of attributes errors.\r\n\r\nYou can probably accomplish what you want with\r\n```xml\r\n    <Compile Include=\"../Tests/**/*.cs\" Exclude=\"../**/bin/**;../**/obj/**\" />\r\n```",
        "createdAt": "2017-04-18T20:47:27Z",
        "updatedAt": "2017-04-18T20:47:27Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@dasMulli Nice, I'll try that some time.\r\n\r\nFor us this solution actually solves another issue as well, which is something of our own making.\r\nWe have quite slow init and teardown processes for a few projects as they need a working database before they start, but multiple projects share exactly the same schema and data and currently just set up and tear the same db down after each other. Having the project's code included in one big project saves us from that pointless exercise as well\r\n\r\n@rainersigwald Quick response, that might just be the thing I need \ud83d\ude04, great!",
        "createdAt": "2017-04-18T20:49:25Z",
        "updatedAt": "2017-04-18T20:49:25Z",
        "author": {
          "login": "NinoFloris"
        }
      },
      {
        "body": "Tested and confirmed, thank you for your great reply @rainersigwald ^_^",
        "createdAt": "2017-04-18T20:53:33Z",
        "updatedAt": "2017-04-18T20:53:33Z",
        "author": {
          "login": "NinoFloris"
        }
      }
    ]
  }
}