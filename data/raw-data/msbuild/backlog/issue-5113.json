{
  "number": 5113,
  "title": "AnyHaveMetadataValue returns non boolean value when item group is empty",
  "body": "Consider:\r\n\r\n```xml\r\n    <Target Name=\"Foo\">\r\n        <ItemGroup>\r\n            <Var Include=\"A\" />\r\n            <Var Include=\"B\" />\r\n        </ItemGroup>\r\n        \r\n        <PropertyGroup>\r\n            <X>@(Var->AnyHaveMetadataValue('Identity', 'A'))</X>\r\n        </PropertyGroup>\r\n        \r\n        <ItemGroup>\r\n            <Var Remove=\"@(Var)\" />\r\n        </ItemGroup>\r\n        \r\n        <PropertyGroup>\r\n            <Y>@(Var->AnyHaveMetadataValue('Identity', 'A'))</Y>\r\n        </PropertyGroup>\r\n        \r\n        <Message Text=\"X=$(X) Y=$(Y)\" Importance=\"High\" />\r\n    </Target>\r\n```\r\n\r\nResult:\r\n\r\n```\r\nX=true Y=\r\n```\r\n\r\nThis makes using it much less elegant, as also the [documentation](https://docs.microsoft.com/en-us/visualstudio/msbuild/item-functions?view=vs-2019#intrinsic-item-functions) a bit misleading.\r\n",
  "state": "CLOSED",
  "createdAt": "2020-02-07T01:35:53Z",
  "updatedAt": "2024-02-21T17:05:09Z",
  "closedAt": "2023-03-28T22:04:38Z",
  "author": {
    "login": "pranavkm"
  },
  "labels": [
    "needs-design",
    "Area: Language",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Backlog"
  },
  "comments": {
    "nodes": [
      {
        "body": "To change this I think we'd have to figure out why it's happening. Is it because we interpret `@(Var)`, see that it's empty, and don't bother calling the item function? I suspect that's it. If so, we may not be able to change this since it's not clear whether the item functions can handle an empty-list input. But we'd need to debug in to figure out what's up.",
        "createdAt": "2020-02-10T21:29:11Z",
        "updatedAt": "2020-02-10T21:29:11Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "it should be able to work in the item functions if you special case for when the lists are empty.",
        "createdAt": "2022-06-28T01:53:55Z",
        "updatedAt": "2022-06-28T01:53:55Z",
        "author": {
          "login": "AraHaan"
        }
      },
      {
        "body": "Yeah, I'm also hitting this in a similar fashion where I have a code like this to check for a default `Program.{cs,vb,fs}` file in the project.\r\n\r\n```xml\r\n<_ProgramSourceFileIsPresent>@(Compile->AnyHaveMetadataValue('Identity', 'Program$(DefaultLanguageSourceExtension)'))</_ProgramSourceFileIsPresent>\r\n```",
        "createdAt": "2022-06-28T14:45:39Z",
        "updatedAt": "2022-06-28T14:51:37Z",
        "author": {
          "login": "Nirmal4G"
        }
      },
      {
        "body": "Just hit something (probably) similar when trying to parse PackageVersion statements for a specific package. Is there any workaround for this?",
        "createdAt": "2022-09-29T13:14:50Z",
        "updatedAt": "2022-09-29T13:14:50Z",
        "author": {
          "login": "Blackclaws"
        }
      },
      {
        "body": "A working workaround that is rather inelegant but works for Conditions:\r\n\r\n```\r\n@(Var->WithMetadataValue('Identity', 'A')->Count()) >= 1\r\n```",
        "createdAt": "2022-09-29T13:28:50Z",
        "updatedAt": "2022-09-29T13:30:57Z",
        "author": {
          "login": "Blackclaws"
        }
      }
    ]
  }
}