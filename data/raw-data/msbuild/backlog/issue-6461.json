{
  "number": 6461,
  "title": "MSBuild loads and locks task assemblies even when using TaskHostFactory",
  "body": "Using `TaskHostFactory` isolates a task into its own process to run, which frees resources at the end of the task invocation. [I've been recommending](https://github.com/rainersigwald/build-task-in-solution-demo) using it for tasks that are built as part of the same solution that uses them, so that the task assembly is not in use for a subsequent build.\r\n\r\nHowever, MSBuild still loads and locks assembles even when tasks are configured in this way. The load is here:\r\n\r\nhttps://github.com/dotnet/msbuild/blob/4242f381a90f77f483b123819759db1ff8eddf67/src/Build/Instance/TaskFactories/AssemblyTaskFactory.cs#L277-L279\r\n\r\nWith this stack:\r\n\r\n* [`Microsoft.Build.dll!Microsoft.Build.Shared.TypeLoader.LoadAssembly(assemblyLoadInfo) Line 162`](https://github.com/dotnet/msbuild/blob/4242f381a90f77f483b123819759db1ff8eddf67/src/Shared/TypeLoader.cs#L162)\r\n* [`Microsoft.Build.dll!Microsoft.Build.Shared.TypeLoader.AssemblyInfoToLoadedTypes.ScanAssemblyForPublicTypes() Line 355`](https://github.com/dotnet/msbuild/blob/4242f381a90f77f483b123819759db1ff8eddf67/src/Shared/TypeLoader.cs#L355)\r\n* [`Microsoft.Build.dll!Microsoft.Build.Shared.TypeLoader.AssemblyInfoToLoadedTypes.GetLoadedTypeByTypeName.AnonymousMethod__0(key) Line 326`](https://github.com/dotnet/msbuild/blob/4242f381a90f77f483b123819759db1ff8eddf67/src/Shared/TypeLoader.cs#L326)\r\n* [`mscorlib.dll!System.Collections.Concurrent.ConcurrentDictionary<string, System.Type>.GetOrAdd(key, valueFactory) Line 1069`](f://dd/ndp/clr/src/BCL/system/Collections/Concurrent/ConcurrentDictionary.cs#L1069)\r\n* [`Microsoft.Build.dll!Microsoft.Build.Shared.TypeLoader.AssemblyInfoToLoadedTypes.GetLoadedTypeByTypeName(typeName) Line 299`](https://github.com/dotnet/msbuild/blob/4242f381a90f77f483b123819759db1ff8eddf67/src/Shared/TypeLoader.cs#L299)\r\n* [`Microsoft.Build.dll!Microsoft.Build.Shared.TypeLoader.GetLoadedType(cache, typeName, assembly) Line 226`](https://github.com/dotnet/msbuild/blob/4242f381a90f77f483b123819759db1ff8eddf67/src/Shared/TypeLoader.cs#L226)\r\n* [`Microsoft.Build.dll!Microsoft.Build.Shared.TypeLoader.Load(typeName, assembly) Line 192`](https://github.com/dotnet/msbuild/blob/4242f381a90f77f483b123819759db1ff8eddf67/src/Shared/TypeLoader.cs#L192)\r\n* [`Microsoft.Build.dll!Microsoft.Build.BackEnd.AssemblyTaskFactory.InitializeFactory(loadInfo, taskName, taskParameters, taskElementContents, taskFactoryIdentityParameters, taskHostFactoryExplicitlyRequested, targetLoggingContext, elementLocation, taskProjectFile) Line 278`](https://github.com/dotnet/msbuild/blob/4242f381a90f77f483b123819759db1ff8eddf67/src/Build/Instance/TaskFactories/AssemblyTaskFactory.cs#L278)\r\n* [`Microsoft.Build.dll!Microsoft.Build.Execution.TaskRegistry.RegisteredTaskRecord.GetTaskFactory(targetLoggingContext, elementLocation, taskProjectFile) Line 1307`](https://github.com/dotnet/msbuild/blob/4242f381a90f77f483b123819759db1ff8eddf67/src/Build/Instance/TaskRegistry.cs#L1307)\r\n* [`Microsoft.Build.dll!Microsoft.Build.Execution.TaskRegistry.RegisteredTaskRecord.CanTaskBeCreatedByFactory(taskName, taskProjectFile, taskIdentityParameters, targetLoggingContext, elementLocation) Line 1189`](https://github.com/dotnet/msbuild/blob/4242f381a90f77f483b123819759db1ff8eddf67/src/Build/Instance/TaskRegistry.cs#L1189)\r\n* [`Microsoft.Build.dll!Microsoft.Build.Execution.TaskRegistry.GetMatchingRegistration(taskName, taskRecords, taskProjectFile, taskIdentityParameters, targetLoggingContext, elementLocation) Line 689`](https://github.com/dotnet/msbuild/blob/4242f381a90f77f483b123819759db1ff8eddf67/src/Build/Instance/TaskRegistry.cs#L689)\r\n* [`Microsoft.Build.dll!Microsoft.Build.Execution.TaskRegistry.GetTaskRegistrationRecord(taskName, taskProjectFile, taskIdentityParameters, exactMatchRequired, targetLoggingContext, elementLocation, retrievedFromCache) Line 538`](https://github.com/dotnet/msbuild/blob/4242f381a90f77f483b123819759db1ff8eddf67/src/Build/Instance/TaskRegistry.cs#L538)\r\n* [`Microsoft.Build.dll!Microsoft.Build.Execution.TaskRegistry.GetRegisteredTask(taskName, taskProjectFile, taskIdentityParameters, exactMatchRequired, targetLoggingContext, elementLocation) Line 417`](https://github.com/dotnet/msbuild/blob/4242f381a90f77f483b123819759db1ff8eddf67/src/Build/Instance/TaskRegistry.cs#L417)\r\n* [`Microsoft.Build.dll!Microsoft.Build.BackEnd.TaskExecutionHost.FindTaskInRegistry(taskIdentityParameters) Line 868`](https://github.com/dotnet/msbuild/blob/4242f381a90f77f483b123819759db1ff8eddf67/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs#L868)\r\n* [`Microsoft.Build.dll!Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.FindTask(taskIdentityParameters) Line 249`](https://github.com/dotnet/msbuild/blob/4242f381a90f77f483b123819759db1ff8eddf67/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs#L249)\r\n* [`Microsoft.Build.dll!Microsoft.Build.BackEnd.TaskBuilder.ExecuteBucket(taskHost, bucket, howToExecuteTask, lookupHash) Line 414`](https://github.com/dotnet/msbuild/blob/4242f381a90f77f483b123819759db1ff8eddf67/src/Build/BackEnd/Components/RequestBuilder/TaskBuilder.cs#L414)\r\n* [`Microsoft.Build.dll!Microsoft.Build.BackEnd.TaskBuilder.ExecuteTask(mode, lookup) Line 325`](https://github.com/dotnet/msbuild/blob/4242f381a90f77f483b123819759db1ff8eddf67/src/Build/BackEnd/Components/RequestBuilder/TaskBuilder.cs#L325)\r\n* [`Microsoft.Build.dll!Microsoft.Build.BackEnd.TaskBuilder.ExecuteTask(loggingContext, requestEntry, targetBuilderCallback, taskInstance, mode, inferLookup, executeLookup, cancellationToken) Line 179`](https://github.com/dotnet/msbuild/blob/4242f381a90f77f483b123819759db1ff8eddf67/src/Build/BackEnd/Components/RequestBuilder/TaskBuilder.cs#L179)\r\n* [`Microsoft.Build.dll!Microsoft.Build.BackEnd.TargetEntry.ProcessBucket(taskBuilder, targetLoggingContext, mode, lookupForInference, lookupForExecution) Line 816`](https://github.com/dotnet/msbuild/blob/4242f381a90f77f483b123819759db1ff8eddf67/src/Build/BackEnd/Components/RequestBuilder/TargetEntry.cs#L816)\r\n* [`Microsoft.Build.dll!Microsoft.Build.BackEnd.TargetEntry.ExecuteTarget(taskBuilder, requestEntry, projectLoggingContext, cancellationToken) Line 499`](https://github.com/dotnet/msbuild/blob/4242f381a90f77f483b123819759db1ff8eddf67/src/Build/BackEnd/Components/RequestBuilder/TargetEntry.cs#L499)\r\n* [`Microsoft.Build.dll!Microsoft.Build.BackEnd.TargetBuilder.ProcessTargetStack(taskBuilder) Line 486`](https://github.com/dotnet/msbuild/blob/4242f381a90f77f483b123819759db1ff8eddf67/src/Build/BackEnd/Components/RequestBuilder/TargetBuilder.cs#L486)\r\n\r\nIt's not clear to me that we actually need a live `Type` object for taskfactory purposes; we should be able to get by with unloaded information like type full name. I'm not sure what point we do parameter validation though; with inheritance that might get complicated without a live type.\r\n\r\nI'm also _extremely confused_ by how it's taken this long to notice this. I've been giving that advice for years. Did something regress here? Behavior appears the same in 15.9 (plus the extra lock from the long-lived taskhost #3141 that wasn't fixed yet). But it took until now for someone to notice that it didn't work, which seems odd.",
  "state": "CLOSED",
  "createdAt": "2021-05-18T14:40:45Z",
  "updatedAt": "2024-02-21T14:13:25Z",
  "closedAt": "2022-06-28T20:38:33Z",
  "author": {
    "login": "rainersigwald"
  },
  "labels": [
    "Partner request",
    "Area: Engine",
    "For consideration",
    "Area: TaskHost",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "Forgind"
      }
    ]
  },
  "milestone": {
    "title": "VS 17.2"
  },
  "comments": {
    "nodes": [
      {
        "body": "@sharwell just hit an issue related to this: he is building a repo that has an old task that is built for x86. But specifying `Architecture=\"x86\"` doesn't cause things to work, because the reflection load in this same callstack is failing (because you can't load an x86 assembly in x64 MSBuild).\r\n\r\nI'm pulling it back into our \"please can we get to this in 17.0\" bucket because I bet that's just the first of a bunch of these that will get worse with adoption.",
        "createdAt": "2021-07-13T20:19:35Z",
        "updatedAt": "2021-07-13T20:19:35Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Hi I'm interested in picking up this issue. Is there a specific repro I can work with to understand the root cause of the issue?",
        "createdAt": "2021-07-22T00:18:46Z",
        "updatedAt": "2021-07-22T00:18:46Z",
        "author": {
          "login": "vritant24"
        }
      },
      {
        "body": "I think you should be able to:\r\n1. Create a custom task. In your UsingTask statement, make sure to specify TaskFactory=\"TaskHostFactory\"\r\n2. Build your custom task.\r\n3. Use your custom task as part of another build.\r\n4. Modify your task.\r\n5. Try to build again.\r\n\r\nAnd it should fail. Does that sound right, @rainersigwald?",
        "createdAt": "2021-07-22T00:21:56Z",
        "updatedAt": "2021-07-22T00:21:56Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "The repo from the OP will hit this issue: https://github.com/rainersigwald/build-task-in-solution-demo. Another simpler repro is to change the task assembly there to target x86; that will fail at the point of the load rather than just locking the file.\r\n\r\nIt looks like the legacy build engine (in the Deprecated folder) used the live `Type` to look through the class to find (for example) inputs with the `[Required]` attribute to do validation on. It doesn't look like we currently do that, but we do use it to check for a couple of other attributes\r\n\r\nhttps://github.com/dotnet/msbuild/blob/d592862edb5896aef3c1e1526c08f3be0285ca98/src/Shared/LoadedType.cs#L59\r\n\r\nhttps://github.com/dotnet/msbuild/blob/d592862edb5896aef3c1e1526c08f3be0285ca98/src/Shared/LoadedType.cs#L74\r\n\r\nNote that if we change this to avoid the load, we will still have to do the load in the \"standard\" case here, losing this optimization that depends on having already done the load:\r\n\r\nhttps://github.com/dotnet/msbuild/blob/d592862edb5896aef3c1e1526c08f3be0285ca98/src/Shared/TaskLoader.cs#L125-L127",
        "createdAt": "2021-07-28T15:06:43Z",
        "updatedAt": "2021-07-28T15:06:43Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "This is the root cause of https://github.com/dotnet/msbuild/issues/2360? I had expected the [blog post](https://devblogs.microsoft.com/dotnet/msbuild-and-64-bit-visual-studio-2022/) to point to that one.",
        "createdAt": "2021-11-12T16:38:16Z",
        "updatedAt": "2021-11-12T16:38:16Z",
        "author": {
          "login": "rseanhall"
        }
      },
      {
        "body": "Indeed it is the root cause of #2360. Making this the _third_ copy of the bug :( Since this one has the most comprehensive analysis I'm going to leave it as the canonical one.",
        "createdAt": "2021-11-12T21:00:29Z",
        "updatedAt": "2021-11-12T21:00:29Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "For reference, https://github.com/abrobston/isolated-task",
        "createdAt": "2022-03-15T07:18:04Z",
        "updatedAt": "2022-03-15T07:18:04Z",
        "author": {
          "login": "icnocop"
        }
      },
      {
        "body": "What I _have_ seen is that adding the `TaskHostFactory` made the \"your task assembly is locked\" issue during build go away, but replaced it with \"the solution assembly used by the build task is locked\". Would that be caused by this issue as well?",
        "createdAt": "2022-05-02T07:59:54Z",
        "updatedAt": "2022-05-02T07:59:54Z",
        "author": {
          "login": "Zastai"
        }
      },
      {
        "body": "@Zastai can you share the exact error message, please? I don't recognize that one and searching our strings for \"solution assembly\" doesn't turn anything up, so it's hard to say whether it's the same issue.",
        "createdAt": "2022-05-02T13:39:11Z",
        "updatedAt": "2022-05-02T13:39:11Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Well the TaskHostFactory use is supposed to resolve the problem that the build for a build task assembly fails because the output file is locked by MSBuild, right?\r\nWell, it does seem to do that, but in my case. `Foo.Bar.Build` is the build task assembly, which depends on `Foo.Bar` (via `ProjectReference`). And I'm now getting build errors on `Foo.Bar` instead of `Foo.Bar.Build`.\r\n\r\nOf course, writing that now makes me think \"of course it's the same issue; I just see it on the dependency because that gets built first\".",
        "createdAt": "2022-05-02T14:22:28Z",
        "updatedAt": "2022-05-02T14:22:28Z",
        "author": {
          "login": "Zastai"
        }
      },
      {
        "body": "Other thing's I'll mention that have been reported by a customer consuming my build task (via nuget), but which I have unable to repro:\r\n- I ship Mono.Cecil inside the package (because MSBuild does not do nuget-based dependency resolution).\r\n  They were experiencing errors caused by an older Mono.Cecil loaded from \"somewhere\" (my build task got a `MissingMethodException`)\r\n  - I do see that there are Mono.Cecil assemblies in the .NET SDK (for ILLink tasks); perhaps they are the culprit?\r\n- Setting the `UsingTask` to use `TaskHostFactory` makes that go away (yay), but when a build is done via `dotnet build`, they get\r\n  ```\r\n  C:\\Users\\xxx\\.nuget\\packages\\my.build.task\\1.2.3\\build\\My.Build.Task.targets(31,5): error MSB4216: Could not run the \"MyBuildTask\" task because MSBuild could not create or connect to a task host with runtime \"CLR4\" and architecture \"x64\".  Please ensure that (1) the requested runtime and/or architecture are available on the machine, and (2) that the required executable \"C:\\Program Files\\dotnet\\sdk\\6.0.101\\MSBuild.exe\" exists and can be run. [C:\\path\\to\\customer-project.csproj]\r\n  ```\r\n  which is very odd. Also note that this reports `MSBuild.exe` even though it's .NET 6 which has `MSBuild.dll`.\r\n\r\n(Note: the package includes both a net472 and netstandard2.1 version of the build task and its corresponding dependencies, selected based on the MSBuild runtime, so it should not be a case of `dotnet build` trying to load a net472 task.)\r\n\r\nIf I could repro this, I'd file an issue - just putting this here now in case it rings a bell and/or is likely to be resolved by the fix for this issue.",
        "createdAt": "2022-05-02T14:35:01Z",
        "updatedAt": "2022-05-02T14:40:59Z",
        "author": {
          "login": "Zastai"
        }
      },
      {
        "body": "> * I ship Mono.Cecil inside the package (because MSBuild does not do nuget-based dependency resolution).\r\n>   They were experiencing errors caused by an older Mono.Cecil loaded from \"somewhere\" (my build task got a `MissingMethodException`)\r\n>   \r\n>   * I do see that there are Mono.Cecil assemblies in the .NET SDK (for ILLink tasks); perhaps they are the culprit?\r\n\r\nThe only thing I can think of that might cause a problem with this is if some assembly in your package references a different version of Mono.Cecil than you ship--if so, you'll run into dotnet/msbuild#6993. The path forward on that is https://github.com/dotnet/msbuild/issues/4081 (which we expect for 17.3).\r\n\r\n> * Setting the `UsingTask` to use `TaskHostFactory` makes that go away (yay), but when a build is done via `dotnet build`, they get\r\n>   ```\r\n>   C:\\Users\\xxx\\.nuget\\packages\\my.build.task\\1.2.3\\build\\My.Build.Task.targets(31,5): error MSB4216: Could not run the \"MyBuildTask\" task because MSBuild could not create or connect to a task host with runtime \"CLR4\" and architecture \"x64\".  Please ensure that (1) the requested runtime and/or architecture are available on the machine, and (2) that the required executable \"C:\\Program Files\\dotnet\\sdk\\6.0.101\\MSBuild.exe\" exists and can be run. [C:\\path\\to\\customer-project.csproj]\r\n>   ```\r\n>     \r\n>   which is very odd. Also note that this reports `MSBuild.exe` even though it's .NET 6 which has `MSBuild.dll`.\r\n\r\nThis should be fixed in SDK 6.0.200, which carries https://github.com/dotnet/msbuild/pull/6994.",
        "createdAt": "2022-05-02T14:42:27Z",
        "updatedAt": "2022-05-02T14:42:27Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> The only thing I can think of that might cause a problem with this is if some assembly in your package references a different version of Mono.Cecil than you ship--if so, you'll run into #6993. The path forward on that is #4081 (which we expect for 17.3).\r\n\r\nI wish it were that simple. I reference 0.11.4, which I ship. Nothing else on my or the customer's end uses Mono.Cecil (and their .nuget/packages only included a Mono.Cecil assembly in my package). Mono.Cecil is also not in the GAC.\r\n\r\nThey scanned their entire C drive and the only other occurrences were:\r\n- in the .NET SDK (ILLink)\r\n- under Visual Studio (Common7\\IDE\\Extensions\\TestPlatform\\Extensions and Common7\\IDE\\CommonExtensions\\Microsoft\\ManagedLanguages\\VBCSharp\\LanguageService)\r\n- under Xamarin folders (and the application in question does not use Xamarin)\r\n- in a some folders under C:\\Program Files (x86)\\Microsoft SDKs\\NuGetPackages (like microsoft.codecoverage)\r\n\r\nLooking at the customer's report, I'm not sure whether they have the error only when building in Visual Studio, or also when building from the command line or during CI.\r\nIn any case, I don't want to derail this discussion further; I can open a separate issue for that if/when the customer comes up with a working repro.\r\n\r\nIf #4081 means I can avoid shipping my task's dependencies in the task package, then I'll certainly look forward to that landing. I don't suppose something like that is likely to get backported to 16.x? We generally need to support the 2 latest major Visual Studio versions, so if it does not go to 16.x too, I'd be stuck waiting for Visual Studio 18 before being able to trim my package.",
        "createdAt": "2022-05-02T18:07:28Z",
        "updatedAt": "2022-05-02T18:07:28Z",
        "author": {
          "login": "Zastai"
        }
      }
    ]
  }
}