{
  "number": 1559,
  "title": "How to properly specify DocumentationFile",
  "body": "Hi all,\r\nI am using the latest preview of MsBuild 15 and I have a multitarget project file targeting both `net40` and `netstandard1.6`.\r\nI am struggling with specifying <DocumentationFile> correctly. \r\n\r\nFor any path I would specify, the resultant xml file after the build will be both in that path and two target output directories.\r\n\r\nFor instance, if I specify\r\n```\r\n<DocumentationFile>doc.xml</DocumentationFile>\r\n```\r\nThen the xml file will be generated both in my project dir and `bin\\net40` and `bin\\netstandard1.6`.\r\n\r\nI need those xml documentation files only in my `bin\\net40` and `bin\\netstandard1.6` directories. How can I achieve that?\r\nAlso, with the current behavior, it is not clear which documentation file is copied to my project dir, because those xml documents can differ for two targets.\r\n\r\nIn earlier project versions I used to specify documentation xml path separately for `Debug` and `Release` build configurations with paths like `bin\\Debug\\doc.xml`, but with the newest MsBuild 15 it is possible to do multitargeting and the number of such paths double if I specify the dir for all possible combinations of target and build configuration.\r\n\r\nIs there any generic good way to specify documentation file path once and get it to the right output places only?",
  "state": "OPEN",
  "createdAt": "2017-01-13T06:42:29Z",
  "updatedAt": "2024-02-21T16:37:43Z",
  "closedAt": null,
  "author": {
    "login": "Snipx"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "(A bit of an old ticket, but I spent some time getting this right myself, so figured I'd share.)\r\n\r\nThe problem is that the C# targets set up an `ItemGroup` with a `DocFileItem` entry based on `$(DocumentationFile)` at top level (i.e. NOT inside a target); that is used to pass the doc file to the C# compiler.\r\nUnfortunately, the way that is set up prevents it picking up the change to `$(OutputPath)` from the multi-targeting.\r\n\r\nWhat you can do is to _not_ set DocumentationFile at the project level.\r\nInstead, add this target (possibly via Directory.Build.targets so it gets used by all projects in a solution). If a project does not need the doc file to be generated (e.g. a unit test project), add a GenerateXMLDocs property, setting it to false.\r\n\r\n```\r\n  <!-- Generate a documentation file unless explicitly disabled. -->\r\n  <Target Name=\"SetUpDocumentationFile\" BeforeTargets=\"CoreCompile\">\r\n    <PropertyGroup Condition=\" '$(GenerateXMLDocs)' == 'false' \">\r\n      <DocumentationFile></DocumentationFile>\r\n    </PropertyGroup>\r\n    <PropertyGroup Condition=\" '$(GenerateXMLDocs)' != 'false' \">\r\n      <DocumentationFile>$([MSBuild]::NormalizePath('$(OutputPath)', '$(MSBuildProjectName).xml'))</DocumentationFile>\r\n    </PropertyGroup>\r\n    <ItemGroup Condition=\" '$(DocumentationFile)' != '' \">\r\n      <DocFileItem Remove=\"*\" /> <!-- might not be strictly required -->\r\n      <DocFileItem Include=\"$(DocumentationFile)\" />\r\n    </ItemGroup>\r\n  </Target>\r\n```\r\n\r\n(To be completely safe for use in DIrectory.Build.targets, you might need to declare a CoreCompile target, in case it gets pulled in to a non-c#/vb project.)",
        "createdAt": "2019-12-20T20:25:50Z",
        "updatedAt": "2019-12-20T20:25:50Z",
        "author": {
          "login": "Zastai"
        }
      },
      {
        "body": "Can confirm, @Zastai's solution still works in the .NET 5 era.\r\nWould be lovely if we could get this support built-in, seems like a missing/incomplete feature that's been overlooked.",
        "createdAt": "2021-05-26T19:37:42Z",
        "updatedAt": "2021-05-26T19:37:42Z",
        "author": {
          "login": "TaffarelJr"
        }
      },
      {
        "body": "Well, I think it's mainly because changing the doc file name is \"abnormal\", because it prevents IntelliSense from picking it up. A boolean flag to enable/disable the creation of a (standard named) doc file has since been added (`GenerateDocumentationFile`), which is enough for the \"normal\" case. ",
        "createdAt": "2021-05-27T08:31:13Z",
        "updatedAt": "2021-05-27T08:31:13Z",
        "author": {
          "login": "Zastai"
        }
      },
      {
        "body": "The `GenerateDocumentationFile` is also a checkbox now in the updated VS dialog, see https://github.com/dotnet/project-system/issues/368#issuecomment-772423033 and following comment",
        "createdAt": "2021-05-27T09:15:10Z",
        "updatedAt": "2021-05-27T09:15:10Z",
        "author": {
          "login": "dasMulli"
        }
      },
      {
        "body": "I have no need to change the filename. I just want:\r\n\r\n1. the XML file to generate in the output directory(-ies) only, and not in the root of the project (to avoid code churn in my repo), and\r\n2. separate XML files to auto-generate for each target platform, instead of one file that gets copied to each target platform -because the XML can differ between target platforms (as mine does, greatly).\r\n\r\nThis solution perfectly satisfies those two (seemingly obvious) requirements, but was difficult to find. I think the simple UI checkbox should do this by default.",
        "createdAt": "2021-05-27T13:35:20Z",
        "updatedAt": "2021-05-27T13:35:20Z",
        "author": {
          "login": "TaffarelJr"
        }
      },
      {
        "body": "Then just `<GenerateDocumentationFile>true </GenerateDocumentationFile>`, without setting `DocumentationFile`, should do what you want. My workaround dates back to before that flag was added.",
        "createdAt": "2021-05-27T16:51:17Z",
        "updatedAt": "2021-05-27T16:51:17Z",
        "author": {
          "login": "Zastai"
        }
      },
      {
        "body": "`GenerateDocumentationFile` was there since 1.0 but not really discoverable (other than some StackOverflow answers) ((and it had a bug for VB)), now there is some documentation e.g. at https://docs.microsoft.com/en-us/dotnet/csharp/codedoc\r\nMost problems i've seen arose from people using the IDE tools that set `DocumentationFile` (and needed to set those to be also compatible with classic csproj).\r\nI highly recommend filing issues for documentation gaps on https://github.com/dotnet/docs",
        "createdAt": "2021-05-28T09:07:08Z",
        "updatedAt": "2021-05-28T09:07:08Z",
        "author": {
          "login": "dasMulli"
        }
      }
    ]
  }
}