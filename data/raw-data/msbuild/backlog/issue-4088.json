{
  "number": 4088,
  "title": "Allow all property functions by default",
  "body": "Currently, property functions are restricted to a list of allowed types, with the `MSBUILDENABLEALLPROPERTYFUNCTIONS` environment variable being a way to opt into allowing arbitrary types.\r\n\r\nDoes the default restriction still make sense?\r\nIf not, I would like to see the restriction removed.\r\n\r\nLooking through blog posts I see that the limitation was primarily because of safety - against malicious code or visual studio load / design time build failures.\r\nI believe these do no longer hold true for various reasons, for example\r\n* You can use code task factory to call arbitrary .NET types during the build.\r\n* + even from custom assemblies\r\n* NuGet packages can also ship any code\r\n* + use the execute task to call any scripts (shell, ps1, etc.)\r\n* + possibly with Admin credentials since many people still run VS as admin to develop on sites hosted in local IIS",
  "state": "CLOSED",
  "createdAt": "2019-01-21T20:39:52Z",
  "updatedAt": "2024-02-21T17:09:36Z",
  "closedAt": "2021-10-22T19:53:18Z",
  "author": {
    "login": "dasMulli"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "From a host's point of view, property functions can happen when merely evaluating (loading) the project. Targets only execute on request. That's why there was a \"safe list\". ",
        "createdAt": "2019-01-22T02:37:11Z",
        "updatedAt": "2019-01-22T02:37:11Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "I see. Right now evaluation could be downloading NuGet packages to resolve MSBuild SDKs \ud83d\ude43 \r\nSo at least from a time perspective, I'd say it's the build / project author's concern.\r\n\r\nFrom a security perspective it may be interesting - do i want to \"secure\" the loading of a project?\r\nI don't think there are a lot of programs that load project files without also performing at least a design-time build. Even the minimal effort needed to be done to get a list of source files needs to do this.\r\n\r\n(please don't think i'm just bashing, just trying to find out if the list still makes sense)",
        "createdAt": "2019-01-22T13:47:20Z",
        "updatedAt": "2019-01-22T13:47:20Z",
        "author": {
          "login": "dasMulli"
        }
      },
      {
        "body": "It would probably be OK to allow any function within a Target since as far as I know there are no restrictions on what they do (which tasks and etc)",
        "createdAt": "2019-01-22T14:23:02Z",
        "updatedAt": "2019-01-22T14:23:02Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "So the idea is that a project cannot execute \"bad\" stuff while just evaluating. That does make sense - but: Do you know if there are a reasonable amount of programs only evaluating projects that need protection? From what I have seen so far is that many programs that evaluate projects also go on running at least targets to resolve references, design time builds and so on..\r\nBut feel free to close this if there is no plan to re-visit the decision.",
        "createdAt": "2019-03-29T13:34:27Z",
        "updatedAt": "2019-03-29T13:34:27Z",
        "author": {
          "login": "dasMulli"
        }
      },
      {
        "body": "Looks like we're not motivated to do this in the foreseeable future, since it's sat this long. Visual Studio has some scenarios where it will evaluate but not execute targets (though I'm not sure the extent of them).",
        "createdAt": "2021-10-22T19:53:18Z",
        "updatedAt": "2021-10-22T19:53:18Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}