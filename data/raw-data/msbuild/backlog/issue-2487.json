{
  "number": 2487,
  "title": "_CollectTargetFrameworkForTelemetry is taking 8% of a targets run time",
  "body": "_From @davkean on August 24, 2017 6:6_\n\n_CollectTargetFrameworkForTelemetry is adding 8% of total targets run time. This is way too high for a target/task that is just reporting telemetry.\r\n\r\nSee: https://github.com/dotnet/sdk/issues/1534.\n\n_Copied from original issue: dotnet/sdk#1535_",
  "state": "OPEN",
  "createdAt": "2017-08-31T05:14:25Z",
  "updatedAt": "2024-02-21T16:35:54Z",
  "closedAt": null,
  "author": {
    "login": "nguerrera"
  },
  "labels": [
    "backlog",
    "Area: Performance",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "_From @rainersigwald on August 24, 2017 14:21_\n\nThis is with a command-line build with msbuild.exe?\r\n\r\nTarget is trivial:\r\n\r\nhttps://github.com/dotnet/sdk/blob/6274bb6a1e07c0e255fd1042cc47367f41dc8541/src/Tasks/Microsoft.NET.Build.Tasks/build/Microsoft.NET.TargetFrameworkInference.targets#L105-L107\r\n\r\nThe `Telemetry` task should do nothing if no telemetry sink is defined. Would love to see a profile of the actual elapsed time inside it here.\r\n\r\nPossibly not POGOed for this case because the training runs don't include a Telemetry run?\r\n\r\n@jeffkl will probably be interested when he's back.",
        "createdAt": "2017-08-31T05:14:26Z",
        "updatedAt": "2017-08-31T05:14:26Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "_From @davkean on August 25, 2017 1:40_\n\nI'm having a real hard time seeing where most of the cost is coming from - I'm seeing extraordinarily large amounts of MSBuild's total CPU time (50%) being consumed by JITing - but unsure yet how to actually figure out what impact that actually has on run time. We get zero node reuse because it's a single project - wish MSBuild's node model included a server a la C#/VB that MSBuild.exe entry point would just farm command-line args to to avoid this startup cost.",
        "createdAt": "2017-08-31T05:14:27Z",
        "updatedAt": "2017-08-31T05:14:27Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "_From @jeffkl on August 28, 2017 14:52_\n\nThe telemetry task still does some work to send the event but if no listener is attached then the event goes nowhere.  ",
        "createdAt": "2017-08-31T05:14:28Z",
        "updatedAt": "2017-08-31T05:14:28Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "@davkean Can you confirm this was with desktop msbuild.exe and not dotnet build. If so, I'll move to msbuild repo since our target is trivial and there would be no actual telemetry sent without a the CLI wiring up the listener.",
        "createdAt": "2017-08-31T05:14:28Z",
        "updatedAt": "2017-08-31T05:14:28Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "_From @davkean on August 31, 2017 4:39_\n\nThis was MSBuild.",
        "createdAt": "2017-08-31T05:14:29Z",
        "updatedAt": "2017-08-31T05:14:29Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "Likely caused by the Telemetry task being the first Microsoft.NET.Build.Tasks task to run thus absorbing the cost of loading the assembly and reflecting over all public types. I'm wondering what's causing us to fall into `ScanAssemblyForPublicTypes` in trivial projects, though. We should be able to find everything by name.",
        "createdAt": "2021-04-13T12:53:16Z",
        "updatedAt": "2021-04-13T12:53:16Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "Repro: `msbuild /t:rebuild` on an empty .NET Core console app.",
        "createdAt": "2021-04-13T12:54:07Z",
        "updatedAt": "2021-04-13T12:54:07Z",
        "author": {
          "login": "ladipro"
        }
      }
    ]
  }
}