{
  "number": 9614,
  "title": "[NETSDKE2E]With NET 9 alpha SDK installed, duplicate \"Build succeeded\" info displays in new terminal logger output in CLI.",
  "body": "### Issue Description\r\n\r\nWith NET 9 alpha SDK installed, duplicate \"Build succeeded\" info displays in new terminal logger output in CLI.\r\n\r\n\r\n\r\n### Steps to Reproduce\r\n\r\nAffect build:\r\n.NET 9.0.100-alpha.1.24058.10(runtime-9.0.0-alpha.1.24057.2) from [dotnet/installer: .NET SDK Installer (github.com)](https://github.com/dotnet/installer)\r\nAffected Product Language:\r\n\r\nSteps to reproduce:\r\n1. dotnet new tool-manifest -o test\r\n2. cd to the directory and then run \"dotnet tool install dotnet-ef\"\r\n3. Create a new project(dotnet new console) and run dotnet ef dbcontext list\r\n\r\n\r\n\r\n\r\n\r\n### Expected Behavior\r\n\r\nthe output message in step3 for old terminal logger output is displayed as below:\r\n![image](https://github.com/dotnet/msbuild/assets/65637796/c7ab5b79-cc5a-43fc-b684-55d349d90d9a)\r\n\r\n### Actual Behavior\r\n\r\nActual Result:\r\nfor new terminal logger output, it displayed as below, duplicate \"Build succeeded\" info displays\r\n![image](https://github.com/dotnet/msbuild/assets/65637796/0e9740e6-a836-4fb3-a2ba-637ed0918743)\r\n\r\ndotnet --info:\r\n![image](https://github.com/dotnet/msbuild/assets/65637796/c7b584bc-7085-4fa6-9c6d-e2d4abdb2df3)\r\n### Analysis\r\n\r\n_No response_\r\n\r\n### Versions & Configurations\r\n\r\n_No response_",
  "state": "CLOSED",
  "createdAt": "2024-01-09T08:25:59Z",
  "updatedAt": "2024-04-22T09:38:23Z",
  "closedAt": "2024-04-22T08:52:33Z",
  "author": {
    "login": "vdanche"
  },
  "labels": [
    "bug",
    "Priority:1",
    "triaged",
    "Area: Terminal Logger"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "JanKrivanek"
      }
    ]
  },
  "milestone": {
    "title": ".NET 9.0"
  },
  "comments": {
    "nodes": [
      {
        "body": "Additionally, this issue also happens with below scenario.\r\n![image](https://github.com/dotnet/msbuild/assets/65637796/60566994-2641-426e-883d-30069a4d9ffa)\r\n\r\ncreate a project e.g dotnet new wpf\r\npublish project: dotnet publish --framework net9.0-windows\r\n\r\nNote:\r\nIt does not happen when publish with \"dotnet publish -r win-x64 --self-contained\"\r\n![image](https://github.com/dotnet/msbuild/assets/65637796/fbf60cca-895a-405d-bd93-c9a9a13c90b6)\r\n\r\n",
        "createdAt": "2024-01-09T08:30:07Z",
        "updatedAt": "2024-01-09T08:30:07Z",
        "author": {
          "login": "vdanche"
        }
      },
      {
        "body": "This problem is also reproduced on Win ARM64.\r\n![image](https://github.com/dotnet/msbuild/assets/106054229/844d84a3-1cfd-4e6f-956b-04a16569e148)\r\n",
        "createdAt": "2024-01-09T08:54:33Z",
        "updatedAt": "2024-01-09T08:54:33Z",
        "author": {
          "login": "v-ainigao"
        }
      },
      {
        "body": "This problem is also reproduced on Mac.\r\n",
        "createdAt": "2024-01-09T09:50:28Z",
        "updatedAt": "2024-01-09T09:50:37Z",
        "author": {
          "login": "v-xiaofchen"
        }
      },
      {
        "body": "My guess is that the ef tool is doing one or more builds behind the scene as part of its internal logic, and these inner builds are what we are seeing here. We may need to work with that team to change the way they involve build to not be as visible to end users. ",
        "createdAt": "2024-01-09T13:52:29Z",
        "updatedAt": "2024-01-09T13:52:29Z",
        "author": {
          "login": "baronfel"
        }
      },
      {
        "body": "> Additionally, this issue also happens with below scenario. ![image](https://private-user-images.githubusercontent.com/65637796/295144228-60566994-2641-426e-883d-30069a4d9ffa.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MDQ4NTQyNjIsIm5iZiI6MTcwNDg1Mzk2MiwicGF0aCI6Ii82NTYzNzc5Ni8yOTUxNDQyMjgtNjA1NjY5OTQtMjY0MS00MjZlLTg4M2QtMzAwNjlhNGQ5ZmZhLnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDAxMTAlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwMTEwVDAyMzI0MlomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPWQ0MTg1YzIyMTE1YWE5MDBhNWU3NTUyYTY3ZDIyMTA5Y2M1NGU4YzMwODM0NzQwZTBjNGRlN2FkZjczNDYwMjMmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.YfStiA1tYk35tw9t17f4HjXtzBsP-z5WLlolMKeIFOU)\r\n> \r\n> create a project e.g dotnet new wpf publish project: dotnet publish --framework net9.0-windows\r\n> \r\n> Note: It does not happen when publish with \"dotnet publish -r win-x64 --self-contained\" ![image](https://private-user-images.githubusercontent.com/65637796/295144812-fbf60cca-895a-405d-bd93-c9a9a13c90b6.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MDQ4NTQyNjIsIm5iZiI6MTcwNDg1Mzk2MiwicGF0aCI6Ii82NTYzNzc5Ni8yOTUxNDQ4MTItZmJmNjBjY2EtODk1YS00MDVkLWJkOTMtYzlhOWExM2M5MGI2LnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDAxMTAlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwMTEwVDAyMzI0MlomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPThmMGNkOTBkYzQ5YjM5ZThhYTI4Njc4YjZiMGZmOTZjMzBlYmI2ODAxZTI2NjZiZjk4Zjc2MDZkNWYwNjc3ZmEmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.F-1gkHgZP8S7-j2OuzR52R-DLqPoPZX5W9Ur6ZzbJos)\r\n\r\n@baronfel for this scenario, duplicate build succeeded info also happens",
        "createdAt": "2024-01-10T02:33:53Z",
        "updatedAt": "2024-01-10T02:33:53Z",
        "author": {
          "login": "vdanche"
        }
      },
      {
        "body": "I looked at the `ef` case specifically, and they trigger builds of projects via the .NET CLI. The command line they construct is [here](https://github.com/dotnet/efcore/blob/main/src/dotnet-ef/Project.cs#L139-L167):\r\n\r\n```\r\ndotnet build <project file name> [optional TFM] [optional Configuration] [optional RID] /verbosity:quiet /nologo /p:PublishAot=false\r\n```\r\n\r\nDoes TL respect `/verbosity:quiet` (aka 'silent')? If not we may want to consider making it do so.\r\n",
        "createdAt": "2024-01-10T15:19:36Z",
        "updatedAt": "2024-01-10T15:19:36Z",
        "author": {
          "login": "baronfel"
        }
      },
      {
        "body": "> Does TL respect `/verbosity:quiet`\r\n\r\nNot today, but we probably want that for `dotnet test` too.",
        "createdAt": "2024-01-10T15:21:06Z",
        "updatedAt": "2024-01-10T15:21:06Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Oh geez - the WPF build thing may be the same root problem. WPF does the inner build to compile the XAML, right?",
        "createdAt": "2024-01-10T15:23:15Z",
        "updatedAt": "2024-01-10T15:23:15Z",
        "author": {
          "login": "baronfel"
        }
      },
      {
        "body": "The XAML inner build is within the same build invocation though, not shelling out to a new build process, so it shouldn't report \"build succeeded\" multiple times.",
        "createdAt": "2024-01-10T15:50:16Z",
        "updatedAt": "2024-01-10T15:50:16Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "This problem is also reproduced on Linux.\r\n![Screenshot 2024-01-11 172630](https://github.com/dotnet/msbuild/assets/92560562/5acae0c6-9df1-4b87-9727-63de3063e7d7)\r\n",
        "createdAt": "2024-01-11T09:28:02Z",
        "updatedAt": "2024-01-11T09:28:02Z",
        "author": {
          "login": "ChenhuiYuan01"
        }
      },
      {
        "body": "So the WPF case is actually related to publishing and it is a double invocation of msbuild as well.\r\n\r\n$ dotnet publish -tl --framework net8.0-windows\r\n  --> -maxcpucount -verbosity:m **-target:Restore --property:_IsPublishing=true** -property:Configuration=Release -tl -distributedlogger:Microsoft.DotNet.Tools.MSBuild.MSBuildLogger,C:\\Program Files\\dotnet\\sdk\\8.0.200-preview.23620.12\\dotnet.dll*Microsoft.DotNet.Tools.MSBuild.MSBuildForwardingLogger,C:\\Program Files\\dotnet\\sdk\\8.0.200-preview.23620.12\\dotnet.dll\r\n --> -maxcpucount -verbosity:m -nologo **-target:Publish --property:_IsPublishing=true** -property:TargetFramework=net8.0-windows -property:Configuration=Release -tl -distributedlogger:Microsoft.DotNet.Tools.MSBuild.MSBuildLogger,C:\\Program Files\\dotnet\\sdk\\8.0.200-preview.23620.12\\dotnet.dll*Microsoft.DotNet.Tools.MSBuild.MSBuildForwardingLogger,C:\\Program Files\\dotnet\\sdk\\8.0.200-preview.23620.12\\dotnet.dll\r\n\r\nIt's given by the fact that [`PublishCommand`](https://github.com/dotnet/sdk/blob/3075c3bc8d8aa4e0ffcf2945459ef2ee383e3ae0/src/Cli/dotnet/commands/dotnet-publish/Program.cs#L11) actually extends `RestoreCommand` and hence the execution leads to 2 separate msbuild invocations:\r\n\r\nhttps://github.com/dotnet/sdk/blob/3075c3bc8d8aa4e0ffcf2945459ef2ee383e3ae0/src/Cli/dotnet/commands/RestoringCommand.cs#L93-L111\r\n\r\nSo I have 2 outstanding questions:\r\n\r\n1. Is it expected and desired that publish leads to 2 separate invocations (vs. just specifying `-restore`)? @dsplaisted?\r\n2. In case of any tooling (and specifically our sdk) needs multiple invocations of msbuild - what is the balance between reporting the reality and hiding some of the invocations? @baronfel?\r\n\r\nIn case of publish - would we want to hide the whole restore call, we can probably append `-tl:false -v:q`?",
        "createdAt": "2024-02-23T11:59:34Z",
        "updatedAt": "2024-02-23T11:59:34Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "@JanKrivanek I think we discovered the cause and am working on a fix over in https://github.com/dotnet/sdk/pull/38956.\n\nLonger term, it would be useful if there was a way for MSBuild to unset specific properties for the Restore - if that capability existed then we could remove the separate restore code from the SDK entirely. ",
        "createdAt": "2024-02-23T13:41:52Z",
        "updatedAt": "2024-02-23T13:41:52Z",
        "author": {
          "login": "baronfel"
        }
      },
      {
        "body": "Oh - great timing then :-)\r\n\r\nHow about the ef case (`dotnet ef dbcontext list`)? It feels 'by design'. TerminalLogger (and logging in general) can be disabled in one of the invocations - but is that really wanted? It sounds like the decision should be in the invoking context, not in msbuild.",
        "createdAt": "2024-02-23T13:50:26Z",
        "updatedAt": "2024-02-23T13:50:26Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "> It sounds like the decision should be in the invoking context, not in msbuild.\n\nYes, this is a good rule. The invoking context is very often the SDK, so we need to make it smarter at the minimum. ",
        "createdAt": "2024-02-23T14:06:20Z",
        "updatedAt": "2024-02-23T14:06:20Z",
        "author": {
          "login": "baronfel"
        }
      },
      {
        "body": "The restore case is going to be fixed by https://github.com/dotnet/sdk/pull/38956",
        "createdAt": "2024-02-26T16:22:50Z",
        "updatedAt": "2024-02-26T16:22:50Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "In today's build:9.0.100-preview.3.24156.14 SDK\uff0cwill check on tomorrow's build.\r\nthis issue still repro\r\n![image](https://github.com/dotnet/msbuild/assets/65637796/363b3326-ec63-44d0-aa76-b63e79772b5b)",
        "createdAt": "2024-03-07T08:43:34Z",
        "updatedAt": "2024-03-07T08:45:52Z",
        "author": {
          "login": "vdanche"
        }
      },
      {
        "body": "@baronfel  @JanKrivanek I see https://github.com/dotnet/sdk/pull/38956 is merged, but this bug still repro after checking on today's build 9.0.100-preview.3.24162.35\r\n1.duplicate build succeed info after running \"dotnet publish -f net9.0-windows\" for winforms/wpf\r\n![image](https://github.com/dotnet/msbuild/assets/65637796/41520cd2-7a56-4c7b-9f93-181f3bd4bf36)\r\n\r\n2. run \"dotnet ef dbcontext list\"\r\n![image](https://github.com/dotnet/msbuild/assets/65637796/587e2d02-5529-45e0-8728-95bb1e69e545)\r\n\r\n",
        "createdAt": "2024-03-13T06:07:37Z",
        "updatedAt": "2024-03-13T06:07:37Z",
        "author": {
          "login": "vdanche"
        }
      },
      {
        "body": "@vdanche The fix needs SDK side fix (the one merged) and MSBuild side fix (to respect the quiet glag passed by sdk) - that one is tracked under https://github.com/dotnet/msbuild/issues/9654\r\n\r\nFYI @MichalPavlik ",
        "createdAt": "2024-03-13T07:25:20Z",
        "updatedAt": "2024-03-13T07:25:20Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "@JanKrivanek Thanks for your clarification. \r\nyou mean, for issue1 (duplicate build succeed info after running \"dotnet publish -f net9.0-windows\" for winforms/wpf, we need to wait SDK side fix. not sure which version it will be fixed. As current bug is closed, want to know if need to file a new bug to track or only track it in current bug?\r\n\r\nfor issue2(dotnet ef dbcontext list), we can track https://github.com/dotnet/msbuild/issues/9654(open), right?",
        "createdAt": "2024-03-13T07:53:44Z",
        "updatedAt": "2024-03-13T07:53:44Z",
        "author": {
          "login": "vdanche"
        }
      },
      {
        "body": "#9654 should fix both cases actually - as restore/publish now passes quiet flag (after https://github.com/dotnet/sdk/pull/38956) and efcore call to msbuild has that already as well: https://github.com/dotnet/efcore/blob/368737c23224d3771b4db7b169c7bd80630adcdc/src/dotnet-ef/Project.cs#L184-L185\r\n\r\n\r\nSo both should display the status just once - once #9654 fix is created, merged and inserted into sdk - I cannot give any promisses on timing though (beyond it's currently scheduled in our monthly sprint)",
        "createdAt": "2024-03-13T09:01:55Z",
        "updatedAt": "2024-03-13T09:01:55Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "> So both should display the status just once - once #9654 fix is created, merged and inserted into sdk - I cannot give any promisses on timing though (beyond it's currently scheduled in our monthly sprint)\r\n\r\ngot it, we'll keep tracking until https://github.com/dotnet/msbuild/issues/9654(open) fix is created, merged and inserted into sdk",
        "createdAt": "2024-03-13T09:30:24Z",
        "updatedAt": "2024-03-13T09:30:24Z",
        "author": {
          "login": "vdanche"
        }
      },
      {
        "body": "@JanKrivanek today we found below scenario about dup \"Build succeeded\" info issue in new terminal logger output in CLI has been fixed on 9.0.100-preview.4.24210.38 SDK\r\n![image](https://github.com/dotnet/msbuild/assets/65637796/1052edc9-e046-481a-a36a-a1a6047684d0)\r\n\r\nBut dup \"Build succeeded\" info issue still repro when publish project.\r\n![image](https://github.com/dotnet/msbuild/assets/65637796/9951fee4-da82-4289-8478-711aa5e447c3)\r\n\r\n\r\n",
        "createdAt": "2024-04-11T08:29:07Z",
        "updatedAt": "2024-04-11T08:56:23Z",
        "author": {
          "login": "vdanche"
        }
      },
      {
        "body": "@AR-May - can you confirm once the https://github.com/dotnet/msbuild/pull/9810 makes it into the sdk?\r\n(the sdk added `-quiet` flag to the restore derived commands in https://github.com/dotnet/sdk/pull/38956, the MSBuild added respecting that flag for terminal logger in https://github.com/dotnet/msbuild/pull/9810 - so we need that change to be inserted in sdk in order for the symptoms to disappear)",
        "createdAt": "2024-04-11T08:51:15Z",
        "updatedAt": "2024-04-11T08:51:15Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "@JanKrivanek This has to be the sdk version with our fix: first, it [fixes](https://github.com/dotnet/msbuild/issues/9809#issuecomment-2049208800) some of the bugs related to my PR. Second, enough time went to insert the fix to the sdk and installer repos, I checked and there are recent enough insertions, so the bits have to be propagated. We will need to look what is wrong.\r\n\r\n",
        "createdAt": "2024-04-12T07:30:00Z",
        "updatedAt": "2024-04-12T07:30:00Z",
        "author": {
          "login": "AR-May"
        }
      },
      {
        "body": "@baronfel - the https://github.com/dotnet/sdk/pull/38956 adds the quiet verbosity only to the `getX` invocations leading to the separate restore execution. Thus the scenario here (publish with explicit TFM) is not handled. Should we actually add the quiet flag unconditionally?\r\n\r\nOn a separate note - we shaould pick up the https://github.com/dotnet/msbuild/issues/8817 as the inability to capture the first binolg wihtout rather user unfriendly approach (breaking the exectution on the process start) is sad here.\r\n\r\n",
        "createdAt": "2024-04-12T11:29:36Z",
        "updatedAt": "2024-04-12T11:29:36Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "Checked on 9.0.100-preview.4.24221.5, dup \"Build succeeded\" info issue when publish project not repro now.\r\n![image](https://github.com/dotnet/msbuild/assets/65637796/a44d8d44-fa5e-4c55-aa1b-1335a6197d95)\r\n",
        "createdAt": "2024-04-22T08:48:24Z",
        "updatedAt": "2024-04-22T09:38:23Z",
        "author": {
          "login": "vdanche"
        }
      }
    ]
  }
}