{
  "number": 4322,
  "title": "MSBuild stops because of logger failure",
  "body": "Build failed because of a logger failure in MSBuild. Happened in corefx official builds on RedHat6-x64: https://dnceng.visualstudio.com/internal/_build/results?buildId=159160&view=logs&jobId=7cbf968d-26f0-55c8-fa2c-bd900b311c34&taskId=b2aeb635-23e9-595d-82a3-8f619fe45749&lineStart=913&lineEnd=929&colStart=1&colEnd=30\r\n\r\nA binary log file is available in the artifacts page but could contain secrets therefore I'm not uploading it here. Pls make sure to save it somewhere before retention policy deletes it.\r\n\r\n```\r\nTime Elapsed 00:03:34.47\r\nMSBUILD : error MSB4017: The build stopped unexpectedly because of an unexpected logger failure.\r\nMicrosoft.Build.Exceptions.InternalLoggerException: The build stopped unexpectedly because of an unexpected logger failure. ---> System.NullReferenceException: Object reference not set to an instance of an object.\r\n   at System.Collections.Generic.Dictionary`2.FindEntry(TKey key)\r\n   at System.Collections.Generic.Dictionary`2.TryGetValue(TKey key, TValue& value)\r\n   at Microsoft.Build.Collections.CopyOnWritePropertyDictionary`1.get_Item(String name)\r\n   at Microsoft.Build.Execution.ProjectItemInstance.TaskItem.GetMetadataEscaped(String metadataName)\r\n   at Microsoft.Build.Execution.ProjectItemInstance.TaskItem.GetMetadata(String metadataName)\r\n   at Microsoft.Build.Logging.BuildEventArgsWriter.Write(ITaskItem item)\r\n   at Microsoft.Build.Logging.BuildEventArgsWriter.WriteItems(IEnumerable items)\r\n   at Microsoft.Build.Logging.BinaryLogger.Write(BuildEventArgs e)\r\n   at Microsoft.Build.BackEnd.Logging.EventSourceSink.RaiseAnyEvent(Object sender, BuildEventArgs buildEvent)\r\n   --- End of inner exception stack trace ---\r\n   at Microsoft.Build.Exceptions.InternalLoggerException.Throw(Exception innerException, BuildEventArgs e, String messageResourceName, Boolean initializationException, String[] messageArgs)\r\n   at Microsoft.Build.BackEnd.Logging.EventSourceSink.RaiseAnyEvent(Object sender, BuildEventArgs buildEvent)\r\n   at Microsoft.Build.BackEnd.Logging.EventSourceSink.RaiseAnyEvent(Object sender, BuildEventArgs buildEvent)\r\nBuild failed (exit code '1').\r\n```",
  "state": "OPEN",
  "createdAt": "2019-04-18T18:55:39Z",
  "updatedAt": "2024-02-21T16:31:26Z",
  "closedAt": null,
  "author": {
    "login": "ViktorHofer"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "It should not be possible to make `Dictionary` ever throw NRE - unless the object is getting corrupted by concurrent access. My guess is that someone is writing to this dictionary at the same time (or had done so earlier) causing corruption.",
        "createdAt": "2019-04-22T23:07:40Z",
        "updatedAt": "2019-04-22T23:07:40Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "If code inspection doesn't help it might possibly help to make a wrapper for the dictionary that deterministically throws if a write occurs concurrent with some other access. Then try to get a repro.",
        "createdAt": "2019-04-22T23:09:13Z",
        "updatedAt": "2019-04-22T23:09:13Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "We hit again in our CI. @rainersigwald does this look familiar at all? Any thoughts about how this coudl happen? \r\n\r\nHistorically we have always said that if a logger fails, the build should fail. But now I am outside the tent I'm inclined to think that we should try to complete regardless, and log it as a warning. That would allow CI to work even if a logger is buggy. Most times the build output will be OK. Thoughts?",
        "createdAt": "2019-04-30T18:38:19Z",
        "updatedAt": "2019-04-30T18:38:19Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "No, I don't know what's going on here.\r\n\r\nIt's not a scoped change, but my first reaction to seeing that callstack is \"we should replace `CopyOnWritePropertyDictionary` with `ImmutableDictionary` and be done with this\". IIRC I thought about that once and ran up against https://github.com/dotnet/corefx/issues/1272, but there are ways around that. Maybe we should pick it up again.\r\n\r\nI see where you're coming from on logger failures not failing the build, but I think logging is a critical part of build infrastructure. You're not willing to disable logging to work around this problem, so I think it'd be unacceptable to silently (in the limit, because where would we log the logger failure?) disable some or all logging.",
        "createdAt": "2019-04-30T18:52:41Z",
        "updatedAt": "2019-04-30T18:52:41Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Happened again: https://dev.azure.com/dnceng/public/_build/results?buildId=174161&view=logs.\r\n\r\nIf possible I would like to higher the priority on this as it seriously impacts corefx build's healthiness.",
        "createdAt": "2019-04-30T20:43:33Z",
        "updatedAt": "2019-04-30T20:43:33Z",
        "author": {
          "login": "ViktorHofer"
        }
      },
      {
        "body": "> You're not willing to disable logging to work around this problem, so I think it'd be unacceptable to silently (in the limit, because where would we log the logger failure?) disable some or all logging.\r\n\r\nRight, changing the policy in the engine feels wrong. So does permanently hacking around the problem. Also wrong would be continuing the build with a totally silent logger. But in this case I assume the logger state is not all messed up - it's just one message that's going to be incorrect.\r\n\r\nMeantime it's important to us to increase our build success rates. If yo'ure not able to investigate in detail right now (which I fully understand!) then how about we put a try/catch temporarily in BinaryLogger.Write or BuildEventArgsWriter.Write.  That serves the goal of getting our builds reliable until your team has time to investigate. We can do the PR if you think that's reasonable.\r\n",
        "createdAt": "2019-05-01T19:38:50Z",
        "updatedAt": "2019-05-01T19:38:50Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "One other thought - in return we would be more than happy to try out private builds with extra logging if that would help you root cause it - so long as the build doesn't fail.",
        "createdAt": "2019-05-01T19:44:06Z",
        "updatedAt": "2019-05-01T19:44:06Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "Yes, unfortunately we're shorthanded and swamped at the moment, so we probably can't dig in to the level we'd like. I think putting the try/catch in the binary logger makes sense as a tactical step. If you can send the PR that'd be great.",
        "createdAt": "2019-05-01T20:27:29Z",
        "updatedAt": "2019-05-01T20:27:29Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@ViktorHofer would you be able to do that? \r\nI suggest including `Debug.Fail` in it, so that it continues to fail when run with debug bits (which real builds won't do)",
        "createdAt": "2019-05-01T21:34:24Z",
        "updatedAt": "2019-05-01T21:34:24Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "Sure",
        "createdAt": "2019-05-01T21:50:48Z",
        "updatedAt": "2019-05-01T21:50:48Z",
        "author": {
          "login": "ViktorHofer"
        }
      },
      {
        "body": "@rainersigwald please assign the issue to me.",
        "createdAt": "2019-05-01T21:51:00Z",
        "updatedAt": "2019-05-01T21:51:07Z",
        "author": {
          "login": "ViktorHofer"
        }
      },
      {
        "body": "Happened again: \r\n\r\n```\r\nMicrosoft.Build.Exceptions.InternalLoggerException: The build stopped unexpectedly because of an unexpected logger failure. ---> System.NullReferenceException: Object reference not set to an instance of an object.\r\n   at System.Collections.Generic.Dictionary`2.FindEntry(TKey key)\r\n   at System.Collections.Generic.Dictionary`2.TryGetValue(TKey key, TValue& value)\r\n   at Microsoft.Build.Collections.CopyOnWritePropertyDictionary`1.get_Item(String name)\r\n   at Microsoft.Build.Execution.ProjectItemInstance.TaskItem.GetMetadataEscaped(String metadataName)\r\n   at Microsoft.Build.Execution.ProjectItemInstance.TaskItem.GetMetadata(String metadataName)\r\n   at Microsoft.Build.Logging.BuildEventArgsWriter.Write(ITaskItem item)\r\n   at Microsoft.Build.Logging.BuildEventArgsWriter.WriteItems(IEnumerable items)\r\n   at Microsoft.Build.Logging.BinaryLogger.Write(BuildEventArgs e)\r\n   at Microsoft.Build.BackEnd.Logging.EventSourceSink.RaiseAnyEvent(Object sender, BuildEventArgs buildEvent)\r\n   --- End of inner exception stack trace ---\r\n   at Microsoft.Build.Exceptions.InternalLoggerException.Throw(Exception innerException, BuildEventArgs e, String messageResourceName, Boolean initializationException, String[] messageArgs)\r\n   at Microsoft.Build.BackEnd.Logging.EventSourceSink.RaiseAnyEvent(Object sender, BuildEventArgs buildEvent)\r\n   at Microsoft.Build.BackEnd.Logging.EventSourceSink.RaiseAnyEvent(Object sender, BuildEventArgs buildEvent)\r\nBuild failed (exit code '1').\r\n```",
        "createdAt": "2019-05-02T19:57:17Z",
        "updatedAt": "2019-05-02T19:57:17Z",
        "author": {
          "login": "ViktorHofer"
        }
      },
      {
        "body": "I'm chasing the `ImmutableDictionary` thing, but don't let that stop you @ViktorHofer -- yours is a much safer change I'd like to land first.",
        "createdAt": "2019-05-02T21:31:48Z",
        "updatedAt": "2019-05-02T21:31:48Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}