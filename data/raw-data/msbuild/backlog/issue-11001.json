{
  "number": 11001,
  "title": "terminal logger not that usable in practise",
  "body": "Hi,\n\nI really like the terminal logger feature but it has a big pitfall, it breaks all the outputs by default which means any failing build needs to run without it more or less.\n\nWhat would be neat is to keep the terminal logger feature AND the output.\nOne way is to \"split\" the output in two parts, the build output (at the top for ex) and the \"dynamic\" output (tl) at the bottom - think gradle does it or was doing it at least.\nAn alternative is what maven daemon does (once well configured), ie assign N lines (N >= 1) per project, have the first line being the terminal logger and the other lines the build output of this project. Finally you stack the projects and you get an in between feedback.\nLast option is to just dump the output on failure (capturing in a file during the build for ex).\n\nHope it makes sense",
  "state": "CLOSED",
  "createdAt": "2024-11-19T07:41:43Z",
  "updatedAt": "2024-12-13T19:46:53Z",
  "closedAt": "2024-12-13T19:46:53Z",
  "author": {
    "login": "rmannibucau"
  },
  "labels": [
    "untriaged",
    "Area: Terminal Logger"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Hi @rmannibucau - thank you for taking the time to provide feedback on the Terminal Logger. I have a few questions I'm hoping you can clarify:\n\n> it breaks all the outputs by default which means any failing build needs to run without it more or less\n\nCan you clarify what you mean by this? What about the outputs is breaking in your view? Why do failing builds specifically need to run without the new mode?\n\nBroadly, we do think of the TL output in two forms, much like you described already:\n\n* static, per-project diagnostics and outputs - these are emitted as each project completes its build\n* dynamic, per-msbuild-node data - this is 'live' and constantly updating with the state of the build\n\nIn the past we've tried your N-per-project idea and that quickly consumes all of the available terminal space because in .NET a user-facing project isn't the same as a 'project' to MSBuild - each TFM of a multi-TFM project is a separate project with separate outputs/diagnostics for example. This means that even a small repo (~5 projects) can quickly consume all of the space available in the terminal. So we've definitely struggled finding a balance here.",
        "createdAt": "2024-12-02T15:40:48Z",
        "updatedAt": "2024-12-02T15:40:48Z",
        "author": {
          "login": "baronfel"
        }
      },
      {
        "body": "> What about the outputs is breaking in your view? Why do failing builds specifically need to run without the new mode?\n\nAssume I have a multiproject solution and one test of a \"middle\" project fails, then the end output will not mention the project or the failing test.\nWhen using ASP.Net with kind of access log (request logging) - or any other kind of test using some systematic logging - it is really unreadable and having to either grep or use a file report is not as smooth as just checking the last lines of the output to see what failed and fix it.\n\n> This means that even a small repo (~5 projects) can quickly consume all of the space available in the terminal. So we've definitely struggled finding a balance here.\n\nWell it is functional for gradle and maven, the trick is to have a limit and multiplex some space depending the activity but the highly important part is a proper final reporting more than the live view which is fancy but not that critical to my eyes.",
        "createdAt": "2024-12-02T17:12:34Z",
        "updatedAt": "2024-12-02T17:12:34Z",
        "author": {
          "login": "rmannibucau"
        }
      },
      {
        "body": "Ah, ok - so if I'm understanding you correctly, the painful missing piece is the final build summary. Is that correct? If so, we're tracking that in https://github.com/dotnet/msbuild/issues/10681 and would like to tackle it in an upcoming release.",
        "createdAt": "2024-12-02T17:15:25Z",
        "updatedAt": "2024-12-02T17:15:25Z",
        "author": {
          "login": "baronfel"
        }
      },
      {
        "body": "@baronfel yes, the \"live\" view can likely be better giving a bit more context for \"slow builds\" but it is less a blocker than the summary on my side.",
        "createdAt": "2024-12-02T18:07:25Z",
        "updatedAt": "2024-12-02T18:07:25Z",
        "author": {
          "login": "rmannibucau"
        }
      }
    ]
  }
}