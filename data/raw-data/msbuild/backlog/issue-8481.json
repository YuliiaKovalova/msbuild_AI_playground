{
  "number": 8481,
  "title": "[LiveLogger] Unreliable check for ANSI-capable terminal on Windows",
  "body": "> The Internet seems to think that checking the result of `GetConsoleMode` for `ENABLE_VIRTUAL_TERMINAL_PROCESSING` may be a better way of detecting fancy-capable environments.\r\n\r\nthis snippet from pwsh looks relevant:\r\n\r\nhttps://github.com/SteveL-MSFT/PowerShell/blob/4c01dcc5d5672f4b0ccbac87fe756de01f487887/src/Microsoft.PowerShell.ConsoleHost/host/msh/ConsoleHostUserInterface.cs#L64-L85\r\n\r\n_Originally posted by @rainersigwald in https://github.com/dotnet/msbuild/issues/8467#issuecomment-1439185528_\r\n            \r\n---\r\n\r\nWe currently use the `WT_SESSION` environment variable, which does not work in all scenarios. See the discussion in #8467 for details.",
  "state": "CLOSED",
  "createdAt": "2023-02-22T09:50:25Z",
  "updatedAt": "2024-02-21T16:59:29Z",
  "closedAt": "2023-04-12T16:25:14Z",
  "author": {
    "login": "ladipro"
  },
  "labels": [
    "bug",
    "Area: Logging",
    "triaged",
    "Area: Terminal Logger"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "According to <https://github.com/microsoft/terminal/issues/13738> the console host has a hack that makes SetConsoleMode on a console input handle save the modes as specified, even if the modes are invalid and SetConsoleMode returns an error. Which then causes SetConsoleMode to return the invalid modes. So if you were probing for support of a particular input mode, then you'd also have to explicitly restore the original modes if the support is not there.  Fortunately this does not seem to apply to output modes.",
        "createdAt": "2023-02-22T10:55:27Z",
        "updatedAt": "2023-02-22T10:55:27Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "Does this suggest something the Console class should abstract?",
        "createdAt": "2023-04-11T10:34:49Z",
        "updatedAt": "2023-04-11T10:34:49Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "> Does this suggest something the Console class should abstract?\r\n\r\nYes, it would make sense for this to be provided by base libraries. It's not a super forward-looking functionality, though, because on modern Windows even the classic `conhost.exe` supports ANSI codes, as far as I can tell.",
        "createdAt": "2023-04-11T10:45:47Z",
        "updatedAt": "2023-04-11T10:45:47Z",
        "author": {
          "login": "ladipro"
        }
      }
    ]
  }
}