{
  "number": 9826,
  "title": "[On Hold] Prepary Microsoft.Build.Analyzers.AuthoringContracts assembly",
  "body": "### Context\n\nIn order to author custom analyzer, one would need to reference Microsoft.Build currently. That is however carrying over too much other public API, so it can get confusing.\nExtracting the analyzers contracts to separate assembly has it's own perf and usability concerns (e.g. https://github.com/dotnet/msbuild/pull/9735#discussion_r1495736682) - so the code is currently part of Microsoft.Build.\nBut we can prepare a spearate assembly - Microsoft.Build.Analyzers.AuthoringContracts - that just links all the contract codefiles used in Microsoft.Build, so that users can have a lightweight assembly to reference\n\n### Gotchas\n\nSuch an assembly wouldn't be possible to use at runtime together with Microsoft.Build - due to duplicite existence of types. Users would need to be guided to reference it as compile time only reference (private assets). But we should think about putting some safety check that fails fast and more clearly in such situation (e.g. assembly initialization code that checks for presence of other msbuild assemblies?)",
  "state": "OPEN",
  "createdAt": "2024-03-06T08:57:03Z",
  "updatedAt": "2024-04-29T06:26:31Z",
  "closedAt": null,
  "author": {
    "login": "JanKrivanek"
  },
  "labels": [
    "triaged",
    "gathering-feedback"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "> Users would need to be guided to reference it as compile time only reference (private assets). \n\nNuGet supports [developmentDependency in nuspec](https://learn.microsoft.com/en-us/nuget/reference/nuspec#developmentdependency) for this purpose.\n\nOr perhaps you can set up a package with a reference assembly that has type definitions, but a runtime assembly that is built with TypeForwardedToAttribute, similar to the netstandard assemblies.",
        "createdAt": "2024-03-06T09:12:19Z",
        "updatedAt": "2024-03-06T09:12:19Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      }
    ]
  }
}