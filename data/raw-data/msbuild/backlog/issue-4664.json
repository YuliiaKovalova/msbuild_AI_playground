{
  "number": 4664,
  "title": "Incremental build does not work for C++ project when using Build Solution command",
  "body": "We want to extend our C++ project with the support for **proto** files. We defined **ProjectSchemaDefinitions** for ProtoBuf and Visual Studio can recognize such files.\r\n\r\nWe extended the **BeforeBuildGenerateSourcesTargets** property to execute protoc compiler when C++ project is generating source code files (see Microsoft.BuildSteps.Targets from VC160 toolset).\r\n\r\nOut target is correctly called when we run **Rebuild** or the **vcxproj** file is changed. We checked the Inputs and Outputs definitions for the GrpcCompileForCpp target and incremental build detects if proto file changed and GrpcCompileForCpp should be run.\r\n\r\nWhen we use **Build Solution** only, Visual Studio will immediately return **All outputs are up-to-date.** and it does not even run the msbuild. This causes issues when we change proto files - they won't be compiled unless we run Rebuild.\r\n\r\n\r\n### Steps to reproduce\r\n\r\nProject file\r\n```xml\r\n<Project>\r\n  <ItemGroup>\r\n    <ProtoBuf Include=\"Server.proto\" />\r\n  </ItemGroup>\r\n\r\n  <PropertyGroup>\r\n    <!-- Extend the C++ build system with generating gRPC files -->\r\n    <BeforeBuildGenerateSourcesTargets>$(BeforeBuildGenerateSourcesTargets);GrpcCompileForCpp</BeforeBuildGenerateSourcesTargets>\r\n    <ProtoOutputPath>$(MSBuildThisFileDirectory)</ProtoOutputPath>\r\n  </PropertyGroup>\r\n  \r\n  <Target Name=\"GrpcCompileForCpp\" Inputs=\"@(ProtoBuf)\" Outputs=\"@(ProtoBuf->'%(RootDir)%(Directory)%(Filename).pb.cc')\">\r\n    <PropertyGroup>\r\n      <ProtocCommand>\"$(ProtocFullPath)\" --cpp_out=$(ProtoOutputPath) --grpc_out=$(ProtoOutputPath) --plugin=protoc-gen-grpc=$(GrpcCppPluginFullPath) -I $(ProtoOutputPath) @(ProtoBuf->'%(FullPath)', ' ')</ProtocCommand>\r\n    </PropertyGroup>\r\n    <Message Importance=\"high\" Text=\"$(ProtocCommand)\" />\r\n    <Exec Command=\"$(ProtocCommand)\" />\r\n  </Target>\r\n</Project>\r\n```\r\n\r\nDirectory contents:\r\n```\r\n/\r\n- Server.proto\r\n- ConsoleApplication4.vcxproj\r\n```\r\n\r\n\r\nRun **Build** \u2192 **Build Solution** command from Visual Studio.\r\n\r\n### Expected  behavior\r\n\r\nVisual Studio will run msbuild and it will detect the **proto** file has changed and it will generate new source code.\r\n\r\n### Actual behavior\r\n\r\nVisual Studio reports **All outputs are up-to-date.**\r\n\r\n\r\n### Environment data\r\n\r\nWindows 10 1903\r\nVisual Studio 2019\r\nmsbuild 16.2.37902.0",
  "state": "OPEN",
  "createdAt": "2019-08-27T11:25:02Z",
  "updatedAt": "2024-02-21T16:30:49Z",
  "closedAt": null,
  "author": {
    "login": "jozefizso"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Discussion"
  },
  "comments": {
    "nodes": [
      {
        "body": "This is happening because Visual Studio imposes a check at the project level to determine whether the project as a whole is up to date before even invoking MSBuild. This is the [fast up-to-date check](https://github.com/dotnet/project-system/blob/master/docs/up-to-date-check.md).\r\n\r\nBecause you're working in a C++ `.vcxproj`, some of the details in that document don't apply to you because they're C#/VB/F# specific. The vcxproj implementation of the fast up to date check is not open source, but it does still respect `UpToDateCheckInput`. Can you add something like\r\n\r\n```xml\r\n<ItemGroup>\r\n  <UpToDateCheckInput Include=\"@(ProtoBuf)\" />\r\n</ItemGroup>\r\n```\r\n\r\nto your project/targets and let me know if that doesn't work?",
        "createdAt": "2019-08-27T14:58:32Z",
        "updatedAt": "2019-08-27T14:58:32Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I had a similar issue in .vcxproj files (VS2019 Update7) and using UpToDateCheckInput indeed fixed the issue to trigger an (incremental) build",
        "createdAt": "2021-01-26T08:18:01Z",
        "updatedAt": "2021-01-26T08:18:01Z",
        "author": {
          "login": "japj"
        }
      },
      {
        "body": "I wanted to note that using UpToDateCheckInput worked for me as well. I am using a VS2019 .vcxproj that was recently translated from VS2010. We have a pre-build customization that was functional for noting changes to .c and .cpp files within the .vcxproj at the project compile level, but was not functional for Fortran .f files within this hybrid project. I applied a UpToDateCheckInput to the Fortran files in bulk within the .vcxproj and it worked like a charm.",
        "createdAt": "2021-01-29T15:06:24Z",
        "updatedAt": "2021-01-29T15:06:24Z",
        "author": {
          "login": "jserio1869"
        }
      }
    ]
  }
}