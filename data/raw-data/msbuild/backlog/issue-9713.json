{
  "number": 9713,
  "title": "[Question]: Custom Task Logging Standard Practices",
  "body": "I am working on building several custom tasks and am attempting to get familiar with the provided interfaces. Maybe this has been asked before, but I have done a bit of research and can't come up with a good answer.\r\n\r\nWhat are standard practices for using properties and task items within a custom task in regards to invalid data? The reason I am asking is that when I am parsing input property / item metadata strings and encounter errors, I would like to generate a useful error containing line & column information of the offending XML nodes. The task Log functions provide overloads for providing all sorts of information; however, how does one correlate a task property or item defined in an item group (TaskItem) to its corresponding XML node with line + column?\r\n\r\nAs it stands, the logging interface seems only useful for high level error messages that can't easily direct a user to an offending file, line, and column. \r\n\r\n1. Is it expected to only log high level errors that originate in .props / targets files down in nuget packages and let the users fend for themselves to figure out what project file of theirs is causing the issue?\r\n2. For invalid data, do we simply fallback to a known good default and silently ignore / don't tell the user there was an issue?\r\n3. Do we try and search the BuildEngine XML project tree ourselves and try to correlate the offending items / properties? I don't even know how you would do that, because the only thing available it seems is ProjectFileOfTaskNode, which points to the literal file containing the task, which does not correspond to the file of the project being built on the command line.",
  "state": "CLOSED",
  "createdAt": "2024-02-06T20:45:17Z",
  "updatedAt": "2024-02-21T16:58:22Z",
  "closedAt": "2024-02-11T17:21:05Z",
  "author": {
    "login": "LostTime76"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "\r\n![image](https://github.com/dotnet/msbuild/assets/62843610/c80cf195-a941-43e2-ab14-5b3a62e40cea)\r\n\r\n\r\nLooking at this dumb example, the built in tasks do not even point me to the line & column. They do however seem to have access to the actual project file that is the parent of the build. I mean.. sure, an end user has enough information to say: \"Hey, there is some string in *one* of my project files called 'adls...', I can do a search for that and find the problem. Similarly, any error that a custom task produces will ultimately have the key offending string that could be searched for by a user in their tree of project files. \r\n\r\nIs this just the accepted mindset?",
        "createdAt": "2024-02-06T20:51:51Z",
        "updatedAt": "2024-02-06T20:57:24Z",
        "author": {
          "login": "LostTime76"
        }
      }
    ]
  }
}