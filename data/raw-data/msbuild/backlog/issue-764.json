{
  "number": 764,
  "title": "Failure to load ResolveComReference in OOP node",
  "body": "This simple project:\n\n``` XML\n<Project xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n  <Target Name=\"b\">\n    <Message MSBuildArchitecture=\"x64\"\n             Text=\"Hello!\" />\n    <ResolveComReference MSBuildArchitecture=\"x64\" />\n  </Target>\n</Project>\n```\n\nCauses an MSBuild hang when using the GitHub version of MSBuild (with the Willow Preview 3).\n\nThere are two problems: a failure to load the task, and a hang as a result. This issue is for the former. #765 is the latter.\n\nThe failure to load the task is caused by [a check in `TaskLoader`](https://github.com/Microsoft/msbuild/blob/da283a7bea8a023c47cea73630fa3126c57b49a1/src/Shared/TaskLoader.cs#L121) that attempts to ensure that the AppDomain that will run the task loaded the same task that we have loaded. If I just step over that check in the debugger, everything seems fine.\n\nI find it really interesting that the `Message` task works fine, but `ResolveComReference` does not.\n\n<details>\n<summary>\n\nFull log to the hang</summary>\n\n\nBuild started 7/8/2016 9:46:06 AM.\nProject \"C:\\Users\\raines\\Desktop\\test.proj\" on node 1 (default targets).\nBuilding with tools version \"15.0\".\nProject file contains ToolsVersion=\"\". This toolset may be unknown or missing, in which case you may be able to resolve this by installing the appropriate version of MSBuild, or the build may have been forced to a particular ToolsVersion for policy reasons. Treating the project as if it had ToolsVersion=\"15.0\". For more information, please see http://go.microsoft.com/fwlink/?LinkId=293424.\nTarget \"b\" in project \"C:\\Users\\raines\\Desktop\\test.proj\" (entry point):\nUsing \"Message\" task from assembly \"Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\".\nTask \"Message\"\n  Launching task \"Message\" from assembly \"Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" in an external task host with a runtime of \"CLR4\" and a process architecture of \"x64\".\n  Hello!\nDone executing task \"Message\".\nUsing \"ResolveComReference\" task from assembly \"Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\".\nTask \"ResolveComReference\"\n  Launching task \"ResolveComReference\" from assembly \"Microsoft.Build.Tasks.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" in an external task host with a runtime of \"CLR4\" and a process architecture of \"x64\".\nC:\\Users\\raines\\Desktop\\test.proj(5,5): error : MSB4008: A conflicting assembly for the task assembly \"c:\\Program Files (x86)\\Microsoft Visual Studio\\VS15Preview\\MSBuild\\15.0\\Bin\\Microsoft.Build.Tasks.Core.dll\" has been found at \"c:\\Program Files (x86)\\Microsoft Visual Studio\\VS15Preview\\MSBuild\\15.0\\Bin\\Microsoft.Build.Tasks.Core.dll\".\n</details>\n",
  "state": "CLOSED",
  "createdAt": "2016-07-08T16:56:13Z",
  "updatedAt": "2024-02-21T17:27:13Z",
  "closedAt": "2016-08-03T18:26:06Z",
  "author": {
    "login": "rainersigwald"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Ok, here's my current understanding.\n\nx86 MSBuild.exe launches `amd64/MSBuild.exe` correctly and establishes a good pipe connection to it for IPC.  The child MSBuild has the `amd64/` directory as its base, which contains a copy of `Microsoft.Build.Tasks.Core.dll`. But not the one we want!\n\nThis causes a problem, because the `AssemblyResolve` event is only fired _after_ a failure to load by name--but in this case, the loader can successfully load `Microsoft.Build.Tasks.Core` by name (getting the `amd64/` copy), but then later that doesn't match the one that was `LoadFrom`ed from the x86 path, causing the failure.\n\nAs I mentioned above, if I just disable the `Type` equality check, everything seems to work fine. And since #768 ensures that this assembly will be bitwise identical between the folders, in normal operation it should be fine--especially since this should only be a problem for our own built-in tasks--other task assemblies should be loaded from a path outside our appbase and subject to our assembly resolver helper.\n",
        "createdAt": "2016-07-11T23:18:20Z",
        "updatedAt": "2016-07-11T23:18:20Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Oh, and why is this new? Because before we were always GACed, so there was only one location for the pure-MSIL Tasks assembly, and it would always get loaded from there. But that's not the case any more so the attempted load by name catches the amd64 version.\n",
        "createdAt": "2016-07-11T23:20:37Z",
        "updatedAt": "2016-07-11T23:20:37Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@AndyGerlicher ran into another similar issue related to assemblies loading from the wrong place now that we're not GACed, so the fix will probably come through him.\n",
        "createdAt": "2016-07-21T14:37:13Z",
        "updatedAt": "2016-07-21T14:37:13Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Fixed in #836.\n",
        "createdAt": "2016-08-03T18:26:06Z",
        "updatedAt": "2016-08-03T18:26:06Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}