{
  "number": 1236,
  "title": "[Suggestion] Getting rid of PropertyGroup/ItemGroup",
  "body": "Copy from: https://github.com/dotnet/roslyn-project-system/issues/632\nAs requested by: @srivatsn\nOriginally by: @filipw\n\n> How about a csproj without `<PropertyGroup>`, `<ItemGroup>`, the 2 default imports and an implicit  `<Compile Include=\"**\\*.cs\" />`\n> \n> ```\n> <Project>\n>     <OutputType>Exe</OutputType>\n>     <TargetFramework>netcoreapp1.0</TargetFramework>\n> \n>    <PackageReference Include=\"Microsoft.NETCore.App\" Version=\"1.0.0\" />\n>    <PackageReference Include=\"Microsoft.NET.SDK\" Version=\"1.0.0\" />\n> </Project>\n> ```\n",
  "state": "CLOSED",
  "createdAt": "2016-10-24T14:48:06Z",
  "updatedAt": "2024-02-21T17:25:01Z",
  "closedAt": "2018-11-19T23:48:44Z",
  "author": {
    "login": "MaximRouiller"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Original discussion thread in https://github.com/dotnet/roslyn-project-system/issues/628\n",
        "createdAt": "2016-10-24T17:50:09Z",
        "updatedAt": "2016-10-24T17:50:09Z",
        "author": {
          "login": "MaximRouiller"
        }
      },
      {
        "body": "Not sure if it is worth a separate issue, but could `PropertyGroup` and `ItemGroup` be aliased to `Properties` and `Items`? It would probably break if a task named like that exists (any known usage?) but _much_ nicer to read. (\"Group\" is just stating the obvious and shifts focus away from its \"here's some properties\" purpose. If there actually is something special about a specific group, there'd be a condition anyway...).\n",
        "createdAt": "2016-10-24T17:57:57Z",
        "updatedAt": "2016-10-24T17:57:57Z",
        "author": {
          "login": "dasMulli"
        }
      },
      {
        "body": "Actually @dasMulli it is a separate issue in #820 if I am not mistaken. :)\n",
        "createdAt": "2016-10-24T17:59:49Z",
        "updatedAt": "2016-10-24T17:59:58Z",
        "author": {
          "login": "Mike-E-angelo"
        }
      },
      {
        "body": "It's a good idea (to optionally skip both) which would make the file cleaner and I don't think it's breaking. The only reason I can recall for having them was (1) you need them if you want a condition and (2) it helps intellisense in the file -- which was driven from the XSD so it was never very good -- eg it can prompt for Include when it's inside an item group.\n",
        "createdAt": "2016-10-26T16:15:38Z",
        "updatedAt": "2016-10-26T16:15:38Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "Geeze, two downvotes on this issue, which is meant to help clean up the decade-plus-old format and make it more relevant and palatable for the current developer environment/ecosystem.   \n\nTough crowd... \ud83d\ude1b\n",
        "createdAt": "2016-10-26T16:22:44Z",
        "updatedAt": "2016-10-26T16:22:44Z",
        "author": {
          "login": "Mike-E-angelo"
        }
      },
      {
        "body": "alas, outcome defies intention\n",
        "createdAt": "2016-10-29T08:24:02Z",
        "updatedAt": "2016-10-29T08:24:02Z",
        "author": {
          "login": "gulbanana"
        }
      },
      {
        "body": "@Mike-EEE That is not a proposal, make it clearer what you are suggesting and address questions that have been raised.\n1. Do you want to make them optional or remove them?\n2. Does your proposal include ItemDefintionGroup?\n3. How would the system know the item is a property or item or item definition?\n4. What do you propose it would happen if property and item have the same name?\n5. How would you condition group of properties/items/item definitions?\n6. Plan for the IntelliSense mess that your proposal brings?\n7. How about tools that validate the files against XML schemas? Two schemas?\n8. What does your proposal bring, or in your words, how is it more relevant and more palatable for the current environment?\n",
        "createdAt": "2016-10-29T11:11:46Z",
        "updatedAt": "2016-10-29T11:11:46Z",
        "author": {
          "login": "miloush"
        }
      },
      {
        "body": "@miloush ... if that was the problem that led to your downvote, why not be a champ and post these questions when @MaximRouiller originally posted the issue?  That seems like a much more constructive way to help build the community here, ala StackOverflow.\n\nAnd also, I believe I am allowed to provide commentary/observations without providing solutions.  If this is in violation of a rule in your repo, please kindly point me to it.  Regardless (and TBH), I think this whole path/issue is a fool's errand and what we really need to be doing is providing [a POCO-based model to truly bring MSBuild back into relevancy, as well as positive net perception and therefore adoption](https://github.com/Microsoft/msbuild/issues/613).  So, I feel I have already answered your questions (and so much more) in my suggested route, which just so happens to be the most upvoted issue in this repo.  But feel free to downvote it as well, since that seems to be your thing. \ud83d\ude09 \u2764\ufe0f\n\nI must say that I find it truly fascinating the amount of questions that are proposed in opposition to issues that are meant to improve this product, when MSFT engineers have historically tackled and solved **much, much, MUCH** more difficult problems.  There seems to be a lot of _cantitude_ (can't-do-it-attitude) in this repo, where more energy will be placed into finding reasons _not_ to do something rather than find ways to simply improve the product -- like I experience in other repos.  It's concerning.\n\nNot that I really have room to complain as I haven't lifted a finger for one line of code. \ud83d\ude04 Not that I have really felt welcomed to do this, either.  \n\nAs @gulbanana smartly, deftly, and aptly states, _outcome defies intention_, where we are all seem content to simply sit on our hands, caked in ~15 year-old technology.\n",
        "createdAt": "2016-10-29T11:44:28Z",
        "updatedAt": "2016-10-29T11:54:51Z",
        "author": {
          "login": "Mike-E-angelo"
        }
      },
      {
        "body": "@Mike-EEE No, I have downvoted because I disagree with the idea.\n\nThe rest was an attempt to respect your opinion and help you come up with an actual proposal nevertheless.\n\nIf engineers have tackled and solved much more difficult problems, it is because they were asking and trying to answer similar questions themselves.\n",
        "createdAt": "2016-10-29T12:14:37Z",
        "updatedAt": "2016-10-29T12:14:37Z",
        "author": {
          "login": "miloush"
        }
      },
      {
        "body": "Fair enough, @miloush.  I obviously didn't feel that way, based on previous experiences in this repo, both personally and witnessed.  It is easy to misinterpret the tone as such.  I do appreciate the gesture, however, I believe/feel it's better for someone such as @MaximRouiller to dive into your questions.\n\nFrom my perspective and understanding, I will say that the objective is to keep the MSBuild schema in tact as it rests now, but being able to define the files w/o the `Compile`, `PropertyGroup` and `ItemGroup` elements.  That is, those elements still exist, but they are not explicitly defined in the file and have their own internally defined defaults.  The result of which makes the file more terse and therefore easier to create by hand and for the eyes (and mind) to digest when read.\n\nWhen those elements are explicitly defined in the file, they override the internally defined defaults as mentioned above.  So, _everything stays the same as it is now_, but less XML is required in the file and default logic/values move into the background processing.  Hope that helps. \ud83d\udc4d\n",
        "createdAt": "2016-10-29T12:42:08Z",
        "updatedAt": "2016-10-29T12:42:38Z",
        "author": {
          "login": "Mike-E-angelo"
        }
      },
      {
        "body": "Guys, I copy/pasted a suggestion. I don't know exactly what was behind it.\n\nMy opinion? Make them optional. \n\nIf you look at the description of the issue, you will find:\n\n> Copy from: dotnet/roslyn-project-system#632\n> As requested by: @srivatsn\n> Originally by: @filipw\n\nWith the rest as quote. It's Halloween \ud83d\udc7b . I'm having my first coffee. Give me 10 minutes to come up with some kind of joke. \ud83d\ude1b \n",
        "createdAt": "2016-10-31T12:21:44Z",
        "updatedAt": "2016-10-31T12:21:44Z",
        "author": {
          "login": "MaximRouiller"
        }
      },
      {
        "body": "I'm not sure whether I like this or not... but the presence of the Include/Remove/Update attributes would make it easy to tell items apart from properties.",
        "createdAt": "2016-12-14T21:19:39Z",
        "updatedAt": "2016-12-14T21:19:39Z",
        "author": {
          "login": "mhutch"
        }
      },
      {
        "body": "I'd like to see this implemented too. There's no confusion when item *require* the Include/Remove/Update attributes, and properties are simple elements with no attributes at all and are the only ones that can have text content. For example, the following item is invalid:\r\n\r\n```xml\r\n<Content Include=\"readme.txt\">This is great!</Content>\r\n```\r\nAnd the following is obviously a property since it has no attributes:\r\n```xml\r\n<Content>This is great!</Content>\r\n```\r\n\r\nIn fact, I think just the presence of *any* attributes would signal that it's an item, requiring `Include` and interpreting the attributes as item metadata.",
        "createdAt": "2017-03-01T15:59:35Z",
        "updatedAt": "2017-03-01T15:59:35Z",
        "author": {
          "login": "kzu"
        }
      },
      {
        "body": "I'm generally against this idea, because I think it makes projects harder to understand for someone who doesn't know MSBuild deeply--which is most MSBuild users.\r\n\r\nYou must have the knowledge that you reference properties with `$(PropertyName)` and items with `@(ItemName)`. That isn't really affected by this proposal.\r\n\r\nAs is, there's a clue as to what a thing is embedded in its definition:\r\n```xml\r\n<PropertyGroup>\r\n  <NamedThing1>value1</NamedThing1>\r\n</PropertyGroup>\r\n<ItemGroup>\r\n  <NamedThing2 Include=\"value2\" />\r\n</ItemGroup>\r\n\r\n<Target Name=\"Example\">\r\n  <Message Text=\"Uses: $(NamedThing1) and @(NamedThing2)\" />\r\n</Target>\r\n```\r\n\r\nWith this change, it'd be unambiguous to the parser (I think), but confusing to the reader:\r\n\r\n```xml\r\n<NamedThing1>value1</NamedThing1>\r\n<NamedThing2 Include=\"value2\" />\r\n\r\n<Target Name=\"Example\">\r\n  <Message Text=\"Uses: $(NamedThing1) and @(NamedThing2)\" />\r\n</Target>\r\n```\r\n\r\nOne major mitigation to this would be a language service/syntax highlighter (#1774) that disambiguated properties and items through color or underlining or italics or something, and helped the typist find the right syntax to use a property or item (\"did you mean to reference the item `@(NamedThing2)` instead of the nonexistent property `$(NamedThing2)`?\"). That might let us have the cake (really concise proj files) and eat it too (be able to understand them later).",
        "createdAt": "2017-03-01T17:10:43Z",
        "updatedAt": "2017-03-01T17:10:43Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@kzu \r\n\r\n> In fact, I think just the presence of any attributes would signal that it's an item, requiring Include and interpreting the attributes as item metadata.\r\n\r\nEven `Condition=\"\"`? That's a fun one.",
        "createdAt": "2017-03-01T17:17:23Z",
        "updatedAt": "2017-03-01T17:17:23Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Here's something likely confusing for someone that doesn't know C# \"deeply\":\r\n\r\n```csharp\r\npublic string RootDir => \"C:\";\r\n```\r\nvs\r\n```csharp\r\npublic string RootDir() => \"C:\";\r\n```\r\n\r\nWe're talking *two* chars vs a whole word (`Include`) plus different content model for props vs items ;). \r\n\r\nAlso, the example would more typically be:\r\n\r\n```xml\r\n<NamedThing1>value1</NamedThing1>\r\n\r\n<NamedThing2 Include=\"value2;value3\" />\r\n<NamedThing2 Include=\"value4\" />\r\n<NamedThing2 Include=\"value5\" />\r\n```\r\n\r\nWhere it's more obvious that items are many, whereas props are scalars.\r\n\r\nAlso, do we really need to optimize for someone who doesn't know the difference between `$()` and `@()`? You can't do *anything* at all in MSBuild if you don't know even that. It's like not knowing when to use a semi-colon in C# ;). \r\n\r\nItems, properties, targets and tasks are the four fundamental basic concepts you can learn from reading a blog post on MSBuild. Maintaining verbosity for the benefit of those who don't grasp even these four key concepts to the detriment of the several of billions that do, seems... sad! ;)\r\n\r\nAnd FWIW, I believe those that dare to crack open a .csproj have the guts to learn that much at a bare minimum.\r\n\r\nGranted, just like the lambda example, this removal of groups could be for advanced users, just like the attribute syntax and so on. There's nothing wrong IMHO with having both. Document the verbose version for beginners, and have the advanced users leverage a more terse syntax.",
        "createdAt": "2017-03-01T19:28:05Z",
        "updatedAt": "2017-03-01T19:28:05Z",
        "author": {
          "login": "kzu"
        }
      },
      {
        "body": "> Also, do we really need to optimize for someone who doesn't know the difference between `$()` and `@()`?\r\n\r\nNo, I don't think so. That's what I was trying to get at with my \"you must have the knowledge\" sentence.\r\n\r\nHowever, I think there's a difference between \"I defined something in a `PropertyGroup` above so I know I need to use `$()`\" and \"I know that because I didn't type `Include` above I need to use `$()`\".\r\n\r\nIn terms of C# analogies: I think there's a big difference there too, and it's that basically no one _chooses_ MSBuild as a programming language. All of our users are here for the rest of the .NET ecosystem. I don't want to imply \"to be a .NET Developer, you must have a very good understanding of MSBuild as well as a good understanding of C# or VB.\" That's the principle that guides me to prefer the status quo over this change--you have to know items vs. properties but not maintain a mental model that helps you see the type system from minimal annotation.\r\n\r\n(Obviously within the constraints of the language we have--as I often disclaim, I wouldn't design it this way today, but we have compatibility constraints.)",
        "createdAt": "2017-03-01T20:24:36Z",
        "updatedAt": "2017-03-01T20:24:36Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Fair enough. I still think for advanced users, it should be an option. Kinda like `PropertyGroup/ItemGroup` are the `Option=Strict` of MSBuild ;).\r\n\r\nMaybe with the aliasing of `PropertyGroup -> Properties` and `ItemGroup -> Items`, it improves a bit already.",
        "createdAt": "2017-03-01T22:50:26Z",
        "updatedAt": "2017-03-01T22:50:42Z",
        "author": {
          "login": "kzu"
        }
      },
      {
        "body": "Any progress on this? I don't think it looks relevant now with the new project system and everything.\r\n\r\nCan I close?\r\n",
        "createdAt": "2018-07-23T15:23:19Z",
        "updatedAt": "2018-07-23T15:23:19Z",
        "author": {
          "login": "MaximRouiller"
        }
      },
      {
        "body": "I don't have any objection to closing this, so let's do that.",
        "createdAt": "2018-11-19T23:48:44Z",
        "updatedAt": "2018-11-19T23:48:44Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "do you think this could be reopened? @rainersigwald @MaximRouiller   \r\nI believe there's still interest in this even with all the improvements that have already been made.\r\n\r\nit has 24 \ud83d\udc4d here,  21 \ud83d\udc4d on https://github.com/dotnet/project-system/issues/632, and the original example of \r\n\r\n    <Project>\r\n        <OutputType>Exe</OutputType>\r\n        <TargetFramework>netcoreapp1.0</TargetFramework>\r\n\r\n       <PackageReference Include=\"Microsoft.NETCore.App\" Version=\"1.0.0\" />\r\n       <PackageReference Include=\"Microsoft.NET.SDK\" Version=\"1.0.0\" />\r\n    </Project>\r\n\r\nwith Groups removed was not far off from what we have now, so I feel the suggestion still stands",
        "createdAt": "2020-03-30T20:31:53Z",
        "updatedAt": "2020-03-30T20:31:53Z",
        "author": {
          "login": "danielchalmers"
        }
      }
    ]
  }
}