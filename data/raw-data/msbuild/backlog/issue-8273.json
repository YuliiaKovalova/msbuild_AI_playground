{
  "number": 8273,
  "title": "Usage of hard or symbolic linking leads to NuGet cache corruption",
  "body": "<!-- This is a template that helps us provide quicker feedback. Please use any relevant sections and delete anything you don't need. -->\r\n\r\n### Issue Description\r\n<!--\r\n* Please include a clear and concise description of the problem.\r\n-->\r\n\r\nMSBuild can use hard or symbolic links to avoid excessive file copies on disk. It is a good method to speed-up builds but at the same time, it is very easy to silently corrupt the NuGet cache. \r\nI have seen that this issue has been mentioned several times already, but it was never explained how and when exactly the NuGet cache gets corrupted:\r\n\r\nRelated issues:\r\n- https://github.com/dotnet/msbuild/issues/1407\r\n- https://github.com/dotnet/msbuild/issues/3788\r\n- https://github.com/dotnet/msbuild/issues/7014\r\n- https://github.com/NuGet/Home/issues/12047\r\n\r\n### Steps to Reproduce\r\n\r\n1. Build an executable project with hard or symbolic links enabled\r\n2. Update the version of referenced NuGet package\r\n3. Build the application again, but this time, without using hard/symbolic links.\r\nMSBuild will try to update dependencies in the application's output folder. Sadly, instead of replacing existing links, it replaces actual files in NuGet cache (thus corrupting it).\r\n\r\n- hard-links\r\n```\r\ndotnet nuget locals --clear all\r\ndotnet new console\r\ndotnet add package newtonsoft.json -v 13.0.1\r\ndotnet build /p:CreateHardLinksForCopyLocalIfPossible=true\r\ndotnet add package newtonsoft.json -v 13.0.2\r\ndotnet build\r\n```\r\n\r\n- symbolic-links\r\n```\r\ndotnet nuget locals --clear all\r\ndotnet new console\r\ndotnet add package newtonsoft.json -v 13.0.1\r\ndotnet build /p:CreateSymbolicLinksForCopyLocalIfPossible=true\r\ndotnet add package newtonsoft.json -v 13.0.2\r\ndotnet build\r\n```\r\n\r\nIn both cases file `newtonsoft.json\\13.0.1\\lib\\netstandard2.0\\Newtonsoft.Json.dll` is silently replaced with `newtonsoft.json\\13.0.2\\lib\\net6.0\\Newtonsoft.Json.dll`:\r\n\r\n### Expected Behavior\r\n<!--\r\n* The expected output or behavior.\r\n-->\r\n\r\nFiles in the NuGet cache remain untouched.\r\n\r\n### Actual Behavior\r\n<!--\r\n* The actual output or behavior.\r\n-->\r\nFiles in a NuGet package are silently replaced with files from another version.\r\n\r\n### Analysis\r\n<!--\r\n* If you have an idea where the problem might lie, let us know that here.\r\n* Please include any pointers to code, relevant changes, or related issues you know of.\r\n-->\r\n\r\nBoth Windows and Linux systems are affected, also it doesn't matter whether hard or symbolic links are used. The problem is that `File.Copy` operation, instead of replacing the link, replaces the file that the link is linking to. To safely replace a link with a different file or link, `File.Delete` needs to be called first. Unfortunately, MSBuild calls [File.Delete](https://github.com/dotnet/msbuild/blob/a6f6699d1f70bf79db82030938d2c5e52d1e4d2e/src/Tasks/Copy.cs#L355-L360) only when the usage of hard or symbolic links is requested. When the build doesn't use hard or symbolic links, then the `File.Delete` is not called.\r\n\r\n### Versions & Configurations\r\n<!--\r\n* In a Visual Studio developer command prompt, run `msbuild -version` and paste the output here.\r\n* If applicable, include the version of the tool that invokes MSBuild (Visual Studio, dotnet CLI, etc):\r\n\r\n* Post any other relevant configuration settings here.\r\n*   OS, architecture, etc.\r\n-->\r\n",
  "state": "CLOSED",
  "createdAt": "2022-12-30T12:03:03Z",
  "updatedAt": "2023-05-05T21:49:12Z",
  "closedAt": "2023-05-05T21:49:12Z",
  "author": {
    "login": "marcin-krystianc"
  },
  "labels": [
    "bug",
    "needs-triage"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Reopening since the change was backed out due to causing https://github.com/dotnet/msbuild/issues/8684.",
        "createdAt": "2023-04-25T17:35:33Z",
        "updatedAt": "2023-04-25T17:35:33Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Hi @manfred-brands,\r\n\r\nwe are very interested in fixing the problem with NuGet cache corruption as soon as possible. Since https://github.com/dotnet/msbuild/pull/8275 had to be reverted, I wanted to ask whether you plan to work on a fix? If not, then I'm more than happy to do it.",
        "createdAt": "2023-05-04T07:57:19Z",
        "updatedAt": "2023-05-04T07:57:19Z",
        "author": {
          "login": "marcin-krystianc"
        }
      },
      {
        "body": "Hi @marcin-krystianc,\r\n\r\nThis is the first time I heard it was reverted. I didn't get any GitHub notifications. I now see the item.mentioned above.\r\n",
        "createdAt": "2023-05-04T10:12:34Z",
        "updatedAt": "2023-05-04T10:13:45Z",
        "author": {
          "login": "manfred-brands"
        }
      },
      {
        "body": "I could add an 'is same file' check in the copy code, but shouldn't msbuild not detect that itself before even calling Copy? The destination file exists and has the same timestamp.",
        "createdAt": "2023-05-04T10:47:21Z",
        "updatedAt": "2023-05-04T10:47:21Z",
        "author": {
          "login": "manfred-brands"
        }
      },
      {
        "body": "I didn't look into details yet, but the https://github.com/dotnet/msbuild/issues/8684 @Forgind explains that msbuild checks whether paths are equal before running the Copy operation, but the checks are on relative paths not on the full paths.",
        "createdAt": "2023-05-04T10:52:55Z",
        "updatedAt": "2023-05-04T10:52:55Z",
        "author": {
          "login": "marcin-krystianc"
        }
      },
      {
        "body": "I made a small test program, that emulates a copy to oneself to see how `File.Copy` behaves when this is done.\r\n\r\nI expected one of three outcomes:\r\n1. An exception\r\n2. An empty destination file (as it is truncated before copying)\r\n3. It works as the System recognizes this.\r\n\r\n```csharp\r\nFile.Copy(\"Program.cs\", \"Program.cs\", true);\r\n```\r\n\r\nIt throws:\r\n```\r\nUnhandled exception. System.IO.IOException: The process cannot access the file 'C:\\Users\\m.brands\\source\\repos\\CopyToSelf\\Program.cs' because it is being used by another process.\r\n   at System.IO.FileSystem.CopyFile(String sourceFullPath, String destFullPath, Boolean overwrite)\r\n   at Program.<Main>$(String[] args) in C:\\Users\\m.brands\\source\\repos\\CopyToSelf\\Program.cs:line 4\r\n```\r\n\r\nThis would mean that in the current msbuild, this situation already throws an exception.\r\nIn the current build this exception is handled in `DoCopyWithRetries`:\r\n\r\n```csharp\r\n                            // if this was just because the source and destination files are the\r\n                            // same file, that's not a failure.\r\n                            // Note -- we check this exceptional case here, not before the copy, for perf.\r\n                            if (PathsAreIdentical(sourceFileState.Name, destinationFileState.Name))\r\n                            {\r\n                                return true;\r\n                            }\r\n```\r\n\r\nThis states that `Path.GetFullPath` is too expensive to call and we wait for an exception in those few cases where it matters.\r\nWith the need to `File.Delete` first, do you see any other option than having to do this check before trying to delete?\r\n\r\n",
        "createdAt": "2023-05-04T15:01:11Z",
        "updatedAt": "2023-05-04T15:02:55Z",
        "author": {
          "login": "manfred-brands"
        }
      },
      {
        "body": "My proposed change is:\r\n```csharp\r\n            // If the destination file is a hard or symbolic link, File.Copy would overwrite the source.\r\n            // To prevent this, we need to delete the existing entry before we Copy or create a link.\r\n            // We could try to figure out if the file is a link, but I can't think of a reason to not simply delete it always.\r\n            if (ChangeWaves.AreFeaturesEnabled(ChangeWaves.Wave17_6) && destinationFileState.FileExists && !destinationFileState.IsReadOnly)\r\n            {\r\n                if (PathsAreIdentical(sourceFileState.Name, destinationFileState.Name))\r\n                {\r\n                    return true;\r\n                }\r\n\r\n                FileUtilities.DeleteNoThrow(destinationFileState.Name);\r\n            }\r\n```",
        "createdAt": "2023-05-04T15:06:35Z",
        "updatedAt": "2023-05-04T15:06:35Z",
        "author": {
          "login": "manfred-brands"
        }
      },
      {
        "body": "Great discussion here. The primary issue I've been wrestling with is how to accomplish this kind of check without regressing perf in the normal case in which you are not trying to copy a file on top of itself. As marcin-krystianc said, I noticed that MSBuild checks if the paths are the same, but it does no normalization, which means if you have an extra .\\ in one of the paths, it thinks they're different. (More relevantly, it doesn't notice if you have one absolute path and one relative path.) As manfred-brands said, we don't do the full normalization there currently to avoid expensive operations when not necessary.\r\n\r\nI have a draft PR out that roughly aligns with manfred-brands's proposal: https://github.com/dotnet/msbuild/pull/8685. I think it works, both as far as not corrupting the NuGet cache and as far as not deleting a file copied onto itself, and I'm currently learning towards taking it. The only case in which I believe performance is regressed is if you are creating a hard/symlink, and it should be regressed by as much time as it takes to make a path into a full path. Especially since we only recently fixed our symlink creation behavior, I think that's acceptable.",
        "createdAt": "2023-05-04T17:32:54Z",
        "updatedAt": "2023-05-04T17:32:54Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "@Forgind The alternative I had was to replace the string.Equals on the specified paths in `DoCopyIfNecessary` with a `PathsAreIdentical`. \r\nIs `Path.GetFullPath` that expensive?\r\n\r\nI see that is what you did in #8685.",
        "createdAt": "2023-05-05T01:14:36Z",
        "updatedAt": "2023-05-05T01:16:54Z",
        "author": {
          "login": "manfred-brands"
        }
      },
      {
        "body": "@JeremyKuhne GetFullPath is still significantly expensive, right? Although perhaps better than before, it will still hit the disk in some cases, right?",
        "createdAt": "2023-05-05T03:08:21Z",
        "updatedAt": "2023-05-05T03:08:21Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "It looks like the .net runtime on Windows calls into a system call GetFullPathW which has a [remark](https://learn.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-getfullpathnamew#remarks) that it does not check if the file exists. It should only do path magic: prefix with current directory and remove unnecessary directory up and down: `A/B/../C' becomes 'A/C'.\r\n\r\nOn Linux, `GetFullPath` does a `Combine(GetCwd(), path)` and then calls `PathInternal.RemoveRelativeSegments`.\r\n\r\nI'm surprised at the amount of Window specific (directly into OS) calls in MSBuild for the file system access.",
        "createdAt": "2023-05-05T03:41:18Z",
        "updatedAt": "2023-05-05T03:41:18Z",
        "author": {
          "login": "manfred-brands"
        }
      },
      {
        "body": "> `A/B/../C' becomes 'A/C'.\r\n\r\nThat is not always correct if `A/B` is a symbolic link.",
        "createdAt": "2023-05-05T08:08:15Z",
        "updatedAt": "2023-05-05T08:08:15Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "> > `A/B/../C' becomes 'A/C'.\r\n> \r\n> That is not always correct if `A/B` is a symbolic link.\r\n\r\nExcept that the dotnet code for Unix doesn't seem to do that:\r\n\r\n```\r\n// We would ideally use realpath to do this, but it resolves symlinks and requires that the file actually exist.\r\nstring collapsedString = PathInternal.RemoveRelativeSegments(path, PathInternal.GetRootLength(path));\r\n```\r\n\r\nNor does the GetFullPath method on Windows.\r\nGiven subdirectories \"a\", \"a/aa\", \"a/aa/aaa\" and symbolic link \"b\" pointing to \"aa/aaa\":\r\n\"a/b/../c\" when following the links would be \"a/aa/c\" but GetFullPath always returns \"a/c\"\r\n\r\nI also doubt that a user would expect that \"a/b/../c\" suddenly becomes \"a/aa/c\"\r\n",
        "createdAt": "2023-05-05T10:28:56Z",
        "updatedAt": "2023-05-05T10:28:56Z",
        "author": {
          "login": "manfred-brands"
        }
      },
      {
        "body": "> GetFullPath is still significantly expensive, right? Although perhaps better than before, it will still hit the disk in some cases, right?\r\n\r\n@danmoseley On Windows it typically is just a string parsing/manipulation routine. It will get the current directory and possibly environment variables (for drive relative paths), but those are not disk based. There is some sort of check regarding legacy device names `PRN`, `CON`, etc. but I don't recall precisely what it does off the top of my head (check for device availability for serial ports maybe?).\r\n\r\nOn .NET Framework (and early .NET Core versions) `Path.GetFullPath` was significantly more expensive as we would try to parse the path and check for validity up front (before passing it to the OS). In 4.6.2 I ported back some of the changes which improves things dramatically.",
        "createdAt": "2023-05-05T17:41:25Z",
        "updatedAt": "2023-05-05T17:41:25Z",
        "author": {
          "login": "JeremyKuhne"
        }
      },
      {
        "body": "> @Forgind The alternative I had was to replace the string.Equals on the specified paths in `DoCopyIfNecessary` with a `PathsAreIdentical`. Is `Path.GetFullPath` that expensive?\r\n> \r\n> I see that is what you did in #8685.\r\n\r\nRight; I couldn't think of another way to validate that the paths really are the same, but I moved the check a little earlier and tried to unify some of the computation to minimize the impact in most cases. The only case where I think perf regresses is if you try to create a hard/symlink, and that's minor, per JeremyKuhne's comment, unless someone is using an older runtime. I undrafted the PR; from internal discussion, it sounds like we're leaning towards taking it, so that should hopefully resolve the writing-through-symlink problem without reintroducing the copy-onto-self-means-delete problem.",
        "createdAt": "2023-05-05T19:43:54Z",
        "updatedAt": "2023-05-05T19:43:54Z",
        "author": {
          "login": "Forgind"
        }
      }
    ]
  }
}