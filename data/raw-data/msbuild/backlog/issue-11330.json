{
  "number": 11330,
  "title": "Change VSIX authoring to include .NET MSBuild",
  "body": "In order to run a taskhost node on .NET from a .NET Framework host, we'll need the .NET MSBuild bits available, meaning we'll need to ship the .NET `MSBuild.dll` and supporting assemblies in our VSIX for insertion to VS.\n\nI think this will be \"add a new folder under `MSBuild\\Current\\Bin` named `net` with these files in it\". The exact closure of files isn't totally clear to me and may need some experimentation--it's essentially \"the output of a framework-dependent `dotnet publish` for MSBuild/net9\".",
  "state": "CLOSED",
  "createdAt": "2025-01-24T16:15:25Z",
  "updatedAt": "2025-03-28T15:44:08Z",
  "closedAt": "2025-03-28T15:38:55Z",
  "author": {
    "login": "rainersigwald"
  },
  "milestone": {
    "title": "VS 17.14"
  },
  "assignees": {
    "nodes": []
  },
  "labels": [
    "Area: Visual Studio",
    "triaged"
  ],
  "comments": {
    "nodes": [
      {
        "body": "Having to ship a .NET build of MSBuild seems to go against the goal of decoupling VS and the SDK the user brings. Can we not use the information that the SDK resolver gives us to find the SDK to load/invoke .NET MSBuild nodes from?",
        "createdAt": "2025-01-24T16:51:30Z",
        "author": {
          "login": "baronfel"
        }
      },
      {
        "body": "I am wondering if we can use the same set of files that we put to `core `folder in bootstrap ?",
        "createdAt": "2025-01-24T17:11:04Z",
        "author": {
          "login": "YuliiaKovalova"
        }
      },
      {
        "body": "> Having to ship a .NET build of MSBuild seems to go against the goal of decoupling VS and the SDK the user brings.\n\nIt isn't a full decoupling but is still a very meaningful step, I think.\n\n> Can we not use the information that the SDK resolver gives us to find the SDK to load/invoke .NET MSBuild nodes from?\n\nThis would be difficult because it would impose compatibility constraints on the IPC protocol that has long been constrained to talk only between the same versions of MSBuild. It'd probably be impossible to use the existing translation mechanisms and we'd have to rewrite our IPC or add a new mechanism in parallel--not just for properties/items (easy) but also for all the types of log messages that can be generated in a task.\n\nAnd the benefit would be quite limited: we have a great track record of maintaining task compatibility for old tasks on new MSBuild engines. I don't expect that .NET runtimes and core libraries will make changes so breaking in the future that that wouldn't stay true.\n\nThere is one very solid benefit though: today we target .NET 4.7.2 and .NET 9. Soon we'll target net472 and net10.0, then eventually net11.0 and so on. If we use _that_ `MSBuild.dll` as the taskhost we'll run into cases where we're running .NET 10 SDK tasks on .NET 11 purely for the MSBuild bits to run, which would require installing .NET 11 even on a machine that intends to build only .NET 10 stuff.\n\nDo you think it'd be worth building that compatible communication protocol out to get the \"slightly more self-contained\" SDK behavior?",
        "createdAt": "2025-01-24T17:23:32Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> I am wondering if we can use the same set of files that we put to `core `folder in bootstrap ?\n\nI think it'd be a subset: all (I think?) the DLLs and the `.deps.json` file but none of the targets.",
        "createdAt": "2025-01-24T17:24:24Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "How will framework msbuild discover the `dotnet.exe` that is used to launch the .NET Core `msbuild.dll`? Is the plan to use `$(DOTNET_EXPERIMENTAL_HOST_PATH)`? That seems like it would cause friction cause there is no guarantee what version of `dotnet.exe` that would be: it could be .NET 6 for example. \n\n- Is the plan to have the `msbuild.dll` target a very old .NET Core so that it's maximally compatible with the SDK found via `global.json`? \n- In the case where there is no `global.json` how does `msbuild` find `dotnet.exe`? \n",
        "createdAt": "2025-03-28T15:28:26Z",
        "author": {
          "login": "jaredpar"
        }
      },
      {
        "body": "Oh @YuliiaKovalova we should have updated this work item.\n\nWe're planning to abandon this in favor of running the `MSBuild.dll` from the loaded SDK. That will require some work in MSBuild (ensuring that IPC is compatible across the supported VS+SDK pairing range) but sidestep the need to think super deeply about the MSBuild.dll TF and rollforward stuff, plus maximally match `dotnet build` behavior.",
        "createdAt": "2025-03-28T15:33:22Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Close in favor of a new versioning mechanism described here: https://github.com/dotnet/msbuild/pull/11543\n",
        "createdAt": "2025-03-28T15:38:53Z",
        "author": {
          "login": "YuliiaKovalova"
        }
      }
    ]
  }
}