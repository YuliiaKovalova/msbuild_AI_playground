{
  "number": 5541,
  "title": "UsingTask overrides do not apply if newly specifying Architecture/Runtime",
  "body": "In this case:\r\n\r\n```xml\r\n  <UsingTask TaskName=\"VSCTCompiler\" AssemblyFile=\"$(VsSDKAssemblyFile)\" Architecture=\"x86\" />\r\n  <UsingTask TaskName=\"VSCTCompiler\" AssemblyFile=\"$(VsSDKAssemblyFile)\" />\r\n```\r\n\r\nI _expected_ that the first UsingTask would be used, and require a 32-bit TaskHost if running on a 64-bit MSBuild. But it is not, because internally we look tasks up based on the task's \"identity parameters\" (runtime/arch) as defined _at the callsite_:\r\n\r\nhttps://github.com/dotnet/msbuild/blob/e8338f5ad91d42c3196218648859e9e837099842/src/Build/Instance/TaskRegistry.cs#L470\r\n\r\nIf the callsite doesn't specify (as most don't), the no-arch-specified UsingTask entry is a \"better match\" for the request and is used.\r\n\r\nThis means that a user can't override a UsingTask that's specified in a NuGet package or SDK to specify an architecture to work around a bug in the package/sdk that the task is secretly x86-specific.",
  "state": "CLOSED",
  "createdAt": "2020-07-23T18:32:12Z",
  "updatedAt": "2024-02-21T17:02:50Z",
  "closedAt": "2022-02-23T13:20:54Z",
  "author": {
    "login": "rainersigwald"
  },
  "labels": [
    "Area: Engine",
    "Area: TaskHost",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "benvillalobos"
      }
    ]
  },
  "milestone": {
    "title": "VS 17.2"
  },
  "comments": {
    "nodes": [
      {
        "body": "Because of 64-bit VS this is likely to be more relevant, pulling into 17.0 for consideration.",
        "createdAt": "2021-07-13T14:18:01Z",
        "updatedAt": "2021-07-13T14:18:01Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "One note: there's a `.overridetasks` file next to MSBuild, for example on my machine\r\n\r\n```\r\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Preview\\MSBuild\\Current\\Bin\\amd64\\Microsoft.Common.overridetasks\r\n```\r\n\r\nThis is intended to allow overriding task definitions. Since it requires changing the \"installed\"/\"owned by VS\" file it's not a great option and I think we should still fix this, but it's something to keep in our pocket.\r\n\r\nNote that I didn't actually validate that this works . . .",
        "createdAt": "2021-07-28T16:29:26Z",
        "updatedAt": "2021-07-28T16:29:26Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Haven't done a deep dive yet, here's a lot of thinking out loud based on first glance:\r\n\r\nThe scenario is this:\r\n\r\n1. User creates a UsingTask for task `Foo` as normal -> it gets added to the TaskRegistry.\r\n2. User may create a more specific UsingTask for `Foo` (to use an x86 task specifically), also added to the registry.\r\n\t- Presumably they have a \"global\" using task, then a project specifies they want the x86 version of that task?\r\n3. At build time, when we find task `Foo` to call and need to find it, we look into the registry BUT return the wrong one.\r\n\t-. What made it the wrong one? Did it pull up the first one it saw? \"most compatible\", in other words \"less specific\"?\r\n\t-. Looks like this is controlled at `GetTaskRegistrationRecord`\r\n\r\n\r\n> I expected that the first UsingTask would be used, and require a 32-bit TaskHost if running on a 64-bit MSBuild\r\n\r\nWhy? Because it was the first one defined? Because it is more specific? I'm trying to reason about what the task registry should prefer when returning one task registration over another.\r\n\r\nShouldn't this sort of thing be determined based on a condition within the project anyway? A project should be able to tell \"when I'm x86, use the x86 version of this task?\" Probably because usingtask is a top level element, blarg.\r\n\r\nHow worried about breaking existing projects do we need to be here? This is the first I've seen of multiple UsingTask's on the same dll, and it sounds like defaulting to a different usingtask could break people.\r\n\r\nThis looks like the most relevant method:\r\n\r\n```c#\r\n\r\n        /// <summary>\r\n        /// Retrieves the task registration record for the specified task.\r\n        /// </summary>\r\n        /// <param name=\"taskName\">The name of the task to retrieve.</param>\r\n        /// <param name=\"taskProjectFile\">The task's project file.</param>\r\n        /// <param name=\"taskIdentityParameters\">The set of task identity parameters to be used to identify the\r\n        /// correct task record match.</param>\r\n        /// <param name=\"exactMatchRequired\">True if an exact name match is required.</param>\r\n        /// <param name=\"targetLoggingContext\">The logging context.</param>\r\n        /// <param name=\"elementLocation\">The location of the task element in the project file.</param>\r\n        /// <param name=\"retrievedFromCache\">True if the record was retrieved from the cache.</param>\r\n        /// <returns>The task registration record, or null if none was found.</returns>\r\n        internal RegisteredTaskRecord GetTaskRegistrationRecord\r\n            (\r\n            string taskName,\r\n            string taskProjectFile,\r\n            IDictionary<string, string> taskIdentityParameters,\r\n            bool exactMatchRequired,\r\n            TargetLoggingContext targetLoggingContext,\r\n            ElementLocation elementLocation,\r\n            out bool retrievedFromCache\r\n            )\r\n```",
        "createdAt": "2021-08-11T00:33:26Z",
        "updatedAt": "2021-08-11T00:33:26Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "> Why? Because it was the first one defined?\r\n\r\nYes. That's the override behavior if you have, for example, two `UsingTasks` for the same task name with different `AssemblyFile` values.\r\n\r\n> Shouldn't this sort of thing be determined based on a condition within the project anyway?\r\n\r\nFor the most part, the `UsingTask` is telling MSBuild about the task, which should not depend on the project.\r\n\r\n> A project should be able to tell \"when I'm x86, use the x86 version of this task?\"\r\n\r\nThe project shouldn't care about the architecture of MSBuild that is building it. But some tasks do need to run in the target architecture of the project--for instance `ResolveCOMReference` should run in `x86` when the project targets `x86`. That's why [phantom task parameters](https://docs.microsoft.com/visualstudio/msbuild/how-to-configure-targets-and-tasks?view=vs-2019#phantom-task-parameters) let you configure `MSBuildArchitecture` _at the call site_ as well as at the `UsingTask`.\r\n\r\n> Probably because usingtask is a top level element\r\n\r\nIt is but it's in a late pass so you can use conditions/properties from the fully-evaluated project.\r\n\r\n> How worried about breaking existing projects do we need to be here? This is the first I've seen of multiple UsingTask's on the same dll, and it sounds like defaulting to a different usingtask could break people.\r\n\r\nIt's always good to be worried! My guess is that this will be ok, because as you say most people don't try to override `UsingTask`s. Unlike most MSBuild constructs, the _first_ UsingTask wins!\r\n\r\nThere may be some percentage of people who are _trying_ to do this today and silently failing because of this issue. There are also likely to be some folks who are blocked on upgrade because they can't work around an old incorrectly-specified task they don't control. I was more worried about the latter when filing this and think I still am but we should keep the former in mind as we learn more.",
        "createdAt": "2021-08-11T15:02:38Z",
        "updatedAt": "2021-08-11T15:02:38Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I see the inherent problem here. Here's the summary of `FindTaskInRegistry` (`TaskExecutionHost.cs`)\r\n\r\n```C#\r\n/// Given the task name, this method tries to find the task. It uses the following search order:\r\n/// 1) checks the tasks declared by the project, searching by exact name and task identity parameters\r\n/// 2) checks the global task declarations (in *.TASKS in MSbuild bin dir), searching by exact name and task identity parameters\r\n/// 3) checks the tasks declared by the project, searching by fuzzy match (missing namespace, etc.) and task identity parameters\r\n/// 4) checks the global task declarations (in *.TASKS in MSbuild bin dir), searching by fuzzy match (missing namespace, etc.) and task identity parameters\r\n/// 5) 1-4 again in order without the task identity parameters, to gather additional information for the user (if the task identity \r\n///    parameters don't match, it is an error, but at least we can return them a more useful error in this case than just \"could not \r\n///    find task\")\r\n\r\n/// The search ordering is meant to reduce the number of assemblies we scan, because loading assemblies can be expensive.\r\n/// The tasks and assemblies declared by the project are scanned first, on the assumption that if the project declared\r\n/// them, they are likely used.\r\n/// \r\n/// If the set of task identity parameters are defined, only tasks that match that identity are chosen. \r\n/// </summary>\r\n/// <returns>The Type of the task, or null if it was not found.</returns>\r\n        private TaskFactoryWrapper FindTaskInRegistry(IDictionary<string, string> taskIdentityParameters)\r\n        {\r\n            if (!_intrinsicTasks.TryGetValue(_taskName, out TaskFactoryWrapper returnClass))\r\n            {\r\n                returnClass = _projectInstance.TaskRegistry.GetRegisteredTask(_taskName, null, taskIdentityParameters, true /* exact match */, _targetLoggingContext, _taskLocation);\r\n                if (returnClass == null)\r\n                {\r\n                    returnClass = _projectInstance.TaskRegistry.GetRegisteredTask(_taskName, null, taskIdentityParameters, false /* fuzzy match */, _targetLoggingContext, _taskLocation);\r\n\r\n                    if (returnClass == null)\r\n                    {\r\n                        returnClass = _projectInstance.TaskRegistry.GetRegisteredTask(_taskName, null, null, true /* exact match */, _targetLoggingContext, _taskLocation);\r\n\r\n                        if (returnClass == null)\r\n                        {\r\n                            returnClass = _projectInstance.TaskRegistry.GetRegisteredTask(_taskName, null, null, false /* fuzzy match */, _targetLoggingContext, _taskLocation);\r\n\r\n                            if (returnClass == null)\r\n                            {\r\n                                _targetLoggingContext.LogError\r\n                                    (\r\n                                        new BuildEventFileInfo(_taskLocation),\r\n                                        \"MissingTaskError\",\r\n                                        _taskName,\r\n                                        _projectInstance.TaskRegistry.Toolset.ToolsPath\r\n                                    );\r\n\r\n                                return null;\r\n                            }\r\n```\r\n\r\nIt always starts by searching for an _exact_ match, which would be any task that supplies default parameters. In my test case, I have a `Foo` task that takes no params. So MSBuild finds `Foo` as an exact match with no parameters before it could find `Foo` with a fuzzy match.\r\n\r\nI've tested a quick fix in [the draft PR](https://github.com/dotnet/msbuild/pull/6783) that allows finding the first-defined task even if there was an exact match that would have been found. I saw that it returns the first-defined usingtask, but only when not searching by exact match first. The problem is changing that first search condition _not_ to look for exact matches immediately and the impact it could have on every build.",
        "createdAt": "2021-08-23T23:21:30Z",
        "updatedAt": "2021-08-24T03:03:16Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "I seem to be running into this exact issue, importing Microsoft.VsSDK.targets in VS2022 complains about VSCT not being able to load due to an incorrect format, and specifying a UsingTask doesn't seem to allow me to override this behavior.",
        "createdAt": "2021-12-14T09:45:05Z",
        "updatedAt": "2021-12-14T09:45:05Z",
        "author": {
          "login": "tristanmcpherson"
        }
      },
      {
        "body": "@tristanmcpherson how are you importing it, exactly? Recent versions of the VSSDK should be ok.",
        "createdAt": "2021-12-14T14:51:21Z",
        "updatedAt": "2021-12-14T14:51:21Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> @tristanmcpherson how are you importing it, exactly? Recent versions of the VSSDK should be ok.\r\n\r\nYou're right, it was version 15 that was having issues. Migrated to 17 and everything is working. Thank you for the pointer!",
        "createdAt": "2021-12-14T22:33:25Z",
        "updatedAt": "2021-12-14T22:33:25Z",
        "author": {
          "login": "tristanmcpherson"
        }
      }
    ]
  }
}