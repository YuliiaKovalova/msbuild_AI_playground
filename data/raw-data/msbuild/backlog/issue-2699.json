{
  "number": 2699,
  "title": "ResolveAssemblyReference may be improved by caching IO in \"system\" directories",
  "body": "By changing the RAR IO cache to permanently cache certain files without any subsequent staleness checks improves RAR time by ~10% on a Roslyn build.\r\nIn my experiment, I permanently cached IO queries under `c:\\Windows`, `c:\\Program Files`, and `c:\\Users\\<username>\\.nuget`. This reduced RAR time from 21.5 seconds to 19.6 seconds.\r\n\r\nNext steps:\r\n- [ ] instrument RAR to do a tally of all files it looks at, how many are shared between projects, how many come from directories that we know won't change during a build, etc\r\n\r\nAfter figuring out the roots that won't change, the question is how to get this information into RAR. Probably an extra task argument.\r\n\r\nThe big risk here is if files under a permanent root do change over the lifetime of an MSBuild node with NodeReuse on. Highest chance of this happening is with the nuget cache. In this case, maybe nuget can write a hash at the root of its cache and update it whenever anything changed in the cache. Then RAR could define a couple of different cache policies per each root (e.g. `NeverCheck` for stuff under Windows or Program Files, `CompareRootHash` for the nuget cache, etc). But continuously checking that hash will reduce some of the perf gains.\r\n\r\n\r\n",
  "state": "CLOSED",
  "createdAt": "2017-11-03T17:53:16Z",
  "updatedAt": "2024-02-21T17:15:50Z",
  "closedAt": "2021-04-16T10:10:20Z",
  "author": {
    "login": "cdmihai"
  },
  "labels": [
    "Area: Performance",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "MSBuild 15.6"
  },
  "comments": {
    "nodes": [
      {
        "body": "Maybe something should be added to ITask that would allow tasks to subscribe to an event indicating the build completed. Assuming it would be sufficient to cache for the lifetime of a build.",
        "createdAt": "2017-11-07T05:41:15Z",
        "updatedAt": "2017-11-07T05:41:22Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "Can you please provide more details on the ITask build finished usage and benefits? The system file cache needs to be at least process wide to be useful, so I don't see how the information that other builds have finished under the current process benefits caching.",
        "createdAt": "2017-11-07T19:05:04Z",
        "updatedAt": "2017-11-07T19:05:04Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "I was assuming that your cache would be in a static so it could be reused by all RAR invocations on the node during the build, then cleared at the end of the build (so the next build reusing the node would see any updates to whatever the folders are). If that's the case then there needs to be a mechanism to do that clearing. If there was an event on ITask that a task could subscribe to to know that the build was ending and the node was going dormant for reuse, it could use that opportunity to clear out that static. If any of the assumptions above are not correct then my comment isn't relevant :)",
        "createdAt": "2017-11-07T21:00:47Z",
        "updatedAt": "2017-11-07T21:00:47Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "Oh, I see, you're suggesting a way to clear the cache between builds when node reuse is on. Yes, it is actually a good solution. :) Tasks could register 'finalizers' to clear out state. I like it!",
        "createdAt": "2017-11-08T00:23:19Z",
        "updatedAt": "2017-11-08T00:23:19Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "There may already be existing static fields in task classes that should be cleaned up in this manner.",
        "createdAt": "2017-11-08T00:42:35Z",
        "updatedAt": "2017-11-08T00:42:35Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "Closing: Recent and planning changes in RAR are addressing some of those. SDK RAR pre cache shall in particular. ",
        "createdAt": "2021-04-16T10:10:20Z",
        "updatedAt": "2021-04-16T10:10:20Z",
        "author": {
          "login": "rokonec"
        }
      }
    ]
  }
}