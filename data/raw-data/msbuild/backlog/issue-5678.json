{
  "number": 5678,
  "title": "Update MSBuild's TargetFramework to net5.0",
  "body": "",
  "state": "CLOSED",
  "createdAt": "2020-08-26T16:43:06Z",
  "updatedAt": "2024-02-21T17:02:26Z",
  "closedAt": "2021-02-01T17:37:26Z",
  "author": {
    "login": "rainersigwald"
  },
  "labels": [
    "Area: Our Own Build",
    "For consideration",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "benvillalobos"
      }
    ]
  },
  "milestone": {
    "title": "MSBuild 16.9"
  },
  "comments": {
    "nodes": [
      {
        "body": "What would this mean for MSBuild Tasks? Currently, we are targeting .NET Core 2.1 for them. Do we have to change that to .NET Core 3.1? What happens if a user updates MSBuild/VS and builds a project which has still the .NET Core 2.1 MSBuild task referenced?",
        "createdAt": "2020-10-13T13:20:49Z",
        "updatedAt": "2020-10-13T13:20:49Z",
        "author": {
          "login": "SabotageAndi"
        }
      },
      {
        "body": "@SabotageAndi It shouldn't mean anything for tasks, unless you hit one of the rare breaking change in API surface. MSBuild as part of the .NET SDK is already _running_ on the .NET 5 (or .NET Core 3.1) runtime; this just formalizes that at our layer, enabling us (and task authors) to use new functionality.",
        "createdAt": "2020-10-13T14:31:48Z",
        "updatedAt": "2020-10-13T14:31:48Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Thanks, @rainersigwald for this quick clarification. ",
        "createdAt": "2020-10-13T15:24:58Z",
        "updatedAt": "2020-10-13T15:24:58Z",
        "author": {
          "login": "SabotageAndi"
        }
      },
      {
        "body": "Adding a note that we should probably update to net5.0 instead since that will be available shortly.  For custom tasks, I would generally recommend that tasks compile against a higher target framework when possible to reduce the rollforward distance but as Rainer pointed out, the risk we have found is low as the runtime generally has enough back compat to cover all MSBuild task likely scenarios.",
        "createdAt": "2020-10-21T17:23:44Z",
        "updatedAt": "2020-10-21T17:23:44Z",
        "author": {
          "login": "marcpopMSFT"
        }
      },
      {
        "body": "Just to clarify: will the MSBuild in visual studio still run on net framework?",
        "createdAt": "2020-10-27T06:29:23Z",
        "updatedAt": "2020-10-27T06:29:23Z",
        "author": {
          "login": "japj"
        }
      },
      {
        "body": "> I would generally recommend that tasks compile against a higher target framework when possible\r\n\r\nFrom previous experience this is driven by: What is the minimum version that a tool can use MSBuild NuGet pacakges to load a project and execute builds? Either with MSBuildLocator and MSBuild APIs driectly, Roslyn's MSBuildWorkspace or tools like Buildalyzer.\r\n\r\nSo for third party tools/tasks it's probably easier if the TFMs supported by MSBuild APIs increases every now and then to reduce complexity of MSBuild version / runtime version compatibility tests.",
        "createdAt": "2020-10-27T09:49:00Z",
        "updatedAt": "2020-10-27T09:49:14Z",
        "author": {
          "login": "dasMulli"
        }
      },
      {
        "body": "> will the MSBuild in visual studio still run on net framework?\r\n\r\n@japj Yes, that's not changing here and will continue to target `net472`.\r\n\r\n> So for third party tools/tasks it's probably easier if the TFMs supported by MSBuild APIs increases every now and then to reduce complexity of MSBuild version / runtime version compatibility tests.\r\n\r\n@dasMulli this is a good point and I think it should be our policy going forward.",
        "createdAt": "2020-11-03T15:39:20Z",
        "updatedAt": "2020-11-03T15:39:20Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Work for this is being done in the [arcade update PR](https://github.com/dotnet/msbuild/issues/5515). Assigning to myself",
        "createdAt": "2020-12-09T05:31:32Z",
        "updatedAt": "2020-12-09T05:31:32Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "As part of this we need to consider what we do with the ref assemblies:\r\n\r\nhttps://github.com/dotnet/msbuild/blob/1ff34e830630ff7c4b6cb008e85ece4f263ace52/src/Directory.Build.targets#L80-L82\r\n\r\nWith .NET 5.0+, they won't really be netstandard any more, and I think we should consider making them explicitly .NET 5.0 (and then seeing the explicit public-API-breaking changes when we move to 6.0 and so on).",
        "createdAt": "2020-12-09T16:16:46Z",
        "updatedAt": "2020-12-09T16:16:46Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}