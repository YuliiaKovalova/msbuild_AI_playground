{
  "number": 1465,
  "title": "Static string expressions on metadata are too clumsy",
  "body": "To call static (string) functions on properties, I simply write like `$(Prop.Function(...))`.\r\nTo call static (string) functions on bare metadata, I apparently have to use a trick with the static string Copy function. \r\n\r\n```\r\n<Project ToolsVersion=\"15.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\r\n\r\n  <ItemGroup>\r\n    <Files Include=\"foo\">\r\n      <SourcePath>blah.fr.dll</SourcePath>\r\n    </Files>\r\n    <Files Include=\"bar\">\r\n      <SourcePath>some.de.dll</SourcePath>\r\n    </Files>\r\n  </ItemGroup>\r\n\r\n  <PropertyGroup>\r\n    <Prop>baz.fr.dll</Prop>\r\n  </PropertyGroup>\r\n\r\n  <Target Name=\"t\">\r\n\r\n    <Warning Text=\"$(Prop) contains fr\" Condition=\"'$(Prop.Contains(`.fr.`))' == true\"/>\r\n\r\n    <Warning Text=\"%(Files.SourcePath) contains fr\" Condition=\"$([System.String]::Copy('%(Files.SourcePath)').Contains('.fr.'))\"/>\r\n  </Target>\r\n \r\n</Project>\r\n```\r\n\r\ncorrectly emits\r\n```\r\n  C:\\play\\foo.proj(18,5): warning : baz.fr.dll contains fr\r\n  C:\\play\\foo.proj(20,5): warning : blah.fr.dll contains fr\r\n```\r\n\r\nWhere the item type is provided, so there's already one period, it is possible for evaluation to unambiguously allow a function (which would add a second period). \r\n\r\nFor example, `%(Files.SourcePath.Contains('.fr.'))` is not ambiguous and much better than `$([System.String]::Copy('%(Files.SourcePath)').Contains('.fr.'))`",
  "state": "CLOSED",
  "createdAt": "2016-12-09T20:45:25Z",
  "updatedAt": "2024-02-21T17:23:30Z",
  "closedAt": "2016-12-13T16:44:00Z",
  "author": {
    "login": "danmoseley"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Closing as duplicate of #1155 ",
        "createdAt": "2016-12-13T16:44:00Z",
        "updatedAt": "2016-12-13T16:44:00Z",
        "author": {
          "login": "cdmihai"
        }
      }
    ]
  }
}