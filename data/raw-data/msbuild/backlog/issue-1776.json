{
  "number": 1776,
  "title": "ResGen path too long on mono-osx",
  "body": "I am receiving the following error with recent Mono / Visual Studio on OS X:\r\n\r\n> /Library/Frameworks/Mono.framework/Versions/4.8.0/lib/mono/msbuild/15.0/bin/Microsoft.Common.CurrentVersion.targets(2881,5): error MSB3455: ResGen.exe may not run because the command line is 48351 characters long, which exceeds the maximum length of the command. To fix this problem, please either (1) remove unnecessary assembly references, or (2) make the paths to those references shorter. [/Users/filipnavara/Desktop/emclient/MailClient/MailClient.csproj\r\n\r\nApparently the unit test that is supposed to check for proper behaviour in this case is marked with [Trait(\"Category\", \"mono-osx-failing\")] attribute.\r\n\r\n_We hit this problem while trying to workaround a different Mono bug. The default resource generation code messes up embedded 8-bit PNGs with alpha channel, possibly due to issue in the  System.Drawing or System.Windows.Forms implementation that is outside the scope of this project. We have our own reimplementation of these two libraries on top of native OS X API so naturally our first idea was to build our own ResGen that references them and simply update the build process to point to it using the ResGenToolPath and ResGenExecuteAsTool properties. However this is not possible due to the broken command line splitting. Reimplementing the whole GenerateResource task seems to be too cumbersome for our purposes._",
  "state": "CLOSED",
  "createdAt": "2017-03-01T20:41:33Z",
  "updatedAt": "2024-02-21T17:21:19Z",
  "closedAt": "2022-01-20T17:55:04Z",
  "author": {
    "login": "filipnavara"
  },
  "labels": [
    "bug",
    "help wanted",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Actually on second thought the problem is slightly different than I thought. ResGen 4.0 and newer supports response files. However the invocation code for that is wrapped with NativeSharedMethods.IsWindows conditions, which is also why the unit tests fail on OS X platforms.\r\n\r\nSimilarly the code for splitting the command line is wrapped with a condition:\r\n\r\n> if (!_resgenPath.Equals(Path.GetDirectoryName(NativeMethodsShared.GetLongFilePath(ToolLocationHelper.GetPathToDotNetFrameworkSdkFile(\"resgen.exe\", TargetDotNetFrameworkVersion.Version35))), StringComparison.OrdinalIgnoreCase))\r\n\r\nUnfortunately this condition doesn't check for NativeSharedMethods.IsWindows, so on OS X the paths are not properly split (except for an exact path match for old tools) and the response files are not used either. The condition should be either modified to check for  NativeSharedMethods.IsWindows or alternatively the NativeSharedMethods.IsWindows condition should be removed completely.",
        "createdAt": "2017-03-02T15:30:25Z",
        "updatedAt": "2017-03-02T15:30:56Z",
        "author": {
          "login": "filipnavara"
        }
      },
      {
        "body": "Marking this up-for-grabs. Thanks for looking into the problem. If you'd like to submit a patch for this we would be happy to accept.",
        "createdAt": "2017-03-02T23:48:12Z",
        "updatedAt": "2017-03-02T23:48:12Z",
        "author": {
          "login": "AndyGerlicher"
        }
      }
    ]
  }
}