{
  "number": 703,
  "title": "FileState/Copy task support for symlinks",
  "body": "The Copy task currently uses a `FileState` which is a wrapper around a `WIN32_FILE_ATTRIBUTE_DATA`. That allows it to populate timestamps + file size with a single syscall, but if the input is a symlink, the data will be for the symlink, not its target. That means that additional work may be done in a `<Copy SkipUnchangedFiles=\"true\" />` invocation, because the timestamp of the copy destination from last time will match the symlink target, not the symlink itself.\n\nThis is not a terrible problem, because Copy doesn't behave incrementally based on timestamps (like target execution). It uses timestamp + file size as a proxy for identicality. If it looks at a symlink, the timestamp and file size will differ, so the copy will happen. Since the copy destination's timestamp will match the source file's after the copy, this won't cause a rebuild cascade, because anything downstream that consumes the copied file will see the correct timestamp.\n\nIt's tempting to say that we could just call [`GetFileInformationByHandle`](https://msdn.microsoft.com/en-us/library/windows/desktop/aa364952%28v=vs.85%29.aspx) instead of [`GetFileAttributesEx`](https://msdn.microsoft.com/en-us/library/windows/desktop/aa364946%28v=vs.85%29.aspx), but `BY_HANDLE_FILE_INFORMATION` doesn't have a size field, so that doesn't get us the full set of data we'd want.\n",
  "state": "OPEN",
  "createdAt": "2016-06-16T14:52:05Z",
  "updatedAt": "2024-02-26T13:14:21Z",
  "closedAt": null,
  "author": {
    "login": "rainersigwald"
  },
  "labels": [
    "Area: Tasks",
    "triaged",
    "symlink"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "More details in https://github.com/Microsoft/msbuild/issues/322#issuecomment-225929715\n",
        "createdAt": "2016-06-16T14:52:38Z",
        "updatedAt": "2016-06-16T14:52:38Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I've worked around this by shelling out to `cp -r` on macOS.",
        "createdAt": "2018-11-26T21:12:11Z",
        "updatedAt": "2018-11-26T21:12:11Z",
        "author": {
          "login": "chamons"
        }
      },
      {
        "body": "If you use a glob with ** somewhere that references a symlink, we follow that symlink. If that symlink points to a directory above itself, we check all the directories under that, including the same symlink and follow it again and again. I put a fix into FileMatcher.GetFilesRecursive in #7685 that uses an API only introduced in NET6.0, so it's imperfect. It also needs to avoid impairing performance, as that's a very common code path. As a compromise, I didn't address a few cases, as noted in the comments.",
        "createdAt": "2022-06-08T16:52:02Z",
        "updatedAt": "2022-06-08T16:52:02Z",
        "author": {
          "login": "Forgind"
        }
      }
    ]
  }
}