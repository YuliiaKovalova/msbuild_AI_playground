{
  "number": 6976,
  "title": "Custom apps cannot evaluate projects with MSBuild 17.0 in some cases",
  "body": "### Issue Description\r\nClass libraries and console applications can use the MSBuild APIs to evaluate and build projects.  However, the guidance is to _never_ redistribute the MSBuild assemblies since they have built-in logic to find the common SDK imports next to itself.  Instead you should use something like MSBuildLocator to load the MSBuild assemblies on-the-fly to ensure everything works as expected.\r\n\r\nThis means that _every_ dependency of MSBuild needs to be next to MSBuild so that they can be loaded.  However, [this change](https://github.com/dotnet/msbuild/pull/6784/files#diff-af84f50fd5aa2e8bfc3479cb6ddf7882bc084ce1af01de6dd49ff93aa2d1718cR111) breaks this paradigm:\r\n\r\n```xml\r\n<dependentAssembly>\r\n    <assemblyIdentity name=\"System.ValueTuple\" publicKeyToken=\"cc7b13ffcd2ddd51\" culture=\"neutral\" />\r\n    <!-- It is unusual to redirect down, but in this case it's ok: 4.0.3.0 forwards\r\n            to 4.0.0.0 in the GAC, so this just removes the need to redistribute a file\r\n            and makes that resolution faster. -->\r\n    <bindingRedirect oldVersion=\"0.0.0.0-4.0.3.0\" newVersion=\"4.0.0.0\" />\r\n</dependentAssembly>\r\n```\r\n\r\nThis binding redirect logic tells the CLR to use a version of the assembly that is in the GAC and so `System.ValueTuple` is not placed next to `MSBuild.exe`.  Unfortunately, custom applications that use the MSBuild APIs won't know about this redirect and will just look for `System.ValueTuple.dll` next to `MSBuild.exe` but since it is not there you get an exception:\r\n```\r\nSystem.IO.FileNotFoundException : Could not load file or assembly 'System.ValueTuple, Version=4.0.3.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51' or one of its dependencies. The system cannot find the file specified.\r\n```\r\n\r\n### Steps to Reproduce\r\n1. Create a custom application to evaluate MSBuild projects that uses MSBuildLocator to \"locate\" MSBuild for .NET Framework with Visual Studio 2022\r\n2. Evaluate a project or execute a build that needs `System.Text.Json`\r\n\r\n\r\n### Expected Behavior\r\nMSBuildLocator or any other system that loads assemblies on the fly is able to find the transitive closure of dependencies next to MSBuild.exe\r\n\r\n### Actual Behavior\r\n`System.ValueTuple.dll` is not next to `MSBuild.exe` so you get an exception.\r\n\r\n### Analysis\r\nIts looking more and more like custom apps need to parse the MSBuild.exe.config to replicate all of the binding redirects and locations.  For example:\r\n```xml\r\n<!-- Workaround for crash in C++ CodeAnalysis scenarios due to https://github.com/Microsoft/msbuild/issues/1675 -->\r\n<dependentAssembly>\r\n  <assemblyIdentity name=\"FxCopTask\" culture=\"neutral\" publicKeyToken=\"b03f5f7f11d50a3a\" />\r\n  <codeBase version=\"17.0.0.0\" href=\"..\\..\\..\\Microsoft\\VisualStudio\\v17.0\\CodeAnalysis\\FxCopTask.dll\" />\r\n</dependentAssembly>\r\n```\r\n\r\nThe assembly will be found when running as `MSBuild.exe` but a custom app wouldn't be able to find that assembly.  So I'm going to try that out as a workaround.\r\n\r\nAnother workaround is to add an explicit PackageReference to System.Text.Json if you're shipping a console application so that the dependencies are next to your app.  This won't work for class library authors.\r\n\r\n### Versions & Configurations\r\n```\r\n> msbuild /version\r\nMicrosoft (R) Build Engine version 17.0.0-preview-21514-08+b26f1a2df for .NET Framework\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n17.0.0.51408\r\n```\r\n\r\nThis does not apply to .NET Core since `System.Text.Json` ships with the shared runtime and it does not depend on `System.ValueTuple`.\r\n\r\n### Attach a binlog\r\n<!--\r\n* If providing us a project that reproduces the issue proves difficult, consider including a binlog.\r\n* Click [here](https://aka.ms/msbuild/binlog) for details on sharing binary logs.\r\n* Click [here](https://github.com/microsoft/msbuild/blob/master/documentation/wiki/Binary-Log.md) for more information on binary logs.\r\n    NOTE: Binlogs can contain sensitive information. Don't attach anything you don't want to be public.\r\n\r\n*   To view the contents of the binlogs yourself, you may wish to use a tool like https://msbuildlog.com/.\r\n-->",
  "state": "CLOSED",
  "createdAt": "2021-10-20T19:49:42Z",
  "updatedAt": "2024-02-21T14:11:19Z",
  "closedAt": "2021-11-22T17:09:42Z",
  "author": {
    "login": "jeffkl"
  },
  "labels": [
    "bug",
    "Partner request",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "rainersigwald"
      }
    ]
  },
  "milestone": {
    "title": "VS 17.1"
  },
  "comments": {
    "nodes": [
      {
        "body": "It looks like for 17.1 we should redistribute `System.ValueTuple` even if we don't wind up using it.",
        "createdAt": "2021-10-22T19:22:37Z",
        "updatedAt": "2021-10-22T19:22:37Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Thanks for fixing this!",
        "createdAt": "2021-11-22T17:16:54Z",
        "updatedAt": "2021-11-22T17:16:54Z",
        "author": {
          "login": "jeffkl"
        }
      }
    ]
  }
}