{
  "number": 6401,
  "title": "The Hash task used by _GenerateCompileDependencyCache target must sort the items given to it before computing the hash",
  "body": "### Issue Description\r\nWhen generating source files in BeforeBuild phase extra care must be exercised to avoid redundant compilations. This extra effort (and awareness in the first place) could be spared if the Hash task was sorting the given list of items before computing the hash.\r\n\r\n### Steps to Reproduce\r\n3 files are needed:\r\n\r\n**Program.cs**\r\n```\r\nnamespace Main\r\n{\r\n    public static class Program\r\n    {\r\n        static void Main()\r\n        {\r\n            Generated.Hello();\r\n        }\r\n    }\r\n}\r\n```\r\n**Generated.g.cs.tmpl**\r\n```\r\nusing System;\r\n\r\nnamespace Main\r\n{\r\n    public static class Generated\r\n    {\r\n        public static void Hello()\r\n        {\r\n            Console.WriteLine(\"Hello World!\");\r\n        }\r\n    }\r\n}\r\n```\r\n**HelloWorld.csproj**\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net472</TargetFramework>\r\n    <OutputType>Exe</OutputType>\r\n  </PropertyGroup>\r\n  <Target Name=\"Generate\" BeforeTargets=\"BeforeBuild\">\r\n    <ItemGroup>\r\n        <Compile Include=\"Generated.g.cs\" Condition=\"!Exists('Generated.g.cs')\" />\r\n    </ItemGroup>\r\n    <Copy SourceFiles=\"Generated.g.cs.tmpl\" DestinationFiles=\"Generated.g.cs\" SkipUnchangedFiles=\"True\"/>\r\n  </Target>\r\n  <Target Name=\"PrintTimestamp\" AfterTargets=\"AfterBuild\">\r\n    <ItemGroup>\r\n        <ExeFile Include=\"$(TargetPath)\" />\r\n    </ItemGroup>\r\n    <Message Text=\" --> %(ExeFile.ModifiedTime)\" Importance=\"High\" />\r\n  </Target>\r\n</Project>\r\n```\r\nNow let us delete the generated file and build twice:\r\n```\r\nC:\\temp\\bug> del .\\Generated.g.cs\r\nC:\\temp\\bug> dotnet build\r\nMicrosoft (R) Build Engine version 16.9.0+57a23d249 for .NET\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Determining projects to restore...\r\n  All projects are up-to-date for restore.\r\n  HelloWorld -> C:\\temp\\bug\\bin\\Debug\\net472\\HelloWorld.exe\r\n   --> 2021-05-01 16:16:36.6881489\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:00:00.71\r\nC:\\temp\\bug> dotnet build\r\nMicrosoft (R) Build Engine version 16.9.0+57a23d249 for .NET\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Determining projects to restore...\r\n  All projects are up-to-date for restore.\r\n  HelloWorld -> C:\\temp\\bug\\bin\\Debug\\net472\\HelloWorld.exe\r\n   --> 2021-05-01 16:16:39.2848815\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:00:00.70\r\nC:\\temp\\bug>\r\n```\r\nNote the last modified timestamps of the binary:\r\n```\r\n   --> 2021-05-01 16:16:36.6881489\r\n   --> 2021-05-01 16:16:39.2848815\r\n```\r\n\r\n### Analysis\r\nThe root cause - the generated file is found inside the Compile item group at different locations after each build. Subsequent builds are good.\r\n\r\nTo workaround this issue we need to make sure the generated file is inserted at the same position in the list. Possible workaround:\r\n\r\n**Workaround**\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net472</TargetFramework>\r\n    <OutputType>Exe</OutputType>\r\n  </PropertyGroup>\r\n  <Target Name=\"Generate\" BeforeTargets=\"BeforeBuild\">\r\n    <ItemGroup>\r\n      <Compile Remove=\"Generated.g.cs\" />\r\n      <Compile Include=\"Generated.g.cs\" />\r\n    </ItemGroup>\r\n    <Copy SourceFiles=\"Generated.g.cs.tmpl\" DestinationFiles=\"Generated.g.cs\" SkipUnchangedFiles=\"True\"/>\r\n  </Target>\r\n  <Target Name=\"PrintTimestamp\" AfterTargets=\"AfterBuild\">\r\n    <ItemGroup>\r\n        <ExeFile Include=\"$(TargetPath)\" />\r\n    </ItemGroup>\r\n    <Message Text=\" --> %(ExeFile.ModifiedTime)\" Importance=\"High\" />\r\n  </Target>\r\n</Project>\r\n```\r\n\r\nThe code looks weird and may be easily \"fixed\" by somebody who does not understand the rationale behind it.\r\n\r\nBy modifying the Hash task this nuisance will be eliminated.",
  "state": "CLOSED",
  "createdAt": "2021-05-01T21:06:51Z",
  "updatedAt": "2024-02-21T14:13:40Z",
  "closedAt": "2021-07-08T15:22:21Z",
  "author": {
    "login": "MarkKharitonov"
  },
  "labels": [
    "help wanted",
    "backlog",
    "Area: Performance",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "MSBuild 16.11"
  },
  "comments": {
    "nodes": [
      {
        "body": "@MarkKharitonov does the issue reproduce with a standard and unmodified project or did you start hitting it after manually tweaking the .csproj?",
        "createdAt": "2021-05-06T11:52:29Z",
        "updatedAt": "2021-05-06T11:52:29Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "The csproj is standard SDK style project, but it references a NuGet package that generates a source file. I have reduced it to a bare minimum reproduction for your convenience.\r\nDoes it answer your question?",
        "createdAt": "2021-05-06T19:50:51Z",
        "updatedAt": "2021-05-06T19:50:51Z",
        "author": {
          "login": "MarkKharitonov"
        }
      },
      {
        "body": "Thank you, yes, I understand that what you posted is a minimum repro. Still wondering how common this is, i.e. is it happening with all/most projects that generate source files (designers?) or is the NuGet package you mentioned more of a corner case.",
        "createdAt": "2021-05-07T13:22:09Z",
        "updatedAt": "2021-05-07T13:22:09Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "I do not know anything about how designers work with the SDK style projects.\r\nThe case is pretty clear - the Hash function is sensitive to the order of items in the Compile collection, which is a problem when items are generated. When a file is generated for the very first time its order will be determined by the moment in time when the generator runs. But after the file has already been generated, its order is determined by the moment when the Compile items are evaluated.\r\nThe two points in time are different and produce different ordering thus producing different Hash values.\r\nOr am I missing anything?",
        "createdAt": "2021-05-07T23:00:36Z",
        "updatedAt": "2021-05-07T23:00:36Z",
        "author": {
          "login": "MarkKharitonov"
        }
      },
      {
        "body": "[Perf. Triage]\r\nThank you for reporting this issue. We wonder how severe it actually is. \r\nCould you please describe how painful is the problem for you? How often do you hit this scenario? \r\nWould adding the generated files under the source control help?  ",
        "createdAt": "2021-05-13T11:19:08Z",
        "updatedAt": "2021-05-13T11:19:08Z",
        "author": {
          "login": "AR-May"
        }
      },
      {
        "body": "Guys, putting generated files in the source control is not a mainstream tactic. Some do it, some do not.\r\nIt is not painful for me, because I understand the root cause and know how to workaround it.\r\nBut agree with me, that the workaround is not clear at all to those who do not know how msbuild works here.\r\n\r\nAll I suggest is - eliminate this nuisance. This change has low regression risk, so what is the problem? We spend more time talking about it than it would take to fix it.",
        "createdAt": "2021-05-13T13:47:04Z",
        "updatedAt": "2021-05-13T13:47:04Z",
        "author": {
          "login": "MarkKharitonov"
        }
      },
      {
        "body": "[Perf Triage] This seems to be a good suggestion. However, we need to fix this in _GenerateCompileDependencyCache, not in the Hash task. Otherwise it would be a breaking change.",
        "createdAt": "2021-05-20T11:14:29Z",
        "updatedAt": "2021-05-20T11:14:29Z",
        "author": {
          "login": "AR-May"
        }
      },
      {
        "body": "Why would this be a breaking change? Is the Hash task used for anything else? Just curious.",
        "createdAt": "2021-05-20T15:23:00Z",
        "updatedAt": "2021-05-20T15:23:14Z",
        "author": {
          "login": "MarkKharitonov"
        }
      },
      {
        "body": "Any user of MSBuild might use the Hash task for their targets. Even if it is not specified that the order of entries matters in the task description, they might still rely on the current implementation, which is order-sensetive. ",
        "createdAt": "2021-05-20T17:23:20Z",
        "updatedAt": "2021-05-20T17:23:20Z",
        "author": {
          "login": "AR-May"
        }
      },
      {
        "body": "OK, in this case I would have added a flag to the task. This way you also improve the service to those other users of the Hash task, because now they have a choice they did not have in the past.\r\n\r\nNote that you have already been there with the case sensitivity. At first this hash was case sensitive and OMG - it wrecked havoc on our builds just because somebody made a mistake in the case (easy to do on Windows). You fixed it in exactly the same way as I am proposing - added a flag.\r\n\r\nSo why chose a different path now? Just add **IgnoreOrder** flag. Consistent and easy.",
        "createdAt": "2021-05-20T17:33:38Z",
        "updatedAt": "2021-05-20T17:33:38Z",
        "author": {
          "login": "MarkKharitonov"
        }
      },
      {
        "body": "If there are no objections I have just sent a PR to fix this. Hope it is OK.",
        "createdAt": "2021-06-04T19:13:22Z",
        "updatedAt": "2021-06-04T19:13:22Z",
        "author": {
          "login": "MarkKharitonov"
        }
      },
      {
        "body": "I would like to revive this thread. What we have today:\r\n\r\n1. Order of the compilation items matters in general. Sometimes producing significantly different results (I trust you here).\r\n2. There is a vast amount of workflows where developers do not care about the order. E.g. developing C# applications in companies with +2 developers using Visual Studio and non SDK style projects. Git merges are going to reshuffle files in the csproj and no one would care.\r\n3. When using build time NuGet packages that generate C# files in SDK style projects, the auto generated files are inserted into the Compile item group at different positions when comparing the very first build (actually generating these files) and subsequent builds (when the files already exist)\r\n4. Because the order of the items in the Compile group changes between the very first build and the second build we end up with redundant compilation of these projects which may have the ripple effect throughout the entire application build - potentially causing the rebuild of the entire code base. Truth to be told, only the second build suffers from this. The third build would be fast, because no order changes between the second and the third builds.\r\n\r\nThe compiler folks give priority to the mathematical correction of the compiler and this is totally understandable. What I do not understand is why we cannot provide a way to teams to ignore the order should they purposefully desire to?\r\n\r\nThe second build recompilation may seem insignificant, but it is when you consider developers working in Visual Studio and sometimes noticing full rebuild without a reason. Not all of them would figure out that it only happens if the previous build was from scratch. The prevailing sentiment would be - our build environment is unreliable and causes devs to waste time building. I want to address it at least in our organization. Give me a way to request to ignore the order of the items in the Hash task. So just passing a flag is not enough. Let us have two flags. No way someone sets it accidentally. Let us give them ugly names.  We could modify the binary logger to add a special line emphasizing the order was turned off.\r\n\r\nAfter all, we do not turn off the order of the item processing by the compiler here. We just make the compilation NOT start if the order in the collection changes. For SDK style projects it only happens with auto generated files, because other than that the order is determined by the file system helper msbuild uses, which is unaffected. For non SDK style projects, the order is already in flux for non trivial projects where git merges affect it. And, of course, it would be changed once more the moment the project is migrated to SDK style. You do not suggest to keep the order of the Compile items when migrating to SDK, do you? So the real life effect of allowing us to ignore the order of items when hashing is what?\r\n\r\nWe could make it conditional on C# projects only.\r\n\r\nAnyway, please reconsider.",
        "createdAt": "2021-07-05T19:36:29Z",
        "updatedAt": "2021-07-05T19:36:29Z",
        "author": {
          "login": "MarkKharitonov"
        }
      },
      {
        "body": "> What I do not understand is why we cannot provide a way to teams to ignore the order should they purposefully desire to?\r\n\r\nWe don't want to make it easy to make your build flaky. You can do this today by extending your build to sort items if you really want to.\r\n\r\n> When using build time NuGet packages that generate C# files in SDK style projects, the auto generated files are inserted into the Compile item group at different positions when comparing the very first build (actually generating these files) and subsequent builds (when the files already exist)\r\n\r\nThis should not be the case. Can you give an example where this happens? It sounds like a bug in the generation package.\r\n\r\nI'm going to close this issue based on the discussion in the PR, but hopefully we can still help with the specific spurious-rebuild case you're seeing.",
        "createdAt": "2021-07-08T15:22:19Z",
        "updatedAt": "2021-07-08T15:22:19Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> This should not be the case. Can you give an example where this happens? It sounds like a bug in the generation package.\r\n\r\nHow is this not the case? Think about it. SDK style takes all the files using glob **/*.cs. If the generated files already on the disk, they will be taken by the glob and will be surrounded by other files, already existing on the disk. E.g.:\r\n\r\n1. 1.cs\r\n2. 2.cs\r\n3. 3.g.cs\r\n4. 4.cs\r\n\r\nSuppose you have a generation target that runs later, but before CoreCompile. It may add 3.g.cs to the `<Compile>` group, but because group cannot have duplicate items, this addition does not contribute anything. The group remains as described above.\r\n\r\nNow imagine running the build for the very first time. The glob **/*.cs produces the following list:\r\n\r\n1. 1.cs\r\n2. 2.cs\r\n3. 4.cs\r\n\r\nAnd now runs the generation target which adds 3.g.cs. The final result:\r\n\r\n1. 1.cs\r\n2. 2.cs\r\n3. 4.cs\r\n4. 3.g.cs\r\n\r\nAs you can see the order is different.\r\n\r\nIf you need real examples, take https://specflow.org/. Our Test Engineers use it extensively. It generates *.feature.cs files from *.feature files. I am sure there are gazillion other tools that generate CS code on the fly.\r\n\r\nNow someone (but not you, because you know the answer) may ask - how come this does not happen with the files msbuild targets generate for us? Like AssemblyInfo.cs or framework moniker files? The answer is - they are generated inside the obj folder which is not covered by the glob (it is by my example, but the real code exclude obj). So the code generated by msbuild itself does not suffer from this issue. \r\n\r\nBut out there it is different - tools generate code into the source directory all the time.\r\n\r\nAnd why ignore my second point? The non SDK style projects. We have some with hundreds of files. Developers touch this project files concurrently and sometimes when merging file order is changed. No one cares. It is impossible to care when the project has hundreds of files and as many developers. What developers do care is redundant compilations that happen every time they clean. First build is long - as expected. But then the second one may be long too and devs just do not understand why. Well, this is one reason why.",
        "createdAt": "2021-07-08T20:18:10Z",
        "updatedAt": "2021-07-08T20:18:24Z",
        "author": {
          "login": "MarkKharitonov"
        }
      },
      {
        "body": "> Now someone (but not you, because you know the answer) may ask - how come this does not happen with the files msbuild targets generate for us? Like AssemblyInfo.cs or framework moniker files? The answer is - they are generated inside the obj folder which is not covered by the glob (it is by my example, but the real code exclude obj). So the code generated by msbuild itself does not suffer from this issue.\r\n> \r\n> But out there it is different - tools generate code into the source directory all the time.\r\n\r\nThis is a bug in the generator. Because of the behavior you're describing, it is wrong to generate files into the source directory, or at minimum they should be removed before they're added post-generation to avoid the reordering problem.",
        "createdAt": "2021-07-08T21:07:48Z",
        "updatedAt": "2021-07-08T21:07:48Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> This is a bug in the generator. Because of the behavior you're describing, it is wrong to generate files into the source directory, or at minimum they should be removed before they're added post-generation to avoid the reordering problem.\r\n\r\nIs it documented anywhere? The [SpecFlowTest ](https://specflow.org/) guys do not create the source files in obj. The generator we use surely does not too, because the source code it generates is something developers want to debug. It is weird to surface a C# source file from the obj directory.\r\n\r\nAnd you have not addressed my claim about large the non SDK style projects in large organization. Is it really the expectation that developers maintain stable order of the files listed there? In a big R&D organization? Not on this Earth.",
        "createdAt": "2021-07-09T12:43:04Z",
        "updatedAt": "2021-07-09T12:43:04Z",
        "author": {
          "login": "MarkKharitonov"
        }
      }
    ]
  }
}