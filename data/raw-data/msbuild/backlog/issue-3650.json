{
  "number": 3650,
  "title": "MSB3246 should say *which* file",
  "body": "https://github.com/Microsoft/msbuild/blob/a8fba1ebd7b10ea68fcbdb8144a31496f8c37ce7/src/Tasks/Resources/Strings.resx#L1423-L1424\r\n\r\nlogged from\r\n\r\nhttps://github.com/Microsoft/msbuild/blob/a8fba1ebd7b10ea68fcbdb8144a31496f8c37ce7/src/Tasks/AssemblyDependency/ResolveAssemblyReference.cs#L1523-L1528\r\n\r\nDoesn't name a file, so you have to dig through more information to do anything about it.\r\n\r\nLooks like everything in that block should list the reference in its error.",
  "state": "OPEN",
  "createdAt": "2018-08-24T19:22:50Z",
  "updatedAt": "2024-02-21T16:33:14Z",
  "closedAt": null,
  "author": {
    "login": "rainersigwald"
  },
  "labels": [
    "Area: Debuggability",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Talked with @shanselman who saw this on a machine where he'd also found several zero-byte files, which led to a nice repro:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>netstandard2.0</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <Reference Include=\"deliberately.zero.bytes.dll\" />\r\n  </ItemGroup>\r\n\r\n  <Target Name=\"WriteZeroByteFile\" BeforeTargets=\"ResolveAssemblyReferences\">\r\n    <Touch Files=\"deliberately.zero.bytes.dll\" AlwaysCreate=\"true\" />\r\n  </Target>\r\n\r\n</Project>\r\n```\r\n\r\nWhich leads to\r\n\r\n```sh-session\r\n$ dotnet build /flp:v=diag\r\nMicrosoft (R) Build Engine version 15.8.166+gd4e8d81a88 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 57.05 ms for S:\\work\\zero-byte-ref\\zero-byte-ref.csproj.\r\nC:\\Program Files\\dotnet\\sdk\\2.1.400\\Microsoft.Common.CurrentVersion.targets(2110,5): warning MSB3246: Resolved file has a bad image, no metadata, or is otherwise inaccessible. Image is too small. [S:\\work\\zero-byte-ref\\zero-byte-ref.csproj]\r\n  zero-byte-ref -> S:\\work\\zero-byte-ref\\bin\\Debug\\netstandard2.0\\zero-byte-ref.dll\r\n\r\nBuild succeeded.\r\n\r\nC:\\Program Files\\dotnet\\sdk\\2.1.400\\Microsoft.Common.CurrentVersion.targets(2110,5): warning MSB3246: Resolved file has a bad image, no metadata, or is otherwise inaccessible. Image is too small. [S:\\work\\zero-byte-ref\\zero-byte-ref.csproj]\r\n    1 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:00:02.44\r\n```\r\n\r\nAnd in the diag log\r\n\r\n```\r\n...\r\n                     Primary reference \"deliberately.zero.bytes.dll\". (TaskId:41)\r\n13:43:49.856   1:7>C:\\Program Files\\dotnet\\sdk\\2.1.400\\Microsoft.Common.CurrentVersion.targets(2110,5): warning MSB3246: Resolved file has a bad image, no metadata, or is otherwise inaccessible. Image is too small. [S:\\work\\zero-byte-ref\\zero-byte-ref.csproj]\r\n                         Resolved file path is \"S:\\work\\zero-byte-ref\\deliberately.zero.bytes.dll\". (TaskId:41)\r\n                         Reference found at search path location \"{RawFileName}\". (TaskId:41)\r\n                             For SearchPath \"{CandidateAssemblyFiles}\". (TaskId:41)\r\n                             Considered \"deliberately.zero.bytes.dll\",\r\n                     \t\t\tbut its name \"deliberately.zero.bytes\"\r\n                     \t\t\tdidn't match the expected name \"deliberately.zero.bytes.dll\". (TaskId:41)\r\n...\r\n```\r\n\r\nSo there's enough information to debug _if_ you happened to up your logging level.",
        "createdAt": "2018-08-31T21:24:37Z",
        "updatedAt": "2018-08-31T21:24:37Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "fyi / other context - since @shanselman also found my SO answer while researching this live on youtube (https://stackoverflow.com/questions/48122173/warning-when-using-nuget-package-that-contains-native-dll)\r\nThis also happens when native DLLs are shipped in NuGet packages since AFAIK Core MSBuild uses different APIs (?) to inspect DLLs and thus complains on native DLLs that are placed inside NuGet lib/ folders instead of runtimes/ folders.\r\nNuGet packages did this before netstandard/netcoreapp to ship native DLLs (e.g. sql drivers, things like zeromq libs etc.). When NuGet introduced the asset target fallback to net* assemblies, this started happening a lot more.\r\nWould be good to know which package is responsible from the error message.",
        "createdAt": "2018-09-02T00:52:07Z",
        "updatedAt": "2018-09-02T00:52:32Z",
        "author": {
          "login": "dasMulli"
        }
      }
    ]
  }
}