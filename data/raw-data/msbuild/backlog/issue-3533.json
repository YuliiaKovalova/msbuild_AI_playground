{
  "number": 3533,
  "title": "Allow UsingTask to reference a *.csproj containing a Task",
  "body": "If I use UsingTask to reference a task that is locate in the same solution, I must make sure that the task project is compile before and reference the assembly.\r\n\r\nIt is cumbersome to handle a task project in the same solution. The task project is not a part of the product I develop, and should not be build in the same build chain. I suggest to allow UsingTask to reference the csproj file directly, and let msbuild build it when needed. ",
  "state": "CLOSED",
  "createdAt": "2018-07-22T11:36:21Z",
  "updatedAt": "2024-02-21T17:12:17Z",
  "closedAt": "2018-10-02T14:49:07Z",
  "author": {
    "login": "magol"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Thanks for the suggestion. I don't think this is worth the additional complexity. There are a couple of options that can help:\r\n\r\nThe most direct is a `ProjectReference` with `ReferenceOutputAssembly=\"false\"`. That ensures that the task-producing project is done building before the task is used (as long as the target containing the task `DependsOnTargets=\"ResolveProjectReferences\"`).\r\n\r\nIf the task is needed only inside your repo (and you don't need to ship the task DLL), you could also use an inline task via [`RoslynCodeTaskFactory`](https://docs.microsoft.com/en-us/visualstudio/msbuild/msbuild-roslyncodetaskfactory?view=vs-2017) -- that allows the engine to handle compiling the task just in time for its use. This is a great option for small tasks, but if the task grows too complex, it's better to use a full project + assembly to get the better VS tooling.",
        "createdAt": "2018-10-02T14:49:07Z",
        "updatedAt": "2018-10-02T14:49:07Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}