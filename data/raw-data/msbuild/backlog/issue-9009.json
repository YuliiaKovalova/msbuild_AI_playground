{
  "number": 9009,
  "title": "[Broken Build]: Manually copied DLL to output directory not copied to depdendent project",
  "body": "### Issue Description\n\nI manually copy a DLL from a NuGet package to the output directory in project A:\r\n\r\n```\r\n<Target Name=\"CopyNewestDllsToOutput\" BeforeTargets=\"Build\">\r\n  <Copy SourceFiles=\"$(PkgMyPackage)\\x64\\My.dll\" DestinationFolder=\"$(OutputPath)\\Implementation\" />\r\n</Target>\r\n```\r\n\r\nProject B depends on project A, however, it does not receive this DLL as part of the output. How to fix  this?\r\n\r\nBest regards,\r\nD.R.\n\n### Steps to Reproduce\n\n-\n\n### Expected Behavior\n\n-\n\n### Actual Behavior\n\n-\n\n### Ask us questions\n\n-",
  "state": "CLOSED",
  "createdAt": "2023-07-11T13:53:29Z",
  "updatedAt": "2023-07-18T14:21:37Z",
  "closedAt": "2023-07-18T14:21:37Z",
  "author": {
    "login": "drauch"
  },
  "labels": [
    "needs-triage"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "@drauch Can you describe why expressing the dependency of A on the package via [`PackageReference`](https://learn.microsoft.com/en-us/nuget/consume-packages/package-references-in-project-files) isn't viable in your scenario?",
        "createdAt": "2023-07-13T06:02:13Z",
        "updatedAt": "2023-07-13T06:02:13Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "Actually we _do_ reference it via PackageReference (which is why we have the PkgMyPackage variable available). It is, however, not a \"real\" NuGet package and we need some native DLL inside this \"arbitrary Zip-Package in NuGet package disguise\".",
        "createdAt": "2023-07-13T06:57:46Z",
        "updatedAt": "2023-07-13T06:57:46Z",
        "author": {
          "login": "drauch"
        }
      },
      {
        "body": "Do you own or have any power ower the build of the package? Ideally it'd add the native binary as a runtime specific asset: https://learn.microsoft.com/en-us/nuget/create-packages/supporting-multiple-target-frameworks#architecture-specific-folders\r\n\r\nAlternatively add it as [`NativeReference`](https://learn.microsoft.com/en-us/visualstudio/msbuild/common-msbuild-project-items#nativereference) item or [`None`](https://learn.microsoft.com/en-us/visualstudio/msbuild/common-msbuild-project-items#none). e.g.: `<None Include=\"$(PkgMyPackage)\\x64\\My.dll\" CopyToOutputDirectory=\"PreserveNewest\">`",
        "createdAt": "2023-07-13T12:13:52Z",
        "updatedAt": "2023-07-13T12:13:52Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "Thank you for your time.\r\n\r\nIf I add:\r\n```\r\n<ItemGroup>\r\n    <None Include=\"$(PkgMyPackage)\\x64\\My.dll\" CopyToOutputDirectory=\"PreserveNewest\" />\r\n</ItemGroup>\r\n```\r\nto project A it works in project A, however, when building project B it complains that:\r\n\r\n> MSB3030\tCould not copy the file \"C:\\x64\\My.dll\" because it was not found.\r\n\r\nIt looks like the None-element is somehow re-evaluated in the context of project B where the `PkgMyPackage` variable doesn't exist. Any ideas on this?\r\n\r\nBest regards,\r\nD.R.",
        "createdAt": "2023-07-13T14:53:02Z",
        "updatedAt": "2023-07-13T14:53:02Z",
        "author": {
          "login": "drauch"
        }
      },
      {
        "body": "Is the package in question public? If so - which one is it?\r\nIf not - are you/your company producing it? Then I'd first suggest making sure that it's build/packed properly - so that ordinary PackageReference can be used.",
        "createdAt": "2023-07-13T16:48:47Z",
        "updatedAt": "2023-07-13T16:48:47Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "> Then I'd first suggest making sure that it's build/packed properly - so that ordinary PackageReference can be used.\r\n\r\nUnfortunately, this is not going to happen :-/ I've worked around it by referencing the NuGet package in project A and project B (even though it should not be necessary in project B). Then the None-ItemGroup from above works as the `$(PkgMyPackage)` variable exists in both projects.\r\n\r\nIf anybody has a better solution I'll gladly accept it :-) For now: thanks @JanKrivanek for helping me out!\r\n\r\nBest regards,\r\nD.R.",
        "createdAt": "2023-07-17T06:54:47Z",
        "updatedAt": "2023-07-17T06:54:47Z",
        "author": {
          "login": "drauch"
        }
      },
      {
        "body": "I've found a better solution thanks to a colleague of mine:\r\n\r\n```\r\n  <Content Include=\"$(PkgMyPackage)\\x64\\My.dll\" CopyToOutputDirectory=\"PreserveNewest\" />\r\n```\r\n\r\nThis makes it work in all dependent projects as well and does not require me to reference the NuGet package in all projects again.\r\n\r\nBest regards,\r\nD.R.",
        "createdAt": "2023-07-18T14:21:37Z",
        "updatedAt": "2023-07-18T14:21:37Z",
        "author": {
          "login": "drauch"
        }
      }
    ]
  }
}