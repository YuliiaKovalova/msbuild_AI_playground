{
  "number": 5512,
  "title": "Possible compiler bug, I need your advice.",
  "body": "Hi,\r\n\r\nThe only way to report this issue is to upload the project, as the structure of the project, and not just the code, affects the outcome. However, I would like to show you what leads me to think it's a compiler bug before to proceed further. \r\n\r\n![image](https://user-images.githubusercontent.com/945379/87456739-45680a00-c5ff-11ea-91f4-bc318d4f40ec.png)\r\n![image](https://user-images.githubusercontent.com/945379/87456755-4ac55480-c5ff-11ea-84e7-783b471f350f.png)\r\n\r\nIf my assumptions about how the compiler works are right, this looks to me like a paradox.  QuickSaveEngine.cs cannot be compiled if LocalInputEntityStruct is not compiled first and LocalInputEntityStruct cannot be compiled if it's nullable, right? The struct itself is 100% unmanaged and doesn't have nullable fields, but since it's a complex struct, the implementation of the interface with unmanaged constraint is my way to prove it. If you agree that there is something fishy, please let me know if and how I should proceed. Note: the same code compiles if I don't use separate assemblies.\r\n\r\nOS info:\r\n\r\nWindows 10, MSBuild 2017 (c# 7.3)\r\n",
  "state": "CLOSED",
  "createdAt": "2020-07-14T17:27:21Z",
  "updatedAt": "2024-02-21T17:03:00Z",
  "closedAt": "2020-07-15T15:42:06Z",
  "author": {
    "login": "sebas77"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "This issue was moved to dotnet/roslyn#46003",
        "createdAt": "2020-07-15T15:42:05Z",
        "updatedAt": "2020-07-15T15:42:05Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}