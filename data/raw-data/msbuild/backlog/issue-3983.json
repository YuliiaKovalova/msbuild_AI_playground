{
  "number": 3983,
  "title": "Code analysis run for additional projects",
  "body": "### Steps to reproduce\r\n\r\n1. Have code analysers (e.g. FxCop) added via NuGet to one project.\r\n2. Have another project without code analysers.\r\n3. Second project has a reference to the first (as is common with test projects)\r\n4. Both projects are in the same solution.\r\n5. Build the whole solution.\r\n6. Get warnings from the second project.\r\n\r\nFor instance, download and extract the attached zip file, then run `dotnet build` in the root.\r\n\r\n[MsBuildExample.zip](https://github.com/Microsoft/msbuild/files/2646822/MsBuildExample.zip)\r\n\r\n### Expected  behavior\r\n\r\nThe code analysers should only be run for the project to which they've been added.\r\n\r\nRunning `dotnet build` in the root of the attached MCVE project should produce no FxCop warnings from the test project.\r\n\r\n### Actual behavior\r\n\r\nWarnings are generated by the code analyser for the second project.\r\n\r\nIn the attached example, we get three FxCop advisories (as build warnings) from the test project. This is  despite the test project having no references to the FxCop nuget package.\r\n\r\n### Environment data\r\n\r\n#### My PC\r\n`dotnet msbuild -version`\r\n\r\n> Microsoft (R) Build Engine version 15.7.179.6572 for .NET Core\r\n> Copyright (C) Microsoft Corporation. All rights reserved.\r\n> \r\n> 15.7.179.6572\r\n\r\nAnd I'm running the dotnet CLI on Windows 10.\r\n\r\n\r\n#### Colleagues PC\r\n`msbuild /version` \r\n\r\n> Microsoft (R) Build Engine version 15.9.20+g88f5fadfbe for .NET Framework\r\n> Copyright (C) Microsoft Corporation. All rights reserved.\r\n> \r\n> 15.9.20.62856\r\n\r\nHe's running it in Visual Studio 17 on Windows 10",
  "state": "CLOSED",
  "createdAt": "2018-12-05T02:00:37Z",
  "updatedAt": "2024-02-21T17:10:09Z",
  "closedAt": "2018-12-10T16:46:14Z",
  "author": {
    "login": "tdwright"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Discussion"
  },
  "comments": {
    "nodes": [
      {
        "body": "@tmat @jinujoseph I believe this is more about how roslyn analyzers work than msbuild proper.\r\n\r\nCould you provide some guidance here or maybe a more appropriate repo recommendation?",
        "createdAt": "2018-12-05T06:06:24Z",
        "updatedAt": "2018-12-05T06:06:24Z",
        "author": {
          "login": "livarcocc"
        }
      },
      {
        "body": "@livarcocc Apologies if this isn't quite the right place. I umm-ed and ah-ed about it. Happy to migrate it if appropriate.",
        "createdAt": "2018-12-05T06:14:56Z",
        "updatedAt": "2018-12-05T06:14:56Z",
        "author": {
          "login": "tdwright"
        }
      },
      {
        "body": "to cross-link, this is the related SO question: https://stackoverflow.com/questions/53585175/any-idea-why-msbuild-would-suddenly-start-performing-code-analysis-on-other-proj",
        "createdAt": "2018-12-05T07:24:10Z",
        "updatedAt": "2018-12-05T07:24:10Z",
        "author": {
          "login": "dasMulli"
        }
      },
      {
        "body": "@livarcocc Reckon it's worth me cross-posting to the [roslyn-analyzers repo](https://github.com/dotnet/roslyn-analyzers)?",
        "createdAt": "2018-12-10T06:11:56Z",
        "updatedAt": "2018-12-10T06:11:56Z",
        "author": {
          "login": "tdwright"
        }
      },
      {
        "body": "~I think this is a NuGet question; I'll move it there.~\r\n\r\nThe NuGet docs [indicate](https://docs.microsoft.com/en-us/nuget/consume-packages/package-references-in-project-files#controlling-dependency-assets) that packages should have `PrivateAssets=\"contentfiles;analyzers;build\"` by default, which I interpret as meaning that analyzers shouldn't flow to projects that `ProjectReference` a project that references a package with analyzers. But I see `Microsoft.CodeAnalysis.FxCopAnalyzers` and its dependencies in `Tests\\obj\\project.assets.json` in the repro project. Its presence there is why it's getting used at build time.\r\n",
        "createdAt": "2018-12-10T16:34:19Z",
        "updatedAt": "2018-12-10T16:45:59Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Duplicate of https://github.com/dotnet/sdk/issues/968",
        "createdAt": "2018-12-10T16:46:14Z",
        "updatedAt": "2018-12-10T16:46:14Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@tdwright There's a workaround that will probably work for you in https://github.com/dotnet/sdk/issues/968#issuecomment-410319090.",
        "createdAt": "2018-12-10T16:47:00Z",
        "updatedAt": "2018-12-10T16:47:00Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald Thanks! Just tried that workaround and it did the job. \ud83d\ude01 ",
        "createdAt": "2018-12-10T21:24:40Z",
        "updatedAt": "2018-12-10T21:24:40Z",
        "author": {
          "login": "tdwright"
        }
      }
    ]
  }
}