{
  "number": 4230,
  "title": "MSBuild amd64 fails when linking ucrtd.lib",
  "body": "### Steps to reproduce\r\n\r\nAttached reproduce project here: [msbuild_amd64_bug.zip](https://github.com/Microsoft/msbuild/files/2958132/msbuild_amd64_bug.zip)\r\n\r\nDirectory contents:\r\n```\r\n- CompilerIdC.vcxproj\r\n- CMakeCCompilerId.c\r\n```\r\n\r\nCommand line:\r\n```\r\n\"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Preview\\MSBuild\\Current\\Bin\\amd64\\MSBuild.exe\" CompilerIdC.vcxproj /p:Configuration=Debug /p:Platform=x64\r\n```\r\n### Expected  behavior\r\nBuild succeeds without warnings or errors.\r\n\r\n### Actual behavior\r\nBuild fails with 1 error:\r\n```\r\nLink:\r\n  C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Preview\\VC\\Tools\\MSVC\\14.20.27404\\bin\\HostX64\\x64\\link.exe /ERRORREPORT:QUEUE /OUT:\".\\CompilerIdC.exe\" /INCREMENTAL:NO /NO\r\n  LOGO kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib /MANIFEST /MANIFESTUAC:\"leve\r\n  l='asInvoker' uiAccess='false'\" /manifest:embed /PDB:\".\\CompilerIdC.pdb\" /SUBSYSTEM:CONSOLE /TLBID:1 /DYNAMICBASE /NXCOMPAT /IMPLIB:\".\\CompilerIdC.lib\" /MACHINE:X64 Debug\\CMa\r\n  keCCompilerId.obj\r\nLINK : fatal error LNK1104: cannot open file 'ucrtd.lib' [C:\\dev\\msbuild_amd64_bug\\CompilerIdC.vcxproj]\r\nDone Building Project \"C:\\dev\\msbuild_amd64_bug\\CompilerIdC.vcxproj\" (default targets) -- FAILED.\r\n\r\n\r\nBuild FAILED.\r\n\r\n\"C:\\dev\\msbuild_amd64_bug\\CompilerIdC.vcxproj\" (default target) (1) ->\r\n(Link target) ->\r\n  LINK : fatal error LNK1104: cannot open file 'ucrtd.lib' [C:\\dev\\msbuild_amd64_bug\\CompilerIdC.vcxproj]\r\n\r\n    0 Warning(s)\r\n    1 Error(s)\r\n```\r\n\r\n### Environment data\r\n`msbuild /version` output:\r\n```\r\nMicrosoft (R) Build Engine version 16.0.443+g5775d0d6bb for .NET Framework\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n16.0.443.30039\r\n```\r\n\r\nOS info: `Version 1809, OS Build: 17763.316`\r\n\r\n### Additional information\r\nWhen building with the 32-bit version of MSBuild the build succeeds, this is the commandline used:\r\n```\r\n\"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Preview\\MSBuild\\Current\\Bin\\MSBuild.exe\" CompilerIdC.vcxproj /p:Configuration=Debug /p:Platform=x64\r\n```\r\n\r\nI think this is an issue with the path construction for some of the UniversalCRT properties to the Windows SDK folder:\r\n1. For the issue seen under x64, the following properties are set (presumably) incorrectly as such:\r\n```\r\nUCRTContentRoot = C:\\Program Files\\Windows Kits\\10\\\r\nUniversalCRT_IncludePath = C:\\Program Files\\Windows Kits\\10\\Include\\10.0.17763.0\\ucrt;\r\nUniversalCRT_LibraryPath_arm = C:\\Program Files\\Windows Kits\\10\\lib\\10.0.17763.0\\ucrt\\arm;\r\nUniversalCRT_LibraryPath_arm64 = C:\\Program Files\\Windows Kits\\10\\lib\\10.0.17763.0\\ucrt\\arm64;\r\nUniversalCRT_LibraryPath_x64 = C:\\Program Files\\Windows Kits\\10\\lib\\10.0.17763.0\\ucrt\\x64;\r\nUniversalCRT_LibraryPath_x86 = C:\\Program Files\\Windows Kits\\10\\lib\\10.0.17763.0\\ucrt\\x86;\r\n```\r\n2. In constrast, the x86 shows the following values for the same properties:\r\n```\r\nUCRTContentRoot = C:\\Program Files (x86)\\Windows Kits\\10\\\r\nUniversalCRT_IncludePath = C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.17763.0\\ucrt;\r\nUniversalCRT_LibraryPath_arm = C:\\Program Files (x86)\\Windows Kits\\10\\lib\\10.0.17763.0\\ucrt\\arm;\r\nUniversalCRT_LibraryPath_arm64 = C:\\Program Files (x86)\\Windows Kits\\10\\lib\\10.0.17763.0\\ucrt\\arm64;\r\nUniversalCRT_LibraryPath_x64 = C:\\Program Files (x86)\\Windows Kits\\10\\lib\\10.0.17763.0\\ucrt\\x64;\r\nUniversalCRT_LibraryPath_x86 = C:\\Program Files (x86)\\Windows Kits\\10\\lib\\10.0.17763.0\\ucrt\\x86;\r\n```",
  "state": "OPEN",
  "createdAt": "2019-03-12T18:04:12Z",
  "updatedAt": "2024-02-21T16:31:46Z",
  "closedAt": null,
  "author": {
    "login": "mharmer"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Discussion"
  },
  "comments": {
    "nodes": [
      {
        "body": "Can you see what link.exe command is being used in the successful case?",
        "createdAt": "2019-03-13T06:12:34Z",
        "updatedAt": "2019-03-13T06:12:34Z",
        "author": {
          "login": "livarcocc"
        }
      },
      {
        "body": "@livarcocc The link command appears to be the exact same between the unsuccessful and successful cases:\r\n\r\nWorking:\r\n```\r\nC:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Preview\\VC\\Tools\\MSVC\\14.20.27404\\bin\\HostX64\\x64\\link.exe /ERRORREPORT:QUEUE /OUT:\".\\CompilerIdC.exe\" /INCREMENTAL:NO /NOLOGO kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib /MANIFEST /MANIFESTUAC:\"level='asInvoker' uiAccess='false'\" /manifest:embed /PDB:\".\\CompilerIdC.pdb\" /SUBSYSTEM:CONSOLE /TLBID:1 /DYNAMICBASE /NXCOMPAT /IMPLIB:\".\\CompilerIdC.lib\" /MACHINE:X64 Debug\\CMakeCCompilerId.obj\r\n```\r\n\r\nNot working:\r\n```\r\nC:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Preview\\VC\\Tools\\MSVC\\14.20.27404\\bin\\HostX64\\x64\\link.exe /ERRORREPORT:QUEUE /OUT:\".\\CompilerIdC.exe\" /INCREMENTAL:NO /NOLOGO kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib /MANIFEST /MANIFESTUAC:\"level='asInvoker' uiAccess='false'\" /manifest:embed /PDB:\".\\CompilerIdC.pdb\" /SUBSYSTEM:CONSOLE /TLBID:1 /DYNAMICBASE /NXCOMPAT /IMPLIB:\".\\CompilerIdC.lib\" /MACHINE:X64 Debug\\CMakeCCompilerId.obj\r\n```\r\n\r\nTo look further into this, I took a look at the `link.read.1.tlog`, the working output listed the path discovered for UCRTD.LIB as:\r\n`C:\\PROGRAM FILES (X86)\\WINDOWS KITS\\10\\LIB\\10.0.17763.0\\UCRT\\X64\\UCRTD.LIB`\r\n\r\nWhereas the unsuccessful run listed the path as:\r\n`C:\\PROGRAM FILES\\WINDOWS KITS\\10\\LIB\\10.0.17763.0\\UCRT\\X64\\UCRTD.LIB`\r\n\r\n(Note: the `link.read.1.tlog` initially doesn't get populated when link.exe fails, so to workaround this I manually constructed the folder structure (`C:\\PROGRAM FILES\\WINDOWS KITS\\10\\LIB\\10.0.17763.0\\UCRT\\X64`) and dropped in the ucrtd.lib from the correct location to get the log file to show it - at which point link.exe also succeeded).\r\n\r\nI suspect it must be an environment variable that is triggering this since the command line arguments match, possibly assigned in `LIB`?",
        "createdAt": "2019-03-13T17:50:16Z",
        "updatedAt": "2019-03-13T17:50:16Z",
        "author": {
          "login": "mharmer"
        }
      },
      {
        "body": "Trying to work out why, but depending on the environment, I am seeing different value for the following registry key: `HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows Kits\\Installed Roots@KitsRoot10`\r\n\r\nSince `uCRT.props` pulls from this location, the working environment has the following:\r\n\r\n> HKLM:SOFTWARE\\Microsoft\\Windows Kits\\Installed Roots\\KitsRoot10\r\n> C:\\Program Files (x86)\\Windows Kits\\10\\\r\n\r\nWhere the non-working environment has the following:\r\n\r\n> HKLM:SOFTWARE\\Microsoft\\Windows Kits\\Installed Roots\\KitsRoot10\r\n> C:\\Program Files\\Windows Kits\\10\\\r\n\r\nTrying to work out _why_ there is a difference and what feature selection(s) during install resulted in the unexpected value... so far the only notable difference is working environments originally installed the SDKs with VS2017 setup and the new environment installed the SDKs with VS2019 only... \r\n\r\nRegardless, don't know why yet, so will continue to investigate.",
        "createdAt": "2019-04-12T13:35:29Z",
        "updatedAt": "2019-04-12T13:35:29Z",
        "author": {
          "login": "cbaxter"
        }
      },
      {
        "body": "Sadly, I have opted to just restore the original registry key for now... \r\n\r\nIf it helps, the only folder under the _Program Files_ location is `C:\\Program Files\\Microsoft SDKs\\Azure` (specifically `.NET SDK` and `Emulator`); so I am guessing one of the VS2019 Azure features (i.e., perhaps  _Azure Compute Emulator_, _Azure Storage Emulator_, or related) overrode the registry key during install... (pure speculation tho).",
        "createdAt": "2019-04-12T14:03:09Z",
        "updatedAt": "2019-04-12T14:03:09Z",
        "author": {
          "login": "cbaxter"
        }
      },
      {
        "body": "I had similiar issue, with VS2019 and cmake 3.12~\r\n\r\nupdated to cmake 3.15.2 and the issue is gone\r\n\r\nThe previous cmake version had failed with identifying CMAKE_C_COMPILER at the begginning\r\n\r\nDo you still have repro when switching to latest cmake? ",
        "createdAt": "2019-08-18T06:44:33Z",
        "updatedAt": "2019-08-18T06:44:33Z",
        "author": {
          "login": "bartlomiejcieszkowski"
        }
      },
      {
        "body": "The reason it works in CMake 3.15 is because CMake [reverted](https://gitlab.kitware.com/cmake/cmake/issues/18219#note_535370) the change to use a 64-bit MSBuild due to this issue.  It \"works\" by using the 32-bit MSBuild even on a 64-bit host.  IIUC the reproduction instructions in the description of this issue do not require running CMake.\r\n",
        "createdAt": "2019-08-19T14:09:25Z",
        "updatedAt": "2019-08-19T14:09:25Z",
        "author": {
          "login": "bradking"
        }
      },
      {
        "body": "i got here originally from the issue that was filed in cmake gitlab:\r\nhttps://gitlab.kitware.com/cmake/cmake/issues/19037\r\n\r\nmy bad\r\n\r\nchecked on latest vs2019 and it seems that there is no repro:\r\n\r\n```\r\nZ:\\Bart\\Downloads\\msbuild_amd64_bug>\"Z:\\Microsoft\\VisualStudio2019\\MSBuild\\Current\\Bin\\amd64\\MSBuild.exe\" CompilerIdC.vcxproj /p:Configuration=Debug /p:Platform=x64\r\nMicrosoft (R) Build Engine version 16.2.37902+b5aaefc9f for .NET Framework\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\nBuild started 8/19/2019 4:27:57 PM.\r\nProject \"Z:\\Bart\\Downloads\\msbuild_amd64_bug\\CompilerIdC.vcxproj\" on node 1 (default targets).\r\nPrepareForBuild:\r\n  Creating directory \"Debug\\\".\r\n  Creating directory \"Debug\\CompilerIdC.tlog\\\".\r\nInitializeBuildStatus:\r\n  Creating \"Debug\\CompilerIdC.tlog\\unsuccessfulbuild\" because \"AlwaysCreate\" was specified.\r\nClCompile:\r\n  Z:\\Microsoft\\VisualStudio2019\\VC\\Tools\\MSVC\\14.22.27905\\bin\\HostX64\\x64\\CL.exe /c /nologo /W0 /WX- /diagnostics:column /Od /D _MBCS /Gm- /EHs\r\n  c /RTC1 /MDd /GS /fp:precise /Qspectre /Zc:wchar_t /Zc:forScope /Zc:inline /Fo\"Debug\\\\\" /Fd\"Debug\\vc142.pdb\" /Gd /TC /FC /errorReport:queue C\r\n  MakeCCompilerId.c\r\n  CMakeCCompilerId.c\r\nLink:\r\n  Z:\\Microsoft\\VisualStudio2019\\VC\\Tools\\MSVC\\14.22.27905\\bin\\HostX64\\x64\\link.exe /ERRORREPORT:QUEUE /OUT:\".\\CompilerIdC.exe\" /INCREMENTAL:NO\r\n  /NOLOGO kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbcc\r\n  p32.lib /MANIFEST /MANIFESTUAC:\"level='asInvoker' uiAccess='false'\" /manifest:embed /PDB:\".\\CompilerIdC.pdb\" /SUBSYSTEM:CONSOLE /TLBID:1 /DYN\r\n  AMICBASE /NXCOMPAT /IMPLIB:\".\\CompilerIdC.lib\" /MACHINE:X64 Debug\\CMakeCCompilerId.obj\r\n  CompilerIdC.vcxproj -> Z:\\Bart\\Downloads\\msbuild_amd64_bug\\.\\CompilerIdC.exe\r\nPostBuildEvent:\r\n  for %%i in (cl.exe) do @echo CMAKE_C_COMPILER=%%~$PATH:i\r\n  :VCEnd\r\n  CMAKE_C_COMPILER=Z:\\Microsoft\\VisualStudio2019\\VC\\Tools\\MSVC\\14.22.27905\\bin\\Hostx64\\x64\\cl.exe\r\nFinalizeBuildStatus:\r\n  Deleting file \"Debug\\CompilerIdC.tlog\\unsuccessfulbuild\".\r\n  Touching \"Debug\\CompilerIdC.tlog\\CompilerIdC.lastbuildstate\".\r\nDone Building Project \"Z:\\Bart\\Downloads\\msbuild_amd64_bug\\CompilerIdC.vcxproj\" (default targets).\r\n\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:00:01.29\r\n\r\n```",
        "createdAt": "2019-08-19T14:30:55Z",
        "updatedAt": "2019-08-19T14:31:20Z",
        "author": {
          "login": "bartlomiejcieszkowski"
        }
      },
      {
        "body": "> Sadly, I have opted to just restore the original registry key for now...\r\n> \r\n> If it helps, the only folder under the _Program Files_ location is `C:\\Program Files\\Microsoft SDKs\\Azure` (specifically `.NET SDK` and `Emulator`); so I am guessing one of the VS2019 Azure features (i.e., perhaps _Azure Compute Emulator_, _Azure Storage Emulator_, or related) overrode the registry key during install... (pure speculation tho).\r\n\r\nI am having this problem as well. Compiles fine in Visual Studio, but in TeamCity, using the .NET Runner msbuild command, linker cannot find ucrt.lib.  \r\n\r\nI dug around and I found this registry key:\r\n\r\n`HKLM:\\SOFTWARE\\WOW6432Node\\Microsoft\\Windows Kits\\Installed Roots\\KitsRoot10`\r\n\r\nwhich _IS_ set to C:\\Program Files (x86)\\Windows Kits\\10\\\r\n\r\nWhich means the registry key discussed above wasn't trounced by some VS component.\r\n\r\nThis traces back to C:\\Program Files (x86)\\Windows Kits\\10\\DesignTime\\CommonConfiguration\\Neutral\\uCRT.props as was mentioned.. where this code runs:\r\n\r\n```xml\r\n<UCRTContentRoot Condition=\"'$(UCRTContentRoot)' == ''\">$(Registry:HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows Kits\\Installed Roots@KitsRoot10)</UCRTContentRoot>\r\n<UCRTContentRoot Condition=\"'$(UCRTContentRoot)' == ''\">$(Registry:HKEY_LOCAL_MACHINE\\SOFTWARE\\Wow6432Node\\Microsoft\\Windows Kits\\Installed Roots@KitsRoot10)</UCRTContentRoot>\r\n```\r\n\r\nit appears that UCRTContentRoot is not set at all, so it takes the first registry key, which of course points to C:\\Program Files\\... .\r\n\r\nNot sure why there are no files installed by the SDK into C:\\Program Files\\Windows Kits\\10.. but so far a random check of our servers shows none have this directory. The SDK shouldn't really set a registry key if it uses a path that doesn't exist.\r\n\r\nAnyway, my workaround was to set UCRTContentRoot to the Program Files (x86) path in our CI runner and now it all Just works. I have opened a TeamCity issue to look into it; the runner should have set this correctly.\r\n\r\nFor anyone not using the TeamCity .NET runner, check to make sure you run vcvarsall.bat prior to running msbuild (or run from the Visual Studio developer command line). That may resolve your issue.\r\n",
        "createdAt": "2020-07-16T15:17:28Z",
        "updatedAt": "2020-07-16T19:15:38Z",
        "author": {
          "login": "jmwolfe"
        }
      },
      {
        "body": "I had a similar problem:\r\nI found this from 25th Sep 2020 when searching for UCRTContentRoot: https://developercommunity.visualstudio.com/t/ucrt-doesnt-work-in-x64-msbuild/1184283\r\n\r\n> I've spoken to the Windows SDK team about this. In general, kit installers are not supposed to set 'HKLM\\Software\\Microsoft\\Windows Kits\\Installed Roots@KitsRoot10' to C:\\Program Files\\Windows Kits\\10, it is **always supposed to point to `C:\\Program Files (x86)\\Windows Kits\\10`**. However, there are Kits out there that make this mistake, and the registry key is never updated if it already exists prior to any kit installation. I believe whichever windows kit you've installed on that system first had this issue.\r\n>\r\n> That said, these issues will never go away entirely since there will always be kits and machines floating around with this issue. **I've updated ucrt.props to be more defensive about this by checking the Wow6432Node version first** (which has not had this issue historically), and only if that isn't present to fall back to the usual registry key.\r\n>\r\n> This **fix will be present in the next released Windows 10 SDK**. In the meantime, I recommend either deleting that reg key and reinstalling the Windows 10 SDK, or simply directly modifying HKLM\\Software\\Microsoft\\Windows Kits\\Installed Roots@KitsRoot10 to point to C:\\Program Files (x86)\\Windows Kits\\10 (the same effects of the deleting the reg key and reinstalling, but less error prone).\r\n>\r\n> Hope this helps!\r\n>\r\n> Steve Wishnousky\r\n> Senior Software Engineer - Visual C++ Libraries\r\n> stwish@microsoft.com\r\n> \r\n> Sep 25, 2020",
        "createdAt": "2021-06-08T09:27:02Z",
        "updatedAt": "2021-06-08T09:27:02Z",
        "author": {
          "login": "bilbothebaggins"
        }
      }
    ]
  }
}