{
  "number": 2004,
  "title": "MSBuild binaries produced by CI build are different from bootstrap",
  "body": "I think this is more of a question than a bug, but after doing `cibuild --scope Compile --config Release` I end up with the following binaries in various output locations:\r\n\r\n```\r\nC:\\msbuild>dir /s microsoft.build.dll\r\n Directory of C:\\msbuild\\bin\\Bootstrap\\MSBuild\\15.0\\Bin\r\n04/23/2017  04:57 PM         1,418,240 Microsoft.Build.dll\r\n\r\n Directory of C:\\msbuild\\bin\\obj\\Microsoft.Build\\x86\\Release\r\n04/23/2017  04:58 PM         1,419,776 Microsoft.Build.dll\r\n\r\n Directory of C:\\msbuild\\bin\\Release\\Windows_NT_Deployment\r\n04/23/2017  04:58 PM         1,419,776 Microsoft.Build.dll\r\n\r\n Directory of C:\\msbuild\\bin\\Release\\Windows_NT_Deployment_Test\r\n04/23/2017  04:58 PM         1,419,776 Microsoft.Build.dll\r\n\r\n Directory of C:\\msbuild\\bin\\x86\\Windows_NT\\Release\\Output\r\n04/23/2017  04:58 PM         1,419,776 Microsoft.Build.dll\r\n\r\n Directory of C:\\msbuild\\Tools\r\n06/10/2016  09:52 AM         1,286,656 Microsoft.Build.dll\r\n\r\n Directory of C:\\msbuild\\Tools\\dotnetcli\\sdk\\1.0.0-preview3-003686\r\n09/24/2016  05:39 AM         3,367,936 Microsoft.Build.dll\r\n```\r\n\r\nI understand why the last two are different (checked-in tools), but why is the one in bin\\Bootstrap different from the other four? Is one of them built with the old MSBuild? Which one?\r\n\r\nIf I'd like to take the binaries, which is the \"most correct\" one? I see many differences in IL between them.\r\n\r\nAlso, are MSBuild binaries compiled using Deterministic? It'd be nice to have.",
  "state": "CLOSED",
  "createdAt": "2017-04-24T00:20:08Z",
  "updatedAt": "2024-02-21T17:19:42Z",
  "closedAt": "2020-02-18T22:59:21Z",
  "author": {
    "login": "KirillOsenkov"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "the one in `bin\\Bootstrap` is built with machine-installed MSBuild from `PATH` (for Full Framework builds) or the downloaded (ancient) copy of MSBuild (for Core and Mono builds). That MSBuild is then used to build MSBuild again into the other folders.\r\n\r\nWe're not doing anything particularly fancy in our build so I'm a bit surprised that there are IL differences. Maybe just because of a different version of the compiler? We should definitely chase that down.\r\n\r\n> Also, are MSBuild binaries compiled using Deterministic? It'd be nice to have.\r\n\r\nNot currently, but yes it would. I've been lumping that in with \"move to the SDK\" in my personal planning even though it's not directly connected.",
        "createdAt": "2017-04-24T16:12:29Z",
        "updatedAt": "2017-04-24T16:12:29Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Yes there are drastic IL differences between bin\\Bootstrap and the other 4. This is what got me worried. I can't tell from just the differences whether it's Debug/Release or old native C# compiler vs. the Roslyn compiler. Or maybe signing? But they're all public signed with the same key. And since none of the assemblies are deterministic it was way harder to diff IL and metadata tables.\r\n\r\nNone of the above is a problem per se, it's just bin\\Bootstrap is the most \"logical\" place to take the built MSBuild binaries from and it turns out that's probably not the right binaries we want to ship. Of course shipping the binaries built by the checked in compiler is safer (in case of regressions in the latest MSBuild or Roslyn). But maybe using the latest MSBuild and/or Roslyn is better?",
        "createdAt": "2017-04-24T18:08:46Z",
        "updatedAt": "2017-04-24T18:08:46Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "P.S. It would be nice to have an explicit post-build \"deploy/layout\" step that creates a folder that matches exactly what should go into the shipped bits (and the on disk layout matches as well). That way it would make it much easier to ship an MSBuild toolset in your own apps, such as MonoDevelop and others.",
        "createdAt": "2017-04-24T18:10:46Z",
        "updatedAt": "2017-04-24T18:10:46Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "What we ship from the official build is closer to the ones in `bin\\bootstrap`, because we don't bootstrap in official builds--just one-shot build using installed tools.\r\n\r\nTurning on deterministic is super easy, so: https://github.com/Microsoft/msbuild/pull/2007.",
        "createdAt": "2017-04-24T18:30:00Z",
        "updatedAt": "2017-04-24T18:30:00Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Hopefully fixed with the many build system overhauls since this was filed.",
        "createdAt": "2020-02-18T22:59:21Z",
        "updatedAt": "2020-02-18T22:59:21Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}