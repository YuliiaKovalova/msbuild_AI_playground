{
  "number": 2346,
  "title": "Globbing should be extended to support basic pattern matching.",
  "body": "It is often the case that you want to nest certain files matching a given pattern under another file that matches a corresponding pattern.\r\n\r\nOne such case is nesting `*.Designer.cs` under the corresponding `*.resx`.\r\n\r\nIt would be useful if globbing support could be extended to include basic pattern matching such that the following is possible:\r\n```xml\r\n<Compile Update\"*.Designer.cs\" DependentUpon=\"*.resx\" />\r\n```\r\n\r\nI imagine that enabling this functionality could be done via an explicit property (`<Compile Update=\"\" DependentUpon=\"\" UsePatternMatching=\"true\" />`) or via some specialized syntax (regex supports this via one of the 'capturing' grouping constructs: https://docs.microsoft.com/en-us/dotnet/standard/base-types/grouping-constructs-in-regular-expressions#named_matched_subexpression).",
  "state": "OPEN",
  "createdAt": "2017-07-21T18:35:13Z",
  "updatedAt": "2024-02-21T16:36:17Z",
  "closedAt": null,
  "author": {
    "login": "tannergooding"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "FYI. @srivatsn ",
        "createdAt": "2017-07-21T18:35:43Z",
        "updatedAt": "2017-07-21T18:35:43Z",
        "author": {
          "login": "tannergooding"
        }
      },
      {
        "body": "I don't understand what the expected output is from your proposed syntax. Can you give an example?",
        "createdAt": "2017-07-21T18:37:08Z",
        "updatedAt": "2017-07-21T18:37:08Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald, if I declared `<Compile Update\"*.Designer.cs\" DependentUpon=\"*.resx\" />` (or w/e syntax was decided upon) and I had a `Resources.resx`/`Resources.Designer.cs` and a `InternalResources.resx`/`InternalResources.Designer.cs` file, I would expect it to have the same behavior as manually declaring:\r\n\r\n```xml\r\n<Compile Update=\"Resources.Designer.cs\" DependentUpon=\"Resources.resx\" />\r\n<Compile Update=\"InternalResources.Designer.cs\" DependentUpon=\"InternalResources.resx\" />\r\n```\r\n\r\nIt allows users to apply metadata (or other properties) to items based on matching patterns.",
        "createdAt": "2017-07-21T19:35:20Z",
        "updatedAt": "2017-07-21T19:35:20Z",
        "author": {
          "login": "tannergooding"
        }
      },
      {
        "body": "This also applies to some other patterns such as `*.xaml` and `*.designer.cs`, `*.css` and `*.min.css`, `*.js` and `*.min.js`, `Strings.xlf` and `Strings.*.xlf`, etc....",
        "createdAt": "2017-07-21T19:38:06Z",
        "updatedAt": "2017-07-21T19:38:40Z",
        "author": {
          "login": "tannergooding"
        }
      },
      {
        "body": "Ah, so you want regex backreferences? Or I guess this is more directly capture groups.",
        "createdAt": "2017-07-21T19:38:19Z",
        "updatedAt": "2017-07-21T19:38:52Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Yes, pretty much \ud83d\ude04 ",
        "createdAt": "2017-07-21T19:39:02Z",
        "updatedAt": "2017-07-21T19:39:02Z",
        "author": {
          "login": "tannergooding"
        }
      },
      {
        "body": "This works:\r\n\r\n```xml\r\n<Compile Update=\"**\\*.Designer.cs\" DependentUpon=\"$([System.IO.Path]::ChangeExtension($([System.IO.Path]::GetFileNameWithoutExtension(%(Identity))), '.resx'))\" />\r\n```",
        "createdAt": "2017-07-21T19:44:44Z",
        "updatedAt": "2017-07-21T19:44:44Z",
        "author": {
          "login": "sharwell"
        }
      },
      {
        "body": "It would still be useful if we had some dedicated syntax for this (IMO). But I am glad to know there is an easy workaround.\r\n\r\n@rainersigwald, is there existing syntax for removing metadata from an item (I don't think there is today)? I think that would be the other thing that would block the SDK or Project System from providing defaults for some of these (although it is nothing a conditioned ItemGroup can't workaround for now \ud83d\ude04).",
        "createdAt": "2017-07-21T19:49:23Z",
        "updatedAt": "2017-07-21T19:49:23Z",
        "author": {
          "login": "tannergooding"
        }
      },
      {
        "body": "@tannergooding MSBuild doesn't distinguish between \"set to empty\" and \"absent\" for metadata so you can just set it to empty.\r\n\r\n```xml\r\n<Project>\r\n <ItemGroup>\r\n  <Compile Include=\"foo\" />\r\n  <Compile Include=\"bar\" />\r\n\r\n  <Compile Update=\"@(Compile)\" Metadatum=\"value\" />\r\n  <Compile Update=\"foo\" Metadatum=\"\" />\r\n </ItemGroup>\r\n\r\n <Target Name=\"Build\">\r\n  <Warning Text=\"Compile: @(Compile->'%(Identity) m: %(Metadatum)')\" />\r\n </Target>\r\n</Project>\r\n```\r\n\r\n```\r\nC:\\Users\\raines\\Source\\resx>msbuild /v:q\r\nMicrosoft (R) Build Engine version 15.3.407.29267 for .NET Framework\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\nC:\\Users\\raines\\Source\\resx\\test.proj(11,3): warning : Compile: foo m: ;bar m: value",
        "createdAt": "2017-07-21T19:58:48Z",
        "updatedAt": "2017-07-21T19:58:48Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I tried to apply the workaround above to Roslyn, and ran into a problem. Here's a short snippet of what I want to add to our equivalent of **Directory.build.targets**:\r\n\r\n```xml\r\n<ItemGroup>\r\n  <!-- Associate [name].Designer.cs with [name].resx -->\r\n  <Compile Update=\"**\\*.Designer.cs\"\r\n           Condition=\"'%(DependentUpon)' == '' AND Exists('$(RecursiveDir)$([System.IO.Path]::ChangeExtension($([System.IO.Path]::GetFileNameWithoutExtension(%(Identity))), `.resx`))')\"\r\n           DependentUpon=\"$([System.IO.Path]::ChangeExtension($([System.IO.Path]::GetFileNameWithoutExtension(%(Identity))), '.resx'))\">\r\n    <AutoGen>True</AutoGen>\r\n    <DesignTime>True</DesignTime>\r\n  </Compile>\r\n</ItemGroup>\r\n```\r\n\r\nThe attempt ended up failing with the following error:\r\n\r\n>  The reference to custom metadata \"DependentUpon\" at position 1 is not allowed in this condition \"'%(DependentUpon)' == '' AND Exists('$(RecursiveDir)$([System.IO.Path]::ChangeExtension($([System.IO.Path]::GetFileNameWithoutExtension(%(Identity))), \\`.resx\\`))')\".\r\n\r\nWhen I removed the first condition (`DependentUpon` not already set), the error message changed to the following:\r\n\r\n> The reference to the built-in metadata \"Identity\" at position 107 is not allowed in this condition \"Exists('$(RecursiveDir)$([System.IO.Path]::ChangeExtension($([System.IO.Path]::GetFileNameWithoutExtension(%(Identity))), \\`.resx\\`))')\".\r\n\r\nThe latter error will make it difficult to deploy the known workaround because several different input files produce a generated file matching **\\*\\*\\\\\\*.Designer.cs**:\r\n\r\n* .resx\r\n* .settings\r\n* .myapp",
        "createdAt": "2017-07-24T12:57:47Z",
        "updatedAt": "2017-07-24T12:58:07Z",
        "author": {
          "login": "sharwell"
        }
      },
      {
        "body": "Doesn't this work? \r\n```xml\r\n<Compile Update=\"**\\*.Designer.cs\" DependentUpon=\"%(RootDir)%(Directory)%(FileName).resx\" />\r\n```",
        "createdAt": "2017-09-26T03:54:00Z",
        "updatedAt": "2017-09-26T03:54:00Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "@cdmihai no, because `%(FileName)` would be `Resources.Designer` instead of just  `Resources`\r\n\r\n@sharwell I'm not sure why MSBuild doesn't let you access metadata in item conditions, but you can work around it by moving the condition to the metadata:\r\n\r\n```xml\r\n<ItemGroup>\r\n  <!-- Associate [name].Designer.cs with [name].resx -->\r\n  <Compile Update=\"**\\*.Designer.cs\">\r\n    <DependentUpon Condition=\"'%(DependentUpon)' == '' AND Exists('$(RecursiveDir)$([System.IO.Path]::ChangeExtension($([System.IO.Path]::GetFileNameWithoutExtension(%(Identity))), `.resx`))')\"\r\n          >$([System.IO.Path]::ChangeExtension($([System.IO.Path]::GetFileNameWithoutExtension(%(Identity))), '.resx'))</DependentUpon>\r\n  </Compile>\r\n</ItemGroup>\r\n```\r\n\r\nIf you need to also set the `AutoGen` and `DesignTime` metadata (which based on the discussion today, it seems like you might not), then you would need to duplicate the condition, or maybe set `AutoGen` to true based on the condition and then set the other metadata based on whether `AutoGen` is true.",
        "createdAt": "2017-09-26T06:04:12Z",
        "updatedAt": "2017-09-26T06:04:12Z",
        "author": {
          "login": "dsplaisted"
        }
      },
      {
        "body": "I'm facing a strange problem.\r\nFor example I have the next items:\r\n\r\n    <ItemGroup>\r\n        <Item1 Include=\"C:\\Users\\Den\\.nuget\\packages\\newtonsoft.json\\12.0.3\\lib\\netstandard2.0\\Newtonsoft.Json.dll\" />\r\n        <Item1 Include=\"C:/Folder1/Folder2/Lib1.dll\" />\r\n        <Item1 Include=\"C:/Folder1/Folder2/Lib2.dll\" />\r\n        <Item1 Include=\"C:/Folder1/Folder2/Lib3.dll\" />\r\n    </ItemGroup>\r\n\r\n    <ItemGroup>\r\n        <Item1 Update=\"**\" MyMetadata=\"true\" /> // It doesn't work\r\n        <Item1 Update=\"C:\\**\\Newtonsoft.Json.dll\" MyMetadata=\"true\" />\r\n        <Item1 Update=\"C:\\**\" MyMetadata=\"true\" />\r\n    </ItemGroup>\r\n\r\n\"Update\" works only when the root directory is specified. Is it by design or not?\r\n",
        "createdAt": "2020-10-22T22:26:17Z",
        "updatedAt": "2020-10-23T07:15:16Z",
        "author": {
          "login": "Denis535"
        }
      },
      {
        "body": "@Denis535 If a relative instead of absolute path is specified, the project directory is the basis of the path. So your `Update=\"**\"` means \"everything under this folder\", not \"absolutely everything\".",
        "createdAt": "2020-10-23T14:18:13Z",
        "updatedAt": "2020-10-23T14:18:13Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}