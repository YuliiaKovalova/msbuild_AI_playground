{
  "number": 3099,
  "title": "NuGet SDK resolver doesn't support floating versions",
  "body": "I'm reporting 2 different bugs in the same issue because I think they are closely related, but I can move the second one to a different issue if they're not really related:\r\n\r\n- Floating versions aren't supported by the NuGet SDK resolver.\r\n- If the specified version isn't found, but the closest match is resolved, package restore succeeds, but the SDK isn't installed.\r\n\r\n### Steps to reproduce\r\n\r\n- Some NuGet package `My.Project.Sdk`, version 1.1.0 installed in a local feed.\r\n\r\n- Project file\r\n```xml\r\n<Project Sdk=\"My.Project.Sdk/*\">\r\n    ...\r\n</Project>\r\n```\r\n\r\n- Command line\r\n```\r\ndotnet restore\r\n```\r\n\r\n### Expected  behavior\r\nThe package restore is successful and the package is used as SDK.\r\n\r\n### Actual behavior\r\nThe package restore is successful, but the package isn't used as SDK. Error message:\r\n```\r\npath\\to\\project.csproj : error MSB4236: The SDK 'My.Project.Sdk/*' specified could not be found.\r\n```\r\n\r\nSpecifying `Sdk=\"My.Project.Sdk/1\"` also fails, with this message:\r\n```\r\npath\\to\\project.csproj : warning : project depends on My.Project.Sdk (>= 1.0.0) but My.Project.Sdk 1.0.0 was not found. An approximate best match of My.Project.Sdk 1.1.0 was resolved.\r\npath\\to\\project.csproj : error : Failed to resolve SDK 'My.Project.Sdk/1'. Package restore was successful but a package with the ID of \"My.Project.Sdk\" was not installed.\r\npath\\to\\project.csproj : error MSB4236: The SDK 'My.Project.Sdk/1' specified could not be found.\r\n```\r\n\r\n### Environment data\r\n`dotnet msbuild /version` output:\r\n```\r\nMicrosoft (R) Build Engine version 15.7.11.29948 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n15.7.11.29948\r\n```\r\n\r\nOS info:\r\n\r\nIf applicable, version of the tool that invokes MSBuild (Visual Studio, dotnet CLI, etc):\r\n`dotnet --version`:\r\n```\r\n2.1.300-preview1-008174\r\n```",
  "state": "OPEN",
  "createdAt": "2018-03-17T22:23:07Z",
  "updatedAt": "2024-02-21T16:34:33Z",
  "closedAt": null,
  "author": {
    "login": "jp2masa"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "We have no plans to support wildcards since SDK resolution happens during evaluation of the project and would slow things down for every build.  If you specify a version, NuGet can look it up on disk and not hit the network for subsequent resolutions.  \r\n\r\nThe other error could be improved, as NuGet resolved the version you requested to something else so our logic rejects it.  This is in case you get auto-upgraded to a package version you don't necessarily want.  For example, you specify `1.0.0` but you get `1.0.0.1`.  \r\n\r\nThe SDK versions require precision at the moment since we treat them specially compared to normal package references.",
        "createdAt": "2018-03-19T14:08:55Z",
        "updatedAt": "2018-03-19T14:08:55Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "In our use case, we provide our customers with COBOL, PL/1 and HLASM full development experience in VisualStudio. Using custom SDKs for custom builds and projects works as intended, but the problem arises when it comes to versioning. If we increase the version number on each update of our language service, old project will stop working i.e. we will lose backward compatibility. \r\n\r\nWhat would be your suggestion on which approach should we take in our case, considering the fact that versioning wildcards will not be supported?",
        "createdAt": "2021-10-01T17:59:26Z",
        "updatedAt": "2021-10-01T17:59:26Z",
        "author": {
          "login": "ivanpovazan"
        }
      }
    ]
  }
}