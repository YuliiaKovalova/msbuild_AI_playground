{
  "number": 8967,
  "title": "[Feature Request]: Improve error messages when importing props/targets that only exist in a specific distribution of MSBuild",
  "body": "### Summary\n\nSome toolsets for MSBuild are only viable in one of our distributions of MSBuild, and when this is the case the errors that users see are hard to diagnose. We should detect this scenario and give more actionable messages so that users are able to continue their work.\n\n### Background and Motivation\n\nIn issues like https://github.com/dotnet/msbuild/issues/8964 we see scenarios where end users start using one distribution of MSBuild, configure that distribution to work in a particular way, and then are confused when they use another distribution of MSBuild and their builds do not work, or otherwise behave strangely.\r\n\r\nThis typically arises from the following scenario:\r\n\r\n## Using a VS-only toolset from `dotnet msbuild`\r\n\r\nA user configures a Visual Studio only toolset (like the DSL Modeling tools, or Docker Compose tooling), which ships via props/targets somewhere inside the VS Install directory. The user then invokes `dotnet build` or `dotnet msbuild`, and they get a message like \r\n\r\n> error MSB4019: The imported project \"<SDK_ROOT>\\Microsoft\\VisualStudio\\v17.0\\<COMPONENT_DIR>\\<TARGET_NAME>.targets\" was not found. Confirm that the expression in the Import declaration \"<SDK_ROOT>\\Microsoft\\VisualStudio\\v17.0\\<COMPONENT_DIR>\\<TARGET_NAME>.targets\" is correct, and that the file exists on disk.\r\n\r\nThis is because of the use of `$(MSBuildExtensionsPath)` in the import, which in VS does point to a relevant location, but for `dotnet msbuild`/`dotnet build` points to the SDK root.\n\n### Proposed Feature\n\nWe should detect the use of the `$(MSBuildExtensionsPath)` property in combination with paths like \"Microsoft\\Visual Studio\" in Imports, and issue a warning when an Import uses this pattern while executing in the `dotnet msbuild`/`dotnet build` distribution of MSBuild. Ideally, for the .NET SDK MSBuild we would be able to ask the user to use `msbuild.exe` from a Developer Command Prompt instead of `dotnet build`/`dotnet msbuild`.\r\n\r\nIt is possible that the inverse version of this scenario (`msbuild.exe` trying to build an SDK project?) might have similar gaps, but the .NET SDK version of extending MSBuild workloads doesn't rely as strongly on modifications to the SDK install locations. It's possible that workloads would be the primary area of concern for this scenario, as they are the main way that the SDK install directory is modified that I'm aware of.\n\n### Alternative Designs\n\nInstead of this, we could work with specific VS tooling teams to ship their tasks/targets as either NuGet-delivered MSBuild SDKs or packages with MSBuild extensions. This would not be possible for all teams, and for those that it is possible for would be subject to prioritization and resourcing.",
  "state": "CLOSED",
  "createdAt": "2023-06-27T19:13:50Z",
  "updatedAt": "2024-02-14T14:38:09Z",
  "closedAt": "2024-02-14T14:38:09Z",
  "author": {
    "login": "baronfel"
  },
  "labels": [
    "backlog",
    "Feature Request",
    "Priority:2",
    "triaged",
    "internal-team-onboarding"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "maridematte"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": []
  }
}