{
  "number": 8396,
  "title": "Investigate directory enumeration performance",
  "body": "I noticed we're using standard `Directory.EnumerateFiles()` to enumerate files for globs. It's not very efficient, and also runs the risks of throwing when it hits directories or files it can't access. \r\n\r\nSample first-chance exception:\r\n\r\n```\r\nSystem.UnauthorizedAccessException: Access to the path 'C:\\Documents and Settings' is denied.\r\n   at void System.IO.__Error.WinIOError(int errorCode, string maybeFullPath)\r\n   at void System.IO.FileSystemEnumerableIterator<TSource>.CommonInit()\r\n   at new System.IO.FileSystemEnumerableIterator<TSource>(string path, string originalUserPath, string searchPattern, SearchOption searchOption, SearchResultHandler<TSource> resultHandler, bool checkHost)\r\n   at IEnumerable<string> System.IO.Directory.EnumerateFiles(string path, string searchPattern, SearchOption searchOption)\r\n   at IEnumerable<string> Microsoft.Build.Shared.FileSystem.ManagedFileSystem.EnumerateFiles(string path, string searchPattern, SearchOption searchOption)\r\n   at IEnumerable<string> Microsoft.Build.Shared.FileSystem.MSBuildOnWindowsFileSystem.EnumerateFiles(string path, string searchPattern, SearchOption searchOption)\r\n   at IEnumerable<string> Microsoft.Build.Shared.FileSystem.CachingFileSystemWrapper.EnumerateFiles(string path, string searchPattern, SearchOption searchOption)\r\n   at IReadOnlyList<string> Microsoft.Build.Shared.FileMatcher.GetAccessibleFiles(IFileSystem fileSystem, string path, string filespec, string projectDirectory, bool stripProjectDirectory)\r\n   at IReadOnlyList<string> Microsoft.Build.Shared.FileMatcher.GetAccessibleFileSystemEntries(IFileSystem fileSystem, FileSystemEntity entityType, string path, string pattern, string projectDirectory, bool stripProjectDirectory)\r\n   at Microsoft.Build.Shared.FileMatcher(IFileSystem fileSystem, ConcurrentDictionary<string, IReadOnlyList<string>> fileEntryExpansionCache)+(FileSystemEntity entityType, string path, string pattern, string projectDirectory, bool stripProjectDirectory) => { } x 2\r\n   at TValue System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.GetOrAdd(TKey key, Func<TKey, TValue> valueFactory)\r\n   at Microsoft.Build.Shared.FileMatcher(IFileSystem fileSystem, ConcurrentDictionary<string, IReadOnlyList<string>> fileEntryExpansionCache)+(FileSystemEntity type, string path, string pattern, string directory, bool stripProjectDirectory) => { }\r\n   at IEnumerable<string> Microsoft.Build.Shared.FileMatcher.GetFilesForStep(RecursiveStepResult stepResult, RecursionState recursionState, string projectDirectory, bool stripProjectDirectory)\r\n   at void Microsoft.Build.Shared.FileMatcher.GetFilesRecursive(ConcurrentStack<List<string>> listOfFiles, RecursionState recursionState, string projectDirectory, bool stripProjectDirectory, IList<RecursionState> searchesToExclude, Dictionary<string, List<RecursionState>> searchesToExcludeInSubdirs, TaskOptions taskOptions)\r\n   at void Microsoft.Build.Shared.FileMatcher.GetFilesRecursive(ConcurrentStack<List<string>> listOfFiles, RecursionState recursionState, string projectDirectory, bool stripProjectDirectory, IList<RecursionState> searchesToExclude, Dictionary<string, List<RecursionState>> searchesToExcludeInSubdirs, TaskOptions taskOptions)+(string subdir) => { }\r\n   at ParallelLoopResult System.Threading.Tasks.Parallel.ForEachWorker<TSource, TLocal>(IEnumerable<TSource> source, ParallelOptions parallelOptions, Action<TSource> body, Action<TSource, ParallelLoopState> bodyWithState, Action<TSource, ParallelLoopState, long> bodyWithStateAndIndex, Func<TSource, ParallelLoopState, TLocal, TLocal> bodyWithStateAndLocal, Func<TSource, ParallelLoopState, long, TLocal, TLocal> bodyWithEverything, Func<TLocal> localInit, Action<TLocal> localFinally)+(int i) => { }\r\n   at ParallelLoopResult System.Threading.Tasks.Parallel.ForWorker<TLocal>(int fromInclusive, int toExclusive, ParallelOptions parallelOptions, Action<int> body, Action<int, ParallelLoopState> bodyWithState, Func<int, ParallelLoopState, TLocal, TLocal> bodyWithLocal, Func<TLocal> localInit, Action<TLocal> localFinally)+() => { }\r\n   at void System.Threading.Tasks.Task.InnerInvokeWithArg(Task childTask)\r\n   at void System.Threading.Tasks.Task.ExecuteSelfReplicating(Task root)+() => { }\r\n   at void System.Threading.Tasks.Task.System.Threading.IThreadPoolWorkItem.ExecuteWorkItem()\r\n   at bool System.Threading.ThreadPoolWorkQueue.Dispatch()\r\n   at bool System.Threading._ThreadPoolWaitCallback.PerformWaitCallback()\r\n```\r\n\r\nAlso seeing the same for `C:\\Config.Msi` when we accidentally enumerate the whole drive due to some property being empty and the glob ends up starting with a `\\`.\r\n\r\nI've had success with directly calling the Win32 API in parallel to reduce allocations, achieving up to 2x speed and 0.5x allocations:\r\nhttps://github.com/KirillOsenkov/Benchmarks/blob/8556f92c07b9a3d211a7e72b776c324aff7e24b7/src/Tests/DirectoryEnumeration.cs#L12-L15\r\n\r\nAlso it seems that this approach doesn't run into exceptions when trying to access inaccessible directories, unlike the BCL one.\r\n\r\nFeel free to experiment with this benchmark, steal the source, try on real-world builds, see if you can tune it further, submit PRs if you can make it even faster ;)\r\n\r\nThe first place I would try this is in FileMatcher (see the stack above). Also, looking at the stack, I'd measure getting rid of the ConcurrentDictionary and try a simple collection with a lock around it. I often get much better results with a simple lock around simple collections. \r\n\r\nI'm noticing we do have a ManagedFileSystem abstraction, so I guess we can try replacing the implementation in a single place and see if it can make our builds faster wholesale.\r\n\r\nOne potential concern is that the parallelism in the new method does a lot of thrashing, so not sure how this performs on an HDD. But then again, do we care about HDDs anymore?",
  "state": "CLOSED",
  "createdAt": "2023-02-03T03:13:01Z",
  "updatedAt": "2024-02-21T16:59:44Z",
  "closedAt": "2023-07-13T23:12:50Z",
  "author": {
    "login": "KirillOsenkov"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "@davkean points out there's a high perf directory enumeration logic here:\r\nhttps://www.fuget.org/packages/Microsoft.IO.Redist/6.0.0/lib/net472/Microsoft.IO.Redist.dll/Microsoft.IO.Enumeration/FileSystemEnumerator%601\r\n\r\n",
        "createdAt": "2023-02-03T03:47:03Z",
        "updatedAt": "2023-02-03T03:47:03Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "https://github.com/dotnet/designs/blob/26688e7803d59558eca06372939c9199bf685051/accepted/2018/file-enumeration.md",
        "createdAt": "2023-02-03T03:48:02Z",
        "updatedAt": "2023-02-03T03:48:02Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "@JeremyKuhne ",
        "createdAt": "2023-02-03T04:47:22Z",
        "updatedAt": "2023-02-03T04:47:22Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "@KirillOsenkov feel free to hit me up to talk about this. I specifically had MSBuild in mind when I wrote this and provided a .NET Framework build.",
        "createdAt": "2023-02-03T06:03:06Z",
        "updatedAt": "2023-02-03T06:03:06Z",
        "author": {
          "login": "JeremyKuhne"
        }
      },
      {
        "body": "@JeremyKuhne I told him the same thing internally :)",
        "createdAt": "2023-02-03T06:04:01Z",
        "updatedAt": "2023-02-03T06:04:20Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "As @ladipro pointed out internally we should be using it on at least some codepaths: #6771.  And indeed I do see `Microsoft.IO.Redist` used for a trivial `<I Include=\"C:\\**\\*.txt\" />`--though it does throw the first-chance exception mentioned.\r\n\r\n```\r\nSystem.UnauthorizedAccessException\r\n  HResult=0x80070005\r\n  Message=Access to the path 'C:\\Config.Msi' is denied.\r\n  Source=Microsoft.IO.Redist\r\n  StackTrace:\r\n   at Microsoft.IO.Enumeration.FileSystemEnumerator`1.CreateDirectoryHandle(String path, Boolean ignoreNotFound) in /_/src/libraries/System.Private.CoreLib/src/System/IO/Enumeration/FileSystemEnumerator.Windows.cs:line 196\r\n```\r\n\r\n```\r\n \tMicrosoft.IO.Redist.dll!Microsoft.IO.Enumeration.FileSystemEnumerator<System.__Canon>.CreateDirectoryHandle(string path, bool ignoreNotFound) Line 193\tC#\r\n \tMicrosoft.IO.Redist.dll!Microsoft.IO.Enumeration.FileSystemEnumerator<System.__Canon>.Init() Line 50\tC#\r\n \tMicrosoft.IO.Redist.dll!Microsoft.IO.Enumeration.FileSystemEnumerable<string>.FileSystemEnumerable(string directory, Microsoft.IO.Enumeration.FileSystemEnumerable<string>.FindTransform transform, Microsoft.IO.EnumerationOptions options, bool isNormalized) Line 38\tC#\r\n \tMicrosoft.IO.Redist.dll!Microsoft.IO.Enumeration.FileSystemEnumerableFactory.UserFiles(string directory, string expression, Microsoft.IO.EnumerationOptions options) Line 124\tC#\r\n \tMicrosoft.IO.Redist.dll!Microsoft.IO.Directory.InternalEnumeratePaths(string path, string searchPattern, Microsoft.IO.SearchTarget searchTarget, Microsoft.IO.EnumerationOptions options) Line 181\tC#\r\n>\tMicrosoft.Build.dll!Microsoft.Build.Shared.FileSystem.ManagedFileSystem.EnumerateFiles.AnonymousMethod__10_0(string path, string searchPattern, Microsoft.IO.SearchOption searchOption) Line 88\tC#\r\n```\r\n\r\n@KirillOsenkov can you give some details on what you were doing when you hit that exception? What version of MSBuild? Using `MSBuild.exe` or `dotnet build` or VS or something else? Evaluation time or during execution? And so on.",
        "createdAt": "2023-02-03T16:11:54Z",
        "updatedAt": "2023-02-03T16:11:54Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I think we could simplify our `GetAccessibleFiles` and related methods\r\n\r\nhttps://github.com/dotnet/msbuild/blob/7cfb36cb90d1c9cc34bc4e0910d0c9ef42ee47b6/src/Shared/FileMatcher.cs#L298-L303\r\n\r\nUsing MS.IO.Redist's [`EnumerationOptions.IgnoreInaccessible`](https://learn.microsoft.com/dotnet/api/system.io.enumerationoptions.ignoreinaccessible?view=net-7.0#system-io-enumerationoptions-ignoreinaccessible) (when available).",
        "createdAt": "2023-02-03T16:30:19Z",
        "updatedAt": "2023-02-03T16:30:19Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I see a bunch of string creating (Substring for example) that could be avoided with wiring spans through this part of the code.\r\n\r\nAnd eventually perhaps this will allow some of the custom globbing to be removed\r\nhttps://github.com/dotnet/runtime/issues/21362",
        "createdAt": "2023-02-03T17:08:49Z",
        "updatedAt": "2023-02-03T17:08:49Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "I did add Microsoft.IO.Redist to my benchmark and it is indeed even faster than my handcrafted approach! Kudos to Jeremy!\r\n\r\nhttps://github.com/KirillOsenkov/Benchmarks/blob/f2c45821c2cf7243b040d2c1db5904bab8134cf8/src/Tests/DirectoryEnumeration.cs#L12-L16\r\n\r\nI did follow up with the original stack that I'd pasted here, and it's from 2021 \ud83d\ude31 My apologies. Most of this issue is now invalid as we have transitioned to Microsoft.IO.Redist!\r\n\r\nRemaining issues: \r\n\r\n - [ ] Pass IgnoreInaccessible\r\n - [ ] investigate smaller perf issues as indicated by Dan in the previous reply\r\n\r\nI won't be offended if we close this issue outright or mark it as low priority ;)\r\n\r\nApologies I should have checked the MSBuild version before filing the issue.",
        "createdAt": "2023-02-03T18:18:38Z",
        "updatedAt": "2023-02-03T18:18:38Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "I had figured that MSBuild could, in theory, translate it's `\\**\\` logic into a customized enumerator. I'll also note that I made a raw entry point into error handling if you need to concoct something fancier for the errors: [`ContinueOnError`](https://learn.microsoft.com/en-us/dotnet/api/system.io.enumeration.filesystemenumerator-1.continueonerror?view=net-7.0#system-io-enumeration-filesystemenumerator-1-continueonerror(system-int32)).\r\n",
        "createdAt": "2023-02-03T19:52:31Z",
        "updatedAt": "2023-02-03T19:52:31Z",
        "author": {
          "login": "JeremyKuhne"
        }
      }
    ]
  }
}