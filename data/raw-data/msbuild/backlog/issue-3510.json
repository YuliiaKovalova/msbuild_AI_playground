{
  "number": 3510,
  "title": "Microsoft.Build dependency on System.Runtime.Loader",
  "body": "It looks like `Microsoft.Build` references `System.Runtime.Loader` which isn't supported on .NET Framework (see https://github.com/dotnet/cli/issues/6019#issuecomment-286161210):\r\n\r\n![2018-07-12_16h45_17](https://user-images.githubusercontent.com/1020407/42658343-05aac4b4-85f3-11e8-9219-cc4ea9f93f8a.png)\r\n\r\nWhen attempting to trigger SDK resolver resolution on a .NET Framework host, I get assembly loading exceptions in `Microsoft.Build.BackEnd.SdkResolution.SdkResolverService.ResolveSdk()`. I haven't seen this issue before, so I suspect the `System.Runtime.Loader` usage may be limited to the new(ish) SDK resolution stuff.\r\n\r\nMy initial reading of the situation is that performing SDK resolver resolution using the MSBuild API from a .NET Framework host is currently impossible - is that correct? If so, that seems like kind of a big problem to me given that custom SDKs are gradually becoming more popular.",
  "state": "CLOSED",
  "createdAt": "2018-07-12T20:49:16Z",
  "updatedAt": "2024-02-21T17:12:21Z",
  "closedAt": "2018-07-12T22:35:23Z",
  "author": {
    "login": "daveaglick"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "It works from VS and msbuild.exe so it should definitely not be a general problem with .NET Framework hosts. What are the exact errors you're seeing?",
        "createdAt": "2018-07-12T21:20:39Z",
        "updatedAt": "2018-07-12T21:20:39Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "That is a _really_ good point...\r\n\r\nHere's the build warning I'm seeing:\r\n\r\n```\r\nE:\\Code\\Buildalyzer\\tests\\repos\\Rx.NET\\AsyncRx.NET\\System.Reactive.Async\\System.Reactive.Async.csproj :\r\nwarning MSB4243: The NuGet-based SDK resolver failed to run because NuGet assemblies could not be\r\n located.  Check your installation of MSBuild or set the environment variable \"MSBUILD_NUGET_PATH\" to\r\n the folder that contains the required NuGet assemblies. Could not load file or assembly\r\n 'System.Runtime.Loader, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one\r\n of its dependencies. The system cannot find the file specified.\r\n```\r\n\r\nDigging deeper, if I set up a custom assembly resolver (by handling `AppDomain.CurrentDomain.AssemblyResolve`) I can see the assembly resolution request:\r\n\r\n![2018-07-12_18h14_16](https://user-images.githubusercontent.com/1020407/42662391-68a82fc8-85ff-11e8-84ae-5cce03f87676.png)\r\n\r\nObviously that's never going to complete successfully because there is no `System.Runtime.Loader` assembly for .NET Framework. Here's the call stack when the `System.Runtime.Loader` assembly is first requested:\r\n\r\n![2018-07-12_18h14_44](https://user-images.githubusercontent.com/1020407/42662415-801a49c0-85ff-11e8-8620-1528080e6a22.png)\r\n\r\nAnd here's the code that triggers the `System.Runtime.Loader` assembly load:\r\n\r\n![2018-07-12_18h21_19](https://user-images.githubusercontent.com/1020407/42662655-73911ed0-8600-11e8-86b7-7a6aec1c08be.png)\r\n\r\nWhich, looking closer now, I'm starting wonder if the failure is being caused by `NuGet.MSBuildSdkResolver`...and sure enough:\r\n\r\n![2018-07-12_18h25_02](https://user-images.githubusercontent.com/1020407/42662794-f1458c12-8600-11e8-80d9-05b9fe2ed6c9.png)\r\n\r\nSo now I think I know what's going on: I set the MSBuild environment to use tools, etc. from the .NET Core SDK when the project type uses the SDK, even when the host is .NET Framework. That's to minimize the need for Visual Studio or the Build Tools when building an SDK-based project. That's worked well so far - all the .NET Core SDK stuff targets variations of `netstandard` so the .NET Framework host has no trouble consuming it (except for very specific .NET Core-only targets, but that's to be expected). So in this case, the SDK resolver was coming from `NuGet.MSBuildSdkResolver.dll` in the .NET Core SDK, which targets `netstandard` but apparently has a dependency on `System.Runtime.Loader`.\r\n\r\nThat's unfortunate because it means I can't fully commit to the SDK tools on a .NET Framework host, but at least I know what's going on. The `NuGet.MSBuildSdkResolver.dll` in the Visual Studio directory targets .NET Framework and doesn't have a dependency on `System.Runtime.Loader` so that's probably the one I want to use, even when building a SDK project using the SDK tools. I'll either have to set `MSBUILD_NUGET_PATH` based on the host platform instead of the project type, or special case this somehow during assembly resolution.\r\n\r\nSorry for the long-winded comment here - was using it to record everything for future reference. I guess there _might_ be a follow-up issue here somewhere, or maybe I'm just holding it wrong. Let me know if it's worth opening a new issue with NuGet for the different `NuGet.MSBuildSdkResolver.dll` dependencies.\r\n\r\nTL;DR: The `NuGet.MSBuildSdkResolver.dll` specific to the host platform and not the project type needs to be loaded.\r\n",
        "createdAt": "2018-07-12T22:35:23Z",
        "updatedAt": "2018-07-12T22:35:23Z",
        "author": {
          "login": "daveaglick"
        }
      },
      {
        "body": "That's super interesting, thanks for the details!\r\n\r\n@jeffkl is probably also interested (but on vacation)",
        "createdAt": "2018-07-13T16:47:34Z",
        "updatedAt": "2018-07-13T16:47:34Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}