{
  "number": 9850,
  "title": "Static graph should report what project referenced a nonexistent project",
  "body": "Consider a project:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.Build.Traversal/4.1.0\">\r\n  <ItemGroup>\r\n    <ProjectReference Include=\"src\\nonexistent.proj\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nWhen restored with static graph, this produces\r\n\r\n```sh-session\r\n\u276f msbuild -tl:off -v:m .\\dirs.proj /t:restore -bl -p:RestoreUseStaticGraphEvaluation=true\r\nMSBuild version 17.10.0-preview-24157-01+9af8ff2f9 for .NET Framework\r\n\r\n  Determining projects to restore...\r\nS:\\play\\lkeatjlkaseytjkl\\src\\nonexistent.proj : error MSB4025: The project file could not be loaded. Could not find a p\r\nart of the path 'S:\\play\\lkeatjlkaseytjkl\\src\\nonexistent.proj'.  S:\\play\\lkeatjlkaseytjkl\\src\\nonexistent.proj [S:\\pla\r\ny\\lkeatjlkaseytjkl\\dirs.proj]\r\n  Nothing to do. None of the projects specified contain packages to restore.\r\n```\r\n\r\nIn this example, it's pretty clear what caused that reference. But if you add a layer of indirection (`Entrypoint.csproj` -> `ExistentReference.csproj` -> `NonexistentReference.csproj`) you can get an error message that doesn't have any indication of _why_ the graph is trying to resolve `NonexistentReference.csproj`:\r\n\r\n```\r\nS:\\play\\staticgraphrestorenonexistent\\NonexistentReference\\NonexistentReference.csproj : error MSB4025: The project fil\r\ne could not be loaded. Could not find a part of the path 'S:\\play\\staticgraphrestorenonexistent\\NonexistentReference\\No\r\nnexistentReference.csproj'.  S:\\play\\staticgraphrestorenonexistent\\NonexistentReference\\NonexistentReference.csproj [S:\r\n\\play\\staticgraphrestorenonexistent\\Entrypoint\\Entrypoint.csproj]\r\n```\r\n\r\nIf we could include some context in that error (\"...referenced by Existent.csproj\" or similar) that'd help debug errors like the one experienced by an internal dev who _thought_ he'd eliminated all references to a project but wasn't quite right yet.",
  "state": "OPEN",
  "createdAt": "2024-03-11T20:10:17Z",
  "updatedAt": "2024-07-16T13:42:19Z",
  "closedAt": null,
  "author": {
    "login": "rainersigwald"
  },
  "labels": [
    "backlog",
    "Area: Debuggability",
    "Partner request",
    "Area: Static Graph",
    "Priority:3",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "@rainersigwald do you have in mind component in MSBuild where we can facilitate adding the extra information?\r\n\r\nThere is quite a lot layers to this onion.\r\nRestore happens to be done by `RestoreTaskEx` which is extending [`StaticGraphRestoreTaskBase`](https://github.com/NuGet/NuGet.Client/blob/dev/src/NuGet.Core/NuGet.Build.Tasks/StaticGraphRestoreTaskBase.cs) which runs the restore by spawning a new process, which then probably calls back to MSBuild (as msbuild error code is displayed), however that likely goes through API, as `MSBUILDDEBUGONSTART` is ignored - so I'm left with blackbox that covers the actual entry of interest within our code",
        "createdAt": "2024-04-11T11:12:59Z",
        "updatedAt": "2024-04-11T11:12:59Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "No, not sure where to keep track of and report this. Part of the adventure! My gut says it'd be in the core static graph evaluation stuff.\r\n\r\nYou're right that NuGet static graph restore uses the API; it does so here: https://github.com/NuGet/NuGet.Client/blob/b83566ec2369c4e9fd07e6f95d734dfe370a1e66/src/NuGet.Core/NuGet.Build.Tasks.Console/MSBuildStaticGraphRestore.cs#L866-L904",
        "createdAt": "2024-04-11T16:00:25Z",
        "updatedAt": "2024-04-11T16:00:25Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}