{
  "number": 6847,
  "title": "Initialize XmlReader Using A Stream",
  "body": "### Issue Description\r\nSee https://devdiv.visualstudio.com/DevDiv/_git/VS/pullrequest/349706.\r\n\r\nWhen XmlReader.Create is called and a file path is passed in, it's converted to a URI under the hood. This can mangle multi-byte characters. The solution (in the link above) is to initialize the XmlReader using a stream to the file instead of the path alone.\r\n\r\nNote this isn't an issue that we know of yet, the repro steps would fail if they were.\r\n\r\n### Steps to Reproduce\r\n\r\ncreate dir with `\u554a\u963f\u9f3e\u9f44\u4e02\u4e04\u72da\u72db\u72dc\u72dd\ufa28\ufa29\u02ca\u02cb\u02d9\u2013\u2ffb\u3007\u3400\u3401\u4db4\u4db5` as part of the path\r\n\r\n`dotnet new console -o proj`\r\n\r\ncreate transform.xslt in proj dir, copy contents from below\r\n\r\nadd foo\u00a0target (below) to proj\r\n\r\n`msbuild proj`\r\n\r\nshould see success\r\n\r\nFoo target:\r\n```xml\r\n\u00a0<Target\u00a0Name=\"Foo\"\u00a0AfterTargets=\"Build\">\r\n\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<XslTransformation\u00a0XslInputPath=\"transform.xslt\"\u00a0XmlInputPaths=\"$(MSBuildThisFileFullPath)\"\r\n\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0OutputPaths=\"$(IntermediateOutputPath)output.xml\"\r\n\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Parameters=\"&lt;Parameter\u00a0Name='Parameter1'\u00a0Value='$(Parameter1)'/&gt;\"\u00a0/>\r\n\r\n\u00a0\u00a0</Target>\r\n\r\ntransform.xslt\r\n\r\n<?xml\u00a0version=\"1.0\"\u00a0encoding=\"UTF-8\"?>\r\n\r\n<xsl:stylesheet\u00a0version=\"1.0\"\r\n\r\nxmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">\r\n\r\n<xsl:template\u00a0match=\"/\">\r\n\r\n\u00a0\u00a0<html>\r\n\r\n\u00a0\u00a0<body>\r\n\r\n\u00a0\u00a0\u00a0\u00a0<h2>My\u00a0CD\u00a0Collection</h2>\r\n\r\n\u00a0\u00a0\u00a0\u00a0<table\u00a0border=\"1\">\r\n\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<tr\u00a0bgcolor=\"#9acd32\">\r\n\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<th>Title</th>\r\n\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<th>Artist</th>\r\n\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</tr>\r\n\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<tr>\r\n\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<td><xsl:value-of\u00a0select=\"catalog/cd/title\"/></td>\r\n\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<td><xsl:value-of\u00a0select=\"catalog/cd/artist\"/></td>\r\n\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</tr>\r\n\r\n\u00a0\u00a0\u00a0\u00a0</table>\r\n\r\n\u00a0\u00a0</body>\r\n\r\n\u00a0\u00a0</html>\r\n\r\n</xsl:template>\r\n\r\n</xsl:stylesheet>\r\n```\r\n\r\nBuild succeeds.\r\n\r\n### Analysis\r\nThis isn't an issue yet, but could be down the line.\r\n\r\nOur code calls XmlReader.Create in two locations within the XslTransformation class which can be changed easily. \r\n\r\nThe complication comes from XmlReaderExtension, which initializes an XmlReader via `new XmlTextReader(...)` and a path is passed in. We should avoid this and call `.Create()` passing in a stream, but this comment suggests that would be a breaking change: \r\n\r\n```\r\n            // Ignore loadAsReadOnly for now; using XmlReader.Create results in whitespace changes\r\n            // of attribute text, specifically newline removal.\r\n            // https://github.com/Microsoft/msbuild/issues/4210\r\n```\r\n\r\nhttps://github.com/Microsoft/msbuild/issues/4210 is something @ladipro had worked on so you might have a better idea of what to do here. Thoughts?\r\n\r\nhttps://github.com/benvillalobos/msbuild/commit/6943a559e43a6408c24a811704e806b3be6ea2c6 was my proposed fix before digging into #4210",
  "state": "CLOSED",
  "createdAt": "2021-09-14T21:26:37Z",
  "updatedAt": "2024-02-21T14:11:37Z",
  "closedAt": "2021-09-29T16:49:07Z",
  "author": {
    "login": "benvillalobos"
  },
  "labels": [
    "bug",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Bug Triage Notes: Maybe we can add a unit test for XmlReaderExtension that runs with multi-byte characters and modify how the URI is created. There might be some setting in the constructor to explicitly look for multi-byte characters and it'll \"just work\"",
        "createdAt": "2021-09-16T16:30:28Z",
        "updatedAt": "2021-09-16T16:30:28Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "@tmeschter you've been investigating this quite a bit. If this currently works for us with no issues (loading a project with unicode characters _should_ break the xmlreader but doesn't), do we need to worry about this eventually breaking for us?",
        "createdAt": "2021-09-16T17:07:43Z",
        "updatedAt": "2021-09-16T17:07:43Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "It's not _all_ Unicode characters; it may be specific to characters from the Unicode private use area. I'm not sure the string the \"Steps to Reproduce\" will be enough to trigger it.\r\n\r\nCan you try\r\n\r\n\u216b\u3128\u3129 \u554a\u963f\u9f3e\u9f44\u4e02\u4e04\u72da\u72db\u72dc\u72dd\ufa28\ufa29\u02ca\u02cb\u02d9\u2013\u2ffb\u3007\u3400\u3401\u4db4\u4db5U1[\ue025\ue026\ue027\ue038\ue039]U2[\ue25a\ue25b\ue26c\ue26d]U3[\ue4fe\ue4ff\ue500\ue50b\ue50c]\r\n\r\ninstead? That's from the [original bug](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/1356755).",
        "createdAt": "2021-09-16T17:18:22Z",
        "updatedAt": "2021-09-16T17:18:39Z",
        "author": {
          "login": "tmeschter"
        }
      },
      {
        "body": "Oof, does this look familiar?\r\n\r\n```\r\n\"C:\\src\\temp\\9-16\\11_25\\new\\???????????????'`?-?        ????U1[?????]U2[????]U3[?????]\\proj1\\proj1.csproj\" (default target) (1\r\n) ->\r\n(Foo target) ->\r\n  C:\\src\\temp\\9-16\\11_25\\new\\???????????????'`?-?       ????U1[?????]U2[????]U3[?????]\\proj1\\proj1.csproj(11,5): error MSB370\r\n4: Unable to load the specified Xslt. Could not find a part of the path 'C:\\src\\temp\\9-16\\11_25\\new\\???????????????'`?-\r\n?       ????U1[%EE%80%A5%EE%80%A6%EE%80%A7%EE%80%B8%EE%80%B9]U2[%EE%89%9A%EE%89%9B%EE%89%AC%EE%89%AD]U3[%EE%93%BE%EE%93%BF%EE\r\n%94%80%EE%94%8B%EE%94%8C]\\proj1\\transform.xslt'.\r\n\r\n    0 Warning(s)\r\n    1 Error(s)\r\n\r\nTime Elapsed 00:00:01.29\r\n\r\nC:\\src\\temp\\9-16\\11_25\\new\\\u216b\u3128\u3129\u554a\u963f\u9f3e\u9f44\u4e02\u4e04\u72da\u72db\u72dc\u72dd\ufa28\ufa29\u02ca\u02cb\u02d9\u2013\u2ffb\u3007\u3400\u3401\u4db4\u4db5U1[\ue025\ue026\ue027\ue038\ue039]U2[\ue25a\ue25b\ue26c\ue26d]U3[\ue4fe\ue4ff\ue500\ue50b\ue50c]>\r\n```\r\n\r\nVery strange considering XmlReaderExtension creates a URI based off of the filepath. In theory this should be failing on project load, not during the XslTransformation task.\r\n\r\n\r\nI get this output trying to use XmlReader.Create using a StreamReader to the file.\r\n```\r\n\"C:\\src\\temp\\9-16\\11_25\\new\\???????????????'`?-?        ????U1[?????]U2[????]U3[?????]\\proj1\\proj1.csproj\" (default target) (1) ->\r\n(Foo target) ->\r\n  C:\\src\\temp\\9-16\\11_25\\new\\???????????????'`?-?       ????U1[?????]U2[????]U3[?????]\\proj1\\proj1.csproj(11,5): error MSB3704: Unable to load the specified Xslt. Could not find a part of the path 'C:\\src\\temp\\9-16\\11_25\\new\\?????????????\r\n??'`?-? ????U1[%EE%80%A5%EE%80%A6%EE%80%A7%EE%80%B8%EE%80%B9]U2[%EE%89%9A%EE%89%9B%EE%89%AC%EE%89%AD]U3[%EE%93%BE%EE%93%BF%EE%94%80%EE%94%8B%EE%94%8C]\\proj1\\transform.xslt'.\r\n\r\n    0 Warning(s)\r\n    1 Error(s)\r\n```\r\n\r\nWhat happens if I use the XmlReaderExtension in XslTransform?\r\n\r\n```\r\nDone Building Project \"C:\\src\\temp\\9-16\\11_25\\new\\???????????????'`?-?  ????U1[?????]U2[????]U3[?????]\\proj1\\proj1.csproj\" (default targets).\r\n\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n```\r\n\r\nLooks like the way XmlReaderExtension loads the URI is the proper way to load unicode characters. \r\n\r\n\r\n```\r\n                // Note: Passing in UTF8 w/o BOM into StreamReader. If the BOM is detected StreamReader will set the\r\n                // Encoding correctly (detectEncodingFromByteOrderMarks = true). The default is to use UTF8 (with BOM)\r\n                // which will cause the BOM to be added when we re-save the file in cases where it was not present on\r\n                // load.\r\n                _stream = new FileStream(file, FileMode.Open, FileAccess.Read, FileShare.Read);\r\n                _streamReader = new StreamReader(_stream, s_utf8NoBom, detectEncodingFromByteOrderMarks: true);\r\n                Encoding detectedEncoding;\r\n\r\n                // The XmlDocumentWithWithLocation class relies on the reader's BaseURI property to be set,\r\n                // thus we pass the document's file path to the appropriate xml reader constructor.\r\n                Reader = GetXmlReader(file, _streamReader, loadAsReadOnly, out detectedEncoding);\r\n\r\n\r\n...\r\n\r\n            string uri = new UriBuilder(Uri.UriSchemeFile, string.Empty) { Path = file }.ToString();\r\n\r\n\r\n            // Ignore loadAsReadOnly for now; using XmlReader.Create results in whitespace changes\r\n            // of attribute text, specifically newline removal.\r\n            // https://github.com/Microsoft/msbuild/issues/4210\r\n            XmlReader reader = new XmlTextReader(uri, input) { DtdProcessing = DtdProcessing.Ignore };\r\n\r\n```\r\n\r\nLooks like we need to replace `XmlReader.Create(filepath)` with \r\n```c#\r\nXmlReader.Create(new StreamReader(_data, new UTF8Encoding(encoderShouldEmitUTF8Identifier: false), detectEncodingFromByteOrderMarks: true))\r\n```\r\n\r\nWill get a PR up with this fix. Thanks!",
        "createdAt": "2021-09-16T18:59:11Z",
        "updatedAt": "2021-09-16T18:59:11Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "Yes, that's exactly the sort of issue error message I was seeing.",
        "createdAt": "2021-09-16T19:27:12Z",
        "updatedAt": "2021-09-16T19:27:12Z",
        "author": {
          "login": "tmeschter"
        }
      }
    ]
  }
}