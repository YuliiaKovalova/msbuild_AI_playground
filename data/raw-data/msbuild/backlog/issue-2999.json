{
  "number": 2999,
  "title": "MSbuild on .NET Core can't parse properties with commas in the values",
  "body": "### Steps to reproduce\r\n\r\nThis is on Ubuntu.\r\n\r\n```\r\ndan@danmose2:~/dotnetU$ dotnet msbuild /p:a=\"b,c\"\r\nMicrosoft (R) Build Engine version 15.5.179.9764 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\nMSBUILD : error MSB1006: Property is not valid.\r\nSwitch: c\r\n```\r\n\r\n### Expected  behavior\r\n\r\nIt accepts `/p:a=\"b,c\"` as defining a property named `a` with value `b,c`.\r\n\r\n### Actual behavior\r\n\r\nIt errors as above .  On Windows it works fine. \r\n\r\nOn Unix if I remove the comma and use a space it is fine:\r\n```\r\n\r\nFor switch syntax, type \"MSBuild /help\"\r\ndan@danmose2:~/dotnetU$ dotnet msbuild /p:a=\"b c\"\r\nMicrosoft (R) Build Engine version 15.5.179.9764 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  dotnetU -> /home/dan/dotnetU/bin/Debug/netcoreapp2.0/dotnetU.dll```\r\n```\r\n### Environment data\r\n`msbuild /version` output:\r\n\r\n```\r\ndan@danmose2:~/dotnetU$ dotnet msbuild /version\r\nMicrosoft (R) Build Engine version 15.5.179.9764 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n15.5.179.9764dan@danmose2:~/dotnetU$\r\n```\r\n\r\nOS info:\r\n\r\n```\r\ndan@danmose2:~/dotnetU$ uname -a\r\nLinux danmose2 4.4.0-43-Microsoft #1-Microsoft Wed Dec 31 14:42:53 PST 2014 x86_64 x86_64 x86_64 GNU/Linux\r\ndan@danmose2:~/dotnetU$ cat /etc/os-release\r\nNAME=\"Ubuntu\"\r\nVERSION=\"16.04.3 LTS (Xenial Xerus)\"\r\nID=ubuntu\r\nID_LIKE=debian\r\nPRETTY_NAME=\"Ubuntu 16.04.3 LTS\"\r\nVERSION_ID=\"16.04\"\r\nHOME_URL=\"http://www.ubuntu.com/\"\r\nSUPPORT_URL=\"http://help.ubuntu.com/\"\r\nBUG_REPORT_URL=\"http://bugs.launchpad.net/ubuntu/\"\r\nVERSION_CODENAME=xenial\r\nUBUNTU_CODENAME=xenial\r\ndan@danmose2:~/dotnetU$\r\n```\r\n\r\nIf applicable, version of the tool that invokes MSBuild (Visual Studio, dotnet CLI, etc):\r\n```\r\ndan@danmose2:~/dotnetU$ dotnet --version\r\n2.1.3\r\n```\r\n\r\ncc @erozenfeld ",
  "state": "CLOSED",
  "createdAt": "2018-02-15T21:43:08Z",
  "updatedAt": "2024-02-21T17:14:27Z",
  "closedAt": "2018-02-16T15:31:15Z",
  "author": {
    "login": "danmoseley"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Eugene hit this when trying to pass a parameter /p:ILLinkArgs=\"-h LdtokenTypeMethods,InstanceConstructors\"",
        "createdAt": "2018-02-15T21:44:22Z",
        "updatedAt": "2018-02-15T21:44:22Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "Similar issue is https://github.com/Microsoft/msbuild/issues/471\r\n\r\nThe workaround is to escape the surrounding quotes `dotnet msbuild /p:a=\\\"b,c\\\"`\r\n\r\nBTW, `dotnet msbuild /p:a=\"b,c\"` fails for me on Windows as well..",
        "createdAt": "2018-02-15T22:11:12Z",
        "updatedAt": "2018-02-15T22:11:12Z",
        "author": {
          "login": "ghost"
        }
      },
      {
        "body": "@kasper3 you're right, I was trying full framework MSBuild and that worked. dotnet msbuild has the same problem on Windows:\r\n```\r\nC:\\dotnet7\\1>..\\dotnet.exe msbuild /p:a=\"a,b\"\r\nMicrosoft (R) Build Engine version 15.6.54.9755 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\nMSBUILD : error MSB1006: Property is not valid.\r\nSwitch: b\r\n\r\nFor switch syntax, type \"MSBuild /help\"\r\n```\r\n\r\nUpdated title. My guess is that perhaps a bug has crept into the MSBuild command line parsing since the full framework MSBuild was last built, or perhaps it's something in the dotnet.exe parsing.",
        "createdAt": "2018-02-15T22:58:19Z",
        "updatedAt": "2018-02-15T22:58:19Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "Command line parsing is sadly different between .NET Core and full framework MSBuild, but there's another wrinkle in this case: shell escaping rules are very different on different platforms.\r\n\r\n```sh-session\r\nraines@raines-z220u:~$ cat show-command-line.sh \r\n#!/bin/sh\r\nxargs -0 printf '%s\\n' < /proc/$$/cmdline\r\nraines@raines-z220u:~$ ./show-command-line.sh -foo \"x\" y=\"w,z\" escaped=\\\"quotes\\\" 'singlequoted=\"doublquotes\"'\r\n/bin/sh\r\n./show-command-line.sh\r\n-foo\r\nx\r\ny=w,z\r\nescaped=\"quotes\"\r\nsinglequoted=\"doublquotes\"\r\n```\r\n\r\nSince the invoked process can't see the quotes, I don't think we can do better there.",
        "createdAt": "2018-02-15T23:08:11Z",
        "updatedAt": "2018-02-15T23:08:11Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "It's odd then that the same problem for some reason occurs on Windows.\r\n\r\nIn your example case, you can still assume `[^=]+=.+`  indicates a property and value.  The quotes have done their job, and then been stripped:\r\n\r\n```\r\ndan@danmose2:~/dotnetU$ ./showcmd.sh /p:aaa=b,c  d  /foo\r\n/bin/sh\r\n./showcmd.sh\r\n/p:aaa=b,c\r\nd\r\n/foo\r\ndan@danmose2:~/dotnetU$ ./showcmd.sh /p:aaa=\"b,c  d\" /foo\r\n/bin/sh\r\n./showcmd.sh\r\n/p:aaa=b,c  d\r\n/foo\r\n```\r\n\r\n",
        "createdAt": "2018-02-15T23:19:11Z",
        "updatedAt": "2018-02-15T23:19:11Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "Yeah, the problem is that the comma is syntactically relevant in a `/p:` parameter\r\n\r\n```\r\n  /property:<n>=<v>  Set or override these project-level properties. <n> is\r\n                     the property name, and <v> is the property value. Use a\r\n                     semicolon or a comma to separate multiple properties, or\r\n                     specify each property separately. (Short form: /p)\r\n                     Example:\r\n                       /property:WarningLevel=2;OutDir=bin\\Debug\\\r\n```\r\n\r\nSo we're parsing the string in a reasonable way, but then splitting on the comma and complaining that you didn't provide a value for the `c` property. In other words we're treating `/p:a=\"b,c\"` as equivalent to `/p:a=b /p:c` and complaining about the latter.\r\n\r\nAlso and unimportant: if you specify ` ```sh-session ` you get [syntax highlighting for unix shell sessions](https://github.com/github/linguist/blob/04e795640717460da5df9d1efab88a5f4e0ca09f/lib/linguist/languages.yml#L4291-L4302) that helps see what's command and what's output.",
        "createdAt": "2018-02-15T23:25:42Z",
        "updatedAt": "2018-02-15T23:25:42Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Ha, I never realized a comma was valid there. \r\n\r\nSo with quotes gone, you have to decide whether `/p:a=b,c=d` was originally `/p:\"a=b,c=d\"` (one property `a` with value `b,c=d`) or was originally `/p:a=\"b\",c=\"d\"` - or no quotes at all (meaning two properties). If the ambiguity only exists if you have two `=` values it's probably pretty safe to pick the first one, and the second one always has a workaround (use `/p:a=b /p:c=d`)\r\n\r\nNeither are this case though -- there is only one `=` so presumably you can unambiguosly treat everything after that as the property value.\r\n\r\nNote I discovered a workaround; MSBuild escaping works here. Comma is %2c so\r\n```\r\ndan@danmose2:~/dotnetU$ dotnet msbuild  /p:\"aaa=bbb,ccc\" /v:diag | grep \"ccc\"\r\nSwitch: ccc\r\ndan@danmose2:~/dotnetU$ dotnet msbuild  /p:\"aaa=bbb%2cccc\" /v:diag | grep \"ccc\"\r\n/usr/share/dotnet/sdk/2.1.3/MSBuild.dll /Logger:Microsoft.DotNet.Tools.MSBuild.MSBuildLogger,/usr/share/dotnet/sdk/2.1.3/dotnet.dll /m /p:aaa=bbb%2cccc /v:m /v:diag ./dotnetU.csproj\r\n                   aaa = bbb,ccc\r\n```",
        "createdAt": "2018-02-15T23:51:49Z",
        "updatedAt": "2018-02-15T23:51:49Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "I didn't either; I was getting geared up to say that this is obviously somehow different from #471 since a semicolon is significant there. Glad I double checked!\r\n\r\nEscaping the comma/semicolon is a beautiful workaround. I'm going to pull it into #471 and mark this as a duplicate.\r\n\r\nDuplicate of #471.",
        "createdAt": "2018-02-16T15:31:15Z",
        "updatedAt": "2018-02-16T15:31:15Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Another fix is https://github.com/dotnet/buildtools/pull/1917. With \"$@\" in Unix shell, it preserves spaces as well as quotes, comma etc.",
        "createdAt": "2018-02-18T18:16:45Z",
        "updatedAt": "2018-02-18T18:16:45Z",
        "author": {
          "login": "ghost"
        }
      },
      {
        "body": "@kasper3 I don't think that helps for comma/semicolon, because the problem isn't escaping the argument so that MSBuild gets it as a single string, but what we do with it after we have it.",
        "createdAt": "2018-02-20T16:16:53Z",
        "updatedAt": "2018-02-20T16:16:53Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@danmosemsft Your this comment:\r\n`Note I discovered a workaround; MSBuild escaping works here. Comma is %2c `\r\nsaved me time!!",
        "createdAt": "2018-08-31T06:11:09Z",
        "updatedAt": "2018-08-31T06:11:09Z",
        "author": {
          "login": "vikasillumina"
        }
      },
      {
        "body": "Could you follow up under https://github.com/NuGet/docs.microsoft.com-nuget/issues/1948, please, with the definite syntax to pass multiple values to `/p` on Windows with `dotnet build`?",
        "createdAt": "2021-02-06T23:29:36Z",
        "updatedAt": "2021-02-06T23:29:36Z",
        "author": {
          "login": "Piedone"
        }
      }
    ]
  }
}