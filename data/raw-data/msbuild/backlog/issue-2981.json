{
  "number": 2981,
  "title": "Process.WaitForExit() deadlocks when waiting on \"dotnet.exe build /m /nr:true\"",
  "body": "## Repro Steps\r\n1. Build and run https://github.com/mikeharder/nodereuse-waitforexit.\r\n  A. Uses `msbuild.exe` and `dotnet.exe` from `%PATH%`.\r\n2. `WaitForExit()` works fine with `msbuild.exe /m /nr:true`.\r\n3. `WaitForExit()` deadlocks with `dotnet.exe build /m /nr:true`.\r\n\r\n## Root Cause\r\n`WaitForExit()` has a bug/behavior where it will wait for all child processes to exit if the parent process output is being read asynchronously (https://stackoverflow.com/a/37983587/102052).  The workaround is to call `WaitForExit(int.MaxValue)` instead, which does *not* wait for the child processes to exit.\r\n\r\n## Conclusion\r\nI created this issue for MSBuild since the behavior is inconsistent between `msbuild.exe` and `dotnet.exe build`.  If the only impact of this inconsistency is `WaitForExit()`, it's probably a low priority to change.  However, it could be a symptom of other possible problems with the way `dotnet.exe` child processes are created.",
  "state": "OPEN",
  "createdAt": "2018-02-09T23:48:43Z",
  "updatedAt": "2024-07-24T14:31:33Z",
  "closedAt": null,
  "author": {
    "login": "mikeharder"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "MichalPavlik"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Hello, I hit a bug similar to what I described in https://github.com/dotnet/runtime/issues/41752 and I think this is due to this issue.",
        "createdAt": "2021-04-12T22:23:38Z",
        "updatedAt": "2021-04-12T22:23:38Z",
        "author": {
          "login": "Kuinox"
        }
      },
      {
        "body": "The `Process` class creates pipes for stderr/stdout.\r\nThese pipes are wrapped in a FileStream then in a StreamWriter/Reader, then in an `AsyncStreamReader`.\r\nNow, what the deadlock is waiting for ? \r\nWaitForExit() => WaitForExit(Timeout.Infinite) => WaitForExitCore(Timeout.Infinite)\r\nhttps://github.com/dotnet/runtime/blob/main/src/libraries/System.Diagnostics.Process/src/System/Diagnostics/Process.Windows.cs#L186\r\nWaitForExitCore, on Windows, wait on the task `EOF`, this Task is in fact the background read Task of the AsyncStreamReader.\r\nThis background task will stop when the Pipe is closed:  \r\nhttps://github.com/dotnet/runtime/blob/main/src/libraries/System.Diagnostics.Process/src/System/Diagnostics/AsyncStreamReader.cs#L96\r\n\r\nSo the issue is that we are waiting a stdout/stderr Pipe that won't close, the child process itself is gone.",
        "createdAt": "2021-04-13T09:10:47Z",
        "updatedAt": "2021-04-13T09:10:47Z",
        "author": {
          "login": "Kuinox"
        }
      },
      {
        "body": "Reopening since #10297 had to be reverted: https://github.com/dotnet/msbuild/pull/10395 ",
        "createdAt": "2024-07-17T14:45:18Z",
        "updatedAt": "2024-07-17T14:45:18Z",
        "author": {
          "login": "akoeplinger"
        }
      },
      {
        "body": "Like I commented in the initial PR, I think the ideal way is to fix the root bug, the issue where I reported this bug on the runtime repo https://github.com/dotnet/runtime/issues/51277 have been in `needs-further-triage` for 3 years. \r\n",
        "createdAt": "2024-07-17T15:04:40Z",
        "updatedAt": "2024-07-17T15:04:40Z",
        "author": {
          "login": "Kuinox"
        }
      },
      {
        "body": "Yes, I would like to have a fix in runtime, but the workaround you proposed was simple and it worked when I tried it. I decided it would be faster to use it now without waiting for runtime patch. Unfortunately, there are some consequences I didn't predict. ",
        "createdAt": "2024-07-18T08:46:07Z",
        "updatedAt": "2024-07-18T08:46:07Z",
        "author": {
          "login": "MichalPavlik"
        }
      },
      {
        "body": ">  but the workaround you proposed was simple and it worked when I tried it\r\n\r\nI did warn it right below the workaround that it would truncate the output.  \r\n\r\n>  without waiting for runtime patch\r\n\r\nWell if nobody triage the issue I don't think the patch will be done anytime soon.",
        "createdAt": "2024-07-18T09:57:43Z",
        "updatedAt": "2024-07-18T09:57:43Z",
        "author": {
          "login": "Kuinox"
        }
      }
    ]
  }
}