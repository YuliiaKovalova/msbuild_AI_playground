{
  "number": 3412,
  "title": "WriteCodeFragment doesn't allow non-string parameters",
  "body": "### Steps to reproduce\r\n\r\nEither include a project sample, attach a zipped project, or provide IDE / CLI steps to create the project and repro the behaviour. Example of a project sample:\r\n\r\n`$ dotnet new classlib`\r\n\r\nProject file\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netstandard2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  \r\n  <Target Name=\"_ComputeAssemblyInfoAttributes\"\r\n          BeforeTargets=\"GetAssemblyAttributes\">\r\n    <ItemGroup>\r\n      <AssemblyAttribute Include=\"System.CLSCompliant\">\r\n        <_Parameter1>true</_Parameter1>\r\n      </AssemblyAttribute>\r\n      <AssemblyAttribute Include=\"System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute\">\r\n        <_Parameter1>System.Runtime.InteropServices.DllImportSearchPath.AssemblyDirectory | System.Runtime.InteropServices.DllImportSearchPath.System32</_Parameter1>\r\n      </AssemblyAttribute>\r\n    </ItemGroup>\r\n  </Target>\r\n\r\n</Project>\r\n```\r\n\r\nDirectory contents:\r\n```\r\n/\r\n- Class1.cs\r\n```\r\n\r\nCommand line\r\n```\r\ndotnet build\r\n```\r\n### Expected  behavior\r\nA successful build with the CLSCompliant and DefaultDllImportSearchPaths assembly attributes applied correctly.\r\n\r\n### Actual behavior\r\nThe generated code can't compile:\r\n```C#\r\n[assembly: System.CLSCompliant(\"true\")]\r\n[assembly: System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute(\"System.Runtime.InteropServices.DllImportSearchPath.AssemblyDirectory | System.Run\" +\r\n\"time.InteropServices.DllImportSearchPath.System32\")]\r\n```\r\n\r\n```\r\nobj\\Debug\\netstandard2.0\\MSBuildBug.AssemblyInfo.cs(10,32): error CS1503: Argument 1: cannot convert from 'string' to 'bool' [F:\\DotNetTest\\MSBuildBug\\MSBuildBug.csproj]\r\nobj\\Debug\\netstandard2.0\\MSBuildBug.AssemblyInfo.cs(11,80): error CS1503: Argument 1: cannot convert from 'string' to 'System.Runtime.InteropServices.DllImportSearchPath' [F:\\DotNetTest\\MSBuildBug\\MSBuildBug.csproj]\r\n```\r\n\r\n### Environment data\r\n`msbuild /version` output:\r\n\r\nOS info:\r\n\r\nIf applicable, version of the tool that invokes MSBuild (Visual Studio, dotnet CLI, etc):\r\n\r\n```\r\n dotnet --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.300\r\n Commit:    adab45bf0c\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.300\\\r\n```",
  "state": "CLOSED",
  "createdAt": "2018-06-14T15:13:42Z",
  "updatedAt": "2024-02-21T17:12:44Z",
  "closedAt": "2019-08-15T20:02:06Z",
  "author": {
    "login": "eerhardt"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Duplicate / related to https://github.com/Microsoft/msbuild/issues/2281?\r\nI'd still have a working proof-of-concept implementation as per https://github.com/Microsoft/msbuild/issues/2281#issuecomment-358730169 ",
        "createdAt": "2018-06-14T21:12:10Z",
        "updatedAt": "2018-06-14T21:12:10Z",
        "author": {
          "login": "dasMulli"
        }
      },
      {
        "body": "Yea, looks like a dupe .  Maybe @AndyGerlicher would reconsider re-opening #2281.\r\n\r\nMy scenario is a bit more complicated than normal, and more complicated than described above. I'm converting dotnet/corefx to use SDK projects. We currently have our own [GenerateAssemblyInfo target](https://github.com/dotnet/buildtools/blob/d21b572f15e2dcf7a67a43c77fb0b5a5e7d9aaf4/src/Microsoft.DotNet.Build.Tasks/PackageFiles/versioning.targets#L55) in dotnet/buildtools. And we build a lot of different kinds of assemblies in the repo (ref assemblies, facades, netfx, uap, netstandard, netcoreapp, etc). The rules for when to apply `CLSCompliant`, `ComVisible`, `DefaultDllImportSearchPathsAttribute`, and `AssemblyFlags` attributes to an assembly aren't always simple, and are best kept in a centralized place.\r\n\r\nFor now, I've opted to use the SDK's GenerateAssemblyInfo target when possible. But for the attributes that require non-strings, I [write an extra AssemblyInfo file](https://github.com/dotnet/buildtools/pull/2068/files#diff-c81aef7eb4229aaa9713ba32223eec93R34).",
        "createdAt": "2018-06-15T14:29:07Z",
        "updatedAt": "2018-06-15T14:29:07Z",
        "author": {
          "login": "eerhardt"
        }
      },
      {
        "body": "I have felt your _pain_ @eerhardt. I've had many similar complexities in building multi-target libraries. IMHO, your scenario is not all the complicated at all and is completely reasonable to me. The solution to this problem isn't all that hard to implement either. We just need a way to tell MSBuild to use the input we provide verbatim without any escaping. If it's wrong, it's on us - the authors. As @dasMulli  has proven, this capability could be shipped in an hour and make the rest of our lives a lot easier. I'm not sure why there is so much resistance to such a simple change that has obvious benefit.",
        "createdAt": "2019-08-15T19:27:38Z",
        "updatedAt": "2019-08-15T19:27:38Z",
        "author": {
          "login": "commonsensesoftware"
        }
      },
      {
        "body": "Duplicate of #2281 ",
        "createdAt": "2019-08-15T20:02:06Z",
        "updatedAt": "2019-08-15T20:02:06Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}