{
  "number": 3140,
  "title": "MSBuild should allow CI tools to isolate invocations",
  "body": "To be robust CI tools need to keep build/test processes from interfering with each other:\r\n* Cleanup left over processes from old runs\r\n* Kill process trees after a timeout\r\n\r\nThe way I have implemented this is to (pseudo code):\r\n```\r\n// Launch process with CREATE_SUSPENDED\r\n...\r\n\r\n// Setup sandbox job object\r\nHANDLE SandboxJob = CreateJobObjectW(nullptr, JobName);\r\nAssignProcessToJobObject(SandboxJob, pi.hProcess);\r\n\r\nJOBOBJECT_EXTENDED_LIMIT_INFORMATION LimitInfo;\r\nLimitInfo.BasicLimitInformation.LimitFlags |= JOB_OBJECT_LIMIT_KILL_ON_JOB_CLOSE;\r\nSetInformationJobObject(Job, JobObjectExtendedLimitInformation, &LimitInfo, sizeof(LimitInfo));\r\n\r\nResumeThread(pi.hThread);\r\n// Let process run until exit\r\n...\r\n\r\n// Cleanup any processes left in job\r\nTerminateJobObject(SandboxJob, 255);\r\n```\r\n\r\nThe problem you run into with MSBuild is that even if you specify `/nodeReuse:false` it will still share nodes between MSBuild.exe invocations.\r\n\r\n### Current  behavior\r\n```\r\nProcess             Job Object\r\nMSBuild.exe         Build 1\r\n    MSBuild.exe     Build 1\r\n    MSBuild.exe     Build 1\r\n    MSBuild.exe     Build 1\r\n    MSBuild.exe     Build 1\r\nMSBuild.exe         Build 2   < Uses nodes created in Build 1\r\n```\r\nAfter the first MSBuild.exe exits all nodes will also be killed and the second build will fail with:\r\n`MSBUILD : error MSB4166: Child node \"7\" exited prematurely`\r\n\r\n### Proposed behavior\r\nTo workaround this I previously injected code into the build process to make the MSBuild communication pipes unique. This has worked well, but the solution is problematic and prone to break as APIs and software evolve.\r\n\r\nA relatively simple fix for this would be to allow the CI tool to make the communication pipes unique. See: https://github.com/Malterlib/msbuild/commit/079b2e1abf5a0fdb058e0d287bf6a86730d49438\r\n```\r\nProcess             Job Object\r\nMSBuild.exe         Build 1    < CI tool have set a unique MSBUILD_PIPE_NAME for this job object\r\n    MSBuild.exe     Build 1\r\n    MSBuild.exe     Build 1\r\n    MSBuild.exe     Build 1\r\n    MSBuild.exe     Build 1\r\nMSBuild.exe         Build 2    < CI tool have set a unique MSBUILD_PIPE_NAME for this job object\r\n    MSBuild.exe     Build 2\r\n    MSBuild.exe     Build 2\r\n    MSBuild.exe     Build 2\r\n    MSBuild.exe     Build 2\r\n```\r\nAnother option could be to exclude node reuse if you detect that the other node is inside another job object.\r\n",
  "state": "CLOSED",
  "createdAt": "2018-03-27T19:04:40Z",
  "updatedAt": "2024-02-21T17:13:54Z",
  "closedAt": "2018-04-05T16:37:24Z",
  "author": {
    "login": "erikolofsson"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "MSBuild 15.7"
  },
  "comments": {
    "nodes": [
      {
        "body": "I just filed #3137 to propose adding a different environment variable to the node handshake; I don't see a reason not to add another new environment variable. I might choose a name more like `MSBUILD_ISOLATION_KEY`.\r\n\r\n> The problem you run into with MSBuild is that even if you specify `/nodeReuse:false` it will still share nodes between MSBuild.exe invocations.\r\n\r\nUnder what circumstances are you seeing this? With what version(s) of MSBuild? We used to always use existing worker nodes (and possibly steal from another entry-point process), even with /nr:false, but I think that should have stopped with #346.",
        "createdAt": "2018-03-28T18:14:56Z",
        "updatedAt": "2018-03-28T18:14:56Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "This is on version 15.6.82.30579\r\n\r\nThis is what the build looks like with the unpatched version:\r\n![officialmsbuild](https://user-images.githubusercontent.com/7736494/38076754-db486654-3336-11e8-8412-3a272e7d5c2a.png)\r\n\r\nNotice that the lower invocation has 14 child nodes, while the top one has 12 nodes (this is a 12 core machine). \r\n\r\nI have suspended the link process of the one with 12 nodes to force the other one to finish first. After this build finished it promptly failed the other build with:\r\n```\r\nMSBUILD : error MSB4166: Child node \"6\" exited prematurely. Shutting down. Diagnostic information may be found in files in the temporary files directory named MSBuild_*.failure.txt.\r\n```\r\n\r\nThis is the same build process with the patched MSBuild (this is on top of the vs15.7 branch):\r\n![patchedmsbuild](https://user-images.githubusercontent.com/7736494/38077020-c47b85ae-3337-11e8-84ff-5acd71f90995.png)\r\n\r\nThis time both invocations have 13 child nodes each, and after the non-suspended build has finished the other build finished successfully after it has been resumed.\r\n\r\nWhen these builds are started they start pretty much simultaneously, so possibly you have a race condition of some kind in the node reuse logic.\r\n\r\nFor a fix, consider that it should cope with nodes being terminated at any point, such as during the handshake process, so it might be a good idea to sidestep the issue by changing the pipe name instead of adding a condition in the handshake process.",
        "createdAt": "2018-03-29T08:13:06Z",
        "updatedAt": "2018-03-29T08:13:06Z",
        "author": {
          "login": "erikolofsson"
        }
      },
      {
        "body": "Ah, got it--we'll still steal nodes when starting with /nr:false. That's an easy fix that we should definitely do.",
        "createdAt": "2018-03-29T15:35:02Z",
        "updatedAt": "2018-03-29T15:35:02Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}