{
  "number": 7856,
  "title": "Project-to-project reference fails to detect correct multi-target framework if <TargetFramework> is defined",
  "body": "If a project has both `<TargetFramework>` and `<TargetFrameworks>` defined, other projects cannot correctly reference the project's target framework that is different than what `<TargetFramework>` specifies.  \r\n\r\nBuilding the project with both properties defined does correctly produce the binaries for each targeted framework.  It's just project-to-project references that doesn't work.\r\n\r\nCreate project A (ClassLibrary1) like so:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>net6.0-windows</TargetFramework>\r\n    <TargetFrameworks>net6.0;net6.0-windows</TargetFrameworks>\r\n    <ImplicitUsings>enable</ImplicitUsings>\r\n    <Nullable>enable</Nullable>\r\n  </PropertyGroup>\r\n\r\n</Project>\r\n```\r\n\r\nand project B (ClassLibrary2) like so:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>net6.0</TargetFramework>\r\n    <ImplicitUsings>enable</ImplicitUsings>\r\n    <Nullable>enable</Nullable>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <ProjectReference Include=\"..\\ClassLibrary1\\ClassLibrary1.csproj\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n\r\n```\r\n\r\nProject B (ClassLibrary2) will fail to build with the following error:\r\n\r\n```\r\nProject '..\\ClassLibrary1\\ClassLibrary1.csproj' targets 'net6.0-windows'. It cannot be referenced by a project that targets '.NETCoreApp,Version=v6.0'.\tClassLibrary2\tC:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\MSBuild\\Current\\Bin\\amd64\\Microsoft.Common.CurrentVersion.targets\t1806\t\r\n```\r\n\r\nFrom the binlog, it seems MSBuild will treat project A as having a single target framework:\r\n\r\n![image](https://user-images.githubusercontent.com/1291962/181686955-5442ded6-a2b4-4788-a8ca-bc37c885c08b.png)\r\n\r\nIf I remove `<TargetFramework>` in project A, then MSBuild correctly treats project A as having multiple target frameworks:\r\n\r\n![image](https://user-images.githubusercontent.com/1291962/181687864-5fb79def-c3bf-4009-8588-a0c748ac7e1d.png)\r\n\r\n",
  "state": "OPEN",
  "createdAt": "2022-07-29T05:20:46Z",
  "updatedAt": "2025-04-06T13:45:54Z",
  "closedAt": null,
  "author": {
    "login": "jonathanou"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "triaged",
    "Area: BuildCheck"
  ],
  "comments": {
    "nodes": [
      {
        "body": "> From the binlog, it seems MSBuild will treat project A as having a single target framework\r\n\r\nYes, and that's the expected behavior! Do you need to specify singular `TF` when you already specified `TFS`?",
        "createdAt": "2022-07-29T10:22:15Z",
        "author": {
          "login": "Nirmal4G"
        }
      },
      {
        "body": ">Do you need to specify singular TF when you already specified TFS?\r\n\r\nMy company's build infrastructure specifies a default `TF` via `Directory.Build.props` file, so I am not in control of `TF` having a value that seems to contradict `TFS`.\r\n\r\nTo me, it seems even if `TFS` conflicts with `TF`, `TFS` should take precedence?  Certainly when I build the project, `TFS` overrides `TF` as expected, as I see multiple binaries being built.",
        "createdAt": "2022-07-29T11:07:04Z",
        "author": {
          "login": "jonathanou"
        }
      },
      {
        "body": "When you build the project `ClassLibrary1` separately, `TFS` takes precedence and multi-build comes into play and the inner build replaces the `TF` specified in the project file, even if `TF` is some garbage value. It builds and it produces multiple outputs.\r\n\r\nBut when using project reference, the resolution logic thinks it's a single target build because `TF` takes precedence there. Yes, this is more of a design issue than an implementation bug. I don't know if the team would allow the change since it's a **behavior** change, and a huge breaking change at that.\r\n\r\nIn the meantime, the specific problem with your setup considering the current project reference behavior is that you're trying to reference `Windows`-specific implementation to a cross-platform library which is not allowed. If you're expecting the project to build as `net6.0` instead of `net6.0-windows`, you can modify the `ClassLibrary2` project file as shown below...\r\n\r\n```xml\r\n<ProjectReference Include=\"..\\ClassLibrary1\\ClassLibrary1.csproj\" SetTargetFramework=\"TargetFramework=$(TargetFramework)\" />\r\n```",
        "createdAt": "2022-07-29T14:06:51Z",
        "author": {
          "login": "Nirmal4G"
        }
      },
      {
        "body": ">If you're expecting the project to build as net6.0 instead of net6.0-windows, you can modify the ClassLibrary2 project file as shown below...\r\n\r\nThanks for the tip!  While it works, the disadvantage is every new project reference made to ClassLibrary1 will need this special workaround.  It doesn't \"just work\".\r\n\r\nI am currently manually unsetting the target framework in my ClassLibrary1 csproj file by doing this:\r\n\r\n```xml\r\n<TargetFramework></TargetFramework>\r\n<TargetFrameworks>net6.0;net6.0-windows</TargetFramework>\r\n```\r\nThis allows other projects to reference ClassLibrary1 normally.\r\n\r\nHowever, unsetting the target framework is also not ideal, since every project in our solution that wants to multi-target now needs to know to manually unset the target framework.\r\n\r\n>But when using project reference, the resolution logic thinks it's a single target build because TF takes precedence there. Yes, this is more of a design issue than an implementation bug. I don't know if the team would allow the change since it's a behavior change, and a huge breaking change at that.\r\n\r\nIn addition to the build preferring `TFS` over `TF`, the Visual Studio UI also shows `TFS` over `TF` if both are defined.  Here is the  ClassLibrary1 properties UI:\r\n\r\n![image](https://user-images.githubusercontent.com/1291962/181803088-6fc9d859-51bb-4f43-b4b9-ce10940057c9.png)\r\n\r\nIt just seems to be that if both `TF` and `TFS` are defined, `TFS` generally trumps `TF`.  I feel like the current project reference behavior preferring `TF` over `TFS` seems inconsistent with how other areas of MSBuild works.  \r\n\r\nHopefully changing the project reference behavior can be considered!",
        "createdAt": "2022-07-29T16:38:36Z",
        "author": {
          "login": "jonathanou"
        }
      },
      {
        "body": "IMO, The precedence of `TFS` over `TF` should be consistent. I'm actually in favor of making the `ProjectReference`-protocol to support multi-target resolution even if a singular target has already been defined. But  it comes with its own set of problems; not that we can't solve it.\n\n> However, unsetting the target framework is also not ideal, since every project in our solution that wants to multi-target now needs to know to manually unset the target framework.\n\nI get it but understand that if `TFS` takes precedence always, setting the `TF` centrally doesn't make all the projects build to that. It'll build for all targets and that might take up your build time.\n\nFrom what I understand, the role of the `TF` in your setup is more like a default target rather than a single target. If that's the case and you have a mix of projects that have both `TF` and `TFS`, rename all `TF` to `TFS`. Even a single target can be specified in `TFS`. There's a slight overhead involved in build time but it's worth in maintaining the source better.",
        "createdAt": "2022-07-30T03:49:27Z",
        "author": {
          "login": "Nirmal4G"
        }
      },
      {
        "body": ">If that's the case and you have a mix of projects that have both TF and TFS, rename all TF to TFS.  Even a single target can be specified in TFS. \r\n\r\nThat's a good point!  I did not think about that.  One potential problem I can currently think of is if any project decides to override the default target framework with a different, single, `TF`, they must know to put the override in `TFS`, not `TF`.  But the good thing is modifying `TF` through Visual Studio project UI will correctly modify `TFS` in the csproj file (since Visual Studio prefers `TFS` if it is defined in the project).\r\n\r\nI think a lot of these problems could be avoided if `TFS` is used as the only way to specify `TF`, even if the project only intends to target a single `TF`.  But I guess it's probably too late to remove support for `<TargetFramework>` altogether at this point...",
        "createdAt": "2022-07-30T09:02:59Z",
        "author": {
          "login": "jonathanou"
        }
      },
      {
        "body": "I think they left `TF` alone since a lot of application projects use single target. Only libraries use multiple targets. As I already mentioned, it has a performance penalty, minuscule but still an overhead to be considered, especially in large solutions (> 100 single target projects). Anyway, it's a trade-off that falls on us, maintainers!",
        "createdAt": "2022-07-30T09:16:56Z",
        "author": {
          "login": "Nirmal4G"
        }
      },
      {
        "body": "Project files should specify only `TargetFramework` or `TargetFrameworks`, and not both.\r\n\r\n> My company's build infrastructure specifies a default `TF` via `Directory.Build.props` file, so I am not in control of `TF` having a value that seems to contradict `TFS`.\r\n\r\nUnsetting via `<TargetFramework />` is probably the best you can do here.\r\n\r\n> I think a lot of these problems could be avoided if `TFS` is used as the only way to specify `TF`, even if the project only intends to target a single `TF`. But I guess it's probably too late to remove support for `<TargetFramework>` altogether at this point...\r\n\r\nThere is also a performance implication: the \"outer\" build triggered when there are only `TargetFrameworks` collects information about the individual `TargetFrameworks` to build, where the \"inner\" build of a single TF doesn't have to care about that.\r\n\r\nWe spent some time in team triage today trying to think of a way to warn or message the \"TF xor TFs\" requirement but didn't come up with anything that sounded particularly great.",
        "createdAt": "2022-08-04T16:44:49Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> We spent some time in team triage today trying to think of a way to warn or message the \"TF xor TFs\" requirement but didn't come up with anything that sounded particularly great.\r\n\r\n@dsplaisted I think the SDK team should come up with something, be it a warning or `ProjectReference` behaviour change. Any solution is fine as long as it's understandable from User PoV.",
        "createdAt": "2022-08-04T16:57:01Z",
        "author": {
          "login": "Nirmal4G"
        }
      },
      {
        "body": "@rainersigwald a simple verification of unnecessary single TF value in TFs property could be:\r\n\r\n```xml\r\n<Target Name=\"ValidateTargetFrameworks\" AfterTargets=\"_ComputeTargetFrameworkItems\" Condition=\" '$(TargetFrameworks)' != '' \">\r\n  <Warning Condition=\"'@(_TargetFramework->Count())' &lt;= 1\"\r\n           File=\"$(MSBuildProjectFile)\"\r\n           Text=\"&lt;TargetFrameworks&gt; property requires multiple frameworks. For a single value use &lt;TargetFramework&gt;\" />\r\n  <Warning Condition=\"'@(_TargetFramework->Count())' != '@(_TargetFrameworkNormalized->Count())' \"\r\n           File=\"$(MSBuildProjectFile)\"\r\n           Text=\"Remove duplicates from &lt;TargetFrameworks&gt;\" />\r\n</Target>\r\n```\r\n\r\nDo you think it could be shipped as a MSBuild change wave feature?",
        "createdAt": "2024-04-02T09:44:36Z",
        "author": {
          "login": "stan-sz"
        }
      },
      {
        "body": "That sounds like a breaking change (adding a warning) for a legal situation (doing a \"foreach\" with one item isn't ideal but doesn't cause very many problems). I would expect a very high bar for such a thing. (Adding it as a BuildCheck/analyzer would make sense to me.)",
        "createdAt": "2024-04-04T14:30:57Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "In one C# project, I deliberately set `TargetFrameworks` with only one framework because I wanted to Directory.Build.props to read `TargetFramework` in the inner build and set `OutputPath` and some other things.",
        "createdAt": "2024-04-04T14:39:16Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "> That sounds like a breaking change (adding a warning) for a legal situation (doing a \"foreach\" with one item isn't ideal but doesn't cause very many problems). I would expect a very high bar for such a thing. (Adding it as a BuildCheck/analyzer would make sense to me.)\r\n\r\nPinning your comment to #1777 :)",
        "createdAt": "2024-04-05T06:35:23Z",
        "author": {
          "login": "stan-sz"
        }
      },
      {
        "body": "> Project files should specify only `TargetFramework` or `TargetFrameworks`, and not both.\n\nThen the tooling should enforce this, not act in a completely illogical way of silently ignoring `TFS` when both it and `TF` are provided. If `TFS` took precedence over `TF` (as would make sense per the principle of least astonishment), or `TF` was merged into `TFS`, then this would not be a problem.\n\nIf implementing the aforementioned logical behaviour is a breaking change, then add a flag we can set in `Directory.Build.props` or our `csproj`s to opt in to that behaviour. But **don't** leave this known issue to sit for 2+ years without any action being taken.",
        "createdAt": "2024-12-05T13:18:07Z",
        "author": {
          "login": "IanKemp"
        }
      },
      {
        "body": "@IanKemp `TFS` cannot be given precedence over `TF` since it would result in an infinite recursive loop. The best way at this time is to ignore the `TF` in the project file body as long as `TFS` is provided anywhere.\n\nI currently do this: <https://github.com/dotnet/msbuild/issues/9216#issuecomment-2781422309>\n\nYou can retro-fit it into `Directory.Build.props` or `CustomAfterDirectoryBuildProps` and `$(BeforeMicrosoftNETSdkTargets)` without modifying inbox props/targets.",
        "createdAt": "2025-04-06T13:45:08Z",
        "author": {
          "login": "Nirmal4G"
        }
      }
    ]
  }
}