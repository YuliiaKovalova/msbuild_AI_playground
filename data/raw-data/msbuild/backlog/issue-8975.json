{
  "number": 8975,
  "title": "Treat canceled tasks as failed even if they returned true",
  "body": "If a build is canceled and a task is ICancelableTask then MSBuild calls Cancel() on it\r\n\r\nhttps://github.com/dotnet/msbuild/blob/92f3600820b5d5da87e4a0dcf141c709d0817a03/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs#L612\r\n\r\nThe idea is that the task can finish more quickly, perhaps cleaning up intermediate files. \r\n\r\nHowever there are several possibilities\r\n1. task does not implement ICanceleableTask -- correct\r\n1. task finishes early without completing its work, does any cleanup and returns false. -- correct and ideal\r\n1. task ignores cancelation and returns normally -- possibly unnecessarily slow\r\n1. task ignores cancelation because the expensive work was already completed and it's just finishing up (eg its setting its output parameters or logging something) and returns success -- harmless\r\n1. task finishes without completing its work, possibly does not clean up, and returns true -- clearly a bug\r\n\r\nIdeally we would know if a task wasn't handling cancelation optimally. To do this we might consider changing to treating every canceled task as a failure. \r\n\r\nThis would mean the last 3 cases would all begin to fail. That should not be a breaking change, because the build is guaranteed to be failing now as it began cancelation by definition. However it will cause the task to show as a failure in the console and the log. And if we see the task didn't clean up, we know for sure that it has a bug, as we know that it received the cancelation signal before it returned.\n\nEdit: conversely this would mean tasks need not return any particular code in the cancellation case. Hmm, I have mixed feelings whether this change would give much benefit.\r\n\r\nThe change would be here, something like changing to `taskReturnValue == TaskInstanceExecute() && !_cancelled;`\r\nhttps://github.com/dotnet/msbuild/blob/92f3600820b5d5da87e4a0dcf141c709d0817a03/src/Build/BackEnd/TaskExecutionHost/TaskExecutionHost.cs#L561\r\n\r\nAside -- if we could go back in time, we would certainly have made ITask.Execute() void returning, and consider the task a success iff no errors were logged and no attempt was made to cancel it.\r\n\r\nre https://github.com/dotnet/msbuild/pull/8951#issuecomment-1608109869",
  "state": "OPEN",
  "createdAt": "2023-06-28T18:32:46Z",
  "updatedAt": "2024-01-31T08:13:58Z",
  "closedAt": null,
  "author": {
    "login": "danmoseley"
  },
  "labels": [
    "backlog",
    "needs-design",
    "Area: Engine",
    "Priority:2",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "As noted above perhaps this is more a point of discussion than something I'm arguing for one way or another... ",
        "createdAt": "2023-06-29T22:07:25Z",
        "updatedAt": "2023-06-29T22:07:25Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "@rainersigwald, @baronfel could you please take a look at this suggestion?",
        "createdAt": "2023-07-04T14:08:02Z",
        "updatedAt": "2023-07-04T14:08:02Z",
        "author": {
          "login": "AR-May"
        }
      },
      {
        "body": "I am in favor of the suggestion, but would be OK if we improve the cancellation-logging experience some other way.",
        "createdAt": "2023-07-11T14:12:10Z",
        "updatedAt": "2023-07-11T14:12:10Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> as we know that it received the cancelation signal before it returned.\r\n\r\nThis stands out as potentially concerning due to timing issues.\r\n\r\nThe proposal makes it impossible to implement `ICanceleableTask` in a definitively-correct manner, as there is a period of time where it's impossible for the implementer to distinguish between scenarios (2) and (3).",
        "createdAt": "2023-07-11T14:43:25Z",
        "updatedAt": "2023-07-11T14:43:25Z",
        "author": {
          "login": "sharwell"
        }
      },
      {
        "body": "Couldn't we have a unique error code for \"cancellation occurred mid-task\" that we fire iff the task reported success?",
        "createdAt": "2023-07-11T15:16:26Z",
        "updatedAt": "2023-07-11T15:16:26Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}