{
  "number": 2319,
  "title": "Use the LargeAddressAware NuGet package to set the LARGEADDRESSAWARE flag",
  "body": "Consider using the LargeAddressAware Nuget package:\r\nhttps://github.com/KirillOsenkov/LargeAddressAware\r\n\r\nIt doesn't need Editbin.exe as it patches the byte in the PE header. I've seen problems in MSBuild build process stemming from Editbin.exe either being not found or some such.\r\n\r\nAdditionally, editbin.exe is not incremental, it will touch the file even if the bit is already set. The SetLargeAddressAware tool is incremental and won't touch the file if it doesn't need patching. This is much better for build incrementality. \r\n\r\nTo use, just add the LargeAddressAware NuGet package version 1.0.1. Add the .targets file from the package to the build and it will inject itself after `CoreCompile`.",
  "state": "CLOSED",
  "createdAt": "2017-07-19T06:23:17Z",
  "updatedAt": "2024-02-21T17:17:53Z",
  "closedAt": "2018-08-09T20:16:25Z",
  "author": {
    "login": "KirillOsenkov"
  },
  "labels": [
    "Area: Our Own Build",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "@rainersigwald ",
        "createdAt": "2017-07-19T06:23:26Z",
        "updatedAt": "2017-07-19T06:23:26Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "Sounds like a fine idea to me, though I feel a need to defend the status quo. Our implementation should only ever warn if editbin.exe isn't available (and even that is suppressed in our selfhost script), and it has reasonable incremental behavior (it might touch the file even though it's already marked correctly, but only if other parts of the build also would).",
        "createdAt": "2017-07-19T14:56:39Z",
        "updatedAt": "2017-07-19T14:56:39Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Speaking of which. Is there a reason MSBuild.exe isn't AnyCPU with Prefer32Bit true? Such binaries are LargeAddressAware by default.",
        "createdAt": "2017-07-21T19:01:12Z",
        "updatedAt": "2017-07-21T19:01:12Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "We have a large 32 bit application (it has other 32 bit dependencies, like PDF reader) and does hit memory exceptions.  Will this help with this issue? If so, other than installing from NuGet what do we need to do to implement in a ClickOnce application?\r\nThank you",
        "createdAt": "2017-09-20T19:21:10Z",
        "updatedAt": "2017-09-20T19:21:10Z",
        "author": {
          "login": "gchq-zz"
        }
      },
      {
        "body": "Yes, it should help. Just install the NuGet package and use MSBuild logs to verify that this command is running: https://github.com/KirillOsenkov/LargeAddressAware/blob/master/LargeAddressAware.targets#L12",
        "createdAt": "2017-09-20T19:23:56Z",
        "updatedAt": "2017-09-20T19:23:56Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "Thank you for your prompt reply :-)\r\nHave installed the NuGet package and run rebuild. Where exactly am I looking (VS 2017) to confirm this is running? Nothing seems to have been updated in App.config",
        "createdAt": "2017-09-20T19:34:12Z",
        "updatedAt": "2017-09-20T19:34:12Z",
        "author": {
          "login": "gchq-zz"
        }
      },
      {
        "body": "Run `dumpbin /headers YourApp.exe` where dumpbin is in one of these locations:\r\n```\r\nC:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\VC\\Tools\\MSVC\\14.11.25503\\bin\\HostX86\\x86\\dumpbin.exe\r\nC:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\bin\\dumpbin.exe\r\n```\r\n\r\nIf the output contains the string `Application can handle large (>2GB) addresses` then you're good.",
        "createdAt": "2017-09-20T21:48:14Z",
        "updatedAt": "2017-09-20T21:48:14Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "Typical - there is DumpBin in VS 10, 11 and 12 - but not in 14.0. Can I use an older version?",
        "createdAt": "2017-09-20T21:56:22Z",
        "updatedAt": "2017-09-20T21:56:22Z",
        "author": {
          "login": "gchq-zz"
        }
      },
      {
        "body": "I ran it using DumpBin in v12 - PE Signature found | File Header Values | Optional Header Values | Section Header hash 1 | Debug Directories | Section Header hash 2 | Section Header hash 3 | Summary - no reference that I can see to 'handle large' ",
        "createdAt": "2017-09-20T22:18:15Z",
        "updatedAt": "2017-09-20T22:18:15Z",
        "author": {
          "login": "gchq-zz"
        }
      },
      {
        "body": "Just to be sure I ran rebuild again, then DumpBin.  Still no string with anything like large addresses",
        "createdAt": "2017-09-20T22:29:03Z",
        "updatedAt": "2017-09-20T22:29:03Z",
        "author": {
          "login": "gchq-zz"
        }
      },
      {
        "body": "Oh, you probably need to add this line at the very bottom of your .csproj file:\r\n```\r\n  <Import Project=\"$(MSBuildThisFileDirectory)..\\..\\..\\packages\\LargeAddressAware.1.0.1\\build\\LargeAddressAware.targets\" AND Exists('$(MSBuildThisFileDirectory)..\\..\\..\\packages\\LargeAddressAware.1.0.1\\build\\LargeAddressAware.targets')\" />\r\n```\r\n\r\nMake sure the path to LargeAddressAware.targets is correct. You can use http://msbuildlog.com to investigate the build after you've added this line.",
        "createdAt": "2017-09-20T23:16:59Z",
        "updatedAt": "2017-09-20T23:16:59Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "This was added at the time to the vbproj file\r\n\r\n``<Import Project=\"..\\packages\\LargeAddressAware.1.0.1\\build\\LargeAddressAware.targets\" Condition=\"Exists('..\\packages\\LargeAddressAware.1.0.1\\build\\LargeAddressAware.targets')\" />\r\n\r\nShould we edit this?\r\n\r\nI seem to remember that msbuildlog is not available for VB.NET projects\r\n",
        "createdAt": "2017-09-20T23:49:21Z",
        "updatedAt": "2017-09-20T23:49:21Z",
        "author": {
          "login": "gchq-zz"
        }
      },
      {
        "body": "`<Import Project=\"..\\packages\\LargeAddressAware.1.0.1\\build\\LargeAddressAware.targets\" Condition=\"Exists('..\\packages\\LargeAddressAware.1.0.1\\build\\LargeAddressAware.targets')\" />`",
        "createdAt": "2017-09-20T23:49:44Z",
        "updatedAt": "2017-09-20T23:49:44Z",
        "author": {
          "login": "gchq-zz"
        }
      },
      {
        "body": "It should work fine for VB.NET. Please use http://msbuildlog.com and inspect the build log to see if the LargeAddressAware target is running.\r\n\r\nAlternatively, just switch your assembly to AnyCPU and set Prefer32Bit to true.",
        "createdAt": "2017-09-20T23:56:47Z",
        "updatedAt": "2017-09-20T23:56:47Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "The assembly won't compile in anything other than x86 (or x64) because of CefSharp browser that requires one or the other selected...\r\n\r\nEverything is correct in the path and this works for CefSharp\r\n\r\n`<Import Project=\"..\\packages\\cef.redist.x86.3.2987.1601\\build\\cef.redist.x86.targets\" Condition=\"Exists('..\\packages\\cef.redist.x86.3.2987.1601\\build\\cef.redist.x86.targets')\" />\r\n\r\nWill look at buildlog again....\r\n`",
        "createdAt": "2017-09-21T00:02:00Z",
        "updatedAt": "2017-09-21T00:02:00Z",
        "author": {
          "login": "gchq-zz"
        }
      },
      {
        "body": "`<Import Project=\"..\\packages\\cef.redist.x86.3.2987.1601\\build\\cef.redist.x86.targets\" Condition=\"Exists('..\\packages\\cef.redist.x86.3.2987.1601\\build\\cef.redist.x86.targets')\" />`",
        "createdAt": "2017-09-21T00:02:17Z",
        "updatedAt": "2017-09-21T00:02:17Z",
        "author": {
          "login": "gchq-zz"
        }
      },
      {
        "body": "Downloaded BuildLog - tried to run MSBuild with the /bl switch, but it threw the toys out because of CefSharp  - will have another look at this in the morning - there is a large brandy (drink not a stripper) calling my name right now :-)",
        "createdAt": "2017-09-21T00:33:22Z",
        "updatedAt": "2017-09-21T00:33:22Z",
        "author": {
          "login": "gchq-zz"
        }
      },
      {
        "body": "Apart from discovering that my desk is a lot harder than my head, no luck with MSBuild  - used every switch I can think of (e.g. /p:PlatformTarget=x86) and it still insists upon 'Debug|Any CPU' and then throwing out the toys at CefSharp. Can you tell I haven't used the VS CLI before? :-)  We'll just see if the 'out of memory'  error rate for processing images drops when it's deployed out in the wild. Thank you for your patience.",
        "createdAt": "2017-09-21T21:40:22Z",
        "updatedAt": "2017-09-21T21:40:22Z",
        "author": {
          "login": "gchq-zz"
        }
      },
      {
        "body": "Now that I think about it, maybe just set the exe to AnyCPU 32-bit preferred. It's better than setting large address aware manually.",
        "createdAt": "2018-07-12T20:26:22Z",
        "updatedAt": "2018-07-12T20:26:22Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "Can't do that as it has a browser control that won't run if it's set to \r\nAny CPU\r\n\r\n\r\n\r\nFrom:   Kirill Osenkov <notifications@github.com>\r\nTo:     Microsoft/msbuild <msbuild@noreply.github.com>\r\nCc:     gchq-zz <DNottingham@HASoftware.net>, Comment \r\n<comment@noreply.github.com>\r\nDate:   07/12/2018 20:26\r\nSubject:        Re: [Microsoft/msbuild] Use the LargeAddressAware NuGet \r\npackage to set the LARGEADDRESSAWARE flag (#2319)\r\n\r\n\r\n\r\nNow that I think about it, maybe just set the exe to AnyCPU 32-bit \r\npreferred. It's better than setting large address aware manually.\r\n\u2014\r\nYou are receiving this because you commented.\r\nReply to this email directly, view it on GitHub, or mute the thread.\r\n\r\n\r\n\r\n\r\nDave P Nottingham | Business Application Developer HASoftware | HOA Manager  PO Box 34630 | Reno NV 89553 Tel +1 800 279 3074 | Direct +1 775-636-4096 | Documents@HASoftware.net Email  |  HASoftware   Disclaimer: This message is intended only for the use of the individual or entity to which it is addressed and may contain information which is privileged, confidential, proprietary, or exempt from disclosure under applicable law. If you are not the intended recipient or the person responsible for delivering the message to the intended recipient, you are strictly prohibited from disclosing, distributing, copying, or in any way using this message. If you have received this communication in error, please notify the sender and destroy and delete any copies you may have received. \r\n\r\n",
        "createdAt": "2018-07-12T20:35:22Z",
        "updatedAt": "2018-07-12T20:35:22Z",
        "author": {
          "login": "gchq-zz"
        }
      },
      {
        "body": "I mean AnyCPU *32-bit preferred*\r\nhttp://blogs.microsoft.co.il/sasha/2012/04/04/what-anycpu-really-means-as-of-net-45-and-visual-studio-11/",
        "createdAt": "2018-07-12T21:23:01Z",
        "updatedAt": "2018-07-12T21:23:01Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "I did this in https://github.com/Microsoft/msbuild/pull/2944",
        "createdAt": "2018-08-09T20:16:25Z",
        "updatedAt": "2018-08-09T20:16:25Z",
        "author": {
          "login": "jeffkl"
        }
      }
    ]
  }
}