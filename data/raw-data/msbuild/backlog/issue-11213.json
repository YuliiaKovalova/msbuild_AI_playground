{
  "number": 11213,
  "title": "TerminalLogger.WrapText: System.ArgumentOutOfRangeException: Specified argument was out of the range of valid values.",
  "body": "### Issue Description\n\nOn a `dotnet test` run on our CI, we get the following exception:\n\n```\nMSBUILD : error MSB4017: The build stopped unexpectedly because of an unexpected logger failure.\nSystem.ArgumentOutOfRangeException: Specified argument was out of the range of valid values.\n   at Microsoft.Build.Logging.TerminalLogger.TerminalLogger.WrapText(StringBuilder sb, String text, Int32 maxLength, String indent)\n   at Microsoft.Build.Logging.TerminalLogger.TerminalLogger.FormatEventMessage(String category, String subcategory, String message, String code, String file, Int32 lineNumber, Int32 endLineNumber, Int32 columnNumber, Int32 endColumnNumber, String indent)\n   at Microsoft.Build.Logging.TerminalLogger.TerminalLogger.FormatErrorMessage(BuildErrorEventArgs e, String indent)\n   at Microsoft.Build.Logging.TerminalLogger.TerminalLogger.ErrorRaised(Object sender, BuildErrorEventArgs e)\n   at Microsoft.Build.BackEnd.Logging.EventSourceSink.RaiseErrorEvent(Object sender, BuildErrorEventArgs buildEvent)\n```\n\n\n### Steps to Reproduce\n\nSteps to reproduce: \n1. Use the attached project (it's a single csproj which output a multiline text) [ConsoleApp1.zip](https://github.com/user-attachments/files/18300430/ConsoleApp1.zip)\n2. Use `cmd.exe` to be able to change the terminal width\n3. Change the terminal size via the `mode` command: `mode 2,50`\n4. Run `dotnet build` to build the attached project\n5. \ud83d\udca5 \n\n### Expected Behavior\n\nMSBuild should not throw an exception.\n\n### Actual Behavior\n\nMSBuild throws the following exception:\n\n```\nMSBUILD : error MSB4017: The build stopped unexpectedly because of an unexpected logger failure.\nSystem.ArgumentOutOfRangeException: Specified argument was out of the range of valid values.\n   at Microsoft.Build.Logging.TerminalLogger.TerminalLogger.WrapText(StringBuilder sb, String text, Int32 maxLength, String indent)\n   at Microsoft.Build.Logging.TerminalLogger.TerminalLogger.FormatEventMessage(String category, String subcategory, String message, String code, String file, Int32 lineNumber, Int32 endLineNumber, Int32 columnNumber, Int32 endColumnNumber, String indent)\n   at Microsoft.Build.Logging.TerminalLogger.TerminalLogger.FormatErrorMessage(BuildErrorEventArgs e, String indent)\n   at Microsoft.Build.Logging.TerminalLogger.TerminalLogger.ErrorRaised(Object sender, BuildErrorEventArgs e)\n   at Microsoft.Build.BackEnd.Logging.EventSourceSink.RaiseErrorEvent(Object sender, BuildErrorEventArgs buildEvent)\n```\n\n\n### Analysis\n\nLooking at the code for [`TerminalLogger.WrapText`](https://github.com/dotnet/msbuild/blob/43a24969a23bd2dd76cd26be26210e2afcd0595e/src/MSBuild/TerminalLogger/TerminalLogger.cs#L1242), the only possible cause is that the Terminal width is smaller than the indentation. I'm not sure how that happens on our CI, but in any case the TerminalLogger should be robust to this situation.\n\n### Versions & Configurations\n\n$ dotnet --version\n9.0.101\n\n$ msbuild --version\nMSBuild version 17.12.12+1cce77968 for .NET Framework\n17.12.12.57101\n\n### Similar issues\n\nI found #8913 which looks similar.",
  "state": "OPEN",
  "createdAt": "2025-01-03T14:14:48Z",
  "updatedAt": "2025-03-24T21:03:19Z",
  "closedAt": null,
  "author": {
    "login": "metoule"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "triaged",
    "Area: Terminal Logger"
  ],
  "comments": {
    "nodes": [
      {
        "body": "@metoule in general we would expect TL to be disabled in CI scenarios; can you expand a bit on how you're running that build? Maybe our detect-console-redirection-and-fall-back-to-ConsoleLogger code isn't working?\n\nBut we should investigate and fix this error regardless.",
        "createdAt": "2025-01-14T14:50:38Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald I ended up disabling TL on our CI: I discovered the issue because it's now the default on .NET9.\n\nWe're using [CircleCI](https://circleci.com/) to run our pipeline. We're simply running `dotnet` commands in their shell. Our pipeline looks like this, using CircleCI [`run` command](https://circleci.com/docs/configuration-reference/#run):\n\n```yml\n- run:\n    name: Test App\n    command: |\n      dotnet test -c Release --filter \"(TestCategory=Unit) | (TestCategory=Integration)\" all.sln\n``` \n\nI've written a quick program to print the `Console` properties when executed on our CI: \n\n```\nIn = System.IO.SyncTextReader\nInputEncoding = System.Text.UTF8Encoding+UTF8EncodingSealed\nOutputEncoding = System.Text.UTF8Encoding+UTF8EncodingSealed\nKeyAvailable = True\nOut = System.IO.TextWriter+SyncTextWriter\nError = System.IO.TextWriter+SyncTextWriter\nIsInputRedirected = False\nIsOutputRedirected = False\nIsErrorRedirected = False\nCursorSize = 100\nBackgroundColor = -1\nForegroundColor = -1\nBufferWidth = 0\nBufferHeight = 0\nWindowLeft = 0\nWindowTop = 0\nWindowWidth = 0\nWindowHeight = 0\nLargestWindowWidth = 0\nLargestWindowHeight = 0\nCursorLeft = 0\nCursorTop = 0\nTreatControlCAsInput = False\n```",
        "createdAt": "2025-01-16T08:58:48Z",
        "author": {
          "login": "metoule"
        }
      },
      {
        "body": "I discovered that I can force the TTY size via `stty`, so there's a workaround:\n\n``` \nstty cols 120\nstty rows 50\n``` \n\nThose values are then picked up by .NET.",
        "createdAt": "2025-01-16T10:53:45Z",
        "author": {
          "login": "metoule"
        }
      },
      {
        "body": "I guess CircleCI uses a pseudoterminal rather than a pipe in an attempt to make the C runtime library not use buffering in `FILE *stdout, *stderr`.\n\n[QueryIsScreenAndTryEnableAnsiColorCodes](https://github.com/dotnet/msbuild/blob/ec6b2a31a9388c298c4cab5be34ec2402372c5ce/src/Framework/NativeMethods.cs#L1580) could perhaps be changed to detect if the console is unreasonably small, and return `outputIsScreen: false` in that case.",
        "createdAt": "2025-01-16T11:50:30Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "@baronfel @MichalPavlik does `dotnet test` do a more-forced TL opt in like `run` does, that should be alleviated by https://github.com/dotnet/msbuild/pull/11016?\n\n@metoule that `stty` thing is a nice workaround!",
        "createdAt": "2025-01-16T14:51:05Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Is there a more robust fix/workaround than stty?  It doesn't work when building as part of a build-script, such as Gentoo's ebuilds.  I put that stty command into the ebuild itself, but this happens, rather expected-ly:\n\nstty: 'standard input': Inappropriate ioctl for device\n\nI imagine any other packager/installer would result in the same thing when issuing the build commands as part of a series of pipes.\n\nI hit this issue when trying to ebuild ryujinx.  Here is the [somewhat] full error log in case it helps, but this is probably already known here:\n\n * Operating System:\n *   Process Architecture: X64\n *   Processor Count: 4\n *   OS Version: Unix 6.6.18.11\n * Platform:\n *   Type: Linux\n *   Name: gentoo\n *   Version: 2.14\n * Dotnet SDK:\n *   Version: 9.0.0\n *   Framework Description: .NET 9.0.0\n * Dotnet Runtime:\n *   Identifier: linux-x64\n *   Process Name: dotnet\n *   Process File Name: /opt/dotnet-sdk-bin-9.0/dotnet\n *   Runtime Directory: /opt/dotnet-sdk-bin-9.0/shared/Microsoft.NETCore.App/9.0.0/\n * Running \"dotnet-pkg-base_restore\" for project: \"Ryujinx.csproj\" ...\n * /opt/dotnet-sdk-bin-9.0/dotnet restore --runtime linux-x64 --source /var/tmp/portage/games-emulation/ryujinx-1.2.82/temp/nugets -maxCpuCount:4 src/Ryujinx/Ryujinx.csproj\nMSBUILD : error MSB4017: The build stopped unexpectedly because of an unexpected logger failure.\nMicrosoft.Build.Exceptions.InternalLoggerException: The build stopped unexpectedly because of an unexpected logger failure.\n ---> System.ArgumentOutOfRangeException: Specified argument was out of the range of valid values.\n   at Microsoft.Build.Logging.TerminalLogger.TerminalLogger.WrapText(StringBuilder sb, String text, Int32 maxLength, String indent)\n   at Microsoft.Build.Logging.TerminalLogger.TerminalLogger.FormatEventMessage(String category, String subcategory, String message, String code, String file, Int32 lineNumber, Int32 endLineNumber, Int32 columnNumber, Int32 endColumnNumber, String indent)\n   at Microsoft.Build.Logging.TerminalLogger.TerminalLogger.FormatErrorMessage(BuildErrorEventArgs e, String indent)\n   at Microsoft.Build.Logging.TerminalLogger.TerminalLogger.ErrorRaised(Object sender, BuildErrorEventArgs e)\n   at Microsoft.Build.BackEnd.Logging.EventSourceSink.RaiseErrorEvent(Object sender, BuildErrorEventArgs buildEvent)\n   --- End of inner exception stack trace ---\n   at Microsoft.Build.Exceptions.InternalLoggerException.Throw(Exception innerException, BuildEventArgs e, String messageResourceName, Boolean initializationException, String[] messageArgs)\n   at Microsoft.Build.BackEnd.Logging.EventSourceSink.RaiseErrorEvent(Object sender, BuildErrorEventArgs buildEvent)\n   at Microsoft.Build.BackEnd.Logging.EventSourceSink.RaiseErrorEvent(Object sender, BuildErrorEventArgs buildEvent)",
        "createdAt": "2025-03-06T19:05:25Z",
        "author": {
          "login": "gittsumm"
        }
      },
      {
        "body": "@gittsumm Adding an explicit `-tl:off` to your build command line should always work around this for `build` and `restore`, not sure about `test`.",
        "createdAt": "2025-03-06T19:25:01Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald Thank you very much!  That worked.",
        "createdAt": "2025-03-06T21:47:31Z",
        "author": {
          "login": "gittsumm"
        }
      },
      {
        "body": "We were getting the problem in CircleCI as outlined by a couple other people, and fixed it by turning off the new logger with an environment variable as outlined [here by Microsoft](https://learn.microsoft.com/en-us/dotnet/core/compatibility/sdk/9.0/terminal-logger).\n\nSimply set environment variable `MSBUILDTERMINALLOGGER` to `off`.\n\nIn CircleCI, this can be [done at various levels](https://circleci.com/docs/set-environment-variable/), we set it at the [whole project level](https://circleci.com/docs/set-environment-variable/#set-an-environment-variable-in-a-project).",
        "createdAt": "2025-03-24T16:57:04Z",
        "author": {
          "login": "ArmandRedgate"
        }
      },
      {
        "body": "If we think someone is using a small pseudoterminal (meaning 0/nonsensical dimensions) we could just allow TL and assume a default width of 80/120 characters? ",
        "createdAt": "2025-03-24T18:59:27Z",
        "author": {
          "login": "baronfel"
        }
      },
      {
        "body": "Either that or include a clause like that in the check-to-enable code, which I think would be preferred for the CircleCI case.",
        "createdAt": "2025-03-24T19:22:13Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "The exception is caused by this line:\n\n```c#\nint length = Math.Min(maxLength - indent.Length, text.Length - start);\n```\n\nWouldn't it be easier to just not call `TerminalLogger.WrapText` whenever `maxLength - indent.Length` is strictly negative?\n\nIt would mean replacing \n\n```c#\nif (indent.Length + line.Length > Terminal.Width) // custom wrapping with indentation\n```\n\nwith \n\n```c#\nif (Terminal.Width > indent.Length && indent.Length + line.Length > Terminal.Width) // custom wrapping with indentation\n```",
        "createdAt": "2025-03-24T21:03:18Z",
        "author": {
          "login": "metoule"
        }
      }
    ]
  }
}