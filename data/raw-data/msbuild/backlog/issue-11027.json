{
  "number": 11027,
  "title": "$(MSBuildRuntimeType) mismatch when multi-target building",
  "body": "### Issue Description\n\nI read `$(MSBuildRuntimeType)` when running MSBuild Task and it is value as `Core` when I build .net-framework assembly\n\n\n\n\n\n### Steps to Reproduce\n\n> All the following is contained in new .csproj template style\n\nwhen the framework is `<TargetFrameworks>net8.0</TargetFrameworks>`, `$(MSBuildRuntimeType)` is `Core` and correct.\n\n![Image](https://github.com/user-attachments/assets/ceec79c5-9796-4eec-ae7c-d75316add08b)\n\n> The log printed the value of MSBuildRuntimeType passed to the MSBuildTask\n\nwhen the framework is `<TargetFrameworks>net462</TargetFrameworks>`, `$(MSBuildRuntimeType)` is `Full` and correct.\n\n![Image](https://github.com/user-attachments/assets/8a8fbe12-2579-4a15-801c-e19bb98e6e7e)\n\nBut if framework is `<TargetFrameworks>net8.0;net462</TargetFrameworks>`, `$(MSBuildRuntimeType)` are both `Core`.\n\n![Image](https://github.com/user-attachments/assets/488916df-7f99-421a-a2c5-6446a2e5fdf7)\n\nwhich is obviously wrong.\n\nThe case also happens when it comes to `<TargetFrameworks>net462;net471</TargetFrameworks>`, the frameworks are both .net-framework. but `$(MSBuildRuntimeType)` are both still `Core`\n\n![Image](https://github.com/user-attachments/assets/0c51cb0b-4c41-4ea1-b353-fd7e7ab91c52)\n\nThere were no other changes when I did the tests above.\n\n\n### Expected Behavior\n\nWhen `TargetFramework` is net-core or standard, it is `Core`. When `TargetFramework` is net-framework, it is `Full`.\n\n### Actual Behavior\n\nWhen `TargetFrameworks` contains multiple targets. It will always be `Core`.\n\n### Analysis\n\nMaybe forget to calculate for each target framework in a targeted manner when reading `TargetFrameworks`.\n\n### Versions & Configurations\n\n```\ndisk:\\Users\\One Developer> msbuild -version\n\u9002\u7528\u4e8e .NET Framework MSBuild \u7248\u672c 17.12.6+db5f6012c\n17.12.6.51805\n```",
  "state": "CLOSED",
  "createdAt": "2024-11-23T16:04:25Z",
  "updatedAt": "2024-11-24T04:13:03Z",
  "closedAt": "2024-11-24T04:13:03Z",
  "author": {
    "login": "feast107"
  },
  "labels": [],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "If you build with `MSBuild.exe`, then MSBuildRuntimeType should always be `Full`, regardless of  TargetFramework and TargetFrameworks.\n\nIf you build with `dotnet build` or `dotnet msbuild`, then MSBuildRuntimeType should always be `Core`, regardless of  TargetFramework and TargetFrameworks.\n\nIf you build with the Visual Studio IDE, then I'd normally expect `Full`, but I don't know if VS can run `dotnet` as a child process in some scenarios.\n\nMSBuildRuntimeType is not intended for detecting whether a project targets .NET Framework.  It can be used for choosing between .NET Framework and .NET Core versions of a task assembly in UsingTask elements.\n\nTo detect whether a project targets .NET Framework, consider checking the TargetFrameworkIdentifier property \u2014 but .NET SDK may set it inconveniently late.",
        "createdAt": "2024-11-23T17:05:34Z",
        "updatedAt": "2024-11-23T17:05:34Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "You're probably looking for `TargetFrameworkIdentifier`",
        "createdAt": "2024-11-24T04:06:45Z",
        "updatedAt": "2024-11-24T04:06:45Z",
        "author": {
          "login": "Youssef1313"
        }
      },
      {
        "body": "That make sense.",
        "createdAt": "2024-11-24T04:12:35Z",
        "updatedAt": "2024-11-24T04:12:35Z",
        "author": {
          "login": "feast107"
        }
      }
    ]
  }
}