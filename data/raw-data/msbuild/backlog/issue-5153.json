{
  "number": 5153,
  "title": "Do custom tasks always run in the same process?",
  "body": "This is just a question. I'm injecting two custom tasks like in the following:\r\n\r\n```\r\n<Project xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\r\n  <UsingTask TaskName=\"TaskA\" ... />\r\n  <UsingTask TaskName=\"TaskB\" ... />\r\n...\r\n```\r\n\r\nCan I be sure that both tasks run in the same process? To be precise, when I use a DI container in TaskA, can I be sure that the container is also available in TaskB?\r\n",
  "state": "CLOSED",
  "createdAt": "2020-03-03T01:20:51Z",
  "updatedAt": "2024-02-21T17:04:55Z",
  "closedAt": "2020-03-07T22:59:29Z",
  "author": {
    "login": "daveMueller"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Discussion"
  },
  "comments": {
    "nodes": [
      {
        "body": "There are several aspects to this.\r\n\r\n1. It's possible to specify that tasks should run out of process, for instance by specifying a [`Runtime`, `Architecture` or `TaskFactory=\"TaskHostFactory\"`](https://docs.microsoft.com/visualstudio/msbuild/how-to-configure-targets-and-tasks?view=vs-2019#usingtask-attributes-and-task-parameters).\r\n1. Projects can be built in different processes in a `-m` multiproc build, so if your tasks are imported into different projects they may run in different processes (at the whims of the scheduler).\r\n1. Within a single project instance, though, the MSBuild engine guarantees a single process. So if TaskA and TaskB are called in the same project you will likely get the behavior you want.\r\n\r\nAs a rule, you should **avoid depending on process state between tasks**. It's caused pain in the past because of the above, in addition to incremental builds (what if TaskA is skipped because its direct outputs were out of date, but TaskB needed to run--does it then have the right setup?).\r\n\r\nAlso be very careful about capturing state from one task execution to another (for instance in a static field). You can cause crashes if you hold onto objects that MSBuild tears down after a task--`Task.Log` is the most common cause of this.",
        "createdAt": "2020-03-05T15:46:03Z",
        "updatedAt": "2020-03-09T14:55:40Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Thanks a lot for the very detailed explanation.",
        "createdAt": "2020-03-07T22:59:29Z",
        "updatedAt": "2020-03-07T22:59:29Z",
        "author": {
          "login": "daveMueller"
        }
      }
    ]
  }
}