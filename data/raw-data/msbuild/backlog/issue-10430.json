{
  "number": 10430,
  "title": "[Bug]: Culture used when formatting Date changed in PropertyGroup",
  "body": "### Issue Description\r\n\r\nStarting with MSBuild 17.11 a property set to a date value will use English culture for formatting instead of the current culture. This only happens if the value of the property is the date like in this example:\r\n\r\n```\r\n<PropertyGroup>\r\n   <_dateValue>$([System.DateTime]::UtcNow)</_dateValue>\r\n</PropertyGroup>\r\n```\r\n\r\nMy computer uses German date formatting but MSBuild will format the example above using the English date format. This changed between .NET 8 and .NET 9. Previously, the value was formatted using the German date format.\r\n\r\n\r\n### Steps to Reproduce\r\n\r\nSample build file that logs formatted dates in different contexts:\r\n\r\n```\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<Project xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\r\n\r\n  <PropertyGroup>\r\n   <_globalDateValue>$([System.DateTime]::UtcNow)</_globalDateValue>\r\n  </PropertyGroup>\r\n\r\n  <Target Name=\"Test\">\r\n    <PropertyGroup>\r\n      <_dateValue>$([System.DateTime]::UtcNow)</_dateValue>\r\n    </PropertyGroup>\r\n   \r\n    <Warning Text=\"Inline date: '$([System.DateTime]::UtcNow)'\" />\r\n    <Warning Text=\"Local date: '$(_dateValue)'\" />\r\n    <Warning Text=\"Global date: '$(_globalDateValue)'\" />\r\n    <Warning Text=\"MSBuild version: $(MSBuildFileVersion)\" />\r\n\r\n  </Target>\r\n\r\n</Project>\r\n```\r\n\r\nExecute using `dotnet msbuild Repro.build /t:Test` using a display culture that is not English. In my case I use German date formatting with English system language:\r\n\r\n![image](https://github.com/user-attachments/assets/5082737e-8398-4395-91bf-8f3cbf135263)\r\n\r\n\r\n### Expected Behavior\r\n\r\nWhen executing with .NET 8, all dates are formatted using the German date format:\r\n\r\n```\r\nInline date: '23.07.2024 14:34:12'\r\nLocal date: '23.07.2024 14:34:12'\r\nGlobal date: '23.07.2024 14:34:12'\r\nMSBuild version: 17.10.4.21802\r\n```\r\n\r\n### Actual Behavior\r\n\r\nWith .NET 9 the values from `<PropertyGroup>` use English culture formatting instead of German:\r\n\r\n```\r\nInline date: '23.07.2024 14:39:45'\r\nLocal date: '07/23/2024 14:39:45'\r\nGlobal date: '07/23/2024 14:39:45'\r\nMSBuild version: 17.11.0.31805\r\n```\r\n\r\nI would expect the values from the `<PropertyGroup>` to be formatted just like inline strings using the German date format.\r\n\r\n### Analysis\r\n\r\nThe formatting bug only happens if the date is the only value in the `<PropertyGroup>`. If other text is included in the property the correct German format will be used. For example:\r\n\r\n- `<_dateValue>$([System.DateTime]::UtcNow)</_dateValue>` evaluates to `07/23/2024 14:51:59` \r\n- `<_dateValue> $([System.DateTime]::UtcNow)</_dateValue>` evaluates to ` 23.07.2024 14:52:30` (note the preceding space)\r\n\r\nMy assumption here is that `_dateValue` is stored as an `object` so the `DateTime` value is directly assigned while any extra characters will do a `string.Format` using the correct culture. But when `_dateValue` is used later on in a `string.Format` the culture is not correctly applied.\r\n\r\n### Versions & Configurations\r\n\r\nBehavior changed between .NET 8 (MSBuild version 17.10.4.21802) and .NET 9 (MSBuild version 17.11.0.31805)",
  "state": "OPEN",
  "createdAt": "2024-07-23T14:53:12Z",
  "updatedAt": "2024-10-15T14:12:27Z",
  "closedAt": null,
  "author": {
    "login": "a-ctor"
  },
  "labels": [
    "bug",
    "triaged",
    "gathering-feedback"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Analyzed the problem a bit more. Regression seems to be caused by https://github.com/dotnet/msbuild/issues/9757\r\n\r\nReverting the following changes locally fixes the problem for me:\r\n\r\nhttps://github.com/dotnet/msbuild/commit/1e513b346acdf40dd2586a463e38f89fa72a69e9#diff-e6b332d6a62d7e070dc0b1621e77b7d0146e52a8eba9c2bec2a7cdd3fdb5739fR1480-R1489\r\n\r\nThere should probably be an exception case for `DateTime` values that should always be formatted using current culture and not invariant culture",
        "createdAt": "2024-07-23T15:17:47Z",
        "updatedAt": "2024-07-23T15:17:47Z",
        "author": {
          "login": "a-ctor"
        }
      },
      {
        "body": "> There should probably be an exception case for DateTime values that should always be formatted using current culture and not invariant culture\r\n\r\nWithout having tested it, I believe decimal numbers would also be affected due to the difference of using a dot (`.`) or a comma (`,`) to denote the decimal place. In German, the dot and comma have inverse semantics, we use the comma for decimals and the dot for thousand-separators.",
        "createdAt": "2024-07-23T15:27:57Z",
        "updatedAt": "2024-07-23T16:17:10Z",
        "author": {
          "login": "MichaelKetting"
        }
      },
      {
        "body": "Thank you for reporting that! \r\nI believe the better solution would be to use the `InvariantCultur` only for internal comparison or any other usage (internal I mean using in expressions for example). \r\nThe mitigation for now would be to use the [ChangeWave](https://github.com/dotnet/msbuild/blob/main/documentation/wiki/ChangeWaves.md) 17.12 version. \r\nMeanwhile we'll take a look at possible quick resolution or revert back. ",
        "createdAt": "2024-07-24T06:55:53Z",
        "updatedAt": "2024-07-24T06:56:40Z",
        "author": {
          "login": "f-alizada"
        }
      },
      {
        "body": "@f-alizada thanks for the update. 17.12 is getting released in November 2024, correct? Cool if there's an earlier fix coming out!",
        "createdAt": "2024-07-24T07:15:48Z",
        "updatedAt": "2024-07-24T07:15:48Z",
        "author": {
          "login": "MichaelKetting"
        }
      },
      {
        "body": "@a-ctor @MichaelKetting Is there a chance you could share with us the use case of this functionality that were broken by the changes you mentioned. And possibly how impactful this is? \r\nAlso did the ChangeWave fix the problem for you? (without reverting the code changes :) )\r\nThank you in advance! \r\n\r\nUnfortunately no updates regarding the fix at the moment. ",
        "createdAt": "2024-07-25T07:23:45Z",
        "updatedAt": "2024-07-25T07:23:45Z",
        "author": {
          "login": "f-alizada"
        }
      },
      {
        "body": "Hi @f-alizada, thanks for responding so quickly! Adding the Change Wave env variable for 17.12 fix the problem for us :)\r\n\r\nWe have a build script that is written in MSBuild. To measure the test duration we save the current time in a property (`<_startTime>$([System.DateTime]::Now)</startTime>`), execute tests, and later use `DateTime::Parse(...)` to calculate the time it took the tests to execute.\r\n\r\nBecause of this bug, `_startTime` is now formatted using invariant culture, while the parse method still uses german date format for parsing. This silently introduced a bug as `_starTime` was now `MM/dd/yyyy ...` instead of `dd.MM.yyyy ...` but parsing did not fail  until day 13 of this month where the day could no longer be parsed as a month. With the 13th, our builds started failing because of a date parsing issue, while previous builds reported invalid test execution times as the dates were parsed incorrectly.\r\n\r\nWe can fix this issue on our side using explicit date formats when string formatting and parsing. At the same time, it is very unintuative that `$([System.DateTime]::Now)` and `date: $([System.DateTime]::Now)` use different date formats. Both should use the same formatting be that current culture or invariant culture and `DateTime::Parse` should also match that default. ",
        "createdAt": "2024-07-25T12:58:24Z",
        "updatedAt": "2024-07-25T12:58:24Z",
        "author": {
          "login": "a-ctor"
        }
      },
      {
        "body": "@a-ctor Thank you for the detailed explanation! \r\nWe will investigate the possibility to address the issue and share the updates. \r\n\r\n",
        "createdAt": "2024-07-29T12:59:31Z",
        "updatedAt": "2024-07-29T12:59:31Z",
        "author": {
          "login": "f-alizada"
        }
      },
      {
        "body": "Per the recent update the issue is gathering the feedback. \r\nFYI: @AR-May ",
        "createdAt": "2024-10-01T08:14:24Z",
        "updatedAt": "2024-10-01T08:14:24Z",
        "author": {
          "login": "f-alizada"
        }
      }
    ]
  }
}