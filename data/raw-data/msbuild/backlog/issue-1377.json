{
  "number": 1377,
  "title": "Document how to resolve MSBuild location",
  "body": "Following up twitter discussion with @terrajobst and @damianh and creating this issue to track progress of the docs being created.\r\n>@terrajobst wrote:\r\n> I've pinged the MSBuild folks. They are working on a doc that will be public soon.\r\n\r\n>@devlead  wrote:\r\n> @terrajobst @randompunter that's great news! Thanks for getting back to us, is there an GH issue one can subscribe to?\r\n\r\n>@terrajobst wrote:\r\n> @devlead @randompunter no, but feel free to create one. I'll let them know that they should respond to it. https://GitHub.com/Microsoft/MSBuild/issues/new\r\n\r\nFull thread  [here](https://twitter.com/terrajobst/status/800960866921299969) \r\n\r\nNot certain on what's exactly being documented, but I guess if we find anything lacking we'll post that feedback here.\r\n",
  "state": "CLOSED",
  "createdAt": "2016-11-22T07:39:49Z",
  "updatedAt": "2024-02-21T17:24:06Z",
  "closedAt": "2018-04-24T16:44:39Z",
  "author": {
    "login": "devlead"
  },
  "labels": [
    "Area: Documentation",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "rainersigwald"
      }
    ]
  },
  "milestone": {
    "title": "MSBuild 15.7"
  },
  "comments": {
    "nodes": [
      {
        "body": "Thanks for creating this issue, @devlead. Documentation is currently in the works. Feel free to ask questions regarding the VS 2017 RC release here.",
        "createdAt": "2016-11-22T18:52:23Z",
        "updatedAt": "2016-11-22T19:12:35Z",
        "author": {
          "login": "Sarabeth-Jaffe-Microsoft"
        }
      },
      {
        "body": "If I have an open source project with a build script, my build script should not have to be responsible to decide what edition of Visual Studio is preferred when locating msbuild if there are multiple installed (Community vs Professional trial).\r\n\r\nIdeally there should be a way to locate the default msbuild path for a given tool version.",
        "createdAt": "2016-12-17T22:28:22Z",
        "updatedAt": "2016-12-17T22:37:53Z",
        "author": {
          "login": "jnm2"
        }
      },
      {
        "body": "Well the author of a build script should be able to pin which version of the tooling to use, for that to work we either need reliable documented way to find and execute that version. Or be able to fetch that tool via i.e. something like NuGet or Chocolatey.\r\n",
        "createdAt": "2016-12-17T22:37:10Z",
        "updatedAt": "2016-12-17T22:37:10Z",
        "author": {
          "login": "devlead"
        }
      },
      {
        "body": "Fetching msbuild via a NuGet feed would be fantastic. I wouldn't have to worry what was installed and I'd have fine-grained control over minimum and maximum versions.",
        "createdAt": "2016-12-17T22:41:56Z",
        "updatedAt": "2016-12-17T22:41:56Z",
        "author": {
          "login": "jnm2"
        }
      },
      {
        "body": "What I strongly dislike is this fragility:\r\n\r\n```c#\r\nvar msbuildPath = Path.Combine(\r\n    Directory.EnumerateDirectories(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ProgramFilesX86), \"Microsoft Visual Studio\", \"2017\")).First(),\r\n    \"MSBuild\", \"15.0\", \"Bin\", \"msbuild.exe\");\r\n```\r\n\r\nNot only do I want to use msbuild if VS is _not_ installed, but I also don't want to have to search a cross product of VS versions, VS editions, *and* msbuild versions.",
        "createdAt": "2016-12-17T22:49:06Z",
        "updatedAt": "2016-12-17T22:49:06Z",
        "author": {
          "login": "jnm2"
        }
      },
      {
        "body": "Bootstrapping from NuGet also makes allot of sense for build agent scenarios.\r\nStill waiting see what the end result of project.json->csproj will be, but if the tooling is a first class citizen then all non standard msbuild targets should be able to be fetched thru NuGet too. \r\nWhich feels almost utopian when I think of it \ud83d\ude04 ",
        "createdAt": "2016-12-17T22:52:13Z",
        "updatedAt": "2016-12-17T22:54:07Z",
        "author": {
          "login": "devlead"
        }
      },
      {
        "body": "No build script should ever depend on Visual Studio.\n\nIn fact all build tools should be xcopy deployable (i.e. msbuild nuget\npackage)\n\nOn 17 Dec 2016 11:28 p.m., \"Joseph Musser\" <notifications@github.com> wrote:\n\nIf I have an open source project with a build script, my build script\nshould not have to be responsible to decide what edition of Visual Studio\nis preferred when locating msbuild if there are multiple.\n\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\n<https://github.com/Microsoft/msbuild/issues/1377#issuecomment-267791220>,\nor mute the thread\n<https://github.com/notifications/unsubscribe-auth/AADgXKp0HOOGzl4wM7glePdiQ2nuRqn3ks5rJGINgaJpZM4K5GDG>\n.\n",
        "createdAt": "2016-12-17T22:57:04Z",
        "updatedAt": "2016-12-17T22:57:04Z",
        "author": {
          "login": "damianh"
        }
      },
      {
        "body": "Is it safe to start a request specifically for a NuGet tools package?\r\n\r\nOtherwise we're stuck in a world I really don't want to live in:\r\n\r\n```c#\r\nstring GetMSBuildPath(Version minVersion, Version maxVersion)\r\n{\r\n    if (minVersion < new Version(15, 0))\r\n        throw new NotImplementedException(\"Logic for pre-15.0 msbuild location\");\r\n\r\n    return (\r\n        from vsVersionDir in Directory.EnumerateDirectories(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ProgramFilesX86), \"Microsoft Visual Studio\"))\r\n        let vsVersion = int.TryParse(Path.GetFileName(vsVersionDir), out int version) ? version : (int?)null\r\n        where vsVersion != null\r\n        orderby vsVersion descending\r\n        from vsEditionDir in Directory.EnumerateDirectories(vsVersionDir)\r\n        // orderby ?\r\n        from msbuildVersionDir in Directory.EnumerateDirectories(Path.Combine(vsEditionDir, \"MSBuild\"))\r\n        let msbuildVersion = Version.TryParse(Path.GetFileName(msbuildVersionDir), out Version version) ? version : null\r\n        where msbuildVersion != null && (minVersion == null || minVersion <= msbuildVersion) && (maxVersion == null || msbuildVersion <= maxVersion)\r\n        orderby msbuildVersion descending\r\n        let msbuildPath = Path.Combine(msbuildVersionDir, \"Bin\", \"msbuild.exe\")\r\n        where File.Exists(msbuildPath)\r\n        select msbuildPath).FirstOrDefault();\r\n}\r\n```",
        "createdAt": "2016-12-17T23:08:44Z",
        "updatedAt": "2016-12-17T23:11:18Z",
        "author": {
          "login": "jnm2"
        }
      },
      {
        "body": "One thing I've noticed is that there **is** a difference\u00a0between which MSBuild version is used and the things like `MSBuildExtensions` directory.\u00a0If you're just doing vanilla builds, this doesn't matter. But if you're using multi-targeting to include the \"native platform\" targets like\u00a0the WindowsXaml one, where it needs to be\u00a0the version of MSBuild set by \"VCVars\" so that\u00a0it picks up all those paths correctly.\r\n\r\nEither that or ship\u00a0*all* of the platform tasks/targets as NuGet's (even if they will only run on Windows).",
        "createdAt": "2016-12-17T23:08:56Z",
        "updatedAt": "2016-12-17T23:08:56Z",
        "author": {
          "login": "clairernovotny"
        }
      },
      {
        "body": "Bottom line --\u00a0if you want to use the native\u00a0platform targets, it will require\u00a0VS on the machine and knowing\u00a0to use the version of MSBuild from that particular instance.\u00a0",
        "createdAt": "2016-12-17T23:09:59Z",
        "updatedAt": "2016-12-17T23:09:59Z",
        "author": {
          "login": "clairernovotny"
        }
      },
      {
        "body": "> Bottom line --\u00a0if you want to use the native\u00a0platform targets, it will require\u00a0VS on the machine and knowing\u00a0to use the version of MSBuild from that particular instance.\u00a0\r\n\r\nEven if this is the case today I don't think it should be tomorrow, SDKs shouldn't be tied to specific IDE version just to be able to build it. Anyone that's done CI with Silverlight, older versions of MVC, SQL Assemblies, etc. etc. can attest how horrible that experience can be. And hopefully we're better than that 2016.\r\nHaving to install & maintain all ever created versions of Visual Studio just doesn't fly. But is a must as they drop support for as many project types as they add each version.\r\n\r\nHaving the possibility to fetch and use a specific version tooling was one of the most appealing features of .NET Core, one would hope that's a behavior getting more adopted by more SDKs and tools going forward.",
        "createdAt": "2016-12-17T23:24:56Z",
        "updatedAt": "2016-12-17T23:24:56Z",
        "author": {
          "login": "devlead"
        }
      },
      {
        "body": "@devlead Oh, I agree. I'd love to\u00a0have all of the platform-specific targets/tasks be available via NuGet. Just saying that they're not\u00a0today and that the\u00a0location of msbuild matters :/",
        "createdAt": "2016-12-17T23:26:08Z",
        "updatedAt": "2016-12-17T23:27:55Z",
        "author": {
          "login": "clairernovotny"
        }
      },
      {
        "body": "@onovotny that's why I'm looking forward to at least having good and clear documentation on how to find specific installed versions of MSBuild.",
        "createdAt": "2016-12-17T23:31:45Z",
        "updatedAt": "2016-12-17T23:31:45Z",
        "author": {
          "login": "devlead"
        }
      },
      {
        "body": "The VS setup team has posted a PowerShell helper to find Visual Studio installs: https://github.com/Microsoft/vssetup.powershell/wiki.\r\n\r\nMSBuild should be present in every install of VS2017 (that I know of). But the tasks, targets, and other extensions required to build a specific project may not be available in every instance. To be fully robust, you probably want to query for a specific [workload/component](https://www.visualstudio.com/en-us/productinfo/vs2017-install-product--list) corresponding to your project type (for example, you might know that you need `Microsoft.VisualStudio.WCF`).\r\n\r\n@Sarabeth-Jaffe-Microsoft we need to make sure this makes it into formal documentation.",
        "createdAt": "2017-02-07T22:16:34Z",
        "updatedAt": "2017-02-07T22:16:34Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "https://github.com/MicrosoftDocs/visualstudio-docs/pull/761 has documentation on how to use Microsoft.Build.Locator to load the copy of MSBuild from the user's installed Visual Studio.",
        "createdAt": "2018-03-30T16:34:10Z",
        "updatedAt": "2018-03-30T16:34:10Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}