{
  "number": 9405,
  "title": "Static Graph RestoreEx: NuGet.Build.Tasks.Console.exe crash with wildcards and UNC paths",
  "body": "I have a situation where normal restore works fine, but switching to static graph restore crashes MSBuild with:\r\n\r\n`The UNC path should be of the form \\\\server\\share.`\r\n\r\n```\r\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\Common7\\IDE\\CommonExtensions\\Microsoft\\NuGet\\NuGet.RestoreEx.targets(19,5): error : The UNC path should be of the form \\\\server\\share. [C:\\Ide\\Ide.sln]\r\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\Common7\\IDE\\CommonExtensions\\Microsoft\\NuGet\\NuGet.RestoreEx.targets(19,5): error :    at System.IO.LongPathHelper.Normalize(String path, UInt32 maxPathLength, Boolean checkInvalidCharacters, Boolean expandShortPaths) [C:\\Ide\\Ide.sln]\r\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\Common7\\IDE\\CommonExtensions\\Microsoft\\NuGet\\NuGet.RestoreEx.targets(19,5): error :    at System.IO.Path.NormalizePath(String path, Boolean fullCheck, Int32 maxPathLength, Boolean expandShortPaths) [C:\\Ide\\Ide.sln]\r\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\Common7\\IDE\\CommonExtensions\\Microsoft\\NuGet\\NuGet.RestoreEx.targets(19,5): error :    at System.IO.Path.GetFullPathInternal(String path) [C:\\Ide\\Ide.sln]\r\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\Common7\\IDE\\CommonExtensions\\Microsoft\\NuGet\\NuGet.RestoreEx.targets(19,5): error :    at Microsoft.Build.Shared.FileUtilities.GetFullPath(String path) [C:\\Ide\\Ide.sln]\r\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\Common7\\IDE\\CommonExtensions\\Microsoft\\NuGet\\NuGet.RestoreEx.targets(19,5): error :    at Microsoft.Build.Shared.FileUtilities.NormalizePath(String path) [C:\\Ide\\Ide.sln]\r\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\Common7\\IDE\\CommonExtensions\\Microsoft\\NuGet\\NuGet.RestoreEx.targets(19,5): error :    at Microsoft.Build.Shared.FileUtilities.GetFullPath(String fileSpec, String currentDirectory) [C:\\Ide\\Ide.sln]\r\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\Common7\\IDE\\CommonExtensions\\Microsoft\\NuGet\\NuGet.RestoreEx.targets(19,5): error :    at Microsoft.Build.Evaluation.LazyItemEvaluator`4.LazyItemList.ProcessNonWildCardItemUpdates(Dictionary`2 itemsWithNoWildcards, Builder items) [C:\\Ide\\Ide.sln]\r\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\Common7\\IDE\\CommonExtensions\\Microsoft\\NuGet\\NuGet.RestoreEx.targets(19,5): error :    at Microsoft.Build.Evaluation.LazyItemEvaluator`4.LazyItemList.ComputeItems(LazyItemList lazyItemList, ImmutableHashSet`1 globsToIgnore) [C:\\Ide\\Ide.sln]\r\nC:\\Program Files\\Microsoft Visual Studio\\2022\\Enterprise\\Common7\\IDE\\CommonExtensions\\Microsoft\\NuGet\\NuGet.RestoreEx.targets(19,5): error :    at Microsoft.Build.Evaluation.LazyItemEvaluator`4.LazyItemList.GetItemData(ImmutableHashSet`1 globsToIgnore) [C:\\Ide\\Ide.sln]\r\n```\r\n\r\nThe specific process that crashes is `NuGet.Build.Tasks.Console.exe` with the following stack:\r\n\r\n```\r\n\tmscorlib\tLongPathHelper.Normalize Line 167\r\n\tmscorlib\tPath.NewNormalizePath Line 503\r\n\tmscorlib\tPath.NormalizePath Line 427\r\n\tmscorlib\tPath.NormalizePath Line 391\r\n\tmscorlib\tPath.NormalizePath Line 376\r\n\tmscorlib\tPath.GetFullPathInternal Line 366\r\n\tmscorlib\tPath.GetFullPath Line 330\r\n\tMicrosoft.Build\tFileUtilities.GetFullPath Line 500\r\n\tMicrosoft.Build\tFileUtilities.NormalizePath Line 465\r\n\tMicrosoft.Build\tFileUtilities.GetFullPath Line 762\r\n\tMicrosoft.Build\tLazyItemEvaluator`4.LazyItemList.ProcessNonWildCardItemUpdates Line 447\r\n\tMicrosoft.Build\tLazyItemEvaluator`4.LazyItemList.ComputeItems Line 418\r\n\tMicrosoft.Build\tLazyItemEvaluator`4.LazyItemList.GetItemData Line 306\r\n\tMicrosoft.Build\tLazyItemEvaluator`4.GetAllItemsDeferred Line 506\r\n\tSystem.Core\tEnumerable.SelectManyIterator\r\n\tSystem.Core\tBuffer`1..ctor\r\n\tSystem.Core\tOrderedEnumerable`1.GetEnumerator\r\n\tMicrosoft.Build\tEvaluator`4.Evaluate Line 686\r\n\tMicrosoft.Build\tEvaluator`4.Evaluate Line 341\r\n\tMicrosoft.Build\tProjectInstance.Initialize Line 2804\r\n\tMicrosoft.Build\tProjectInstance..ctor Line 285\r\n\tMicrosoft.Build\tProjectInstance.FromFile Line 757\r\n\tNuGet.Build.Tasks.Console\tMSBuildStaticGraphRestore.LoadProjects\r\n\tMicrosoft.Build\tGraphBuilder.ParseProject Line 536\r\n\tMicrosoft.Build\tGraphBuilder.SubmitProjectForParsing Line 576\r\n\tmscorlib\tLazy`1.CreateValue Line 437\r\n\tmscorlib\tLazy`1.LazyInitValue Line 388\r\n\tmscorlib\tLazy`1.get_Value Line 339\r\n\tMicrosoft.Build\tParallelWorkSet`2.ExecuteWorkItem Line 194\r\n\tMicrosoft.Build\tParallelWorkSet`2.<CreateProcessorItemTask>b__17_0 Line 169\r\n\tmscorlib\tAsyncMethodBuilderCore.MoveNextRunner.InvokeMoveNext Line 1090\r\n\tmscorlib\tExecutionContext.RunInternal Line 981\r\n\tmscorlib\tExecutionContext.Run Line 928\r\n\tmscorlib\tAsyncMethodBuilderCore.MoveNextRunner.Run Line 1071\r\n\tmscorlib\tAwaitTaskContinuation.RunOrScheduleAction Line 811\r\n\tmscorlib\tTask.FinishContinuations Line 3617\r\n\tmscorlib\tTask.FinishStageThree Line 2363\r\n\tmscorlib\tTask`1.TrySetResult Line 490\r\n\tmscorlib\tSemaphoreSlim.TaskNode.ExecuteWorkItem Line 95\r\n\tmscorlib\tThreadPoolWorkQueue.Dispatch Line 820\r\n\tmscorlib\t_ThreadPoolWaitCallback.PerformWaitCallback Line 1161\r\n```\r\n\r\nThe actual problem is this call to `Path.GetFullPath`:\r\nhttps://github.com/dotnet/msbuild/blob/c36a54ed3308d1516ffe1a86b9086c42e4ca996f/src/Build/Evaluation/LazyItemEvaluator.cs#L447\r\n\r\nIt is being passed the value of `\\\\csc.*`, which results in GetFullPath throwing an ArgumentException: `The UNC path should be of the form \\\\server\\share.`\r\n\r\nUnfortunately I've failed to isolate a standalone repro for this exact scenario. I do have an internal repo at commit `bd36c7032f0950eeca634d7aa34fcdf441e89ed9` that's easy to reproduce this on. Just contact me on Teams and we can take a look together.\r\n\r\nHowever I did build a repro that hits a very similar case, with slightly different behavior. It no longer crashes, but fails the build with this error:\r\n\r\n```\r\n\"C:\\temp\\staticGraphFail\\staticGraphFail.sln\" (Restore target) (1) ->\r\n(Restore target) ->\r\n  C:\\Program Files\\dotnet\\sdk\\8.0.100-rc.2.23502.2\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.DefaultItems.targets(101,13): error MSB4248: Cannot expand metadata in expression \"$([MSBuild]::\r\nValueOrDefault('%(FullPath)', '').StartsWith($([MSBuild]::EnsureTrailingSlash($(MSBuildProjectDirectory)))))\". The item metadata \"%(FullPath)\" cannot be applied to the path \"\\\\csc.*\". The UNC path\r\n should be of the form \\\\server\\share.  C:\\Program Files\\dotnet\\sdk\\8.0.100-rc.2.23502.2\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.DefaultItems.targets [C:\\temp\\staticGraphFail\\staticGraphF\r\nail.sln]\r\n```\r\n\r\nTo repro, create this fail.csproj file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>net6.0</TargetFramework>\r\n    <RestoreUseStaticGraphEvaluation>true</RestoreUseStaticGraphEvaluation>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Newtonsoft.Json\" Version=\"13.0.3\" ExcludeAssets=\"all\" GeneratePathProperty=\"true\"/>\r\n  </ItemGroup>\r\n\r\n  <PropertyGroup>\r\n    <A>$(PkgNewtonsoft_Json)\\</A>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <None Include=\"$(A)\\csc.*\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\r\n\r\nand build with `msbuild /t:Restore fail.csproj`.\r\n\r\nIn this repro, the crash happens here:\r\nhttps://github.com/dotnet/msbuild/blob/c36a54ed3308d1516ffe1a86b9086c42e4ca996f/src/Build/Evaluation/LazyItemEvaluator.cs#L429\r\n\r\nThere's a good try/catch around this callstack, so it doesn't bring down the process, because this catch block catches it:\r\nhttps://github.com/dotnet/msbuild/blob/c36a54ed3308d1516ffe1a86b9086c42e4ca996f/src/Shared/Modifiers.cs#L602\r\n\r\nThere's another catch block here:\r\nhttps://github.com/dotnet/msbuild/blob/c36a54ed3308d1516ffe1a86b9086c42e4ca996f/src/Build/Evaluation/Expander.cs#L982\r\n\r\nHowever in my actual case, there isn't such a good catch block around this codepath:\r\nhttps://github.com/dotnet/msbuild/blob/c36a54ed3308d1516ffe1a86b9086c42e4ca996f/src/Build/Evaluation/LazyItemEvaluator.cs#L418\r\n\r\nI wasn't able to recreate a standalone repro which takes that path (line 418) instead of the regular path (line 429). Ping me on Teams for a real-life repro of the actual issue.\r\n\r\nI suspect the problem is that wildcards are not expected to be in the item spec `\\\\csc.*` but they are, and the item spec starts with `\\\\` because the $(Pkg*) property evaluates to an empty string at the time of restore eval, and then `Path.GetFullPath()` crashes on it, but there's no good catch block to catch it around line 418, so it is more fatal.\r\n\r\n\r\n",
  "state": "CLOSED",
  "createdAt": "2023-11-08T01:50:50Z",
  "updatedAt": "2024-11-07T20:41:31Z",
  "closedAt": "2024-11-07T20:41:30Z",
  "author": {
    "login": "KirillOsenkov"
  },
  "labels": [
    "bug",
    "Feature - Globbing",
    "Area: Engine"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "rainersigwald"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Rainer thinks this is an MSBuild, rather than NuGet, bug.\r\n\r\nIt's happening in static graph restore because that sets MSBuild config to disable glob expansion, and thus passes the * into the normalize method. That should have the same behavior as elsewhere.",
        "createdAt": "2023-11-08T01:51:56Z",
        "updatedAt": "2023-11-08T01:51:56Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "I GOT THE MINIMAL REPRO!!!!\r\n\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>net6.0</TargetFramework>\r\n    <RestoreUseStaticGraphEvaluation>true</RestoreUseStaticGraphEvaluation>\r\n  </PropertyGroup>\r\n\r\n  <PropertyGroup>\r\n    <A>$(B)\\</A>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <None Include=\"$(A)\\csc.*\" />\r\n    <None Update=\"2.txt\">\r\n      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>\r\n    </None>\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\r\n\r\nJust build this bad boy with `msbuild /t:Restore fail.csproj`\r\n\r\n![image](https://github.com/dotnet/msbuild/assets/679326/b557f892-316a-463d-85a4-c731710394cc)\r\n",
        "createdAt": "2023-11-08T03:19:06Z",
        "updatedAt": "2023-11-08T03:19:06Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "Since the actual exception happens in NuGet.Build.Tasks.Console.exe, I found it's easier to debug this by starting the .exe directly:\r\n\r\n`C:\\msbuild\\artifacts\\bin\\bootstrap\\net472\\Common7\\IDE\\CommonExtensions\\Microsoft\\NuGet\\NuGet.Build.Tasks.Console.exe`\r\n\r\nand passing it these args:\r\n```\r\n\"Recursive=True;CleanupAssetsForUnsupportedProjects=True;DisableParallel=False;Force=False;ForceEvaluate=False;HideWarningsAndErrors=False;IgnoreFailedSources=False;Interactive=False;NoCache=False;NoHttpCache=False;RestorePackagesConfig=False\" \"C:\\msbuild\\artifacts\\bin\\bootstrap\\net472\\MSBuild\\Current\\Bin\\amd64\\MSBuild.exe\" \"C:\\temp\\fail\\fail.csproj\" \"MSBuildRestoreSessionId=2b93b8ed-8a76-41be-bb2f-a7c3e3c92e01;ExcludeRestorePackageImports=True;OriginalMSBuildStartupDirectory=C:\\msbuild;SolutionPath=C:\\temp\\fail\\fail.csproj\"\r\n```\r\n\r\nHave to start it under debugger, of course, for example by opening the .exe as a project in Visual Studio, editing the project properties to pass the argument string, and then pressing F5. Remember to disable Just My Code and enable all first-chance exceptions.",
        "createdAt": "2023-11-08T03:34:29Z",
        "updatedAt": "2023-11-08T03:35:52Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "Just to be sure - the expected behavior is for the attempted glob expansion to silently fail and `\\\\csc.*` be added to `None` verbatim, is that correct?",
        "createdAt": "2023-11-08T07:19:40Z",
        "updatedAt": "2023-11-08T07:19:40Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "> I found it's easier to debug this by starting the .exe directly\r\n\r\nBecause @jeffkl has been around the block a time or two (complimentary) you can also set an environment variable `DEBUG_RESTORE_TASK=true` around the normal repro.\r\n\r\n> Just to be sure - the expected behavior is for the attempted glob expansion to silently fail and `\\\\csc.*` be added to `None` verbatim, is that correct?\r\n\r\nSort of; in this case glob expansion is disabled via `MSBuildSkipEagerWildCardEvaluationRegexes`, so an item with an \"escaped\" wildcard is passed into the `Update` machinery.\r\n\r\nI think I see the fix.\r\n\r\n",
        "createdAt": "2023-11-08T11:55:09Z",
        "updatedAt": "2023-11-08T11:59:18Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Hm. Well. Almost!\r\n\r\n```diff\r\ndiff --git a/src/Build/Evaluation/LazyItemEvaluator.cs b/src/Build/Evaluation/LazyItemEvaluator.cs\r\nindex bd34997b83..4fa4f02291 100644\r\n--- a/src/Build/Evaluation/LazyItemEvaluator.cs\r\n+++ b/src/Build/Evaluation/LazyItemEvaluator.cs\r\n@@ -444,7 +444,7 @@ namespace Microsoft.Build.Evaluation\r\n                 {\r\n                     for (int i = 0; i < items.Count; i++)\r\n                     {\r\n-                        string fullPath = FileUtilities.GetFullPath(items[i].Item.EvaluatedIncludeEscaped, items[i].Item.ProjectDirectory);\r\n+                        string fullPath = FileUtilities.NormalizePathForComparisonNoThrow(items[i].Item.EvaluatedIncludeEscaped, items[i].Item.ProjectDirectory);\r\n                         if (itemsWithNoWildcards.TryGetValue(fullPath, out UpdateOperation op))\r\n                         {\r\n                             items[i] = op.UpdateItem(items[i]);\r\n```\r\n\r\nGets past the crash but still fails with\r\n\r\n```\r\nC:\\Program Files\\dotnet\\sdk\\8.0.100-rc.2.23502.2\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.DefaultItems.targets(101,13): error MSB4248: Cannot expand metadata in expression \"$([MSBuild]::ValueOrDefault('%(FullPath)', '').StartsWith($([MSBuild]::EnsureTrailingSlash($(MSBuildProjectDirectory)))))\". The item metadata \"%(FullPath)\" cannot be applied to the path \"\\\\csc.*\". The UNC path should be of the form \\\\server\\share.  C:\\Program Files\\dotnet\\sdk\\8.0.100-rc.2.23502.2\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.DefaultItems.targets\r\n```",
        "createdAt": "2023-11-08T12:16:13Z",
        "updatedAt": "2023-11-08T12:16:13Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@KirillOsenkov to work around in your original scenario can you condition the globbed item on `$(ExcludeRestorePackageImports)`?",
        "createdAt": "2023-11-08T12:17:31Z",
        "updatedAt": "2023-11-08T12:17:31Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> Gets past the crash but still fails with\r\n> \r\n> ```\r\n> C:\\Program Files\\dotnet\\sdk\\8.0.100-rc.2.23502.2\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.DefaultItems.targets(101,13): error MSB4248: Cannot expand metadata in expression \"$([MSBuild]::ValueOrDefault('%(FullPath)', '').StartsWith($([MSBuild]::EnsureTrailingSlash($(MSBuildProjectDirectory)))))\". The item metadata \"%(FullPath)\" cannot be applied to the path \"\\\\csc.*\". The UNC path should be of the form \\\\server\\share.  C:\\Program Files\\dotnet\\sdk\\8.0.100-rc.2.23502.2\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.DefaultItems.targets\r\n> ```\r\n\r\nThis can be worked around with `SetLinkMetadataAutomatically=false`\r\n\r\n```sh-session\r\n\u276f artifacts\\bin\\bootstrap\\net472\\MSBuild\\Current\\Bin\\amd64\\MSBuild.exe S:\\repro\\dotnet\\msbuild\\issues\\9405\\fail.csproj -t:restore -p:SetLinkMetadataAutomatically=false\r\nRestore complete (1.6s)\r\n\r\nBuild succeeded in 2.1s\r\n```",
        "createdAt": "2023-11-08T14:39:15Z",
        "updatedAt": "2023-11-08T14:39:15Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Do we have a documented way for someone to generate that Link metadata on-demand if they need it? One thing I see with a lot of our automatic behavior toggles is that what _users_ have to do to recreate that automatic behavior is not always documented or clear.",
        "createdAt": "2023-11-08T15:04:45Z",
        "updatedAt": "2023-11-08T15:04:45Z",
        "author": {
          "login": "baronfel"
        }
      },
      {
        "body": "\"Bake it into the project like VS used to\" . . . but yeah I don't think there are docs.",
        "createdAt": "2023-11-08T15:15:53Z",
        "updatedAt": "2023-11-08T15:15:53Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Thanks Rainer! `NormalizePathForComparisonNoThrow` does look like a good fix! It brings the behavior inline with the simpler repro that I pasted at the top: it doesn't crash and gives a helpful error message that helps me understand what's going on and fix it.\r\n\r\n`SetLinkMetadataAutomatically=false` is the cherry on top that lets me fix that separately as well.\r\n\r\nI'd say let's just ship that diff you've pasted above and I'll work around the rest of it in my solution.\r\n\r\nFood for thought is that this is another cursed case of `$(NonExistingProperty)\\...` which evaluates to the root of the drive if the property is not set. Should we think about emitting a warning when a property of that shape evaluates to empty, resulting in a leading directory separator? I've seen this wreak havoc time and time again, with accidental drive enumeration and other unintended consequences.\r\n",
        "createdAt": "2023-11-08T17:53:24Z",
        "updatedAt": "2023-11-08T17:53:24Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "> Should we think about emitting a warning when a property of that shape evaluates to empty, resulting in a leading directory separator?\r\n\r\nYes! https://github.com/dotnet/msbuild/pull/7029 added a message about this, that can be elevated to a break via `MSBUILDFAILONDRIVEENUMERATINGWILDCARD`. And when we have analyzers that's a pattern we should flag immediately.",
        "createdAt": "2023-11-08T20:13:52Z",
        "updatedAt": "2023-11-08T20:13:52Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> I'd say let's just ship that diff you've pasted above and I'll work around the rest of it in my solution.\r\n\r\nworks for me! #9409",
        "createdAt": "2023-11-08T20:28:21Z",
        "updatedAt": "2023-11-08T20:28:21Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}