{
  "number": 8748,
  "title": "[Bug]: BeforeTargets and AfterTargets comments are incorrect for SDK style projects",
  "body": "### Issue Description\n\n`Microsoft.Common.CurrentVersion.targets` defines the `BeforeBuild` and `AfterBuild` targets, with the comment \"Redefine this target in your project in order to run tasks\":\r\n\r\nhttps://github.com/dotnet/msbuild/blob/457218b3304b07a05c8b51640792d8125d36bba8/src/Tasks/Microsoft.Common.CurrentVersion.targets#L897-L913\r\n\r\nI was trying to manually upgrade a non-SDK style project to SDK style (maybe I should have tried Upgrade Assistant? \ud83e\udd37), and the project had re-defined the `AfterBuild` target after importing `Microsoft.CSharp.targets`. After converting to an SDK style project, this stopped working. Fortunately due to my MSBuild knowledge/experience, I knew that the SDK was importing the common targets after my csproj, and therefore redefining my project's target, rather than the other way around.  But when I was looking at the preprocessed file and saw these comments explicitly telling me to override the target, it took me longer to realize the import-order issue. I imagine that less experienced developers it would be more difficult to find a working solution.\n\n### Steps to Reproduce\n\nThis is kind of similar to what my rushed, na\u00efve attempt at porting my non-SDK style project looked like:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net6.0</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n  <Target Name=\"AfterBuild\">\r\n    <Message Importance=\"High\">This is after build</Message>\r\n  </Target>\r\n</Project>\r\n```\r\n\n\n### Expected Behavior\n\nEither the \"this is after build\" message is output when I run `dotnet build`, or get more feedback about why it's not running (ideally with info on how to fix it)\n\n### Actual Behavior\n\nMy target is silently ignored\n\n### Analysis\n\nIn non-SDK style projects, the \"common targets\" get imported explicitly, allowing more MSBuild script to be entered after the import, but still within the project file. With the SDK syntax as an XML attribute on the root `Project` element, the targets are implicitly imported at the end of the project file. I happen to know that there are other syntax to import the SDK's targets explicitly in the project file, which is another solution: https://learn.microsoft.com/en-us/visualstudio/msbuild/how-to-use-project-sdk?view=vs-2022\r\n\r\n\r\nI wonder if it's feasible for `<Target` to have a `OverwriteWarning=\"true\"` attribute, which MSBuild could then use to output a warning or error with an MSB code, and the help page on the docs site could then explain the issue and give advice to customers on how to avoid it.  Then the `BeforeBuild` and `AfterBuild` targets, which customers have historically been encouraged to override in their project files, could use this, so customers get notifications when their projects no longer work as they probably expect.\r\n\r\nI think it would be worthwhile to at least update the comment on the targets, so they're less misleading, given these targets ship in the .NET SDK.\n\n### Versions & Configurations\n\n_No response_",
  "state": "OPEN",
  "createdAt": "2023-05-10T16:26:53Z",
  "updatedAt": "2024-07-26T18:17:49Z",
  "closedAt": null,
  "author": {
    "login": "zivkan"
  },
  "labels": [
    "bug",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "We should _definitely_ fix the comments.\r\n\r\n`OverwriteWarning` is an interesting approach I don't think I've seen proposed before, and I think I like it. Will keep thinking about it!",
        "createdAt": "2023-05-10T17:12:53Z",
        "updatedAt": "2023-05-10T17:12:53Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Team triage: We would need to fix comments as was mentioned above and probably update documentation. We assign this issue to the documentation user story.",
        "createdAt": "2023-05-16T16:17:31Z",
        "updatedAt": "2023-05-16T16:17:31Z",
        "author": {
          "login": "AR-May"
        }
      },
      {
        "body": "Why not move them to `Common.props`? Yes, I have read #1680 detailing why It's bad but IMO won't have much impact on existing projects as they already import `Common.props` in `Common.targets`.",
        "createdAt": "2024-07-26T18:15:08Z",
        "updatedAt": "2024-07-26T18:17:49Z",
        "author": {
          "login": "Nirmal4G"
        }
      }
    ]
  }
}