{
  "number": 8991,
  "title": "consider removing verifythrow(..) strings",
  "body": "These are un-localized strings that appear in the InternalErrorException message if we hit a bug in ourselves. Roughly across all the assemblies, they come to about 50-60KB even deduplicated:\r\n\r\nhttps://gist.github.com/danmoseley/d29a91c87fa8617de4f2963c5160b236\r\n\r\nThe message is rarely if ever useful to anyone that isn't a developer in this repo. \r\n\r\nSuggestion: replace these messages with a unique integer. Then instead of say\r\n```\r\nThis is an unhandled exception in MSBuild -- PLEASE UPVOTE AN EXISTING ISSUE OR FILE A NEW ONE AT https://aka.ms/msbuild/unhandled.\r\nMSB0001: Internal MSBuild Error: Assuming 1-to-1 mapping between configs and results. Otherwise it means the caches are either not minimal or incomplete\r\n```\r\nwhich means nothing to customers, they would get eg\r\n```\r\nThis is an unhandled exception in MSBuild -- PLEASE UPVOTE AN EXISTING ISSUE OR FILE A NEW ONE AT https://aka.ms/msbuild/unhandled.\r\nMSB0001: Internal MSBuild error with code MSB0001-1234\r\n```\r\n... which is equally stable and if anything is MORE searchable.\r\n\r\nAssuming the deprecated engine bits aren't touched, this would save about 30-40KB on disk. Equally valuable, it would make it clearer which strings are resource strings. Right now half of the VerifyThrow's are passed resource names and half are passed these unlocalized messages and we've repeatedly mixed them up. If we remove the latter, things become clearer: everything is a resource string.",
  "state": "OPEN",
  "createdAt": "2023-07-03T02:39:41Z",
  "updatedAt": "2024-01-31T08:13:55Z",
  "closedAt": null,
  "author": {
    "login": "danmoseley"
  },
  "labels": [
    "backlog",
    "Priority:3",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "How can the uniqueness of the integers be tested?  A Roslyn analyzer would not be able to detect conflicts between separate assemblies.  An enum type would consume space for the names although perhaps less than the strings.  Would it be possible to postprocess the assemblies to eliminate the fields of the enum and keep just the type?",
        "createdAt": "2023-07-03T12:09:51Z",
        "updatedAt": "2023-07-03T12:09:51Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "A simple Python script run over the sources. Plus a baseline file that includes any \"burned\" ones (already shipped but later removed)",
        "createdAt": "2023-07-03T14:53:48Z",
        "updatedAt": "2023-07-03T14:53:48Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "[ConstantExpectedAttribute](https://learn.microsoft.com/dotnet/api/system.diagnostics.codeanalysis.constantexpectedattribute?view=net-7.0) from <https://github.com/dotnet/runtime/issues/33771> might be useful for flagging calls in which the integer is not in a format that the script would recognize.",
        "createdAt": "2023-07-03T16:26:39Z",
        "updatedAt": "2023-07-03T16:28:16Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "MSBuild team triage: We are not sure about impact here. In theory opt-prof should optimize it, and usually do not load these pages into memory. We do not consider 40KB disk space big enough comparing to cost of implementation and maintenance.",
        "createdAt": "2023-07-11T13:32:56Z",
        "updatedAt": "2023-07-11T13:32:56Z",
        "author": {
          "login": "rokonec"
        }
      },
      {
        "body": "fair enough. some more ideas\r\n\r\n* shorten some of the messages. they only have to be comprehensible to ~5 people out of the millions they are shipped to \ud83d\ude04 \r\n* use utf8 eg \"foo\"u8 and expand only if the exception is going to be thrown\r\n",
        "createdAt": "2023-07-11T17:06:23Z",
        "updatedAt": "2023-07-11T17:06:23Z",
        "author": {
          "login": "danmoseley"
        }
      }
    ]
  }
}