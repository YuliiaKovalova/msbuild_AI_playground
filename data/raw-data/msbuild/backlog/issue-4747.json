{
  "number": 4747,
  "title": "Override GenerateNuspec or other targets in Directory.Build.targets",
  "body": "I expected that Directory.Build.targets is imported at the end of the Microsoft.NET.Sdk. Unfortunately some targets seem to be defined before the directory.build.targets has been imported, which prevents me from overriding them. Is there a property (which i could set in directory.build.props) to a target file that is imported after everything else is already specified? Is there any other possibility to override targets like GenerateNuspec without changing the standard project file format (with Sdk attribute in the project tag)?",
  "state": "OPEN",
  "createdAt": "2019-09-19T05:32:23Z",
  "updatedAt": "2024-02-21T16:30:42Z",
  "closedAt": null,
  "author": {
    "login": "TFTomSun"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Discussion"
  },
  "comments": {
    "nodes": [
      {
        "body": "I investigated a bit further... I think the problem is that the nuget build task sdk is imported after the microsoft.net.sdk.targets\r\n\r\n\r\n**excerpt from C:\\Program Files\\dotnet\\sdk\\3.0.100-preview8-013656\\Sdks\\Microsoft.NET.Sdk\\Sdk\\Sdk.targets :**\r\n\r\n```xml\r\n\r\n <Import Project=\"$(MSBuildThisFileDirectory)..\\targets\\Microsoft.NET.Sdk.targets\"\r\n          Condition=\"'$(IsCrossTargetingBuild)' != 'true'\"/>\r\n  \r\n  <!-- Import targets from NuGet.Build.Tasks.Pack package/Sdk -->\r\n  <PropertyGroup Condition=\"'$(NuGetBuildTasksPackTargets)' == '' AND '$(ImportNuGetBuildTasksPackTargetsFromSdk)' != 'false'\">\r\n    <NuGetBuildTasksPackTargets Condition=\"'$(IsCrossTargetingBuild)' == 'true'\">$(MSBuildThisFileDirectory)..\\..\\NuGet.Build.Tasks.Pack\\buildCrossTargeting\\NuGet.Build.Tasks.Pack.targets</NuGetBuildTasksPackTargets>\r\n    <NuGetBuildTasksPackTargets Condition=\"'$(IsCrossTargetingBuild)' != 'true'\">$(MSBuildThisFileDirectory)..\\..\\NuGet.Build.Tasks.Pack\\build\\NuGet.Build.Tasks.Pack.targets</NuGetBuildTasksPackTargets>\r\n    <ImportNuGetBuildTasksPackTargetsFromSdk>true</ImportNuGetBuildTasksPackTargetsFromSdk>\r\n  </PropertyGroup>\r\n  \r\n  <Import Project=\"$(NuGetBuildTasksPackTargets)\"\r\n          Condition=\"Exists('$(NuGetBuildTasksPackTargets)') AND '$(ImportNuGetBuildTasksPackTargetsFromSdk)' == 'true'\"/>  \r\n\r\n```\r\n\r\nI assume, if the nuget stuff would be imported before the Microsoft.NET.Sdk.targets the behavior would be as expected.",
        "createdAt": "2019-09-19T05:49:14Z",
        "updatedAt": "2019-09-19T05:51:29Z",
        "author": {
          "login": "TFTomSun"
        }
      },
      {
        "body": "The issue is that the thing that imports the NuGet targets IS the Microsoft.Net.Sdk.",
        "createdAt": "2019-09-19T20:47:35Z",
        "updatedAt": "2019-09-19T20:47:35Z",
        "author": {
          "login": "livarcocc"
        }
      },
      {
        "body": "The only thing that might be useful is to hook into GenerateNuspecDependsOn and possibly modify the inputs for GenerateNuspec?",
        "createdAt": "2019-09-21T05:20:49Z",
        "updatedAt": "2019-09-21T05:20:49Z",
        "author": {
          "login": "japj"
        }
      },
      {
        "body": "@japj yeah maybe, but that doesn't allow me to override the original functionality, just let me specify the parameters in a way that the original functionality does nothing. I'll consider it as a workaround.",
        "createdAt": "2019-09-21T06:39:51Z",
        "updatedAt": "2019-09-21T06:39:51Z",
        "author": {
          "login": "TFTomSun"
        }
      },
      {
        "body": "@livarcocc I think if the second import would be done before the first one, it should solve the issue, shouldn't it?",
        "createdAt": "2019-09-21T06:41:37Z",
        "updatedAt": "2019-09-21T06:42:03Z",
        "author": {
          "login": "TFTomSun"
        }
      },
      {
        "body": "You could also look into using ImportNuGetBuildTasksPackTargetsFromSdk false and import those from your own targets and overrule afterwards",
        "createdAt": "2019-09-21T06:51:32Z",
        "updatedAt": "2019-09-21T06:51:32Z",
        "author": {
          "login": "japj"
        }
      },
      {
        "body": "I am having a similar issue with dotnet pack ignoring Directory.Build.props for embedding debug symbols in my case. If I am just building and packaging c# libraries, why would the build phase ignore this file?",
        "createdAt": "2023-06-29T16:55:41Z",
        "updatedAt": "2023-06-29T16:55:41Z",
        "author": {
          "login": "austinmfb"
        }
      }
    ]
  }
}