{
  "number": 9227,
  "title": "[Feature Request]: Extend CLI JSON evaluation to support solutions",
  "body": "### Summary\n\nWe should extend the CLI evaluation to support solutions, not just projects.\n\n### Background and Motivation\n\nIn .NET 8 RC2 we added support for a few new flags to make extracting properties, items, and target results from a project easier from the command line:\r\n\r\n* -getItem\r\n* -getProperty\r\n* -getTargetResults\r\n\r\nThese create JSON structures for the requested data, either after evaluation (if no target is specified) or after the specified target is run.\r\n\r\nThese work great for individual projects, but users expect the feature to work for solutions as well.\n\n### Proposed Feature\n\nThere are a few ways this could go (not exhaustive):\r\n\r\n* allow the existing syntaxes to work against the generated solution metaproject\r\n* apply the existing syntax to each built traversal project in the solution\r\n* ???\r\n\r\nI have opinions about which of these I prefer, but we should gather more feedback.\n\n### Alternative Designs\n\n_No response_",
  "state": "OPEN",
  "createdAt": "2023-09-18T15:09:38Z",
  "updatedAt": "2024-10-18T15:29:55Z",
  "closedAt": null,
  "author": {
    "login": "baronfel"
  },
  "labels": [
    "backlog",
    "Feature Request",
    "Priority:2",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "cc @jrdodds for comment - what would your expected behavior be when CLI JSON evaluation was invoked against a solution?",
        "createdAt": "2023-09-18T15:10:20Z",
        "updatedAt": "2023-09-18T15:10:20Z",
        "author": {
          "login": "baronfel"
        }
      },
      {
        "body": "I was thinking in terms of \r\n\r\n> - allow the existing syntaxes to work against the generated solution metaproject\r\n\r\ne.g. the following could be used to get the projects in the solution:\r\n\r\n```\r\nmsbuild example.sln -getItem:ProjectReference\r\n```\r\n\r\nGetting the list of projects from the solution is a task that comes up (often it is for a validation or reporting need) and I have seen some really terrible approaches. But maybe there should be a `GetSolutionProjects` function that can return the list of projects for the current MSBuild run and the JSON CLI switches should traverse the projects.",
        "createdAt": "2023-09-18T16:07:47Z",
        "updatedAt": "2023-09-18T16:07:47Z",
        "author": {
          "login": "jrdodds"
        }
      },
      {
        "body": "Is this request still considered?\nI'd like to evaluate information on the solution level, but there is no elegant way yet as `-getItem`, `-getProperty`, `-getTargetResults` is only supported for projects.",
        "createdAt": "2024-10-18T14:03:29Z",
        "updatedAt": "2024-10-18T14:03:29Z",
        "author": {
          "login": "czdietrich"
        }
      },
      {
        "body": "@czdietrich we need to more fully spec out the expected behaviors. What are some specific scenarios you would like to accomplish with the `-getX` flags? What kinds of solution shapes would you like to support?",
        "createdAt": "2024-10-18T14:20:56Z",
        "updatedAt": "2024-10-18T14:20:56Z",
        "author": {
          "login": "baronfel"
        }
      },
      {
        "body": "My current scenario is to get a set of properties (i.e. `AssemblyName`, `OutputType`) from all projects contained in the solution file.\n\nWhile I could for each through all projects and use `-getProperty`, it is fairly slow when the amount of projects grow.\nMy idea was instead to create an MSBuild target on the solution level (via `Directory.Solution.targets`) and gather all the information there and just return a combined result, which unfortunately is not supported yet.\n\nA simple test showed that using the target on the solution level would take less than 20 seconds for our scenario (~370 projects) and about 2 minutes for calling each project separately.\n\nThough, it is possible to work around that limitation on solution level targets by creating an output file containing the information, but it adds a fair amount of additional work like escaping data and parsing it back and the need for a well known output file path. \nThe workaround wouldn't probably as complicated, when there was a simple way to serialize `ItemGroup` items to json strings (at least I'm not aware of this), so data could easily be serialized to a file. But when using `-getTargetResults` the serialization of `ItemGroup` items works just out-of-the-box which is nice.\n\n---\n\nAlso something off-topic regarding the `dotnet` cli, you can just ignore this \ud83d\ude2c\nI find it a bit unnecessary that `dotnet sln [SOLUTION] list` returns the following 2 lines in the beginning:\n```\nProject(s)\n----------\n```\nbecause when you want to automate something in a script, you always need to skip these lines.",
        "createdAt": "2024-10-18T15:27:45Z",
        "updatedAt": "2024-10-18T15:27:45Z",
        "author": {
          "login": "czdietrich"
        }
      },
      {
        "body": "Thanks for the scenario. Regarding your off-topic we're investing in machine-readable (JSON) outputs for more `dotnet` commands over time exactly for reasons like that, so keep an eye out :)",
        "createdAt": "2024-10-18T15:29:47Z",
        "updatedAt": "2024-10-18T15:29:55Z",
        "author": {
          "login": "baronfel"
        }
      }
    ]
  }
}