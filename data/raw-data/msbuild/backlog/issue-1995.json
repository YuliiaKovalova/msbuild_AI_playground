{
  "number": 1995,
  "title": "Microsoft.Build.Runtime: experience different behaviour depending on csproj style for net46",
  "body": "System:\r\n```\r\nVisual Studio Community 2017 (Version 15.1 - 26403.7 Release)\r\nNuGet Package Manager 4.1.0\r\n```\r\n\r\nSetup A:\r\n\r\n1. Create new Console App (.NET Framework) w/ .NET Framework 4.6\r\n2. Install Microsoft.Build.Runtime v15.1.548\r\n3. Note: Visual Studio and NuGet use the old Packages.config NuGet format for this project\r\n4. Insert the following code in Program.cs\r\n```\r\ninternal class Program\r\n    {\r\n        private static void Main(string[] args)\r\n        {\r\n            var solutionDirectory = \"<path to your solution>\";\r\n            var projectFilePath = \"<path to the csproj in the solution>\";\r\n\r\n            var globalProperties = new Dictionary<string, string> {\r\n                { \"DesignTimeBuild\", \"true\" },\r\n                { \"BuildProjectReferences\", \"false\" },\r\n                { \"_ResolveReferenceDependencies\", \"true\" },\r\n                { \"SolutionDir\", solutionDirectory + Path.DirectorySeparatorChar }\r\n            };\r\n\r\n            var collection = new ProjectCollection();\r\n            Project project = collection.LoadProject(projectFilePath);\r\n        }\r\n    }\r\n```\r\n5. Run the program.\r\n\r\nResult:\r\nEverything seems to work properly. The project compiles fine. The program can load and evaluate a net46 project and it appears to be able to load and evaluate a net core project.\r\n\r\n\r\nSetup B:\r\n\r\n1. Create new Console App (.NET Framework) w/ .NET Framework 4.6\r\n2. Modify the the created csproj file to use the new csproj file format [as demonstrated here](http://www.natemcmaster.com/blog/2017/03/09/vs2015-to-vs2017-upgrade/)\r\n3. Install Microsoft.Build.Runtime v15.1.548\r\n4. Note: Visual Studio and NuGet use the new PackageReference NuGet format for this project\r\n5. Insert the same code for Program.cs as in Setup A.\r\n6. Run the program.\r\n\r\nResult:\r\nThe program throws an assembly not found exception: Cannot find `System.Threading.Tasks.Dataflow`. After manually installing the missing assembly from NuGet another exception is thrown: `Microsoft.Build.Exceptions.InvalidProjectFileException: 'The imported project \"D:\\Code\\ConsoleApp1\\ConsoleApp1\\bin\\Debug\\net46\\Sdks\\Microsoft.NET.Sdk\\Sdk\\Sdk.props\" was not found. Confirm that the path in the <Import> declaration is correct, and that the file exists on disk.'`\r\n\r\n\r\n\r\n",
  "state": "CLOSED",
  "createdAt": "2017-04-19T16:36:22Z",
  "updatedAt": "2024-02-21T17:19:46Z",
  "closedAt": "2020-08-05T22:09:52Z",
  "author": {
    "login": "xgalaxy"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "If you use our runtime package (MSBuild.exe + content) it treats that as a distribution of MSBuild. This means it should not use anything from outside that instance of MSBuild. So you would have to package all dependencies, in this case the SDKs that .NET CLI/VS package.\r\n\r\nIf this is not what you want and you'd like to use an installed copy of MSBuild to load/parse/build, you can see my explanation in #1784 and the PR I sent to that dotnet-builder project with code to find MSBuild and not distribute MSBuild in your application.",
        "createdAt": "2017-04-20T16:32:48Z",
        "updatedAt": "2017-04-20T16:32:48Z",
        "author": {
          "login": "AndyGerlicher"
        }
      },
      {
        "body": "And what about on Mono? The linked ticket only explains how to find MSBuild in a Windows environment that uses Visual Studio. I'm only developing on Windows atm, but the intent is for this to work on Mono / OS X as well.\r\n\r\nThere is also no explanation as to why I'm seeing different behavior when using old csproj from new csproj even though both are targeting FULL Net Framework and not Core.",
        "createdAt": "2017-04-20T18:39:26Z",
        "updatedAt": "2017-04-20T18:41:11Z",
        "author": {
          "login": "xgalaxy"
        }
      },
      {
        "body": "> So you would have to package all dependencies, in this case the SDKs that .NET CLI/VS package\r\n\r\nRelated: https://github.com/dotnet/sdk/issues/300\r\n\r\nomnisharp-roslyn [sets global properties](https://github.com/OmniSharp/omnisharp-roslyn/blob/0ad7681ea8dbd855dd838f608636c95921e327bd/src/OmniSharp.MSBuild/ProjectFile/ProjectFileInfo.cs#L205-L213) to be able to work with project files.\r\n\r\nAssembling the proper directory layout so that everything works out of the box is tricky, but setting `MSBuildSDKsPath`, `MSBuildExtensionsPath` and `CscToolExe` to the locations of a known working installation (e.g. private copy of a .net core CLI) makes it work. (this also allows mono's msbuild to build SDK / .net core projects.. see [this gist](https://gist.github.com/dasMulli/29c7d68f321cc5ac4a68407a6fd76d19) for example)",
        "createdAt": "2017-04-20T19:05:57Z",
        "updatedAt": "2017-04-20T19:05:57Z",
        "author": {
          "login": "dasMulli"
        }
      },
      {
        "body": "Unless I'm completely misunderstanding something, I think people are missing the heart of the issue:\r\n\r\n**There is also no explanation as to why I'm seeing different behavior when using old csproj format from new csproj format even though both are targeting FULL Net Framework and __not__ Core.**",
        "createdAt": "2017-04-20T21:48:44Z",
        "updatedAt": "2017-04-20T21:50:06Z",
        "author": {
          "login": "xgalaxy"
        }
      },
      {
        "body": "The target is a lot less relavent than what build SDK they use, and that's the difference you're seeing. If you look in an old C# file you'll see MSBuild importing build logic directly from `MSBuildExtensionsPath`:\r\n```XML\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<Project ToolsVersion=\"14.0\" DefaultTargets=\"Build\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\r\n  <Import Project=\"$(MSBuildExtensionsPath)\\$(MSBuildToolsVersion)\\Microsoft.Common.props\" Condition=\"Exists('$(MSBuildExtensionsPath)\\$(MSBuildToolsVersion)\\Microsoft.Common.props')\" />\r\n...\r\n  <Import Project=\"$(MSBuildToolsPath)\\Microsoft.CSharp.targets\" />\r\n</Project>\r\n```\r\n\r\nNew style is:\r\n```XML\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n...\r\n</Project>\r\n```\r\n\r\nThe 2nd translate to an import into the MSBuild SDKs folder. The default location for is `Sdks` folder under the folder where MSBuild.exe is located. In your example it's looking for the `Microsoft.NET.SDK` under `D:\\Code\\ConsoleApp1\\ConsoleApp1\\bin\\Debug\\net46\\Sdks\\Microsoft.NET.Sdk\\Sdk\\Sdk.props`. It might be helpful to run `MSBuild.exe <project>.csproj /pp:out.proj` to see exactly what files MSBuild is importing.\r\n\r\nIs that helpful?",
        "createdAt": "2017-04-20T23:29:13Z",
        "updatedAt": "2017-04-20T23:29:13Z",
        "author": {
          "login": "AndyGerlicher"
        }
      },
      {
        "body": "Yes thanks I think I understand now. ",
        "createdAt": "2017-04-21T01:42:57Z",
        "updatedAt": "2017-04-21T01:42:57Z",
        "author": {
          "login": "xgalaxy"
        }
      },
      {
        "body": "It sounds like the problem was resolved or at least worked around? If not, let us know, and we can reopen this.",
        "createdAt": "2020-08-05T22:09:52Z",
        "updatedAt": "2020-08-05T22:09:52Z",
        "author": {
          "login": "Forgind"
        }
      }
    ]
  }
}