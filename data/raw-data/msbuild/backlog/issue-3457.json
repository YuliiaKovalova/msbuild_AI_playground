{
  "number": 3457,
  "title": "Feature Request: Add System.Diagnostics.FileVersionInfo.GetVersionInfo() to \"allow list\" as Property Function",
  "body": "### Steps to reproduce\r\nProject file\r\n```xml\r\n<Project xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\r\n<Target Name=\"Start\">\r\n  <Message Text=\"$([System.DateTime]::Now.ToString('yyyy.MM.dd'))\" />\r\n  <Message Text=\"$([System.Diagnostics.FileVersionInfo]::GetVersionInfo('C:\\Windows\\System32\\notepad.exe').FileVersion)\" />\r\n</Target>\r\n</Project>\r\n```\r\n### Expected  behavior\r\nRun\r\n\r\n### Actual behavior\r\nBuild started 6/25/2018 7:20:06 PM.\r\nProject \"C:\\Test\\test.proj\" on node 1 (default targets).\r\nStart:\r\n  2018.06.25\r\nC:\\Test\\test.proj(5,12): error MSB4212: Invalid static method invocation syntax: \"[System.Diagnostics.FileVersionInfo]::GetVersionInfo('notepad.exe').FileVersion\". The type \"System.Dia\r\ngnostics.FileVersionInfo\" is either not available for execution in an MSBuild property function or could not be found.\r\nDone Building Project \"C:\\Test\\test.proj\" (default targets) -- FAILED.\r\n**Build FAILED**.\r\n\r\n### Justification\r\nMy SDK is built in a strange way, in which, timestamp is not a reliable way to tracked incremental build nor updates.  The solution is to either create a version.txt on disk that changes every run or get the version from an adjacent .dll or .exe.  System.Diagnostics.FileVersionInfo offer such feature as a direct static call.  It returns a string that represents the version.\r\n",
  "state": "OPEN",
  "createdAt": "2018-06-27T20:54:53Z",
  "updatedAt": "2024-02-21T16:33:36Z",
  "closedAt": null,
  "author": {
    "login": "yuehuang010"
  },
  "labels": [
    "help wanted",
    "Area: Language",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Did you have any Progress with this issue?",
        "createdAt": "2019-07-23T12:25:31Z",
        "updatedAt": "2019-07-23T12:29:41Z",
        "author": {
          "login": "kwstnr"
        }
      },
      {
        "body": "This seems like a reasonable request. One workaround is to set the environment variable `MSBUILDENABLEALLPROPERTYFUNCTIONS=1`, which removes the allow-list check. But that's only suitable for controlled builds, not for requiring to use an SDK or NuGet package.\r\n\r\nRelated issue: it might be nice to compare these versions using #3212, but neither is necessary to implement the other.",
        "createdAt": "2019-08-14T14:17:13Z",
        "updatedAt": "2019-08-14T14:17:13Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Was anyone successful with `MSBUILDENABLEALLPROPERTYFUNCTIONS=1`? Didn't work for me at all.",
        "createdAt": "2021-03-04T00:57:50Z",
        "updatedAt": "2021-03-04T00:57:50Z",
        "author": {
          "login": "virzak"
        }
      },
      {
        "body": "I came across this while trying to find a good way to get the ProductVersion of `$(VCToolsRedistDir)vc_redist.x64.exe` (needed because `VCToolsVersion` does not match the actual version that is installed/visible in registry after installing)\r\n\r\n`MSBUILDENABLEALLPROPERTYFUNCTIONS=1` does work, but it's not really a good solution because my build environment currently doesn't do env setup before calling msbuild.exe",
        "createdAt": "2022-09-12T05:42:37Z",
        "updatedAt": "2022-09-12T06:02:48Z",
        "author": {
          "login": "shuffle2"
        }
      },
      {
        "body": "FileVersionInfo on Windows reads the [VERSIONINFO resource](https://docs.microsoft.com/windows/win32/menurc/versioninfo-resource), but the implementation for Unix reads managed assembly metadata instead and does not see any version information in unmanaged files like notepad.exe, or in .NET single-file executables. Using FileVersionInfo can thus make a build system less portable. I'm not sure making that easier to use is a good idea.\r\n\r\nOTOH, if your build system already requires Windows and needs to read the Win32 version information of vc_redist.x64.exe, then FileVersionInfo is cheaper than writing your own PE and VERSIONINFO parsers. If you cannot use `MSBUILDENABLEALLPROPERTYFUNCTIONS`, then perhaps you can call FileVersionInfo from an [inline task](https://docs.microsoft.com/visualstudio/msbuild/msbuild-inline-tasks?view=vs-2022) instead.",
        "createdAt": "2022-09-12T06:50:28Z",
        "updatedAt": "2022-09-12T06:50:28Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "Yes, I've been trying to make the inline task fit into my project with no luck so far. The task itself works fine, however I'd like to use the output (the ProductVersion String) in `<ItemDefinitionGroup><ClCompile><PreprocessorDefinitions>`, and that seems troublesome. Even if I make the inline task get executed very early in the build, I cannot for the life of me figure out how to reference the output value in the `ItemDefinitionGroup` (or otherwise accomplish it, like filling the metadata from within the `Target` I've created to execute the `Task`).",
        "createdAt": "2022-09-12T08:01:26Z",
        "updatedAt": "2022-09-12T08:01:26Z",
        "author": {
          "login": "shuffle2"
        }
      },
      {
        "body": "If it is difficult to set `PreprocessorDefinitions` metadata, you could instead make the task write a `#define` directive to a file and then `#include` that where needed.",
        "createdAt": "2022-09-12T08:24:16Z",
        "updatedAt": "2022-09-12T08:24:16Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      }
    ]
  }
}