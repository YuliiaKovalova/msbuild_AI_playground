{
  "number": 6880,
  "title": "WithMetadataValue Returns All Items With Matching Identity",
  "body": "### Issue Description\r\nCalling @(Foo->WithMetadataValue('bar', 'baz')) should return `Foo` items that only have the value `baz` for the metadata `bar`.\r\n\r\nBut if there are multiple `Foo` items that have the same identity, every one of them is returned.\r\n\r\n### Steps to Reproduce\r\nBuild the following project and see that there are two `Foo` items. Notice that BOTH of these items have `SomeNewMetadata`\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.Build.NoTargets/3.1.0\">\r\n\r\n    <PropertyGroup>\r\n        <TargetFramework>net472</TargetFramework>\r\n    </PropertyGroup>\r\n    \r\n    <ItemGroup>\r\n        <TestItem Include=\"Foo\">\r\n            <TestMetadata>Hello</TestMetadata>\r\n            <TestMetadata2>Hello!</TestMetadata2>\r\n        </TestItem>\r\n        <TestItem Include=\"Bar\">\r\n            <TestMetadata>NotHello</TestMetadata>\r\n        </TestItem>\r\n        <TestItem Include=\"Foo\">\r\n            <TestMetadata>Hello!</TestMetadata>\r\n            <TestMetadata2>Hello</TestMetadata2>\r\n        </TestItem>\r\n    </ItemGroup>\r\n\r\n    <ItemGroup>\r\n        <TestItem Update=\"@(TestItem->WithMetadataValue('TestMetadata', 'Hello'))\">\r\n            <SomeNewMetadata>woo!</SomeNewMetadata>\r\n        </TestItem>\r\n    </ItemGroup>\r\n\r\n</Project>\r\n```\r\n\r\n\r\n### Expected Behavior\r\nOnly the first `Foo` item is modified to include `SomeNewMetadata`\r\n\r\n### Actual Behavior\r\n![image](https://user-images.githubusercontent.com/4691428/134398100-aa744580-8ec3-4ad0-87a6-8ea144a6c3f8.png)\r\nBoth items have `SomeNewMetadata` despite the second `Foo` item not matching `TestMetadata` value `Hello`.\r\n\r\n### Versions & Configurations\r\nThis happens as far back as 16.8.0+126527ff1",
  "state": "CLOSED",
  "createdAt": "2021-09-22T18:22:50Z",
  "updatedAt": "2024-02-21T14:11:31Z",
  "closedAt": "2022-03-16T17:42:23Z",
  "author": {
    "login": "benvillalobos"
  },
  "labels": [
    "bug",
    "For consideration",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "benvillalobos"
      }
    ]
  },
  "milestone": {
    "title": "VS 17.2"
  },
  "comments": {
    "nodes": [
      {
        "body": "The WithMetadataValue function is [here](https://github.com/dotnet/msbuild/blob/2f1e9cad51097aec5d7268a4afdf7ad9bc6864b9/src/Build/Evaluation/Expander.cs#L2757).\r\n\r\nIt looks like if we find an item that works, we construct a _new_ pair [here](https://github.com/dotnet/msbuild/blob/2f1e9cad51097aec5d7268a4afdf7ad9bc6864b9/src/Build/Evaluation/Expander.cs#L2784) that just happens to have the same key and value. Maybe start by yield returning `item` instead?",
        "createdAt": "2021-09-23T16:18:23Z",
        "updatedAt": "2021-09-23T16:18:23Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "> Maybe start by yield returning item instead?\r\n\r\nUnfortunately that doesn't solve it. It looks like a deeper issue than simply returning the right thing. WithMetadataValue properly returns the \"Foo\" item that's got the metadata we're looking for, but higher up in the stack it looks like it still only compares itemspec. \r\n\r\nBy the time we hit https://github.com/dotnet/msbuild/blob/2f1e9cad51097aec5d7268a4afdf7ad9bc6864b9/src/Build/Evaluation/LazyItemEvaluator.UpdateOperation.cs#L65 `_itemsToUpdate` contains both `Foo` items.",
        "createdAt": "2021-10-11T20:44:16Z",
        "updatedAt": "2021-10-11T20:44:16Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "Talked with @rainersigwald, and he said this is actually as intended. A match is traditionally defined as a match _on EvaluatedInclude_, that is, not including metadata. If you want behavior similar to what you expected, he proposed batching with %(Foo.Metadata) == 'value' in a target.",
        "createdAt": "2022-03-16T17:42:23Z",
        "updatedAt": "2022-03-16T17:42:23Z",
        "author": {
          "login": "Forgind"
        }
      }
    ]
  }
}