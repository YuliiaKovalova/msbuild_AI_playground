{
  "number": 9512,
  "title": "[Bug]: MSBuild should not embed project extensions during restore",
  "body": "### Issue Description\n\nDuring restore, any generated file in `$(MSBuildProjectExtensionsPath)` is imported [here](https://github.com/dotnet/msbuild/blob/f914c9bfb613d32edb658b803c7fe046f9ee3c37/src/Tasks/Microsoft.Common.props#L66) and [here](https://github.com/dotnet/msbuild/blob/f914c9bfb613d32edb658b803c7fe046f9ee3c37/src/Tasks/Microsoft.Common.targets#L35).  Imports are automatically embedded in the binary log but in the case of these files, they are generated by the restore gesture.  \n\nWhen a user specifies `/Target:Restore` or `/Restore`, MSBuild launches a build invocation of the Restore target with a special global property [MSBuildRestoreSessionId](https://github.com/dotnet/msbuild/blob/f914c9bfb613d32edb658b803c7fe046f9ee3c37/src/MSBuild/XMake.cs#L1773).  It should also set `ImportProjectExtensionProps` and `ImportProjectExtensionTargets` to false to skip the import of any project extension during restore.  This would only break users who are doing the following:\n\n1. Invoke some custom build target that generates files in `$(MSBuildProjectExtensionsPath)`\n2. Invoke restore and expect their generated props and targets to affect Restore\n\nI am not aware of anyone doing this so I don't think it would be a breaking change.  At this time, since the files are embedded during evaluation, the ones that get embedded are not guaranteed to be correct if restore writes new versions. The functionality that executes restore (like NuGet) should [embed these files](https://github.com/NuGet/NuGet.Client/pull/5494) instead. \n\nI'd be more than happy to send the pull request.\n\n\n### Steps to Reproduce\n\n1. Restore a project with the binary logger (`/t:restore /bl`)\n2. Modify a package reference\n3. Restore again\n\n\n### Expected Behavior\n\nThe binary log should have a the updated `.nuget.g.props`\n\n### Actual Behavior\n\nThe embedded `.nuget.g.props` in the binary log is the one that existed on disk when the project was evaluated not the one that was generated during restore.\n\n### Analysis\n\n_No response_\n\n### Versions & Configurations\n\n_No response_",
  "state": "CLOSED",
  "createdAt": "2023-12-08T18:38:38Z",
  "updatedAt": "2024-02-28T10:29:03Z",
  "closedAt": "2024-02-28T10:29:03Z",
  "author": {
    "login": "jeffkl"
  },
  "labels": [
    "bug",
    "help wanted",
    "backlog",
    "Priority:2",
    "triaged",
    "Functionality:Restore"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Team triage: versioning would be better solution - though more complicated. Restore filesmight possbily be of interest in some scenarios - so preventing them might be problematic as well.",
        "createdAt": "2024-01-11T15:07:03Z",
        "updatedAt": "2024-01-11T15:07:21Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "Note that the current behavior is plain wrong and incorrect. While versioning might be helpful in other scenarios, here it will only harm, by embedding irrelevant versions of these files, causing confusion, increasing binlog size and slowing the build down. What Jeff proposes is the best solution here.",
        "createdAt": "2024-01-11T16:46:23Z",
        "updatedAt": "2024-01-11T16:46:23Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "also by not importing these files during restore we make the build slightly faster and avoid non-determinism, where old content might feed into the evaluation in an unpredictable way.",
        "createdAt": "2024-01-11T16:47:48Z",
        "updatedAt": "2024-01-11T16:47:48Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "@KirillOsenkov - Agreed. I as well missed the info about https://github.com/NuGet/NuGet.Client/pull/5494 that addresses concern of someone possibly wanting to see the files from restore time.\r\n\r\n@jeffkl - you expressed the willingness to contribute a fixing PR - this would be very appreciated.",
        "createdAt": "2024-01-11T20:07:20Z",
        "updatedAt": "2024-01-11T20:07:20Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "Yes absolutely, one last question:\n\nThe _easiest_ implementation is to set some global properties here:\n\nhttps://github.com/dotnet/msbuild/blob/45f3aed1944548f123ce928d1253e38b5008dccf/src/MSBuild/XMake.cs#L1775\n\nHowever, it seems a little bad to have MSBuild setting global properties that are specific to any particular build.  Instead, we could start setting a new property like `IsMSBuildRestoring` and then we could update the common props/targets to make decisions based on whether or not a restore is running.  We'd just have to make sure we come up with a property name that no one is using.  Alternatively, we could just update the common props/targets to read the `MSBuildRestoreSessionId` property to not import these generated files.  So to summarize, the options are:\n\n1. Have MSBuild set global properties `ImportProjectExtensionProps` and `ImportProjectExtensionTargets` to false during restore\n2. Have MSBuild set a new global property like `IsMSBuildRestoring` and update the [here](https://github.com/dotnet/msbuild/blob/f914c9bfb613d32edb658b803c7fe046f9ee3c37/src/Tasks/Microsoft.Common.props#L66) to not import if that property is set\n3. Update [here](https://github.com/dotnet/msbuild/blob/f914c9bfb613d32edb658b803c7fe046f9ee3c37/src/Tasks/Microsoft.Common.props#L66) to not import if `MSBuildRestoreSessionId` is set.\n\nIn my opinion, option 2 is the cleanest and I wish I had added such a property when I added `MSBuildRestoreSessionId` but any of the options make sense.  Please weigh in.\n\n/cc @rainersigwald ",
        "createdAt": "2024-01-11T20:23:00Z",
        "updatedAt": "2024-01-11T20:23:00Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "Yeah, I also like 2; I would name it `MSBuildIsRestoring`. Though since we already have MSBuildRestoreSessionId, comparing it to nonempty seems pretty reasonable too.\r\n\r\nHow confident are we about other users of restoration not expecting the ProjectExtension stuff to be present at MSBuild-integrated restore time? I can imagine a system that would break under such a circumstance but I don't know if any exists. A changewave would probably be enough.",
        "createdAt": "2024-01-11T20:27:43Z",
        "updatedAt": "2024-01-11T20:27:43Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> How confident are we about other users of restoration not expecting the ProjectExtension stuff to be present at MSBuild-integrated restore time? I can imagine a system that would break under such a circumstance but I don't know if any exists. A changewave would probably be enough.\n\nI think its extremely unlikely that anyone is doing this.  You would have to run some external process which generates the files and _then_ run restore, and finally build, while expecting the restore to take into account what you generated up front.  I highly doubt anyone has done this.",
        "createdAt": "2024-01-11T21:48:39Z",
        "updatedAt": "2024-01-11T21:48:39Z",
        "author": {
          "login": "jeffkl"
        }
      }
    ]
  }
}