{
  "number": 10254,
  "title": "[Bug]: Running a specific target which depends on ResolveReferences fails when TargetFrameworks is specified",
  "body": "### Issue Description\n\nThe error error `MSB4057: The target \"ResolveReferences\" does not exist in the project.` is thrown when specifically running a target that depends on `ResolveReferences` in a project file that uses `<TargetFrameworks>` with one or more TFMs. The error does not happen when just running the build target or when using `<TargetFramework>`, even though the \"problematic\" target is still run in both cases. Additionally, specifying both build and problematic targets still throws the error.\n\n### Steps to Reproduce\n\nA minimal reproduction of the problem (has a readme and script for demonstrating the issue): [ResolveReferencesDoesNotExistRepro.zip](https://github.com/user-attachments/files/15873881/ResolveReferencesDoesNotExistRepro.zip)\r\n\r\nAll that's needed is a project file specifying `<TargetFrameworks>`, a target that depends on `ResolveReferences`, and then running that target with msbuild like so: `msbuild.exe /t:DependsOnResolveReferences ClassLibrary.csproj`\r\n\r\nNone of the following fix the issue: adding `/restore`, additionally specifying the build target, or specifying a solution instead of the project file.\n\n### Expected Behavior\n\n`#### The target was run ####` should be printed in the build log\n\n### Actual Behavior\n\nFailed build with `error MSB4057: The target \"ResolveReferences\" does not exist in the project.`\n\n### Analysis\n\n_No response_\n\n### Versions & Configurations\n\n```\r\n$ MSBuild.exe --version\r\nMSBuild version 17.10.4+10fbfbf2e for .NET Framework\r\n17.10.4.21802\r\n```",
  "state": "CLOSED",
  "createdAt": "2024-06-17T16:14:17Z",
  "updatedAt": "2024-06-17T19:30:49Z",
  "closedAt": "2024-06-17T19:30:49Z",
  "author": {
    "login": "wnorvelleadc"
  },
  "labels": [
    "bug"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "What would you expect to have happened at the point that your target runs in this case?\r\n\r\nThe reason `ResolveReferences` isn't defined in the \"outer build\" is that it only really makes sense for one of the specific `TargetFramework`s defined in the list, not for the \"overall/outer\" build that runs all of them.",
        "createdAt": "2024-06-17T17:09:41Z",
        "updatedAt": "2024-06-17T17:09:41Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "AFAICT, `ResolveReferences` is normally run once per TFM, so I would expect a target dependent on it would also get run once per TFM.\r\n\r\nPerhaps that's not how MSBuild is thinking about what targets to run? I'm certainly quite open to the possibility that we're just using it wrong.",
        "createdAt": "2024-06-17T17:36:37Z",
        "updatedAt": "2024-06-17T17:36:37Z",
        "author": {
          "login": "wnorvelleadc"
        }
      },
      {
        "body": "> AFAICT, `ResolveReferences` is normally run once per TFM, so I would expect a target dependent on it would also get run once per TFM.\r\n\r\nThat's correct.\r\n\r\n> Perhaps that's not how MSBuild is thinking about what targets to run?\r\n\r\nYeah I think this is what's biting you. Multitargeted projects are fairly confusing with respect to supplemental targets.\r\n\r\nWhat happens is that your target appears in _all three versions_ of the multitargeted project. In the two versions that have a TF set (the \"inner\" builds), it works just fine, as you can see if you add `-p:TargetFramework=net6.0` to your build command line.\r\n\r\nBut it also exists in the outer build--_un_like most of the build process. The outer build normally just calls `Build` on the inner builds. Your custom target will exist but not do anything in the outer build. But when you specify a target (and no TF property) on the command line, you're explicitly requesting it and by extension its `DependsOnTargets`--but then `ResolveReferences` wasn't imported, producing the error you saw.\r\n\r\nThis diagram may help? Or maybe not? I tried to make it clear in both the text and the diagram.\r\n\r\n```mermaid\r\ngraph TD\r\n\r\nsubgraph Outer[Foo.csproj <i>no TF set</i>]\r\n  BuildO[Build]\r\n  DependsOnResolveReferencesO[DependsOnResolveReferences] --x|DependsOn| ResolveReferences[/<s>ResolveReferences</s>/]\r\nend\r\n\r\nsubgraph TF1[Foo.csproj <i>TF=net6.0</i>]\r\n  Build1[Build] --> BeforeBuild1[BeforeBuild]\r\n  Build1 --> CoreBuild1[CoreBuild]\r\n  CoreBuild1 --> RR1[ResolveReferences]\r\n  Build1 --> AfterBuild1[AfterBuild]\r\n  DependsOnResolveReferences1[DependsOnResolveReferences] -->|DependsOn| RR1\r\n  DependsOnResolveReferences1 ==>|AfterTargets| RR1\r\n\r\nend\r\n\r\nsubgraph TF2[Foo.csproj <i>TF=net6.0</i>]\r\n  Build2[Build] --> BeforeBuild2[BeforeBuild]\r\n  Build2 --> CoreBuild2[CoreBuild]\r\n  CoreBuild2 --> RR2[ResolveReferences]\r\n  Build2 --> AfterBuild2[AfterBuild]\r\n  DependsOnResolveReferences2[DependsOnResolveReferences] -->|DependsOn| RR2\r\n  DependsOnResolveReferences2 ==>|AfterTargets| RR2\r\nend\r\n\r\nBuildO --> Build1\r\nBuildO --> Build2\r\n```",
        "createdAt": "2024-06-17T18:36:42Z",
        "updatedAt": "2024-06-17T18:36:42Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Ah, ok. That makes sense. Thank you very much for your help, it's been enlightening!",
        "createdAt": "2024-06-17T19:30:49Z",
        "updatedAt": "2024-06-17T19:30:49Z",
        "author": {
          "login": "wnorvelleadc"
        }
      }
    ]
  }
}