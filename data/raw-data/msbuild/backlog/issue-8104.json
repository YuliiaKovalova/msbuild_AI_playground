{
  "number": 8104,
  "title": "Metadata matching when '@' in file path name sometimes fails to behave as expected",
  "body": "<!-- This is a template that helps us provide quicker feedback. Please use any relevant sections and delete anything you don't need. -->\r\n\r\n### Issue Description\r\nDemonstrating issues with msbuild with @ in path names\r\n\r\nThe steps to reproduce below are a cut down version of the MSBuild files used by Grpc.Tools based projects to demonstate the issue https://github.com/grpc/grpc/issues/30746\r\n\r\nAll gRPC and protobuf compiler tasks and logic have been removed and the outputs mocked below to simplify and demonstrate a possible bug in MSBuild. ( Original MSBuild files are in: https://github.com/grpc/grpc/blob/master/src/csharp/Grpc.Tools/build/_protobuf/Google.Protobuf.Tools.targets )\r\n\r\nIssue: If a directory path contains the '@' character then the item list is wrong - it misses out the files with '@' in their paths.\r\n\r\nTwo 'workarounds' are included and - using qualified metadata. But this adds a different behaviour to the MSBuild batching. The unqualified metadata should work.\r\n\r\nIf the directory '@ myfiles' is renamed to 'myfiles' and the mocked data in <Protobuf_ExpectedOutputs> also edited to remove the '@' then it behaves as expected\r\n\r\n### Steps to Reproduce\r\nFiles to reproduce the problem are here: https://github.com/tonydnewell/msbuild-issue\r\ntogether with output demonstrating the issue (output-showing-issue.txt) and ok (output-showing-ok.txt) - the only difference being the '@' in the path.\r\n\r\n<!--\r\n* Include as much of the following as possible:\r\n\r\n* A minimal sample project that reproduces the issue.\r\n* Your zipped project.\r\n* IDE / CLI steps to create the project and reproduce the behaviour.\r\n* Your command line invocation\r\n\r\nIf providing steps to reproduce the issue proves difficult, consider attaching a binlog:\r\n[Details on sharing binary logs](https://aka.ms/msbuild/binlog)\r\n[More information on binary logs](https://github.com/dotnet/msbuild/blob/main/documentation/wiki/Binary-Log.md)\r\nNOTE: Binary logs capture environment information. Ensure it does not include any information you don't want to be public before you attach one.\r\nIf you want to share one just with Microsoft, you can [report a problem through Visual Studio](https://developercommunity.visualstudio.com/report) and share it privately with Microsoft.\r\n-->\r\n\r\n### Versions & Configurations\r\nMicrosoft (R) Build Engine version 17.2.1+52cd2da31 for .NET Framework\r\n<!--\r\n* In a Visual Studio developer command prompt, run `msbuild -version` and paste the output here.\r\n* If applicable, include the version of the tool that invokes MSBuild (Visual Studio, dotnet CLI, etc):\r\n\r\n* Post any other relevant configuration settings here.\r\n*   OS, architecture, etc.\r\n-->\r\n",
  "state": "OPEN",
  "createdAt": "2022-10-31T12:43:41Z",
  "updatedAt": "2024-01-31T08:15:55Z",
  "closedAt": null,
  "author": {
    "login": "tonydnewell"
  },
  "labels": [
    "bug",
    "backlog",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "FYI @jtattermusch",
        "createdAt": "2022-10-31T14:55:07Z",
        "updatedAt": "2022-10-31T14:55:07Z",
        "author": {
          "login": "tonydnewell"
        }
      },
      {
        "body": "I think the issue occurs because of:\r\n```xml\r\n<Protobuf_Compile>\r\n        <Source>%(Identity)</Source>\r\n        <CompileOutputs>True</CompileOutputs>\r\n</Protobuf_Compile>\r\n```\r\n\r\nBecause the `Identity` contains an '@' which may have been escaped internally as '%40', then maybe `Source` gets set incorrectly.  If I explicitly create the `Protobuf_Compile` items and metadata by hand and not rely on the file system wildcards then it all works OK. e.g.\r\n\r\n```xml\r\n<Protobuf_Compile Include=\"@myfiles\\other.proto\">\r\n         <Source>@myfiles\\other.proto</Source>\r\n        <CompileOutputs>True</CompileOutputs>\r\n </Protobuf_Compile>\r\n <Protobuf_Compile Include=\"testcodegen.proto\">\r\n        <Source>testcodegen.proto</Source>\r\n        <CompileOutputs>True</CompileOutputs>\r\n </Protobuf_Compile>\r\n```\r\n\r\nOne workaround might be if I could unescape the `%(Identity)` , but `MSBuild::Unescape()` is a Property function and I can't use it on metadata.",
        "createdAt": "2022-11-01T10:14:35Z",
        "updatedAt": "2022-11-01T10:14:35Z",
        "author": {
          "login": "tonydnewell"
        }
      },
      {
        "body": "> `MSBuild::Unescape()` is a Property function and I can't use it on metadata.\r\n\r\nWhy not? Seems to work OK on MSBuild 17.3.2+561848881.\r\n\r\n```XML\r\n      <Protobuf_Compile>\r\n        <Source>$([MSBuild]::Unescape(%(Identity)))</Source>\r\n        <CompileOutputs>True</CompileOutputs>\r\n      </Protobuf_Compile>\r\n```",
        "createdAt": "2022-11-01T11:10:03Z",
        "updatedAt": "2022-11-01T11:10:03Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "Thanks. I wasn't getting the syntax right as I was assuming I need to use Item functions on metadata.  I'll test this as a workaround with all older versions of msbuild that Grpc.Tools supports.\r\n\r\nHowever there is still a bug since using wildcards:\r\n```xml\r\n<Protobuf_Compile Include=\"**\\*.proto\">\r\n```\r\nbehaves differently than explicit declaration:\r\n```xml\r\n<Protobuf_Compile Include=\"@myfiles\\other.proto\" />\r\n<Protobuf_Compile Include=\"testcodegen.proto\" />\r\n```\r\nwhen setting the `Source` metadata from `%(Identity)`:\r\n```xml\r\n<Protobuf_Compile>\r\n    <Source>%(Identity)</Source>\r\n    <CompileOutputs>True</CompileOutputs>\r\n</Protobuf_Compile>\r\n```\r\n",
        "createdAt": "2022-11-01T14:02:43Z",
        "updatedAt": "2022-11-01T14:03:00Z",
        "author": {
          "login": "tonydnewell"
        }
      }
    ]
  }
}