{
  "number": 7729,
  "title": "Build on s390x now fails with System.PlatformNotSupportedException",
  "body": "<!-- This is a template that helps us provide quicker feedback. Please use any relevant sections and delete anything you don't need. -->\r\n\r\n### Issue Description\r\n<!--\r\n* Please include a clear and concise description of the problem.\r\n-->\r\n\r\nAs of .NET7 preview5, attempting to use msbuild on an linux-s390x host now fails with:\r\n```\r\nMSBuild version 17.3.0-preview-22306-01+1c045cf58 for .NET\r\nMSBUILD : error MSB1025: An internal failure occurred while running MSBuild.\r\nSystem.PlatformNotSupportedException: S390x is not a supported architecture.\r\n   at Microsoft.Build.Shared.XMakeAttributes.GetCurrentMSBuildArchitecture()\r\n   at Microsoft.Build.BackEnd.NodeProviderOutOfProc.CreateNodes(Int32 nextNodeId, INodePacketFactory factory, Func`2 configurationFactory, Int32 numberOfNodesToCreate)\r\n   at Microsoft.Build.BackEnd.NodeManager.AttemptCreateNode(INodeProvider nodeProvider, NodeConfiguration nodeConfiguration, Int32 numberOfNodesToCreate)\r\n   at Microsoft.Build.BackEnd.NodeManager.CreateNodes(NodeConfiguration configuration, NodeAffinity nodeAffinity, Int32 numberOfNodesToCreate)\r\n   at Microsoft.Build.Execution.BuildManager.PerformSchedulingActions(IEnumerable`1 responses)\r\n   at Microsoft.Build.Execution.BuildManager.HandleNewRequest(Int32 node, BuildRequestBlocker blocker)\r\n   at Microsoft.Build.Execution.BuildManager.ProcessPacket(Int32 node, INodePacket packet)\r\n   at Microsoft.Build.Execution.BuildManager.<>c__DisplayClass78_0.<Microsoft.Build.BackEnd.INodePacketHandler.PacketReceived>b__0()\r\n   at Microsoft.Build.Execution.BuildManager.ProcessWorkQueue(Action action)\r\n```\r\n\r\n### Steps to Reproduce\r\n<!--\r\n* Include as much of the following as possible:\r\n\r\n* A minimal sample project that reproduces the issue.\r\n* Your zipped project.\r\n* IDE / CLI steps to create the project and reproduce the behaviour.\r\n* Your command line invocation\r\n\r\nIf providing steps to reproduce the issue proves difficult, consider attaching a binlog:\r\n[Details on sharing binary logs](https://aka.ms/msbuild/binlog)\r\n[More information on binary logs](https://github.com/dotnet/msbuild/blob/main/documentation/wiki/Binary-Log.md)\r\nNOTE: Binary logs capture environment information. Ensure it does not include any information you don't want to be public before you attach one.\r\nIf you want to share one just with Microsoft, you can [report a problem through Visual Studio](https://developercommunity.visualstudio.com/report) and share it privately with Microsoft.\r\n-->\r\n\r\nTo reproduce, you need a dotnet SDK hosted natively on linux-s390x.  While this is not a platform supported by Microsoft and there are no pre-built binaries, it is a community-supported platform in the runtime and other packages, and we are able to build a native SDK since .NET6; it is e.g. provided by Red Hat as part of RHEL8 on s390x.\r\n\r\nNote that tiny \"hello world\" programs actually still build; but attempting to build a large project (like the runtime repository itself) shows the error.  I assume this is because the error only triggers in the code path where multiple build nodes are spawned, but I'm not completely certain about the specific triggers.\r\n\r\n### Expected Behavior\r\n<!--\r\n* The expected output or behavior.\r\n-->\r\n\r\nBuild completes successfully.\r\n\r\n### Actual Behavior\r\n<!--\r\n* The actual output or behavior.\r\n-->\r\n`System.PlatformNotSupportedException: S390x is not a supported architecture.`\r\n\r\n### Analysis\r\n<!--\r\n* If you have an idea where the problem might lie, let us know that here.\r\n* Please include any pointers to code, relevant changes, or related issues you know of.\r\n-->\r\n\r\nIn the past, msbuild used to work fine on our platform even without having any platform-specific support code anywhere in the msbuild sources.  However, as of a recent commit, this is no longer true.  https://github.com/dotnet/msbuild/pull/7550  (@BenVillalobos @rainersigwald) added an explicit check in `GetCurrentMSBuildArchitecture` causing execution to abort if the current architecture is anything but Intel or ARM.\r\n\r\nWe really need to be able to continue using msbuild on s390x in order to offer continued support for .NET7 and later on our platform.  I'd be happy to work on a fix, but I'd appreciate guidance on the correct approach here.  Should we make msbuild explicitly aware of s390x as a platform throughout?   Or should msbuild just handle \"unknown\" architectures without aborting, as it used to?\r\n\r\nFYI @janani66 @Sapana-Khemkar - this problem will also affect PowerPC as another community-supported platform.\r\n\r\nFYI @directhex @steveisok @crummel \r\n\r\n### Versions & Configurations\r\n<!--\r\n* In a Visual Studio developer command prompt, run `msbuild -version` and paste the output here.\r\n* If applicable, include the version of the tool that invokes MSBuild (Visual Studio, dotnet CLI, etc):\r\n\r\n* Post any other relevant configuration settings here.\r\n*   OS, architecture, etc.\r\n-->\r\n",
  "state": "CLOSED",
  "createdAt": "2022-06-22T16:14:39Z",
  "updatedAt": "2024-02-21T14:08:24Z",
  "closedAt": "2022-06-23T18:32:51Z",
  "author": {
    "login": "uweigand"
  },
  "labels": [
    "bug",
    "regression",
    "Area: Engine",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "> As of .NET7 preview5, attempting to use msbuild on an linux-s390x host now fails with:\r\n\r\nSmall update: I just noticed that the problem already appears with preview4 as well.  preview3 still works.",
        "createdAt": "2022-06-22T16:23:12Z",
        "updatedAt": "2022-06-22T16:23:12Z",
        "author": {
          "login": "uweigand"
        }
      },
      {
        "body": "> Should we make msbuild explicitly aware of s390x as a platform throughout? Or should msbuild just handle \"unknown\" architectures without aborting, as it used to?\r\n\r\nI lean toward the latter on .NET Core at least for the case where we're just launching \"another of the same\". We can't have, for example, an x64 taskhost on S390x, but that's not likely to be relevant in most cases.\r\n\r\n@BenVillalobos what do you think?",
        "createdAt": "2022-06-22T16:23:47Z",
        "updatedAt": "2022-06-22T16:23:47Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Defaulting to the logic that existed before sounds like a decent solution for this. Manually adding architectures as they come up isn't very maintainable.",
        "createdAt": "2022-06-22T20:48:18Z",
        "updatedAt": "2022-06-22T20:48:18Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "Created https://github.com/dotnet/msbuild/pull/7731 to fall back to the original logic.",
        "createdAt": "2022-06-22T20:54:18Z",
        "updatedAt": "2022-06-22T20:54:18Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "Thanks!   I've re-built my s390x dotnet SDK (.NET7 preview4) with the above patch included, and this does fix the problem for me.  The resulting msbuild is once again able to sucessfully complete a native build of the full dotnet runtime repo on s390x.",
        "createdAt": "2022-06-23T16:19:45Z",
        "updatedAt": "2022-06-23T16:19:58Z",
        "author": {
          "login": "uweigand"
        }
      }
    ]
  }
}