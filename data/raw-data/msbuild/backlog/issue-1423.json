{
  "number": 1423,
  "title": "Implicit import should use $(MSBuildSdksPath) property",
  "body": "(pointed out offline by @radical)\r\n\r\nThe generated `Import` element shouldn't be implemented [as it is](https://github.com/Microsoft/msbuild/commit/649022690e7d5864e2ce68af4e2a7eeebfc6280a#diff-a9d9d41d4ebe72ee0285850966f63d3fR211), but could inject a use of the MSBuildSdksPath property. It could be just\r\n\r\n```C#\r\n$\"$(MSBuildSdksPath)\\{sdkName}\\sdk\\Sdk.props\"\r\n```\r\n\r\nThat would allow a) import fallbacks and b) easier overriding of the property (wouldn't have to check for an environment variable in the [default setting](https://github.com/Microsoft/msbuild/commit/649022690e7d5864e2ce68af4e2a7eeebfc6280a#diff-32568b659f3471e9ecdeb620a363af3cR466)).",
  "state": "CLOSED",
  "createdAt": "2016-12-01T19:32:05Z",
  "updatedAt": "2024-02-21T17:23:49Z",
  "closedAt": "2018-02-21T14:00:34Z",
  "author": {
    "login": "rainersigwald"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Feature: Sdks"
  },
  "comments": {
    "nodes": [
      {
        "body": "Note that this might be irrelevant, depending on the nature of the SDK acquisition story once there is one.",
        "createdAt": "2016-12-01T19:32:49Z",
        "updatedAt": "2016-12-01T19:32:49Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Agree with the 2nd comment. But I also don't think we should have a concept of fallback here. For instance, if we are asking a NuGet SDK resolver to get a package and give us the path, it should return the exact path to the SDK on disk. Adding support for fallback would only complicate the scenario. I strongly don't want this to turn into an `MSBuildExtensionsPath` scenario where things install stuff to the machine then we look in a few places until we find them or error.",
        "createdAt": "2016-12-01T20:35:08Z",
        "updatedAt": "2016-12-01T20:35:08Z",
        "author": {
          "login": "AndyGerlicher"
        }
      },
      {
        "body": "I don't think that scenario can be avoided. When someone adds an SDK then they have to install it to `MSBuildSdksPath` and that's basically `MSBuildExtensionsPath` again.",
        "createdAt": "2016-12-01T22:57:20Z",
        "updatedAt": "2016-12-01T22:57:20Z",
        "author": {
          "login": "mhutch"
        }
      },
      {
        "body": "@mhutch That is true today for the initial only-supports-.NET-and-Web implementation of Sdks.\r\n\r\nThe long term goal is to allow third-party Sdks, and have a mechanism that makes them available at import time--like NuGet restore does, but potentially distinct from it (to avoid polluting the project's package-closure with references needed by build-time processes).",
        "createdAt": "2016-12-01T23:06:55Z",
        "updatedAt": "2016-12-01T23:06:55Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Ah, ok. How long term is that goal? :)",
        "createdAt": "2016-12-01T23:10:03Z",
        "updatedAt": "2016-12-01T23:10:03Z",
        "author": {
          "login": "mhutch"
        }
      },
      {
        "body": "@mhutch the currently solution is interim for this preview release only (hopefully). And the situation you described is actually exactly why I would not want to use `MSBuildExtensionsPath` or let anyone outside of MSBuild know where the `MSBuildSdksPath` points to. If someone is adding an SDK they have to install, they might as well just use `MSBuildExtensionsPath` and import it (and that has fallback for that reason). Ideally this new feature would include an acquisition story so the actual path on disk is an implementation detail/contract between the acquisition mechanism and the package resolver. This is still in progress so we can't yet answer all the questions, but this is some of our initial thoughts.",
        "createdAt": "2016-12-02T19:09:45Z",
        "updatedAt": "2016-12-02T19:09:45Z",
        "author": {
          "login": "AndyGerlicher"
        }
      },
      {
        "body": "Ok, makes sense!",
        "createdAt": "2016-12-02T19:55:43Z",
        "updatedAt": "2016-12-02T19:55:43Z",
        "author": {
          "login": "mhutch"
        }
      },
      {
        "body": "@rainersigwald is this getting fixed for RC2? CLI implementation around SDKs was based on the spec and therefore depends on the environment variable. Do we need to make a short-term adjustment?",
        "createdAt": "2016-12-03T20:11:00Z",
        "updatedAt": "2016-12-03T20:11:00Z",
        "author": {
          "login": "TheRealPiotrP"
        }
      },
      {
        "body": "@piotrpMSFT No, it's not going to be changed for RC2. But this is just a more elegant way to implement the same behavior--if the CLI sets the environment variable current MSBuild will respect it.",
        "createdAt": "2016-12-03T20:26:58Z",
        "updatedAt": "2016-12-03T20:26:58Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald I'm not seeing that. CLI is setting the environment variable but MSBuild is looking for the sdk in an `Sdks` directory next to itself. I don't have much time to dig into this today so I'm adjusting CLI to the error message...",
        "createdAt": "2016-12-03T20:29:04Z",
        "updatedAt": "2016-12-03T20:29:04Z",
        "author": {
          "login": "TheRealPiotrP"
        }
      },
      {
        "body": "`Microsoft.Build.Exceptions.InvalidProjectFileException: The imported project \"/Users/piotrp/code/github/piotrpMSFT/cli/artifacts/osx.10.11-x64/stage2/sdk/1.0.0-preview4-004184/Sdks/Microsoft.NET.Sdk/Sdk/Sdk.props\" was not found. Confirm that the path in the <Import> declaration is correct, and that the file exists on disk.`",
        "createdAt": "2016-12-03T20:29:37Z",
        "updatedAt": "2016-12-03T20:29:37Z",
        "author": {
          "login": "TheRealPiotrP"
        }
      },
      {
        "body": "FWIW, I ran a `/v:diag` build [though after changing the path] so we can see if there is something wrong with the env var casing, spelling, etc:\r\n\r\n```\r\nEnvironment at start of build:\r\n... other stuff ...\r\nMSBuildSDKsPath = /Users/piotrp/code/github/piotrpMSFT/cli/artifacts/osx.10.11-x64/stage2/sdk/1.0.0-preview4-004184/Sdks\r\n...\r\n```",
        "createdAt": "2016-12-03T20:33:03Z",
        "updatedAt": "2016-12-03T20:33:43Z",
        "author": {
          "login": "TheRealPiotrP"
        }
      },
      {
        "body": "That's reporting on the property, not the environment variable, so I'd expect that given your symptoms.",
        "createdAt": "2016-12-03T20:35:16Z",
        "updatedAt": "2016-12-03T20:35:16Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald and I looked at this a bit and saw that the environment variable is being honored by MSBuild. Looks like a local issue on my machine. I'll report back if I find new symptoms.",
        "createdAt": "2016-12-03T20:58:13Z",
        "updatedAt": "2016-12-03T20:58:13Z",
        "author": {
          "login": "TheRealPiotrP"
        }
      },
      {
        "body": "Since there is a NuGet-based SDK acquisition story now, I believe this could be closed per comment https://github.com/Microsoft/msbuild/issues/1423#issuecomment-264270367?",
        "createdAt": "2018-02-21T09:21:06Z",
        "updatedAt": "2018-02-21T09:21:06Z",
        "author": {
          "login": "kzu"
        }
      },
      {
        "body": "Yes, I think so.",
        "createdAt": "2018-02-21T14:00:34Z",
        "updatedAt": "2018-02-21T14:00:34Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}