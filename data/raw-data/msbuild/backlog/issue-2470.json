{
  "number": 2470,
  "title": "Incremental builds: Respect inputs closure changes as well as timestamps",
  "body": "Currently targets are skipped based on the timestamps of files defined as inputs and outputs for the target. This is good and fast, yet maybe incorrect for what the target author intended.\r\n\r\nEspecially with the increased popularity of globbing to add items to projects, these items alone cannot be used as only inputs for incremental builds in some situations which may be unexpected for target authors. For example, when items are deleted or renamed, there is no newer modification timestamp, so a target may be skipped. Previously, the main project was modified when new items were added to the project so all targets using `$(MSBuildAllProjects)` as input would be rebuilt, but with globbing and an `@(Compile)` or `@(Content)` input, a target may be skipped unexpectedly.\r\n\r\nProposal: Add a new attribute to targets to allow target authors to opt into a new tracking of the input closure, so that given `File1`, `File2` and `File3` existed on disk with equal timestamps, a change of inputs from `File1;File2` to `File2;File3` will cause the target to be rebuilt.\r\n\r\nI don't have a good idea how to name it though (`TrackClosureForIncrementalBuilds=\"true\"`?).\r\n\r\nThe only workaround tat the moment would be to have an additional target write a file with all the inputs using MSBuild 15's `<WriteLinesToFile WriteOnlyWhenDifferent=\"True\" \u2026/>` feature and using the resulting file as input for incremental builds.",
  "state": "OPEN",
  "createdAt": "2017-08-24T18:58:45Z",
  "updatedAt": "2024-02-21T16:35:58Z",
  "closedAt": null,
  "author": {
    "login": "dasMulli"
  },
  "labels": [
    "needs-design",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Backlog"
  },
  "comments": {
    "nodes": [
      {
        "body": "Context:\r\n\r\nI was trying to add a target to a wix installer project that scans a directory for files to include (using `HeatDirectory`) but wanted it to only run when the files in that directory actually changed. After testing, I figured that I couldn't do it in a fully correct way without writing additional files only for the sake of supplying incremental build inputs.",
        "createdAt": "2017-08-24T19:00:43Z",
        "updatedAt": "2017-08-24T19:00:43Z",
        "author": {
          "login": "dasMulli"
        }
      },
      {
        "body": "This is #701, which we decided not to do (we aren't fundamentally opposed to it, but there's a lot of complexity). For `Compile` https://github.com/Microsoft/msbuild/pull/1328 is similar to your `WriteLinesToFile` approach but a bit more conservative of I/O.",
        "createdAt": "2017-08-24T19:09:24Z",
        "updatedAt": "2017-08-24T19:09:24Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "The thing is that I keep finding targets [like this one in MvcPrecompilation](https://github.com/aspnet/MvcPrecompilation/blob/efa82ceefe14bd0c1d182c3d22c05123634e93d9/src/Microsoft.AspNetCore.Mvc.Razor.ViewCompilation/build/netstandard2.0/Microsoft.AspNetCore.Mvc.Razor.ViewCompilation.targets#L22-L23) that are notoriously unsafe. (publish web app, rename view, publish again => app doesn't work).\r\nThe reality is that what target authors *think*/*expect* inputs/outputs to do is different from what is actually happening and applying a workaround is increasingly difficult.\r\n\r\nAn additional property on the `Target` element is the only way I can think of to offer an easily discoverable and explainable workaround (=> documentation). I do understand that this is a considerable effort and introduces a good deal of complexity, yet it can save a lot of wasted time debugging issues with incremental builds (like #2463).",
        "createdAt": "2017-08-24T19:31:44Z",
        "updatedAt": "2017-08-24T19:31:44Z",
        "author": {
          "login": "dasMulli"
        }
      },
      {
        "body": "Is this still an issue given that #1327 is fixed? I was assuming that issue dealt with making incremental build properly handle deletions in globbed items.",
        "createdAt": "2017-09-20T17:03:09Z",
        "updatedAt": "2017-09-20T17:03:09Z",
        "author": {
          "login": "masaeedu"
        }
      },
      {
        "body": "> Is this still an issue given that #1327 is fixed?\r\n\r\n@masaeedu Well that PR dealt with standard compile targets. Any other component that supports incremental builds now has to make a similar change in order to support all scenarios.\r\n\r\nFor example if you had a custom build target that renderes markdown files to a single PDF, if you moved referencing each markdown file individually from the project file to a globbing pattern, you'd have to make a similar change to the rendering target to make sure incremental builds work correctly. For example a file name change that would normally trigger a reorder of pages or deleting files which would remove a page will do nothing instead.",
        "createdAt": "2017-11-25T17:59:51Z",
        "updatedAt": "2017-11-25T17:59:51Z",
        "author": {
          "login": "dasMulli"
        }
      },
      {
        "body": "If implemented, this should also consider the _text of the target_ as an input to be considered.",
        "createdAt": "2020-07-01T15:48:18Z",
        "updatedAt": "2020-07-01T15:48:18Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}