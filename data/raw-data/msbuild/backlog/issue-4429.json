{
  "number": 4429,
  "title": "Help understanding some batching behavior",
  "body": "Debugging https://github.com/dotnet/sdk/issues/3257 led me to this curiosity, which I think is showing a gap in my understanding of some msbuild semantics.\r\n\r\n### Steps to reproduce\r\n\r\n#### test.proj\r\n```xml\r\n<Project>\r\n  <ItemGroup>\r\n     <RuntimePackAsset\r\n        Include=\"c:\\a\\fr\\foo.resources.dll\"\r\n        DestinationSubDirectory=\"fr\\\"\r\n        DestinationSubPath=\"fr\\fr.resources.dll\" \r\n        />\r\n        \r\n    <RuntimePackAsset \r\n        Include=\"c:\\a\\bar.dll\"\r\n        DestinationSubPath=\"bar.dll\" \r\n        />\r\n\r\n    <ReferenceCopyLocalPaths Include=\"@(RuntimePackAsset)\" />\r\n  </ItemGroup>\r\n      \r\n  <Target Name=\"Repro\">\r\n    <ItemGroup>\r\n      <_ResolvedCopyLocalPublishAssets Include=\"@(ReferenceCopyLocalPaths)\"\r\n                                       Exclude=\"@(RuntimePackAsset)\"\r\n                                       Condition=\"'$(PublishReferencesDocumentationFiles)' == 'true' or '%(Extension)' != '.xml'\">\r\n        <DestinationSubPath>%(ReferenceCopyLocalPaths.DestinationSubDirectory)%(Filename)%(Extension)</DestinationSubPath>\r\n      </_ResolvedCopyLocalPublishAssets>\r\n    </ItemGroup>\r\n    \r\n    <Message Text=\"@(_ResolvedCopyLocalPublishAssets)\" Importance=\"High\" />\r\n  </Target>\r\n</Project>\r\n```\r\n\r\n#### Directory contents:\r\n```\r\n/\r\n- test.proj\r\n````\r\n\r\n#### Command line\r\n```\r\nmsbuild test.proj /m /v:m /nologo\r\n```\r\n\r\n### Expected  behavior\r\n\r\nI'm guessing this isn't a bug, but my naive expectation was that since Include and Exclude have the same items, nothing is printed.\r\n\r\n### Actual behavior\r\n\r\n```\r\n>msbuild test.proj /m /v:m /nologo\r\n  c:\\a\\fr\\foo.resources.dll\r\n```\r\n\r\nThis patch fixes it, but I don't yet grasp *why*:\r\n\r\n``` diff\r\n     <ItemGroup>\r\n       <_ResolvedCopyLocalPublishAssets Include=\"@(ReferenceCopyLocalPaths)\"\r\n                                        Exclude=\"@(RuntimePackAsset)\"\r\n-                                       Condition=\"'$(PublishReferencesDocumentationFiles)' == 'true' or '%(Extension)' != '.xml'\">\r\n-        <DestinationSubPath>%(ReferenceCopyLocalPaths.DestinationSubDirectory)%(Filename)%(Extension)</DestinationSubPath>\r\n+                                       Condition=\"'$(PublishReferencesDocumentationFiles)' == 'true' or '%(ReferenceCopyLocalPaths.Extension)' != '.xml'\">\r\n+        <DestinationSubPath>%(ReferenceCopyLocalPaths.DestinationSubDirectory)%(ReferenceCopyLocalPaths.Filename)%(ReferenceCopyLocalPaths.Extension)</DestinationSubPath>\r\n       </_ResolvedCopyLocalPublishAssets>\r\n     </ItemGroup>\r\n```\r\n\r\n### Environment data\r\n```\r\nMicrosoft (R) Build Engine version 16.2.0-preview-19274-03+103f944e0 for .NET Framework\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n16.200.19.27403\r\n```",
  "state": "CLOSED",
  "createdAt": "2019-06-10T20:27:12Z",
  "updatedAt": "2024-02-21T17:08:09Z",
  "closedAt": "2019-06-11T04:17:49Z",
  "author": {
    "login": "nguerrera"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Discussion"
  },
  "comments": {
    "nodes": [
      {
        "body": "@rainersigwald ",
        "createdAt": "2019-06-10T20:27:20Z",
        "updatedAt": "2019-06-10T20:27:20Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "This is partially a result of the _intensely_ confusing behavior that the MSPress MSBuild book calls \"multi-batching\". This is somewhat documented under no particularly clear name at https://docs.microsoft.com/en-us/visualstudio/msbuild/item-metadata-in-task-batching?view=vs-2019#divide-several-item-lists-into-batches.\r\n\r\nBasically, if you have a single batch-eligible thing (here let's just say task invocation; pretty sure this works for target batching too) with multiple item lists, a bare metadata reference like `%(Filename)` applies to _all lists simultaneously_.\r\n\r\nIn this case, the engine decided to bucket on:\r\n\r\n1. `%(Extension)`\r\n1. `%(ReferenceCopyLocalPaths.DestinationSubDirectory)`\r\n2. `%(Filename)`\r\n\r\nAll the extensions match, so that doesn't produce new buckets. So the buckets are for each _unique combination_ of `%(ReferenceCopyLocalPaths.DestinationSubDirectory)` + `%(Filename)`:\r\n\r\n1. `fr\\` + `foo.resources` (from the foo in `ReferenceCopyLocalPaths`)\r\n1. empty + `bar` (from both `ReferenceCopyLocalPaths` and `RuntimePackAsset` since neither has `DestinationSubDirectory` and both have a bar item)\r\n1. empty + `foo.resources` (from the `RuntimePackAsset` item: there's no match for `%(ReferenceCopyLocalPaths.DestinationSubDirectory)`, so it MSBuild-ily expands to the empty string)\r\n\r\nAdding this line to your example project may help:\r\n\r\n```xml\r\n    <Message Text=\"A batch. ReferenceCopyLocalPaths = @(ReferenceCopyLocalPaths), RuntimePackAsset = @(RuntimePackAsset), ReferenceCopyLocalPaths.DestinationSubDirectory = %(ReferenceCopyLocalPaths.DestinationSubDirectory) Filename = %(Filename) Extension = %(Extension)\" Importance=\"High\" />\r\n```\r\n\r\n```\r\nMicrosoft (R) Build Engine version 16.2.0-preview-19274-03+103f944e0 for .NET Framework\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  A batch. ReferenceCopyLocalPaths = c:\\a\\fr\\foo.resources.dll, RuntimePackAsset = , ReferenceCopyLocalPaths.DestinationSubDirectory = fr\\ Filename = foo.resources Extension = .dll\r\n  A batch. ReferenceCopyLocalPaths = c:\\a\\bar.dll, RuntimePackAsset = c:\\a\\bar.dll, ReferenceCopyLocalPaths.DestinationSubDirectory =  Filename = bar Extension = .dll\r\n  A batch. ReferenceCopyLocalPaths = , RuntimePackAsset = c:\\a\\fr\\foo.resources.dll, ReferenceCopyLocalPaths.DestinationSubDirectory =  Filename = foo.resources Extension = .dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:00:00.65\r\n```\r\n\r\nGory details in and around \r\nhttps://github.com/microsoft/msbuild/blob/28ca8b4eaac0862aa08ccad8f0608af6c1957068/src/Build/BackEnd/Components/RequestBuilder/BatchingEngine.cs#L74-L79",
        "createdAt": "2019-06-10T21:54:55Z",
        "updatedAt": "2019-06-10T21:54:55Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "https://github.com/microsoft/msbuild/blob/28ca8b4eaac0862aa08ccad8f0608af6c1957068/src/Build/BackEnd/Components/RequestBuilder/BatchingEngine.cs#L20-L68",
        "createdAt": "2019-06-14T00:03:30Z",
        "updatedAt": "2019-06-14T00:03:30Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "This is the best MSBuild thread ever. Thank you, @rainersigwald .",
        "createdAt": "2020-03-05T22:35:09Z",
        "updatedAt": "2020-03-05T22:35:09Z",
        "author": {
          "login": "jzabroski"
        }
      },
      {
        "body": "I had to reverse engineer the code to write that comment above, my goal was that nobody else would have to \ud83d\ude04 ",
        "createdAt": "2020-03-06T00:26:35Z",
        "updatedAt": "2020-03-06T00:26:35Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "@danmosemsft  I did appreciate your comments, too!\r\n\r\nHowever, the broader problem is there are very few idioms in MSBuild, and searching StackOverflow was not very fruitful.  I spent a lot of time the past week improving our build scripts across all of our organization, and its surprising to me how difficult it is to do some basic boolean algebra set computations in MSBuild.  About ~10 years ago I read the MSPress MSBuild book, but frankly completely forgot all these idiosyncratic details.\r\n\r\nThe best tutorial on MSBuild I found online was this random github repository code (apologize that the repo contains a curse word - hope a bot doesn't auto-ban me): https://github.com/Enzogord/fucking_workable_monodevelop/blob/c17606619baf24d0777c0436de13982447e5fc1d/main/tests/test-projects/msbuild-tests/transforms.csproj - based on these bizarre examples, I'm not sure MSBuild has a future in my build process.",
        "createdAt": "2020-03-09T23:39:31Z",
        "updatedAt": "2020-03-09T23:39:31Z",
        "author": {
          "login": "jzabroski"
        }
      },
      {
        "body": "Hi @jzabroski -- note there were two books - the MSPress book and the [Trickery book](https://www.amazon.com/MSBuild-Trickery-Ways-Build-Engine/dp/061550907X)? The latter one had all the crazy examples.\r\n\r\nI encourage you to use whatever build tool best fits your purposes \ud83d\ude03 \r\n",
        "createdAt": "2020-03-09T23:51:35Z",
        "updatedAt": "2020-03-09T23:51:35Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "@danmosemsft  I did not realize you wrote the forward to an MSBuild book.  I was unaware of the Trickery book.  I suppose native speakers of MSBuild may have this book and speak some of these tricks as idioms, but, if I can raise the bar on my original comment, they're not \"widely known idioms\".  May be since you have a relationship with the author, you could suggest open sourcing the book on GitHub?  Thank you.",
        "createdAt": "2020-03-10T00:15:36Z",
        "updatedAt": "2020-03-10T00:15:36Z",
        "author": {
          "login": "jzabroski"
        }
      },
      {
        "body": "@jzabroski I have not spoken to him in 10 years unfortunately. You could try reaching out here possibly? (found with Bing..) https://stackoverflow.com/users/610674/brian-kretzler",
        "createdAt": "2020-03-10T00:32:53Z",
        "updatedAt": "2020-03-10T00:32:53Z",
        "author": {
          "login": "danmoseley"
        }
      }
    ]
  }
}