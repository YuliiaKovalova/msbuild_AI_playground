{
  "number": 5968,
  "title": "Unable to publish C# project with C++ dependencies",
  "body": "### Issue Description\r\n\r\nWe have a C# project, say `ProjectA`, using SDK project file format and targeting .NET Framework 4.7.1. This project depends on a VC10 C++/CLI project (`ProjectB`) which depends on VC10 C++ project (`ProjectC`): `ProjectA [net471] <- ProjectB [VC10 C++/CLI] <- ProjectC [VC10 C++]` (where A <- B means that A depends on B).\r\nWe are trying to publish the C# entry project, `ProjectA`, using `Publish` target from MSBuild (`msbuild /t:Publish`) \r\n\r\n\r\n### Steps to Reproduce\r\n\r\nPlease reproduce the dependency graph mentioned above.\r\n\r\n### Expected Behavior\r\nThe publish directory should contain all the dependencies of `ProjectA`, recursively.\r\n\r\n### Actual Behavior\r\nThe resulting directory contains `ProjectA.dll`, `ProjectB.dll` but **not** `ProjectC.dll`.\r\nIn general, the `Publish` target is not able to resolve C++ dependencies recursively.\r\n\r\nIs this behavior expected? Is there anything we can do about this please? \r\n~~Could upgrading C++ to v142 help?~~ Could migrating `ProjectC` to C++/CLI help? ",
  "state": "OPEN",
  "createdAt": "2020-12-14T16:47:25Z",
  "updatedAt": "2024-07-11T17:29:08Z",
  "closedAt": null,
  "author": {
    "login": "joeltankam"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Backlog"
  },
  "comments": {
    "nodes": [
      {
        "body": "Team triage: Can you create a zipped project that reproduces this that you can share?",
        "createdAt": "2020-12-16T17:02:48Z",
        "updatedAt": "2020-12-16T17:02:48Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "@Forgind sorry for the delayed reply. \r\nHere's a repository that reproduces the issue: https://github.com/joeltankam/cpp-publish-sample",
        "createdAt": "2021-01-12T11:47:11Z",
        "updatedAt": "2021-02-18T11:11:51Z",
        "author": {
          "login": "joeltankam"
        }
      },
      {
        "body": "Note to self: Find the switch to modify how the transitive references work.",
        "createdAt": "2021-01-13T16:40:59Z",
        "updatedAt": "2021-01-13T16:40:59Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "Thanks @BenVillalobos \r\nAny update on this please ?",
        "createdAt": "2021-01-23T17:36:14Z",
        "updatedAt": "2021-01-23T17:36:14Z",
        "author": {
          "login": "joeltankam"
        }
      },
      {
        "body": "Any update on this please ?",
        "createdAt": "2021-02-22T09:39:54Z",
        "updatedAt": "2021-02-22T09:39:54Z",
        "author": {
          "login": "joeltankam"
        }
      },
      {
        "body": "Any update on this please ?",
        "createdAt": "2021-04-20T16:40:53Z",
        "updatedAt": "2021-04-20T16:40:53Z",
        "author": {
          "login": "joeltankam"
        }
      },
      {
        "body": "Hello! Thanks for the repro project. \r\n\r\nUnfortunately this behavior is expected, but I do have a workaround available for an issue like this.\r\n\r\nAdd ProjectC.vcxproj as a projectreference to projectA, and set ReferenceOutputAssembly to false for that reference.\r\n\r\nThen add ProjectC's dll as a content item and set it to copy to your output directory.\r\n\r\n```xml\r\n  <ItemGroup>\r\n    <ProjectReference Include=\"..\\ProjectB\\ProjectB.vcxproj\" />\r\n    <ProjectReference Include=\"..\\ProjectC\\ProjectC.vcxproj\" >\r\n      <ReferenceOutputAssembly>false</ReferenceOutputAssembly>\r\n    </ProjectReference>\r\n  </ItemGroup>\r\n\r\n  <ItemGroup>\r\n    <Content Include=\"..\\ProjectC\\$(Configuration)\\ProjectC.dll\">\r\n      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>\r\n    </Content>\r\n  </ItemGroup>\r\n```",
        "createdAt": "2021-04-26T17:06:18Z",
        "updatedAt": "2021-04-26T17:06:18Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "Hi, just wanted add our work around. Make ProjectC a static library. Then ProjectB will stick it internally inside it's assembly so then you have no ProjectC to distribute. \r\nObviously this only works if you're OK with ProjectC being a static library.",
        "createdAt": "2021-05-14T18:50:07Z",
        "updatedAt": "2021-05-14T18:50:07Z",
        "author": {
          "login": "davidhunter22"
        }
      },
      {
        "body": "Thanks for your replies. \r\n\r\n> Unfortunately this behavior is expected\r\n\r\nIs there any particular reason to enforce this behavior?\r\n\r\n@BenVillalobos Unfortunately, both yours and the workaround suggested by @davidhunter22 do not apply at scale in our case.\r\nThe repository involved has around 980+ projects, 120+ being C++ projects. Given the size of the repository and the dependency graph, we cannot afford to apply any of these two hacks. ",
        "createdAt": "2021-06-01T09:10:36Z",
        "updatedAt": "2021-06-01T09:10:36Z",
        "author": {
          "login": "joeltankam"
        }
      },
      {
        "body": "Unassigning myself. [This issue](https://github.com/dotnet/msbuild/issues/7986) is tangetially related, there's been some talk about merging the way that nuget/msbuild handle project reference dependencies, which may eventually fix this.",
        "createdAt": "2022-11-03T23:05:34Z",
        "updatedAt": "2022-11-03T23:05:45Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "Hello,\r\n\r\nIs there any hope this might be looked at someday ?",
        "createdAt": "2024-07-11T17:29:07Z",
        "updatedAt": "2024-07-11T17:29:07Z",
        "author": {
          "login": "bouchraRekhadda"
        }
      }
    ]
  }
}