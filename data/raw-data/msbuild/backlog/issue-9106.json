{
  "number": 9106,
  "title": "[Feature Request]: Add a Defined('propname') condition",
  "body": "### Summary\r\n\r\nThe proposal is about adding a `Defined('propname')` condition in addition to available [ones](https://learn.microsoft.com/en-us/visualstudio/msbuild/msbuild-conditions?view=vs-2022). The condition returns true if the property is present among project properties. More specifically it should evaluate to true if [`Microsoft.Build.Evaluation.Project.GetProperty(name)`](https://learn.microsoft.com/en-us/dotnet/api/microsoft.build.evaluation.project.getproperty?view=msbuild-17-netcore#microsoft-build-evaluation-project-getproperty(system-string)) returns a non null value.\r\n\r\n### Background and Motivation\r\n\r\nI'm trying to add preprocessor definitions and conditionally exclude files in a CSharp project, based on these definitions. A documented [approach](https://learn.microsoft.com/en-us/visualstudio/msbuild/msbuild-conditional-constructs?view=vs-2022#code-try-1), which basically suggest to to use regex directly on `$(DefineConstants)`, becomes unworkable for me even for simple use cases. \r\n\r\nMost build systems provides the following facilities to ease such tasks:\r\n- Coercion of strings to boolean (eg. CMake)\r\n- Check for definition of external properties.\r\n\r\nMSBuild provides none of the above two. The current approach I'm using is defining externally some `FEATURE_A=1`, `FEATURE_B=1`, etc. properties (`1` is just an arbitrary value), then using these conditionals in the CSharp project:\r\n\r\n```\r\n  <ItemGroup Condition=\"$(FEATURE_A) == ''\">\r\n    <None Include=\"FeatureA\\*.cs\" />\r\n    <Compile Remove=\"FeatureA\\*.cs\" />\r\n  </ItemGroup>\r\n```\r\n\r\n### Proposed Feature\r\n\r\nSince I'm not seeing MSBuild to implement coercion of properties to booleans, I suggest adding a `Defined('propname')` condition that will allow to implement other commonly used approaches when conditionally including/excluding stuff in msbuild projects. The example above would become:\r\n\r\n```\r\n  <ItemGroup Condition=\"!Defined('FEATURE_A')\">\r\n    <None Include=\"FeatureA\\*.cs\" />\r\n    <Compile Remove=\"FeatureA\\*.cs\" />\r\n  </ItemGroup>\r\n```\r\n\r\nThis both allows to avoid defining properties with arbitrarily values and makes the condition much more readable.\r\n\r\n### Alternative Designs\r\n\r\n_No response_",
  "state": "OPEN",
  "createdAt": "2023-08-05T08:25:38Z",
  "updatedAt": "2024-01-31T08:13:34Z",
  "closedAt": null,
  "author": {
    "login": "ceztko"
  },
  "labels": [
    "Feature Request",
    "triaged",
    "gathering-feedback"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "You already mentioned the emptyness check. There are other similar techniquest that can probably be used:\r\n* Condition=\"$(FEATURE_A) == ''\"\r\n* Condition=\"!$([System.String]::IsNullOrEmpty(`$(FEATURE_A)`))\"\r\n* [`[MSBuild]::ValueOrDefault`](https://learn.microsoft.com/en-us/visualstudio/msbuild/property-functions?view=vs-2022#msbuild-valueordefault)\r\n\r\nBut the one you mention is the most commonly used.\r\nCan you describe scenario where that wouldn't be usable or give unexpected outcome?",
        "createdAt": "2023-08-07T13:43:40Z",
        "updatedAt": "2023-08-07T13:43:40Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "@JanKrivanek All of your techniques work if the affirmative behavior is encoded in a non empty property. If one wants to encode a behavior in the very existence of the property among project ones that can't be done. Maybe my example in the RFE doesn't grasp it deeply, but in programming quite often absence of value is very different from empty value, and one may want to be able to detect both. For example: suppose I want to enable a complex deploy operation in a list of configurations to be stored in the `$(DeployConfigurations)` properties. I could test if it's defined (non null) with `Defined('DeployConfigurations')` and set a default if not defined, and I would interpret the empty value as don't perform the operation in any configuration. The more advanced becomes the use of external properties in msbuild projects, the more one may want such semantics when accessing properties. I also believe that msbuild project target writers (eg. who writes the `.props` and `.targets` file for CSharp/FSharp projects) would enjoy this feature as well.",
        "createdAt": "2023-08-07T14:46:31Z",
        "updatedAt": "2023-08-07T14:46:31Z",
        "author": {
          "login": "ceztko"
        }
      },
      {
        "body": "> A documented [approach](https://learn.microsoft.com/en-us/visualstudio/msbuild/msbuild-conditional-constructs?view=vs-2022#code-try-1), which basically suggest to to use regex directly on `$(DefineConstants)`, becomes unworkable for me even for simple use cases.\r\n\r\nThat is an example of using a `When` element and should not be regarded as anything else. It is a terrible approach for testing `$(DefineConstants)`.",
        "createdAt": "2023-08-07T14:47:09Z",
        "updatedAt": "2023-08-07T14:47:09Z",
        "author": {
          "login": "jrdodds"
        }
      },
      {
        "body": "> That is an example of using a `When` element and should not be regarded as anything else. It is a terrible approach for testing `$(DefineConstants)`.\r\n\r\nI agree, but that was my effort to read the documentation. There's no good way to test  `$(DefineConstants)` and in fact I renounced attempting to do so.",
        "createdAt": "2023-08-07T14:51:06Z",
        "updatedAt": "2023-08-07T14:53:05Z",
        "author": {
          "login": "ceztko"
        }
      },
      {
        "body": "> There's no good way to test `$(DefineConstants)` ...\r\n\r\nYou want to know if a certain constant is in the `$(DefineConstants)` string, correct?\r\n\r\nThe constants are separated by semi-colons, which is the default delimiter for a string of items. `$(DefineConstants)` is easy to change to an item collection. Batch on the resulting item collection to set your flags.\r\n\r\nRoughly something like the following (but I haven't tested this code):\r\n\r\n```xml\r\n    <Target Name=\"ProcessConstants\" BeforeTargets=\"BeforeBuild\">\r\n        <ItemGroup>\r\n            <DefineConstants Include=\"$(DefineConstants)\"/>\r\n        </ItemGroup>\r\n        <PropertyGroup>\r\n            <FEATURE_A Condition=\"%(DefineConstants.Identity) == 'FEATURE_A'\">true</FEATURE_A>\r\n            <FEATURE_A Condition=\"$(FEATURE_A) == ''\">false</FEATURE_A>\r\n\r\n            <FEATURE_B Condition=\"%(DefineConstants.Identity) == 'FEATURE_B'\">true</FEATURE_B>\r\n            <FEATURE_B Condition=\"$(FEATURE_B) == ''\">false</FEATURE_B>\r\n\r\n            <!-- Extend with additional flag properties as needed. -->\r\n        </PropertyGroup>\r\n    </Target>\r\n```\r\n\r\nThe `Condition=\"%(DefineConstants) == 'SOME-VALUE'\"` is batching on the items.\r\n\r\nMSBuild will coerce the string values 'true' and 'false' to Booleans. The flags are explicitly set to 'false' if empty so that a condition can be written as `Condition=\"$(FEATURE_A)\"`.\r\n\r\n```xml\r\n    <Target Name=\"FeatureA\" BeforeTargets=\"BeforeBuild\" DependsOnTargets=\"ProcessConstants\">\r\n        <ItemGroup Condition=\"$(FEATURE_A)\">\r\n            <None Include=\"FeatureA\\*.cs\" KeepDuplicates=\"false\" />\r\n            <Compile Remove=\"FeatureA\\*.cs\" />\r\n        </ItemGroup>\r\n        <ItemGroup Condition=\"!$(FEATURE_A)\">\r\n            <None Remove=\"FeatureA\\*.cs\" />\r\n            <Compile Include=\"FeatureA\\*.cs\" KeepDuplicates=\"false\" />\r\n        </ItemGroup>\r\n    </Target>\r\n```\r\n\r\n**Update:**\r\nAn evaluation phase implementation (i.e. not using targets) might be:\r\n\r\n```xml\r\n    <PropertyGroup>\r\n        <!-- Add leading and trailing delimiters. -->\r\n        <DefineConstantsTemp>;$(DefineConstants);</DefineConstantsTemp>\r\n\r\n        <FEATURE_A Condition=\"$(DefineConstantsTemp.Contains(';FEATURE_A;'))\">true</FEATURE_A>\r\n        <FEATURE_A Condition=\"$(FEATURE_A) == ''\">false</FEATURE_A>\r\n\r\n        <FEATURE_B Condition=\"$(DefineConstantsTemp.Contains(';FEATURE_B;'))\">true</FEATURE_B>\r\n        <FEATURE_B Condition=\"$(FEATURE_B) == ''\">false</FEATURE_B>\r\n\r\n        <!-- Extend with additional flag properties as needed. -->\r\n    </PropertyGroup>\r\n```",
        "createdAt": "2023-08-07T15:29:49Z",
        "updatedAt": "2023-08-07T17:26:48Z",
        "author": {
          "login": "jrdodds"
        }
      },
      {
        "body": "This is off topic for the feature request but\u2026 `%(DefineConstants)` would look for metadata named `DefineConstants` which is not what you have there.  Perhaps `%(DefineConstants.Identity)` would work.  Personally though, I'd try property functions to remove all whitespace and add semicolons to the start and end and then search for `;WhateverSymbol;` as that approach does not require Target execution and so can be used in Condition of top-level ItemGroup.",
        "createdAt": "2023-08-07T16:03:11Z",
        "updatedAt": "2023-08-07T16:03:11Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "@KalleOlaviNiemitalo Yep, it was meant to be `%(DefineConstants.Identity)`. Thanks for catching that. I edited the code example.",
        "createdAt": "2023-08-07T16:26:14Z",
        "updatedAt": "2023-08-07T16:26:14Z",
        "author": {
          "login": "jrdodds"
        }
      },
      {
        "body": "> The Condition=\"%(DefineConstants) == 'SOME-VALUE'\" is batching on the items.\r\n\r\n@jrdodds Ok, this is interesting but the procedure to enable such testing is very heavy and requires a lot of boiler plate.\r\n\r\n> MSBuild will coerce the string values 'true' and 'false' to Booleans. \r\n\r\nIt will not if the property is not defined (null). This is done for example in CMake and it's super convenient, and I would also appreciate it in MSBuild as well (transparently or with a separate condition \"operator\").\r\n\r\nThank you a lot for trying to help in my use case, but in general the handling of null/undefined properties leaves a lot to be desired in MSBuild and I believe this goes a long way beyond the use case I initially described, so I would love to receive some feedback on the `Defined('prop')` feature I was suggesting, which I believe it would fit in MSBuild as it does in other build systems.",
        "createdAt": "2023-08-07T16:29:54Z",
        "updatedAt": "2023-08-07T16:29:54Z",
        "author": {
          "login": "ceztko"
        }
      },
      {
        "body": "Team triage: we would like to collect community interest for this issue.",
        "createdAt": "2023-08-10T13:36:05Z",
        "updatedAt": "2023-08-10T13:36:05Z",
        "author": {
          "login": "AR-May"
        }
      },
      {
        "body": "Instead of being limited to a `Condition` attribute, I'd like to see this implemented as an [MSBuild property function](https://learn.microsoft.com/en-us/visualstudio/msbuild/property-functions?view=vs-2022#msbuild-property-functions).\r\n\r\ne.g.\r\n\r\n```\r\n$([MSBuild]::IsPropertyDefined(string propertyName))\r\n```",
        "createdAt": "2023-08-12T00:56:18Z",
        "updatedAt": "2023-08-12T00:56:18Z",
        "author": {
          "login": "jrdodds"
        }
      }
    ]
  }
}