{
  "number": 6200,
  "title": "ResolveAssemblyReference throws InvalidOperationException on invalid PE files",
  "body": "### Issue Description\r\nI have a project which produces native binaries (on linux, so ELF format) and when I use ProjectReference to indicate project dependencies, ResolveAssemblyReference tries to read the metadata of these files and throws InvalidOperationException because the dependencies don't use the PE format, or have metadata.\r\n\r\n### Steps to Reproduce\r\nReproducing this is pretty hard in my experience, since *most* ELF files make the PEReader throw a BadImageFormatException. I've opened a related issue in the .NET runtime because of this: https://github.com/dotnet/runtime/issues/48419\r\n\r\nThe summary is, though:\r\n1. Create a MSBuild project which produces a non-PE format file (e.g. by writing a large text file to `$(IntermediateOutputPath)$(TargetName)$(TargetExt)`)\r\n2. Try to reference that project from another using `ProjectReference`\r\n3. Build the project in step 2\r\n\r\n### Expected Behavior\r\nResolveAssemblyReference skips the project because it doesn't have any metadata\r\n\r\n### Actual Behavior\r\nResolveAssemblyReference throws an InvalidOperationException from PEReader.GetMetadataBlock()\r\n\r\n### Analysis\r\nDoing some digging, this appears to be caused by [AssemblyInformation.CorePopulateMetadata](https://github.com/dotnet/msbuild/blob/ca44138662e3aa90eb9305dd31d906ef02e962cb/src/Tasks/AssemblyDependency/AssemblyInformation.cs#L362) not checking whether the created PEReader has any metadata. This appears to be checked everywhere else a PEReader is used:\r\n- https://github.com/dotnet/msbuild/blob/ca44138662e3aa90eb9305dd31d906ef02e962cb/src/Tasks/ManifestUtil/MetadataReader.cs#L35-L42\r\n- https://github.com/dotnet/msbuild/blob/6819f7ab06c3f43e83ff4059d417395e0af06c01/src/Shared/AssemblyNameExtension.cs#L214-L220\r\n\r\n### Versions & Configurations\r\n```\r\n$ dotnet --info\r\n.NET SDK (reflecting any global.json):\r\n Version:   5.0.103\r\n Commit:    9effbc8ad5\r\n\r\nRuntime Environment:\r\n OS Name:     debian\r\n OS Version:  \r\n OS Platform: Linux\r\n RID:         debian-x64\r\n Base Path:   /usr/share/dotnet/sdk/5.0.103/\r\n\r\nHost (useful for support):\r\n  Version: 5.0.3\r\n  Commit:  eae88cc11b\r\n\r\n.NET SDKs installed:\r\n  3.1.406 [/usr/share/dotnet/sdk]\r\n  5.0.103 [/usr/share/dotnet/sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.App 3.1.12 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.3 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.1.12 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.3 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n$ dotnet msbuild -version\r\nMicrosoft (R) Build Engine version 16.8.3+39993bd9d for .NET\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n16.8.3.61104\r\n```\r\n\r\n### Attach a binlog\r\n[This binlog](https://github.com/dotnet/msbuild/files/6052440/msbuild.binlog.zip) reproduces the issue, and I've been unable to reproduce it using smaller projects. I think this may be because smaller projects produce smaller binaries, which PEReader ends up rejecting. The source for the `ClangLink` and `ClangCompile` tasks can be found [here](https://github.com/finitereality/finite.cpp.sdk).",
  "state": "CLOSED",
  "createdAt": "2021-02-26T21:04:15Z",
  "updatedAt": "2021-03-31T06:49:40Z",
  "closedAt": "2021-03-31T06:49:40Z",
  "author": {
    "login": "FiniteReality"
  },
  "labels": [
    "bug",
    "needs-triage"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "I think the story with non-managed assemblies is that you have to add the `ReferenceOutputAssembly=\"False\" OutputItemType=\"Content\"` metadata to your ProjectReference item ([docs](https://docs.microsoft.com/en-us/visualstudio/msbuild/common-msbuild-project-items?view=vs-2019#projectreference)). Can you please check whether this works for you?\r\n",
        "createdAt": "2021-03-19T19:22:26Z",
        "updatedAt": "2021-03-19T19:24:22Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "> I think the story with non-managed assemblies is that you have to add the `ReferenceOutputAssembly=\"False\" OutputItemType=\"Content\"` metadata to your ProjectReference item ([docs](https://docs.microsoft.com/en-us/visualstudio/msbuild/common-msbuild-project-items?view=vs-2019#projectreference)). Can you please check whether this works for you?\r\n\r\nI'm currently building an MSBuild SDK to allow building of native projects (which is probably outside of the supported use case, which I'm fine with), so I'd rather not have to do that in each project - if there's an alternative place I can specify this (like `GetTargetPath`) then I might be able to build my own infrastructure for this. However, as it stands currently, I'm stuck relying on ResolveAssemblyReference working correctly, since it's an incredibly complex task which does a lot of things.\r\n\r\nEDIT: For what it's worth, somehow the Visual C++ toolchain manages to let you use `<ProjectReference Include=\"path/to/project.vcxproj\"/>` without `ReferenceOutputAssembly` and `OutputItemType` - I'm interested in replicating that behaviour for consumption. However, for legal reasons I obviously can't just look at how the Visual C++ toolchain manages it :stuck_out_tongue:",
        "createdAt": "2021-03-20T00:18:50Z",
        "updatedAt": "2021-03-20T00:25:28Z",
        "author": {
          "login": "FiniteReality"
        }
      }
    ]
  }
}