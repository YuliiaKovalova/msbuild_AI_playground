{
  "number": 1726,
  "title": "ProjectInstance based build fails with a \"Target not found exception\" when the instance is mutated",
  "body": "```c#\r\n        private const string projectContents =\r\n@\"<Project>\r\n  <PropertyGroup>\r\n    <ImportIt>true</ImportIt>\r\n  </PropertyGroup>\r\n\r\n  <Import Project=\"\"{0}\"\" Condition=\"\"'$(ImportIt)' == 'true'\"\"/>\r\n\r\n  <Target Name=\"\"Bazz\"\">\r\n    <Message Text=\"\"Buzz\"\" Importance=\"\"High\"\" />\r\n  </Target>\r\n\r\n</Project>\";\r\n\r\n        private const string projectImport =\r\n@\"<Project>\r\n  <Target Name=\"\"Foo\"\">\r\n    <Message Text=\"\"Bar\"\" Importance=\"\"High\"\" />\r\n  </Target>\r\n</Project>\";\r\n\r\n        [Fact]\r\n        public void Test1()\r\n        {\r\n            string importPath = Path.GetTempFileName();\r\n            File.WriteAllText(importPath, projectImport);\r\n\r\n            var collection = new ProjectCollection();\r\n            var root = ProjectRootElement.Create(XmlReader.Create(new StringReader(string.Format(projectContents, importPath))), collection);\r\n\r\n            root.FullPath = Path.GetTempFileName();\r\n            root.Save();\r\n\r\n            var project = new Project(root, new Dictionary<string, string>(), MSBuildConstants.CurrentToolsVersion, collection);\r\n            var instance = project.CreateProjectInstance(ProjectInstanceSettings.Immutable).DeepCopy(isImmutable: false);\r\n\r\n            var manager = new BuildManager();\r\n\r\n            var request = new BuildRequestData(instance, new[] { \"Foo\" });\r\n            var parameters = new BuildParameters()\r\n            {\r\n                DisableInProcNode = true,\r\n            };\r\n\r\n            manager.BeginBuild(parameters);\r\n            var submission = manager.PendBuildRequest(request);\r\n\r\n            var results = submission.Execute();\r\n            Assert.True(results.OverallResult == BuildResultCode.Success);\r\n\r\n            manager.EndBuild();\r\n            manager.ResetCaches();\r\n\r\n            project.SetProperty(\"ImportIt\", \"false\");\r\n            project.Save();\r\n\r\n            manager.BeginBuild(parameters);\r\n            request = new BuildRequestData(instance, new[] { \"Foo\" });\r\n            submission = manager.PendBuildRequest(request);\r\n            results = submission.Execute();\r\n            Assert.True(results.OverallResult == BuildResultCode.Success);\r\n\r\n            manager.EndBuild();\r\n        }\r\n```\r\n\r\nThe second builds fails with a \"target not found exception\". \r\n\r\nThere seem to be two weird things happening here:\r\n1. The build is failing with a target not found exception, even if the build is started on a ProjectInstance. This is probably because a target is getting conditioned to false. It is my understanding that if you start a build on a project instance, msbuild shouldn\u2019t re-evaluate and just reuse the evaluated state from the project instance.\r\n\r\n2. MSBuild is ignoring the properties that CPS set on a project instance after the project instance info is serialized and sent to the out of proc node.\r\n",
  "state": "CLOSED",
  "createdAt": "2017-02-17T21:42:54Z",
  "updatedAt": "2024-02-21T17:21:42Z",
  "closedAt": "2017-05-02T20:56:33Z",
  "author": {
    "login": "cdmihai"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "cdmihai"
      }
    ]
  },
  "milestone": {
    "title": "MSBuild 15.3"
  },
  "comments": {
    "nodes": [
      {
        "body": "Mkay, so this behaviour appears to be \u201cby design\u201d. When a build is requested on a ProjectInstance and an out of proc node is used, the out of proc node uses two ProjectInstance objects to recover the state. ProjectInstance1 is the deserialized one. Apparently serializing a ProjectInstance [only keeps part of the state](https://github.com/Microsoft/msbuild/blob/xplat/src/Build/Instance/ProjectInstance.cs#L1668-L1672): global properties, properties, and items. Everything else (targets, using tasks, etc) is discarded. To recover the missing part of the state, the out of proc node [Re-evaluates the entry project form disk](https://github.com/Microsoft/msbuild/blob/xplat/src/Build/BackEnd/Components/RequestBuilder/RequestBuilder.cs#L1152) into ProjectInstance2. It then [merges the two](https://github.com/Microsoft/msbuild/blob/xplat/src/Build/BackEnd/Shared/BuildRequestConfiguration.cs#L419-L455) by keeping the properties and items from ProjectInstance1 and everything else from ProjectInstance2.\r\n\r\nIf the properties and items from ProjectInstance1 influence what targets get loaded, and what imports get imported, and if the project files change while the build is running in a way that changes those properties and items, then weird stuff like this failure happens (target not found exception).\r\n\r\nI don\u2019t quite understand why msbuild is doing this state merging as opposed to also serializing target and task information.\r\n\r\nSo, the fix is to change ProjectInstance to serialize the complete evaluated state, and the out of proc node to reuse it entirely without re-evaluation from disk. This is a big change which would affect all out of proc builds, so probably too risky for RTW.\r\nAs a workaround, CPS could discard the failed design time build.",
        "createdAt": "2017-02-18T00:44:55Z",
        "updatedAt": "2017-02-18T00:44:55Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "The above description does not match my debugging, I was finding that MSBuild was throwing away properties from ProjectInstance1 and hence https://github.com/dotnet/roslyn-project-system/issues/1554 was occurring. Secondly, it's not viable to retry - as all the builds were failing.",
        "createdAt": "2017-02-20T00:36:54Z",
        "updatedAt": "2017-02-20T03:31:41Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "Potential manifestation: https://github.com/dotnet/project-system/issues/1939",
        "createdAt": "2017-04-07T19:47:59Z",
        "updatedAt": "2017-04-07T19:47:59Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "What's going on with this? This is still being run into.",
        "createdAt": "2017-04-27T02:24:14Z",
        "updatedAt": "2017-04-27T02:24:14Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "Here's another hit: https://github.com/dotnet/project-system/issues/2076",
        "createdAt": "2017-04-27T02:25:54Z",
        "updatedAt": "2017-04-27T02:25:54Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "Internal issue with some repro steps: https://devdiv.visualstudio.com/0bdbc590-a062-4c3f-b0f6-9383f67865ee/_workitems?id=385643&projectId=0bdbc590-a062-4c3f-b0f6-9383f67865ee&src=alerts&src-action=cta&fullScreen=true&tracking_data=eyJTb3VyY2UiOiJFbWFpbCIsIlR5cGUiOiJOb3RpZmljYXRpb24iLCJTSUQiOiJtcy52c3Mtd29yay5teS13b3JraXRlbS1hc3NpZ25lZC10by1jaGFuZ2VzLXN1YnNjcmlwdGlvbiIsIlNUeXBlIjoiQ09OIiwiUmVjaXAiOjIsIl94Y2kiOnsiTklEIjoxMjE3MjM0MSwiTVJlY2lwIjoibTA9MSAiLCJBY3QiOiJhODhkYWU2ZC04MWZkLTQxZmMtYjFiYy00MWE2OTRmNjRmNGIiLCJmZiI6IkNHRCJ9fQ%3D%3D&_a=edit",
        "createdAt": "2017-04-27T16:43:27Z",
        "updatedAt": "2017-04-27T16:43:27Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "@davkean High chance of inserting the fix on Friday\r\n",
        "createdAt": "2017-04-27T20:13:39Z",
        "updatedAt": "2017-04-27T20:13:39Z",
        "author": {
          "login": "cdmihai"
        }
      }
    ]
  }
}