{
  "number": 2276,
  "title": "_GenerateCompileDependencyCache takes ~6% of design-time build and costs twice as much as CoreCompile",
  "body": "Investigating build design-time perf in Roslyn.sln, and I found that _GenerateCompileDependencyCache takes 6% of a design-time build for projects with large set of files/references. This overhead is 2 times more expensive than just calling CoreCompile (because during design-time builds this doesn't compile):\r\n\r\n```\r\nTarget Performance Summary:\r\n        0 ms  GetInstalledSDKLocations                   1 calls\r\n        0 ms  GetTargetPath                              1 calls\r\n        0 ms  GetNativeManifest                          1 calls\r\n        0 ms  ExpandSDKReferences                        1 calls\r\n        0 ms  AfterResolveReferences                     1 calls\r\n        0 ms  LinkVSSDKEmbeddableAssemblies              1 calls\r\n        0 ms  Compile                                    1 calls\r\n        0 ms  DocumentationProjectOutputGroupDependencies   1 calls\r\n        0 ms  SGenFilesOutputGroup                       1 calls\r\n        0 ms  DebugSymbolsProjectOutputGroupDependencies   1 calls\r\n        0 ms  CreateCustomManifestResourceNames          1 calls\r\n        0 ms  PrepareResourceNames                       1 calls\r\n        0 ms  SatelliteDllsProjectOutputGroup            1 calls\r\n        0 ms  BuiltProjectOutputGroup                    1 calls\r\n        0 ms  SGenFilesOutputGroupDependencies           1 calls\r\n        0 ms  GetTargetPathWithTargetPlatformMoniker     1 calls\r\n        0 ms  CollectSDKReferencesDesignTime             1 calls\r\n        0 ms  SatelliteDllsProjectOutputGroupDependencies   1 calls\r\n        0 ms  SDKRedistOutputGroup                       1 calls\r\n        0 ms  WorkaroundForXAMLIntellisenseBuildIssue    1 calls\r\n        0 ms  SetWin32ManifestProperties                 1 calls\r\n        0 ms  _SetTargetFrameworkMonikerAttribute        1 calls\r\n        0 ms  GenerateTargetFrameworkMonikerAttribute    1 calls\r\n        0 ms  BeforeCompile                              1 calls\r\n        0 ms  GenerateInternalsVisibleToFile             1 calls\r\n        0 ms  GenerateAssemblyInfoFile                   1 calls\r\n        0 ms  DesignTimeXamlMarkupCompilation            1 calls\r\n        0 ms  _ComputeNonExistentFileProperty            1 calls\r\n        0 ms  CleanXsdCodeGen                            1 calls\r\n        0 ms  PostCompileBinaryModification              1 calls\r\n        0 ms  AfterCompile                               1 calls\r\n        0 ms  DocumentationProjectOutputGroup            1 calls\r\n        0 ms  PrepareProjectReferences                   1 calls\r\n        0 ms  ResolveReferences                          1 calls\r\n        0 ms  ContentFilesProjectOutputGroup             1 calls\r\n        0 ms  DebugSymbolsProjectOutputGroup             1 calls\r\n        0 ms  RemoveDuplicateXUnitContent                1 calls\r\n        0 ms  GetFrameworkPaths                          1 calls\r\n        0 ms  GetReferenceAssemblyPaths                  1 calls\r\n        0 ms  BeforeResolveReferences                    1 calls\r\n        0 ms  _ComputeLockFileFrameworks                 1 calls\r\n        0 ms  ResolveLockFileReferences                  1 calls\r\n        0 ms  ResolveLockFileAnalyzers                   1 calls\r\n        0 ms  CollectPackageReferences                   1 calls\r\n        0 ms  ResolvePackageDependenciesForBuild         1 calls\r\n        0 ms  ResolveSDKReferences                       1 calls\r\n        0 ms  ResolveSDKReferencesDesignTime             1 calls\r\n        0 ms  WorkaroundIncorrectSatelliteDeployment     1 calls\r\n        0 ms  IncludeTransitiveProjectReferences         1 calls\r\n        0 ms  ResolveCodeAnalysisRuleSet                 1 calls\r\n        1 ms  _ComputeTFMOnlyFileDependencies            1 calls\r\n        1 ms  AssignProjectConfiguration                 1 calls\r\n        1 ms  ResolveComReferencesDesignTime             1 calls\r\n        1 ms  _SetEmbeddedWin32ManifestProperties        1 calls\r\n        1 ms  PrepareForBuild                            1 calls\r\n        1 ms  _CheckCompileDesignTimePrerequisite        1 calls\r\n        1 ms  BuildOnlySettings                          1 calls\r\n        1 ms  CollectResolvedSDKReferencesDesignTime     1 calls\r\n        1 ms  PreXsdCodeGen                              1 calls\r\n        1 ms  SplitResourcesByCulture                    1 calls\r\n        1 ms  ResolveAssemblyReferencesDesignTime        1 calls\r\n        1 ms  ResolveKeySource                           1 calls\r\n        1 ms  AssignLinkMetadata                         1 calls\r\n        1 ms  GenerateCompiledExpressionsTempFile        1 calls\r\n        1 ms  _GenerateCompileInputs                     1 calls\r\n        1 ms  ResolveProjectReferencesDesignTime         1 calls\r\n        1 ms  _ComputeLockFileAnalyzers                  1 calls\r\n        1 ms  GetTargetFrameworkProperties               1 calls\r\n        1 ms  CheckForImplicitPackageReferenceOverrides   1 calls\r\n        1 ms  _SplitProjectReferencesByFileExistence     1 calls\r\n        1 ms  AssignTargetPaths                          1 calls\r\n        1 ms  CreateManifestResourceNames                1 calls\r\n        1 ms  BuiltProjectOutputGroupDependencies        1 calls\r\n        2 ms  _ComputeActiveTFMPackageDependencies       1 calls\r\n        4 ms  FindReferenceAssembliesForReferences       1 calls\r\n        4 ms  _ComputeTransitiveProjectReferences        1 calls\r\n        4 ms  ReportAssetsLogMessages                    1 calls\r\n        5 ms  CheckForDuplicateItems                     1 calls\r\n        5 ms  CompileDesignTime                          1 calls\r\n       11 ms  CoreCompile                                1 calls\r\n       16 ms  _ComputeLockFileReferences                 1 calls\r\n       19 ms  _GenerateCompileDependencyCache            1 calls  <---- This is twice as expensive as CoreCompile\r\n       20 ms  SourceFilesProjectOutputGroup              1 calls \r\n       33 ms  RunResolvePackageDependencies              1 calls\r\n       54 ms  _GetProjectReferenceTargetFrameworkProperties   1 calls\r\n       62 ms  ResolveProjectReferences                   1 calls\r\n       64 ms  ResolveAssemblyReferences                  1 calls\r\n\r\nTask Performance Summary:\r\n        0 ms  CheckForImplicitPackageReferenceOverrides   1 calls\r\n        0 ms  GetFrameworkPath                           1 calls\r\n        0 ms  AssignCulture                              1 calls\r\n        0 ms  WriteLinesToFile                           1 calls\r\n        0 ms  Delete                                     1 calls\r\n        0 ms  CallTarget                                 1 calls\r\n        0 ms  FindAppConfigFile                          1 calls\r\n        0 ms  ResolveCodeAnalysisRuleSet                 1 calls\r\n        1 ms  AssignProjectConfiguration                 1 calls\r\n        1 ms  MakeDir                                    1 calls\r\n        1 ms  CollectSDKReferencesDesignTime             2 calls\r\n        1 ms  CreateCSharpManifestResourceName           1 calls\r\n        1 ms  ResolveKeySource                           1 calls\r\n        1 ms  GetNearestTargetFramework                  1 calls\r\n        1 ms  ResolveNonMSBuildProjectOutput             1 calls\r\n        4 ms  ReportAssetsLogMessages                    1 calls\r\n        4 ms  CheckForDuplicateItems                     3 calls\r\n        5 ms  Hash                                       1 calls\r\n        9 ms  AssignTargetPath                           5 calls\r\n       10 ms  Csc                                        1 calls\r\n       33 ms  ResolvePackageDependencies                 1 calls\r\n       64 ms  ResolveAssemblyReference                   1 calls\r\n      116 ms  MSBuild                                    3 calls\r\n```\r\n\r\nEither we should speed this target up, or avoid running it during design-time builds and always call CoreCompile.\r\n\r\nLooking at the target, it looks like WriteLinesToFile and Hash is taking in total about 5ms - so where is that extra 14ms coming from? Overhead figuring out `@(Compile->'%(FullPath)'?",
  "state": "CLOSED",
  "createdAt": "2017-07-11T07:57:44Z",
  "updatedAt": "2024-02-21T17:18:09Z",
  "closedAt": "2017-07-19T16:41:20Z",
  "author": {
    "login": "davkean"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Project I was looking at was: https://github.com/dotnet/roslyn/blob/master/src/Compilers/CSharp/Portable/CSharpCodeAnalysis.csproj",
        "createdAt": "2017-07-11T07:58:44Z",
        "updatedAt": "2017-07-11T07:58:51Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "Why do we need to burn in FullPath?",
        "createdAt": "2017-07-11T08:18:12Z",
        "updatedAt": "2017-07-11T08:18:12Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "I think we should skip this entirely during design-time builds.\r\n\r\nTeam triage: and we should skip `FullPath`ing them regardless.",
        "createdAt": "2017-07-11T22:30:49Z",
        "updatedAt": "2017-07-11T22:30:49Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}