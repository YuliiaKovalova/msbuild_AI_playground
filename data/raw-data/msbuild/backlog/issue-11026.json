{
  "number": 11026,
  "title": "Support packages/custom Sdks to provide their own XSD",
  "body": "### Summary\n\nToday, csproj IntelliSense is only driven by XSDs provided by MSBuild. I think it would be nice to have some sort of extensibility and allow NuGet packages and/or custom MSBuild Sdks to provide their own XSD.\n\n### Background and Motivation\n\nMany NuGet packages (regular ones and Sdks) offer some MSBuild properties intended for use by consumers. Today, first-party authors have to make the change in this repo, and third-party authors have no way to do it (assuming they don't go too crazy and grab the XSD from VS installation and attempt to modify it).\n\n### Proposed Feature\n\nNot sure if the exact shape or technical limitations here, but having something like `Sdk.xsd` (like Sdk.props and Sdk.targets that are special cased for custom Sdks) would be nice. For regular NuGet packages, it could be `build\\<PackageName>.xsd`.\n\nAny other design that solves the problem is also good.\n\n### Alternative Designs\n\n_No response_",
  "state": "OPEN",
  "createdAt": "2024-11-23T06:52:01Z",
  "updatedAt": "2025-04-06T02:33:40Z",
  "closedAt": null,
  "author": {
    "login": "Youssef1313"
  },
  "milestone": null,
  "assignees": {
    "nodes": []
  },
  "labels": [
    "Priority:2",
    "triaged"
  ],
  "comments": {
    "nodes": [
      {
        "body": "cc @YuliiaKovalova @JanKrivanek @rainersigwald ",
        "createdAt": "2024-11-24T19:59:52Z",
        "author": {
          "login": "Evangelink"
        }
      },
      {
        "body": "Ideas:\n\n- An MSBuild file in the NuGet package adds items to a new item type, e.g. `MSBuildXmlSchema`.  Visual Studio (or dotnet/project-system?) evaluates the project, reads these items, and configures the XML editor.  Would be controlled as part of `build` or `buildTransitive` in IncludeAssets and ExcludeAssets. \n  - pro: Would work in MSBuild project SDKs too, with no extra effort.\n  - con: Could slow down MSBuild evaluation a bit; but the effect would depend on how many packages provide XML schemata, and most packages probably won't.\n- A new NuGet asset type.  NuGet restore lists the schema files in project.assets.json and VS reads from there.\n  - pro: More control.\n  - con: Needs changing NuGet too.\n  - con: MSBuild project SDKs cannot declare schema files because they are not listed in project.assets.json.\n- VS locates schema files from a hardcoded path within packages listed in project.assets.json.\n  - pro: VS-only change.\n  - con: App developer cannot declare whether the schemata should be used.\n  - con: MSBuild project SDKs cannot declare schema files because they are not listed in project.assets.json.\n\nGeneral problem: PackageReference conditional on TargetFramework.  If the project is multitargeted and different target frameworks use different versions of the same package, then which version of the XML schema should be used by the XML editor?\n\nGeneral problem: if the VS user opens a file that is imported to multiple projects that reference packages that carry MSBuild XML schema files, how does VS choose the project whose package references should control the schemata in the XML editor?",
        "createdAt": "2024-11-25T08:25:51Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "> General problem: if the VS user opens a file that is imported to multiple projects that reference packages that carry MSBuild XML schema files, how does VS choose the project whose package references should control the schemata in the XML editor?\n\nGood question. I think that should be a merge of everything. In case of conflicts, it could show the property multiple times. For example, `MyProperty (package ... version ...)`, then the tooltip for each of these can have the description from the specific package.",
        "createdAt": "2024-11-25T08:42:31Z",
        "author": {
          "login": "Youssef1313"
        }
      },
      {
        "body": "This is a great idea but as far as I know the Visual Studio XML editor doesn't support this type of dynamic discovery. https://github.com/mhutch/MonoDevelop.MSBuildEditor has [\"sidecar schema\"](https://github.com/mhutch/MonoDevelop.MSBuildEditor/wiki/Creating-a-custom-schema) support for this scenario.",
        "createdAt": "2024-12-03T14:10:26Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> but having something like `Sdk.xsd` (like `Sdk.props` and `Sdk.targets` that are special cased for custom Sdks) would be nice. For regular NuGet packages, it could be `build\\<PackageName>.xsd`\n\nI had already requested this several years ago, don't know when/where. I think it could be in MSBuild tools for VSCode repo or NuGet repo or even here. But it was moved to backlog due to performance reasons.",
        "createdAt": "2025-04-06T02:33:39Z",
        "author": {
          "login": "Nirmal4G"
        }
      }
    ]
  }
}