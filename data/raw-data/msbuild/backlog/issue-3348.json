{
  "number": 3348,
  "title": "ResolveKeySource fails when manifest signing is configured but disabled (and would fail)",
  "body": "Copied from internal bug https://devdiv.visualstudio.com/DevDiv/_workitems/edit/620487.\r\n\r\n### Steps to reproduce\r\n\r\n1. Start Visual Studio 2015, and create new WinForm project.\r\n2. Select [signing] tab in project\u2019s property.\r\n3. Check [Sign the assembly], and choose [Choose the strong name key file] combo box as [<New\u2026>]\r\n4. Input password on [Create strong name key] dialog, and click [OK] button.\r\n5. Check [Sign the ClickOnce manifest], and click [Select from File\u2026] button, and choose the pfx file which is created by step 4.\r\n6. Check off [Sign the ClickOnce manifest].\r\n7. Start certmgr.msc, and delete certificate registered by step 4 from personal certificates store.\r\n8. Build project\r\n\r\n\r\n### Expected  behavior\r\n\r\nBuild succeeds, and does not sign the ClickOnce manifest.\r\n\r\n### Actual behavior\r\n\r\nSeverity | Code | Description | Project | File | Line | Suppression State\r\n-- | -- | -- | -- | -- | -- | --\r\nError | \u00a0 | Cannot import the following key file: test.pfx. The key file may be password protected. To correct this, try to import the certificate again or import the certificate manually into the current user\u2019s personal certificate store. | WindowsFormsApp20 | C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\MSBuild\\15.0\\Bin\\Microsoft.Common.CurrentVersion.targets | 3156 | \u00a0\r\nError | \u00a0 | Importing key file \"test.pfx\" was canceled. | WindowsFormsApp20 | C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\MSBuild\\15.0\\Bin\\Microsoft.Common.CurrentVersion.targets | 3156 | \u00a0\r\nWarning | \u00a0 | Unable to find code signing certificate in the current user\u2019s Windows certificate store. To correct this, either disable signing of the\u00a0ClickOnce\u00a0manifest or install the certificate into the certificate store. | WindowsFormsApp20 | C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\MSBuild\\15.0\\Bin\\Microsoft.Common.CurrentVersion.targets | 3156 | \u00a0\r\n",
  "state": "OPEN",
  "createdAt": "2018-05-25T17:39:31Z",
  "updatedAt": "2024-02-21T16:33:57Z",
  "closedAt": null,
  "author": {
    "login": "rainersigwald"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "This is happening because `ResolveKeySource` is called if either signing facility will be used, but always passes the existing configuration.\r\n\r\nhttps://github.com/Microsoft/msbuild/blob/e7ea68da3ee0929a07cc36e877a32d5e444efefb/src/Tasks/Microsoft.Common.CurrentVersion.targets#L3206-L3217\r\n\r\nInternally it only short-circuits [`ResolveManifestKey()`](https://github.com/Microsoft/msbuild/blob/e7ea68da3ee0929a07cc36e877a32d5e444efefb/src/Tasks/ResolveKeySource.cs#L231) if there is no manifest configuration.\r\n\r\nWe should consider passing `$(SignManifests)` and `$(SignAssembly)` down to the task, so we can short-circuit at the more fine-grained level.\r\n\r\nAlternately, I think the outputs of the two halves of `ResolveKeySource` are orthogonal, so we could possibly just call it twice.",
        "createdAt": "2018-05-25T17:57:25Z",
        "updatedAt": "2018-05-25T17:57:25Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "## Workaround\r\n\r\nAdd this to your project file:\r\n\r\n```xml\r\n  <Target Name=\"AllowSigningWithoutManifestCert\"\r\n          BeforeTargets=\"ResolveKeySource\"\r\n          Condition=\"'$(SignManifests)' == 'false'\">\r\n    <!-- Work around https://github.com/Microsoft/msbuild/issues/3348 by\r\n         removing the manifest-signing configuration when we don't plan\r\n         to actually sign the manifest. -->\r\n    <PropertyGroup>\r\n      <PreviousManifestCertificateThumbprint>$(ManifestCertificateThumbprint)</PreviousManifestCertificateThumbprint>\r\n      <PreviousManifestKeyFile>$(ManifestKeyFile)</PreviousManifestKeyFile>\r\n\r\n      <ManifestCertificateThumbprint />\r\n      <ManifestKeyFile />\r\n    </PropertyGroup>\r\n  </Target>\r\n\r\n  <Target Name=\"RestoreManifestSigningConfiguration\"\r\n          AfterTargets=\"ResolveKeySource\"\r\n          Condition=\"'$(SignManifests)' == 'false'\">\r\n    <!-- Restore manifest-signing configuration for the remainder of the build. -->\r\n    <PropertyGroup>\r\n      <ManifestCertificateThumbprint>$(PreviousManifestCertificateThumbprint)</ManifestCertificateThumbprint>\r\n      <ManifestKeyFile>$(PreviousManifestKeyFile)</ManifestKeyFile>\r\n\r\n      <PreviousManifestCertificateThumbprint />\r\n      <PreviousManifestKeyFile />\r\n    </PropertyGroup>\r\n  </Target>\r\n```",
        "createdAt": "2018-05-25T17:57:59Z",
        "updatedAt": "2018-05-25T17:57:59Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald Thanks a lot",
        "createdAt": "2022-09-26T11:53:48Z",
        "updatedAt": "2022-09-26T11:53:48Z",
        "author": {
          "login": "imakowski"
        }
      }
    ]
  }
}