{
  "number": 3342,
  "title": "MSBuild.exe is still running after a build in visual Studio 15.7.2",
  "body": "### Steps to reproduce\r\nProject file\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<Project TreatAsLocalProperty=\"NodeReuse\" ToolsVersion=\"4.0\" DefaultTargets=\"Build\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\r\n  <PropertyGroup>\r\n    <MSBUILDDISABLENODEREUSE>True</MSBUILDDISABLENODEREUSE>\r\n    <NodeReuse>False</NodeReuse>\r\n    <Configuration Condition=\" '$(Configuration)' == '' \">Debug</Configuration>\r\n    <Platform Condition=\" '$(Platform)' == '' \">x86</Platform>\r\n    <ProductVersion>3.10</ProductVersion>\r\n    <ProjectGuid>6468764d-0126-47a0-b4f6-8fd64a9a6023</ProjectGuid>\r\n    <SchemaVersion>2.0</SchemaVersion>\r\n    <OutputName>VorlageSetup</OutputName>\r\n    <OutputType>Package</OutputType>\r\n    <WixTargetsPath Condition=\" '$(WixTargetsPath)' == '' AND '$(MSBuildExtensionsPath32)' != '' \">$(MSBuildExtensionsPath32)\\Microsoft\\WiX\\v3.x\\Wix.targets</WixTargetsPath>\r\n    <WixTargetsPath Condition=\" '$(WixTargetsPath)' == '' \">$(MSBuildExtensionsPath)\\Microsoft\\WiX\\v3.x\\Wix.targets</WixTargetsPath>\r\n    <RunPostBuildEvent>Always</RunPostBuildEvent>\r\n  </PropertyGroup>\r\n  <PropertyGroup Condition=\" '$(Configuration)|$(Platform)' == 'Debug|x86' \">\r\n    <OutputPath>bin\\$(Configuration)\\</OutputPath>\r\n    <IntermediateOutputPath>obj\\$(Configuration)\\</IntermediateOutputPath>\r\n    <DefineConstants>Debug;</DefineConstants>\r\n  </PropertyGroup>\r\n  <PropertyGroup Condition=\" '$(Configuration)|$(Platform)' == 'Release|x86' \">\r\n    <OutputPath>bin\\$(Configuration)\\</OutputPath>\r\n    <IntermediateOutputPath>obj\\$(Configuration)\\</IntermediateOutputPath>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <Compile Include=\"Product.wxs\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <WixExtension Include=\"WixUtilExtension\">\r\n      <HintPath>$(WixExtDir)\\WixUtilExtension.dll</HintPath>\r\n      <Name>WixUtilExtension</Name>\r\n    </WixExtension>\r\n    <WixExtension Include=\"WixNetFxExtension\">\r\n      <HintPath>$(WixExtDir)\\WixNetFxExtension.dll</HintPath>\r\n      <Name>WixNetFxExtension</Name>\r\n    </WixExtension>\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <Content Include=\"HtPlcFrameworkGui.ico\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <ProjectReference Include=\"..\\MyProject\\MyProject.csproj\">\r\n      <Name>MyProject</Name>\r\n      <Project>{4b29025d-9d0e-4fea-b204-25687cef94b2}</Project>\r\n      <Private>True</Private>\r\n      <DoNotHarvest>True</DoNotHarvest>\r\n      <RefProjectOutputGroups>Binaries;Content;Satellites</RefProjectOutputGroups>\r\n      <RefTargetDir>INSTALLFOLDER</RefTargetDir>\r\n    </ProjectReference>\r\n  </ItemGroup>\r\n  <Import Project=\"$(WixTargetsPath)\" />\r\n  <PropertyGroup>  \r\n  </PropertyGroup>\r\n  <PropertyGroup>\r\n    <LibrariesDir>$(IntermediateOutputPath)\\libraries\\</LibrariesDir>\r\n    <DefineConstants>LibraryFiles=$(IntermediateOutputPath)\\libraries</DefineConstants>\r\n  </PropertyGroup>\r\n  <PropertyGroup>\r\n    <PostBuildEvent />\r\n  </PropertyGroup>\r\n  <PropertyGroup>\r\n    <PreBuildEvent />\r\n  </PropertyGroup>\r\n  <!--\r\n\tTo modify your build process, add your task inside one of the targets below and uncomment it.\r\n\tOther similar extension points exist, see Wix.targets.\r\n\t-->\r\n  <Target Name=\"BeforeBuild\">\r\n    <Message Text=\"Deleting old installer files...\" Importance=\"high\" />\r\n    <CreateItem Include=\"$(TargetDir)*.msi\">\r\n      <Output TaskParameter=\"Include\" ItemName=\"MsiFiles\" />\r\n    </CreateItem>\r\n    <Delete Files=\"@(MsiFiles)\" />\r\n    <Message Text=\"Gathering libraries...\" Importance=\"high\" />\r\n    <CreateItem Include=\"..\\MyProject\\bin\\$(Configuration)\\*.dll\">\r\n      <Output TaskParameter=\"Include\" ItemName=\"LibraryFiles\" />\r\n    </CreateItem>\r\n    <CreateItem Include=\"..\\MyProject\\bin\\$(Configuration)\\Config\\*.*\">\r\n      <Output TaskParameter=\"Include\" ItemName=\"ConfigFiles\" />\r\n    </CreateItem>\r\n    <CreateItem Include=\"..\\MyProject\\bin\\$(Configuration)\\x64\\*.dll\">\r\n      <Output TaskParameter=\"Include\" ItemName=\"LibraryX64Files\" />\r\n    </CreateItem>\r\n    <CreateItem Include=\"..\\MyProject\\bin\\$(Configuration)\\x86\\*.dll\">\r\n      <Output TaskParameter=\"Include\" ItemName=\"LibraryX86Files\" />\r\n    </CreateItem>\r\n    <MakeDir Directories=\"$(LibrariesDir)\" />\r\n    <MakeDir Directories=\"$(LibrariesDir)Config\" />\r\n    <MakeDir Directories=\"$(LibrariesDir)x64\" />\r\n    <MakeDir Directories=\"$(LibrariesDir)x86\" />\r\n    <Copy SourceFiles=\"@(LibraryFiles)\"    DestinationFolder=\"$(LibrariesDir)\" />\r\n    <Copy SourceFiles=\"@(ConfigFiles)\"     DestinationFolder=\"$(LibrariesDir)Config\" />\r\n    <Copy SourceFiles=\"@(LibraryX64Files)\" DestinationFolder=\"$(LibrariesDir)x64\" />\r\n    <Copy SourceFiles=\"@(LibraryX86Files)\" DestinationFolder=\"$(LibrariesDir)x86\" />\r\n    <Message Text=\"Heating libraries...\" Importance=\"high\" />\r\n    <HeatDirectory DirectoryRefId=\"INSTALLLOCATION\" OutputFile=\"$(IntermediateOutputPath)\\Library.wxs\" Directory=\"$(LibrariesDir)\" ComponentGroupName=\"LibraryFiles\" ToolPath=\"$(WixToolPath)\" PreprocessorVariable=\"var.LibraryFiles\" AutogenerateGuids=\"true\" SuppressRootDirectory=\"true\" />\r\n    <ItemGroup>\r\n      <Compile Include=\"$(IntermediateOutputPath)\\Library.wxs\" />\r\n    </ItemGroup>\r\n  </Target>\r\n  <Target Name=\"AfterBuild\">\r\n    <Exec Command=\"gitsemver filename -f $(TargetPath)\" />\r\n  </Target>\r\n</Project>\r\n```\r\nCommand line\r\n```\r\nmsbuild /nodeReuse:false /p:Configuration=Installer\r\n```\r\n### Expected  behavior\r\n\r\nMSBuild should close after build\r\n\r\n### Actual behavior\r\n\r\nMSBuild is still running building from **VisualStudio**. If running from command line, everything works as expected!\r\n\r\n### Environment data\r\n`msbuild /version` output:\r\n15.7.179.6572\r\n\r\nOS info:\r\n\r\n- VisualStudio 15.7.2\r\n- .NET Framework 4.7.02556",
  "state": "CLOSED",
  "createdAt": "2018-05-24T06:53:59Z",
  "updatedAt": "2024-02-21T17:13:01Z",
  "closedAt": "2019-09-16T15:53:13Z",
  "author": {
    "login": "djonasdev"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Discussion"
  },
  "comments": {
    "nodes": [
      {
        "body": "Setting `MSBUILDDISABLENODEREUSE` inside a project doesn't have any effect--it must be set as an environment variable before the entry-point project starts executing. To affect Visual Studio, that means it must be set in the environment before launching `devenv.exe`.\r\n\r\nNote that since Visual Studio has started doing more builds out-of-process (as a robustness and responsiveness improvement), this could significantly hurt your VS experience.\r\n\r\nWhy are you trying to set this?",
        "createdAt": "2018-05-24T14:38:04Z",
        "updatedAt": "2018-05-24T14:38:04Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Hey @rainersigwald,\r\n*I have noticed that setting it in a project doesn't take effect (how embarrassing)!*\r\n\r\nUnfortunately setting it in the project file does also not take the effect. The MSBuild.exe is still running afterwards.\r\n\r\n> Why are you trying to set this?\r\n\r\nI pre-build the complete \"install structure\" in the \"obj\" folder. \r\n\r\n```XML\r\n<Target Name=\"BeforeBuild\">\r\n    <Message Text=\"Deleting old installer files...\" Importance=\"high\" />\r\n    <CreateItem Include=\"$(TargetDir)*.msi\">\r\n      <Output TaskParameter=\"Include\" ItemName=\"MsiFiles\" />\r\n    </CreateItem>\r\n    <Delete Files=\"@(MsiFiles)\" />\r\n    <Message Text=\"Gathering libraries...\" Importance=\"high\" />\r\n    <CreateItem Include=\"..\\MyProject\\bin\\$(Configuration)\\*.dll\">\r\n      <Output TaskParameter=\"Include\" ItemName=\"LibraryFiles\" />\r\n    </CreateItem>\r\n    <CreateItem Include=\"..\\MyProject\\bin\\$(Configuration)\\Config\\*.*\">\r\n      <Output TaskParameter=\"Include\" ItemName=\"ConfigFiles\" />\r\n    </CreateItem>\r\n    <CreateItem Include=\"..\\MyProject\\bin\\$(Configuration)\\x64\\*.dll\">\r\n      <Output TaskParameter=\"Include\" ItemName=\"LibraryX64Files\" />\r\n    </CreateItem>\r\n    <CreateItem Include=\"..\\MyProject\\bin\\$(Configuration)\\x86\\*.dll\">\r\n      <Output TaskParameter=\"Include\" ItemName=\"LibraryX86Files\" />\r\n    </CreateItem>\r\n    <MakeDir Directories=\"$(LibrariesDir)\" />\r\n    <MakeDir Directories=\"$(LibrariesDir)Config\" />\r\n    <MakeDir Directories=\"$(LibrariesDir)x64\" />\r\n    <MakeDir Directories=\"$(LibrariesDir)x86\" />\r\n    <Copy SourceFiles=\"@(LibraryFiles)\"    DestinationFolder=\"$(LibrariesDir)\" />\r\n    <Copy SourceFiles=\"@(ConfigFiles)\"     DestinationFolder=\"$(LibrariesDir)Config\" />\r\n    <Copy SourceFiles=\"@(LibraryX64Files)\" DestinationFolder=\"$(LibrariesDir)x64\" />\r\n    <Copy SourceFiles=\"@(LibraryX86Files)\" DestinationFolder=\"$(LibrariesDir)x86\" />\r\n    <Message Text=\"Heating libraries...\" Importance=\"high\" />\r\n    <HeatDirectory DirectoryRefId=\"INSTALLLOCATION\" OutputFile=\"$(IntermediateOutputPath)\\Library.wxs\" Directory=\"$(LibrariesDir)\" ComponentGroupName=\"LibraryFiles\" ToolPath=\"$(WixToolPath)\" PreprocessorVariable=\"var.LibraryFiles\" AutogenerateGuids=\"true\" SuppressRootDirectory=\"true\" />\r\n    <ItemGroup>\r\n      <Compile Include=\"$(IntermediateOutputPath)\\Library.wxs\" />\r\n    </ItemGroup>\r\n  </Target>\r\n```\r\n\r\nWhen I try to setup/customize the setup and build/rebuild the setup.msi several times, all files in the \"obj\" folder are still locked. When changing some parameters, the \"old\" files/folder structures are still kept and the setup.msi file is producing the wrong output on installing.\r\n\r\n---\r\nMy current solution is building the solution from console (there is it working as expected! The MSBuild.exe is closed afterwards)\r\n\r\n*My workmate does not have this problem using the same solution. So maybe there is something wrong with my VisualStudio installation.*",
        "createdAt": "2018-05-28T05:27:03Z",
        "updatedAt": "2018-05-28T05:27:03Z",
        "author": {
          "login": "djonasdev"
        }
      },
      {
        "body": "I have had the same problem in Visual Studio 2017. I work around it by adding `Condition=\"$(DesignTimeBuild) != true And $(BuildingProject) == true\"` to my custom targets. See:\r\n[Determining whether a target is run in a design-time build](https://github.com/dotnet/project-system/blob/master/docs/design-time-builds.md#determining-whether-a-target-is-run-in-a-design-time-build)",
        "createdAt": "2018-06-07T18:04:45Z",
        "updatedAt": "2018-06-07T18:04:45Z",
        "author": {
          "login": "Adam-S-Daniel"
        }
      },
      {
        "body": "@geeeyetee thanks for reply.\r\n\r\nWhat should I do then, if I know it is build by VS?",
        "createdAt": "2018-06-08T05:37:21Z",
        "updatedAt": "2018-06-08T05:37:21Z",
        "author": {
          "login": "djonasdev"
        }
      },
      {
        "body": "Not sure I understand your question, but maybe this will help clarify: The condition evaluates to true when you initiate a build in Visual Studio, but to false during the design-time builds that Visual Studio performs in the background. In my project, this has prevented the locking of files in obj\\ by persistent instances of MSBuild.exe.",
        "createdAt": "2018-06-08T15:06:28Z",
        "updatedAt": "2018-06-08T15:21:54Z",
        "author": {
          "login": "Adam-S-Daniel"
        }
      },
      {
        "body": "Hi, any news about this issue ?\r\nIt's very annoying and It's still present in 15.9.13 version !!!\r\nThanks",
        "createdAt": "2019-06-28T09:40:25Z",
        "updatedAt": "2019-06-28T09:40:25Z",
        "author": {
          "login": "delfuria"
        }
      },
      {
        "body": "I'm having this issue as well, but only with the new CSProj format `<Project Sdk=\"Microsoft.NET.Sdk\">` \r\nIn my case I have a target which generates some .cs files. And because of this issue, while VS is opened, the files are infinitely being generated and deleted.\r\n\r\n@geeeyetee 's workaround solved my problem though ;)",
        "createdAt": "2019-09-10T09:21:09Z",
        "updatedAt": "2019-09-10T09:21:09Z",
        "author": {
          "login": "Jmales"
        }
      },
      {
        "body": "Closing this as I think everything is by design:\r\n\r\n1. Node reuse can't be configured within a project.\r\n1. Design time builds are expected to run often in Visual Studio--see more information I posted on a linked issue: https://github.com/dotnet/sdk/issues/3627#issuecomment-530047390\r\n\r\nAs always, we can reopen if necessary.",
        "createdAt": "2019-09-16T15:53:13Z",
        "updatedAt": "2019-09-16T15:53:13Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Man I wish this would get fixed.\r\nIt's SO annoying that I can't clean a build directory after closing VS.",
        "createdAt": "2021-10-28T14:42:28Z",
        "updatedAt": "2021-10-28T14:42:28Z",
        "author": {
          "login": "Uxorious"
        }
      },
      {
        "body": "@rainersigwald  can they not set the environment variable to disable node reuse?",
        "createdAt": "2021-10-28T14:51:50Z",
        "updatedAt": "2021-10-28T14:51:50Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "@Uxorious \r\n\r\n> It's SO annoying that I can't clean a build directory after closing VS.\r\n\r\nClosing VS should close all `MSBuild.exe` worker nodes; if you're not seeing that please [open a Visual Studio feedback ticket](https://docs.microsoft.com/visualstudio/ide/feedback-options) and include a trace of the repro.\r\n\r\nIn addition, MSBuild shouldn't hold a lock on anything in the build output folder. Can you please file a new issue with details about what you're seeing held open?",
        "createdAt": "2021-10-28T15:06:11Z",
        "updatedAt": "2021-10-28T15:06:11Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> can they not set the environment variable to disable node reuse?\r\n\r\nYes, `MSBUILDDISABLENODEREUSE=1` will prevent long-lived `MSBuild.exe` processes (at the cost of performance, since we can't preserve caches/avoid process-startup and JIT costs).",
        "createdAt": "2021-10-28T15:06:26Z",
        "updatedAt": "2021-10-28T15:06:26Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Hmm all I do is:\r\nmkdir build\r\npushd build\r\ncmake -G \"Visual Studio 16 2019\" ..\r\npopd\r\n\r\nLaunch VS and build the project.\r\nClose VS after it's built.\r\n\r\nrmdir /S /Q build\r\n\r\nThen that will tell me it can't delete the directory (though all files within are gone).\r\n\r\nI guess I'll investigate what exactly is holding on to the directory.",
        "createdAt": "2021-10-28T15:48:08Z",
        "updatedAt": "2021-10-28T15:48:08Z",
        "author": {
          "login": "Uxorious"
        }
      },
      {
        "body": "Yes, please, that should work twice over (we shouldn't lock anything and even if we did we should close our processes when VS closes). [Process Explorer](https://docs.microsoft.com/sysinternals/downloads/process-explorer) has a handle-search feature that should help figure out the process + file that's holding the lock.",
        "createdAt": "2021-10-28T15:50:41Z",
        "updatedAt": "2021-10-28T15:50:41Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Interesting.\r\nIf I do what I described above, it works.\r\nBut if I do:\r\nStart explorer, and navigate to \"build\" directory.\r\nDouble-click on the solution.\r\nALT-TAB back to explorer and close it.\r\nBack in VS, build.\r\nClose VS.\r\n\r\nNow if I try removing the build directory, it gives me the error.\r\nAnd ProcessExplorer says:\r\n<Non-existent process> SOMEPID PATH_TO_BUILD",
        "createdAt": "2021-10-28T16:03:20Z",
        "updatedAt": "2021-10-28T16:03:20Z",
        "author": {
          "login": "Uxorious"
        }
      }
    ]
  }
}