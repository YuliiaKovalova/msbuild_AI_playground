{
  "number": 6602,
  "title": "NuGet static graph restore can cause subsequent builds to fail to expand globs in .NET SDK 6.0.100-preview6",
  "body": "<!-- This is a template that helps us provide quicker feedback. Please use any relevant sections and delete anything you don't need. -->\r\n\r\n### Issue Description\r\n<!--\r\n* Please include a clear and concise description of the problem.\r\n-->\r\n\r\n```\r\nCSC : error CS2001: Source file 'D:\\repos\\runtime\\src\\coreclr\\System.Private.CoreLib\\*.analyzerdata.x64' could not be found. [D:\\repos\\runtime\\src\\coreclr\\System.Private.CoreLib\\System.Private.CoreLib.csproj]\r\nCSC : error CS2001: Source file 'D:\\repos\\runtime\\src\\coreclr\\System.Private.CoreLib\\*.analyzerdata.net6.0' could not be found. [D:\\repos\\runtime\\src\\coreclr\\System.Private.CoreLib\\System.Private.CoreLib.csproj]\r\nCSC : error CS2001: Source file 'D:\\repos\\runtime\\src\\coreclr\\System.Private.CoreLib\\*.analyzerdata.netcoreapp' could not be found. [D:\\repos\\runtime\\src\\coreclr\\System.Private.CoreLib\\System.Private.CoreLib.csproj]\r\n```\r\n\r\nThe globbing of items in msbuild isn't expanded. These files are passed to the compiler as `AdditionalFiles` items. This was originally reported by @stephentoub.\r\n\r\n### Steps to Reproduce\r\n<!--\r\n* Include as much of the following as possible:\r\n\r\n* A minimal sample project that reproduces the issue.\r\n* Your zipped project.\r\n* IDE / CLI steps to create the project and reproduce the behaviour.\r\n* Your command line invocation\r\n-->\r\n\r\nThis should be easily reproducible by doing the same globbing as in the link below in a hello world app. Note that this seems to be dependent on the exact version of msbuild being used.\r\n\r\n### Expected Behavior\r\n<!--\r\n* The expected output or behavior.\r\n-->\r\n\r\nThe items specified in https://github.com/dotnet/arcade/blob/28a6403ee97077256fcdc60f599f0ad9e38e3cfa/src/Microsoft.DotNet.CodeAnalysis/build/Microsoft.DotNet.CodeAnalysis.targets#L21-L25 should be expanded correctly. The wildcard should be expanded and not hardcoded as a literal `*`.\r\n\r\n### Actual Behavior\r\n<!--\r\n* The actual output or behavior.\r\n-->\r\n\r\nThe wildcard globbing isn't expanded and the wildcard `*` is written literally.\r\n\r\n![image](https://user-images.githubusercontent.com/7412651/122825620-7908e500-d2e2-11eb-8c82-88fd08329497.png)\r\n\r\n### Analysis\r\n<!--\r\n* If you have an idea where the problem might lie, let us know that here.\r\n* Please include any pointers to code, relevant changes, or related issues you know of.\r\n-->\r\n\r\n\r\n### Versions & Configurations\r\n<!--\r\n* In a Visual Studio developer command prompt, run `msbuild -version` and paste the output here.\r\n* If applicable, include the version of the tool that invokes MSBuild (Visual Studio, dotnet CLI, etc):\r\n\r\n* Post any other relevant configuration settings here.\r\n*   OS, architecture, etc.\r\n-->\r\n\r\nMSBuild version = \"17.0.0-preview-21317-11+c579afe9c\"\r\n\r\n### Attach a binlog\r\n<!--\r\n* If providing us a project that reproduces the issue proves difficult, consider including a binlog.\r\n* Click [here](https://aka.ms/msbuild/binlog) for details on sharing binary logs.\r\n* Click [here](https://github.com/microsoft/msbuild/blob/master/documentation/wiki/Binary-Log.md) for more information on binary logs.\r\n    NOTE: Binlogs can contain sensitive information. Don't attach anything you don't want to be public.\r\n\r\n*   To view the contents of the binlogs yourself, you may wish to use a tool like https://msbuildlog.com/.\r\n-->\r\n\r\nInternal link for MSFT employees:\r\nhttps://microsofteur-my.sharepoint.com/:u:/g/personal/vihofer_microsoft_com/EftKjjkbyK5JvpaijHLKfjABIeIYvPIfQk_fIslqqn-rQA?e=suROf8",
  "state": "OPEN",
  "createdAt": "2021-06-21T20:50:43Z",
  "updatedAt": "2024-01-31T08:20:58Z",
  "closedAt": null,
  "author": {
    "login": "ViktorHofer"
  },
  "labels": [
    "bug",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "I don't repro in a simple project with the same MSBuild/SDK (or `MSBuild.exe` from my dogfood VS which is the same version): \r\n[msbuild6602.zip](https://github.com/dotnet/msbuild/files/6689572/msbuild6602.zip)\r\n\r\nMy first thought is that this may be an instance of #406, but there's no recursion in the pattern and the paths aren't all that long. It could conceivably be a different exception causing the same symptom but I don't know what that would be. \r\n\r\nThe source as currently checked in doesn't have any interesting files or patterns: https://github.com/dotnet/runtime/tree/213600c17635bf25f812a6a7e6ab53d4fa875883/src/libraries/System.IO.Compression/src\r\n\r\ncc @ladipro since this is maybe related to your glob change #6151.",
        "createdAt": "2021-06-21T21:20:15Z",
        "updatedAt": "2021-06-21T21:20:15Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I have a local repro with SDK 6.0.100-preview.6.21321.7 and the dotnet/runtime repo as in the OP.",
        "createdAt": "2021-06-21T22:20:42Z",
        "updatedAt": "2021-06-21T22:20:42Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Been looking at this this morning. It looks like there may be a race condition in persistent state in worker nodes somehow?\r\n\r\nI can get into a state where it fails consistently, but I've also seen states where it consistently passes, for instance building with `-m:1` and `DOTNET_DO_NOT_USE_MSBUILDNOINPROCNODE=true`.\r\n\r\nNaturally those are the ones that are easier to debug, so I haven't chased down the problem yet.",
        "createdAt": "2021-06-22T16:16:45Z",
        "updatedAt": "2021-06-22T16:16:45Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "In the bad state, I see an entry in `s_lazyWildCardExpansionRegexes`: `[*?]+.*(?<!proj)$`.\r\n\r\nThat's causing this to return true\r\n\r\nhttps://github.com/dotnet/msbuild/blob/bbeb7013630a129f3ec84bf4a1173c25974733d0/src/Build/Utilities/EngineFileUtilities.cs#L227-L230\r\n\r\nwhich bubbles up to\r\n\r\nhttps://github.com/dotnet/msbuild/blob/bbeb7013630a129f3ec84bf4a1173c25974733d0/src/Build/Utilities/EngineFileUtilities.cs#L136-L141\r\n\r\nI don't see any place where that could be written to other than here:\r\n\r\nhttps://github.com/dotnet/msbuild/blob/bbeb7013630a129f3ec84bf4a1173c25974733d0/src/Build/Utilities/EngineFileUtilities.cs#L202-L222\r\n\r\nBut that env var doesn't seem to be set anywhere.",
        "createdAt": "2021-06-22T18:02:28Z",
        "updatedAt": "2021-06-22T18:02:28Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I finally found `dotnet.exe` where it is explicitly set. These are two worker nodes launched from the same process:\r\n\r\n![image](https://user-images.githubusercontent.com/3347530/122986767-79968f80-d365-11eb-88d6-1ec2a6ec64e9.png)\r\n\r\nAHA! State is leaking from NuGet setting this for restore:\r\n\r\nhttps://github.com/NuGet/NuGet.Client/blob/b83566ec2369c4e9fd07e6f95d734dfe370a1e66/src/NuGet.Core/NuGet.Build.Tasks.Console/MSBuildFeatureFlags.cs#L76\r\n\r\nhttps://github.com/NuGet/NuGet.Client/blob/b83566ec2369c4e9fd07e6f95d734dfe370a1e66/src/NuGet.Core/NuGet.Build.Tasks.Console/MSBuildFeatureFlags.cs#L16\r\n\r\ncc @jeffkl, @nkolev92\r\n\r\nI think this may be new behavior related to dotnet/sdk#18263 (cc @rokonec): before, NuGet's limit of 1 worker node would have been in-proc; now it's forced out by `MSBUILDNOINPROCNODE`.\r\n\r\nhttps://github.com/NuGet/NuGet.Client/blob/b83566ec2369c4e9fd07e6f95d734dfe370a1e66/src/NuGet.Core/NuGet.Build.Tasks.Console/MSBuildStaticGraphRestore.cs#L872-L874\r\n\r\nLong term, I think we should teach NuGet to unset `MSBUILDNOINPROCNODE` or at least set `EnableNodeReuse=false`.\r\n\r\nThis suggests a **workaround:** set the environment variable `DOTNET_CLI_DO_NOT_USE_MSBUILDNOINPROCNODE=true`, _kill all dotnet.exe processes_, and it should work ok.",
        "createdAt": "2021-06-22T19:45:39Z",
        "updatedAt": "2021-06-22T20:11:07Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Other possible workarounds:\r\n\r\n* Build with `--no-restore`\r\n* Turn off graph restore",
        "createdAt": "2021-06-22T20:10:58Z",
        "updatedAt": "2021-06-22T20:10:58Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald Static graph restore happens entirely [out of proc](https://github.com/NuGet/NuGet.Client/blob/b83566ec2369c4e9fd07e6f95d734dfe370a1e66/src/NuGet.Core/NuGet.Build.Tasks/RestoreTaskEx.cs#L124), how is it leaking over to builds?",
        "createdAt": "2021-06-23T14:45:06Z",
        "updatedAt": "2021-06-23T14:45:06Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "@jeffkl well, we made it more out of proc and now it's too out of proc :)\r\n\r\nBefore:\r\n\r\n```\r\n(MSBuild running restore) ---------------------------------------------(download)\r\n    \\- (NuGet helper process) -- static graph stuff -- build stuff -- exits /\r\n```\r\n\r\nafter\r\n\r\n```\r\n(MSBuild running restore) ---------------------------------------------------------(download)\r\n    \\- (NuGet helper process) -- static graph stuff ----------------------------(exits) /\r\n                                                     \\- (MSBuild.exe) build stuff /-----(idle)\r\n```\r\n\r\nWhere that third process (`MSBuild.exe` or `dotnet.exe msbuild` is the out-of-proc worker node created by the MSBuild API when called in the helper because `MSBUILDNOINPROCNODE=1` was set, so it needed a worker node. Then on a subsequent build that node is reused, but that breaks stuff because it's in the `MsBuildSkipEagerWildCardEvaluationRegexes` state.",
        "createdAt": "2021-06-23T16:20:50Z",
        "updatedAt": "2021-06-23T16:20:50Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald so you're saying the out of proc evaluations launch a re-usable msbuild.exe node now?  Would that be a problem for any app that does evaluations and creates polluted instances?\r\n",
        "createdAt": "2021-06-23T19:18:09Z",
        "updatedAt": "2021-06-23T19:18:09Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "It's not the evaluations that are spawning the node but the target executions that collect the output.",
        "createdAt": "2021-06-23T20:18:42Z",
        "updatedAt": "2021-06-23T20:18:42Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "So is the fix to set EnableNodeReuse to false on the BuildParameters?\r\n\r\nhttps://source.dot.net/#Microsoft.Build/BackEnd/BuildManager/BuildParameters.cs,396",
        "createdAt": "2021-06-23T20:38:19Z",
        "updatedAt": "2021-06-23T20:38:19Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "Either that, or explicitly unset `MSBUILDNOINPROCNODE` from your environment in the EXE before loading MSBuild. Or both.\r\n\r\nJust setting `EnableNodeReuse` will still cause a third child MSBuild process which isn't strictly necessary, and since the whole point is perf I'd unset the variable.",
        "createdAt": "2021-06-23T20:43:25Z",
        "updatedAt": "2021-06-23T20:43:25Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "We don't set `MSBUILDNOINPROCNODE` in static graph restore, is that set because I'm setting maxNodeCount in the project collection to 1?\r\n\r\nhttps://github.com/NuGet/NuGet.Client/blob/dev/src/NuGet.Core/NuGet.Build.Tasks.Console/MSBuildStaticGraphRestore.cs#L874",
        "createdAt": "2021-06-23T20:48:32Z",
        "updatedAt": "2021-06-23T20:48:32Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "No, it's being set by the CLI because it's been observed to improve performance: dotnet/sdk#17916.\r\n\r\nWe should consider changing that mechanism so it's less \"infectious\", like promoting it to a command-line argument or doing it at the API level somehow. @rokonec thoughts/feelings/preferences?",
        "createdAt": "2021-06-23T20:59:55Z",
        "updatedAt": "2021-06-23T20:59:55Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "(I still think NuGet should make itself robust to the situation since a _user_ might have set it in some rare circumstances.)",
        "createdAt": "2021-06-23T21:00:24Z",
        "updatedAt": "2021-06-23T21:00:24Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> We should consider changing that mechanism so it's less \"infectious\", like promoting it to a command-line argument or doing it at the API level somehow\r\n\r\nA low-cost fix may be to do this via a different environment variable that MSBuild unsets after reading. Or even just unset `MSBUILDNOINPROCNODE` on startup after reading if we feel adventurous.",
        "createdAt": "2021-06-24T16:29:12Z",
        "updatedAt": "2021-06-24T16:29:12Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "I would also argue that `MsBuildSkipEagerWildCardEvaluationRegexes` ranks higher on the hack-o-meter than `MSBUILDNOINPROCNODE` so if it's used in a prod scenario, we should think about making it a command-line argument or API as well.",
        "createdAt": "2021-06-24T16:32:43Z",
        "updatedAt": "2021-06-24T16:32:43Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "FWIW, I think I'm running into this issue in some variation fairly often in my [zig-msbuild-sdk](https://github.com/alexrp/zig-msbuild-sdk) project. `dotnet build` in the repository root and then `dotnet build` in `src/samples` reproduces it fairly often, leading to a `BadPathName` error from the Zig compiler.",
        "createdAt": "2021-07-16T16:46:30Z",
        "updatedAt": "2021-07-16T16:46:30Z",
        "author": {
          "login": "alexrp"
        }
      },
      {
        "body": "@alexrp What .NET SDK version are you using? The condition that caused this error shouldn't have ever shipped in a formal preview, just the daily builds for a while.\r\n\r\n(The underlying bugs are there but shouldn't have bitten anyone until various things combined.)",
        "createdAt": "2021-07-16T16:59:29Z",
        "updatedAt": "2021-07-16T16:59:29Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "```\r\n$ dotnet --info\r\n.NET SDK (reflecting any global.json):\r\n Version:   6.0.100-preview.6.21355.2\r\n Commit:    7f8e0d76c0\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.22000\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\6.0.100-preview.6.21355.2\\\r\n\r\nHost (useful for support):\r\n  Version: 6.0.0-preview.6.21352.12\r\n  Commit:  770d630b28\r\n\r\n.NET SDKs installed:\r\n  2.1.815 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100 [C:\\Program Files\\dotnet\\sdk]\r\n  3.1.201 [C:\\Program Files\\dotnet\\sdk]\r\n  3.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.1.411 [C:\\Program Files\\dotnet\\sdk]\r\n  5.0.100-rc.1.20452.10 [C:\\Program Files\\dotnet\\sdk]\r\n  5.0.100 [C:\\Program Files\\dotnet\\sdk]\r\n  5.0.102 [C:\\Program Files\\dotnet\\sdk]\r\n  5.0.202 [C:\\Program Files\\dotnet\\sdk]\r\n  5.0.301 [C:\\Program Files\\dotnet\\sdk]\r\n  5.0.302 [C:\\Program Files\\dotnet\\sdk]\r\n  6.0.100-preview.6.21355.2 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.27 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.28 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.27 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.28 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.1.14 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.1.16 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.1.17 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.0-rc.1.20451.17 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 5.0.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 6.0.0-preview.6.21355.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.27 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.28 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.14 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.16 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.17 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.0-rc.1.20451.14 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 5.0.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 6.0.0-preview.6.21352.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 3.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 3.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 3.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 3.1.14 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 3.1.16 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 3.1.17 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 5.0.0-rc.1.20452.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 5.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 5.0.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 5.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 5.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 5.0.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 6.0.0-preview.6.21353.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```",
        "createdAt": "2021-07-16T17:02:17Z",
        "updatedAt": "2021-07-16T17:02:17Z",
        "author": {
          "login": "alexrp"
        }
      },
      {
        "body": "Here's an example:\r\n\r\n```\r\n**/*.cxx(1,1): error GB70915D9: unable to build C object: unable to build C object: BadPathName [C:\\Users\\alex\\source\\repos\\zig-msbuild-sdk\\src\\samples\\cxxexe\\cxxexe.cxxproj]\r\n```\r\n\r\nThe SDK is doing:\r\n\r\n```xml\r\n        <Compile Include=\"**/*.cxx\"\r\n                 Excludes=\"$(DefaultItemExcludes); $(DefaultExcludesInProjectFolder)\"\r\n                 Condition=\"'$(CompilerMode)' == 'Cxx'\" />\r\n```",
        "createdAt": "2021-07-16T17:03:13Z",
        "updatedAt": "2021-07-16T17:04:16Z",
        "author": {
          "login": "alexrp"
        }
      }
    ]
  }
}