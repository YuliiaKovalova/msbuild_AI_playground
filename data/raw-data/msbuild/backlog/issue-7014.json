{
  "number": 7014,
  "title": "Trying to reduce build size without breaking ResolveAssemblyReferences",
  "body": "I work in a large .NET 5 repo that's done very little to alter the overall build process.  Our only real changes are to move the artifacts (obj/bin) under top level directories.  After a build of our solution, the binaries directory is ~70 GB on disk.\r\n\r\nI've been looking into some changes we can make to reduce this size.  Some obvious things would be:\r\n- Turn on hardlinking.  We've tested this, and it obviously helps a lot, but it makes me nervous (write through to NuGet assets, etc.).  I'd rather not go this route if possible.  Also, experiences/notes [like this](https://github.com/dotnet/roslyn/issues/39098#issuecomment-539145431) cause me to want to avoid enabling hardlinks.\r\n- Turning on a single output directory for most projects to reduce duplication.  There are also [numerous warnings](https://github.com/dotnet/roslyn/issues/8975#issuecomment-270566431) about this - so I'm hesitant to start down this path.\r\n\r\nSomething I have tried is to clear out `ReferenceCopyLocalPaths` for libraries.  For us, the vast majority of library projects only exist to be consumed by apps/tests. We do not build NuGet packages around them or expose them in any other way.  As such, the duplication of all the CopyLocal dependencies seems entirely wasteful.  This works well to reduce the size of the binaries directory.  Clearing `ReferenceCopyLocalPaths` for everything that is not an application or test reduces the size of our binaries directory to ~45GB.\r\n\r\nHowever, I'm running into what seems like a bug.  We have a handful of binary assets that we do not get from NuGet - they're just checked into git and referenced from our `.csproj` files via a `<Reference Include=\"...\" />` element.  **Those assemblies are not being copied to the output directory of the app/test projects.**  In the `.binlog`, I see the following message during the RAR target:\r\n\r\n![RAR-unable-to-resolve](https://user-images.githubusercontent.com/1509215/140116343-d8c76d2c-e4a3-4469-94f8-4679bc246da9.png)\r\n\r\nBecause `{HintPathFromItem}` is present in the `SearchPaths`, I would have expected this item to be resolved, but I am pretty new to msbuild - so that probably reflects my lack of understanding more than anything...\r\n\r\nI've attached a simple solution that reproduces the issue I'm running into.  Is there something I can do to get this approach to work?  At a higher level, is there an approach I'm missing that will allow me to reduce the overall size of the output directory?\r\n\r\n[RAR-Issue.zip](https://github.com/dotnet/msbuild/files/7469405/RAR-Issue.zip)",
  "state": "CLOSED",
  "createdAt": "2021-11-03T17:05:08Z",
  "updatedAt": "2024-02-21T14:11:08Z",
  "closedAt": "2022-01-02T19:00:52Z",
  "author": {
    "login": "nick-beer"
  },
  "labels": [
    "needs-more-info",
    "stale",
    "closed-by-bot",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Team Triage: Have you tried setting `HintPath` as metadata on your `Reference` items?\r\n\r\nAnother idea would be to append your path to `AssemblySearchPaths`, but you need to be careful about that. You need those paths for a build to succeed. Setting it in a target that runs before RAR should do the trick. Something like `<AssemblySearchPaths>$(AssemblySearchPaths);YOURPATHS</AssemblySearchPaths>`.",
        "createdAt": "2021-11-11T17:45:39Z",
        "updatedAt": "2021-11-11T17:45:39Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "@BenVillalobos - yes, I should have mentioned that.  I did try setting the `HintPath` metadata on my `Reference` items like this:\r\n```xml\r\n<Reference Include=\"MyImport\" HintPath=\"..\\..\\Imports\\MyImport\\MyImport.dll\" />\r\n```\r\nIt didn't have any impact on the end result - the reference was not copied to the application folder.\r\n\r\nI hadn't yet tried `AssemblySearchPaths` - mostly because I was hoping that wouldn't be the answer.  I've now tried it and it does work as expected - the referenced assembly is found and copied to the application output directory.  While I can move forward with that solution, we have (sadly...) many different references like this. I was really hoping it wouldn't be necessary to make a long, brittle list of each of those paths.  Hopefully this isn't the only way?",
        "createdAt": "2021-11-11T19:09:14Z",
        "updatedAt": "2021-11-11T20:17:59Z",
        "author": {
          "login": "nick-beer"
        }
      },
      {
        "body": "Team triage:\r\nYou are right that <ReferenceCopyLocalPaths Remove=\"@(ReferenceCopyLocalPaths)\" /> will reduce the size of your bin directory by asserting that the references RAR found shouldn't be copied over, but the issue here seems to be that then transitive references to those same binaries are unfindable. RAR-Issue knows that it needs NewtonSoft.Json because Library needs it, and it knows how to find its direct dependency Library, but it doesn't know how to find NewtonSoft.Json on its own, hence the issue.\r\n\r\nWe don't have general suggestions on how to optimize the space your bin directory takes up on disk. If you go down the path you're currently on, you can add a direct reference from RAR-Issue to NewtonSoft.Json, and that should make this particular case work. Then you would be completely unable to rely on transitive dependencies, which would be a significant hassle to deal with for a repo the size of yours but theoretically doable.\r\n\r\nHard links have the problem you mentioned with corrupting the NuGet cache. You can also look into symlinks to see if that might help. Hope that helps!",
        "createdAt": "2021-11-18T18:13:08Z",
        "updatedAt": "2021-11-18T18:13:08Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "This issue is marked as stale because feedback has been requested for 30 days with no response. Please respond within 14 days or this issue will be closed due to inactivity.",
        "createdAt": "2021-12-19T00:00:54Z",
        "updatedAt": "2021-12-19T00:00:54Z",
        "author": {
          "login": "ghost"
        }
      },
      {
        "body": "This issue was closed due to inactivity. If you can still reproduce this bug, please comment with the requested information, detailed steps to reproduce the problem, or any other notes that might help in the investigation.",
        "createdAt": "2022-01-02T19:00:53Z",
        "updatedAt": "2022-01-02T19:00:53Z",
        "author": {
          "login": "ghost"
        }
      }
    ]
  }
}