{
  "number": 9667,
  "title": "Some way to opt specific messages into printing in TerminalLogger",
  "body": "TerminalLogger ignores most messages, even those logged at High priority, because historically those messages have been quite chatty. But sometimes they're important--for instance, the output of test runners in https://github.com/dotnet/runtime/issues/97211.\r\n\r\nIt'd be helpful if we either don't try to bypass priority (unfortunate since it'll make real build console output dramatically uglier) or provide a new mechanism for like \"I really mean it please put this on the console output\".\r\n\r\nRight now it can be worked around if you're willing to junk up your high-pri message with the string `--interactive`, to trip into the special cases in #9407.",
  "state": "CLOSED",
  "createdAt": "2024-01-19T19:51:56Z",
  "updatedAt": "2024-04-03T16:00:57Z",
  "closedAt": "2024-04-03T16:00:57Z",
  "author": {
    "login": "rainersigwald"
  },
  "labels": [
    "Priority:2",
    "triaged",
    "Area: Terminal Logger"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "AR-May"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Putting thoughts here for posterity, but many high-pri messages are status/progress - if we have an API for representing this concept specifically then the need for high priority messages may drop. ",
        "createdAt": "2024-01-19T19:53:42Z",
        "updatedAt": "2024-01-19T19:53:42Z",
        "author": {
          "login": "baronfel"
        }
      },
      {
        "body": "The need for high pri messages, or the need to squelch them because Rainer thinks they're too chatty? For the case I'm looking at now they _want_ persistent output (test output from a custom runner).\r\n\r\nOf course, if most of the existing high-pri messages were status instead (per-project NuGet restore, exec task command lines and stdout, etc) we could respect priority again . . .",
        "createdAt": "2024-01-19T20:10:00Z",
        "updatedAt": "2024-01-19T20:10:00Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Another sample of a somewhat surprising omission in the TerminalLogger are NuGet.Client rules.\r\n\r\nYou can set up a trivial repro like this:\r\n\r\n```powershell\r\nmkdir temp && cd temp && dotnet new classlib && dotnet pack\r\n```\r\n\r\nYou'll see a console message like this\r\n\r\n```cmd\r\nThe package temp.1.0.0 is missing a readme. Go to https://aka.ms/nuget/authoring-best-practices/readme to learn why p\r\n  ackage readmes are important.\r\n```\r\n\r\nThat message is suppressed when using `dotnet pack /tl`.\r\n\r\nThese _feel_ like they instead should be NU**** build warnings and then the \"right thing\" should happen, but I'm not familiar with the NuGet pack rules and how they work.",
        "createdAt": "2024-02-01T23:55:18Z",
        "updatedAt": "2024-02-01T23:56:56Z",
        "author": {
          "login": "MattKotsenas"
        }
      },
      {
        "body": "The specific scenario of test results should not be considered for this issue - the test team have already been working on updating their usage of the Logger systems to display better in terminal logger: https://github.com/dotnet/msbuild/pull/9706",
        "createdAt": "2024-02-12T15:42:12Z",
        "updatedAt": "2024-02-12T15:42:12Z",
        "author": {
          "login": "baronfel"
        }
      },
      {
        "body": "> The specific scenario of test results should not be considered for this issue\r\n\r\nI don't agree--the fixes we're pursuing with the test team are great and I prefer them to whatever we come up with here, but there are other test runners (including custom one-off ones like `dotnet/runtime` has) and they should be able to work too.",
        "createdAt": "2024-02-12T15:44:58Z",
        "updatedAt": "2024-02-12T15:44:58Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "One another scenario is users debugging their msbuild script with 'printf debugging'.\r\nI already got some internal and external ppl comming with 'are there incrementality changes?' or  'Are there verbosity changes?' questions caused by this\r\n\r\n\r\nThey put `<Message Text=\"executed\" Importance=\"high\" />`, see that in output - all is fine. Then they run into similar need when on 9.x - see no results, switch to 8.x, see the result and suspect 9.x logging or incrementality issue. This can lead to wasted time with discovering the behavior and frustration",
        "createdAt": "2024-02-21T13:17:33Z",
        "updatedAt": "2024-02-21T13:17:33Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "IIRC at some point we considered limited space (rollover) per project for high-pri messages. Is this completely out of question now?\r\n\r\nI'm worried the `Importance=\"high\"` is more spread knowledge in community now, than the knowledge of binlog viewer and this will catch many users off guard.",
        "createdAt": "2024-02-21T13:24:20Z",
        "updatedAt": "2024-02-21T13:24:20Z",
        "author": {
          "login": "JanKrivanek"
        }
      },
      {
        "body": "> IIRC at some point we considered limited space (rollover) per project for high-pri messages. Is this completely out of question now?\r\n\r\nI really like this.  Maybe something like this: give each project a 2 line allocation in the terminal output:\r\n\r\n<pre>\r\n<i>Foo.csproj: Older message</i>\r\n<b>Foo.csproj: Newer message</b>\r\n<i>Bar.csproj: Also an older message</i>\r\nBar.csproj: Also a new message\r\n</pre>\r\n\r\nThe 1st and 3rd lines are greyed out because it is not the most recent output\r\nThe 2nd line from `Foo.csproj` is in bold because it is the most recent output from any subproject.\r\nThe 4th line is in normal color because it is the newest output from `Bar.csproj` but it isn't the newest output overall.\r\n\r\nThen if `Foo.csproj` writes `Third message`, the output will \"scroll\" the Foo.csproj messages and the window will look like this:\r\n\r\n<pre>\r\n<i>Foo.csproj: Newer message </i>\r\n<b>Foo.csproj: Third message</b>\r\n<i>Bar.csproj: Also an older message</i>\r\nBar.csproj: Also a new message\r\n</pre>\r\n\r\nAnd maybe overall the total number of projects that get to output is `(terminal height - someConstant)/2` and then you drop off whatever project had the oldest messages.  So if there are 40 chatty subprojects but I'm on a 25 line terminal, I only see about 10 of the most recent projects' outputs.\r\n\r\n---\r\n\r\nIf you have more vertical space budget, you could even do something with Unicode line drawing characters to better format the output\r\n\r\n<pre>\r\n\u250d Foo.csproj \u2501\u2501\r\n\u2502 <i>Older message</i>\r\n\u2514 <b>Newer message</b>\r\n\u250d Bar.csproj \u2501\u2501\r\n\u2502 <i>Also an older message</i>\r\n\u2514 Also a new message\r\n</pre>\r\n",
        "createdAt": "2024-02-21T15:12:40Z",
        "updatedAt": "2024-02-21T15:19:41Z",
        "author": {
          "login": "lambdageek"
        }
      },
      {
        "body": "Our current plan after a chat yesterday is as follows:\r\n\r\n* make TL verbosity-aware\r\n  * currently it doesn't respect verbosity knobs at all, and we already have a request to make it understand `quiet`, we should also make it understand `normal`, `verbose`, etc - these would apply to the _static_ messages, batched for each successful project\r\n* default TL verbosity to 'minimal', our current TL experience\r\n* log messages according to user-requested verbosity in the 'static' portion of the display\r\n  * this may result in long logs, but at least users would see the messages\r\n* create/define our actual ephemeral-message/progress-reporting API the way we want it for the long-term\r\n* work with other teams to migrate their usage of 'Message-as-progress-reporting' to the new ephemeral-message API\r\n* over time, the difference between `normal` and `minimal` verbosity trends to zero\r\n\r\nthoughts on this @lambdageek?",
        "createdAt": "2024-02-21T15:43:17Z",
        "updatedAt": "2024-02-21T15:43:17Z",
        "author": {
          "login": "baronfel"
        }
      },
      {
        "body": "> thoughts on this @lambdageek?\r\n\r\nSeems like a fine plan.\r\n\r\nMy only two real strong opinions are:\r\n\r\n1. Something like \"add `--interactive` to your message output\" or \"set your Importance to `Importance=\"very high\"` to really display the output\" is a non-starter.  Projects don't have enough context to know if they're globally important - giving them an opt out will just lead right back to overly-verbose output.  I'm happy to see this isn't part of the plan.\r\n\r\n2. I think this is possibly not a great idea:\r\n   > log messages according to user-requested verbosity in the 'static' portion of the display\r\n   >  * this may result in long logs, but at least users would see the messages\r\n   \r\n   My intuition is that users don't need to see all the output - they just need to see that there _was_ output.  If they think it's important and they need to investigate a line that scrolled out of view, they can rerun the build with a binlog or the console logger.  So I think I would (as a user) prefer to have a scrollable area for the output that just shows the N most recent messages.",
        "createdAt": "2024-02-21T15:50:46Z",
        "updatedAt": "2024-02-21T15:51:16Z",
        "author": {
          "login": "lambdageek"
        }
      },
      {
        "body": "the problem is that we have two areas/kinds of display today:\r\n\r\n* the static, per-project output\r\n* the dynamic, build-engine-status area\r\n\r\nneither of these are a perfect fit for the behavior you describe - because the static portion isn't ever rewritten.\r\n\r\nthe progress API we want to define would be something that maps to the kind of experience you're describing, and we want to get people onboarded to that. ",
        "createdAt": "2024-02-21T15:53:27Z",
        "updatedAt": "2024-02-21T15:53:27Z",
        "author": {
          "login": "baronfel"
        }
      },
      {
        "body": "> because the static portion isn't ever rewritten\r\n\r\nI see. well given that limitation I think your outlined approach makes sense.\r\n\r\nI'm excited to see what the ephemeral/progress API looks like.",
        "createdAt": "2024-02-21T15:57:00Z",
        "updatedAt": "2024-02-21T15:57:00Z",
        "author": {
          "login": "lambdageek"
        }
      },
      {
        "body": "One other thought:\r\n\r\ngiven that `dotnet build` keeps a build server process running, have you thought about _always_ writing a binlog to temporary storage?  And then maybe `dotnet build --replay -tl:off -v:diag` would show the most recent log (or the most recent log for the current directory/solution/project) using the console logger at whatever verbosity I want\r\n\r\n\r\n```console\r\n$ dotnet build --tl:on\r\n... [...] ...\r\n        There were 25 suppressed lines of Importance=\"high\" output\r\n        rerun with `dotnet build --replay --tl:off` to see them\r\n$ dotnet build --replay --tl:off\r\n...\r\nHello there\r\n...\r\n$ \r\n```",
        "createdAt": "2024-02-21T16:01:35Z",
        "updatedAt": "2024-02-21T16:03:54Z",
        "author": {
          "login": "lambdageek"
        }
      },
      {
        "body": "Always writing binary log has performance implications, since writing the binary log automatically increases the verbosity to maximum. ",
        "createdAt": "2024-02-21T16:09:47Z",
        "updatedAt": "2024-02-21T16:09:47Z",
        "author": {
          "login": "AR-May"
        }
      }
    ]
  }
}