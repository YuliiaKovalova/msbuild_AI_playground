{
  "number": 1359,
  "title": "Additional properties no longer populated with items property",
  "body": "```xml\r\n<Project ToolsVersion=\"4.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\r\n  <ItemGroup>\r\n    <MyItem Include=\"1\" />\r\n    <MyItem Include=\"2\" />\r\n  </ItemGroup>\r\n  <PropertyGroup>\r\n    <ItemsProperty>@(MyItem)</ItemsProperty>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PostMyItem Include=\"P\">\r\n      <AdditionalProperties>\r\n         AdditionalProperty=$(ItemsProperty)\r\n      </AdditionalProperties>\r\n    </PostMyItem>\r\n  </ItemGroup>\r\n  <Target Name=\"Build\">\r\n    <Message Text=\"Done!\" />\r\n  </Target>\r\n</Project>\r\n```\r\n\r\nExpected (14.0.25420.1) output:\r\n```\r\nInitial Items:\r\nMyItem\r\n    1\r\n    2\r\nPostMyItem\r\n    P\r\n        AdditionalProperties =\r\n         AdditionalProperty=1;2\r\n```\r\n\r\nActual (15.1.371.0) output:\r\n```\r\nInitial Items:\r\nMyItem\r\n    1\r\n    2\r\nPostMyItem\r\n    P\r\n        AdditionalProperties =\r\n         AdditionalProperty=\r\n```",
  "state": "CLOSED",
  "createdAt": "2016-11-18T20:00:18Z",
  "updatedAt": "2024-02-21T17:24:11Z",
  "closedAt": "2017-03-23T20:09:57Z",
  "author": {
    "login": "miloush"
  },
  "labels": [
    "bug",
    "regression",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "MSBuild 15.3"
  },
  "comments": {
    "nodes": [
      {
        "body": "I didn't understand how this was ever working, but it definitely regressed.\r\n\r\nFrom the MSBuild book:\r\n\r\n>  You should note that if you create a property that references an item, the value of the property is evaluated when it is used. What this means is that at the time you reference the property, the item reference is evaluated and expanded. Therefore, if the item changes, so can the property.\r\n\r\n@cdmihai said he'd tracked that down in the code once--maybe we can find it again?",
        "createdAt": "2017-03-17T17:59:20Z",
        "updatedAt": "2017-03-17T17:59:20Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "This is the part that does it when metadata is evaluated: https://github.com/Microsoft/msbuild/blob/master/src/Build/Evaluation/Expander.cs#L254-L256 (hopefully other parts that evaluate properties use the same method)\r\n\r\n`AdditionalProperty=$(ItemsProperty)` gets expanded to `AdditionalProperty=@(MyItem)` [here ](https://github.com/Microsoft/msbuild/blob/master/src/Build/Evaluation/Expander.cs#L254) and then gets expanded to `AdditionalProperty=1;2` at the next line.\r\n\r\nThe lazy evaluator regressed this scenario. When it is [processing a project item element](https://github.com/Microsoft/msbuild/blob/master/src/Build/Evaluation/LazyItemEvaluator.cs#L461) and finds metadata it [scans all metadata for referenced items](https://github.com/Microsoft/msbuild/blob/master/src/Build/Evaluation/LazyItemEvaluator.cs#L516). Then later on, when that item element is actually evaluated, it only has access to the items the element builder found. But since the reference to `@(MyItem)` is hidden behind a property, the following line of code never sees the indirect reference of the item: https://github.com/Microsoft/msbuild/blob/master/src/Build/Evaluation/LazyItemEvaluator.cs#L530\r\n\r\nSo what regressed is not the entire feature of properties referencing items (yay), just metadata indirectly referencing items via properties. I'll have to audit the code more thoroughly to see if this indirect item reference issue can appear in other scenarios.\r\n\r\nPotential fixes:\r\n- fix the current item reference scrapers to recursively follow properties and metadata in the search for referenced item expressions\r\n- since the above fix can make evaluation much more expensive, we can grant individual item operations visibility of the entire item evaluation state, not just the subset of items the operation said it would reference. (@dsplaisted was there a specific reason to restrict item operations to only what they reference?) \r\n",
        "createdAt": "2017-03-18T01:21:10Z",
        "updatedAt": "2017-03-18T02:26:50Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "> @dsplaisted was there a specific reason to restrict item operations to only what they reference?\r\n\r\nIt's mostly because that's how the data is structured.  There are lazy snapshots of the current state of each item name.  There isn't a single object that represents a snapshot of all of the items.\r\n\r\nI think in principle there wouldn't be a problem with snapshotting the state of all the item types.  The main issue I can think of is that it would end up taking up more memory, both to keep the extra references, as well as because it might prevent pieces of the lazy evaluation tree from being discarded.",
        "createdAt": "2017-03-20T22:09:21Z",
        "updatedAt": "2017-03-20T22:09:21Z",
        "author": {
          "login": "dsplaisted"
        }
      }
    ]
  }
}