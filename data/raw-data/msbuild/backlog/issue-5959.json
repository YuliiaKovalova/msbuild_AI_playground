{
  "number": 5959,
  "title": "ResolveComReference task does not respect EmbedInteropTypes in .NET Core 3.1 app",
  "body": "<!-- This is a template that helps us provide quicker feedback. Please use any relevant sections and delete anything you don't need. -->\r\n\r\n### Issue Description\r\n\r\nWhen building a .NET Core 3.1 project with a `COMReference` item with `<EmbedInteropTypes>true</EmbedInteropTypes>` metadata, the metadata will be correctly embedded but the PIA will still be copied to the output _and_ will be listed as a dependency in the .deps.json file.\r\n\r\n### Steps to Reproduce\r\n<!--\r\n* Include as much of the following as possible:\r\n\r\n* A minimal sample project that reproduces the issue.\r\n* Your zipped project.\r\n* IDE / CLI steps to create the project and reproduce the behaviour.\r\n* Your command line invocation\r\n-->\r\n\r\n1. On a system with the Office COM libraries installed, create a project with the following content:\r\n``` xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp3.1</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <!-- This is just an example; I believe any COMReference with EmbedInteropTypes=true will reproduce. -->\r\n    <COMReference Include=\"Microsoft.Office.Interop.Excel\">\r\n      <WrapperTool>tlbimp</WrapperTool>\r\n      <VersionMinor>9</VersionMinor>\r\n      <VersionMajor>1</VersionMajor>\r\n      <Guid>00020813-0000-0000-c000-000000000046</Guid>\r\n      <Lcid>0</Lcid>\r\n      <Isolated>false</Isolated>\r\n      <EmbedInteropTypes>true</EmbedInteropTypes>\r\n    </COMReference>\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n2. Replace Program.cs with the following:\r\n``` csharp\r\nusing System;\r\nusing Excel = Microsoft.Office.Interop.Excel;\r\n\r\nnamespace NETCoreApp31\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            // The point here is to use COM types so the compiler will embed them in the output assembly.\r\n            var excelApplication = new Excel.Application();\r\n            var workbooks = excelApplication.Workbooks;\r\n            var sampleWorkbook = workbooks.Add();\r\n            Excel.Worksheet sampleWorksheet = (Excel.Worksheet)sampleWorkbook.Worksheets[1];\r\n            Excel.Range samplecell = sampleWorksheet.Range[\"A1\"];\r\n            samplecell.Value = \"New Value\";\r\n            sampleWorkbook.SaveAs2(Filename: @\"C:\\Users\\tomescht\\Downloads\\Output.xlsx\");\r\n            sampleWorkbook.Close();\r\n            excelApplication.Quit();\r\n        }\r\n    }\r\n}\r\n```\r\n3. Build the project.\r\n\r\n### Expected Behavior\r\n\r\n- The COM types used in Program.cs **are** copied into the output assembly (can be verified with ilspy or ildasm).\r\n- The Interop.Microsoft.Office.Interop.Excel.dll PIA **is not** copied to the output directory.\r\n- The Interop.Microsoft.Office.Interop.Excel.dll PIA **is not** listed as a dependency in the .deps.json.\r\n\r\n### Actual Behavior\r\n\r\n- The COM types used in Program.cs are copied into the output assembly, as expected.\r\n- The Interop.Microsoft.Office.Interop.Excel.dll PIA **is** copied to the output directory.\r\n- The Interop.Microsoft.Office.Interop.Excel.dll PIA **is** listed as a dependency in the .deps.json.\r\n\r\n### Analysis\r\n\r\nIt looks like the issue is this code in SetCopyLocalToFalseOnGacOrNoPIAAssemblies:\r\n\r\nhttps://github.com/dotnet/msbuild/blob/1ff34e830630ff7c4b6cb008e85ece4f263ace52/src/Tasks/ResolveComReference.cs#L1619-L1628\r\n\r\nI suspect that the version check causes us to entirely (and improperly) skip the body of the `if` block when targeting .NET Core 3.1.\r\n\r\nAlso, this scenario works as expected when targeting .NET 5, lending support this theory.\r\n\r\n### Versions & Configurations\r\n\r\n```\r\nMicrosoft (R) Build Engine version 16.9.0-preview-20603-10+d39f2e4f5 for .NET Framework\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n16.9.0.60310\r\n```\r\n\r\n### Attach a binlog\r\n\r\n[msbuild.binlog.zip](https://github.com/dotnet/msbuild/files/5676267/msbuild.binlog.zip)\r\n",
  "state": "CLOSED",
  "createdAt": "2020-12-10T23:49:19Z",
  "updatedAt": "2024-02-21T14:15:59Z",
  "closedAt": "2022-12-06T17:25:43Z",
  "author": {
    "login": "tmeschter"
  },
  "labels": [
    "bug",
    "Partner request",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Backlog"
  },
  "comments": {
    "nodes": [
      {
        "body": "This was discovered while investigating dotnet/project-system#5735. I suspect that since the project system wasn't adding the EmbedInteropTypes metadata to begin with (which is being fixed) we didn't notice that it wasn't being fully respected.",
        "createdAt": "2020-12-10T23:52:12Z",
        "updatedAt": "2020-12-10T23:52:12Z",
        "author": {
          "login": "tmeschter"
        }
      },
      {
        "body": "@AaronRobinsonMSFT do you have thoughts on the best path forward here?",
        "createdAt": "2020-12-15T15:22:11Z",
        "updatedAt": "2020-12-15T15:22:11Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": ">Also, this scenario works as expected when targeting .NET 5, lending support this theory.\r\n>do you have thoughts on the best path forward here?\r\n\r\n@rainersigwald So much boo here. I am inclined to say we should fix this for .NET Core 3.1, but don't understand what that would mean. The code snippet referenced by @tmeschter seems to indicate a simple updated predicated would suffice but I don't know how servicing MSBuild works here.\r\n\r\nLet's go down the path of \"yes, this should be fixed to support someone building with .NET Core 3.1\" - how would we approach that?",
        "createdAt": "2020-12-15T20:59:19Z",
        "updatedAt": "2020-12-15T20:59:19Z",
        "author": {
          "login": "AaronRobinsonMSFT"
        }
      },
      {
        "body": "> Let's go down the path of \"yes, this should be fixed to support someone building with .NET Core 3.1\" - how would we approach that?\r\n\r\nSince we only support COMReference items in desktop/full framework MSBuild, this is a bit easier. We have two options:\r\n\r\n1. Fix it in our current development branch which will flow into VS 16.9.\r\n1. Service MSBuild in the oldest VS that supports targeting .NET 3.1 and is still in support (16.4) + merge the fix forward to other supported branches (16.8, 16.9).\r\n\r\nThe bar for option 2 is pretty high and I don't think this would meet it without high-pri customer reports. So I'd say \"just fix it for 16.9\", which is pretty straightforward.",
        "createdAt": "2020-12-15T21:25:31Z",
        "updatedAt": "2020-12-15T21:25:31Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "/cc @jkoritzinsky @elinor-fung",
        "createdAt": "2020-12-16T07:03:46Z",
        "updatedAt": "2020-12-16T07:03:46Z",
        "author": {
          "login": "AaronRobinsonMSFT"
        }
      },
      {
        "body": "We haven't had any high-priority customer reports, and .NET core 3.1 will be out of support in a few months. Should we just close this as won't-fix?",
        "createdAt": "2022-08-18T20:43:06Z",
        "updatedAt": "2022-08-18T20:43:21Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "Since Tom says this was working in 5.0 and 3.1 is nearly out of support, closing.",
        "createdAt": "2022-12-06T17:25:43Z",
        "updatedAt": "2022-12-06T17:25:43Z",
        "author": {
          "login": "marcpopMSFT"
        }
      }
    ]
  }
}