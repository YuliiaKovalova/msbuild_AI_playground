{
  "number": 11086,
  "title": "Make .NET Framework usage of MSBuild able to set context required to consistently spawn .NET components",
  "body": "We need to be able to derive DOTNET_HOST_PATH from a .NET Framework context in the same manner that the [`dotnet` CLI does before triggering builds](https://github.com/dotnet/sdk/blob/bac9b27723ae9d3dc4f6fb8f47d9d2da1a0a0a0c/src/Cli/Microsoft.DotNet.Cli.Utils/MSBuildForwardingAppWithoutLogging.cs#L203-L206) in order to enable consistent usage of .NET tools from `msbuild.exe` and the Visual Studio IDE experiences.\n\nThis means that the [SDK Resolution result from the MSBuildSdkResolver](https://github.com/dotnet/sdk/blob/70d696e87052d06db1f8190bf4692ed8ba8b4149/src/Resolvers/Microsoft.DotNet.MSBuildSdkResolver/MSBuildSdkResolver.cs#L254) (in the dotnet/sdk repo) needs to be able to communicate a few pieces of state back to the MSBuild Sdk Resolution process:\n\n* [path to the muxer](https://github.com/dotnet/sdk/blob/bac9b27723ae9d3dc4f6fb8f47d9d2da1a0a0a0c/src/Cli/Microsoft.DotNet.Cli.Utils/MSBuildForwardingAppWithoutLogging.cs#L203-L206) (required to unblock Roslyn)\n* [version of the Runtime](https://github.com/dotnet/sdk/blob/5433bc4745265d7c16611f2b389b780e834eacc0/src/Cli/Microsoft.DotNet.Cli.Utils/Muxer.cs#L14-L21) that resolved version of the SDK itself would use when spawning MSBuild worker nodes (probably required for our .NET Core TaskHost plans, to make sure we spawn identical MSBuild worker nodes)\n\nSo we will need to\n\n* expand the MSBuildSdkResolver PropertiesToAdd in the SDK repo to add these two properties - `DOTNET_HOST_PATH` and `MSBUILD_NET_TASKHOST_RUNTIME_VERSION`\n* (for now) no further action in MSBuild Engine\n* (later) when we start the netcore taskhost work, consume both DOTNET_HOST_PATH and MSBUILD_NET_TASKHOST_RUNTIME_VERSION in the netcore taskhost implementation to ensure we launch nodes that behave like `dotnet msbuild`-launched nodes.\n \ncc @jaredpar for validation that DOTNET_HOST_PATH is sufficient as a property (vs something that ToolTask automatically handles, for example) for Roslyn's use cases.\n\ncc @dsplaisted and @marcpopMSFT for heads-up on our plan to light up .NET SDK tooling for use in VS.",
  "state": "CLOSED",
  "createdAt": "2024-12-04T21:19:17Z",
  "updatedAt": "2024-12-17T15:56:48Z",
  "closedAt": "2024-12-13T21:01:26Z",
  "author": {
    "login": "baronfel"
  },
  "milestone": null,
  "assignees": {
    "nodes": [
      {
        "login": "surayya-MS"
      }
    ]
  },
  "labels": [],
  "comments": {
    "nodes": [
      {
        "body": "Makes sense \ud83d\udc4d ",
        "createdAt": "2024-12-04T23:36:35Z",
        "author": {
          "login": "dsplaisted"
        }
      },
      {
        "body": "> or validation that DOTNET_HOST_PATH is sufficient as a property (vs something that ToolTask automatically handles, for example) for Roslyn's use cases.\n\nYes that should be sufficient for Roslyn and any other `ToolTask` that wants to launch a `dotnet` process. It's [the standard][host-path] that was set a few years ago for such scenarios. \n\n[host-path]: https://github.com/dotnet/docs/blob/eb3cfaecadea880f6929c8cd1748b28a7558cc3f/docs/core/tools/dotnet-environment-variables.md#dotnet_host_path",
        "createdAt": "2024-12-05T16:13:13Z",
        "author": {
          "login": "jaredpar"
        }
      }
    ]
  }
}