{
  "number": 3163,
  "title": "Fix to make it possible to use a static property function in a transformation",
  "body": "In trying to find out how to use a static property function in a transformation, I was lead to this stack overflow post:\r\nhttps://stackoverflow.com/questions/5103026/in-msbuild-can-i-use-the-string-replace-function-on-a-metadata-item?lq=1\r\n\r\nIt provides an answer that apparently worked before MSBuild 12.0, but is now broken.  Is it true that this is impossible?  Could this be fixed?\r\n\r\nTo clarify, I would like to populate an item group with something like:\r\n\r\n`<ItemGroup>\r\n  <Transformed>@(Original->'$([Class]::Method(%(Identity)))')</Transformed>\r\n</ItemGroup>\r\n`\r\n\r\nDoing this inside a target is not an option for me, since I need it to populate an ItemGroup used by Visual Studio before any target is or can be run.\r\n\r\nNote also that instance property functions can be used, but I think just not static ones.\r\n\r\nThanks so much!",
  "state": "OPEN",
  "createdAt": "2018-04-04T20:04:10Z",
  "updatedAt": "2024-02-21T16:34:21Z",
  "closedAt": null,
  "author": {
    "login": "cclauson"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "UPDATE: I looked at the source code, the apparent reason that this doesn't work is the following sequence of code in ExpandIntoStringLeaveEscaped() in Expander.cs:\r\n\r\n            string result = MetadataExpander.ExpandMetadataLeaveEscaped(expression, _metadata, options);\r\n            result = PropertyExpander<P>.ExpandPropertiesLeaveEscaped(result, _properties, options, elementLocation, _usedUninitializedProperties);\r\n            result = ItemExpander.ExpandItemVectorsIntoString<I>(this, result, _items, options, elementLocation);\r\n            result = FileUtilities.MaybeAdjustFilePath(result);\r\n\r\nThe first line expands %(...) expressions that are not in a transform expression (@(foo->'bar')), the second line expands expressions with dollar signs $(), including the static property function inside the transform expression, the third actually evaluates the transform expression.  The result is that the static property function is applied not once for each value of the property, but initially to the literal property expression before it's evaluated for each member of the vector.\r\n\r\nI have a *decent* amount of experience writing parsing code, and am tempted to play with this to make it behave closer to what one might expect.  If I made a PR, would the MSBuild devs be open to it?\r\n\r\nThanks!",
        "createdAt": "2018-04-04T22:42:44Z",
        "updatedAt": "2018-04-04T22:42:44Z",
        "author": {
          "login": "cclauson"
        }
      },
      {
        "body": "PR now up:\r\nhttps://github.com/Microsoft/msbuild/pull/3165\r\nIt just swaps two lines to expand the transform expression @(... ->'...') before the properties and static property functions.\r\n\r\nPlease let me know if there are any changes required, thanks so much.",
        "createdAt": "2018-04-05T02:42:09Z",
        "updatedAt": "2018-04-06T22:09:34Z",
        "author": {
          "login": "cclauson"
        }
      }
    ]
  }
}