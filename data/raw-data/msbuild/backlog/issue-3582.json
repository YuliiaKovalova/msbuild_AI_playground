{
  "number": 3582,
  "title": "Consider replacing the evaluator List<T> usage with block lists",
  "body": "IEvaluatorData [implementors](https://github.com/Microsoft/msbuild/blob/68dbc04992370136a832e83f41471f8ccc97c586/src/Build/Definition/Project.cs#L3200-L3212), the [Evaluator](https://github.com/Microsoft/msbuild/blob/68dbc04992370136a832e83f41471f8ccc97c586/src/Build/Evaluation/Evaluator.cs#L107-L138) itself, and potentially other places in MSBuild use reasonably long lived instances of `List<T>` to collect data (up to tens of thousands of elements or more) which never / seldomly gets removed. Growing the `List<T>` in these cases is wasteful, and a `BlockList<T>` which links arrays together instead of throwing them away and regrowing would probably lower memory traffic.",
  "state": "CLOSED",
  "createdAt": "2018-08-06T16:44:37Z",
  "updatedAt": "2024-02-21T17:12:03Z",
  "closedAt": "2021-11-19T12:15:59Z",
  "author": {
    "login": "cdmihai"
  },
  "labels": [
    "backlog",
    "Area: Performance",
    "Priority:2",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "ladipro"
      }
    ]
  },
  "milestone": {
    "title": "VS 17.1"
  },
  "comments": {
    "nodes": [
      {
        "body": "One BlockList implementation is here: https://github.com/jamesqo/BlockList by @jamesqo ",
        "createdAt": "2018-08-06T16:46:01Z",
        "updatedAt": "2018-08-06T16:46:01Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "The backing arrays could also then be pooled. (Or perhaps that's what you mean by 'never throws away blocks')",
        "createdAt": "2018-08-19T00:21:13Z",
        "updatedAt": "2018-08-19T00:21:13Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "Not sure if pooling would help, as projects are usually long lived, and their element types are specialized evaluation types. But if there would be a use case where there's many short lived project objects then yes, pooling the backing arrays would help.",
        "createdAt": "2018-08-20T20:00:25Z",
        "updatedAt": "2018-08-20T20:01:03Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "Labeling with size:1 as the cost of the initial investigation. Will open a follow-up issue if more work is identified.\r\nCan we use Sam's Microsoft.CodeAnalysis.Collections for this?",
        "createdAt": "2021-10-12T12:43:14Z",
        "updatedAt": "2021-10-12T12:43:14Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "We've received other requests for GC-friendly collections in the core libraries. One issue is that they tend to have \"policy\" (eg., size of blocks) which needs to be resolved, ie either parameterized or use a reasonable default or heuristic. If you end up doing this and with a fairly generic block list it would be another interesting datapoint for us.",
        "createdAt": "2021-10-12T17:55:16Z",
        "updatedAt": "2021-10-12T17:55:16Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "I have replaced `List` with an instrumented version to measure the impact of resizing. The numbers are not convincing. When building a simple ASP.NET Core app, Ocelot, and Orchard Core, allocations thrown away when resizing were 0.06%, 0.3%, and 0.3% of all allocations during evaluation, respectively. I have used the instrumented data structure in all places suggested by this issue and also did a quick scan for other potential occurrences.\r\n\r\nEven if the block list had zero overhead, we wouldn't be able to save more than 0.5% of evaluation allocations (plus some small CPU cost of moving items when resizing).\r\n\r\n|                  | Evaluation allocations | List<T> resizing allocations |\r\n|------------------|------------------------|------------------------------|\r\n| ASP.NET Core app | 16,584,344             | 11,168 (0.06%)                       |\r\n| Ocelot           | 110,587,064            | 341,888 (0.3%)                      |\r\n| Orchard Core     | 1,978,160,400          | 6,749,600 (0.3%)                    |",
        "createdAt": "2021-11-19T12:15:59Z",
        "updatedAt": "2021-11-19T12:15:59Z",
        "author": {
          "login": "ladipro"
        }
      }
    ]
  }
}