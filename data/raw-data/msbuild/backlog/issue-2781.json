{
  "number": 2781,
  "title": "Option to run target once per project in multi-targeting build",
  "body": "I'm trying to generate some additional sources for multi-targeting project (with TargetFrameworks).\r\nSources will be the same for both TargetFramework. When I attach my target with BeforeTargets to BeforeBuild, it will be executed twice - and with /m switch it may fail as both will try to generate same file.\r\nI've tried to solve it by moving it to BeforeTargets DispatchToInnerBuilds and target really executed only once at correct time with 1-project solution. When solution contains more than one project and they reference, build could be started from ResolveReference target of other project. In that way it will be run in parallel with my source-generating target, which is not what I want.\r\n\r\nIs there any way to run target only once in multi-targeting project and still be sure, that all compile-related task will be executed only after it?\r\n\r\nI could provide sample application if it help.",
  "state": "OPEN",
  "createdAt": "2017-12-07T06:55:47Z",
  "updatedAt": "2024-02-21T16:35:16Z",
  "closedAt": null,
  "author": {
    "login": "iskiselev"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "A sample application would be very helpful, as would reviewing the issue title and other aspects of your write-up for conformance with the Creating New Issues guidance at https://github.com/Microsoft/msbuild/wiki/Contributing-Code.",
        "createdAt": "2017-12-07T15:33:48Z",
        "updatedAt": "2017-12-07T15:33:48Z",
        "author": {
          "login": "Adam-S-Daniel"
        }
      },
      {
        "body": "Looks like I was able to find a solution - but it looks over-complicated, so let me leave this issue open.\r\nI have a target that generate c# sources from other file, to be a little bit more concrete, let's say we run XSD tool. C# source are not committed in repository, as they should be auto-generated in that case.\r\nSo, it looks something like:\r\n```xml\r\n  <ItemGroup>\r\n    <None Include=\"Sample.xsd\" />\r\n    <Compile Remove=\"Sample.cs\" /> <!--If it was included already, remove it to avoid duplicate -->\r\n    <Compile Include=\"Sample.cs\" />  <!--Include it always, even if files don't exist -->\r\n      <DependentUpon>Sample.xsd</DependentUpon>\r\n    </Compile>\r\n  </ItemGroup>\r\n\r\n  <!--It could be optional BeforeTargets=\"CompileDesignTime;BeforeBuild\", to allow VS generate it on first project openning-->\r\n  <Target Name=\"GenerateXsd\" BeforeTargets=\"BeforeBuild\" Inputs=\"Sample.xsd\" Outputs=\"Sample.cs\">\r\n    <PropertyGroup>\r\n      <GenerateXsd_Command>\"$(SDK40ToolsPath)xsd.exe\" \"Sample.xsd\" /nologo /c  </GenerateXsd_Command>\r\n    </PropertyGroup>\r\n    <Exec Command=\"$(GenerateXsd_Command)\" ConsoleToMSBuild=\"true\" />\r\n  </Target>\r\n```\r\n\r\nIt works great, until we enable multi-targeting with something like: \r\n````xml\r\n<TargetFrameworks>net40;netstandard2.0</TargetFrameworks>\r\n````\r\n\r\nNow BeforeTargets will be executed twice - for net40 build and netstandard2.0 build. It is problem, as now we have race condition when two xsd tries to generate same file and one of it could not access it, because other locks it.\r\n\r\nMy naive attempt to solve it was changing it to  `BeforeTargets=\"DispatchToInnerBuilds\"`. It works great, while we have only one project, but if we try to build solution, which contains project, referencing us, our build could be executed from ResolveReference target of other project, which will start inner-loop build for our project - `DispatchToInnerBuilds` will be executed in parallel in this case, so we run compilation now before we was able to generate source.\r\n\r\nFinal working solution looks next:\r\n\r\n```xml\r\n  <!--It could be optional BeforeTargets=\"CompileDesignTime\", to allow VS generate it on first project openning-->\r\n  <Target Name=\"GenerateXsdInner\" Inputs=\"Sample.xsd\" Outputs=\"Sample.cs\">\r\n    <PropertyGroup>\r\n      <GenerateXsd_Command>\"$(SDK40ToolsPath)xsd.exe\" \"Sample.xsd\" /nologo /c</GenerateXsd_Command>\r\n    </PropertyGroup>\r\n    <Exec Command=\"$(GenerateXsd_Command)\" ConsoleToMSBuild=\"true\" />\r\n  </Target>\r\n  <Target Name=\"GenerateXsd\" BeforeTargets=\"DispatchToInnerBuilds;BeforeBuild\">\r\n    <!--TargetFramework=once is critical here, as it allow will not execute task from same project with same properties twice. \r\n    We need to unify TargetFramework between empty, net40 and netstandard2.0-->\r\n    <MSBuild Projects=\"$(MSBuildProjectFile)\" Targets=\"GenerateXsdInner\" Properties=\"TargetFramework=once\" />\r\n  </Target>\r\n```\r\n\r\nI'm interested, if I missed some way to make it simpler?",
        "createdAt": "2017-12-07T22:47:08Z",
        "updatedAt": "2017-12-10T05:56:59Z",
        "author": {
          "login": "iskiselev"
        }
      },
      {
        "body": "~~When you are in the outer project, ` '$(TargetFramework)' == '' `. In an inner project, it will be set (via the outer build, or if build directly as a dependency in VS, as you noted). Also. there is a variable set to 'true' in an inner build only, I do not remember the name, but I think it is called `InnerBuild`. Can this help you?~~\r\n\r\n~~You can build the intermediate .cs in both inner and outer projects, but make sure to have up-to-date check via target's Inputs and Outputs. If the file was generated through the outer build, there will be no race in the inners as up-to-date check will skip the targets. If it is not up-to-date, then you are invoked on a single framework (e. g. `msbuild /p:TargetFramework=net40`), and it's safe to build. That is what I do.~~\r\n\r\nI was totally wrong. There is no consistent way to hook up into the outer build. `DispatchToInnerBuilds` is currently your best bet, you are correct.\r\n\r\nAnother option, if the code generator is trivially quick and you treat the source as transient, output the file to the `$(IntermediateOutputPath)` (check spelling). This path includes the TFM, like `obj\\Release\\net40\\`, so you avoid any races.\r\n\r\n",
        "createdAt": "2017-12-10T00:07:59Z",
        "updatedAt": "2017-12-20T03:00:32Z",
        "author": {
          "login": "kkm000"
        }
      },
      {
        "body": "How the pakcage nuget tagert?",
        "createdAt": "2019-11-21T01:20:50Z",
        "updatedAt": "2019-11-21T01:20:50Z",
        "author": {
          "login": "lindexi"
        }
      },
      {
        "body": "```\r\nCondition=\"'$(TargetFrameworks)' == '' OR $(TargetFrameworks.EndsWith($(TargetFramework)))\" \r\n```",
        "createdAt": "2020-01-18T22:38:01Z",
        "updatedAt": "2020-01-18T22:38:01Z",
        "author": {
          "login": "SimonCropp"
        }
      },
      {
        "body": "> ```\r\n> Condition=\"'$(TargetFrameworks)' == '' OR $(TargetFrameworks.EndsWith($(TargetFramework)))\" \r\n> ```\r\n\r\nThis will avoid running the target altogether on the other frameworks, which can have side effects like an inner build for a framework racing ahead of the other framework generating the file and failing at a later target because the files don't exist yet.\r\n\r\nWhat is really needed here is a target property that indicates that all inner builds should serialize on that target.",
        "createdAt": "2020-02-05T01:09:42Z",
        "updatedAt": "2020-02-05T01:09:42Z",
        "author": {
          "login": "SacredGeometer"
        }
      },
      {
        "body": "I tried the work around given by [@iskiselev](https://github.com/dotnet/msbuild/issues/2781#issuecomment-350118208), but it doesn't work when the targets are inside a NuGet or any NuGet contributes `.targets` or `.props` . This is since the NuGet targets won't be imported without matching `TargetFramework`.\r\n\r\nThis can be fixed by specifying an existing `TargetFramework`:\r\n``` XML\r\n    <PropertyGroup>\r\n      <FirstTargetFramework Condition=\" '$(TargetFrameworks)' == '' \">$(TargetFramework)</FirstTargetFramework>\r\n      <FirstTargetFramework Condition=\" '$(FirstTargetFrameworks)' == '' \">$(TargetFrameworks.Split(';')[0])</FirstTargetFramework>\r\n    </PropertyGroup>\r\n    <MSBuild Projects=\"$(MSBuildProjectFile)\" Targets=\"GenerateXsdInner\" Properties=\"TargetFramework=$(FirstTargetFramework)\" />\r\n```\r\nI also vote for providing a mechanism which is easier to use.",
        "createdAt": "2021-08-03T14:33:31Z",
        "updatedAt": "2021-08-04T05:25:24Z",
        "author": {
          "login": "chm-tm"
        }
      }
    ]
  }
}