{
  "number": 4778,
  "title": "EmbeddedResource not working inside Target",
  "body": "I have some TypescriptCompile files which I then want to embed in my .dll. I had to migrate to the new csproj format and now I can't embed while inside a Target.\r\n\r\nThis works:\r\n\r\n```\r\n    <Project Sdk=\"Microsoft.NET.Sdk\">\r\n       <PropertyGroup>\r\n           <TargetFramework>net472</TargetFramework>\r\n       </PropertyGroup>\r\n       <ItemGroup>\r\n           <EmbeddedResource  Include=\"testFile.ts\" />\r\n       </ItemGroup>\r\n    </Project>\r\n```\r\n\r\nWhile this does not:\r\n\r\n```\r\n    <Project Sdk=\"Microsoft.NET.Sdk\">\r\n       <PropertyGroup>\r\n           <TargetFramework>net472</TargetFramework>\r\n       </PropertyGroup>\r\n       <Target Name=\"AddGeneratedToBuildOutput\" BeforeTargets=\"CoreCompile\">\r\n           <ItemGroup>\r\n               <PackageFiles Include=\"$(MSBuildProjectDirectory)\\**\\*.*;\"/>\r\n           </ItemGroup>\r\n           <Message Text=\"The target is called: %(PackageFiles.FullPath)\" Importance=\"high\"/>\r\n           <ItemGroup>\r\n               <EmbeddedResource  Include=\"testFile.ts\" />\r\n           </ItemGroup>\r\n        </Target>\r\n    </Project>\r\n\r\n```\r\nNote that the message gets written and the referred file is in the project, hence we can be sure that the target gets called.\r\n\r\nI already tried other targets instead of `**CoreCompile**` but since I'm using TypeScriptCompile, if I use `**BeforeBuild**`, `**Build**` or `**ResolveReferences**` I get compilation errors since the .js files are not generated yet. \r\n\r\nI'm using JetBrains' DotPeek to inspect the resources and msbuild 15.0.",
  "state": "CLOSED",
  "createdAt": "2019-10-03T12:33:46Z",
  "updatedAt": "2024-02-21T17:06:49Z",
  "closedAt": "2019-10-11T14:51:49Z",
  "author": {
    "login": "Jmales"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Discussion"
  },
  "comments": {
    "nodes": [
      {
        "body": "The supported extension point for adding just-built resources to `@(EmbeddedResource)` so that they get compiled is `BeforeTargets=\"BeforeResGen\"`. I don't know where TypeScript hooks their compiler; it might be later than that in the default build process. You'd have to ask them if they'd support being forced to run earlier.",
        "createdAt": "2019-10-03T13:24:31Z",
        "updatedAt": "2019-10-03T13:24:31Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald `BeforeResGen` doesn't seem to solve my problem. I'll go in that direction, finding out which is the Typescript hook.",
        "createdAt": "2019-10-03T14:01:48Z",
        "updatedAt": "2019-10-03T14:01:57Z",
        "author": {
          "login": "Jmales"
        }
      },
      {
        "body": "But wait, I was thinking again about this and in fact it has nothing to do with **TypeScript**.\r\n\r\nI can't add any resource within a target with  \"BeforeResGen\".",
        "createdAt": "2019-10-03T14:28:50Z",
        "updatedAt": "2019-10-03T14:31:58Z",
        "author": {
          "login": "Jmales"
        }
      },
      {
        "body": "It looks like dynamically emitting an `EmbeddedResource` at build time requires some additional metadata:\r\n\r\nhttps://github.com/microsoft/msbuild/blob/3af6804637c057bf46bddccf23f1ede027885088/src/Tasks/Microsoft.Common.CurrentVersion.targets#L3280-L3281\r\n\r\nI was able to get your target to work like this:\r\n\r\n```xml\r\n<EmbeddedResource Include=\"dynamic.ts\" Type=\"Non-Resx\" WithCulture=\"false\" />\r\n```",
        "createdAt": "2019-10-03T16:20:43Z",
        "updatedAt": "2019-10-03T16:20:43Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Yes, this solves the problem. Thanks a lot mate!",
        "createdAt": "2019-10-04T08:30:29Z",
        "updatedAt": "2019-10-04T08:30:29Z",
        "author": {
          "login": "Jmales"
        }
      },
      {
        "body": "@rainersigwald I noticed that the resources are in fact added but without the full name as before. For example, this:\r\n\r\n**ProjectName.View.A.file.js**\r\n\r\nafter the suggested modifications is now embedded simply with name:\r\n\r\n**file.js**\r\n\r\nI'm having a problem with this project's dll at runtime and I guess that it is related to this. Do you know if this is because of the \"WithCulture=false\" and how to solve the issue?\r\n\r\nThanks",
        "createdAt": "2019-10-28T15:23:16Z",
        "updatedAt": "2019-10-28T15:29:24Z",
        "author": {
          "login": "Jmales"
        }
      },
      {
        "body": "To answer my own question, the way that I found to solve this was to use <LogicalName> like this:\r\n\r\n\r\n```\r\n<EmbeddedResource Include=\"@(TypeScriptCompile -> '%(RelativeDir)%(Filename).js')\" Type=\"Non-Resx\" WithCulture=\"false\">\r\n         <LogicalName>MyProject.$([MSBuild]::ValueOrDefault('%(TypeScriptCompile.RelativeDir)', '').Replace('\\', '.'))%(TypeScriptCompile.Filename).js</LogicalName> \r\n</EmbeddedResource>\r\n````\r\n\r\nThis in fact solves my issue at runtime.",
        "createdAt": "2019-10-28T17:40:46Z",
        "updatedAt": "2019-10-28T17:41:32Z",
        "author": {
          "login": "Jmales"
        }
      },
      {
        "body": "This solution by @Jmales is not working for me.\r\n\r\nI want to add a resx file which is generated dynamically to my .Net standard project. The below script does not work if I use the Embedded resource tag inside a target\r\n\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n    <ItemGroup>\r\n        <ResxFileToInclude Include=\"D:\\WS\\Latest\\Build\\x64\\Release\\AFS.resx\"/>\r\n    </ItemGroup>\r\n    <Target Name=\"ResxInclude\" AfterTargets=\"Compile\">\r\n        <ItemGroup>\r\n            <EmbeddedResource Include=\"@(ResxFileToInclude -> '%(RelativeDir)%(Filename).resx')\" Type=\"Resx\" WithCulture=\"true\">\r\n            <LogicalName>\"$([MSBuild]::ValueOrDefault('%(ResxFileToInclude.RelativeDir)', '').Replace('\\', '.')).%(ResxFileToInclude.Filename).resx\"</LogicalName>\r\n        </EmbeddedResource>\r\n        </ItemGroup>\r\n    </Target>\r\n</Project>\r\n```\r\n\r\nCan anyone help me in this?",
        "createdAt": "2021-05-26T05:37:18Z",
        "updatedAt": "2021-05-26T05:37:18Z",
        "author": {
          "login": "SmiRam"
        }
      },
      {
        "body": "@SmiRam your target is happening pretty late in the build process (`AfterTargets=\"Compile\"`). Can you change that to `BeforeTargets=\"BeforeResGen\"`?",
        "createdAt": "2021-05-26T22:01:00Z",
        "updatedAt": "2021-05-26T22:01:00Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald : Thanks for supporting my issue.\r\n It was my misassumption that the resource file is not getting included in the project. The disassembly of the binary shows that actually the resx file is part of assembly. But when the project is loaded for the first time in Visual Studio, the included resx file will be shown with a cross mark beside the file in VS IDE. \r\n\r\n![Screenshot 2021-06-02 230034](https://user-images.githubusercontent.com/44302530/120526139-83784300-c3f6-11eb-94f9-e6f6a4dfd890.jpg)\r\n\r\nRebuild of the project will not get rid of the cross mark, but a project reload will do.\r\nFor a background information, the resx file is generated before the execution of the target \"CoreCompile\"\r\nHow to remove this cross mark for the first time loading of project in Visual Studio?\r\nVS version:16.10.0",
        "createdAt": "2021-06-02T17:33:06Z",
        "updatedAt": "2021-06-02T17:33:06Z",
        "author": {
          "login": "SmiRam"
        }
      }
    ]
  }
}