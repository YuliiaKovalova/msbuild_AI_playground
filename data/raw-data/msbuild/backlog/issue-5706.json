{
  "number": 5706,
  "title": "MSBuild fails to load project after setup of VS 16.8 Preview",
  "body": "### Issue Description\r\nSince VS 16.8 Preview setup (including .NET Core SDK 5.0 preview), my tools and unit tests depending on MSBuild fail to load projects.\r\n\r\n### Steps to Reproduce\r\nRepro repo: https://github.com/dedale/msbuild_issue\r\n\r\nCode failing:\r\n```\r\nusing (var coll = new ProjectCollection())\r\n{\r\n    var p = coll.LoadProject(path); // <- exception\r\n    return p.Properties;\r\n}\r\n```\r\n\r\nProject content:\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\" DefaultTargets=\"Build\">\r\n  <PropertyGroup>\r\n    <AssemblyName>$(MSBuildProjectName)</AssemblyName>\r\n    <RootNamespace>$(AssemblyName)</RootNamespace>\r\n    <TargetFramework>net471</TargetFramework>\r\n  </PropertyGroup>\r\n</Project>\r\n```\r\n\r\n### Expected Behavior\r\nNo exception when loading project.\r\n\r\n### Actual Behavior\r\nException when loading a project in .NET Core SDK format:\r\n\r\n>     Microsoft.Build.Exceptions.InvalidProjectFileException : Invalid static method invocation syntax:\r\n> \"[MSBuild]::GetTargetFrameworkIdentifier('$(TargetFramework)')\". Method '[MSBuild]::GetTargetFrameworkIdentifier' not found.\r\n> Static method invocation should be of the form: $([FullTypeName]::Method()), e.g. $([System.IO.Path]::Combine(`a`, `b`)).\r\n> Check that all parameters are defined, are of the correct type, and are specified in the right order.\r\n> C:\\Program Files\\dotnet\\sdk\\5.0.100-preview.8.20417.9\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.TargetFrameworkInference.targets\r\n\r\n\r\n### Analysis\r\nDid not fail when I was using latest 16.7 Preview end of July.\r\nNow it fails in VS 16.8 Preview & VS 16.7.2\r\n\r\n### Versions & Configurations\r\nApps & unit tests target .NET Core 3.1\r\n\r\nNuGet packages:\r\n* Microsoft.Build [16.5.0]\r\n* Microsoft.Build.Framework [16.5.0]\r\n* Microsoft.Build.Task.Core [16.5.0]\r\n* Microsoft.Build.Utilities.Core [16.5.0]\r\n* Microsoft.Build.Locator [1.2.6]\r\n\r\ndotnet --info\r\n\r\n> .NET SDK (reflecting any global.json):\r\n>  Version:   5.0.100-preview.8.20417.9\r\n>  Commit:    fc62663a35\r\n> \r\n> Runtime Environment:\r\n>  OS Name:     Windows\r\n>  OS Version:  10.0.18363\r\n>  OS Platform: Windows\r\n>  RID:         win10-x64\r\n>  Base Path:   C:\\Program Files\\dotnet\\sdk\\5.0.100-preview.8.20417.9\\\r\n> \r\n> Host (useful for support):\r\n>   Version: 5.0.0-preview.8.20407.11\r\n>   Commit:  bf456654f9\r\n> \r\n> .NET SDKs installed:\r\n>   2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n>   2.1.505 [C:\\Program Files\\dotnet\\sdk]\r\n>   2.2.103 [C:\\Program Files\\dotnet\\sdk]\r\n>   3.0.100 [C:\\Program Files\\dotnet\\sdk]\r\n>   3.1.100 [C:\\Program Files\\dotnet\\sdk]\r\n>   3.1.401 [C:\\Program Files\\dotnet\\sdk]\r\n>   5.0.100-preview.8.20417.9 [C:\\Program Files\\dotnet\\sdk]\r\n> \r\n> .NET runtimes installed:\r\n>   Microsoft.AspNetCore.All 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n>   Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n>   Microsoft.AspNetCore.All 2.1.21 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n>   Microsoft.AspNetCore.All 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n>   Microsoft.AspNetCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n>   Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n>   Microsoft.AspNetCore.App 2.1.21 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n>   Microsoft.AspNetCore.App 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n>   Microsoft.AspNetCore.App 3.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n>   Microsoft.AspNetCore.App 3.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n>   Microsoft.AspNetCore.App 3.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n>   Microsoft.AspNetCore.App 5.0.0-preview.8.20414.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n>   Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n>   Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n>   Microsoft.NETCore.App 2.1.21 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n>   Microsoft.NETCore.App 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n>   Microsoft.NETCore.App 3.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n>   Microsoft.NETCore.App 3.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n>   Microsoft.NETCore.App 3.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n>   Microsoft.NETCore.App 5.0.0-preview.8.20407.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n>   Microsoft.WindowsDesktop.App 3.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n>   Microsoft.WindowsDesktop.App 3.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n>   Microsoft.WindowsDesktop.App 3.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n>   Microsoft.WindowsDesktop.App 5.0.0-preview.8.20411.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n> \r\n\r\n### Attach a binlog\r\nN/A",
  "state": "CLOSED",
  "createdAt": "2020-09-03T12:08:49Z",
  "updatedAt": "2024-02-21T14:17:22Z",
  "closedAt": "2020-11-27T12:24:16Z",
  "author": {
    "login": "dedale"
  },
  "labels": [
    "bug",
    "under-investigation",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "ladipro"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Found out I can fix the issue with this `global.json`:\r\n```\r\n{\r\n  \"sdk\": {\r\n    \"version\": \"3.1.100\",\r\n    \"rollForward\": \"latestFeature\",\r\n    \"allowPrerelease\": false\r\n  }\r\n}\r\n```",
        "createdAt": "2020-09-05T15:24:44Z",
        "updatedAt": "2020-09-05T15:24:44Z",
        "author": {
          "login": "dedale"
        }
      },
      {
        "body": "Team Triage: The workaround works because `GetTargetFrameworkIdentifier` was introduced in net core 5, so by using SDK 3.1.100 you get older targets that don't reference `GetTargetFrameworkIdentifier`. \r\n\r\nIt sounds like you're loading a newer SDK with an older MSBuild engine. A quick look at your repro project looks fine though.",
        "createdAt": "2020-09-30T16:10:26Z",
        "updatedAt": "2020-09-30T16:10:26Z",
        "author": {
          "login": "benvillalobos"
        }
      },
      {
        "body": "I have failed to reproduce this on my machine with a similar set of SDKs installed.\r\n\r\n@dedale can you please paste the contents of your `global.json` that reproduces the issue, or confirm that there is no `global.json`? Thinking of the best way to debug this, I'm wondering if you'd be willing to record a trace of relevant disk I/O on your system with [Process Monitor](https://docs.microsoft.com/en-us/sysinternals/downloads/procmon) and share it with us. Filtering to paths containing \"dotnet\\sdk\" is enough and it should give us a hint as to where the mismatch happens.\r\n\r\n![image](https://user-images.githubusercontent.com/12206368/94895270-610ae000-048b-11eb-87db-4ce95004b65a.png)\r\n",
        "createdAt": "2020-10-02T06:44:12Z",
        "updatedAt": "2020-10-02T06:44:12Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "@ladipro Sorry for my late answer.\r\n\r\nTo reproduce the problem, I use initial commit of my repro repo without any global.json.\r\nI currently have VS 16.8.0 Preview 4.0.\r\nTest still fails but error message has changed:\r\n\r\n> Microsoft.Build.Exceptions.InvalidProjectFileException : The SDK resolver type \"WorkloadSdkResolver\" failed to load. Could not load file or assembly 'System.Runtime, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'. The system cannot find the file specified.  C:\\Users\\ded\\AppData\\Local\\Temp\\TestLoad\\Project.csproj\r\n>      ----> System.IO.FileNotFoundException : Could not load file or assembly 'System.Runtime, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'. The system cannot find the file specified.\r\n\r\nWith VS 16.7.6: same error\r\n\r\nHere is a procmon recording filtered on dotnet\\sdk when I run the unit test with VS 16.7.6:\r\n[sdk.zip](https://github.com/dotnet/msbuild/files/5393884/sdk.zip)\r\n\r\nStill with VS 16.7.6, if I update all NuGet packages (Microsoft.Build.* 16.7.0, Locator 1.2.6., etc.), unit test still fail with the same error.\r\n\r\nHTH",
        "createdAt": "2020-10-16T19:29:38Z",
        "updatedAt": "2020-10-16T19:29:38Z",
        "author": {
          "login": "dedale"
        }
      },
      {
        "body": "Same for me with final VS 16.8 and .NET 5.0.100.\r\n\r\nThe source code that is using Roslyn to open a .CSPROJ file is a .Net Core 3.1 console app. This fails to load the project.\r\n\r\nUpdating all NuGet packaged doesn't change it.",
        "createdAt": "2020-11-13T14:15:32Z",
        "updatedAt": "2020-11-13T15:30:10Z",
        "author": {
          "login": "ikarstein"
        }
      },
      {
        "body": "I have both .Net SDK 3.1.404 and 5.0.100 installed and I am using the following code to read a .csproj file:\r\n\r\n```\r\nProjectOptions options = new ProjectOptions();\r\nusing (Stream s = ...)\r\nusing (XmlReader xr = XmlReader.Create(s))\r\n{\r\n    return Project.FromXmlReader(xr, options);\r\n}\r\n```\r\n\r\nBefore I installed 5.0.100, this code ran fine. With both 3.1.404 and 5.0.100 installed, I also get the same WorkloadSdkResolver failed to load error as above when executing \"Project.FromXmlReader(...)\".\r\n\r\nIf I set the environment variable MSBUILD_EXE_PATH to \"C:\\Program Files\\dotnet\\sdk\\3.1.404\\MSBuild.dll\" before executing this code then \"Project.FromXmlReader(...)\" successfully reads the .csproj file.",
        "createdAt": "2020-11-15T19:09:32Z",
        "updatedAt": "2020-11-15T19:09:32Z",
        "author": {
          "login": "El-Gor-do"
        }
      },
      {
        "body": "Thank you for the update. Unfortunately your solution does not work for me.",
        "createdAt": "2020-11-15T20:36:21Z",
        "updatedAt": "2020-11-15T20:36:21Z",
        "author": {
          "login": "ikarstein"
        }
      },
      {
        "body": "Ok. I think they did not thought out that someone is still using netstandard 2.0 projects?? When upgrading to latest VS 16.8.1 the .NET Core SDK 3.0.403 got deleted. So I had to reinstall it!? Then in my build project I have to explicitly set the MSBuild path. As `new ProjectCollection()` leads to the exception @dedale is facing I fixed it with:\r\n\r\n```csharp\r\n                var startInfo = new ProcessStartInfo(\"dotnet\", \"--list-sdks\") {\r\n                    RedirectStandardOutput = true\r\n                };\r\n\r\n                var process = Process.Start(startInfo);\r\n                process.WaitForExit(1000);\r\n\r\n                var output = process.StandardOutput.ReadToEnd();\r\n                   var sdkPaths = Regex.Matches(output, \"([0-9]+.[0-9]+.[0-9]+(-[a-z]+.[0-9]+.[0-9]+.[0-9]+)?) \\\\[(.*)\\\\]\")\r\n                    .OfType<Match>()\r\n                    .Where(m => m.Groups[1].Value.StartsWith(\"3.\")) // The runtime you actually use for Teronis.Build.\r\n                    .Select(m => Path.Combine(m.Groups[3].Value, m.Groups[1].Value, \"MSBuild.dll\"));\r\n\r\n                var sdkPath = sdkPaths.Last();\r\n                Environment.SetEnvironmentVariable(\"MSBUILD_EXE_PATH\", sdkPath);\r\n```\r\n\r\nNow there is the `dotnet` tool which is using the net5.0 SDK by default. When building with my build project, one of my projects is rising an interesting error: \r\n> C:\\Program Files\\dotnet\\sdk\\5.0.100\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.TargetFrameworkInference.targets(62,5): error MSB4184: Der Ausdruck \"[MSBuild]::GetTargetPlatformIdentifier(netstandard2.0)\" kann nicht ausgewertet werden. Object reference not set to an instance of an object.\r\n\r\nThis I had to fix by specifying a `global.json` in my root project folder containing:\r\n\r\n```\r\n{\r\n  \"sdk\": {\r\n    \"version\": \"3.1.404\",\r\n    \"rollForward\": \"latestFeature\",\r\n    \"allowPrerelease\": false\r\n  }\r\n}\r\n```\r\n\r\nwhere version is the version of the .NET Core SDK that you just installed manually. When you feel confident you then may set the version to ` \"version\": \"3.1\"` (see https://docs.microsoft.com/en-US/dotnet/core/tools/global-json?tabs=netcore3x).\r\n\r\nBut all of these solutions seems like a huge huge hack. Everyone can give me advice to do it better?",
        "createdAt": "2020-11-16T10:03:50Z",
        "updatedAt": "2020-11-16T10:21:18Z",
        "author": {
          "login": "teneko"
        }
      },
      {
        "body": "I'm having the same `The SDK resolver type \"WorkloadSdkResolver\" failed to load.` issue on our build agents that were built using the dotnet sdk 3.5 docker image updated on November 10th to include the new MSBuild exes.",
        "createdAt": "2020-11-16T18:29:53Z",
        "updatedAt": "2020-11-16T18:29:53Z",
        "author": {
          "login": "Stiverton"
        }
      },
      {
        "body": "Currently my whole Dev and Build setup for a complex product that I develop is damaged. I have two custom tools based on .net core 3.1 that did automatic code generation based on Roslyn and worked before VS 16.8 / .NET 5 . The scanned source code is based on .NET 4.8 in the new .CSPROJ format. - Since the weekend I try to find a solution for this mess.",
        "createdAt": "2020-11-17T09:33:39Z",
        "updatedAt": "2020-11-17T09:33:39Z",
        "author": {
          "login": "ikarstein"
        }
      },
      {
        "body": "@dedale thank you for the trace. I'm coming back to this after a longer break, apologies for the delay. I can reproduce it now, not sure why I couldn't before.\r\n\r\nThe root cause lies in the logic used by MSBuildLocator to find the SDK to bind to. It simply runs `dotnet --info` and goes with the version printed by the command. Since `dotnet` runs against the latest SDK by default, it prints out something like this with both 3.1 and 5.0 installed:\r\n\r\n```\r\n.NET SDK (reflecting any global.json):\r\n Version:   5.0.100\r\n Commit:    5044b93829\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.19042\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\5.0.100\\\r\n\r\n...\r\n```\r\n\r\nMSBuildLocator then tries to load MSBuild assemblies from sdk\\5.0.100 and fails because the process runs against 3.1 runtime. The fix is going to be in MSBuildLocator so I'll close this issue and will continue working on it there (https://github.com/microsoft/MSBuildLocator/issues/96).",
        "createdAt": "2020-11-27T12:24:16Z",
        "updatedAt": "2020-11-27T12:24:16Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "Also linking https://github.com/microsoft/MSBuildLocator/issues/92 which looks like a duplicate of the same problem.",
        "createdAt": "2020-11-27T13:50:01Z",
        "updatedAt": "2020-11-27T13:50:01Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "> Found out I can fix the issue with this `global.json`:\r\n> \r\n> ```\r\n> {\r\n>   \"sdk\": {\r\n>     \"version\": \"3.1.100\",\r\n>     \"rollForward\": \"latestFeature\",\r\n>     \"allowPrerelease\": false\r\n>   }\r\n> }\r\n> ```\r\n\r\nHad to use this after upgrading to Visual Studio Version 16.8.5",
        "createdAt": "2021-02-18T19:16:38Z",
        "updatedAt": "2021-02-18T19:16:38Z",
        "author": {
          "login": "busbina"
        }
      }
    ]
  }
}