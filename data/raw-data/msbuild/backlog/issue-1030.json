{
  "number": 1030,
  "title": "HasMetadata item function cannot distinguish between \"not present\" and \"set to empty\"",
  "body": "I had the need to filter components based on the presence of metadata, regardless of its value.\n\nThe HasMetadata item function, however, checks for the metadata _value_, rather than just the presence of the metadata name, so items with the metadata, but an empty value, are improperly filtered out. \n\nThe following snippet showcases the issue:\n\n``` XML\n        <?xml version=\"1.0\" encoding=\"utf-8\"?>\n        <Project DefaultTargets=\"Build\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n            <Target Name=\"Build\">\n                <ItemGroup>\n                    <Source Include=\"Foo\">\n                        <SubPath></SubPath>\n                    </Source>\n                    <Source Include=\"Bar\">\n                        <SubPath>Bar</SubPath>\n                    </Source>\n                    <Source Include=\"Baz\" />\n                </ItemGroup>\n\n                <ItemGroup>\n                    <WithSubPath Include=\"@(Source -> HasMetadata('SubPath'))\" />\n                </ItemGroup>\n\n                <Message Text=\"@(WithSubPath)\" Importance=\"high\" />\n            </Target>\n        </Project>\n```\n\nThis renders \"Bar\", but not \"Foo\", which does contain the metadata item. \n\nI know this would be a breaking change, so maybe a new item function named `HasMetadataName` could be provided for this behavior?\n",
  "state": "OPEN",
  "createdAt": "2016-09-15T13:34:56Z",
  "updatedAt": "2024-02-21T16:38:14Z",
  "closedAt": null,
  "author": {
    "login": "kzu"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Backlog"
  },
  "comments": {
    "nodes": [
      {
        "body": "`HasMetadata` does behave as you desire . . . mostly. The problem is that you're defining empty metadata.\n\nObserving the `/verbosity:Diagnostic` output of building your sample:\n\n```\nTarget \"Build: (TargetId:2)\" in project \"D:\\play\\hasmetadata-kzu.proj\" (entry point):\nAdded Item(s):\n    Source=\n        Foo\n                SubPath=\nAdded Item(s):\n    Source=\n        Bar\n                SubPath=Bar\nAdded Item(s): Source=Baz\nAdded Item(s):\n    WithSubPath=\n        Bar\n                SubPath=Bar\nUsing \"Message\" task from assembly \"Microsoft.Build.Tasks.Core, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5\nf7f11d50a3a\".\nTask \"Message\" (TaskId:2)\n  Task Parameter:Text=Bar (TaskId:2)\n  Task Parameter:Importance=high (TaskId:2)\n  Bar (TaskId:2)\nDone executing task \"Message\". (TaskId:2)\nDone building target \"Build\" in project \"hasmetadata-kzu.proj\".: (TargetId:2)\n```\n\nWe can see that the `Foo` item _has_ the metadata, and it's set to empty. When it's queried for, though, the item draws no distinction between \"metadata not present\" and \"present but set to null or the empty string\": `GetMetadataEscaped` [returns the same thing in both cases](https://github.com/Microsoft/msbuild/blob/master/src/XMakeBuildEngine/Instance/ProjectItemInstance.cs#L1256), and the Expander for `HasMetadata` [then drops the item from its return](https://github.com/Microsoft/msbuild/blob/master/src/XMakeBuildEngine/Evaluation/Expander.cs#L2347-L2353).\n\nThis raises an interesting design question: what **should** the behavior be?\n\nI claim that the current behavior is analogous to properties, and therefore correct. There's no way to remove a property or undefine metadata (there's `Clear()` but that undefines _all_ metadata), but you can achieve the same effect by setting either to empty (or by the `<Propertyname />` idiom which is the same thing).\n\nI don't like that MSBuild can't distinguish between \"nonexistent\" and `null`, but fixing that is a much larger project.\n\nThoughts?\n",
        "createdAt": "2016-09-15T16:03:06Z",
        "updatedAt": "2016-09-15T16:03:06Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Without this capability, I'm unable to distinguish VSIXSourceItems from the\nvssdk for example ;). They add the VSIXSubPath metadata, but\nunsurprisingly, it can be empty if the file is supposed to go on the root\nof the VSIX extension...\n\nI resorted to a custom inline task that checks for the presence of the\nmetadata name instead, and I think it's a generally useful addition as an\nitem function.\n\nAgreed on the existing semantics. It makes sense 99% of the time. For what\nit's worth, it's the first time I need something different.\n\n## \n\n/kzu from mobile\n",
        "createdAt": "2016-09-15T17:32:43Z",
        "updatedAt": "2016-09-15T18:55:06Z",
        "author": {
          "login": "kzu"
        }
      },
      {
        "body": "In this case, considering MSBuild's behaviour, maybe that potentially empty `VSIXSubPath` is a bad metadata choice to filter items on. A bool looking one like `<IsVSixSource>true</IsVSixSource>` might be better here (or anything else that's guaranteed to not be empty :)). Is this something you can control?\n",
        "createdAt": "2016-09-15T19:04:07Z",
        "updatedAt": "2016-09-15T19:04:30Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "I don't control it , nope. It's the vssdk ;)\n\nOn Thu, Sep 15, 2016, 4:04 PM Mihai Codoban notifications@github.com\nwrote:\n\n> In this case, considering MSBuild's behaviour, maybe that VSIXSubPath is\n> a bad metadata choice to filter items on. A bool looking one like\n> <IsVSixSource>true</IsVSixSource> might be better here (or anything else\n> that's guaranteed to not be empty :)). Is this something you can control?\n> \n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> https://github.com/Microsoft/msbuild/issues/1030#issuecomment-247421136,\n> or mute the thread\n> https://github.com/notifications/unsubscribe-auth/AAKW63Y4TwnsgnMKSbPw6Q2UGoiHBvtMks5qqZazgaJpZM4J9342\n> .\n> \n> ## \n> \n> /kzu from mobile\n",
        "createdAt": "2016-09-15T22:13:42Z",
        "updatedAt": "2016-09-15T22:13:42Z",
        "author": {
          "login": "kzu"
        }
      }
    ]
  }
}