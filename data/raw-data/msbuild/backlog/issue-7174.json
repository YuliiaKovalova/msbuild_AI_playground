{
  "number": 7174,
  "title": "Change CodeAnalysis rules from 'Info' to 'Warning' after fixing all instances of the violations",
  "body": "As a follow up to #5656 each code analysis rule that is marked as `Action=\"Info\"` should be evaluated and migrated to `Action=\"Warning\"` once all instances of the violations are fixed or marked with ignore.\r\n\r\nTo make the process as painless as possible. Each rule should be implemented in its own PR.\r\n\r\n**Before the merges:**\r\n- #7192\r\n\r\n**List of rules to enable after resolving occurrences:** \r\n- [CA1050](https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/CA1050) - #7195 #7227\r\n- [CA1070](https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/CA1070) - #7231\r\n- [CA1200](https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/CA1200) - #7194\r\n- [CA1507](https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/CA1507) - #7176\r\n- [CA1802](https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/CA1802) - #7177\r\n- [CA1805](https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/CA1805) - #7251\r\n- [CA1810](https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/CA1810) - #7179\r\n- [CA1823](https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/CA1823) - #7180\r\n- [CA1825](https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/CA1825) - #7181\r\n- [CA1827](https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/CA1827) - #7207\r\n- [CA1829](https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/CA1829) - #7182\r\n- [CA1834](https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/CA1834) - #7183\r\n- [CA1835](https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/CA1835) - #7184\r\n- [CA1836](https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/CA1836) - #7185\r\n- [CA1837](https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/CA1837) - Cannot use `Environment.ProcessId` because it isn't available in older versions of .NET. When the team decides to no longer support versions below .NET 5 then this can be enabled.\r\n- [CA1838](https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/CA1838) - #7186\r\n- [CA2007](https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/CA2007)\r\n- [CA2008](https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/CA2008)\r\n- [CA2016](https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/CA2016) - #7188\r\n- [CA2208](https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/CA2208) - #7187\r\n- [CA2241](https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/CA2241) - #7190\r\n- [CA2249](https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/CA2249) - not totally possible due to required string.contains method signatures not being available in older .NET versions.\r\n- [CA3075](https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/CA3075)\r\n- [CA3076](https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/CA3076)\r\n- [CA3077](https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/CA3077)\r\n- [CA5350](https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/CA5350) - #7233\r\n- [CA5384](https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/CA5384) - #7234\r\n- [SA0001](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA0001.md)\r\n- [SA1002](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1002.md) - #7199\r\n- [SA1004](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1004.md) - #7204\r\n- [SA1005](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1005.md) - #7259\r\n- [SA1006](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1006.md) - #7232\r\n- [SA1008](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1008.md)\r\n- [SA1009](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1009.md)\r\n- [SA1010](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1010.md) - #7205\r\n- [SA1011](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1011.md)\r\n- [SA1012](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1012.md)\r\n- [SA1013](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1013.md)\r\n- [SA1014](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1014.md)- #7235\r\n- [SA1015](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1015.md)- #7236\r\n- [SA1020](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1020.md)- #7237\r\n- [SA1021](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1021.md)\r\n- [SA1023](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1023.md) - #7238\r\n- [SA1024](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1024.md) - #7266\r\n- [SA1025](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1025.md)\r\n- [SA1100](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1100.md)\r\n- [SA1102](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1102.md) - #7261\r\n- [SA1106](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1106.md)\r\n- [SA1107](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1107.md)\r\n- [SA1110](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1110.md) - https://github.com/dotnet/msbuild/pull/8336\r\n- [SA1111](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1111.md) - https://github.com/dotnet/msbuild/pull/8336\r\n- [SA1114](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1114.md)\r\n- [SA1116](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1116.md)\r\n- [SA1117](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1117.md)\r\n- [SA1120](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1120.md)\r\n- [SA1122](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1122.md) - #7239\r\n- [SA1123](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1123.md)\r\n- [SA1125](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1125.md) - #7201\r\n- [SA1127](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1127.md) - #7267\r\n- [SA1128](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1128.md)\r\n- [SA1130](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1130.md)\r\n- [SA1131](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1131.md)\r\n- [SA1132](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1132.md) - #7240\r\n- [SA1133](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1133.md) - #7262\r\n- [SA1134](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1134.md) - #7263\r\n- [SA1135](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1135.md) - #7264\r\n- [SA1136](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1136.md) - #7203\r\n- [SA1137](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1137.md)\r\n- [SA1201](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1201.md)\r\n- [SA1202](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1202.md)\r\n- [SA1203](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1203.md)\r\n- [SA1204](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1204.md)\r\n- [SA1208](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1208.md)\r\n- [SA1209](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1209.md)\r\n- [SA1210](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1210.md)\r\n- [SA1211](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1211.md)\r\n- [SA1214](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1214.md)\r\n- [SA1216](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1216.md) - #7265\r\n- [SA1217](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1217.md)\r\n- [SA1300](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1300.md)\r\n- [SA1302](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1302.md) - #7268\r\n- [SA1303](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1303.md)\r\n- [SA1304](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1304.md)\r\n- [SA1306](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1306.md)\r\n- [SA1308](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1308.md)\r\n- [SA1311](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1311.md)\r\n- [SA1312](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1312.md)\r\n- [SA1313](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1313.md)\r\n- [SA1316](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1316.md)\r\n- [SA1401](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1401.md)\r\n- [SA1402](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1402.md)\r\n- [SA1403](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1403.md)\r\n- [SA1404](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1404.md)\r\n- [SA1405](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1405.md)\r\n- [SA1407](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1407.md)\r\n- [SA1408](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1408.md) - #7269\r\n- [SA1413](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1413.md)\r\n- [SA1414](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1414.md)\r\n- [SA1500](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1500.md)\r\n- [SA1501](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1501.md)\r\n- [SA1502](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1502.md)\r\n- [SA1503](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1503.md)\r\n- [SA1504](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1504.md) - #7270\r\n- [SA1505](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1505.md) - #7272\r\n- [SA1506](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1506.md) - #7271\r\n- [SA1507](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1507.md)\r\n- [SA1508](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1508.md) - #7273\r\n- [SA1509](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1509.md) - #7274\r\n- [SA1510](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1510.md) - #7275\r\n- [SA1512](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1512.md)\r\n- [SA1513](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1513.md)\r\n- [SA1514](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1514.md)\r\n- [SA1515](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1515.md)\r\n- [SA1516](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1516.md)\r\n- [SA1518](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1518.md) - #7571\r\n- [SA1519](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1519.md) - #7276\r\n- [SA1520](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1520.md) - #7198\r\n- [SA1601](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1601.md)\r\n- [SA1602](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1602.md)\r\n- [SA1604](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1604.md)\r\n- [SA1605](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1605.md)\r\n- [SA1606](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1606.md)\r\n- [SA1608](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1608.md)\r\n- [SA1610](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1610.md)\r\n- [SA1611](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1611.md)\r\n- [SA1612](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1612.md)\r\n- [SA1614](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1614.md)\r\n- [SA1616](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1616.md)\r\n- [SA1618](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1618.md)\r\n- [SA1619](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1619.md)\r\n- [SA1622](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1622.md)\r\n- [SA1623](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1623.md)\r\n- [SA1624](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1624.md)\r\n- [SA1626](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1626.md)- #7197\r\n- [SA1627](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1627.md)\r\n- [SA1629](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1629.md)\r\n- [SA1633](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1633.md) - Superseded by IDE0073\r\n- [SA1642](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1642.md)\r\n- [SA1643](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1643.md) - #7196\r\n- [SA1649](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1649.md)",
  "state": "OPEN",
  "createdAt": "2021-12-29T23:07:53Z",
  "updatedAt": "2024-02-21T16:28:13Z",
  "closedAt": null,
  "author": {
    "login": "elachlan"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Backlog"
  },
  "comments": {
    "nodes": [
      {
        "body": "CA1837: https://docs.microsoft.com/en-au/dotnet/fundamentals/code-analysis/quality-rules/ca1837\r\n\r\nWe can't use this one because it isn't available in older versions of .NET. When the team decides to no longer support versions below .NET 5 then this can be enabled.",
        "createdAt": "2021-12-30T03:32:58Z",
        "updatedAt": "2021-12-30T03:32:58Z",
        "author": {
          "login": "elachlan"
        }
      },
      {
        "body": "CA2241: https://docs.microsoft.com/en-au/dotnet/fundamentals/code-analysis/quality-rules/CA2241 \r\nThis has lots of matches in [msbuild\\src\\Build.UnitTests\\FileUtilitiesRegex_Tests.cs](https://github.com/dotnet/msbuild/blob/b827bf58c21f7a38770d786848c76f771d995a94/src/Build.UnitTests/FileUtilitiesRegex_Tests.cs)\r\n\r\n**Example:**\r\n```\r\nstring winDirectory = string.Format(\"\", _directoryStart);\r\nstring unixDirectory = string.Format(\"\", _altDirectoryStart);\r\n```\r\n\r\nI don't know if this is on purpose. This would just result in an empty string afaik.",
        "createdAt": "2021-12-30T04:02:58Z",
        "updatedAt": "2021-12-30T04:03:43Z",
        "author": {
          "login": "elachlan"
        }
      },
      {
        "body": "ca2249: https://docs.microsoft.com/en-au/dotnet/fundamentals/code-analysis/quality-rules/ca2249\r\n\r\nThis one also has issues because of the missing overloads on `string.Contains`. So not all usages can be converted.",
        "createdAt": "2021-12-30T04:25:34Z",
        "updatedAt": "2021-12-30T04:25:34Z",
        "author": {
          "login": "elachlan"
        }
      },
      {
        "body": "@Forgind I can't manage to get StyleCop Analyzers to run anymore. Are they working for you?",
        "createdAt": "2021-12-30T05:35:37Z",
        "updatedAt": "2021-12-30T05:35:37Z",
        "author": {
          "login": "elachlan"
        }
      },
      {
        "body": "> CA2241: https://docs.microsoft.com/en-au/dotnet/fundamentals/code-analysis/quality-rules/CA2241 This has lots of matches in [msbuild\\src\\Build.UnitTests\\FileUtilitiesRegex_Tests.cs](https://github.com/dotnet/msbuild/blob/b827bf58c21f7a38770d786848c76f771d995a94/src/Build.UnitTests/FileUtilitiesRegex_Tests.cs)\r\n> \r\n> **Example:**\r\n> \r\n> ```\r\n> string winDirectory = string.Format(\"\", _directoryStart);\r\n> string unixDirectory = string.Format(\"\", _altDirectoryStart);\r\n> ```\r\n> \r\n> I don't know if this is on purpose. This would just result in an empty string afaik.\r\n\r\nThe cases I saw looked like they should resolve to an empty string, so I think it's fine to replace those with string.Empty and skip the format part.",
        "createdAt": "2021-12-30T21:14:59Z",
        "updatedAt": "2021-12-30T21:14:59Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "> ca2249: https://docs.microsoft.com/en-au/dotnet/fundamentals/code-analysis/quality-rules/ca2249\r\n> \r\n> This one also has issues because of the missing overloads on `string.Contains`. So not all usages can be converted.\r\n\r\nDoes this also complain about cases like:\r\n\r\n```C#\r\nstring s = \"foobar\";\r\nint i = s.IndexOf(\"b\");\r\nif (i > 0) {\r\n// Uses i\r\n}\r\n```\r\n? Also, what do you mean by missing overloads? Like string.Contains requires a string, and we sometimes use a char? If that's the case, I'd leave the ones where we use a char; it's more efficient memory-wise to not allocate a string for no reason\u2014though I guess it's probably short enough that the runtime wouldn't actually have to allocate anyway.",
        "createdAt": "2021-12-30T21:18:17Z",
        "updatedAt": "2021-12-30T21:18:17Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "> @Forgind I can't manage to get StyleCop Analyzers to run anymore. Are they working for you?\r\n\r\nDo you mean locally or in PRs? I just tested a local build, and the analyzer seemed to work fine. If PR builds aren't catching it anymore, it might be throttled, but I don't know how to change that.",
        "createdAt": "2021-12-30T21:35:27Z",
        "updatedAt": "2021-12-30T21:35:27Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "Locally, I am probably doing it wrong somehow. It has been a long while since I worked on this. Do I use visual studio 2019 release , 2022 release, or 2022 preview?",
        "createdAt": "2021-12-30T21:42:16Z",
        "updatedAt": "2021-12-30T21:42:16Z",
        "author": {
          "login": "elachlan"
        }
      },
      {
        "body": "I don't think it matters. What are you doing to run them? I went to my msbuild repo and ran `build.cmd`. `msbuild MSBuild.sln` also worked, though it didn't upgrade the warning to an error.",
        "createdAt": "2021-12-30T21:46:20Z",
        "updatedAt": "2021-12-30T21:46:20Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "> > ca2249: https://docs.microsoft.com/en-au/dotnet/fundamentals/code-analysis/quality-rules/ca2249\r\n> > This one also has issues because of the missing overloads on `string.Contains`. So not all usages can be converted.\r\n> \r\n> Does this also complain about cases like:\r\n> \r\n> ```cs\r\n> string s = \"foobar\";\r\n> int i = s.IndexOf(\"b\");\r\n> if (i > 0) {\r\n> // Uses i\r\n> }\r\n> ```\r\n> \r\n> ? Also, what do you mean by missing overloads? Like string.Contains requires a string, and we sometimes use a char? If that's the case, I'd leave the ones where we use a char; it's more efficient memory-wise to not allocate a string for no reason\u2014though I guess it's probably short enough that the runtime wouldn't actually have to allocate anyway.\r\n\r\nyes, there is a char overload and there are functions which take different comparators than `StringComparison.Ordinal`. But those are only added in .NET 5.",
        "createdAt": "2021-12-30T21:49:39Z",
        "updatedAt": "2021-12-30T21:49:39Z",
        "author": {
          "login": "elachlan"
        }
      },
      {
        "body": "> > CA2241: https://docs.microsoft.com/en-au/dotnet/fundamentals/code-analysis/quality-rules/CA2241 This has lots of matches in [msbuild\\src\\Build.UnitTests\\FileUtilitiesRegex_Tests.cs](https://github.com/dotnet/msbuild/blob/b827bf58c21f7a38770d786848c76f771d995a94/src/Build.UnitTests/FileUtilitiesRegex_Tests.cs)\r\n> > **Example:**\r\n> > ```\r\n> > string winDirectory = string.Format(\"\", _directoryStart);\r\n> > string unixDirectory = string.Format(\"\", _altDirectoryStart);\r\n> > ```\r\n> > \r\n> > \r\n> >     \r\n> >       \r\n> >     \r\n> > \r\n> >       \r\n> >     \r\n> > \r\n> >     \r\n> >   \r\n> > I don't know if this is on purpose. This would just result in an empty string afaik.\r\n> \r\n> The cases I saw looked like they should resolve to an empty string, so I think it's fine to replace those with string.Empty and skip the format part.\r\n\r\nAwesome. I will submit a PR with the fixes.",
        "createdAt": "2021-12-30T21:50:22Z",
        "updatedAt": "2021-12-30T21:50:22Z",
        "author": {
          "login": "elachlan"
        }
      },
      {
        "body": "@rainersigwald some of these PRs are about to increase churn pretty heavily. How would you like me to handle larger change sets like those?\r\n\r\nFor now I will avoid any analyzers with over 1-2k warnings.",
        "createdAt": "2022-01-16T23:13:11Z",
        "updatedAt": "2022-01-16T23:13:11Z",
        "author": {
          "login": "elachlan"
        }
      },
      {
        "body": "@Forgind I just want to summarise where I am up to on this. Basically we ran into an issue where some of the analysers fail the build because of code pulled in from nuget packages e.g :\r\n- https://github.com/dotnet/msbuild/pull/7187\r\n- https://github.com/dotnet/msbuild/pull/7272\r\n- https://github.com/dotnet/msbuild/pull/7267\r\n\r\nThis is because of how analyzers work with `.editorconfigs` and `.globalconfigs`. The main difference between the two formats is that `.editorconfigs` apply to a **directory** where as `.globalconfigs` apply to a **project**. So with the switch to `.globalconfigs` it now means all code is analyzed not just the code in the project directory.\r\n\r\nThis was all explained in https://github.com/dotnet/roslyn/issues/55992. Where many people gave input on the system. This culminated in this pull request to demonstrate a solution:\r\n- https://github.com/dotnet/msbuild/pull/7310\r\n\r\nThere is a catch in that solution, in that the added `NuGet.config` creates a folder in the project directory as a cache for all the nuget packages used by the solution. This means the solution avoids using the global cache. This resulted in an extra 2GB being used on my machine and extra downloading of packages when a first did a project restore. The advantage of this method is that it specifically excludes the nuget package code files from being analyzed.\r\n\r\nThe other solution is that we move back to using the `.editorconfig` and avoid the `.globalconfig` so that the analyzers are applied to the whole solution directory and excludes any files in the project that are included from outside that directory (code files from nuget packages). I like this option because it keeps it simple. But it means the `.editorconfig` becomes massive.\r\n\r\nThere may be another method around this but it wasn't suggested from the other people. Could you please discuss with the team and then get back to me? I will then make the required changes.\r\n\r\n",
        "createdAt": "2022-01-24T11:52:55Z",
        "updatedAt": "2022-01-24T11:52:55Z",
        "author": {
          "login": "elachlan"
        }
      },
      {
        "body": "@sharwell do you have any thoughts of the configuration of analyzers based on the above issues?",
        "createdAt": "2022-01-25T00:36:26Z",
        "updatedAt": "2022-01-25T00:36:26Z",
        "author": {
          "login": "elachlan"
        }
      },
      {
        "body": "I'd like to wait to see what sharwell suggests. Personally, both solutions sound problematic in their own ways, and although I'd personally be fine with wasting a couple gbs, I suspect at least one person on my team will be strongly opposed. On the other hand, it would be frustrating to have a massive .editorconfig.\r\n\r\nOne other option I think we should at least consider is only promoting analysis messages to warnings if we can do some without a warning coming from anything we depend on. That's a stupid requirement, but it may be the most pragmatic. We have a lot of issues we want to tackle for 17.2 with major customer impact, and you've probably noticed we're pretty far behind even with just reviewing and merging what's already open.",
        "createdAt": "2022-01-26T01:13:45Z",
        "updatedAt": "2022-01-26T01:13:45Z",
        "author": {
          "login": "Forgind"
        }
      },
      {
        "body": "> I'd like to wait to see what sharwell suggests. Personally, both solutions sound problematic in their own ways, and although I'd personally be fine with wasting a couple gbs, I suspect at least one person on my team will be strongly opposed. On the other hand, it would be frustrating to have a massive .editorconfig.\r\n> \r\n> One other option I think we should at least consider is only promoting analysis messages to warnings if we can do some without a warning coming from anything we depend on. That's a stupid requirement, but it may be the most pragmatic. We have a lot of issues we want to tackle for 17.2 with major customer impact, and you've probably noticed we're pretty far behind even with just reviewing and merging what's already open.\r\n\r\nWe need to address this as it is the same issue we ran into for #7571, but its worse because code style can be different between the nuget package code and msbuild.\r\n\r\n@sharwell are you able to look at https://github.com/dotnet/msbuild/issues/7174#issuecomment-1020018628 and let us know your thoughts?",
        "createdAt": "2022-04-25T22:26:31Z",
        "updatedAt": "2022-04-25T22:26:31Z",
        "author": {
          "login": "elachlan"
        }
      },
      {
        "body": "You should add **file scoped namespaces** to the list, is there a code for it?",
        "createdAt": "2022-04-29T07:51:44Z",
        "updatedAt": "2022-04-29T07:51:44Z",
        "author": {
          "login": "Nirmal4G"
        }
      },
      {
        "body": "> @sharwell are you able to look at https://github.com/dotnet/msbuild/issues/7174#issuecomment-1020018628 and let us know your thoughts?\r\n\r\n_Style_ rules in **.globalconfig** will not apply to a _correctly authored_ NuGet package. If you are running into problems with the global NuGet cache, there is a bug in one or more NuGet packages which needs to be corrected (or have a workaround). It's not clear which package(s) or rule(s) are involved in the problem you saw.\r\n",
        "createdAt": "2022-04-29T14:58:13Z",
        "updatedAt": "2022-04-29T14:58:34Z",
        "author": {
          "login": "sharwell"
        }
      },
      {
        "body": "@sharwell the package in question is `microsoft.codeanalysis.collections`, for instance in this check run: https://github.com/dotnet/msbuild/runs/6150398057.",
        "createdAt": "2022-04-29T15:00:56Z",
        "updatedAt": "2022-04-29T15:00:56Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "There are a few ways to resolve:\r\n\r\n* A good solution for the NuGet package itself is to use the approach of [IsExternalInit](https://github.com/manuelroemer/IsExternalInit/blob/master/src/IsExternalInit.nuspec), where the NuGet package contains the source code, but it's copied to the **obj** directory by build logic and included in the compilation from there. The copy operation would know to rename files from **\\*.cs** (which is how they appear in Roslyn, since they aren't generated code in that repository) to **\\*.g.cs** so they are automatically treated as generated code by downstream builds.\r\n* You can work around the issue by setting the [`generated_code` property](https://docs.microsoft.com/en-us/visualstudio/code-quality/use-roslyn-analyzers?view=vs-2022#configure-generated-code) in **.globalconfig** for each of the impacted files\r\n* You can work around the issue by creating a `DiagnosticSuppressor` that knows how to suppress style rules in the files in this package. This is how Roslyn [modified VSTHRD200](https://github.com/dotnet/roslyn-analyzers/blob/9de7a45252c227009c77f5631d7eb86864cbff61/src/Roslyn.Diagnostics.Analyzers/Core/RelaxTestNamingSuppressor.cs) behavior after a feature request to add logic to the rule itself was rejected (https://github.com/microsoft/vs-threading/issues/670).",
        "createdAt": "2022-04-29T15:11:28Z",
        "updatedAt": "2022-04-29T15:13:13Z",
        "author": {
          "login": "sharwell"
        }
      },
      {
        "body": "> * You can work around the issue by setting the [`generated_code` property](https://docs.microsoft.com/en-us/visualstudio/code-quality/use-roslyn-analyzers?view=vs-2022#configure-generated-code) in **.globalconfig** for each of the impacted files\r\n\r\nMy understanding is that this isn't possible because we don't know an absolute path for the NuGet packages folder. Is that not the case?",
        "createdAt": "2022-04-29T15:29:22Z",
        "updatedAt": "2022-04-29T15:29:22Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "> My understanding is that this isn't possible because we don't know an absolute path for the NuGet packages folder. Is that not the case?\r\n\r\nI'm not completely sure here. For central builds (with determinism enabled), the paths should be normalized to a `/_/` prefix of some sort that's predictable. I'm not sure if there's something similar for local builds.",
        "createdAt": "2022-04-29T15:43:07Z",
        "updatedAt": "2022-04-29T15:43:07Z",
        "author": {
          "login": "sharwell"
        }
      },
      {
        "body": "[Code-style](https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/) rules (IDE) are also useful.\r\nThey can be enabled using `dotnet_analyzer_diagnostic.category-Style.severity = warning` or individually. ",
        "createdAt": "2023-01-20T15:18:08Z",
        "updatedAt": "2023-01-20T15:18:08Z",
        "author": {
          "login": "vlada-shubina"
        }
      },
      {
        "body": "[SA1010](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1010.md) - https://github.com/dotnet/msbuild/pull/7205\r\n\r\n~in `ObjectModelHelpers` (shared file), this check is not flagged as warning. Probably worth checking why.~ \r\n\r\nignore me, it is SA1110.",
        "createdAt": "2023-01-20T15:43:25Z",
        "updatedAt": "2023-01-20T15:44:25Z",
        "author": {
          "login": "vlada-shubina"
        }
      },
      {
        "body": "Additional checks to enable once fixed:\r\n```\r\n# Cast is redundant\r\ndotnet_diagnostic.IDE0004.severity = suggestion\r\n\r\n# IDE0005: Remove unnecessary usings/imports\r\ndotnet_diagnostic.IDE0005.severity = warning\r\n\r\n# Use explicit type instead of 'var'\r\ndotnet_diagnostic.IDE0008.severity = suggestion\r\n\r\n# Populate switch\r\ndotnet_diagnostic.IDE0010.severity = suggestion\r\n\r\n# Null check can be simplified\r\ndotnet_diagnostic.IDE0016.severity = suggestion\r\n\r\n# Object initialization can be simplified\r\ndotnet_diagnostic.IDE0017.severity = suggestion\r\n\r\n# Variable declaration can be inlined\r\ndotnet_diagnostic.IDE0018.severity = suggestion\r\n\r\n# Use pattern matching\r\ndotnet_diagnostic.IDE0019.severity = suggestion\r\ndotnet_diagnostic.IDE0020.severity = suggestion\r\n\r\n# Use expression body for constructor\r\ndotnet_diagnostic.IDE0021.severity = suggestion\r\n\r\n# Use expression body for method\r\ndotnet_diagnostic.IDE0022.severity = suggestion\r\n\r\n# Use expression body for conversion operator\r\ndotnet_diagnostic.IDE0023.severity = suggestion\r\n\r\n# Use block body for operator\r\ndotnet_diagnostic.IDE0024.severity = suggestion\r\n\r\n# Use expression body for property\r\ndotnet_diagnostic.IDE0025.severity = suggestion\r\n\r\n# Use expression body for indexer\r\ndotnet_diagnostic.IDE0026.severity = suggestion\r\n\r\n# Use expression body for accessor\r\ndotnet_diagnostic.IDE0027.severity = suggestion\r\n\r\n# Collection initialization can be simplified\r\ndotnet_diagnostic.IDE0028.severity = suggestion\r\n\r\n# Null check can be simplified\r\ndotnet_diagnostic.IDE0031.severity = suggestion\r\n\r\n# Use auto property\r\ndotnet_diagnostic.IDE0032.severity = suggestion\r\n\r\n# 'default' expression can be simplified\r\ndotnet_diagnostic.IDE0034.severity = suggestion\r\n\r\n# Member name can be simplified\r\ndotnet_diagnostic.IDE0037.severity = suggestion\r\n\r\n# Use local function\r\ndotnet_diagnostic.IDE0039.severity = suggestion\r\n\r\n# Null check can be simplified\r\ndotnet_diagnostic.IDE0041.severity = suggestion\r\n\r\n# Variable declaration can be deconstructed\r\ndotnet_diagnostic.IDE0042.severity = suggestion\r\n\r\n# Made field readonly\r\ndotnet_diagnostic.IDE0044.severity = suggestion\r\n\r\n# 'if' statement can be simplified\r\ndotnet_diagnostic.IDE0045.severity = suggestion\r\ndotnet_diagnostic.IDE0046.severity = suggestion\r\n\r\n# Parentheses can be removed\r\ndotnet_diagnostic.IDE0047.severity = suggestion\r\n\r\n# Parentheses should be added for clarity\r\ndotnet_diagnostic.IDE0048.severity = suggestion\r\n\r\n# Member name can be simplified\r\ndotnet_diagnostic.IDE0049.severity = suggestion\r\n\r\n# Use compound assignment\r\ndotnet_diagnostic.IDE0054.severity = suggestion\r\n\r\n# Indexing can be simplified\r\ndotnet_diagnostic.IDE0056.severity = suggestion\r\n\r\n# Slice can be simplified\r\ndotnet_diagnostic.IDE0057.severity = suggestion\r\n\r\n# Expression value is never used\r\ndotnet_diagnostic.IDE0058.severity = suggestion\r\n\r\n# Unnecessary assignment of a value\r\ndotnet_diagnostic.IDE0059.severity = suggestion\r\n\r\n# Remove unused parameter\r\ndotnet_diagnostic.IDE0060.severity = suggestion\r\n\r\n# Use expression body for a local function\r\ndotnet_diagnostic.IDE0061.severity = suggestion\r\n\r\n# Local function can be made static\r\ndotnet_diagnostic.IDE0062.severity = suggestion\r\n\r\n# Using directives must be placed outside of a namespace declaration\r\ndotnet_diagnostic.IDE0065.severity = suggestion\r\n\r\n# Use 'switch' expression\r\ndotnet_diagnostic.IDE0066.severity = suggestion\r\n\r\n# 'GetHashCode' implementation can be simplified\r\ndotnet_diagnostic.IDE0070.severity = suggestion\r\n\r\n# Interpolation can be simplified\r\ndotnet_diagnostic.IDE0071.severity = suggestion\r\n\r\n# Populate switch\r\ndotnet_diagnostic.IDE0072.severity = suggestion\r\n\r\n# Use compound assignment\r\ndotnet_diagnostic.IDE0074.severity = suggestion\r\n\r\n# Conditional expression can be simplified\r\ndotnet_diagnostic.IDE0075.severity = suggestion\r\n\r\n# Use pattern matching\r\ndotnet_diagnostic.IDE0078.severity = suggestion\r\ndotnet_diagnostic.IDE0083.severity = suggestion\r\n\r\n# 'typeof' can be converted to 'nameof'\r\ndotnet_diagnostic.IDE0082.severity = suggestion\r\n\r\n# 'new' expression can be simplified\r\ndotnet_diagnostic.IDE0090.severity = suggestion\r\n\r\n# Simplify LINQ expression\r\ndotnet_diagnostic.IDE0120.severity = suggestion\r\n\r\n# namespace does not match folder structure\r\ndotnet_diagnostic.IDE0130.severity = suggestion\r\n\r\n# Null check can be clarified\r\ndotnet_diagnostic.IDE0150.severity = suggestion\r\n\r\n# Convert to block scoped namespaces\r\ndotnet_diagnostic.IDE0160.severity = suggestion\r\n\r\n# Simplify property pattern\r\ndotnet_diagnostic.IDE0170.severity = suggestion\r\n\r\n# Use tuple to swap values\r\ndotnet_diagnostic.IDE0180.severity = suggestion\r\n\r\n# Use tuple to swap values\r\ndotnet_diagnostic.IDE0180.severity = suggestion\r\n\r\n# Lambda expression can be removed\r\ndotnet_diagnostic.IDE0200.severity = suggestion\r\n\r\n# Convert to top-level statements\r\ndotnet_diagnostic.IDE0210.severity = suggestion\r\n\r\n# 'foreach' statement implicitly converts\r\ndotnet_diagnostic.IDE0220.severity = suggestion\r\n\r\n# Use UTF-8 string literal\r\ndotnet_diagnostic.IDE0230.severity = suggestion\r\n\r\n# Nullable directives\r\ndotnet_diagnostic.IDE0240.severity = suggestion\r\ndotnet_diagnostic.IDE0241.severity = suggestion\r\n\r\n# Struct can be made 'readonly'\r\ndotnet_diagnostic.IDE0250.severity = suggestion\r\n\r\n# Null check can be simplified\r\ndotnet_diagnostic.IDE0270.severity = suggestion\r\n\r\n# naming rule violation\r\ndotnet_diagnostic.IDE1006.severity = suggestion\r\n```",
        "createdAt": "2023-01-30T14:42:02Z",
        "updatedAt": "2023-01-30T14:42:02Z",
        "author": {
          "login": "vlada-shubina"
        }
      },
      {
        "body": "Regarding some of the rules, per @rainersigwald's comment in https://github.com/dotnet/msbuild/pull/7953/files/c517eaada858f113d7bbf6c06cdf6044b5accb15#r1051020281, it does make sense to leave them as warning for the inner-loop agility, while turn warnings to errors at CI builds.",
        "createdAt": "2023-01-31T08:48:08Z",
        "updatedAt": "2023-01-31T08:48:08Z",
        "author": {
          "login": "stan-sz"
        }
      }
    ]
  }
}