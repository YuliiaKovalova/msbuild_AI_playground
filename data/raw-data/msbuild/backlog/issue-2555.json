{
  "number": 2555,
  "title": "MSBuild copying assembly from its own directory",
  "body": "Hi All,\r\nI think this is an MSBuild bug, but I'm not sure.\r\nHere's my scenario:\r\nClio.Api.Repository references EntityFrameworkCore 1.1.3 and System.Collections.Immutable version 1.2.2\r\nClio.Api.Repository.Windows references Clio.Api.Repository and no other assemblies.\r\nBoth projects build to the same folder.\r\nI specifically want to point out that EntityFrameworkCore references System.Collections.Immutable version _1.2.1_.\r\n\r\nWhen I build Clio.Api.Repository, the output folder correctly has System.Collections.Immutable version 1.2.2.\r\n\r\nWhen I build Clio.Api.Repository.Windows, the output folder incorrectly has System.Collections.Immutable version 1.2.1.  I had no clue where version 1.2.1 was coming from I didn't have it in my path, my nuget packages, or anywhere.\r\n\r\nI turned on verbose debug logging and eventually discovered this:\r\n2>  Dependency \"System.Collections.Immutable, Version=1.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\".\r\n2>      Resolved file path is \"C:\\Program Files (x86)\\Microsoft Visual Studio\\Preview\\Professional\\MSBuild\\15.0\\Bin\\System.Collections.Immutable.dll\".\r\n\r\nWhy is MSBuild searching for assemblies in its own path when dealing with a dependent assembly?  What can I do to make it stop?\r\n\r\nHere is my log:\r\n[Quick Log.txt](https://github.com/Microsoft/msbuild/files/1333294/Quick.Log.txt)\r\n\r\nHere is a sample project demonstrating the issue:\r\nhttps://github.com/TonyValenti/MSBuildResolutionInconsistencies2",
  "state": "CLOSED",
  "createdAt": "2017-09-26T13:28:33Z",
  "updatedAt": "2024-02-21T17:16:32Z",
  "closedAt": "2020-07-01T16:19:20Z",
  "author": {
    "login": "TonyValenti"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "This is happening because Visual Studio adds a pointer to the MSBuild folder to AssemblyFolders. That allows referencing MSBuild assemblies without using the NuGet package.\r\n\r\nThat's certainly non-obvious, and most of us wish we had a smaller set of assembly-resolution candidate locations. But reducing the set would be a breaking change. #772 tracks creating a simple opt-out of this.\r\n\r\nYou can remove the `$(AssemblyFoldersConfigFileSearchPath)` entry from `$(AssemblySearchPaths)` manually to work around this problem.",
        "createdAt": "2020-07-01T16:19:14Z",
        "updatedAt": "2020-07-01T16:19:14Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Duplicate of #772",
        "createdAt": "2020-07-01T16:19:20Z",
        "updatedAt": "2020-07-01T16:19:20Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}