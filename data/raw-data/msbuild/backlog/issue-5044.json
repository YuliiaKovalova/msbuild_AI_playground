{
  "number": 5044,
  "title": "Validate RuntimeIdentifiers during build",
  "body": "NuGet uses RuntimeIdentifiers to prohibit restoring packages on unsupported architectures. For example, you can't restore a `linux` library on a Windows 10 machine.\r\n\r\nHowever, msbuild doesn't seem to validate those runtime requirements. I can perfectly create a Linux-only library:\r\n\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netstandard2.0</TargetFramework>\r\n    <RuntimeIdentifiers>linux</RuntimeIdentifiers>\r\n  </PropertyGroup>\r\n</Project>\r\n```\r\n\r\nAnd reference that in a Windows-only application:\r\n\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp3.1</TargetFramework>\r\n    <RuntimeIdentifier>win7-x64</RuntimeIdentifier>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <ProjectReference Include=\"..\\MyLinuxLib\\MyLinuxLib.csproj\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\r\n\r\nThat doesn't seem to make sense to me and it looks like msbuild should be capable of detecting these inconsistencies.",
  "state": "CLOSED",
  "createdAt": "2020-01-10T13:01:44Z",
  "updatedAt": "2024-02-21T17:05:30Z",
  "closedAt": "2020-01-13T21:29:08Z",
  "author": {
    "login": "jochenz"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "This issue was moved to dotnet/sdk#4164",
        "createdAt": "2020-01-13T21:29:06Z",
        "updatedAt": "2020-01-13T21:29:06Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}