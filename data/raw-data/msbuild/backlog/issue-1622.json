{
  "number": 1622,
  "title": ".net core MSBuild normalizes slashes when it shouldn't",
  "body": "Description copied from internal email\r\n\r\nRepro steps:\r\n1.\tOn linux, get the latest CLI\r\n2.\tCreate a new project \u201ctest.csproj\u201d(dotnet new)\r\n3.\tRun `dotnet msbuild /p:RestoreSources=/tmp/some-source%3Bhttps://api.nuget.org/v3/index.json /t:restore test.csproj /v:diag > output`\r\n4.\tIn output file, search \u201cRestoreSources\u201d and \u201cSources\u201d.\r\n\r\nYou can find \r\nRestoreSources = /tmp/some-source;https://api.nuget.org/v3/index.json\r\nSources= /tmp/some-source;https:/api.nuget.org/v3/index.json\r\n\r\nThe target file: https://github.com/NuGet/NuGet.Client/blob/dev/src/NuGet.Core/NuGet.Build.Tasks/NuGet.targets#L415\r\n`<Sources>$(RestoreSources)<Sources>`\r\n\r\nThe known workaround is to escape the slash so MSBuild treats it as a literal:\r\n`dotnet msbuild /p:RestoreSources=/tmp/some-source%3Bhttps:`**%2F%2F**`api.nuget.org/v3/index.json /t:restore test.csproj /v:diag > output`\r\n",
  "state": "CLOSED",
  "createdAt": "2017-01-27T20:58:17Z",
  "updatedAt": "2025-04-15T13:55:44Z",
  "closedAt": "2025-04-15T13:55:44Z",
  "author": {
    "login": "cdmihai"
  },
  "milestone": {
    "title": "Consider for Next Major Version"
  },
  "assignees": {
    "nodes": []
  },
  "labels": [
    "bug",
    ".NET Core"
  ],
  "comments": {
    "nodes": [
      {
        "body": "Another workaround is to ensure that the argument does not begin with a unix like path:\r\n`/p:RestoreSources=https://api.nuget.org/v3/index.json%3b/tmp/some-source`\r\n",
        "createdAt": "2017-01-30T22:39:06Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "https://github.com/dotnet/cli/pull/5539 went in for RTW, so I'm moving this more-permanent-but-more-risky fix out.",
        "createdAt": "2017-02-02T00:38:52Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "I'm hitting issues with this on Linux and OSX with the restore target. I've had to order the sources so that http is first as mentioned in @cdmihai's workaround. This will work, but it isn't ideal since the order of sources has some impact on things and restore can no longer keep the original config order.\r\n\r\n",
        "createdAt": "2017-06-05T01:24:37Z",
        "author": {
          "login": "emgarten"
        }
      },
      {
        "body": "I hit this as well on ItemGroups (is this the same issue?). \r\n\r\nI see the motivation -- item groups are _supposed_ to be for files, where this normalization would be a convenience. OTOH, a lot of built in tasks violate this assumption, like WriteLinesToFile which (ab)uses items for holding text.\r\n\r\nFor now, I'm using a replacement character (e.g. `__` to mean backslash) and postprocessing the generated files with sed. ",
        "createdAt": "2020-02-22T22:43:20Z",
        "author": {
          "login": "cparen"
        }
      },
      {
        "body": "Here's a small repro:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.Build.NoTargets\">\r\n  <Target Name=\"Foo\" BeforeTargets=\"Build\">\r\n    <Exec Command=\"/bin/echo Display \\\\ oci://\" />\r\n    <Exec Command=\"/bin/echo Display \\ oci://\" />\r\n    <Exec Command=\"/bin/echo Display // oci://\" />\r\n    <Exec Command=\"/bin/echo Display / oci://\" />\r\n  </Target>\r\n</Project>\r\n```\r\n\r\nOn Ubuntu 20.04 observe this output:\r\n\r\n```cmd\r\n  Determining projects to restore...\r\n  All projects are up-to-date for restore.\r\n  Display / oci:/\r\n  Display / oci:/\r\n  Display // oci://\r\n  Display / oci://\r\n```\r\n\r\nContext: Latest [Helm](https://github.com/helm/helm) supports pushing helm charts to a container registry, though the URL has to be prefixed with `oci://` protocol.",
        "createdAt": "2022-03-28T08:04:54Z",
        "author": {
          "login": "stan-sz"
        }
      },
      {
        "body": "@stan-sz, more that don't work: `&#92;`, `$([MSBuild]::Escape(&#92;))`. However, `%5C` _does_ work for me. Here's how I used it for a multi-line command:\r\n\r\n```xml\r\n  <Target Name=\"GenerateGrpcSources\" BeforeTargets=\"CoreCompile\">\r\n    <Exec Command=\"/bin/bash -ce &quot;\r\n    echo 'Generating code...';\r\n    $(NuGetPackageRoot)google.protobuf.tools/3.5.1/tools/linux_x64/protoc %5C\r\n        -I$(NuGetPackageRoot)google.protobuf.tools/3.5.1/tools/google/protobuf %5C\r\n        --proto_path=$(NuGetPackageRoot)google.protobuf.tools/3.5.1/tools %5C\r\n        --proto_path=$(ProjectDir)Protobuf %5C\r\n        --csharp_out=$(ProjectDir)Messages %5C\r\n        $(ProjectDir)Protobuf/*.proto %5C\r\n        ;\r\n    echo 'Done generating code.';\r\n    &quot;\" />\r\n  </Target>\r\n```",
        "createdAt": "2022-04-03T21:02:37Z",
        "author": {
          "login": "r3h0"
        }
      },
      {
        "body": "> @stan-sz, more that don't work: `&#92;`, `$([MSBuild]::Escape(&#92;))`. However, `%5C` _does_ work for me. Here's how I used it for a multi-line command:\r\n> \r\n> ```\r\n>   <Target Name=\"GenerateGrpcSources\" BeforeTargets=\"CoreCompile\">\r\n>     <Exec Command=\"/bin/bash -ce &quot;\r\n>     echo 'Generating code...';\r\n>     $(NuGetPackageRoot)google.protobuf.tools/3.5.1/tools/linux_x64/protoc %5C\r\n>         -I$(NuGetPackageRoot)google.protobuf.tools/3.5.1/tools/google/protobuf %5C\r\n>         --proto_path=$(NuGetPackageRoot)google.protobuf.tools/3.5.1/tools %5C\r\n>         --proto_path=$(ProjectDir)Protobuf %5C\r\n>         --csharp_out=$(ProjectDir)Messages %5C\r\n>         $(ProjectDir)Protobuf/*.proto %5C\r\n>         ;\r\n>     echo 'Done generating code.';\r\n>     &quot;\" />\r\n>   </Target>\r\n> ```\r\n\r\nthis did the trick for me when dealing with a regex in a property",
        "createdAt": "2022-10-12T14:39:58Z",
        "author": {
          "login": "lordscarlet"
        }
      },
      {
        "body": "How is this open for 6 years with Priority:1 removed",
        "createdAt": "2023-06-23T16:26:56Z",
        "author": {
          "login": "Happypig375"
        }
      },
      {
        "body": "This just burnt me as well. I was sending in a url `http://website.com` and it would strip the second slash to `http:/website.com` making it an invalid url ",
        "createdAt": "2023-06-27T17:04:05Z",
        "author": {
          "login": "ByronMayne"
        }
      },
      {
        "body": "Related to https://github.com/dotnet/msbuild/issues/3468. This is a major source of frustration on linux, because it takes ages to discover the underlying issue. Completely unexpected behaviour.",
        "createdAt": "2023-12-31T04:28:47Z",
        "author": {
          "login": "lonix1"
        }
      },
      {
        "body": "I just got bitten by this as well\n\n`{ \"os\": \"windows-latest\", \"command\": \"./eng/build.ps1 -projects \\\"%24%28pwd%29/tests/Aspire.Cli.Tests/Aspire.Cli.Tests.csproj\\\" \" }`\n\ngets written as \n\n`{ \"os\": \"windows-latest\", \"command\": \"./eng/build.ps1 -projects /\"$(pwd)/tests/Aspire.Cli.Tests/Aspire.Cli.Tests.csproj/\" \" }`\n",
        "createdAt": "2025-04-07T02:43:14Z",
        "author": {
          "login": "RussKie"
        }
      }
    ]
  }
}