{
  "number": 6615,
  "title": "MSBuild BuildContributor-related parameter for specifying directory path",
  "body": "Hi everyone,\r\n\r\n# Background\r\n\r\nI've recently been looking into adopting `Microsoft.SqlServer.Dac.Deployment.BuildContributor` and `Microsoft.SqlServer.Dac.Deployment.DeploymentContributor`.\r\n\r\nInitially I was exploring them at home in my personal time, and more recently this week I've been working with a colleague to determine how we might operationalise a BuildContributor within a CICD pipeline.\r\n\r\nThe key issue is that we would like to develop the BuildContributor, check in code changes, and subsequently deploy it for use on a build server agent (ephemeral Team City build agent).\r\n\r\nWe can conceivably place the BuildContributor DLL files straight into the appropriate `Extensions` folder. For example:\r\n```\r\nC:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Professional\\Common7\\IDE\\Extensions\\Microsoft\\SQLDB\\DAC\\150\\Extensions\r\n```\r\n\r\nHowever the challenge with deployments to a build server agent is that other processes on that server might be using the previous version of the DLL that we wish to deploy, thereby blocking or stalling a deployment.\r\n\r\nIdeally, we'd be able to deploy to an arbitrary directory, update an environment variable to point to that arbitrary directory, and then pass that environment variable's value to msbuild on the command line.\r\n\r\n---\r\n\r\n## Example ideal sequence of events\r\n\r\nFirstly, we'd build our BuildContributor code using our CICD pipeline.\r\n\r\nSecondly, once the build is confirmed 'good', we'd ideally deploy it to a target. We still need to work through how exactly this will work, but it'd most likely involve periodically checking for, and pulling, an updated version of a package.\r\n\r\nAt that point, we need to unpackage the DLL and drop the contents somewhere. In my view that would ideally be a path such as:\r\n```\r\nC:\\MyBuildContributors\\4d2f4565-0769-48f1-b2b5-bb6d7377e4b9\r\n```\r\n\r\nBeing a newly created directory, the unpackaging will always succeed immediately (so long as there's adequate disk space).\r\n\r\nNext we'd set, or update, an environment variable. For example, we might set an environment variable named `BUILD_CONTRIBUTOR_HOME` to the value `C:\\MyBuildContributors\\4d2f4565-0769-48f1-b2b5-bb6d7377e4b9`.\r\n\r\nAnd finally, we'd be able to use it with `msbuild` like so:\r\n```\r\n%MSBUILD% %ProjectFile% ^\r\n    /t:Build ^\r\n    /p:Configuration=Release ^\r\n    /p:BuildContributors=\"MyBuildContributor\" ^\r\n    /p:BuildContributorPaths=%BUILD_CONTRIBUTOR_HOME%\r\n```\r\n\r\nResearch into the `DeploymentContributor` support revealed that the `sqlpackage` tool has support for specifying an arbitrary directory path to search for contributors in via the `AdditionalDeploymentContributorPaths` parameter:\r\n```\r\n%SQLPACKAGE% ^\r\n    /Action:Script ^\r\n    /SourceFile:%DacpacFilePath% ^\r\n    /TargetServerName:%TargetServerName% ^\r\n    /TargetDatabaseName:%DatabaseName% ^\r\n    ...\r\n    /p:AdditionalDeploymentContributors=\"MyDeploymentPlanModifier\" ^\r\n    /p:AdditionalDeploymentContributorPaths=\"%BUILD_CONTRIBUTOR_HOME%\"\r\n```\r\n\r\n---\r\n\r\n## Workarounds for others who may encounter this problem\r\n\r\nOne workaround that we discovered was that we could create a Symbolic Link within the Extensions directory. This would allow us to discover a BuildContributor DLL in whichever arbitrary directory the SymLink pointed to.\r\n\r\nOne challenge with this is that you must create the SymLink in a command line terminal that has administrator privileges.\r\n\r\n---\r\n\r\n## Request\r\n\r\nI was wondering if the msbuild development team might consider implementing this as a new feature? Essentially a parameter named `BuildContributorPaths` or similar that can be used in the manner described above.\r\n\r\n---\r\n\r\nThank you for taking your time to read this.\r\n\r\nKind regards,\r\nDaniel Loth",
  "state": "CLOSED",
  "createdAt": "2021-06-23T08:05:22Z",
  "updatedAt": "2024-02-21T14:12:52Z",
  "closedAt": "2021-06-24T14:16:09Z",
  "author": {
    "login": "DanielLoth"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "rainersigwald"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "To be clear, you're talking about doing something like what's described here? https://docs.microsoft.com/sql/ssdt/walkthrough-extend-database-project-build-to-generate-model-statistics?view=sql-server-ver15\n\nI suspect this can be done with no new work at the MSBuild layer, but it might require work at the SQL layer. That doc suggests changes to the VS directory that most project extensibility doesn't require.",
        "createdAt": "2021-06-23T09:55:41Z",
        "updatedAt": "2021-06-23T09:55:41Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Yes, that's correct. I'm looking at using it for tasks at build time such as:\r\n- Generating tables / triggers / other objects using the APIs in the `Microsoft.SqlServer.TransactSql.ScriptDom` namespace\r\n- Enforcing requirements (for example, perhaps enforcing a requirement that a column with a particular well-known name has a unique constraint placed on it, or enforcing the presence of a `rowversion` column).",
        "createdAt": "2021-06-23T10:36:02Z",
        "updatedAt": "2021-06-23T10:36:02Z",
        "author": {
          "login": "DanielLoth"
        }
      },
      {
        "body": "It looks like this is entirely controlled by the `.sqlproj` team, and not by MSBuild itself. Can you please [open a feedback ticket](https://docs.microsoft.com/visualstudio/ide/feedback-options) for this?\r\n\r\nAfter it's created, that will open an internal bug which will be routed to the right team. If you post the link here we may be able to help that process go faster.\r\n\r\nI took a quick look at the MSBuild logic they're using and it looks like they just pass `$(BuildContributors)` to their `SqlBuildTask`. I guess it uses the name of the contributor to find and load the DLL somehow.\r\n\r\nI agree that you should be able to use these features without modifying your Visual Studio installation, and I can be very clear on that in the internal bug that will be generated by your feedback.\r\n\r\nI'm going to close this because we can't fix it but please do link the feedback item.",
        "createdAt": "2021-06-24T14:16:09Z",
        "updatedAt": "2021-06-24T14:16:09Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Hi @rainersigwald, thank you for taking the time to investigate.\r\n\r\nI've raised a request here: https://developercommunity.visualstudio.com/t/Add-support-for-p:BuildContributorPaths/1460247\r\n\r\nI've written an abridged version in that request ticket, and referred them to this issue for a more concrete example of how the new parameter might be used.",
        "createdAt": "2021-06-24T23:31:32Z",
        "updatedAt": "2021-06-24T23:31:32Z",
        "author": {
          "login": "DanielLoth"
        }
      },
      {
        "body": "Routed and commented on the request, thanks!",
        "createdAt": "2021-06-25T15:07:53Z",
        "updatedAt": "2021-06-25T15:08:02Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Hi @rainersigwald,\r\n\r\nI hope you're well.\r\n\r\nI was wondering if you could provide any news on this one. The request raised on the Developer Community website hasn't really moved since July, so I thought I might reach out here.\r\n\r\nIs this change likely to progress in the near future?",
        "createdAt": "2021-10-09T13:17:34Z",
        "updatedAt": "2021-10-09T13:17:34Z",
        "author": {
          "login": "DanielLoth"
        }
      }
    ]
  }
}