{
  "number": 1777,
  "title": "MSBuild linter",
  "body": "MSBuild could have an opt-in mode that would apply rules and heuristics to give suggestions about project \"health\".\r\n\r\nPossible warnings:\r\n* You have something that is almost an item transform but not well formed so falls back to string (like `@(I->'%(Identity))` with a missing closing `'`).\r\n* You have referred to a property that is not defined and it expanded to the empty string.\r\n* You have referred to a property that is not defined, but an item of the same name is defined.\r\n* You have referred to an item that is not defined, but a property of the same name is defined.",
  "state": "OPEN",
  "createdAt": "2017-03-01T21:30:58Z",
  "updatedAt": "2024-04-05T18:49:22Z",
  "closedAt": null,
  "author": {
    "login": "rainersigwald"
  },
  "labels": [
    "Feature Request",
    "Feature: Warning Waves"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "Thanks, @danmosemsft: https://github.com/Microsoft/msbuild/issues/1774#issuecomment-283475320.",
        "createdAt": "2017-03-01T21:32:32Z",
        "updatedAt": "2017-03-01T21:32:32Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "My favorite linter rule would be to catch `ItemGroup`s with wildcards that scan the entire drive:\r\n\r\n```xml\r\n<ItemGroup>\r\n  <MyItem Include=\"$(SomeProperty)/**\" />\r\n</ItemGroup>\r\n```\r\n\r\nWhere `SomeProperty` resolves to empty sting.",
        "createdAt": "2021-11-29T09:25:15Z",
        "updatedAt": "2021-11-29T09:25:15Z",
        "author": {
          "login": "stan-sz"
        }
      },
      {
        "body": "@stan-sz that is a great linter use case but also see https://github.com/dotnet/msbuild/issues/3642#issue-352653387j and the upcoming https://github.com/dotnet/msbuild/pull/7029.",
        "createdAt": "2021-11-29T15:14:45Z",
        "updatedAt": "2021-11-29T15:14:45Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Another case are conditions in form of \r\n```xml\r\nCondition=\"$(SomeProperty)\">\r\n```\r\n\r\nwhere at least the linter should signal the missing single quotes and comparison with empty string like:\r\n\r\n```xml\r\nCondition=\" '$(SomeProperty)' != '' \">\r\n```",
        "createdAt": "2022-10-26T13:29:39Z",
        "updatedAt": "2022-10-26T13:29:39Z",
        "author": {
          "login": "stan-sz"
        }
      },
      {
        "body": "Some of the items listed in the initial scope for linter are captured in [Feature: Warning Waves](https://github.com/dotnet/msbuild/labels/Feature%3A%20Warning%20Waves)",
        "createdAt": "2023-01-10T12:49:08Z",
        "updatedAt": "2023-01-10T12:49:08Z",
        "author": {
          "login": "stan-sz"
        }
      },
      {
        "body": "We had an interesting issue today in our team, where:\r\n```\r\n<ProjectReference...><Properties></Properties>\r\n```\r\nBroke Publishing, and was not trivial what was happening, until we remembered that ProjectReference mapped to MsBuild task and removed the Properties delegated trough, removing the TargetFramework.\r\n\r\nInteresting case as well for a linter warning, suggest to use AdditinalProperties instead",
        "createdAt": "2023-08-02T14:46:45Z",
        "updatedAt": "2023-08-02T14:47:03Z",
        "author": {
          "login": "hknielsen"
        }
      },
      {
        "body": "For the record: a linter to catch missing single quotes in string comparison\r\n\r\n```\r\nCondition=\" $(SomeProperty) != 'true' \">\r\n```\r\n",
        "createdAt": "2023-09-12T12:40:49Z",
        "updatedAt": "2023-09-12T12:40:49Z",
        "author": {
          "login": "stan-sz"
        }
      },
      {
        "body": "What's the difference between `$(SomeProperty)` and `'$(SomeProperty)'`?\r\nIt looks like Microsoft.Build.Evaluation.Parser.Arg(string expression) creates a StringExpressionNode in both cases.",
        "createdAt": "2023-09-12T15:18:16Z",
        "updatedAt": "2023-09-12T15:18:16Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "This is to handle case when a property evaluates to an empty value. From: https://learn.microsoft.com/en-us/visualstudio/msbuild/msbuild-conditions?view=vs-2022\r\n\r\n> Single quotes are not required for simple alphanumeric strings or boolean values. However, single quotes are required for empty values. This check is case insensitive.",
        "createdAt": "2023-09-12T17:52:33Z",
        "updatedAt": "2023-09-12T17:52:33Z",
        "author": {
          "login": "stan-sz"
        }
      },
      {
        "body": "quoted.proj:\r\n\r\n```XML\r\n<Project xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\" DefaultTargets=\"Run\">\r\n  <PropertyGroup>\r\n    <Property />\r\n  </PropertyGroup>\r\n\r\n  <Target Name=\"Run\">\r\n    <Message Condition=\"$(Property) == ''\" Importance=\"high\" Text=\"Is empty without quotation marks\" />\r\n    <Message Condition=\"$(Property) != ''\" Importance=\"high\" Text=\"Is not empty without quotation marks\" />\r\n    <Message Condition=\"'$(Property)' == ''\" Importance=\"high\" Text=\"Is empty with quotation marks\" />\r\n    <Message Condition=\"'$(Property)' != ''\" Importance=\"high\" Text=\"Is not empty with quotation marks\" />\r\n  </Target>\r\n</Project>\r\n```\r\n\r\n```\r\nC:\\Projects\\quoted>C:\\Windows\\Microsoft.NET\\Framework64\\v2.0.50727\\MSBuild.exe quoted.proj\r\nMicrosoft (R) Build Engine Version 2.0.50727.9149\r\n[Microsoft .NET Framework, Version 2.0.50727.9174]\r\nCopyright (C) Microsoft Corporation 2005. All rights reserved.\r\n\r\nBuild started 12.9.2023 21.12.13.\r\n__________________________________________________\r\nProject \"C:\\Projects\\quoted\\quoted.proj\" (default targets):\r\n\r\nTarget Run:\r\n    Is empty without quotation marks\r\n    Is empty with quotation marks\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:00:00.26\r\n```\r\n\r\n```\r\n$ dotnet msbuild quoted.proj\r\nMSBuild version 17.8.0-preview-23367-03+0ff2a83e9 for .NET\r\n  Is empty without quotation marks\r\n  Is empty with quotation marks\r\n```\r\n\r\nPerhaps the documentation means you cannot compare to an empty unquoted string literal like `Condition=\"$(Property) == \"`.",
        "createdAt": "2023-09-12T18:14:25Z",
        "updatedAt": "2023-09-12T18:17:50Z",
        "author": {
          "login": "KalleOlaviNiemitalo"
        }
      },
      {
        "body": "This could also include formatting checks like [Prettier for XML](https://github.com/prettier/plugin-xml) does.\r\n\r\nIdeally, I'm thinking of full static code analysis for csproj, props, and targets files.",
        "createdAt": "2023-11-05T16:10:55Z",
        "updatedAt": "2023-11-05T16:10:55Z",
        "author": {
          "login": "Piedone"
        }
      },
      {
        "body": "Another possibility (in strict mode?) could be to help with Boolean properties. Properties of course have no type but in practice many are Boolean existing in a world where empty string is default. This can lead to ambiguity about what blank means, and since often we don't want to add a line to explicitly set a default, blank is treated as default. If that means blank is true, then properties end up with confusing negative names like say \"DoNotOptimize\". The obvious sources of errors here are the confusion of seeing a negative property to false, or assuming blank means true (or false) when it doesn't, or comparing against blank when it was set explicitly, or setting anything other than true or false as the value. \n\nYears ago when we wrote the original \"targets\" I tried to have a rule that either blank was assumed to be false or else the value was explicitly defaulted to \"true\", then comparisons were always and only against \"true\", \"false\" and \"\" never appeared in conditionals on these Booleans, and hopefully property names were not negative (in practice some were inherited from the old format and already were).\n\nA linter could possibly help by\n* flagging comparisons between a literal Boolean and empty string\n* inferring a property is Boolean (maybe indirectly) and tracking flow and doing something similar\n* flagging where a property held literal true or false but is set to anything else\n\nThis would of course be noisy. Perhaps the real answer is to have some way to annotate a property as Boolean with a default.\n\nNote of course that the conditional parser IIRC does have some special casing for Booleans for example you can negate: `\"'$(Optimize)' == !'$(Debug)'\"` ...IIRC",
        "createdAt": "2023-11-05T19:31:08Z",
        "updatedAt": "2023-11-05T19:34:49Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "Another linting ideas:\r\n* #348\r\n* no-op property overwrite (e.g. when .csproj sets the same property with the same value as already defined/inherited from Directory.Build.props). This would help keep projects minimal",
        "createdAt": "2024-01-17T08:47:12Z",
        "updatedAt": "2024-01-17T08:47:12Z",
        "author": {
          "login": "stan-sz"
        }
      },
      {
        "body": "Another linter idea: #6277",
        "createdAt": "2024-01-31T08:51:50Z",
        "updatedAt": "2024-01-31T08:51:50Z",
        "author": {
          "login": "stan-sz"
        }
      },
      {
        "body": "Another idea: #3976",
        "createdAt": "2024-02-13T09:55:58Z",
        "updatedAt": "2024-02-13T09:55:58Z",
        "author": {
          "login": "stan-sz"
        }
      },
      {
        "body": "Fail\\warn on property overwrite without Overwrite=\"true\" metadata.",
        "createdAt": "2024-02-13T17:23:29Z",
        "updatedAt": "2024-02-13T17:23:29Z",
        "author": {
          "login": "JustinSchneiderPBI"
        }
      },
      {
        "body": "Another idea:\r\n\r\nA colleague just ran into a case where a project specified `<TargetFrameworks>` (plural) that was silently overwritten by an imported `<TargetFramework>` (singular). ",
        "createdAt": "2024-03-04T18:47:03Z",
        "updatedAt": "2024-03-04T18:47:03Z",
        "author": {
          "login": "MattKotsenas"
        }
      },
      {
        "body": "Not sure if it's a bug, something to catch with a linter, or maybe if there's already a workaround, but a problem I'm noticing is that this is an error (MSB4035):\r\n\r\n```xml\r\n<ProjectReference Include=\"\" />\r\n```\r\n\r\nBut these are not errors or even warnings:\r\n```xml\r\n<ProjectReference Include=\"$(empty)\" />\r\n<ProjectReference Include=\" \" />\r\n```",
        "createdAt": "2024-03-20T22:34:05Z",
        "updatedAt": "2024-03-20T22:36:04Z",
        "author": {
          "login": "DaveCousineau"
        }
      }
    ]
  }
}