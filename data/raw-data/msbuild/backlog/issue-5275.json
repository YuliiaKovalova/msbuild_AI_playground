{
  "number": 5275,
  "title": "New string with empty metadata value chooses wrong constructor",
  "body": "When trying to create a new string and passing in a metadata value, MSBuild tries to bind the the constructor that takes no arguments.  Unfortunately `String` does not have a parameterless constructor and so you get an error.  MSBuild should be using `string.Empty` for these values but for some reason it goes for the wrong overload.\r\n\r\nThe workaround is to surround the expression with quotes to ensure that the correct overload is chosen.\r\n\r\nThe below hack is in place because its the only way to call instance methods on metadata values. \r\n(Related https://github.com/microsoft/msbuild/issues/1155)\r\n\r\n### Steps to reproduce\r\n\r\nEither include a project sample, attach a zipped project, or provide IDE / CLI steps to create the project and repro the behaviour. Example of a project sample:\r\n\r\nProject file\r\n```xml\r\n<Project>\r\n  <ItemGroup>\r\n    <None Include=\"SomeFolder\\**\"\r\n          Link=\"$([System.String]::new(%(RecursiveDir)).Replace(`foo`, `bar`))%(Filename)%(Extension)\" />\r\n  </ItemGroup>\r\n\r\n  <Target Name=\"Build\">\r\n    <Message Text=\"%(None.Identity)\" Importance=\"High\" />\r\n  </Target>\r\n</Project>\r\n```\r\n\r\nDirectory contents:\r\n```\r\n\u2502   test.proj\r\n\u2502\r\n\u2514\u2500\u2500\u2500SomeFolder\r\n        test.txt\r\n```\r\n\r\nCommand line\r\n```\r\nmsbuild /bl\r\n```\r\n### Expected behavior\r\nMSBuild creates a string and calls `.Replace()`.\r\n\r\n### Actual behavior\r\n```\r\nerror MSB4184: The expression \"[System.String]::new()\" cannot be evaluated. Attempted to access a missing method.\r\n```\r\n\r\n### Workaround\r\nYou can places quotes around `%(RecursiveDir)` to force MSBuild to use the overload of `new String()` that accepts a string.\r\n```diff\r\n- $([System.String]::new(%(RecursiveDir))\r\n+ $([System.String]::new(`%(RecursiveDir)`)\r\n```\r\n### Environment data\r\n`msbuild /version` output:\r\n\r\nOS info:\r\n\r\nIf applicable, version of the tool that invokes MSBuild (Visual Studio, dotnet CLI, etc):\r\n",
  "state": "CLOSED",
  "createdAt": "2020-04-13T20:12:14Z",
  "updatedAt": "2024-02-21T17:04:12Z",
  "closedAt": "2020-04-23T07:58:43Z",
  "author": {
    "login": "jeffkl"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "MSBuild 16.7 Preview 1"
  },
  "comments": {
    "nodes": [
      {
        "body": "@jeffkl technically this looks to be by design. ```RecursiveDir``` is empty so MSBuild tries to evaluate ```$([System.String]::new())``` which really does not bind to any string constructor.\r\n\r\n> MSBuild should be using string.Empty for these values but for some reason it goes for the wrong overload.\r\n\r\nThese props/metadata references are like C macros. They're pre-processed (textually replaced with their value) and then the resulting expression is evaluated. If the parameter expands to nothing, we're not passing any parameter.\r\n\r\n>The workaround is to surround the expression with quotes to ensure that the correct overload is chosen.\r\n\r\nSounds like a reasonable thing to do.\r\n\r\nThat said, it would be quite trivial to handle ```$([System.String]::new())``` internally and make it evaluate to an empty string if this is a useful pattern. I'll defer to @rainersigwald's expertise.\r\n\r\nAnd if Rainer disagrees with faking the parameterless ctor, we should at least optimize calling the one-parameter version. String doesn't have a ctor taking a string (duh!) so in expressions like ```$([System.String]::new(`Hello`)``` we coerce the argument to a char array and then call ```String(char[])``` via reflection, which is pretty lame.",
        "createdAt": "2020-04-20T10:54:37Z",
        "updatedAt": "2020-04-20T10:54:37Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "I think it's reasonable to return empty string on a no-arg constructor. It'd keep users from having to guard in cases like this (`'%(RecursiveDir)' != ''` would not be obvious IMO). @jeffkl, is that where you ran into this originally?\r\n\r\n> we should at least optimize calling the one-parameter version\r\n\r\nI'm completely on board with this too.",
        "createdAt": "2020-04-20T21:37:35Z",
        "updatedAt": "2020-04-20T21:37:35Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "A customer reported it in a round about way when adopting my static graph NuGet restore.  This was because we don't expand wildcards, which ended up making this metadata empty.  Given the workaround, I'd say its not very important to fix.  I just needed to log the issue in case anyone else ever hits it.\r\n\r\nThere's definitely confusing as to when you need to quote things and when you don't.  MSBuild doesn't enforce it so I always do as a best practice.\r\n\r\nI'm fine with closing as Won't Fix, it's up to you!",
        "createdAt": "2020-04-20T21:59:54Z",
        "updatedAt": "2020-04-20T21:59:54Z",
        "author": {
          "login": "jeffkl"
        }
      }
    ]
  }
}