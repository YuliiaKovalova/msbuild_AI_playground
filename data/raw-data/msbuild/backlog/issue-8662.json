{
  "number": 8662,
  "title": "[Feature Request]: Expose Static Graph to Central Loggers",
  "body": "### Summary\n\nWhen building with `/graph`, MSBuild [constructs a dependency graph](https://learn.microsoft.com/en-us/visualstudio/msbuild/build-process-overview?view=vs-2022#graph-option) of the project tree before scheduling builds.  This is a powerful concept that enables many new scenarios with MSBuild.\r\n\r\nToday, while this [`ProjectGraph`](https://github.com/dotnet/msbuild/blob/cb5e760644d04def33c0cafcaef2a6f496fc68cc/src/Build/Graph/ProjectGraph.cs#L27) is available to the build engine, it is not exposed via the `ILogger`-based extensibility model.  Currently, loggers are only delivered a textual status message, e.g. `\"Static graph loaded in 0.906 seconds: 4 nodes, 3 edges\"`.\r\n\r\nExposing the project graph up-front as a first-class concept to the logger would make it possible to do some very cool things (and do so easily), including:\r\n- Implementing progress tracking and visualizing progress across the whole project tree\r\n- Report telemetry on the shape and size of the project tree built by developers\r\n- Apply architectural review and warn when undesired project references are introduced\r\n\r\nSome of these are of course possible today via other means, even in the logger, but often this requires parsing status messages or project files directly.  Exposing the `ProjectGraph` directly to loggers will help complete the Static Graph vision and enable new extensibility based on this capability.\n\n### Background and Motivation\n\nI began thinking about this problem when I started working on an MSBuild logger that would provide progress tracking and help developers understand the impact of their changes on incremental builds.  I was hoping to better inform developers by visualizing what sub-trees of the project graph were getting rebuilt after a change.\r\n\r\nHaving the rich [`Microsoft.Build.Graph.ProjectGraph`](https://github.com/dotnet/msbuild/blob/cb5e760644d04def33c0cafcaef2a6f496fc68cc/src/Build/Graph/ProjectGraph.cs#L27) type available would have made this almost a trivial task.\n\n### Proposed Feature\n\nThe high-level proposal is to introduce a new `StaticGraphLoadedEventHandler` on `IEventSource`, and deliver the `ProjectGraph` object to it.\r\n\r\n### Proposed API\r\n\r\n```diff\r\nnamespace Microsoft.Build.Framework\r\n{\r\n+   public class StaticGraphLoadedEventArgs : BuildEventArgs\r\n+   {\r\n+       public TimeSpan Duration { get; }\r\n+       public object ProjectGraph { get; }\r\n+   }\r\n\r\n+   public delegate void StaticGraphLoadedEventHandler(object sender, StaticGraphLoadedEventArgs e);\r\n\r\n    public interface IEventSource\r\n    {\r\n+       event StaticGraphLoadedEventHandler GraphLoaded;\r\n    }\r\n}\r\n```\r\n\r\nNote that the `StaticGraphLoadedEventArgs.ProjectGraph` property is exposed as a `System.Object`, as the actual `ProjectGraph` type is in `Microsoft.Build.dll`.  Ideally, the type could be exposed through `Microsoft.Build.Framework.dll` since it is fundamental to MSBuild, but I also think it's perfectly reasonable for logger _implementations_ to take a dependency on `Microsoft.Build.dll` without forcing the type directly onto `ILogger` in `Microsoft.Build.Framework.dll`.\r\n\r\nI would also note that it probably makes the most sense for central loggers to register for the event (rather than distributed loggers).  Such a logger would receive the event, cast the event argument to a `ProjectGraph`, and cache this for the lifetime of the logger.  Then, any build events received by the logger could be evaluated in the context of that static graph.\r\n\r\nBuilds not opting-in to `/graph` would not receive this event; it is a \"value-added\" scenario for Static Graph users.\n\n### Alternative Designs\n\n_No response_",
  "state": "OPEN",
  "createdAt": "2023-04-13T17:01:43Z",
  "updatedAt": "2024-01-31T08:14:34Z",
  "closedAt": null,
  "author": {
    "login": "ryanerdmann"
  },
  "labels": [
    "backlog",
    "Feature Request",
    "Area: Static Graph",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "@dfederm could you please take a look?",
        "createdAt": "2023-04-18T14:17:38Z",
        "updatedAt": "2023-04-18T14:17:38Z",
        "author": {
          "login": "AR-May"
        }
      },
      {
        "body": "At first blush, there would be a pretty big problem with exposing ProjectGraph to loggers, as it's mutable, or at least the ProjectInstances you can get at are.\r\n\r\nFor this same reason is why I assume project started events don't get the ProjectInstance.",
        "createdAt": "2023-04-18T14:37:19Z",
        "updatedAt": "2023-04-18T14:37:19Z",
        "author": {
          "login": "dfederm"
        }
      },
      {
        "body": "There might be value in returning _a_ structured representation of the graph, even if it differs from the underlying one.",
        "createdAt": "2023-04-18T15:27:27Z",
        "updatedAt": "2023-04-18T15:27:27Z",
        "author": {
          "login": "rainersigwald"
        }
      }
    ]
  }
}