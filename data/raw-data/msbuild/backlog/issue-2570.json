{
  "number": 2570,
  "title": "MSBuild fails when building solution with project dependencies",
  "body": "The build for my solution, which contains multiple projects, suddenly appears to be broken and the cause of the issue isn't clear. All of the projects in the solution target the same framework (4.5.1), however some of the projects' dependencies might be targeting an earlier version of the framework. As of last week, we were able to successfully build solutions that fall under this scenario. Starting last Thursday, the builds appear to be broken without any changes to the build server or the solution.\r\n\r\nTo illustrate and remove some of the complexities with our production setup, I created a sample solution which mimics the behaviour.\r\n\r\n## Project structure: \r\n\r\n- CBI Solution\r\n    - CBI website\r\n    - CBI Implementation Library\r\n    - CBI Core library, defining the interfaces\r\n\r\nTarget Framework Version for the website and class libraries is 4.5.1\r\n\r\n## Replication Steps\r\n\r\n**Solution 1**\r\nGithub repo: [https://github.com/NikitaGolovko/Solution1.git](https://github.com/NikitaGolovko/Solution1.git)\r\n\r\nBuild, using MSBuild 14. My command is: \r\n\r\n`msbuild.exe \"%SOLUTION1PATH%\\CBILite.sln\" /p:platform=\"Any CPU\" /p:configuration=\"Release\" /v:d`\r\n\r\n**Output**\r\n\r\n  ```\r\nC:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\aspnet_compiler.exe -v /localhost_61806 -p cbi\\ -u -f PrecompiledWeb\\lo\r\n  calhost_61806\\\r\n  Microsoft (R) ASP.NET Compilation Tool version 4.7.2046.0\r\n  Utility to precompile an ASP.NET application\r\n  Copyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n\r\nDone executing task \"AspNetCompiler\".\r\nTask \"Message\" skipped, due to false condition; (!((false) or ('$(AspNetConfiguration)' == 'Debug') or ('$(AspNetConfig\r\nuration)' == 'Release'))) was evaluated as (!((false) or ('Release' == 'Debug') or ('Release' == 'Release'))).\r\nDone building target \"Build\" in project \"cbi.metaproj\".\r\nDone Building Project \"D:\\Work\\DotNet\\Nikita\\Solution1\\cbi.metaproj\" (default targets).\r\n\r\nDone executing task \"MSBuild\".\r\nDone building target \"Build\" in project \"CBILite.sln\".\r\nDone Building Project \"D:\\Work\\DotNet\\Nikita\\Solution1\\CBILite.sln\" (default targets).\r\n\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:00:03.10\r\n\r\n```\r\nFull output is located here: [https://github.com/NikitaGolovko/Solution1/blob/master/MSBuild_Output.txt](https://github.com/NikitaGolovko/Solution1/blob/master/MSBuild_Output.txt)\r\n\r\n\r\n**Solution 2**\r\n\r\nGithub Repo: [https://github.com/NikitaGolovko/Solution2.git](https://github.com/NikitaGolovko/Solution2.git)\r\n\r\nSolution is nearly identical to the Solution1, with the only exception being a dependency for Unity in CBI Implementation library. To simplify the process and eliminate the nuget restore step, I have included nuget packages with the solution.\r\n\r\nBuild, using MSBuild 14. My command is: \r\n\r\n`msbuild.exe \"%SOLUTION2PATH%\\CBILite.sln\" /p:platform=\"Any CPU\" /p:configuration=\"Release\" /v:d`\r\n\r\n**Output**\r\n\r\n```\r\n  C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\aspnet_compiler.exe -v /localhost_61806 -p cbi\\ -u -f PrecompiledWeb\\lo\r\n  calhost_61806\\\r\n  Microsoft (R) ASP.NET Compilation Tool version 4.7.2046.0\r\n  Utility to precompile an ASP.NET application\r\n  Copyright (C) Microsoft Corporation. All rights reserved.\r\n\r\nD:\\Work\\DotNet\\Nikita\\Solution2\\cbi\\Index.aspx.vb(5): error BC30002: Type 'CBILite.Calculator' is not defined. [D:\\Work\r\n\\DotNet\\Nikita\\Solution2\\cbi.metaproj]\r\n  The command exited with code 1.\r\n\r\nDone executing task \"AspNetCompiler\" -- FAILED.\r\nDone building target \"Build\" in project \"cbi.metaproj\" -- FAILED.\r\nDone Building Project \"D:\\Work\\DotNet\\Nikita\\Solution2\\cbi.metaproj\" (default targets) -- FAILED.\r\n\r\nDone executing task \"MSBuild\" -- FAILED.\r\nDone building target \"Build\" in project \"CBILite.sln\" -- FAILED.\r\nDone Building Project \"D:\\Work\\DotNet\\Nikita\\Solution2\\CBILite.sln\" (default targets) -- FAILED.\r\n\r\n\r\nBuild FAILED.\r\n\r\n```\r\nFull output is located here: https://github.com/NikitaGolovko/Solution2/blob/master/MSBuild_Output.txt\r\n\r\n\r\n## Observations\r\n\r\n**Bin folder**\r\n    When looking in the bin folder of the website, I notice that CBILite.dll is missing after the build for Solution2, but present in Solution1.\r\n\r\n**TargetFrameworkVersion**\r\n    Passing _TargetFrameworkVersion_ in the MSBuild arguments does not appear to influence the build. I have attempted to pass 4.5, 4.5.1 to no avail. **HOWEVER** passing 3.5 results in the successful build. This is extremely strange.\r\n\r\n**Metaproj**\r\n    When comparing Metaproj files generated for both solutions, the only observable and seemingly important difference is the lack of the _TargetFrameworkVersion_ element. Solution1 (without dependencies), contains _<TargetFrameworkVersion>v.4.0</TargetFrameworkVersion>_ element. Solution2 (with the dependency) does not. \r\nI didn't include metaproj files in the repo, but can share them if needed.\r\n\r\n## Additional thoughts\r\n\r\nThe issue manifested itself rather suddenly and seems to be affecting most of our solutions that have mixed projects (C#/VB + website). Web Projects continue to function normally. \r\n\r\nI have exhausted all my options at this point and haven't been able to find a solution. \r\n\r\nIssues #2191 and #1915 might be related, but I am uncertain, since they're targeting different frameworks and steps described in those issues are lacking some details.\r\n\r\n",
  "state": "OPEN",
  "createdAt": "2017-09-29T15:30:14Z",
  "updatedAt": "2024-02-21T16:35:39Z",
  "closedAt": null,
  "author": {
    "login": "NikitaGolovko"
  },
  "labels": [
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "any update on this?",
        "createdAt": "2017-12-17T01:46:28Z",
        "updatedAt": "2017-12-17T01:46:28Z",
        "author": {
          "login": "SimonCropp"
        }
      },
      {
        "body": "any update on this?",
        "createdAt": "2018-09-30T22:49:28Z",
        "updatedAt": "2018-09-30T22:49:28Z",
        "author": {
          "login": "imakowski"
        }
      },
      {
        "body": "any update on this?",
        "createdAt": "2018-10-11T11:15:03Z",
        "updatedAt": "2018-10-11T11:15:03Z",
        "author": {
          "login": "senhorlopes"
        }
      },
      {
        "body": "+1 experiencing the same issue @NikitaGolovko did you manage to work around the issue?",
        "createdAt": "2022-06-30T06:51:07Z",
        "updatedAt": "2022-06-30T06:51:07Z",
        "author": {
          "login": "broomfn"
        }
      }
    ]
  }
}