{
  "number": 4200,
  "title": "MAX_PATH limitations still impact .NET Core",
  "body": "On .NET Core, the managed file system API have some tricks to support long paths irrespective of the application manifest (and machine configuration).\r\n\r\nHowever, on .NET Core\r\n\r\n* MSBuild is hosted by dotnet.exe, which does not opt in to long paths in its manifest\r\n* MSBuild does a lot of file system work by P/Invoking straight to Win32\r\n\r\nThe fixes here are either:\r\n\r\n1. Use the x-plat, portable file system code on .NET Core for Windows as on .NET core for other OSes.\r\n2. Get dotnet.exe manifest changed.\r\n\r\n(1) would work for all Windows machines running .NET Core msbuild, so that's my preference but I may not understand all the ramifications of doing that.\r\n\r\n\r\n",
  "state": "OPEN",
  "createdAt": "2019-02-27T01:48:21Z",
  "updatedAt": "2024-02-21T16:31:53Z",
  "closedAt": null,
  "author": {
    "login": "nguerrera"
  },
  "labels": [
    ".NET Core",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Backlog"
  },
  "comments": {
    "nodes": [
      {
        "body": "Filed https://github.com/dotnet/core-setup/issues/5262 for (2)\r\n\r\n",
        "createdAt": "2019-02-27T01:53:22Z",
        "updatedAt": "2019-02-27T01:53:22Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "Another approach would be to start using apphosts for the tools in the SDK so that MSBuild.exe can exist on core and have its own manifest. One problem with this is that it breaks running `some/unzipped/path/to/dotnet build` because the apphost won't find a globally installed runtime to use. We considered setting DOTNET_ROOT in the cli in all cases, but that has some drawbacks.",
        "createdAt": "2019-02-27T01:53:25Z",
        "updatedAt": "2019-02-27T01:53:25Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "I believe that (at the time of the initial port) we found that switching entirely to the managed APIs was a perf hit we weren't willing to take. That is probably better now. There is also the \"what subtle behavior differences will ensue?\" question; there are some fairly-tricky filesystem operations done via P/Invoke, especially in the `Copy` task.",
        "createdAt": "2019-02-27T16:07:12Z",
        "updatedAt": "2019-02-27T16:07:12Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "cc @danmosemsft @JeremyKuhne ",
        "createdAt": "2019-02-27T16:17:53Z",
        "updatedAt": "2019-02-27T16:17:53Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "Perf is definitely not a problem now. I will provide _any_ assistance you need to get off of hand-rolled IO. Together we can avoid much more subtle issues. :) This, for example, has a few:\r\n\r\nhttps://github.com/Microsoft/msbuild/blob/b2db71bebaae4f54f7236ca303e2b0a14aca1a0d/src/Shared/NativeMethodsShared.cs#L1297-L1304\r\n\r\n1. You can relatively easily blow out the stack (paths can be 64KB)\r\n2. The length can change from one call to the next, but you're not checking the return value (yay current working directory)\r\n3. In the same vein, it can fail on the second call\r\n4. It won't handle `\\\\?\\` correctly\r\n5. Equality comparison isn't as efficient as it could be\r\n6. Calling twice is expensive when it is _very_ rare that you'll need to- you've already reserved the buffer space\r\n\r\nI've also created newer APIs with MSBuild explicitly in mind, notably (in this case):\r\n\r\n``` C#\r\npublic static string GetFullPath (string path, string basePath);\r\n```\r\n\r\nWith the idea that MSBuild would use it like `string itemFullPath = GetFullPath(itemInclude, projectFileDirectory);`. That would eliminate the dependency on current working directory- and that API handles device syntax and UNCs correctly, which is non-trivial (e.g. `\\\\?\\UNC\\Server\\Share` + `..\\my\\..\\..\\relative\\.\\path.txt`.\r\n\r\nNo matter what happens here I always stand ready to assist with path/io stuff. Don't hesitate to loop me in on issues, PRs, etc. \ud83d\ude01 ",
        "createdAt": "2019-02-27T18:29:44Z",
        "updatedAt": "2019-02-27T18:29:44Z",
        "author": {
          "login": "JeremyKuhne"
        }
      },
      {
        "body": "> That would eliminate the dependency on current working directory\r\n\r\nI don't know if we can ever eliminate this. It's basically a contract to (3rd party) tasks that CWD will be in project directory. :(",
        "createdAt": "2019-02-27T19:01:59Z",
        "updatedAt": "2019-02-27T19:02:35Z",
        "author": {
          "login": "nguerrera"
        }
      },
      {
        "body": "> I don't know if we can ever eliminate this. It's basically a contract to (3rd party) tasks that CWD will be in project directory. :(\r\n\r\nYeah, you'd still have to set it for compat, but MSBuild itself won't have to depend on it for resolution. Gotta keep crawling along. I'm on a multi-decade quest to mitigate MAX_PATH and Get/SetCurrentDirectory. \ud83d\ude06 \r\n\r\nWindows recommends not using [`GetFullPathName()`](https://docs.microsoft.com/en-us/windows/desktop/api/fileapi/nf-fileapi-getfullpathnamew) (and Get/SetCurrentDirectory) but unfortunately doesn't provide an alternative way to resolve relative paths. This new .NET API is part of my answer.",
        "createdAt": "2019-02-27T19:13:40Z",
        "updatedAt": "2019-02-27T19:13:40Z",
        "author": {
          "login": "JeremyKuhne"
        }
      },
      {
        "body": "So, I've ran into a similar issue recently, and it was quite a frustrating experience (the resolution required debugging MSBuild source code).\r\n\r\nNow, in my case, the problem was caused by the fact the standard generated host (the `bin\\Debug\\net5.0\\Program.exe` one) does not in fact have the manifest setting enabling long path support set. This can be confirmed with a very simple repro:\r\n```cmd\r\n# The latest SDK, creates a net5.0 project\r\n> dotnet new console -n \"LongPathSupport\" \r\n```\r\n```C#\r\nusing System;\r\nusing System.Runtime.InteropServices;\r\n\r\nnamespace LongPathSupport\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            Console.WriteLine($\"Long path support is enabled: {RtlAreLongPathsEnabled() != 0}\");\r\n        }\r\n\t\t\r\n        [DllImport(\"ntdll.dll\", CallingConvention = CallingConvention.StdCall)]\r\n\tpublic static extern byte RtlAreLongPathsEnabled();\r\n    }\r\n}\r\n```\r\n```cmd\r\n> dotnet build\r\n> bin\\Debug\\net5.0\\LongPathSupport.exe\r\nLong path support is enabled: False\r\n> dotnet bin\\Debug\\net5.0\\LongPathSupport.dll\r\nLong path support is enabled: True\r\n```\r\n\r\nIn my particular case that meant I was getting strange \"could not find the project file `..\\..\\..\\System.Drawing.Common.csproj`\" errors while trying to analyze `dotnet/runtime` with Roslyn Workspaces.\r\n\r\nNow, it could be argued that the proper fix would be to have the minihost supplied with a proper manifest (and I will be sure to open an issue about that against the proper repository), but at the same time, this whole thing could've been avoided if MSBuild was using `System.IO` on Windows as it does on other platforms (see `NativeMethodsShared.cs`). There were performance concerns raised with this approach, and they might still be valid, but I also think there definitely is room for improvement as the current experience for people who happen to run into these issues is not good at all.",
        "createdAt": "2020-10-10T17:25:51Z",
        "updatedAt": "2020-10-10T18:20:49Z",
        "author": {
          "login": "SingleAccretion"
        }
      }
    ]
  }
}