{
  "number": 6176,
  "title": "Replace CopyOnReadEnumerable with immutable collections",
  "body": "The whole machinery around ProjectPropertyInstanceEnumeratorProxy, ProjectItemInstanceEnumeratorProxy, ItemDictionary<T> and CopyOnReadEnumerable could really benefit from immutable collections. \r\n\r\nA lot of unnecessary work and allocations are happening to enumerate properties and items.",
  "state": "CLOSED",
  "createdAt": "2021-02-21T03:12:04Z",
  "updatedAt": "2024-02-21T14:14:51Z",
  "closedAt": "2021-12-10T09:23:28Z",
  "author": {
    "login": "KirillOsenkov"
  },
  "labels": [
    "backlog",
    "Area: Performance",
    "Priority:2",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "ladipro"
      }
    ]
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "I pulled on the string some more and ended up in ProjectInstance, where `_items` is set in several places, including Translator. It might make sense to just use a lighterweight read-only collection in situations where items are deserialized such that we don't have to clone and use CopyOnWrite. Maybe seal the items themselves somehow (like use TaskItemData) to avoid wrapping each item in ProjectItemInstance.TaskItem.",
        "createdAt": "2021-02-21T03:25:04Z",
        "updatedAt": "2021-02-21T03:25:04Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "Russian Dolls:\r\n![image](https://user-images.githubusercontent.com/679326/108614685-94ee8f80-73b1-11eb-8eec-5e851ab9837a.png)\r\n",
        "createdAt": "2021-02-21T03:26:57Z",
        "updatedAt": "2021-02-21T03:26:57Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "Labeling with size:1 as the cost of the initial investigation. Will open a follow-up issue if more work is identified.",
        "createdAt": "2021-10-12T12:19:49Z",
        "updatedAt": "2021-10-12T12:19:49Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "@KirillOsenkov I have eliminated redundant deep cloning in the attached PR. I don't think it's worth optimizing further as this work/allocations are relatively minor. When building a medium sized solution with `/v:diag` we spend ~80 ms and allocate ~1.2 MB in `BaseConsoleLogger.ExtractItemList` and `BaseConsoleLogger.ExtractPropertyList` combined. For both metrics this is about 0.1% of total.",
        "createdAt": "2021-12-10T12:44:45Z",
        "updatedAt": "2021-12-10T12:44:45Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "@ladipro nice, thanks!\r\n\r\nI've also found https://source.dot.net/#Microsoft.Build/BackEnd/Components/Logging/TargetLoggingContext.cs,d99a8dbf081f1a4d,references\r\n\r\nShould we do the same thing for target items too? Shall we file a separate issue?",
        "createdAt": "2021-12-10T18:37:48Z",
        "updatedAt": "2021-12-10T18:37:48Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "Also see related:\r\nhttps://github.com/dotnet/msbuild/issues/6704\r\n\r\nSince items aren't truly immutable, we have a bug where we capture the live data structure for logging instead of capturing an immutable snapshot. If the core data structures are truly immutable, we can give an immutable snapshot to loggers without any copying whatsoever, this will also avoid allocations.",
        "createdAt": "2021-12-10T18:39:52Z",
        "updatedAt": "2021-12-10T18:39:52Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "Specifically, see this comment:\r\nhttps://github.com/dotnet/msbuild/blob/a59d7a533c9154e8aa99b823625e7eff199ddf1a/src/Build/Logging/BinaryLogger/BuildEventArgsWriter.cs#L744-L753",
        "createdAt": "2021-12-10T18:41:30Z",
        "updatedAt": "2021-12-10T18:41:30Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "> Should we do the same thing for target items too? Shall we file a separate issue?\r\n\r\nYes to both! If you file an issue, may I ask you to include a high-level description of the MSBuild logging infra? How log events flow today and the shortcomings / inefficiencies you are aware of.",
        "createdAt": "2021-12-10T20:59:24Z",
        "updatedAt": "2021-12-10T20:59:24Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "OK here you go: https://github.com/dotnet/msbuild/issues/7142",
        "createdAt": "2021-12-10T22:51:52Z",
        "updatedAt": "2021-12-10T22:51:52Z",
        "author": {
          "login": "KirillOsenkov"
        }
      }
    ]
  }
}