{
  "number": 1468,
  "title": "Audit ***DependsOn properties to not overwrite previous value",
  "body": "See for example PrepareResourceNamesDependsOn:\r\nhttp://source.roslyn.io/#MSBuildFiles/C/ProgramFiles(x86)/MSBuild/14.0/bin_/amd64/Microsoft.Common.CurrentVersion.targets,2473\r\n\r\n```\r\n<PrepareResourceNamesDependsOn>\r\n      AssignTargetPaths;\r\n      SplitResourcesByCulture;\r\n      CreateManifestResourceNames;\r\n      CreateCustomManifestResourceNames\r\n</PrepareResourceNamesDependsOn>\r\n```\r\n\r\nSuppose you have a .targets file that wants to insert its targets like this:\r\n\r\n```\r\n<PrepareResourceNamesDependsOn>\r\n      GenerateRuleSourceFromXaml;\r\n      $(PrepareResourceNamesDependsOn)\r\n</PrepareResourceNamesDependsOn>\r\n```\r\n\r\nIf you happen to include your .targets file after Microsoft.Common.targets, then it's going to work as expected: PrepareResourceNames will trigger your target (GenerateRuleSourceFromXaml in this case).\r\n\r\nHowever if you accidentally include your .targets file *before* Microsoft.Common.targets, your value for the PrepareResourceNamesDependsOn will be silently overwritten with the default value, and your target will run at an arbitrary later time, failing mysteriously.\r\n\r\nThis is unfortunately probably one of the biggest fundamental problems of MSBuild, with its global mutable state and multiple passes where order of things influences multiple assignments and other things. The fact that a property can be assigned multiple times in different orders and the last one wins, while all previous silently lose, is a general problem that I don't know how to alleviate.\r\n\r\nBut in this particular case my suggestion is to audit all Microsoft targets and change the ***DependsOn properties to include its previous value, so that at least in this case the order of including the .targets file doesn't matter.",
  "state": "CLOSED",
  "createdAt": "2016-12-12T08:36:00Z",
  "updatedAt": "2024-02-21T17:23:29Z",
  "closedAt": "2019-11-26T21:02:13Z",
  "author": {
    "login": "KirillOsenkov"
  },
  "labels": [
    "Area: Debuggability",
    "Area: Common Targets",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "benvillalobos"
      }
    ]
  },
  "milestone": {
    "title": "MSBuild 16.6 Preview1"
  },
  "comments": {
    "nodes": [
      {
        "body": "Or maybe all these properties should really be items, so that adding an item is more declarative and not so imperative. However that ship has sailed (you need to keep existing properties for backwards compatibility). However maybe introducing another extensibility point which is items may be interesting to consider.",
        "createdAt": "2016-12-12T08:38:14Z",
        "updatedAt": "2016-12-12T08:38:14Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "This issue currently makes it impossible to use custom pre-compile targets with the new dotnet tools preview.\r\n\r\nIn particular, with `1.0.0-preview4-004233`, running `dotnet new -t lib` creates the following .csproj:\r\n```csproj\r\n<Project Sdk=\"Microsoft.NET.Sdk\" ToolsVersion=\"15.0\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>netstandard1.4</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <Compile Include=\"**\\*.cs\" />\r\n    <EmbeddedResource Include=\"**\\*.resx\" />\r\n  </ItemGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"NETStandard.Library\" Version=\"1.6\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\r\n\r\nTrying to add targets to `CoreCompileDependsOn` as below:\r\n\r\n```csproj\r\n  <PropertyGroup>\r\n    <CoreCompileDependsOn>\r\n      MyPreCompileTarget;\r\n      $(CoreCompileDependsOn)\r\n    </CoreCompileDependsOn>\r\n  </PropertyGroup>\r\n```\r\n\r\nThis fails because when building with `dotnet build`, the file `Microsoft.Common.CurrentVersion.targets` is automatically imported *after* the contents of the csproj, and https://github.com/Microsoft/msbuild/blob/9fb136160ab2f828e2350227dc06ac8cf1d1695d/src/XMakeTasks/Microsoft.CSharp.CurrentVersion.targets#L165 overwrites the definition.\r\n\r\nI'm currently working around the issue by manually patching the file:\r\n\r\n```diff\r\ndiff --git a/Microsoft.CSharp.CurrentVersion.targets b/Microsoft.CSharp.CurrentVersion.targets\r\nindex 705954a..f5f5a16 100644\r\n--- a/Microsoft.CSharp.CurrentVersion.targets\r\n+++ b/Microsoft.CSharp.CurrentVersion.targets\r\n@@ -162,7 +162,7 @@ Copyright (C) Microsoft Corporation. All rights reserved.\r\n     </ItemGroup>\r\n\r\n     <PropertyGroup>\r\n-        <CoreCompileDependsOn>_ComputeNonExistentFileProperty;ResolveCodeAnalysisRuleSet</CoreCompileDependsOn>\r\n+        <CoreCompileDependsOn>_ComputeNonExistentFileProperty;ResolveCodeAnalysisRuleSet;$(CoreCompileDependsOn)</CoreCompileDependsOn>\r\n         <ExportWinMDFile Condition=\"'$(ExportWinMDFile)' == '' and '$(OutputType)' == 'WinMDObj'\">true</ExportWinMDFile>\r\n     </PropertyGroup>\r\n```\r\n\r\nBut it would be super cool to get this into the next preview release! I'm taking a look at migrating some of our projects to .NET Core and this is one of the biggest blocking issues right now.",
        "createdAt": "2016-12-28T23:49:36Z",
        "updatedAt": "2016-12-28T23:49:36Z",
        "author": {
          "login": "anttirt"
        }
      },
      {
        "body": "The design we have settled on is allowing users to remove the `Sdk` attribute from the project and specify the location of the import instead.  The project-level `Sdk` attribute implicitly adds imports at the top and bottom which does not allow users to control them.  In the next preview, you'll be able to have a project that looks like this:\r\n\r\n```xml\r\n<Project ToolsVersion=\"15.0\">\r\n\r\n  <Import Project=\"Sdk\\Sdk.props\" Sdk=\"Microsoft.NET.Sdk\" />\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>netstandard1.4</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <Compile Include=\"**\\*.cs\" />\r\n    <EmbeddedResource Include=\"**\\*.resx\" />\r\n  </ItemGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"NETStandard.Library\" Version=\"1.6\" />\r\n  </ItemGroup>\r\n\r\n  <Import Project=\"Sdk\\Sdk.targets\" Sdk=\"Microsoft.NET.Sdk\" />\r\n  \r\n</Project>\r\n```\r\n\r\nThis would allow you to define ItemGroups and PropertyGroups before/after any of the imports.  The removal of the project-level `Sdk` attribute and addition of the `<Import />` will be a manual process.  We think a majority of users will stick with the default and only power users will want full control.\r\n\r\nDoes this design sound good?",
        "createdAt": "2017-01-03T17:47:43Z",
        "updatedAt": "2017-01-03T17:47:43Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "The design would allow someone to work around the issue here, but it would be better to also fix the issue with our definition of CoreCompileDependsOn and any other similar properties.",
        "createdAt": "2017-01-03T18:12:53Z",
        "updatedAt": "2017-01-03T18:12:53Z",
        "author": {
          "login": "dsplaisted"
        }
      },
      {
        "body": "@jeffkl this is good, but it feels orthogonal to the problem I described above. Keep in mind that the problem I faced was with the old projects where I had full control over the order of imports. Precisely that is the issue here: by having *DependsOn not recursively mention itself we depend on the order of inclusion.\r\n\r\nIf all *DependsOn properties are augmented to mention themselves we can lessen the dependency on the order of imports.\r\n\r\nOf course at least having the ability to control import order with SDKs is a welcome change.",
        "createdAt": "2017-01-03T18:29:05Z",
        "updatedAt": "2017-01-03T18:29:05Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "Okay sorry I misunderstood.  I agree, all `*DependsOn` should be additive and not clear the list.",
        "createdAt": "2017-01-03T18:37:00Z",
        "updatedAt": "2017-01-03T18:37:00Z",
        "author": {
          "login": "jeffkl"
        }
      },
      {
        "body": "> CoreCompileDependsOn \r\n\r\nThis one in particular is quite important.\r\n\r\nAlso, WRT to the ship having sailed to fix this, I think the following potentially trivial change on the common targets would completely solve the issue moving forward:\r\n\r\n```\r\n<CoreCompile DependsOnTargets=\"$(CoreCompileDependsOn);@(CoreCompileDependsOn)\" ...>\r\n  ...\r\n</CoreCompile>\r\n```\r\n\r\nMaybe all targets with a `*DependsOn` should also append `@(*DependsOn)` by convention?",
        "createdAt": "2017-06-02T18:23:38Z",
        "updatedAt": "2017-06-02T18:24:11Z",
        "author": {
          "login": "kzu"
        }
      },
      {
        "body": "I second this.\r\n\r\nWe append and prepend some custom tasks on `CoreCompileDependsOn` and `CompileDependsOn`. Doesn't work on net standard projects",
        "createdAt": "2017-11-15T13:28:59Z",
        "updatedAt": "2017-11-15T13:28:59Z",
        "author": {
          "login": "StephaneDelcroix"
        }
      },
      {
        "body": "The workaround for me is to use `BeforeTargets=\"BeforeCompile\"` and `AfterTargets=\"AfterCompile\"`",
        "createdAt": "2017-11-15T13:42:37Z",
        "updatedAt": "2017-11-15T13:42:37Z",
        "author": {
          "login": "StephaneDelcroix"
        }
      },
      {
        "body": "I ran into this again:\r\nhttps://github.com/Microsoft/msbuild/blob/50639058f947ef3b21075cb110f06913124d2942/src/Tasks/Microsoft.CSharp.CurrentVersion.targets#L165\r\n\r\nThis was overwriting whatever value `CoreCompileDependsOn` was set to previously in the evaluation process.",
        "createdAt": "2018-10-11T23:45:33Z",
        "updatedAt": "2018-10-11T23:45:33Z",
        "author": {
          "login": "KirillOsenkov"
        }
      }
    ]
  }
}