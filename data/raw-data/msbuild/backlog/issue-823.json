{
  "number": 823,
  "title": "Item replacement from tasks",
  "body": "Currently using a task to replace all or some of set of existing items requires assigning to temporary items, removing, and re-adding:\n\n``` xml\n<AssignLinkMetadata Items=\"@(EmbeddedResource)\" Condition=\"'@(EmbeddedResource)' != '' and '%(EmbeddedResource.DefiningProjectFullPath)' != '$(MSBuildProjectFullPath)'\">\n    <Output TaskParameter=\"OutputItems\" ItemName=\"_EmbeddedResourceWithLinkAssigned\" />\n</AssignLinkMetadata>\n<ItemGroup>\n    <EmbeddedResource Remove=\"@(_EmbeddedResourceWithLinkAssigned)\" />\n    <EmbeddedResource Include=\"@(_EmbeddedResourceWithLinkAssigned)\" />\n    <_EmbeddedResourceWithLinkAssigned Remove=\"@(_EmbeddedResourceWithLinkAssigned)\" />\n</ItemGroup>\n```\n\nA `Replace` option on the `Output` would simplify this and eliminate the temporary items:\n\n``` xml\n<AssignLinkMetadata Items=\"@(EmbeddedResource)\" Condition=\"'@(EmbeddedResource)' != '' and '%(EmbeddedResource.DefiningProjectFullPath)' != '$(MSBuildProjectFullPath)'\">\n    <Output TaskParameter=\"OutputItems\" ItemName=\"EmbeddedResource\" Replace=\"true\" />\n</AssignLinkMetadata>\n```\n",
  "state": "OPEN",
  "createdAt": "2016-07-26T20:56:20Z",
  "updatedAt": "2024-02-21T16:38:24Z",
  "closedAt": null,
  "author": {
    "login": "mhutch"
  },
  "labels": [
    "needs-design",
    "Feature Request",
    "Area: Language",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": {
    "title": "Backlog"
  },
  "comments": {
    "nodes": [
      {
        "body": "This sounds like a duplicate of #733. The task output part is interesting, though. It fits better with a mental model of \"replacing\" items rather than updating them in place.\n",
        "createdAt": "2016-07-26T21:07:50Z",
        "updatedAt": "2016-07-26T21:07:50Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Removed the duplicate part :)\n",
        "createdAt": "2016-07-26T21:10:02Z",
        "updatedAt": "2016-07-26T21:10:02Z",
        "author": {
          "login": "mhutch"
        }
      },
      {
        "body": "cc @cdmihai \n",
        "createdAt": "2016-07-26T21:11:47Z",
        "updatedAt": "2016-07-26T21:11:47Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Sounds useful indeed.\n\nInteresting observations:\n- would item definition groups apply to the replaced items? I guess so.\n- if a task with replace produces a new item, I suppose it's added. In this case the behaviour is something like ReplaceOrAdd\n- the task now has to decide whether to preserve previous metadata or not. This might be error prone if task writers create new items by cloning the previous ones and forgetting to migrate over previous metadata.\n",
        "createdAt": "2016-07-27T01:14:15Z",
        "updatedAt": "2016-07-27T01:15:19Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "- Do item definition groups normally apply to output items? I assumed they didn't.\n- Yes, I just thought it was fine for the \"OrAdd\" to be implicit.\n- I think that's up to the task though. What if it wants to _remove_ metadata?\n",
        "createdAt": "2016-07-28T00:55:42Z",
        "updatedAt": "2016-07-28T00:55:42Z",
        "author": {
          "login": "mhutch"
        }
      },
      {
        "body": "> Do item definition groups normally apply to output items? I assumed they didn't.\n\nApparently they do. \n\n``` xml\n  <ItemDefinitionGroup>\n    <Foo>\n      <m1>metadata</m1>\n    </Foo>\n  </ItemDefinitionGroup>\n  <ItemGroup>\n    <Foo Include=\"a\" />\n  </ItemGroup>\n\n  <UsingTask TaskName=\"Hello\" TaskFactory=\"CodeTaskFactory\" AssemblyFile=\"$(MSBuildToolsPath)\\Microsoft.Build.Tasks.Core.dll\">\n    <ParameterGroup>\n      <Items ParameterType=\"System.String[]\" Output=\"true\" />\n    </ParameterGroup>\n    <Task>\n      <Code Type=\"Fragment\" Language=\"cs\"><![CDATA[\nItems = new String[]{\"1\", \"2\", \"3\"};\n]]></Code>\n    </Task>\n  </UsingTask>\n\n  <Target Name='Demo'\n          AfterTargets=\"Build\">\n    <Hello>\n      <Output TaskParameter=\"Items\" ItemName=\"Foo\"/>\n    </Hello>\n\n    <Hello>\n      <Output TaskParameter=\"Items\" ItemName=\"Bar\"/>\n    </Hello>\n\n    <Message Text=\"@(Foo->'%(Identity):%(m1)')\" Importance=\"high\"/>\n\n    <Message Text=\"@(Bar->'%(Identity):%(m1)')\" Importance=\"high\"/>\n\n  </Target>\n```\n\nThat thing prints:\n\n```\n1>  a:metadata;1:metadata;2:metadata;3:metadata\n1>  1:;2:;3:\n```\n\n> I think that's up to the task though. What if it wants to remove metadata?\n\nI think it should be an opt-in to reduce potential build bugs, so I'd preserve unchanged metadata and have task writers explicitly remove it if they want to. Though merging metadata will be interesting. There's lots of `//UNDONE:` comments in the msbuild codebase around merging / matching metadata :)\n",
        "createdAt": "2016-07-28T17:48:39Z",
        "updatedAt": "2016-07-28T17:53:01Z",
        "author": {
          "login": "cdmihai"
        }
      },
      {
        "body": "Why is this not working? Result is just empty item group.\r\nIs it possible to make the target which can update existing item group?\r\n\r\n    <Target Name=\"Target1\" AfterTargets=\"AfterBuild\" Outputs=\"%(Item1.Identity)\">\r\n        <GetFrameworkPath>\r\n            <Output TaskParameter=\"Path\" PropertyName=\"SomeValue\" />\r\n        </GetFrameworkPath>\r\n\r\n        <ItemGroup>\r\n            <Item1 Include=\"%(Item1.Identity): $(SomeValue)\" />\r\n            <Item1 Remove=\"%(Item1.Identity)\" />\r\n        </ItemGroup>\r\n    </Target>\r\n\r\n**Updated**\r\nI should make two targets.\r\nIn the first target: I should put new items in the temp group.\r\nIn the second target: I should clear the main group and copy the temp group into the main group.\r\n\r\n    <Target Name=\"Target1\" AfterTargets=\"AfterBuild\" Outputs=\"%(Item1.Identity)\">\r\n        <GetFrameworkPath>\r\n            <Output TaskParameter=\"Path\" PropertyName=\"SomeValue\" />\r\n        </GetFrameworkPath>\r\n        <ItemGroup>\r\n            <Item1_ToInclude Include=\"%(Item1.Identity): $(SomeValue)\" />\r\n        </ItemGroup>\r\n    </Target>\r\n\r\n    <Target Name=\"Target1_After\" AfterTargets=\"Target1\">\r\n        <ItemGroup>\r\n            <Item1 Remove=\"@(Item1)\" />\r\n            <Item1 Include=\"@(Item1_ToInclude)\" />\r\n            <Item1_ToInclude Remove=\"@(Item1_ToInclude)\" />\r\n        </ItemGroup>\r\n    </Target>",
        "createdAt": "2020-10-25T21:50:20Z",
        "updatedAt": "2020-10-26T12:05:01Z",
        "author": {
          "login": "Denis535"
        }
      }
    ]
  }
}