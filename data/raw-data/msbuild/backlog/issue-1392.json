{
  "number": 1392,
  "title": "Implicit top & bottom SDK imports",
  "body": "SDK imports represent the extension mechanism for MSBuild's build framework model: a certain build framework (e.g. UWP, .net core, web, etc) specifies what a build means by using an entry-point `.props` file and an entry-point `.targets` file.\r\n\r\nA particular project implements a specific framework by putting its logic between and around the framework's entry-point imports. Its logic usually particularizes framework values, like the project name, references, etc. A project can implement multiple build frameworks by inserting their specific entry-point SDK imports (e.g. an F# based .net core web project).\r\n\r\nWith the move to .net core's human editable csproj files, the legacy top and bottom imports are no longer desirable, since they feel like magic values that are hard to remember and type from scratch:\r\n\r\n```xml\r\n<Project>\r\n  <Import Project=\"$(MSBuildExtensionsPath)\\$(MSBuildToolsVersion)\\Microsoft.Common.props\" Condition=\"Exists('$(MSBuildExtensionsPath)\\$(MSBuildToolsVersion)\\Microsoft.Common.props')\" />\r\n...\r\n  <Import Project=\"$(MSBuildToolsPath)\\Microsoft.CSharp.targets\" />\r\n\r\n</Project>\r\n```\r\n\r\n# Goals\r\n1. Remove SDK PackageRef\r\n2. Remove entry-point SDK imports\r\n3. Remove `nuget restore` from sdk acquisition\r\n\r\n## Impact on Templates\r\nWith the change in place, the .NET Core Library csproj template would become:\r\n```xml\r\n<Project ToolsVersion=\"15.0\" Sdk=\"Microsoft.NET.Sdk/1.0.0-rc\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netstandard1.4</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <Compile Include=\"**\\*.cs\" />\r\n    <EmbeddedResource Include=\"**\\*.resx\" />\r\n  </ItemGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"NETStandard.Library\" Version=\"1.6\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\n# Risks\r\nImplicit `<Imports>` should not:\r\n- get persisted to disk\r\n- copied during cloning (except if they have an internal flag to mark them as syntactic sugar)\r\n- Potential cache misses in ProjectCollection and ProjectRootElement caches\r\n- Potential weird interaction with ProjectRootElement.Version\r\n\r\n# Design\r\nA new attribute is added to `<Project>` for representing SDKs: `Sdk=\"Microsoft.NET.Sdk/1.0.0-RC\"`.\r\nIn future releases the element is used to assist in the package acquisition experience. In the next release it is used to identify a pre-installed framework to be loaded. Specifically, when MSBuild discovers one of these elements it will inject implicit Imports before and after the current .proj file.\r\n\r\nThis example .csproj file:\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk/1.0.0-RC\" />\r\n  <Target Name=\"SayHi\">\r\n    <Message Text=\"Hello, World\" />\r\n  </Target>\r\n</Project>\r\n```\r\n\r\nIs interepreted by MSBuild as:\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk/1.0.0-RC\" />\r\n  <!-- Import all, in order listed -->\r\n  <Import Project=\"$(MSBuildSDKsPath)\\%(___MSBuildSDK.Name)\\%(___MSBuildSDK.Version)\\build\\InitialImport.props\" \r\n          Condition=\"Exists('$(MSBuildSDKsPath)\\%(___MSBuildSDK.Name)\\%(___MSBuildSDK.Version)\\build\\InitialImport.props')\" />\r\n  \r\n  <Target Name=\"SayHi\">\r\n    <Message Text=\"Hello, World\" />\r\n  </Target>\r\n  \r\n  <!-- Import all, in order listed -->  \r\n  <Import Project=\"$(MSBuildSDKsPath)\\%(___MSBuildSDK.Name)\\%(___MSBuildSDK.Version)\\build\\FinalImport.targets\"\r\n          Condition=\"Exists('$(MSBuildSDKsPath)\\%(___MSBuildSDK.Name)\\%(___MSBuildSDK.Version)\\build\\FinalImport.targets')\" />\r\n</Project>\r\n```\r\n\r\nIf users want to override elements (properties, items, targets, etc) in the implicit imports, they would have to use the explicit form of SDK imports.\r\n\r\nThe implicit SDK imports\r\n```xml\r\n  <Project Sdk=\"Microsoft.FSharp.Web/1.0.0.0\" />  <!-- allows multiple SDK -->\r\n  </Project>\r\n```\r\nare made explicit via the equivalent:\r\n```xml\r\n<Project>\r\n  <user prop here>\r\n  <Import Project=\"Sdk.props\" Sdk=\"Microsoft.NET.Sdk/1.0.0.0\" />\r\n...\r\n  <Import Project=\"Sdk.targets\" Sdk=\"Microsoft.NET.Sdk/1.0.0.0\" />\r\n  <user target here>\r\n</Project>\r\n```\r\n\r\n# Usage Examples\r\n## 1. .NET Core Console App\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk/1.0.0-RC\">\r\n  ...\r\n</Project>\r\n```\r\n## 2. .NET Core Web App\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk/1.0.0-RC;\r\n              Microsoft.Web.Sdk/1.0.0-RC\">\r\n  ...\r\n</Project>\r\n```\r\n\r\n# Potential MSBuildSDKsPath Locations for next release\r\n1. In Visual Studio: `$(MSBuildExtensionsPath)\\.dotnet\\`\r\n2. In CLI, `[ProgramFiles]\\dotnet\\sdk\\{cli_version}\\Extensions\\`\r\n\r\nIn future releases we would use a package manager to tell use where to get them from based on their name & version",
  "state": "CLOSED",
  "createdAt": "2016-11-23T19:41:18Z",
  "updatedAt": "2024-02-21T17:24:01Z",
  "closedAt": "2017-02-10T22:44:34Z",
  "author": {
    "login": "cdmihai"
  },
  "labels": [
    "needs-design",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "rainersigwald"
      }
    ]
  },
  "milestone": {
    "title": "Feature: Sdks"
  },
  "comments": {
    "nodes": [
      {
        "body": "My work-in-progress branch is https://github.com/rainersigwald/msbuild/tree/sdk-imports-virtual-elements.",
        "createdAt": "2016-11-28T17:35:54Z",
        "updatedAt": "2016-11-28T17:35:54Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Splitting out the `<Import Sdk=` part from the implicit part, because for the next prerelease we can fake the final behavior without the SDK-import syntax.",
        "createdAt": "2016-11-28T18:34:14Z",
        "updatedAt": "2016-11-28T18:34:14Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "We had a discussion about the version numbers in the Sdk attribute, and decided not to include them in the templates for the next preview.  So the template for a .NET Core Console app would look like this:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  ...\r\n</Project>\r\n```\r\n\r\nOur plan is to later add support for a \"lineup\" which can specify which versions of Sdks to use.  (This lets it be specified for all projects in a build instead of each project potentially specifying different versions.)  Originally our thinking was that the lineup file would be used if you wanted to specify the exact version of the Sdks to use, while the version in the project file would be a minimum version and only be used to generate an error if the version of an Sdk that was selected was too low.  Now we are thinking that the the lineup file could specify either an exact version or a minimum version.\r\n\r\nCurrent POR is to still allow the version number to be specified in the Sdk attribute, but to ignore it.\r\n\r\nSeparately, we don't want the project file to have to list both the Web and .NET SDK, especially if the ordering between them matters.  In the next preview, our plan is to have the Web SDK import `Sdk.props` and `Sdk.targets` from the .NET SDK using a relative path.  Thus, the .NET Core Web App template becomes:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.Web.Sdk\">\r\n  ...\r\n</Project>\r\n```\r\n\r\nAfter the next preview we should consider how we can support dependencies between SDKs more generally.",
        "createdAt": "2016-11-29T02:14:28Z",
        "updatedAt": "2016-11-29T02:14:28Z",
        "author": {
          "login": "dsplaisted"
        }
      },
      {
        "body": ">We had a discussion about the version numbers in the Sdk attribute, and decided not to include them in the templates for the next preview. \r\n\r\nThat's pretty concerning. Why not start with a version number and find then when the lineup concept lands remove it...\r\n\r\n\r\nHow do these things compose? What does that look like? Does the transitive closure of dependencies need to be splat into the project or can the SDK declare them? Also related, how do we go about composing language specific SDKs:\r\n\r\nMicrosoft.Web.Sdk -> Microsoft.Net.Sdk \r\n\r\n```XML\r\n<Project Sdk=\"Microsoft.Web.Sdk;Microsoft.Net.Sdk\">\r\n  ...\r\n</Project>\r\n```\r\n\r\nF#?\r\n\r\n```XML\r\n<Project Sdk=\"Microsoft.Web.Sdk;Microsoft.Net.FSharp.Sdk;Microsoft.Net.Sdk\">\r\n  ...\r\n</Project>\r\n```\r\n\r\nI'm ignoring the lineup and versioning for now (but I'm also concerned about that).",
        "createdAt": "2016-11-29T02:42:08Z",
        "updatedAt": "2016-11-29T02:42:08Z",
        "author": {
          "login": "davidfowl"
        }
      },
      {
        "body": "I'm generally worried about having to reinvent semantics where they already work and exist today. E.g. \r\n- dependency conflict resolution\r\n- dependency version unification (if any)\r\n- asset resolution\r\n- (insert thing nuget solves here)...\r\n\r\nI also think that \"SDK\" is just another word for \"development dependency\" or most recently \"build time\" dependencies with the added feature that it can be \"pre-installed\". I think we're glossing over acquisition but we'll immediately hit it as soon as we need to ship something outside of the set of pre-installed things that come with the .NET SDK. \r\n\r\n- SDKs depending on other SDKs\r\n- SDKs that want to bring in packages \r\n- packages that would like to bring in SDKs\r\n\r\nBTW I'm using SDK to mean, props and targets (maybe tasks too), because that's all it really is. This still doesn't solve the fact that props and targets coming from nuget packages via PackageReference end up in the same dependency graph as the runtime graph (amongst other problems)...",
        "createdAt": "2016-11-29T03:07:43Z",
        "updatedAt": "2016-11-29T03:07:43Z",
        "author": {
          "login": "davidfowl"
        }
      },
      {
        "body": "Seems the /preprocess output would be unaffected, except you have to decide what it shows in the comments where it currently shows the resolved import tags. What the user typed, what MSBuild inferred, or both? \r\nedit: I just saw https://github.com/Microsoft/msbuild/pull/1428 ",
        "createdAt": "2016-12-03T21:40:39Z",
        "updatedAt": "2016-12-03T21:42:58Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "I tried to be as explicit as possible in the preprocessed output: https://github.com/Microsoft/msbuild/commit/350e21b8f71104bacb1e306289fd5f9be5f6d676. Suggestions welcome!",
        "createdAt": "2016-12-03T21:47:05Z",
        "updatedAt": "2016-12-03T21:47:05Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald looks good!",
        "createdAt": "2016-12-05T05:13:25Z",
        "updatedAt": "2016-12-05T05:13:25Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "I'd like if possibile to have defined some strict and documented points of extensibility (`CoreCompile`, contents, publish) instead of just trying to guess the implementation of another sdk. because that's may change over time.\r\n\r\nAnother concert for me is because the sdk list will grow really fast, the .csproj was cleaned up just to have lot's of lines at start? on multiple lines because that's required to make id readable.\r\nLike @davidfowl said, the sdk are just build time dependencies. Is really not possibile to put these in an ItemGroup? at least can be put on bottom. Just read it as normal xml, to find a specific ItemGroup element, not used by msbuild itself.\r\n\r\nAbout languages a im less worried, because we can just define the target for another language (f# for example) BEFORE the `microsoft.net.sdk`, and prepopulate a property (works already, ref dotnet/cli#4922 ) to hook the language target (who defines `CoreCompile`)",
        "createdAt": "2016-12-05T17:24:13Z",
        "updatedAt": "2016-12-05T17:24:13Z",
        "author": {
          "login": "enricosada"
        }
      },
      {
        "body": "Sdks definitely **cannot** be represented in an ItemGroup, because items are considered well after imports. We could introduce a new top-level XML element to be considered before properties and imports. @jeffkl and I preferred this approach, but many other folks didn't like it.\r\n\r\nI think the main reasons to prefer the attribute were:\r\n* It looks cleaner for simple cases.\r\n* It's intuitive that property expansions (for example for versions) are not allowed (which is required because we have to consider this before properties are defined).",
        "createdAt": "2016-12-05T17:57:48Z",
        "updatedAt": "2016-12-05T17:57:48Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "@rainersigwald i understandard are considered after, but cannot the csproj just be read as normal xml? not with an msbuild evalutation.\r\nDoing it clean for simple cases, it's going to break soon, `mytool.package.sdk/1.0.0-beta-version` is a big string, plus there are multiple sdk (and more to come hopefully), so is going to become split on multiple lines, just at start of project file (really noisy).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk/1.0.0-RC;\r\n              FSharp.NET.Sdk/1.0.0-RC;\r\n              Paket.Sdk/1.0.0-RC;\r\n              UWP.Sdk/1.0.0-alpha4;\r\n              LocalizeMyResources.Sdk/1.0.0-beta;\r\n              My.CI.Integraton.With.Jeknins.Sdk/1.0.0-RC\">\r\n  ...\r\n</Project>\r\n```\r\n\r\nI think property expansion is not an issue, because `$` is not valid for names and version, so can be a normal error reading as normal xml file.\r\n\r\nThe goal is also have a readable project file. Important parts commonly read and changed are compiles (for f# at least), defines, resouces, nuget package attributes, package references.. not the sdks\r\n\r\n",
        "createdAt": "2016-12-05T18:05:10Z",
        "updatedAt": "2016-12-05T18:07:30Z",
        "author": {
          "login": "enricosada"
        }
      },
      {
        "body": "@enricosada I don't think in common scenarios there will be more than one or two Sdks referenced.  NuGet packages are still a valid way of providing props and targets files that extend the build.  The benefit of Sdks is that they help get rid of the imports that previously had to go at the top and bottom of your project file, and that the Sdks imports are available before package restore has completed (which lets us avoid situations where you create a project in Visual Studio and see a bunch of error messages until the restore operation completes).\r\n\r\nFrom your example, localization and CI integration sound like they should probably be NuGet packages.  I would expect that the FSharp and UWP Sdks would depend on the base .NET one, so you wouldn't need to list Microsoft.NET.Sdk either.  And finally, we are still considering whether the version number should be expressed in each project file or whether it should be left out and defined elsewhere globally for your build.  So your project is more likely to look something like this:\r\n\r\n```xml\r\n<Project Sdk=\"FSharp.NET.Sdk;\r\n              Paket.Sdk;\r\n              UWP.Sdk\">\r\n  ...\r\n  <ItemGroup>\r\n    <PackageReference Include=\"LocalizeMyResources\" Version=\"1.0.0-beta\" />\r\n    <PackageReference Include=\"My.CI.Integration.With.Jenkins\" Version=\"1.0.0-RC\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nWe do need to figure out when we recommend using Sdks versus NuGet packages, and write up guidance about it (#1439).\r\n\r\nI would also like to consider using simpler names for the Sdks, such as described in dotnet/sdk#436.  This would enable the Sdk references to look something like this:\r\n\r\n```xml\r\n<Project Sdk=\"F#;Paket;UWP\">\r\n  ...\r\n</Project>\r\n```\r\n\r\nEDIT: I *said* that you shouldn't need to refer to the .NET Sdk if you used FSharp or UWP, but then I left it in the samples I gave.  I've taken it out now.",
        "createdAt": "2016-12-05T18:26:38Z",
        "updatedAt": "2016-12-05T18:48:24Z",
        "author": {
          "login": "dsplaisted"
        }
      },
      {
        "body": "@dsplaisted \ud83d\udc4d  about aliases + per repo (i hope per repo, not global) sdk versions. That's enough to fix my issues. Thank for the answer!\r\n\r\n",
        "createdAt": "2016-12-05T18:49:16Z",
        "updatedAt": "2016-12-05T18:49:16Z",
        "author": {
          "login": "enricosada"
        }
      },
      {
        "body": "My two cents-\r\n- Build time dependencies SDKs or tools can use same nuget mechanism, but use a separate myget-like repository maintained by MSBuild.\r\n- The difference between SDKs and tools need not to be explicit.\r\n- All build time dependencies should be installed globally.\r\n- Dotnet cli tools can merge with MSBuild tools in future, given similar API support in MSBuild.\r\n\r\nWe should take a look at other successful ecosystems and build frameworks for ideas and inspiration. In particular, I have some reservation for gradle- #1289 ",
        "createdAt": "2016-12-07T13:52:19Z",
        "updatedAt": "2016-12-07T13:52:19Z",
        "author": {
          "login": "gulshan"
        }
      },
      {
        "body": "Holy moses I was about lay the smackdown on whoever tagged this issue as \"needs design\" but then I realize that it was the author. \ud83d\ude06  What an incredible issue/post, @cdmihai!  Well done.  It should be used as a template going forward for all new suggestions, if it isn't already. \ud83d\udc4d ",
        "createdAt": "2016-12-07T14:02:45Z",
        "updatedAt": "2016-12-07T14:02:45Z",
        "author": {
          "login": "Mike-E-angelo"
        }
      },
      {
        "body": "> All build time dependencies should be installed globally\r\n\r\nLet's not repeat msbuild errors. Build time deps are **per repository**. Noone remember the pain of install msbuild deps on ci server or machine?\r\n\r\nAlso sdk vs normal package doesnt need a special nuget server, packages can be filtered on search with attributes",
        "createdAt": "2016-12-07T14:06:42Z",
        "updatedAt": "2016-12-07T14:06:42Z",
        "author": {
          "login": "enricosada"
        }
      },
      {
        "body": "As of #1400 / #1492, the `<Project Sdk=\"\">` experience is as described in this issue.",
        "createdAt": "2017-02-10T22:44:34Z",
        "updatedAt": "2017-02-10T22:44:34Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Really great work, everyone.  Very impressed with the improvements and how those files are looking these days. \ud83d\udc4d ",
        "createdAt": "2017-02-11T04:51:52Z",
        "updatedAt": "2017-02-11T04:51:52Z",
        "author": {
          "login": "Mike-E-angelo"
        }
      }
    ]
  }
}