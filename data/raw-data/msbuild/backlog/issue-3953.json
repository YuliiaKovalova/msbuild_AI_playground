{
  "number": 3953,
  "title": "Communication between VS -> MSBuild is pushing 6% (100MB) of allocations onto the LOH",
  "body": "We're attempting to quadruple the number of projects that the project system can open, while at same reducing solution load time. Reducing GC time is an important part of that.\r\n\r\nIn one trace where we are opening 780 projects, I'm seeing ~50 MB pushed on the large object heap (LOH) during the communication between VS and MSBuild.\r\n\r\nIt would reduce the amount of data we pushed on the LOH (and forced Gen2 collection) if we chunked this data up into arrays that were less than 85K.\r\n\r\nGC Rollup By Generation\r\n--\r\nGen | Count | MaxPause | MaxPeak MB | Max AllocMB/sec | TotalPause | TotalAlloc MB | Alloc MB/MSec GC | Survived MB/MSec GC | MeanPause | Induced\r\n-- | -- | -- | -- | -- | -- | -- | -- | -- | -- | --\r\nALL | 426 | 741.5 | 4,106.9 | 1,112.349 | 9,601.4 | 2,118.8 | 0.2 | 0.269 | 22.5 | 7\r\n0 | 282 | 35.3 | 2,087.1 | 1,112.349 | 3,548.3 | 1,389.3 | 1.7 | 0.029 | 12.6 | 0\r\n1 | 138 | 63.7 | 4,106.9 | 396.323 | 2,764.4 | 709.1 | 1.3 | 0.025 | 20.0 | 1\r\n2 | 6 | 741.5 | 2,070.8 | 10.006 | 3,288.7 | 20.3 | 1.6 | 0.369 | 548.1 | 6\r\n\r\n![image](https://user-images.githubusercontent.com/1103906/48874311-c3820680-ee46-11e8-975c-fbf871545d96.png)\r\n\r\n![image](https://user-images.githubusercontent.com/1103906/48874771-0d6bec00-ee49-11e8-9570-a79c1400ca3b.png)",
  "state": "CLOSED",
  "createdAt": "2018-11-22T00:21:39Z",
  "updatedAt": "2024-02-21T17:10:22Z",
  "closedAt": "2021-11-16T14:01:31Z",
  "author": {
    "login": "davkean"
  },
  "labels": [
    "Area: Performance",
    "Area: Engine",
    "Priority:2",
    "triaged"
  ],
  "assignees": {
    "nodes": [
      {
        "login": "benvillalobos"
      },
      {
        "login": "ladipro"
      }
    ]
  },
  "milestone": {
    "title": "VS 17.0"
  },
  "comments": {
    "nodes": [
      {
        "body": "Here's a trace for 520 projects (above is for 780), similar problem:\r\n\r\n![image](https://user-images.githubusercontent.com/1103906/48929626-a29cdc80-ef3e-11e8-9017-4fe4cdaaf7f6.png)\r\n",
        "createdAt": "2018-11-23T05:41:37Z",
        "updatedAt": "2018-11-23T05:41:37Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "Here's a trace that allocates 25% of all allocations during solution load on the LOH due to MSBuild:\r\n\r\n![image](https://user-images.githubusercontent.com/1103906/51301053-faa91880-1a81-11e9-9c44-97e93dd312b6.png)\r\n",
        "createdAt": "2019-01-17T07:02:00Z",
        "updatedAt": "2019-01-17T07:02:00Z",
        "author": {
          "login": "davkean"
        }
      },
      {
        "body": "@BenVillalobos can you check current relevance of this after the latest project system changes?",
        "createdAt": "2019-10-07T20:22:57Z",
        "updatedAt": "2019-10-07T20:22:57Z",
        "author": {
          "login": "rainersigwald"
        }
      },
      {
        "body": "Maybe the stream passed to BinaryWriter could be some custom (subclass of?) MemoryStream that allocated in sizes that are more friendly to the LOH (?)",
        "createdAt": "2019-10-07T23:04:30Z",
        "updatedAt": "2019-10-07T23:04:30Z",
        "author": {
          "login": "danmoseley"
        }
      },
      {
        "body": "Labeling with size:1 as the cost of the initial investigation. Will open a follow-up issue if more work is identified.",
        "createdAt": "2021-10-12T12:35:57Z",
        "updatedAt": "2021-10-12T12:35:57Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "Code inspection:\r\n- Buffers allocated in `NodeProviderOutOfProcBase` were optimized and short-lived LOH allocations eliminated in #6023.\r\n- `InterningBinaryReader.ReadString` was optimized in #5663 (eliminated the StringBuilder), and #6556 and #6705 (implemented buffer pooling).\r\n\r\nWe should be much better off now. Let's measure.",
        "createdAt": "2021-11-16T11:43:51Z",
        "updatedAt": "2021-11-16T11:43:51Z",
        "author": {
          "login": "ladipro"
        }
      },
      {
        "body": "Confirmed by recording a trace opening a 1000 project solution in 17.1.0 Preview 2.0 [31915.365.main.\r\n- ~2 MB worth of LOH `char[]` allocations coming from the `InterningBinaryReader`.\r\n- No `byte[]` LOH allocations coming from MSBuild.\r\n\r\n![image](https://user-images.githubusercontent.com/12206368/141999224-f77a2d88-d021-4fad-a959-b43beb01ef90.png)\r\n\r\n",
        "createdAt": "2021-11-16T14:01:31Z",
        "updatedAt": "2021-11-16T14:01:31Z",
        "author": {
          "login": "ladipro"
        }
      }
    ]
  }
}