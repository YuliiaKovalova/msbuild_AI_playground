{
  "number": 5841,
  "title": "Getting different result when running \"/t:Restore\" vs \"/Restore\"",
  "body": "### Issue Description\r\n`/t:Restore` gives me a different result than `/restore`\r\n\r\nIf we are building a csproj where we have included the nuget package \"MSTest.TestAdapter\" it will not include that packages dlls in the projects bin folder. If we have once before built the project without clearing the obj folder the result differs and all the dlls are there.\r\n\r\nWhen we then try to run our tests it wont find any since the adapter is not present.\r\nTho if we have a csproj that includes another csproj that has \"MSTest.TestAdapter\" as a nuget package it will work as expected every build. Also if building the sln it works as expected.\r\n\r\n### Steps to Reproduce\r\nhttps://github.com/AlexanderRydberg/adapterTest\r\nbuilding from ps with msbuild:\r\n\r\n```\r\n$msbuild = \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\MSBuild\\Current\\Bin\\MSBuild.exe\"\r\n$collectionOfArgs = @(\"C:\\GitHub\\adapterTest\\Tickster.Core.Tests.csproj\", \r\n     \"/t:Restore;Rebuild\", \"/p:Configuration=Release\")\r\n& $msbuild $collectionOfArgs\r\n```\r\nCheck /bin/Release/ and it wont contain the mstestadapter dlls\r\nRun the same ps script again without clearing /obj/ and /bin/Release/ will contain all the files\r\n\r\n### Expected Behavior\r\nThese files should be copied to /bin/Release:\r\nMicrosoft.VisualStudio.TestPlatform.MSTest.TestAdapter.dll\r\nMicrosoft.VisualStudio.TestPlatform.MSTestAdapter.PlatformServices.dll\r\nMicrosoft.VisualStudio.TestPlatform.MSTestAdapter.PlatformServices.Interface.dll\r\nMicrosoft.VisualStudio.TestPlatform.TestFramework.dll\r\nMicrosoft.VisualStudio.TestPlatform.TestFramework.Extensions.dll\r\nTickster.Core.Tests.dll\r\nTickster.Core.Tests.pdb\r\n\r\n### Actual Behavior\r\nOnly these end up in /bin/Release unless it has been built before and /obj/ is not cleared. Meaning if you run the build twice, the dlls are all there (but thats a bit ineffective).\r\nMicrosoft.VisualStudio.TestPlatform.TestFramework.dll\r\nMicrosoft.VisualStudio.TestPlatform.TestFramework.Extensions.dll\r\nTickster.Core.Tests.dll\r\nTickster.Core.Tests.pdb\r\n\r\n### Analysis\r\nIf I instead run:\r\n```\r\n$msbuild = \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\MSBuild\\Current\\Bin\\MSBuild.exe\"\r\n$collectionOfArgs = @(\"C:\\GitHub\\adapterTest\\Tickster.Core.Tests.csproj\", \r\n     \"/t:Rebuild\", \"/p:Configuration=Release\", \"/restore\")\r\n& $msbuild $collectionOfArgs\r\n```\r\nit works as expected. But why?\r\n\r\n### Versions & Configurations\r\nMSBuild version: 16.7.0.37604\r\nWindows 10\r\n",
  "state": "CLOSED",
  "createdAt": "2020-10-29T08:53:45Z",
  "updatedAt": "2020-11-11T17:24:20Z",
  "closedAt": "2020-11-11T17:24:20Z",
  "author": {
    "login": "AlexanderRydberg"
  },
  "labels": [
    "bug",
    "needs-triage"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "I suppose that `/restore` first runs your project with the `Restore` target, and then it runs it again with the targets you specified, while adding `/t:Restore` to your targets restores and builds the project at the same invocation.\r\n\r\nThe results differ because MSBuild will evaluate a restored project differently. For example, a restored project might import target files from the `build` directory of one of its dependencies.",
        "createdAt": "2020-11-04T23:16:27Z",
        "updatedAt": "2020-11-04T23:16:27Z",
        "author": {
          "login": "teo-tsirpanis"
        }
      },
      {
        "body": "Team Triage: This issue is why the `/Restore` exists now. Doing `/t:Restore;Rebuild` has the `Rebuild` target discover only what existed at the time `Restore` also ran, without finding what `Restore` generated.",
        "createdAt": "2020-11-11T17:24:20Z",
        "updatedAt": "2020-11-11T17:24:20Z",
        "author": {
          "login": "benvillalobos"
        }
      }
    ]
  }
}