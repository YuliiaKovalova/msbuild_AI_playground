{
  "number": 5375,
  "title": "64-bit node processes load MSBuild binaries from 32-bit location",
  "body": "Have a 64-bit process that uses MSBuild locator to load 64-bit MSBuild and do a multiproc build. It will create MSBuild.exe processes from `C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\\MSBuild\\Current\\Bin\\amd64\\MSBuild.exe`, but those processes will load MSBuild binaries from: `C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\\MSBuild\\Current\\Bin\\Microsoft.Build.Framework.dll`\r\n\r\nSince the central process is loading binaries from `C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\\MSBuild\\Current\\Bin\\amd64\\Microsoft.Build.Framework.dll`, there's a mismatch which results in an exception:\r\n\r\n```\r\nMicrosoft.Build.Exceptions.BuildAbortedException: Build was canceled. Failed to successfully launch or connect to a child MSBuild.exe process. Verify that the MSBuild.exe \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\\MSBuild\\Current\\Bin\\amd64\\MSBuild.exe\" launches successfully, and that it is loading the same microsoft.build.dll that the launching process loaded. If the location seems incorrect, try specifying the correct location in the BuildParameters object, or with the MSBUILD_EXE_PATH environment variable.\r\n   at bool Microsoft.Build.BackEnd.NodeProviderOutOfProc.CreateNode(int nodeId, INodePacketFactory factory, NodeConfiguration configuration)\r\n   at string Microsoft.Ide.Shell.ExceptionLogger.GetExceptionText(Exception ex) in C:/Ide/src/Microsoft.Ide.Shell/Exceptions/ExceptionLogger.cs:line 258\r\n   at Boxed System.Lazy<T>.CreateValue()\r\n   at T System.Lazy<T>.LazyInitValue()\r\n   at void Microsoft.Ide.Shell.ExceptionLogger.Report(Exception ex, string title, ExceptionKind exceptionKind) in C:/Ide/src/Microsoft.Ide.Shell/Exceptions/ExceptionLogger.cs:line 127\r\n   at bool Microsoft.Build.BackEnd.NodeProviderOutOfProc.CreateNode(int nodeId, INodePacketFactory factory, NodeConfiguration configuration)\r\n   at int Microsoft.Build.BackEnd.NodeManager.AttemptCreateNode(INodeProvider nodeProvider, NodeConfiguration nodeConfiguration)\r\n   at NodeInfo Microsoft.Build.BackEnd.NodeManager.CreateNode(NodeConfiguration configuration, NodeAffinity nodeAffinity)\r\n   at void Microsoft.Build.Execution.BuildManager.PerformSchedulingActions(IEnumerable<ScheduleResponse> responses)\r\n   at void Microsoft.Build.Execution.BuildManager.IssueBuildSubmissionToScheduler(BuildSubmission submission, bool allowMainThreadBuild)\r\n   at void Microsoft.Build.Execution.BuildManager.ExecuteSubmission(BuildSubmission submission, bool allowMainThreadBuild)+() => { }\r\n   at void Microsoft.Build.Execution.BuildManager.ProcessWorkQueue(Action action)\r\n```\r\n\r\nThis started happening after an update to VS 16.6.0. It was not happening with VS 16.5.4 or earlier.",
  "state": "CLOSED",
  "createdAt": "2020-05-26T05:35:55Z",
  "updatedAt": "2024-02-21T17:03:43Z",
  "closedAt": "2020-06-04T20:34:11Z",
  "author": {
    "login": "KirillOsenkov"
  },
  "labels": [
    "regression",
    "triaged"
  ],
  "assignees": {
    "nodes": []
  },
  "milestone": null,
  "comments": {
    "nodes": [
      {
        "body": "I've changed the 64-bit process to load Microsoft.Build.dll from the 32-bit location and all is well again.\r\n\r\nBut why did it only break recently? How did it work fine all this time?",
        "createdAt": "2020-05-26T06:04:05Z",
        "updatedAt": "2020-05-26T06:04:05Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "![image](https://user-images.githubusercontent.com/679326/82865677-2a6cf980-9edc-11ea-90a9-e1cb5e9f1b1b.png)\r\n",
        "createdAt": "2020-05-26T06:05:04Z",
        "updatedAt": "2020-05-26T06:05:04Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "never mind, it still doesn't work. If I load Microsoft.Build.dll from the 32-bit location, it starts 32-bit nodes and also fails. Not sure why I thought it was intermittently working.",
        "createdAt": "2020-05-26T06:27:13Z",
        "updatedAt": "2020-05-26T06:27:13Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "OK I've found the problem. The handshake process uses a long value for client and host, that is derived from... drumroll... the LastWriteTime of Microsoft.Build.dll:\r\n\r\nhttps://github.com/microsoft/msbuild/blob/ba9a1d64a7abf15a8505827c00413156a3eb7f62/src/Build/Resources/Constants.cs#L171\r\n\r\nIf you are a 64-bit process that hosts MSBuild and you're using it to spawn node processes, which are also 64-bit, you're going to run into this issue. The node processes still load Microsoft.Build.dll from the 32-bit location. Your central process loads Microsoft.Build.dll from `amd64`. If the timestamp on both files is different, the nodes won't be able to connect.\r\n\r\nApparently we've been lucky all this time (e.g. 16.5.4) because the timestamp on both files was the same.\r\n\r\nHowever now in 16.6 they're off by 0:00:00:02.8585535 seconds.\r\n![image](https://user-images.githubusercontent.com/679326/82962901-5ccb3500-9f76-11ea-9734-e6019a5de151.png)\r\n",
        "createdAt": "2020-05-27T00:28:53Z",
        "updatedAt": "2020-05-27T00:28:53Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "@KirillOsenkov that is some very good detective work",
        "createdAt": "2020-05-27T01:43:54Z",
        "updatedAt": "2020-05-27T01:43:54Z",
        "author": {
          "login": "SimonCropp"
        }
      },
      {
        "body": "Now I'm not even sure if it's a regression or not. On one hand, nothing changed in the source in the past 5 years that caused this (it's always been like this). On the other hand, the timestamps are now different due to a fluke in copying speeds and timings, so it is now broken, but it wasn't broken before?\r\n\r\nHere are a couple PRs that touch this area recently but didn't cause this:\r\nhttps://github.com/microsoft/msbuild/pull/4162\r\nhttps://github.com/microsoft/msbuild/pull/5196",
        "createdAt": "2020-05-27T02:12:10Z",
        "updatedAt": "2020-05-27T02:12:10Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "Here's one way that I think could fix it:\r\nhttps://github.com/microsoft/msbuild/pull/5379\r\n\r\nAnother one would be something like this:\r\n\r\n```\r\nPath.Combine(BuildEnvironmentHelper.Instance.MSBuildToolsDirectory32, \"Microsoft.Build.dll\").ToLowerInvariant().GetHashCode()\r\n```",
        "createdAt": "2020-05-27T02:21:50Z",
        "updatedAt": "2020-05-27T02:21:50Z",
        "author": {
          "login": "KirillOsenkov"
        }
      },
      {
        "body": "Would this be an appropriate use of the [module version id](https://docs.microsoft.com/en-us/dotnet/api/system.reflection.module.moduleversionid?view=netcore-3.1)? (Edit: I realized later it wouldn't be very useful in this scenario.)\r\n\r\n[Roslyn uses it](https://github.com/dotnet/roslyn/blob/1113a88fd4ae089e151059bda1e6ab214d9c8c4a/src/Compilers/Server/VBCSCompiler/AnalyzerConsistencyChecker.cs#L97-L101) to check if the analyzer assembly it has loaded matches the assembly on disk.\r\n\r\n--------------\r\n\r\n> `Path.Combine(BuildEnvironmentHelper.Instance.MSBuildToolsDirectory32, \"Microsoft.Build.dll\").ToLowerInvariant().GetHashCode()`\r\n\r\n[String hash codes are randomized per appdomain](https://github.com/dotnet/runtime/issues/26779#issuecomment-404284057), so this wouldn't work unless I'm missing something.",
        "createdAt": "2020-05-27T16:33:56Z",
        "updatedAt": "2020-05-28T16:46:03Z",
        "author": {
          "login": "PathogenDavid"
        }
      },
      {
        "body": "Yes, MVID is ideal for this scenario, I collect various ways to read the MVID here:\r\nhttps://github.com/KirillOsenkov/MetadataTools/blob/master/README.md#reading-an-assembly-mvid\r\n\r\nYes, you're right, string.GetHashCode() wouldn't work here, so we'd need MD5 or SHA1/256.\r\n\r\nHopefully my PR 5379 is good enough, as it reads the Git SHA from the AssemblyInformationalVersion. Probably as good as the MVID.\r\n",
        "createdAt": "2020-05-27T18:24:05Z",
        "updatedAt": "2020-05-27T18:24:05Z",
        "author": {
          "login": "KirillOsenkov"
        }
      }
    ]
  }
}